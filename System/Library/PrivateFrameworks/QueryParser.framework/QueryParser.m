void QP::U2Parser::preheat(QP::U2Parser *this)
{
  id v2;
  NSLocale *v3;
  NSObject *v4;
  void *v5;
  int v6;
  void *v7;
  id v8;
  NSLocale *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = *(id *)(*((_QWORD *)this + 10) + 104);
  if (QP::isSupportedQULocale((QP *)v2, v3))
  {
    if (u2ParserLogger(void)::token != -1)
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
    v4 = (id)u2ParserLogger(void)::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(v2, "localeIdentifier");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138412290;
      v13 = v5;
      _os_log_impl(&dword_218E10000, v4, OS_LOG_TYPE_DEFAULT, "[QPNLU] Preheat QU model for locale: %@", (uint8_t *)&v12, 0xCu);

    }
    v6 = *(char *)(*((_QWORD *)this + 10) + 36);
    objc_msgSend(MEMORY[0x24BE7BEA8], "sharedInstance");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (id)objc_msgSend(v7, "getModelForLocale:withTimeoutMS:", v2, -v6);

    if (QP::isSupportedECRLocale((QP *)v2, v9))
    {
      if (*(_BYTE *)(*((_QWORD *)this + 10) + 55))
        +[QPInProcessECRClient sharedClient](QPInProcessECRClient, "sharedClient");
      else
        +[QPXPCECRClient sharedClient](QPXPCECRClient, "sharedClient");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = v10;
      if (*(_BYTE *)(*((_QWORD *)this + 10) + 36))
        objc_msgSend(v10, "warmUpSync");
      else
        objc_msgSend(v10, "warmUpAsync");

    }
  }

}

void sub_218E119C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t QP::isSupportedECRLocale(QP *this, NSLocale *a2)
{
  void *v2;
  uint64_t v3;

  -[QP localeIdentifier](this, "localeIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "length"))
  {
    if (QP::isSupportedECRLocale(NSLocale *)::onceToken != -1)
      dispatch_once(&QP::isSupportedECRLocale(NSLocale *)::onceToken, &__block_literal_global_40);
    v3 = objc_msgSend((id)QP::isSupportedECRLocale(NSLocale *)::supportedLocaleIdentifiers, "containsObject:", v2);
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_218E11A80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t QP::isSupportedQULocale(QP *this, NSLocale *a2)
{
  void *v2;
  uint64_t v3;

  -[QP localeIdentifier](this, "localeIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "length"))
  {
    if (QP::isSupportedQULocale(NSLocale *)::onceToken != -1)
      dispatch_once(&QP::isSupportedQULocale(NSLocale *)::onceToken, &__block_literal_global_8);
    v3 = objc_msgSend((id)QP::isSupportedQULocale(NSLocale *)::supportedLocaleIdentifiers, "containsObject:", v2);
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_218E11B08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_218E12000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_0_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void OUTLINED_FUNCTION_0_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 2u);
}

void OUTLINED_FUNCTION_0_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_0_3(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void OUTLINED_FUNCTION_0_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

os_log_t ___ZL12parserLoggerv_block_invoke()
{
  const char *v0;
  os_log_t result;

  v0 = _nlpLoggingSubsystem();
  result = os_log_create(v0, "QueryParserEngine");
  parserLogger(void)::log = (uint64_t)result;
  return result;
}

const char *_nlpLoggingSubsystem()
{
  return "com.apple.spotlight.QueryParser";
}

void QP::Parser::preheat(QP::Parser *this)
{
  uint64_t v2;
  QP::U2Parser *v3;
  QP::LLMParser *v4;

  v2 = *(_QWORD *)this;
  if (*(_BYTE *)(*(_QWORD *)this + 53))
  {
    v3 = (QP::U2Parser *)*((_QWORD *)this + 6);
    if (v3)
    {
      QP::U2Parser::preheat(v3);
      v2 = *(_QWORD *)this;
    }
  }
  if (*(_BYTE *)(v2 + 54))
  {
    v4 = (QP::LLMParser *)*((_QWORD *)this + 8);
    if (v4)
      QP::LLMParser::preheat(v4);
  }
}

void QPQueryParserPreheat(uint64_t a1)
{
  QP::Parser **v1;

  if (a1)
  {
    v1 = *(QP::Parser ***)(a1 + 24);
    if (v1)
      QP::QueryParserEngine::preheat(v1);
  }
}

_QWORD *QP::Embedder::Embedder(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a1[2] = 0;
  startEmbeddingService();
  return a1;
}

void sub_218E12338(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void **v2;

  nlp::CFScopedPtr<__CFData const*>::reset(v2, 0);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void QP::Embedder::preheat(QP::Embedder *this)
{
  NSObject *v2;
  os_signpost_id_t v3;
  os_signpost_id_t v4;
  NSObject *v5;
  os_signpost_id_t v6;
  os_signpost_id_t v7;
  uint8_t v8[16];
  uint8_t buf[16];

  if (embeddingLogger(void)::token != -1)
    dispatch_once(&embeddingLogger(void)::token, &__block_literal_global);
  v2 = embeddingLogger(void)::log;
  v3 = os_signpost_id_generate((os_log_t)embeddingLogger(void)::log);
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v4 = v3;
    if (os_signpost_enabled(v2))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_218E10000, v2, OS_SIGNPOST_INTERVAL_BEGIN, v4, "Embedder::preheat:start", "", buf, 2u);
    }
  }
  if (*(_BYTE *)(*(_QWORD *)this + 36))
    embeddingGeneratorPreheatSync();
  else
    embeddingGeneratorPreheatAsync();
  if (embeddingLogger(void)::token != -1)
    dispatch_once(&embeddingLogger(void)::token, &__block_literal_global);
  v5 = embeddingLogger(void)::log;
  v6 = os_signpost_id_generate((os_log_t)embeddingLogger(void)::log);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v7 = v6;
    if (os_signpost_enabled(v5))
    {
      *(_WORD *)v8 = 0;
      _os_signpost_emit_with_name_impl(&dword_218E10000, v5, OS_SIGNPOST_INTERVAL_END, v7, "Embedder::preheat:end", "", v8, 2u);
    }
  }
}

BOOL QP::Embedder::shouldEmbedScript(QP::Embedder *this, CFAttributedStringRef aStr)
{
  const __CFString *String;
  _BOOL8 v4;
  const __CFLocale *v5;
  const __CFCharacterSet *Value;
  __CFCharacterSet *MutableCopy;
  const __CFCharacterSet *Predefined;
  const __CFCharacterSet *v9;
  const __CFCharacterSet *v10;
  uint64_t Length;
  uint64_t v12;
  UniChar *v13;
  uint64_t v14;
  uint64_t v15;
  int IsCharacterMember;
  _QWORD v18[2];
  CFRange v19;

  v18[1] = *MEMORY[0x24BDAC8D0];
  String = CFAttributedStringGetString(aStr);
  v4 = (_BOOL8)String;
  if (String)
  {
    if (CFStringGetLength(String)
      && (v5 = *(const __CFLocale **)(*(_QWORD *)this + 104)) != 0
      && (Value = (const __CFCharacterSet *)CFLocaleGetValue(v5, (CFLocaleKey)*MEMORY[0x24BDBD400])) != 0)
    {
      MutableCopy = CFCharacterSetCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], Value);
      Predefined = CFCharacterSetGetPredefined(kCFCharacterSetWhitespaceAndNewline);
      CFCharacterSetUnion(MutableCopy, Predefined);
      v9 = CFCharacterSetGetPredefined(kCFCharacterSetDecimalDigit);
      CFCharacterSetUnion(MutableCopy, v9);
      v10 = CFCharacterSetGetPredefined(kCFCharacterSetPunctuation);
      CFCharacterSetUnion(MutableCopy, v10);
      Length = CFStringGetLength((CFStringRef)v4);
      MEMORY[0x24BDAC7A8](Length);
      v13 = (UniChar *)((char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
      v19.location = 0;
      v19.length = Length;
      CFStringGetCharacters((CFStringRef)v4, v19, v13);
      if (Length < 1)
      {
        v4 = 1;
      }
      else if (CFCharacterSetIsCharacterMember(MutableCopy, *v13))
      {
        v14 = 1;
        do
        {
          v15 = v14;
          if (Length == v14)
            break;
          IsCharacterMember = CFCharacterSetIsCharacterMember(MutableCopy, v13[v14]);
          v14 = v15 + 1;
        }
        while (IsCharacterMember);
        v4 = Length <= v15;
      }
      else
      {
        v4 = 0;
      }
      CFRelease(MutableCopy);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

BOOL QP::Embedder::shouldEmbedLanguage(QP::Embedder *this, const __CFDictionary *a2)
{
  return *(_BYTE *)(*(_QWORD *)this + 36) || languageSupportedForEmbedding(a2) != 0;
}

BOOL QP::Embedder::shouldEmbedString(QP::Embedder *this, CFStringRef theString)
{
  return theString && CFStringGetLength(theString) > 2;
}

void QP::Embedder::setAttributedString(const void **this, const __CFAttributedString *a2, const __CFDictionary *a3)
{
  const void **v5;
  NSObject *v6;
  os_signpost_id_t v7;
  os_signpost_id_t v8;
  const void *v9;
  NSObject *v10;
  os_signpost_id_t v11;
  os_signpost_id_t v12;
  uint8_t v13[16];
  uint8_t buf[16];

  v5 = this + 2;
  nlp::CFScopedPtr<__CFData const*>::reset(this + 2, 0);
  if (embeddingLogger(void)::token != -1)
    dispatch_once(&embeddingLogger(void)::token, &__block_literal_global);
  v6 = embeddingLogger(void)::log;
  v7 = os_signpost_id_generate((os_log_t)embeddingLogger(void)::log);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v8 = v7;
    if (os_signpost_enabled(v6))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_218E10000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v8, "Embedder::Begin", "", buf, 2u);
    }
  }
  v9 = (const void *)copyEmbeddingDataForAttributedQuery(a2, a3);
  nlp::CFScopedPtr<__CFData const*>::reset(v5, v9);
  if (embeddingLogger(void)::token != -1)
    dispatch_once(&embeddingLogger(void)::token, &__block_literal_global);
  v10 = embeddingLogger(void)::log;
  v11 = os_signpost_id_generate((os_log_t)embeddingLogger(void)::log);
  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v12 = v11;
    if (os_signpost_enabled(v10))
    {
      *(_WORD *)v13 = 0;
      _os_signpost_emit_with_name_impl(&dword_218E10000, v10, OS_SIGNPOST_INTERVAL_END, v12, "Embedder::End", "", v13, 2u);
    }
  }
}

void QP::Embedder::clear(const void **this)
{
  nlp::CFScopedPtr<__CFData const*>::reset(this + 2, 0);
}

void nlp::CFScopedPtr<__CFData const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void QP::Embedder::cancelWithQueryID(QP::Embedder *this, uint64_t a2)
{
  embeddingGeneratorCancelWithQueryID(a2);
}

os_log_t ___ZL15embeddingLoggerv_block_invoke()
{
  const char *v0;
  os_log_t result;

  v0 = _nlpLoggingSubsystem();
  result = os_log_create(v0, "QueryParserEmbedding");
  embeddingLogger(void)::log = (uint64_t)result;
  return result;
}

uint64_t std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_218E13604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,void *a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  _Unwind_Resume(a1);
}

BOOL QP::startswith(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  BOOL v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v2 = (char)a2[23];
  v3 = v2 < 0;
  if (v2 >= 0)
    v4 = a2;
  else
    v4 = *(unsigned __int8 **)a2;
  if (v3)
    v5 = *((_QWORD *)a2 + 1);
  else
    v5 = a2[23];
  v6 = &v4[v5];
  if (v5)
  {
    if ((a1[23] & 0x80u) == 0)
      v7 = a1;
    else
      v7 = *(unsigned __int8 **)a1;
    while (*v4 == *v7)
    {
      ++v4;
      ++v7;
      if (!--v5)
      {
        v4 = v6;
        return v4 == v6;
      }
    }
  }
  return v4 == v6;
}

BOOL QP::endswith(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  _BOOL8 result;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  int v14;

  v2 = *((unsigned __int8 *)a2 + 23);
  if ((v2 & 0x80u) == 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = a2[1];
  v4 = *((unsigned __int8 *)a1 + 23);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = a1[1];
  if (v3 > v4)
    return 0;
  v7 = (char)v2;
  v8 = (uint64_t *)((char *)a2 + v2);
  if (v7 >= 0)
  {
    v9 = a2;
  }
  else
  {
    v8 = (uint64_t *)(*a2 + a2[1]);
    v9 = (uint64_t *)*a2;
  }
  if (v5 >= 0)
    v10 = a1;
  else
    v10 = (uint64_t *)*a1;
  v11 = (unsigned __int8 *)v10 + v4 - 1;
  do
  {
    result = v8 == v9;
    if (v8 == v9)
      break;
    v13 = *((unsigned __int8 *)v8 - 1);
    v8 = (uint64_t *)((char *)v8 - 1);
    v12 = v13;
    v14 = *v11--;
  }
  while (v12 == v14);
  return result;
}

BOOL QP::equals(_QWORD *a1, _QWORD *a2)
{
  int v2;
  int v3;
  size_t v4;
  size_t v5;
  size_t v6;
  _BOOL4 v7;

  v2 = *((char *)a2 + 23);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  if (v3 < 0)
    a1 = (_QWORD *)*a1;
  if (v2 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = a2[1];
  if (v2 < 0)
    a2 = (_QWORD *)*a2;
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6) == 0;
  return v5 == v4 && v7;
}

CFStringRef QP::createCFStringFromString(uint64_t a1)
{
  const UInt8 *v1;
  CFIndex v2;

  v1 = (const UInt8 *)a1;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v2 = *(unsigned __int8 *)(a1 + 23);
    if (!*(_BYTE *)(a1 + 23))
      return &stru_24DA27910;
    return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], v1, v2, 0x8000100u, 0);
  }
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v1 = *(const UInt8 **)a1;
    return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], v1, v2, 0x8000100u, 0);
  }
  return &stru_24DA27910;
}

_QWORD *QP::getUTF8StringFromCFString@<X0>(const __CFString *this@<X0>, _QWORD *a2@<X8>)
{
  CFIndex Length;
  CFIndex v6;
  char *v7;

  if (this)
  {
    Length = CFStringGetLength(this);
    v6 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    v7 = (char *)operator new[]();
    CFStringGetCString(this, v7, v6, 0x8000100u);
    std::string::basic_string[abi:ne180100]<0>(a2, v7);
    JUMPOUT(0x219A24CF4);
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, "");
}

void sub_218E13AA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A24CF4](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void QP::getFileSystemRepresentationFromCFURL(QP *this@<X0>, _QWORD *a2@<X8>)
{
  UInt8 *v5;

  v5 = (UInt8 *)operator new[]();
  CFURLGetFileSystemRepresentation(this, 1u, v5, 1024);
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)v5);
  JUMPOUT(0x219A24CF4);
}

void sub_218E13B44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A24CF4](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t copyStringInsertingSpacesBetweenIdeographCharacters(const __CFString *a1, CFRange a2)
{
  CFIndex length;
  CFIndex location;
  uint64_t v5;
  _QWORD v7[9];
  _QWORD v8[3];
  char v9;
  _QWORD v10[3];
  char v11;
  _QWORD v12[3];
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  CFMutableStringRef Mutable;

  length = a2.length;
  location = a2.location;
  if (__onceCSetToken != -1)
    dispatch_once(&__onceCSetToken, &__block_literal_global_544);
  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  Mutable = 0;
  Mutable = CFStringCreateMutable(0, 0);
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x2000000000;
  v13 = 0;
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2000000000;
  v11 = 0;
  v8[0] = 0;
  v8[1] = v8;
  v8[2] = 0x2000000000;
  v9 = 0;
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 0x40000000;
  v7[2] = ___Z51copyStringInsertingSpacesBetweenIdeographCharactersPK10__CFString7CFRange_block_invoke_2;
  v7[3] = &unk_24DA24600;
  v7[7] = &v14;
  v7[8] = a1;
  v7[4] = v12;
  v7[5] = v10;
  v7[6] = v8;
  CFEnumerateCharactersInCFString((CFIndex)a1, location, length, (uint64_t)v7);
  v5 = v15[3];
  _Block_object_dispose(v8, 8);
  _Block_object_dispose(v10, 8);
  _Block_object_dispose(v12, 8);
  _Block_object_dispose(&v14, 8);
  return v5;
}

void sub_218E13CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

CFArrayRef ___Z15getValidRegionsv_block_invoke()
{
  CFArrayRef result;
  const void *v1[258];

  v1[257] = *(const void **)MEMORY[0x24BDAC8D0];
  memcpy(v1, off_24DA23DB0, 0x808uLL);
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v1, 257, MEMORY[0x24BDBD690]);
  getValidRegions(void)::gRegions = (uint64_t)result;
  return result;
}

const __CFLocale *getLanguageCode(const __CFLocale *result)
{
  if (result)
    return (const __CFLocale *)CFLocaleGetValue(result, (CFLocaleKey)*MEMORY[0x24BDBD418]);
  return result;
}

const __CFString *getScriptCode(const __CFString *result)
{
  const __CFLocale *v1;
  const __CFString *Value;
  const __CFString *v3;
  BOOL v4;
  const __CFString *v5;
  CFComparisonResult v6;
  BOOL v7;
  CFComparisonResult v8;

  if (result)
  {
    v1 = (const __CFLocale *)result;
    result = (const __CFString *)CFLocaleGetValue((CFLocaleRef)result, (CFLocaleKey)*MEMORY[0x24BDBD420]);
    if (!result)
    {
      Value = (const __CFString *)CFLocaleGetValue(v1, (CFLocaleKey)*MEMORY[0x24BDBD418]);
      v3 = (const __CFString *)CFLocaleGetValue(v1, (CFLocaleKey)*MEMORY[0x24BDBD3D8]);
      if (Value)
        v4 = v3 == 0;
      else
        v4 = 1;
      if (v4)
      {
        return 0;
      }
      else
      {
        v5 = v3;
        if (Value == CFSTR("zh")
          || (v6 = CFStringCompare(Value, CFSTR("zh"), 0), result = 0, v6 == kCFCompareEqualTo))
        {
          if (v5 == CFSTR("HK"))
            return CFSTR("Hant");
          v7 = CFStringCompare(v5, CFSTR("HK"), 0) == kCFCompareEqualTo || v5 == CFSTR("TW");
          if (v7 || CFStringCompare(v5, CFSTR("TW"), 0) == kCFCompareEqualTo)
          {
            return CFSTR("Hant");
          }
          else
          {
            if (v5 == CFSTR("CN"))
              return CFSTR("Hans");
            v8 = CFStringCompare(v5, CFSTR("CN"), 0);
            result = 0;
            if (v8 == kCFCompareEqualTo)
              return CFSTR("Hans");
          }
        }
      }
    }
  }
  return result;
}

BOOL CFStringsAreEqual(CFStringRef theString1, const __CFString *a2)
{
  _BOOL8 result;

  if (theString1 == a2)
    return 1;
  result = 0;
  if (theString1)
  {
    if (a2)
      return CFStringCompare(theString1, a2, 0) == kCFCompareEqualTo;
  }
  return result;
}

const __CFLocale *copyNormalizedLocaleForIdentifier(CFLocaleIdentifier localeIdentifier)
{
  const __CFLocale *v1;
  const __CFLocale *v2;
  CFTypeRef Value;
  const void *v4;
  const __CFArray *v5;
  const __CFLocale *v6;
  CFTypeRef v7;
  BOOL v8;
  const __CFAllocator *v9;
  const __CFString *v10;
  const __CFString *v11;
  CFRange v13;

  if (localeIdentifier)
    v1 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], localeIdentifier);
  else
    v1 = CFLocaleCopyCurrent();
  v2 = v1;
  if (v1)
  {
    Value = CFLocaleGetValue(v1, (CFLocaleKey)*MEMORY[0x24BDBD3D8]);
    if (Value)
    {
      v4 = Value;
      if (getValidRegions(void)::onceToken != -1)
        dispatch_once(&getValidRegions(void)::onceToken, &__block_literal_global_0);
      v5 = (const __CFArray *)getValidRegions(void)::gRegions;
      v13.length = CFArrayGetCount((CFArrayRef)getValidRegions(void)::gRegions);
      v13.location = 0;
      if (CFArrayContainsValue(v5, v13, v4))
      {
        v6 = v2;
LABEL_19:
        CFRelease(v2);
        return v6;
      }
    }
    v6 = (const __CFLocale *)CFLocaleGetValue(v2, (CFLocaleKey)*MEMORY[0x24BDBD418]);
    v7 = CFLocaleGetValue(v2, (CFLocaleKey)*MEMORY[0x24BDBD420]);
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (v8)
    {
      if (!v6)
        goto LABEL_19;
      v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("%@_US"), v6);
    }
    else
    {
      v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("%@-%@_US"), v6, v7);
    }
    v11 = v10;
    v6 = CFLocaleCreate(v9, v10);
    CFRelease(v11);
    goto LABEL_19;
  }
  return 0;
}

const __CFArray *copyNormalizedLanguagesForIdentifiers(const __CFArray *a1)
{
  CFIndex Count;
  const __CFArray *Mutable;
  CFIndex i;
  const __CFString *ValueAtIndex;
  const __CFLocale *v6;
  const __CFLocale *v7;
  const void *v8;
  CFLocaleRef v9;
  CFLocaleRef v10;
  const __CFString *v11;
  const __CFLocale *v12;
  const __CFLocale *v13;
  const void *v14;
  const __CFString *v16;
  const __CFLocale *v17;
  const void *v18;
  const void *v19;
  CFRange v20;
  CFRange v21;
  CFRange v22;

  if (a1)
  {
    Count = CFArrayGetCount(a1);
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    if (Count >= 1)
    {
      for (i = 0; i != Count; ++i)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, i);
        v6 = copyNormalizedLocaleForIdentifier(ValueAtIndex);
        if (v6)
        {
          v7 = v6;
          v8 = (const void *)MEMORY[0x219A24574]();
          v20.length = CFArrayGetCount(Mutable);
          v20.location = 0;
          if (!CFArrayContainsValue(Mutable, v20, v8))
            CFArrayAppendValue(Mutable, v8);
          CFRelease(v7);
        }
      }
    }
  }
  else
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  }
  if (!CFArrayGetCount(Mutable))
  {
    v9 = CFLocaleCopyCurrent();
    if (v9)
    {
      v10 = v9;
      v11 = (const __CFString *)MEMORY[0x219A24574]();
      v12 = copyNormalizedLocaleForIdentifier(v11);
      if (v12)
      {
        v13 = v12;
        v14 = (const void *)MEMORY[0x219A24574]();
        v21.length = CFArrayGetCount(Mutable);
        v21.location = 0;
        if (!CFArrayContainsValue(Mutable, v21, v14))
          CFArrayAppendValue(Mutable, v14);
        CFRelease(v13);
      }
    }
    else
    {
      if (!CFLocaleGetSystem()
        || (v16 = (const __CFString *)MEMORY[0x219A24574](), (v17 = copyNormalizedLocaleForIdentifier(v16)) == 0))
      {
LABEL_18:
        if (!CFArrayGetCount(Mutable))
          CFArrayAppendValue(Mutable, CFSTR("en-US"));
        return Mutable;
      }
      v10 = v17;
      v18 = (const void *)MEMORY[0x219A24574]();
      v22.length = CFArrayGetCount(Mutable);
      v22.location = 0;
      if (!CFArrayContainsValue(Mutable, v22, v18))
      {
        v19 = (const void *)MEMORY[0x219A24574](v10);
        CFArrayAppendValue(Mutable, v19);
      }
    }
    CFRelease(v10);
    goto LABEL_18;
  }
  return Mutable;
}

const __CFArray *copyCurrentPreferredLanguages(void)
{
  const __CFArray *v0;
  const __CFArray *v1;

  v0 = CFLocaleCopyPreferredLanguages();
  v1 = copyNormalizedLanguagesForIdentifiers(v0);
  if (v0)
    CFRelease(v0);
  return v1;
}

CFLocaleRef copyCurrentLocale(void)
{
  const __CFArray *v0;
  const __CFArray *v1;
  const __CFString *ValueAtIndex;
  CFLocaleRef v3;

  v0 = copyCurrentPreferredLanguages();
  if (!v0)
    return 0;
  v1 = v0;
  if (CFArrayGetCount(v0))
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v1, 0);
    v3 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], ValueAtIndex);
  }
  else
  {
    v3 = 0;
  }
  CFRelease(v1);
  return v3;
}

__CFCalendar *copyCurrentCalendar(const __CFLocale *a1, const __CFString *a2)
{
  const __CFString *v3;
  const __CFAllocator *v4;
  __CFCalendar *v5;
  const __CFTimeZone *v6;
  const __CFTimeZone *v7;
  const __CFLocale *v8;

  if (!a1)
    return 0;
  v3 = (const __CFString *)MEMORY[0x219A24574]();
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v5 = CFCalendarCreateWithIdentifier((CFAllocatorRef)*MEMORY[0x24BDBD240], v3);
  if (v5 || (v5 = CFCalendarCopyCurrent()) != 0)
  {
    v6 = CFTimeZoneCopySystem();
    if (v6)
    {
      v7 = v6;
      CFCalendarSetTimeZone(v5, v6);
      CFRelease(v7);
    }
    if (a2)
    {
      v8 = CFLocaleCreate(v4, a2);
      CFCalendarSetLocale(v5, v8);
      CFRelease(v8);
    }
  }
  return v5;
}

CFAbsoluteTime getCurrentTime(__CFCalendar *a1, const __CFDate *a2)
{
  double Current;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  CFAbsoluteTime at;

  if (a2)
    MEMORY[0x219A2446C](a2);
  else
    Current = CFAbsoluteTimeGetCurrent();
  at = Current;
  v9 = -1;
  v10 = -1;
  v7 = -1;
  v8 = -1;
  v6 = -1;
  v5 = -1;
  CFCalendarDecomposeAbsoluteTime(a1, Current, "dMyHms", &v10, &v9, &v8, &v7, &v6, &v5);
  CFCalendarComposeAbsoluteTime(a1, &at, "dMyHms", v10, v9, v8, v7, v6, v5);
  return at;
}

CFAbsoluteTime convertAbsoluteTime(__CFCalendar *a1, __CFCalendar *a2, const __CFDate *a3, int a4)
{
  CFAbsoluteTime v7;
  const __CFString *v8;
  const __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  CFAbsoluteTime at;

  at = 0.0;
  v7 = MEMORY[0x219A2446C](a3);
  v8 = (const __CFString *)MEMORY[0x219A24388](a2);
  v24 = -1;
  v25 = -1;
  v22 = -1;
  v23 = -1;
  v21 = -1;
  v19 = -1;
  v20 = -1;
  v17 = -1;
  v18 = -1;
  CFCalendarDecomposeAbsoluteTime(a1, v7, "yMdwEFHms", &v23, &v24, &v25, &v21, &v22, &v20, &v19, &v18, &v17);
  v9 = (const __CFString *)*MEMORY[0x24BDBD3C0];
  if (v8 == (const __CFString *)*MEMORY[0x24BDBD3C0] || v8 && v9 && CFStringCompare(v8, v9, 0) == kCFCompareEqualTo)
  {
    v16 = -1;
    CFCalendarComposeAbsoluteTime(a2, &at, "y", v23);
    CFCalendarDecomposeAbsoluteTime(a1, at, "y", &v16);
    v23 = v23 - v16 + 1;
  }
  v10 = MEMORY[0x219A2437C](a1);
  v11 = MEMORY[0x219A2437C](a2);
  if (a4 != -1 || v10 == v11)
    CFCalendarComposeAbsoluteTime(a2, &at, "yMdwEFHms", v23, v24, v25, v21, v22, v20, v19, v18, v17);
  else
    CFCalendarComposeAbsoluteTime(a2, &at, "ywEHms", v23, v21, v22, v19, v18, v17, v13, v14, v15);
  return at;
}

BOOL CFStringContainsString(CFStringRef theString, const __CFString *a2)
{
  _BOOL8 result;

  if (theString == a2)
    return 1;
  result = 0;
  if (theString)
  {
    if (a2)
      return CFStringFind(theString, a2, 0).location != -1;
  }
  return result;
}

BOOL CFLocaleIsCJ(_BOOL8 result)
{
  const __CFString *v1;

  if (result)
  {
    v1 = (const __CFString *)MEMORY[0x219A24574]();
    return CFStringHasPrefix(v1, CFSTR("zh"))
        || CFStringHasPrefix(v1, CFSTR("yue"))
        || CFStringHasPrefix(v1, CFSTR("ja")) != 0;
  }
  return result;
}

BOOL CFLocalesAreEqual(_BOOL8 result, const __CFLocale *a2)
{
  const __CFString *v3;
  uint64_t v4;
  const __CFString *v5;

  if (result)
  {
    v3 = (const __CFString *)MEMORY[0x219A24574]();
    v4 = MEMORY[0x219A24574](a2);
    if (v3 == (const __CFString *)v4)
    {
      return 1;
    }
    else
    {
      v5 = (const __CFString *)v4;
      result = 0;
      if (v3)
      {
        if (v5)
          return CFStringCompare(v3, v5, 0) == kCFCompareEqualTo;
      }
    }
  }
  return result;
}

CFIndex CFEnumerateCharactersInCFString(CFIndex theString, CFIndex theIndex, uint64_t a3, uint64_t a4)
{
  CFIndex v5;
  const __CFString *v6;
  CFIndex v7;
  CFRange RangeOfComposedCharactersAtIndex;
  char v9;

  v5 = theIndex;
  v6 = (const __CFString *)theString;
  v9 = 0;
  v7 = theIndex + a3;
  do
  {
    if (v5 >= v7)
      break;
    RangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex(v6, v5);
    theString = RangeOfComposedCharactersAtIndex.location;
    if (RangeOfComposedCharactersAtIndex.location == -1)
      break;
    theString = (*(uint64_t (**)(uint64_t, CFIndex, CFIndex, char *))(a4 + 16))(a4, RangeOfComposedCharactersAtIndex.location, RangeOfComposedCharactersAtIndex.length, &v9);
    v5 += RangeOfComposedCharactersAtIndex.length;
  }
  while (!v9);
  return theString;
}

uint64_t ___Z51copyStringInsertingSpacesBetweenIdeographCharactersPK10__CFString7CFRange_block_invoke(const __CFString *a1)
{
  uint64_t result;

  result = newCharacterSetWithPattern(a1);
  __CSet = result;
  return result;
}

uint64_t newCharacterSetWithPattern(const __CFString *a1)
{
  CFIndex Length;
  uint64_t v2;
  UniChar *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  CFRange v7;

  v6 = *MEMORY[0x24BDAC8D0];
  HIDWORD(v5) = 0;
  Length = CFStringGetLength(CFSTR("[[:Hani:][:Katakana:][:Hiragana:][:Katakana_Or_Hiragana:][\\u30FC]]"));
  MEMORY[0x24BDAC7A8]();
  v3 = (UniChar *)((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!CFStringGetCharactersPtr(CFSTR("[[:Hani:][:Katakana:][:Hiragana:][:Katakana_Or_Hiragana:][\\u30FC]]")))
  {
    v7.location = 0;
    v7.length = Length;
    CFStringGetCharacters(CFSTR("[[:Hani:][:Katakana:][:Hiragana:][:Katakana_Or_Hiragana:][\\u30FC]]"), v7, v3);
  }
  result = uset_openPattern();
  if (SHIDWORD(v5) >= 1)
  {
    if (result)
    {
      uset_close();
      return 0;
    }
  }
  return result;
}

void ___Z51copyStringInsertingSpacesBetweenIdeographCharactersPK10__CFString7CFRange_block_invoke_2(uint64_t a1, CFRange a2)
{
  CFIndex length;
  UniChar *v4;
  int isWhitespace;
  int v6;
  int v7;
  BOOL v8;
  BOOL v9;
  _QWORD v10[2];

  length = a2.length;
  v10[1] = *MEMORY[0x24BDAC8D0];
  v4 = (UniChar *)((char *)v10 - ((2 * a2.length + 17) & 0xFFFFFFFFFFFFFFF0));
  CFStringGetCharacters(*(CFStringRef *)(a1 + 64), a2, v4);
  isWhitespace = u_isWhitespace(*v4);
  v6 = uset_containsAllCodePoints();
  v7 = v6;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v8 = !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) || v6 == 0;
    if (!v8 || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) ? (v9 = isWhitespace == 0) : (v9 = 0), v9))
      CFStringAppend(*(CFMutableStringRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24), CFSTR(" "));
  }
  CFStringAppendCharacters(*(CFMutableStringRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24), v4, length);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = isWhitespace == 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v7 != 0;
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

CFStringRef copyTranslatedRomanNumberFromChineseNumberString(const __CFString *a1)
{
  const __CFAllocator *v2;
  CFDictionaryRef v3;
  const __CFArray *v4;
  CFIndex Length;
  CFIndex v6;
  int v7;
  int v8;
  int v9;
  CFIndex v10;
  CFStringRef v11;
  SInt32 IntValue;
  int v13;
  int HasPrefix;
  int v15;
  int v16;
  void *value;
  CFStringRef prefix[2];
  const __CFString *v20;
  void *keys[2];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  const __CFString *v27;
  _OWORD values[6];
  const __CFString *v29;
  uint64_t v30;
  CFRange v31;
  CFRange v32;

  v30 = *MEMORY[0x24BDAC8D0];
  values[4] = xmmword_24DA24660;
  values[5] = *(_OWORD *)&off_24DA24670;
  v29 = CFSTR("9");
  values[0] = xmmword_24DA24620;
  values[1] = *(_OWORD *)&off_24DA24630;
  values[2] = xmmword_24DA24640;
  values[3] = *(_OWORD *)&off_24DA24650;
  v25 = xmmword_24DA246C8;
  v26 = *(_OWORD *)&off_24DA246D8;
  v27 = CFSTR("九");
  *(_OWORD *)keys = xmmword_24DA24688;
  v22 = *(_OWORD *)&off_24DA24698;
  v23 = xmmword_24DA246A8;
  v24 = *(_OWORD *)&off_24DA246B8;
  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v3 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (const void **)keys, (const void **)values, 13, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  *(_OWORD *)prefix = xmmword_24DA246F0;
  v20 = CFSTR("千");
  v4 = CFArrayCreate(v2, (const void **)prefix, 3, MEMORY[0x24BDBD690]);
  Length = CFStringGetLength(a1);
  if (Length >= 1)
  {
    v6 = Length;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v32.location = v10;
      v32.length = 1;
      v11 = CFStringCreateWithSubstring(v2, a1, v32);
      value = 0;
      if (CFDictionaryGetValueIfPresent(v3, v11, (const void **)&value))
      {
        IntValue = CFStringGetIntValue((CFStringRef)value);
        v13 = 10 * v9;
        if (!v7)
          v13 = v9;
        v9 = IntValue + v13;
        ++v7;
      }
      else
      {
        v31.length = CFArrayGetCount(v4);
        v31.location = 0;
        if (!CFArrayContainsValue(v4, v31, v11))
        {
          CFRelease(v11);
          CFRelease(v3);
          CFRelease(v4);
          return 0;
        }
        HasPrefix = CFStringHasPrefix(v11, prefix[0]);
        if (v9)
        {
          if (HasPrefix)
          {
            v15 = 10 * v9;
          }
          else
          {
            v16 = CFStringHasPrefix(v11, prefix[1]);
            v15 = 1000 * v9;
            if (v16)
              v15 = 100 * v9;
          }
        }
        else if (HasPrefix)
        {
          v15 = 10;
        }
        else if (CFStringHasPrefix(v11, prefix[1]))
        {
          v15 = 100;
        }
        else
        {
          v15 = 1000;
        }
        v9 = 0;
        v7 = 0;
        v8 += v15;
      }
      CFRelease(v11);
      if (v6 == ++v10)
        goto LABEL_22;
    }
  }
  v9 = 0;
  v8 = 0;
LABEL_22:
  CFRelease(v3);
  CFRelease(v4);
  return CFStringCreateWithFormat(v2, 0, CFSTR("%d"), (v8 + v9));
}

uint64_t getIntFromSpelledNumber(const __CFString *a1, const __CFLocale *a2)
{
  uint64_t IntValue;
  const __CFAllocator *v4;
  const __CFArray *ArrayBySeparatingStrings;
  const __CFArray *v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;

  IntValue = 0xFFFFFFFFLL;
  if (a1 && a2 && CFLocaleIsCJ((_BOOL8)a2))
  {
    v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x24BDBD240], a1, CFSTR(" "));
    if (ArrayBySeparatingStrings)
    {
      v6 = ArrayBySeparatingStrings;
      v7 = CFStringCreateByCombiningStrings(v4, ArrayBySeparatingStrings, &stru_24DA27910);
      if (v7)
      {
        v8 = v7;
        v9 = copyTranslatedRomanNumberFromChineseNumberString(v7);
        if (v9)
        {
          v10 = v9;
          IntValue = CFStringGetIntValue(v9);
          CFRelease(v10);
        }
        else
        {
          IntValue = 0xFFFFFFFFLL;
        }
        CFRelease(v8);
      }
      else
      {
        IntValue = 0xFFFFFFFFLL;
      }
      CFRelease(v6);
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return IntValue;
}

char *QPProcessName(void)
{
  if (QPProcessName(void)::onceToken != -1)
    dispatch_once(&QPProcessName(void)::onceToken, &__block_literal_global_609);
  return QPProcessName(void)::processName;
}

size_t ___Z13QPProcessNamev_block_invoke()
{
  size_t result;
  size_t __size;
  _BYTE v2[243];
  char v3[405];
  int v4[2];
  int v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  result = getpid();
  if ((_DWORD)result)
  {
    *(_QWORD *)v4 = 0xE00000001;
    v5 = 1;
    v6 = result;
    __size = 648;
    result = sysctl(v4, 4u, v2, &__size, 0, 0);
    if ((_DWORD)result != -1)
    {
      if (__size)
        return strlcpy(QPProcessName(void)::processName, v3, __size);
    }
  }
  return result;
}

uint64_t QPCFDictionaryGetInt32ValueIfPresent(uint64_t result, const __CFString *a2, int *a3)
{
  CFTypeID v4;
  void *value;

  if (result)
  {
    value = 0;
    result = CFDictionaryGetValueIfPresent((CFDictionaryRef)result, a2, (const void **)&value);
    if ((_DWORD)result)
    {
      result = (uint64_t)value;
      if (value)
      {
        v4 = CFGetTypeID(value);
        if (v4 == CFNumberGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, a3);
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t SPQueryKindIsSearchToolSearch(uint64_t result)
{
  const __CFString *v1;

  if (result)
  {
    v1 = (const __CFString *)result;
    if ((_os_feature_enabled_impl() & 1) == 0)
    {
      result = _os_feature_enabled_impl();
      if (!(_DWORD)result)
        return result;
      if (!CFStringHasPrefix(v1, CFSTR("com.apple.omniSearch"))
        && !CFStringHasPrefix(v1, CFSTR("com.apple.intelligenceflow")))
      {
        return CFStringHasPrefix(v1, CFSTR("com.apple.ondeviceeval")) != 0;
      }
    }
    return 1;
  }
  return result;
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::vector<std::string>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24DA236B8, MEMORY[0x24BEDAAF0]);
}

void sub_218E1505C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24DA236C0, MEMORY[0x24BEDAB00]);
}

void sub_218E152D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

BOOL QP::RemindersParserFormatter::isValid(uint64_t a1, _QWORD **a2)
{
  _QWORD *v2;

  v2 = *a2;
  return *a2 && *v2 && v2[5] != 0;
}

uint64_t QP::RemindersParserFormatter::setParse(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = QP::Formatter::setParse(a1, (uint64_t)&v10);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_218E15510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QP::RemindersParserFormatter::updateParseWithDateAttribute(QP::Formatter *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  CFRange *v9;
  std::__shared_weak_count *v10;

  v3 = *(std::__shared_weak_count **)(a3 + 8);
  v9 = *(CFRange **)a3;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  QP::Formatter::updateParseWithDateAttribute(a1, a2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_218E155A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QP::RemindersParserFormatter::updateParseWithAttribute(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  CFRange *v9;
  std::__shared_weak_count *v10;

  v3 = *(std::__shared_weak_count **)(a3 + 8);
  v9 = *(CFRange **)a3;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  QP::Formatter::updateParseWithAttribute(a1, a2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_218E15638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QP::RemindersParserFormatter::~RemindersParserFormatter(QP::RemindersParserFormatter *this)
{
  QP::Formatter::~Formatter(this);
  JUMPOUT(0x219A24D0CLL);
}

void QP::Formatter::~Formatter(QP::Formatter *this)
{
  char *v2;

  *(_QWORD *)this = &unk_24DA271A8;
  v2 = (char *)this + 8;
  nlp::CFScopedPtr<__CFAttributedString *>::reset((const void **)this + 9, 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)this + 8, 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)this + 7, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)this + 6, 0);
  std::unique_ptr<QP::DateFormatter>::reset[abi:ne180100]((const void ***)this + 5, 0);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v2);
}

{
  QP::Formatter::~Formatter(this);
  JUMPOUT(0x219A24D0CLL);
}

void nlp::CFScopedPtr<__CFAttributedString *>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFDictionary *>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFString const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

const void **std::unique_ptr<QP::DateFormatter>::reset[abi:ne180100](const void ***a1, const void **a2)
{
  const void **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    QP::DateFormatter::~DateFormatter(result);
    JUMPOUT(0x219A24D0CLL);
  }
  return result;
}

void QP::DateFormatter::~DateFormatter(const void **this)
{
  nlp::CFScopedPtr<__CFDictionary const*>::reset(this + 7, 0);
  nlp::CFScopedPtr<__CFDateFormatter *>::reset(this + 6, 0);
  nlp::CFScopedPtr<__CFDateFormatter *>::reset(this + 5, 0);
  nlp::CFScopedPtr<__CFDateFormatter *>::reset(this + 4, 0);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)(this + 2));
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void nlp::CFScopedPtr<__CFDictionary const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFDateFormatter *>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

id startEmbeddingService()
{
  id v0;

  v0 = (id)objc_msgSend(MEMORY[0x24BEB00C8], "sharedInstance");
  return (id)objc_msgSend(MEMORY[0x24BEB00C0], "sharedInstance");
}

const __CFAttributedString *hasAttributes(const __CFAttributedString *result)
{
  const __CFAttributedString *v1;
  CFRange v2;

  if (result)
  {
    v1 = result;
    result = (const __CFAttributedString *)CFAttributedStringGetLength(result);
    if (result)
    {
      v2.location = 0;
      v2.length = (CFIndex)result;
      result = CFAttributedStringGetAttributes(v1, 0, &v2);
      if (result)
        return (const __CFAttributedString *)(CFDictionaryGetCount(result) > 0);
    }
  }
  return result;
}

uint64_t languageSupportedForEmbedding(const __CFDictionary *a1)
{
  const __CFNumber *Value;
  void *v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  NSObject *v13;
  NSObject *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t valuePtr;
  _BYTE v34[128];
  uint8_t v35[128];
  uint8_t buf[4];
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  if (!systemListenerIsSemanticSearchEnabled())
    return 0;
  valuePtr = -1;
  if (!a1)
  {
    if (embeddingGenerationLogger(void)::token != -1)
      dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
    v4 = embeddingGenerationLogger(void)::log;
    if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      v37 = -1;
      _os_log_impl(&dword_218E10000, v4, OS_LOG_TYPE_INFO, "qid=%lu - parse option information that includes both keyboard language and locale language is missing. Semantic search is not supported", buf, 0xCu);
    }
    return 0;
  }
  if (CFDictionaryContainsKey(a1, CFSTR("queryID")))
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("queryID"));
    CFNumberGetValue(Value, kCFNumberCFIndexType, &valuePtr);
    if (valuePtr == -1)
      return 0;
  }
  if (CFDictionaryContainsKey(a1, CFSTR("keyboardLanguage")))
  {
    CFDictionaryGetValue(a1, CFSTR("keyboardLanguage"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }
  if (CFDictionaryContainsKey(a1, CFSTR("localeLanguage")))
  {
    CFDictionaryGetValue(a1, CFSTR("localeLanguage"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }
  if (!objc_msgSend(v3, "length") && !objc_msgSend(v5, "length"))
  {
    if (embeddingGenerationLogger(void)::token != -1)
      dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
    v23 = embeddingGenerationLogger(void)::log;
    if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      v37 = valuePtr;
      _os_log_impl(&dword_218E10000, v23, OS_LOG_TYPE_INFO, "qid=%lu - Both keyboard language and locale are missing. Semantic search is not supported", buf, 0xCu);
    }

    return 0;
  }
  if (objc_msgSend(v3, "length"))
  {
    objc_msgSend(MEMORY[0x24BDBCEA0], "canonicalLanguageIdentifierFromString:", v3);
    v6 = objc_claimAutoreleasedReturnValue();

    v3 = (void *)v6;
  }
  if (objc_msgSend(v5, "length"))
  {
    objc_msgSend(MEMORY[0x24BDBCEA0], "canonicalLanguageIdentifierFromString:", v5);
    v7 = objc_claimAutoreleasedReturnValue();

    v5 = (void *)v7;
  }
  systemListenerGetSupportedSemanticLanguages();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v8, "count"))
  {
    if (objc_msgSend(v3, "length"))
    {
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v9 = v8;
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v29, v35, 16);
      if (v10)
      {
        v11 = *(_QWORD *)v30;
        while (2)
        {
          for (i = 0; i != v10; ++i)
          {
            if (*(_QWORD *)v30 != v11)
              objc_enumerationMutation(v9);
            if ((objc_msgSend(v3, "hasPrefix:", *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * i)) & 1) != 0)
            {

LABEL_69:
              v21 = 1;
              goto LABEL_70;
            }
          }
          v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v29, v35, 16);
          if (v10)
            continue;
          break;
        }
      }

      if (embeddingGenerationLogger(void)::token != -1)
        dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
      v13 = embeddingGenerationLogger(void)::log;
      if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v37 = valuePtr;
        _os_log_impl(&dword_218E10000, v13, OS_LOG_TYPE_INFO, "qid=%lu - Semantic search is not supported for keyboard language", buf, 0xCu);
      }
    }
    if (objc_msgSend(v5, "length"))
    {
      if (embeddingGenerationLogger(void)::token != -1)
        dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
      v14 = embeddingGenerationLogger(void)::log;
      if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v37 = valuePtr;
        _os_log_impl(&dword_218E10000, v14, OS_LOG_TYPE_INFO, "qid=%lu - Keyboard language is missing or not supported. Relying on locale to determine if semantic search is supported", buf, 0xCu);
      }
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v15 = v8;
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v25, v34, 16);
      if (v16)
      {
        v17 = *(_QWORD *)v26;
        while (2)
        {
          for (j = 0; j != v16; ++j)
          {
            if (*(_QWORD *)v26 != v17)
              objc_enumerationMutation(v15);
            if ((objc_msgSend(v5, "hasPrefix:", *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * j), (_QWORD)v25) & 1) != 0)
            {

              goto LABEL_69;
            }
          }
          v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v25, v34, 16);
          if (v16)
            continue;
          break;
        }
      }

      if (embeddingGenerationLogger(void)::token != -1)
        dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
      v19 = embeddingGenerationLogger(void)::log;
      if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v37 = valuePtr;
        _os_log_impl(&dword_218E10000, v19, OS_LOG_TYPE_INFO, "qid=%lu - Semantic search is not supported for locale language.", buf, 0xCu);
      }
    }
    if (embeddingGenerationLogger(void)::token != -1)
      dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
    v20 = embeddingGenerationLogger(void)::log;
    if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      v37 = valuePtr;
      _os_log_impl(&dword_218E10000, v20, OS_LOG_TYPE_INFO, "qid=%lu - Semantic search is not supported for this keyboard and locale languge.", buf, 0xCu);
    }
    v21 = 0;
  }
  else
  {
    if (embeddingGenerationLogger(void)::token != -1)
      dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
    v22 = embeddingGenerationLogger(void)::log;
    v21 = 1;
    if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      v37 = valuePtr;
      _os_log_impl(&dword_218E10000, v22, OS_LOG_TYPE_INFO, "qid=%lu - Missing resources for supported languages, skipping language check", buf, 0xCu);
    }
  }
LABEL_70:

  return v21;
}

void sub_218E15F98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t copyEmbeddingDataForAttributedQuery(const __CFAttributedString *a1, const __CFDictionary *a2)
{
  const __CFAttributedString *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  const __CFNumber *Value;
  const __CFNumber *v8;
  dispatch_time_t v9;
  void *v10;
  void *v11;
  __CFString *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  NSObject *v20;
  const __CFString *v22;
  unsigned __int16 v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  dispatch_time_t v32;
  NSObject *v33;
  id v34;
  unsigned int v35;
  unsigned int v36;
  void *v37;
  dispatch_time_t v38;
  id v39;
  uint64_t v40;
  uint64_t valuePtr;
  uint8_t buf[4];
  uint64_t v43;
  __int16 v44;
  const __CFString *v45;
  _QWORD v46[2];
  _QWORD v47[2];
  void *v48;
  _QWORD v49[2];

  v3 = a1;
  v49[1] = *MEMORY[0x24BDAC8D0];
  if (hasAttributes(a1))
  {
    v3 = (const __CFAttributedString *)objc_msgSend(objc_alloc(MEMORY[0x24BEB00D0]), "initWithAttributedString:", v3);
    if (!v3)
      goto LABEL_3;
LABEL_8:
    v49[0] = v3;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v49, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    valuePtr = -1;
    if (a2)
    {
      if (CFDictionaryContainsKey(a2, CFSTR("queryID")))
      {
        Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("queryID"));
        CFNumberGetValue(Value, kCFNumberCFIndexType, &valuePtr);
        if (valuePtr == -1)
        {
          v4 = 0;
LABEL_40:

          goto LABEL_41;
        }
      }
      v40 = 100;
      if (CFDictionaryContainsKey(a2, CFSTR("kMDQueryOptionEmbeddingGenerationTimeout")))
      {
        v8 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("kMDQueryOptionEmbeddingGenerationTimeout"));
        if (v8)
          CFNumberGetValue(v8, kCFNumberCFIndexType, &v40);
      }
    }
    else
    {
      v40 = 100;
    }
    v9 = dispatch_time(0, 0);
    objc_msgSend(MEMORY[0x24BEB00C0], "sharedInstance");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = v9;
    v39 = 0;
    objc_msgSend(v10, "generateEmbeddingForTextInputs:extendedContextLength:queryID:timeout:error:", v6, 0, valuePtr, v40, &v39);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (__CFString *)v39;

    if (v12)
    {
      if (embeddingGenerationLogger(void)::token != -1)
        dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
      v13 = embeddingGenerationLogger(void)::log;
      if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_ERROR))
        copyEmbeddingDataForAttributedQuery_cold_1(&valuePtr, (uint64_t)v12, v13);
    }
    else if (objc_msgSend(v11, "count"))
    {
      objc_msgSend(v11, "firstObject");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "embeddingData");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      if (v15)
      {
        objc_msgSend(v11, "firstObject");
        v37 = (void *)objc_claimAutoreleasedReturnValue();

        if (v37)
        {
          v16 = objc_msgSend(v37, "elementType");
          if (v16 == 2)
            v17 = 0;
          else
            v17 = 3;
          if (v16 == 1)
            v17 = 1;
          v36 = v17;
          v18 = objc_msgSend(v37, "elementCount");
          if (v18 == 256)
          {
            v35 = 0;
          }
          else
          {
            if (v18 == 512)
            {
              v19 = 1;
            }
            else if (v18 == 768)
            {
              v19 = 2;
            }
            else
            {
              v19 = 3;
            }
            v35 = v19;
          }
          v34 = objc_alloc(MEMORY[0x24BDC24D8]);
          v23 = objc_msgSend(v37, "version");
          objc_msgSend(v37, "embeddingData");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v48 = v24;
          objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v48, 1);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (void *)objc_msgSend(v34, "initWithFormat:dimension:version:vectors:", v36, v35, v23, v25);

          v46[0] = CFSTR("vec_scale");
          v27 = (void *)MEMORY[0x24BDD16E0];
          objc_msgSend(v37, "scale");
          objc_msgSend(v27, "numberWithFloat:");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v46[1] = CFSTR("vec_bias");
          v47[0] = v28;
          v29 = (void *)MEMORY[0x24BDD16E0];
          objc_msgSend(v37, "bias");
          objc_msgSend(v29, "numberWithFloat:");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          v47[1] = v30;
          objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v47, v46, 2);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "setProperties:", v31);

          objc_msgSend(v26, "encodedData");
          v4 = objc_claimAutoreleasedReturnValue();
          v32 = dispatch_time(0, 0);
          if (embeddingGenerationLogger(void)::token != -1)
            dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
          v33 = embeddingGenerationLogger(void)::log;
          if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134218240;
            v43 = valuePtr;
            v44 = 2048;
            v45 = (const __CFString *)(v32 - v38);
            _os_log_impl(&dword_218E10000, v33, OS_LOG_TYPE_INFO, "qid=%lu - Generated embedding data (time=%.2lldms)", buf, 0x16u);
          }

          goto LABEL_39;
        }
      }
      else
      {

      }
    }
    if (embeddingGenerationLogger(void)::token != -1)
      dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
    v20 = embeddingGenerationLogger(void)::log;
    if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_ERROR))
    {
      v22 = CFSTR("Unknown");
      if (v12)
        v22 = v12;
      *(_DWORD *)buf = 134218242;
      v43 = valuePtr;
      v44 = 2112;
      v45 = v22;
      _os_log_error_impl(&dword_218E10000, v20, OS_LOG_TYPE_ERROR, "qid=%lu - %@", buf, 0x16u);
    }
    v4 = 0;
LABEL_39:

    goto LABEL_40;
  }
  if (v3)
  {
    -[__CFAttributedString string](v3, "string");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v5)
    {
      v3 = 0;
      goto LABEL_3;
    }
    v3 = (const __CFAttributedString *)objc_msgSend(objc_alloc(MEMORY[0x24BEB00D0]), "initWithText:", v5);

  }
  if (v3)
    goto LABEL_8;
LABEL_3:
  v4 = 0;
LABEL_41:

  return v4;
}

void sub_218E16538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void embeddingGeneratorPreheatAsync()
{
  void *v0;
  void *v1;
  id v2;
  _QWORD v3[4];
  id v4;

  objc_msgSend(MEMORY[0x24BDBCE60], "now");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BEB00C0], "sharedInstance");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 3221225472;
  v3[2] = __embeddingGeneratorPreheatAsync_block_invoke;
  v3[3] = &unk_24DA247C8;
  v2 = v0;
  v4 = v2;
  objc_msgSend(v1, "preheatWithCompletionHandler:", v3);

}

void sub_218E166B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void __embeddingGeneratorPreheatAsync_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  void *v6;
  double v7;
  int v8;
  double v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    if (embeddingGenerationLogger(void)::token != -1)
      dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
    v4 = embeddingGenerationLogger(void)::log;
    if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_ERROR))
      __embeddingGeneratorPreheatAsync_block_invoke_cold_1((uint64_t)v3, v4);
  }
  else
  {
    if (embeddingGenerationLogger(void)::token != -1)
      dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
    v5 = (id)embeddingGenerationLogger(void)::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(MEMORY[0x24BDBCE60], "now");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "timeIntervalSinceDate:", *(_QWORD *)(a1 + 32));
      v8 = 134217984;
      v9 = v7 * 1000.0;
      _os_log_impl(&dword_218E10000, v5, OS_LOG_TYPE_INFO, "Embedding preheat succeeded (time=%.2fms)", (uint8_t *)&v8, 0xCu);

    }
  }

}

void sub_218E1682C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void embeddingGeneratorPreheatSync()
{
  void *v0;
  NSObject *v1;
  void *v2;
  id v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  double v7;
  _QWORD v8[4];
  id v9;
  NSObject *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  _QWORD v16[4];
  id v17;
  uint8_t buf[4];
  double v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDBCE60], "now");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = dispatch_group_create();
  v15 = 0;
  v16[0] = &v15;
  v16[1] = 0x3032000000;
  v16[2] = __Block_byref_object_copy_;
  v16[3] = __Block_byref_object_dispose_;
  v17 = 0;
  v13 = 0;
  v14[0] = &v13;
  v14[1] = 0x2020000000;
  v14[2] = 0;
  dispatch_group_enter(v1);
  objc_msgSend(MEMORY[0x24BEB00C0], "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = __embeddingGeneratorPreheatSync_block_invoke;
  v8[3] = &unk_24DA247F0;
  v11 = &v15;
  v12 = &v13;
  v3 = v0;
  v9 = v3;
  v4 = v1;
  v10 = v4;
  objc_msgSend(v2, "preheatWithCompletionHandler:", v8);

  dispatch_group_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
  if (*(_QWORD *)(v16[0] + 40))
  {
    if (embeddingGenerationLogger(void)::token != -1)
      dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
    v5 = embeddingGenerationLogger(void)::log;
    if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_ERROR))
      embeddingGeneratorPreheatSync_cold_1((uint64_t)v14, (uint64_t)v16, v5);
  }
  else
  {
    if (embeddingGenerationLogger(void)::token != -1)
      dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
    v6 = embeddingGenerationLogger(void)::log;
    if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_INFO))
    {
      v7 = *(double *)(v14[0] + 24) * 1000.0;
      *(_DWORD *)buf = 134217984;
      v19 = v7;
      _os_log_impl(&dword_218E10000, v6, OS_LOG_TYPE_INFO, "Embedding preheat succeeded (time=%.2fms)", buf, 0xCu);
    }
  }

  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v15, 8);

}

void sub_218E16AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;
  void *v28;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a21, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void __embeddingGeneratorPreheatSync_block_invoke(uint64_t a1, void *a2)
{
  void *v4;
  uint64_t v5;
  id v6;

  v6 = a2;
  if (v6)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
  objc_msgSend(MEMORY[0x24BDBCE60], "now");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "timeIntervalSinceDate:", *(_QWORD *)(a1 + 32));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v5;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_218E16B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void embeddingGeneratorCoolDown()
{
  id v0;
  id v1;

  objc_msgSend(MEMORY[0x24BEB00C0], "sharedInstance");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "clear");

  objc_msgSend(MEMORY[0x24BEB00C8], "sharedInstance");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "clear");

}

void sub_218E16C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void embeddingGeneratorCancelWithQueryID(uint64_t a1)
{
  id v2;

  objc_msgSend(MEMORY[0x24BEB00C0], "sharedInstance");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "cancelQueryID:", a1);

}

void sub_218E16C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZL25embeddingGenerationLoggerv_block_invoke()
{
  const char *v0;
  os_log_t v1;
  void *v2;

  v0 = _nlpLoggingSubsystem();
  v1 = os_log_create(v0, "QPEmbeddingGeneration");
  v2 = (void *)embeddingGenerationLogger(void)::log;
  embeddingGenerationLogger(void)::log = (uint64_t)v1;

}

void sub_218E16DDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_218E16E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void localeChangeCallback(__CFNotificationCenter *a1, void *a2, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  id v5;

  v5 = a2;
  if (v5)
    objc_msgSend(v5, "updateLocale");

}

void sub_218E16F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_218E171C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id localeKeyForLocale(NSLocale *a1)
{
  NSLocale *v1;
  void *v2;
  uint64_t LanguageIDForIdentifier;
  void *v4;
  void *v5;

  v1 = a1;
  -[NSLocale localeIdentifier](v1, "localeIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  LanguageIDForIdentifier = SILanguagesGetLanguageIDForIdentifier();

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", LanguageIDForIdentifier);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringValue");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_218E17258(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void sub_218E178B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_218E1794C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_218E17B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_218E1805C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_218E18268(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_218E18700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_218E18838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_218E188CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)SystemListener;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

CFURLRef systemListenerCopyResourceFromBundleWithName(CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName, CFBundleRef bundle)
{
  if (!resourceName || !resourceType)
    return 0;
  if (!bundle)
    bundle = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.spotlight.QueryParser"));
  return CFBundleCopyResourceURL(bundle, resourceName, resourceType, subDirName);
}

void systemListenerEnableAutoUpdatingLocale(int a1)
{
  id v2;

  +[SystemListener defaultListener](SystemListener, "defaultListener");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setAutoUpdatingLocale:", a1 != 0);

}

void sub_218E18A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void systemListenerEnableForceLoadingAssets(int a1)
{
  id v2;

  +[SystemListener defaultListener](SystemListener, "defaultListener");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setForce:", a1 != 0);
  if (a1)
    objc_msgSend(v2, "updateLocale");

}

void sub_218E18AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL systemListenerResourcesAvailableForLocaleAndContentType(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;
  _BOOL8 v6;

  +[SystemListener defaultListener](SystemListener, "defaultListener");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "pathsForContentType:locale:", a2, a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(a2, "isEqualToString:", CFSTR("QueryParser")))
    v6 = (unint64_t)objc_msgSend(v5, "count") > 2;
  else
    v6 = objc_msgSend(v5, "count") != 0;

  return v6;
}

void sub_218E18B98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void systemListenerEnumerateResourcesWithContentType(uint64_t a1, void *a2)
{
  void (**v3)(id, void *, _BYTE *);
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  unsigned __int8 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  +[SystemListener defaultListener](SystemListener, "defaultListener");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "pathsForContentType:locale:", a1, 0);
  v18 = 0;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v4 = (id)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v19, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v15;
LABEL_3:
    v7 = 0;
    while (1)
    {
      if (*(_QWORD *)v15 != v6)
        objc_enumerationMutation(v4);
      v8 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * v7);
      v13 = 0;
      objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "fileExistsAtPath:isDirectory:", v8, &v13);

      if (v10)
      {
        objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:isDirectory:", v8, v13);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v3[2](v3, v11, &v18);

      }
      if (v18)
        break;
      if (v5 == ++v7)
      {
        v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v19, 16);
        if (v5)
          goto LABEL_3;
        break;
      }
    }
  }

}

void sub_218E18D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

void systemListenerSetLocale(uint64_t a1, uint64_t a2)
{
  id v4;

  +[SystemListener defaultListener](SystemListener, "defaultListener");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "updateLocaleWithLocale:preferredLanguages:force:", a1, a2, 1);

}

void sub_218E18E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void *systemListenerGetLocale()
{
  void *v0;
  void *v1;

  +[SystemListener defaultListener](SystemListener, "defaultListener");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "currentLocale");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void sub_218E18E5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *systemListenerGetRegion()
{
  void *v0;
  void *v1;

  +[SystemListener defaultListener](SystemListener, "defaultListener");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "currentRegion");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void sub_218E18EB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *systemListenerGetPreferredLanguages()
{
  void *v0;
  void *v1;

  +[SystemListener defaultListener](SystemListener, "defaultListener");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "currentPreferredLanguages");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void sub_218E18F04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t systemListenerGetFirstWeekDay()
{
  void *v0;
  uint64_t v1;

  +[SystemListener defaultListener](SystemListener, "defaultListener");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "currentFirstWeekDay");

  return v1;
}

void sub_218E18F50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *systemListenerGetSupportedSemanticLanguages()
{
  void *v0;
  void *v1;

  +[SystemListener defaultListener](SystemListener, "defaultListener");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "supportedSemanticLanguages");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void sub_218E18FA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t systemListenerIsSemanticSearchEnabled()
{
  void *v0;
  uint64_t v1;

  +[SystemListener defaultListener](SystemListener, "defaultListener");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "semanticSearchEnabled");

  return v1;
}

void sub_218E18FF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t systemListenerHasResourceUpdates()
{
  void *v0;
  uint64_t v1;

  +[SystemListener defaultListener](SystemListener, "defaultListener");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "hasUpdatedResources");
  if ((_DWORD)v1)
    objc_msgSend(v0, "updateResources");

  return v1;
}

void sub_218E19048(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t systemListenerHasLocaleUpdates()
{
  void *v0;
  uint64_t v1;

  +[SystemListener defaultListener](SystemListener, "defaultListener");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "hasUpdatedLocale");

  return v1;
}

void sub_218E19094(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t systemListenerHasFirstWeekDayUpdates()
{
  void *v0;
  uint64_t v1;

  +[SystemListener defaultListener](SystemListener, "defaultListener");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "hasUpdatedFirstWeekDay");

  return v1;
}

void sub_218E190E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL14listenerLoggerv_block_invoke()
{
  const char *v0;
  os_log_t v1;
  void *v2;

  v0 = _nlpLoggingSubsystem();
  v1 = os_log_create(v0, "QueryParserListener");
  v2 = (void *)listenerLogger(void)::log;
  listenerLogger(void)::log = (uint64_t)v1;

}

uint64_t QP::GraphStructureStack::Node::reduce(unsigned __int16 *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _BOOL4 v39;
  unint64_t *v40;
  unint64_t v41;
  unsigned __int16 **v42;
  unsigned __int16 **v43;
  unsigned __int16 *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  void **v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  void ***v59;

  v4 = *((_QWORD *)a1 + 1);
  if (v4 == -1)
  {
    v5 = *a2;
    if (*(unsigned __int16 *)*a2 == *a1)
    {
      *(_OWORD *)(a1 + 4) = *(_OWORD *)(v5 + 8);
      *((_QWORD *)a1 + 3) = *(_QWORD *)(v5 + 24);
      *((_OWORD *)a1 + 2) = *(_OWORD *)(v5 + 32);
      v6 = *(_QWORD *)(v5 + 56);
      *(_QWORD *)&v57 = *(_QWORD *)(v5 + 48);
      *((_QWORD *)&v57 + 1) = v6;
      if (v6)
      {
        v7 = (unint64_t *)(v6 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)(a1 + 24), &v57);
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
      if (*((_QWORD *)&v57 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v12 = *a2;
      v58 = 0;
      v57 = 0uLL;
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>((char *)&v57, *(_QWORD **)(v12 + 64), *(_QWORD **)(v12 + 72), (uint64_t)(*(_QWORD *)(v12 + 72) - *(_QWORD *)(v12 + 64)) >> 4);
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__vdeallocate((void **)a1 + 8);
      *((_OWORD *)a1 + 4) = v57;
      *((_QWORD *)a1 + 10) = v58;
      v58 = 0;
      v57 = 0uLL;
      v54 = (void **)&v57;
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v54);
      a1[44] = *(_WORD *)(*a2 + 88);
      v13 = 0;
      goto LABEL_12;
    }
  }
  v16 = *((_QWORD *)a1 + 6);
  if (!v16)
    return 0;
  v17 = (std::__shared_weak_count *)*((_QWORD *)a1 + 7);
  if (!v17)
  {
    if (*(_QWORD *)(v16 + 8) == v4)
      goto LABEL_29;
    return 0;
  }
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldxr(p_shared_owners);
  while (__stxr(v19 + 1, p_shared_owners));
  v20 = *(_QWORD *)(v16 + 8);
  v21 = *((_QWORD *)a1 + 1);
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (v20 != v21)
    return 0;
LABEL_29:
  v23 = *((_QWORD *)a1 + 6);
  v24 = (std::__shared_weak_count *)*((_QWORD *)a1 + 7);
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  if (*(_BYTE *)(v23 + 88))
  {
    v27 = *((_QWORD *)a1 + 6);
    v28 = (std::__shared_weak_count *)*((_QWORD *)a1 + 7);
    if (!v28)
    {
      v31 = *(_QWORD *)(v27 + 8) + 1 == *(_QWORD *)(*a2 + 8);
      if (!v24)
        goto LABEL_48;
      goto LABEL_43;
    }
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    v31 = *(_QWORD *)(v27 + 8) + 1 == *(_QWORD *)(*a2 + 8);
    do
      v32 = __ldaxr(v29);
    while (__stlxr(v32 - 1, v29));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      if (!v24)
        goto LABEL_48;
      goto LABEL_43;
    }
  }
  else
  {
    v31 = 0;
  }
  if (!v24)
    goto LABEL_48;
LABEL_43:
  v33 = (unint64_t *)&v24->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_48:
  if (!v31)
  {
    v35 = *((_QWORD *)a1 + 6);
    v36 = (std::__shared_weak_count *)*((_QWORD *)a1 + 7);
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    if (*(_BYTE *)(v35 + 88))
    {
      v39 = 0;
    }
    else
    {
      v49 = *((_QWORD *)a1 + 6);
      v50 = (std::__shared_weak_count *)*((_QWORD *)a1 + 7);
      if (v50)
      {
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
        v39 = *(_QWORD *)(v49 + 8) < *(_QWORD *)(*a2 + 8);
        do
          v53 = __ldaxr(v51);
        while (__stlxr(v53 - 1, v51));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      else
      {
        v39 = *(_QWORD *)(v49 + 8) < *(_QWORD *)(*a2 + 8);
      }
    }
    if (v36)
    {
      v40 = (unint64_t *)&v36->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    if (!v39)
      return 0;
  }
  v43 = (unsigned __int16 **)*((_QWORD *)a1 + 8);
  v42 = (unsigned __int16 **)*((_QWORD *)a1 + 9);
  if (v43 == v42)
    return 0;
  while (1)
  {
    v44 = *v43;
    if (**v43 == *(unsigned __int16 *)*a2)
      break;
    v43 += 2;
    if (v43 == v42)
      return 0;
  }
  v45 = *((_QWORD *)v44 + 1);
  if (v45 == -1)
  {
    std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v43, a2);
    v13 = *((_DWORD *)*v43 + 1);
  }
  else
  {
    if (v45 == *(_QWORD *)(*a2 + 24))
    {
      v57 = 0uLL;
      v58 = 0;
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>((char *)&v57, *((_QWORD **)v44 + 8), *((_QWORD **)v44 + 9), (uint64_t)(*((_QWORD *)v44 + 9) - *((_QWORD *)v44 + 8)) >> 4);
      v46 = v57;
      v47 = *a2;
      v55 = 0;
      v56 = 0;
      v54 = 0;
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>((char *)&v54, *(_QWORD **)(v47 + 64), *(_QWORD **)(v47 + 72), (uint64_t)(*(_QWORD *)(v47 + 72) - *(_QWORD *)(v47 + 64)) >> 4);
      v48 = v55 - (_QWORD)v54;
      v59 = &v54;
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
      v54 = (void **)&v57;
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v54);
      v13 = *((_DWORD *)*v43 + 1);
      if (*((_QWORD *)&v46 + 1) - (_QWORD)v46 == v48)
        goto LABEL_12;
    }
    else
    {
      v13 = *((_DWORD *)v44 + 1);
    }
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)a1 + 8, (__int128 *)a2);
  }
LABEL_12:
  if (*((_BYTE *)a1 + 95) || *((_BYTE *)a1 + 90) || *((_BYTE *)a1 + 93) || *((_BYTE *)a1 + 92))
  {
    v14 = *a2;
    *((_QWORD *)a1 + 5) = *(_QWORD *)(*a2 + 32) - *((_QWORD *)a1 + 4) + *(_QWORD *)(*a2 + 40);
  }
  else
  {
    v14 = *a2;
  }
  *((_QWORD *)a1 + 3) = *(_QWORD *)(v14 + 8);
  *((_DWORD *)a1 + 1) = v13;
  return 1;
}

void sub_218E195E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

_QWORD *std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

uint64_t std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = result;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(result, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v29 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v30 = v27;
    v28 = v26.i64[0];
    result = std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return result;
}

double QP::GraphStructureStack::GraphStructureStack(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  double result;

  v2 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = -1;
  *(_QWORD *)(a1 + 96) = -1;
  *(_QWORD *)(a1 + 104) = -1;
  return result;
}

BOOL QP::GraphStructureStack::nodeFromNodeId@<W0>(QP::ParserGrammar **this@<X0>, float a2@<S0>, CFRange a3@<0:X5, 8:X6>, unsigned int a4@<W1>, char a5@<W2>, uint64_t a6@<X3>, uint64_t a7@<X4>, _QWORD *a8@<X8>)
{
  CFIndex length;
  CFIndex location;
  char *v17;
  _BYTE *v18;
  _BOOL8 result;

  length = a3.length;
  location = a3.location;
  v17 = (char *)operator new(0x78uLL);
  v18 = v17;
  *((_QWORD *)v17 + 2) = 0;
  *(_QWORD *)v17 = &unk_24DA24A58;
  *((_QWORD *)v17 + 1) = 0;
  *((_WORD *)v17 + 12) = a4;
  *((_QWORD *)v17 + 4) = a6;
  *((_QWORD *)v17 + 5) = a7;
  *((_QWORD *)v17 + 6) = a6;
  *((_QWORD *)v17 + 7) = location;
  *((_QWORD *)v17 + 8) = length;
  v17[119] = 0;
  *(_OWORD *)(v17 + 102) = 0u;
  *(_OWORD *)(v17 + 72) = 0u;
  *(_OWORD *)(v17 + 88) = 0u;
  *a8 = v17 + 24;
  a8[1] = v17;
  v17[112] = a5;
  *((float *)v17 + 7) = a2;
  if ((unsigned __int16)kQPSymbolIdTerminal == a4)
    v17[112] = 1;
  v17[114] = QP::ParserGrammar::isInferred(*this, a4);
  v18[115] = QP::ParserGrammar::isCombinable(*this, a4);
  v18[116] = QP::ParserGrammar::isParent(*this, a4);
  v18[117] = QP::ParserGrammar::isExtension(*this, a4);
  v18[118] = QP::ParserGrammar::isExtended(*this, a4);
  result = QP::ParserGrammar::requiresComplement(*this, a4);
  v18[119] = result;
  return result;
}

void sub_218E19984(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

float QP::GraphStructureStack::addNodeIdToNode@<S0>(QP::ParserGrammar **a1@<X0>, CFRange **a2@<X1>, unsigned int a3@<W2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  CFRange *v8;
  unint64_t *p_length;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  CFRange *v15;
  float result;
  CFRange *v17;
  std::__shared_weak_count *v18;

  QP::GraphStructureStack::nodeFromNodeId(a1, *((float *)&(*a2)->location + 1), (*a2)[2], a3, a4, (*a2)->length, (*a2)[1].location, a5);
  v7 = *a5;
  v8 = a2[1];
  v17 = *a2;
  v18 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    p_length = (unint64_t *)&v8->length;
    do
      v10 = __ldxr(p_length);
    while (__stxr(v10 + 1, p_length));
  }
  std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((_QWORD *)(v7 + 48), (uint64_t *)&v17);
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = *a5;
  v15 = *a2;
  *(_QWORD *)(v14 + 24) = (*a2)[1].length;
  result = *((float *)&v15->location + 1);
  *(float *)(v14 + 4) = result;
  return result;
}

void QP::GraphStructureStack::shift(uint64_t *a1, unsigned __int16 **a2, char a3, uint64_t a4)
{
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[7];
  std::__shared_weak_count *v15;
  char v16;

  v5 = *a1;
  v7 = (uint64_t)*a2;
  v6 = a2[1];
  v8 = **a2;
  v14[0] = MEMORY[0x24BDAC760];
  v14[1] = 1174405120;
  v14[2] = ___ZN2QP19GraphStructureStack5shiftENSt3__110shared_ptrINS0_4NodeEEEbU13block_pointerFvS4_bPbE_block_invoke;
  v14[3] = &unk_24DA24980;
  v14[5] = a1;
  v14[6] = v7;
  v15 = (std::__shared_weak_count *)v6;
  if (v6)
  {
    v9 = (unint64_t *)(v6 + 4);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v14[4] = a4;
  v16 = a3;
  QP::ParserGrammar::expansions(v5, v8, (uint64_t)v14);
  v11 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_218E19B38(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN2QP19GraphStructureStack5shiftENSt3__110shared_ptrINS0_4NodeEEEbU13block_pointerFvS4_bPbE_block_invoke(uint64_t a1, unsigned int a2, _QWORD *a3, uint64_t a4)
{
  QP::ParserGrammar **v7;
  CFRange *v8;
  unint64_t *p_length;
  unint64_t v10;
  __n128 v11;
  unint64_t *v12;
  unint64_t v13;
  float *v14;
  float *v15;
  float *v16;
  double v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  float *v27;
  float *v28;
  BOOL v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  __int128 v43;
  __int128 v44;
  CFRange *v45[2];
  uint64_t v46;
  std::__shared_weak_count *v47;
  CFRange v48;

  v7 = *(QP::ParserGrammar ***)(a1 + 40);
  v8 = *(CFRange **)(a1 + 56);
  v45[0] = *(CFRange **)(a1 + 48);
  v45[1] = v8;
  if (v8)
  {
    p_length = (unint64_t *)&v8->length;
    do
      v10 = __ldxr(p_length);
    while (__stxr(v10 + 1, p_length));
  }
  v11.n128_f32[0] = QP::GraphStructureStack::addNodeIdToNode(v7, v45, a2, 0, &v46);
  if (v8)
  {
    v12 = (unint64_t *)&v8->length;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      (*(void (**)(CFRange *, __n128))(v8->location + 16))(v8, v11);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8);
    }
  }
  v16 = (float *)*a3;
  v14 = (float *)(a3 + 1);
  v15 = v16;
  if (v16 == v14)
  {
    v30 = 0.0;
  }
  else
  {
    v17 = 0.0;
    do
    {
      v48.location = -1;
      v48.length = 0;
      QP::GraphStructureStack::nodeFromNodeId(v7, v15[8], v48, *((unsigned __int16 *)v15 + 14), 0, -1, -1, &v44);
      if (v17 < *(float *)(v44 + 4))
        v17 = *(float *)(v44 + 4);
      v18 = v46;
      v43 = v44;
      if (*((_QWORD *)&v44 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)(v18 + 64), &v43);
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
      if (*((_QWORD *)&v43 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
      if (*((_QWORD *)&v44 + 1))
      {
        v25 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = (float *)*((_QWORD *)v15 + 1);
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = *(float **)v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (float *)*((_QWORD *)v15 + 2);
          v29 = *(_QWORD *)v28 == (_QWORD)v15;
          v15 = v28;
        }
        while (!v29);
      }
      v15 = v28;
    }
    while (v28 != v14);
    v30 = v17;
  }
  v31 = v46;
  *(float *)(v46 + 4) = v30;
  v32 = *(_QWORD *)(a1 + 32);
  v41 = v31;
  v42 = v47;
  if (v47)
  {
    p_shared_owners = (unint64_t *)&v47->__shared_owners_;
    do
      v34 = __ldxr(p_shared_owners);
    while (__stxr(v34 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *, _QWORD, uint64_t))(v32 + 16))(v32, &v41, *(unsigned __int8 *)(a1 + 64), a4);
  v35 = v42;
  if (v42)
  {
    v36 = (unint64_t *)&v42->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v47;
  if (v47)
  {
    v39 = (unint64_t *)&v47->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_218E19DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_48c57_ZTSNSt3__110shared_ptrIN2QP19GraphStructureStack4NodeEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_48c57_ZTSNSt3__110shared_ptrIN2QP19GraphStructureStack4NodeEEE(uint64_t a1)
{
  return std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](a1 + 48);
}

void QP::GraphStructureStack::shiftReduce(uint64_t a1, __int128 *a2, int a3, uint64_t a4)
{
  char **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v11;
  void **v12;
  void **v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  __int128 *v32;
  unsigned __int16 *v33;
  unint64_t *v34;
  unint64_t v35;
  unsigned __int16 *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  void **v48;
  void **v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  char v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unsigned __int16 *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int16 *v74;
  void **v75;
  void **v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  char v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unsigned __int16 *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unsigned __int16 *v99;
  unint64_t *v100;
  unint64_t v101;
  unsigned __int16 **v102;
  unsigned __int16 *v103;
  unint64_t *v104;
  unint64_t v105;
  int v106;
  unsigned __int16 **v107;
  unsigned __int16 *v108[2];
  unsigned __int16 *v109[2];
  unsigned __int16 *v110[2];
  uint64_t v111[2];
  void *v112;
  std::__shared_weak_count *v113;
  unsigned __int16 *v114[2];
  uint64_t v115[2];
  void *v116;
  std::__shared_weak_count *v117;
  void **v118;
  void **v119;
  uint64_t v120;
  _QWORD v121[8];
  char v122[24];
  uint64_t v123;
  std::__shared_weak_count *v124;
  unsigned __int16 *v125[2];
  char **v126;
  char ***v127;
  uint64_t v128;
  __n128 (*v129)(_QWORD *, uint64_t);
  void (*v130)(uint64_t);
  _QWORD v131[3];
  char *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t *v136;
  uint64_t v137;
  void **v138;
  uint64_t *v139;
  uint64_t v140;
  void ***v141;
  void ****v142;
  uint64_t v143;
  char v144;
  uint64_t v145[2];
  void *v146;
  std::__shared_weak_count *v147;
  void ***v148;

  v8 = *(uint64_t **)(a1 + 16);
  v9 = *(uint64_t **)(a1 + 24);
  v7 = (char **)(a1 + 16);
  if ((unint64_t)((char *)v9 - (char *)v8) > 0xF0)
    return;
  v11 = *(_QWORD *)a2;
  if (**(unsigned __int16 **)a2 == (unsigned __int16)kQPSymbolIdRoot)
  {
    if (a3)
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100](v7, a2);
    return;
  }
  if (*(_BYTE *)(v11 + 93))
  {
    v126 = 0;
    v127 = 0;
    v128 = 0;
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>,std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>>((uint64_t *)&v126, 0, v8, v9, ((char *)v9 - (char *)v8) >> 4);
    if (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 16))
    {
      v12 = (void **)v126;
      v13 = (void **)v127;
      while (v12 != v13)
      {
        v14 = (std::__shared_weak_count *)v12[1];
        v146 = *v12;
        v147 = v14;
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldxr(p_shared_owners);
          while (__stxr(v16 + 1, p_shared_owners));
        }
        v17 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
        v145[0] = *(_QWORD *)a2;
        v145[1] = (uint64_t)v17;
        if (v17)
        {
          v18 = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        QP::GraphStructureStack::reduce(a1, (uint64_t)&v146, v145, a4);
        if (v17)
        {
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v22 = v147;
        if (v147)
        {
          v23 = (unint64_t *)&v147->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v12 += 2;
      }
    }
    v141 = (void ***)&v126;
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v141);
    return;
  }
  if (!*(_BYTE *)(v11 + 91))
  {
    v141 = 0;
    v142 = &v141;
    v143 = 0x2000000000;
    v144 = 0;
    v28 = (uint64_t *)(a1 + 40);
    v27 = *(uint64_t **)(a1 + 40);
    v29 = *(_QWORD *)(a1 + 104);
    v30 = *(uint64_t **)(a1 + 48);
    if (v30 != v27 && *(_QWORD *)(v11 + 8) == v29 + 1 && *(_BYTE *)(v11 + 88))
    {
      v106 = a3;
      v138 = 0;
      v139 = 0;
      v140 = 0;
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>,std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>>((uint64_t *)&v138, 0, v27, v30, ((char *)v30 - (char *)v27) >> 4);
      v135 = 0;
      v136 = 0;
      v137 = 0;
      v132 = 0;
      v133 = 0;
      v134 = 0;
      v126 = 0;
      v127 = &v126;
      v128 = 0x4002000000;
      v129 = __Block_byref_object_copy__1;
      v130 = __Block_byref_object_dispose__1;
      memset(v131, 0, sizeof(v131));
      v32 = *(__int128 **)(a1 + 40);
      v31 = *(_QWORD *)(a1 + 48);
      while (1)
      {
        if (v32 == (__int128 *)v31)
        {
          v44 = v31;
        }
        else
        {
          do
          {
            if (*(_QWORD *)(*(_QWORD *)v32 + 8) == v29)
            {
              if (QP::ParserGrammar::hasExpansions(*(QP::ParserGrammar **)a1, **(unsigned __int16 **)v32))
              {
                v33 = (unsigned __int16 *)*((_QWORD *)v32 + 1);
                v125[0] = *(unsigned __int16 **)v32;
                v125[1] = v33;
                if (v33)
                {
                  v34 = (unint64_t *)(v33 + 4);
                  do
                    v35 = __ldxr(v34);
                  while (__stxr(v35 + 1, v34));
                }
                v121[0] = MEMORY[0x24BDAC760];
                v121[1] = 1174405120;
                v121[2] = ___ZN2QP19GraphStructureStack11shiftReduceENSt3__110shared_ptrINS0_4NodeEEEbU13block_pointerFvS4_bPbE_block_invoke;
                v121[3] = &unk_24DA249F0;
                v121[7] = a1;
                memset(v122, 0, sizeof(v122));
                std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>(v122, v132, v133, (v133 - v132) >> 4);
                v121[4] = a4;
                v121[5] = &v141;
                v36 = (unsigned __int16 *)*((_QWORD *)a2 + 1);
                v123 = *(_QWORD *)a2;
                v124 = (std::__shared_weak_count *)v36;
                if (v36)
                {
                  v37 = (unint64_t *)(v36 + 4);
                  do
                    v38 = __ldxr(v37);
                  while (__stxr(v38 + 1, v37));
                }
                v121[6] = &v126;
                QP::GraphStructureStack::shift((uint64_t *)a1, v125, 1, (uint64_t)v121);
                if (v33)
                {
                  v39 = (unint64_t *)(v33 + 4);
                  do
                    v40 = __ldaxr(v39);
                  while (__stlxr(v40 - 1, v39));
                  if (!v40)
                  {
                    (*(void (**)(unsigned __int16 *))(*(_QWORD *)v33 + 16))(v33);
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v33);
                  }
                }
                v41 = v124;
                if (v124)
                {
                  v42 = (unint64_t *)&v124->__shared_owners_;
                  do
                    v43 = __ldaxr(v42);
                  while (__stlxr(v43 - 1, v42));
                  if (!v43)
                  {
                    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                    std::__shared_weak_count::__release_weak(v41);
                  }
                }
                v118 = (void **)v122;
                std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v118);
              }
            }
            else
            {
              std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100](&v135, v32);
            }
            ++v32;
          }
          while (v32 != (__int128 *)v31);
          v44 = *(_QWORD *)(a1 + 40);
          v31 = *(_QWORD *)(a1 + 48);
        }
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::erase((uint64_t)v28, v44, v31);
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>,std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>>(v28, *(_QWORD *)(a1 + 48), (uint64_t *)v135, v136, ((char *)v136 - v135) >> 4);
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::erase((uint64_t)&v135, (uint64_t)v135, (uint64_t)v136);
        v45 = *(_QWORD *)(a1 + 40);
        v46 = *(_QWORD *)(a1 + 48);
        if (v46 == v45)
          break;
        if (v127[6] == v127[5])
        {
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::erase((uint64_t)v28, v45, v46);
LABEL_108:
          v29 = -1;
          goto LABEL_109;
        }
        v29 = *(_QWORD *)(*(_QWORD *)(v46 - 16) + 8);
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::erase((uint64_t)&v132, (uint64_t)v132, (uint64_t)v133);
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>,std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>>((uint64_t *)&v132, (uint64_t)v133, (uint64_t *)v127[5], (uint64_t *)v127[6], ((char *)v127[6] - (char *)v127[5]) >> 4);
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::erase((uint64_t)(v127 + 5), (uint64_t)v127[5], (uint64_t)v127[6]);
LABEL_109:
        v32 = *(__int128 **)(a1 + 40);
        v31 = *(_QWORD *)(a1 + 48);
        if ((__int128 *)v31 == v32)
        {
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::erase((uint64_t)v28, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 48));
          a3 = v106;
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>,std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>>(v28, *(_QWORD *)(a1 + 48), (uint64_t *)v138, v139, ((char *)v139 - (char *)v138) >> 4);
          _Block_object_dispose(&v126, 8);
          v118 = (void **)v131;
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v118);
          v126 = &v132;
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
          v126 = &v135;
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
          v126 = (char **)&v138;
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
          v11 = *(_QWORD *)a2;
          v29 = *(_QWORD *)(a1 + 104);
          goto LABEL_111;
        }
      }
      v47 = (uint64_t *)v127[5];
      v107 = (unsigned __int16 **)v127[6];
      if (v47 != (uint64_t *)v107)
      {
        do
        {
          v118 = 0;
          v119 = 0;
          v120 = 0;
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>,std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>>((uint64_t *)&v118, 0, *(uint64_t **)(a1 + 16), *(uint64_t **)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 4);
          v49 = v118;
          v48 = v119;
          if (v118 == v119)
            goto LABEL_174;
          v50 = 0;
          do
          {
            while (1)
            {
              v51 = *((_QWORD *)*v49 + 3);
              v52 = *v47;
              v53 = *(_QWORD *)(*v47 + 8);
              v54 = v51 == v53 || v51 + 1 == v53;
              if (!v54 && v51 != *(_QWORD *)(v52 + 24))
                break;
              v55 = (std::__shared_weak_count *)v49[1];
              v116 = *v49;
              v117 = v55;
              if (v55)
              {
                v56 = (unint64_t *)&v55->__shared_owners_;
                do
                  v57 = __ldxr(v56);
                while (__stxr(v57 + 1, v56));
                v52 = *v47;
              }
              v58 = (std::__shared_weak_count *)v47[1];
              v115[0] = v52;
              v115[1] = (uint64_t)v58;
              if (v58)
              {
                v59 = (unint64_t *)&v58->__shared_owners_;
                do
                  v60 = __ldxr(v59);
                while (__stxr(v60 + 1, v59));
              }
              v61 = QP::GraphStructureStack::reduce(a1, (uint64_t)&v116, v115, a4);
              if (v58)
              {
                v62 = (unint64_t *)&v58->__shared_owners_;
                do
                  v63 = __ldaxr(v62);
                while (__stlxr(v63 - 1, v62));
                if (!v63)
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                }
              }
              v64 = v117;
              if (v117)
              {
                v65 = (unint64_t *)&v117->__shared_owners_;
                do
                  v66 = __ldaxr(v65);
                while (__stlxr(v66 - 1, v65));
                if (!v66)
                {
                  ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                  std::__shared_weak_count::__release_weak(v64);
                }
              }
              if ((v61 & 1) == 0)
                break;
              v50 = 1;
              *((_BYTE *)v142 + 24) = 1;
              v49 += 2;
              if (v49 == v48)
                goto LABEL_105;
            }
            v49 += 2;
          }
          while (v49 != v48);
          if ((v50 & 1) == 0)
          {
LABEL_174:
            if (QP::ParserGrammar::hasExpansions(*(QP::ParserGrammar **)a1, *(unsigned __int16 *)*v47))
            {
              v67 = (unsigned __int16 *)v47[1];
              v114[0] = (unsigned __int16 *)*v47;
              v114[1] = v67;
              if (v67)
              {
                v68 = (unint64_t *)(v67 + 4);
                do
                  v69 = __ldxr(v68);
                while (__stxr(v69 + 1, v68));
              }
              QP::GraphStructureStack::shift((uint64_t *)a1, v114, 1, a4);
              if (v67)
              {
                v70 = (unint64_t *)(v67 + 4);
                do
                  v71 = __ldaxr(v70);
                while (__stlxr(v71 - 1, v70));
                if (!v71)
                {
                  (*(void (**)(unsigned __int16 *))(*(_QWORD *)v67 + 16))(v67);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v67);
                }
              }
              if ((unint64_t)((char *)v119 - (char *)v118) < *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16))
                *((_BYTE *)v142 + 24) = 1;
            }
          }
LABEL_105:
          v148 = &v118;
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v148);
          v47 += 2;
        }
        while (v47 != (uint64_t *)v107);
        v29 = -1;
        v28 = (uint64_t *)(a1 + 40);
        goto LABEL_109;
      }
      goto LABEL_108;
    }
LABEL_111:
    if (*(_QWORD *)(v11 + 8) > v29 + 1)
    {
      v72 = *(_QWORD *)(a1 + 40);
      v73 = *(_QWORD *)(a1 + 48);
      if (v73 != v72)
      {
        if (*(_BYTE *)(v11 + 88))
        {
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::erase((uint64_t)v28, v72, v73);
          *(_QWORD *)(a1 + 104) = -1;
        }
      }
    }
    if (!*((_BYTE *)v142 + 24) && a3)
    {
      v126 = 0;
      v127 = 0;
      v128 = 0;
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>,std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>>((uint64_t *)&v126, 0, *(uint64_t **)(a1 + 16), *(uint64_t **)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 4);
      v74 = *(unsigned __int16 **)a2;
      if (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 16) && *((_QWORD *)v74 + 1))
      {
        v75 = (void **)v126;
        v76 = (void **)v127;
        if (v126 == (char **)v127)
          goto LABEL_164;
        v77 = 0;
        while (1)
        {
          while (1)
          {
            v78 = *((_QWORD *)*v75 + 3);
            v79 = *(_QWORD *)a2;
            v80 = *(_QWORD *)(*(_QWORD *)a2 + 8);
            v81 = v78 + 1 == v80 || v78 == v80;
            if (v81 || v78 == *(_QWORD *)(v79 + 24))
              break;
LABEL_153:
            v75 += 2;
            if (v75 == v76)
            {
              if ((v77 & 1) == 0)
              {
                v74 = *(unsigned __int16 **)a2;
LABEL_164:
                if (QP::ParserGrammar::hasExpansions(*(QP::ParserGrammar **)a1, *v74))
                {
                  v103 = (unsigned __int16 *)*((_QWORD *)a2 + 1);
                  v109[0] = *(unsigned __int16 **)a2;
                  v109[1] = v103;
                  if (v103)
                  {
                    v104 = (unint64_t *)(v103 + 4);
                    do
                      v105 = __ldxr(v104);
                    while (__stxr(v105 + 1, v104));
                  }
                  v102 = v109;
                  QP::GraphStructureStack::shift((uint64_t *)a1, v109, 1, a4);
                  goto LABEL_169;
                }
              }
              goto LABEL_170;
            }
          }
          v82 = (std::__shared_weak_count *)v75[1];
          v112 = *v75;
          v113 = v82;
          if (v82)
          {
            v83 = (unint64_t *)&v82->__shared_owners_;
            do
              v84 = __ldxr(v83);
            while (__stxr(v84 + 1, v83));
            v79 = *(_QWORD *)a2;
          }
          v85 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
          v111[0] = v79;
          v111[1] = (uint64_t)v85;
          if (v85)
          {
            v86 = (unint64_t *)&v85->__shared_owners_;
            do
              v87 = __ldxr(v86);
            while (__stxr(v87 + 1, v86));
          }
          v88 = QP::GraphStructureStack::reduce(a1, (uint64_t)&v112, v111, a4);
          if (v85)
          {
            v89 = (unint64_t *)&v85->__shared_owners_;
            do
              v90 = __ldaxr(v89);
            while (__stlxr(v90 - 1, v89));
            if (!v90)
            {
              ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
              std::__shared_weak_count::__release_weak(v85);
            }
          }
          v91 = v113;
          if (v113)
          {
            v92 = (unint64_t *)&v113->__shared_owners_;
            do
              v93 = __ldaxr(v92);
            while (__stlxr(v93 - 1, v92));
            if (!v93)
            {
              ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
              std::__shared_weak_count::__release_weak(v91);
            }
          }
          if ((v88 & 1) == 0)
          {
            if (QP::ParserGrammar::hasExpansions(*(QP::ParserGrammar **)a1, **(unsigned __int16 **)a2))
            {
              v94 = (unsigned __int16 *)*((_QWORD *)a2 + 1);
              v110[0] = *(unsigned __int16 **)a2;
              v110[1] = v94;
              if (v94)
              {
                v95 = (unint64_t *)(v94 + 4);
                do
                  v96 = __ldxr(v95);
                while (__stxr(v96 + 1, v95));
              }
              QP::GraphStructureStack::shift((uint64_t *)a1, v110, 0, a4);
              if (v94)
              {
                v97 = (unint64_t *)(v94 + 4);
                do
                  v98 = __ldaxr(v97);
                while (__stlxr(v98 - 1, v97));
                if (!v98)
                {
                  (*(void (**)(unsigned __int16 *))(*(_QWORD *)v94 + 16))(v94);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v94);
                }
              }
            }
            goto LABEL_153;
          }
          v75 += 2;
          v77 = 1;
          if (v75 == v76)
            goto LABEL_170;
        }
      }
      if (QP::ParserGrammar::hasExpansions(*(QP::ParserGrammar **)a1, *v74))
      {
        v99 = (unsigned __int16 *)*((_QWORD *)a2 + 1);
        v108[0] = *(unsigned __int16 **)a2;
        v108[1] = v99;
        if (v99)
        {
          v100 = (unint64_t *)(v99 + 4);
          do
            v101 = __ldxr(v100);
          while (__stxr(v101 + 1, v100));
        }
        v102 = v108;
        QP::GraphStructureStack::shift((uint64_t *)a1, v108, 1, a4);
LABEL_169:
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v102);
      }
LABEL_170:
      v138 = (void **)&v126;
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v138);
    }
    _Block_object_dispose(&v141, 8);
    return;
  }
  if (*(_QWORD *)(v11 + 8) > *(_QWORD *)(a1 + 104) + 1)
  {
    v25 = *(_QWORD *)(a1 + 40);
    v26 = *(_QWORD *)(a1 + 48);
    if (v26 != v25)
    {
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::erase(a1 + 40, v25, v26);
      *(_QWORD *)(a1 + 104) = -1;
    }
  }
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)(a1 + 40), a2);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)a2 + 8);
}

void sub_218E1A8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;

  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  *(_QWORD *)(v48 - 200) = &a48;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v48 - 200));
  _Block_object_dispose((const void *)(v48 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t QP::GraphStructureStack::reduce(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  char v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  void ***v19;
  void ***v20;
  char v21;
  void **v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  int v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD v48[2];
  _QWORD v49[2];
  _QWORD v50[2];
  void **v51;
  std::__shared_weak_count *v52;
  void **v53;
  std::__shared_weak_count *v54;
  void ***v55;
  void ***v56;
  uint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;

  v5 = *(_QWORD **)a2;
  if (!*(_QWORD *)a2)
    return 0;
  if (v5[1] == -1)
    return 0;
  v6 = *((unsigned __int8 *)v5 + 88);
  if (*((_BYTE *)v5 + 88))
    return 0;
  if (a4 && *a3)
  {
    v11 = a3[1];
    v58 = *a3;
    v59 = (std::__shared_weak_count *)v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v14 = QP::GraphStructureStack::Node::reduce((unsigned __int16 *)v5, &v58);
    v15 = v59;
    if (v59)
    {
      p_shared_owners = (unint64_t *)&v59->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if ((v14 & 1) != 0)
      goto LABEL_57;
    v18 = *(_QWORD **)a2;
    v56 = 0;
    v57 = 0;
    v55 = 0;
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>((char *)&v55, (_QWORD *)v18[8], (_QWORD *)v18[9], (uint64_t)(v18[9] - v18[8]) >> 4);
    v19 = v55;
    v20 = v56;
    if (v55 == v56)
    {
      v53 = (void **)&v55;
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v53);
    }
    else
    {
      v21 = 0;
      do
      {
        v22 = *v19;
        v23 = (std::__shared_weak_count *)v19[1];
        v53 = *v19;
        v54 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
          v51 = v22;
          v52 = v23;
          do
            v26 = __ldxr(v24);
          while (__stxr(v26 + 1, v24));
        }
        else
        {
          v51 = v22;
          v52 = 0;
        }
        v27 = (std::__shared_weak_count *)a3[1];
        v50[0] = *a3;
        v50[1] = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = QP::GraphStructureStack::reduce(a1, &v51, v50, a4);
        if (v27)
        {
          v31 = (unint64_t *)&v27->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v33 = v52;
        if (v52)
        {
          v34 = (unint64_t *)&v52->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        if (v30)
          v21 = 1;
        v36 = v54;
        if (v54)
        {
          v37 = (unint64_t *)&v54->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        v19 += 2;
      }
      while (v19 != v20);
      v53 = (void **)&v55;
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v53);
      if ((v21 & 1) != 0)
      {
LABEL_57:
        v46 = *(_QWORD **)a2;
        v47 = (_QWORD *)*a3;
        if (*(_BYTE *)(*(_QWORD *)a2 + 92))
          v46[5] = v47[4] - v46[4] + v47[5];
        v46[3] = v47[3];
        return 1;
      }
    }
    v39 = *(_QWORD *)(*(_QWORD *)a2 + 56);
    v49[0] = *(_QWORD *)(*(_QWORD *)a2 + 48);
    v49[1] = v39;
    if (v39)
    {
      v40 = (unint64_t *)(v39 + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v42 = a3[1];
    v48[0] = *a3;
    v48[1] = v42;
    if (v42)
    {
      v43 = (unint64_t *)(v42 + 8);
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = QP::GraphStructureStack::reduce(a1, v49, v48, a4);
    std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v48);
    std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v49);
    if (!v45)
      return 0;
    goto LABEL_57;
  }
  return v6;
}

void sub_218E1AD7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 != a3)
  {
    v5 = a3;
    v6 = *(_QWORD *)(a1 + 8);
    if (a3 == v6)
    {
      v8 = a2;
    }
    else
    {
      v7 = 16 * ((a3 - a2) >> 4);
      v8 = a2;
      do
      {
        std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v8, (__int128 *)(v8 + v7));
        v8 += 16;
      }
      while (v8 + v7 != v6);
      v5 = *(_QWORD *)(a1 + 8);
    }
    while (v5 != v8)
      v5 = std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v5 - 16);
    *(_QWORD *)(a1 + 8) = v8;
  }
  return a2;
}

__n128 __Block_byref_object_copy__1(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN2QP19GraphStructureStack11shiftReduceENSt3__110shared_ptrINS0_4NodeEEEbU13block_pointerFvS4_bPbE_block_invoke(uint64_t a1, unsigned __int16 **a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unsigned __int16 *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unsigned __int16 *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unsigned __int16 *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unsigned __int16 *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD v56[8];
  std::__shared_weak_count *v57;
  unsigned __int16 *v58[2];
  unsigned __int16 *v59[2];
  unsigned __int16 *v60[2];
  uint64_t v61[2];
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67[2];
  unsigned __int16 *v68;
  std::__shared_weak_count *v69;
  void **v70;

  v5 = *(uint64_t **)(a1 + 64);
  v4 = *(uint64_t **)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 56);
  if (v4 != v5)
  {
    while (1)
    {
      v7 = (std::__shared_weak_count *)a2[1];
      v68 = *a2;
      v69 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      v10 = (std::__shared_weak_count *)v5[1];
      v67[0] = *v5;
      v67[1] = (uint64_t)v10;
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v13 = QP::GraphStructureStack::reduce(v6, (uint64_t)&v68, v67, *(_QWORD *)(a1 + 32));
      if (v10)
      {
        v14 = (unint64_t *)&v10->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v16 = v69;
      if (!v69)
        goto LABEL_17;
      v17 = (unint64_t *)&v69->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        if (v13)
        {
LABEL_18:
          v65 = 0;
          v66 = 0;
          v64 = 0;
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>,std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>>((uint64_t *)&v64, 0, *(uint64_t **)(v6 + 16), *(uint64_t **)(v6 + 24), (uint64_t)(*(_QWORD *)(v6 + 24) - *(_QWORD *)(v6 + 16)) >> 4);
          v19 = v64;
          v20 = v65;
          if (v65 != v64)
          {
            while (1)
            {
              v21 = (std::__shared_weak_count *)v19[1];
              v62 = *v19;
              v63 = v21;
              if (v21)
              {
                v22 = (unint64_t *)&v21->__shared_owners_;
                do
                  v23 = __ldxr(v22);
                while (__stxr(v23 + 1, v22));
              }
              v24 = (std::__shared_weak_count *)a2[1];
              v61[0] = (uint64_t)*a2;
              v61[1] = (uint64_t)v24;
              if (v24)
              {
                v25 = (unint64_t *)&v24->__shared_owners_;
                do
                  v26 = __ldxr(v25);
                while (__stxr(v26 + 1, v25));
              }
              v27 = QP::GraphStructureStack::reduce(v6, (uint64_t)&v62, v61, *(_QWORD *)(a1 + 32));
              if (v24)
              {
                v28 = (unint64_t *)&v24->__shared_owners_;
                do
                  v29 = __ldaxr(v28);
                while (__stlxr(v29 - 1, v28));
                if (!v29)
                {
                  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                  std::__shared_weak_count::__release_weak(v24);
                }
              }
              v30 = v63;
              if (!v63)
                goto LABEL_34;
              v31 = (unint64_t *)&v63->__shared_owners_;
              do
                v32 = __ldaxr(v31);
              while (__stlxr(v32 - 1, v31));
              if (!v32)
              {
                ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                std::__shared_weak_count::__release_weak(v30);
                if ((v27 & 1) == 0)
                {
LABEL_35:
                  if (QP::ParserGrammar::hasExpansions(*(QP::ParserGrammar **)v6, *(unsigned __int16 *)*v5))
                  {
                    v33 = a2[1];
                    v60[0] = *a2;
                    v60[1] = v33;
                    if (v33)
                    {
                      v34 = (unint64_t *)(v33 + 4);
                      do
                        v35 = __ldxr(v34);
                      while (__stxr(v35 + 1, v34));
                    }
                    QP::GraphStructureStack::shift((uint64_t *)v6, v60, 0, *(_QWORD *)(a1 + 32));
                    if (v33)
                    {
                      v36 = (unint64_t *)(v33 + 4);
                      do
                        v37 = __ldaxr(v36);
                      while (__stlxr(v37 - 1, v36));
                      if (!v37)
                      {
                        (*(void (**)(unsigned __int16 *))(*(_QWORD *)v33 + 16))(v33);
                        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v33);
                      }
                    }
                  }
                }
              }
              else
              {
LABEL_34:
                if ((v27 & 1) == 0)
                  goto LABEL_35;
              }
              v19 += 2;
              if (v19 == v20)
                goto LABEL_46;
            }
          }
          v38 = a2[1];
          v59[0] = *a2;
          v59[1] = v38;
          if (v38)
          {
            v39 = (unint64_t *)(v38 + 4);
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
          }
          QP::GraphStructureStack::shift((uint64_t *)v6, v59, 1, *(_QWORD *)(a1 + 32));
          if (v38)
          {
            v41 = (unint64_t *)(v38 + 4);
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              (*(void (**)(unsigned __int16 *))(*(_QWORD *)v38 + 16))(v38);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v38);
            }
          }
LABEL_46:
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
          v70 = (void **)&v64;
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v70);
        }
      }
      else
      {
LABEL_17:
        if (v13)
          goto LABEL_18;
      }
      v5 += 2;
      if (v5 == v4)
        return;
    }
  }
  v43 = *(unsigned __int16 **)(a1 + 96);
  v58[0] = *(unsigned __int16 **)(a1 + 88);
  v58[1] = v43;
  if (v43)
  {
    v44 = (unint64_t *)(v43 + 4);
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  v56[0] = MEMORY[0x24BDAC760];
  v56[1] = 1174405120;
  v56[2] = ___ZN2QP19GraphStructureStack11shiftReduceENSt3__110shared_ptrINS0_4NodeEEEbU13block_pointerFvS4_bPbE_block_invoke_2;
  v56[3] = &unk_24DA249B8;
  v47 = *a2;
  v46 = (std::__shared_weak_count *)a2[1];
  v56[6] = v6;
  v56[7] = v47;
  v57 = v46;
  if (v46)
  {
    v48 = (unint64_t *)&v46->__shared_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  v50 = *(_QWORD *)(a1 + 48);
  v56[4] = *(_QWORD *)(a1 + 32);
  v56[5] = v50;
  QP::GraphStructureStack::shift((uint64_t *)v6, v58, 1, (uint64_t)v56);
  if (v43)
  {
    v51 = (unint64_t *)(v43 + 4);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      (*(void (**)(unsigned __int16 *))(*(_QWORD *)v43 + 16))(v43);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v43);
    }
  }
  v53 = v57;
  if (v57)
  {
    v54 = (unint64_t *)&v57->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
}

void sub_218E1B308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v10);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN2QP19GraphStructureStack11shiftReduceENSt3__110shared_ptrINS0_4NodeEEEbU13block_pointerFvS4_bPbE_block_invoke_2(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18[2];
  uint64_t v19;
  std::__shared_weak_count *v20;

  v4 = a1 + 7;
  v3 = a1[7];
  v5 = a1[6];
  v6 = (std::__shared_weak_count *)v4[1];
  v19 = v3;
  v20 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (std::__shared_weak_count *)a2[1];
  v18[0] = *a2;
  v18[1] = (uint64_t)v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = QP::GraphStructureStack::reduce(v5, (uint64_t)&v19, v18, a1[4]);
  if (v9)
  {
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v15 = v20;
  if (!v20)
    goto LABEL_16;
  v16 = (unint64_t *)&v20->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
  {
LABEL_16:
    if (!v12)
      return;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  if (v12)
LABEL_17:
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)(*(_QWORD *)(a1[5] + 8) + 40), (__int128 *)v4);
}

void sub_218E1B4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_56c57_ZTSNSt3__110shared_ptrIN2QP19GraphStructureStack4NodeEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 64) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_56c57_ZTSNSt3__110shared_ptrIN2QP19GraphStructureStack4NodeEEE(uint64_t a1)
{
  return std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](a1 + 56);
}

char *__copy_helper_block_e8_64c89_ZTSNSt3__16vectorINS_10shared_ptrIN2QP19GraphStructureStack4NodeEEENS_9allocatorIS5_EEEE88c57_ZTSNSt3__110shared_ptrIN2QP19GraphStructureStack4NodeEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v3 = a1 + 64;
  *(_QWORD *)(a1 + 80) = 0;
  result = std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>((char *)(a1 + 64), *(_QWORD **)(a2 + 64), *(_QWORD **)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  v5 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(v3 + 24) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(v3 + 32) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_e8_64c89_ZTSNSt3__16vectorINS_10shared_ptrIN2QP19GraphStructureStack4NodeEEENS_9allocatorIS5_EEEE88c57_ZTSNSt3__110shared_ptrIN2QP19GraphStructureStack4NodeEEE(uint64_t a1)
{
  void **v1;
  void **v2;

  v1 = (void **)(a1 + 64);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](a1 + 88);
  v2 = v1;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void QP::GraphStructureStack::add(QP::GraphStructureStack *this, unsigned int a2, uint64_t a3, uint64_t a4, CFRange a5)
{
  CFIndex length;
  CFIndex location;
  char *v11;
  unint64_t *v12;
  unint64_t v13;
  __n128 v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  __int128 v28;
  _QWORD v29[6];
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  void (*v34)(uint64_t);
  _QWORD *v35;
  CFRange *v36[2];
  __int128 v37;
  char *v38;
  std::__shared_weak_count *v39;

  if (a2 && *(_QWORD *)this)
  {
    length = a5.length;
    location = a5.location;
    if (*((_QWORD *)this + 11) + 1 < a3)
      *((_QWORD *)this + 11) = a3;
    v11 = (char *)operator new(0x78uLL);
    *((_QWORD *)v11 + 1) = 0;
    v12 = (unint64_t *)(v11 + 8);
    *((_QWORD *)v11 + 2) = 0;
    *(_QWORD *)v11 = &unk_24DA24A58;
    *((_WORD *)v11 + 12) = kQPSymbolIdNone;
    *((_QWORD *)v11 + 4) = a3;
    *((_QWORD *)v11 + 5) = a4;
    *((_QWORD *)v11 + 6) = a3;
    *((_QWORD *)v11 + 7) = location;
    *((_QWORD *)v11 + 8) = length;
    v11[119] = 0;
    *(_OWORD *)(v11 + 102) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    v38 = v11 + 24;
    v39 = (std::__shared_weak_count *)v11;
    v11[113] = 1;
    v36[0] = (CFRange *)(v11 + 24);
    v36[1] = (CFRange *)v11;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v14.n128_f32[0] = QP::GraphStructureStack::addNodeIdToNode((QP::ParserGrammar **)this, v36, a2, 1, (uint64_t *)&v37);
    do
      v15 = __ldaxr(v12);
    while (__stlxr(v15 - 1, v12));
    if (!v15)
    {
      (*(void (**)(char *, __n128))(*(_QWORD *)v11 + 16))(v11, v14);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v11);
    }
    v30 = 0;
    v31 = &v30;
    v32 = 0x3002000000;
    v33 = __Block_byref_object_copy__4;
    v34 = __Block_byref_object_dispose__5;
    v29[1] = 0x40000000;
    v29[2] = ___ZN2QP19GraphStructureStack3addEtll7CFRange_block_invoke;
    v29[3] = &unk_24DA24A28;
    v29[4] = &v30;
    v29[5] = this;
    v16 = v29;
    v35 = v29;
    v28 = v37;
    v29[0] = MEMORY[0x24BDAC760];
    if (*((_QWORD *)&v37 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      v16 = (_QWORD *)v31[5];
    }
    QP::GraphStructureStack::shiftReduce((uint64_t)this, &v28, 1, (uint64_t)v16);
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v28 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    *((_QWORD *)this + 12) = a3;
    _Block_object_dispose(&v30, 8);
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = v39;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
}

void sub_218E1B808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Block_object_dispose(&a17, 8);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v17 - 96);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v17 - 80);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__4(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void ___ZN2QP19GraphStructureStack3addEtll7CFRange_block_invoke(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = a2[1];
  *(_QWORD *)&v11 = *a2;
  *((_QWORD *)&v11 + 1) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  QP::GraphStructureStack::shiftReduce(v4, &v11, a3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_218E1B8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QP::GraphStructureStack::close(QP::GraphStructureStack *this)
{
  uint64_t *v3;
  __int128 *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL (*v18)(uint64_t *, uint64_t *);
  char **v19;

  v3 = (uint64_t *)*((_QWORD *)this + 2);
  v4 = (__int128 *)*((_QWORD *)this + 3);
  v5 = (uint64_t *)((char *)this + 16);
  v6 = 126 - 2 * __clz(((char *)v4 - (char *)v3) >> 4);
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = QP::GraphStructureStack::state_greater_than_span;
  if (v4 == (__int128 *)v3)
    v7 = 0;
  else
    v7 = v6;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*,false>(v3, v4, (uint64_t (**)(uint64_t *, uint64_t *))&v18, v7, 1);
  v8 = (__int128 *)*((_QWORD *)this + 2);
  v9 = (__int128 *)*((_QWORD *)this + 3);
  if (v8 == v9)
  {
    v14 = *((_QWORD *)this + 2);
  }
  else
  {
    v10 = 0;
    v11 = -1;
    do
    {
      if (v11 != -1 && (*(_QWORD *)(*(_QWORD *)v8 + 32) != v11 || *(_QWORD *)(*(_QWORD *)v8 + 40) != v10))
        break;
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100](&v15, v8);
      v13 = *(_QWORD *)v8++;
      v11 = *(_QWORD *)(v13 + 32);
      v10 = *(_QWORD *)(v13 + 40);
    }
    while (v8 != v9);
    v14 = *((_QWORD *)this + 2);
    v8 = (__int128 *)*((_QWORD *)this + 3);
  }
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::erase((uint64_t)v5, v14, (uint64_t)v8);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>,std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>>(v5, *((_QWORD *)this + 3), (uint64_t *)v15, v16, ((char *)v16 - v15) >> 4);
  v19 = &v15;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
}

void sub_218E1BA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

BOOL QP::GraphStructureStack::state_greater_than_span(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v19;
  float v20;

  v2 = *a1;
  v3 = *a2;
  if (*a1 == *a2)
    return 0;
  v4 = *(_QWORD *)(v2 + 8);
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(v3 + 24);
  if (v4 == v5)
  {
    v10 = __OFSUB__(v6, v7);
    v8 = v6 == v7;
    v9 = v6 - v7 < 0;
    v7 = *(_QWORD *)(v2 + 24);
    if (!v8)
      return !(v9 ^ v10 | v8);
  }
  v11 = v6 - v4;
  v12 = v7 - v5;
  v10 = __OFSUB__(v11, v12);
  v8 = v11 == v12;
  v9 = v11 - v12 < 0;
  if (v11 != v12)
    return !(v9 ^ v10 | v8);
  v13 = *(_QWORD *)(v2 + 32);
  v14 = *(_QWORD *)(v2 + 40);
  v15 = *(_QWORD *)(v3 + 32);
  v16 = *(_QWORD *)(v3 + 40);
  if (v13 != v15 || v14 != v16)
  {
    v10 = __OFSUB__(v14, v16);
    v8 = v14 == v16;
    v9 = v14 - v16 < 0;
    if (v14 == v16)
      return v13 < v15;
    return !(v9 ^ v10 | v8);
  }
  if (v4 != v5)
    return 0;
  v19 = *(float *)(v2 + 4);
  v20 = *(float *)(v3 + 4);
  v10 = 0;
  v8 = v19 == v20;
  v9 = v19 < v20;
  return !(v9 ^ v10 | v8);
}

void QP::GraphStructureStack::traverse(uint64_t a1, __int128 *a2, char **a3, uint64_t a4)
{
  unsigned __int16 *v4;
  unsigned int v6;
  _BOOL4 v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  double v16;
  uint64_t v17;
  uint64_t *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  void ***v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  uint64_t *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t i;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  __int16 v42;
  uint64_t *v43;
  uint64_t *v44;
  float v45;
  float v46;
  uint64_t v47;
  QP::Branch *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  _BYTE *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  float *v75;
  void ***v76;
  void ***v77;
  std::__shared_weak_count *v78;
  void **v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  BOOL v90;
  __int128 v91;
  _QWORD v92[3];
  void **v93;
  std::__shared_weak_count *v94;
  _QWORD v95[3];
  _QWORD v96[2];
  uint64_t v97;
  QP::Branch *v98;
  void *__p;
  uint64_t *v100;
  _QWORD *v101;
  void **v102;
  std::__shared_weak_count *v103;
  void **p_p;
  std::__shared_weak_count *v105;

  v4 = *(unsigned __int16 **)a2;
  if (!*(_QWORD *)a2)
    return;
  if (*((_BYTE *)v4 + 88))
    return;
  if (*((_QWORD *)v4 + 1) == -1)
    return;
  v6 = *v4;
  if (v6 == (unsigned __int16)kQPSymbolIdTerminal)
    return;
  v10 = QP::ParserGrammar::requiresComplement(*(QP::ParserGrammar **)a1, v6);
  if (!v10)
  {
LABEL_12:
    v90 = v10;
    v15 = *a3;
    v14 = a3[1];
    if (v14 != *a3)
    {
      v16 = 0.0;
      do
      {
        v16 = v16 + *(float *)(*(_QWORD *)v15 + 4);
        if (QP::ParserGrammar::hasAttribute(*(QP::ParserGrammar **)a1, **(unsigned __int16 **)v15, **(unsigned __int16 **)a2))
        {
          v17 = *(_QWORD *)(*(_QWORD *)a1 + 40);
          v18 = (uint64_t *)v15;
          if (v17)
          {
            if (*(_BYTE *)(v17 + 30))
              v18 = (uint64_t *)a2;
            else
              v18 = (uint64_t *)v15;
          }
          v20 = *v18;
          v19 = (std::__shared_weak_count *)v18[1];
          p_p = (void **)v20;
          v105 = v19;
          if (v19)
          {
            p_shared_owners = (unint64_t *)&v19->__shared_owners_;
            do
              v22 = __ldxr(p_shared_owners);
            while (__stxr(v22 + 1, p_shared_owners));
            v17 = *(_QWORD *)(*(_QWORD *)a1 + 40);
          }
          v23 = (void ***)a2;
          if (v17)
          {
            if (*(_BYTE *)(v17 + 30))
              v23 = (void ***)v15;
            else
              v23 = (void ***)a2;
          }
          v24 = (std::__shared_weak_count *)v23[1];
          v102 = *v23;
          v103 = v24;
          if (v24)
          {
            v25 = (unint64_t *)&v24->__shared_owners_;
            do
              v26 = __ldxr(v25);
            while (__stxr(v26 + 1, v25));
          }
          v27 = *(_QWORD *)(v20 + 8);
          v91 = *(_OWORD *)(v20 + 32);
          v100 = 0;
          v101 = 0;
          __p = 0;
          v28 = *(_QWORD *)(*(_QWORD *)a2 + 16);
          v30 = std::__allocate_at_least[abi:ne180100]<std::allocator<long>>((uint64_t)&v101, 1uLL);
          v31 = (char *)__p;
          v32 = (char *)v100;
          *v30 = v28;
          v33 = v30 + 1;
          v34 = (char *)v30;
          while (v32 != v31)
          {
            v35 = *((_QWORD *)v32 - 1);
            v32 -= 8;
            *((_QWORD *)v34 - 1) = v35;
            v34 -= 8;
          }
          __p = v34;
          v100 = v30 + 1;
          v101 = &v30[v29];
          if (v31)
            operator delete(v31);
          v100 = v33;
          v36 = *(_QWORD *)(*(_QWORD *)a1 + 40);
          if (v36 && *(_BYTE *)(v36 + 30))
          {
            v37 = 0;
            v27 = *(_QWORD *)(a1 + 96) - v27;
          }
          else
          {
            for (i = *(_QWORD *)(v20 + 64); ; i += 16)
            {
              if (i == *(_QWORD *)(v20 + 72))
                goto LABEL_43;
              if ((*(_QWORD *)(*(_QWORD *)i + 8) & 0x8000000000000000) == 0)
                break;
            }
            if (*(_BYTE *)(v20 + 95))
            {
LABEL_45:
              v39 = *(_QWORD *)(v20 + 24);
              goto LABEL_46;
            }
LABEL_43:
            if (*(_BYTE *)(v20 + 92) || *(_BYTE *)(v20 + 94))
              goto LABEL_45;
            v55 = *(_QWORD *)(v20 + 48);
            v56 = *(std::__shared_weak_count **)(v20 + 56);
            if (v56)
            {
              v57 = (unint64_t *)&v56->__shared_owners_;
              do
                v58 = __ldxr(v57);
              while (__stxr(v58 + 1, v57));
              v91 = *(_OWORD *)(v55 + 32);
              do
                v59 = __ldaxr(v57);
              while (__stlxr(v59 - 1, v57));
              if (!v59)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
            else
            {
              v91 = *(_OWORD *)(v55 + 32);
            }
            v39 = v27;
LABEL_46:
            v37 = v39 - v27;
            if (v39 != v27)
              v91 = *((_OWORD *)p_p + 2);
          }
          v40 = operator new();
          v41 = *(float **)a2;
          v42 = **(_WORD **)a2;
          *(_WORD *)v40 = **(_WORD **)v15;
          *(_WORD *)(v40 + 2) = v42;
          *(_DWORD *)(v40 + 4) = 0;
          *(_QWORD *)(v40 + 8) = v27;
          *(_QWORD *)(v40 + 16) = v37;
          *(_OWORD *)(v40 + 24) = v91;
          *(_QWORD *)(v40 + 48) = 0;
          *(_QWORD *)(v40 + 56) = 0;
          *(_QWORD *)(v40 + 40) = 0;
          v98 = (QP::Branch *)v40;
          v43 = (uint64_t *)__p;
          v44 = v100;
          if (__p == v100)
          {
            v45 = 0.0;
          }
          else
          {
            do
              QP::Branch::addLocation(v98, *v43++);
            while (v43 != v44);
            v40 = (uint64_t)v98;
            v45 = *((float *)v98 + 1);
            v41 = *(float **)a2;
          }
          v46 = v16;
          *(float *)(v40 + 4) = (float)((float)(v45 + v46) + *(float *)(*(_QWORD *)v15 + 4)) + v41[1];
          v97 = v40;
          v98 = 0;
          (*(void (**)(uint64_t, uint64_t *))(a4 + 16))(a4, &v97);
          v47 = v97;
          v97 = 0;
          if (v47)
            std::default_delete<QP::Branch>::operator()[abi:ne180100]((uint64_t)&v97, v47);
          v48 = v98;
          v98 = 0;
          if (v48)
            std::default_delete<QP::Branch>::operator()[abi:ne180100]((uint64_t)&v98, (uint64_t)v48);
          if (__p)
          {
            v100 = (uint64_t *)__p;
            operator delete(__p);
          }
          v49 = v103;
          if (v103)
          {
            v50 = (unint64_t *)&v103->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
          v52 = v105;
          if (v105)
          {
            v53 = (unint64_t *)&v105->__shared_owners_;
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
            }
          }
        }
        v15 += 16;
      }
      while (v15 != v14);
    }
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100](a3, a2);
    v60 = *(_QWORD *)(*(_QWORD *)a2 + 48);
    v61 = *(std::__shared_weak_count **)(*(_QWORD *)a2 + 56);
    if (v61)
    {
      v62 = (unint64_t *)&v61->__shared_owners_;
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
      v64 = *(unsigned __int8 *)(v60 + 88);
      do
        v65 = __ldaxr(v62);
      while (__stlxr(v65 - 1, v62));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
      if (v64)
        goto LABEL_93;
    }
    else if (*(_BYTE *)(v60 + 88))
    {
LABEL_93:
      v69 = *(_BYTE **)(*(_QWORD *)a2 + 48);
      v70 = *(std::__shared_weak_count **)(*(_QWORD *)a2 + 56);
      __p = v69;
      v100 = (uint64_t *)v70;
      if (v70)
      {
        v71 = (unint64_t *)&v70->__shared_owners_;
        do
          v72 = __ldxr(v71);
        while (__stxr(v72 + 1, v71));
      }
      if (v69[88] || *(_BYTE *)(*(_QWORD *)a2 + 92))
      {
        if (v70)
        {
          v73 = (unint64_t *)&v70->__shared_owners_;
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 - 1, v73));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
      }
      else
      {
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
        if (!v90)
          a3[1] = (char *)std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)(a3[1] - 16));
      }
      v75 = *(float **)a2;
      v100 = 0;
      v101 = 0;
      __p = 0;
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>((char *)&__p, *((_QWORD **)v75 + 8), *((_QWORD **)v75 + 9), (uint64_t)(*((_QWORD *)v75 + 9) - *((_QWORD *)v75 + 8)) >> 4);
      v76 = (void ***)__p;
      v77 = (void ***)v100;
      if (__p != v100)
      {
        do
        {
          v79 = *v76;
          v78 = (std::__shared_weak_count *)v76[1];
          p_p = *v76;
          v105 = v78;
          if (v78)
          {
            v80 = (unint64_t *)&v78->__shared_owners_;
            do
              v81 = __ldxr(v80);
            while (__stxr(v81 + 1, v80));
          }
          if (((unint64_t)v79[1] & 0x8000000000000000) == 0 && !*((_BYTE *)v79 + 88))
          {
            v93 = v79;
            v94 = v78;
            if (v78)
            {
              v85 = (unint64_t *)&v78->__shared_owners_;
              do
                v86 = __ldxr(v85);
              while (__stxr(v86 + 1, v85));
            }
            memset(v92, 0, sizeof(v92));
            std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>((char *)v92, *a3, a3[1], (a3[1] - *a3) >> 4);
            QP::GraphStructureStack::traverse(a1, &v93, v92, a4);
            v102 = (void **)v92;
            std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v102);
            v87 = v94;
            if (v94)
            {
              v88 = (unint64_t *)&v94->__shared_owners_;
              do
                v89 = __ldaxr(v88);
              while (__stlxr(v89 - 1, v88));
              if (!v89)
              {
                ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                std::__shared_weak_count::__release_weak(v87);
              }
            }
          }
          v82 = v105;
          if (v105)
          {
            v83 = (unint64_t *)&v105->__shared_owners_;
            do
              v84 = __ldaxr(v83);
            while (__stlxr(v84 - 1, v83));
            if (!v84)
            {
              ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
              std::__shared_weak_count::__release_weak(v82);
            }
          }
          v76 += 2;
        }
        while (v76 != v77);
      }
      p_p = &__p;
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&p_p);
      return;
    }
    v66 = *(_QWORD *)(*(_QWORD *)a2 + 56);
    v96[0] = *(_QWORD *)(*(_QWORD *)a2 + 48);
    v96[1] = v66;
    if (v66)
    {
      v67 = (unint64_t *)(v66 + 8);
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
    memset(v95, 0, sizeof(v95));
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>((char *)v95, *a3, a3[1], (a3[1] - *a3) >> 4);
    QP::GraphStructureStack::traverse(a1, v96, v95, a4);
    __p = v95;
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v96);
    goto LABEL_93;
  }
  v11 = *(float **)a2;
  if (*(_QWORD *)(*(_QWORD *)a2 + 48))
  {
    v12 = *((_QWORD *)v11 + 8);
    v13 = *((_QWORD *)v11 + 9);
    while (v12 != v13)
    {
      if ((*(_QWORD *)(*(_QWORD *)v12 + 8) & 0x8000000000000000) == 0)
        goto LABEL_12;
      v12 += 16;
    }
  }
}

void sub_218E1C1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void QP::Branch::addLocation(QP::Branch *this, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = (char *)this + 56;
  v5 = *((_QWORD *)this + 7);
  v6 = (char *)*((_QWORD *)this + 6);
  if ((unint64_t)v6 >= v5)
  {
    v8 = (char *)*((_QWORD *)this + 5);
    v9 = (v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)v8;
    v11 = (uint64_t)(v5 - (_QWORD)v8) >> 2;
    if (v11 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long>>((uint64_t)v4, v12);
      v8 = (char *)*((_QWORD *)this + 5);
      v6 = (char *)*((_QWORD *)this + 6);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a2;
    v7 = v14 + 8;
    while (v6 != v8)
    {
      v16 = *((_QWORD *)v6 - 1);
      v6 -= 8;
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *((_QWORD *)this + 5) = v14;
    *((_QWORD *)this + 6) = v7;
    *((_QWORD *)this + 7) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_QWORD *)v6 = a2;
    v7 = v6 + 8;
  }
  *((_QWORD *)this + 6) = v7;
}

void QP::GraphStructureStack::enumerateBranchesAtStateIndex(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16[3];
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  char **v22;

  if ((a2 & 0x8000000000000000) == 0)
  {
    if (a3)
    {
      v5 = *(_QWORD *)(a1 + 16);
      if ((*(_QWORD *)(a1 + 24) - v5) >> 4 > a2)
      {
        v6 = *(_OWORD *)(v5 + 16 * a2);
        v21 = v6;
        if (*((_QWORD *)&v6 + 1))
        {
          v7 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
          v18 = 0;
          v19 = 0;
          v20 = 0;
          v17 = v6;
          do
            v9 = __ldxr(v7);
          while (__stxr(v9 + 1, v7));
        }
        else
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          v17 = (unint64_t)v6;
        }
        memset(v16, 0, sizeof(v16));
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>((char *)v16, 0, 0, 0);
        QP::GraphStructureStack::traverse(a1, &v17, v16, a3);
        v22 = v16;
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
        v10 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        if (*((_QWORD *)&v17 + 1))
        {
          v11 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v22 = (char **)&v18;
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
        v13 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
        if (*((_QWORD *)&v21 + 1))
        {
          v14 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
      }
    }
  }
}

void sub_218E1C4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v17 - 40) = v16;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 40));
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  *(_QWORD *)(v17 - 40) = &a16;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 40));
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v17 - 64);
  _Unwind_Resume(a1);
}

uint64_t QP::GraphStructureStack::clear(QP::GraphStructureStack *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = (uint64_t *)this;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::erase((uint64_t)this + 64, *((_QWORD *)this + 8), *((_QWORD *)this + 9));
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::erase((uint64_t)(v1 + 2), v1[2], v1[3]);
  v2 = v1[5];
  v3 = v1[6];
  v1 += 5;
  result = std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::erase((uint64_t)v1, v2, v3);
  v1[6] = -1;
  v1[7] = -1;
  v1[8] = -1;
  return result;
}

void std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v3 - 16);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

uint64_t std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>,std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD v33[5];

  v5 = (_QWORD *)a2;
  if (a5 < 1)
    return v5;
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    v13 = *a1;
    v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
    if (v14 >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v15 = (a2 - v13) >> 4;
    v16 = v10 - v13;
    if (v16 >> 3 > v14)
      v14 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v33[4] = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(v9, v17);
    else
      v18 = 0;
    v26 = (uint64_t *)&v18[16 * v15];
    v33[0] = v18;
    v33[1] = v26;
    v33[3] = &v18[16 * v17];
    v27 = &v26[2 * a5];
    do
    {
      *v26 = *a3;
      v28 = a3[1];
      v26[1] = v28;
      if (v28)
      {
        v29 = (unint64_t *)(v28 + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v26 += 2;
      a3 += 2;
    }
    while (v26 != v27);
    v33[2] = v27;
    v5 = (_QWORD *)std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__swap_out_circular_buffer(a1, v33, v5);
    std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer((uint64_t)v33);
    return v5;
  }
  v19 = (uint64_t)(v12 - a2) >> 4;
  if (v19 >= a5)
  {
    v20 = &a3[2 * a5];
LABEL_29:
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__move_range((uint64_t)a1, a2, v12, (char *)(a2 + 16 * a5));
    if (v20 != a3)
    {
      v31 = v5;
      do
      {
        std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v31, a3);
        a3 += 2;
        v31 += 2;
      }
      while (a3 != v20);
    }
    return v5;
  }
  v20 = &a3[2 * v19];
  if (v20 == a4)
  {
    v22 = *(uint64_t **)(v9 - 8);
  }
  else
  {
    v21 = &a3[2 * v19];
    v22 = *(uint64_t **)(v9 - 8);
    do
    {
      *v22 = *v21;
      v23 = v21[1];
      v22[1] = v23;
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v21 += 2;
      v22 += 2;
    }
    while (v21 != a4);
  }
  a1[1] = (uint64_t)v22;
  if ((uint64_t)(v12 - a2) >= 1)
    goto LABEL_29;
  return v5;
}

void sub_218E1C85C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__move_range(uint64_t result, uint64_t a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(char **)(result + 8);
  v5 = (char *)(a2 + v4 - a4);
  v6 = v4;
  while ((unint64_t)v5 < a3)
  {
    *(_OWORD *)v6 = *(_OWORD *)v5;
    v6 += 16;
    *(_QWORD *)v5 = 0;
    *((_QWORD *)v5 + 1) = 0;
    v5 += 16;
  }
  *(_QWORD *)(result + 8) = v6;
  if (v4 != a4)
  {
    v7 = (uint64_t)(v4 - 16);
    v8 = 16 * ((v4 - a4) >> 4);
    v9 = a2 - 16;
    do
    {
      result = std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v7, (__int128 *)(v9 + v8));
      v7 -= 16;
      v8 -= 16;
    }
    while (v8);
  }
  return result;
}

uint64_t std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__swap_out_circular_buffer(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  _QWORD *v9;
  _OWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  result = a2[1];
  v5 = (_QWORD *)*a1;
  v6 = result;
  if ((_QWORD *)*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      *(_OWORD *)(v6 - 16) = v8;
      v6 -= 16;
      *v7 = 0;
      v7[1] = 0;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = (_QWORD *)a1[1];
  v10 = (_OWORD *)a2[2];
  if (v9 != a3)
  {
    do
    {
      *v10++ = *(_OWORD *)a3;
      *a3 = 0;
      a3[1] = 0;
      a3 += 2;
    }
    while (a3 != v9);
    v6 = a2[1];
  }
  a2[2] = v10;
  v11 = (_QWORD *)*a1;
  *a1 = v6;
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

char *std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_218E1CA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*,false>(uint64_t *a1, __int128 *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

LABEL_1:
  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((uint64_t *)a2 - 2, v9))
        {
          v20 = *v9;
          *v9 = *((_QWORD *)a2 - 2);
          *((_QWORD *)a2 - 2) = v20;
          v21 = v9[1];
          v9[1] = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v21;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v9, v9 + 2, (uint64_t *)a2 - 2, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v9, v9 + 2, v9 + 4, (uint64_t *)a2 - 2, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v9, v9 + 2, v9 + 4, v9 + 6, (uint64_t *)a2 - 2, a3);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>((uint64_t)v9, (uint64_t)a2, (uint64_t (**)(__int128 *, uint64_t))a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>((__int128 *)v9, a2, (uint64_t (**)(__int128 *, __int128 *))a3);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(&v9[2 * (v13 >> 1)], v9, (uint64_t *)a2 - 2, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v9, &v9[2 * (v13 >> 1)], (uint64_t *)a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v9 + 2, v15 - 2, (uint64_t *)a2 - 4, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v9 + 4, &v9[2 * v14 + 2], (uint64_t *)a2 - 6, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v15 - 2, v15, &v9[2 * v14 + 2], a3);
            v16 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)(v9 - 2, v9) & 1) == 0)
          {
            v9 = (uint64_t *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::GraphStructureStack::Node> *,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node>&,std::shared_ptr<QP::GraphStructureStack::Node>&)>((uint64_t)v9, a2, (uint64_t (**)(__int128 *, __int128 *))a3);
            goto LABEL_16;
          }
LABEL_11:
          v17 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::GraphStructureStack::Node> *,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node>&,std::shared_ptr<QP::GraphStructureStack::Node>&)>((uint64_t)v9, (uint64_t *)a2, (uint64_t (**)(uint64_t, __int128 *))a3);
          if ((v18 & 1) == 0)
            goto LABEL_14;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v9, v17, a3);
          v9 = v17 + 2;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v17 + 2, (uint64_t *)a2, a3))
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*,false>(a1, v17, a3, -v11, a5 & 1);
            v9 = v17 + 2;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (__int128 *)v17;
          if (v19)
            return;
          goto LABEL_1;
        }
        if (v9 != (uint64_t *)a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>((char *)v9, (char *)a2, a2, (uint64_t (**)(__int128 *, uint64_t))a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((uint64_t *)a2 - 2, v9))
        {
          v20 = *v9;
          *v9 = *((_QWORD *)a2 - 2);
          *((_QWORD *)a2 - 2) = v20;
          v21 = v9[1];
          v9[1] = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v21;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v9, v9 + 2, (uint64_t *)a2 - 2, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v9, v9 + 2, v9 + 4, (uint64_t *)a2 - 2, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v9, v9 + 2, v9 + 4, v9 + 6, (uint64_t *)a2 - 2, a3);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*>((uint64_t)v9, (uint64_t)a2, (uint64_t (**)(__int128 *, uint64_t))a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*>((__int128 *)v9, a2, (uint64_t (**)(__int128 *, __int128 *))a3);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(&v9[2 * (v13 >> 1)], v9, (uint64_t *)a2 - 2, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v9, &v9[2 * (v13 >> 1)], (uint64_t *)a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v9 + 2, v15 - 2, (uint64_t *)a2 - 4, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v9 + 4, &v9[2 * v14 + 2], (uint64_t *)a2 - 6, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v15 - 2, v15, &v9[2 * v14 + 2], a3);
            v16 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)(v9 - 2, v9) & 1) == 0)
          {
            v9 = (uint64_t *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::ParseAttribute> *,BOOL (*&)(std::shared_ptr<QP::ParseAttribute>&,std::shared_ptr<QP::ParseAttribute>&)>((uint64_t)v9, a2, (uint64_t (**)(__int128 *, __int128 *))a3);
            goto LABEL_16;
          }
LABEL_11:
          v17 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::ParseAttribute> *,BOOL (*&)(std::shared_ptr<QP::ParseAttribute>&,std::shared_ptr<QP::ParseAttribute>&)>((uint64_t)v9, (uint64_t *)a2, (uint64_t (**)(uint64_t, __int128 *))a3);
          if ((v18 & 1) == 0)
            goto LABEL_14;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*>(v9, v17, a3);
          v9 = v17 + 2;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*>(v17 + 2, (uint64_t *)a2, a3))
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*,false>(a1, v17, a3, -v11, a5 & 1);
            v9 = v17 + 2;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (__int128 *)v17;
          if (v19)
            return;
          goto LABEL_1;
        }
        if (v9 != (uint64_t *)a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>((char *)v9, (char *)a2, a2, (uint64_t (**)(__int128 *, uint64_t))a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((uint64_t *)a2 - 2, v9))
        {
          v20 = *v9;
          *v9 = *((_QWORD *)a2 - 2);
          *((_QWORD *)a2 - 2) = v20;
          v21 = v9[1];
          v9[1] = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v21;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v9, v9 + 2, (uint64_t *)a2 - 2, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v9, v9 + 2, v9 + 4, (uint64_t *)a2 - 2, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v9, v9 + 2, v9 + 4, v9 + 6, (uint64_t *)a2 - 2, a3);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*>((uint64_t)v9, (uint64_t)a2, (uint64_t (**)(__int128 *, uint64_t))a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*>((__int128 *)v9, a2, (uint64_t (**)(__int128 *, __int128 *))a3);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(&v9[2 * (v13 >> 1)], v9, (uint64_t *)a2 - 2, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v9, &v9[2 * (v13 >> 1)], (uint64_t *)a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v9 + 2, v15 - 2, (uint64_t *)a2 - 4, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v9 + 4, &v9[2 * v14 + 2], (uint64_t *)a2 - 6, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v15 - 2, v15, &v9[2 * v14 + 2], a3);
            v16 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)(v9 - 2, v9) & 1) == 0)
          {
            v9 = (uint64_t *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::Parse> *,BOOL (*&)(std::shared_ptr<QP::Parse>&,std::shared_ptr<QP::Parse>&)>((uint64_t)v9, a2, (uint64_t (**)(__int128 *, __int128 *))a3);
            goto LABEL_16;
          }
LABEL_11:
          v17 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::Parse> *,BOOL (*&)(std::shared_ptr<QP::Parse>&,std::shared_ptr<QP::Parse>&)>((uint64_t)v9, (uint64_t *)a2, (uint64_t (**)(uint64_t, __int128 *))a3);
          if ((v18 & 1) == 0)
            goto LABEL_14;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*>(v9, v17, a3);
          v9 = v17 + 2;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*>(v17 + 2, (uint64_t *)a2, a3))
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*,false>(a1, v17, a3, -v11, a5 & 1);
            v9 = v17 + 2;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (__int128 *)v17;
          if (v19)
            return;
          goto LABEL_1;
        }
        if (v9 != (uint64_t *)a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*,std::shared_ptr<QP::Parse>*>((char *)v9, (char *)a2, a2, (uint64_t (**)(__int128 *, uint64_t))a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((uint64_t *)a2 - 2, v9))
        {
          v20 = *v9;
          *v9 = *((_QWORD *)a2 - 2);
          *((_QWORD *)a2 - 2) = v20;
          v21 = v9[1];
          v9[1] = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v21;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v9, v9 + 2, (uint64_t *)a2 - 2, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v9, v9 + 2, v9 + 4, (uint64_t *)a2 - 2, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v9, v9 + 2, v9 + 4, v9 + 6, (uint64_t *)a2 - 2, a3);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*>((uint64_t)v9, (uint64_t)a2, (uint64_t (**)(__int128 *, uint64_t))a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*>((__int128 *)v9, a2, (uint64_t (**)(__int128 *, __int128 *))a3);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(&v9[2 * (v13 >> 1)], v9, (uint64_t *)a2 - 2, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v9, &v9[2 * (v13 >> 1)], (uint64_t *)a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v9 + 2, v15 - 2, (uint64_t *)a2 - 4, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v9 + 4, &v9[2 * v14 + 2], (uint64_t *)a2 - 6, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v15 - 2, v15, &v9[2 * v14 + 2], a3);
            v16 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)(v9 - 2, v9) & 1) == 0)
          {
            v9 = (uint64_t *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::Lexeme> *,BOOL (*&)(std::shared_ptr<QP::Lexeme>&,std::shared_ptr<QP::Lexeme>&)>((uint64_t)v9, a2, (uint64_t (**)(__int128 *, __int128 *))a3);
            goto LABEL_16;
          }
LABEL_11:
          v17 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::Lexeme> *,BOOL (*&)(std::shared_ptr<QP::Lexeme>&,std::shared_ptr<QP::Lexeme>&)>((uint64_t)v9, (uint64_t *)a2, (uint64_t (**)(uint64_t, __int128 *))a3);
          if ((v18 & 1) == 0)
            goto LABEL_14;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*>(v9, v17, a3);
          v9 = v17 + 2;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*>(v17 + 2, (uint64_t *)a2, a3))
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*,false>(a1, v17, a3, -v11, a5 & 1);
            v9 = v17 + 2;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (__int128 *)v17;
          if (v19)
            return;
          goto LABEL_1;
        }
        if (v9 != (uint64_t *)a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*,std::shared_ptr<QP::Lexeme>*>((char *)v9, (char *)a2, a2, (uint64_t (**)(__int128 *, uint64_t))a3);
        return;
    }
  }
}

  v8 = (uint64_t)(a2 - 3);
  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v9) >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v25 = *a3;
        v41 = 0;
        v42 = 0;
        v40 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v40, (const void *)*(a2 - 3), *(a2 - 2), (uint64_t)(*(a2 - 2) - *(a2 - 3)) >> 4);
        v37 = 0;
        v38 = 0;
        v39 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v37, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 4);
        v26 = v25(&v40, &v37);
        if (v37)
        {
          v38 = v37;
          operator delete(v37);
        }
        if (v40)
        {
          v41 = v40;
          operator delete(v40);
        }
        if (v26)
        {
          v27 = *(const void **)v9;
          *(_QWORD *)v9 = *(a2 - 3);
          *(a2 - 3) = v27;
          v28 = *(_QWORD *)(v9 + 8);
          *(_QWORD *)(v9 + 8) = *(a2 - 2);
          *(a2 - 2) = v28;
          v29 = *(_QWORD *)(v9 + 16);
          *(_QWORD *)(v9 + 16) = *(a2 - 1);
          *(a2 - 1) = v29;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(v9, v9 + 24, v8, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(v9, v9 + 24, v9 + 48, v8, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(v9, v9 + 24, v9 + 48, v9 + 72, v8, a3);
        return;
      default:
        if (v12 <= 575)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>((_QWORD *)v9, a2, a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(v9, (uint64_t)a2, a3);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (_OWORD *)(v9 + 24 * (v13 >> 1));
          if ((unint64_t)v12 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(v9 + 24 * (v13 >> 1), v9, v8, a3);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(v9, v9 + 24 * (v13 >> 1), v8, a3);
            v16 = v8;
            v17 = v9 + 24 * v14;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(v9 + 24, v17 - 24, (uint64_t)(a2 - 6), a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(v9 + 48, v9 + 24 + 24 * v14, (uint64_t)(a2 - 9), a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(v17 - 24, (uint64_t)v15, v9 + 24 + 24 * v14, a3);
            v18 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *v15;
            *v15 = v18;
            v19 = *(_QWORD *)(v9 + 16);
            *(_QWORD *)(v9 + 16) = *(_QWORD *)(v17 + 16);
            *(_QWORD *)(v17 + 16) = v19;
            v8 = v16;
          }
          if ((a5 & 1) == 0)
          {
            v20 = *a3;
            v35 = 0;
            v36 = 0;
            v34 = 0;
            std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v34, *(const void **)(v9 - 24), *(_QWORD *)(v9 - 16), (uint64_t)(*(_QWORD *)(v9 - 16) - *(_QWORD *)(v9 - 24)) >> 4);
            __p = 0;
            v32 = 0;
            v33 = 0;
            std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 4);
            v21 = v20(&v34, &__p);
            if (__p)
            {
              v32 = __p;
              operator delete(__p);
            }
            if (v34)
            {
              v35 = v34;
              operator delete(v34);
            }
            if ((v21 & 1) == 0)
            {
              v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<CFRange> *,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>)>(v9, a2, a3);
              goto LABEL_20;
            }
          }
          v22 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<CFRange> *,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>)>(v9, a2, a3);
          if ((v23 & 1) == 0)
            goto LABEL_18;
          v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(v9, (uint64_t)v22, a3);
          v9 = (unint64_t)(v22 + 3);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>((uint64_t)(v22 + 3), (uint64_t)a2, a3))
          {
            v10 = v11 + 1;
            if (v24)
              continue;
LABEL_18:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*,false>(a1, v22, a3, -v11, a5 & 1);
            v9 = (unint64_t)(v22 + 3);
LABEL_20:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v22;
          if (v24)
            return;
          goto LABEL_1;
        }
        if ((_QWORD *)v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*,std::vector<CFRange>*>(v9, (uint64_t)a2, (uint64_t)a2, a3);
        return;
    }
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, uint64_t))
{
  __int128 *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;

  if (a1 != a2)
  {
    v5 = (__int128 *)(a1 + 16);
    if (a1 + 16 != a2)
    {
      v7 = 0;
      v8 = a1;
      do
      {
        v9 = v8;
        v8 = (uint64_t)v5;
        if ((*a3)(v5, v9))
        {
          v16 = *(_OWORD *)v8;
          *(_QWORD *)v8 = 0;
          *(_QWORD *)(v8 + 8) = 0;
          v10 = v7;
          while (1)
          {
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](a1 + v10 + 16, (__int128 *)(a1 + v10));
            if (!v10)
              break;
            v11 = (*a3)(&v16, a1 + v10 - 16);
            v10 -= 16;
            if ((v11 & 1) == 0)
            {
              v12 = a1 + v10 + 16;
              goto LABEL_10;
            }
          }
          v12 = a1;
LABEL_10:
          std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v12, &v16);
          v13 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
          if (*((_QWORD *)&v16 + 1))
          {
            v14 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
        }
        v5 = (__int128 *)(v8 + 16);
        v7 += 16;
      }
      while (v8 + 16 != a2);
    }
  }
}

void sub_218E1CED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  __int128 *v4;
  __int128 *v5;
  __int128 *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  if (a1 != a2)
  {
    v4 = a1;
    v5 = a1 + 1;
    if (a1 + 1 != a2)
    {
      do
      {
        v7 = v5;
        if ((*a3)(v5, v4))
        {
          v11 = *v7;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v7 + 1) = 0;
          do
          {
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)(v4 + 1), v4);
            --v4;
          }
          while (((*a3)(&v11, v4) & 1) != 0);
          std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)(v4 + 1), &v11);
          v8 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
          if (*((_QWORD *)&v11 + 1))
          {
            v9 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
            do
              v10 = __ldaxr(v9);
            while (__stlxr(v10 - 1, v9));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
        }
        v5 = v7 + 1;
        v4 = v7;
      }
      while (v7 + 1 != a2);
    }
  }
}

void sub_218E1CFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    v10 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
      *a3 = v10;
      v11 = a3 + 1;
      result = 1;
      v12 = a1 + 1;
LABEL_9:
      v15 = v11;
      goto LABEL_10;
    }
    *a1 = *a2;
    *a2 = v10;
    v17 = a1[1];
    a1[1] = a2[1];
    a2[1] = v17;
    if ((*a4)(a3, a2))
    {
      v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      v11 = a3 + 1;
      result = 2;
      v12 = a2 + 1;
      goto LABEL_9;
    }
  }
  else
  {
    if (!(_DWORD)result)
      return result;
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    v15 = a2 + 1;
    v14 = a2[1];
    a2[1] = a3[1];
    a3[1] = v14;
    if ((*a4)(a2, a1))
    {
      v16 = *a1;
      *a1 = *a2;
      v12 = a1 + 1;
      *a2 = v16;
      result = 2;
LABEL_10:
      v19 = *v12;
      *v12 = *v15;
      *v15 = v19;
      return result;
    }
  }
  return 1;
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::GraphStructureStack::Node> *,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node>&,std::shared_ptr<QP::GraphStructureStack::Node>&)>(uint64_t a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  __int128 *v4;
  __int128 *v6;
  __int128 *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v15;

  v4 = a2;
  v15 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (((*a3)(&v15, a2 - 1) & 1) != 0)
  {
    v6 = (__int128 *)a1;
    do
      ++v6;
    while (((*a3)(&v15, v6) & 1) == 0);
  }
  else
  {
    v7 = (__int128 *)(a1 + 16);
    do
    {
      v6 = v7;
      if (v7 >= v4)
        break;
      v8 = (*a3)(&v15, v7);
      v7 = v6 + 1;
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      --v4;
    while (((*a3)(&v15, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = *(_QWORD *)v4;
    *(_QWORD *)v4 = v9;
    v10 = *((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = *((_QWORD *)v4 + 1);
    *((_QWORD *)v4 + 1) = v10;
    do
      ++v6;
    while (!(*a3)(&v15, v6));
    do
      --v4;
    while (((*a3)(&v15, v4) & 1) != 0);
  }
  if (v6 - 1 != (__int128 *)a1)
    std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](a1, v6 - 1);
  std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)(v6 - 1), &v15);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v6;
}

void sub_218E1D294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__int128 *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::GraphStructureStack::Node> *,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node>&,std::shared_ptr<QP::GraphStructureStack::Node>&)>(uint64_t a1, uint64_t *a2, uint64_t (**a3)(uint64_t, __int128 *))
{
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v18;

  v6 = 0;
  v18 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  do
  {
    v7 = (*a3)(a1 + v6 + 16, &v18);
    v6 += 16;
  }
  while ((v7 & 1) != 0);
  v8 = a1 + v6;
  if (v6 == 16)
  {
    do
    {
      if (v8 >= (unint64_t)a2)
        break;
      a2 -= 2;
    }
    while (((*a3)((uint64_t)a2, &v18) & 1) == 0);
  }
  else
  {
    do
      a2 -= 2;
    while (!(*a3)((uint64_t)a2, &v18));
  }
  if (v8 >= (unint64_t)a2)
  {
    v13 = (__int128 *)(v8 - 16);
  }
  else
  {
    v9 = (uint64_t *)(a1 + v6);
    v10 = a2;
    do
    {
      v11 = *v9;
      *v9 = *v10;
      *v10 = v11;
      v12 = v9[1];
      v9[1] = v10[1];
      v10[1] = v12;
      do
        v9 += 2;
      while (((*a3)((uint64_t)v9, &v18) & 1) != 0);
      do
        v10 -= 2;
      while (!(*a3)((uint64_t)v10, &v18));
    }
    while (v9 < v10);
    v13 = (__int128 *)(v9 - 2);
  }
  if (v13 != (__int128 *)a1)
    std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](a1, v13);
  std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)v13, &v18);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v13;
}

void sub_218E1D444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;

  v6 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)(a2 - 2, a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        v9 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v10 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a1 + 4, a3);
      v11 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      v20 = *(_OWORD *)v11;
      *v11 = 0;
      v11[1] = 0;
      v14 = v12;
      while (1)
      {
        std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)a1 + v14 + 48, (__int128 *)((char *)a1 + v14 + 32));
        if (v14 == -32)
          break;
        v15 = (*a3)((uint64_t *)&v20, (uint64_t *)((char *)a1 + v14 + 16));
        v14 -= 16;
        if ((v15 & 1) == 0)
        {
          v16 = (uint64_t)a1 + v14 + 48;
          goto LABEL_12;
        }
      }
      v16 = (uint64_t)a1;
LABEL_12:
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v16, &v20);
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
      if (*((_QWORD *)&v20 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (++v13 == 8)
        return v11 + 2 == a2;
    }
    v10 = v11;
    v12 += 16;
    v11 += 2;
    if (v11 == a2)
      return 1;
  }
}

void sub_218E1D66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a2, a3, a5);
  result = (*a5)(a4, a3);
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    v12 = a3[1];
    a3[1] = a4[1];
    a4[1] = v12;
    result = (*a5)(a3, a2);
    if ((_DWORD)result)
    {
      v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      result = (*a5)(a2, a1);
      if ((_DWORD)result)
      {
        v15 = *a1;
        *a1 = *a2;
        *a2 = v15;
        v16 = a1[1];
        a1[1] = a2[1];
        a2[1] = v16;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a2, a3, a4, a6);
  result = (*a6)(a5, a4);
  if ((_DWORD)result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    v14 = a4[1];
    a4[1] = a5[1];
    a5[1] = v14;
    result = (*a6)(a4, a3);
    if ((_DWORD)result)
    {
      v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      result = (*a6)(a3, a2);
      if ((_DWORD)result)
      {
        v17 = *a2;
        *a2 = *a3;
        *a3 = v17;
        v18 = a2[1];
        a2[1] = a3[1];
        a3[1] = v18;
        result = (*a6)(a2, a1);
        if ((_DWORD)result)
        {
          v19 = *a1;
          *a1 = *a2;
          *a2 = v19;
          v20 = a1[1];
          a1[1] = a2[1];
          a2[1] = v20;
        }
      }
    }
  }
  return result;
}

__int128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>(char *a1, char *a2, __int128 *a3, uint64_t (**a4)(__int128 *, uint64_t))
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  if (a1 != a2)
  {
    v6 = (uint64_t)a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t)&a1[16 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if ((__int128 *)v6 != a3)
    {
      v14 = (__int128 *)v6;
      do
      {
        if ((*a4)(v14, (uint64_t)a1))
        {
          v15 = *(_QWORD *)v14;
          *(_QWORD *)v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v15;
          v16 = *((_QWORD *)v14 + 1);
          *((_QWORD *)v14 + 1) = *((_QWORD *)a1 + 1);
          *((_QWORD *)a1 + 1) = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>((uint64_t)a1, a4, v9, (uint64_t)a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = (uint64_t)a3;
    }
    if (v8 >= 17)
    {
      v17 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>((uint64_t)a1, v6, (unsigned int (**)(uint64_t, uint64_t))a4, v17);
        v6 -= 16;
      }
      while (v17-- > 2);
    }
    return (__int128 *)v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(uint64_t a1, uint64_t (**a2)(__int128 *, uint64_t), uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (a4 - a1) >> 4)
    {
      v10 = (a4 - a1) >> 3;
      v11 = v10 + 1;
      v12 = (__int128 *)(a1 + 16 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(v12, (uint64_t)(v12 + 1)))
      {
        ++v12;
        v11 = v13;
      }
      if (((*a2)(v12, v5) & 1) == 0)
      {
        v19 = *(_OWORD *)v5;
        *(_QWORD *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        do
        {
          v14 = (uint64_t)v12;
          std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v5, v12);
          if (v7 < v11)
            break;
          v15 = (2 * v11) | 1;
          v12 = (__int128 *)(a1 + 16 * v15);
          v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            v11 = v15;
          }
          else if ((*a2)((__int128 *)(a1 + 16 * v15), (uint64_t)(v12 + 1)))
          {
            ++v12;
          }
          else
          {
            v11 = v15;
          }
          v5 = v14;
        }
        while (!(*a2)(v12, (uint64_t)&v19));
        std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v14, &v19);
        v16 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
        if (*((_QWORD *)&v19 + 1))
        {
          v17 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
      }
    }
  }
}

void sub_218E1DB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(uint64_t a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;

  if (a4 >= 2)
  {
    v13 = *(_OWORD *)a1;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v7 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a3, a4);
    v8 = v7;
    v9 = (__int128 *)(a2 - 16);
    if (v7 == v9)
    {
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)v7, &v13);
    }
    else
    {
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)v7, v9);
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)v9, &v13);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, (uint64_t)(v8 + 1), (uint64_t (**)(__int128 *, __int128 *))a3, ((uint64_t)v8 - a1 + 16) >> 4);
    }
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
    if (*((_QWORD *)&v13 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_218E1DC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__int128 *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = (__int128 *)(a1 + 16 * v6 + 16);
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1 + 16 * v6 + 16, a1 + 16 * v6 + 32))
    {
      ++v9;
      v10 = v11;
    }
    std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](a1, v9);
    a1 = (uint64_t)v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = v4 >> 1;
    v8 = (__int128 *)(a1 + 16 * (v4 >> 1));
    v9 = a2 - 16;
    if ((*a3)(v8, (__int128 *)(a2 - 16)))
    {
      v14 = *(_OWORD *)v9;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      do
      {
        v10 = (uint64_t)v8;
        std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v9, v8);
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (__int128 *)(a1 + 16 * v7);
        v9 = v10;
      }
      while (((*a3)(v8, &v14) & 1) != 0);
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v10, &v14);
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
      if (*((_QWORD *)&v14 + 1))
      {
        v12 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
  }
}

void sub_218E1DDBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

void std::__shared_ptr_emplace<QP::GraphStructureStack::Node>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA24A58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::GraphStructureStack::Node>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA24A58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A24D0CLL);
}

uint64_t std::__shared_ptr_emplace<QP::GraphStructureStack::Node>::__on_zero_shared(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 88);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](a1 + 72);
}

void std::default_delete<QP::Branch>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)(a2 + 40);
    if (v2)
    {
      *(_QWORD *)(a2 + 48) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x219A24D0CLL);
  }
}

void QP::Transcriber::updateLocale(QP::Transcriber *this, const __CFLocale *a2)
{
  const __CFString *v4;
  const __CFString *v5;
  const __CFLocale *v6;
  CFRange v7;

  if (a2)
  {
    if (!*(_QWORD *)this
      || (v4 = (const __CFString *)MEMORY[0x219A24574](),
          v5 = (const __CFString *)MEMORY[0x219A24574](a2),
          !CFStringsAreEqual(v4, v5)))
    {
      QP::Transcriber::clear(this);
      v6 = (const __CFLocale *)CFRetain(a2);
      *(_QWORD *)this = v6;
      v7.location = 0;
      v7.length = 0;
      *((_QWORD *)this + 1) = CFStringTokenizerCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], &stru_24DA27910, v7, 0x10000uLL, v6);
    }
  }
  else
  {
    QP::Transcriber::clear(this);
  }
}

QP::Transcriber *QP::Transcriber::Transcriber(QP::Transcriber *this, const __CFLocale *a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  QP::Transcriber::updateLocale(this, a2);
  return this;
}

void QP::Transcriber::~Transcriber(QP::Transcriber *this)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)this;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 1);
  if (v3)
    CFRelease(v3);
}

void QP::Transcriber::clear(QP::Transcriber *this)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)this;
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)this = 0;
  }
  v3 = (const void *)*((_QWORD *)this + 1);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)this + 1) = 0;
  }
}

_QWORD *QP::NumericConverter::localeIdentifier@<X0>(const __CFLocale **this@<X0>, _QWORD *a2@<X8>)
{
  const __CFLocale *v3;
  const __CFString *Value;

  v3 = *this;
  if (!v3)
    return std::string::basic_string[abi:ne180100]<0>(a2, "en");
  Value = (const __CFString *)CFLocaleGetValue(v3, (CFLocaleKey)*MEMORY[0x24BDBD418]);
  return QP::getUTF8StringFromCFString(Value, a2);
}

void QP::NumericConverter::numericValueForTypeWithValues(QP::NumericConverter *this@<X0>, const __CFString *a2@<X1>, CFDictionaryRef theDict@<X2>, _QWORD *a4@<X8>)
{
  const __CFString *v8;
  const __CFString *Value;
  const __CFString *v10;
  CFIndex Count;
  uint64_t v12;
  unint64_t v13;
  const void **v14;
  size_t v15;
  CFTypeID v16;
  const __CFString *v17;
  uint64_t v18;
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;
  const __CFString *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (!a2 || !theDict || !*(_QWORD *)this)
  {
    *a4 = 0;
    return;
  }
  v23 = 0;
  if (CFDictionaryContainsKey(theDict, CFSTR("DIGITS")))
  {
    v8 = CFSTR("DIGITS");
  }
  else if (CFDictionaryContainsKey(theDict, CFSTR("NUMBERS")))
  {
    if (!CFLocaleIsCJ(*(_QWORD *)this))
    {
      Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("SPELLED"));
      v10 = copyTranslatedRomanNumberFromChineseNumberString(Value);
      v23 = v10;
      if (v10)
        goto LABEL_9;
      goto LABEL_7;
    }
    v8 = CFSTR("NUMBERS");
  }
  else
  {
    if (!CFDictionaryContainsKey(theDict, CFSTR("DECIMAL")))
    {
      v10 = 0;
      goto LABEL_9;
    }
    v8 = CFSTR("DECIMAL");
  }
  Value = (const __CFString *)CFDictionaryGetValue(theDict, v8);
  v10 = 0;
LABEL_7:
  if (Value)
  {
    v10 = (const __CFString *)CFRetain(Value);
    v23 = v10;
  }
LABEL_9:
  Count = CFDictionaryGetCount(theDict);
  v12 = Count;
  if (!Count)
    goto LABEL_17;
  MEMORY[0x24BDAC7A8](Count);
  v14 = (const void **)((char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = v13 >= 0x200 ? 512 : v13;
  bzero((char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v15);
  CFDictionaryGetKeysAndValues(theDict, v14, 0);
  if (v12 < 1)
    goto LABEL_17;
  while (1)
  {
    v16 = CFGetTypeID(*v14);
    if (v16 == CFStringGetTypeID())
    {
      v17 = (const __CFString *)*v14;
      if (CFStringHasSuffix((CFStringRef)*v14, CFSTR("Unit")))
        break;
    }
    ++v14;
    if (!--v12)
      goto LABEL_17;
  }
  if (v17)
  {
    v18 = 0;
    while (!CFStringHasPrefix(a2, QP::NumericConverter::numericValueForTypeWithValues(__CFString const*,__CFDictionary const*)const::intTypes[v18]))
    {
      if (++v18 == 5)
      {
        QP::getUTF8StringFromCFString(v17, v21);
        v10 = v23;
        QP::getUTF8StringFromCFString(v23, v19);
        QP::NumericConverter::numericDoubleForType((const __CFLocale **)this, (uint64_t)v21, a4);
        goto LABEL_36;
      }
    }
    QP::getUTF8StringFromCFString(v17, v21);
    v10 = v23;
    QP::getUTF8StringFromCFString(v23, v19);
    QP::NumericConverter::numericIntForType((uint64_t)v19, a4);
LABEL_36:
    if (v20 < 0)
      operator delete(v19[0]);
    if (v22 < 0)
      operator delete(v21[0]);
  }
  else
  {
LABEL_17:
    *a4 = 0;
  }
  if (v10)
    CFRelease(v10);
}

void sub_218E1E334(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v1 - 96), 0);
  _Unwind_Resume(a1);
}

void QP::NumericConverter::numericIntForType(uint64_t a1@<X2>, _QWORD *a2@<X8>)
{
  std::string::size_type size;
  std::string *p_str;
  unsigned __int8 *v5;
  char *v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  int v10;
  _DWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const char *v14;
  std::string __str;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __str = *(std::string *)a1;
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  v14 = ", ";
  v5 = std::remove_if[abi:ne180100]<std::__wrap_iter<char *>,QP::ValidNumChars>((unsigned __int8 *)p_str, (unsigned __int8 *)p_str + size, (unsigned __int8 **)&v14);
  v6 = (char *)&__str + HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v7 = &__str;
  }
  else
  {
    v6 = (char *)(__str.__r_.__value_.__r.__words[0] + __str.__r_.__value_.__l.__size_);
    v7 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  std::string::erase(&__str, v5 - (unsigned __int8 *)v7, v6 - (char *)v5);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    v8 = __str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_)
    {
      v9 = (std::string *)__str.__r_.__value_.__r.__words[0];
      goto LABEL_17;
    }
  }
  else
  {
    v8 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if (*((_BYTE *)&__str.__r_.__value_.__s + 23))
    {
      v9 = &__str;
LABEL_17:
      while ((v9->__r_.__value_.__s.__data_[0] & 0x80000000) == 0
           && (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v9->__r_.__value_.__s.__data_[0] + 60) & 0x400) != 0)
      {
        v9 = (std::string *)((char *)v9 + 1);
        if (!--v8)
        {
          v10 = std::stoi(&__str, 0, 10);
          goto LABEL_22;
        }
      }
    }
  }
  v10 = 0;
LABEL_22:
  v11 = (_DWORD *)operator new();
  *v11 = v10;
  v11[1] = v10 - v10 / 10;
  v11[2] = v10 / 10 + v10;
  v12 = (_QWORD *)operator new();
  *v12 = v11;
  v13 = (_QWORD *)operator new();
  *v13 = &unk_24DA24AD0;
  v13[1] = 0;
  v13[2] = 0;
  v13[3] = v11;
  v12[2] = 0;
  v12[3] = 0;
  v12[1] = v13;
  *a2 = v12;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void QP::NumericConverter::numericDoubleForType(const __CFLocale **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int32_t v6;
  uint64_t v7;
  uint64_t v8;
  UChar *v9;
  int v10;
  const char *v11;
  int32_t v12;
  uint64_t v13;
  double v14;
  double v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  double v23;
  void *v24;
  char *v25;
  double *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  void *v31;
  char v32;
  UErrorCode pErrorCode[2];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)pErrorCode = 0;
  MEMORY[0x24BDAC7A8](a1);
  v9 = (UChar *)((char *)&v30 - v8);
  v10 = *(char *)(v7 + 23);
  if (v10 >= 0)
    v11 = (const char *)v7;
  else
    v11 = *(const char **)v7;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(v7 + 23);
  else
    v12 = *(_DWORD *)(v7 + 8);
  u_strFromUTF8(v9, v6, (int32_t *)pErrorCode, v11, v12, &pErrorCode[1]);
  v9[pErrorCode[0]] = 0;
  QP::NumericConverter::localeIdentifier(a1, &v31);
  v13 = unum_open();
  if (v32 < 0)
    operator delete(v31);
  if (pErrorCode[1] >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    if (v13)
      unum_close();
    goto LABEL_13;
  }
  unum_parseDouble();
  v15 = v14;
  unum_close();
  if (pErrorCode[1] >= U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_13:
    *a3 = 0;
    return;
  }
  v16 = *(_BYTE *)(a2 + 23);
  if (v16 >= 0)
    v17 = *(unsigned __int8 *)(a2 + 23);
  else
    v17 = *(_QWORD *)(a2 + 8);
  if (v16 >= 0)
    v18 = a2;
  else
    v18 = *(_QWORD *)a2;
  if (v17 >= 4)
  {
    v19 = (char *)(v18 + v17);
    v20 = v17;
    v21 = (void *)v18;
    do
    {
      v22 = (char *)memchr(v21, 102, v20 - 3);
      if (!v22)
        break;
      if (*(_DWORD *)v22 == 1952802150)
      {
        if (v22 != v19 && &v22[-v18] != (char *)-1)
        {
          v23 = 0.304800004;
          goto LABEL_41;
        }
        break;
      }
      v21 = v22 + 1;
      v20 = v19 - (_BYTE *)v21;
    }
    while (v19 - (_BYTE *)v21 >= 4);
    v24 = (void *)v18;
    do
    {
      v25 = (char *)memchr(v24, 105, v17 - 3);
      if (!v25)
        break;
      if (*(_DWORD *)v25 == 1751346793)
      {
        if (v25 != v19 && &v25[-v18] != (char *)-1)
        {
          v23 = 0.0253999997;
          goto LABEL_41;
        }
        break;
      }
      v24 = v25 + 1;
      v17 = v19 - (_BYTE *)v24;
    }
    while (v19 - (_BYTE *)v24 >= 4);
  }
  if (std::string::find[abi:ne180100]((uint64_t *)a2, "meter", 0) == -1)
  {
    if (std::string::find[abi:ne180100]((uint64_t *)a2, "centimeter", 0) != -1)
    {
      v23 = 0.00999999978;
LABEL_41:
      v15 = v15 * v23;
      goto LABEL_42;
    }
    if (std::string::find[abi:ne180100]((uint64_t *)a2, "second", 0) == -1)
    {
      if (std::string::find[abi:ne180100]((uint64_t *)a2, "minute", 0) != -1)
      {
        *(double *)&v29 = 60.0;
LABEL_47:
        v23 = *(double *)&v29;
        goto LABEL_41;
      }
      if (std::string::find[abi:ne180100]((uint64_t *)a2, "hour", 0) != -1)
      {
        v23 = 3600.0;
        goto LABEL_41;
      }
      if (std::string::find[abi:ne180100]((uint64_t *)a2, "Byte", 0) == -1)
      {
        if (std::string::find[abi:ne180100]((uint64_t *)a2, "Kilobyte", 0) == -1)
        {
          if (std::string::find[abi:ne180100]((uint64_t *)a2, "Megabyte", 0) == -1)
          {
            if (std::string::find[abi:ne180100]((uint64_t *)a2, "Gigabyte", 0) != -1)
              v15 = v15 * 1073741820.0;
            goto LABEL_42;
          }
          *(double *)&v29 = 1048576.0;
        }
        else
        {
          *(double *)&v29 = 1024.0;
        }
        goto LABEL_47;
      }
    }
  }
LABEL_42:
  v26 = (double *)operator new();
  *v26 = v15;
  v26[1] = v15 - v15 / 10.0;
  v26[2] = v15 + v15 / 10.0;
  v27 = (_QWORD *)operator new();
  v30 = v26;
  QP::NumericValue::NumericValue(v27, (uint64_t *)&v30);
  *a3 = v27;
  v28 = (uint64_t)v30;
  v30 = 0;
  if (v28)
    MEMORY[0x219A24D0C](v28, 0x1000C40504FFAC1);
}

void sub_218E1EA7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v2 - 128);
  *(_QWORD *)(v2 - 128) = 0;
  if (v4)
    MEMORY[0x219A24D0C](v4, 0x1000C40504FFAC1);
  MEMORY[0x219A24D0C](v1, 0x20C40DC1BFBCFLL);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::remove_if[abi:ne180100]<std::__wrap_iter<char *>,QP::ValidNumChars>(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 **a3)
{
  unsigned __int8 *v3;
  int v4;
  int v5;
  unsigned __int8 *i;
  int v8;
  unsigned __int8 *v9;
  int v10;
  int v11;

  if (result == a2)
    return a2;
  while (1)
  {
    v3 = *a3;
    do
    {
      v5 = *v3++;
      v4 = v5;
    }
    while (v5 != *result && v4 != 0);
    if (v4)
      break;
    if (++result == a2)
    {
      result = a2;
      break;
    }
  }
  if (result != a2)
  {
    for (i = result + 1; i != a2; ++i)
    {
      v8 = *i;
      v9 = *a3;
      do
      {
        v11 = *v9++;
        v10 = v11;
      }
      while (v11 != v8 && v10 != 0);
      if (!v10)
        *result++ = v8;
    }
  }
  return result;
}

unint64_t std::string::find[abi:ne180100](uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  int64_t v8;
  void *v9;
  char *v10;
  int64_t v11;
  char *v12;
  int v14;
  uint64_t v15;
  char *v16;

  v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    v5 = *a1;
    v6 = a1[1];
  }
  else
  {
    v6 = *((unsigned __int8 *)a1 + 23);
  }
  v7 = strlen(__s);
  if (v6 < a3)
    return -1;
  v8 = v7;
  if (v7)
  {
    v9 = (void *)(v5 + a3);
    v10 = (char *)(v5 + v6);
    v11 = v6 - a3;
    if ((uint64_t)(v6 - a3) >= v8)
    {
      v14 = *__s;
      do
      {
        v15 = v11 - v8;
        if (v15 == -1)
          break;
        v16 = (char *)memchr(v9, v14, v15 + 1);
        if (!v16)
          break;
        v12 = v16;
        if (!memcmp(v16, __s, v8))
          goto LABEL_9;
        v9 = v12 + 1;
        v11 = v10 - (v12 + 1);
      }
      while (v11 >= v8);
    }
    v12 = v10;
LABEL_9:
    if (v12 == v10)
      return -1;
    else
      return (unint64_t)&v12[-v5];
  }
  return a3;
}

void std::__shared_ptr_pointer<QP::NumericInterval<int> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A24D0CLL);
}

uint64_t std::__shared_ptr_pointer<QP::NumericInterval<int> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x219A24D0CLL);
  return result;
}

uint64_t std::__shared_ptr_pointer<QP::NumericInterval<int> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

_QWORD *QP::NumericValue::NumericValue(_QWORD *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  std::shared_ptr<QP::NumericInterval<double>>::shared_ptr[abi:ne180100]<QP::NumericInterval<double>,std::default_delete<QP::NumericInterval<double>>,void>(a1 + 2, a2);
  return a1;
}

void sub_218E1ED48(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::shared_ptr<QP::NumericInterval<double>>::shared_ptr[abi:ne180100]<QP::NumericInterval<double>,std::default_delete<QP::NumericInterval<double>>,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = *a2;
  *a1 = *a2;
  if (v4)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_24DA24B30;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  a1[1] = (uint64_t)v5;
  *a2 = 0;
  return a1;
}

void std::__shared_ptr_pointer<QP::NumericInterval<double> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A24D0CLL);
}

uint64_t std::__shared_ptr_pointer<QP::NumericInterval<double> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x219A24D0CLL);
  return result;
}

uint64_t std::__shared_ptr_pointer<QP::NumericInterval<double> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

BOOL QP::parse_attr_less_than_range(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *a2;
  if (!*a2)
    return 0;
  v5 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 24);
  if (v5 == v7 && v4 == v6)
    return v2 > v3;
  if (v5 == v7)
    return v4 > v6;
  return v5 < v7;
}

BOOL QP::best_parse(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = *a1;
  result = *(_QWORD *)(*a1 + 88) != 0;
  v4 = *a2;
  if (result == (*(_QWORD *)(*a2 + 88) != 0))
  {
    v5 = *(_QWORD *)(v2 + 32) - *(_QWORD *)(v2 + 40);
    v6 = *(_QWORD *)(v4 + 32) - *(_QWORD *)(v4 + 40);
    if (v5 == v6)
    {
      result = *(_BYTE *)(v2 + 82) != 0;
      if ((*(_BYTE *)(v2 + 82) != 0) == (*(_BYTE *)(v4 + 82) != 0))
      {
        v7 = *(_QWORD *)(v2 + 56);
        v8 = *(_QWORD *)(v4 + 56);
        if (v7 == v8)
        {
          v9 = *(unsigned __int8 *)(v2 + 80);
          result = v9 != 0;
          if (v9)
            return !*(_BYTE *)(v4 + 80) && v9 != 0;
        }
        else
        {
          return v7 > v8;
        }
      }
    }
    else
    {
      return v5 < v6;
    }
  }
  return result;
}

void QP::Parse::enumerateParseAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v2 = *(uint64_t **)(a1 + 8);
  for (i = *(uint64_t **)(a1 + 16); v2 != i; v2 += 2)
  {
    v5 = *v2;
    v6 = (std::__shared_weak_count *)v2[1];
    v18 = *v2;
    v19 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      v16 = v5;
      v17 = v6;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      v16 = v5;
      v17 = 0;
    }
    (*(void (**)(uint64_t, uint64_t *))(a2 + 16))(a2, &v16);
    v10 = v17;
    if (v17)
    {
      v11 = (unint64_t *)&v17->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = v19;
    if (v19)
    {
      v14 = (unint64_t *)&v19->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
}

void sub_218E1F048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t QP::Parser::mergeActions(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  QP::ParseAttribute *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unsigned __int16 v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v2 = *a2;
  v3 = a2[1];
  if ((unint64_t)((char *)v3 - (char *)*a2) < 0x20)
    return 1;
  v21 = 0;
  v22 = 0;
  if (v2 == v3)
    return 1;
  do
  {
    if (QP::ParseAttribute::flag((QP::ParseAttribute *)*v2) == 10)
    {
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](&v21, v2);
      goto LABEL_21;
    }
    if (QP::ParseAttribute::flag((QP::ParseAttribute *)*v2) != 1
      || (v5 = (QP::ParseAttribute *)*v2, *(_BYTE *)(*v2 + 73)))
    {
      v6 = v22;
      v21 = 0;
      v22 = 0;
      if (!v6)
        goto LABEL_21;
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      goto LABEL_10;
    }
    v9 = v21;
    if (v21)
    {
      v10 = *(unsigned __int16 *)(v21 + 32);
      v11 = *(_QWORD *)(a1 + 16);
      v12 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v21 + 112));
      v13 = QP::ParserGrammar::symbolID(v11, *(_QWORD *)(v9 + 104));
      QP::ParseAttribute::addAction(v5, v10, v13);
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      v6 = v22;
      v21 = 0;
      v22 = 0;
      if (v6)
      {
        v16 = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(v16);
        while (__stlxr(v8 - 1, v16));
LABEL_10:
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
LABEL_21:
    v2 += 2;
  }
  while (v2 != v3);
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return 1;
}

void sub_218E1F214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t QP::ParseAttribute::flag(QP::ParseAttribute *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *((_QWORD *)this + 13);
  if (v5)
    v6 = *(unsigned __int16 *)(v5 + 88);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v6;
}

uint64_t **QP::ParseAttribute::addAction(QP::ParseAttribute *this, unsigned int a2, unsigned __int16 a3)
{
  char *v3;
  char **v4;
  char *v5;
  uint64_t **v6;
  char *v7;
  unsigned int v8;
  BOOL v9;
  char **v10;
  uint64_t **v11;
  _QWORD **v13;
  _QWORD *v14[2];
  unsigned __int16 *v15;
  _QWORD **v16;
  _QWORD *v17[2];
  unsigned __int16 v18;
  unsigned __int16 v19;

  v19 = a2;
  v18 = a3;
  v5 = (char *)*((_QWORD *)this + 11);
  v3 = (char *)this + 88;
  v4 = (char **)v5;
  v6 = (uint64_t **)(v3 - 8);
  if (!v5)
    goto LABEL_12;
  v7 = v3;
  do
  {
    v8 = *((unsigned __int16 *)v4 + 16);
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = v4;
    else
      v10 = v4 + 1;
    if (v9)
      v7 = (char *)v4;
    v4 = (char **)*v10;
  }
  while (*v10);
  if (v7 == v3 || *((unsigned __int16 *)v7 + 16) > a2)
  {
LABEL_12:
    v14[0] = 0;
    v14[1] = 0;
    v13 = v14;
    LOWORD(v15) = a2;
    v17[0] = 0;
    v17[1] = 0;
    v16 = v17;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::set<unsigned short>>>((uint64_t)(v3 - 8), (unsigned __int16 *)&v15, (uint64_t)&v15);
    std::__tree<unsigned short>::destroy((uint64_t)&v16, v17[0]);
    std::__tree<unsigned short>::destroy((uint64_t)&v13, v14[0]);
  }
  v15 = &v19;
  v11 = std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v6, &v19, (uint64_t)&std::piecewise_construct, &v15);
  return std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>(v11 + 5, &v18, &v18);
}

void sub_218E1F39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  uint64_t v14;

  std::__tree<unsigned short>::destroy(v14, a14);
  std::__tree<unsigned short>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t QP::Parser::mergeDates(uint64_t a1, QP::ParseAttribute ***a2)
{
  QP::ParseAttribute **v3;
  QP::ParseAttribute **v4;
  QP::ParseAttribute *v5;
  std::__shared_weak_count *v6;
  QP::ParseAttribute *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  BOOL v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  QP::ParseAttribute *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  QP::ParseAttribute *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  QP::ParseAttribute *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *p_shared_weak_owners;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _BOOL8 v47;
  int v49;
  QP::ParseAttribute *v50;
  std::__shared_weak_count *v51;
  QP::ParseAttribute *v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  BOOL v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  int v61;
  int v62;
  QP::ParseAttribute *v63;
  std::__shared_weak_count *v64;
  QP::ParseAttribute *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  QP::ParseAttribute *v70;
  std::__shared_weak_count *v71;
  std::string *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::string::size_type v80;
  std::string *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  QP::ParseAttribute *v91;
  std::__shared_weak_count *v92;
  QP::ParseAttribute *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::string::size_type v101;
  QP::ParseAttribute *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  QP::ParseAttribute *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  std::string *v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::string::size_type v122;
  QP::ParseAttribute *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  QP::ParseAttribute **v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  std::string *v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::string::size_type v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  QP::ParseAttribute *v166;
  std::__shared_weak_count *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::string::size_type v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  unint64_t *v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  QP::ParseAttribute *v196;
  std::__shared_weak_count *v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::string::size_type v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t *v217;
  uint64_t *v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  unint64_t *v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  unint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  std::__shared_weak_count *v235;
  std::string *v236;
  std::__shared_weak_count *v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  uint64_t v254;
  std::__shared_weak_count *v255;
  QP::ParseAttribute *v256;
  std::__shared_weak_count *v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  unint64_t *v277;
  uint64_t *v278;
  uint64_t *v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  std::__shared_weak_count *v283;
  QP::ParseAttribute *v284;
  std::__shared_weak_count *v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  std::string::size_type v292;
  uint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  int v305;
  QP::ParseAttribute **v306;
  QP::ParseAttribute **v307;
  unsigned __int16 v308;
  QP::ParseAttribute *v309;
  std::__shared_weak_count *v310;
  QP::ParseAttribute *v311;
  std::__shared_weak_count *v312;
  std::__shared_weak_count *v313;
  std::__shared_weak_count *v314;
  BOOL v315;
  unint64_t *v316;
  unint64_t v317;
  unint64_t *v318;
  unint64_t v319;
  QP::ParseAttribute *v320;
  std::__shared_weak_count *v321;
  uint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  uint64_t v326;
  QP::ParseAttribute *v327;
  std::__shared_weak_count *v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  uint64_t v332;
  QP::ParseAttribute *v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  unint64_t *v337;
  unint64_t v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  int v345;
  unint64_t *v346;
  unint64_t v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  unint64_t v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  uint64_t v388;
  std::__shared_weak_count *v389;
  uint64_t v390;
  std::__shared_weak_count *v391;
  uint64_t v392;
  std::__shared_weak_count *v393;
  uint64_t v394;
  std::__shared_weak_count *v395;
  uint64_t v396;
  std::__shared_weak_count *v397;
  uint64_t v398;
  std::__shared_weak_count *v399;
  uint64_t v400;
  std::__shared_weak_count *v401;
  std::string::size_type v402;
  std::__shared_weak_count *v403;
  uint64_t v404;
  std::__shared_weak_count *v405;
  uint64_t v406;
  std::__shared_weak_count *v407;
  uint64_t v408;
  std::__shared_weak_count *v409;
  std::string::size_type v410;
  std::__shared_weak_count *v411;
  uint64_t v412;
  std::__shared_weak_count *v413;
  uint64_t v414;
  std::__shared_weak_count *v415;
  uint64_t v416;
  std::__shared_weak_count *v417;
  std::string::size_type v418;
  std::__shared_weak_count *v419;
  uint64_t v420;
  std::__shared_weak_count *v421;
  uint64_t v422;
  std::__shared_weak_count *v423;
  uint64_t v424;
  std::__shared_weak_count *v425;
  std::string::size_type size;
  std::__shared_weak_count *v427;
  uint64_t v428;
  std::__shared_weak_count *v429;
  std::string::size_type v430;
  std::__shared_weak_count *v431;
  QP::ParseAttribute *v432;
  std::__shared_weak_count *v433;
  uint64_t v434;
  std::__shared_weak_count *v435;
  QP::ParseAttribute *v436;
  std::__shared_weak_count *v437;
  std::string *v438;
  std::__shared_weak_count *v439;
  uint64_t v440;
  std::__shared_weak_count *v441;
  uint64_t v442;
  std::__shared_weak_count *v443;
  uint64_t v444;
  std::__shared_weak_count *v445;
  uint64_t v446;
  std::__shared_weak_count *v447;
  uint64_t v448;
  std::__shared_weak_count *v449;
  uint64_t v450;
  std::__shared_weak_count *v451;
  uint64_t v452;
  std::__shared_weak_count *v453;
  uint64_t v454;
  std::__shared_weak_count *v455;
  uint64_t v456;
  std::__shared_weak_count *v457;
  char v458;

  v458 = 1;
  v3 = *a2;
  v4 = a2[1];
  if ((unint64_t)((char *)v4 - (char *)*a2) <= 0x1F)
  {
    if (v3 == v4)
      return 1;
    while (1)
    {
      v5 = *v3;
      v6 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)*v3 + 14));
      if (*(unsigned __int16 *)(*((_QWORD *)v5 + 13) + 88) - 1 <= 3
        && (v7 = *v3, (v8 = (std::__shared_weak_count *)*((_QWORD *)*v3 + 14)) != 0)
        && (v9 = std::__shared_weak_count::lock(v8)) != 0)
      {
        v10 = v9;
        v11 = *((_QWORD *)v7 + 13) == 0;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      else
      {
        v11 = 1;
      }
      v14 = (unint64_t *)&v6->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (v15)
      {
        if (!v11)
          goto LABEL_17;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        if (!v11)
        {
LABEL_17:
          v16 = *v3;
          v17 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)*v3 + 14));
          v456 = *((_QWORD *)v16 + 13);
          v457 = v17;
          v18 = *(_QWORD *)(v456 + 120);
          v19 = *(std::__shared_weak_count **)(v456 + 128);
          v454 = v18;
          v455 = v19;
          if (v19)
          {
            v20 = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          if (v18)
          {
            if ((unsigned __int16)(*(_WORD *)(v18 + 12) - 1) > 7u)
              v22 = 0;
            else
              v22 = dword_218E9F854[(__int16)(*(_WORD *)(v18 + 12) - 1)];
            *(_DWORD *)(v18 + 16) = v22;
            v23 = *(_QWORD *)(a1 + 32);
            v24 = *v3;
            v450 = 0;
            v451 = 0;
            v25 = (std::__shared_weak_count *)*((_QWORD *)v24 + 14);
            if (v25)
            {
              v451 = std::__shared_weak_count::lock(v25);
              if (v451)
                v450 = *((_QWORD *)v24 + 13);
            }
            QP::Lexer::resolve(v23, &v450, *((unsigned __int16 *)*v3 + 18), (BOOL *)&v458, &v452);
            v26 = v451;
            if (v451)
            {
              v27 = (unint64_t *)&v451->__shared_owners_;
              do
                v28 = __ldaxr(v27);
              while (__stlxr(v28 - 1, v27));
              if (!v28)
              {
                ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                std::__shared_weak_count::__release_weak(v26);
              }
            }
            v29 = v452;
            if (v452)
            {
              v30 = *v3;
              v31 = v453;
              if (v453)
              {
                v32 = (unint64_t *)&v453->__shared_owners_;
                do
                  v33 = __ldxr(v32);
                while (__stxr(v33 + 1, v32));
                p_shared_weak_owners = (unint64_t *)&v31->__shared_weak_owners_;
                do
                  v35 = __ldxr(p_shared_weak_owners);
                while (__stxr(v35 + 1, p_shared_weak_owners));
              }
              v36 = (std::__shared_weak_count *)*((_QWORD *)v30 + 14);
              *((_QWORD *)v30 + 13) = v29;
              *((_QWORD *)v30 + 14) = v31;
              if (v36)
                std::__shared_weak_count::__release_weak(v36);
              if (v31)
              {
                v37 = (unint64_t *)&v31->__shared_owners_;
                do
                  v38 = __ldaxr(v37);
                while (__stlxr(v38 - 1, v37));
                if (!v38)
                {
                  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                  std::__shared_weak_count::__release_weak(v31);
                }
              }
            }
            v39 = v453;
            if (v453)
            {
              v40 = (unint64_t *)&v453->__shared_owners_;
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
            v19 = v455;
          }
          if (v19)
          {
            v42 = (unint64_t *)&v19->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          v44 = v457;
          if (v457)
          {
            v45 = (unint64_t *)&v457->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
        }
      }
      v3 += 2;
      if (v3 == v4)
        return 1;
    }
  }
  v456 = 0;
  v457 = 0;
  v454 = 0;
  v455 = 0;
  v452 = 0;
  v453 = 0;
  v448 = 0;
  v449 = 0;
  v446 = 0;
  v447 = 0;
  v444 = 0;
  v445 = 0;
  v442 = 0;
  v443 = 0;
  v440 = 0;
  v441 = 0;
  v438 = 0;
  v439 = 0;
  v436 = 0;
  v437 = 0;
  if (v3 == v4)
  {
    v49 = 0;
    goto LABEL_443;
  }
  v49 = 0;
  do
  {
    v50 = *v3;
    v51 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)*v3 + 14));
    if (*(unsigned __int16 *)(*((_QWORD *)v50 + 13) + 88) - 1 <= 3
      && (v52 = *v3, (v53 = (std::__shared_weak_count *)*((_QWORD *)*v3 + 14)) != 0)
      && (v54 = std::__shared_weak_count::lock(v53)) != 0)
    {
      v55 = v54;
      v56 = *((_QWORD *)v52 + 13) == 0;
      v57 = (unint64_t *)&v54->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    else
    {
      v56 = 1;
    }
    v59 = (unint64_t *)&v51->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (v60)
    {
      if (v56)
        goto LABEL_344;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
      if (v56)
        goto LABEL_344;
    }
    v61 = QP::ParseAttribute::flag(*v3);
    v62 = QP::ParseAttribute::flag(*v3);
    v63 = *v3;
    v64 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)*v3 + 14));
    v434 = *((_QWORD *)v63 + 13);
    v435 = v64;
    v65 = *(QP::ParseAttribute **)(v434 + 120);
    v66 = *(std::__shared_weak_count **)(v434 + 128);
    v432 = v65;
    v433 = v66;
    if (v66)
    {
      v67 = (unint64_t *)&v66->__shared_owners_;
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
    if (v65)
    {
      if (v62 == 3)
      {
        if (v438)
        {
          v69 = *(_QWORD *)(a1 + 32);
          v70 = *v3;
          v428 = 0;
          v429 = 0;
          v71 = (std::__shared_weak_count *)*((_QWORD *)v70 + 14);
          if (v71)
          {
            v429 = std::__shared_weak_count::lock(v71);
            if (v429)
              v428 = *((_QWORD *)v70 + 13);
          }
          v72 = v438;
          size = 0;
          v427 = 0;
          v73 = (std::__shared_weak_count *)v438[4].__r_.__value_.__r.__words[2];
          if (v73)
          {
            v427 = std::__shared_weak_count::lock(v73);
            if (v427)
              size = v72[4].__r_.__value_.__l.__size_;
          }
          QP::Lexer::merge(v69, &v428, (uint64_t *)&size, *((_WORD *)*v3 + 18), &v430);
          v74 = v427;
          if (v427)
          {
            v75 = (unint64_t *)&v427->__shared_owners_;
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
          }
          v77 = v429;
          if (v429)
          {
            v78 = (unint64_t *)&v429->__shared_owners_;
            do
              v79 = __ldaxr(v78);
            while (__stlxr(v79 - 1, v78));
            if (!v79)
            {
              ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
              std::__shared_weak_count::__release_weak(v77);
            }
          }
          v80 = v430;
          if (v430)
          {
            v81 = v438;
            v82 = v431;
            if (v431)
            {
              v83 = (unint64_t *)&v431->__shared_owners_;
              do
                v84 = __ldxr(v83);
              while (__stxr(v84 + 1, v83));
              v85 = (unint64_t *)&v82->__shared_weak_owners_;
              do
                v86 = __ldxr(v85);
              while (__stxr(v86 + 1, v85));
            }
            v87 = (std::__shared_weak_count *)v81[4].__r_.__value_.__r.__words[2];
            v81[4].__r_.__value_.__l.__size_ = v80;
            v81[4].__r_.__value_.__r.__words[2] = (std::string::size_type)v82;
            if (v87)
              std::__shared_weak_count::__release_weak(v87);
            if (v82)
            {
              v88 = (unint64_t *)&v82->__shared_owners_;
              do
                v89 = __ldaxr(v88);
              while (__stlxr(v89 - 1, v88));
              if (!v89)
              {
                ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                std::__shared_weak_count::__release_weak(v82);
              }
            }
            QP::ParseAttribute::setShouldIgnore((std::string *)*v3, 1);
          }
          else
          {
            v458 = 0;
            ++v49;
          }
          v136 = v437;
          v436 = 0;
          v437 = 0;
          if (v136)
          {
            v137 = (unint64_t *)&v136->__shared_owners_;
            do
              v138 = __ldaxr(v137);
            while (__stlxr(v138 - 1, v137));
            if (!v138)
            {
              ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
              std::__shared_weak_count::__release_weak(v136);
            }
          }
          v139 = v431;
          if (!v431)
            goto LABEL_334;
          v140 = (unint64_t *)&v431->__shared_owners_;
          do
            v141 = __ldaxr(v140);
          while (__stlxr(v141 - 1, v140));
          goto LABEL_269;
        }
        v135 = &v436;
        goto LABEL_184;
      }
      if (v61 == 2)
      {
        if (v436)
        {
          v90 = *(_QWORD *)(a1 + 32);
          v91 = *v3;
          v424 = 0;
          v425 = 0;
          v92 = (std::__shared_weak_count *)*((_QWORD *)v91 + 14);
          if (v92)
          {
            v425 = std::__shared_weak_count::lock(v92);
            if (v425)
              v424 = *((_QWORD *)v91 + 13);
          }
          v93 = v436;
          v422 = 0;
          v423 = 0;
          v94 = (std::__shared_weak_count *)*((_QWORD *)v436 + 14);
          if (v94)
          {
            v423 = std::__shared_weak_count::lock(v94);
            if (v423)
              v422 = *((_QWORD *)v93 + 13);
          }
          QP::Lexer::merge(v90, &v424, &v422, *((_WORD *)v436 + 18), &v430);
          v95 = v423;
          if (v423)
          {
            v96 = (unint64_t *)&v423->__shared_owners_;
            do
              v97 = __ldaxr(v96);
            while (__stlxr(v97 - 1, v96));
            if (!v97)
            {
              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
              std::__shared_weak_count::__release_weak(v95);
            }
          }
          v98 = v425;
          if (v425)
          {
            v99 = (unint64_t *)&v425->__shared_owners_;
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
            }
          }
          v101 = v430;
          if (v430)
          {
            v102 = *v3;
            v103 = v431;
            if (v431)
            {
              v104 = (unint64_t *)&v431->__shared_owners_;
              do
                v105 = __ldxr(v104);
              while (__stxr(v105 + 1, v104));
              v106 = (unint64_t *)&v103->__shared_weak_owners_;
              do
                v107 = __ldxr(v106);
              while (__stxr(v107 + 1, v106));
            }
            v108 = (std::__shared_weak_count *)*((_QWORD *)v102 + 14);
            *((_QWORD *)v102 + 13) = v101;
            *((_QWORD *)v102 + 14) = v103;
            if (v108)
              std::__shared_weak_count::__release_weak(v108);
            if (v103)
            {
              v109 = (unint64_t *)&v103->__shared_owners_;
              do
                v110 = __ldaxr(v109);
              while (__stlxr(v110 - 1, v109));
              if (!v110)
              {
                ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                std::__shared_weak_count::__release_weak(v103);
              }
            }
            QP::ParseAttribute::setShouldIgnore((std::string *)v436, 1);
          }
          else
          {
            v458 = 0;
            ++v49;
          }
          v184 = v437;
          v436 = 0;
          v437 = 0;
          if (v184)
          {
            v185 = (unint64_t *)&v184->__shared_owners_;
            do
              v186 = __ldaxr(v185);
            while (__stlxr(v186 - 1, v185));
            if (!v186)
            {
              ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
              std::__shared_weak_count::__release_weak(v184);
            }
          }
          std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](&v438, (uint64_t *)v3);
          v139 = v431;
          if (!v431)
            goto LABEL_334;
          v187 = (unint64_t *)&v431->__shared_owners_;
          do
            v141 = __ldaxr(v187);
          while (__stlxr(v141 - 1, v187));
        }
        else
        {
          v142 = v440;
          if (!v440)
          {
            if (v438)
            {
              std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](&v454, (uint64_t *)&v438);
              v135 = (QP::ParseAttribute **)&v438;
            }
            else
            {
              std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](&v438, (uint64_t *)v3);
              v135 = (QP::ParseAttribute **)&v454;
            }
LABEL_184:
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v135, (uint64_t *)v3);
            ++v49;
            goto LABEL_334;
          }
          if (v438)
          {
            v143 = *(_QWORD *)(a1 + 32);
            v420 = 0;
            v421 = 0;
            v144 = *(std::__shared_weak_count **)(v440 + 112);
            if (v144)
            {
              v421 = std::__shared_weak_count::lock(v144);
              if (v421)
                v420 = *(_QWORD *)(v142 + 104);
            }
            v145 = v438;
            v418 = 0;
            v419 = 0;
            v146 = (std::__shared_weak_count *)v438[4].__r_.__value_.__r.__words[2];
            if (v146)
            {
              v419 = std::__shared_weak_count::lock(v146);
              if (v419)
                v418 = v145[4].__r_.__value_.__l.__size_;
            }
            QP::Lexer::merge(v143, &v420, (uint64_t *)&v418, *(_WORD *)(v440 + 36), &v430);
            v147 = v419;
            if (v419)
            {
              v148 = (unint64_t *)&v419->__shared_owners_;
              do
                v149 = __ldaxr(v148);
              while (__stlxr(v149 - 1, v148));
              if (!v149)
              {
                ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                std::__shared_weak_count::__release_weak(v147);
              }
            }
            v150 = v421;
            if (v421)
            {
              v151 = (unint64_t *)&v421->__shared_owners_;
              do
                v152 = __ldaxr(v151);
              while (__stlxr(v152 - 1, v151));
              if (!v152)
              {
                ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                std::__shared_weak_count::__release_weak(v150);
              }
            }
            v153 = v430;
            if (v430)
            {
              v154 = v440;
              v155 = v431;
              if (v431)
              {
                v156 = (unint64_t *)&v431->__shared_owners_;
                do
                  v157 = __ldxr(v156);
                while (__stxr(v157 + 1, v156));
                v158 = (unint64_t *)&v155->__shared_weak_owners_;
                do
                  v159 = __ldxr(v158);
                while (__stxr(v159 + 1, v158));
              }
              v160 = *(std::__shared_weak_count **)(v154 + 112);
              *(_QWORD *)(v154 + 104) = v153;
              *(_QWORD *)(v154 + 112) = v155;
              if (v160)
                std::__shared_weak_count::__release_weak(v160);
              if (v155)
              {
                v161 = (unint64_t *)&v155->__shared_owners_;
                do
                  v162 = __ldaxr(v161);
                while (__stlxr(v162 - 1, v161));
                if (!v162)
                {
                  ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                  std::__shared_weak_count::__release_weak(v155);
                }
              }
              QP::ParseAttribute::setShouldIgnore(v438, 1);
            }
            else
            {
              v458 = 0;
              ++v49;
            }
            v225 = v441;
            v440 = 0;
            v441 = 0;
            if (v225)
            {
              v226 = (unint64_t *)&v225->__shared_owners_;
              do
                v227 = __ldaxr(v226);
              while (__stlxr(v227 - 1, v226));
              if (!v227)
              {
                ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
                std::__shared_weak_count::__release_weak(v225);
              }
            }
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](&v438, (uint64_t *)v3);
            v139 = v431;
            if (!v431)
              goto LABEL_334;
            v228 = (unint64_t *)&v431->__shared_owners_;
            do
              v141 = __ldaxr(v228);
            while (__stlxr(v141 - 1, v228));
          }
          else
          {
            if (*((unsigned __int16 *)*v3 + 18) > 3u)
            {
              std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](&v438, (uint64_t *)v3);
              std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](&v454, (uint64_t *)v3);
              ++v49;
            }
            else
            {
              v194 = *(_QWORD *)(a1 + 32);
              v416 = 0;
              v417 = 0;
              v195 = *(std::__shared_weak_count **)(v440 + 112);
              if (v195)
              {
                v417 = std::__shared_weak_count::lock(v195);
                if (v417)
                  v416 = *(_QWORD *)(v142 + 104);
              }
              v196 = *v3;
              v414 = 0;
              v415 = 0;
              v197 = (std::__shared_weak_count *)*((_QWORD *)v196 + 14);
              if (v197)
              {
                v415 = std::__shared_weak_count::lock(v197);
                if (v415)
                  v414 = *((_QWORD *)v196 + 13);
              }
              QP::Lexer::merge(v194, &v416, &v414, *(_WORD *)(v440 + 36), &v430);
              v198 = v415;
              if (v415)
              {
                v199 = (unint64_t *)&v415->__shared_owners_;
                do
                  v200 = __ldaxr(v199);
                while (__stlxr(v200 - 1, v199));
                if (!v200)
                {
                  ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
                  std::__shared_weak_count::__release_weak(v198);
                }
              }
              v201 = v417;
              if (v417)
              {
                v202 = (unint64_t *)&v417->__shared_owners_;
                do
                  v203 = __ldaxr(v202);
                while (__stlxr(v203 - 1, v202));
                if (!v203)
                {
                  ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
                  std::__shared_weak_count::__release_weak(v201);
                }
              }
              v204 = v430;
              if (v430)
              {
                v205 = v440;
                v206 = v431;
                if (v431)
                {
                  v207 = (unint64_t *)&v431->__shared_owners_;
                  do
                    v208 = __ldxr(v207);
                  while (__stxr(v208 + 1, v207));
                  v209 = (unint64_t *)&v206->__shared_weak_owners_;
                  do
                    v210 = __ldxr(v209);
                  while (__stxr(v210 + 1, v209));
                }
                v211 = *(std::__shared_weak_count **)(v205 + 112);
                *(_QWORD *)(v205 + 104) = v204;
                *(_QWORD *)(v205 + 112) = v206;
                if (v211)
                  std::__shared_weak_count::__release_weak(v211);
                if (v206)
                {
                  v212 = (unint64_t *)&v206->__shared_owners_;
                  do
                    v213 = __ldaxr(v212);
                  while (__stlxr(v213 - 1, v212));
                  if (!v213)
                  {
                    ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                    std::__shared_weak_count::__release_weak(v206);
                  }
                }
                QP::ParseAttribute::setShouldIgnore((std::string *)*v3, 1);
              }
              else
              {
                v458 = 0;
                ++v49;
              }
              v229 = v431;
              if (v431)
              {
                v230 = (unint64_t *)&v431->__shared_owners_;
                do
                  v231 = __ldaxr(v230);
                while (__stlxr(v231 - 1, v230));
                if (!v231)
                {
                  ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                  std::__shared_weak_count::__release_weak(v229);
                }
              }
            }
            v139 = v441;
            v440 = 0;
            v441 = 0;
            if (!v139)
              goto LABEL_334;
            v232 = (unint64_t *)&v139->__shared_owners_;
            do
              v141 = __ldaxr(v232);
            while (__stlxr(v141 - 1, v232));
          }
        }
LABEL_269:
        if (!v141)
        {
          ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
          std::__shared_weak_count::__release_weak(v139);
        }
        goto LABEL_334;
      }
      if (v438)
      {
        v111 = *v3;
        if (*((unsigned __int16 *)*v3 + 18) > 3u)
        {
          std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](&v454, (uint64_t *)&v438);
          ++v49;
        }
        else
        {
          v112 = *(_QWORD *)(a1 + 32);
          v412 = 0;
          v413 = 0;
          v113 = (std::__shared_weak_count *)*((_QWORD *)v111 + 14);
          if (v113)
          {
            v413 = std::__shared_weak_count::lock(v113);
            if (v413)
              v412 = *((_QWORD *)v111 + 13);
          }
          v114 = v438;
          v410 = 0;
          v411 = 0;
          v115 = (std::__shared_weak_count *)v438[4].__r_.__value_.__r.__words[2];
          if (v115)
          {
            v411 = std::__shared_weak_count::lock(v115);
            if (v411)
              v410 = v114[4].__r_.__value_.__l.__size_;
          }
          QP::Lexer::merge(v112, &v412, (uint64_t *)&v410, WORD2(v438[1].__r_.__value_.__r.__words[1]), &v430);
          v116 = v411;
          if (v411)
          {
            v117 = (unint64_t *)&v411->__shared_owners_;
            do
              v118 = __ldaxr(v117);
            while (__stlxr(v118 - 1, v117));
            if (!v118)
            {
              ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
              std::__shared_weak_count::__release_weak(v116);
            }
          }
          v119 = v413;
          if (v413)
          {
            v120 = (unint64_t *)&v413->__shared_owners_;
            do
              v121 = __ldaxr(v120);
            while (__stlxr(v121 - 1, v120));
            if (!v121)
            {
              ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
              std::__shared_weak_count::__release_weak(v119);
            }
          }
          v122 = v430;
          if (v430)
          {
            v123 = *v3;
            v124 = v431;
            if (v431)
            {
              v125 = (unint64_t *)&v431->__shared_owners_;
              do
                v126 = __ldxr(v125);
              while (__stxr(v126 + 1, v125));
              v127 = (unint64_t *)&v124->__shared_weak_owners_;
              do
                v128 = __ldxr(v127);
              while (__stxr(v128 + 1, v127));
            }
            v129 = (std::__shared_weak_count *)*((_QWORD *)v123 + 14);
            *((_QWORD *)v123 + 13) = v122;
            *((_QWORD *)v123 + 14) = v124;
            if (v129)
              std::__shared_weak_count::__release_weak(v129);
            if (v124)
            {
              v130 = (unint64_t *)&v124->__shared_owners_;
              do
                v131 = __ldaxr(v130);
              while (__stlxr(v131 - 1, v130));
              if (!v131)
              {
                ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                std::__shared_weak_count::__release_weak(v124);
              }
            }
            QP::ParseAttribute::setModifier((uint64_t)*v3, WORD2(v438[1].__r_.__value_.__r.__words[1]));
            QP::ParseAttribute::setShouldIgnore(v438, 1);
            v132 = v455;
            v454 = 0;
            v455 = 0;
            if (v132)
            {
              v133 = (unint64_t *)&v132->__shared_owners_;
              do
                v134 = __ldaxr(v133);
              while (__stlxr(v134 - 1, v133));
              if (!v134)
              {
                ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                std::__shared_weak_count::__release_weak(v132);
              }
            }
          }
          else
          {
            v458 = 0;
            ++v49;
          }
          v188 = v431;
          if (v431)
          {
            v189 = (unint64_t *)&v431->__shared_owners_;
            do
              v190 = __ldaxr(v189);
            while (__stlxr(v190 - 1, v189));
            if (!v190)
            {
              ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
              std::__shared_weak_count::__release_weak(v188);
            }
          }
        }
        v191 = v439;
        v438 = 0;
        v439 = 0;
        if (!v191)
          goto LABEL_326;
        v192 = (unint64_t *)&v191->__shared_owners_;
        do
          v193 = __ldaxr(v192);
        while (__stlxr(v193 - 1, v192));
      }
      else
      {
        v163 = v440;
        if (!v440 || !v436)
        {
          ++v49;
LABEL_326:
          std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](&v440, (uint64_t *)v3);
          switch(*((_WORD *)*v3 + 18))
          {
            case 1:
              v218 = &v456;
              goto LABEL_333;
            case 2:
            case 3:
              v218 = &v452;
              goto LABEL_333;
            case 5:
              v218 = &v448;
              goto LABEL_333;
            case 6:
              v218 = &v446;
              goto LABEL_333;
            case 7:
              v218 = &v444;
              goto LABEL_333;
            case 8:
              v218 = &v442;
LABEL_333:
              std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v218, (uint64_t *)v3);
              break;
            default:
              goto LABEL_334;
          }
          goto LABEL_334;
        }
        v164 = *(_QWORD *)(a1 + 32);
        v408 = 0;
        v409 = 0;
        v165 = *(std::__shared_weak_count **)(v440 + 112);
        if (v165)
        {
          v409 = std::__shared_weak_count::lock(v165);
          if (v409)
            v408 = *(_QWORD *)(v163 + 104);
        }
        v166 = v436;
        v406 = 0;
        v407 = 0;
        v167 = (std::__shared_weak_count *)*((_QWORD *)v436 + 14);
        if (v167)
        {
          v407 = std::__shared_weak_count::lock(v167);
          if (v407)
            v406 = *((_QWORD *)v166 + 13);
        }
        QP::Lexer::merge(v164, &v408, &v406, *(_WORD *)(v440 + 36), &v430);
        v168 = v407;
        if (v407)
        {
          v169 = (unint64_t *)&v407->__shared_owners_;
          do
            v170 = __ldaxr(v169);
          while (__stlxr(v170 - 1, v169));
          if (!v170)
          {
            ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
            std::__shared_weak_count::__release_weak(v168);
          }
        }
        v171 = v409;
        if (v409)
        {
          v172 = (unint64_t *)&v409->__shared_owners_;
          do
            v173 = __ldaxr(v172);
          while (__stlxr(v173 - 1, v172));
          if (!v173)
          {
            ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
            std::__shared_weak_count::__release_weak(v171);
          }
        }
        v174 = v430;
        if (v430)
        {
          v175 = v440;
          v176 = v431;
          if (v431)
          {
            v177 = (unint64_t *)&v431->__shared_owners_;
            do
              v178 = __ldxr(v177);
            while (__stxr(v178 + 1, v177));
            v179 = (unint64_t *)&v176->__shared_weak_owners_;
            do
              v180 = __ldxr(v179);
            while (__stxr(v180 + 1, v179));
          }
          v181 = *(std::__shared_weak_count **)(v175 + 112);
          *(_QWORD *)(v175 + 104) = v174;
          *(_QWORD *)(v175 + 112) = v176;
          if (v181)
            std::__shared_weak_count::__release_weak(v181);
          if (v176)
          {
            v182 = (unint64_t *)&v176->__shared_owners_;
            do
              v183 = __ldaxr(v182);
            while (__stlxr(v183 - 1, v182));
            if (!v183)
            {
              ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
              std::__shared_weak_count::__release_weak(v176);
            }
          }
          QP::ParseAttribute::setShouldIgnore((std::string *)v436, 1);
        }
        else
        {
          v458 = 0;
          ++v49;
        }
        v214 = v437;
        v436 = 0;
        v437 = 0;
        if (v214)
        {
          v215 = (unint64_t *)&v214->__shared_owners_;
          do
            v216 = __ldaxr(v215);
          while (__stlxr(v216 - 1, v215));
          if (!v216)
          {
            ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
            std::__shared_weak_count::__release_weak(v214);
          }
        }
        v191 = v431;
        if (!v431)
          goto LABEL_326;
        v217 = (unint64_t *)&v431->__shared_owners_;
        do
          v193 = __ldaxr(v217);
        while (__stlxr(v193 - 1, v217));
      }
      if (!v193)
      {
        ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
        std::__shared_weak_count::__release_weak(v191);
      }
      goto LABEL_326;
    }
LABEL_334:
    v219 = v433;
    if (v433)
    {
      v220 = (unint64_t *)&v433->__shared_owners_;
      do
        v221 = __ldaxr(v220);
      while (__stlxr(v221 - 1, v220));
      if (!v221)
      {
        ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
        std::__shared_weak_count::__release_weak(v219);
      }
    }
    v222 = v435;
    if (v435)
    {
      v223 = (unint64_t *)&v435->__shared_owners_;
      do
        v224 = __ldaxr(v223);
      while (__stlxr(v224 - 1, v223));
      if (!v224)
      {
        ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
        std::__shared_weak_count::__release_weak(v222);
      }
    }
LABEL_344:
    v3 += 2;
  }
  while (v3 != v4);
  v233 = v440;
  if (v440)
  {
    if (v438)
    {
      v234 = *(_QWORD *)(a1 + 32);
      v404 = 0;
      v405 = 0;
      v235 = *(std::__shared_weak_count **)(v440 + 112);
      if (v235)
      {
        v405 = std::__shared_weak_count::lock(v235);
        if (v405)
          v404 = *(_QWORD *)(v233 + 104);
      }
      v236 = v438;
      v402 = 0;
      v403 = 0;
      v237 = (std::__shared_weak_count *)v438[4].__r_.__value_.__r.__words[2];
      if (v237)
      {
        v403 = std::__shared_weak_count::lock(v237);
        if (v403)
          v402 = v236[4].__r_.__value_.__l.__size_;
      }
      QP::Lexer::merge(v234, &v404, (uint64_t *)&v402, *(_WORD *)(v440 + 36), &v434);
      v238 = v403;
      if (v403)
      {
        v239 = (unint64_t *)&v403->__shared_owners_;
        do
          v240 = __ldaxr(v239);
        while (__stlxr(v240 - 1, v239));
        if (!v240)
        {
          ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
          std::__shared_weak_count::__release_weak(v238);
        }
      }
      v241 = v405;
      if (v405)
      {
        v242 = (unint64_t *)&v405->__shared_owners_;
        do
          v243 = __ldaxr(v242);
        while (__stlxr(v243 - 1, v242));
        if (!v243)
        {
          ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
          std::__shared_weak_count::__release_weak(v241);
        }
      }
      v244 = v434;
      if (v434)
      {
        v245 = v440;
        v246 = v435;
        if (v435)
        {
          v247 = (unint64_t *)&v435->__shared_owners_;
          do
            v248 = __ldxr(v247);
          while (__stxr(v248 + 1, v247));
          v249 = (unint64_t *)&v246->__shared_weak_owners_;
          do
            v250 = __ldxr(v249);
          while (__stxr(v250 + 1, v249));
        }
        v251 = *(std::__shared_weak_count **)(v245 + 112);
        *(_QWORD *)(v245 + 104) = v244;
        *(_QWORD *)(v245 + 112) = v246;
        if (v251)
          std::__shared_weak_count::__release_weak(v251);
        if (v246)
        {
          v252 = (unint64_t *)&v246->__shared_owners_;
          do
            v253 = __ldaxr(v252);
          while (__stlxr(v253 - 1, v252));
          if (!v253)
          {
            ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
            std::__shared_weak_count::__release_weak(v246);
          }
        }
        QP::ParseAttribute::setShouldIgnore(v438, 1);
        --v49;
      }
      else
      {
        v458 = 0;
      }
      v274 = v435;
      if (v435)
      {
        v275 = (unint64_t *)&v435->__shared_owners_;
        do
          v276 = __ldaxr(v275);
        while (__stlxr(v276 - 1, v275));
LABEL_441:
        if (!v276)
        {
          ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
          std::__shared_weak_count::__release_weak(v274);
        }
      }
    }
    else if (v436)
    {
      v254 = *(_QWORD *)(a1 + 32);
      v400 = 0;
      v401 = 0;
      v255 = *(std::__shared_weak_count **)(v440 + 112);
      if (v255)
      {
        v401 = std::__shared_weak_count::lock(v255);
        if (v401)
          v400 = *(_QWORD *)(v233 + 104);
      }
      v256 = v436;
      v398 = 0;
      v399 = 0;
      v257 = (std::__shared_weak_count *)*((_QWORD *)v436 + 14);
      if (v257)
      {
        v399 = std::__shared_weak_count::lock(v257);
        if (v399)
          v398 = *((_QWORD *)v256 + 13);
      }
      QP::Lexer::merge(v254, &v400, &v398, *(_WORD *)(v440 + 36), &v434);
      v258 = v399;
      if (v399)
      {
        v259 = (unint64_t *)&v399->__shared_owners_;
        do
          v260 = __ldaxr(v259);
        while (__stlxr(v260 - 1, v259));
        if (!v260)
        {
          ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
          std::__shared_weak_count::__release_weak(v258);
        }
      }
      v261 = v401;
      if (v401)
      {
        v262 = (unint64_t *)&v401->__shared_owners_;
        do
          v263 = __ldaxr(v262);
        while (__stlxr(v263 - 1, v262));
        if (!v263)
        {
          ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
          std::__shared_weak_count::__release_weak(v261);
        }
      }
      v264 = v434;
      if (v434)
      {
        v265 = v440;
        v266 = v435;
        if (v435)
        {
          v267 = (unint64_t *)&v435->__shared_owners_;
          do
            v268 = __ldxr(v267);
          while (__stxr(v268 + 1, v267));
          v269 = (unint64_t *)&v266->__shared_weak_owners_;
          do
            v270 = __ldxr(v269);
          while (__stxr(v270 + 1, v269));
        }
        v271 = *(std::__shared_weak_count **)(v265 + 112);
        *(_QWORD *)(v265 + 104) = v264;
        *(_QWORD *)(v265 + 112) = v266;
        if (v271)
          std::__shared_weak_count::__release_weak(v271);
        if (v266)
        {
          v272 = (unint64_t *)&v266->__shared_owners_;
          do
            v273 = __ldaxr(v272);
          while (__stlxr(v273 - 1, v272));
          if (!v273)
          {
            ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
            std::__shared_weak_count::__release_weak(v266);
          }
        }
        QP::ParseAttribute::setShouldIgnore((std::string *)v436, 1);
        --v49;
      }
      else
      {
        v458 = 0;
      }
      v274 = v435;
      if (v435)
      {
        v277 = (unint64_t *)&v435->__shared_owners_;
        do
          v276 = __ldaxr(v277);
        while (__stlxr(v276 - 1, v277));
        goto LABEL_441;
      }
    }
  }
LABEL_443:
  v434 = 0;
  v435 = 0;
  v432 = 0;
  v433 = 0;
  if (v452)
  {
    if (v442)
    {
      v278 = &v442;
      goto LABEL_455;
    }
    if (v448)
    {
      v278 = &v448;
      goto LABEL_455;
    }
    if (v454)
    {
      v278 = &v454;
LABEL_455:
      v279 = &v452;
LABEL_476:
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](&v434, v279);
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](&v432, v278);
      goto LABEL_477;
    }
LABEL_456:
    if (v444)
    {
      if (v448)
      {
        v278 = &v448;
      }
      else
      {
        if (!v454)
          goto LABEL_477;
        v278 = &v454;
      }
LABEL_463:
      v279 = &v444;
      goto LABEL_476;
    }
    v280 = 1;
    if (!v448)
      goto LABEL_470;
LABEL_465:
    if (v446)
    {
      v278 = &v448;
    }
    else
    {
      if (!v454)
        goto LABEL_470;
      v278 = &v454;
    }
    v279 = &v446;
    goto LABEL_476;
  }
  if (!v442)
    goto LABEL_456;
  if (v454)
  {
    v278 = &v442;
    v279 = &v454;
    goto LABEL_476;
  }
  v280 = v444;
  if (v444)
  {
    v278 = &v442;
    goto LABEL_463;
  }
  if (v448)
    goto LABEL_465;
LABEL_470:
  if (v456)
  {
    if (v280)
    {
      if (!v454)
        goto LABEL_477;
      v278 = &v454;
    }
    else
    {
      v278 = &v442;
    }
    v279 = &v456;
    goto LABEL_476;
  }
LABEL_477:
  v281 = v434;
  if (v434 && v432)
  {
    v282 = *(_QWORD *)(a1 + 32);
    v396 = 0;
    v397 = 0;
    v283 = *(std::__shared_weak_count **)(v434 + 112);
    if (v283)
    {
      v397 = std::__shared_weak_count::lock(v283);
      if (v397)
        v396 = *(_QWORD *)(v281 + 104);
    }
    v284 = v432;
    v394 = 0;
    v395 = 0;
    v285 = (std::__shared_weak_count *)*((_QWORD *)v432 + 14);
    if (v285)
    {
      v395 = std::__shared_weak_count::lock(v285);
      if (v395)
        v394 = *((_QWORD *)v284 + 13);
    }
    QP::Lexer::merge(v282, &v396, &v394, *(_WORD *)(v434 + 36), &v430);
    v286 = v395;
    if (v395)
    {
      v287 = (unint64_t *)&v395->__shared_owners_;
      do
        v288 = __ldaxr(v287);
      while (__stlxr(v288 - 1, v287));
      if (!v288)
      {
        ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
        std::__shared_weak_count::__release_weak(v286);
      }
    }
    v289 = v397;
    if (v397)
    {
      v290 = (unint64_t *)&v397->__shared_owners_;
      do
        v291 = __ldaxr(v290);
      while (__stlxr(v291 - 1, v290));
      if (!v291)
      {
        ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
        std::__shared_weak_count::__release_weak(v289);
      }
    }
    v292 = v430;
    if (v430)
    {
      v293 = v434;
      v294 = v431;
      if (v431)
      {
        v295 = (unint64_t *)&v431->__shared_owners_;
        do
          v296 = __ldxr(v295);
        while (__stxr(v296 + 1, v295));
        v297 = (unint64_t *)&v294->__shared_weak_owners_;
        do
          v298 = __ldxr(v297);
        while (__stxr(v298 + 1, v297));
      }
      v299 = *(std::__shared_weak_count **)(v293 + 112);
      *(_QWORD *)(v293 + 104) = v292;
      *(_QWORD *)(v293 + 112) = v294;
      if (v299)
        std::__shared_weak_count::__release_weak(v299);
      if (v294)
      {
        v300 = (unint64_t *)&v294->__shared_owners_;
        do
          v301 = __ldaxr(v300);
        while (__stlxr(v301 - 1, v300));
        if (!v301)
        {
          ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
          std::__shared_weak_count::__release_weak(v294);
        }
      }
      QP::ParseAttribute::setShouldIgnore((std::string *)v432, 1);
      --v49;
    }
    else
    {
      v458 = 0;
    }
    v302 = v431;
    if (v431)
    {
      v303 = (unint64_t *)&v431->__shared_owners_;
      do
        v304 = __ldaxr(v303);
      while (__stlxr(v304 - 1, v303));
      if (!v304)
      {
        ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
        std::__shared_weak_count::__release_weak(v302);
      }
    }
  }
  if (v49 < 2)
  {
    v305 = v458;
    if (!v458)
      goto LABEL_582;
    v307 = *a2;
    v306 = a2[1];
    if (v306 == *a2)
    {
      v305 = 1;
      goto LABEL_582;
    }
    v308 = 0;
    while (1)
    {
      v309 = *v307;
      if (!v308)
        v308 = *((_WORD *)v309 + 18);
      if (*((_BYTE *)v309 + 73))
        goto LABEL_579;
      v310 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)v309 + 14));
      if (*(unsigned __int16 *)(*((_QWORD *)v309 + 13) + 88) - 1 <= 3
        && (v311 = *v307, (v312 = (std::__shared_weak_count *)*((_QWORD *)*v307 + 14)) != 0)
        && (v313 = std::__shared_weak_count::lock(v312)) != 0)
      {
        v314 = v313;
        v315 = *((_QWORD *)v311 + 13) == 0;
        v316 = (unint64_t *)&v313->__shared_owners_;
        do
          v317 = __ldaxr(v316);
        while (__stlxr(v317 - 1, v316));
        if (!v317)
        {
          ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
          std::__shared_weak_count::__release_weak(v314);
        }
      }
      else
      {
        v315 = 1;
      }
      v318 = (unint64_t *)&v310->__shared_owners_;
      do
        v319 = __ldaxr(v318);
      while (__stlxr(v319 - 1, v318));
      if (v319)
      {
        if (v315)
          goto LABEL_579;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
        std::__shared_weak_count::__release_weak(v310);
        if (v315)
          goto LABEL_579;
      }
      v320 = *v307;
      v321 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)*v307 + 14));
      v430 = *((_QWORD *)v320 + 13);
      v431 = v321;
      v322 = *(_QWORD *)(v430 + 120);
      v323 = *(std::__shared_weak_count **)(v430 + 128);
      v392 = v322;
      v393 = v323;
      if (v323)
      {
        v324 = (unint64_t *)&v323->__shared_owners_;
        do
          v325 = __ldxr(v324);
        while (__stxr(v325 + 1, v324));
      }
      if (v322)
      {
        v326 = *(_QWORD *)(a1 + 32);
        v327 = *v307;
        v388 = 0;
        v389 = 0;
        v328 = (std::__shared_weak_count *)*((_QWORD *)v327 + 14);
        if (v328)
        {
          v389 = std::__shared_weak_count::lock(v328);
          if (v389)
            v388 = *((_QWORD *)v327 + 13);
        }
        QP::Lexer::resolve(v326, &v388, v308, (BOOL *)&v458, &v390);
        v329 = v389;
        if (v389)
        {
          v330 = (unint64_t *)&v389->__shared_owners_;
          do
            v331 = __ldaxr(v330);
          while (__stlxr(v331 - 1, v330));
          if (!v331)
          {
            ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
            std::__shared_weak_count::__release_weak(v329);
          }
        }
        v332 = v390;
        if (v390)
        {
          v333 = *v307;
          v334 = v391;
          if (v391)
          {
            v335 = (unint64_t *)&v391->__shared_owners_;
            do
              v336 = __ldxr(v335);
            while (__stxr(v336 + 1, v335));
            v337 = (unint64_t *)&v334->__shared_weak_owners_;
            do
              v338 = __ldxr(v337);
            while (__stxr(v338 + 1, v337));
          }
          v339 = (std::__shared_weak_count *)*((_QWORD *)v333 + 14);
          *((_QWORD *)v333 + 13) = v332;
          *((_QWORD *)v333 + 14) = v334;
          if (v339)
            std::__shared_weak_count::__release_weak(v339);
          if (v334)
          {
            v340 = (unint64_t *)&v334->__shared_owners_;
            do
              v341 = __ldaxr(v340);
            while (__stlxr(v341 - 1, v340));
            if (!v341)
            {
              ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
              std::__shared_weak_count::__release_weak(v334);
            }
          }
        }
        v342 = v391;
        if (v391)
        {
          v343 = (unint64_t *)&v391->__shared_owners_;
          do
            v344 = __ldaxr(v343);
          while (__stlxr(v344 - 1, v343));
          if (!v344)
          {
            ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
            std::__shared_weak_count::__release_weak(v342);
          }
        }
        v308 = 0;
        v323 = v393;
      }
      v345 = v458;
      if (v323)
      {
        v346 = (unint64_t *)&v323->__shared_owners_;
        do
          v347 = __ldaxr(v346);
        while (__stlxr(v347 - 1, v346));
        if (!v347)
        {
          ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
          std::__shared_weak_count::__release_weak(v323);
        }
      }
      v348 = v431;
      if (v431)
      {
        v349 = (unint64_t *)&v431->__shared_owners_;
        do
          v350 = __ldaxr(v349);
        while (__stlxr(v350 - 1, v349));
        if (!v350)
        {
          ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
          std::__shared_weak_count::__release_weak(v348);
        }
      }
      if (!v345)
      {
LABEL_580:
        v305 = v458;
        goto LABEL_582;
      }
LABEL_579:
      v307 += 2;
      if (v307 == v306)
        goto LABEL_580;
    }
  }
  v305 = 0;
  v458 = 0;
LABEL_582:
  v47 = v305 != 0;
  v351 = v433;
  if (v433)
  {
    v352 = (unint64_t *)&v433->__shared_owners_;
    do
      v353 = __ldaxr(v352);
    while (__stlxr(v353 - 1, v352));
    if (!v353)
    {
      ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
      std::__shared_weak_count::__release_weak(v351);
    }
  }
  v354 = v435;
  if (v435)
  {
    v355 = (unint64_t *)&v435->__shared_owners_;
    do
      v356 = __ldaxr(v355);
    while (__stlxr(v356 - 1, v355));
    if (!v356)
    {
      ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
      std::__shared_weak_count::__release_weak(v354);
    }
  }
  v357 = v437;
  if (v437)
  {
    v358 = (unint64_t *)&v437->__shared_owners_;
    do
      v359 = __ldaxr(v358);
    while (__stlxr(v359 - 1, v358));
    if (!v359)
    {
      ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
      std::__shared_weak_count::__release_weak(v357);
    }
  }
  v360 = v439;
  if (v439)
  {
    v361 = (unint64_t *)&v439->__shared_owners_;
    do
      v362 = __ldaxr(v361);
    while (__stlxr(v362 - 1, v361));
    if (!v362)
    {
      ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
      std::__shared_weak_count::__release_weak(v360);
    }
  }
  v363 = v441;
  if (v441)
  {
    v364 = (unint64_t *)&v441->__shared_owners_;
    do
      v365 = __ldaxr(v364);
    while (__stlxr(v365 - 1, v364));
    if (!v365)
    {
      ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
      std::__shared_weak_count::__release_weak(v363);
    }
  }
  v366 = v443;
  if (v443)
  {
    v367 = (unint64_t *)&v443->__shared_owners_;
    do
      v368 = __ldaxr(v367);
    while (__stlxr(v368 - 1, v367));
    if (!v368)
    {
      ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
      std::__shared_weak_count::__release_weak(v366);
    }
  }
  v369 = v445;
  if (v445)
  {
    v370 = (unint64_t *)&v445->__shared_owners_;
    do
      v371 = __ldaxr(v370);
    while (__stlxr(v371 - 1, v370));
    if (!v371)
    {
      ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
      std::__shared_weak_count::__release_weak(v369);
    }
  }
  v372 = v447;
  if (v447)
  {
    v373 = (unint64_t *)&v447->__shared_owners_;
    do
      v374 = __ldaxr(v373);
    while (__stlxr(v374 - 1, v373));
    if (!v374)
    {
      ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
      std::__shared_weak_count::__release_weak(v372);
    }
  }
  v375 = v449;
  if (v449)
  {
    v376 = (unint64_t *)&v449->__shared_owners_;
    do
      v377 = __ldaxr(v376);
    while (__stlxr(v377 - 1, v376));
    if (!v377)
    {
      ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
      std::__shared_weak_count::__release_weak(v375);
    }
  }
  v378 = v453;
  if (v453)
  {
    v379 = (unint64_t *)&v453->__shared_owners_;
    do
      v380 = __ldaxr(v379);
    while (__stlxr(v380 - 1, v379));
    if (!v380)
    {
      ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
      std::__shared_weak_count::__release_weak(v378);
    }
  }
  v381 = v455;
  if (v455)
  {
    v382 = (unint64_t *)&v455->__shared_owners_;
    do
      v383 = __ldaxr(v382);
    while (__stlxr(v383 - 1, v382));
    if (!v383)
    {
      ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
      std::__shared_weak_count::__release_weak(v381);
    }
  }
  v384 = v457;
  if (v457)
  {
    v385 = (unint64_t *)&v457->__shared_owners_;
    do
      v386 = __ldaxr(v385);
    while (__stlxr(v386 - 1, v385));
    if (!v386)
    {
      ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
      std::__shared_weak_count::__release_weak(v384);
    }
  }
  return v47;
}

void sub_218E21118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,char a53,uint64_t a54,char a55,uint64_t a56,char a57)
{
  uint64_t v57;

  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a51);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a55);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a57);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v57 - 256);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v57 - 240);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v57 - 224);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v57 - 208);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v57 - 192);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v57 - 176);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v57 - 144);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v57 - 128);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v57 - 104);
  _Unwind_Resume(a1);
}

void QP::ParseAttribute::setShouldIgnore(std::string *this, int a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::string::size_type size;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::string __p;
  std::string __str;
  std::string::size_type v10;
  std::__shared_weak_count *v11;

  this[3].__r_.__value_.__s.__data_[1] = a2;
  if (a2)
  {
    v10 = 0;
    v11 = 0;
    v3 = (std::__shared_weak_count *)this[4].__r_.__value_.__r.__words[2];
    if (v3)
    {
      v4 = std::__shared_weak_count::lock(v3);
      v11 = v4;
      if (v4)
      {
        size = this[4].__r_.__value_.__l.__size_;
        v10 = size;
        if (size)
        {
          if (*(unsigned __int16 *)(size + 88) - 1 <= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(&__str, "kQPDateExtension");
            std::string::operator=(this + 2, &__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
LABEL_12:
            p_shared_owners = (unint64_t *)&v4->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
              std::__shared_weak_count::__release_weak(v4);
            }
            return;
          }
        }
      }
    }
    else
    {
      v4 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "kQPExtension");
    std::string::operator=(this + 2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v4)
      goto LABEL_12;
  }
}

void sub_218E213C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v20 - 32);
  _Unwind_Resume(a1);
}

void QP::ParseAttribute::setModifier(uint64_t a1, __int16 a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  *(_WORD *)(a1 + 36) = a2;
  v3 = *(std::__shared_weak_count **)(a1 + 112);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 104);
      if (v7 && *(unsigned __int16 *)(v7 + 88) - 1 <= 3)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        v10 = *(_QWORD *)(v7 + 120);
        v11 = *(std::__shared_weak_count **)(v7 + 128);
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        if (v10)
        {
          *(_WORD *)(v10 + 12) = a2;
          if ((unsigned __int16)(a2 - 1) > 7u)
            v14 = 0;
          else
            v14 = dword_218E9F854[(__int16)(a2 - 1)];
          *(_DWORD *)(v10 + 16) = v14;
        }
        if (v11)
        {
          v15 = (unint64_t *)&v11->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v18 = (unint64_t *)&v6->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

uint64_t QP::Parser::validate(uint64_t a1, uint64_t **a2)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __CFCalendar *v17;
  const __CFDate *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  double AbsoluteTime;
  __int128 v25;
  double v26;
  int v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _OWORD v33[3];
  int v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;

  QP::Parser::mergeActions(a1, a2);
  result = QP::Parser::mergeDates(a1, (QP::ParseAttribute ***)a2);
  if ((_DWORD)result)
  {
    v5 = *a2;
    v6 = a2[1];
    while (1)
    {
      if (v5 == v6)
        return 1;
      v7 = *v5;
      v39 = 0;
      v40 = 0;
      v8 = *(std::__shared_weak_count **)(v7 + 112);
      if (v8)
      {
        v9 = std::__shared_weak_count::lock(v8);
        v40 = v9;
        if (!v9)
          goto LABEL_16;
        v10 = *(_QWORD *)(v7 + 104);
        v39 = v10;
        if (v10)
        {
          if (!*(_BYTE *)(*v5 + 73))
            break;
        }
      }
      v11 = 3;
LABEL_9:
      v12 = v40;
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if (v11 != 3 && v11)
        return 0;
LABEL_16:
      v5 += 2;
    }
    if (*(unsigned __int16 *)(v10 + 88) - 1 > 3)
    {
LABEL_46:
      v11 = 0;
      goto LABEL_9;
    }
    v37 = v10;
    v38 = v9;
    v15 = (unint64_t *)&v9->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v17 = *(__CFCalendar **)(*(_QWORD *)a1 + 88);
    v18 = *(const __CFDate **)(*(_QWORD *)a1 + 72);
    v20 = *(_QWORD *)(v10 + 120);
    v19 = *(std::__shared_weak_count **)(v10 + 128);
    v35 = v20;
    v36 = v19;
    if (v19)
    {
      v21 = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    if (v20)
    {
      v23 = *(_QWORD *)a1;
      if (*(_BYTE *)(*(_QWORD *)a1 + 27) && *(_DWORD *)(v20 + 8) == 2 && *(_BYTE *)(v23 + 28))
      {
        AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)(v20 + 20), v17, v18);
        if (AbsoluteTime > getCurrentTime(v17, v18))
        {
LABEL_34:
          v27 = 0;
LABEL_36:
          if (v19)
          {
            v28 = (unint64_t *)&v19->__shared_owners_;
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          v30 = v38;
          if (!v38)
            goto LABEL_45;
          v31 = (unint64_t *)&v38->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
            if (!v27)
            {
LABEL_48:
              v11 = 1;
              goto LABEL_9;
            }
          }
          else
          {
LABEL_45:
            if (!v27)
              goto LABEL_48;
          }
          goto LABEL_46;
        }
        v23 = *(_QWORD *)a1;
      }
      if (*(_BYTE *)(v23 + 26))
      {
        if (*(_DWORD *)(v20 + 8) == 2 && (*(_DWORD *)(v20 + 16) - 1) >= 2)
        {
          v25 = *(_OWORD *)(v20 + 36);
          v33[0] = *(_OWORD *)(v20 + 20);
          v33[1] = v25;
          v33[2] = *(_OWORD *)(v20 + 52);
          v34 = *(_DWORD *)(v20 + 68);
          if (QP::DateComponents::isConcrete((QP::DateComponents *)v33))
          {
            v26 = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)v33, v17, v18);
            if (v26 < getCurrentTime(v17, v18))
              goto LABEL_34;
          }
        }
      }
    }
    v27 = 1;
    goto LABEL_36;
  }
  return result;
}

void sub_218E217F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

CFAbsoluteTime QP::DateComponents::getAbsoluteTime(QP::DateComponents *this, __CFCalendar *a2, const __CFDate *a3)
{
  CFAbsoluteTime CurrentTime;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  signed int v38;
  int v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  const __CFString *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  CFAbsoluteTime at[2];

  at[0] = 0.0;
  CurrentTime = getCurrentTime(a2, a3);
  v61 = -1;
  v62 = -1;
  v59 = -1;
  v60 = -1;
  v57 = -1;
  v58 = -1;
  v56 = -1;
  v54 = -1;
  v55 = -1;
  CFCalendarDecomposeAbsoluteTime(a2, CurrentTime, "yMdwEFHms", &v60, &v61, &v62, &v58, &v59, &v57, &v56, &v55, &v54);
  v52 = 0;
  v6 = *((_DWORD *)this + 7);
  if ((v6 & 0x80000000) != 0)
  {
    v8 = 0;
    v7 = 1;
  }
  else if (v6 > 8)
  {
    v7 = 0;
    v8 = 1;
  }
  else
  {
    v7 = (0x10Au >> v6) & 1;
    v8 = (0xF5u >> v6) & 1;
  }
  if (QP::DateComponents::isTime(this))
  {
    v9 = *((_DWORD *)this + 2) & ~(*((int *)this + 2) >> 31);
    if ((*((_DWORD *)this + 7) & 0x80000000) == 0)
    {
      if ((_DWORD)v9 == 12)
        v10 = v7;
      else
        v10 = 0;
      if ((_DWORD)v9 == 12)
        v11 = 0;
      else
        v11 = v8;
      if (v10 | v11)
        v9 += 12;
    }
    CFCalendarComposeAbsoluteTime(a2, at, "dMyHms", v62, v61, v60, v9, *((_DWORD *)this + 1) & ~(*((int *)this + 1) >> 31), *(_DWORD *)this & ~(*(int *)this >> 31));
    return at[0];
  }
  v12 = *((_DWORD *)this + 11);
  if ((v12 & 0x80000000) != 0)
  {
    if ((*((_DWORD *)this + 10) & 0x80000000) != 0
      && (*((_DWORD *)this + 9) & 0x80000000) != 0
      && (*((_DWORD *)this + 12) & 0x80000000) != 0)
    {
      v30 = *((unsigned int *)this + 8);
      v31 = *((_DWORD *)this + 3);
      if ((v30 & 0x80000000) != 0 || (v31 & 0x80000000) == 0)
      {
        if (v31 < 0)
          v35 = 1;
        else
          v35 = v31;
        v51 = v35;
        v36 = *((_DWORD *)this + 4);
        if (v36 < 0)
          v37 = 1;
        else
          v37 = v36;
        if (*((int *)this + 5) >= 0)
          v38 = *((_DWORD *)this + 5);
        else
          v38 = v60;
        v39 = *((_DWORD *)this + 1);
        v40 = *((_DWORD *)this + 2) & ~(*((int *)this + 2) >> 31);
        v41 = *(_DWORD *)this;
        if ((*((_DWORD *)this + 7) & 0x80000000) == 0)
        {
          v42 = (_DWORD)v40 == 12 ? v7 : 0;
          v43 = (_DWORD)v40 == 12 ? 0 : v8;
          if (v42 | v43)
            v40 += 12;
        }
        v44 = (const __CFString *)MEMORY[0x219A24388](a2);
        if (CFStringsAreEqual(v44, (const __CFString *)*MEMORY[0x24BDBD3C0])
          || CFStringsAreEqual(v44, (const __CFString *)*MEMORY[0x24BDBD278]))
        {
          v38 = v60;
        }
        CFCalendarComposeAbsoluteTime(a2, at, "dMy", v51, v37, v38);
        CFCalendarAddComponents(a2, at, 0, "Hms", v40, v39 & ~(v39 >> 31), v41 & ~(v41 >> 31));
        if ((*((_DWORD *)this + 2) & 0x80000000) == 0 && !v40 && v39 <= 0 && v41 <= 0)
          CFCalendarAddComponents(a2, at, 0, "d", 1, v47, v50);
      }
      else
      {
        v32 = *((_DWORD *)this + 2) & ~(*((int *)this + 2) >> 31);
        if ((*((_DWORD *)this + 7) & 0x80000000) == 0)
        {
          v33 = (_DWORD)v32 == 12 ? v7 : 0;
          v34 = (_DWORD)v32 == 12 ? 0 : v8;
          if (v33 | v34)
            v32 += 12;
        }
        CFCalendarComposeAbsoluteTime(a2, at, "EwYHms", v30, v58, v60, v32, *((_DWORD *)this + 1) & ~(*((int *)this + 1) >> 31), *(_DWORD *)this & ~(*(int *)this >> 31));
      }
      return at[0];
    }
    v12 = 0;
  }
  v14 = *((_DWORD *)this + 7);
  v13 = *((_DWORD *)this + 8);
  v15 = v13 & ~(v13 >> 31);
  v16 = *((_DWORD *)this + 9);
  v53 = v12;
  v17 = *((_DWORD *)this + 12);
  if (v17 < 0)
    v17 = v60;
  v18 = *((_DWORD *)this + 2) & ~(*((int *)this + 2) >> 31);
  v19 = *((_DWORD *)this + 1) & ~(*((int *)this + 1) >> 31);
  v20 = *(_DWORD *)this & ~(*(int *)this >> 31);
  if ((v14 & 0x80000000) == 0)
  {
    v21 = (_DWORD)v18 == 12 ? v7 : 0;
    v22 = (_DWORD)v18 == 12 ? 0 : v8;
    if (v21 | v22)
      v18 += 12;
  }
  v23 = v17;
  if (v12 || v16 < 1 || v13 < 1)
  {
    if (v13 < 1)
      CFCalendarComposeAbsoluteTime(a2, at, "wY", v12, v17, v48);
    else
      CFCalendarComposeAbsoluteTime(a2, at, "EwY", v13 & ~(v13 >> 31), v12, v17);
    CFCalendarAddComponents(a2, at, 0, "Hms", v18, v19, v20);
    CFCalendarDecomposeAbsoluteTime(a2, at[0], "H", &v52);
    if (v18)
      v26 = v18 == 24;
    else
      v26 = 1;
    v27 = v52;
    if (v26)
      v27 = v18;
    v52 = v27;
    if (v27 <= v18)
    {
      if (v27 >= v18)
        return at[0];
      v28 = 1;
    }
    else
    {
      v28 = 0xFFFFFFFFLL;
    }
    CFCalendarAddComponents(a2, at, 0, "H", v28, v46, v49);
    return at[0];
  }
  v24 = v16 & ~(v16 >> 31);
  if ((_DWORD)v24 == 0x7FFFFFFF)
  {
    CFCalendarComposeAbsoluteTime(a2, at, "My", v61 + 1, v17);
    CFCalendarDecomposeAbsoluteTime(a2, at[0], "E", &v52);
    v25 = v52;
    if (v52 < v15)
    {
      CFCalendarAddComponents(a2, at, 0, "w", 0xFFFFFFFFLL);
      v25 = v52;
    }
    CFCalendarAddComponents(a2, at, 0, "E", -v25);
    CFCalendarAddComponents(a2, at, 0, "E", v15, v45);
  }
  else
  {
    CFCalendarComposeAbsoluteTime(a2, at, "My", v61, v17);
    CFCalendarDecomposeAbsoluteTime(a2, at[0], "w", &v53);
    CFCalendarComposeAbsoluteTime(a2, at, "wY", v53, v23);
    CFCalendarAddComponents(a2, at, 0, "FE", v24, v15 - 1);
  }
  CFCalendarAddComponents(a2, at, 0, "Hms", v18, v19, v20);
  return at[0];
}

uint64_t QP::DateComponents::isConcrete(QP::DateComponents *this)
{
  if ((*((_DWORD *)this + 11) & 0x80000000) != 0)
  {
    if ((*((_DWORD *)this + 10) & 0x80000000) != 0
      && (*((_DWORD *)this + 9) & 0x80000000) != 0
      && (*((_DWORD *)this + 12) & 0x80000000) != 0
      && (*((_DWORD *)this + 3) & 0x80000000) == 0
      && (*((_DWORD *)this + 4) & 0x80000000) == 0
      && (*((_DWORD *)this + 5) & 0x80000000) == 0)
    {
      return 1;
    }
  }
  else if ((*((_DWORD *)this + 12) & 0x80000000) == 0)
  {
    return 1;
  }
  return 0;
}

void QP::Parser::retainCurrentString(const void **this)
{
  const void **v2;
  const void *v3;
  CFTypeRef v4;

  v2 = this + 11;
  nlp::CFScopedPtr<__CFString const*>::reset(this + 11, 0);
  v3 = (const void *)*((_QWORD *)this[4] + 55);
  if (v3)
  {
    v4 = CFRetain(v3);
    nlp::CFScopedPtr<__CFString const*>::reset(v2, v4);
  }
}

void QP::Parser::parseLexer(QP::Parser *this)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  const void **v6;
  char **v7;
  uint64_t v8;
  QP::Lexer *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 *v14;
  unint64_t v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  BOOL v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  int64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t (**v44)(uint64_t *, uint64_t *);
  void **v45;
  uint64_t v46;
  uint64_t (*v47[3])(uint64_t *, uint64_t *);
  _QWORD v48[7];
  void **v49[5];
  char **v50;
  char *v51[2];
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  __n128 (*v55)(_QWORD *, uint64_t);
  void (*v56)(uint64_t);
  _BYTE v57[24];
  _QWORD v58[7];
  _QWORD v59[4];
  _QWORD v60[4];

  v1 = *(_QWORD *)(*((_QWORD *)this + 4) + 560) - *(_QWORD *)(*((_QWORD *)this + 4) + 552);
  if (v1 >= 1)
  {
    v3 = 0;
    v4 = 0;
    v5 = v1 / 0x18uLL;
    v6 = (const void **)((char *)this + 88);
    v7 = (char **)((char *)this + 104);
    if (v5 <= 1)
      v5 = 1;
    v38 = v5;
    v8 = -1;
    while (1)
    {
      v60[0] = 0;
      v60[1] = v60;
      v60[2] = 0x2000000000;
      v60[3] = 0;
      v59[0] = 0;
      v59[1] = v59;
      v59[2] = 0x2000000000;
      v59[3] = -1;
      QP::GraphStructureStack::clear(*((QP::GraphStructureStack **)this + 10));
      v9 = (QP::Lexer *)*((_QWORD *)this + 4);
      v58[0] = MEMORY[0x24BDAC760];
      v58[1] = 0x40000000;
      v58[2] = ___ZN2QP6Parser10parseLexerEv_block_invoke;
      v58[3] = &unk_24DA24B88;
      v58[4] = v59;
      v58[5] = v60;
      v58[6] = this;
      QP::Lexer::enumerateLexemesAtParseIndex(v9, v4, (uint64_t)v58);
      QP::GraphStructureStack::close(*((QP::GraphStructureStack **)this + 10));
      v39 = v4;
      v10 = *(_QWORD *)(*((_QWORD *)this + 10) + 24) - *(_QWORD *)(*((_QWORD *)this + 10) + 16);
      if (v10 >= 1)
        break;
LABEL_48:
      _Block_object_dispose(v59, 8);
      _Block_object_dispose(v60, 8);
      v4 = v39 + 1;
      if (v39 + 1 == v38)
        return;
    }
    v11 = 0;
    v40 = v10 >> 4;
    while (1)
    {
      v52 = 0;
      v53 = &v52;
      v54 = 0x4002000000;
      v55 = __Block_byref_object_copy__2;
      v56 = __Block_byref_object_dispose__2;
      memset(v57, 0, sizeof(v57));
      v49[0] = 0;
      v49[1] = (void **)v49;
      v49[2] = (void **)0x4002000000;
      v49[3] = (void **)__Block_byref_object_copy__1;
      v49[4] = (void **)__Block_byref_object_dispose__2;
      v51[0] = 0;
      v51[1] = 0;
      v50 = v51;
      v12 = *((_QWORD *)this + 10);
      v48[0] = MEMORY[0x24BDAC760];
      v48[1] = 0x40000000;
      v48[2] = ___ZN2QP6Parser10parseLexerEv_block_invoke_3;
      v48[3] = &unk_24DA24BB0;
      v48[5] = &v52;
      v48[6] = this;
      v48[4] = v49;
      QP::GraphStructureStack::enumerateBranchesAtStateIndex(v12, v11, (uint64_t)v48);
      v13 = (uint64_t *)v53[5];
      v14 = (__int128 *)v53[6];
      v15 = 126 - 2 * __clz(((char *)v14 - (char *)v13) >> 4);
      v47[0] = (uint64_t (*)(uint64_t *, uint64_t *))QP::parse_attr_less_than_range;
      v16 = v14 == (__int128 *)v13 ? 0 : v15;
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*,false>(v13, v14, v47, v16, 1);
      memset(v47, 0, sizeof(v47));
      v44 = 0;
      v45 = 0;
      v46 = 0;
      v17 = (__int128 *)v53[5];
      v18 = (__int128 *)v53[6];
      if (v17 != v18)
        break;
LABEL_23:
      QP::updateParseAttributes((uint64_t *)&v44, (uint64_t *)v47);
      v24 = (void **)v44;
      v25 = v45;
      while (v24 != v25)
      {
        if (QP::Parser::validate((uint64_t)this, (uint64_t **)v24))
        {
          v26 = *(_QWORD *)(*((_QWORD *)this + 10) + 96);
          v27 = v26 >= 0 ? v26 + 1 : 0;
          v41 = 0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 4) + 464) - *(_QWORD *)(*((_QWORD *)this + 4) + 456)) >> 3);
          v42 = v27;
          std::allocate_shared[abi:ne180100]<QP::Parse,std::allocator<QP::Parse>,nlp::CFScopedPtr<__CFString const*> &,long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),void>(v6, &v42, (uint64_t *)&v41, (_QWORD **)v24, &v43);
          if (v8 == -1
            || ((v29 = *(_QWORD *)(v43 + 64), v28 = *(_QWORD *)(v43 + 72), v8 == v29) ? (v30 = v3 == v28) : (v30 = 0),
                (v31 = v28 + v29, !v30) ? (v32 = v8 + v3 <= v31) : (v32 = 1),
                v32))
          {
            std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100](v7, &v43);
            v8 = *(_QWORD *)(v43 + 64);
            v3 = *(_QWORD *)(v43 + 72);
            v36 = 1;
          }
          else
          {
            v36 = 0;
            v11 = v40;
          }
          v33 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
          if (*((_QWORD *)&v43 + 1))
          {
            v34 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          if ((v36 & 1) == 0)
            break;
        }
        v24 += 3;
      }
      v37 = *((_QWORD *)this + 14) - *((_QWORD *)this + 13);
      *(_QWORD *)&v43 = &v44;
      std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
      v44 = v47;
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
      _Block_object_dispose(v49, 8);
      std::__tree<std::string>::destroy((uint64_t)&v50, v51[0]);
      _Block_object_dispose(&v52, 8);
      v49[0] = (void **)v57;
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](v49);
      if (v37 <= 0x4F && (uint64_t)++v11 < v40)
        continue;
      goto LABEL_48;
    }
    v19 = 0;
    v20 = -1;
    while (1)
    {
      v21 = *(_QWORD *)(*(_QWORD *)v17 + 16);
      v22 = *(_QWORD *)(*(_QWORD *)v17 + 24);
      if (v21 == -1 || v20 != -1 && v22 + v21 <= v20 + v19)
      {
        if (v20 != v21 || v19 != v22)
          goto LABEL_22;
      }
      else
      {
        QP::updateParseAttributes((uint64_t *)&v44, (uint64_t *)v47);
      }
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)v47, v17);
      v20 = *(_QWORD *)(*(_QWORD *)v17 + 16);
      v19 = *(_QWORD *)(*(_QWORD *)v17 + 24);
LABEL_22:
      if (++v17 == v18)
        goto LABEL_23;
    }
  }
}

void sub_218E222B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void ___ZN2QP6Parser10parseLexerEv_block_invoke(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, CFIndex a5, CFIndex a6)
{
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  CFRange v14;

  v11 = a1[6];
  v12 = QP::ParserGrammar::symbolID(*(_QWORD *)(v11 + 16), *a2);
  v14.location = a5;
  v14.length = a6;
  QP::GraphStructureStack::add(*(QP::GraphStructureStack **)(v11 + 80), v12, a3, a4, v14);
  v13 = *(_QWORD *)(a1[4] + 8);
  if (*(_QWORD *)(v13 + 24) < a3)
  {
    ++*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
    v13 = *(_QWORD *)(a1[4] + 8);
  }
  *(_QWORD *)(v13 + 24) = a3;
}

__n128 __Block_byref_object_copy__2(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  std::__tree<std::string>::destroy(a1 + 40, *(char **)(a1 + 48));
}

_QWORD *__Block_byref_object_copy__1(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[5] = a2[5];
  v2 = a2 + 6;
  v3 = a2[6];
  result[6] = v3;
  v4 = result + 6;
  v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[5] = v2;
    *v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void ___ZN2QP6Parser10parseLexerEv_block_invoke_3(_QWORD *a1, _WORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::string *v18;
  uint64_t v19;
  __int16 v20;
  unsigned __int16 *v21;
  QP::ParseAttribute *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::string v29;
  std::string __str;
  __int128 v31;
  std::string __p;
  uint64_t v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  __int128 v36;

  v4 = a1[6];
  v5 = (uint64_t)*a2;
  v36 = *(_OWORD *)(*a2 + 12);
  v35 = *(_OWORD *)(v5 + 8);
  v6 = *(_QWORD **)(v4 + 32);
  memset(&__p, 0, sizeof(__p));
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(&__p, *(const void **)(v5 + 40), *(_QWORD *)(v5 + 48), (uint64_t)(*(_QWORD *)(v5 + 48) - *(_QWORD *)(v5 + 40)) >> 3);
  QP::Lexer::lexemeFromLocations(v6, (unint64_t **)&__p, (uint64_t)&v33);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v33)
  {
    v7 = (uint64_t)*a2;
    LOWORD(__p.__r_.__value_.__l.__data_) = **a2;
    LOWORD(v29.__r_.__value_.__l.__data_) = *(_WORD *)(v7 + 2);
    std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange &,unsigned short,unsigned short,void>(&v35, &v36, (__int16 *)&__p, (unsigned __int16 *)&v29, &v31);
    v8 = v31;
    v9 = v33;
    v10 = v34;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
    }
    v15 = *(std::__shared_weak_count **)(v8 + 112);
    *(_QWORD *)(v8 + 104) = v9;
    *(_QWORD *)(v8 + 112) = v10;
    if (v15)
      std::__shared_weak_count::__release_weak(v15);
    if (v10)
    {
      v16 = (unint64_t *)&v10->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    QP::ParserGrammar::attribute(*(QP::ParserGrammar **)(v4 + 16), *(unsigned __int16 *)(v31 + 32), *(unsigned __int16 *)(v31 + 34), &__p);
    v18 = (std::string *)v31;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      __str = __p;
    std::string::operator=(v18 + 2, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v19 = v31;
    v20 = QP::ParserGrammar::modifier(*(QP::ParserGrammar **)(v4 + 16), *(unsigned __int16 *)(v31 + 32));
    QP::ParseAttribute::setModifier(v19, v20);
    v21 = *a2;
    *(_QWORD *)(v31 + 40) += (uint64_t)*((float *)*a2 + 1);
    if (QP::ParserGrammar::isInferred(*(QP::ParserGrammar **)(v4 + 16), *v21)
      || QP::ParserGrammar::isInferred(*(QP::ParserGrammar **)(v4 + 16), (unsigned __int16)(*a2)[1]))
    {
      v22 = (QP::ParseAttribute *)v31;
      *(_BYTE *)(v31 + 72) = 1;
    }
    else
    {
      v22 = (QP::ParseAttribute *)v31;
    }
    QP::ParseAttribute::description(v22, &v29);
    if ((void **)(*(_QWORD *)(a1[4] + 8) + 48) == std::__tree<std::string>::find<std::string>(*(_QWORD *)(a1[4] + 8) + 40, (void **)&v29.__r_.__value_.__l.__data_))
    {
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)(*(_QWORD *)(a1[5] + 8) + 40), &v31);
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(*(_QWORD *)(a1[4] + 8) + 40), (void **)&v29.__r_.__value_.__l.__data_, (uint64_t)&v29);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    if (*((_QWORD *)&v31 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  v26 = v34;
  if (v34)
  {
    v27 = (unint64_t *)&v34->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_218E2277C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a15 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void QP::ParseAttribute::description(QP::ParseAttribute *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  std::__shared_weak_count *v6;
  QP::ParseAttribute *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::string *v10;
  std::string::size_type size;
  unint64_t *v12;
  unint64_t v13;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  uint64_t v31;
  const std::string::value_type *v32;
  const std::string::value_type *v33;
  int v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;

  v4 = *((_QWORD *)this + 15);
  v3 = *((_QWORD *)this + 16);
  if (v3 != v4)
  {
    v5 = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    while (1)
    {
      v7 = *(QP::ParseAttribute **)v4;
      v6 = *(std::__shared_weak_count **)(v4 + 8);
      v48.__r_.__value_.__r.__words[0] = *(_QWORD *)v4;
      v48.__r_.__value_.__l.__size_ = (std::string::size_type)v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      if ((v5 & 1) != 0)
        std::string::append(a2, "|", 1uLL);
      QP::ParseAttribute::description((uint64_t *)&v49, v7);
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v49;
      else
        v10 = (std::string *)v49.__r_.__value_.__r.__words[0];
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
      else
        size = v49.__r_.__value_.__l.__size_;
      std::string::append(a2, (const std::string::value_type *)v10, size);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v49.__r_.__value_.__l.__data_);
        if (v6)
        {
LABEL_18:
          v12 = (unint64_t *)&v6->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
      }
      else if (v6)
      {
        goto LABEL_18;
      }
      v4 += 16;
      v5 = 1;
      if (v4 == v3)
        return;
    }
  }
  std::to_string(&v45, *((unsigned __int16 *)this + 16));
  std::to_string(&v44, *((unsigned __int16 *)this + 17));
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v44;
  else
    v15 = (std::string *)v44.__r_.__value_.__r.__words[0];
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  else
    v16 = v44.__r_.__value_.__l.__size_;
  v17 = std::string::append(&v45, (const std::string::value_type *)v15, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v43, *((_QWORD *)this + 2));
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &v43;
  else
    v19 = (std::string *)v43.__r_.__value_.__r.__words[0];
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
  else
    v20 = v43.__r_.__value_.__l.__size_;
  v21 = std::string::append(&v46, (const std::string::value_type *)v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v42, *((_QWORD *)this + 3));
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = &v42;
  else
    v23 = (std::string *)v42.__r_.__value_.__r.__words[0];
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
  else
    v24 = v42.__r_.__value_.__l.__size_;
  v25 = std::string::append(&v47, (const std::string::value_type *)v23, v24);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v48, "_", 1uLL);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  v41 = 0;
  v29 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v29 && (v41 = std::__shared_weak_count::lock(v29)) != 0)
    v30 = *((_QWORD *)this + 13);
  else
    v30 = 0;
  v33 = *(const std::string::value_type **)(v30 + 48);
  v31 = v30 + 48;
  v32 = v33;
  v34 = *(char *)(v31 + 23);
  if (v34 >= 0)
    v35 = (const std::string::value_type *)v31;
  else
    v35 = v32;
  if (v34 >= 0)
    v36 = *(unsigned __int8 *)(v31 + 23);
  else
    v36 = *(_QWORD *)(v31 + 8);
  v37 = std::string::append(&v49, v35, v36);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (v41)
  {
    v39 = (unint64_t *)&v41->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
}

void sub_218E22B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (*(char *)(v47 - 73) < 0)
    operator delete(*(void **)(v47 - 96));
  if (*(char *)(v47 - 105) < 0)
    operator delete(*(void **)(v47 - 128));
  if (a16 < 0)
    operator delete(__p);
  if (a47 < 0)
    operator delete(a42);
  if (a22 < 0)
    operator delete(a17);
  if (a40 < 0)
    operator delete(a35);
  if (a28 < 0)
    operator delete(a23);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(a1);
}

void QP::updateParseAttributes(uint64_t *a1, uint64_t *a2)
{
  QP::ParseAttribute **v2;
  QP::ParseAttribute **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string **v8;
  std::string **v9;
  uint64_t v10;
  std::string *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  std::string::size_type size;
  unint64_t *v16;
  unint64_t v17;
  char v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::string *v22;
  std::string *v23;
  uint64_t v24;
  std::string *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  QP::ParseAttribute *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  char v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::string *v41;
  std::string *v42;
  uint64_t v43;
  QP::ParseAttribute *v44;
  _QWORD **v45;
  _QWORD **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  QP::ParseAttribute *v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  unint64_t *p_shared_weak_owners;
  unint64_t v57;
  char v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  std::string *v62;
  std::string *v63;
  uint64_t v64;
  QP::ParseAttribute *v65;
  _QWORD **v66;
  _QWORD **v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::string v73;
  std::string __str;
  std::string v75;
  __int128 v76;
  std::string __p;
  char **v78;
  char *v79[2];
  uint64_t **v80;
  _QWORD **v81;
  unint64_t v82;
  std::string *p_p;

  v3 = (QP::ParseAttribute **)*a2;
  v2 = (QP::ParseAttribute **)a2[1];
  if (v2 != (QP::ParseAttribute **)*a2)
  {
    v80 = 0;
    v81 = 0;
    v82 = 0;
    v79[0] = 0;
    v79[1] = 0;
    v78 = v79;
LABEL_3:
    QP::ParseAttribute::description(*v3, &__p);
    v4 = std::__tree<std::string>::__count_unique<std::string>((uint64_t)&v78, (void **)&__p.__r_.__value_.__l.__data_);
    v5 = v4;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v5)
        goto LABEL_67;
    }
    else if (v4)
    {
      goto LABEL_67;
    }
    QP::ParseAttribute::description(*v3, &__p);
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v78, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v7 = *a1;
    v6 = a1[1];
    if (v6 == *a1)
    {
      std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange &,unsigned short &,unsigned short &,void>(*v3, (__int128 *)*v3 + 1, (__int16 *)*v3 + 16, (unsigned __int16 *)*v3 + 17, &v76);
      v50 = v76;
      v51 = *v3;
      v52 = (std::__shared_weak_count *)*((_QWORD *)*v3 + 14);
      if (v52)
      {
        v53 = std::__shared_weak_count::lock(v52);
        v54 = v53;
        if (v53)
        {
          v55 = *((_QWORD *)v51 + 13);
          p_shared_weak_owners = (unint64_t *)&v53->__shared_weak_owners_;
          do
            v57 = __ldxr(p_shared_weak_owners);
          while (__stxr(v57 + 1, p_shared_weak_owners));
          v58 = 0;
          goto LABEL_77;
        }
        v55 = 0;
      }
      else
      {
        v55 = 0;
        v54 = 0;
      }
      v58 = 1;
LABEL_77:
      v59 = *(std::__shared_weak_count **)(v50 + 112);
      *(_QWORD *)(v50 + 104) = v55;
      *(_QWORD *)(v50 + 112) = v54;
      if (v59)
        std::__shared_weak_count::__release_weak(v59);
      if ((v58 & 1) == 0)
      {
        p_shared_owners = (unint64_t *)&v54->__shared_owners_;
        do
          v61 = __ldaxr(p_shared_owners);
        while (__stlxr(v61 - 1, p_shared_owners));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      QP::ParseAttribute::setModifier(v76, *((_WORD *)*v3 + 18));
      v62 = (std::string *)v76;
      v63 = (std::string *)*v3;
      if (*((char *)*v3 + 71) < 0)
        std::string::__init_copy_ctor_external(&v75, v63[2].__r_.__value_.__l.__data_, v63[2].__r_.__value_.__l.__size_);
      else
        v75 = v63[2];
      std::string::operator=(v62 + 2, &v75);
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v75.__r_.__value_.__l.__data_);
      v64 = v76;
      v65 = *v3;
      *(_BYTE *)(v76 + 72) = *((_BYTE *)*v3 + 72);
      *(_QWORD *)(v64 + 40) += *((_QWORD *)v65 + 5);
      memset(&__p, 0, sizeof(__p));
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100](&__p.__r_.__value_.__l.__data_, &v76);
      v66 = v81;
      if ((unint64_t)v81 >= v82)
      {
        v67 = (_QWORD **)std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__push_back_slow_path<std::vector<std::shared_ptr<QP::ParseAttribute>> const&>((uint64_t *)&v80, &__p);
      }
      else
      {
        *v81 = 0;
        v66[1] = 0;
        v66[2] = 0;
        std::vector<std::shared_ptr<QP::ParseAttribute>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>((char *)v66, __p.__r_.__value_.__l.__data_, (_QWORD *)__p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4);
        v67 = v66 + 3;
      }
      v81 = v67;
      p_p = &__p;
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
      v68 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
      if (*((_QWORD *)&v76 + 1))
      {
        v69 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      goto LABEL_67;
    }
LABEL_10:
    memset(&__p, 0, sizeof(__p));
    v8 = *(std::string ***)v7;
    v9 = *(std::string ***)(v7 + 8);
    while (1)
    {
      if (v8 == v9)
      {
        std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange &,unsigned short &,unsigned short &,void>(*v3, (__int128 *)*v3 + 1, (__int16 *)*v3 + 16, (unsigned __int16 *)*v3 + 17, &v76);
        v29 = v76;
        v30 = *v3;
        v31 = (std::__shared_weak_count *)*((_QWORD *)*v3 + 14);
        if (!v31)
        {
          v34 = 0;
          v33 = 0;
LABEL_45:
          v37 = 1;
          goto LABEL_46;
        }
        v32 = std::__shared_weak_count::lock(v31);
        v33 = v32;
        if (!v32)
        {
          v34 = 0;
          goto LABEL_45;
        }
        v34 = *((_QWORD *)v30 + 13);
        v35 = (unint64_t *)&v32->__shared_weak_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
        v37 = 0;
LABEL_46:
        v38 = *(std::__shared_weak_count **)(v29 + 112);
        *(_QWORD *)(v29 + 104) = v34;
        *(_QWORD *)(v29 + 112) = v33;
        if (v38)
          std::__shared_weak_count::__release_weak(v38);
        if ((v37 & 1) == 0)
        {
          v39 = (unint64_t *)&v33->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        QP::ParseAttribute::setModifier(v76, *((_WORD *)*v3 + 18));
        v41 = (std::string *)v76;
        v42 = (std::string *)*v3;
        if (*((char *)*v3 + 71) < 0)
          std::string::__init_copy_ctor_external(&v73, v42[2].__r_.__value_.__l.__data_, v42[2].__r_.__value_.__l.__size_);
        else
          v73 = v42[2];
        std::string::operator=(v41 + 2, &v73);
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v73.__r_.__value_.__l.__data_);
        v43 = v76;
        v44 = *v3;
        *(_BYTE *)(v76 + 72) = *((_BYTE *)*v3 + 72);
        *(_QWORD *)(v43 + 40) += *((_QWORD *)v44 + 5);
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100](&__p.__r_.__value_.__l.__data_, &v76);
        v45 = v81;
        if ((unint64_t)v81 >= v82)
        {
          v46 = (_QWORD **)std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__push_back_slow_path<std::vector<std::shared_ptr<QP::ParseAttribute>> const&>((uint64_t *)&v80, &__p);
        }
        else
        {
          *v81 = 0;
          v45[1] = 0;
          v45[2] = 0;
          std::vector<std::shared_ptr<QP::ParseAttribute>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>((char *)v45, __p.__r_.__value_.__l.__data_, (_QWORD *)__p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4);
          v46 = v45 + 3;
        }
        v81 = v46;
        v47 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
        if (*((_QWORD *)&v76 + 1))
        {
          v48 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        *(_QWORD *)&v76 = &__p;
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
        v7 += 24;
        if (v7 == v6)
        {
LABEL_67:
          v3 += 2;
          if (v3 == v2)
          {
            std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::erase((uint64_t)a1, *a1, a1[1]);
            std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<std::shared_ptr<QP::ParseAttribute>>*>,std::__wrap_iter<std::vector<std::shared_ptr<QP::ParseAttribute>>*>>(a1, (_QWORD *)a1[1], v80, v81, 0xAAAAAAAAAAAAAAABLL * (v81 - v80));
            std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::erase((uint64_t)a2, *a2, a2[1]);
            std::__tree<std::string>::destroy((uint64_t)&v78, v79[0]);
            v78 = (char **)&v80;
            std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
            return;
          }
          goto LABEL_3;
        }
        goto LABEL_10;
      }
      std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange &,unsigned short &,unsigned short &,void>(*v8, (__int128 *)&(*v8)->__r_.__value_.__r.__words[2], (__int16 *)&(*v8)[1].__r_.__value_.__r.__words[1], (unsigned __int16 *)&(*v8)[1].__r_.__value_.__r.__words[1] + 1, &v76);
      v10 = v76;
      v11 = *v8;
      v12 = (std::__shared_weak_count *)(*v8)[4].__r_.__value_.__r.__words[2];
      if (!v12)
        break;
      v13 = std::__shared_weak_count::lock(v12);
      v14 = v13;
      if (!v13)
      {
        size = 0;
        goto LABEL_19;
      }
      size = v11[4].__r_.__value_.__l.__size_;
      v16 = (unint64_t *)&v13->__shared_weak_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      v18 = 0;
LABEL_20:
      v19 = *(std::__shared_weak_count **)(v10 + 112);
      *(_QWORD *)(v10 + 104) = size;
      *(_QWORD *)(v10 + 112) = v14;
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      if ((v18 & 1) == 0)
      {
        v20 = (unint64_t *)&v14->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      QP::ParseAttribute::setModifier(v76, WORD2((*v8)[1].__r_.__value_.__r.__words[1]));
      v22 = (std::string *)v76;
      v23 = *v8;
      if (SHIBYTE((*v8)[2].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__str, v23[2].__r_.__value_.__l.__data_, v23[2].__r_.__value_.__l.__size_);
      else
        __str = v23[2];
      std::string::operator=(v22 + 2, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v24 = v76;
      v25 = *v8;
      *(_BYTE *)(v76 + 72) = (*v8)[3].__r_.__value_.__s.__data_[0];
      *(_QWORD *)(v24 + 40) += *((_QWORD *)&v25[1].__r_.__value_.__l + 2);
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100](&__p.__r_.__value_.__l.__data_, &v76);
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
      if (*((_QWORD *)&v76 + 1))
      {
        v27 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v8 += 2;
    }
    size = 0;
    v14 = 0;
LABEL_19:
    v18 = 1;
    goto LABEL_20;
  }
}

void sub_218E232C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char *a40)
{
  uint64_t v40;

  std::__tree<std::string>::destroy((uint64_t)&a39, a40);
  a39 = v40 - 120;
  std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  _Unwind_Resume(a1);
}

void QP::Parser::addAndSortParse(QP::Parser *this)
{
  uint64_t *v2;
  uint64_t *v3;
  char **v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 *v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  __int128 v16;
  void **v17[3];
  char *v18;
  char *v19;
  uint64_t v20;

  v18 = 0;
  v19 = 0;
  v20 = 0;
  v2 = (uint64_t *)*((_QWORD *)this + 13);
  v3 = (uint64_t *)*((_QWORD *)this + 14);
  v4 = (char **)((char *)this + 104);
  if (v3 == v2)
  {
    memset(v17, 0, sizeof(v17));
    v15 = 0;
    v14 = 0xAAAAAAAAAAAAAAABLL
        * ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 4) + 464) - *(_QWORD *)(*((_QWORD *)this + 4) + 456)) >> 3);
    std::allocate_shared[abi:ne180100]<QP::Parse,std::allocator<QP::Parse>,nlp::CFScopedPtr<__CFString const*> &,int,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),void>((const void **)this + 11, &v15, (uint64_t *)&v14, v17, &v16);
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100](&v18, &v16);
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    *(_QWORD *)&v16 = v17;
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  }
  else
  {
    std::vector<std::shared_ptr<QP::Parse>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::Parse>*>,std::__wrap_iter<std::shared_ptr<QP::Parse>*>>((uint64_t *)&v18, 0, v2, v3, ((char *)v3 - (char *)v2) >> 4);
  }
  v8 = 126 - 2 * __clz((v19 - v18) >> 4);
  *(_QWORD *)&v16 = QP::best_parse;
  if (v19 == v18)
    v9 = 0;
  else
    v9 = v8;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*,false>((uint64_t *)v18, (__int128 *)v19, (uint64_t (**)(uint64_t *, uint64_t *))&v16, v9, 1);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::erase((uint64_t)v4, *((_QWORD *)this + 13), *((_QWORD *)this + 14));
  v10 = (__int128 *)v18;
  v11 = v19;
  if (v18 != v19)
  {
    v12 = 0;
    do
    {
      if (v12 && !*(_BYTE *)(*(_QWORD *)v10 + 82))
        break;
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100](v4, v10);
      v13 = *(_QWORD *)v10++;
      v12 = *(_BYTE *)(v13 + 82) != 0;
    }
    while (v10 != (__int128 *)v11);
  }
  v17[0] = (void **)&v18;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](v17);
}

void sub_218E2355C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void ***a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, char a17)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  a12 = &a14;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  a14 = (void **)&a17;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void ___ZN2QP6Parser14addCompletionsEv_block_invoke(uint64_t a1, const void *a2)
{
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(a1 + 32) + 96), a2);
}

void QP::Parser::addU2Parse(QP::Parser *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  _QWORD v13[5];
  uint64_t v14;
  std::__shared_weak_count *v15;

  v2 = *((_QWORD *)this + 6);
  v4 = (uint64_t *)*((_QWORD *)this + 13);
  v3 = (uint64_t *)*((_QWORD *)this + 14);
  if (v3 == v4)
  {
    v14 = 0;
    v15 = 0;
  }
  else
  {
    v5 = (std::__shared_weak_count *)v4[1];
    v14 = *v4;
    v15 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
  }
  QP::U2Parser::parse(v2, (uint64_t)&v14);
  v8 = v15;
  if (v3 == v4)
  {
    if (!v15)
      goto LABEL_17;
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v11);
    while (__stlxr(v10 - 1, v11));
  }
  else
  {
    if (!v15)
      goto LABEL_17;
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
  }
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_17:
  v12 = *((_QWORD *)this + 6);
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 0x40000000;
  v13[2] = ___ZN2QP6Parser10addU2ParseEv_block_invoke;
  v13[3] = &__block_descriptor_tmp_9;
  v13[4] = this;
  QP::U2Parser::enumerateParses(v12, v13);
}

void sub_218E236BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2QP6Parser10addU2ParseEv_block_invoke(uint64_t a1, __int128 *a2)
{
  return std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)(*(_QWORD *)(a1 + 32) + 104), a2);
}

void QP::Parser::addLLMParse(QP::Parser *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  _QWORD v13[5];
  uint64_t v14;
  std::__shared_weak_count *v15;

  v2 = *((_QWORD *)this + 8);
  v4 = (uint64_t *)*((_QWORD *)this + 13);
  v3 = (uint64_t *)*((_QWORD *)this + 14);
  if (v3 == v4)
  {
    v14 = 0;
    v15 = 0;
  }
  else
  {
    v5 = (std::__shared_weak_count *)v4[1];
    v14 = *v4;
    v15 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
  }
  QP::LLMParser::parse(v2, (uint64_t)&v14);
  v8 = v15;
  if (v3 == v4)
  {
    if (!v15)
      goto LABEL_17;
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v11);
    while (__stlxr(v10 - 1, v11));
  }
  else
  {
    if (!v15)
      goto LABEL_17;
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
  }
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_17:
  v12 = *((_QWORD *)this + 8);
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 0x40000000;
  v13[2] = ___ZN2QP6Parser11addLLMParseEv_block_invoke;
  v13[3] = &__block_descriptor_tmp_10;
  v13[4] = this;
  QP::LLMParser::enumerateParses(v12, v13);
}

void sub_218E237E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2QP6Parser11addLLMParseEv_block_invoke(uint64_t a1, __int128 *a2)
{
  return std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)(*(_QWORD *)(a1 + 32) + 104), a2);
}

void QP::Parser::addEntitiyParse(QP::Parser *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[5];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  __n128 (*v16)(_QWORD *, uint64_t);
  void (*v17)(uint64_t);
  _QWORD v18[3];

  v13 = 0;
  v14 = &v13;
  v15 = 0x4002000000;
  v16 = __Block_byref_object_copy__2;
  v17 = __Block_byref_object_dispose__2;
  memset(v18, 0, sizeof(v18));
  v2 = *((_QWORD *)this + 4);
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 0x40000000;
  v12[2] = ___ZN2QP6Parser15addEntitiyParseEv_block_invoke;
  v12[3] = &unk_24DA24C38;
  v12[4] = &v13;
  QP::Lexer::enumerateEntityLexemes(v2, (uint64_t)v12);
  if (v14[6] != v14[5])
  {
    if (QP::Parser::validate((uint64_t)this, (uint64_t **)v14 + 5))
    {
      v3 = (v14[6] - v14[5]) >> 4;
      v9 = 0xAAAAAAAAAAAAAAABLL
         * ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 4) + 464) - *(_QWORD *)(*((_QWORD *)this + 4) + 456)) >> 3);
      v10 = v3;
      v8 = 0;
      v7 = 1;
      std::allocate_shared[abi:ne180100]<QP::Parse,std::allocator<QP::Parse>,nlp::CFScopedPtr<__CFString const*> &,unsigned long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),BOOL,void>((const void **)this + 11, &v10, (uint64_t *)&v9, (_QWORD **)v14 + 5, (uint64_t)&v8, &v7, &v11);
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)this + 13, &v11);
      v4 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
      if (*((_QWORD *)&v11 + 1))
      {
        v5 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
  _Block_object_dispose(&v13, 8);
  *(_QWORD *)&v11 = v18;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
}

void sub_218E23968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void **v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, void **);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Block_object_dispose(va1, 8);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void ___ZN2QP6Parser15addEntitiyParseEv_block_invoke(uint64_t a1, _QWORD *a2)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::string *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::string __str;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  v4 = (__int128 *)(*a2 + 72);
  v21 = *(unint64_t *)v4;
  v20 = 0;
  std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange,CFRange&,int,int,void>(&v21, v4, (int *)&v20 + 1, (int *)&v20, &v22);
  v5 = v22;
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }
  v12 = *(std::__shared_weak_count **)(v5 + 112);
  *(_QWORD *)(v5 + 104) = v6;
  *(_QWORD *)(v5 + 112) = v7;
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  if (v7)
  {
    v13 = (unint64_t *)&v7->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (*(unsigned __int16 *)(*a2 + 88) - 1 <= 3)
  {
    v15 = (std::string *)v22;
    std::string::basic_string[abi:ne180100]<0>(&__str, "kQPDate");
    std::string::operator=(v15 + 2, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), &v22);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_218E23B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void QP::Parser::addEmptyParse(QP::Parser *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  void **v9;

  v6 = 0;
  v7 = 0;
  v5 = 0uLL;
  v9 = 0;
  std::allocate_shared[abi:ne180100]<QP::Parse,std::allocator<QP::Parse>,nlp::CFScopedPtr<__CFString const*> &,int,int,std::vector<std::shared_ptr<QP::ParseAttribute>>,decltype(nullptr),void>((const void **)this + 11, (int *)&v7 + 1, (int *)&v7, &v5, &v8);
  v9 = (void **)&v5;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v9);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)this + 13, &v8);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_218E23BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void QP::Parser::addTokenCompletions(QP::Parser *this)
{
  const __CFString *v2;
  const __CFString *MutableCopy;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD v7[5];
  _QWORD v8[6];

  v2 = (const __CFString *)*((_QWORD *)this + 11);
  if (v2 && CFStringGetLength(v2))
  {
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, *((CFStringRef *)this + 11));
    v8[5] = MutableCopy;
    v4 = MEMORY[0x24BDAC760];
    v5 = *((_QWORD *)this + 2);
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 0x40000000;
    v8[2] = ___ZN2QP6Parser19addTokenCompletionsEv_block_invoke;
    v8[3] = &__block_descriptor_tmp_15;
    v8[4] = this;
    QP::ParserGrammar::tokenCompletions(v5, MutableCopy, (uint64_t)v8);
    v6 = (uint64_t *)*((_QWORD *)this + 2);
    v7[0] = v4;
    v7[1] = 0x40000000;
    v7[2] = ___ZN2QP6Parser19addTokenCompletionsEv_block_invoke_2;
    v7[3] = &__block_descriptor_tmp_17;
    v7[4] = this;
    QP::ParserGrammar::fallbackDateCompletions(v6, MutableCopy, (uint64_t)v7);
    if (MutableCopy)
      CFRelease(MutableCopy);
  }
}

void sub_218E23CDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  nlp::CFScopedPtr<__CFString *>::reset((const void **)(v1 - 56), 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP6Parser19addTokenCompletionsEv_block_invoke(uint64_t a1, const void *a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, const void *a8, CFTypeRef a9, __int16 a10)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  CFTypeRef v15;
  CFTypeRef v16;
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef v21;

  v20 = a3;
  v21 = a2;
  v19 = a4;
  v17 = a6;
  v18 = a5;
  v15 = a8;
  v16 = a7;
  v10 = *(_QWORD *)(a1 + 32);
  std::allocate_shared[abi:ne180100]<QP::Completion,std::allocator<QP::Completion>,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,QPSymbolFlag &,void>(&v21, &v20, &v19, &v18, &v17, &v16, &v15, &v14, &a9, &a10);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)(v10 + 128), &v14);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_218E23DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN2QP6Parser19addTokenCompletionsEv_block_invoke_2(uint64_t a1, const void *a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, const void *a8, CFTypeRef a9, const void *a10, __int16 a11)
{
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;

  v11 = a10;
  v24 = a3;
  v25 = a2;
  v22 = a5;
  v23 = a4;
  v20 = a7;
  v21 = a6;
  v19 = a8;
  v12 = *(_QWORD *)(a1 + 32);
  std::allocate_shared[abi:ne180100]<QP::Completion,std::allocator<QP::Completion>,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,QPSymbolFlag &,void>(&v25, &v24, &v23, &v22, &v21, &v20, &v19, &v18, &a9, &a11);
  v13 = v18;
  if (v11)
    v14 = CFRetain(v11);
  else
    v14 = 0;
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)(v13 + 64), v14);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)(v12 + 128), &v18);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_218E23E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void QP::Parser::parse(QP::Parser *this, int a2, int a3, int a4, int a5)
{
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  const __CFString *v13;
  _QWORD v14[6];

  QP::Parser::clear(this);
  QP::Parser::retainCurrentString((const void **)this);
  if (*(_BYTE *)(*(_QWORD *)this + 48))
  {
    QP::Parser::parseLexer(this);
    if (a2)
    {
      if (qpparserLogger(void)::token != -1)
        dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
      v10 = qpparserLogger(void)::log;
      if (os_log_type_enabled((os_log_t)qpparserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v14[0]) = 0;
        _os_log_impl(&dword_218E10000, v10, OS_LOG_TYPE_DEFAULT, "[QPNLU] using u2parser", (uint8_t *)v14, 2u);
      }
      QP::Parser::addU2Parse(this);
    }
    if (a3)
    {
      if (qpparserLogger(void)::token != -1)
        dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
      v11 = qpparserLogger(void)::log;
      if (os_log_type_enabled((os_log_t)qpparserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v14[0]) = 0;
        _os_log_impl(&dword_218E10000, v11, OS_LOG_TYPE_DEFAULT, "[QPNLU] using llmParser", (uint8_t *)v14, 2u);
      }
      QP::Parser::addLLMParse(this);
    }
    QP::Parser::addAndSortParse(this);
    if (a5)
    {
      v12 = *((_QWORD *)this + 2);
      v13 = (const __CFString *)*((_QWORD *)this + 11);
      v14[0] = MEMORY[0x24BDAC760];
      v14[1] = 0x40000000;
      v14[2] = ___ZN2QP6Parser14addCompletionsEv_block_invoke;
      v14[3] = &__block_descriptor_tmp_7;
      v14[4] = this;
      QP::ParserGrammar::completions(v12, v13, (uint64_t)v14);
    }
    if (a4)
      QP::Parser::addEntitiyParse(this);
  }
  else
  {
    QP::Parser::addEmptyParse(this);
    if (a5)
      QP::Parser::addTokenCompletions(this);
  }
}

uint64_t QP::Parser::clear(QP::Parser *this)
{
  CFMutableArrayRef Mutable;
  uint64_t i;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  QP::GraphStructureStack::clear(*((QP::GraphStructureStack **)this + 10));
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)this + 11, 0);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)this + 12, Mutable);
  v4 = *((_QWORD *)this + 13);
  for (i = *((_QWORD *)this + 14); i != v4; i = std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](i - 16))
    ;
  *((_QWORD *)this + 14) = v4;
  v6 = *((_QWORD *)this + 16);
  for (result = *((_QWORD *)this + 17);
        result != v6;
  *((_QWORD *)this + 17) = v6;
  return result;
}

void QP::Parser::enumerateParses(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  char v14;

  v14 = 0;
  v2 = *(uint64_t **)(a1 + 104);
  v3 = *(uint64_t **)(a1 + 112);
  if (v2 != v3)
  {
    do
    {
      v5 = (std::__shared_weak_count *)v2[1];
      v12 = *v2;
      v13 = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t, uint64_t *, char *))(a2 + 16))(a2, &v12, &v14);
      v8 = v13;
      if (v13)
      {
        v9 = (unint64_t *)&v13->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v2 += 2;
      if (v14)
        v11 = 1;
      else
        v11 = v2 == v3;
    }
    while (!v11);
  }
}

void sub_218E241C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

CFIndex QP::Parser::enumerateCompletions(uint64_t a1, uint64_t a2)
{
  CFIndex result;
  CFIndex v5;
  CFIndex v6;
  const void *ValueAtIndex;
  BOOL v8;
  char v9;

  v9 = 0;
  result = CFArrayGetCount(*(CFArrayRef *)(a1 + 96));
  v5 = result - 1;
  if (result >= 1)
  {
    v6 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), v6);
      result = (*(uint64_t (**)(uint64_t, const void *, char *))(a2 + 16))(a2, ValueAtIndex, &v9);
      if (v9)
        v8 = 1;
      else
        v8 = v5 == v6;
      ++v6;
    }
    while (!v8);
  }
  return result;
}

void QP::Parser::enumerateTokenCompletions(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  char v14;

  v14 = 0;
  v2 = *(uint64_t **)(a1 + 128);
  v3 = *(uint64_t **)(a1 + 136);
  if (v2 != v3)
  {
    do
    {
      v5 = (std::__shared_weak_count *)v2[1];
      v12 = *v2;
      v13 = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t, uint64_t *, char *))(a2 + 16))(a2, &v12, &v14);
      v8 = v13;
      if (v13)
      {
        v9 = (unint64_t *)&v13->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v2 += 2;
      if (v14)
        v11 = 1;
      else
        v11 = v2 == v3;
    }
    while (!v11);
  }
}

void sub_218E24314(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void nlp::CFScopedPtr<__CFArray *>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void QP::Parser::cooldown(QP::Parser *this)
{
  uint64_t v2;
  QP::U2Parser *v3;
  QP::LLMParser *v4;

  v2 = *(_QWORD *)this;
  if (*(_BYTE *)(*(_QWORD *)this + 53))
  {
    v3 = (QP::U2Parser *)*((_QWORD *)this + 6);
    if (v3)
    {
      QP::U2Parser::cooldown(v3);
      v2 = *(_QWORD *)this;
    }
  }
  if (*(_BYTE *)(v2 + 54))
  {
    v4 = (QP::LLMParser *)*((_QWORD *)this + 8);
    if (v4)
      QP::LLMParser::preheat(v4);
  }
}

void QP::Parser::embeddingString(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  NSObject *v9;
  __CFAttributedString *v10;
  os_signpost_id_t v11;
  NSObject *v12;
  __CFAttributedString *v13;
  __CFAttributedString *Mutable;
  QP::U2Parser *v15;
  uint64_t v16;
  NSObject *v17;
  __CFAttributedString *v18;
  os_signpost_id_t v19;
  NSObject *v20;
  __CFAttributedString *v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v27;
  const __CFString *String;
  CFMutableStringRef MutableCopy;
  NSObject *v30;
  const void *v31;
  _QWORD v32[7];
  _QWORD v33[5];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint8_t buf[4];
  __CFAttributedString *v39;
  uint64_t v40;
  CFRange v41;

  v40 = *MEMORY[0x24BDAC8D0];
  v4 = __ROR8__(*(_QWORD *)(*a1 + 8), 1);
  v5 = *(_QWORD *)(*a1 + 8) == 9 || v4 > 6;
  v6 = (1 << v4) & 0x71;
  v7 = v5 || v6 == 0;
  if (v7)
  {
    v8 = a1[4];
    if (v8)
    {
      v34 = 0;
      v35 = &v34;
      v36 = 0x2000000000;
      LOBYTE(v37) = 0;
      v33[0] = MEMORY[0x24BDAC760];
      v33[1] = 0x40000000;
      v33[2] = ___ZN2QP6Parser15embeddingStringEU13block_pointerFvPK20__CFAttributedStringE_block_invoke;
      v33[3] = &unk_24DA24CA0;
      v33[4] = &v34;
      QP::Lexer::enumerateAnnotations(v8, (uint64_t)v33);
      if (*((_BYTE *)v35 + 24))
      {
        if (qpparserLogger(void)::token != -1)
          dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
        v9 = qpparserLogger(void)::log;
        if (os_log_type_enabled((os_log_t)qpparserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
        {
          v10 = *(__CFAttributedString **)(*a1 + 8);
          *(_DWORD *)buf = 134217984;
          v39 = v10;
          _os_log_impl(&dword_218E10000, v9, OS_LOG_TYPE_DEFAULT, "[QPParser] sensitive query token for context '%lu', avoid embedding search", buf, 0xCu);
          if (qpparserLogger(void)::token != -1)
            dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
        }
        v11 = os_signpost_id_generate((os_log_t)qpparserLogger(void)::log);
        if (qpparserLogger(void)::token != -1)
          dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
        if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v12 = qpparserLogger(void)::log;
          if (os_signpost_enabled((os_log_t)qpparserLogger(void)::log))
          {
            v13 = *(__CFAttributedString **)(*a1 + 8);
            *(_DWORD *)buf = 134217984;
            v39 = v13;
            _os_signpost_emit_with_name_impl(&dword_218E10000, v12, OS_SIGNPOST_EVENT, v11, "QPParserSensitiveQuery", "[QPParser] sensitive query token for context '%lu', avoid embedding search", buf, 0xCu);
          }
        }
        (*(void (**)(uint64_t, _QWORD))(a2 + 16))(a2, 0);
        goto LABEL_59;
      }
      _Block_object_dispose(&v34, 8);
    }
  }
  Mutable = CFAttributedStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  v34 = 0;
  v35 = &v34;
  v36 = 0x2000000000;
  v37 = 0;
  v41.location = 0;
  v41.length = 0;
  CFAttributedStringReplaceString(Mutable, v41, (CFStringRef)a1[11]);
  v15 = (QP::U2Parser *)a1[6];
  if (v15)
  {
    v16 = *a1;
    if (*(_BYTE *)(*a1 + 52))
    {
      if (QP::U2Parser::isIntentUnsafe(v15))
      {
        if (qpparserLogger(void)::token != -1)
          dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
        v17 = qpparserLogger(void)::log;
        if (os_log_type_enabled((os_log_t)qpparserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
        {
          v18 = *(__CFAttributedString **)(*a1 + 8);
          *(_DWORD *)buf = 134217984;
          v39 = v18;
          _os_log_impl(&dword_218E10000, v17, OS_LOG_TYPE_DEFAULT, "[QPParser] unsafe intent for context '%lu', avoid embedding search", buf, 0xCu);
          if (qpparserLogger(void)::token != -1)
            dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
        }
        v19 = os_signpost_id_generate((os_log_t)qpparserLogger(void)::log);
        if (qpparserLogger(void)::token != -1)
          dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
        if (v19 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v20 = qpparserLogger(void)::log;
          if (os_signpost_enabled((os_log_t)qpparserLogger(void)::log))
          {
            v21 = *(__CFAttributedString **)(*a1 + 8);
            *(_DWORD *)buf = 134217984;
            v39 = v21;
            _os_signpost_emit_with_name_impl(&dword_218E10000, v20, OS_SIGNPOST_EVENT, v19, "QPParserUnsafeIntent", "[QPParser] unsafe intent for context '%lu', avoid embedding search", buf, 0xCu);
          }
        }
        CFRelease(Mutable);
        (*(void (**)(uint64_t, _QWORD))(a2 + 16))(a2, 0);
        goto LABEL_59;
      }
      v16 = *a1;
    }
    v22 = *(_QWORD *)(v16 + 8);
    v7 = v22 == 9;
    v23 = __ROR8__(v22, 1);
    v24 = v7 || v23 > 6;
    v25 = (1 << v23) & 0x71;
    if (v24 || v25 == 0)
    {
      v27 = a1[6];
      v32[0] = MEMORY[0x24BDAC760];
      v32[1] = 0x40000000;
      v32[2] = ___ZN2QP6Parser15embeddingStringEU13block_pointerFvPK20__CFAttributedStringE_block_invoke_23;
      v32[3] = &unk_24DA24D08;
      v32[5] = a1;
      v32[6] = Mutable;
      v32[4] = &v34;
      QP::U2Parser::enumerateParses(v27, v32);
    }
  }
  if (Mutable)
  {
    String = CFAttributedStringGetString(Mutable);
    MutableCopy = CFStringCreateMutableCopy(0, 0, String);
    CFStringTrimWhitespace(MutableCopy);
    if (CFStringGetLength(MutableCopy) < 1)
    {
      if (qpparserLogger(void)::token != -1)
        dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
      v30 = qpparserLogger(void)::log;
      if (os_log_type_enabled((os_log_t)qpparserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v39 = Mutable;
        _os_log_impl(&dword_218E10000, v30, OS_LOG_TYPE_DEFAULT, "[QPParser] modified embedding string is empty (%@) not making an embedding query", buf, 0xCu);
      }
    }
    else
    {
      (*(void (**)(uint64_t, __CFAttributedString *))(a2 + 16))(a2, Mutable);
    }
    CFRelease(MutableCopy);
  }
  v31 = (const void *)v35[3];
  if (v31)
    CFRelease(v31);
  if (Mutable)
    CFRelease(Mutable);
LABEL_59:
  _Block_object_dispose(&v34, 8);
}

void sub_218E24908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL ___ZN2QP6Parser15embeddingStringEU13block_pointerFvPK20__CFAttributedStringE_block_invoke(uint64_t a1, const __CFString *a2, _BYTE *a3)
{
  _BOOL8 result;

  result = CFStringsAreEqual(CFSTR("OFFENSIVE"), a2);
  if (result || (result = CFStringsAreEqual(CFSTR("PHOTOSENSITIVE"), a2)))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a3 = 1;
  }
  return result;
}

void ___ZN2QP6Parser15embeddingStringEU13block_pointerFvPK20__CFAttributedStringE_block_invoke_23(uint64_t a1, const __CFString ***a2, _BYTE *a3)
{
  const __CFString ***v4;
  uint64_t v6;
  uint64_t v7;
  const __CFString *v8;
  const __CFAllocator *v9;
  CFMutableStringRef MutableCopy;
  uint64_t *v11;
  uint64_t v12;
  CFIndex v13;
  CFIndex v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  std::string::size_type size;
  const __CFString *v30;
  BOOL v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  int v35;
  unint64_t *v36;
  unint64_t v37;
  std::string::size_type v38;
  __int128 v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::string *v43;
  CFIndex Length;
  CFRange v45;
  NSObject *v46;
  std::string::size_type v47;
  std::string::size_type v48;
  NSObject *log;
  NSObject *loga;
  CFAttributedStringRef *v51;
  const __CFString ***v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  std::string __str;
  _QWORD v56[7];
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  std::string buf;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  std::string v66;
  __int128 v67;
  _BYTE v68[24];
  uint64_t v69;
  CFRange v70;
  CFRange v71;

  v4 = a2;
  v69 = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t)*a2;
  if ((*a2)[11])
  {
    v7 = *(_QWORD *)(a1 + 40);
    v60 = 0;
    v57 = (uint64_t)&v57;
    v58 = &v57;
    v59 = 0;
    v56[0] = MEMORY[0x24BDAC760];
    v56[1] = 0x40000000;
    v56[2] = ___ZN2QP6Parser15embeddingStringEU13block_pointerFvPK20__CFAttributedStringE_block_invoke_2;
    v56[3] = &__block_descriptor_tmp_26;
    v56[4] = &v57;
    v56[5] = a1 + 48;
    v56[6] = &v60;
    QP::Parse::enumerateParseAttributes(v6, (uint64_t)v56);
    v51 = (CFAttributedStringRef *)(a1 + 48);
    v52 = v4;
    v53 = a1;
    v8 = **v4;
    v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, &stru_24DA27910);
    v11 = v58;
    std::string::basic_string[abi:ne180100]<0>(&v66, "");
    v67 = xmmword_218E9F890;
    while (v11 != &v57)
    {
      v12 = v11[2];
      v14 = *(_QWORD *)(v12 + 16);
      v13 = *(_QWORD *)(v12 + 24);
      if (*(_DWORD *)(v12 + 76) != 2)
      {
LABEL_41:
        v71.location = v14;
        v71.length = v13;
        v30 = CFStringCreateWithSubstring(v9, v8, v71);
        CFStringAppend(MutableCopy, v30);
        CFRelease(v30);
        v11 = (uint64_t *)v11[1];
        if (*(_BYTE *)(*(_QWORD *)v7 + 31))
          v31 = v11 == &v57;
        else
          v31 = 1;
        if (!v31)
          CFStringAppend(MutableCopy, CFSTR(" "));
        continue;
      }
      if (v60 != 1)
      {
        v11 = (uint64_t *)v11[1];
        continue;
      }
      v15 = (std::__shared_weak_count *)v11[3];
      v54 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      v18 = *(unsigned __int8 *)(v12 + 71);
      v19 = (char)v18;
      if ((v18 & 0x80u) != 0)
        v18 = *(_QWORD *)(v12 + 56);
      if (v18 != 17)
        goto LABEL_21;
      v20 = v19 >= 0 ? v12 + 48 : *(_QWORD *)(v12 + 48);
      v21 = *(_QWORD *)v20;
      v22 = *(_QWORD *)(v20 + 8);
      v23 = *(unsigned __int8 *)(v20 + 16);
      v24 = v21 == 0x6E756F724750516BLL && v22 == 0x6F73726550646564;
      if (!v24 || v23 != 110)
        goto LABEL_21;
      v32 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v12 + 112));
      v33 = v32;
      v34 = *(_QWORD *)(v12 + 104);
      v64 = v34;
      v65 = v32;
      v35 = *(unsigned __int16 *)(v34 + 88);
      if (v35 != 16)
        goto LABEL_75;
      v62 = v34;
      v63 = v32;
      v36 = (unint64_t *)&v32->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
      memset(&buf, 0, sizeof(buf));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&buf, *(__int128 **)(v34 + 120), *(__int128 **)(v34 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v34 + 128) - *(_QWORD *)(v34 + 120)) >> 3));
      if (buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0] == 24)
      {
        if (qpparserLogger(void)::token != -1)
          dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
        log = qpparserLogger(void)::log;
        if (os_log_type_enabled((os_log_t)qpparserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
        {
          v38 = buf.__r_.__value_.__r.__words[0];
          if (*(char *)(buf.__r_.__value_.__r.__words[0] + 23) < 0)
            v38 = *(_QWORD *)buf.__r_.__value_.__l.__data_;
          *(_DWORD *)v68 = 136315138;
          *(_QWORD *)&v68[4] = v38;
          _os_log_impl(&dword_218E10000, log, OS_LOG_TYPE_DEFAULT, "[QPParser] returning uuid for personalized embedding with uuid (%s)", v68, 0xCu);
        }
        if (*(char *)(buf.__r_.__value_.__r.__words[0] + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)buf.__r_.__value_.__l.__data_, *(_QWORD *)(buf.__r_.__value_.__r.__words[0] + 8));
        }
        else
        {
          v39 = *(_OWORD *)buf.__r_.__value_.__l.__data_;
          __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(buf.__r_.__value_.__r.__words[0] + 16);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v39;
        }
      }
      else
      {
        if (qpparserLogger(void)::token != -1)
          dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
        loga = qpparserLogger(void)::log;
        if (os_log_type_enabled((os_log_t)qpparserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v68 = 134217984;
          *(_QWORD *)&v68[4] = 0xAAAAAAAAAAAAAAABLL
                             * ((uint64_t)(buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]) >> 3);
          _os_log_impl(&dword_218E10000, loga, OS_LOG_TYPE_DEFAULT, "[QPParser] avoiding personalized embedding grounded person has (%zu) identifiers", v68, 0xCu);
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, "");
      }
      *(_QWORD *)v68 = &buf;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v68);
      do
        v40 = __ldaxr(v36);
      while (__stlxr(v40 - 1, v36));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      v33 = v65;
      v35 = 16;
      if (v65)
      {
LABEL_75:
        v41 = (unint64_t *)&v33->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        if (v35 != 16)
        {
LABEL_21:
          if (qpparserLogger(void)::token != -1)
            dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
          v26 = qpparserLogger(void)::log;
          if (os_log_type_enabled((os_log_t)qpparserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            _os_log_impl(&dword_218E10000, v26, OS_LOG_TYPE_DEFAULT, "[QPParser] avoiding personalized embedding as person is not grounded", (uint8_t *)&buf, 2u);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "");
        }
      }
      if (v54)
      {
        v27 = (unint64_t *)&v54->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        size = __str.__r_.__value_.__l.__size_;
      if (size)
      {
        std::string::operator=(&v66, &__str);
        *((_QWORD *)&v67 + 1) = v13;
        *(_QWORD *)&v67 = CFStringGetLength(MutableCopy);
        if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_36;
      }
      else
      {
        v11 = (uint64_t *)v11[1];
        if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_36:
          if (size)
            goto LABEL_41;
          continue;
        }
      }
      operator delete(__str.__r_.__value_.__l.__data_);
      if (size)
        goto LABEL_41;
    }
    v4 = v52;
    a1 = v53;
    v70.length = CFAttributedStringGetLength(*v51);
    v70.location = 0;
    CFAttributedStringReplaceString(*v51, v70, MutableCopy);
    CFRelease(MutableCopy);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v66.__r_.__value_.__l.__size_)
      {
LABEL_85:
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v66.__r_.__value_.__l.__data_);
        goto LABEL_87;
      }
      v43 = (std::string *)v66.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (!*((_BYTE *)&v66.__r_.__value_.__s + 23))
      {
LABEL_87:
        std::__list_imp<std::shared_ptr<QP::ParseAttribute>>::clear(&v57);
        goto LABEL_88;
      }
      v43 = &v66;
    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v53 + 32) + 8) + 24) = CFStringCreateWithCString(0, (const char *)v43, 0x8000100u);
    Length = CFAttributedStringGetLength(*(CFAttributedStringRef *)(v53 + 48));
    v45.location = v67;
    if ((v67 & 0x8000000000000000) == 0)
    {
      v45.length = *((_QWORD *)&v67 + 1);
      if (*((_QWORD *)&v67 + 1) + (_QWORD)v67 <= Length)
        CFAttributedStringSetAttribute(*(CFMutableAttributedStringRef *)(v53 + 48), v45, CFSTR("kMDItemPhotosPeoplePersonIdentifiers"), *(CFTypeRef *)(*(_QWORD *)(*(_QWORD *)(v53 + 32) + 8) + 24));
    }
    goto LABEL_85;
  }
LABEL_88:
  if (qpparserLogger(void)::token != -1)
    dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
  v46 = qpparserLogger(void)::log;
  if (os_log_type_enabled((os_log_t)qpparserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
  {
    v47 = (std::string::size_type)**v4;
    v48 = *(_QWORD *)(a1 + 48);
    LODWORD(v66.__r_.__value_.__l.__data_) = 138412546;
    *(std::string::size_type *)((char *)v66.__r_.__value_.__r.__words + 4) = v47;
    WORD2(v66.__r_.__value_.__r.__words[1]) = 2112;
    *(std::string::size_type *)((char *)&v66.__r_.__value_.__r.__words[1] + 6) = v48;
    _os_log_impl(&dword_218E10000, v46, OS_LOG_TYPE_DEFAULT, "[QPParser] modified embedding string (%@) -> (%@)", (uint8_t *)&v66, 0x16u);
  }
  *a3 = 1;
}

void sub_218E250B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;

  *(_QWORD *)(v40 - 128) = &a40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 128));
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v40 - 208);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v40 - 192);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  if (*(char *)(v40 - 153) < 0)
    operator delete(*(void **)(v40 - 176));
  std::__list_imp<std::shared_ptr<QP::ParseAttribute>>::clear(&a36);
  _Unwind_Resume(a1);
}

void ___ZN2QP6Parser15embeddingStringEU13block_pointerFvPK20__CFAttributedStringE_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  _QWORD v13[4];
  __int128 v14;
  uint64_t v15;

  v3 = *a2;
  if (*(_QWORD *)(*a2 + 128) == *(_QWORD *)(*a2 + 120))
  {
    v4 = a1 + 32;
    v5 = (std::__shared_weak_count *)a2[1];
    v11 = *a2;
    v12 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    _ZZZN2QP6Parser15embeddingStringEU13block_pointerFvPK20__CFAttributedStringEEUb_ENK3__0clENSt3__110shared_ptrINS_14ParseAttributeEEE(v4, &v11);
    v8 = v12;
    if (v12)
    {
      v9 = (unint64_t *)&v12->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 0x40000000;
    v13[2] = ___ZN2QP6Parser15embeddingStringEU13block_pointerFvPK20__CFAttributedStringE_block_invoke_3;
    v13[3] = &__block_descriptor_tmp_25;
    v14 = *(_OWORD *)(a1 + 32);
    v15 = *(_QWORD *)(a1 + 48);
    QP::ParseAttribute::enumerateAttributes(v3, (uint64_t)v13);
  }
}

void sub_218E2522C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void QP::ParseAttribute::enumerateAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v2 = *(uint64_t **)(a1 + 120);
  for (i = *(uint64_t **)(a1 + 128); v2 != i; v2 += 2)
  {
    v5 = *v2;
    v6 = (std::__shared_weak_count *)v2[1];
    v18 = *v2;
    v19 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      v16 = v5;
      v17 = v6;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      v16 = v5;
      v17 = 0;
    }
    (*(void (**)(uint64_t, uint64_t *))(a2 + 16))(a2, &v16);
    v10 = v17;
    if (v17)
    {
      v11 = (unint64_t *)&v17->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = v19;
    if (v19)
    {
      v14 = (unint64_t *)&v19->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
}

void sub_218E25340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN2QP6Parser15embeddingStringEU13block_pointerFvPK20__CFAttributedStringE_block_invoke_3(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = a1 + 32;
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  _ZZZN2QP6Parser15embeddingStringEU13block_pointerFvPK20__CFAttributedStringEEUb_ENK3__0clENSt3__110shared_ptrINS_14ParseAttributeEEE(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_218E253E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void _ZZZN2QP6Parser15embeddingStringEU13block_pointerFvPK20__CFAttributedStringEEUb_ENK3__0clENSt3__110shared_ptrINS_14ParseAttributeEEE(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  int v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t *v22;
  void **v23;
  size_t v24;
  uint64_t v25;
  uint64_t *v26;
  _BOOL4 v27;
  NSObject *v28;
  unint64_t *v29;
  unint64_t v30;
  void *__p[2];
  unsigned __int8 v32;
  uint64_t *v33;
  std::__shared_weak_count *v34;
  _QWORD v35[2];

  v4 = *a2;
  switch(*(_DWORD *)(*a2 + 76))
  {
    case 0:
    case 1:
    case 0xA:
      return;
    case 2:
      v5 = *(unsigned __int8 *)(v4 + 71);
      v6 = (char)v5;
      if ((v5 & 0x80u) != 0)
        v5 = *(_QWORD *)(v4 + 56);
      if (v5 != 17)
        return;
      v7 = v6 >= 0 ? v4 + 48 : *(_QWORD *)(v4 + 48);
      v8 = *(_QWORD *)v7;
      v9 = *(_QWORD *)(v7 + 8);
      v10 = *(unsigned __int8 *)(v7 + 16);
      v11 = v8 == 0x6E756F724750516BLL && v9 == 0x6F73726550646564;
      if (!v11 || v10 != 110)
        return;
      v13 = *(std::__shared_weak_count **)(v4 + 112);
      if (v13 && (v14 = std::__shared_weak_count::lock(v13)) != 0)
      {
        v15 = v14;
        v16 = *(unsigned __int16 *)(*(_QWORD *)(v4 + 104) + 88);
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (v16 == 16)
          goto LABEL_37;
      }
      else if (MEMORY[0x58] == 16)
      {
LABEL_37:
        ++**(_DWORD **)(a1 + 16);
        goto LABEL_38;
      }
      return;
    case 8:
      v19 = *(std::__shared_weak_count **)(v4 + 112);
      if (v19)
      {
        v20 = std::__shared_weak_count::lock(v19);
        v34 = v20;
        if (v20)
        {
          v21 = v20;
          v22 = *(uint64_t **)(v4 + 104);
          v33 = v22;
          if (v22)
          {
            QP::getUTF8StringFromCFString(CFSTR("Holiday"), __p);
            if ((v32 & 0x80u) == 0)
              v23 = __p;
            else
              v23 = (void **)__p[0];
            if ((v32 & 0x80u) == 0)
              v24 = v32;
            else
              v24 = (size_t)__p[1];
            if (*((char *)v22 + 23) < 0)
            {
              v26 = v22;
              v22 = (uint64_t *)*v22;
              v25 = v26[1];
            }
            else
            {
              v25 = *((unsigned __int8 *)v22 + 23);
            }
            v35[0] = v22;
            v35[1] = v25;
            v27 = std::string_view::starts_with[abi:ne180100](v35, v23, v24);
            if ((char)v32 < 0)
              operator delete(__p[0]);
            if (v27)
            {
              if (qpparserLogger(void)::token != -1)
                dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
              v28 = qpparserLogger(void)::log;
              if (os_log_type_enabled((os_log_t)qpparserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(__p[0]) = 0;
                _os_log_impl(&dword_218E10000, v28, OS_LOG_TYPE_DEFAULT, "[QPParser] can't remove holiday span from query", (uint8_t *)__p, 2u);
              }
              std::list<std::shared_ptr<QP::ParseAttribute>>::push_back(*(uint64_t **)a1, a2);
            }
          }
          v29 = (unint64_t *)&v21->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      return;
    default:
LABEL_38:
      std::list<std::shared_ptr<QP::ParseAttribute>>::push_back(*(uint64_t **)a1, a2);
      return;
  }
}

void sub_218E25684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::set<unsigned short>>>(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t **v5;
  unsigned int v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v10;

  v5 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *a2;
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v4;
        v8 = *((unsigned __int16 *)v4 + 16);
        if (v6 >= v8)
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_10;
      }
      if (v8 >= v6)
        break;
      v4 = v7[1];
      if (!v4)
      {
        v5 = v7 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__construct_node<std::pair<unsigned short,std::set<unsigned short>>>(a1, a3, (uint64_t)&v10);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v7, v5, v10);
    return v10;
  }
  return (uint64_t *)v7;
}

_WORD *std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__construct_node<std::pair<unsigned short,std::set<unsigned short>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _WORD *result;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v5 = a1 + 8;
  result = operator new(0x40uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  result[16] = *(_WORD *)a2;
  v7 = (_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 16);
  *((_QWORD *)result + 5) = *(_QWORD *)(a2 + 8);
  *((_QWORD *)result + 6) = v8;
  v9 = (char *)(result + 24);
  v10 = *(_QWORD *)(a2 + 24);
  *((_QWORD *)result + 7) = v10;
  if (v10)
  {
    *(_QWORD *)(v8 + 16) = v9;
    *(_QWORD *)(a2 + 8) = v7;
    *v7 = 0;
    *(_QWORD *)(a2 + 24) = 0;
  }
  else
  {
    *((_QWORD *)result + 5) = v9;
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree<unsigned short>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<unsigned short>::destroy(a1, *a2);
    std::__tree<unsigned short>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _WORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[16] = **a4;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 5) = v11 + 24;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>(uint64_t **a1, unsigned __int16 *a2, _WORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((unsigned __int16 *)v5 + 13);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_WORD *)v10 + 13) = *a3;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

BOOL QP::DateComponents::isTime(QP::DateComponents *this)
{
  return ((*((_DWORD *)this + 2) & 0x80000000) == 0
       || (*((_DWORD *)this + 1) & 0x80000000) == 0
       || (*(_DWORD *)this & 0x80000000) == 0
       || (*((_DWORD *)this + 7) & 0x80000000) == 0)
      && !QP::DateComponents::hasDate(this);
}

BOOL QP::DateComponents::hasDate(QP::DateComponents *this)
{
  return (*((_DWORD *)this + 3) & 0x80000000) == 0
      || (*((_DWORD *)this + 8) & 0x80000000) == 0
      || (*((_DWORD *)this + 4) & 0x80000000) == 0
      || (*((_DWORD *)this + 5) & 0x80000000) == 0
      || (*((_DWORD *)this + 6) & 0x80000000) == 0
      || (*((_DWORD *)this + 11) & 0x80000000) == 0
      || (*((_DWORD *)this + 10) & 0x80000000) == 0
      || (*((_DWORD *)this + 9) & 0x80000000) == 0
      || *((_DWORD *)this + 12) >= 0;
}

_QWORD *std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_218E25C9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<long>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*,false>(uint64_t *a1, __int128 *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, uint64_t))
{
  __int128 *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;

  if (a1 != a2)
  {
    v5 = (__int128 *)(a1 + 16);
    if (a1 + 16 != a2)
    {
      v7 = 0;
      v8 = a1;
      do
      {
        v9 = v8;
        v8 = (uint64_t)v5;
        if ((*a3)(v5, v9))
        {
          v16 = *(_OWORD *)v8;
          *(_QWORD *)v8 = 0;
          *(_QWORD *)(v8 + 8) = 0;
          v10 = v7;
          while (1)
          {
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](a1 + v10 + 16, (__int128 *)(a1 + v10));
            if (!v10)
              break;
            v11 = (*a3)(&v16, a1 + v10 - 16);
            v10 -= 16;
            if ((v11 & 1) == 0)
            {
              v12 = a1 + v10 + 16;
              goto LABEL_10;
            }
          }
          v12 = a1;
LABEL_10:
          std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v12, &v16);
          v13 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
          if (*((_QWORD *)&v16 + 1))
          {
            v14 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
        }
        v5 = (__int128 *)(v8 + 16);
        v7 += 16;
      }
      while (v8 + 16 != a2);
    }
  }
}

void sub_218E26160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  __int128 *v4;
  __int128 *v5;
  __int128 *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  if (a1 != a2)
  {
    v4 = a1;
    v5 = a1 + 1;
    if (a1 + 1 != a2)
    {
      do
      {
        v7 = v5;
        if ((*a3)(v5, v4))
        {
          v11 = *v7;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v7 + 1) = 0;
          do
          {
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)(v4 + 1), v4);
            --v4;
          }
          while (((*a3)(&v11, v4) & 1) != 0);
          std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)(v4 + 1), &v11);
          v8 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
          if (*((_QWORD *)&v11 + 1))
          {
            v9 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
            do
              v10 = __ldaxr(v9);
            while (__stlxr(v10 - 1, v9));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
        }
        v5 = v7 + 1;
        v4 = v7;
      }
      while (v7 + 1 != a2);
    }
  }
}

void sub_218E26258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::ParseAttribute> *,BOOL (*&)(std::shared_ptr<QP::ParseAttribute>&,std::shared_ptr<QP::ParseAttribute>&)>(uint64_t a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  __int128 *v4;
  __int128 *v6;
  __int128 *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v15;

  v4 = a2;
  v15 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (((*a3)(&v15, a2 - 1) & 1) != 0)
  {
    v6 = (__int128 *)a1;
    do
      ++v6;
    while (((*a3)(&v15, v6) & 1) == 0);
  }
  else
  {
    v7 = (__int128 *)(a1 + 16);
    do
    {
      v6 = v7;
      if (v7 >= v4)
        break;
      v8 = (*a3)(&v15, v7);
      v7 = v6 + 1;
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      --v4;
    while (((*a3)(&v15, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = *(_QWORD *)v4;
    *(_QWORD *)v4 = v9;
    v10 = *((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = *((_QWORD *)v4 + 1);
    *((_QWORD *)v4 + 1) = v10;
    do
      ++v6;
    while (!(*a3)(&v15, v6));
    do
      --v4;
    while (((*a3)(&v15, v4) & 1) != 0);
  }
  if (v6 - 1 != (__int128 *)a1)
    std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](a1, v6 - 1);
  std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)(v6 - 1), &v15);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v6;
}

void sub_218E263E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__int128 *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::ParseAttribute> *,BOOL (*&)(std::shared_ptr<QP::ParseAttribute>&,std::shared_ptr<QP::ParseAttribute>&)>(uint64_t a1, uint64_t *a2, uint64_t (**a3)(uint64_t, __int128 *))
{
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v18;

  v6 = 0;
  v18 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  do
  {
    v7 = (*a3)(a1 + v6 + 16, &v18);
    v6 += 16;
  }
  while ((v7 & 1) != 0);
  v8 = a1 + v6;
  if (v6 == 16)
  {
    do
    {
      if (v8 >= (unint64_t)a2)
        break;
      a2 -= 2;
    }
    while (((*a3)((uint64_t)a2, &v18) & 1) == 0);
  }
  else
  {
    do
      a2 -= 2;
    while (!(*a3)((uint64_t)a2, &v18));
  }
  if (v8 >= (unint64_t)a2)
  {
    v13 = (__int128 *)(v8 - 16);
  }
  else
  {
    v9 = (uint64_t *)(a1 + v6);
    v10 = a2;
    do
    {
      v11 = *v9;
      *v9 = *v10;
      *v10 = v11;
      v12 = v9[1];
      v9[1] = v10[1];
      v10[1] = v12;
      do
        v9 += 2;
      while (((*a3)((uint64_t)v9, &v18) & 1) != 0);
      do
        v10 -= 2;
      while (!(*a3)((uint64_t)v10, &v18));
    }
    while (v9 < v10);
    v13 = (__int128 *)(v9 - 2);
  }
  if (v13 != (__int128 *)a1)
    std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](a1, v13);
  std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)v13, &v18);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v13;
}

void sub_218E26594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;

  v6 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)(a2 - 2, a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        v9 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v10 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a1 + 4, a3);
      v11 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      v20 = *(_OWORD *)v11;
      *v11 = 0;
      v11[1] = 0;
      v14 = v12;
      while (1)
      {
        std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)a1 + v14 + 48, (__int128 *)((char *)a1 + v14 + 32));
        if (v14 == -32)
          break;
        v15 = (*a3)((uint64_t *)&v20, (uint64_t *)((char *)a1 + v14 + 16));
        v14 -= 16;
        if ((v15 & 1) == 0)
        {
          v16 = (uint64_t)a1 + v14 + 48;
          goto LABEL_12;
        }
      }
      v16 = (uint64_t)a1;
LABEL_12:
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v16, &v20);
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
      if (*((_QWORD *)&v20 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (++v13 == 8)
        return v11 + 2 == a2;
    }
    v10 = v11;
    v12 += 16;
    v11 += 2;
    if (v11 == a2)
      return 1;
  }
}

void sub_218E267BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__int128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>(char *a1, char *a2, __int128 *a3, uint64_t (**a4)(__int128 *, uint64_t))
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  if (a1 != a2)
  {
    v6 = (uint64_t)a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t)&a1[16 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if ((__int128 *)v6 != a3)
    {
      v14 = (__int128 *)v6;
      do
      {
        if ((*a4)(v14, (uint64_t)a1))
        {
          v15 = *(_QWORD *)v14;
          *(_QWORD *)v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v15;
          v16 = *((_QWORD *)v14 + 1);
          *((_QWORD *)v14 + 1) = *((_QWORD *)a1 + 1);
          *((_QWORD *)a1 + 1) = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*>((uint64_t)a1, a4, v9, (uint64_t)a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = (uint64_t)a3;
    }
    if (v8 >= 17)
    {
      v17 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*>((uint64_t)a1, v6, (unsigned int (**)(uint64_t, uint64_t))a4, v17);
        v6 -= 16;
      }
      while (v17-- > 2);
    }
    return (__int128 *)v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*>(uint64_t a1, uint64_t (**a2)(__int128 *, uint64_t), uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (a4 - a1) >> 4)
    {
      v10 = (a4 - a1) >> 3;
      v11 = v10 + 1;
      v12 = (__int128 *)(a1 + 16 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(v12, (uint64_t)(v12 + 1)))
      {
        ++v12;
        v11 = v13;
      }
      if (((*a2)(v12, v5) & 1) == 0)
      {
        v19 = *(_OWORD *)v5;
        *(_QWORD *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        do
        {
          v14 = (uint64_t)v12;
          std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v5, v12);
          if (v7 < v11)
            break;
          v15 = (2 * v11) | 1;
          v12 = (__int128 *)(a1 + 16 * v15);
          v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            v11 = v15;
          }
          else if ((*a2)((__int128 *)(a1 + 16 * v15), (uint64_t)(v12 + 1)))
          {
            ++v12;
          }
          else
          {
            v11 = v15;
          }
          v5 = v14;
        }
        while (!(*a2)(v12, (uint64_t)&v19));
        std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v14, &v19);
        v16 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
        if (*((_QWORD *)&v19 + 1))
        {
          v17 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
      }
    }
  }
}

void sub_218E26A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*>(uint64_t a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;

  if (a4 >= 2)
  {
    v13 = *(_OWORD *)a1;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v7 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a3, a4);
    v8 = v7;
    v9 = (__int128 *)(a2 - 16);
    if (v7 == v9)
    {
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)v7, &v13);
    }
    else
    {
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)v7, v9);
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)v9, &v13);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*>(a1, (uint64_t)(v8 + 1), (uint64_t (**)(__int128 *, __int128 *))a3, ((uint64_t)v8 - a1 + 16) >> 4);
    }
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
    if (*((_QWORD *)&v13 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_218E26B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = v4 >> 1;
    v8 = (__int128 *)(a1 + 16 * (v4 >> 1));
    v9 = a2 - 16;
    if ((*a3)(v8, (__int128 *)(a2 - 16)))
    {
      v14 = *(_OWORD *)v9;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      do
      {
        v10 = (uint64_t)v8;
        std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v9, v8);
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (__int128 *)(a1 + 16 * v7);
        v9 = v10;
      }
      while (((*a3)(v8, &v14) & 1) != 0);
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v10, &v14);
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
      if (*((_QWORD *)&v14 + 1))
      {
        v12 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
  }
}

void sub_218E26C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  void **v6;
  void **v7;
  char v9;
  void **v10;

  if (a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::shared_ptr<QP::ParseAttribute>> *,std::vector<std::shared_ptr<QP::ParseAttribute>> *,std::vector<std::shared_ptr<QP::ParseAttribute>> *>((uint64_t)&v9, a3, *(_QWORD *)(a1 + 8), a2);
    v6 = v5;
    v7 = *(void ***)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 3;
        v10 = v7;
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v10);
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t std::__tree<std::string>::__count_unique<std::string>(uint64_t a1, void **a2)
{
  void **v2;
  uint64_t v4;

  v2 = *(void ***)(a1 + 8);
  if (v2)
  {
    v4 = 1;
    do
    {
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v2 + 4) & 0x80) == 0)
      {
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2 + 4, a2) & 0x80) == 0)
          return v4;
        ++v2;
      }
      v2 = (void **)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, void **a2)
{
  size_t v2;
  size_t v3;
  int v4;
  void *v5;
  size_t v6;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (_QWORD *)*a1;
    v2 = v3;
  }
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  size_t v7;
  int v8;

  if (a4 >= a2)
    v7 = a2;
  else
    v7 = a4;
  v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0)
      return 1;
  }
  else
  {
    if (a2 == a4)
      return 0;
    if (a2 >= a4)
      return 1;
  }
  return 255;
}

_QWORD *std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange &,unsigned short &,unsigned short &,void>@<X0>(_OWORD *a1@<X1>, __int128 *a2@<X2>, __int16 *a3@<X3>, unsigned __int16 *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xA8uLL);
  result = std::__shared_ptr_emplace<QP::ParseAttribute>::__shared_ptr_emplace[abi:ne180100]<CFRange &,CFRange &,unsigned short &,unsigned short &,std::allocator<QP::ParseAttribute>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_218E26E58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<QP::ParseAttribute>::__shared_ptr_emplace[abi:ne180100]<CFRange &,CFRange &,unsigned short &,unsigned short &,std::allocator<QP::ParseAttribute>,0>(_QWORD *a1, _OWORD *a2, __int128 *a3, __int16 *a4, unsigned __int16 *a5)
{
  a1[2] = 0;
  *a1 = &unk_24DA24D38;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<QP::ParseAttribute,CFRange &,CFRange &,unsigned short &,unsigned short &,QP::ParseAttribute*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_218E26EA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::ParseAttribute>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA24D38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::ParseAttribute>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA24D38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A24D0CLL);
}

void std::__shared_ptr_emplace<QP::ParseAttribute>::__on_zero_shared(uint64_t a1)
{
  QP::ParseAttribute::~ParseAttribute((QP::ParseAttribute *)(a1 + 24));
}

uint64_t std::construct_at[abi:ne180100]<QP::ParseAttribute,CFRange &,CFRange &,unsigned short &,unsigned short &,QP::ParseAttribute*>(uint64_t a1, _OWORD *a2, __int128 *a3, __int16 *a4, unsigned __int16 *a5)
{
  __int16 v6;
  unsigned __int16 v7;
  __int128 v8;

  v6 = *a4;
  v7 = *a5;
  v8 = *a3;
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v8;
  *(_WORD *)(a1 + 32) = v6;
  *(_DWORD *)(a1 + 34) = v7;
  *(_QWORD *)(a1 + 40) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 48), "");
  *(_WORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  return a1;
}

void QP::ParseAttribute::~ParseAttribute(QP::ParseAttribute *this)
{
  std::__shared_weak_count *v2;
  void **v3;

  v3 = (void **)((char *)this + 120);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy((uint64_t)this + 80, *((_QWORD **)this + 11));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
}

void std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy(a1, a2[1]);
    std::__tree<unsigned short>::destroy((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

uint64_t std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__push_back_slow_path<std::vector<std::shared_ptr<QP::ParseAttribute>> const&>(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<std::shared_ptr<QP::ParseAttribute>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>(v11, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  v15 += 24;
  std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<std::shared_ptr<QP::ParseAttribute>>>::~__split_buffer(v14);
  return v12;
}

void sub_218E27134(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::shared_ptr<QP::ParseAttribute>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<QP::ParseAttribute>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_218E271D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::reverse_iterator<std::vector<std::shared_ptr<QP::ParseAttribute>>*>,std::reverse_iterator<std::vector<std::shared_ptr<QP::ParseAttribute>>*>,std::reverse_iterator<std::vector<std::shared_ptr<QP::ParseAttribute>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::reverse_iterator<std::vector<std::shared_ptr<QP::ParseAttribute>>*>,std::reverse_iterator<std::vector<std::shared_ptr<QP::ParseAttribute>>*>,std::reverse_iterator<std::vector<std::shared_ptr<QP::ParseAttribute>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::reverse_iterator<std::vector<std::shared_ptr<QP::ParseAttribute>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::reverse_iterator<std::vector<std::shared_ptr<QP::ParseAttribute>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::reverse_iterator<std::vector<std::shared_ptr<QP::ParseAttribute>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::reverse_iterator<std::vector<std::shared_ptr<QP::ParseAttribute>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::shared_ptr<QP::ParseAttribute>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::shared_ptr<QP::ParseAttribute>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::shared_ptr<QP::ParseAttribute>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::shared_ptr<QP::ParseAttribute>> *,std::vector<std::shared_ptr<QP::ParseAttribute>> *,std::vector<std::shared_ptr<QP::ParseAttribute>> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__vdeallocate((void **)a4);
    *(_OWORD *)a4 = *(_OWORD *)v5;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(v5 + 16);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    a4 += 24;
    v5 += 24;
  }
  while (v5 != v6);
  return v6;
}

_QWORD *std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<std::shared_ptr<QP::ParseAttribute>>*>,std::__wrap_iter<std::vector<std::shared_ptr<QP::ParseAttribute>>*>>(uint64_t *a1, _QWORD *a2, uint64_t **a3, _QWORD **a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t **v21;
  void *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v5 = a2;
  if (a5 >= 1)
  {
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)a2) >> 3)) >= a5)
      {
        v21 = &a3[3 * a5];
      }
      else
      {
        v21 = &a3[(uint64_t)(v12 - (_QWORD)a2) >> 3];
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::vector<std::shared_ptr<QP::ParseAttribute>>*,std::vector<std::shared_ptr<QP::ParseAttribute>>*,std::vector<std::shared_ptr<QP::ParseAttribute>>*>(v9, v21, a4, *(_QWORD *)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__move_range((uint64_t)a1, v5, v12, (uint64_t)&v5[3 * a5]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::shared_ptr<QP::ParseAttribute>> *,std::vector<std::shared_ptr<QP::ParseAttribute>> *,std::vector<std::shared_ptr<QP::ParseAttribute>> *>((uint64_t)&v23, a3, v21, (uint64_t)v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v17;
      v27 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v9, v18);
      else
        v19 = 0;
      v23 = v19;
      v24 = &v19[24 * v15];
      v25 = v24;
      v26 = &v19[24 * v18];
      std::__split_buffer<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__construct_at_end_with_size<std::__wrap_iter<std::vector<std::shared_ptr<QP::ParseAttribute>>*>>((char *)&v23, a3, a5);
      v5 = (_QWORD *)std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__swap_out_circular_buffer(a1, &v23, v5);
      std::__split_buffer<std::vector<std::shared_ptr<QP::ParseAttribute>>>::~__split_buffer(&v23);
    }
  }
  return v5;
}

void sub_218E27610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__move_range(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char v11;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)((char *)a2 + v6 - a4);
  v8 = (_QWORD *)v6;
  if ((unint64_t)v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD **)(a1 + 8);
    do
    {
      *v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
      *(_OWORD *)v8 = *(_OWORD *)v9;
      v8[2] = v9[2];
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      v8 += 3;
      v9 += 3;
    }
    while ((unint64_t)v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::shared_ptr<QP::ParseAttribute>> *,std::vector<std::shared_ptr<QP::ParseAttribute>> *,std::vector<std::shared_ptr<QP::ParseAttribute>> *>((uint64_t)&v11, a2, v7, v6);
}

char *std::__split_buffer<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__construct_at_end_with_size<std::__wrap_iter<std::vector<std::shared_ptr<QP::ParseAttribute>>*>>(char *result, _QWORD **a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  v4 = *((_QWORD *)result + 2);
  if (a3)
  {
    v6 = v4 + 24 * a3;
    v7 = 24 * a3;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      result = std::vector<std::shared_ptr<QP::ParseAttribute>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>((char *)v4, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
      v4 += 24;
      a2 += 3;
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  *((_QWORD *)v3 + 2) = v4;
  return result;
}

void sub_218E27728(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::reverse_iterator<std::vector<std::shared_ptr<QP::ParseAttribute>>*>,std::reverse_iterator<std::vector<std::shared_ptr<QP::ParseAttribute>>*>,std::reverse_iterator<std::vector<std::shared_ptr<QP::ParseAttribute>>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (_QWORD *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::vector<std::shared_ptr<QP::ParseAttribute>>*,std::vector<std::shared_ptr<QP::ParseAttribute>>*,std::vector<std::shared_ptr<QP::ParseAttribute>>*>(v7, (uint64_t)a3, a1[1], (_QWORD *)a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::vector<std::shared_ptr<QP::ParseAttribute>>*,std::vector<std::shared_ptr<QP::ParseAttribute>>*,std::vector<std::shared_ptr<QP::ParseAttribute>>*>(uint64_t a1, _QWORD **a2, _QWORD **a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD **v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      std::vector<std::shared_ptr<QP::ParseAttribute>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>((char *)v4, *v6, v6[1], ((char *)v6[1] - (char *)*v6) >> 4);
      v4 = v11 + 24;
      v11 += 24;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::vector<std::shared_ptr<QP::ParseAttribute>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_218E2787C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::vector<std::shared_ptr<QP::ParseAttribute>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::vector<std::shared_ptr<QP::ParseAttribute>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::vector<std::shared_ptr<QP::ParseAttribute>>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::vector<std::shared_ptr<QP::ParseAttribute>>*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

_QWORD *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::shared_ptr<QP::ParseAttribute>> *,std::vector<std::shared_ptr<QP::ParseAttribute>> *,std::vector<std::shared_ptr<QP::ParseAttribute>> *>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;

  if (a3 != a2)
  {
    v6 = a4 - 24;
    v7 = a3;
    do
    {
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__vdeallocate((void **)v6);
      v8 = *(_OWORD *)(v7 - 3);
      v7 -= 3;
      *(_OWORD *)v6 = v8;
      *(_QWORD *)(v6 + 16) = v7[2];
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
      v6 -= 24;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::shared_ptr<QP::ParseAttribute>> *,std::vector<std::shared_ptr<QP::ParseAttribute>> *,std::vector<std::shared_ptr<QP::ParseAttribute>> *>(uint64_t a1, uint64_t **a2, uint64_t **a3, uint64_t a4)
{
  uint64_t **v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != (uint64_t **)a4)
        std::vector<std::shared_ptr<QP::ParseAttribute>>::__assign_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>(a4, *v5, v5[1], ((char *)v5[1] - (char *)*v5) >> 4);
      v5 += 3;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::vector<std::shared_ptr<QP::ParseAttribute>>::__assign_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;

  v6 = a2;
  v8 = *(uint64_t **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__vdeallocate((void **)a1);
    if (a4 >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v9 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v10 = v9 >> 3;
    if (v9 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = (uint64_t)std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v13 = *(uint64_t **)(a1 + 8);
    while (v6 != a3)
    {
      v14 = v6[1];
      *v13 = *v6;
      v13[1] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v6 += 2;
      v13 += 2;
    }
LABEL_25:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  result = *(_QWORD *)(a1 + 8);
  v17 = (result - (uint64_t)v8) >> 4;
  if (v17 < a4)
  {
    v18 = &a2[2 * v17];
    if ((uint64_t *)result != v8)
    {
      v19 = 16 * v17;
      do
      {
        result = (uint64_t)std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v8, v6);
        v6 += 2;
        v8 += 2;
        v19 -= 16;
      }
      while (v19);
      v8 = *(uint64_t **)(a1 + 8);
    }
    v13 = v8;
    if (v18 != a3)
    {
      v13 = v8;
      do
      {
        v20 = v18[1];
        *v13 = *v18;
        v13[1] = v20;
        if (v20)
        {
          v21 = (unint64_t *)(v20 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v18 += 2;
        v13 += 2;
      }
      while (v18 != a3);
    }
    goto LABEL_25;
  }
  if (a2 == a3)
  {
    v23 = v8;
  }
  else
  {
    v23 = v8;
    do
    {
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v8, v6);
      v6 += 2;
      v8 += 2;
      v23 += 2;
    }
    while (v6 != a3);
    result = *(_QWORD *)(a1 + 8);
  }
  while ((uint64_t *)result != v23)
    result = std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](result - 16);
  *(_QWORD *)(a1 + 8) = v23;
  return result;
}

_QWORD *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::vector<std::shared_ptr<QP::ParseAttribute>>*,std::vector<std::shared_ptr<QP::ParseAttribute>>*,std::vector<std::shared_ptr<QP::ParseAttribute>>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD v6[3];
  char v7;
  _QWORD *v8;
  _QWORD *v9;

  v4 = a4;
  v9 = a4;
  v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      *(_OWORD *)v4 = *(_OWORD *)a2;
      v4[2] = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v4 += 3;
      a2 += 24;
    }
    while (a2 != a3);
    v9 = v4;
  }
  v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::vector<std::shared_ptr<QP::ParseAttribute>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

void std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::vector<std::shared_ptr<QP::Parse>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::Parse>*>,std::__wrap_iter<std::shared_ptr<QP::Parse>*>>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD v33[5];

  v5 = (_QWORD *)a2;
  if (a5 < 1)
    return v5;
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    v13 = *a1;
    v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
    if (v14 >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v15 = (a2 - v13) >> 4;
    v16 = v10 - v13;
    if (v16 >> 3 > v14)
      v14 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v33[4] = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(v9, v17);
    else
      v18 = 0;
    v26 = (uint64_t *)&v18[16 * v15];
    v33[0] = v18;
    v33[1] = v26;
    v33[3] = &v18[16 * v17];
    v27 = &v26[2 * a5];
    do
    {
      *v26 = *a3;
      v28 = a3[1];
      v26[1] = v28;
      if (v28)
      {
        v29 = (unint64_t *)(v28 + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v26 += 2;
      a3 += 2;
    }
    while (v26 != v27);
    v33[2] = v27;
    v5 = (_QWORD *)std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__swap_out_circular_buffer(a1, v33, v5);
    std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer((uint64_t)v33);
    return v5;
  }
  v19 = (uint64_t)(v12 - a2) >> 4;
  if (v19 >= a5)
  {
    v20 = &a3[2 * a5];
LABEL_29:
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__move_range((uint64_t)a1, a2, v12, (char *)(a2 + 16 * a5));
    if (v20 != a3)
    {
      v31 = v5;
      do
      {
        std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v31, a3);
        a3 += 2;
        v31 += 2;
      }
      while (a3 != v20);
    }
    return v5;
  }
  v20 = &a3[2 * v19];
  if (v20 == a4)
  {
    v22 = *(uint64_t **)(v9 - 8);
  }
  else
  {
    v21 = &a3[2 * v19];
    v22 = *(uint64_t **)(v9 - 8);
    do
    {
      *v22 = *v21;
      v23 = v21[1];
      v22[1] = v23;
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v21 += 2;
      v22 += 2;
    }
    while (v21 != a4);
  }
  a1[1] = (uint64_t)v22;
  if ((uint64_t)(v12 - a2) >= 1)
    goto LABEL_29;
  return v5;
}

void sub_218E27E6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*,false>(uint64_t *a1, __int128 *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, uint64_t))
{
  __int128 *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;

  if (a1 != a2)
  {
    v5 = (__int128 *)(a1 + 16);
    if (a1 + 16 != a2)
    {
      v7 = 0;
      v8 = a1;
      do
      {
        v9 = v8;
        v8 = (uint64_t)v5;
        if ((*a3)(v5, v9))
        {
          v16 = *(_OWORD *)v8;
          *(_QWORD *)v8 = 0;
          *(_QWORD *)(v8 + 8) = 0;
          v10 = v7;
          while (1)
          {
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](a1 + v10 + 16, (__int128 *)(a1 + v10));
            if (!v10)
              break;
            v11 = (*a3)(&v16, a1 + v10 - 16);
            v10 -= 16;
            if ((v11 & 1) == 0)
            {
              v12 = a1 + v10 + 16;
              goto LABEL_10;
            }
          }
          v12 = a1;
LABEL_10:
          std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v12, &v16);
          v13 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
          if (*((_QWORD *)&v16 + 1))
          {
            v14 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
        }
        v5 = (__int128 *)(v8 + 16);
        v7 += 16;
      }
      while (v8 + 16 != a2);
    }
  }
}

void sub_218E282E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  __int128 *v4;
  __int128 *v5;
  __int128 *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  if (a1 != a2)
  {
    v4 = a1;
    v5 = a1 + 1;
    if (a1 + 1 != a2)
    {
      do
      {
        v7 = v5;
        if ((*a3)(v5, v4))
        {
          v11 = *v7;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v7 + 1) = 0;
          do
          {
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)(v4 + 1), v4);
            --v4;
          }
          while (((*a3)(&v11, v4) & 1) != 0);
          std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)(v4 + 1), &v11);
          v8 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
          if (*((_QWORD *)&v11 + 1))
          {
            v9 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
            do
              v10 = __ldaxr(v9);
            while (__stlxr(v10 - 1, v9));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
        }
        v5 = v7 + 1;
        v4 = v7;
      }
      while (v7 + 1 != a2);
    }
  }
}

void sub_218E283E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::Parse> *,BOOL (*&)(std::shared_ptr<QP::Parse>&,std::shared_ptr<QP::Parse>&)>(uint64_t a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  __int128 *v4;
  __int128 *v6;
  __int128 *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v15;

  v4 = a2;
  v15 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (((*a3)(&v15, a2 - 1) & 1) != 0)
  {
    v6 = (__int128 *)a1;
    do
      ++v6;
    while (((*a3)(&v15, v6) & 1) == 0);
  }
  else
  {
    v7 = (__int128 *)(a1 + 16);
    do
    {
      v6 = v7;
      if (v7 >= v4)
        break;
      v8 = (*a3)(&v15, v7);
      v7 = v6 + 1;
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      --v4;
    while (((*a3)(&v15, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = *(_QWORD *)v4;
    *(_QWORD *)v4 = v9;
    v10 = *((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = *((_QWORD *)v4 + 1);
    *((_QWORD *)v4 + 1) = v10;
    do
      ++v6;
    while (!(*a3)(&v15, v6));
    do
      --v4;
    while (((*a3)(&v15, v4) & 1) != 0);
  }
  if (v6 - 1 != (__int128 *)a1)
    std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](a1, v6 - 1);
  std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)(v6 - 1), &v15);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v6;
}

void sub_218E2856C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__int128 *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::Parse> *,BOOL (*&)(std::shared_ptr<QP::Parse>&,std::shared_ptr<QP::Parse>&)>(uint64_t a1, uint64_t *a2, uint64_t (**a3)(uint64_t, __int128 *))
{
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v18;

  v6 = 0;
  v18 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  do
  {
    v7 = (*a3)(a1 + v6 + 16, &v18);
    v6 += 16;
  }
  while ((v7 & 1) != 0);
  v8 = a1 + v6;
  if (v6 == 16)
  {
    do
    {
      if (v8 >= (unint64_t)a2)
        break;
      a2 -= 2;
    }
    while (((*a3)((uint64_t)a2, &v18) & 1) == 0);
  }
  else
  {
    do
      a2 -= 2;
    while (!(*a3)((uint64_t)a2, &v18));
  }
  if (v8 >= (unint64_t)a2)
  {
    v13 = (__int128 *)(v8 - 16);
  }
  else
  {
    v9 = (uint64_t *)(a1 + v6);
    v10 = a2;
    do
    {
      v11 = *v9;
      *v9 = *v10;
      *v10 = v11;
      v12 = v9[1];
      v9[1] = v10[1];
      v10[1] = v12;
      do
        v9 += 2;
      while (((*a3)((uint64_t)v9, &v18) & 1) != 0);
      do
        v10 -= 2;
      while (!(*a3)((uint64_t)v10, &v18));
    }
    while (v9 < v10);
    v13 = (__int128 *)(v9 - 2);
  }
  if (v13 != (__int128 *)a1)
    std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](a1, v13);
  std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)v13, &v18);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v13;
}

void sub_218E2871C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;

  v6 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)(a2 - 2, a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        v9 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v10 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a1 + 4, a3);
      v11 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      v20 = *(_OWORD *)v11;
      *v11 = 0;
      v11[1] = 0;
      v14 = v12;
      while (1)
      {
        std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)a1 + v14 + 48, (__int128 *)((char *)a1 + v14 + 32));
        if (v14 == -32)
          break;
        v15 = (*a3)((uint64_t *)&v20, (uint64_t *)((char *)a1 + v14 + 16));
        v14 -= 16;
        if ((v15 & 1) == 0)
        {
          v16 = (uint64_t)a1 + v14 + 48;
          goto LABEL_12;
        }
      }
      v16 = (uint64_t)a1;
LABEL_12:
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v16, &v20);
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
      if (*((_QWORD *)&v20 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (++v13 == 8)
        return v11 + 2 == a2;
    }
    v10 = v11;
    v12 += 16;
    v11 += 2;
    if (v11 == a2)
      return 1;
  }
}

void sub_218E28944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__int128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*,std::shared_ptr<QP::Parse>*>(char *a1, char *a2, __int128 *a3, uint64_t (**a4)(__int128 *, uint64_t))
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  if (a1 != a2)
  {
    v6 = (uint64_t)a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t)&a1[16 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if ((__int128 *)v6 != a3)
    {
      v14 = (__int128 *)v6;
      do
      {
        if ((*a4)(v14, (uint64_t)a1))
        {
          v15 = *(_QWORD *)v14;
          *(_QWORD *)v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v15;
          v16 = *((_QWORD *)v14 + 1);
          *((_QWORD *)v14 + 1) = *((_QWORD *)a1 + 1);
          *((_QWORD *)a1 + 1) = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*>((uint64_t)a1, a4, v9, (uint64_t)a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = (uint64_t)a3;
    }
    if (v8 >= 17)
    {
      v17 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*>((uint64_t)a1, v6, (unsigned int (**)(uint64_t, uint64_t))a4, v17);
        v6 -= 16;
      }
      while (v17-- > 2);
    }
    return (__int128 *)v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*>(uint64_t a1, uint64_t (**a2)(__int128 *, uint64_t), uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (a4 - a1) >> 4)
    {
      v10 = (a4 - a1) >> 3;
      v11 = v10 + 1;
      v12 = (__int128 *)(a1 + 16 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(v12, (uint64_t)(v12 + 1)))
      {
        ++v12;
        v11 = v13;
      }
      if (((*a2)(v12, v5) & 1) == 0)
      {
        v19 = *(_OWORD *)v5;
        *(_QWORD *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        do
        {
          v14 = (uint64_t)v12;
          std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v5, v12);
          if (v7 < v11)
            break;
          v15 = (2 * v11) | 1;
          v12 = (__int128 *)(a1 + 16 * v15);
          v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            v11 = v15;
          }
          else if ((*a2)((__int128 *)(a1 + 16 * v15), (uint64_t)(v12 + 1)))
          {
            ++v12;
          }
          else
          {
            v11 = v15;
          }
          v5 = v14;
        }
        while (!(*a2)(v12, (uint64_t)&v19));
        std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v14, &v19);
        v16 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
        if (*((_QWORD *)&v19 + 1))
        {
          v17 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
      }
    }
  }
}

void sub_218E28BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*>(uint64_t a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;

  if (a4 >= 2)
  {
    v13 = *(_OWORD *)a1;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v7 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a3, a4);
    v8 = v7;
    v9 = (__int128 *)(a2 - 16);
    if (v7 == v9)
    {
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)v7, &v13);
    }
    else
    {
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)v7, v9);
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)v9, &v13);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*>(a1, (uint64_t)(v8 + 1), (uint64_t (**)(__int128 *, __int128 *))a3, ((uint64_t)v8 - a1 + 16) >> 4);
    }
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
    if (*((_QWORD *)&v13 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_218E28CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = v4 >> 1;
    v8 = (__int128 *)(a1 + 16 * (v4 >> 1));
    v9 = a2 - 16;
    if ((*a3)(v8, (__int128 *)(a2 - 16)))
    {
      v14 = *(_OWORD *)v9;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      do
      {
        v10 = (uint64_t)v8;
        std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v9, v8);
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (__int128 *)(a1 + 16 * v7);
        v9 = v10;
      }
      while (((*a3)(v8, &v14) & 1) != 0);
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v10, &v14);
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
      if (*((_QWORD *)&v14 + 1))
      {
        v12 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
  }
}

void sub_218E28DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

os_log_t ___ZL14qpparserLoggerv_block_invoke()
{
  const char *v0;
  os_log_t result;

  v0 = _nlpLoggingSubsystem();
  result = os_log_create(v0, "Parser");
  qpparserLogger(void)::log = (uint64_t)result;
  return result;
}

_QWORD *std::list<std::shared_ptr<QP::ParseAttribute>>::push_back(uint64_t *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;

  result = operator new(0x20uLL);
  v5 = a2[1];
  result[2] = *a2;
  result[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *a1;
  *result = *a1;
  result[1] = a1;
  *(_QWORD *)(v8 + 8) = result;
  *a1 = (uint64_t)result;
  ++a1[2];
  return result;
}

BOOL std::string_view::starts_with[abi:ne180100](_QWORD *a1, void *__s2, size_t a3)
{
  return a1[1] >= a3 && std::string_view::compare[abi:ne180100](a1, 0, a3, __s2, a3) == 0;
}

uint64_t std::string_view::compare[abi:ne180100](_QWORD *a1, unint64_t a2, size_t a3, void *__s2, size_t a5)
{
  unint64_t v5;
  BOOL v6;
  size_t v7;
  const void *v9;
  size_t v10;
  size_t v11;
  uint64_t result;
  unsigned int v13;

  v5 = a1[1];
  v6 = v5 >= a2;
  v7 = v5 - a2;
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  v9 = (const void *)(*a1 + a2);
  if (v7 >= a3)
    v10 = a3;
  else
    v10 = v7;
  if (a5 >= v10)
    v11 = v10;
  else
    v11 = a5;
  LODWORD(result) = memcmp(v9, __s2, v11);
  if (v10 < a5)
    v13 = -1;
  else
    v13 = 1;
  if (v10 == a5)
    v13 = 0;
  if ((_DWORD)result)
    return result;
  else
    return v13;
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_218E28F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_218E290B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void std::__list_imp<std::shared_ptr<QP::ParseAttribute>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void nlp::CFScopedPtr<__CFString *>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::string>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

_QWORD *std::__tree<std::string>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, void **a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)v4 + 4) & 0x80) == 0)
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0)
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v7->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_218E2944C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

_QWORD *std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange &,unsigned short,unsigned short,void>@<X0>(_OWORD *a1@<X1>, __int128 *a2@<X2>, __int16 *a3@<X3>, unsigned __int16 *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xA8uLL);
  result = std::__shared_ptr_emplace<QP::ParseAttribute>::__shared_ptr_emplace[abi:ne180100]<CFRange &,CFRange &,unsigned short,unsigned short,std::allocator<QP::ParseAttribute>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_218E29518(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<QP::ParseAttribute>::__shared_ptr_emplace[abi:ne180100]<CFRange &,CFRange &,unsigned short,unsigned short,std::allocator<QP::ParseAttribute>,0>(_QWORD *a1, _OWORD *a2, __int128 *a3, __int16 *a4, unsigned __int16 *a5)
{
  a1[2] = 0;
  *a1 = &unk_24DA24D38;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<QP::ParseAttribute,CFRange &,CFRange &,unsigned short &,unsigned short &,QP::ParseAttribute*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_218E29564(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void **std::__tree<std::string>::find<std::string>(uint64_t a1, void **a2)
{
  void **v2;
  _QWORD *v3;
  void **v5;
  char v6;
  _QWORD *v7;

  v2 = (void **)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (void **)(a1 + 8);
  do
  {
    v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6 >= 0)
      v5 = (void **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

_QWORD *std::allocate_shared[abi:ne180100]<QP::Parse,std::allocator<QP::Parse>,nlp::CFScopedPtr<__CFString const*> &,long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),void>@<X0>(const void **a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, _QWORD **a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x78uLL);
  result = std::__shared_ptr_emplace<QP::Parse>::__shared_ptr_emplace[abi:ne180100]<nlp::CFScopedPtr<__CFString const*> &,long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),std::allocator<QP::Parse>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_218E29668(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<QP::Parse>::__shared_ptr_emplace[abi:ne180100]<nlp::CFScopedPtr<__CFString const*> &,long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),std::allocator<QP::Parse>,0>(_QWORD *a1, const void **a2, uint64_t *a3, uint64_t *a4, _QWORD **a5)
{
  a1[2] = 0;
  *a1 = &unk_24DA24DC8;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<QP::Parse,nlp::CFScopedPtr<__CFString const*> &,long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),QP::Parse*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_218E296B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::Parse>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA24DC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::Parse>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA24DC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A24D0CLL);
}

void std::__shared_ptr_emplace<QP::Parse>::__on_zero_shared(uint64_t a1)
{
  QP::Parse::~Parse((const void **)(a1 + 24));
}

uint64_t std::construct_at[abi:ne180100]<QP::Parse,nlp::CFScopedPtr<__CFString const*> &,long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),QP::Parse*>(uint64_t a1, const void **a2, uint64_t *a3, uint64_t *a4, _QWORD **a5)
{
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10[3];
  void **v11;

  v6 = *a2;
  v7 = *a3;
  v8 = *a4;
  memset(v10, 0, sizeof(v10));
  std::vector<std::shared_ptr<QP::ParseAttribute>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>((char *)v10, *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  QP::Parse::Parse(a1, v6, v7, v8, v10, 0, 0);
  v11 = (void **)v10;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v11);
  return a1;
}

void sub_218E297AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t QP::Parse::Parse(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, _QWORD **a5, uint64_t a6, char a7)
{
  CFTypeRef v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<std::shared_ptr<QP::ParseAttribute>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>((char *)(a1 + 8), *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  *(_QWORD *)(a1 + 88) = a6;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a4;
  *(_OWORD *)(a1 + 56) = xmmword_218E9F8A0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 81) = a7;
  if (a2)
  {
    v14 = CFRetain(a2);
    nlp::CFScopedPtr<__CFString const*>::reset((const void **)a1, v14);
    v16 = *(_QWORD *)(a1 + 64);
    v15 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v15 = 0;
    v16 = -1;
  }
  v18 = *a5;
  v17 = a5[1];
  if (v18 != v17)
  {
    do
    {
      v19 = v16;
      v20 = *v18;
      *(_QWORD *)(a1 + 40) += *(_QWORD *)(*v18 + 8) + 1;
      *(_QWORD *)(a1 + 56) += *(_QWORD *)(v20 + 40);
      v22 = *(_QWORD *)(v20 + 16);
      v21 = *(_QWORD *)(v20 + 24);
      if (v16 == -1)
        v16 = *(_QWORD *)(v20 + 16);
      if (*(_BYTE *)(v20 + 72))
        *(_BYTE *)(a1 + 80) = 1;
      if (QP::ParseAttribute::flag((QP::ParseAttribute *)v20) == 4)
        *(_BYTE *)(a1 + 82) = 1;
      v18 += 2;
    }
    while (v18 != v17);
    v23 = v22 - v19;
    if (v19 == -1)
      v23 = 0;
    v15 = v21 + v23;
  }
  *(_QWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 72) = v15;
  return a1;
}

void sub_218E29918(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void **v2;
  const void **v3;
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFDictionary const*>::reset(v3, 0);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  nlp::CFScopedPtr<__CFString const*>::reset(v2, 0);
  _Unwind_Resume(a1);
}

void QP::Parse::~Parse(const void **this)
{
  void **v2;

  nlp::CFScopedPtr<__CFDictionary const*>::reset(this + 11, 0);
  v2 = (void **)(this + 1);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v2);
  nlp::CFScopedPtr<__CFString const*>::reset(this, 0);
}

_QWORD *std::allocate_shared[abi:ne180100]<QP::Parse,std::allocator<QP::Parse>,nlp::CFScopedPtr<__CFString const*> &,int,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),void>@<X0>(const void **a1@<X1>, int *a2@<X2>, uint64_t *a3@<X3>, _QWORD **a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x78uLL);
  result = std::__shared_ptr_emplace<QP::Parse>::__shared_ptr_emplace[abi:ne180100]<nlp::CFScopedPtr<__CFString const*> &,int,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),std::allocator<QP::Parse>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_218E29A14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<QP::Parse>::__shared_ptr_emplace[abi:ne180100]<nlp::CFScopedPtr<__CFString const*> &,int,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),std::allocator<QP::Parse>,0>(_QWORD *a1, const void **a2, int *a3, uint64_t *a4, _QWORD **a5)
{
  a1[2] = 0;
  *a1 = &unk_24DA24DC8;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<QP::Parse,nlp::CFScopedPtr<__CFString const*> &,int,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),QP::Parse*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_218E29A60(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<QP::Parse,nlp::CFScopedPtr<__CFString const*> &,int,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),QP::Parse*>(uint64_t a1, const void **a2, int *a3, uint64_t *a4, _QWORD **a5)
{
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10[3];
  void **v11;

  v6 = *a2;
  v7 = *a3;
  v8 = *a4;
  memset(v10, 0, sizeof(v10));
  std::vector<std::shared_ptr<QP::ParseAttribute>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>((char *)v10, *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  QP::Parse::Parse(a1, v6, v7, v8, v10, 0, 0);
  v11 = (void **)v10;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v11);
  return a1;
}

void sub_218E29B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange,CFRange&,int,int,void>@<X0>(_OWORD *a1@<X1>, __int128 *a2@<X2>, int *a3@<X3>, int *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xA8uLL);
  result = std::__shared_ptr_emplace<QP::ParseAttribute>::__shared_ptr_emplace[abi:ne180100]<CFRange,CFRange&,int,int,std::allocator<QP::ParseAttribute>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_218E29B80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<QP::ParseAttribute>::__shared_ptr_emplace[abi:ne180100]<CFRange,CFRange&,int,int,std::allocator<QP::ParseAttribute>,0>(_QWORD *a1, _OWORD *a2, __int128 *a3, int *a4, int *a5)
{
  a1[2] = 0;
  *a1 = &unk_24DA24D38;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<QP::ParseAttribute,CFRange,CFRange&,int,int,QP::ParseAttribute*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_218E29BCC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<QP::ParseAttribute,CFRange,CFRange&,int,int,QP::ParseAttribute*>(uint64_t a1, _OWORD *a2, __int128 *a3, int *a4, int *a5)
{
  int v6;
  int v7;
  __int128 v8;

  v6 = *a4;
  v7 = *a5;
  v8 = *a3;
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v8;
  *(_WORD *)(a1 + 32) = v6;
  *(_DWORD *)(a1 + 34) = (unsigned __int16)v7;
  *(_QWORD *)(a1 + 40) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 48), "");
  *(_WORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  return a1;
}

_QWORD *std::allocate_shared[abi:ne180100]<QP::Parse,std::allocator<QP::Parse>,nlp::CFScopedPtr<__CFString const*> &,unsigned long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),BOOL,void>@<X0>(const void **a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, _QWORD **a4@<X4>, uint64_t a5@<X5>, char *a6@<X6>, _QWORD *a7@<X8>)
{
  _QWORD *v14;
  _QWORD *result;

  v14 = operator new(0x78uLL);
  result = std::__shared_ptr_emplace<QP::Parse>::__shared_ptr_emplace[abi:ne180100]<nlp::CFScopedPtr<__CFString const*> &,unsigned long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),BOOL,std::allocator<QP::Parse>,0>(v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14 + 3;
  a7[1] = v14;
  return result;
}

void sub_218E29CD8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<QP::Parse>::__shared_ptr_emplace[abi:ne180100]<nlp::CFScopedPtr<__CFString const*> &,unsigned long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),BOOL,std::allocator<QP::Parse>,0>(_QWORD *a1, const void **a2, uint64_t *a3, uint64_t *a4, _QWORD **a5, uint64_t a6, char *a7)
{
  a1[2] = 0;
  *a1 = &unk_24DA24DC8;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<QP::Parse,nlp::CFScopedPtr<__CFString const*> &,unsigned long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),BOOL,QP::Parse*>((uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7);
  return a1;
}

void sub_218E29D24(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<QP::Parse,nlp::CFScopedPtr<__CFString const*> &,unsigned long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),BOOL,QP::Parse*>(uint64_t a1, const void **a2, uint64_t *a3, uint64_t *a4, _QWORD **a5, uint64_t a6, char *a7)
{
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13[3];
  void **v14;

  v9 = *a2;
  v10 = *a3;
  v11 = *a4;
  memset(v13, 0, sizeof(v13));
  std::vector<std::shared_ptr<QP::ParseAttribute>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>((char *)v13, *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  QP::Parse::Parse(a1, v9, v10, v11, v13, 0, *a7);
  v14 = (void **)v13;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v14);
  return a1;
}

void sub_218E29DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<QP::Parse,std::allocator<QP::Parse>,nlp::CFScopedPtr<__CFString const*> &,int,int,std::vector<std::shared_ptr<QP::ParseAttribute>>,decltype(nullptr),void>@<X0>(const void **a1@<X1>, int *a2@<X2>, int *a3@<X3>, __int128 *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x78uLL);
  result = std::__shared_ptr_emplace<QP::Parse>::__shared_ptr_emplace[abi:ne180100]<nlp::CFScopedPtr<__CFString const*> &,int,int,std::vector<std::shared_ptr<QP::ParseAttribute>>,decltype(nullptr),std::allocator<QP::Parse>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_218E29E58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<QP::Parse>::__shared_ptr_emplace[abi:ne180100]<nlp::CFScopedPtr<__CFString const*> &,int,int,std::vector<std::shared_ptr<QP::ParseAttribute>>,decltype(nullptr),std::allocator<QP::Parse>,0>(_QWORD *a1, const void **a2, int *a3, int *a4, __int128 *a5)
{
  a1[2] = 0;
  *a1 = &unk_24DA24DC8;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<QP::Parse,nlp::CFScopedPtr<__CFString const*> &,int,int,std::vector<std::shared_ptr<QP::ParseAttribute>>,decltype(nullptr),QP::Parse*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_218E29EA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<QP::Parse,nlp::CFScopedPtr<__CFString const*> &,int,int,std::vector<std::shared_ptr<QP::ParseAttribute>>,decltype(nullptr),QP::Parse*>(uint64_t a1, const void **a2, int *a3, int *a4, __int128 *a5)
{
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  void **v12;

  v6 = *a2;
  v7 = *a3;
  v8 = *a4;
  v10 = *a5;
  v11 = *((_QWORD *)a5 + 2);
  *((_QWORD *)a5 + 1) = 0;
  *((_QWORD *)a5 + 2) = 0;
  *(_QWORD *)a5 = 0;
  QP::Parse::Parse(a1, v6, v7, v8, (_QWORD **)&v10, 0, 0);
  v12 = (void **)&v10;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v12);
  return a1;
}

void sub_218E29F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<QP::Completion,std::allocator<QP::Completion>,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,QPSymbolFlag &,void>@<X0>(CFTypeRef *a1@<X1>, CFTypeRef *a2@<X2>, CFTypeRef *a3@<X3>, CFTypeRef *a4@<X4>, CFTypeRef *a5@<X5>, CFTypeRef *a6@<X6>, CFTypeRef *a7@<X7>, _QWORD *a8@<X8>, CFTypeRef *a9, __int16 *a10)
{
  _QWORD *v17;
  _QWORD *result;

  v17 = operator new(0x68uLL);
  result = std::__shared_ptr_emplace<QP::Completion>::__shared_ptr_emplace[abi:ne180100]<__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,QPSymbolFlag &,std::allocator<QP::Completion>,0>(v17, a1, a2, a3, a4, a5, a6, a7, a9, a10);
  *a8 = v17 + 3;
  a8[1] = v17;
  return result;
}

void sub_218E29FD8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<QP::Completion>::__shared_ptr_emplace[abi:ne180100]<__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,QPSymbolFlag &,std::allocator<QP::Completion>,0>(_QWORD *a1, CFTypeRef *a2, CFTypeRef *a3, CFTypeRef *a4, CFTypeRef *a5, CFTypeRef *a6, CFTypeRef *a7, CFTypeRef *a8, CFTypeRef *a9, __int16 *a10)
{
  a1[2] = 0;
  *a1 = &unk_24DA24E18;
  a1[1] = 0;
  QP::Completion::Completion((uint64_t)(a1 + 3), *a2, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10);
  return a1;
}

void sub_218E2A05C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::Completion>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA24E18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::Completion>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA24E18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A24D0CLL);
}

void std::__shared_ptr_emplace<QP::Completion>::__on_zero_shared(uint64_t a1)
{
  QP::Completion::~Completion((const void **)(a1 + 24));
}

uint64_t QP::Completion::Completion(uint64_t a1, CFTypeRef cf, CFTypeRef a3, CFTypeRef a4, CFTypeRef a5, CFTypeRef a6, CFTypeRef a7, CFTypeRef a8, CFTypeRef cfa, __int16 a10)
{
  const void **v17;
  const void **v18;
  const void **v19;
  CFTypeRef v20;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef v26;
  CFTypeRef v27;
  const void **v29;
  const void **v30;
  const void **v31;
  const void **v32;

  *(_OWORD *)(a1 + 16) = 0u;
  v17 = (const void **)(a1 + 16);
  *(_OWORD *)(a1 + 32) = 0u;
  v18 = (const void **)(a1 + 32);
  *(_OWORD *)(a1 + 48) = 0u;
  v19 = (const void **)(a1 + 48);
  *(_QWORD *)(a1 + 64) = 0;
  v31 = (const void **)(a1 + 24);
  v32 = (const void **)(a1 + 8);
  v29 = (const void **)(a1 + 56);
  v30 = (const void **)(a1 + 40);
  *(_OWORD *)a1 = 0u;
  *(_WORD *)(a1 + 72) = a10;
  if (cf)
  {
    v20 = CFRetain(cf);
    nlp::CFScopedPtr<__CFString const*>::reset((const void **)a1, v20);
  }
  if (a3)
  {
    v21 = CFRetain(a3);
    nlp::CFScopedPtr<__CFString const*>::reset(v32, v21);
  }
  if (a4)
  {
    v22 = CFRetain(a4);
    nlp::CFScopedPtr<__CFString const*>::reset(v17, v22);
  }
  if (a5)
  {
    v23 = CFRetain(a5);
    nlp::CFScopedPtr<__CFString const*>::reset(v31, v23);
  }
  if (a6)
  {
    v24 = CFRetain(a6);
    nlp::CFScopedPtr<__CFString const*>::reset(v18, v24);
  }
  if (a7)
  {
    v25 = CFRetain(a7);
    nlp::CFScopedPtr<__CFString const*>::reset(v30, v25);
  }
  if (a8)
  {
    v26 = CFRetain(a8);
    nlp::CFScopedPtr<__CFString const*>::reset(v19, v26);
  }
  if (cfa)
  {
    v27 = CFRetain(cfa);
    nlp::CFScopedPtr<__CFString const*>::reset(v29, v27);
  }
  return a1;
}

void sub_218E2A228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void **a9, const void **a10, const void **a11, const void **a12)
{
  const void **v12;
  const void **v13;
  const void **v14;
  const void **v15;

  nlp::CFScopedPtr<__CFDictionary const*>::reset(v12 + 8, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(a9, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(v15, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(a10, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(v14, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(a11, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(v13, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(a12, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(v12, 0);
  _Unwind_Resume(a1);
}

void QP::Completion::~Completion(const void **this)
{
  nlp::CFScopedPtr<__CFDictionary const*>::reset(this + 8, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(this + 7, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(this + 6, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(this + 5, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(this + 4, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(this + 3, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(this + 2, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(this + 1, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(this, 0);
}

_QWORD *QPSpotlightCacheCreate(int a1)
{
  _QWORD *v2;
  CFArrayCallBacks v4;

  v2 = malloc_type_malloc(8uLL, 0x2004093837F09uLL);
  *(_OWORD *)&v4.version = xmmword_24DA24E58;
  *(_OWORD *)&v4.release = *(_OWORD *)&off_24DA24E68;
  v4.equal = 0;
  *v2 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], a1, &v4);
  return v2;
}

uint64_t SIGeneralTrieRetainCallback(const __CFAllocator *a1, const void *a2)
{
  return SIGeneralTrieRetain();
}

uint64_t SIGeneralTrieReleaseCallback(const __CFAllocator *a1, const void *a2)
{
  return SIGeneralTrieRelease();
}

void QPSpotlightCacheUpdate(CFArrayRef *a1, int a2)
{
  const void *v4;
  CFIndex Count;
  __CFArray *v6;

  if (a1)
  {
    v4 = (const void *)SIGeneralTrieCreateWithFileDescriptors();
    Count = CFArrayGetCount(*a1);
    v6 = *a1;
    if (Count <= a2)
    {
      CFArrayAppendValue(v6, v4);
    }
    else
    {
      if (CFArrayGetValueAtIndex(v6, a2))
        SIGeneralTrieRelease();
      CFArraySetValueAtIndex(*a1, a2, v4);
    }
  }
}

void QPSpotlightCacheEnumerateStrings(CFArrayRef *a1, uint64_t a2)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  uint64_t v7;
  const void *ValueAtIndex;
  _QWORD v9[5];

  if (a1)
  {
    Count = CFArrayGetCount(*a1);
    if (Count >= 1)
    {
      v5 = Count;
      v6 = 0;
      v7 = MEMORY[0x24BDAC760];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*a1, v6);
        if (ValueAtIndex)
        {
          v9[0] = v7;
          v9[1] = 0x40000000;
          v9[2] = __QPSpotlightCacheEnumerateStrings_block_invoke;
          v9[3] = &unk_24DA24E88;
          v9[4] = a2;
          enumerateCompletions((uint64_t)ValueAtIndex, &stru_24DA27910, (uint64_t)v9);
        }
        ++v6;
      }
      while (v5 != v6);
    }
  }
}

void enumerateCompletions(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  const __CFString *v3;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  uint64_t v6;
  CFIndex v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x24BDAC8D0];
  v8[0] = a3;
  if (a3)
  {
    if (a2)
      v3 = a2;
    else
      v3 = &stru_24DA27910;
    CFStringGetLength(v3);
    Length = CFStringGetLength(v3);
    MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    MEMORY[0x24BDAC7A8](MaximumSizeForEncoding);
    if (CFStringGetCString(v3, (char *)v8 - v6, v7, 0x8000100u))
      SIGeneralTrieSearch();
  }
}

void QPSpotlightCacheRelease(CFArrayRef *a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex i;

  if (a1)
  {
    Count = CFArrayGetCount(*a1);
    if (Count >= 1)
    {
      v3 = Count;
      for (i = 0; i != v3; ++i)
      {
        if (CFArrayGetValueAtIndex(*a1, i))
          SIGeneralTrieRelease();
        CFArraySetValueAtIndex(*a1, i, 0);
      }
    }
    CFRelease(*a1);
    *a1 = 0;
  }
}

uint64_t completionCallback(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 16))();
}

{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 16))();
}

BOOL QP::PhotosParserFormatter::isValid(uint64_t a1, _QWORD **a2)
{
  _QWORD *v2;

  v2 = *a2;
  return *a2 && *v2 && v2[5] != 0;
}

uint64_t QP::PhotosParserFormatter::setParse(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = QP::Formatter::setParse(a1, (uint64_t)&v10);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_218E2A834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QP::PhotosParserFormatter::updateParseWithDateAttribute(QP::Formatter *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  CFRange *v9;
  std::__shared_weak_count *v10;

  v3 = *(std::__shared_weak_count **)(a3 + 8);
  v9 = *(CFRange **)a3;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  QP::Formatter::updateParseWithDateAttribute(a1, a2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_218E2A8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QP::PhotosParserFormatter::~PhotosParserFormatter(QP::PhotosParserFormatter *this)
{
  QP::Formatter::~Formatter(this);
  JUMPOUT(0x219A24D0CLL);
}

_QWORD *QPStringCacheCreateWithOptions(const void *a1, const __CFDictionary *a2)
{
  _QWORD *v4;
  CFTypeRef v5;
  const __CFAllocator *v6;
  uint64_t MutableWithOptions;
  const __CFNumber *Value;
  const __CFNumber *v9;
  const __CFArray *v10;
  __CFSet *Mutable;
  CFIndex Count;
  CFIndex v13;
  CFIndex i;
  const void *ValueAtIndex;
  const __CFArray *v16;
  __CFSet *v17;
  CFIndex v18;
  CFIndex v19;
  CFIndex j;
  const void *v21;

  v4 = malloc_type_malloc(0x50uLL, 0x106004038EB2D4CuLL);
  if (v4)
  {
    if (a1)
      v5 = CFRetain(a1);
    else
      v5 = 0;
    v4[1] = 0;
    *v4 = v5;
    v4[2] = 0;
    v4[3] = 0;
    v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v4[4] = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6B8]);
    MutableWithOptions = SIGeneralTrieCreateMutableWithOptions();
    *((_DWORD *)v4 + 14) = 0x7FFFFFFF;
    v4[5] = MutableWithOptions;
    v4[6] = 0;
    v4[8] = 0x3FF0000000000000;
    if (a2)
    {
      if (CFDictionaryContainsKey(a2, CFSTR("cacheSize")))
      {
        Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("cacheSize"));
        CFNumberGetValue(Value, kCFNumberCFIndexType, v4 + 7);
      }
      if (CFDictionaryContainsKey(a2, CFSTR("cacheGrowthFactor")))
      {
        v9 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("cacheGrowthFactor"));
        CFNumberGetValue(v9, kCFNumberDoubleType, v4 + 8);
      }
      if (CFDictionaryContainsKey(a2, CFSTR("doNotPruneList")))
      {
        v10 = (const __CFArray *)CFDictionaryGetValue(a2, CFSTR("doNotPruneList"));
        Mutable = CFSetCreateMutable(v6, 0, MEMORY[0x24BDBD6B8]);
        Count = CFArrayGetCount(v10);
        if (Count >= 1)
        {
          v13 = Count;
          for (i = 0; i != v13; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v10, i);
            CFSetAddValue(Mutable, ValueAtIndex);
          }
        }
        v4[2] = Mutable;
      }
      if (CFDictionaryContainsKey(a2, CFSTR("alwaysPruneList")))
      {
        v16 = (const __CFArray *)CFDictionaryGetValue(a2, CFSTR("alwaysPruneList"));
        v17 = CFSetCreateMutable(v6, 0, MEMORY[0x24BDBD6B8]);
        v18 = CFArrayGetCount(v16);
        if (v18 >= 1)
        {
          v19 = v18;
          for (j = 0; j != v19; ++j)
          {
            v21 = CFArrayGetValueAtIndex(v16, j);
            CFSetAddValue(v17, v21);
          }
        }
        v4[1] = v17;
      }
    }
    *((_DWORD *)v4 + 18) = 1;
  }
  return v4;
}

uint64_t QPStringCacheAddWithCount(uint64_t result, CFStringRef theString, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;

  if (result)
  {
    v4 = result;
    result = *(_QWORD *)(result + 40);
    if (result)
    {
      v8 = 0;
      add(result, *(__CFSet **)(v4 + 32), *(const __CFSet **)(v4 + 16), theString, a3, a4, (BOOL *)&v8, (uint64_t)&v8 + 1);
      v5 = v8;
      if ((_BYTE)v8 && HIBYTE(v8))
        ++*(_QWORD *)(v4 + 24);
      v6 = *(int *)(v4 + 56);
      if ((_DWORD)v6 != 0x7FFFFFFF)
      {
        v7 = *(_QWORD *)(v4 + 24) + v6 + (uint64_t)(*(double *)(v4 + 64) * (double)(int)v6);
        if (SIGeneralTrieGetCount() > v7)
          prune(v4);
      }
      if (SIGeneralTrieGetCount() - *(_QWORD *)(v4 + 24) > (uint64_t)(*(double *)(v4 + 64) * (double)*(int *)(v4 + 56)))
        return 1;
      else
        return v5;
    }
  }
  return result;
}

void add(uint64_t a1, __CFSet *a2, const __CFSet *a3, CFStringRef theString, uint64_t a5, uint64_t a6, BOOL *a7, uint64_t a8)
{
  const __CFAllocator *v14;
  const __CFString *v15;
  const __CFString *v16;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  uint64_t v19;
  const char *v20;
  CFIndex v21;
  int v22;
  int v23;
  CFNumberRef v24;
  _BYTE *v25;
  CFNumberRef v26;
  _QWORD v27[2];
  int valuePtr;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  valuePtr = a5;
  if (a1)
  {
    if (theString)
    {
      if (CFStringGetLength(theString))
      {
        v14 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v15 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("%d:%@"), a5, theString);
        if (v15)
        {
          v16 = v15;
          Length = CFStringGetLength(v15);
          MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
          v27[1] = v27;
          MEMORY[0x24BDAC7A8](MaximumSizeForEncoding);
          v20 = (char *)v27 - v19;
          if (CFStringGetCString(v16, (char *)v27 - v19, v21, 0x8000100u))
          {
            v27[0] = a8;
            strlen(v20);
            v22 = SIGeneralTrieContainsKey();
            if (a7)
              *a7 = v22 == 0;
            v23 = v22;
            SIGeneralTrieAddKeyWithScore();
            v24 = CFNumberCreate(v14, kCFNumberIntType, &valuePtr);
            v25 = (_BYTE *)v27[0];
            if (v24)
            {
              v26 = v24;
              if (a3 && v27[0] && CFSetContainsValue(a3, v24) && !v23)
                *v25 = 1;
              CFSetAddValue(a2, v26);
              CFRelease(v26);
            }
          }
          CFRelease(v16);
        }
      }
    }
  }
}

void prune(uint64_t a1)
{
  uint64_t Count;
  const __CFSet *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  const void **v7;
  size_t v8;
  const void **v9;
  const void *v10;
  const __CFSet *v11;
  const void *v12;
  uint64_t v13;
  const __CFDictionary *v14;
  CFIndex v15;
  unint64_t v16;
  const void **v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __CFBinaryHeap *v22;
  uint64_t v23;
  CFIndex v24;
  CFIndex v25;
  __CFBinaryHeap *v26;
  uint64_t v27;
  CFIndex v28;
  uint64_t v29;
  CFIndex *v30;
  __CFDictionary *Mutable;
  CFIndex v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[8];
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t MutableWithOptions;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 40) && !*(_QWORD *)a1)
  {
    Count = CFSetGetCount(*(CFSetRef *)(a1 + 32));
    v3 = *(const __CFSet **)(a1 + 16);
    if (v3)
      v3 = (const __CFSet *)CFSetGetCount(v3);
    v30 = &v28;
    v4 = *(int *)(a1 + 56);
    v35 = v4;
    if ((const __CFSet *)Count == v3)
      v5 = 0x7FFFFFFFLL;
    else
      v5 = v4 / (Count - (uint64_t)v3);
    MEMORY[0x24BDAC7A8](v3);
    v7 = (const void **)((char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v6 >= 0x200)
      v8 = 512;
    else
      v8 = v6;
    bzero((char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    CFSetGetValues(*(CFSetRef *)(a1 + 32), v7);
    *(_QWORD *)(a1 + 24) = 0;
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], Count, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Count >= 1)
    {
      v9 = v7;
      do
      {
        v10 = *v9;
        v11 = *(const __CFSet **)(a1 + 16);
        if (!v11 || !CFSetContainsValue(v11, *v9))
        {
          v12 = (const void *)SITrieCompletionQueueCreate();
          CFDictionarySetValue(Mutable, v10, v12);
          CFRelease(v12);
        }
        ++v9;
        --Count;
      }
      while (Count);
    }
    v37 = 0;
    v38 = &v37;
    v39 = 0x2000000000;
    MutableWithOptions = 0;
    MutableWithOptions = SIGeneralTrieCreateMutableWithOptions();
    v13 = *(_QWORD *)(a1 + 40);
    v36[0] = MEMORY[0x24BDAC760];
    v36[1] = 0x40000000;
    v36[2] = ___ZL5pruneP14_QPStringCache_block_invoke;
    v36[3] = &unk_24DA24F50;
    v36[4] = &v37;
    v36[5] = a1;
    v14 = Mutable;
    v36[6] = Mutable;
    v36[7] = v35;
    enumerateCompletions(v13, &stru_24DA27910, (uint64_t)v36);
    v15 = CFDictionaryGetCount(v14);
    MEMORY[0x24BDAC7A8](v15);
    v17 = (const void **)((char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v16 >= 0x200)
      v18 = 512;
    else
      v18 = v16;
    bzero((char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v18);
    CFDictionaryGetKeysAndValues(v14, v7, v17);
    v29 = a1;
    if (v15 >= 1)
    {
      v28 = v15 - 1;
      v32 = v15;
      v19 = 0;
      v20 = 0;
      if (v5 <= 1)
        v21 = 1;
      else
        v21 = v5;
      v33 = v21;
      do
      {
        v22 = (__CFBinaryHeap *)v17[v19];
        v23 = v33;
        v34 = v33 + v20;
        while (CFBinaryHeapGetCount(v22) >= 1)
        {
          CFBinaryHeapGetMinimum(v22);
          SITrieCompletionGetCompletion();
          SITrieCompletionGetLength();
          SITrieCompletionGetPayload();
          SITrieCompletionGetScore();
          SIGeneralTrieAddKeyWithScore();
          CFBinaryHeapRemoveMinimumValue(v22);
          ++v20;
          if (!--v23)
          {
            v20 = v34;
            break;
          }
        }
        if (v20 >= v35)
          break;
        ++v19;
      }
      while (v19 != v32);
      v24 = v28;
      if (v20 < v35)
      {
        do
        {
          v25 = v24;
          v26 = (__CFBinaryHeap *)*v17;
          if (CFBinaryHeapGetCount((CFBinaryHeapRef)*v17) >= 1)
          {
            CFBinaryHeapGetMinimum(v26);
            SITrieCompletionGetCompletion();
            SITrieCompletionGetLength();
            SITrieCompletionGetPayload();
            SITrieCompletionGetScore();
            SIGeneralTrieAddKeyWithScore();
            CFBinaryHeapRemoveMinimumValue(v26);
            ++v20;
          }
          if (v20 >= v35)
            break;
          v24 = v25 - 1;
          ++v17;
        }
        while (v25);
      }
    }
    CFRelease(Mutable);
    v27 = v29;
    SIGeneralTrieRelease();
    *(_QWORD *)(v27 + 40) = v38[3];
    _Block_object_dispose(&v37, 8);
  }
}

void sub_218E2B218(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t QPStringCacheAdd(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  return QPStringCacheAddWithCount(a1, a2, a3, 1);
}

void QPStringCacheRemove(uint64_t a1, CFStringRef theString, unsigned int a3)
{
  if (a1)
  {
    if (*(_QWORD *)(a1 + 40))
      remove(*(_QWORD *)(a1 + 40), *(const __CFSet **)(a1 + 16), theString, a3);
  }
}

void remove(int a1, const __CFSet *a2, CFStringRef theString, unsigned int a4)
{
  const __CFAllocator *v6;
  CFNumberRef v7;
  CFNumberRef v8;
  int v9;
  const __CFString *v10;
  const __CFString *v11;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  uint64_t v14;
  const char *v15;
  CFIndex v16;
  _BYTE v17[4];
  unsigned int valuePtr;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  valuePtr = a4;
  if (theString && CFStringGetLength(theString))
  {
    v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberIntType, &valuePtr);
    if (v7)
    {
      v8 = v7;
      if (a2)
      {
        v9 = CFSetContainsValue(a2, v7);
        CFRelease(v8);
        if (v9)
          return;
      }
      else
      {
        CFRelease(v7);
      }
    }
    v10 = CFStringCreateWithFormat(v6, 0, CFSTR("%d:%@"), valuePtr, theString);
    if (v10)
    {
      v11 = v10;
      Length = CFStringGetLength(v10);
      MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
      MEMORY[0x24BDAC7A8](MaximumSizeForEncoding);
      v15 = &v17[-v14];
      if (CFStringGetCString(v11, &v17[-v14], v16, 0x8000100u))
      {
        strlen(v15);
        if (SIGeneralTrieContainsKey())
          SIGeneralTrieAddKeyWithScore();
      }
      CFRelease(v11);
    }
  }
}

uint64_t QPStringCacheGetLiveCount(uint64_t a1)
{
  if (a1 && *(_QWORD *)(a1 + 40))
    return SIGeneralTrieGetCount();
  else
    return 0;
}

void QPStringCachePrune(uint64_t a1)
{
  if (a1)
    prune(a1);
}

uint64_t QPStringCacheEnumerateStrings(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD v3[5];

  if (result)
  {
    v2 = *(_QWORD *)(result + 40);
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 0x40000000;
    v3[2] = __QPStringCacheEnumerateStrings_block_invoke;
    v3[3] = &unk_24DA24F28;
    v3[4] = a2;
    return enumerateCompletions(v2, &stru_24DA27910, (uint64_t)v3);
  }
  return result;
}

uint64_t enumerateCompletions(uint64_t result, const __CFString *a2, uint64_t a3)
{
  const __CFString *v3;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  uint64_t v6;
  CFIndex v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x24BDAC8D0];
  v8[0] = a3;
  if (result && a3)
  {
    if (a2)
      v3 = a2;
    else
      v3 = &stru_24DA27910;
    CFStringGetLength(v3);
    Length = CFStringGetLength(v3);
    MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    MEMORY[0x24BDAC7A8](MaximumSizeForEncoding);
    result = CFStringGetCString(v3, (char *)v8 - v6, v7, 0x8000100u);
    if ((_DWORD)result)
      return SIGeneralTrieSearch();
  }
  return result;
}

BOOL QPStringCacheHasPrefixWithValue(_BOOL8 result, uint64_t a2, uint64_t a3)
{
  if (result)
    return containsPrefixWithValue(*(_QWORD *)(result + 40), a2, a3);
  return result;
}

BOOL containsPrefixWithValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFString *v4;
  const __CFString *v5;
  _BOOL8 v6;
  _QWORD v8[5];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;

  v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("%d:%@"), a3, a2);
  if (!v4)
    return 0;
  v5 = v4;
  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 0x40000000;
  v8[2] = ___ZL23containsPrefixWithValueP14_SIGeneralTriePKS_PK10__CFStringj_block_invoke;
  v8[3] = &unk_24DA24F78;
  v8[4] = &v9;
  enumerateCompletions(a1, v4, (uint64_t)v8);
  CFRelease(v5);
  v6 = *((_BYTE *)v10 + 24) != 0;
  _Block_object_dispose(&v9, 8);
  return v6;
}

void sub_218E2B774(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void QPStringCacheRelease(_DWORD *a1)
{
  int v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  if (a1)
  {
    v2 = a1[18] - 1;
    a1[18] = v2;
    if (!v2)
    {
      v3 = *(const void **)a1;
      if (*(_QWORD *)a1)
        CFRelease(v3);
      v4 = (const void *)*((_QWORD *)a1 + 4);
      if (v4)
        CFRelease(v4);
      v5 = (const void *)*((_QWORD *)a1 + 1);
      if (v5)
        CFRelease(v5);
      v6 = (const void *)*((_QWORD *)a1 + 2);
      if (v6)
        CFRelease(v6);
      if (*((_QWORD *)a1 + 5))
        SIGeneralTrieRelease();
      if (*((_QWORD *)a1 + 6))
        SIGeneralTrieRelease();
      free(a1);
    }
  }
}

void ___ZL5pruneP14_QPStringCache_block_invoke(uint64_t a1, const void *a2)
{
  CFNumberRef v4;
  const __CFSet *v5;
  double v6;
  __CFBinaryHeap *Value;
  double v8;
  double v9;
  double v10;
  int valuePtr;

  valuePtr = SITrieCompletionGetPayload();
  v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberIntType, &valuePtr);
  if (SITrieCompletionGetPayload())
  {
    v5 = *(const __CFSet **)(*(_QWORD *)(a1 + 40) + 16);
    if (!v5 || !CFSetContainsValue(v5, v4))
    {
      Value = (__CFBinaryHeap *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 48), v4);
      if (*(_QWORD *)(a1 + 56) <= (uint64_t)CFBinaryHeapGetCount(Value))
      {
        CFBinaryHeapGetMinimum(Value);
        SITrieCompletionGetScore();
        v9 = v8;
        SITrieCompletionGetScore();
        if (v9 <= v10)
          goto LABEL_9;
        CFBinaryHeapRemoveMinimumValue(Value);
      }
      CFBinaryHeapAddValue(Value, a2);
      goto LABEL_9;
    }
    SITrieCompletionGetCompletion();
    SITrieCompletionGetLength();
    SITrieCompletionGetPayload();
    SITrieCompletionGetScore();
    SIGeneralTrieAddKeyWithScore();
    SITrieCompletionGetScore();
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) = (uint64_t)(v6 + (double)*(uint64_t *)(*(_QWORD *)(a1 + 40) + 24));
  }
LABEL_9:
  CFRelease(v4);
}

uint64_t ___ZL23containsPrefixWithValueP14_SIGeneralTriePKS_PK10__CFStringj_block_invoke(uint64_t result, uint64_t a2, _BYTE *a3)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  *a3 = 1;
  return result;
}

uint64_t QP::ParserGrammar::ParserGrammar(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v3 = a2[1];
  *(_QWORD *)(a1 + 40) = *a2;
  *(_QWORD *)(a1 + 48) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_OWORD *)(a1 + 56) = 0uLL;
  *(_OWORD *)(a1 + 72) = 0uLL;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 88), kQPSymbolNone[0]);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 112) = a1 + 120;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 144;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = a1 + 192;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = a1 + 216;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = a1 + 240;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = a1 + 264;
  *(_QWORD *)(a1 + 280) = a1 + 288;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = a1 + 312;
  *(_QWORD *)(a1 + 328) = a1 + 336;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = a1 + 360;
  *(_QWORD *)(a1 + 376) = a1 + 384;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = a1 + 408;
  *(_QWORD *)(a1 + 424) = a1 + 432;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = a1 + 456;
  *(_QWORD *)(a1 + 472) = a1 + 480;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = a1 + 504;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 520) = a1 + 528;
  *(_QWORD *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 544) = a1 + 552;
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 568) = a1 + 576;
  *(_QWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 592) = a1 + 600;
  *(_QWORD *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 616) = a1 + 624;
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 640) = a1 + 648;
  *(_QWORD *)(a1 + 680) = 0;
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 664) = a1 + 672;
  *(_QWORD *)(a1 + 704) = 0;
  *(_QWORD *)(a1 + 696) = 0;
  *(_QWORD *)(a1 + 688) = a1 + 696;
  *(_QWORD *)(a1 + 728) = 0;
  *(_QWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 712) = a1 + 720;
  *(_QWORD *)(a1 + 752) = 0;
  *(_QWORD *)(a1 + 744) = 0;
  *(_QWORD *)(a1 + 736) = a1 + 744;
  *(_QWORD *)(a1 + 776) = 0;
  *(_QWORD *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 760) = a1 + 768;
  *(_QWORD *)(a1 + 800) = 0;
  *(_QWORD *)(a1 + 792) = 0;
  *(_QWORD *)(a1 + 784) = a1 + 792;
  *(_QWORD *)(a1 + 824) = 0;
  *(_QWORD *)(a1 + 816) = 0;
  *(_QWORD *)(a1 + 808) = a1 + 816;
  *(_QWORD *)(a1 + 848) = 0;
  *(_QWORD *)(a1 + 840) = 0;
  *(_QWORD *)(a1 + 832) = a1 + 840;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 856) = a1 + 864;
  *(_QWORD *)(a1 + 880) = 850045863;
  *(_QWORD *)(a1 + 936) = 0;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  QP::ParserGrammar::clearResources((QP::ParserGrammar *)a1);
  return a1;
}

void sub_218E2BCF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  uint64_t v30;
  const void **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::mutex *v37;
  uint64_t v38;
  uint64_t v39;

  std::mutex::~mutex(v37);
  std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>>>::destroy(v30, *(_QWORD **)(v29 + 864));
  std::__tree<unsigned short>::destroy(v33, *(_QWORD **)(v29 + 840));
  std::__tree<unsigned short>::destroy(v36, *(_QWORD **)(v29 + 816));
  std::__tree<unsigned short>::destroy(v35, *(_QWORD **)(v29 + 792));
  std::__tree<unsigned short>::destroy(v34, *(_QWORD **)(v29 + 768));
  std::__tree<unsigned short>::destroy(v32, *(_QWORD **)(v29 + 744));
  std::__tree<unsigned short>::destroy(a11, *(_QWORD **)(v29 + 720));
  std::__tree<unsigned short>::destroy(a12, *(_QWORD **)(v29 + 696));
  std::__tree<unsigned short>::destroy(a13, *(_QWORD **)(v29 + 672));
  std::__tree<unsigned short>::destroy(a14, *(_QWORD **)(v29 + 648));
  std::__tree<unsigned short>::destroy(a15, *(_QWORD **)(v29 + 624));
  std::__tree<unsigned short>::destroy(a16, *(_QWORD **)(v29 + 600));
  std::__tree<unsigned short>::destroy(a17, *(_QWORD **)(v29 + 576));
  std::__tree<unsigned short>::destroy(a18, *(_QWORD **)(v29 + 552));
  std::__tree<unsigned short>::destroy(a19, *(_QWORD **)(v29 + 528));
  std::__tree<unsigned short>::destroy(a20, *(_QWORD **)(v29 + 504));
  std::__tree<std::__value_type<unsigned short,std::map<std::string,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<std::string,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<std::string,std::string>>>>::destroy(a21, *(_QWORD **)(v29 + 480));
  std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>>::destroy(a22, *(_QWORD **)(v29 + 456));
  std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::destroy(a23, *(_QWORD **)(v29 + 432));
  std::__tree<std::__value_type<std::string,std::set<unsigned short>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned short>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned short>>>>::destroy(a24, *(_QWORD **)(v29 + 408));
  std::__tree<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>>>::destroy(a25, *(_QWORD **)(v29 + 384));
  std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>>::destroy(a26, *(_QWORD **)(v29 + 360));
  std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy(a27, *(_QWORD **)(v29 + 336));
  std::__tree<unsigned short>::destroy(a28, *(_QWORD **)(v29 + 312));
  std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy(a29, *(_QWORD **)(v29 + 288));
  std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy(*(_QWORD *)(v39 - 152), *(_QWORD **)(v29 + 264));
  std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy(v38, *(_QWORD **)(v29 + 240));
  std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy(*(_QWORD *)(v39 - 144), *(_QWORD **)(v29 + 216));
  std::__tree<unsigned short>::destroy(*(_QWORD *)(v39 - 136), *(_QWORD **)(v29 + 192));
  std::__tree<std::string>::destroy(*(_QWORD *)(v39 - 128), *(char **)(v29 + 168));
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy(*(_QWORD *)(v39 - 120), *(char **)(v29 + 144));
  std::__tree<std::string>::destroy(*(_QWORD *)(v39 - 112), *(char **)(v29 + 120));
  if (*(char *)(v29 + 111) < 0)
    operator delete(**(void ***)(v39 - 104));
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)(v29 + 80), 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)(v29 + 72), 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)(v29 + 64), 0);
  nlp::CFScopedPtr<__CFURL const*>::reset(v31, 0);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](*(_QWORD *)(v39 - 96));
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)(v29 + 32), 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)(v29 + 24), 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)(v29 + 16), 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)v29, 0);
  _Unwind_Resume(a1);
}

void QP::ParserGrammar::clearResources(QP::ParserGrammar *this)
{
  std::mutex *v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6[2];
  char v7;
  void *v8[2];
  char v9;
  void *v10[2];
  char v11;
  void *v12[2];
  char v13;
  void *v14[2];
  char v15;
  void *v16[2];
  char v17;
  void *v18[2];
  char v19;
  void *v20[2];
  char v21;
  void *__p[2];
  char v23;
  void *v24[2];
  char v25;
  void *v26[2];
  char v27;
  void *v28[2];
  char v29;
  void *v30[2];
  char v31;
  void *v32[2];
  char v33;
  void *v34[2];
  char v35;

  v2 = (std::mutex *)((char *)this + 880);
  std::mutex::lock((std::mutex *)((char *)this + 880));
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this, 0);
  v3 = (char *)*((_QWORD *)this + 1);
  if (v3)
  {
    nlp::BurstTrieRelease(v3);
    *((_QWORD *)this + 1) = 0;
  }
  nlp::BurstTrieCreateMutable((nlp *)v3);
  *((_QWORD *)this + 1) = v4;
  nlp::CFScopedPtr<__CFURL const*>::reset((const void **)this + 7, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 2, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 3, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 4, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 8, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 9, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 10, 0);
  std::__tree<std::string>::destroy((uint64_t)this + 112, *((char **)this + 15));
  *((_QWORD *)this + 14) = (char *)this + 120;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 15) = 0;
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)this + 136, *((char **)this + 18));
  *((_QWORD *)this + 17) = (char *)this + 144;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 18) = 0;
  std::__tree<std::string>::destroy((uint64_t)this + 160, *((char **)this + 21));
  *((_QWORD *)this + 20) = (char *)this + 168;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 21) = 0;
  std::__tree<unsigned short>::destroy((uint64_t)this + 184, *((_QWORD **)this + 24));
  *((_QWORD *)this + 23) = (char *)this + 192;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 24) = 0;
  std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy((uint64_t)this + 208, *((_QWORD **)this + 27));
  *((_QWORD *)this + 26) = (char *)this + 216;
  *((_QWORD *)this + 27) = 0;
  v5 = (_QWORD *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 28) = 0;
  std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy((uint64_t)this + 232, v5);
  *((_QWORD *)this + 29) = (char *)this + 240;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy((uint64_t)this + 256, *((_QWORD **)this + 33));
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 32) = (char *)this + 264;
  std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy((uint64_t)this + 280, *((_QWORD **)this + 36));
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 35) = (char *)this + 288;
  std::__tree<unsigned short>::destroy((uint64_t)this + 304, *((_QWORD **)this + 39));
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 38) = (char *)this + 312;
  std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy((uint64_t)this + 328, *((_QWORD **)this + 42));
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 41) = (char *)this + 336;
  std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>>::destroy((uint64_t)this + 352, *((_QWORD **)this + 45));
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 44) = (char *)this + 360;
  std::__tree<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>>>::destroy((uint64_t)this + 376, *((_QWORD **)this + 48));
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 47) = (char *)this + 384;
  std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::destroy((uint64_t)this + 424, *((_QWORD **)this + 54));
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 53) = (char *)this + 432;
  std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>>::destroy((uint64_t)this + 448, *((_QWORD **)this + 57));
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 56) = (char *)this + 456;
  std::__tree<std::__value_type<unsigned short,std::map<std::string,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<std::string,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<std::string,std::string>>>>::destroy((uint64_t)this + 472, *((_QWORD **)this + 60));
  *((_QWORD *)this + 60) = 0;
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 59) = (char *)this + 480;
  std::__tree<unsigned short>::destroy((uint64_t)this + 496, *((_QWORD **)this + 63));
  *((_QWORD *)this + 63) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_QWORD *)this + 62) = (char *)this + 504;
  std::__tree<unsigned short>::destroy((uint64_t)this + 520, *((_QWORD **)this + 66));
  *((_QWORD *)this + 66) = 0;
  *((_QWORD *)this + 67) = 0;
  *((_QWORD *)this + 65) = (char *)this + 528;
  std::__tree<unsigned short>::destroy((uint64_t)this + 544, *((_QWORD **)this + 69));
  *((_QWORD *)this + 69) = 0;
  *((_QWORD *)this + 70) = 0;
  *((_QWORD *)this + 68) = (char *)this + 552;
  std::__tree<unsigned short>::destroy((uint64_t)this + 568, *((_QWORD **)this + 72));
  *((_QWORD *)this + 72) = 0;
  *((_QWORD *)this + 73) = 0;
  *((_QWORD *)this + 71) = (char *)this + 576;
  std::__tree<unsigned short>::destroy((uint64_t)this + 592, *((_QWORD **)this + 75));
  *((_QWORD *)this + 75) = 0;
  *((_QWORD *)this + 76) = 0;
  *((_QWORD *)this + 74) = (char *)this + 600;
  std::__tree<unsigned short>::destroy((uint64_t)this + 616, *((_QWORD **)this + 78));
  *((_QWORD *)this + 78) = 0;
  *((_QWORD *)this + 79) = 0;
  *((_QWORD *)this + 77) = (char *)this + 624;
  std::__tree<unsigned short>::destroy((uint64_t)this + 640, *((_QWORD **)this + 81));
  *((_QWORD *)this + 81) = 0;
  *((_QWORD *)this + 82) = 0;
  *((_QWORD *)this + 80) = (char *)this + 648;
  std::__tree<unsigned short>::destroy((uint64_t)this + 664, *((_QWORD **)this + 84));
  *((_QWORD *)this + 84) = 0;
  *((_QWORD *)this + 85) = 0;
  *((_QWORD *)this + 83) = (char *)this + 672;
  std::__tree<unsigned short>::destroy((uint64_t)this + 688, *((_QWORD **)this + 87));
  *((_QWORD *)this + 87) = 0;
  *((_QWORD *)this + 88) = 0;
  *((_QWORD *)this + 86) = (char *)this + 696;
  std::__tree<unsigned short>::destroy((uint64_t)this + 712, *((_QWORD **)this + 90));
  *((_QWORD *)this + 90) = 0;
  *((_QWORD *)this + 91) = 0;
  *((_QWORD *)this + 89) = (char *)this + 720;
  std::__tree<unsigned short>::destroy((uint64_t)this + 736, *((_QWORD **)this + 93));
  *((_QWORD *)this + 93) = 0;
  *((_QWORD *)this + 94) = 0;
  *((_QWORD *)this + 92) = (char *)this + 744;
  std::__tree<unsigned short>::destroy((uint64_t)this + 760, *((_QWORD **)this + 96));
  *((_QWORD *)this + 95) = (char *)this + 768;
  *((_QWORD *)this + 97) = 0;
  *((_QWORD *)this + 96) = 0;
  std::__tree<unsigned short>::destroy((uint64_t)this + 832, *((_QWORD **)this + 105));
  *((_QWORD *)this + 104) = (char *)this + 840;
  *((_QWORD *)this + 106) = 0;
  *((_QWORD *)this + 105) = 0;
  std::__tree<unsigned short>::destroy((uint64_t)this + 784, *((_QWORD **)this + 99));
  *((_QWORD *)this + 98) = (char *)this + 792;
  *((_QWORD *)this + 100) = 0;
  *((_QWORD *)this + 99) = 0;
  std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>>>::destroy((uint64_t)this + 856, *((_QWORD **)this + 108));
  *((_QWORD *)this + 107) = (char *)this + 864;
  *((_QWORD *)this + 109) = 0;
  *((_QWORD *)this + 108) = 0;
  std::string::basic_string[abi:ne180100]<0>(v34, kQPSymbolNone[0]);
  QP::ParserGrammar::addSymbol((uint64_t)this, (uint64_t)v34);
  if (v35 < 0)
    operator delete(v34[0]);
  std::string::basic_string[abi:ne180100]<0>(v32, kQPSymbolRoot[0]);
  QP::ParserGrammar::addSymbol((uint64_t)this, (uint64_t)v32);
  if (v33 < 0)
    operator delete(v32[0]);
  std::string::basic_string[abi:ne180100]<0>(v30, kQPSymbolTerminal[0]);
  QP::ParserGrammar::addSymbol((uint64_t)this, (uint64_t)v30);
  if (v31 < 0)
    operator delete(v30[0]);
  std::string::basic_string[abi:ne180100]<0>(v28, kQPSymbolAirline[0]);
  QP::ParserGrammar::addSymbol((uint64_t)this, (uint64_t)v28);
  if (v29 < 0)
    operator delete(v28[0]);
  std::string::basic_string[abi:ne180100]<0>(v26, kQPSymbolAirport[0]);
  QP::ParserGrammar::addSymbol((uint64_t)this, (uint64_t)v26);
  if (v27 < 0)
    operator delete(v26[0]);
  std::string::basic_string[abi:ne180100]<0>(v24, kQPSymbolAirportCode[0]);
  QP::ParserGrammar::addSymbol((uint64_t)this, (uint64_t)v24);
  if (v25 < 0)
    operator delete(v24[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, kQPSymbolAppName[0]);
  QP::ParserGrammar::addSymbol((uint64_t)this, (uint64_t)__p);
  if (v23 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v20, kQPSymbolBundle[0]);
  QP::ParserGrammar::addSymbol((uint64_t)this, (uint64_t)v20);
  if (v21 < 0)
    operator delete(v20[0]);
  std::string::basic_string[abi:ne180100]<0>(v18, kQPSymbolCities[0]);
  QP::ParserGrammar::addSymbol((uint64_t)this, (uint64_t)v18);
  if (v19 < 0)
    operator delete(v18[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, kQPSymbolField[0]);
  QP::ParserGrammar::addSymbol((uint64_t)this, (uint64_t)v16);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v14, kQPSymbolFlightCode[0]);
  QP::ParserGrammar::addSymbol((uint64_t)this, (uint64_t)v14);
  if (v15 < 0)
    operator delete(v14[0]);
  std::string::basic_string[abi:ne180100]<0>(v12, kQPSymbolPerson[0]);
  QP::ParserGrammar::addSymbol((uint64_t)this, (uint64_t)v12);
  if (v13 < 0)
    operator delete(v12[0]);
  std::string::basic_string[abi:ne180100]<0>(v10, kQPSymbolLocation[0]);
  QP::ParserGrammar::addSymbol((uint64_t)this, (uint64_t)v10);
  if (v11 < 0)
    operator delete(v10[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, kQPSymbolActionDefault[0]);
  QP::ParserGrammar::addSymbol((uint64_t)this, (uint64_t)v8);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, kQPSymbolDefault);
  QP::ParserGrammar::addSymbol((uint64_t)this, (uint64_t)v6);
  if (v7 < 0)
    operator delete(v6[0]);
  std::mutex::unlock(v2);
}

void sub_218E2C5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  std::mutex *v63;

  if (a15 < 0)
    operator delete(__p);
  std::mutex::unlock(v63);
  _Unwind_Resume(a1);
}

void QP::ParserGrammar::~ParserGrammar(QP::ParserGrammar *this)
{
  char *v2;

  v2 = (char *)*((_QWORD *)this + 1);
  if (v2)
    nlp::BurstTrieRelease(v2);
  std::mutex::~mutex((std::mutex *)((char *)this + 880));
  std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>>>::destroy((uint64_t)this + 856, *((_QWORD **)this + 108));
  std::__tree<unsigned short>::destroy((uint64_t)this + 832, *((_QWORD **)this + 105));
  std::__tree<unsigned short>::destroy((uint64_t)this + 808, *((_QWORD **)this + 102));
  std::__tree<unsigned short>::destroy((uint64_t)this + 784, *((_QWORD **)this + 99));
  std::__tree<unsigned short>::destroy((uint64_t)this + 760, *((_QWORD **)this + 96));
  std::__tree<unsigned short>::destroy((uint64_t)this + 736, *((_QWORD **)this + 93));
  std::__tree<unsigned short>::destroy((uint64_t)this + 712, *((_QWORD **)this + 90));
  std::__tree<unsigned short>::destroy((uint64_t)this + 688, *((_QWORD **)this + 87));
  std::__tree<unsigned short>::destroy((uint64_t)this + 664, *((_QWORD **)this + 84));
  std::__tree<unsigned short>::destroy((uint64_t)this + 640, *((_QWORD **)this + 81));
  std::__tree<unsigned short>::destroy((uint64_t)this + 616, *((_QWORD **)this + 78));
  std::__tree<unsigned short>::destroy((uint64_t)this + 592, *((_QWORD **)this + 75));
  std::__tree<unsigned short>::destroy((uint64_t)this + 568, *((_QWORD **)this + 72));
  std::__tree<unsigned short>::destroy((uint64_t)this + 544, *((_QWORD **)this + 69));
  std::__tree<unsigned short>::destroy((uint64_t)this + 520, *((_QWORD **)this + 66));
  std::__tree<unsigned short>::destroy((uint64_t)this + 496, *((_QWORD **)this + 63));
  std::__tree<std::__value_type<unsigned short,std::map<std::string,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<std::string,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<std::string,std::string>>>>::destroy((uint64_t)this + 472, *((_QWORD **)this + 60));
  std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>>::destroy((uint64_t)this + 448, *((_QWORD **)this + 57));
  std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::destroy((uint64_t)this + 424, *((_QWORD **)this + 54));
  std::__tree<std::__value_type<std::string,std::set<unsigned short>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned short>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned short>>>>::destroy((uint64_t)this + 400, *((_QWORD **)this + 51));
  std::__tree<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>>>::destroy((uint64_t)this + 376, *((_QWORD **)this + 48));
  std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>>::destroy((uint64_t)this + 352, *((_QWORD **)this + 45));
  std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy((uint64_t)this + 328, *((_QWORD **)this + 42));
  std::__tree<unsigned short>::destroy((uint64_t)this + 304, *((_QWORD **)this + 39));
  std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy((uint64_t)this + 280, *((_QWORD **)this + 36));
  std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy((uint64_t)this + 256, *((_QWORD **)this + 33));
  std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy((uint64_t)this + 232, *((_QWORD **)this + 30));
  std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy((uint64_t)this + 208, *((_QWORD **)this + 27));
  std::__tree<unsigned short>::destroy((uint64_t)this + 184, *((_QWORD **)this + 24));
  std::__tree<std::string>::destroy((uint64_t)this + 160, *((char **)this + 21));
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)this + 136, *((char **)this + 18));
  std::__tree<std::string>::destroy((uint64_t)this + 112, *((char **)this + 15));
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 10, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 9, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 8, 0);
  nlp::CFScopedPtr<__CFURL const*>::reset((const void **)this + 7, 0);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 4, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 3, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 2, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this, 0);
}

void QP::ParserGrammar::loadParserGrammarResource(const void **this, CFURLRef anURL, __CFError **a3, __CFError **a4)
{
  char v4;
  CFURLRef *v7;
  const __CFString *v8;
  const __CFString *v9;
  CFTypeRef v10;

  v4 = (char)a3;
  if (!anURL)
    goto LABEL_5;
  v7 = (CFURLRef *)(this + 7);
  if (!this[7] || (v8 = CFURLGetString(anURL), v9 = CFURLGetString(*v7), !CFStringsAreEqual(v8, v9)))
  {
    v10 = CFRetain(anURL);
    nlp::CFScopedPtr<__CFURL const*>::reset(this + 7, v10);
LABEL_5:
    QP::ParserGrammar::loadResources((QP::ParserGrammar *)this, v4, a3, a4);
  }
}

void nlp::CFScopedPtr<__CFURL const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void QP::ParserGrammar::loadResources(QP::ParserGrammar *this, char a2, __CFError **a3, __CFError **a4)
{
  uint64_t v4;
  nlp *v6;
  CFPropertyListRef DictionaryWithContentsOfURL;
  __CFDictionary *v9;
  __CFDictionary *v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void **v17;
  uint64_t v18;
  __CFString *BundleWithIdentifier;
  unint64_t v20;
  const __CFString *v21;
  uint64_t v22;
  const __CFString *v23;
  const __CFString *v24;
  QP::ParserGrammar *v25;
  const __CFArray *v26;
  uint64_t v27;
  const __CFString *v28;
  const __CFString *v29;
  const __CFAllocator *v30;
  CFIndex Count;
  CFIndex v32;
  CFIndex v33;
  const __CFString *ValueAtIndex;
  const __CFString *v35;
  const __CFArray *ArrayBySeparatingStrings;
  CFIndex v37;
  CFNumberRef v38;
  CFIndex v39;
  const __CFString *v40;
  CFMutableStringRef MutableCopy;
  void **v42;
  int v43;
  CFDictionaryRef Copy;
  CFDictionaryRef v45;
  CFIndex v46;
  CFIndex i;
  const __CFString *v48;
  const __CFString *v49;
  CFDictionaryRef v50;
  uint64_t v51;
  const __CFDictionary *v52;
  CFIndex v53;
  unint64_t v54;
  const void **v55;
  size_t v56;
  const __CFAllocator *v57;
  CFMutableStringRef v58;
  void **v59;
  int v60;
  uint64_t v61;
  CFPropertyListRef v62;
  CFIndex v63;
  const __CFArray *v64;
  CFArrayRef v65;
  void **p_isa;
  int v67;
  unsigned __int8 v68;
  CFMutableStringRef v69;
  CFNumberRef v70;
  unsigned int valuePtr;
  const __CFArray *v72;
  const __CFString *v73;
  const __CFString *v74;
  const __CFString *v75;
  __CFDictionary *v76;
  __CFDictionary *Mutable;
  const void *v78[2];
  CFErrorRef v79[3];
  CFRange v80;

  v79[1] = *(CFErrorRef *)MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 5);
  if (!v4)
    return;
  if (!*(_QWORD *)(v4 + 176))
    return;
  v6 = (nlp *)*((_QWORD *)this + 7);
  if (!v6)
    return;
  v79[0] = 0;
  DictionaryWithContentsOfURL = nlp::createDictionaryWithContentsOfURL(v6, v79, a3, a4);
  v78[1] = DictionaryWithContentsOfURL;
  if (!v79[0])
  {
    if (!DictionaryWithContentsOfURL)
      goto LABEL_6;
    QP::ParserGrammar::loadUTIs(this, (CFDictionaryRef)DictionaryWithContentsOfURL, CFSTR("com.apple.query.parser"));
    QP::ParserGrammar::loadFileExtensions(this, (CFDictionaryRef)DictionaryWithContentsOfURL, CFSTR("com.apple.query.parser"));
    QP::ParserGrammar::loadCFG(this, (CFDictionaryRef)DictionaryWithContentsOfURL, *(const __CFString **)(*((_QWORD *)this + 5) + 176));
    QP::ParserGrammar::loadAttributes(this, (CFDictionaryRef)DictionaryWithContentsOfURL, *(const __CFString **)(*((_QWORD *)this + 5) + 176));
    QP::ParserGrammar::loadValues(this, (CFDictionaryRef)DictionaryWithContentsOfURL, *(const __CFString **)(*((_QWORD *)this + 5) + 176));
    QP::ParserGrammar::loadCategories(this, (CFDictionaryRef)DictionaryWithContentsOfURL);
    QP::ParserGrammar::loadTokens((const void **)this, (CFDictionaryRef)DictionaryWithContentsOfURL, *(const __CFString **)(*((_QWORD *)this + 5) + 176));
    QP::ParserGrammar::loadProperties((uint64_t **)this, (CFDictionaryRef)DictionaryWithContentsOfURL, *(const __CFString **)(*((_QWORD *)this + 5) + 176));
    QP::ParserGrammar::loadActions(this, (CFDictionaryRef)DictionaryWithContentsOfURL, *(const __CFString **)(*((_QWORD *)this + 5) + 176));
    QP::ParserGrammar::loadIntentActions(this, (CFDictionaryRef)DictionaryWithContentsOfURL, *(const __CFString **)(*((_QWORD *)this + 5) + 176));
    QP::ParserGrammar::loadU2ArgActions(this, (CFDictionaryRef)DictionaryWithContentsOfURL, *(const __CFString **)(*((_QWORD *)this + 5) + 176));
    QP::ParserGrammar::loadLLMArgsMap(this, (CFDictionaryRef)DictionaryWithContentsOfURL, *(const __CFString **)(*((_QWORD *)this + 5) + 176));
    QP::ParserGrammar::loadTranslations((const void **)this, (CFDictionaryRef)DictionaryWithContentsOfURL, *(const __CFString **)(*((_QWORD *)this + 5) + 176));
    QP::ParserGrammar::loadIgnoredTerms(this, (CFDictionaryRef)DictionaryWithContentsOfURL, *(const __CFString **)(*((_QWORD *)this + 5) + 176));
    QP::ParserGrammar::loadReplacements(this, (CFDictionaryRef)DictionaryWithContentsOfURL, *(const __CFString **)(*((_QWORD *)this + 5) + 176));
    v18 = *((_QWORD *)this + 5);
    if ((a2 & 1) == 0)
    {
      QP::ParserGrammar::loadSuggestions(this, (CFDictionaryRef)DictionaryWithContentsOfURL, *(const __CFString **)(v18 + 176));
      QP::ParserGrammar::loadCompletions(this, (CFDictionaryRef)DictionaryWithContentsOfURL, *(const __CFString **)(*((_QWORD *)this + 5) + 176));
      goto LABEL_89;
    }
    BundleWithIdentifier = *(__CFString **)(v18 + 192);
    if (BundleWithIdentifier)
    {
      BundleWithIdentifier = (__CFString *)CFBundleGetBundleWithIdentifier(BundleWithIdentifier);
      v20 = (unint64_t)BundleWithIdentifier;
      v18 = *((_QWORD *)this + 5);
    }
    else
    {
      v20 = 0;
    }
    v21 = *(const __CFString **)(v18 + 136);
    v22 = *(_QWORD *)(v18 + 8);
    if (v22 == 8)
      v23 = CFSTR("Search");
    else
      v23 = 0;
    if (v22 == 2)
      v24 = CFSTR("Mail");
    else
      v24 = v23;
    v25 = (QP::ParserGrammar *)QP::ParserGrammar::fallbackCompletionKeys((QP::ParserGrammar *)BundleWithIdentifier, v24);
    v26 = v25;
    v27 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    if (v27 == 8)
      v28 = CFSTR("Search");
    else
      v28 = 0;
    if (v27 == 2)
      v29 = CFSTR("Mail");
    else
      v29 = v28;
    v65 = (CFArrayRef)QP::ParserGrammar::fallbackTokenKeys(v25, v29);
    if (v26 && v65)
    {
      v62 = DictionaryWithContentsOfURL;
      v30 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v78[0] = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      Mutable = CFDictionaryCreateMutable(v30, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      v76 = CFDictionaryCreateMutable(v30, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      Count = CFArrayGetCount(v26);
      v32 = Count;
      if (Count < 1)
        goto LABEL_83;
      v33 = 0;
      v63 = Count;
      v64 = v26;
      while (1)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v26, v33);
        v75 = copyLocalizedStringForDomain(v20, CFSTR("Mail"), CFSTR("Completions"), ValueAtIndex, v21);
        v74 = copyLocalizedStringForDomain(v20, CFSTR("Mail"), CFSTR("Suggestions"), ValueAtIndex, v21);
        v35 = copyLocalizedStringForDomain(v20, CFSTR("Mail"), CFSTR("Tokens"), ValueAtIndex, v21);
        v73 = v35;
        if (v75)
        {
          if (v74)
          {
            CFDictionaryAddValue((CFMutableDictionaryRef)v78[0], ValueAtIndex, v74);
            if (v73)
              CFDictionarySetValue(v76, ValueAtIndex, v73);
            ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(v30, v75, CFSTR(" | "));
            v72 = ArrayBySeparatingStrings;
            v37 = CFArrayGetCount(ArrayBySeparatingStrings);
            if (v37)
            {
              valuePtr = v33 + 1;
              v38 = CFNumberCreate(v30, kCFNumberIntType, &valuePtr);
              v70 = v38;
              CFDictionarySetValue(Mutable, v38, ValueAtIndex);
              if (v37 >= 1)
              {
                v39 = 0;
                while (1)
                {
                  v40 = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, v39);
                  MutableCopy = CFStringCreateMutableCopy(v30, 0, v40);
                  v69 = MutableCopy;
                  CFStringLowercase(MutableCopy, *(CFLocaleRef *)(*((_QWORD *)this + 5) + 104));
                  v80.length = CFStringGetLength(MutableCopy);
                  v80.location = 0;
                  CFStringFindAndReplace(MutableCopy, CFSTR("’"), CFSTR("'"), v80, 0);
                  QP::getUTF8StringFromCFString(MutableCopy, &p_isa);
                  v42 = (v68 & 0x80u) == 0 ? (void **)&p_isa : p_isa;
                  v43 = (v68 & 0x80u) == 0 ? v68 : v67;
                  nlp::BurstTrieAdd(*((_QWORD *)this + 1), (uint64_t)v42, v43, valuePtr);
                  if (((char)v68 & 0x80000000) == 0)
                    break;
                  operator delete(p_isa);
                  if (MutableCopy)
                    goto LABEL_66;
LABEL_67:
                  if (v37 == ++v39)
                    goto LABEL_68;
                }
                if (!MutableCopy)
                  goto LABEL_67;
LABEL_66:
                CFRelease(MutableCopy);
                goto LABEL_67;
              }
LABEL_68:
              if (v38)
                CFRelease(v38);
            }
            if (ArrayBySeparatingStrings)
              CFRelease(ArrayBySeparatingStrings);
            v35 = v73;
            v32 = v63;
            v26 = v64;
          }
        }
        else if (!v74)
        {
          nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v73, 0);
          nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v74, 0);
          nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v75, 0);
LABEL_83:
          Copy = CFDictionaryCreateCopy(v30, Mutable);
          nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 2, Copy);
          v45 = CFDictionaryCreateCopy(v30, (CFDictionaryRef)v78[0]);
          nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 3, v45);
          v46 = CFArrayGetCount(v65);
          if (v46 >= 1)
          {
            for (i = 0; i != v46; ++i)
            {
              v48 = (const __CFString *)CFArrayGetValueAtIndex(v65, i);
              v49 = copyLocalizedStringForDomain(v20, CFSTR("Mail"), CFSTR("Tokens"), v48, v21);
              p_isa = &v49->isa;
              if (v49)
              {
                CFDictionaryAddValue(v76, v48, v49);
                CFRelease(v49);
              }
            }
          }
          v50 = CFDictionaryCreateCopy(v30, v76);
          nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 4, v50);
          nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)&v76, 0);
          nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)&Mutable, 0);
          nlp::CFScopedPtr<__CFDictionary *>::reset(v78, 0);
          DictionaryWithContentsOfURL = v62;
          break;
        }
        if (v35)
          CFRelease(v35);
        if (v74)
          CFRelease(v74);
        if (v75)
          CFRelease(v75);
        if (++v33 == v32)
          goto LABEL_83;
      }
    }
LABEL_89:
    v51 = *((_QWORD *)this + 5);
    v52 = *(const __CFDictionary **)(v51 + 224);
    if (!v52)
      goto LABEL_6;
    v53 = CFDictionaryGetCount(*(CFDictionaryRef *)(v51 + 224));
    MEMORY[0x24BDAC7A8](v53);
    v55 = (const void **)((char *)&v61 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0));
    v56 = v54 >= 0x200 ? 512 : v54;
    bzero((char *)&v61 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0), v56);
    CFDictionaryGetKeysAndValues(v52, v55, 0);
    if (v53 < 1)
      goto LABEL_6;
    v57 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    while (1)
    {
      v58 = CFStringCreateMutableCopy(v57, 0, (CFStringRef)*v55);
      v78[0] = v58;
      CFStringLowercase(v58, *(CFLocaleRef *)(*((_QWORD *)this + 5) + 104));
      QP::getUTF8StringFromCFString(v58, &p_isa);
      v59 = (v68 & 0x80u) == 0 ? (void **)&p_isa : p_isa;
      v60 = (v68 & 0x80u) == 0 ? v68 : v67;
      nlp::BurstTrieAdd(*((_QWORD *)this + 1), (uint64_t)v59, v60, 1);
      if (((char)v68 & 0x80000000) == 0)
        break;
      operator delete(p_isa);
      if (v58)
        goto LABEL_105;
LABEL_106:
      ++v55;
      if (!--v53)
        goto LABEL_6;
    }
    if (!v58)
      goto LABEL_106;
LABEL_105:
    CFRelease(v58);
    goto LABEL_106;
  }
  CFRelease(v79[0]);
LABEL_6:
  v9 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v10 = v9;
  v11 = *((_QWORD *)this + 5);
  v12 = *(const void **)(v11 + 176);
  if (v12)
  {
    CFDictionarySetValue(v9, kQPQueryParserOptionContextIdentifierKey, v12);
    v11 = *((_QWORD *)this + 5);
  }
  v13 = *(const void **)(v11 + 104);
  if (v13)
  {
    CFDictionarySetValue(v10, kQPQueryParserOptionLocaleKey, v13);
    v11 = *((_QWORD *)this + 5);
  }
  v14 = *(const void **)(v11 + 160);
  if (v14)
  {
    CFDictionarySetValue(v10, kQPQueryParserOptionPreferredLanguagesKey, v14);
    v11 = *((_QWORD *)this + 5);
  }
  v15 = *(const void **)(v11 + 88);
  if (v15)
  {
    CFDictionarySetValue(v10, kQPQueryParserOptionReferenceCalendarKey, v15);
    v11 = *((_QWORD *)this + 5);
  }
  v16 = *(const void **)(v11 + 72);
  if (v16)
  {
    CFDictionarySetValue(v10, kQPQueryParserOptionReferenceDateKey, v16);
    v11 = *((_QWORD *)this + 5);
  }
  v17 = (const void **)MEMORY[0x24BDBD270];
  if (*(_BYTE *)(v11 + 23))
  {
    CFDictionarySetValue(v10, kQPQueryParserOptionIgnoreFutureDatesKey, (const void *)*MEMORY[0x24BDBD270]);
    v11 = *((_QWORD *)this + 5);
  }
  if (*(_BYTE *)(v11 + 24))
  {
    CFDictionarySetValue(v10, kQPQueryParserOptionIgnorePastDatesKey, *v17);
    v11 = *((_QWORD *)this + 5);
  }
  if (*(_BYTE *)(v11 + 26))
  {
    CFDictionarySetValue(v10, kQPQueryParserOptionResolveDatesInFutureKey, *v17);
    v11 = *((_QWORD *)this + 5);
  }
  if (*(_BYTE *)(v11 + 27))
    CFDictionarySetValue(v10, kQPQueryParserOptionResolveDatesInPastKey, *v17);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this, v10);
  if (DictionaryWithContentsOfURL)
    CFRelease(DictionaryWithContentsOfURL);
}

void sub_218E2D2CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)(v1 - 128), 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)(v1 - 120), 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)(v1 - 112), 0);
  _Unwind_Resume(a1);
}

uint64_t QP::ParserGrammar::loadCFG(QP::ParserGrammar *this, CFDictionaryRef theDict, const __CFString *key)
{
  uint64_t result;
  const __CFDictionary *Value;
  const __CFDictionary *v8;
  unint64_t v9;
  uint64_t v10;
  const void **v11;
  size_t v12;
  uint64_t v13;
  const __CFString *v14;
  unint64_t v15;
  const void **v16;
  size_t v17;
  uint64_t i;
  const __CFString *v19;
  const __CFDictionary *v20;
  CFIndex v21;
  unint64_t v22;
  const void **v23;
  size_t v24;
  const __CFString *v25;
  const __CFNumber *v26;
  float v27;
  uint64_t v28;
  const void **v29;
  CFDictionaryRef v30;
  CFIndex Count;
  uint64_t *v32;
  uint64_t v33;
  CFIndex v34;
  CFDictionaryRef v35;
  void *v36[2];
  char v37;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  double valuePtr[3];

  valuePtr[1] = *(double *)MEMORY[0x24BDAC8D0];
  result = CFDictionaryContainsKey(theDict, key);
  if ((_DWORD)result)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, key);
    result = CFDictionaryContainsKey(Value, CFSTR("CFG"));
    if ((_DWORD)result)
    {
      v8 = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("CFG"));
      v28 = (uint64_t)&v28;
      Count = CFDictionaryGetCount(v8);
      MEMORY[0x24BDAC7A8](Count);
      v11 = (const void **)((char *)&v28 - v10);
      if (v9 >= 0x200)
        v12 = 512;
      else
        v12 = v9;
      bzero((char *)&v28 - v10, v12);
      v29 = v11;
      v30 = v8;
      CFDictionaryGetKeysAndValues(v8, v11, 0);
      if (Count >= 1)
      {
        v13 = 0;
        do
        {
          v33 = v13;
          v14 = (const __CFString *)v29[v13];
          v35 = (CFDictionaryRef)CFDictionaryGetValue(v30, v14);
          v34 = CFDictionaryGetCount(v35);
          v32 = &v28;
          MEMORY[0x24BDAC7A8](v34);
          v16 = (const void **)((char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
          if (v15 >= 0x200)
            v17 = 512;
          else
            v17 = v15;
          bzero((char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
          CFDictionaryGetKeysAndValues(v35, v16, 0);
          if (v34 >= 1)
          {
            for (i = 0; i != v34; ++i)
            {
              v19 = (const __CFString *)v16[i];
              v20 = (const __CFDictionary *)CFDictionaryGetValue(v35, v19);
              v21 = CFDictionaryGetCount(v20);
              MEMORY[0x24BDAC7A8](v21);
              v23 = (const void **)((char *)&v28 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
              if (v22 >= 0x200)
                v24 = 512;
              else
                v24 = v22;
              bzero((char *)&v28 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v24);
              CFDictionaryGetKeysAndValues(v20, v23, 0);
              if (v21 >= 1)
              {
                do
                {
                  v25 = (const __CFString *)*v23;
                  v26 = (const __CFNumber *)CFDictionaryGetValue(v20, *v23);
                  valuePtr[0] = 0.0;
                  CFNumberGetValue(v26, kCFNumberDoubleType, valuePtr);
                  QP::getUTF8StringFromCFString(v14, v40);
                  QP::getUTF8StringFromCFString(v19, v38);
                  QP::getUTF8StringFromCFString(v25, v36);
                  v27 = valuePtr[0];
                  QP::ParserGrammar::addRule((uint64_t)this, (unsigned __int8 *)v40, (unsigned __int8 *)v38, (unsigned __int8 *)v36, v27);
                  if (v37 < 0)
                    operator delete(v36[0]);
                  if (v39 < 0)
                    operator delete(v38[0]);
                  if (v41 < 0)
                    operator delete(v40[0]);
                  ++v23;
                  --v21;
                }
                while (v21);
              }
            }
          }
          v13 = v33 + 1;
        }
        while (v33 + 1 != Count);
      }
      return 1;
    }
  }
  return result;
}

void sub_218E2D77C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 153) < 0)
    operator delete(*(void **)(v1 - 176));
  if (*(char *)(v1 - 129) < 0)
    operator delete(*(void **)(v1 - 152));
  if (*(char *)(v1 - 105) < 0)
    operator delete(*(void **)(v1 - 128));
  _Unwind_Resume(exception_object);
}

void QP::ParserGrammar::addRule(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, float a5)
{
  unsigned int SymbolID;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  uint64_t *v36;
  uint64_t v37;
  unsigned int v38;
  BOOL v39;
  uint64_t *v40;
  uint64_t v41;
  unsigned int v42;
  BOOL v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  BOOL v50;
  uint64_t *v51;
  _QWORD **v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD **v56;
  _QWORD *v57;
  uint64_t v58;

  SymbolID = QP::ParserGrammar::getSymbolID(a1, (uint64_t)a2);
  v11 = QP::ParserGrammar::getSymbolID(a1, (uint64_t)a3);
  v12 = QP::ParserGrammar::getSymbolID(a1, (uint64_t)a4);
  v13 = (uint64_t *)(a1 + 864);
  v14 = *(_QWORD *)(a1 + 864);
  if (!v14)
    goto LABEL_12;
  v15 = a1 + 864;
  v16 = *(_QWORD *)(a1 + 864);
  do
  {
    v17 = *(unsigned __int16 *)(v16 + 32);
    v18 = v17 >= v11;
    if (v17 >= v11)
      v19 = (uint64_t *)v16;
    else
      v19 = (uint64_t *)(v16 + 8);
    if (v18)
      v15 = v16;
    v16 = *v19;
  }
  while (*v19);
  if ((uint64_t *)v15 == v13 || v11 < *(unsigned __int16 *)(v15 + 32))
  {
LABEL_12:
    v53 = 0;
    v54 = 0;
    v52 = &v53;
    LOWORD(v55) = v11;
    v57 = 0;
    v58 = 0;
    v56 = &v57;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::set<unsigned short>>>(a1 + 856, (unsigned __int16 *)&v55, (uint64_t)&v55);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy((uint64_t)&v56, v57);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy((uint64_t)&v52, v53);
    v14 = *v13;
  }
  if (!v14)
    goto LABEL_24;
  v20 = a1 + 864;
  v21 = v14;
  do
  {
    v22 = *(unsigned __int16 *)(v21 + 32);
    v23 = v22 >= v11;
    if (v22 >= v11)
      v24 = (uint64_t *)v21;
    else
      v24 = (uint64_t *)(v21 + 8);
    if (v23)
      v20 = v21;
    v21 = *v24;
  }
  while (*v24);
  if ((uint64_t *)v20 == v13 || v11 < *(unsigned __int16 *)(v20 + 32))
LABEL_24:
    v20 = a1 + 864;
  v27 = *(_QWORD *)(v20 + 48);
  v25 = v20 + 48;
  v26 = v27;
  if (!v27)
    goto LABEL_36;
  v28 = v25;
  do
  {
    v29 = *(unsigned __int16 *)(v26 + 32);
    v30 = v29 >= SymbolID;
    if (v29 >= SymbolID)
      v31 = (uint64_t *)v26;
    else
      v31 = (uint64_t *)(v26 + 8);
    if (v30)
      v28 = v26;
    v26 = *v31;
  }
  while (*v31);
  if (v28 == v25 || SymbolID < *(unsigned __int16 *)(v28 + 32))
LABEL_36:
    v28 = v25;
  if (!v14)
    goto LABEL_48;
  v32 = a1 + 864;
  v33 = v14;
  do
  {
    v34 = *(unsigned __int16 *)(v33 + 32);
    v35 = v34 >= v11;
    if (v34 >= v11)
      v36 = (uint64_t *)v33;
    else
      v36 = (uint64_t *)(v33 + 8);
    if (v35)
      v32 = v33;
    v33 = *v36;
  }
  while (*v36);
  if ((uint64_t *)v32 == v13 || v11 < *(unsigned __int16 *)(v32 + 32))
LABEL_48:
    v32 = a1 + 864;
  if (v28 == v32 + 48)
  {
    if (!v14)
      goto LABEL_63;
    v37 = a1 + 864;
    do
    {
      v38 = *(unsigned __int16 *)(v14 + 32);
      v39 = v38 >= v11;
      if (v38 >= v11)
        v40 = (uint64_t *)v14;
      else
        v40 = (uint64_t *)(v14 + 8);
      if (v39)
        v37 = v14;
      v14 = *v40;
    }
    while (*v40);
    if ((uint64_t *)v37 == v13 || v11 < *(unsigned __int16 *)(v37 + 32))
LABEL_63:
      v37 = a1 + 864;
    v53 = 0;
    v54 = 0;
    v52 = &v53;
    LOWORD(v55) = SymbolID;
    v57 = 0;
    v58 = 0;
    v56 = &v57;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::set<unsigned short>>>(v37 + 40, (unsigned __int16 *)&v55, (uint64_t)&v55);
    std::__tree<unsigned short>::destroy((uint64_t)&v56, v57);
    std::__tree<unsigned short>::destroy((uint64_t)&v52, v53);
    v14 = *v13;
    if (!*v13)
      goto LABEL_75;
  }
  else if (!v14)
  {
LABEL_75:
    v41 = a1 + 864;
    goto LABEL_76;
  }
  v41 = a1 + 864;
  do
  {
    v42 = *(unsigned __int16 *)(v14 + 32);
    v43 = v42 >= v11;
    if (v42 >= v11)
      v44 = (uint64_t *)v14;
    else
      v44 = (uint64_t *)(v14 + 8);
    if (v43)
      v41 = v14;
    v14 = *v44;
  }
  while (*v44);
  if ((uint64_t *)v41 == v13 || v11 < *(unsigned __int16 *)(v41 + 32))
    goto LABEL_75;
LABEL_76:
  v47 = *(_QWORD *)(v41 + 48);
  v45 = v41 + 48;
  v46 = v47;
  if (!v47)
    goto LABEL_87;
  v48 = v45;
  do
  {
    v49 = *(unsigned __int16 *)(v46 + 32);
    v50 = v49 >= SymbolID;
    if (v49 >= SymbolID)
      v51 = (uint64_t *)v46;
    else
      v51 = (uint64_t *)(v46 + 8);
    if (v50)
      v48 = v46;
    v46 = *v51;
  }
  while (*v51);
  if (v48 == v45 || SymbolID < *(unsigned __int16 *)(v48 + 32))
LABEL_87:
    v48 = v45;
  v55 = v12 | ((unint64_t)LODWORD(a5) << 32);
  std::__tree<std::__value_type<unsigned short,float>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,float>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,float>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,float>>((uint64_t **)(v48 + 40), (unsigned __int16 *)&v55, (uint64_t)&v55);
  QP::ParserGrammar::setModifier(a1, a2);
  QP::ParserGrammar::setModifier(a1, a3);
  QP::ParserGrammar::setModifier(a1, a4);
}

void sub_218E2DB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15)
{
  uint64_t v15;

  std::__tree<unsigned short>::destroy(v15, a15);
  std::__tree<unsigned short>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t QP::ParserGrammar::loadUTIs(QP::ParserGrammar *this, CFDictionaryRef theDict, const __CFString *key)
{
  uint64_t result;
  const __CFDictionary *Value;
  const __CFDictionary *v8;
  CFIndex Count;
  unint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  char *v14;
  uint64_t i;
  const __CFString *v16;
  const __CFArray *v17;
  CFIndex v18;
  CFIndex j;
  const __CFString *ValueAtIndex;
  uint64_t v21;
  void *v22[2];
  char v23;
  void *v24[2];
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  result = CFDictionaryContainsKey(theDict, key);
  if ((_DWORD)result)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, key);
    result = CFDictionaryContainsKey(Value, CFSTR("UTI-CORE"));
    if ((_DWORD)result)
    {
      v8 = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("UTI-CORE"));
      Count = CFDictionaryGetCount(v8);
      v21 = (uint64_t)&v21;
      MEMORY[0x24BDAC7A8](Count);
      v10 = (8 * Count + 15) & 0xFFFFFFFFFFFFFFF0;
      v11 = (char *)&v22[-1] - v10;
      if ((unint64_t)(8 * Count) >= 0x200)
        v12 = 512;
      else
        v12 = 8 * Count;
      bzero((char *)&v22[-1] - v10, v12);
      MEMORY[0x24BDAC7A8](v13);
      v14 = (char *)&v22[-1] - v10;
      bzero((char *)&v22[-1] - v10, v12);
      CFDictionaryGetKeysAndValues(v8, (const void **)((char *)&v22[-1] - v10), (const void **)((char *)&v22[-1] - v10));
      if (Count >= 1)
      {
        for (i = 0; i != Count; ++i)
        {
          v16 = *(const __CFString **)&v11[8 * i];
          v17 = *(const __CFArray **)&v14[8 * i];
          v18 = CFArrayGetCount(v17);
          if (v18 >= 1)
          {
            for (j = 0; j != v18; ++j)
            {
              ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v17, j);
              QP::getUTF8StringFromCFString(v16, v24);
              QP::getUTF8StringFromCFString(ValueAtIndex, v22);
              QP::ParserGrammar::addUTI((uint64_t)this, (uint64_t)v24, v22);
              if (v23 < 0)
                operator delete(v22[0]);
              if (v25 < 0)
                operator delete(v24[0]);
            }
          }
        }
      }
      return 1;
    }
  }
  return result;
}

void sub_218E2DD40(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 113) < 0)
    operator delete(*(void **)(v1 - 136));
  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t *QP::ParserGrammar::addUTI(uint64_t a1, uint64_t a2, void **a3)
{
  unsigned int SymbolID;
  unsigned int v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t *v11;
  unsigned int v12;
  BOOL v13;
  uint64_t **v14;
  uint64_t **v15;
  unsigned int v16;
  BOOL v17;
  uint64_t *v18;
  char **v20;
  char *v21[2];
  unsigned __int16 v22;
  char **v23;
  char *v24[2];

  SymbolID = QP::ParserGrammar::getSymbolID(a1, a2);
  v6 = SymbolID;
  v9 = *(uint64_t **)(a1 + 216);
  v8 = (uint64_t **)(a1 + 216);
  v7 = v9;
  if (!v9)
    goto LABEL_12;
  v10 = v8;
  v11 = v7;
  do
  {
    v12 = *((unsigned __int16 *)v11 + 16);
    v13 = v12 >= SymbolID;
    if (v12 >= SymbolID)
      v14 = (uint64_t **)v11;
    else
      v14 = (uint64_t **)(v11 + 1);
    if (v13)
      v10 = (uint64_t **)v11;
    v11 = *v14;
  }
  while (*v14);
  if (v10 == v8 || SymbolID < *((unsigned __int16 *)v10 + 16))
  {
LABEL_12:
    v21[0] = 0;
    v21[1] = 0;
    v20 = v21;
    v22 = SymbolID;
    v24[0] = 0;
    v24[1] = 0;
    v23 = v24;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::set<unsigned short>>>((uint64_t)(v8 - 1), &v22, (uint64_t)&v22);
    std::__tree<std::string>::destroy((uint64_t)&v23, v24[0]);
    std::__tree<std::string>::destroy((uint64_t)&v20, v21[0]);
    v7 = *v8;
  }
  if (!v7)
    goto LABEL_24;
  v15 = v8;
  do
  {
    v16 = *((unsigned __int16 *)v7 + 16);
    v17 = v16 >= v6;
    if (v16 >= v6)
      v18 = v7;
    else
      v18 = v7 + 1;
    if (v17)
      v15 = (uint64_t **)v7;
    v7 = (uint64_t *)*v18;
  }
  while (*v18);
  if (v15 == v8 || v6 < *((unsigned __int16 *)v15 + 16))
LABEL_24:
    v15 = v8;
  return std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v15 + 5, a3, (uint64_t)a3);
}

void sub_218E2DE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;

  std::__tree<std::string>::destroy(v15, a15);
  std::__tree<std::string>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t QP::ParserGrammar::loadLLMArgsMap(QP::ParserGrammar *this, CFDictionaryRef theDict, const __CFString *key)
{
  uint64_t result;
  const __CFDictionary *Value;
  const __CFDictionary *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  const __CFString *v14;
  const __CFDictionary *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  size_t v19;
  uint64_t v20;
  char *v21;
  uint64_t i;
  const __CFString *v23;
  const __CFArray *v24;
  CFIndex v25;
  CFIndex v26;
  CFIndex v27;
  const __CFString *ValueAtIndex;
  const __CFString *v29;
  _QWORD v30[2];
  char *v31;
  char *v32;
  CFIndex Count;
  _QWORD *v34;
  uint64_t v35;
  CFIndex v36;
  void *v37[2];
  char v38;
  void *v39[2];
  char v40;
  __int128 v41;
  char v42;
  void *v43[2];
  char v44;
  void *v45[2];
  char v46;
  __int128 v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  result = CFDictionaryContainsKey(theDict, key);
  if ((_DWORD)result)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, key);
    result = CFDictionaryContainsKey(Value, CFSTR("LLMARGSMAP"));
    if ((_DWORD)result)
    {
      v8 = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("LLMARGSMAP"));
      v30[1] = v30;
      Count = CFDictionaryGetCount(v8);
      v9 = 8 * Count;
      MEMORY[0x24BDAC7A8](Count);
      v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
      if (v9 >= 0x200)
        v11 = 512;
      else
        v11 = v9;
      bzero((char *)v30 - v10, v11);
      MEMORY[0x24BDAC7A8](v12);
      bzero((char *)v30 - v10, v11);
      v32 = (char *)v30 - v10;
      v31 = (char *)v30 - v10;
      CFDictionaryGetKeysAndValues(v8, (const void **)((char *)v30 - v10), (const void **)((char *)v30 - v10));
      if (Count >= 1)
      {
        v13 = 0;
        do
        {
          v14 = *(const __CFString **)&v32[8 * v13];
          v35 = v13;
          v15 = *(const __CFDictionary **)&v31[8 * v13];
          v36 = CFDictionaryGetCount(v15);
          v34 = v30;
          v16 = 8 * v36;
          MEMORY[0x24BDAC7A8](v36);
          v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
          v18 = (char *)v30 - v17;
          if (v16 >= 0x200)
            v19 = 512;
          else
            v19 = v16;
          bzero((char *)v30 - v17, v19);
          MEMORY[0x24BDAC7A8](v20);
          v21 = (char *)v30 - v17;
          bzero((char *)v30 - v17, v19);
          CFDictionaryGetKeysAndValues(v15, (const void **)((char *)v30 - v17), (const void **)((char *)v30 - v17));
          if (v36 >= 1)
          {
            for (i = 0; i != v36; ++i)
            {
              v23 = *(const __CFString **)&v18[8 * i];
              v24 = *(const __CFArray **)&v21[8 * i];
              v25 = CFArrayGetCount(v24);
              v26 = v25;
              if (v25)
              {
                if (v25 >= 1)
                {
                  v27 = 0;
                  do
                  {
                    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v24, v27);
                    QP::getUTF8StringFromCFString(v14, &v41);
                    QP::getUTF8StringFromCFString(v23, v39);
                    QP::getUTF8StringFromCFString(ValueAtIndex, v37);
                    QP::ParserGrammar::addLLMArgMap((uint64_t)this, &v41, v39, v37);
                    if (v38 < 0)
                      operator delete(v37[0]);
                    if (v40 < 0)
                      operator delete(v39[0]);
                    if (v42 < 0)
                      operator delete((void *)v41);
                    ++v27;
                  }
                  while (v26 != v27);
                }
              }
              else
              {
                v29 = CFStringCreateWithCString(0, "", 0x8000100u);
                QP::getUTF8StringFromCFString(v14, &v47);
                QP::getUTF8StringFromCFString(v23, v45);
                QP::getUTF8StringFromCFString(v29, v43);
                QP::ParserGrammar::addLLMArgMap((uint64_t)this, &v47, v45, v43);
                if (v44 < 0)
                  operator delete(v43[0]);
                if (v46 < 0)
                  operator delete(v45[0]);
                if (v48 < 0)
                  operator delete((void *)v47);
              }
            }
          }
          v13 = v35 + 1;
        }
        while (v35 + 1 != Count);
      }
      return 1;
    }
  }
  return result;
}

void sub_218E2E25C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 145) < 0)
    operator delete(*(void **)(v1 - 168));
  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(exception_object);
}

uint64_t *QP::ParserGrammar::addLLMArgMap(uint64_t a1, __int128 *a2, void **a3, void **a4)
{
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v13;
  char **v14;
  char *v15;
  uint64_t v16;
  std::string __p;
  uint64_t v18;
  char *v19;

  v7 = (uint64_t **)(a1 + 424);
  if ((void **)(a1 + 432) == std::__tree<std::string>::find<std::string>(a1 + 424, (void **)a2))
  {
    v15 = 0;
    v16 = 0;
    v14 = &v15;
    std::pair<std::string,std::map<std::string,std::set<std::string>>>::pair[abi:ne180100]<std::string const&,std::map<std::string,std::set<std::string>>,0>(&__p, a2, (std::string::size_type *)&v14);
    std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::map<std::string,std::set<std::string>>>>(v7, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((uint64_t)&v18, v19);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((uint64_t)&v14, v15);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v8 = std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
    v9 = (uint64_t *)std::__tree<std::string>::find<std::string>((uint64_t)(v8 + 7), a3);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    if (std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)+ 8 != v9)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
      goto LABEL_7;
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v13 = std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
    v15 = 0;
    v16 = 0;
    v14 = &v15;
    std::pair<std::string,std::map<std::string,std::set<std::string>>>::pair[abi:ne180100]<std::string const&,std::map<std::string,std::set<std::string>>,0>(&__p, (__int128 *)a3, (std::string::size_type *)&v14);
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::set<std::string>>>((uint64_t **)v13 + 7, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
    std::__tree<std::string>::destroy((uint64_t)&v18, v19);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::__tree<std::string>::destroy((uint64_t)&v14, v15);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
LABEL_7:
  v10 = std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v11 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v10 + 7, a3, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
  return std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)v11 + 7, a4, (uint64_t)a4);
}

void sub_218E2E4E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  char *v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, char *);
  v6 = va_arg(va1, _QWORD);
  std::pair<std::string,std::set<std::string>>::~pair((uint64_t)va1);
  std::__tree<std::string>::destroy((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

uint64_t QP::ParserGrammar::loadIntentActions(QP::ParserGrammar *this, CFDictionaryRef theDict, const __CFString *key)
{
  uint64_t result;
  const __CFDictionary *Value;
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  unint64_t v10;
  uint64_t v11;
  const void **v12;
  size_t v13;
  uint64_t v14;
  const __CFString *v15;
  CFIndex v16;
  unint64_t v17;
  const void **v18;
  size_t v19;
  uint64_t i;
  const __CFString *v21;
  const __CFArray *v22;
  CFIndex v23;
  CFIndex j;
  const __CFString *ValueAtIndex;
  _QWORD v26[2];
  const void **v27;
  CFDictionaryRef v28;
  CFIndex Count;
  _QWORD *v30;
  uint64_t v31;
  CFDictionaryRef v32;
  void *v33[2];
  char v34;
  void *v35[2];
  char v36;
  __int128 v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  result = CFDictionaryContainsKey(theDict, key);
  if ((_DWORD)result)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, key);
    result = CFDictionaryContainsKey(Value, CFSTR("INTENTS"));
    if ((_DWORD)result)
    {
      v8 = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("INTENTS"));
      result = CFDictionaryContainsKey(v8, CFSTR("ACTIONS"));
      if ((_DWORD)result)
      {
        v9 = (const __CFDictionary *)CFDictionaryGetValue(v8, CFSTR("ACTIONS"));
        v26[1] = v26;
        Count = CFDictionaryGetCount(v9);
        MEMORY[0x24BDAC7A8](Count);
        v12 = (const void **)((char *)v26 - v11);
        if (v10 >= 0x200)
          v13 = 512;
        else
          v13 = v10;
        bzero((char *)v26 - v11, v13);
        v27 = v12;
        v28 = v9;
        CFDictionaryGetKeysAndValues(v9, v12, 0);
        if (Count >= 1)
        {
          v14 = 0;
          do
          {
            v31 = v14;
            v15 = (const __CFString *)v27[v14];
            v32 = (CFDictionaryRef)CFDictionaryGetValue(v28, v15);
            v16 = CFDictionaryGetCount(v32);
            v30 = v26;
            MEMORY[0x24BDAC7A8](v16);
            v18 = (const void **)((char *)v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
            if (v17 >= 0x200)
              v19 = 512;
            else
              v19 = v17;
            bzero((char *)v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v19);
            CFDictionaryGetKeysAndValues(v32, v18, 0);
            if (v16 >= 1)
            {
              for (i = 0; i != v16; ++i)
              {
                v21 = (const __CFString *)v18[i];
                v22 = (const __CFArray *)CFDictionaryGetValue(v32, v21);
                v23 = CFArrayGetCount(v22);
                if (v23 >= 1)
                {
                  for (j = 0; j != v23; ++j)
                  {
                    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v22, j);
                    QP::getUTF8StringFromCFString(v15, &v37);
                    QP::getUTF8StringFromCFString(v21, v35);
                    QP::getUTF8StringFromCFString(ValueAtIndex, v33);
                    QP::ParserGrammar::addIntentAction((uint64_t)this, &v37, (uint64_t)v35, (uint64_t)v33);
                    if (v34 < 0)
                      operator delete(v33[0]);
                    if (v36 < 0)
                      operator delete(v35[0]);
                    if (v38 < 0)
                      operator delete((void *)v37);
                  }
                }
              }
            }
            v14 = v31 + 1;
          }
          while (v31 + 1 != Count);
        }
        return 1;
      }
    }
  }
  return result;
}

void sub_218E2E7E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 113) < 0)
    operator delete(*(void **)(v1 - 136));
  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t **QP::ParserGrammar::addIntentAction(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t **v10;
  _QWORD **v12;
  _QWORD *v13;
  uint64_t v14;
  std::string __p;
  _QWORD v16[3];
  unsigned __int16 v17;
  unsigned __int16 v18;

  v18 = QP::ParserGrammar::symbolID(a1, a3);
  v17 = QP::ParserGrammar::symbolID(a1, a4);
  v7 = (uint64_t **)(a1 + 376);
  if ((void **)(a1 + 384) == std::__tree<std::string>::find<std::string>(a1 + 376, (void **)a2))
  {
    v13 = 0;
    v14 = 0;
    v12 = &v13;
    std::pair<std::string,std::map<std::string,std::set<std::string>>>::pair[abi:ne180100]<std::string const&,std::map<std::string,std::set<std::string>>,0>(&__p, a2, (std::string::size_type *)&v12);
    std::__tree<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::map<unsigned short,std::set<unsigned short>>>>(v7, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy((uint64_t)v16, (_QWORD *)v16[1]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy((uint64_t)&v12, v13);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v8 = std::__tree<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
    v13 = 0;
    v14 = 0;
    v12 = &v13;
    LOWORD(__p.__r_.__value_.__l.__data_) = v18;
    __p.__r_.__value_.__r.__words[2] = 0;
    v16[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::set<unsigned short>>>((uint64_t)(v8 + 7), (unsigned __int16 *)&__p, (uint64_t)&__p);
    std::__tree<unsigned short>::destroy((uint64_t)&__p.__r_.__value_.__l.__size_, (_QWORD *)__p.__r_.__value_.__r.__words[2]);
    std::__tree<unsigned short>::destroy((uint64_t)&v12, v13);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v9 = std::__tree<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  v10 = std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)v9 + 7, &v18, (uint64_t)&std::piecewise_construct, &__p);
  return std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>(v10 + 5, &v17, &v17);
}

void sub_218E2E9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  uint64_t v14;

  std::__tree<unsigned short>::destroy(v14, a14);
  std::__tree<unsigned short>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t QP::ParserGrammar::loadU2ArgActions(QP::ParserGrammar *this, CFDictionaryRef theDict, const __CFString *key)
{
  const __CFDictionary *Value;
  const __CFDictionary *v7;
  CFIndex Count;
  unint64_t v9;
  uint64_t v10;
  const void **v11;
  size_t v12;
  uint64_t i;
  const __CFString *v14;
  const __CFArray *v15;
  CFIndex v16;
  CFIndex j;
  const __CFString *ValueAtIndex;
  uint64_t v20;
  void *v21[2];
  char v22;
  __int128 v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (CFDictionaryContainsKey(theDict, key))
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, key);
    if (CFDictionaryContainsKey(Value, CFSTR("U2ARGACTIONS")))
    {
      v7 = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("U2ARGACTIONS"));
      Count = CFDictionaryGetCount(v7);
      v20 = (uint64_t)&v20;
      MEMORY[0x24BDAC7A8](Count);
      v11 = (const void **)((char *)&v21[-1] - v10);
      v12 = v9 >= 0x200 ? 512 : v9;
      bzero((char *)&v21[-1] - v10, v12);
      CFDictionaryGetKeysAndValues(v7, v11, 0);
      if (Count >= 1)
      {
        for (i = 0; i != Count; ++i)
        {
          v14 = (const __CFString *)v11[i];
          v15 = (const __CFArray *)CFDictionaryGetValue(v7, v14);
          v16 = CFArrayGetCount(v15);
          if (v16 >= 1)
          {
            for (j = 0; j != v16; ++j)
            {
              ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v15, j);
              QP::getUTF8StringFromCFString(v14, &v23);
              QP::getUTF8StringFromCFString(ValueAtIndex, v21);
              QP::ParserGrammar::addU2ArgAction((uint64_t)this, &v23, (uint64_t)v21);
              if (v22 < 0)
                operator delete(v21[0]);
              if (v24 < 0)
                operator delete((void *)v23);
            }
          }
        }
      }
    }
  }
  return 0;
}

void sub_218E2EBD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 113) < 0)
    operator delete(*(void **)(v1 - 136));
  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t **QP::ParserGrammar::addU2ArgAction(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  _QWORD **v8;
  _QWORD *v9[2];
  std::string __p;
  _QWORD *v11[3];
  unsigned __int16 SymbolID;

  SymbolID = QP::ParserGrammar::getSymbolID(a1, a3);
  v5 = (uint64_t **)(a1 + 400);
  if ((void **)(a1 + 408) == std::__tree<std::string>::find<std::string>(a1 + 400, (void **)a2))
  {
    v9[0] = 0;
    v9[1] = 0;
    v8 = v9;
    std::pair<std::string,std::map<std::string,std::set<std::string>>>::pair[abi:ne180100]<std::string const&,std::map<std::string,std::set<std::string>>,0>(&__p, a2, (std::string::size_type *)&v8);
    std::__tree<std::__value_type<std::string,std::set<unsigned short>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned short>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned short>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::set<unsigned short>>>(v5, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
    std::__tree<unsigned short>::destroy((uint64_t)v11, v11[1]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::__tree<unsigned short>::destroy((uint64_t)&v8, v9[0]);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v6 = std::__tree<std::__value_type<std::string,std::set<unsigned short>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned short>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned short>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
  return std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t **)v6 + 7, &SymbolID, &SymbolID);
}

void sub_218E2ECF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, char a12)
{
  std::pair<std::string,std::set<unsigned short>>::~pair((uint64_t)&a12);
  std::__tree<unsigned short>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t QP::ParserGrammar::loadActions(QP::ParserGrammar *this, CFDictionaryRef theDict, const __CFString *key)
{
  uint64_t result;
  const __CFDictionary *Value;
  const __CFDictionary *v8;
  unint64_t v9;
  uint64_t v10;
  const void **v11;
  size_t v12;
  uint64_t v13;
  const __CFString *v14;
  unint64_t v15;
  const void **v16;
  size_t v17;
  uint64_t v18;
  const __CFString *v19;
  unint64_t v20;
  const void **v21;
  size_t v22;
  uint64_t i;
  const __CFString *v24;
  const __CFArray *v25;
  CFIndex v26;
  CFIndex j;
  const __CFString *ValueAtIndex;
  _QWORD v29[2];
  const void **v30;
  CFDictionaryRef v31;
  CFIndex Count;
  _QWORD *v33;
  uint64_t v34;
  const void **v35;
  CFIndex v36;
  CFDictionaryRef v37;
  _QWORD *v38;
  uint64_t v39;
  CFIndex v40;
  CFDictionaryRef v41;
  void *v42[2];
  char v43;
  void *v44[2];
  char v45;
  void *v46[2];
  char v47;
  __int128 v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  result = CFDictionaryContainsKey(theDict, key);
  if ((_DWORD)result)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, key);
    result = CFDictionaryContainsKey(Value, CFSTR("ACTIONS"));
    if ((_DWORD)result)
    {
      v8 = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("ACTIONS"));
      v29[1] = v29;
      Count = CFDictionaryGetCount(v8);
      MEMORY[0x24BDAC7A8](Count);
      v11 = (const void **)((char *)v29 - v10);
      if (v9 >= 0x200)
        v12 = 512;
      else
        v12 = v9;
      bzero((char *)v29 - v10, v12);
      v31 = v8;
      v30 = v11;
      CFDictionaryGetKeysAndValues(v8, v11, 0);
      if (Count >= 1)
      {
        v13 = 0;
        do
        {
          v34 = v13;
          v14 = (const __CFString *)v30[v13];
          v37 = (CFDictionaryRef)CFDictionaryGetValue(v31, v14);
          v36 = CFDictionaryGetCount(v37);
          v33 = v29;
          MEMORY[0x24BDAC7A8](v36);
          v16 = (const void **)((char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
          if (v15 >= 0x200)
            v17 = 512;
          else
            v17 = v15;
          bzero((char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
          v35 = v16;
          CFDictionaryGetKeysAndValues(v37, v16, 0);
          if (v36 >= 1)
          {
            v18 = 0;
            do
            {
              v39 = v18;
              v19 = (const __CFString *)v35[v18];
              v41 = (CFDictionaryRef)CFDictionaryGetValue(v37, v19);
              v40 = CFDictionaryGetCount(v41);
              v38 = v29;
              MEMORY[0x24BDAC7A8](v40);
              v21 = (const void **)((char *)v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
              if (v20 >= 0x200)
                v22 = 512;
              else
                v22 = v20;
              bzero((char *)v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), v22);
              CFDictionaryGetKeysAndValues(v41, v21, 0);
              if (v40 >= 1)
              {
                for (i = 0; i != v40; ++i)
                {
                  v24 = (const __CFString *)v21[i];
                  v25 = (const __CFArray *)CFDictionaryGetValue(v41, v24);
                  v26 = CFArrayGetCount(v25);
                  if (v26 >= 1)
                  {
                    for (j = 0; j != v26; ++j)
                    {
                      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v25, j);
                      QP::getUTF8StringFromCFString(v14, &v48);
                      QP::getUTF8StringFromCFString(v19, v46);
                      QP::getUTF8StringFromCFString(v24, v44);
                      QP::getUTF8StringFromCFString(ValueAtIndex, v42);
                      QP::ParserGrammar::addAction((uint64_t)this, &v48, (uint64_t)v46, (uint64_t)v44, v42);
                      if (v43 < 0)
                        operator delete(v42[0]);
                      if (v45 < 0)
                        operator delete(v44[0]);
                      if (v47 < 0)
                        operator delete(v46[0]);
                      if (v49 < 0)
                        operator delete((void *)v48);
                    }
                  }
                }
              }
              v18 = v39 + 1;
            }
            while (v39 + 1 != v36);
          }
          v13 = v34 + 1;
        }
        while (v34 + 1 != Count);
      }
      return 1;
    }
  }
  return result;
}

void sub_218E2F0B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 169) < 0)
    operator delete(*(void **)(v1 - 192));
  if (*(char *)(v1 - 145) < 0)
    operator delete(*(void **)(v1 - 168));
  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(exception_object);
}

uint64_t *QP::ParserGrammar::addAction(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, void **a5)
{
  uint64_t **v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t **v15;
  char **v17;
  char *v18;
  uint64_t v19;
  std::string __p;
  _QWORD v21[3];
  unsigned __int16 v22;
  unsigned __int16 SymbolID;

  SymbolID = QP::ParserGrammar::getSymbolID(a1, a3);
  v22 = QP::ParserGrammar::getSymbolID(a1, a4);
  v9 = (uint64_t **)(a1 + 352);
  if ((void **)(a1 + 360) == std::__tree<std::string>::find<std::string>(a1 + 352, (void **)a2))
  {
    v18 = 0;
    v19 = 0;
    v17 = &v18;
    std::pair<std::string,std::map<std::string,std::set<std::string>>>::pair[abi:ne180100]<std::string const&,std::map<std::string,std::set<std::string>>,0>(&__p, a2, (std::string::size_type *)&v17);
    std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>(v9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
    std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>>>::destroy((uint64_t)v21, (_QWORD *)v21[1]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>>>::destroy((uint64_t)&v17, v18);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v11 = std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
    v18 = 0;
    v19 = 0;
    v17 = &v18;
    LOWORD(__p.__r_.__value_.__l.__data_) = SymbolID;
    __p.__r_.__value_.__r.__words[2] = 0;
    v21[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::set<unsigned short>>>((uint64_t)(v11 + 7), (unsigned __int16 *)&__p, (uint64_t)&__p);
    std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy((uint64_t)&__p.__r_.__value_.__l.__size_, (_QWORD *)__p.__r_.__value_.__r.__words[2]);
    std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy((uint64_t)&v17, v18);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v12 = std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&SymbolID;
    v13 = std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)v12 + 7, &SymbolID, (uint64_t)&std::piecewise_construct, &__p);
    v18 = 0;
    v19 = 0;
    v17 = &v18;
    LOWORD(__p.__r_.__value_.__l.__data_) = v22;
    __p.__r_.__value_.__r.__words[2] = 0;
    v21[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::set<unsigned short>>>((uint64_t)(v13 + 5), (unsigned __int16 *)&__p, (uint64_t)&__p);
    std::__tree<std::string>::destroy((uint64_t)&__p.__r_.__value_.__l.__size_, (char *)__p.__r_.__value_.__r.__words[2]);
    std::__tree<std::string>::destroy((uint64_t)&v17, v18);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v10 = (uint64_t **)(std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)+ 7);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&SymbolID;
  }
  else
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v10 = (uint64_t **)(std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)+ 7);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&SymbolID;
  }
  v14 = std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v10, &SymbolID, (uint64_t)&std::piecewise_construct, &__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  v15 = std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v14 + 5, &v22, (uint64_t)&std::piecewise_construct, &__p);
  return std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v15 + 5, a5, (uint64_t)a5);
}

void sub_218E2F3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, char *a14)
{
  uint64_t v14;

  std::__tree<std::string>::destroy(v14, a14);
  std::__tree<std::string>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t QP::ParserGrammar::loadProperties(uint64_t **this, CFDictionaryRef theDict, const __CFString *key)
{
  uint64_t result;
  const __CFDictionary *Value;
  const __CFDictionary *v8;
  CFIndex Count;
  unint64_t v10;
  uint64_t v11;
  const void **v12;
  size_t v13;
  uint64_t v14;
  const __CFString *v15;
  const __CFDictionary *v16;
  CFIndex v17;
  unint64_t v18;
  const void **v19;
  size_t v20;
  const __CFDictionary *v21;
  CFIndex v22;
  unint64_t v23;
  const void **v24;
  size_t v25;
  const __CFDictionary *v26;
  CFIndex v27;
  unint64_t v28;
  const void **v29;
  size_t v30;
  const __CFDictionary *v31;
  CFIndex v32;
  unint64_t v33;
  const void **v34;
  size_t v35;
  _QWORD v36[2];
  uint64_t **v37;
  CFDictionaryRef v38;
  void *v39[2];
  char v40;
  void *v41[2];
  char v42;
  void *v43[2];
  char v44;
  void *v45[2];
  char v46;
  unsigned __int16 SymbolID;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  result = CFDictionaryContainsKey(theDict, key);
  if ((_DWORD)result)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, key);
    result = CFDictionaryContainsKey(Value, CFSTR("PROPS"));
    if ((_DWORD)result)
    {
      v8 = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("PROPS"));
      Count = CFDictionaryGetCount(v8);
      v36[1] = v36;
      MEMORY[0x24BDAC7A8](Count);
      v12 = (const void **)((char *)v36 - v11);
      if (v10 >= 0x200)
        v13 = 512;
      else
        v13 = v10;
      bzero((char *)v36 - v11, v13);
      v38 = v8;
      CFDictionaryGetKeysAndValues(v8, v12, 0);
      if (Count >= 1)
      {
        v14 = 0;
        v37 = this + 92;
        do
        {
          v15 = (const __CFString *)v12[v14];
          if (CFStringsAreEqual(v15, CFSTR("RequiresComplement")))
          {
            v16 = (const __CFDictionary *)CFDictionaryGetValue(v38, v15);
            v17 = CFDictionaryGetCount(v16);
            MEMORY[0x24BDAC7A8](v17);
            v19 = (const void **)((char *)v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
            if (v18 >= 0x200)
              v20 = 512;
            else
              v20 = v18;
            bzero((char *)v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v20);
            CFDictionaryGetKeysAndValues(v16, v19, 0);
            if (v17 >= 1)
            {
              do
              {
                QP::getUTF8StringFromCFString((const __CFString *)*v19, v45);
                SymbolID = QP::ParserGrammar::getSymbolID((uint64_t)this, (uint64_t)v45);
                std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>(this + 95, &SymbolID, &SymbolID);
                if (v46 < 0)
                  operator delete(v45[0]);
                ++v19;
                --v17;
              }
              while (v17);
            }
          }
          else if (CFStringsAreEqual(v15, CFSTR("IsExtended")))
          {
            v21 = (const __CFDictionary *)CFDictionaryGetValue(v38, v15);
            v22 = CFDictionaryGetCount(v21);
            MEMORY[0x24BDAC7A8](v22);
            v24 = (const void **)((char *)v36 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
            if (v23 >= 0x200)
              v25 = 512;
            else
              v25 = v23;
            bzero((char *)v36 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), v25);
            CFDictionaryGetKeysAndValues(v21, v24, 0);
            if (v22 >= 1)
            {
              do
              {
                QP::getUTF8StringFromCFString((const __CFString *)*v24, v43);
                SymbolID = QP::ParserGrammar::getSymbolID((uint64_t)this, (uint64_t)v43);
                std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>(this + 104, &SymbolID, &SymbolID);
                if (v44 < 0)
                  operator delete(v43[0]);
                ++v24;
                --v22;
              }
              while (v22);
            }
          }
          else if (CFStringsAreEqual(v15, CFSTR("IsParent")))
          {
            v26 = (const __CFDictionary *)CFDictionaryGetValue(v38, v15);
            v27 = CFDictionaryGetCount(v26);
            MEMORY[0x24BDAC7A8](v27);
            v29 = (const void **)((char *)v36 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
            if (v28 >= 0x200)
              v30 = 512;
            else
              v30 = v28;
            bzero((char *)v36 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0), v30);
            CFDictionaryGetKeysAndValues(v26, v29, 0);
            if (v27 >= 1)
            {
              do
              {
                QP::getUTF8StringFromCFString((const __CFString *)*v29, v41);
                SymbolID = QP::ParserGrammar::getSymbolID((uint64_t)this, (uint64_t)v41);
                std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>(this + 104, &SymbolID, &SymbolID);
                if (v42 < 0)
                  operator delete(v41[0]);
                ++v29;
                --v27;
              }
              while (v27);
            }
          }
          else if (CFStringsAreEqual(v15, CFSTR("IsCombinable")))
          {
            v31 = (const __CFDictionary *)CFDictionaryGetValue(v38, v15);
            v32 = CFDictionaryGetCount(v31);
            MEMORY[0x24BDAC7A8](v32);
            v34 = (const void **)((char *)v36 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
            v35 = v33 >= 0x200 ? 512 : v33;
            bzero((char *)v36 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0), v35);
            CFDictionaryGetKeysAndValues(v31, v34, 0);
            if (v32 >= 1)
            {
              do
              {
                QP::getUTF8StringFromCFString((const __CFString *)*v34, v39);
                SymbolID = QP::ParserGrammar::getSymbolID((uint64_t)this, (uint64_t)v39);
                std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>(v37, &SymbolID, &SymbolID);
                if (v40 < 0)
                  operator delete(v39[0]);
                ++v34;
                --v32;
              }
              while (v32);
            }
          }
          ++v14;
        }
        while (v14 != Count);
      }
      return 1;
    }
  }
  return result;
}

void sub_218E2F8AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 169) < 0)
    operator delete(*(void **)(v1 - 192));
  _Unwind_Resume(exception_object);
}

uint64_t QP::ParserGrammar::loadFileExtensions(QP::ParserGrammar *this, CFDictionaryRef theDict, const __CFString *key)
{
  uint64_t result;
  const __CFDictionary *Value;
  const __CFDictionary *v8;
  CFIndex Count;
  unint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  char *v14;
  uint64_t i;
  const __CFString *v16;
  const __CFArray *v17;
  CFIndex v18;
  CFIndex j;
  const __CFString *ValueAtIndex;
  uint64_t v21;
  void *v22[2];
  char v23;
  void *v24[2];
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  result = CFDictionaryContainsKey(theDict, key);
  if ((_DWORD)result)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, key);
    result = CFDictionaryContainsKey(Value, CFSTR("FILE-EXTENSIONS"));
    if ((_DWORD)result)
    {
      v8 = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("FILE-EXTENSIONS"));
      Count = CFDictionaryGetCount(v8);
      v21 = (uint64_t)&v21;
      MEMORY[0x24BDAC7A8](Count);
      v10 = (8 * Count + 15) & 0xFFFFFFFFFFFFFFF0;
      v11 = (char *)&v22[-1] - v10;
      if ((unint64_t)(8 * Count) >= 0x200)
        v12 = 512;
      else
        v12 = 8 * Count;
      bzero((char *)&v22[-1] - v10, v12);
      MEMORY[0x24BDAC7A8](v13);
      v14 = (char *)&v22[-1] - v10;
      bzero((char *)&v22[-1] - v10, v12);
      CFDictionaryGetKeysAndValues(v8, (const void **)((char *)&v22[-1] - v10), (const void **)((char *)&v22[-1] - v10));
      if (Count >= 1)
      {
        for (i = 0; i != Count; ++i)
        {
          v16 = *(const __CFString **)&v11[8 * i];
          v17 = *(const __CFArray **)&v14[8 * i];
          v18 = CFArrayGetCount(v17);
          if (v18 >= 1)
          {
            for (j = 0; j != v18; ++j)
            {
              ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v17, j);
              QP::getUTF8StringFromCFString(v16, v24);
              QP::getUTF8StringFromCFString(ValueAtIndex, v22);
              QP::ParserGrammar::addFileExtension((uint64_t)this, (uint64_t)v24, v22);
              if (v23 < 0)
                operator delete(v22[0]);
              if (v25 < 0)
                operator delete(v24[0]);
            }
          }
        }
      }
      return 1;
    }
  }
  return result;
}

void sub_218E2FAFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 113) < 0)
    operator delete(*(void **)(v1 - 136));
  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t *QP::ParserGrammar::addFileExtension(uint64_t a1, uint64_t a2, void **a3)
{
  unsigned int SymbolID;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t *v17;
  char **v19;
  char *v20[2];
  unsigned __int16 v21;
  char **v22;
  char *v23[2];

  SymbolID = QP::ParserGrammar::getSymbolID(a1, a2);
  v6 = SymbolID;
  v7 = (uint64_t *)(a1 + 264);
  v8 = *(_QWORD *)(a1 + 264);
  if (!v8)
    goto LABEL_12;
  v9 = a1 + 264;
  v10 = *(_QWORD *)(a1 + 264);
  do
  {
    v11 = *(unsigned __int16 *)(v10 + 32);
    v12 = v11 >= SymbolID;
    if (v11 >= SymbolID)
      v13 = (uint64_t *)v10;
    else
      v13 = (uint64_t *)(v10 + 8);
    if (v12)
      v9 = v10;
    v10 = *v13;
  }
  while (*v13);
  if ((uint64_t *)v9 == v7 || SymbolID < *(unsigned __int16 *)(v9 + 32))
  {
LABEL_12:
    v20[0] = 0;
    v20[1] = 0;
    v19 = v20;
    v21 = SymbolID;
    v23[0] = 0;
    v23[1] = 0;
    v22 = v23;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::set<unsigned short>>>(a1 + 256, &v21, (uint64_t)&v21);
    std::__tree<std::string>::destroy((uint64_t)&v22, v23[0]);
    std::__tree<std::string>::destroy((uint64_t)&v19, v20[0]);
    v8 = *v7;
  }
  if (!v8)
    goto LABEL_24;
  v14 = a1 + 264;
  do
  {
    v15 = *(unsigned __int16 *)(v8 + 32);
    v16 = v15 >= v6;
    if (v15 >= v6)
      v17 = (uint64_t *)v8;
    else
      v17 = (uint64_t *)(v8 + 8);
    if (v16)
      v14 = v8;
    v8 = *v17;
  }
  while (*v17);
  if ((uint64_t *)v14 == v7 || v6 < *(unsigned __int16 *)(v14 + 32))
LABEL_24:
    v14 = a1 + 264;
  return std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(v14 + 40), a3, (uint64_t)a3);
}

void sub_218E2FC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;

  std::__tree<std::string>::destroy(v15, a15);
  std::__tree<std::string>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t QP::ParserGrammar::loadValues(QP::ParserGrammar *this, CFDictionaryRef theDict, const __CFString *key)
{
  uint64_t result;
  const __CFDictionary *Value;
  const __CFDictionary *v8;
  unint64_t v9;
  unint64_t v10;
  const void **v11;
  size_t v12;
  uint64_t v13;
  char *v14;
  uint64_t i;
  const __CFString *v16;
  const __CFDictionary *v17;
  CFIndex v18;
  unint64_t v19;
  const __CFString **v20;
  size_t v21;
  uint64_t v22;
  const __CFString **v23;
  const __CFString *v24;
  const __CFString *v25;
  uint64_t v26;
  char *v27;
  const void **v28;
  CFIndex Count;
  std::string v30;
  void *v31[2];
  char v32;
  void *v33[2];
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  result = CFDictionaryContainsKey(theDict, key);
  if ((_DWORD)result)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, key);
    result = CFDictionaryContainsKey(Value, CFSTR("VALUES"));
    if ((_DWORD)result)
    {
      v8 = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("VALUES"));
      v26 = (uint64_t)&v26;
      Count = CFDictionaryGetCount(v8);
      v9 = 8 * Count;
      MEMORY[0x24BDAC7A8](Count);
      v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
      v11 = (const void **)((char *)&v26 - v10);
      if (v9 >= 0x200)
        v12 = 512;
      else
        v12 = v9;
      bzero((char *)&v26 - v10, v12);
      MEMORY[0x24BDAC7A8](v13);
      v14 = (char *)&v26 - v10;
      bzero(v14, v12);
      v27 = v14;
      v28 = v11;
      CFDictionaryGetKeysAndValues(v8, v11, (const void **)v14);
      if (Count >= 1)
      {
        for (i = 0; i != Count; ++i)
        {
          v16 = (const __CFString *)v28[i];
          v17 = *(const __CFDictionary **)&v27[8 * i];
          v18 = CFDictionaryGetCount(v17);
          MEMORY[0x24BDAC7A8](v18);
          v19 = (8 * v18 + 15) & 0xFFFFFFFFFFFFFFF0;
          v20 = (const __CFString **)((char *)&v26 - v19);
          if ((unint64_t)(8 * v18) >= 0x200)
            v21 = 512;
          else
            v21 = 8 * v18;
          bzero((char *)&v26 - v19, v21);
          MEMORY[0x24BDAC7A8](v22);
          v23 = (const __CFString **)((char *)&v26 - v19);
          bzero((char *)&v26 - v19, v21);
          CFDictionaryGetKeysAndValues(v17, (const void **)((char *)&v26 - v19), (const void **)((char *)&v26 - v19));
          if (v18 >= 1)
          {
            do
            {
              v24 = *v20;
              v25 = *v23;
              QP::getUTF8StringFromCFString(v16, v33);
              QP::getUTF8StringFromCFString(v24, v31);
              QP::getUTF8StringFromCFString(v25, &v30);
              QP::ParserGrammar::addValue((uint64_t)this, (uint64_t)v33, v31, &v30);
              if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v30.__r_.__value_.__l.__data_);
              if (v32 < 0)
                operator delete(v31[0]);
              if (v34 < 0)
                operator delete(v33[0]);
              ++v23;
              ++v20;
              --v18;
            }
            while (v18);
          }
        }
      }
      return 1;
    }
  }
  return result;
}

void sub_218E2FF10(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 113) < 0)
    operator delete(*(void **)(v1 - 136));
  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

void QP::ParserGrammar::addValue(uint64_t a1, uint64_t a2, _QWORD *a3, const std::string *a4)
{
  unsigned int SymbolID;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t **v14;
  std::string *v15;
  uint64_t *v16;
  size_t v17;
  const void *v18;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string v24;
  void *__p[2];
  _QWORD *v26[3];
  unsigned __int16 v27;

  SymbolID = QP::ParserGrammar::getSymbolID(a1, a2);
  v27 = SymbolID;
  v9 = *(_QWORD *)(a1 + 480);
  if (!v9)
    goto LABEL_12;
  v10 = a1 + 480;
  do
  {
    v11 = *(unsigned __int16 *)(v9 + 32);
    v12 = v11 >= SymbolID;
    if (v11 >= SymbolID)
      v13 = (uint64_t *)v9;
    else
      v13 = (uint64_t *)(v9 + 8);
    if (v12)
      v10 = v9;
    v9 = *v13;
  }
  while (*v13);
  if (v10 == a1 + 480 || SymbolID < *(unsigned __int16 *)(v10 + 32))
  {
LABEL_12:
    *(_OWORD *)&v24.__r_.__value_.__r.__words[1] = 0uLL;
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24.__r_.__value_.__l.__size_;
    LOWORD(__p[0]) = SymbolID;
    v26[0] = 0;
    v26[1] = 0;
    __p[1] = v26;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::set<unsigned short>>>(a1 + 472, (unsigned __int16 *)__p, (uint64_t)__p);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p[1], v26[0]);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v24, (_QWORD *)v24.__r_.__value_.__l.__size_);
  }
  __p[0] = &v27;
  v14 = std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)(a1 + 472), &v27, (uint64_t)&std::piecewise_construct, (_WORD **)__p);
  __p[0] = a3;
  v15 = &v24;
  v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14 + 5, (void **)a3, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
  std::string::operator=((std::string *)(v16 + 7), a4);
  if (*(char *)(a2 + 23) >= 0)
    v17 = *(unsigned __int8 *)(a2 + 23);
  else
    v17 = *(_QWORD *)(a2 + 8);
  std::string::basic_string[abi:ne180100]((uint64_t)&v24, v17 + 1);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v15 = (std::string *)v24.__r_.__value_.__r.__words[0];
  if (v17)
  {
    if (*(char *)(a2 + 23) >= 0)
      v18 = (const void *)a2;
    else
      v18 = *(const void **)a2;
    memmove(v15, v18, v17);
  }
  *(_WORD *)((char *)&v15->__r_.__value_.__l.__data_ + v17) = 45;
  v19 = *((char *)a3 + 23);
  if (v19 >= 0)
    v20 = (const std::string::value_type *)a3;
  else
    v20 = (const std::string::value_type *)*a3;
  if (v19 >= 0)
    v21 = *((unsigned __int8 *)a3 + 23);
  else
    v21 = a3[1];
  v22 = std::string::append(&v24, v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v26[0] = (_QWORD *)v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  QP::ParserGrammar::getSymbolID(a1, (uint64_t)__p);
  if (SHIBYTE(v26[0]) < 0)
    operator delete(__p[0]);
}

void sub_218E30154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, _QWORD *a18)
{
  uint64_t v18;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v18, a18);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t QP::ParserGrammar::loadCategories(QP::ParserGrammar *this, CFDictionaryRef theDict)
{
  uint64_t result;
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  const __CFDictionary *v7;
  CFIndex Count;
  unint64_t v9;
  char *v10;
  size_t v11;
  uint64_t v12;
  char *v13;
  uint64_t i;
  const __CFString *v15;
  const __CFArray *v16;
  CFIndex v17;
  CFIndex j;
  const __CFString *ValueAtIndex;
  uint64_t v20;
  void *v21[2];
  char v22;
  void *v23[2];
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  result = CFDictionaryContainsKey(theDict, CFSTR("com.apple.spotlight"));
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(*((_QWORD *)this + 5) + 16) == 1)
    {
      Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("com.apple.spotlight"));
      result = CFDictionaryContainsKey(Value, CFSTR("GROUPINGS"));
      if ((_DWORD)result)
      {
        v6 = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("GROUPINGS"));
        result = CFDictionaryContainsKey(v6, CFSTR("ios"));
        if ((_DWORD)result)
        {
          result = (uint64_t)CFDictionaryGetValue(v6, CFSTR("ios"));
          if (result)
          {
            v7 = (const __CFDictionary *)result;
            Count = CFDictionaryGetCount((CFDictionaryRef)result);
            v20 = (uint64_t)&v20;
            MEMORY[0x24BDAC7A8](Count);
            v9 = (8 * Count + 15) & 0xFFFFFFFFFFFFFFF0;
            v10 = (char *)&v21[-1] - v9;
            if ((unint64_t)(8 * Count) >= 0x200)
              v11 = 512;
            else
              v11 = 8 * Count;
            bzero((char *)&v21[-1] - v9, v11);
            MEMORY[0x24BDAC7A8](v12);
            v13 = (char *)&v21[-1] - v9;
            bzero((char *)&v21[-1] - v9, v11);
            CFDictionaryGetKeysAndValues(v7, (const void **)((char *)&v21[-1] - v9), (const void **)((char *)&v21[-1] - v9));
            if (Count >= 1)
            {
              for (i = 0; i != Count; ++i)
              {
                v15 = *(const __CFString **)&v10[8 * i];
                v16 = *(const __CFArray **)&v13[8 * i];
                v17 = CFArrayGetCount(v16);
                if (v17 >= 1)
                {
                  for (j = 0; j != v17; ++j)
                  {
                    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v16, j);
                    QP::getUTF8StringFromCFString(v15, v23);
                    QP::getUTF8StringFromCFString(ValueAtIndex, v21);
                    QP::ParserGrammar::addCategory((uint64_t)this, (uint64_t)v23, v21);
                    if (v22 < 0)
                      operator delete(v21[0]);
                    if (v24 < 0)
                      operator delete(v23[0]);
                  }
                }
              }
            }
            return 1;
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_218E303D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 113) < 0)
    operator delete(*(void **)(v1 - 136));
  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t *QP::ParserGrammar::addCategory(uint64_t a1, uint64_t a2, void **a3)
{
  unsigned int SymbolID;
  unsigned int v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t *v11;
  unsigned int v12;
  BOOL v13;
  uint64_t **v14;
  uint64_t **v15;
  unsigned int v16;
  BOOL v17;
  uint64_t *v18;
  char **v20;
  char *v21[2];
  unsigned __int16 v22;
  char **v23;
  char *v24[2];

  SymbolID = QP::ParserGrammar::getSymbolID(a1, a2);
  v6 = SymbolID;
  v9 = *(uint64_t **)(a1 + 240);
  v8 = (uint64_t **)(a1 + 240);
  v7 = v9;
  if (!v9)
    goto LABEL_12;
  v10 = v8;
  v11 = v7;
  do
  {
    v12 = *((unsigned __int16 *)v11 + 16);
    v13 = v12 >= SymbolID;
    if (v12 >= SymbolID)
      v14 = (uint64_t **)v11;
    else
      v14 = (uint64_t **)(v11 + 1);
    if (v13)
      v10 = (uint64_t **)v11;
    v11 = *v14;
  }
  while (*v14);
  if (v10 == v8 || SymbolID < *((unsigned __int16 *)v10 + 16))
  {
LABEL_12:
    v21[0] = 0;
    v21[1] = 0;
    v20 = v21;
    v22 = SymbolID;
    v24[0] = 0;
    v24[1] = 0;
    v23 = v24;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::set<unsigned short>>>((uint64_t)(v8 - 1), &v22, (uint64_t)&v22);
    std::__tree<std::string>::destroy((uint64_t)&v23, v24[0]);
    std::__tree<std::string>::destroy((uint64_t)&v20, v21[0]);
    v7 = *v8;
  }
  if (!v7)
    goto LABEL_24;
  v15 = v8;
  do
  {
    v16 = *((unsigned __int16 *)v7 + 16);
    v17 = v16 >= v6;
    if (v16 >= v6)
      v18 = v7;
    else
      v18 = v7 + 1;
    if (v17)
      v15 = (uint64_t **)v7;
    v7 = (uint64_t *)*v18;
  }
  while (*v18);
  if (v15 == v8 || v6 < *((unsigned __int16 *)v15 + 16))
LABEL_24:
    v15 = v8;
  return std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v15 + 5, a3, (uint64_t)a3);
}

void sub_218E30528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;

  std::__tree<std::string>::destroy(v15, a15);
  std::__tree<std::string>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t QP::ParserGrammar::loadCompletions(QP::ParserGrammar *this, CFDictionaryRef theDict, const __CFString *key)
{
  const void *Value;
  CFTypeID v7;
  const __CFArray *v8;
  const __CFArray *v9;
  CFTypeID v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex v13;
  const __CFAllocator *v14;
  const __CFString *ValueAtIndex;
  CFMutableStringRef MutableCopy;
  void **v17;
  int v18;
  void *__p;
  int v21;
  unsigned __int8 v22;
  CFMutableStringRef v23;
  CFRange v24;

  if (CFDictionaryContainsKey(theDict, key))
  {
    Value = CFDictionaryGetValue(theDict, key);
    v7 = CFGetTypeID(Value);
    if (v7 == CFDictionaryGetTypeID())
    {
      v8 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)Value, CFSTR("COMPLETIONS"));
      if (v8)
      {
        v9 = v8;
        v10 = CFGetTypeID(v8);
        if (v10 == CFArrayGetTypeID())
        {
          Count = CFArrayGetCount(v9);
          if (Count >= 1)
          {
            v12 = Count;
            v13 = 0;
            v14 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
            while (1)
            {
              ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v9, v13);
              MutableCopy = CFStringCreateMutableCopy(v14, 0, ValueAtIndex);
              v23 = MutableCopy;
              CFStringLowercase(MutableCopy, *(CFLocaleRef *)(*((_QWORD *)this + 5) + 104));
              v24.length = CFStringGetLength(MutableCopy);
              v24.location = 0;
              CFStringFindAndReplace(MutableCopy, CFSTR("’"), CFSTR("'"), v24, 0);
              QP::getUTF8StringFromCFString(MutableCopy, &__p);
              v17 = (v22 & 0x80u) == 0 ? &__p : (void **)__p;
              v18 = (v22 & 0x80u) == 0 ? v22 : v21;
              nlp::BurstTrieAdd(*((_QWORD *)this + 1), (uint64_t)v17, v18, 1);
              if (((char)v22 & 0x80000000) == 0)
                break;
              operator delete(__p);
              if (MutableCopy)
                goto LABEL_17;
LABEL_18:
              if (v12 == ++v13)
                return 0;
            }
            if (!MutableCopy)
              goto LABEL_18;
LABEL_17:
            CFRelease(MutableCopy);
            goto LABEL_18;
          }
        }
      }
    }
  }
  return 0;
}

void sub_218E306F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, const void *a15)
{
  if (a14 < 0)
    operator delete(__p);
  nlp::CFScopedPtr<__CFString *>::reset(&a15, 0);
  _Unwind_Resume(a1);
}

uint64_t QP::ParserGrammar::loadTokens(const void **this, CFDictionaryRef theDict, const __CFString *key)
{
  uint64_t result;
  const void *Value;
  CFTypeID v8;
  const __CFDictionary *v9;
  CFTypeID v10;
  const __CFAllocator *v11;
  CFDictionaryRef Copy;
  const __CFDictionary *v13;
  const __CFDictionary *v14;
  CFTypeID v15;
  CFDictionaryRef v16;
  CFMutableDictionaryRef Mutable;

  result = CFDictionaryContainsKey(theDict, key);
  if ((_DWORD)result)
  {
    Value = CFDictionaryGetValue(theDict, key);
    v8 = CFGetTypeID(Value);
    if (v8 == CFDictionaryGetTypeID())
    {
      result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)Value, CFSTR("TOKEN_INFO"));
      if (!result)
        return result;
      v9 = (const __CFDictionary *)result;
      v10 = CFGetTypeID((CFTypeRef)result);
      if (v10 == CFDictionaryGetTypeID())
      {
        v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v9);
        nlp::CFScopedPtr<__CFDictionary const*>::reset(this + 9, Copy);
        v13 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)Value, CFSTR("TOKEN_TEXT"));
        if (v13)
        {
          v14 = v13;
          v15 = CFGetTypeID(v13);
          if (v15 == CFDictionaryGetTypeID())
          {
            v16 = CFDictionaryCreateCopy(v11, v14);
            nlp::CFScopedPtr<__CFDictionary const*>::reset(this + 10, v16);
            return 1;
          }
        }
        Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        nlp::CFScopedPtr<__CFDictionary const*>::reset(this + 10, Mutable);
      }
    }
    return 0;
  }
  return result;
}

uint64_t QP::ParserGrammar::loadAttributes(QP::ParserGrammar *this, CFDictionaryRef theDict, const __CFString *key)
{
  uint64_t result;
  const __CFDictionary *Value;
  const __CFDictionary *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  const __CFString *v14;
  CFIndex v15;
  unint64_t v16;
  char *v17;
  size_t v18;
  uint64_t v19;
  uint64_t i;
  const __CFString *v21;
  const __CFArray *v22;
  CFIndex v23;
  CFIndex j;
  const __CFString *ValueAtIndex;
  _QWORD v26[2];
  char *v27;
  CFDictionaryRef v28;
  CFIndex Count;
  _QWORD *v30;
  uint64_t v31;
  CFDictionaryRef v32;
  std::string v33;
  void *v34[2];
  char v35;
  void *v36[2];
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  result = CFDictionaryContainsKey(theDict, key);
  if ((_DWORD)result)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, key);
    result = CFDictionaryContainsKey(Value, CFSTR("ATTRIBUTES"));
    if ((_DWORD)result)
    {
      v8 = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("ATTRIBUTES"));
      v26[1] = v26;
      Count = CFDictionaryGetCount(v8);
      v9 = 8 * Count;
      MEMORY[0x24BDAC7A8](Count);
      v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
      if (v9 >= 0x200)
        v11 = 512;
      else
        v11 = v9;
      bzero((char *)v26 - v10, v11);
      MEMORY[0x24BDAC7A8](v12);
      bzero((char *)v26 - v10, v11);
      v27 = (char *)v26 - v10;
      v28 = v8;
      CFDictionaryGetKeysAndValues(v8, (const void **)((char *)v26 - v10), (const void **)((char *)v26 - v10));
      if (Count >= 1)
      {
        v13 = 0;
        do
        {
          v31 = v13;
          v14 = *(const __CFString **)&v27[8 * v13];
          v32 = (CFDictionaryRef)CFDictionaryGetValue(v28, v14);
          v15 = CFDictionaryGetCount(v32);
          v30 = v26;
          MEMORY[0x24BDAC7A8](v15);
          v16 = (8 * v15 + 15) & 0xFFFFFFFFFFFFFFF0;
          v17 = (char *)v26 - v16;
          if ((unint64_t)(8 * v15) >= 0x200)
            v18 = 512;
          else
            v18 = 8 * v15;
          bzero((char *)v26 - v16, v18);
          MEMORY[0x24BDAC7A8](v19);
          bzero((char *)v26 - v16, v18);
          CFDictionaryGetKeysAndValues(v32, (const void **)((char *)v26 - v16), (const void **)((char *)v26 - v16));
          if (v15 >= 1)
          {
            for (i = 0; i != v15; ++i)
            {
              v21 = *(const __CFString **)&v17[8 * i];
              v22 = (const __CFArray *)CFDictionaryGetValue(v32, v21);
              v23 = CFArrayGetCount(v22);
              if (v23 >= 1)
              {
                for (j = 0; j != v23; ++j)
                {
                  ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v22, j);
                  QP::getUTF8StringFromCFString(v21, v36);
                  QP::getUTF8StringFromCFString(ValueAtIndex, v34);
                  QP::getUTF8StringFromCFString(v14, &v33);
                  QP::ParserGrammar::setAttribute((uint64_t)this, (uint64_t)v36, (uint64_t)v34, &v33);
                  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v33.__r_.__value_.__l.__data_);
                  if (v35 < 0)
                    operator delete(v34[0]);
                  if (v37 < 0)
                    operator delete(v36[0]);
                }
              }
            }
          }
          v13 = v31 + 1;
        }
        while (v31 + 1 != Count);
      }
      return 1;
    }
  }
  return result;
}

void sub_218E30B40(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 113) < 0)
    operator delete(*(void **)(v1 - 136));
  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

std::string *QP::ParserGrammar::setAttribute(uint64_t a1, uint64_t a2, uint64_t a3, const std::string *a4)
{
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t **v19;
  char **v21;
  char *v22[2];
  unsigned __int16 *v23;
  char **v24;
  char *v25[2];
  unsigned __int16 v26;

  v7 = QP::ParserGrammar::symbolID(a1, a2);
  v26 = QP::ParserGrammar::symbolID(a1, a3);
  v8 = (uint64_t *)(a1 + 336);
  v9 = *(_QWORD *)(a1 + 336);
  if (!v9)
    goto LABEL_12;
  v10 = a1 + 336;
  v11 = *(_QWORD *)(a1 + 336);
  do
  {
    v12 = *(unsigned __int16 *)(v11 + 32);
    v13 = v12 >= v7;
    if (v12 >= v7)
      v14 = (uint64_t *)v11;
    else
      v14 = (uint64_t *)(v11 + 8);
    if (v13)
      v10 = v11;
    v11 = *v14;
  }
  while (*v14);
  if ((uint64_t *)v10 == v8 || v7 < *(unsigned __int16 *)(v10 + 32))
  {
LABEL_12:
    v22[0] = 0;
    v22[1] = 0;
    v21 = v22;
    LOWORD(v23) = v7;
    v25[0] = 0;
    v25[1] = 0;
    v24 = v25;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::set<unsigned short>>>(a1 + 328, (unsigned __int16 *)&v23, (uint64_t)&v23);
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&v24, v25[0]);
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&v21, v22[0]);
    v9 = *v8;
  }
  if (!v9)
    goto LABEL_24;
  v15 = a1 + 336;
  do
  {
    v16 = *(unsigned __int16 *)(v9 + 32);
    v17 = v16 >= v7;
    if (v16 >= v7)
      v18 = (uint64_t *)v9;
    else
      v18 = (uint64_t *)(v9 + 8);
    if (v17)
      v15 = v9;
    v9 = *v18;
  }
  while (*v18);
  if ((uint64_t *)v15 == v8 || v7 < *(unsigned __int16 *)(v15 + 32))
LABEL_24:
    v15 = a1 + 336;
  v23 = &v26;
  v19 = std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)(v15 + 40), &v26, (uint64_t)&std::piecewise_construct, &v23);
  return std::string::operator=((std::string *)(v19 + 5), a4);
}

void sub_218E30CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, char *a14)
{
  uint64_t v14;

  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy(v14, a14);
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t QP::ParserGrammar::loadSuggestions(QP::ParserGrammar *this, CFDictionaryRef theDict, const __CFString *key)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  const __CFDictionary *v12;
  CFTypeID v13;
  const __CFDictionary *v14;
  CFTypeID v15;
  unint64_t v16;
  const void **v17;
  size_t v18;
  uint64_t v19;
  CFTypeID v20;
  unint64_t v21;
  const void **v22;
  size_t v23;
  uint64_t v24;
  const __CFString *v25;
  const __CFDictionary *v26;
  const __CFDictionary *v27;
  CFTypeID v28;
  CFIndex v29;
  unint64_t v30;
  const void **v31;
  size_t v32;
  const __CFString *v33;
  const __CFDictionary *v34;
  const __CFDictionary *v35;
  CFTypeID v36;
  const __CFString *v37;
  const __CFString *v38;
  CFTypeID v39;
  _QWORD v40[2];
  const void **v41;
  CFDictionaryRef v42;
  CFIndex Count;
  uint64_t v44;
  QP::ParserGrammar *v45;
  const __CFString *v46;
  const void **v47;
  CFIndex v48;
  const void *v49;
  CFDictionaryRef Value;
  void *v51[2];
  char v52;
  void *v53[2];
  char v54;
  void *v55[2];
  char v56;
  __int128 v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  result = CFDictionaryContainsKey(theDict, key);
  if ((_DWORD)result)
  {
    v45 = this;
    v7 = *((_QWORD *)this + 5);
    v8 = *(_QWORD *)(v7 + 152);
    v9 = 144;
    if (!*(_QWORD *)(v7 + 144))
      v9 = 128;
    v49 = *(const void **)(v7 + v9);
    v10 = 152;
    if (!v8)
      v10 = 136;
    v11 = *(const void **)(v7 + v10);
    result = (uint64_t)CFDictionaryGetValue(theDict, key);
    if (result)
    {
      v12 = (const __CFDictionary *)result;
      v13 = CFGetTypeID((CFTypeRef)result);
      if (v13 != CFDictionaryGetTypeID())
        return 0;
      result = CFDictionaryContainsKey(v12, CFSTR("SUGGESTIONS"));
      if (!(_DWORD)result)
        return result;
      result = (uint64_t)CFDictionaryGetValue(v12, CFSTR("SUGGESTIONS"));
      if (!result)
        return result;
      v14 = (const __CFDictionary *)result;
      v15 = CFGetTypeID((CFTypeRef)result);
      if (v15 != CFDictionaryGetTypeID())
        return 0;
      v40[0] = v40;
      Count = CFDictionaryGetCount(v14);
      MEMORY[0x24BDAC7A8](Count);
      v17 = (const void **)((char *)v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
      if (v16 >= 0x200)
        v18 = 512;
      else
        v18 = v16;
      bzero((char *)v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v18);
      v42 = v14;
      v41 = v17;
      CFDictionaryGetKeysAndValues(v14, v17, 0);
      if (Count >= 1)
      {
        v19 = 0;
        while (1)
        {
          v44 = v19;
          v46 = (const __CFString *)v41[v19];
          Value = (CFDictionaryRef)CFDictionaryGetValue(v42, v46);
          v20 = CFGetTypeID(Value);
          if (v20 == CFDictionaryGetTypeID())
          {
            v48 = CFDictionaryGetCount(Value);
            v40[1] = v40;
            MEMORY[0x24BDAC7A8](v48);
            v22 = (const void **)((char *)v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
            v23 = v21 >= 0x200 ? 512 : v21;
            bzero((char *)v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0), v23);
            v47 = v22;
            CFDictionaryGetKeysAndValues(Value, v22, 0);
            if (v48 >= 1)
              break;
          }
LABEL_46:
          v19 = v44 + 1;
          if (v44 + 1 == Count)
            return 1;
        }
        v24 = 0;
        while (1)
        {
          v25 = (const __CFString *)v47[v24];
          v26 = (const __CFDictionary *)CFDictionaryGetValue(Value, v25);
          v27 = v26;
          if (v26)
          {
            v28 = CFGetTypeID(v26);
            if (v28 == CFDictionaryGetTypeID())
            {
              v29 = CFDictionaryGetCount(v27);
              MEMORY[0x24BDAC7A8](v29);
              v31 = (const void **)((char *)v40 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
              v32 = v30 >= 0x200 ? 512 : v30;
              bzero((char *)v40 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0), v32);
              CFDictionaryGetKeysAndValues(v27, v31, 0);
              if (v29 >= 1)
                break;
            }
          }
LABEL_45:
          if (++v24 == v48)
            goto LABEL_46;
        }
        while (1)
        {
          v33 = (const __CFString *)*v31;
          v34 = (const __CFDictionary *)CFDictionaryGetValue(v27, *v31);
          v35 = v34;
          if (v34)
          {
            v36 = CFGetTypeID(v34);
            if (v36 == CFDictionaryGetTypeID())
            {
              if (CFDictionaryContainsKey(v35, v11))
              {
                v37 = (const __CFString *)CFDictionaryGetValue(v35, v11);
                v38 = v37;
                if (v37)
                  goto LABEL_35;
              }
              else if (CFDictionaryContainsKey(v35, v49))
              {
                v37 = (const __CFString *)CFDictionaryGetValue(v35, v49);
                v38 = v37;
                if (v37)
                {
LABEL_35:
                  v39 = CFGetTypeID(v37);
                  if (v39 == CFStringGetTypeID())
                  {
                    QP::getUTF8StringFromCFString(v46, &v57);
                    QP::getUTF8StringFromCFString(v25, v55);
                    QP::getUTF8StringFromCFString(v33, v53);
                    QP::getUTF8StringFromCFString(v38, v51);
                    QP::ParserGrammar::setSuggestion((uint64_t)v45, &v57, (uint64_t)v55, (uint64_t)v53, (uint64_t)v51);
                    if (v52 < 0)
                      operator delete(v51[0]);
                    if (v54 < 0)
                      operator delete(v53[0]);
                    if (v56 < 0)
                      operator delete(v55[0]);
                    if (v58 < 0)
                      operator delete((void *)v57);
                  }
                }
              }
            }
          }
          ++v31;
          if (!--v29)
            goto LABEL_45;
        }
      }
      return 1;
    }
  }
  return result;
}

void sub_218E31184(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 169) < 0)
    operator delete(*(void **)(v1 - 192));
  if (*(char *)(v1 - 145) < 0)
    operator delete(*(void **)(v1 - 168));
  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(exception_object);
}

void QP::ParserGrammar::setSuggestion(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int16 v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t **v16;
  char **v17;
  char *v18;
  uint64_t v19;
  std::string __p;
  _QWORD v21[3];
  unsigned __int16 v22;
  unsigned __int16 v23;

  v23 = QP::ParserGrammar::symbolID(a1, a3);
  v9 = QP::ParserGrammar::symbolID(a1, a4);
  v22 = v9;
  v10 = (uint64_t **)(a1 + 448);
  if ((void **)(a1 + 456) == std::__tree<std::string>::find<std::string>(a1 + 448, (void **)a2))
  {
    v18 = 0;
    v19 = 0;
    v17 = &v18;
    std::pair<std::string,std::map<std::string,std::set<std::string>>>::pair[abi:ne180100]<std::string const&,std::map<std::string,std::set<std::string>>,0>(&__p, a2, (std::string::size_type *)&v17);
    std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>(v10, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
    std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy((uint64_t)v21, (_QWORD *)v21[1]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy((uint64_t)&v17, v18);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v14 = std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
    v18 = 0;
    v19 = 0;
    v17 = &v18;
    LOWORD(__p.__r_.__value_.__l.__data_) = v23;
    __p.__r_.__value_.__r.__words[2] = 0;
    v21[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::set<unsigned short>>>((uint64_t)(v14 + 7), (unsigned __int16 *)&__p, (uint64_t)&__p);
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&__p.__r_.__value_.__l.__size_, (char *)__p.__r_.__value_.__r.__words[2]);
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&v17, v18);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v15 = std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
    v16 = std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)v15 + 7, &v23, (uint64_t)&std::piecewise_construct, &__p)+ 5;
    LOWORD(__p.__r_.__value_.__l.__data_) = v9;
    if (*(char *)(a5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p.__r_.__value_.__r.__words[1], *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)a5;
      v21[0] = *(_QWORD *)(a5 + 16);
    }
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::string>>(v16, (unsigned __int16 *)&__p, (uint64_t)&__p);
    if (SHIBYTE(v21[0]) < 0)
      operator delete((void *)__p.__r_.__value_.__l.__size_);
  }
  else
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v11 = std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 448), (void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
    v12 = std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)v11 + 7, &v23, (uint64_t)&std::piecewise_construct, &__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
    v13 = std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v12 + 5, &v22, (uint64_t)&std::piecewise_construct, &__p);
    std::string::operator=((std::string *)(v13 + 5), (const std::string *)a5);
  }
}

void sub_218E31448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t QP::ParserGrammar::loadTranslations(const void **this, CFDictionaryRef theDict, const __CFString *key)
{
  uint64_t result;
  const __CFDictionary *Value;
  const __CFDictionary *v8;
  CFDictionaryRef Copy;

  result = CFDictionaryContainsKey(theDict, key);
  if ((_DWORD)result)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, key);
    result = CFDictionaryContainsKey(Value, CFSTR("TRANSLATIONS"));
    if ((_DWORD)result)
    {
      v8 = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("TRANSLATIONS"));
      Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v8);
      nlp::CFScopedPtr<__CFDictionary const*>::reset(this + 8, Copy);
      return 1;
    }
  }
  return result;
}

uint64_t QP::ParserGrammar::loadReplacements(QP::ParserGrammar *this, CFDictionaryRef theDict, const __CFString *key)
{
  uint64_t result;
  const __CFDictionary *Value;
  const __CFDictionary *v8;
  CFTypeID v9;
  CFIndex Count;
  unint64_t v11;
  const __CFString **v12;
  size_t v13;
  uint64_t v14;
  const __CFString **v15;
  const __CFString *v16;
  void *v18[2];
  char v19;
  void *v20[2];
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  result = CFDictionaryContainsKey(theDict, key);
  if ((_DWORD)result)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, key);
    result = CFDictionaryContainsKey(Value, CFSTR("REPLACEMENTS"));
    if ((_DWORD)result)
    {
      result = (uint64_t)CFDictionaryGetValue(Value, CFSTR("REPLACEMENTS"));
      if (result)
      {
        v8 = (const __CFDictionary *)result;
        v9 = CFGetTypeID((CFTypeRef)result);
        if (v9 == CFDictionaryGetTypeID())
        {
          Count = CFDictionaryGetCount(v8);
          MEMORY[0x24BDAC7A8](Count);
          v11 = (8 * Count + 15) & 0xFFFFFFFFFFFFFFF0;
          v12 = (const __CFString **)((char *)&v18[-1] - v11);
          if ((unint64_t)(8 * Count) >= 0x200)
            v13 = 512;
          else
            v13 = 8 * Count;
          bzero((char *)&v18[-1] - v11, v13);
          MEMORY[0x24BDAC7A8](v14);
          v15 = (const __CFString **)((char *)&v18[-1] - v11);
          bzero((char *)&v18[-1] - v11, v13);
          CFDictionaryGetKeysAndValues(v8, (const void **)((char *)&v18[-1] - v11), (const void **)((char *)&v18[-1] - v11));
          if (Count >= 1)
          {
            do
            {
              v16 = *v15;
              QP::getUTF8StringFromCFString(*v12, v20);
              QP::getUTF8StringFromCFString(v16, v18);
              QP::ParserGrammar::setReplacement((uint64_t)this, (uint64_t)v20, (uint64_t)v18);
              if (v19 < 0)
                operator delete(v18[0]);
              if (v21 < 0)
                operator delete(v20[0]);
              ++v15;
              ++v12;
              --Count;
            }
            while (Count);
          }
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

void sub_218E31704(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  if (*(char *)(v1 - 73) < 0)
    operator delete(*(void **)(v1 - 96));
  _Unwind_Resume(exception_object);
}

uint64_t **QP::ParserGrammar::setReplacement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int SymbolID;
  unsigned int v7;

  SymbolID = QP::ParserGrammar::getSymbolID(a1, a2);
  v7 = SymbolID | (QP::ParserGrammar::getSymbolID(a1, a3) << 16);
  return std::__tree<std::__value_type<unsigned short,unsigned short>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,unsigned short>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,unsigned short>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,unsigned short>>((uint64_t **)(a1 + 304), (unsigned __int16 *)&v7, &v7);
}

uint64_t QP::ParserGrammar::loadIgnoredTerms(QP::ParserGrammar *this, CFDictionaryRef theDict, const __CFString *key)
{
  uint64_t result;
  const __CFDictionary *Value;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  uint64_t **v12;
  const __CFString *ValueAtIndex;
  unint64_t v14;
  unsigned __int8 v15;
  void *__p[2];
  unsigned __int8 v17;

  result = CFDictionaryContainsKey(theDict, key);
  if ((_DWORD)result)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, key);
    result = CFDictionaryContainsKey(Value, CFSTR("IGNORE"));
    if ((_DWORD)result)
    {
      v8 = (const __CFArray *)CFDictionaryGetValue(Value, CFSTR("IGNORE"));
      Count = CFArrayGetCount(v8);
      if (Count >= 1)
      {
        v10 = Count;
        v11 = 0;
        v12 = (uint64_t **)((char *)this + 112);
        do
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v8, v11);
          QP::getUTF8StringFromCFString(ValueAtIndex, __p);
          v14 = v17;
          v15 = v17;
          if ((v17 & 0x80u) != 0)
            v14 = (unint64_t)__p[1];
          if (v14)
          {
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v12, __p, (uint64_t)__p);
            v15 = v17;
          }
          if ((v15 & 0x80) != 0)
            operator delete(__p[0]);
          ++v11;
        }
        while (v10 != v11);
      }
      return 1;
    }
  }
  return result;
}

void sub_218E3188C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const void *QP::ParserGrammar::fallbackCompletionKeys(QP::ParserGrammar *this, const __CFString *key)
{
  if (QP::ParserGrammar::fallbackCompletionKeys(__CFString const*)const::onceToken == -1)
  {
    if (!key)
      return 0;
  }
  else
  {
    dispatch_once(&QP::ParserGrammar::fallbackCompletionKeys(__CFString const*)const::onceToken, &__block_literal_global_4);
    if (!key)
      return 0;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)QP::ParserGrammar::fallbackCompletionKeys(__CFString const*)const::gCompletionKeys, key))
  {
    return CFDictionaryGetValue((CFDictionaryRef)QP::ParserGrammar::fallbackCompletionKeys(__CFString const*)const::gCompletionKeys, key);
  }
  return 0;
}

void ___ZNK2QP13ParserGrammar22fallbackCompletionKeysEPK10__CFString_block_invoke()
{
  const __CFAllocator *v0;
  __CFArray *Mutable;
  __CFArray *MutableCopy;
  __CFDictionary *v3;

  v0 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  CFArrayAppendValue(Mutable, CFSTR("kQPTokenDate:kQPDate:ANYDATE:RelativeTodayDate"));
  CFArrayAppendValue(Mutable, CFSTR("kQPTokenDate:kQPDate:ANYDATE:RelativeYesterdayDate"));
  CFArrayAppendValue(Mutable, CFSTR("kQPTokenDate:kQPDate:ANYDATE:RelativeThisWeekDate"));
  CFArrayAppendValue(Mutable, CFSTR("kQPTokenDate:kQPDate:ANYDATE:RelativeLastWeekDate"));
  CFArrayAppendValue(Mutable, CFSTR("kQPTokenDate:kQPDate:ANYDATE:RelativeThisMonthDate"));
  CFArrayAppendValue(Mutable, CFSTR("kQPTokenDate:kQPDate:ANYDATE:RelativeLastMonthDate"));
  CFArrayAppendValue(Mutable, CFSTR("kQPTokenDate:kQPDate:ANYDATE:RelativeThisYearDate"));
  CFArrayAppendValue(Mutable, CFSTR("kQPTokenDate:kQPDate:ANYDATE:RelativeLastYearDate"));
  CFArrayAppendValue(Mutable, CFSTR("kQPTokenDate:kQPDate:ANYDATE:RelativeMonthDate1"));
  CFArrayAppendValue(Mutable, CFSTR("kQPTokenDate:kQPDate:ANYDATE:RelativeMonthDate2"));
  CFArrayAppendValue(Mutable, CFSTR("kQPTokenDate:kQPDate:ANYDATE:RelativeMonthDate3"));
  CFArrayAppendValue(Mutable, CFSTR("kQPTokenDate:kQPDate:ANYDATE:RelativeMonthDate4"));
  CFArrayAppendValue(Mutable, CFSTR("kQPTokenDate:kQPDate:ANYDATE:RelativeMonthDate5"));
  CFArrayAppendValue(Mutable, CFSTR("kQPTokenDate:kQPDate:ANYDATE:RelativeMonthDate6"));
  CFArrayAppendValue(Mutable, CFSTR("kQPTokenDate:kQPDate:ANYDATE:RelativeMonthDate7"));
  CFArrayAppendValue(Mutable, CFSTR("kQPTokenDate:kQPDate:ANYDATE:RelativeMonthDate8"));
  CFArrayAppendValue(Mutable, CFSTR("kQPTokenDate:kQPDate:ANYDATE:RelativeMonthDate9"));
  CFArrayAppendValue(Mutable, CFSTR("kQPTokenDate:kQPDate:ANYDATE:RelativeMonthDate10"));
  CFArrayAppendValue(Mutable, CFSTR("kQPTokenDate:kQPDate:ANYDATE:RelativeMonthDate11"));
  CFArrayAppendValue(Mutable, CFSTR("kQPTokenDate:kQPDate:ANYDATE:RelativeMonthDate12"));
  MutableCopy = CFArrayCreateMutableCopy(v0, 0, Mutable);
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenFlagColorAction:kQPFlagColorAction:PROACTION:FlagColorStatus-0"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenFlagColorAction:kQPFlagColorAction:PROACTION:FlagColorStatus-1"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenFlagColorAction:kQPFlagColorAction:PROACTION:FlagColorStatus-2"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenFlagColorAction:kQPFlagColorAction:PROACTION:FlagColorStatus-3"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenFlagColorAction:kQPFlagColorAction:PROACTION:FlagColorStatus-4"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenFlagColorAction:kQPFlagColorAction:PROACTION:FlagColorStatus-5"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenFlagColorAction:kQPFlagColorAction:PROACTION:FlagColorStatus-6"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenFlaggedAction:kQPFlaggedAction:PROACTION:FlaggedStatus-0"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenFlaggedAction:kQPFlaggedAction:PROACTION:FlaggedStatus-1"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenRepliedAction:kQPRepliedAction:PROACTION:RepliedStatus-0"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenRepliedAction:kQPRepliedAction:PROACTION:RepliedStatus-1"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenReadAction:kQPReadAction:PROACTION:ReadStatus-0"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenReadAction:kQPReadAction:PROACTION:ReadStatus-1"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenSubjectAction:kQPSubjectAction:PROACTION:SubjectStatus-1"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenSubjectAction:kQPSubjectAction:PROACTION:SubjectStatus-0"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenIgnoredAction:kQPIgnoredAction:PROACTION:ActionIgnored"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenMessage:kQPKind:KIND:KindMail"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindAudio"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindAudiobook"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindAudioFormatAac"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindAudioFormatAiff"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindAudioFormatMp3"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindBook"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindContacts"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindContactsFormatVcf"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindDocument"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindDocumentFormatDoc"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindDocumentFormatIwork"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindDocumentFormatPages"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindDocumentFormatPass"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindDocumentFormatPdf"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindEventFormatIcs"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindFile"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindFileFormatDat"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindFileFormatPatch"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindFileFormatTar"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindImage"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindImageFormatGif"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindImageFormatHeic"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindImageFormatJpg"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindImageFormatPng"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindImageFormatRaw"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindImageFormatTiff"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindPresentation"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindPresentationFormatKey"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindPresentationFormatPpt"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindSource"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindSourceFormatJava"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindSpreadsheet"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindSpreadsheetFormatNumbers"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindSpreadsheetFormatXls"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindTextFormatRtf"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindTextFormatTxt"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindVideo"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindVideoFormatMov"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindVideoFormatMp4"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindVideoFormatQuicktime"));
  CFArrayAppendValue(MutableCopy, CFSTR("kQPTokenAttachmentAny:kQPAttachment:PROATTACHMOD:KindAttachment"));
  v3 = CFDictionaryCreateMutable(v0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  CFDictionarySetValue(v3, CFSTR("Search"), Mutable);
  CFDictionarySetValue(v3, CFSTR("Mail"), MutableCopy);
  QP::ParserGrammar::fallbackCompletionKeys(__CFString const*)const::gCompletionKeys = (uint64_t)v3;
}

const void *QP::ParserGrammar::fallbackTokenKeys(QP::ParserGrammar *this, const __CFString *key)
{
  if (QP::ParserGrammar::fallbackTokenKeys(__CFString const*)const::onceToken == -1)
  {
    if (!key)
      return 0;
  }
  else
  {
    dispatch_once(&QP::ParserGrammar::fallbackTokenKeys(__CFString const*)const::onceToken, &__block_literal_global_214);
    if (!key)
      return 0;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)QP::ParserGrammar::fallbackTokenKeys(__CFString const*)const::gTokenKeys, key))
  {
    return CFDictionaryGetValue((CFDictionaryRef)QP::ParserGrammar::fallbackTokenKeys(__CFString const*)const::gTokenKeys, key);
  }
  return 0;
}

void ___ZNK2QP13ParserGrammar17fallbackTokenKeysEPK10__CFString_block_invoke()
{
  const __CFAllocator *v0;
  __CFArray *Mutable;
  __CFArray *MutableCopy;
  __CFDictionary *v3;

  v0 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  CFArrayAppendValue(Mutable, CFSTR("TOKEN:kQPTokenDate"));
  MutableCopy = CFArrayCreateMutableCopy(v0, 0, Mutable);
  CFArrayAppendValue(MutableCopy, CFSTR("TOKEN:kQPTokenAttachment"));
  CFArrayAppendValue(MutableCopy, CFSTR("TOKEN:kQPTokenAttachmentAny"));
  CFArrayAppendValue(MutableCopy, CFSTR("TOKEN:kQPTokenMessage"));
  CFArrayAppendValue(MutableCopy, CFSTR("TOKEN:kQPTokenFlagColorAction"));
  CFArrayAppendValue(MutableCopy, CFSTR("TOKEN:kQPTokenFlaggedAction"));
  CFArrayAppendValue(MutableCopy, CFSTR("TOKEN:kQPTokenReadAction"));
  CFArrayAppendValue(MutableCopy, CFSTR("TOKEN:kQPTokenRepliedAction"));
  CFArrayAppendValue(MutableCopy, CFSTR("TOKEN:kQPTokenSubjectAction"));
  CFArrayAppendValue(MutableCopy, CFSTR("TOKEN:kQPTokenIgnoredAction"));
  v3 = CFDictionaryCreateMutable(v0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  CFDictionarySetValue(v3, CFSTR("Search"), Mutable);
  CFDictionarySetValue(v3, CFSTR("Mail"), MutableCopy);
  QP::ParserGrammar::fallbackTokenKeys(__CFString const*)const::gTokenKeys = (uint64_t)v3;
}

void QP::ParserGrammar::addSymbol(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  int v5;
  std::string::size_type v6;
  size_t v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  _BOOL4 v23;
  _BOOL4 v24;
  _BOOL4 v25;
  _BOOL4 v26;
  std::string *v27;
  _BOOL4 v28;
  _BOOL4 v29;
  _BOOL4 v30;
  _BOOL4 v31;
  _BOOL4 v32;
  _BOOL4 v33;
  _BOOL4 v34;
  std::vector<std::string>::pointer end;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  std::string *v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  std::vector<std::string>::pointer v44;
  __int128 v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  std::string *v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  std::vector<std::string>::pointer v53;
  __int128 v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  std::string *v58;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  std::vector<std::string>::pointer v62;
  __int128 v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  std::string *v67;
  std::string *v68;
  __int128 v69;
  std::string *v70;
  std::vector<std::string>::pointer v71;
  __int128 v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  std::string *v76;
  std::string *v77;
  __int128 v78;
  std::string *v79;
  std::vector<std::string>::pointer v80;
  __int128 v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  std::string *v85;
  std::string *v86;
  __int128 v87;
  std::string *v88;
  std::vector<std::string>::pointer v89;
  __int128 v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  std::string *v94;
  std::string *v95;
  __int128 v96;
  std::string *v97;
  std::vector<std::string>::pointer v98;
  __int128 v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  std::string *v103;
  std::string *v104;
  __int128 v105;
  std::string *v106;
  std::vector<std::string>::pointer v107;
  __int128 v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  std::string *v112;
  std::string *v113;
  __int128 v114;
  std::string *v115;
  std::vector<std::string>::pointer v116;
  __int128 v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  std::string *v121;
  std::string *v122;
  __int128 v123;
  std::string *v124;
  std::vector<std::string>::pointer v125;
  __int128 v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  std::string *v130;
  std::string *v131;
  __int128 v132;
  std::string *v133;
  std::vector<std::string>::pointer v134;
  __int128 v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  std::string *v139;
  std::string *v140;
  __int128 v141;
  std::string *v142;
  std::vector<std::string>::pointer v143;
  __int128 v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  std::string *v148;
  std::string *v149;
  __int128 v150;
  std::string *v151;
  std::vector<std::string>::pointer v152;
  __int128 v153;
  std::string *v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  std::string *v158;
  std::string *v159;
  __int128 v160;
  std::string *v161;
  std::string v162;
  void *v163[2];
  std::string::size_type v164;
  std::string v165;
  std::string v166;
  std::string v167;
  std::string v168;
  std::vector<std::string> __p;
  std::string v170;
  std::string v171;
  std::string v172;
  std::string v173;
  std::__split_buffer<std::string> v174;

  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(_QWORD *)(a2 + 8))
      return;
  }
  else if (!*(_BYTE *)(a2 + 23))
  {
    return;
  }
  if ((void **)(a1 + 168) == std::__tree<std::string>::find<std::string>(a1 + 160, (void **)a2))
  {
    v4 = *(_WORD *)(a1 + 152);
    v5 = *(char *)(a2 + 23);
    v6 = *(_QWORD *)(a2 + 8);
    if (v5 >= 0)
      v7 = *(unsigned __int8 *)(a2 + 23);
    else
      v7 = *(_QWORD *)(a2 + 8);
    if (v7 == strlen(kQPSymbolNone[0]))
    {
      v8 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
      if (!memcmp(v8, kQPSymbolNone[0], v7))
        v4 = kQPSymbolIdNone;
    }
    if (v7 == strlen(kQPSymbolRoot[0]))
    {
      v9 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
      if (!memcmp(v9, kQPSymbolRoot[0], v7))
        v4 = kQPSymbolIdRoot;
    }
    if (v7 == strlen(kQPSymbolTerminal[0]))
    {
      v10 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
      if (!memcmp(v10, kQPSymbolTerminal[0], v7))
        v4 = kQPSymbolIdTerminal;
    }
    if (v7 == strlen(kQPSymbolAirline[0]))
    {
      v11 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
      if (!memcmp(v11, kQPSymbolAirline[0], v7))
        v4 = kQPSymbolIdAirline;
    }
    if (v7 == strlen(kQPSymbolAirport[0]))
    {
      v12 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
      if (!memcmp(v12, kQPSymbolAirport[0], v7))
        v4 = kQPSymbolIdAirport;
    }
    if (v7 == strlen(kQPSymbolAirportCode[0]))
    {
      v13 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
      if (!memcmp(v13, kQPSymbolAirportCode[0], v7))
        v4 = kQPSymbolIdAirportCode;
    }
    if (v7 == strlen(kQPSymbolAppName[0]))
    {
      v14 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
      if (!memcmp(v14, kQPSymbolAppName[0], v7))
        v4 = kQPSymbolIdAppName;
    }
    if (v7 == strlen(kQPSymbolBundle[0]))
    {
      v15 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
      if (!memcmp(v15, kQPSymbolBundle[0], v7))
        v4 = kQPSymbolIdBundle;
    }
    if (v7 == strlen(kQPSymbolCities[0]))
    {
      v16 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
      if (!memcmp(v16, kQPSymbolCities[0], v7))
        v4 = kQPSymbolIdCities;
    }
    if (v7 == strlen(kQPSymbolField[0]))
    {
      v17 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
      if (!memcmp(v17, kQPSymbolField[0], v7))
        v4 = kQPSymbolIdField;
    }
    if (v7 == strlen(kQPSymbolFlightCode[0]))
    {
      v18 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
      if (!memcmp(v18, kQPSymbolFlightCode[0], v7))
        v4 = kQPSymbolIdFlightCode;
    }
    if (v7 == strlen(kQPSymbolPerson[0]))
    {
      v19 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
      if (!memcmp(v19, kQPSymbolPerson[0], v7))
        v4 = kQPSymbolIdPerson;
    }
    if (v7 == strlen(kQPSymbolLocation[0]))
    {
      v20 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
      if (!memcmp(v20, kQPSymbolLocation[0], v7))
        v4 = kQPSymbolIdLocation;
    }
    if (v7 == strlen(kQPSymbolActionDefault[0]))
    {
      v21 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
      if (!memcmp(v21, kQPSymbolActionDefault[0], v7))
        v4 = kQPSymbolIdActionDefault;
    }
    if (v7 == strlen(kQPSymbolDefault))
    {
      v22 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
      if (!memcmp(v22, kQPSymbolDefault, v7))
        v4 = kQPSymbolIdDefault;
    }
    if (v5 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v174, *(const std::string::value_type **)a2, v6);
    }
    else
    {
      *(_OWORD *)&v174.__first_ = *(_OWORD *)a2;
      v174.__end_ = *(std::__split_buffer<std::string>::pointer *)(a2 + 16);
    }
    LOWORD(v174.__end_cap_.__value_) = v4;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_unique_key_args<std::string,std::pair<std::string,unsigned short>>((uint64_t **)(a1 + 160), (void **)&v174.__first_, (uint64_t)&v174);
    if (SHIBYTE(v174.__end_) < 0)
      operator delete(v174.__first_);
    LOWORD(v174.__first_) = v4;
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v174.__begin_, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v174.__begin_ = *(_OWORD *)a2;
      v174.__end_cap_.__value_ = *(std::string **)(a2 + 16);
    }
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::string>>((uint64_t **)(a1 + 136), (unsigned __int16 *)&v174, (uint64_t)&v174);
    if (SHIBYTE(v174.__end_cap_.__value_) < 0)
      operator delete(v174.__begin_);
    std::string::basic_string[abi:ne180100]<0>(&v174, "Time");
    v23 = QP::endswith((uint64_t *)a2, (uint64_t *)&v174);
    v24 = v23;
    if (SHIBYTE(v174.__end_) < 0)
    {
      operator delete(v174.__first_);
      if (v24)
      {
LABEL_111:
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&v173, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          v173 = *(std::string *)a2;
        LOWORD(v174.__first_) = 0;
        LOWORD(v174.__first_) = QP::ParserGrammar::getSymbolID(a1, (uint64_t)&v173);
        std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t **)(a1 + 544), (unsigned __int16 *)&v174, &v174);
        if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
        {
          v27 = &v173;
LABEL_169:
          operator delete(v27->__r_.__value_.__l.__data_);
          goto LABEL_170;
        }
        goto LABEL_170;
      }
    }
    else if (v23)
    {
      goto LABEL_111;
    }
    std::string::basic_string[abi:ne180100]<0>(&v174, "Period");
    v25 = QP::endswith((uint64_t *)a2, (uint64_t *)&v174);
    v26 = v25;
    if (SHIBYTE(v174.__end_) < 0)
    {
      operator delete(v174.__first_);
      if (v26)
      {
LABEL_116:
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&v172, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          v172 = *(std::string *)a2;
        LOWORD(v174.__first_) = 0;
        LOWORD(v174.__first_) = QP::ParserGrammar::getSymbolID(a1, (uint64_t)&v172);
        std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t **)(a1 + 568), (unsigned __int16 *)&v174, &v174);
        if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
        {
          v27 = &v172;
          goto LABEL_169;
        }
LABEL_170:
        std::string::basic_string[abi:ne180100]<0>(&v174, "Extension");
        v33 = QP::endswith((uint64_t *)a2, (uint64_t *)&v174);
        v34 = v33;
        if (SHIBYTE(v174.__end_) < 0)
        {
          operator delete(v174.__first_);
          if (!v34)
          {
LABEL_179:
            memset(&__p, 0, sizeof(__p));
            std::string::basic_string[abi:ne180100]<0>(v163, "IsBy");
            end = __p.__end_;
            if (__p.__end_ >= __p.__end_cap_.__value_)
            {
              v37 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
              v38 = v37 + 1;
              if (v37 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v38)
                v38 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555)
                v39 = 0xAAAAAAAAAAAAAAALL;
              else
                v39 = v38;
              v174.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
              if (v39)
                v40 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v39);
              else
                v40 = 0;
              v41 = v40 + v37;
              v174.__first_ = v40;
              v174.__begin_ = v41;
              v174.__end_cap_.__value_ = &v40[v39];
              v42 = *(_OWORD *)v163;
              v41->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v42;
              v163[1] = 0;
              v164 = 0;
              v163[0] = 0;
              v174.__end_ = v41 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&__p, &v174);
              v43 = __p.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&v174);
              __p.__end_ = v43;
              if (SHIBYTE(v164) < 0)
                operator delete(v163[0]);
            }
            else
            {
              v36 = *(_OWORD *)v163;
              __p.__end_->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&end->__r_.__value_.__l.__data_ = v36;
              __p.__end_ = end + 1;
            }
            std::string::basic_string[abi:ne180100]<0>(v163, "IsIn");
            v44 = __p.__end_;
            if (__p.__end_ >= __p.__end_cap_.__value_)
            {
              v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
              v47 = v46 + 1;
              if (v46 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v47)
                v47 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555)
                v48 = 0xAAAAAAAAAAAAAAALL;
              else
                v48 = v47;
              v174.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
              if (v48)
                v49 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v48);
              else
                v49 = 0;
              v50 = v49 + v46;
              v174.__first_ = v49;
              v174.__begin_ = v50;
              v174.__end_cap_.__value_ = &v49[v48];
              v51 = *(_OWORD *)v163;
              v50->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v50->__r_.__value_.__l.__data_ = v51;
              v163[1] = 0;
              v164 = 0;
              v163[0] = 0;
              v174.__end_ = v50 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&__p, &v174);
              v52 = __p.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&v174);
              __p.__end_ = v52;
              if (SHIBYTE(v164) < 0)
                operator delete(v163[0]);
            }
            else
            {
              v45 = *(_OWORD *)v163;
              __p.__end_->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v44->__r_.__value_.__l.__data_ = v45;
              __p.__end_ = v44 + 1;
            }
            std::string::basic_string[abi:ne180100]<0>(v163, "IsOf");
            v53 = __p.__end_;
            if (__p.__end_ >= __p.__end_cap_.__value_)
            {
              v55 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
              v56 = v55 + 1;
              if (v55 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v56)
                v56 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555)
                v57 = 0xAAAAAAAAAAAAAAALL;
              else
                v57 = v56;
              v174.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
              if (v57)
                v58 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v57);
              else
                v58 = 0;
              v59 = v58 + v55;
              v174.__first_ = v58;
              v174.__begin_ = v59;
              v174.__end_cap_.__value_ = &v58[v57];
              v60 = *(_OWORD *)v163;
              v59->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v59->__r_.__value_.__l.__data_ = v60;
              v163[1] = 0;
              v164 = 0;
              v163[0] = 0;
              v174.__end_ = v59 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&__p, &v174);
              v61 = __p.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&v174);
              __p.__end_ = v61;
              if (SHIBYTE(v164) < 0)
                operator delete(v163[0]);
            }
            else
            {
              v54 = *(_OWORD *)v163;
              __p.__end_->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v53->__r_.__value_.__l.__data_ = v54;
              __p.__end_ = v53 + 1;
            }
            std::string::basic_string[abi:ne180100]<0>(v163, "IsOn");
            v62 = __p.__end_;
            if (__p.__end_ >= __p.__end_cap_.__value_)
            {
              v64 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
              v65 = v64 + 1;
              if (v64 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v65)
                v65 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555)
                v66 = 0xAAAAAAAAAAAAAAALL;
              else
                v66 = v65;
              v174.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
              if (v66)
                v67 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v66);
              else
                v67 = 0;
              v68 = v67 + v64;
              v174.__first_ = v67;
              v174.__begin_ = v68;
              v174.__end_cap_.__value_ = &v67[v66];
              v69 = *(_OWORD *)v163;
              v68->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v68->__r_.__value_.__l.__data_ = v69;
              v163[1] = 0;
              v164 = 0;
              v163[0] = 0;
              v174.__end_ = v68 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&__p, &v174);
              v70 = __p.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&v174);
              __p.__end_ = v70;
              if (SHIBYTE(v164) < 0)
                operator delete(v163[0]);
            }
            else
            {
              v63 = *(_OWORD *)v163;
              __p.__end_->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v62->__r_.__value_.__l.__data_ = v63;
              __p.__end_ = v62 + 1;
            }
            std::string::basic_string[abi:ne180100]<0>(v163, "IsAt");
            v71 = __p.__end_;
            if (__p.__end_ >= __p.__end_cap_.__value_)
            {
              v73 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
              v74 = v73 + 1;
              if (v73 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v74)
                v74 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555)
                v75 = 0xAAAAAAAAAAAAAAALL;
              else
                v75 = v74;
              v174.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
              if (v75)
                v76 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v75);
              else
                v76 = 0;
              v77 = v76 + v73;
              v174.__first_ = v76;
              v174.__begin_ = v77;
              v174.__end_cap_.__value_ = &v76[v75];
              v78 = *(_OWORD *)v163;
              v77->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v77->__r_.__value_.__l.__data_ = v78;
              v163[1] = 0;
              v164 = 0;
              v163[0] = 0;
              v174.__end_ = v77 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&__p, &v174);
              v79 = __p.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&v174);
              __p.__end_ = v79;
              if (SHIBYTE(v164) < 0)
                operator delete(v163[0]);
            }
            else
            {
              v72 = *(_OWORD *)v163;
              __p.__end_->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v71->__r_.__value_.__l.__data_ = v72;
              __p.__end_ = v71 + 1;
            }
            std::string::basic_string[abi:ne180100]<0>(v163, "IsFrom");
            v80 = __p.__end_;
            if (__p.__end_ >= __p.__end_cap_.__value_)
            {
              v82 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
              v83 = v82 + 1;
              if (v82 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v83)
                v83 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555)
                v84 = 0xAAAAAAAAAAAAAAALL;
              else
                v84 = v83;
              v174.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
              if (v84)
                v85 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v84);
              else
                v85 = 0;
              v86 = v85 + v82;
              v174.__first_ = v85;
              v174.__begin_ = v86;
              v174.__end_cap_.__value_ = &v85[v84];
              v87 = *(_OWORD *)v163;
              v86->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v86->__r_.__value_.__l.__data_ = v87;
              v163[1] = 0;
              v164 = 0;
              v163[0] = 0;
              v174.__end_ = v86 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&__p, &v174);
              v88 = __p.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&v174);
              __p.__end_ = v88;
              if (SHIBYTE(v164) < 0)
                operator delete(v163[0]);
            }
            else
            {
              v81 = *(_OWORD *)v163;
              __p.__end_->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v80->__r_.__value_.__l.__data_ = v81;
              __p.__end_ = v80 + 1;
            }
            std::string::basic_string[abi:ne180100]<0>(v163, "IsFor");
            v89 = __p.__end_;
            if (__p.__end_ >= __p.__end_cap_.__value_)
            {
              v91 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
              v92 = v91 + 1;
              if (v91 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v92)
                v92 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555)
                v93 = 0xAAAAAAAAAAAAAAALL;
              else
                v93 = v92;
              v174.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
              if (v93)
                v94 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v93);
              else
                v94 = 0;
              v95 = v94 + v91;
              v174.__first_ = v94;
              v174.__begin_ = v95;
              v174.__end_cap_.__value_ = &v94[v93];
              v96 = *(_OWORD *)v163;
              v95->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v95->__r_.__value_.__l.__data_ = v96;
              v163[1] = 0;
              v164 = 0;
              v163[0] = 0;
              v174.__end_ = v95 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&__p, &v174);
              v97 = __p.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&v174);
              __p.__end_ = v97;
              if (SHIBYTE(v164) < 0)
                operator delete(v163[0]);
            }
            else
            {
              v90 = *(_OWORD *)v163;
              __p.__end_->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v89->__r_.__value_.__l.__data_ = v90;
              __p.__end_ = v89 + 1;
            }
            std::string::basic_string[abi:ne180100]<0>(v163, "IsWith");
            v98 = __p.__end_;
            if (__p.__end_ >= __p.__end_cap_.__value_)
            {
              v100 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
              v101 = v100 + 1;
              if (v100 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v101)
                v101 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555)
                v102 = 0xAAAAAAAAAAAAAAALL;
              else
                v102 = v101;
              v174.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
              if (v102)
                v103 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v102);
              else
                v103 = 0;
              v104 = v103 + v100;
              v174.__first_ = v103;
              v174.__begin_ = v104;
              v174.__end_cap_.__value_ = &v103[v102];
              v105 = *(_OWORD *)v163;
              v104->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v104->__r_.__value_.__l.__data_ = v105;
              v163[1] = 0;
              v164 = 0;
              v163[0] = 0;
              v174.__end_ = v104 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&__p, &v174);
              v106 = __p.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&v174);
              __p.__end_ = v106;
              if (SHIBYTE(v164) < 0)
                operator delete(v163[0]);
            }
            else
            {
              v99 = *(_OWORD *)v163;
              __p.__end_->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v98->__r_.__value_.__l.__data_ = v99;
              __p.__end_ = v98 + 1;
            }
            std::string::basic_string[abi:ne180100]<0>(v163, "IsTo");
            v107 = __p.__end_;
            if (__p.__end_ >= __p.__end_cap_.__value_)
            {
              v109 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
              v110 = v109 + 1;
              if (v109 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v110)
                v110 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555)
                v111 = 0xAAAAAAAAAAAAAAALL;
              else
                v111 = v110;
              v174.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
              if (v111)
                v112 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v111);
              else
                v112 = 0;
              v113 = v112 + v109;
              v174.__first_ = v112;
              v174.__begin_ = v113;
              v174.__end_cap_.__value_ = &v112[v111];
              v114 = *(_OWORD *)v163;
              v113->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v113->__r_.__value_.__l.__data_ = v114;
              v163[1] = 0;
              v164 = 0;
              v163[0] = 0;
              v174.__end_ = v113 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&__p, &v174);
              v115 = __p.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&v174);
              __p.__end_ = v115;
              if (SHIBYTE(v164) < 0)
                operator delete(v163[0]);
            }
            else
            {
              v108 = *(_OWORD *)v163;
              __p.__end_->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v107->__r_.__value_.__l.__data_ = v108;
              __p.__end_ = v107 + 1;
            }
            std::string::basic_string[abi:ne180100]<0>(v163, "IsSince");
            v116 = __p.__end_;
            if (__p.__end_ >= __p.__end_cap_.__value_)
            {
              v118 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
              v119 = v118 + 1;
              if (v118 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v119)
                v119 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555)
                v120 = 0xAAAAAAAAAAAAAAALL;
              else
                v120 = v119;
              v174.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
              if (v120)
                v121 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v120);
              else
                v121 = 0;
              v122 = v121 + v118;
              v174.__first_ = v121;
              v174.__begin_ = v122;
              v174.__end_cap_.__value_ = &v121[v120];
              v123 = *(_OWORD *)v163;
              v122->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v122->__r_.__value_.__l.__data_ = v123;
              v163[1] = 0;
              v164 = 0;
              v163[0] = 0;
              v174.__end_ = v122 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&__p, &v174);
              v124 = __p.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&v174);
              __p.__end_ = v124;
              if (SHIBYTE(v164) < 0)
                operator delete(v163[0]);
            }
            else
            {
              v117 = *(_OWORD *)v163;
              __p.__end_->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v116->__r_.__value_.__l.__data_ = v117;
              __p.__end_ = v116 + 1;
            }
            std::string::basic_string[abi:ne180100]<0>(v163, "IsUntil");
            v125 = __p.__end_;
            if (__p.__end_ >= __p.__end_cap_.__value_)
            {
              v127 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
              v128 = v127 + 1;
              if (v127 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v128)
                v128 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555)
                v129 = 0xAAAAAAAAAAAAAAALL;
              else
                v129 = v128;
              v174.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
              if (v129)
                v130 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v129);
              else
                v130 = 0;
              v131 = v130 + v127;
              v174.__first_ = v130;
              v174.__begin_ = v131;
              v174.__end_cap_.__value_ = &v130[v129];
              v132 = *(_OWORD *)v163;
              v131->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v131->__r_.__value_.__l.__data_ = v132;
              v163[1] = 0;
              v164 = 0;
              v163[0] = 0;
              v174.__end_ = v131 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&__p, &v174);
              v133 = __p.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&v174);
              __p.__end_ = v133;
              if (SHIBYTE(v164) < 0)
                operator delete(v163[0]);
            }
            else
            {
              v126 = *(_OWORD *)v163;
              __p.__end_->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v125->__r_.__value_.__l.__data_ = v126;
              __p.__end_ = v125 + 1;
            }
            std::string::basic_string[abi:ne180100]<0>(v163, "IsBefore");
            v134 = __p.__end_;
            if (__p.__end_ >= __p.__end_cap_.__value_)
            {
              v136 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
              v137 = v136 + 1;
              if (v136 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v137)
                v137 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555)
                v138 = 0xAAAAAAAAAAAAAAALL;
              else
                v138 = v137;
              v174.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
              if (v138)
                v139 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v138);
              else
                v139 = 0;
              v140 = v139 + v136;
              v174.__first_ = v139;
              v174.__begin_ = v140;
              v174.__end_cap_.__value_ = &v139[v138];
              v141 = *(_OWORD *)v163;
              v140->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v140->__r_.__value_.__l.__data_ = v141;
              v163[1] = 0;
              v164 = 0;
              v163[0] = 0;
              v174.__end_ = v140 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&__p, &v174);
              v142 = __p.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&v174);
              __p.__end_ = v142;
              if (SHIBYTE(v164) < 0)
                operator delete(v163[0]);
            }
            else
            {
              v135 = *(_OWORD *)v163;
              __p.__end_->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v134->__r_.__value_.__l.__data_ = v135;
              __p.__end_ = v134 + 1;
            }
            std::string::basic_string[abi:ne180100]<0>(v163, "IsAfter");
            v143 = __p.__end_;
            if (__p.__end_ >= __p.__end_cap_.__value_)
            {
              v145 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
              v146 = v145 + 1;
              if (v145 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v146)
                v146 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555)
                v147 = 0xAAAAAAAAAAAAAAALL;
              else
                v147 = v146;
              v174.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
              if (v147)
                v148 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v147);
              else
                v148 = 0;
              v149 = v148 + v145;
              v174.__first_ = v148;
              v174.__begin_ = v149;
              v174.__end_cap_.__value_ = &v148[v147];
              v150 = *(_OWORD *)v163;
              v149->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v149->__r_.__value_.__l.__data_ = v150;
              v163[1] = 0;
              v164 = 0;
              v163[0] = 0;
              v174.__end_ = v149 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&__p, &v174);
              v151 = __p.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&v174);
              __p.__end_ = v151;
              if (SHIBYTE(v164) < 0)
                operator delete(v163[0]);
            }
            else
            {
              v144 = *(_OWORD *)v163;
              __p.__end_->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v143->__r_.__value_.__l.__data_ = v144;
              __p.__end_ = v143 + 1;
            }
            std::string::basic_string[abi:ne180100]<0>(v163, "IsAbout");
            v152 = __p.__end_;
            if (__p.__end_ >= __p.__end_cap_.__value_)
            {
              v155 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
              v156 = v155 + 1;
              if (v155 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v156)
                v156 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555)
                v157 = 0xAAAAAAAAAAAAAAALL;
              else
                v157 = v156;
              v174.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
              if (v157)
                v158 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v157);
              else
                v158 = 0;
              v159 = v158 + v155;
              v174.__first_ = v158;
              v174.__begin_ = v159;
              v174.__end_cap_.__value_ = &v158[v157];
              v160 = *(_OWORD *)v163;
              v159->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v159->__r_.__value_.__l.__data_ = v160;
              v163[1] = 0;
              v164 = 0;
              v163[0] = 0;
              v174.__end_ = v159 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&__p, &v174);
              v154 = __p.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&v174);
              __p.__end_ = v154;
              if (SHIBYTE(v164) < 0)
              {
                operator delete(v163[0]);
                v154 = __p.__end_;
              }
            }
            else
            {
              v153 = *(_OWORD *)v163;
              __p.__end_->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v152->__r_.__value_.__l.__data_ = v153;
              v154 = v152 + 1;
              __p.__end_ = v152 + 1;
            }
            v161 = (std::string *)std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>((uint64_t)__p.__begin_, (uint64_t)v154, (unsigned __int8 **)a2);
            if (v161 != __p.__end_)
            {
              if (*(char *)(a2 + 23) < 0)
                std::string::__init_copy_ctor_external(&v162, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
              else
                v162 = *(std::string *)a2;
              LOWORD(v174.__first_) = 0;
              LOWORD(v174.__first_) = QP::ParserGrammar::getSymbolID(a1, (uint64_t)&v162);
              std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t **)(a1 + 688), (unsigned __int16 *)&v174, &v174);
              if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v162.__r_.__value_.__l.__data_);
            }
            v174.__first_ = (std::__split_buffer<std::string>::pointer)&__p;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v174);
            return;
          }
        }
        else if (!v33)
        {
          goto LABEL_179;
        }
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&v165, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          v165 = *(std::string *)a2;
        LOWORD(v174.__first_) = 0;
        LOWORD(v174.__first_) = QP::ParserGrammar::getSymbolID(a1, (uint64_t)&v165);
        std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t **)(a1 + 784), (unsigned __int16 *)&v174, &v174);
        if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v165.__r_.__value_.__l.__data_);
        goto LABEL_179;
      }
    }
    else if (v25)
    {
      goto LABEL_116;
    }
    std::string::basic_string[abi:ne180100]<0>(&v174, "Date");
    v28 = QP::endswith((uint64_t *)a2, (uint64_t *)&v174);
    if (SHIBYTE(v174.__end_) < 0)
      operator delete(v174.__first_);
    if (v28)
    {
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v171, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v171 = *(std::string *)a2;
      LOWORD(v174.__first_) = 0;
      LOWORD(v174.__first_) = QP::ParserGrammar::getSymbolID(a1, (uint64_t)&v171);
      std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t **)(a1 + 520), (unsigned __int16 *)&v174, &v174);
      if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
      {
        v27 = &v171;
        goto LABEL_169;
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v174, "Kind");
      v29 = QP::endswith((uint64_t *)a2, (uint64_t *)&v174);
      if (SHIBYTE(v174.__end_) < 0)
        operator delete(v174.__first_);
      if (v29)
      {
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&v170, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          v170 = *(std::string *)a2;
        QP::ParserGrammar::setIsKind(a1, (uint64_t)&v170);
        if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
        {
          v27 = &v170;
          goto LABEL_169;
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v174, "Text");
        if (QP::endswith((uint64_t *)a2, (uint64_t *)&v174))
        {
          v30 = 1;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "TOPIC");
          v30 = QP::startswith((unsigned __int8 *)a2, (unsigned __int8 *)&__p);
          if (SHIBYTE(__p.__end_cap_.__value_) < 0)
            operator delete(__p.__begin_);
        }
        if (SHIBYTE(v174.__end_) < 0)
          operator delete(v174.__first_);
        if (v30)
        {
          if (*(char *)(a2 + 23) < 0)
            std::string::__init_copy_ctor_external(&v168, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
          else
            v168 = *(std::string *)a2;
          QP::ParserGrammar::setIsInferred(a1, (uint64_t)&v168);
          if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
          {
            v27 = &v168;
            goto LABEL_169;
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v174, "UserAction");
          v31 = QP::startswith((unsigned __int8 *)a2, (unsigned __int8 *)&v174);
          if (SHIBYTE(v174.__end_) < 0)
            operator delete(v174.__first_);
          if (v31)
          {
            if (*(char *)(a2 + 23) < 0)
              std::string::__init_copy_ctor_external(&v167, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
            else
              v167 = *(std::string *)a2;
            QP::ParserGrammar::setIsUserAction(a1, (uint64_t)&v167);
            if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
            {
              v27 = &v167;
              goto LABEL_169;
            }
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&v174, "Action");
            v32 = QP::startswith((unsigned __int8 *)a2, (unsigned __int8 *)&v174);
            if (SHIBYTE(v174.__end_) < 0)
              operator delete(v174.__first_);
            if (v32)
            {
              if (*(char *)(a2 + 23) < 0)
                std::string::__init_copy_ctor_external(&v166, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
              else
                v166 = *(std::string *)a2;
              QP::ParserGrammar::setIsAction(a1, (uint64_t)&v166);
              if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
              {
                v27 = &v166;
                goto LABEL_169;
              }
            }
          }
        }
      }
    }
    goto LABEL_170;
  }
}

void sub_218E338D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_218E33AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    JUMPOUT(0x218E33A0CLL);
  JUMPOUT(0x218E33A4CLL);
}

std::string *QP::ParserGrammar::symbol@<X0>(QP::ParserGrammar *this@<X0>, unsigned int a2@<W1>, std::string *a3@<X8>)
{
  std::string *result;
  char **v7;
  char *v8;
  char *v9;
  char *v10;
  char **v11;
  unsigned int v12;
  BOOL v13;
  char **v14;
  char *v15;
  unsigned int v16;
  BOOL v17;
  char **v18;

  result = (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, kQPSymbolNone[0]);
  v9 = (char *)*((_QWORD *)this + 18);
  v8 = (char *)this + 144;
  v7 = (char **)v9;
  if (v9)
  {
    v10 = v8;
    v11 = v7;
    do
    {
      v12 = *((unsigned __int16 *)v11 + 16);
      v13 = v12 >= a2;
      if (v12 >= a2)
        v14 = v11;
      else
        v14 = v11 + 1;
      if (v13)
        v10 = (char *)v11;
      v11 = (char **)*v14;
    }
    while (*v14);
    if (v10 != v8 && *((unsigned __int16 *)v10 + 16) <= a2)
    {
      v15 = v8;
      do
      {
        v16 = *((unsigned __int16 *)v7 + 16);
        v17 = v16 >= a2;
        if (v16 >= a2)
          v18 = v7;
        else
          v18 = v7 + 1;
        if (v17)
          v15 = (char *)v7;
        v7 = (char **)*v18;
      }
      while (*v18);
      if (v15 == v8 || *((unsigned __int16 *)v15 + 16) > a2)
        v15 = v8;
      return std::string::operator=(a3, (const std::string *)(v15 + 40));
    }
  }
  return result;
}

void sub_218E33B98(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t QP::ParserGrammar::symbolID(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (!v2)
    return 0;
  v4 = a1 + 160;
  if ((void **)(a1 + 168) == std::__tree<std::string>::find<std::string>(a1 + 160, (void **)a2))
    return (unsigned __int16)kQPSymbolIdNone;
  else
    return *((unsigned __int16 *)std::__tree<std::string>::find<std::string>(v4, (void **)a2) + 28);
}

uint64_t QP::ParserGrammar::replacementID(QP::ParserGrammar *this, uint64_t a2)
{
  char **v2;
  char **v3;
  char **v4;
  char **v5;
  unsigned int v6;
  BOOL v7;
  char **v8;
  char **v9;
  unsigned int v10;
  BOOL v11;
  char **v12;

  v2 = (char **)*((_QWORD *)this + 39);
  if (v2)
  {
    v3 = (char **)((char *)this + 312);
    v4 = (char **)((char *)this + 312);
    v5 = (char **)*((_QWORD *)this + 39);
    do
    {
      v6 = *((unsigned __int16 *)v5 + 13);
      v7 = v6 >= a2;
      if (v6 >= a2)
        v8 = v5;
      else
        v8 = v5 + 1;
      if (v7)
        v4 = v5;
      v5 = (char **)*v8;
    }
    while (*v8);
    if (v4 != v3 && *((unsigned __int16 *)v4 + 13) <= a2)
    {
      v9 = (char **)((char *)this + 312);
      do
      {
        v10 = *((unsigned __int16 *)v2 + 13);
        v11 = v10 >= a2;
        if (v10 >= a2)
          v12 = v2;
        else
          v12 = v2 + 1;
        if (v11)
          v9 = v2;
        v2 = (char **)*v12;
      }
      while (*v12);
      if (v9 == v3 || *((unsigned __int16 *)v9 + 13) > a2)
        v9 = (char **)((char *)this + 312);
      return *((unsigned __int16 *)v9 + 14);
    }
  }
  return a2;
}

BOOL QP::ParserGrammar::hasExpansions(QP::ParserGrammar *this, unsigned int a2)
{
  char **v2;
  char **v3;
  char **v4;
  char **v5;
  unsigned int v6;
  BOOL v7;
  char **v8;
  char **v9;
  unsigned int v10;
  BOOL v11;
  char **v12;

  v2 = (char **)*((_QWORD *)this + 108);
  if (!v2)
    return 0;
  v3 = (char **)((char *)this + 864);
  v4 = (char **)((char *)this + 864);
  v5 = (char **)*((_QWORD *)this + 108);
  do
  {
    v6 = *((unsigned __int16 *)v5 + 16);
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v5;
    else
      v8 = v5 + 1;
    if (v7)
      v4 = v5;
    v5 = (char **)*v8;
  }
  while (*v8);
  if (v4 == v3 || *((unsigned __int16 *)v4 + 16) > a2)
    return 0;
  v9 = (char **)((char *)this + 864);
  do
  {
    v10 = *((unsigned __int16 *)v2 + 16);
    v11 = v10 >= a2;
    if (v10 >= a2)
      v12 = v2;
    else
      v12 = v2 + 1;
    if (v11)
      v9 = v2;
    v2 = (char **)*v12;
  }
  while (*v12);
  if (v9 == v3 || *((unsigned __int16 *)v9 + 16) > a2)
    v9 = (char **)((char *)this + 864);
  return v9[7] != 0;
}

void QP::ParserGrammar::expansions(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  _QWORD **v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD **v18;
  BOOL v19;
  uint64_t v20[3];
  _QWORD **v21;
  _QWORD *v22[2];
  char v23;

  v23 = 0;
  v3 = *(_QWORD *)(a1 + 864);
  if (v3)
  {
    v5 = a1 + 864;
    v6 = a1 + 864;
    v7 = *(_QWORD *)(a1 + 864);
    do
    {
      v8 = *(unsigned __int16 *)(v7 + 32);
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = (uint64_t *)v7;
      else
        v10 = (uint64_t *)(v7 + 8);
      if (v9)
        v6 = v7;
      v7 = *v10;
    }
    while (*v10);
    if (v6 != v5 && *(unsigned __int16 *)(v6 + 32) <= a2)
    {
      v11 = a1 + 864;
      do
      {
        v12 = *(unsigned __int16 *)(v3 + 32);
        v13 = v12 >= a2;
        if (v12 >= a2)
          v14 = (uint64_t *)v3;
        else
          v14 = (uint64_t *)(v3 + 8);
        if (v13)
          v11 = v3;
        v3 = *v14;
      }
      while (*v14);
      if (v11 == v5 || *(unsigned __int16 *)(v11 + 32) > a2)
        v11 = a1 + 864;
      std::map<unsigned short,std::map<unsigned short,float>>::map[abi:ne180100]((uint64_t *)&v21, v11 + 40);
      v15 = v21;
      if (v21 != v22)
      {
        do
        {
          v16 = *((unsigned __int16 *)v15 + 16);
          std::map<unsigned short,float>::map[abi:ne180100](v20, (uint64_t)(v15 + 5));
          (*(void (**)(uint64_t, uint64_t, uint64_t *, char *))(a3 + 16))(a3, v16, v20, &v23);
          std::__tree<unsigned short>::destroy((uint64_t)v20, (_QWORD *)v20[1]);
          if (v23)
            break;
          v17 = v15[1];
          if (v17)
          {
            do
            {
              v18 = (_QWORD **)v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              v18 = (_QWORD **)v15[2];
              v19 = *v18 == v15;
              v15 = v18;
            }
            while (!v19);
          }
          v15 = v18;
        }
        while (v18 != v22);
      }
      std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy((uint64_t)&v21, v22[0]);
    }
  }
}

void sub_218E33E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, char a13, _QWORD *a14)
{
  std::__tree<unsigned short>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

BOOL QP::ParserGrammar::hasFileExtensions(QP::ParserGrammar *this, unsigned int a2)
{
  char **v2;
  char **v3;
  char **v4;
  char **v5;
  unsigned int v6;
  BOOL v7;
  char **v8;
  char **v9;
  unsigned int v10;
  BOOL v11;
  char **v12;

  v2 = (char **)*((_QWORD *)this + 33);
  if (!v2)
    return 0;
  v3 = (char **)((char *)this + 264);
  v4 = (char **)((char *)this + 264);
  v5 = (char **)*((_QWORD *)this + 33);
  do
  {
    v6 = *((unsigned __int16 *)v5 + 16);
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v5;
    else
      v8 = v5 + 1;
    if (v7)
      v4 = v5;
    v5 = (char **)*v8;
  }
  while (*v8);
  if (v4 == v3 || *((unsigned __int16 *)v4 + 16) > a2)
    return 0;
  v9 = (char **)((char *)this + 264);
  do
  {
    v10 = *((unsigned __int16 *)v2 + 16);
    v11 = v10 >= a2;
    if (v10 >= a2)
      v12 = v2;
    else
      v12 = v2 + 1;
    if (v11)
      v9 = v2;
    v2 = (char **)*v12;
  }
  while (*v12);
  if (v9 == v3 || *((unsigned __int16 *)v9 + 16) > a2)
    v9 = (char **)((char *)this + 264);
  return v9[7] != 0;
}

BOOL QP::ParserGrammar::hasValue(uint64_t a1, unsigned int a2, void **a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;

  v3 = *(_QWORD *)(a1 + 480);
  if (!v3)
    return 0;
  v4 = a1 + 480;
  do
  {
    v5 = *(unsigned __int16 *)(v3 + 32);
    v6 = v5 >= a2;
    if (v5 >= a2)
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (v6)
      v4 = v3;
    v3 = *v7;
  }
  while (*v7);
  return v4 != a1 + 480
      && *(unsigned __int16 *)(v4 + 32) <= a2
      && (void **)(v4 + 48) != std::__tree<std::string>::find<std::string>(v4 + 40, a3);
}

void QP::ParserGrammar::value(uint64_t a1@<X0>, unsigned int a2@<W1>, void **a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  void **v10;
  __int128 v11;

  v5 = *(_QWORD *)(a1 + 480);
  if (!v5)
    goto LABEL_15;
  v6 = a1 + 480;
  do
  {
    v7 = *(unsigned __int16 *)(v5 + 32);
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 == a1 + 480
    || *(unsigned __int16 *)(v6 + 32) > a2
    || (v10 = std::__tree<std::string>::find<std::string>(v6 + 40, a3), (void **)(v6 + 48) == v10))
  {
LABEL_15:
    std::string::basic_string[abi:ne180100]<0>(a4, kQPSymbolNone[0]);
  }
  else if (*((char *)v10 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a4, (const std::string::value_type *)v10[7], (std::string::size_type)v10[8]);
  }
  else
  {
    v11 = *(_OWORD *)(v10 + 7);
    a4->__r_.__value_.__r.__words[2] = (std::string::size_type)v10[9];
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v11;
  }
}

BOOL QP::ParserGrammar::hasCategories(QP::ParserGrammar *this, unsigned int a2)
{
  char *v2;
  char **v3;
  char *v4;
  char *v5;
  char **v6;
  unsigned int v7;
  BOOL v8;
  char **v9;
  char *v10;
  unsigned int v11;
  BOOL v12;
  char **v13;

  v4 = (char *)*((_QWORD *)this + 30);
  v2 = (char *)this + 240;
  v3 = (char **)v4;
  if (!v4)
    return 0;
  v5 = v2;
  v6 = v3;
  do
  {
    v7 = *((unsigned __int16 *)v6 + 16);
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = v6;
    else
      v9 = v6 + 1;
    if (v8)
      v5 = (char *)v6;
    v6 = (char **)*v9;
  }
  while (*v9);
  if (v5 == v2 || *((unsigned __int16 *)v5 + 16) > a2)
    return 0;
  v10 = v2;
  do
  {
    v11 = *((unsigned __int16 *)v3 + 16);
    v12 = v11 >= a2;
    if (v11 >= a2)
      v13 = v3;
    else
      v13 = v3 + 1;
    if (v12)
      v10 = (char *)v3;
    v3 = (char **)*v13;
  }
  while (*v13);
  if (v10 == v2 || *((unsigned __int16 *)v10 + 16) > a2)
    v10 = v2;
  return *((_QWORD *)v10 + 7) != 0;
}

void QP::ParserGrammar::categories(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  std::string __p;

  v5 = *(_QWORD *)(a1 + 240);
  v3 = a1 + 240;
  v4 = v5;
  if (v5)
  {
    v7 = v3;
    v8 = v4;
    do
    {
      v9 = *(unsigned __int16 *)(v8 + 32);
      v10 = v9 >= a2;
      if (v9 >= a2)
        v11 = (uint64_t *)v8;
      else
        v11 = (uint64_t *)(v8 + 8);
      if (v10)
        v7 = v8;
      v8 = *v11;
    }
    while (*v11);
    if (v7 != v3 && *(unsigned __int16 *)(v7 + 32) <= a2)
    {
      v12 = v3;
      do
      {
        v13 = *(unsigned __int16 *)(v4 + 32);
        v14 = v13 >= a2;
        if (v13 >= a2)
          v15 = (uint64_t *)v4;
        else
          v15 = (uint64_t *)(v4 + 8);
        if (v14)
          v12 = v4;
        v4 = *v15;
      }
      while (*v15);
      if (v12 == v3 || *(unsigned __int16 *)(v12 + 32) > a2)
        v12 = v3;
      v16 = *(_QWORD **)(v12 + 40);
      v17 = (_QWORD *)(v12 + 48);
      if (v16 != (_QWORD *)(v12 + 48))
      {
        do
        {
          if (*((char *)v16 + 55) < 0)
            std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v16[4], v16[5]);
          else
            __p = *(std::string *)(v16 + 4);
          (*(void (**)(uint64_t, std::string *))(a3 + 16))(a3, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v18 = (_QWORD *)v16[1];
          if (v18)
          {
            do
            {
              v19 = v18;
              v18 = (_QWORD *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              v19 = (_QWORD *)v16[2];
              v20 = *v19 == (_QWORD)v16;
              v16 = v19;
            }
            while (!v20);
          }
          v16 = v19;
        }
        while (v19 != v17);
      }
    }
  }
}

void sub_218E34260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void QP::ParserGrammar::tokens(uint64_t a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, uint64_t a5)
{
  const __CFDictionary *v6;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const __CFDictionary *Value;
  const __CFDictionary *v17;
  CFTypeID v18;
  CFTypeID TypeID;
  CFTypeID v20;
  const __CFString *v21;
  const __CFString *v22;
  CFTypeID v23;
  const __CFString *v24;
  const __CFString *v25;
  const __CFString *v26;
  CFTypeID v27;
  const __CFString *v28;
  const __CFDictionary *v29;
  const __CFDictionary *v30;
  CFTypeID v31;
  CFTypeID v32;
  const void *v33;
  CFTypeID v34;
  CFTypeID v35;
  const __CFArray *v36;
  const __CFArray *v37;
  CFTypeID v38;
  const __CFAllocator *v39;
  const __CFDictionary *v40;
  const __CFDictionary *v41;
  CFTypeID v42;
  const void *v43;
  CFTypeID v44;
  CFTypeID v45;
  CFIndex v46;
  const void *ValueAtIndex;
  CFTypeID v48;
  CFIndex v49;
  unint64_t v50;
  const void **v51;
  size_t v52;
  uint64_t v53;
  CFTypeRef *v54;
  const __CFString *v55;
  const __CFString *v56;
  CFTypeID v57;
  const __CFString *v58;
  CFTypeID v59;
  CFTypeID v60;
  const __CFString *v61;
  CFTypeRef v62;
  CFTypeID v63;
  CFTypeID v64;
  CFTypeRef v65;
  const __CFString *v66;
  CFTypeID v67;
  CFTypeID v68;
  const __CFString *v69;
  const __CFAllocator *v70;
  const void *v71;
  CFStringRef v72;
  uint64_t v73;
  CFIndex Count;
  CFTypeRef v75;
  const __CFString *v76;
  const __CFString *v77;
  CFTypeRef v78;
  const __CFAllocator *v79;
  CFStringRef v80;
  const void *v81[2];

  v81[1] = *(const void **)MEMORY[0x24BDAC8D0];
  if (!a2)
    return;
  v6 = *(const __CFDictionary **)(a1 + 72);
  if (!v6 || !*(_QWORD *)(a1 + 80))
    return;
  v11 = *(_QWORD *)(a1 + 40);
  v12 = 144;
  if (!*(_QWORD *)(v11 + 144))
    v12 = 128;
  v13 = *(_QWORD *)(v11 + v12);
  v14 = 152;
  if (!*(_QWORD *)(v11 + 152))
    v14 = 136;
  v15 = *(_QWORD *)(v11 + v14);
  Value = (const __CFDictionary *)CFDictionaryGetValue(v6, a2);
  if (!Value)
    return;
  v17 = Value;
  v18 = CFGetTypeID(Value);
  TypeID = CFDictionaryGetTypeID();
  if (!a3)
    return;
  if (v18 != TypeID)
    return;
  v78 = CFDictionaryGetValue(v17, CFSTR("TYPE"));
  if (!v78)
    return;
  v20 = CFGetTypeID(v78);
  if (v20 != CFStringGetTypeID())
    return;
  v21 = (const __CFString *)CFDictionaryGetValue(v17, CFSTR("ROOT"));
  if (v21)
  {
    v22 = v21;
    v23 = CFGetTypeID(v21);
    if (v23 == CFStringGetTypeID())
      v24 = v22;
    else
      v24 = 0;
    v76 = v24;
  }
  else
  {
    v76 = 0;
  }
  v25 = (const __CFString *)CFDictionaryGetValue(v17, CFSTR("TOKEN"));
  if (v25)
  {
    v26 = v25;
    v27 = CFGetTypeID(v25);
    if (v27 == CFStringGetTypeID())
      v28 = v26;
    else
      v28 = 0;
    v77 = v28;
  }
  else
  {
    v77 = 0;
  }
  v29 = (const __CFDictionary *)CFDictionaryGetValue(v17, a3);
  if (v29)
  {
    v30 = v29;
    v31 = CFGetTypeID(v29);
    v32 = CFDictionaryGetTypeID();
    if (a4)
    {
      if (v31 == v32)
      {
        v33 = CFDictionaryGetValue(v17, CFSTR("TOKEN"));
        v77 = (const __CFString *)CFDictionaryGetValue(v17, CFSTR("ROOT"));
        if (v33)
        {
          v34 = CFGetTypeID(v33);
          if (v34 == CFStringGetTypeID())
          {
            if (v77)
            {
              v35 = CFGetTypeID(v77);
              if (v35 == CFStringGetTypeID())
              {
                v36 = (const __CFArray *)CFDictionaryGetValue(v30, a4);
                if (v36)
                {
                  v37 = v36;
                  v38 = CFGetTypeID(v36);
                  if (v38 == CFArrayGetTypeID())
                  {
                    v81[0] = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("%@-%@"), a3, a4);
                    v80 = _copyTokenText(a2, v77, (const __CFString *)v81[0], v13, v15, *(CFDictionaryRef *)(a1 + 80));
                    v39 = _copyTranslationStringWithContent(a4, v37);
                    v79 = v39;
                    if (v39)
                    {
                      if (v80)
                        (*(void (**)(uint64_t, const void *, CFStringRef, CFTypeRef, const __CFAllocator *))(a5 + 16))(a5, v33, v80, v78, v39);
                    }
                    nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v79, 0);
                    nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v80, 0);
LABEL_84:
                    nlp::CFScopedPtr<__CFString const*>::reset(v81, 0);
                    return;
                  }
                }
              }
            }
          }
        }
        return;
      }
    }
  }
  v40 = (const __CFDictionary *)CFDictionaryGetValue(v17, CFSTR("Tokens"));
  if (v40)
  {
    v41 = v40;
    v42 = CFGetTypeID(v40);
    if (v42 == CFDictionaryGetTypeID())
    {
      v43 = CFDictionaryGetValue(v17, CFSTR("ROOT"));
      if (!v43)
        return;
      v44 = CFGetTypeID(v43);
      if (v44 != CFStringGetTypeID())
        return;
      v75 = CFDictionaryGetValue(v41, a3);
      if (!v75)
        return;
      v45 = CFGetTypeID(v75);
      if (v45 != CFArrayGetTypeID())
        return;
      Count = CFArrayGetCount((CFArrayRef)v75);
      if (Count < 1)
        return;
      v46 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v75, v46);
        v48 = CFGetTypeID(ValueAtIndex);
        if (v48 == CFDictionaryGetTypeID())
        {
          v49 = CFDictionaryGetCount((CFDictionaryRef)ValueAtIndex);
          v73 = (uint64_t)&v73;
          MEMORY[0x24BDAC7A8](v49);
          v50 = (8 * v49 + 15) & 0xFFFFFFFFFFFFFFF0;
          v51 = (const void **)((char *)&v73 - v50);
          if ((unint64_t)(8 * v49) >= 0x200)
            v52 = 512;
          else
            v52 = 8 * v49;
          bzero((char *)&v73 - v50, v52);
          MEMORY[0x24BDAC7A8](v53);
          v54 = (CFTypeRef *)((char *)&v73 - v50);
          bzero(v54, v52);
          CFDictionaryGetKeysAndValues((CFDictionaryRef)ValueAtIndex, v51, v54);
          if (v49 < 1)
          {
            if (!a4 || !v77 || !v78)
              goto LABEL_78;
            v71 = 0;
            v81[0] = 0;
          }
          else
          {
            v76 = 0;
            v55 = 0;
            do
            {
              v56 = (const __CFString *)*v51;
              v57 = CFGetTypeID(*v51);
              if (v57 == CFStringGetTypeID())
                v55 = v56;
              if (CFStringsAreEqual(CFSTR("TOKEN"), v55))
              {
                v58 = (const __CFString *)*v54;
                v59 = CFGetTypeID(*v54);
                v60 = CFStringGetTypeID();
                v61 = v77;
                if (v59 == v60)
                  v61 = v58;
                v77 = v61;
              }
              else if (CFStringsAreEqual(CFSTR("TYPE"), v55))
              {
                v62 = *v54;
                v63 = CFGetTypeID(*v54);
                v64 = CFStringGetTypeID();
                v65 = v78;
                if (v63 == v64)
                  v65 = v62;
                v78 = v65;
              }
              else if (CFStringsAreEqual(CFSTR("TRANSLATIONS"), v55))
              {
                v66 = (const __CFString *)*v54;
                v67 = CFGetTypeID(*v54);
                v68 = CFArrayGetTypeID();
                v69 = v76;
                if (v67 == v68)
                  v69 = v66;
                v76 = v69;
              }
              ++v54;
              ++v51;
              --v49;
            }
            while (v49);
            if (!a4 || !v77 || !v78)
              goto LABEL_78;
            v81[0] = 0;
            if (v76)
            {
              v70 = _copyTranslationStringWithContent(0, (const __CFArray *)v76);
              nlp::CFScopedPtr<__CFString const*>::reset(v81, v70);
              v71 = v81[0];
            }
            else
            {
              v71 = 0;
            }
          }
          (*(void (**)(uint64_t, const __CFString *, const __CFString *, CFTypeRef, const void *))(a5 + 16))(a5, v77, a4, v78, v71);
          nlp::CFScopedPtr<__CFString const*>::reset(v81, 0);
        }
LABEL_78:
        if (++v46 == Count)
          return;
      }
    }
  }
  if (v76 && v77)
  {
    v72 = _copyTokenText(a2, v76, a3, v13, v15, *(CFDictionaryRef *)(a1 + 80));
    v81[0] = v72;
    if (v72)
      (*(void (**)(uint64_t, const __CFString *, CFStringRef, CFTypeRef, _QWORD))(a5 + 16))(a5, v77, v72, v78, 0);
    goto LABEL_84;
  }
}

void sub_218E3487C(_Unwind_Exception *a1)
{
  uint64_t v1;

  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v1 - 112), 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v1 - 104), 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v1 - 96), 0);
  _Unwind_Resume(a1);
}

CFStringRef _copyTokenText(const __CFString *key, const __CFString *a2, const __CFString *a3, unint64_t a4, unint64_t a5, CFDictionaryRef theDict)
{
  const __CFDictionary *Value;
  const __CFDictionary *v11;
  CFTypeID v12;
  const __CFDictionary *v13;
  const __CFDictionary *v14;
  CFTypeID v15;
  const __CFDictionary *v16;
  const __CFDictionary *v17;
  CFTypeID v18;
  const __CFDictionary *v19;
  const __CFString *v20;
  const __CFString *v21;
  const __CFString *v22;
  CFTypeID v23;

  if (!a3)
    return 0;
  if (!theDict)
    return 0;
  if (!(a4 | a5))
    return 0;
  Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, key);
  if (!Value)
    return 0;
  v11 = Value;
  v12 = CFGetTypeID(Value);
  if (v12 != CFDictionaryGetTypeID())
    return 0;
  v13 = (const __CFDictionary *)CFDictionaryGetValue(v11, a2);
  if (!v13)
    return 0;
  v14 = v13;
  v15 = CFGetTypeID(v13);
  if (v15 != CFDictionaryGetTypeID())
    return 0;
  v16 = (const __CFDictionary *)CFDictionaryGetValue(v14, a3);
  if (!v16)
    return 0;
  v17 = v16;
  v18 = CFGetTypeID(v16);
  if (v18 != CFDictionaryGetTypeID())
    return 0;
  if (a5 && CFDictionaryContainsKey(v17, (const void *)a5))
  {
    v19 = v17;
    v20 = (const __CFString *)a5;
  }
  else
  {
    if (!a4 || !CFDictionaryContainsKey(v17, (const void *)a4))
      return 0;
    v19 = v17;
    v20 = (const __CFString *)a4;
  }
  v21 = (const __CFString *)CFDictionaryGetValue(v19, v20);
  if (v21)
  {
    v22 = v21;
    v23 = CFGetTypeID(v21);
    if (v23 == CFStringGetTypeID())
      return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v22);
  }
  return 0;
}

const __CFAllocator *_copyTranslationStringWithContent(const __CFString *a1, const __CFArray *a2)
{
  const __CFAllocator *v4;
  __CFArray *Mutable;
  CFIndex Count;
  CFIndex i;
  const __CFString *ValueAtIndex;
  CFTypeID v9;
  const __CFString *MutableCopy;
  __CFString *v11;
  CFIndex v12;
  CFRange v14;

  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  Count = CFArrayGetCount(a2);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, i);
      v9 = CFGetTypeID(ValueAtIndex);
      if (v9 == CFStringGetTypeID())
      {
        MutableCopy = CFStringCreateMutableCopy(v4, 0, ValueAtIndex);
        v11 = (__CFString *)MutableCopy;
        if (a1)
        {
          v14.length = CFStringGetLength(MutableCopy);
          v14.location = 0;
          CFStringFindAndReplace(v11, CFSTR("%@v"), a1, v14, 0);
        }
        CFArrayAppendValue(Mutable, v11);
        if (v11)
          CFRelease(v11);
      }
    }
  }
  v12 = CFArrayGetCount(Mutable);
  if (!v12)
  {
    if (!Mutable)
      goto LABEL_14;
    goto LABEL_13;
  }
  v4 = (const __CFAllocator *)CFStringCreateByCombiningStrings(v4, Mutable, CFSTR(" && "));
  if (Mutable)
LABEL_13:
    CFRelease(Mutable);
LABEL_14:
  if (v12)
    return v4;
  else
    return 0;
}

void sub_218E34B70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void QP::ParserGrammar::tokenCompletions(uint64_t a1, CFStringRef theString, uint64_t a3)
{
  const __CFAllocator *v6;
  const __CFDictionary *Mutable;
  nlp *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  CFIndex Count;
  unint64_t v14;
  size_t v15;
  uint64_t v16;
  const void **v17;
  const void *v18;
  const __CFString *Value;
  const void *v20;
  const void *v21;
  const void *v22;
  const __CFArray *ArrayBySeparatingStrings;
  const __CFArray *v24;
  const void *ValueAtIndex;
  const __CFString *v26;
  const __CFArray *v27;
  const void *v28;
  CFStringRef v29;
  const void *v30;
  NSObject *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  const void *v36;
  uint64_t *v37;
  const __CFDictionary *v38;
  const void *v39;
  const void *v40;
  CFAllocatorRef v41;
  __CFSet *v42;
  CFStringRef v43;
  const __CFArray *v44;
  const __CFArray *v45;
  __CFSet *v46;
  unsigned __int8 *v47;
  unsigned int v48;
  unsigned __int8 v49;
  CFMutableStringRef MutableCopy;
  _QWORD v51[3];
  _QWORD *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  if (!theString
    || !CFStringGetLength(theString)
    || !*(_QWORD *)(a1 + 8)
    || !*(_QWORD *)(a1 + 16)
    || !*(_QWORD *)(a1 + 32)
    || !*(_QWORD *)(a1 + 24))
  {
    return;
  }
  v34 = a3;
  v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v41 = v6;
  MutableCopy = CFStringCreateMutableCopy(v6, 0, theString);
  CFStringLowercase(MutableCopy, *(CFLocaleRef *)(*(_QWORD *)(a1 + 40) + 104));
  QP::getUTF8StringFromCFString(MutableCopy, &v47);
  v8 = *(nlp **)(a1 + 8);
  if ((v49 & 0x80u) == 0)
    v9 = (unsigned __int8 *)&v47;
  else
    v9 = v47;
  v51[0] = &unk_24DA27718;
  v51[1] = searchCompletions;
  v52 = v51;
  if ((v49 & 0x80u) == 0)
    v10 = v49;
  else
    v10 = v48;
  nlp::BurstTrieSearch(v8, v9, v10, (uint64_t)Mutable, (uint64_t)v51, -1);
  v11 = v52;
  if (v52 == v51)
  {
    v12 = 4;
    v11 = v51;
    goto LABEL_17;
  }
  if (v52)
  {
    v12 = 5;
LABEL_17:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  Count = CFDictionaryGetCount(Mutable);
  v37 = &v33;
  MEMORY[0x24BDAC7A8](Count);
  v14 = (8 * Count + 15) & 0xFFFFFFFFFFFFFFF0;
  if ((unint64_t)(8 * Count) >= 0x200)
    v15 = 512;
  else
    v15 = 8 * Count;
  bzero((char *)&v33 - v14, v15);
  MEMORY[0x24BDAC7A8](v16);
  v17 = (const void **)((char *)&v33 - v14);
  bzero((char *)&v33 - v14, v15);
  CFDictionaryGetKeysAndValues(Mutable, (const void **)((char *)&v33 - v14), (const void **)((char *)&v33 - v14));
  v38 = Mutable;
  v42 = CFSetCreateMutable(v41, 0, MEMORY[0x24BDBD6B8]);
  v46 = v42;
  if (Count >= 1)
  {
    while (1)
    {
      v18 = *v17;
      Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), *v17);
      v20 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), Value);
      v21 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), Value);
      if (!Value)
        break;
      v22 = v21;
      if (!CFSetContainsValue(v42, Value))
      {
        CFSetSetValue(v42, Value);
        ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(v41, Value, CFSTR(":"));
        v24 = ArrayBySeparatingStrings;
        v45 = ArrayBySeparatingStrings;
        if (ArrayBySeparatingStrings)
        {
          if (CFArrayGetCount(ArrayBySeparatingStrings) == 4)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v24, 0);
            v40 = CFArrayGetValueAtIndex(v24, 1);
            v39 = CFArrayGetValueAtIndex(v24, 2);
            v26 = (const __CFString *)CFArrayGetValueAtIndex(v24, 3);
            v27 = CFStringCreateArrayBySeparatingStrings(v41, v26, CFSTR("-"));
            v44 = v27;
            if (CFArrayGetCount(v27) == 2)
            {
              v26 = (const __CFString *)CFArrayGetValueAtIndex(v27, 0);
              v36 = CFArrayGetValueAtIndex(v27, 1);
              v35 = 5;
            }
            else
            {
              v35 = 0;
              v36 = 0;
            }
            v28 = ValueAtIndex;
            v29 = CFStringCreateWithFormat(v41, 0, CFSTR("TOKEN:%@"), ValueAtIndex);
            v43 = v29;
            v30 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), v29);
            if (v22 && v20 && v28 && v40 && v39 && v26)
            {
              LOWORD(v32) = v35;
              (*(void (**)(uint64_t, const void *, const void *, const void *, const void *, const void *, const void *, const __CFString *, const void *, int))(v34 + 16))(v34, v22, v30, v20, v28, v40, v39, v26, v36, v32);
            }
            if (v29)
              CFRelease(v29);
            if (v27)
              CFRelease(v27);
          }
          CFRelease(v24);
        }
      }
      ++v17;
      if (!--Count)
        goto LABEL_47;
    }
    if (grammarLogger(void)::token != -1)
      dispatch_once(&grammarLogger(void)::token, &__block_literal_global_369);
    v31 = grammarLogger(void)::log;
    if (os_log_type_enabled((os_log_t)grammarLogger(void)::log, OS_LOG_TYPE_FAULT))
      QP::ParserGrammar::tokenCompletions((uint64_t)v18, v31);
  }
LABEL_47:
  CFRelease(v38);
  if (v42)
    CFRelease(v42);
  if ((char)v49 < 0)
    operator delete(v47);
  if (MutableCopy)
    CFRelease(MutableCopy);
}

void sub_218E35054(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void searchCompletions(__CFDictionary *a1, uint64_t a2)
{
  const __CFAllocator *v4;
  const UInt8 *Completion;
  unsigned int Length;
  CFStringRef v7;
  CFNumberRef v8;
  int valuePtr;

  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Completion = (const UInt8 *)nlp::TrieCompletionGetCompletion(a2);
  Length = nlp::TrieCompletionGetLength(a2);
  v7 = CFStringCreateWithBytes(v4, Completion, Length, 0x8000100u, 0);
  valuePtr = nlp::TrieCompletionGetPayload(a2);
  v8 = CFNumberCreate(v4, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(a1, v7, v8);
  CFRelease(v7);
  CFRelease(v8);
}

void QP::ParserGrammar::fallbackDateCompletions(uint64_t *a1, CFStringRef theString, uint64_t a3)
{
  const __CFString *BundleWithIdentifier;
  uint64_t v7;
  _QWORD v8[7];

  if (theString && CFStringGetLength(theString))
  {
    BundleWithIdentifier = *(const __CFString **)(a1[5] + 192);
    if (BundleWithIdentifier)
      BundleWithIdentifier = (const __CFString *)CFBundleGetBundleWithIdentifier(BundleWithIdentifier);
    v7 = *a1;
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 0x40000000;
    v8[2] = ___ZNK2QP13ParserGrammar23fallbackDateCompletionsEPK10__CFStringU13block_pointerFvS3_S3_S3_S3_S3_S3_S3_S3_PK14__CFDictionary12QPSymbolFlagE_block_invoke;
    v8[3] = &unk_24DA25020;
    v8[5] = a1;
    v8[6] = BundleWithIdentifier;
    v8[4] = a3;
    QPDataDetectorsEnumerateDatesInString((uint64_t)theString, v7, v8);
  }
}

void ___ZNK2QP13ParserGrammar23fallbackDateCompletionsEPK10__CFStringU13block_pointerFvS3_S3_S3_S3_S3_S3_S3_S3_PK14__CFDictionary12QPSymbolFlagE_block_invoke(_QWORD *a1, CFDictionaryRef theDict)
{
  uint64_t v4;
  const void *Value;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  const __CFString *v12;

  v4 = a1[5];
  Value = CFDictionaryGetValue(theDict, CFSTR("kQPDateDisplay"));
  v6 = CFDictionaryGetValue(theDict, CFSTR("kQPDateComponents"));
  v7 = *(_QWORD *)(v4 + 40);
  v8 = *(_QWORD *)(v7 + 8);
  v9 = CFSTR("Search");
  if (v8 != 8)
    v9 = 0;
  if (v8 == 2)
    v10 = CFSTR("Mail");
  else
    v10 = v9;
  v11 = copyLocalizedStringForDomain(a1[6], v10, CFSTR("Tokens"), CFSTR("TOKEN:kQPTokenDate"), *(const __CFString **)(v7 + 136));
  v12 = v11;
  if (Value && v6)
  {
    if (!v11)
      return;
    (*(void (**)(_QWORD, const void *, const __CFString *, const void *))(a1[4] + 16))(a1[4], Value, v11, Value);
  }
  else if (!v11)
  {
    return;
  }
  CFRelease(v12);
}

void sub_218E353B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void QP::ParserGrammar::completions(uint64_t a1, CFStringRef theString, uint64_t a3)
{
  CFIndex Length;
  CFIndex v7;
  const __CFAllocator *v8;
  const __CFDictionary *Mutable;
  CFMutableStringRef MutableCopy;
  nlp *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  CFIndex Count;
  unint64_t v17;
  const void **v18;
  size_t v19;
  const void *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned __int8 v24;
  CFMutableStringRef v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;
  CFRange v29;

  v28 = *MEMORY[0x24BDAC8D0];
  if (theString)
  {
    Length = CFStringGetLength(theString);
    if (Length)
    {
      if (*(_QWORD *)(a1 + 8))
      {
        v7 = Length;
        v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        MutableCopy = CFStringCreateMutableCopy(v8, 0, theString);
        v25 = MutableCopy;
        CFStringLowercase(MutableCopy, *(CFLocaleRef *)(*(_QWORD *)(a1 + 40) + 104));
        v29.location = 0;
        v29.length = v7;
        CFStringFindAndReplace(MutableCopy, CFSTR("’"), CFSTR("'"), v29, 0);
        QP::getUTF8StringFromCFString(MutableCopy, &v22);
        v11 = *(nlp **)(a1 + 8);
        if ((v24 & 0x80u) == 0)
          v12 = (unsigned __int8 *)&v22;
        else
          v12 = v22;
        v26[0] = &unk_24DA27718;
        v26[1] = searchCompletions;
        v27 = v26;
        if ((v24 & 0x80u) == 0)
          v13 = v24;
        else
          v13 = v23;
        nlp::BurstTrieSearch(v11, v12, v13, (uint64_t)Mutable, (uint64_t)v26, -1);
        v14 = v27;
        if (v27 == v26)
        {
          v15 = 4;
          v14 = v26;
        }
        else
        {
          if (!v27)
            goto LABEL_15;
          v15 = 5;
        }
        (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_15:
        Count = CFDictionaryGetCount(Mutable);
        MEMORY[0x24BDAC7A8](Count);
        v18 = (const void **)((char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
        if (v17 >= 0x200)
          v19 = 512;
        else
          v19 = v17;
        bzero((char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v19);
        CFDictionaryGetKeysAndValues(Mutable, v18, 0);
        if (Count >= 1)
        {
          do
          {
            v20 = *v18;
            if (CFStringGetLength((CFStringRef)*v18) > v7)
              (*(void (**)(uint64_t, const void *))(a3 + 16))(a3, v20);
            ++v18;
            --Count;
          }
          while (Count);
        }
        CFRelease(Mutable);
        if ((char)v24 < 0)
        {
          operator delete(v22);
          if (!MutableCopy)
            return;
        }
        else if (!MutableCopy)
        {
          return;
        }
        CFRelease(MutableCopy);
      }
    }
  }
}

void sub_218E35624(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void QP::ParserGrammar::fileExtensions(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  std::string __p;

  v3 = *(_QWORD *)(a1 + 264);
  if (v3)
  {
    v5 = a1 + 264;
    v6 = a1 + 264;
    v7 = *(_QWORD *)(a1 + 264);
    do
    {
      v8 = *(unsigned __int16 *)(v7 + 32);
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = (uint64_t *)v7;
      else
        v10 = (uint64_t *)(v7 + 8);
      if (v9)
        v6 = v7;
      v7 = *v10;
    }
    while (*v10);
    if (v6 != v5 && *(unsigned __int16 *)(v6 + 32) <= a2)
    {
      v11 = a1 + 264;
      do
      {
        v12 = *(unsigned __int16 *)(v3 + 32);
        v13 = v12 >= a2;
        if (v12 >= a2)
          v14 = (uint64_t *)v3;
        else
          v14 = (uint64_t *)(v3 + 8);
        if (v13)
          v11 = v3;
        v3 = *v14;
      }
      while (*v14);
      if (v11 == v5 || *(unsigned __int16 *)(v11 + 32) > a2)
        v11 = a1 + 264;
      v15 = *(_QWORD **)(v11 + 40);
      v16 = (_QWORD *)(v11 + 48);
      if (v15 != (_QWORD *)(v11 + 48))
      {
        do
        {
          if (*((char *)v15 + 55) < 0)
            std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v15[4], v15[5]);
          else
            __p = *(std::string *)(v15 + 4);
          (*(void (**)(uint64_t, std::string *))(a3 + 16))(a3, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v17 = (_QWORD *)v15[1];
          if (v17)
          {
            do
            {
              v18 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              v18 = (_QWORD *)v15[2];
              v19 = *v18 == (_QWORD)v15;
              v15 = v18;
            }
            while (!v19);
          }
          v15 = v18;
        }
        while (v18 != v16);
      }
    }
  }
}

void sub_218E357DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL QP::ParserGrammar::hasUTIs(QP::ParserGrammar *this, unsigned int a2)
{
  char *v2;
  char **v3;
  char *v4;
  char *v5;
  char **v6;
  unsigned int v7;
  BOOL v8;
  char **v9;
  char *v10;
  unsigned int v11;
  BOOL v12;
  char **v13;

  v4 = (char *)*((_QWORD *)this + 27);
  v2 = (char *)this + 216;
  v3 = (char **)v4;
  if (!v4)
    return 0;
  v5 = v2;
  v6 = v3;
  do
  {
    v7 = *((unsigned __int16 *)v6 + 16);
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = v6;
    else
      v9 = v6 + 1;
    if (v8)
      v5 = (char *)v6;
    v6 = (char **)*v9;
  }
  while (*v9);
  if (v5 == v2 || *((unsigned __int16 *)v5 + 16) > a2)
    return 0;
  v10 = v2;
  do
  {
    v11 = *((unsigned __int16 *)v3 + 16);
    v12 = v11 >= a2;
    if (v11 >= a2)
      v13 = v3;
    else
      v13 = v3 + 1;
    if (v12)
      v10 = (char *)v3;
    v3 = (char **)*v13;
  }
  while (*v13);
  if (v10 == v2 || *((unsigned __int16 *)v10 + 16) > a2)
    v10 = v2;
  return *((_QWORD *)v10 + 7) != 0;
}

void QP::ParserGrammar::UTIs(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  std::string __p;

  v5 = *(_QWORD *)(a1 + 216);
  v3 = a1 + 216;
  v4 = v5;
  if (v5)
  {
    v7 = v3;
    v8 = v4;
    do
    {
      v9 = *(unsigned __int16 *)(v8 + 32);
      v10 = v9 >= a2;
      if (v9 >= a2)
        v11 = (uint64_t *)v8;
      else
        v11 = (uint64_t *)(v8 + 8);
      if (v10)
        v7 = v8;
      v8 = *v11;
    }
    while (*v11);
    if (v7 != v3 && *(unsigned __int16 *)(v7 + 32) <= a2)
    {
      v12 = v3;
      do
      {
        v13 = *(unsigned __int16 *)(v4 + 32);
        v14 = v13 >= a2;
        if (v13 >= a2)
          v15 = (uint64_t *)v4;
        else
          v15 = (uint64_t *)(v4 + 8);
        if (v14)
          v12 = v4;
        v4 = *v15;
      }
      while (*v15);
      if (v12 == v3 || *(unsigned __int16 *)(v12 + 32) > a2)
        v12 = v3;
      v16 = *(_QWORD **)(v12 + 40);
      v17 = (_QWORD *)(v12 + 48);
      if (v16 != (_QWORD *)(v12 + 48))
      {
        do
        {
          if (*((char *)v16 + 55) < 0)
            std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v16[4], v16[5]);
          else
            __p = *(std::string *)(v16 + 4);
          (*(void (**)(uint64_t, std::string *))(a3 + 16))(a3, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v18 = (_QWORD *)v16[1];
          if (v18)
          {
            do
            {
              v19 = v18;
              v18 = (_QWORD *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              v19 = (_QWORD *)v16[2];
              v20 = *v19 == (_QWORD)v16;
              v16 = v19;
            }
            while (!v20);
          }
          v16 = v19;
        }
        while (v19 != v17);
      }
    }
  }
}

void sub_218E359C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL QP::ParserGrammar::hasTranslations(uint64_t a1, uint64_t a2)
{
  CFStringRef CFStringFromString;
  const __CFDictionary *v4;
  const __CFArray *Value;
  _BOOL8 v6;

  CFStringFromString = QP::createCFStringFromString(a2);
  v4 = *(const __CFDictionary **)(a1 + 64);
  if (v4 && CFDictionaryContainsKey(v4, CFStringFromString))
  {
    Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), CFStringFromString);
    v6 = CFArrayGetCount(Value) != 0;
    if (!CFStringFromString)
      return v6;
    goto LABEL_6;
  }
  v6 = 0;
  if (CFStringFromString)
LABEL_6:
    CFRelease(CFStringFromString);
  return v6;
}

void sub_218E35A5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void QP::ParserGrammar::translations(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFStringRef CFStringFromString;
  const __CFDictionary *v6;
  const __CFArray *Value;
  CFIndex Count;
  CFIndex v9;
  const void *ValueAtIndex;

  CFStringFromString = QP::createCFStringFromString(a2);
  v6 = *(const __CFDictionary **)(a1 + 64);
  if (v6)
  {
    if (CFDictionaryContainsKey(v6, CFStringFromString))
    {
      Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), CFStringFromString);
      Count = CFArrayGetCount(Value);
      if (Count >= 1)
      {
        v9 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(Value, v9);
          (*(void (**)(uint64_t, const void *))(a3 + 16))(a3, ValueAtIndex);
          ++v9;
        }
        while (Count != v9);
      }
    }
  }
  if (CFStringFromString)
    CFRelease(CFStringFromString);
}

void sub_218E35B2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t QP::ParserGrammar::symbolFlag(QP::ParserGrammar *this, unsigned int a2)
{
  uint64_t v2;
  unsigned __int16 *v3;
  unsigned int v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned int v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned __int16 *v18;
  unsigned int v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned __int16 *v23;
  unsigned int v24;
  BOOL v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int16 *v28;
  unsigned int v29;
  BOOL v30;
  uint64_t *v31;
  char **v32;
  char **v33;
  char **v34;
  unsigned int v35;
  BOOL v36;
  char **v37;

  v2 = *((_QWORD *)this + 66);
  if (v2)
  {
    v3 = (unsigned __int16 *)((char *)this + 528);
    do
    {
      v4 = *(unsigned __int16 *)(v2 + 26);
      v5 = v4 >= a2;
      if (v4 >= a2)
        v6 = (uint64_t *)v2;
      else
        v6 = (uint64_t *)(v2 + 8);
      if (v5)
        v3 = (unsigned __int16 *)v2;
      v2 = *v6;
    }
    while (*v6);
    if (v3 != (unsigned __int16 *)((char *)this + 528) && v3[13] <= a2)
      return 1;
  }
  v7 = *((_QWORD *)this + 69);
  if (v7)
  {
    v8 = (unsigned __int16 *)((char *)this + 552);
    do
    {
      v9 = *(unsigned __int16 *)(v7 + 26);
      v10 = v9 >= a2;
      if (v9 >= a2)
        v11 = (uint64_t *)v7;
      else
        v11 = (uint64_t *)(v7 + 8);
      if (v10)
        v8 = (unsigned __int16 *)v7;
      v7 = *v11;
    }
    while (*v11);
    if (v8 != (unsigned __int16 *)((char *)this + 552) && v8[13] <= a2)
      return 2;
  }
  v12 = *((_QWORD *)this + 72);
  if (v12)
  {
    v13 = (unsigned __int16 *)((char *)this + 576);
    do
    {
      v14 = *(unsigned __int16 *)(v12 + 26);
      v15 = v14 >= a2;
      if (v14 >= a2)
        v16 = (uint64_t *)v12;
      else
        v16 = (uint64_t *)(v12 + 8);
      if (v15)
        v13 = (unsigned __int16 *)v12;
      v12 = *v16;
    }
    while (*v16);
    if (v13 != (unsigned __int16 *)((char *)this + 576) && v13[13] <= a2)
      return 3;
  }
  v17 = *((_QWORD *)this + 81);
  if (v17)
  {
    v18 = (unsigned __int16 *)((char *)this + 648);
    do
    {
      v19 = *(unsigned __int16 *)(v17 + 26);
      v20 = v19 >= a2;
      if (v19 >= a2)
        v21 = (uint64_t *)v17;
      else
        v21 = (uint64_t *)(v17 + 8);
      if (v20)
        v18 = (unsigned __int16 *)v17;
      v17 = *v21;
    }
    while (*v21);
    if (v18 != (unsigned __int16 *)((char *)this + 648) && v18[13] <= a2)
      return 10;
  }
  v22 = *((_QWORD *)this + 87);
  if (v22)
  {
    v23 = (unsigned __int16 *)((char *)this + 696);
    do
    {
      v24 = *(unsigned __int16 *)(v22 + 26);
      v25 = v24 >= a2;
      if (v24 >= a2)
        v26 = (uint64_t *)v22;
      else
        v26 = (uint64_t *)(v22 + 8);
      if (v25)
        v23 = (unsigned __int16 *)v22;
      v22 = *v26;
    }
    while (*v26);
    if (v23 != (unsigned __int16 *)((char *)this + 696) && v23[13] <= a2)
      return 11;
  }
  v27 = *((_QWORD *)this + 84);
  if (v27)
  {
    v28 = (unsigned __int16 *)((char *)this + 672);
    do
    {
      v29 = *(unsigned __int16 *)(v27 + 26);
      v30 = v29 >= a2;
      if (v29 >= a2)
        v31 = (uint64_t *)v27;
      else
        v31 = (uint64_t *)(v27 + 8);
      if (v30)
        v28 = (unsigned __int16 *)v27;
      v27 = *v31;
    }
    while (*v31);
    if (v28 != (unsigned __int16 *)((char *)this + 672) && v28[13] <= a2)
      return 15;
  }
  v32 = (char **)((char *)this + 792);
  v33 = (char **)*((_QWORD *)this + 99);
  if (!v33)
    goto LABEL_78;
  v34 = (char **)((char *)this + 792);
  do
  {
    v35 = *((unsigned __int16 *)v33 + 13);
    v36 = v35 >= a2;
    if (v35 >= a2)
      v37 = v33;
    else
      v37 = v33 + 1;
    if (v36)
      v34 = v33;
    v33 = (char **)*v37;
  }
  while (*v37);
  if (v34 == v32 || *((unsigned __int16 *)v34 + 13) > a2)
LABEL_78:
    v34 = (char **)((char *)this + 792);
  if (v34 == v32)
    return 0;
  else
    return 11;
}

BOOL QP::ParserGrammar::isInferred(QP::ParserGrammar *this, unsigned int a2)
{
  char **v2;
  char **v3;
  char **v4;
  unsigned int v5;
  BOOL v6;
  char **v7;

  v2 = (char **)((char *)this + 672);
  v3 = (char **)*((_QWORD *)this + 84);
  if (!v3)
    goto LABEL_12;
  v4 = (char **)((char *)this + 672);
  do
  {
    v5 = *((unsigned __int16 *)v3 + 13);
    v6 = v5 >= a2;
    if (v5 >= a2)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6)
      v4 = v3;
    v3 = (char **)*v7;
  }
  while (*v7);
  if (v4 == v2 || *((unsigned __int16 *)v4 + 13) > a2)
LABEL_12:
    v4 = (char **)((char *)this + 672);
  return v4 != v2;
}

BOOL QP::ParserGrammar::isExtension(QP::ParserGrammar *this, unsigned int a2)
{
  char **v2;
  char **v3;
  char **v4;
  unsigned int v5;
  BOOL v6;
  char **v7;

  v2 = (char **)((char *)this + 792);
  v3 = (char **)*((_QWORD *)this + 99);
  if (!v3)
    goto LABEL_12;
  v4 = (char **)((char *)this + 792);
  do
  {
    v5 = *((unsigned __int16 *)v3 + 13);
    v6 = v5 >= a2;
    if (v5 >= a2)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6)
      v4 = v3;
    v3 = (char **)*v7;
  }
  while (*v7);
  if (v4 == v2 || *((unsigned __int16 *)v4 + 13) > a2)
LABEL_12:
    v4 = (char **)((char *)this + 792);
  return v4 != v2;
}

BOOL QP::ParserGrammar::isCombinable(QP::ParserGrammar *this, unsigned int a2)
{
  char **v2;
  char **v3;
  char **v4;
  unsigned int v5;
  BOOL v6;
  char **v7;

  v2 = (char **)((char *)this + 744);
  v3 = (char **)*((_QWORD *)this + 93);
  if (!v3)
    goto LABEL_12;
  v4 = (char **)((char *)this + 744);
  do
  {
    v5 = *((unsigned __int16 *)v3 + 13);
    v6 = v5 >= a2;
    if (v5 >= a2)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6)
      v4 = v3;
    v3 = (char **)*v7;
  }
  while (*v7);
  if (v4 == v2 || *((unsigned __int16 *)v4 + 13) > a2)
LABEL_12:
    v4 = (char **)((char *)this + 744);
  return v4 != v2;
}

BOOL QP::ParserGrammar::isParent(QP::ParserGrammar *this, unsigned int a2)
{
  char **v2;
  char **v3;
  char **v4;
  unsigned int v5;
  BOOL v6;
  char **v7;

  v2 = (char **)((char *)this + 840);
  v3 = (char **)*((_QWORD *)this + 105);
  if (!v3)
    goto LABEL_12;
  v4 = (char **)((char *)this + 840);
  do
  {
    v5 = *((unsigned __int16 *)v3 + 13);
    v6 = v5 >= a2;
    if (v5 >= a2)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6)
      v4 = v3;
    v3 = (char **)*v7;
  }
  while (*v7);
  if (v4 == v2 || *((unsigned __int16 *)v4 + 13) > a2)
LABEL_12:
    v4 = (char **)((char *)this + 840);
  return v4 != v2;
}

BOOL QP::ParserGrammar::requiresComplement(QP::ParserGrammar *this, unsigned int a2)
{
  char **v2;
  char **v3;
  char **v4;
  unsigned int v5;
  BOOL v6;
  char **v7;

  v2 = (char **)((char *)this + 768);
  v3 = (char **)*((_QWORD *)this + 96);
  if (!v3)
    goto LABEL_12;
  v4 = (char **)((char *)this + 768);
  do
  {
    v5 = *((unsigned __int16 *)v3 + 13);
    v6 = v5 >= a2;
    if (v5 >= a2)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6)
      v4 = v3;
    v3 = (char **)*v7;
  }
  while (*v7);
  if (v4 == v2 || *((unsigned __int16 *)v4 + 13) > a2)
LABEL_12:
    v4 = (char **)((char *)this + 768);
  return v4 != v2;
}

BOOL QP::ParserGrammar::isExtended(QP::ParserGrammar *this, unsigned int a2)
{
  char **v2;
  char **v3;
  char **v4;
  unsigned int v5;
  BOOL v6;
  char **v7;

  v2 = (char **)((char *)this + 816);
  v3 = (char **)*((_QWORD *)this + 102);
  if (!v3)
    goto LABEL_12;
  v4 = (char **)((char *)this + 816);
  do
  {
    v5 = *((unsigned __int16 *)v3 + 13);
    v6 = v5 >= a2;
    if (v5 >= a2)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6)
      v4 = v3;
    v3 = (char **)*v7;
  }
  while (*v7);
  if (v4 == v2 || *((unsigned __int16 *)v4 + 13) > a2)
LABEL_12:
    v4 = (char **)((char *)this + 816);
  return v4 != v2;
}

uint64_t QP::ParserGrammar::getSymbolID(uint64_t a1, uint64_t a2)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  QP::ParserGrammar::addSymbol(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 168) == std::__tree<std::string>::find<std::string>(a1 + 160, (void **)a2))
    return (unsigned __int16)kQPSymbolIdNone;
  else
    return *((unsigned __int16 *)std::__tree<std::string>::find<std::string>(a1 + 160, (void **)a2) + 28);
}

void sub_218E35FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void QP::ParserGrammar::setModifier(uint64_t a1, unsigned __int8 *a2)
{
  _BOOL4 v4;
  _BOOL4 v5;
  _BOOL4 v6;
  _BOOL4 v7;
  int v8;
  _BOOL4 v9;
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  _BOOL4 v17;
  int v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;
  void *v23[2];
  char v24;
  void *v25[2];
  char v26;
  unsigned __int16 *v27[2];
  char v28;
  unsigned __int16 v29;

  v29 = QP::ParserGrammar::symbolID(a1, (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(v27, "DATE");
  if (QP::endswith((uint64_t *)a2, (uint64_t *)v27))
  {
    v4 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "PERIOD");
    if (QP::endswith((uint64_t *)a2, (uint64_t *)v25))
    {
      v4 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v23, "TIME");
      if (QP::endswith((uint64_t *)a2, (uint64_t *)v23))
      {
        std::string::basic_string[abi:ne180100]<0>(v21, "MIN");
        if (QP::startswith(a2, (unsigned __int8 *)v21))
        {
          v4 = 0;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "MAX");
          v4 = !QP::startswith(a2, (unsigned __int8 *)__p);
          if (v20 < 0)
            operator delete(__p[0]);
        }
        if (v22 < 0)
          operator delete(v21[0]);
      }
      else
      {
        v4 = 0;
      }
      if (v24 < 0)
        operator delete(v23[0]);
    }
    if (v26 < 0)
      operator delete(v25[0]);
  }
  if (v28 < 0)
  {
    operator delete(v27[0]);
    if (!v4)
      return;
  }
  else if (!v4)
  {
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "ANY");
  v5 = QP::startswith(a2, (unsigned __int8 *)v27);
  if (v28 < 0)
    operator delete(v27[0]);
  std::string::basic_string[abi:ne180100]<0>(v27, "ON");
  v6 = QP::startswith(a2, (unsigned __int8 *)v27);
  if (v28 < 0)
    operator delete(v27[0]);
  std::string::basic_string[abi:ne180100]<0>(v27, "IN");
  v7 = QP::startswith(a2, (unsigned __int8 *)v27);
  if (v28 < 0)
    operator delete(v27[0]);
  if (v7 || v6)
    v8 = 2;
  else
    v8 = v5;
  std::string::basic_string[abi:ne180100]<0>(v27, "FROM");
  v9 = QP::startswith(a2, (unsigned __int8 *)v27);
  if (v28 < 0)
    operator delete(v27[0]);
  if (v9)
    v8 = 3;
  std::string::basic_string[abi:ne180100]<0>(v27, "START");
  if (QP::startswith(a2, (unsigned __int8 *)v27))
  {
    v10 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "SINCE");
    v10 = QP::startswith(a2, (unsigned __int8 *)v25);
    if (v26 < 0)
      operator delete(v25[0]);
  }
  if (v28 < 0)
    operator delete(v27[0]);
  if (v10)
    v8 = 7;
  std::string::basic_string[abi:ne180100]<0>(v27, "END");
  if (QP::startswith(a2, (unsigned __int8 *)v27))
  {
    v11 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "TO");
    v11 = QP::startswith(a2, (unsigned __int8 *)v25);
    if (v26 < 0)
      operator delete(v25[0]);
  }
  if (v28 < 0)
    operator delete(v27[0]);
  if (v11)
    v8 = 8;
  std::string::basic_string[abi:ne180100]<0>(v27, "BEFORE");
  v12 = QP::startswith(a2, (unsigned __int8 *)v27);
  if (v28 < 0)
    operator delete(v27[0]);
  if (v12)
    v8 = 5;
  std::string::basic_string[abi:ne180100]<0>(v27, "AFTER");
  v13 = QP::startswith(a2, (unsigned __int8 *)v27);
  if (v28 < 0)
    operator delete(v27[0]);
  if (v13)
    v8 = 6;
  std::string::basic_string[abi:ne180100]<0>(v27, "BY");
  v14 = QP::startswith(a2, (unsigned __int8 *)v27);
  if (v28 < 0)
    operator delete(v27[0]);
  if (v14)
    v8 = 9;
  std::string::basic_string[abi:ne180100]<0>(v27, "AT");
  v15 = QP::startswith(a2, (unsigned __int8 *)v27);
  if (v28 < 0)
    operator delete(v27[0]);
  if (v15)
    v16 = 10;
  else
    v16 = v8;
  std::string::basic_string[abi:ne180100]<0>(v27, "AROUND");
  v17 = QP::startswith(a2, (unsigned __int8 *)v27);
  if (v28 < 0)
    operator delete(v27[0]);
  if (v17)
    v18 = 11;
  else
    v18 = v16;
  if (v18)
  {
    v27[0] = &v29;
    *((_WORD *)std::__tree<std::__value_type<unsigned short,QPModifier>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QPModifier>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QPModifier>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)(a1 + 184), &v29, (uint64_t)&std::piecewise_construct, v27)+ 14) = v18;
  }
}

void sub_218E3647C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  if (*(char *)(v32 - 57) < 0)
    operator delete(*(void **)(v32 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,std::map<std::string,std::set<std::string>>>::~pair(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::pair<std::string,std::set<std::string>>::~pair(uint64_t a1)
{
  std::__tree<std::string>::destroy(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::pair<std::string,std::map<unsigned short,std::set<unsigned short>>>::~pair(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::pair<std::string,std::set<unsigned short>>::~pair(uint64_t a1)
{
  std::__tree<unsigned short>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::pair<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>::~pair(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void QP::ParserGrammar::actions(uint64_t a1, void **a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  unsigned int v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  unsigned int v31;
  uint64_t *v32;
  char **v33;
  char *v34;
  char **v35;
  BOOL v36;
  std::string __p;
  char **v38;
  char *v39[2];
  uint64_t v40;
  _QWORD v41[2];
  uint64_t v42;
  _QWORD v43[2];

  v9 = a1 + 352;
  if ((void **)(a1 + 360) != std::__tree<std::string>::find<std::string>(a1 + 352, a2))
  {
    v10 = std::__tree<std::string>::find<std::string>(v9, a2);
    std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>::map[abi:ne180100](&v42, (uint64_t)(v10 + 7));
    v11 = v43[0];
    if (v43[0])
    {
      v12 = v43;
      v13 = (uint64_t *)v43[0];
      do
      {
        v14 = v13;
        v15 = v12;
        v16 = *((unsigned __int16 *)v13 + 16);
        if (v16 >= a3)
          v12 = v13;
        else
          ++v13;
        v13 = (uint64_t *)*v13;
      }
      while (v13);
      if (v12 != v43)
      {
        if (v16 < a3)
          v14 = v15;
        if (*((unsigned __int16 *)v14 + 16) <= a3)
        {
          v17 = v43;
          do
          {
            v18 = (_QWORD *)v11;
            v19 = v17;
            v20 = *(unsigned __int16 *)(v11 + 32);
            if (v20 >= a3)
              v21 = (uint64_t *)v11;
            else
              v21 = (uint64_t *)(v11 + 8);
            if (v20 >= a3)
              v17 = (_QWORD *)v11;
            v11 = *v21;
          }
          while (*v21);
          if (v17 == v43)
            goto LABEL_23;
          if (v20 < a3)
            v18 = v19;
          if (*((unsigned __int16 *)v18 + 16) > a3)
LABEL_23:
            v17 = v43;
          std::map<unsigned short,std::set<std::string>>::map[abi:ne180100](&v40, (uint64_t)(v17 + 5));
          v22 = v41[0];
          if (v41[0])
          {
            v23 = v41;
            v24 = (uint64_t *)v41[0];
            do
            {
              v25 = v24;
              v26 = v23;
              v27 = *((unsigned __int16 *)v24 + 16);
              if (v27 >= a4)
                v23 = v24;
              else
                ++v24;
              v24 = (uint64_t *)*v24;
            }
            while (v24);
            if (v23 != v41)
            {
              if (v27 < a4)
                v25 = v26;
              if (*((unsigned __int16 *)v25 + 16) <= a4)
              {
                v28 = v41;
                do
                {
                  v29 = (_QWORD *)v22;
                  v30 = v28;
                  v31 = *(unsigned __int16 *)(v22 + 32);
                  if (v31 >= a4)
                    v32 = (uint64_t *)v22;
                  else
                    v32 = (uint64_t *)(v22 + 8);
                  if (v31 >= a4)
                    v28 = (_QWORD *)v22;
                  v22 = *v32;
                }
                while (*v32);
                if (v28 == v41)
                  goto LABEL_45;
                if (v31 < a4)
                  v29 = v30;
                if (*((unsigned __int16 *)v29 + 16) > a4)
LABEL_45:
                  v28 = v41;
                std::set<std::string>::set[abi:ne180100]((uint64_t *)&v38, (uint64_t)(v28 + 5));
                v33 = v38;
                if (v38 != v39)
                {
                  do
                  {
                    if (*((char *)v33 + 55) < 0)
                      std::string::__init_copy_ctor_external(&__p, v33[4], (std::string::size_type)v33[5]);
                    else
                      __p = *(std::string *)(v33 + 4);
                    (*(void (**)(uint64_t, std::string *))(a5 + 16))(a5, &__p);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p.__r_.__value_.__l.__data_);
                    v34 = v33[1];
                    if (v34)
                    {
                      do
                      {
                        v35 = (char **)v34;
                        v34 = *(char **)v34;
                      }
                      while (v34);
                    }
                    else
                    {
                      do
                      {
                        v35 = (char **)v33[2];
                        v36 = *v35 == (char *)v33;
                        v33 = v35;
                      }
                      while (!v36);
                    }
                    v33 = v35;
                  }
                  while (v35 != v39);
                }
                std::__tree<std::string>::destroy((uint64_t)&v38, v39[0]);
                v22 = v41[0];
              }
            }
          }
          std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy((uint64_t)&v40, (_QWORD *)v22);
          v11 = v43[0];
        }
      }
    }
    std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>>>::destroy((uint64_t)&v42, (_QWORD *)v11);
  }
}

void sub_218E368F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19, uint64_t a20,char a21,_QWORD *a22)
{
  std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy((uint64_t)&a18, a19);
  std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>>>::destroy((uint64_t)&a21, a22);
  _Unwind_Resume(a1);
}

uint64_t QP::ParserGrammar::hasAttribute(QP::ParserGrammar *this, unsigned int a2, unsigned int a3)
{
  char **v3;
  char **v5;
  char **v6;
  char **v7;
  unsigned int v8;
  BOOL v9;
  char **v10;
  char **v11;
  unsigned int v12;
  BOOL v13;
  char **v14;
  char **v15;
  char *v16;
  char *v17;
  char **v18;
  unsigned int v19;
  char *v20;
  uint64_t v22;
  char *v23[2];

  v3 = (char **)*((_QWORD *)this + 42);
  if (v3)
  {
    v5 = (char **)((char *)this + 336);
    v6 = (char **)((char *)this + 336);
    v7 = (char **)*((_QWORD *)this + 42);
    do
    {
      v8 = *((unsigned __int16 *)v7 + 16);
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = v7;
      else
        v10 = v7 + 1;
      if (v9)
        v6 = v7;
      v7 = (char **)*v10;
    }
    while (*v10);
    if (v6 != v5 && *((unsigned __int16 *)v6 + 16) <= a2)
    {
      v11 = (char **)((char *)this + 336);
      do
      {
        v12 = *((unsigned __int16 *)v3 + 16);
        v13 = v12 >= a2;
        if (v12 >= a2)
          v14 = v3;
        else
          v14 = v3 + 1;
        if (v13)
          v11 = v3;
        v3 = (char **)*v14;
      }
      while (*v14);
      if (v11 == v5 || *((unsigned __int16 *)v11 + 16) > a2)
        v11 = (char **)((char *)this + 336);
      std::map<unsigned short,std::string>::map[abi:ne180100](&v22, (uint64_t)(v11 + 5));
      if (v23[0])
      {
        v15 = v23;
        v16 = v23[0];
        do
        {
          v17 = v16;
          v18 = v15;
          v19 = *((unsigned __int16 *)v16 + 16);
          if (v19 >= a3)
            v15 = (char **)v16;
          else
            v16 += 8;
          v16 = *(char **)v16;
        }
        while (v16);
        if (v15 != v23)
        {
          v20 = v19 >= a3 ? v17 : (char *)v18;
          if (*((unsigned __int16 *)v20 + 16) <= a3)
          {
            std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&v22, v23[0]);
            return 1;
          }
        }
      }
      std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&v22, v23[0]);
    }
  }
  return 0;
}

void QP::ParserGrammar::attribute(QP::ParserGrammar *this@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, std::string *a4@<X8>)
{
  char **v6;
  char **v8;
  char **v9;
  char **v10;
  unsigned int v11;
  BOOL v12;
  char **v13;
  char **v14;
  unsigned int v15;
  BOOL v16;
  char **v17;
  char *v18;
  char **v19;
  char *v20;
  char *v21;
  char **v22;
  unsigned int v23;
  char **v24;
  char *v25;
  char *v26;
  char **v27;
  unsigned int v28;
  __int128 v29;
  uint64_t v30;
  char *v31[2];

  v6 = (char **)*((_QWORD *)this + 42);
  if (!v6)
    goto LABEL_34;
  v8 = (char **)((char *)this + 336);
  v9 = (char **)((char *)this + 336);
  v10 = (char **)*((_QWORD *)this + 42);
  do
  {
    v11 = *((unsigned __int16 *)v10 + 16);
    v12 = v11 >= a2;
    if (v11 >= a2)
      v13 = v10;
    else
      v13 = v10 + 1;
    if (v12)
      v9 = v10;
    v10 = (char **)*v13;
  }
  while (*v13);
  if (v9 == v8 || *((unsigned __int16 *)v9 + 16) > a2)
    goto LABEL_34;
  v14 = (char **)((char *)this + 336);
  do
  {
    v15 = *((unsigned __int16 *)v6 + 16);
    v16 = v15 >= a2;
    if (v15 >= a2)
      v17 = v6;
    else
      v17 = v6 + 1;
    if (v16)
      v14 = v6;
    v6 = (char **)*v17;
  }
  while (*v17);
  if (v14 == v8 || *((unsigned __int16 *)v14 + 16) > a2)
    v14 = (char **)((char *)this + 336);
  std::map<unsigned short,std::string>::map[abi:ne180100](&v30, (uint64_t)(v14 + 5));
  v18 = v31[0];
  if (!v31[0])
    goto LABEL_33;
  v19 = v31;
  v20 = v31[0];
  do
  {
    v21 = v20;
    v22 = v19;
    v23 = *((unsigned __int16 *)v20 + 16);
    if (v23 >= a3)
      v19 = (char **)v20;
    else
      v20 += 8;
    v20 = *(char **)v20;
  }
  while (v20);
  if (v19 == v31)
    goto LABEL_33;
  if (v23 < a3)
    v21 = (char *)v22;
  if (*((unsigned __int16 *)v21 + 16) > a3)
  {
LABEL_33:
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&v30, v31[0]);
LABEL_34:
    if (*((char *)this + 111) < 0)
    {
      std::string::__init_copy_ctor_external(a4, *((const std::string::value_type **)this + 11), *((_QWORD *)this + 12));
    }
    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 88);
      a4->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 13);
    }
    return;
  }
  v24 = v31;
  v25 = v31[0];
  do
  {
    v26 = v25;
    v27 = v24;
    v28 = *((unsigned __int16 *)v25 + 16);
    if (v28 >= a3)
      v24 = (char **)v25;
    else
      v25 += 8;
    v25 = *(char **)v25;
  }
  while (v25);
  if (v24 == v31)
    goto LABEL_47;
  if (v28 < a3)
    v26 = (char *)v27;
  if (*((unsigned __int16 *)v26 + 16) > a3)
LABEL_47:
    v24 = v31;
  if (*((char *)v24 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(a4, v24[5], (std::string::size_type)v24[6]);
    v18 = v31[0];
  }
  else
  {
    v29 = *(_OWORD *)(v24 + 5);
    a4->__r_.__value_.__r.__words[2] = (std::string::size_type)v24[7];
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v29;
  }
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&v30, v18);
}

void sub_218E36C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>::~pair(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t QP::ParserGrammar::isValidSuggestionKey(QP::ParserGrammar *this, CFStringRef theString, unsigned int a3, unsigned int a4)
{
  if (!theString || CFStringHasPrefix(theString, CFSTR("kQPLocation")))
    return 0;
  if (CFStringHasSuffix(theString, CFSTR("SearchAction"))
    || CFStringHasSuffix(theString, CFSTR("Owner"))
    || CFStringHasSuffix(theString, CFSTR("DatedAction"))
    || CFStringHasSuffix(theString, CFSTR("CreatedAction"))
    || CFStringHasSuffix(theString, CFSTR("ModifiedAction"))
    || CFStringHasSuffix(theString, CFSTR("ViewedAction"))
    || CFStringHasSuffix(theString, CFSTR("DownloadedAction"))
    || CFStringHasSuffix(theString, CFSTR("PrintedAction"))
    || CFStringHasSuffix(theString, CFSTR("SentAction"))
    || CFStringHasSuffix(theString, CFSTR("ReceivedAction"))
    || CFStringHasSuffix(theString, CFSTR("FavoritedAction"))
    || CFStringHasSuffix(theString, CFSTR("ReadAction"))
    || CFStringHasSuffix(theString, CFSTR("RepliedAction"))
    || CFStringHasSuffix(theString, CFSTR("IgnoredAction"))
    || CFStringHasSuffix(theString, CFSTR("FlaggedAction"))
    || CFStringHasSuffix(theString, CFSTR("FlagColorAction")))
  {
    return 1;
  }
  if (CFStringHasSuffix(theString, CFSTR("FacebookAction")) || CFStringHasSuffix(theString, CFSTR("TwitterAction")))
    return 0;
  if (CFStringHasSuffix(theString, CFSTR("Subject")))
    return 1;
  if (CFStringHasSuffix(theString, CFSTR("Topic")))
    return 0;
  return QP::ParserGrammar::hasSuggestion(this, theString, a3, a4);
}

uint64_t QP::ParserGrammar::hasSuggestion(QP::ParserGrammar *this, const __CFString *a2, unsigned int a3, unsigned int a4)
{
  void **v7;
  _QWORD *v8;
  _QWORD **v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD **v12;
  unsigned int v13;
  _QWORD **v14;
  _QWORD *v15;
  _QWORD **v16;
  unsigned int v17;
  _QWORD *v18;
  _QWORD *v19;
  char **v20;
  char *v21;
  char *v22;
  char **v23;
  unsigned int v24;
  unsigned __int16 *v25;
  uint64_t v26;
  uint64_t v28;
  char *v29[2];
  uint64_t v30;
  _QWORD *v31[2];
  void *__p[2];
  char v33;

  if (!a2)
    return 0;
  QP::getUTF8StringFromCFString(a2, __p);
  if ((void **)((char *)this + 456) == std::__tree<std::string>::find<std::string>((uint64_t)this + 448, __p))
    goto LABEL_36;
  v7 = std::__tree<std::string>::find<std::string>((uint64_t)this + 448, __p);
  std::map<unsigned short,std::map<unsigned short,std::string>>::map[abi:ne180100](&v30, (uint64_t)(v7 + 7));
  v8 = v31[0];
  if (!v31[0])
    goto LABEL_35;
  v9 = v31;
  v10 = v31[0];
  do
  {
    v11 = v10;
    v12 = v9;
    v13 = *((unsigned __int16 *)v10 + 16);
    if (v13 >= a3)
      v9 = (_QWORD **)v10;
    else
      ++v10;
    v10 = (_QWORD *)*v10;
  }
  while (v10);
  if (v9 == v31)
    goto LABEL_35;
  if (v13 < a3)
    v11 = v12;
  if (*((unsigned __int16 *)v11 + 16) > a3)
  {
LABEL_35:
    std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy((uint64_t)&v30, v31[0]);
LABEL_36:
    v26 = 0;
    goto LABEL_37;
  }
  v14 = v31;
  do
  {
    v15 = v8;
    v16 = v14;
    v17 = *((unsigned __int16 *)v8 + 16);
    v18 = v8 + 1;
    if (v17 >= a3)
    {
      v18 = v15;
      v14 = (_QWORD **)v15;
    }
    v8 = (_QWORD *)*v18;
  }
  while (v8);
  if (v14 == v31 || (v17 >= a3 ? (v19 = v15) : (v19 = v16), *((unsigned __int16 *)v19 + 16) > a3))
    v14 = v31;
  std::map<unsigned short,std::string>::map[abi:ne180100](&v28, (uint64_t)(v14 + 5));
  if (!v29[0])
    goto LABEL_34;
  v20 = v29;
  v21 = v29[0];
  do
  {
    v22 = v21;
    v23 = v20;
    v24 = *((unsigned __int16 *)v21 + 16);
    if (v24 >= a4)
      v20 = (char **)v21;
    else
      v21 += 8;
    v21 = *(char **)v21;
  }
  while (v21);
  if (v20 == v29 || (v24 >= a4 ? (v25 = (unsigned __int16 *)v22) : (v25 = (unsigned __int16 *)v23), v25[16] > a4))
  {
LABEL_34:
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&v28, v29[0]);
    goto LABEL_35;
  }
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&v28, v29[0]);
  std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy((uint64_t)&v30, v31[0]);
  v26 = 1;
LABEL_37:
  if (v33 < 0)
    operator delete(__p[0]);
  return v26;
}

void sub_218E37064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, _QWORD *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy((uint64_t)&a13, a14);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void QP::ParserGrammar::suggestion(QP::ParserGrammar *this@<X0>, const __CFString *a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, std::string *a5@<X8>)
{
  void **v9;
  _QWORD *v10;
  _QWORD **v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD **v14;
  unsigned int v15;
  _QWORD **v16;
  _QWORD *v17;
  _QWORD **v18;
  unsigned int v19;
  _QWORD **v20;
  char *v21;
  char **v22;
  char *v23;
  char *v24;
  char **v25;
  unsigned int v26;
  char **v27;
  char *v28;
  char *v29;
  char **v30;
  unsigned int v31;
  __int128 v32;
  uint64_t v33;
  char *v34[2];
  uint64_t v35;
  _QWORD *v36[2];
  void *__p[2];
  char v38;

  if (a2)
  {
    QP::getUTF8StringFromCFString(a2, __p);
    if ((void **)((char *)this + 456) != std::__tree<std::string>::find<std::string>((uint64_t)this + 448, __p))
    {
      v9 = std::__tree<std::string>::find<std::string>((uint64_t)this + 448, __p);
      std::map<unsigned short,std::map<unsigned short,std::string>>::map[abi:ne180100](&v35, (uint64_t)(v9 + 7));
      v10 = v36[0];
      if (v36[0])
      {
        v11 = v36;
        v12 = v36[0];
        do
        {
          v13 = v12;
          v14 = v11;
          v15 = *((unsigned __int16 *)v12 + 16);
          if (v15 >= a3)
            v11 = (_QWORD **)v12;
          else
            ++v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
        if (v11 != v36)
        {
          if (v15 < a3)
            v13 = v14;
          if (*((unsigned __int16 *)v13 + 16) <= a3)
          {
            v16 = v36;
            do
            {
              v17 = v10;
              v18 = v16;
              v19 = *((unsigned __int16 *)v10 + 16);
              if (v19 >= a3)
                v20 = (_QWORD **)v10;
              else
                v20 = (_QWORD **)(v10 + 1);
              if (v19 >= a3)
                v16 = (_QWORD **)v10;
              v10 = *v20;
            }
            while (*v20);
            if (v16 == v36)
              goto LABEL_24;
            if (v19 < a3)
              v17 = v18;
            if (*((unsigned __int16 *)v17 + 16) > a3)
LABEL_24:
              v16 = v36;
            std::map<unsigned short,std::string>::map[abi:ne180100](&v33, (uint64_t)(v16 + 5));
            v21 = v34[0];
            if (v34[0])
            {
              v22 = v34;
              v23 = v34[0];
              do
              {
                v24 = v23;
                v25 = v22;
                v26 = *((unsigned __int16 *)v23 + 16);
                if (v26 >= a4)
                  v22 = (char **)v23;
                else
                  v23 += 8;
                v23 = *(char **)v23;
              }
              while (v23);
              if (v22 != v34)
              {
                if (v26 < a4)
                  v24 = (char *)v25;
                if (*((unsigned __int16 *)v24 + 16) <= a4)
                {
                  v27 = v34;
                  v28 = v34[0];
                  do
                  {
                    v29 = v28;
                    v30 = v27;
                    v31 = *((unsigned __int16 *)v28 + 16);
                    if (v31 >= a4)
                      v27 = (char **)v28;
                    else
                      v28 += 8;
                    v28 = *(char **)v28;
                  }
                  while (v28);
                  if (v27 == v34)
                    goto LABEL_55;
                  if (v31 < a4)
                    v29 = (char *)v30;
                  if (*((unsigned __int16 *)v29 + 16) > a4)
LABEL_55:
                    v27 = v34;
                  if (*((char *)v27 + 63) < 0)
                  {
                    std::string::__init_copy_ctor_external(a5, v27[5], (std::string::size_type)v27[6]);
                    v21 = v34[0];
                  }
                  else
                  {
                    v32 = *(_OWORD *)(v27 + 5);
                    a5->__r_.__value_.__r.__words[2] = (std::string::size_type)v27[7];
                    *(_OWORD *)&a5->__r_.__value_.__l.__data_ = v32;
                  }
                  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&v33, v21);
                  std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy((uint64_t)&v35, v36[0]);
                  goto LABEL_42;
                }
              }
            }
            std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&v33, v34[0]);
            v10 = v36[0];
          }
        }
      }
      std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy((uint64_t)&v35, v10);
    }
    if (*((char *)this + 111) < 0)
    {
      std::string::__init_copy_ctor_external(a5, *((const std::string::value_type **)this + 11), *((_QWORD *)this + 12));
    }
    else
    {
      *(_OWORD *)&a5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 88);
      a5->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 13);
    }
LABEL_42:
    if (v38 < 0)
      operator delete(__p[0]);
    return;
  }
  if (*((char *)this + 111) < 0)
  {
    std::string::__init_copy_ctor_external(a5, *((const std::string::value_type **)this + 11), *((_QWORD *)this + 12));
  }
  else
  {
    *(_OWORD *)&a5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 88);
    a5->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 13);
  }
}

void sub_218E37344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char *a11, uint64_t a12, char a13, _QWORD *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy((uint64_t)&a13, a14);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t QP::ParserGrammar::modifier(QP::ParserGrammar *this, unsigned int a2)
{
  char *v2;
  char **v3;
  char *v4;
  char *v5;
  char **v6;
  unsigned int v7;
  BOOL v8;
  char **v9;
  char *v11;
  unsigned int v12;
  BOOL v13;
  char **v14;

  v4 = (char *)*((_QWORD *)this + 24);
  v2 = (char *)this + 192;
  v3 = (char **)v4;
  if (!v4)
    return 0;
  v5 = v2;
  v6 = v3;
  do
  {
    v7 = *((unsigned __int16 *)v6 + 13);
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = v6;
    else
      v9 = v6 + 1;
    if (v8)
      v5 = (char *)v6;
    v6 = (char **)*v9;
  }
  while (*v9);
  if (v5 == v2 || *((unsigned __int16 *)v5 + 13) > a2)
    return 0;
  v11 = v2;
  do
  {
    v12 = *((unsigned __int16 *)v3 + 13);
    v13 = v12 >= a2;
    if (v12 >= a2)
      v14 = v3;
    else
      v14 = v3 + 1;
    if (v13)
      v11 = (char *)v3;
    v3 = (char **)*v14;
  }
  while (*v14);
  if (v11 == v2 || *((unsigned __int16 *)v11 + 13) > a2)
    v11 = v2;
  return *((unsigned __int16 *)v11 + 14);
}

uint64_t **QP::ParserGrammar::setIsKind(uint64_t a1, uint64_t a2)
{
  unsigned __int16 SymbolID;

  SymbolID = QP::ParserGrammar::getSymbolID(a1, a2);
  return std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t **)(a1 + 496), &SymbolID, &SymbolID);
}

uint64_t **QP::ParserGrammar::setIsInferred(uint64_t a1, uint64_t a2)
{
  unsigned __int16 SymbolID;

  SymbolID = QP::ParserGrammar::getSymbolID(a1, a2);
  return std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t **)(a1 + 664), &SymbolID, &SymbolID);
}

uint64_t **QP::ParserGrammar::setIsUserAction(uint64_t a1, uint64_t a2)
{
  unsigned __int16 SymbolID;

  SymbolID = QP::ParserGrammar::getSymbolID(a1, a2);
  return std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t **)(a1 + 616), &SymbolID, &SymbolID);
}

uint64_t **QP::ParserGrammar::setIsAction(uint64_t a1, uint64_t a2)
{
  unsigned __int16 SymbolID;

  SymbolID = QP::ParserGrammar::getSymbolID(a1, a2);
  return std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t **)(a1 + 640), &SymbolID, &SymbolID);
}

BOOL QP::ParserGrammar::isValidType(QP::ParserGrammar *this, CFStringRef theString)
{
  unint64_t v3;

  if (!theString)
    return 0;
  v3 = __ROR8__(*(_QWORD *)(*((_QWORD *)this + 5) + 8), 1);
  if (v3 < 7 && ((0x71u >> v3) & 1) != 0)
    return 1;
  if (CFStringHasPrefix(theString, CFSTR("LocationHome")) || CFStringHasPrefix(theString, CFSTR("LocationWork")))
    return 0;
  return CFStringHasPrefix(theString, CFSTR("LocationVehicle")) == 0;
}

BOOL QP::ParserGrammar::isIgnoredTerm(QP::ParserGrammar *this, CFStringRef theString)
{
  CFMutableStringRef MutableCopy;
  _BOOL8 v5;
  void *__p[2];
  char v8;
  CFMutableStringRef v9;

  if (!theString || !CFStringGetLength(theString))
    return 0;
  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, theString);
  v9 = MutableCopy;
  CFStringLowercase(MutableCopy, *(CFLocaleRef *)(*((_QWORD *)this + 5) + 104));
  QP::getUTF8StringFromCFString(MutableCopy, __p);
  v5 = (_QWORD *)((char *)this + 120) != std::__find_impl[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string,std::__identity>(*((_QWORD **)this + 14), (_QWORD *)this + 15, (unsigned __int8 **)__p);
  if ((v8 & 0x80000000) == 0)
  {
    if (!MutableCopy)
      return v5;
    goto LABEL_8;
  }
  operator delete(__p[0]);
  if (MutableCopy)
LABEL_8:
    CFRelease(MutableCopy);
  return v5;
}

void sub_218E37664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, const void *a16)
{
  if (a15 < 0)
    operator delete(__p);
  nlp::CFScopedPtr<__CFString *>::reset(&a16, 0);
  _Unwind_Resume(a1);
}

os_log_t ___ZL13grammarLoggerv_block_invoke()
{
  const char *v0;
  os_log_t result;

  v0 = _nlpLoggingSubsystem();
  result = os_log_create(v0, "QPSpotlightKnowledgeSource");
  grammarLogger(void)::log = (uint64_t)result;
  return result;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

std::string *std::pair<std::string,std::map<std::string,std::set<std::string>>>::pair[abi:ne180100]<std::string const&,std::map<std::string,std::set<std::string>>,0>(std::string *this, __int128 *a2, std::string::size_type *a3)
{
  __int128 v5;
  _QWORD *v6;
  std::string::size_type v7;
  std::string::value_type *v8;
  std::string::size_type v9;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = *a3;
  v6 = a3 + 1;
  v7 = a3[1];
  this[1].__r_.__value_.__l.__size_ = v7;
  v8 = &this[1].__r_.__value_.__s.__data_[8];
  v9 = a3[2];
  this[1].__r_.__value_.__r.__words[2] = v9;
  if (v9)
  {
    *(_QWORD *)(v7 + 16) = v8;
    *a3 = (std::string::size_type)v6;
    *v6 = 0;
    a3[2] = 0;
  }
  else
  {
    this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  }
  return this;
}

uint64_t std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    do
    {
      v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      else
        v9 = *(unsigned __int8 **)(v3 + 8);
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(_QWORD *)(v3 + 8)))
            return v3;
        }
        else
        {
          if (!*(_BYTE *)(v3 + 23))
            return v3;
          v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10)
              return v3;
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

_QWORD *std::__find_impl[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string,std::__identity>(_QWORD *a1, _QWORD *a2, unsigned __int8 **a3)
{
  _QWORD *v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    do
    {
      v8 = *((unsigned __int8 *)v3 + 55);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 55);
      else
        v9 = (unsigned __int8 *)v3[5];
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp((const void *)v3[4], v7, v3[5]))
            return v3;
        }
        else
        {
          if (!*((_BYTE *)v3 + 55))
            return v3;
          v10 = 0;
          while (*((unsigned __int8 *)v3 + v10 + 32) == v7[v10])
          {
            if (v8 == ++v10)
              return v3;
          }
        }
      }
      v11 = (_QWORD *)v3[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v3[2];
          v13 = *v12 == (_QWORD)v3;
          v3 = v12;
        }
        while (!v13);
      }
      v3 = v12;
    }
    while (v12 != a2);
    return a2;
  }
  return v3;
}

void nlp::CFScopedPtr<__CFArray const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy(a1, a2[1]);
    std::__tree<std::string>::destroy((uint64_t)(a2 + 5), (char *)a2[6]);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy(a1, a2[1]);
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)(a2 + 5), (char *)a2[6]);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned short,std::set<unsigned short>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned short,std::set<unsigned short>>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,std::set<unsigned short>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned short>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned short>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::set<unsigned short>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned short>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned short>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::set<unsigned short>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned short>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned short>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<unsigned short>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<unsigned short>>,0>(uint64_t a1)
{
  std::__tree<unsigned short>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::set<std::string>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::set<std::string>>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned short,std::map<unsigned short,std::string>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned short,std::map<unsigned short,std::string>>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<unsigned short,std::map<std::string,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<std::string,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<std::string,std::string>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned short,std::map<std::string,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<std::string,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<std::string,std::string>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned short,std::map<std::string,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<std::string,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<std::string,std::string>>>>::destroy(a1, a2[1]);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>>>::destroy(a1, a2[1]);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

void nlp::CFScopedPtr<__CFNumber const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t *std::map<unsigned short,std::map<unsigned short,float>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned short,std::map<unsigned short,float>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned short,std::map<unsigned short,float>>,std::__tree_node<std::__value_type<unsigned short,std::map<unsigned short,float>>,void *> *,long>>>(a1, *(unsigned __int16 **)a2, (unsigned __int16 *)(a2 + 8));
  return a1;
}

void sub_218E37E30(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned short,std::map<unsigned short,float>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned short,std::map<unsigned short,float>>,std::__tree_node<std::__value_type<unsigned short,std::map<unsigned short,float>>,void *> *,long>>>(uint64_t *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unsigned __int16 *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<unsigned short,std::map<unsigned short,float>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,float>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,float>>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,std::map<unsigned short,float>> const&>(v5, v6, v4 + 16, v4 + 16);
      v7 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned __int16 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned __int16 *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned short,std::map<unsigned short,float>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,float>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,float>>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,std::map<unsigned short,float>> const&>(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, _WORD *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<unsigned short,std::map<unsigned short,float>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,float>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,float>>>>::__find_equal<unsigned short>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<unsigned short,std::map<unsigned short,float>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,float>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,float>>>>::__construct_node<std::pair<unsigned short const,std::map<unsigned short,float>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned short,std::map<unsigned short,float>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,float>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,float>>>>::__find_equal<unsigned short>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int16 *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((unsigned __int16 *)a2 + 16), v6 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((unsigned __int16 *)v10 + 16) < v15)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(unsigned __int16 *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int16 *)a4 + 16))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(unsigned __int16 *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *std::__tree<std::__value_type<unsigned short,std::map<unsigned short,float>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,float>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,float>>>>::__construct_node<std::pair<unsigned short const,std::map<unsigned short,float>> const&>@<X0>(uint64_t a1@<X0>, _WORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *((_WORD *)v6 + 16) = *a2;
  result = std::map<unsigned short,float>::map[abi:ne180100]((uint64_t *)v6 + 5, (uint64_t)(a2 + 4));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_218E38160(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,std::map<unsigned short,float>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,std::map<unsigned short,float>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::__tree<unsigned short>::destroy((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t *std::map<unsigned short,float>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned short,float>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned short,float>,std::__tree_node<std::__value_type<unsigned short,float>,void *> *,long>>>(a1, *(unsigned __int16 **)a2, (unsigned __int16 *)(a2 + 8));
  return a1;
}

void sub_218E38200(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<unsigned short>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned short,float>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned short,float>,std::__tree_node<std::__value_type<unsigned short,float>,void *> *,long>>>(uint64_t *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unsigned __int16 *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<unsigned short,float>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,float>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,float>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,float> const&>(v5, v6, v4 + 14, (uint64_t *)(v4 + 14));
      v7 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned __int16 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned __int16 *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned short,float>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,float>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,float>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,float> const&>(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<std::__value_type<unsigned short,float>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,float>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,float>>>::__find_equal<unsigned short>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<unsigned short,float>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,float>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,float>>>::__find_equal<unsigned short>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int16 *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((unsigned __int16 *)a2 + 14), v6 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((unsigned __int16 *)v10 + 14) < v15)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(unsigned __int16 *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int16 *)a4 + 14))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(unsigned __int16 *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void std::__function::__func<void (*)(void *,nlp::_TrieCompletion *,BOOL *),std::allocator<void (*)(void *,nlp::_TrieCompletion *,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL *)>::~__func()
{
  JUMPOUT(0x219A24D0CLL);
}

_QWORD *std::__function::__func<void (*)(void *,nlp::_TrieCompletion *,BOOL *),std::allocator<void (*)(void *,nlp::_TrieCompletion *,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24DA27718;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(void *,nlp::_TrieCompletion *,BOOL *),std::allocator<void (*)(void *,nlp::_TrieCompletion *,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24DA27718;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(void *,nlp::_TrieCompletion *,BOOL *),std::allocator<void (*)(void *,nlp::_TrieCompletion *,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL *)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(void *,nlp::_TrieCompletion *,BOOL *),std::allocator<void (*)(void *,nlp::_TrieCompletion *,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void (*)(void *,nlp::_TrieCompletion *,BOOL *),std::allocator<void (*)(void *,nlp::_TrieCompletion *,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL *)>::target_type()
{
}

void nlp::CFScopedPtr<__CFSet *>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t **std::__tree<std::__value_type<unsigned short,float>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,float>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,float>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,float>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  _WORD *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((unsigned __int16 *)v5 + 14);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = operator new(0x28uLL);
    v10[14] = *(_WORD *)a3;
    *((_DWORD *)v10 + 8) = *(_DWORD *)(a3 + 4);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_218E38838(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,std::set<std::string>>,void *>>>::operator()[abi:ne180100](uint64_t a1, char **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::__tree<std::string>::destroy((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

void std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>(uint64_t a1)
{
  std::__tree<std::string>::destroy(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::map<std::string,std::set<std::string>>>>(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__construct_node<std::pair<std::string,std::map<std::string,std::set<std::string>>>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

_OWORD *std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__construct_node<std::pair<std::string,std::map<std::string,std::set<std::string>>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _OWORD *result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v5 = a1 + 8;
  result = operator new(0x50uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  result[2] = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  v9 = (_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 32);
  *((_QWORD *)result + 6) = v7;
  *((_QWORD *)result + 7) = v8;
  *((_QWORD *)result + 8) = v10;
  v11 = (char *)(result + 4);
  v12 = *(_QWORD *)(a2 + 40);
  *((_QWORD *)result + 9) = v12;
  if (v12)
  {
    *(_QWORD *)(v10 + 16) = v11;
    *(_QWORD *)(a2 + 24) = v9;
    *v9 = 0;
    *(_QWORD *)(a2 + 40) = 0;
  }
  else
  {
    *((_QWORD *)result + 7) = v11;
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::set<std::string>>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_218E38BE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::set<std::string>>>(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__construct_node<std::pair<std::string,std::map<std::string,std::set<std::string>>>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_218E38DF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::map<unsigned short,std::set<unsigned short>>>>(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__construct_node<std::pair<std::string,std::map<std::string,std::set<std::string>>>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned short,std::set<unsigned short>>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_218E39004(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<unsigned short>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned short>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned short>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::set<unsigned short>>>(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__construct_node<std::pair<std::string,std::map<std::string,std::set<std::string>>>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<unsigned short>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<unsigned short>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<unsigned short>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<unsigned short>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<unsigned short>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<unsigned short>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned short>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned short>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::set<unsigned short>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned short>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned short>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<unsigned short>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<unsigned short>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::set<unsigned short>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned short>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned short>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_218E39214(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<unsigned short>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<unsigned short>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>>>::destroy(a1, a2[1]);
    std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__construct_node<std::pair<std::string,std::map<std::string,std::set<std::string>>>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_218E39470(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t *std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::__tree_node<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,void *> *,long>>>(a1, *(unsigned __int16 **)a2, (unsigned __int16 *)(a2 + 8));
  return a1;
}

void sub_218E3950C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::__tree_node<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,void *> *,long>>>(uint64_t *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unsigned __int16 *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,std::map<unsigned short,std::set<std::string>>> const&>(v5, v6, v4 + 16, v4 + 16);
      v7 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned __int16 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned __int16 *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,std::map<unsigned short,std::set<std::string>>> const&>(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, _WORD *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<unsigned short,std::map<unsigned short,float>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,float>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,float>>>>::__find_equal<unsigned short>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>>>::__construct_node<std::pair<unsigned short const,std::map<unsigned short,std::set<std::string>>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>>>::__construct_node<std::pair<unsigned short const,std::map<unsigned short,std::set<std::string>>> const&>@<X0>(uint64_t a1@<X0>, _WORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *((_WORD *)v6 + 16) = *a2;
  result = std::map<unsigned short,std::set<std::string>>::map[abi:ne180100]((uint64_t *)v6 + 5, (uint64_t)(a2 + 4));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_218E39694(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned short,std::set<std::string>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned short,std::set<std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned short,std::set<std::string>>,std::__tree_node<std::__value_type<unsigned short,std::set<std::string>>,void *> *,long>>>(a1, *(unsigned __int16 **)a2, (unsigned __int16 *)(a2 + 8));
  return a1;
}

void sub_218E396EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned short,std::set<std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned short,std::set<std::string>>,std::__tree_node<std::__value_type<unsigned short,std::set<std::string>>,void *> *,long>>>(uint64_t *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unsigned __int16 *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,std::set<std::string>> const&>(v5, v6, v4 + 16, v4 + 16);
      v7 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned __int16 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned __int16 *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,std::set<std::string>> const&>(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, _WORD *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<unsigned short,std::map<unsigned short,float>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,float>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,float>>>>::__find_equal<unsigned short>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::__construct_node<std::pair<unsigned short const,std::set<std::string>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::__construct_node<std::pair<unsigned short const,std::set<std::string>> const&>@<X0>(uint64_t a1@<X0>, _WORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *((_WORD *)v6 + 16) = *a2;
  result = std::set<std::string>::set[abi:ne180100]((uint64_t *)v6 + 5, (uint64_t)(a2 + 4));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_218E39874(_Unwind_Exception *a1)
{
  _QWORD *v1;
  char **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,std::set<std::string>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_218E398CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *result, void **a2, void **a3)
{
  void **v4;
  uint64_t **v5;
  uint64_t v6;
  void **v7;
  void **v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t)(result + 1);
    do
    {
      result = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (void **)v4[2];
          v9 = *v8 == v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t **a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  void **v10;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void **std::__tree<std::string>::__find_equal<std::string>(_QWORD *a1, uint64_t a2, void ***a3, uint64_t *a4, void **a5)
{
  void **v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void **v14;
  void **v15;
  _QWORD *v16;
  BOOL v17;
  void **v19;

  v9 = (void **)(a1 + 1);
  if (a1 + 1 == (_QWORD *)a2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, (void **)(a2 + 32)) & 0x80) != 0)
  {
    if (*a1 == a2)
    {
      v12 = (_QWORD *)a2;
    }
    else
    {
      v11 = *(_QWORD **)a2;
      if (*(_QWORD *)a2)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)v11[1];
        }
        while (v11);
      }
      else
      {
        v16 = (_QWORD *)a2;
        do
        {
          v12 = (_QWORD *)v16[2];
          v17 = *v12 == (_QWORD)v16;
          v16 = v12;
        }
        while (v17);
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12 + 4, a5) & 0x80) == 0)
        return (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, a3, a5);
    }
    if (*(_QWORD *)a2)
    {
      *a3 = (void **)v12;
      return (void **)(v12 + 1);
    }
    else
    {
      *a3 = (void **)a2;
      return (void **)a2;
    }
  }
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a2 + 32), a5) & 0x80) != 0)
  {
    a4 = (uint64_t *)(a2 + 8);
    v13 = *(_QWORD *)(a2 + 8);
    if (v13)
    {
      v14 = *(void ***)(a2 + 8);
      do
      {
        v15 = v14;
        v14 = (void **)*v14;
      }
      while (v14);
    }
    else
    {
      v19 = (void **)a2;
      do
      {
        v15 = (void **)v19[2];
        v17 = *v15 == v19;
        v19 = v15;
      }
      while (!v17);
    }
    if (v15 == v9)
      goto LABEL_27;
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, v15 + 4) & 0x80) != 0)
    {
      v13 = *a4;
LABEL_27:
      if (v13)
      {
        *a3 = v15;
        return v15;
      }
      else
      {
        *a3 = (void **)a2;
      }
      return (void **)a4;
    }
    return (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  *a3 = (void **)a2;
  *a4 = a2;
  return (void **)a4;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,void *>>>::operator()[abi:ne180100](uint64_t a1, char **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t **std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _WORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[16] = **a4;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 5) = 0;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,std::string>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 63) < 0)
      operator delete(__p[5]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t *std::map<unsigned short,std::string>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned short,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned short,std::string>,std::__tree_node<std::__value_type<unsigned short,std::string>,void *> *,long>>>(a1, *(unsigned __int16 **)a2, (unsigned __int16 *)(a2 + 8));
  return a1;
}

void sub_218E39D00(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned short,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned short,std::string>,std::__tree_node<std::__value_type<unsigned short,std::string>,void *> *,long>>>(uint64_t *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unsigned __int16 *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,std::string> const&>(v5, v6, v4 + 16, (uint64_t)(v4 + 16));
      v7 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned __int16 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned __int16 *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,std::string> const&>(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<unsigned short,std::map<unsigned short,float>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,float>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,float>>>>::__find_equal<unsigned short>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__construct_node<std::pair<unsigned short const,std::string> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__construct_node<std::pair<unsigned short const,std::string> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *((_WORD *)v6 + 16) = *(_WORD *)a2;
  v7 = (std::string *)(v6 + 40);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 8);
    v7->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
  }
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_218E39EA8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,std::string>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__construct_node<std::pair<std::string,std::map<std::string,std::set<std::string>>>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned short,std::map<unsigned short,std::string>>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_218E3A0BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::string>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  char *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((unsigned __int16 *)v5 + 16);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (char *)operator new(0x40uLL);
    *((_WORD *)v10 + 16) = *(_WORD *)a3;
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(a3 + 8);
    *((_QWORD *)v10 + 7) = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *std::map<unsigned short,std::map<unsigned short,std::string>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned short,std::map<unsigned short,std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__tree_node<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,void *> *,long>>>(a1, *(unsigned __int16 **)a2, (unsigned __int16 *)(a2 + 8));
  return a1;
}

void sub_218E3A1E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned short,std::map<unsigned short,std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__tree_node<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,void *> *,long>>>(uint64_t *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unsigned __int16 *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,std::map<unsigned short,std::string>> const&>(v5, v6, v4 + 16, v4 + 16);
      v7 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned __int16 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned __int16 *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,std::map<unsigned short,std::string>> const&>(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, _WORD *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<unsigned short,std::map<unsigned short,float>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,float>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,float>>>>::__find_equal<unsigned short>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::__construct_node<std::pair<unsigned short const,std::map<unsigned short,std::string>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::__construct_node<std::pair<unsigned short const,std::map<unsigned short,std::string>> const&>@<X0>(uint64_t a1@<X0>, _WORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *((_WORD *)v6 + 16) = *a2;
  result = std::map<unsigned short,std::string>::map[abi:ne180100]((uint64_t *)v6 + 5, (uint64_t)(a2 + 4));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_218E3A368(_Unwind_Exception *a1)
{
  _QWORD *v1;
  char **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned short,QPModifier>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QPModifier>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QPModifier>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  char *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int16 *)v6 + 13);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x20uLL);
    *(_DWORD *)(v11 + 26) = **a4;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

_OWORD *std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_unique_key_args<std::string,std::pair<std::string,unsigned short>>(uint64_t **a1, void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x40uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *((_WORD *)v6 + 28) = *(_WORD *)(a3 + 24);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t **std::__tree<std::__value_type<unsigned short,unsigned short>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,unsigned short>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,unsigned short>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,unsigned short>>(uint64_t **a1, unsigned __int16 *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  char *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((unsigned __int16 *)v5 + 13);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (char *)operator new(0x20uLL);
    *(_DWORD *)(v10 + 26) = *a3;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

BOOL QP::lexeme_ordered_range(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *a2;
  if (!*a2)
    return 0;
  v4 = *(_QWORD *)(v3 + 72);
  v6 = *(_QWORD *)(v2 + 72);
  v5 = *(_QWORD *)(v2 + 80);
  if (v6 != v4)
    return v5 + v6 < *(_QWORD *)(v3 + 80) + v4;
  v7 = *(_QWORD *)(v3 + 80);
  if (v5 == v7)
    return *(unsigned __int16 *)(v2 + 88) < *(unsigned __int16 *)(v3 + 88);
  else
    return v5 > v7;
}

uint64_t QP::lexeme_less_than_range(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  _BOOL4 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;

  result = *a1;
  if (result)
  {
    v5 = *a2;
    if (v5)
    {
      v6 = *(_QWORD *)(result + 72);
      v7 = *(_QWORD *)(v5 + 72);
      if (v6 == v7)
      {
        v8 = *(_QWORD *)(result + 80);
        v9 = *(_QWORD *)(v5 + 80);
        if (v8 == v9)
        {
          v10 = *(unsigned __int8 *)(result + 23);
          v11 = (char)v10;
          if ((v10 & 0x80u) != 0)
            v10 = *(_QWORD *)(result + 8);
          if (v10 != 6
            || (v11 >= 0 ? (v12 = result) : (v12 = *(_QWORD *)result),
                (v13 = *(_DWORD *)v12, v14 = *(unsigned __int16 *)(v12 + 4), v13 == 1934979913)
              ? (v15 = v14 == 29285)
              : (v15 = 0),
                !v15))
          {
            v16 = *(unsigned __int8 *)(v5 + 23);
            v17 = (char)v16;
            if ((v16 & 0x80u) != 0)
              v16 = *(_QWORD *)(v5 + 8);
            if (v16 != 6)
              return *(unsigned __int16 *)(result + 88) < *(unsigned __int16 *)(v5 + 88);
            v18 = v17 >= 0 ? (int *)v5 : *(int **)v5;
            v19 = *v18;
            v20 = *((unsigned __int16 *)v18 + 2);
            if (v19 != 1934979913 || v20 != 29285)
              return *(unsigned __int16 *)(result + 88) < *(unsigned __int16 *)(v5 + 88);
          }
          v22 = QP::equals((_QWORD *)result, (_QWORD *)v5);
          result = *a1;
          if (v22)
          {
            v5 = *a2;
            return *(unsigned __int16 *)(result + 88) < *(unsigned __int16 *)(v5 + 88);
          }
          v23 = *(unsigned __int8 *)(result + 23);
          v24 = (char)v23;
          if ((v23 & 0x80u) != 0)
            v23 = *(_QWORD *)(result + 8);
          if (v23 == 6)
          {
            if (v24 >= 0)
              v25 = *a1;
            else
              v25 = *(_QWORD *)result;
            v26 = *(_DWORD *)v25;
            v27 = *(unsigned __int16 *)(v25 + 4);
            return v26 != 1934979913 || v27 != 29285;
          }
          else
          {
            return 1;
          }
        }
        else
        {
          return v8 > v9;
        }
      }
      else
      {
        return v6 < v7;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL QP::ranges_greater_than_range(_QWORD *a1, _QWORD *a2)
{
  return a1[1] - *a1 > a2[1] - *a2;
}

uint64_t QP::Lexer::Lexer(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  NSObject *v28;
  const __CFAllocator *v29;
  CFMutableAttributedStringRef Mutable;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  CFCharacterSetRef v37;
  CFCharacterSetRef v38;
  CFCharacterSetRef v39;
  CFCharacterSetRef v40;
  CFCharacterSetRef v41;
  CFCharacterSetRef v42;
  const __CFSet *v43;
  CFSetRef Copy;
  __CFDictionary *v45;
  __CFDictionary *v46;
  const void *v47;
  uint64_t v49[2];
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  __CFArray *v54;

  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = a1 + 192;
  *(_QWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 208) = a1 + 216;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = a1 + 240;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 312) = *a2;
  v6 = a2[1];
  *(_QWORD *)(a1 + 320) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a1 + 328) = *a3;
  v9 = a3[1];
  *(_QWORD *)(a1 + 336) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = (uint64_t *)(a1 + 312);
  v13 = operator new();
  v14 = v13;
  v15 = (std::__shared_weak_count *)a2[1];
  v52 = *a2;
  v53 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v18 = (std::__shared_weak_count *)a3[1];
  v50 = *a3;
  v51 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  QP::LexemeConverter::LexemeConverter(v13, &v52, &v50);
  *(_QWORD *)(a1 + 344) = v14;
  v21 = v51;
  if (v51)
  {
    v22 = (unint64_t *)&v51->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v53;
  if (v53)
  {
    v25 = (unint64_t *)&v53->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  *(_QWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_WORD *)(a1 + 432) = 1;
  *(_BYTE *)(a1 + 434) = 0;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_QWORD *)(a1 + 584) = QPDataDetectorCreate();
  v27 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v28 = dispatch_queue_attr_make_with_qos_class(v27, QOS_CLASS_BACKGROUND, 0);
  *(_QWORD *)(a1 + 592) = dispatch_queue_create("com.apple.QueryParser.Lexer.DataDetectors", v27);
  *(_QWORD *)(a1 + 600) = dispatch_queue_create("com.apple.QueryParser.Lexer.DataDetectors", v28);
  v29 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFAttributedStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  nlp::CFScopedPtr<__CFAttributedString *>::reset((const void **)(a1 + 448), Mutable);
  v31 = *v12;
  if (*v12 && *(_BYTE *)(v31 + 29))
    *(_BYTE *)(a1 + 433) = 1;
  v32 = *(std::__shared_weak_count **)(a1 + 320);
  v49[0] = v31;
  v49[1] = (uint64_t)v32;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  QP::taggerSchemes(v49, &v54);
  if (v32)
  {
    v35 = (unint64_t *)&v32->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  *(_QWORD *)(a1 + 424) = NLTaggerCreate();
  v37 = CFCharacterSetCreateWithCharactersInString(v29, CFSTR("\"‟”“„″˝「」『』"));
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset((const void **)(a1 + 360), v37);
  v38 = CFCharacterSetCreateWithCharactersInString(v29, CFSTR("'’"));
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset((const void **)(a1 + 368), v38);
  v39 = CFCharacterSetCreateWithCharactersInString(v29, CFSTR("sSdDvVmMrRlLtThH"));
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset((const void **)(a1 + 376), v39);
  v40 = CFCharacterSetCreateWithCharactersInString(v29, CFSTR(":："));
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset((const void **)(a1 + 384), v40);
  v41 = CFCharacterSetCreateWithCharactersInString(v29, CFSTR(",،\"‟”“„″˝「」『』'’"));
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset((const void **)(a1 + 392), v41);
  v42 = CFCharacterSetCreateWithCharactersInString(v29, CFSTR(",،:：\"‟”“„″˝「」『』'’ "));
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset((const void **)(a1 + 400), v42);
  v43 = CFSetCreateMutable(v29, 0, MEMORY[0x24BDBD6B8]);
  if (v43)
  {
    Copy = CFSetCreateCopy(v29, v43);
    nlp::CFScopedPtr<__CFSet const*>::reset((const void **)(a1 + 352), Copy);
    CFRelease(v43);
  }
  v45 = CFDictionaryCreateMutable(v29, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v46 = v45;
  if (*v12)
  {
    v47 = *(const void **)(*v12 + 160);
    if (v47)
      CFDictionarySetValue(v45, kQPQueryParserOptionPreferredLanguagesKey, v47);
  }
  *(_QWORD *)(a1 + 416) = SILocalizationCreateWithOptions();
  SILocalizationLoad();
  if (v46)
    CFRelease(v46);
  if (v54)
    CFRelease(v54);
  return a1;
}

void sub_218E3AC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, QP::LexemeConverter **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void **a16, const void **a17, const void **a18, const void **a19, const void **a20,const void **a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
  uint64_t v28;
  const void **v29;
  const void **v30;
  uint64_t v31;
  const void **v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void **v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(v34 - 96), 0);
  *(_QWORD *)(v34 - 96) = v28 + 552;
  std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 96));
  *(_QWORD *)(v34 - 96) = v28 + 528;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 96));
  *(_QWORD *)(v34 - 96) = v28 + 504;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 96));
  *(_QWORD *)(v34 - 96) = v28 + 480;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 96));
  v35 = *(void **)(v28 + 456);
  if (v35)
  {
    *(_QWORD *)(v28 + 464) = v35;
    operator delete(v35);
  }
  nlp::CFScopedPtr<__CFAttributedString *>::reset(v29, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(v32, 0);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(v28 + 408), 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset(v30, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset(a17, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset(a18, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset(a19, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset(a20, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset(a21, 0);
  nlp::CFScopedPtr<__CFSet const*>::reset(a16, 0);
  std::unique_ptr<QP::LexemeConverter>::reset[abi:ne180100](a11, 0);
  v36 = (void **)(v33 + 192);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v28 + 328);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v31);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)(v33 + 240), 0);
  v37 = *(void **)(v28 + 280);
  if (v37)
  {
    *(_QWORD *)(v28 + 288) = v37;
    operator delete(v37);
  }
  v38 = *v36;
  if (*v36)
  {
    *(_QWORD *)(v28 + 264) = v38;
    operator delete(v38);
  }
  std::__tree<std::string>::destroy(a12, *(char **)(v28 + 240));
  std::__tree<std::string>::destroy(a13, *(char **)(v28 + 216));
  std::__tree<std::string>::destroy(a14, *(char **)(v28 + 192));
  *(_QWORD *)(v34 - 96) = a15;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 96));
  *(_QWORD *)(v34 - 96) = v33 + 72;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 96));
  v39 = *(void **)(v28 + 112);
  if (v39)
  {
    *(_QWORD *)(v28 + 120) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v28 + 88);
  if (v40)
  {
    *(_QWORD *)(v28 + 96) = v40;
    operator delete(v40);
  }
  v41 = *(void **)v33;
  if (*(_QWORD *)v33)
  {
    *(_QWORD *)(v28 + 72) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(a1);
}

void QP::taggerSchemes(uint64_t *a1@<X0>, __CFArray **a2@<X8>)
{
  __CFArray *Mutable;
  uint64_t v5;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a2 = Mutable;
  CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x24BE1E5F8]);
  v5 = *a1;
  if (*a1)
  {
    if (*(_BYTE *)(v5 + 29))
    {
      CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x24BE1E5E8]);
      v5 = *a1;
    }
    if (*(_BYTE *)(v5 + 61))
      CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x24BE1E5E0]);
  }
}

void sub_218E3AF08(_Unwind_Exception *a1)
{
  const void **v1;

  nlp::CFScopedPtr<__CFArray *>::reset(v1, 0);
  _Unwind_Resume(a1);
}

void nlp::CFScopedPtr<__CFCharacterSet const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFSet const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void ___ZN2QP5LexerC2ENSt3__110shared_ptrINS_19ParserConfigurationEEENS2_INS_13ParserGrammarEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v2;

  if (a2)
  {
    if (lexerLogger(void)::token != -1)
      dispatch_once(&lexerLogger(void)::token, &__block_literal_global_100);
    v2 = lexerLogger(void)::log;
    if (os_log_type_enabled((os_log_t)lexerLogger(void)::log, OS_LOG_TYPE_ERROR))
      ___ZN2QP5LexerC2ENSt3__110shared_ptrINS_19ParserConfigurationEEENS2_INS_13ParserGrammarEEE_block_invoke_cold_1(v2);
  }
}

void QP::Lexer::~Lexer(QP::Lexer *this)
{
  _DWORD *v2;
  NSObject *v3;
  NSObject *v4;
  const void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void **v12;

  dispatch_sync(*((dispatch_queue_t *)this + 75), &__block_literal_global_16);
  dispatch_sync(*((dispatch_queue_t *)this + 74), &__block_literal_global_18);
  v2 = (_DWORD *)*((_QWORD *)this + 73);
  if (v2)
    QPDataDetectorRelease(v2);
  if (*((_QWORD *)this + 52))
    SILocalizationRelease();
  v3 = *((_QWORD *)this + 74);
  if (v3)
    dispatch_release(v3);
  v4 = *((_QWORD *)this + 75);
  if (v4)
    dispatch_release(v4);
  v5 = (const void *)*((_QWORD *)this + 53);
  if (v5)
    CFRelease(v5);
  v12 = (void **)((char *)this + 552);
  std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:ne180100](&v12);
  v12 = (void **)((char *)this + 528);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v12);
  v12 = (void **)((char *)this + 504);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v12);
  v12 = (void **)((char *)this + 480);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v12);
  v6 = (void *)*((_QWORD *)this + 57);
  if (v6)
  {
    *((_QWORD *)this + 58) = v6;
    operator delete(v6);
  }
  nlp::CFScopedPtr<__CFAttributedString *>::reset((const void **)this + 56, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)this + 55, 0);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)this + 51, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset((const void **)this + 50, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset((const void **)this + 49, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset((const void **)this + 48, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset((const void **)this + 47, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset((const void **)this + 46, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset((const void **)this + 45, 0);
  nlp::CFScopedPtr<__CFSet const*>::reset((const void **)this + 44, 0);
  std::unique_ptr<QP::LexemeConverter>::reset[abi:ne180100]((QP::LexemeConverter **)this + 43, 0);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)this + 328);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)this + 312);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)this + 38, 0);
  v7 = (void *)*((_QWORD *)this + 35);
  if (v7)
  {
    *((_QWORD *)this + 36) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 32);
  if (v8)
  {
    *((_QWORD *)this + 33) = v8;
    operator delete(v8);
  }
  std::__tree<std::string>::destroy((uint64_t)this + 232, *((char **)this + 30));
  std::__tree<std::string>::destroy((uint64_t)this + 208, *((char **)this + 27));
  std::__tree<std::string>::destroy((uint64_t)this + 184, *((char **)this + 24));
  v12 = (void **)((char *)this + 160);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v12);
  v12 = (void **)((char *)this + 136);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v12);
  v9 = (void *)*((_QWORD *)this + 14);
  if (v9)
  {
    *((_QWORD *)this + 15) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 11);
  if (v10)
  {
    *((_QWORD *)this + 12) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 8);
  if (v11)
  {
    *((_QWORD *)this + 9) = v11;
    operator delete(v11);
  }
}

uint64_t QP::Lexer::useKnowledgeSource(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 576) = a2;
  return result;
}

uint64_t QP::Lexer::enumerateAnnotations(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  CFIndex v5;
  CFIndex v6;
  CFRange effectiveRange;
  char v8;

  result = *(_QWORD *)(a1 + 448);
  if (result)
  {
    v8 = 0;
    result = CFAttributedStringGetLength((CFAttributedStringRef)result);
    if (result >= 1)
    {
      v5 = result;
      v6 = 0;
      do
      {
        result = (uint64_t)CFAttributedStringGetAttributes(*(CFAttributedStringRef *)(a1 + 448), v6, &effectiveRange);
        if (result)
        {
          result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)result, kQPInputAttributeAnnotationKey);
          if (result)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, char *))(a2 + 16))(a2, result, &v8);
            if (v8)
              break;
          }
        }
        v6 = effectiveRange.length + effectiveRange.location;
      }
      while (effectiveRange.length + effectiveRange.location < v5);
    }
  }
  return result;
}

CFIndex QP::Lexer::enumerateLastTokenCompletedQueries(uint64_t a1, uint64_t a2)
{
  CFIndex result;
  CFIndex v5;
  CFIndex v6;
  const void *ValueAtIndex;
  BOOL v8;
  char v9;

  v9 = 0;
  result = CFArrayGetCount(*(CFArrayRef *)(a1 + 408));
  v5 = result - 1;
  if (result >= 1)
  {
    v6 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 408), v6);
      result = (*(uint64_t (**)(uint64_t, const void *, char *))(a2 + 16))(a2, ValueAtIndex, &v9);
      if (v9)
        v8 = 1;
      else
        v8 = v5 == v6;
      ++v6;
    }
    while (!v8);
  }
  return result;
}

void QP::Lexer::lockedDetectorUpdate(QP::Lexer *this, int a2)
{
  uint64_t v2;
  uint64_t v5;
  const __CFAllocator *v6;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v8;
  CFMutableArrayRef v9;
  CFMutableArrayRef v10;
  CFMutableArrayRef v11;
  CFMutableArrayRef v12;
  CFMutableArrayRef v13;
  CFMutableArrayRef v14;
  uint64_t *v15;
  void (*v16)(uint64_t, _QWORD *);
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  _QWORD v22[6];
  _QWORD v23[13];
  _QWORD block[13];
  _QWORD v25[12];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;

  v2 = *((_QWORD *)this + 72);
  if (v2)
  {
    if (*((_QWORD *)this + 73))
    {
      (*(void (**)(_QWORD))(v2 + 48))(*(_QWORD *)v2);
      if (!*((_BYTE *)this + 434) || a2)
      {
        *((_BYTE *)this + 434) = 1;
        v54 = 0;
        v55 = &v54;
        v56 = 0x2000000000;
        v57 = 0;
        v50 = 0;
        v51 = &v50;
        v52 = 0x2000000000;
        v53 = 0;
        v46 = 0;
        v47 = &v46;
        v48 = 0x2000000000;
        v49 = 0;
        v42 = 0;
        v43 = &v42;
        v44 = 0x2000000000;
        v45 = 0;
        v38 = 0;
        v39 = &v38;
        v40 = 0x2000000000;
        v41 = 0;
        v34 = 0;
        v35 = &v34;
        v36 = 0x2000000000;
        v37 = 0;
        v30 = 0;
        v31 = &v30;
        v32 = 0x2000000000;
        v33 = 0;
        v26 = 0;
        v27 = &v26;
        v28 = 0x2000000000;
        v29 = 0;
        v5 = MEMORY[0x24BDAC760];
        if (*(_QWORD *)(*((_QWORD *)this + 72) + 32))
        {
          v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
          v55[3] = (uint64_t)Mutable;
          v8 = CFArrayCreateMutable(v6, 0, MEMORY[0x24BDBD690]);
          v51[3] = (uint64_t)v8;
          v9 = CFArrayCreateMutable(v6, 0, MEMORY[0x24BDBD690]);
          v47[3] = (uint64_t)v9;
          v10 = CFArrayCreateMutable(v6, 0, MEMORY[0x24BDBD690]);
          v43[3] = (uint64_t)v10;
          v11 = CFArrayCreateMutable(v6, 0, MEMORY[0x24BDBD690]);
          v39[3] = (uint64_t)v11;
          v12 = CFArrayCreateMutable(v6, 0, MEMORY[0x24BDBD690]);
          v35[3] = (uint64_t)v12;
          v13 = CFArrayCreateMutable(v6, 0, MEMORY[0x24BDBD690]);
          v31[3] = (uint64_t)v13;
          v14 = CFArrayCreateMutable(v6, 0, MEMORY[0x24BDBD690]);
          v27[3] = (uint64_t)v14;
          v15 = (uint64_t *)*((_QWORD *)this + 72);
          v16 = (void (*)(uint64_t, _QWORD *))v15[4];
          v17 = *v15;
          v25[0] = v5;
          v25[1] = 0x40000000;
          v25[2] = ___ZN2QP5Lexer20lockedDetectorUpdateEb_block_invoke;
          v25[3] = &unk_24DA251A0;
          v25[4] = &v54;
          v25[5] = &v50;
          v25[6] = &v46;
          v25[7] = &v42;
          v25[8] = &v38;
          v25[9] = &v34;
          v25[10] = &v30;
          v25[11] = &v26;
          v16(v17, v25);
        }
        if (a2)
        {
          v18 = *((_QWORD *)this + 74);
          block[0] = v5;
          block[1] = 0x40000000;
          block[2] = ___ZN2QP5Lexer20lockedDetectorUpdateEb_block_invoke_2;
          block[3] = &unk_24DA251C8;
          block[4] = &v54;
          block[5] = &v50;
          block[6] = &v42;
          block[7] = &v46;
          block[8] = &v38;
          block[9] = &v34;
          block[10] = &v30;
          block[11] = &v26;
          block[12] = this;
          dispatch_sync(v18, block);
        }
        else
        {
          v19 = dispatch_group_create();
          v20 = *((_QWORD *)this + 74);
          v23[0] = v5;
          v23[1] = 0x40000000;
          v23[2] = ___ZN2QP5Lexer20lockedDetectorUpdateEb_block_invoke_3;
          v23[3] = &unk_24DA251F0;
          v23[4] = &v54;
          v23[5] = &v50;
          v23[6] = &v42;
          v23[7] = &v46;
          v23[8] = &v38;
          v23[9] = &v34;
          v23[10] = &v30;
          v23[11] = &v26;
          v23[12] = this;
          dispatch_group_async(v19, v20, v23);
          v21 = *((_QWORD *)this + 74);
          v22[0] = v5;
          v22[1] = 0x40000000;
          v22[2] = ___ZN2QP5Lexer20lockedDetectorUpdateEb_block_invoke_4;
          v22[3] = &__block_descriptor_tmp_39;
          v22[4] = this;
          v22[5] = v19;
          dispatch_group_notify(v19, v21, v22);
        }
        _Block_object_dispose(&v26, 8);
        _Block_object_dispose(&v30, 8);
        _Block_object_dispose(&v34, 8);
        _Block_object_dispose(&v38, 8);
        _Block_object_dispose(&v42, 8);
        _Block_object_dispose(&v46, 8);
        _Block_object_dispose(&v50, 8);
        _Block_object_dispose(&v54, 8);
      }
    }
  }
}

void sub_218E3B6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v57;

  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose((const void *)(v57 - 256), 8);
  _Block_object_dispose((const void *)(v57 - 224), 8);
  _Block_object_dispose((const void *)(v57 - 192), 8);
  _Block_object_dispose((const void *)(v57 - 160), 8);
  _Block_object_dispose((const void *)(v57 - 128), 8);
  _Block_object_dispose((const void *)(v57 - 96), 8);
  _Unwind_Resume(a1);
}

void ___ZN2QP5Lexer20lockedDetectorUpdateEb_block_invoke(_QWORD *a1, CFStringRef theString, const __CFString *a3)
{
  uint64_t v6;

  if (theString && CFStringGetLength(theString))
  {
    if (CFStringCompare(a3, CFSTR("Person"), 0))
    {
      if (CFStringCompare(a3, CFSTR("Location"), 0))
      {
        if (CFStringCompare(a3, CFSTR("AppName"), 0))
        {
          if (CFStringCompare(a3, CFSTR("Bundle"), 0))
          {
            if (CFStringCompare(a3, CFSTR("Field"), 0))
            {
              if (CFStringCompare(a3, CFSTR("Airline"), 0))
              {
                if (CFStringCompare(a3, CFSTR("Airport"), 0))
                {
                  if (CFStringCompare(a3, CFSTR("HotelName"), 0))
                    return;
                  v6 = a1[11];
                }
                else
                {
                  v6 = a1[10];
                }
              }
              else
              {
                v6 = a1[9];
              }
            }
            else
            {
              v6 = a1[8];
            }
          }
          else
          {
            v6 = a1[7];
          }
        }
        else
        {
          v6 = a1[6];
        }
      }
      else
      {
        v6 = a1[5];
      }
    }
    else
    {
      v6 = a1[4];
    }
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(v6 + 8) + 24), theString);
  }
}

void ___ZN2QP5Lexer20lockedDetectorUpdateEb_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  v2 = a1[12];
  *(_BYTE *)(v2 + 434) = 0;
  QPDataDetectorSetDynamicSources(*(_QWORD *)(v2 + 584));
  (*(void (**)(_QWORD))(*(_QWORD *)(v2 + 576) + 56))(**(_QWORD **)(v2 + 576));
  v3 = *(const void **)(*(_QWORD *)(a1[4] + 8) + 24);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(*(_QWORD *)(a1[5] + 8) + 24);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(*(_QWORD *)(a1[6] + 8) + 24);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(*(_QWORD *)(a1[7] + 8) + 24);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(*(_QWORD *)(a1[8] + 8) + 24);
  if (v7)
    CFRelease(v7);
  v8 = *(const void **)(*(_QWORD *)(a1[9] + 8) + 24);
  if (v8)
    CFRelease(v8);
  v9 = *(const void **)(*(_QWORD *)(a1[10] + 8) + 24);
  if (v9)
    CFRelease(v9);
  v10 = *(const void **)(*(_QWORD *)(a1[11] + 8) + 24);
  if (v10)
    CFRelease(v10);
}

void ___ZN2QP5Lexer20lockedDetectorUpdateEb_block_invoke_3(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  QPDataDetectorSetDynamicSources(*(_QWORD *)(a1[12] + 584));
  v2 = *(const void **)(*(_QWORD *)(a1[4] + 8) + 24);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(*(_QWORD *)(a1[5] + 8) + 24);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(*(_QWORD *)(a1[6] + 8) + 24);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(*(_QWORD *)(a1[7] + 8) + 24);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(*(_QWORD *)(a1[8] + 8) + 24);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(*(_QWORD *)(a1[9] + 8) + 24);
  if (v7)
    CFRelease(v7);
  v8 = *(const void **)(*(_QWORD *)(a1[10] + 8) + 24);
  if (v8)
    CFRelease(v8);
  v9 = *(const void **)(*(_QWORD *)(a1[11] + 8) + 24);
  if (v9)
    CFRelease(v9);
}

void ___ZN2QP5Lexer20lockedDetectorUpdateEb_block_invoke_4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v2 + 434) = 0;
  v3 = *(_QWORD *)(v2 + 576);
  if (v3)
    (*(void (**)(_QWORD))(v3 + 56))(*(_QWORD *)v3);
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
}

void QP::Lexer::updateWithKnowledgeSource(QP::Lexer *this, char a2, int a3)
{
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  _QWORD v7[5];
  char v8;
  _QWORD block[5];
  char v10;

  if (*((_QWORD *)this + 73))
  {
    v4 = *((_QWORD *)this + 72);
    if (v4)
    {
      if ((a2 & 1) != 0 || a3)
      {
        v6 = *((_QWORD *)this + 75);
        block[0] = MEMORY[0x24BDAC760];
        block[1] = 0x40000000;
        block[2] = ___ZN2QP5Lexer25updateWithKnowledgeSourceEbb_block_invoke;
        block[3] = &__block_descriptor_tmp_40;
        block[4] = this;
        v10 = a3;
        dispatch_sync(v6, block);
      }
      else if ((*(unsigned int (**)(_QWORD))(v4 + 40))(*(_QWORD *)v4))
      {
        v5 = *((_QWORD *)this + 75);
        v7[0] = MEMORY[0x24BDAC760];
        v7[1] = 0x40000000;
        v7[2] = ___ZN2QP5Lexer25updateWithKnowledgeSourceEbb_block_invoke_2;
        v7[3] = &__block_descriptor_tmp_41;
        v7[4] = this;
        v8 = 0;
        dispatch_async(v5, v7);
      }
    }
  }
}

void ___ZN2QP5Lexer25updateWithKnowledgeSourceEbb_block_invoke(uint64_t a1)
{
  QP::Lexer::lockedDetectorUpdate(*(QP::Lexer **)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void ___ZN2QP5Lexer25updateWithKnowledgeSourceEbb_block_invoke_2(uint64_t a1)
{
  QP::Lexer::lockedDetectorUpdate(*(QP::Lexer **)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void QP::Lexer::updateResources(QP::Lexer *this)
{
  QP::Lexer::updateWithKnowledgeSource(this, 0, 1);
}

void QP::Lexer::updateTagger(QP::Lexer *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  const void *v7;
  uint64_t v8[2];
  CFTypeRef cf;

  if (*(_BYTE *)(*((_QWORD *)this + 39) + 61))
  {
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
    v8[0] = *((_QWORD *)this + 39);
    v8[1] = (uint64_t)v2;
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldxr(p_shared_owners);
      while (__stxr(v4 + 1, p_shared_owners));
    }
    QP::taggerSchemes(v8, (__CFArray **)&cf);
    if (v2)
    {
      v5 = (unint64_t *)&v2->__shared_owners_;
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v7 = (const void *)*((_QWORD *)this + 53);
    if (v7)
      CFRelease(v7);
    *((_QWORD *)this + 53) = NLTaggerCreate();
    if (cf)
      CFRelease(cf);
  }
}

void sub_218E3BD1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void QP::Lexer::clearResources(QP::DateConverter ***this)
{
  NSObject *v2;
  _QWORD block[5];

  QP::LexemeConverter::clearResources(this[43]);
  v2 = this[74];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZN2QP5Lexer14clearResourcesEv_block_invoke;
  block[3] = &__block_descriptor_tmp_42;
  block[4] = this;
  dispatch_sync(v2, block);
  *((_BYTE *)this + 432) = 0;
}

void ___ZN2QP5Lexer14clearResourcesEv_block_invoke(uint64_t a1)
{
  QPDataDetectorClearResources(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 584));
}

uint64_t QP::Lexer::clear(QP::Lexer *this)
{
  const __CFAttributedString *v2;
  CFMutableArrayRef Mutable;
  uint64_t i;
  uint64_t v5;
  uint64_t j;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  CFRange v10;

  nlp::CFScopedPtr<__CFString const*>::reset((const void **)this + 55, 0);
  v2 = (const __CFAttributedString *)*((_QWORD *)this + 56);
  v10.length = CFAttributedStringGetLength(v2);
  v10.location = 0;
  CFAttributedStringReplaceString(v2, v10, &stru_24DA27910);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)this + 51, Mutable);
  *((_QWORD *)this + 58) = *((_QWORD *)this + 57);
  v5 = *((_QWORD *)this + 60);
  for (i = *((_QWORD *)this + 61); i != v5; i = std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](i - 16))
    ;
  *((_QWORD *)this + 61) = v5;
  v7 = *((_QWORD *)this + 63);
  for (j = *((_QWORD *)this + 64); j != v7; j = std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](j - 16))
    ;
  *((_QWORD *)this + 64) = v7;
  std::vector<std::vector<CFRange>>::__clear[abi:ne180100]((uint64_t *)this + 69);
  result = *((_QWORD *)this + 67);
  v9 = *((_QWORD *)this + 66);
  while (result != v9)
    result = std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](result - 16);
  *((_QWORD *)this + 67) = v9;
  return result;
}

void QP::Lexer::loadLexerResource(QP::Lexer *this, CFURLRef url)
{
  const __CFString *PathComponent;
  const __CFString *v5;
  NSObject *v6;
  int v7;
  _QWORD block[7];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  const __CFString *v13;
  const __CFString *v14;

  if (url)
  {
    PathComponent = CFURLCopyLastPathComponent(url);
    v14 = PathComponent;
    v5 = CFURLCopyPathExtension(url);
    v13 = v5;
    if (CFStringsAreEqual(v5, CFSTR("plist")))
    {
      if ((QP::LexemeConverter::loadDateReferenceResourceURL(*((QP::LexemeConverter **)this + 43), url) & 1) == 0)
        *((_BYTE *)this + 432) = 0;
    }
    else if (CFStringsAreEqual(v5, CFSTR("mdplist")))
    {
      QP::LexemeConverter::loadDateReferenceResourceURL(*((QP::LexemeConverter **)this + 43), url);
    }
    else if (CFStringsAreEqual(v5, CFSTR("cache")))
    {
      v9 = 0;
      v10 = &v9;
      v11 = 0x2000000000;
      v12 = 1;
      v6 = *((_QWORD *)this + 74);
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 0x40000000;
      block[2] = ___ZN2QP5Lexer17loadLexerResourceEPK7__CFURL_block_invoke;
      block[3] = &unk_24DA25298;
      block[5] = this;
      block[6] = url;
      block[4] = &v9;
      dispatch_sync(v6, block);
      v7 = *((unsigned __int8 *)v10 + 24);
      *((_BYTE *)this + 432) = v7;
      if (v7 && CFStringHasSuffix(PathComponent, CFSTR("lexicon.cache")))
        QP::Lexer::updateWithKnowledgeSource(this, 1, *(unsigned __int8 *)(*((_QWORD *)this + 39) + 34));
      _Block_object_dispose(&v9, 8);
    }
    if (v5)
      CFRelease(v5);
    if (PathComponent)
      CFRelease(PathComponent);
  }
}

void sub_218E3C008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v9 - 48), 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v9 - 40), 0);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2QP5Lexer17loadLexerResourceEPK7__CFURL_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = QPDataDetectorLoadResources(*(const void ***)(*(_QWORD *)(a1 + 40) + 584), *(CFURLRef *)(a1 + 48));
  if (!(_DWORD)result)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  return result;
}

BOOL QP::Lexer::hasResources(QP::Lexer *this)
{
  _QWORD *v1;

  return *((_QWORD *)this + 39)
      && *((_QWORD *)this + 41)
      && *((_QWORD *)this + 73)
      && *((_QWORD *)this + 53)
      && (v1 = (_QWORD *)*((_QWORD *)this + 43)) != 0
      && *v1
      && v1[2]
      && v1[4]
      && v1[5]
      && v1[6]
      && *((_BYTE *)this + 432) != 0;
}

void QP::Lexer::setString(const void **this, const __CFString *a2, int a3)
{
  CFTypeRef v6;
  const __CFAttributedString *v7;
  CFRange v8;

  QP::Lexer::clear((QP::Lexer *)this);
  if (a2)
  {
    v6 = CFRetain(a2);
    nlp::CFScopedPtr<__CFString const*>::reset(this + 55, v6);
    v7 = (const __CFAttributedString *)this[56];
    v8.length = CFAttributedStringGetLength(v7);
    v8.location = 0;
    CFAttributedStringReplaceString(v7, v8, (CFStringRef)this[55]);
  }
  QP::Lexer::parse((QP::Lexer *)this, a3);
  QP::Lexer::updateWithKnowledgeSource((QP::Lexer *)this, 0, *((unsigned __int8 *)this[39] + 34));
}

void QP::Lexer::parse(QP::Lexer *this, int a2)
{
  CFIndex Length;
  std::string::size_type v5;
  __int128 *v6;
  __int128 *i;
  std::string *v8;
  uint64_t v9;
  NSObject *v10;
  const void *v11;
  _QWORD v12[4];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[5];
  uint64_t v18;
  CFIndex v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  CFMutableStringRef Mutable;
  std::string block;
  void *v25;
  QP::Lexer *v26;
  uint64_t v27;
  CFRange v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (!QP::Lexer::shouldSkipParsing(this))
  {
    QP::Lexer::resetParseVariables(this);
    v20 = 0;
    v21 = &v20;
    v22 = 0x2000000000;
    Mutable = 0;
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
    if (v21[3])
    {
      v17[0] = 0;
      v17[1] = v17;
      v17[2] = 0x3802000000;
      v17[3] = __Block_byref_object_copy__68;
      v17[4] = __Block_byref_object_dispose__69;
      v18 = 0;
      v19 = 0;
      Length = CFStringGetLength(*((CFStringRef *)this + 55));
      v18 = 0;
      v19 = Length;
      v13 = 0;
      v14 = &v13;
      v15 = 0x2000000000;
      v16 = 0;
      v12[0] = 0;
      v12[1] = v12;
      v12[2] = 0x2000000000;
      v12[3] = &v28;
      NLTaggerSetString();
      NLTaggerSetLocaleForRange();
      v5 = MEMORY[0x24BDAC760];
      NLTaggerEnumerateTokens();
      v6 = (__int128 *)*((_QWORD *)this + 20);
      for (i = (__int128 *)*((_QWORD *)this + 21); v6 != i; ++v6)
      {
        v8 = *(std::string **)v6;
        if (*(char *)(*(_QWORD *)v6 + 71) < 0)
          std::string::__init_copy_ctor_external(&block, v8[2].__r_.__value_.__l.__data_, v8[2].__r_.__value_.__l.__size_);
        else
          block = v8[2];
        if ((void **)((char *)this + 192) == std::__tree<std::string>::find<std::string>((uint64_t)this + 184, (void **)&block.__r_.__value_.__l.__data_))
        {
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)this + 17, v6);
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)this + 23, (void **)&block.__r_.__value_.__l.__data_, (uint64_t)&block);
        }
        if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
          operator delete(block.__r_.__value_.__l.__data_);
      }
      QP::Lexer::selectPersonLexemes(this);
      QP::Lexer::selectLocationLexemes(this);
      v9 = v21[3];
      v10 = *((_QWORD *)this + 74);
      block.__r_.__value_.__r.__words[0] = v5;
      block.__r_.__value_.__l.__size_ = 0x40000000;
      block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN2QP5Lexer19selectEntityLexemesEP10__CFString_block_invoke;
      v25 = &__block_descriptor_tmp_88;
      v26 = this;
      v27 = v9;
      dispatch_sync(v10, &block);
      QP::Lexer::selectKnowledgeSourceLexemes(this, &v28, v14[3], a2);
      QP::Lexer::sortLexemes(this);
      QP::Lexer::addLexemes(this);
      if (*(_BYTE *)(*((_QWORD *)this + 39) + 60))
        QP::Lexer::addEntityLexemes(this);
      v11 = (const void *)v21[3];
      if (v11)
        CFRelease(v11);
      _Block_object_dispose(v12, 8);
      _Block_object_dispose(&v13, 8);
      _Block_object_dispose(v17, 8);
    }
    _Block_object_dispose(&v20, 8);
  }
}

void sub_218E3C498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

_QWORD *QP::Lexer::lexemeFromLocations@<X0>(_QWORD *result@<X0>, unint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t *v4;
  unint64_t *v5;
  char *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  int64x2_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD *v34;
  char *v35;
  __int128 v36;
  int64x2_t v37;
  uint64_t v38;
  __int128 v39;
  unint64_t *v40;
  unint64_t v41;
  void *__p[2];
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64x2_t v50;
  uint64_t v51;
  _QWORD *v52;

  v4 = *a2;
  v5 = a2[1];
  v6 = (char *)((char *)v5 - (char *)*a2);
  if (v5 == *a2)
    goto LABEL_21;
  v7 = result;
  v47 = 0;
  v48 = 0;
  v45 = 0;
  v46 = 0;
  if (v6 != (char *)8)
  {
    v13 = 0;
    v14 = (int64x2_t *)(result + 63);
    v15 = -1;
    while (1)
    {
      v16 = *v4;
      if ((*v4 & 0x8000000000000000) != 0)
        goto LABEL_21;
      v17 = result[63];
      if (v16 >= (result[64] - v17) >> 4)
        goto LABEL_21;
      v18 = *(_QWORD *)(v17 + 16 * v16);
      if (v15 == -1)
        v15 = *(_QWORD *)(v18 + 72);
      else
        v13 = *(_QWORD *)(v18 + 80) + *(_QWORD *)(v18 + 72);
      if (++v4 == v5)
      {
        if (v15 == -1)
          goto LABEL_21;
        v19 = operator new();
        std::string::basic_string[abi:ne180100]<0>(__p, "Text");
        QP::Lexeme::Lexeme((std::string *)v19, (__int128 *)__p, v15, v13 - v15);
        v44 = v19;
        if (v43 < 0)
          operator delete(__p[0]);
        *(_WORD *)(v19 + 88) = 15;
        v21 = v7[63];
        v20 = v7[64];
        result = (_QWORD *)operator new();
        v22 = result;
        *result = &unk_24DA25548;
        result[1] = 0;
        result[2] = 0;
        result[3] = v19;
        v44 = 0;
        v23 = (uint64_t *)v7[64];
        v24 = v7[65];
        if ((unint64_t)v23 >= v24)
        {
          v26 = ((uint64_t)v23 - v14->i64[0]) >> 4;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 60)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v28 = v24 - v14->i64[0];
          if (v28 >> 3 > v27)
            v27 = v28 >> 3;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
            v29 = 0xFFFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          v52 = v7 + 65;
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)(v7 + 65), v29);
          v32 = (uint64_t *)&v30[16 * v26];
          *v32 = v19;
          v32[1] = (uint64_t)v22;
          v34 = (_QWORD *)v7[63];
          v33 = (_QWORD *)v7[64];
          if (v33 == v34)
          {
            v37 = vdupq_n_s64((unint64_t)v33);
            v35 = &v30[16 * v26];
          }
          else
          {
            v35 = &v30[16 * v26];
            do
            {
              v36 = *((_OWORD *)v33 - 1);
              v33 -= 2;
              *((_OWORD *)v35 - 1) = v36;
              v35 -= 16;
              *v33 = 0;
              v33[1] = 0;
            }
            while (v33 != v34);
            v37 = *v14;
          }
          v25 = v32 + 2;
          v7[63] = v35;
          v7[64] = v32 + 2;
          v50 = v37;
          v38 = v7[65];
          v7[65] = &v30[16 * v31];
          v51 = v38;
          v49 = v37.i64[0];
          result = (_QWORD *)std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer((uint64_t)&v49);
        }
        else
        {
          *v23 = v19;
          v23[1] = (uint64_t)result;
          v25 = v23 + 2;
        }
        v7[64] = v25;
        v39 = *(_OWORD *)(v7[63] + 16 * ((v20 - v21) >> 4));
        *(_OWORD *)a3 = v39;
        if (*((_QWORD *)&v39 + 1))
        {
          v40 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
        }
        return result;
      }
    }
  }
  v8 = *v4;
  if ((v8 & 0x8000000000000000) != 0 || (v9 = result[63], v8 >= (result[64] - v9) >> 4))
  {
LABEL_21:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    return result;
  }
  v10 = *(_OWORD *)(v9 + 16 * v8);
  *(_OWORD *)a3 = v10;
  if (*((_QWORD *)&v10 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

void sub_218E3C7A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void **a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::unique_ptr<QP::Lexeme>::reset[abi:ne180100](&a18, 0);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t QP::Lexer::lexemeAtLocation@<X0>(uint64_t this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  __int128 v4;
  unint64_t *v5;
  unint64_t v6;

  if ((a2 & 0x8000000000000000) != 0 || (v3 = *(_QWORD *)(this + 504), a2 >= (*(_QWORD *)(this + 512) - v3) >> 4))
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v4 = *(_OWORD *)(v3 + 16 * a2);
    *(_OWORD *)a3 = v4;
    if (*((_QWORD *)&v4 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  return this;
}

void QP::Lexer::enumerateLexemesAtParseIndex(QP::Lexer *this, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  __int128 v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  if ((a2 & 0x8000000000000000) == 0)
  {
    v5 = *((_QWORD *)this + 69);
    if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 70) - v5) >> 3) > a2 && QP::Lexer::hasResources(this))
    {
      v7 = *(_QWORD *)(*((_QWORD *)this + 41) + 40);
      if (v7 && *(_BYTE *)(v7 + 30))
      {
        v8 = *(_QWORD *)(v5 + 24 * a2);
        v9 = *(_QWORD *)(v5 + 24 * a2 + 8);
        if (v9 != v8)
        {
          v10 = -1;
          v11 = 24 * a2;
          do
          {
            if (v10 == -1)
              v10 = *(_QWORD *)(v9 - 16);
            v12 = *(_OWORD *)(*((_QWORD *)this + 63) + 16 * *(_QWORD *)(v9 - 8));
            v37 = v12;
            if (*((_QWORD *)&v12 + 1))
            {
              v13 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
              do
                v14 = __ldxr(v13);
              while (__stxr(v14 + 1, v13));
              v36 = v12;
              do
                v15 = __ldxr(v13);
              while (__stxr(v15 + 1, v13));
            }
            else
            {
              v36 = (unint64_t)v12;
            }
            (*(void (**)(uint64_t, __int128 *, uint64_t, _QWORD, _QWORD, _QWORD))(a3 + 16))(a3, &v36, v10 - *(_QWORD *)(v9 - 16), *(_QWORD *)(v9 - 8), *(_QWORD *)(v12 + 72), *(_QWORD *)(v12 + 80));
            v16 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
            if (*((_QWORD *)&v36 + 1))
            {
              v17 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
              do
                v18 = __ldaxr(v17);
              while (__stlxr(v18 - 1, v17));
              if (!v18)
              {
                ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                std::__shared_weak_count::__release_weak(v16);
              }
            }
            v19 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
            if (*((_QWORD *)&v37 + 1))
            {
              v20 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
              do
                v21 = __ldaxr(v20);
              while (__stlxr(v21 - 1, v20));
              if (!v21)
              {
                ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
                std::__shared_weak_count::__release_weak(v19);
              }
            }
            v9 -= 16;
          }
          while (v9 != *(_QWORD *)(*((_QWORD *)this + 69) + v11));
        }
      }
      else
      {
        v22 = (_QWORD *)(v5 + 24 * a2);
        v23 = (_QWORD *)*v22;
        v24 = (_QWORD *)v22[1];
        while (v23 != v24)
        {
          v25 = *(_OWORD *)(*((_QWORD *)this + 63) + 16 * v23[1]);
          v37 = v25;
          if (*((_QWORD *)&v25 + 1))
          {
            v26 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
            v35 = v25;
            do
              v28 = __ldxr(v26);
            while (__stxr(v28 + 1, v26));
          }
          else
          {
            v35 = (unint64_t)v25;
          }
          (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD, _QWORD, _QWORD))(a3 + 16))(a3, &v35, *v23, v23[1], *(_QWORD *)(v25 + 72), *(_QWORD *)(v25 + 80));
          v29 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
          if (*((_QWORD *)&v35 + 1))
          {
            v30 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          v32 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
          if (*((_QWORD *)&v37 + 1))
          {
            v33 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          v23 += 2;
        }
      }
    }
  }
}

void sub_218E3CAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void QP::Lexer::enumerateEntityLexemes(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  char v14;

  v14 = 0;
  v2 = *(uint64_t **)(a1 + 528);
  v3 = *(uint64_t **)(a1 + 536);
  if (v2 != v3)
  {
    do
    {
      v5 = (std::__shared_weak_count *)v2[1];
      v12 = *v2;
      v13 = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t, uint64_t *, char *))(a2 + 16))(a2, &v12, &v14);
      v8 = v13;
      if (v13)
      {
        v9 = (unint64_t *)&v13->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v2 += 2;
      if (v14)
        v11 = 1;
      else
        v11 = v2 == v3;
    }
    while (!v11);
  }
}

void sub_218E3CBDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void QP::Lexer::getExternalTypesForRange(uint64_t a1@<X0>, CFIndex a2@<X1>, CFIndex a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  CFAllocatorRef *v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFArray *v11;
  CFIndex Count;
  CFIndex i;
  const __CFString *ValueAtIndex;
  unsigned int v15;
  _WORD *v16;
  std::vector<std::string>::pointer end;
  __int128 v18;
  std::string *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  CFIndex location;
  std::vector<std::string>::pointer v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  std::string *v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  std::__shared_weak_count *length;
  unint64_t *v36;
  unint64_t v37;
  unsigned __int8 ***v38;
  unsigned __int8 ***v39;
  const __CFAllocator *v40;
  std::string *v41;
  __int128 v42;
  unint64_t *v43;
  unint64_t v44;
  CFIndex v45;
  CFIndex v46;
  _BOOL8 v47;
  const __CFString *v48;
  const __CFArray *v49;
  CFArrayRef v50;
  CFIndex v51;
  CFIndex v52;
  CFIndex v53;
  const __CFString *v54;
  unsigned int v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t j;
  __int128 v64;
  void *__p[2];
  std::string::size_type v66;
  CFRange v67;
  CFArrayRef theArray;
  CFTypeRef cf;
  std::vector<std::string> v70;
  char *v71;
  uint64_t *v72;
  uint64_t v73;
  char *v74;
  uint64_t *v75;
  uint64_t v76;
  CFRange v77;
  std::__split_buffer<std::string> __v;
  CFRange v79;

  v77.location = a2;
  v77.length = a3;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  memset(&v70, 0, sizeof(v70));
  v8 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
  if (*(_QWORD *)(a1 + 576))
  {
    v9 = *(const __CFString **)(a1 + 440);
    if (v9)
    {
      CFStringGetLength(v9);
      v10 = CFStringCreateWithSubstring(*v8, *(CFStringRef *)(a1 + 440), v77);
      *(_QWORD *)&v64 = v10;
      if (!QP::ParserGrammar::isIgnoredTerm(*(QP::ParserGrammar **)(a1 + 328), v10))
      {
        v79.length = CFStringGetLength(v10);
        v79.location = 0;
        cf = (CFTypeRef)copyStringInsertingSpacesBetweenIdeographCharacters(v10, v79);
        v11 = (const __CFArray *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 576) + 8))(**(_QWORD **)(a1 + 576));
        theArray = v11;
        if (v11)
        {
          Count = CFArrayGetCount(v11);
          if (Count >= 1)
          {
            for (i = 0; i != Count; ++i)
            {
              ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, i);
              QP::getUTF8StringFromCFString(ValueAtIndex, &__v);
              std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&__v, (uint64_t)&v77, __p);
              v15 = QP::ParserGrammar::symbolID(*(_QWORD *)(a1 + 328), (uint64_t)&__v);
              v16 = __p[0];
              v16[44] = QP::ParserGrammar::symbolFlag(*(QP::ParserGrammar **)(a1 + 328), v15);
              std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100](&v71, (__int128 *)__p);
              end = v70.__end_;
              if (v70.__end_ >= v70.__end_cap_.__value_)
              {
                v19 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v70, (__int128 *)&__v);
              }
              else
              {
                if (SHIBYTE(__v.__end_) < 0)
                {
                  std::string::__init_copy_ctor_external(v70.__end_, (const std::string::value_type *)__v.__first_, (std::string::size_type)__v.__begin_);
                }
                else
                {
                  v18 = *(_OWORD *)&__v.__first_;
                  v70.__end_->__r_.__value_.__r.__words[2] = (std::string::size_type)__v.__end_;
                  *(_OWORD *)&end->__r_.__value_.__l.__data_ = v18;
                }
                v19 = end + 1;
              }
              v70.__end_ = v19;
              v20 = (std::__shared_weak_count *)__p[1];
              if (__p[1])
              {
                v21 = (unint64_t *)((char *)__p[1] + 8);
                do
                  v22 = __ldaxr(v21);
                while (__stlxr(v22 - 1, v21));
                if (!v22)
                {
                  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                  std::__shared_weak_count::__release_weak(v20);
                }
              }
              if (SHIBYTE(__v.__end_) < 0)
                operator delete(__v.__first_);
            }
          }
          if (Count)
          {
            std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const(&)[5],CFRange &,void>("Text", (uint64_t)&v77, &v67);
            v23 = *(_QWORD *)(a1 + 328);
            std::string::basic_string[abi:ne180100]<0>(&__v, "Text");
            v24 = QP::ParserGrammar::symbolID(v23, (uint64_t)&__v);
            if (SHIBYTE(__v.__end_) < 0)
              operator delete(__v.__first_);
            location = v67.location;
            *(_WORD *)(location + 88) = QP::ParserGrammar::symbolFlag(*(QP::ParserGrammar **)(a1 + 328), v24);
            std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100](&v71, (__int128 *)&v67.location);
            std::string::basic_string[abi:ne180100]<0>(__p, "Text");
            v26 = v70.__end_;
            if (v70.__end_ >= v70.__end_cap_.__value_)
            {
              v28 = 0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_ - (char *)v70.__begin_) >> 3);
              v29 = v28 + 1;
              if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3) > v29)
                v29 = 0x5555555555555556 * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3) >= 0x555555555555555)
                v30 = 0xAAAAAAAAAAAAAAALL;
              else
                v30 = v29;
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v70.__end_cap_;
              if (v30)
                v31 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v70.__end_cap_, v30);
              else
                v31 = 0;
              v32 = v31 + v28;
              __v.__first_ = v31;
              __v.__begin_ = v32;
              __v.__end_cap_.__value_ = &v31[v30];
              v33 = *(_OWORD *)__p;
              v32->__r_.__value_.__r.__words[2] = v66;
              *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
              __p[1] = 0;
              v66 = 0;
              __p[0] = 0;
              __v.__end_ = v32 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&v70, &__v);
              v34 = v70.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&__v);
              v70.__end_ = v34;
              if (SHIBYTE(v66) < 0)
                operator delete(__p[0]);
            }
            else
            {
              v27 = *(_OWORD *)__p;
              v70.__end_->__r_.__value_.__r.__words[2] = v66;
              *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
              v70.__end_ = v26 + 1;
            }
            length = (std::__shared_weak_count *)v67.length;
            if (v67.length)
            {
              v36 = (unint64_t *)(v67.length + 8);
              do
                v37 = __ldaxr(v36);
              while (__stlxr(v37 - 1, v36));
              if (!v37)
              {
                ((void (*)(std::__shared_weak_count *))length->__on_zero_shared)(length);
                std::__shared_weak_count::__release_weak(length);
              }
            }
          }
          if (theArray)
            CFRelease(theArray);
        }
        if (cf)
          CFRelease(cf);
        v10 = (const __CFString *)v64;
      }
      if (v10)
        CFRelease(v10);
    }
  }
  v38 = (unsigned __int8 ***)*a4;
  v39 = (unsigned __int8 ***)a4[1];
  if ((unsigned __int8 ***)*a4 != v39)
  {
    v40 = *v8;
    while (1)
    {
      v41 = (std::string *)std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>((uint64_t)v70.__begin_, (uint64_t)v70.__end_, *v38);
      if (v41 != v70.__end_)
        break;
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)a5, (__int128 *)v38);
LABEL_81:
      v38 += 2;
      if (v38 == v39)
      {
        v38 = (unsigned __int8 ***)*a4;
        for (j = a4[1];
              (unsigned __int8 ***)j != v38;
        goto LABEL_85;
      }
    }
    v42 = *(_OWORD *)&v71[16 * (int)(-1431655765 * ((unint64_t)((char *)v41 - (char *)v70.__begin_) >> 3))];
    *(_OWORD *)__p = v42;
    if (*((_QWORD *)&v42 + 1))
    {
      v43 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = v77.location;
    v46 = v77.length;
    v67.location = (CFIndex)(*v38)[9];
    v67.length = v77.location - v67.location + v77.length;
    v47 = v45 + v46 >= CFStringGetLength(*(CFStringRef *)(a1 + 440));
    v48 = CFStringCreateWithSubstring(v40, *(CFStringRef *)(a1 + 440), v67);
    cf = v48;
    if (QP::ParserGrammar::isIgnoredTerm(*(QP::ParserGrammar **)(a1 + 328), v48))
    {
LABEL_74:
      if (v48)
        CFRelease(v48);
      v60 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v61 = (unint64_t *)((char *)__p[1] + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      goto LABEL_81;
    }
    v49 = (const __CFArray *)(*(uint64_t (**)(_QWORD, const __CFString *, _BOOL8))(*(_QWORD *)(a1 + 576) + 8))(**(_QWORD **)(a1 + 576), v48, v47);
    v50 = v49;
    theArray = v49;
    if (v49)
    {
      v51 = CFArrayGetCount(v49);
      v52 = v51;
      if (v51)
      {
        if (v51 >= 1)
        {
          v53 = 0;
          do
          {
            v54 = (const __CFString *)CFArrayGetValueAtIndex(theArray, v53);
            QP::getUTF8StringFromCFString(v54, &__v);
            std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&__v, (uint64_t)&v67, &v64);
            v55 = QP::ParserGrammar::symbolID(*(_QWORD *)(a1 + 328), (uint64_t)&__v);
            v56 = v64;
            *(_WORD *)(v56 + 88) = QP::ParserGrammar::symbolFlag(*(QP::ParserGrammar **)(a1 + 328), v55);
            std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100](&v74, &v64);
            v57 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
            if (*((_QWORD *)&v64 + 1))
            {
              v58 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
              do
                v59 = __ldaxr(v58);
              while (__stlxr(v59 - 1, v58));
              if (!v59)
              {
                ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                std::__shared_weak_count::__release_weak(v57);
              }
            }
            if (SHIBYTE(__v.__end_) < 0)
              operator delete(__v.__first_);
            ++v53;
          }
          while (v53 != v52);
          v50 = theArray;
          if (!theArray)
            goto LABEL_73;
        }
      }
      else
      {
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)a5, (__int128 *)__p);
      }
      CFRelease(v50);
    }
LABEL_73:
    v48 = (const __CFString *)cf;
    goto LABEL_74;
  }
LABEL_85:
  a4[1] = (uint64_t)v38;
  std::vector<std::shared_ptr<QP::Lexeme>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::Lexeme>*>,std::__wrap_iter<std::shared_ptr<QP::Lexeme>*>>(a4, (uint64_t)v38, (uint64_t *)v71, v72, ((char *)v72 - v71) >> 4);
  std::vector<std::shared_ptr<QP::Lexeme>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::Lexeme>*>,std::__wrap_iter<std::shared_ptr<QP::Lexeme>*>>(a4, a4[1], (uint64_t *)v74, v75, ((char *)v75 - v74) >> 4);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v70;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v71;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v74;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_218E3D284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t ***__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, const void *a20,const void *a21,uint64_t **a22,uint64_t a23,uint64_t a24,uint64_t *a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;

  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)(v28 - 136));
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  nlp::CFScopedPtr<__CFArray const*>::reset(&a20, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a21, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0);
  __p = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a22 = &a25;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  a25 = &a28;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  _Unwind_Resume(a1);
}

uint64_t QP::Lexer::containsLegacyQuerySyntax(QP::Lexer *this)
{
  const __CFSet *v2;
  CFIndex Length;
  char v4;
  const __CFAllocator *v5;
  CFRange v6;
  int CharacterFromSet;
  CFIndex location;
  CFRange v10;
  CFIndex v11;
  CFStringRef v12;
  CFStringRef v13;
  int v14;
  CFRange result;

  if (*((_QWORD *)this + 55) && (v2 = (const __CFSet *)*((_QWORD *)this + 44)) != 0 && CFSetGetCount(v2))
  {
    Length = CFStringGetLength(*((CFStringRef *)this + 55));
    v4 = 0;
    v6.location = 0;
    v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v6.length = Length;
    do
    {
      if (v6.location >= Length)
        break;
      CharacterFromSet = CFStringFindCharacterFromSet(*((CFStringRef *)this + 55), *((CFCharacterSetRef *)this + 48), v6, 0, &result);
      location = result.location;
      if (!CharacterFromSet || result.location < 1)
        break;
      while (location >= 2)
      {
        if (CFStringGetCharacterAtIndex(*((CFStringRef *)this + 55), --location) == 32)
        {
          v10.location = location + 1;
          goto LABEL_14;
        }
      }
      v10.location = 0;
LABEL_14:
      v11 = result.location;
      v10.length = result.location - v10.location;
      v12 = CFStringCreateWithSubstring(v5, *((CFStringRef *)this + 55), v10);
      if (v12)
      {
        v13 = v12;
        v4 |= CFSetContainsValue(*((CFSetRef *)this + 44), v12) != 0;
        if ((v4 & 1) != 0)
          v14 = 3;
        else
          v14 = 0;
        CFRelease(v13);
      }
      else
      {
        if ((v4 & 1) != 0)
        {
          v4 = 1;
          return v4 & 1;
        }
        v14 = 0;
        v4 = 0;
      }
      v6.location = v11 + 1;
      v6.length = Length - v11;
    }
    while (!v14);
  }
  else
  {
    v4 = 0;
  }
  return v4 & 1;
}

void sub_218E3D57C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

BOOL QP::Lexer::containsBlocklistedString(QP::Lexer *this)
{
  const __CFString *v2;

  v2 = (const __CFString *)*((_QWORD *)this + 55);
  return v2 && CFStringGetLength(v2) == 3 && CFStringsAreEqual(*((CFStringRef *)this + 55), CFSTR("app"));
}

void QP::Lexer::expand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  CFIndex Length;
  uint64_t *v7;
  __int128 *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  CFIndex v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;
  CFIndex v23;
  CFIndex v24;
  CFIndex v25;
  CFIndex v26;
  uint64_t v27;
  const __CFString *v28;
  uint64_t (**v29)(uint64_t *, uint64_t *);
  void ***v30;
  uint64_t v31;
  uint64_t *v32;
  void **v33;
  void **v34;
  void **v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  const __CFString *v44;
  CFIndex v45;
  CFIndex v46;
  CFIndex v47;
  uint64_t v48;
  const __CFString *v49;
  void **v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t (*v54)(uint64_t *, uint64_t *);
  __int128 v55;
  unint64_t *v56;
  unint64_t v57;
  __int128 v58;
  unint64_t *v59;
  unint64_t v60;
  char v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  CFIndex v71;
  CFIndex v72;
  uint64_t v73;
  const __CFString *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t *, uint64_t *);
  CFIndex v78;
  CFIndex v79;
  uint64_t v80;
  const __CFString *v81;
  CFIndex v82;
  CFIndex v83;
  CFIndex v84;
  BOOL v85;
  uint64_t v86;
  const __CFString *v87;
  void **v89;
  void **v90;
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  __int128 v95;
  __int128 v96;
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  void **v100;
  void ***v101;
  uint64_t v102;
  __n128 (*v103)(_QWORD *, uint64_t);
  void (*v104)(uint64_t);
  void *v105;
  void *v106;
  uint64_t v107;
  uint64_t (*v108)(uint64_t *, uint64_t *);
  uint64_t (**v109)(uint64_t *, uint64_t *);
  uint64_t v110;
  __n128 (*v111)(_QWORD *, uint64_t);
  void (*v112)(uint64_t);
  _QWORD v113[4];
  CFRange v114;
  CFRange v115;
  CFRange v116;

  Length = CFStringGetLength(*(CFStringRef *)(a1 + 440));
  v7 = *(uint64_t **)a3;
  v8 = *(__int128 **)(a3 + 8);
  v9 = 126 - 2 * __clz(((uint64_t)v8 - *(_QWORD *)a3) >> 4);
  v70 = v8 == *(__int128 **)a3;
  v108 = QP::lexeme_less_than_range;
  if (v70)
    v10 = 0;
  else
    v10 = v9;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*,false>(v7, v8, &v108, v10, 1);
  v108 = 0;
  v109 = &v108;
  v110 = 0x4002000000;
  v111 = __Block_byref_object_copy__3;
  v112 = __Block_byref_object_dispose__3;
  memset(v113, 0, 24);
  v100 = 0;
  v101 = &v100;
  v102 = 0x4002000000;
  v103 = __Block_byref_object_copy__57;
  v104 = __Block_byref_object_dispose__58;
  v106 = 0;
  v107 = 0;
  v105 = 0;
  v13 = a3;
  v11 = *(__int128 **)a3;
  v12 = *(__int128 **)(v13 + 8);
  if (v12 == v11)
  {
    v43 = *(_QWORD *)(a1 + 344);
    v44 = *(const __CFString **)(a1 + 440);
    v14 = MEMORY[0x24BDAC760];
    v99[0] = MEMORY[0x24BDAC760];
    v99[1] = 0x40000000;
    v99[2] = ___ZN2QP5Lexer6expandERNSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEERNS1_6vectorINS1_10shared_ptrINS_6LexemeEEENS6_ISH_EEEESK__block_invoke;
    v99[3] = &unk_24DA252C0;
    v99[4] = &v100;
    v99[5] = &v108;
    QP::LexemeConverter::enumerateEntitiesWithString(v43, v44, 0, 0, Length, 0, Length, (uint64_t)v99);
    v15 = 0;
  }
  else
  {
    v14 = MEMORY[0x24BDAC760];
    v15 = 0;
    v16 = 0;
    v17 = -1;
    do
    {
      v18 = *(_QWORD *)(*(_QWORD *)v11 + 72);
      if (v17 == -1
        || ((v19 = *(_QWORD *)(*(_QWORD *)v11 + 80) + v18, v20 = v17 + v16, v18 >= v17)
          ? (v21 = v19 < v20)
          : (v21 = 0),
            !v21 && (v18 > v17 ? (v22 = v19 <= v20) : (v22 = 0), !v22))
        || *(_BYTE *)(*(_QWORD *)(a1 + 312) + 65))
      {
        v23 = v18 - v15;
        if (v18 > v15)
        {
          v114.location = v15;
          v114.length = v18 - v15;
          v25 = QP::Lexer::contentRangeFromRange((QP::Lexer *)a1, v114);
          if (v25 != -1)
          {
            v26 = v24;
            v27 = *(_QWORD *)(a1 + 344);
            v28 = *(const __CFString **)(a1 + 440);
            v98[0] = v14;
            v98[1] = 0x40000000;
            v98[2] = ___ZN2QP5Lexer6expandERNSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEERNS1_6vectorINS1_10shared_ptrINS_6LexemeEEENS6_ISH_EEEESK__block_invoke_2;
            v98[3] = &unk_24DA252E8;
            v98[4] = &v100;
            v98[5] = &v108;
            QP::LexemeConverter::enumerateEntitiesWithString(v27, v28, 0, v25, v26, v15, v23, (uint64_t)v98);
          }
        }
        v29 = v109;
        if (*(_WORD *)(*(_QWORD *)v11 + 88) == 15)
        {
          v30 = v101;
          v31 = ((char *)v109[6] - (char *)v109[5]) >> 4;
          v32 = (uint64_t *)v101[6];
          v33 = v101[7];
          if (v32 >= (uint64_t *)v33)
          {
            v35 = v101[5];
            v36 = ((char *)v32 - (char *)v35) >> 3;
            if ((unint64_t)(v36 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v37 = (char *)v33 - (char *)v35;
            v38 = ((char *)v33 - (char *)v35) >> 2;
            if (v38 <= v36 + 1)
              v38 = v36 + 1;
            if (v37 >= 0x7FFFFFFFFFFFFFF8)
              v39 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v39 = v38;
            if (v39)
            {
              v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long>>((uint64_t)(v101 + 7), v39);
              v35 = v30[5];
              v32 = (uint64_t *)v30[6];
            }
            else
            {
              v40 = 0;
            }
            v41 = (uint64_t *)&v40[8 * v36];
            *v41 = v31;
            v34 = (void **)(v41 + 1);
            while (v32 != (uint64_t *)v35)
            {
              v42 = *--v32;
              *--v41 = v42;
            }
            v30[5] = (void **)v41;
            v30[6] = v34;
            v30[7] = (void **)&v40[8 * v39];
            if (v35)
              operator delete(v35);
          }
          else
          {
            *v32 = v31;
            v34 = (void **)(v32 + 1);
          }
          v30[6] = v34;
          v29 = v109;
        }
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)v29 + 5, v11);
        v17 = *(_QWORD *)(*(_QWORD *)v11 + 72);
        v16 = *(_QWORD *)(*(_QWORD *)v11 + 80);
        v15 = v16 + v17;
      }
      ++v11;
    }
    while (v11 != v12);
  }
  if (Length > v15)
  {
    v115.location = v15;
    v115.length = Length - v15;
    v46 = QP::Lexer::contentRangeFromRange((QP::Lexer *)a1, v115);
    if (v46 != -1)
    {
      v47 = v45;
      v48 = *(_QWORD *)(a1 + 344);
      v49 = *(const __CFString **)(a1 + 440);
      v97[0] = v14;
      v97[1] = 0x40000000;
      v97[2] = ___ZN2QP5Lexer6expandERNSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEERNS1_6vectorINS1_10shared_ptrINS_6LexemeEEENS6_ISH_EEEESK__block_invoke_3;
      v97[3] = &unk_24DA25310;
      v97[4] = &v100;
      v97[5] = &v108;
      QP::LexemeConverter::enumerateEntitiesWithString(v48, v49, 0, v46, v47, v15, Length - v15, (uint64_t)v97);
    }
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 312) + 30))
  {
    v50 = v101[5];
    v89 = v101[6];
    if (v50 != v89)
    {
      do
      {
        v90 = v50;
        v51 = *v50;
        v52 = *v50;
        while (1)
        {
          v53 = (char *)v52 + 1;
          v54 = v109[5];
          if ((unint64_t)v52 + 1 >= ((char *)v109[6] - (char *)v54) >> 4)
            break;
          v55 = *((_OWORD *)v54 + (unint64_t)v52);
          v96 = v55;
          if (*((_QWORD *)&v55 + 1))
          {
            v56 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
            do
              v57 = __ldxr(v56);
            while (__stxr(v57 + 1, v56));
            v54 = v109[5];
          }
          v58 = *((_OWORD *)v54 + (unint64_t)v53);
          v95 = v58;
          if (*((_QWORD *)&v58 + 1))
          {
            v59 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
            do
              v60 = __ldxr(v59);
            while (__stxr(v60 + 1, v59));
          }
          if (!*(_WORD *)(v58 + 88)
            && (v68 = v55, *(_WORD *)(v55 + 88))
            && ((v69 = *(_QWORD *)(v58 + 80) + *(_QWORD *)(v58 + 72), v69 == Length) ? (v70 = v51 == 0) : (v70 = 1),
                v70))
          {
            v71 = Length;
            v72 = *(_QWORD *)(v55 + 72);
            v73 = *(_QWORD *)(a1 + 344);
            v74 = *(const __CFString **)(a1 + 440);
            v94[0] = v14;
            v94[1] = 0x40000000;
            v94[2] = ___ZN2QP5Lexer6expandERNSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEERNS1_6vectorINS1_10shared_ptrINS_6LexemeEEENS6_ISH_EEEESK__block_invoke_4;
            v94[3] = &unk_24DA25338;
            v94[4] = &v108;
            v94[5] = a2;
            QP::LexemeConverter::enumerateEntitiesWithString(v73, v74, 0, v72, v69 - v72, v72, v69 - v72, (uint64_t)v94);
            v75 = 16 * (_QWORD)v52 + 32;
            v76 = (uint64_t)v52 + 1;
            while (1)
            {
              v77 = v109[5];
              if (++v76 >= (unint64_t)(((char *)v109[6] - (char *)v77) >> 4))
              {
                v61 = 1;
                v52 = v53;
                Length = v71;
                goto LABEL_58;
              }
              std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](&v95, (uint64_t *)((char *)v77 + v75));
              v78 = *(_QWORD *)(v68 + 72);
              if (*(_WORD *)(v95 + 88))
                break;
              v75 += 16;
              v79 = *(_QWORD *)(v95 + 72) - v78 + *(_QWORD *)(v95 + 80);
              v80 = *(_QWORD *)(a1 + 344);
              v81 = *(const __CFString **)(a1 + 440);
              v93[0] = v14;
              v93[1] = 0x40000000;
              v93[2] = ___ZN2QP5Lexer6expandERNSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEERNS1_6vectorINS1_10shared_ptrINS_6LexemeEEENS6_ISH_EEEESK__block_invoke_5;
              v93[3] = &unk_24DA25360;
              v93[4] = &v108;
              v93[5] = a2;
              QP::LexemeConverter::enumerateEntitiesWithString(v80, v81, 0, v78, v79, v78, v79, (uint64_t)v93);
            }
            v116.length = *(_QWORD *)(v95 + 72) - v78;
            v116.location = *(_QWORD *)(v68 + 72);
            v83 = QP::Lexer::contentRangeFromRange((QP::Lexer *)a1, v116);
            v84 = v82;
            v85 = *(_QWORD *)(v68 + 72) == v83 && *(_QWORD *)(v68 + 80) == v82;
            Length = v71;
            if (!v85)
            {
              v86 = *(_QWORD *)(a1 + 344);
              v87 = *(const __CFString **)(a1 + 440);
              v92[0] = v14;
              v92[1] = 0x40000000;
              v92[2] = ___ZN2QP5Lexer6expandERNSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEERNS1_6vectorINS1_10shared_ptrINS_6LexemeEEENS6_ISH_EEEESK__block_invoke_6;
              v92[3] = &unk_24DA25388;
              v92[4] = &v108;
              v92[5] = a2;
              QP::LexemeConverter::enumerateEntitiesWithString(v86, v87, 0, v83, v84, v83, v84, (uint64_t)v92);
            }
            v61 = 1;
            v52 = v53;
          }
          else
          {
            v61 = 0;
          }
LABEL_58:
          v62 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
          if (*((_QWORD *)&v95 + 1))
          {
            v63 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
          v65 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
          if (!*((_QWORD *)&v96 + 1))
            goto LABEL_67;
          v66 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
            if ((v61 & 1) == 0)
              break;
          }
          else
          {
LABEL_67:
            if ((v61 & 1) == 0)
              break;
          }
        }
        v50 = v90 + 1;
      }
      while (v90 + 1 != v89);
    }
  }
  std::vector<std::shared_ptr<QP::Lexeme>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::Lexeme>*>,std::__wrap_iter<std::shared_ptr<QP::Lexeme>*>>(a4, *a4, (uint64_t *)v109[5], (uint64_t *)v109[6], ((char *)v109[6] - (char *)v109[5]) >> 4);
  _Block_object_dispose(&v100, 8);
  if (v105)
  {
    v106 = v105;
    operator delete(v105);
  }
  _Block_object_dispose(&v108, 8);
  v100 = (void **)v113;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v100);
}

void sub_218E3DCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  _Block_object_dispose((const void *)(v11 - 232), 8);
  v13 = *(void **)(v11 - 192);
  if (v13)
  {
    *(_QWORD *)(v11 - 184) = v13;
    operator delete(v13);
  }
  _Block_object_dispose((const void *)(v11 - 168), 8);
  *(_QWORD *)(v11 - 232) = a11;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 232));
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__3(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

__n128 __Block_byref_object_copy__57(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__58(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

char *std::vector<std::shared_ptr<QP::Lexeme>>::emplace_back<std::shared_ptr<QP::Lexeme>&>(char **a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v29;
  int64x2_t v30;
  char *v31;
  uint64_t v32;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v32 = v4;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(v4, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v30 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v31 = v27;
    v29 = v26.i64[0];
    std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer((uint64_t)&v29);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return v11 - 16;
}

uint64_t QP::Lexer::contentRangeFromRange(QP::Lexer *this, CFRange a2)
{
  CFIndex *v2;
  CFIndex *v3;
  CFIndex length;
  CFIndex location;
  const __CFCharacterSet *Predefined;
  uint64_t v8;
  unint64_t v9;
  CFIndex *v10;
  unint64_t v11;
  unint64_t v12;
  CFIndex *v13;
  CFIndex *v14;
  CFIndex v15;
  CFIndex v16;
  CFIndex v17;
  CFIndex v18;
  CFIndex v19;
  CFIndex v20;
  CFIndex v22;
  unint64_t v26;
  CFIndex *v27;
  CFIndex *v28;
  uint64_t v29;
  uint64_t v30;
  CFIndex *v31;
  CFIndex v32;
  uint64_t v33;
  CFIndex v35;
  CFRange v38;

  v2 = (CFIndex *)*((_QWORD *)this + 57);
  v3 = (CFIndex *)*((_QWORD *)this + 58);
  if (v3 == v2 || !*((_QWORD *)this + 55))
    return -1;
  length = a2.length;
  location = a2.location;
  if (a2.length != 1)
    goto LABEL_6;
  Predefined = CFCharacterSetGetPredefined(kCFCharacterSetWhitespace);
  v38.location = location;
  v38.length = 1;
  if (CFStringFindCharacterFromSet(*((CFStringRef *)this + 55), Predefined, v38, 0, 0))
    return -1;
  v2 = (CFIndex *)*((_QWORD *)this + 57);
  v3 = (CFIndex *)*((_QWORD *)this + 58);
LABEL_6:
  v8 = -1;
  if (v3 == v2)
    return v8;
  v9 = 0xAAAAAAAAAAAAAAABLL * (v3 - v2);
  v10 = v2;
  v11 = v9;
  do
  {
    v12 = v11 >> 1;
    v13 = &v10[3 * (v11 >> 1)];
    v15 = *v13;
    v16 = v13[1];
    v14 = v13 + 3;
    v11 += ~(v11 >> 1);
    if (v16 + v15 <= location)
      v10 = v14;
    else
      v11 = v12;
  }
  while (v11);
  if (v10 == v3)
    return -1;
  v17 = 0;
  v18 = location + length;
  v8 = -1;
  do
  {
    v19 = *v10;
    v20 = v10[1];
    if (location != *v10 || length != v20)
    {
      v22 = v20 + v19;
      if ((v19 < location || v22 >= v18) && (v19 <= location || v22 > v18))
        break;
    }
    if ((*((_BYTE *)v10 + 17) & 8) == 0)
    {
      v17 = v10[1];
      v8 = *v10;
      break;
    }
    v10 += 3;
    v8 = v19;
    v17 = v20;
  }
  while (v10 != v3);
  if (v8 != -1 && v8 + v17 != v18)
  {
    do
    {
      v26 = v9 >> 1;
      v27 = &v3[-3 * (v9 >> 1)];
      v29 = *(v27 - 3);
      v30 = *(v27 - 2);
      v28 = v27 - 3;
      v9 += ~(v9 >> 1);
      if (v30 + v29 > v18)
        v3 = v28;
      else
        v9 = v26;
    }
    while (v9);
    if (v2 != v3)
    {
      v31 = v3;
      while (1)
      {
        v32 = *(v31 - 3);
        v33 = *(v31 - 2);
        v31 -= 3;
        if (location != v32 || length != v33)
        {
          v35 = v33 + v32;
          if ((v32 < location || v35 >= v18) && (v32 <= location || v35 > v18))
            break;
        }
        if ((*((_BYTE *)v3 - 7) & 8) != 0)
        {
          v3 = v31;
          if (v31 != v2)
            continue;
        }
        return v8;
      }
      CFStringGetLength(*((CFStringRef *)this + 55));
    }
  }
  return v8;
}

void ___ZN2QP5Lexer6expandERNSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEERNS1_6vectorINS1_10shared_ptrINS_6LexemeEEENS6_ISH_EEEESK__block_invoke_4(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  std::string __p;

  v4 = *(_QWORD *)a2;
  if (*(char *)(*(_QWORD *)a2 + 71) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v4 + 48), *(_QWORD *)(v4 + 56));
  else
    __p = *(std::string *)(v4 + 48);
  if ((void **)(*(_QWORD *)(a1 + 40) + 8) == std::__tree<std::string>::find<std::string>(*(_QWORD *)(a1 + 40), (void **)&__p.__r_.__value_.__l.__data_))
  {
    std::vector<std::shared_ptr<QP::Lexeme>>::emplace_back<std::shared_ptr<QP::Lexeme>&>((char **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(*(uint64_t ***)(a1 + 40), (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_218E3E4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN2QP5Lexer6expandERNSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEERNS1_6vectorINS1_10shared_ptrINS_6LexemeEEENS6_ISH_EEEESK__block_invoke_5(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  std::string __p;

  v4 = *(_QWORD *)a2;
  if (*(char *)(*(_QWORD *)a2 + 71) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v4 + 48), *(_QWORD *)(v4 + 56));
  else
    __p = *(std::string *)(v4 + 48);
  if ((void **)(*(_QWORD *)(a1 + 40) + 8) == std::__tree<std::string>::find<std::string>(*(_QWORD *)(a1 + 40), (void **)&__p.__r_.__value_.__l.__data_))
  {
    std::vector<std::shared_ptr<QP::Lexeme>>::emplace_back<std::shared_ptr<QP::Lexeme>&>((char **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(*(uint64_t ***)(a1 + 40), (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_218E3E5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN2QP5Lexer6expandERNSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEERNS1_6vectorINS1_10shared_ptrINS_6LexemeEEENS6_ISH_EEEESK__block_invoke_6(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  std::string __p;

  v4 = *(_QWORD *)a2;
  if (*(char *)(*(_QWORD *)a2 + 71) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v4 + 48), *(_QWORD *)(v4 + 56));
  else
    __p = *(std::string *)(v4 + 48);
  if ((void **)(*(_QWORD *)(a1 + 40) + 8) == std::__tree<std::string>::find<std::string>(*(_QWORD *)(a1 + 40), (void **)&__p.__r_.__value_.__l.__data_))
  {
    std::vector<std::shared_ptr<QP::Lexeme>>::emplace_back<std::shared_ptr<QP::Lexeme>&>((char **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(*(uint64_t ***)(a1 + 40), (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_218E3E674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL QP::Lexer::shouldSkipParsing(QP::Lexer *this)
{
  const __CFString *v2;

  if (*(_DWORD *)(*((_QWORD *)this + 39) + 16) == 1 && QP::Lexer::containsBlocklistedString(this))
    return 1;
  v2 = (const __CFString *)*((_QWORD *)this + 55);
  return !v2 || !CFStringGetLength(v2) || !QP::Lexer::hasResources(this);
}

void QP::Lexer::resetParseVariables(QP::Lexer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  char *v6;
  char *v7;
  CFMutableDictionaryRef Mutable;

  *(_OWORD *)this = xmmword_218E9F890;
  *((_OWORD *)this + 1) = xmmword_218E9F890;
  *((_OWORD *)this + 2) = xmmword_218E9F890;
  *((_OWORD *)this + 3) = xmmword_218E9F890;
  *((_QWORD *)this + 9) = *((_QWORD *)this + 8);
  *((_QWORD *)this + 12) = *((_QWORD *)this + 11);
  *((_QWORD *)this + 15) = *((_QWORD *)this + 14);
  v2 = *((_QWORD *)this + 18);
  v3 = *((_QWORD *)this + 17);
  while (v2 != v3)
    v2 = std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v2 - 16);
  *((_QWORD *)this + 18) = v3;
  v5 = *((_QWORD *)this + 20);
  for (i = *((_QWORD *)this + 21); i != v5; i = std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](i - 16))
    ;
  *((_QWORD *)this + 21) = v5;
  std::__tree<std::string>::destroy((uint64_t)this + 184, *((char **)this + 24));
  *((_QWORD *)this + 23) = (char *)this + 192;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 24) = 0;
  std::__tree<std::string>::destroy((uint64_t)this + 208, *((char **)this + 27));
  *((_QWORD *)this + 26) = (char *)this + 216;
  *((_QWORD *)this + 27) = 0;
  v7 = (char *)*((_QWORD *)this + 30);
  v6 = (char *)this + 240;
  *((_QWORD *)v6 - 2) = 0;
  std::__tree<std::string>::destroy((uint64_t)(v6 - 8), v7);
  *((_QWORD *)v6 - 1) = v6;
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)v6 + 8, Mutable);
}

void QP::Lexer::tagTokenWhitespace(uint64_t *a1, uint64_t *a2, CFMutableStringRef theString)
{
  const void *v6;
  const void *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  CFRange v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  const __CFString *v22;
  CFStringRef v23;
  unint64_t v24;
  CFRange *v25;
  CFRange v26;
  CFIndex *p_length;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  CFRange *v36;
  char *v37;
  CFRange v38;
  char *v39;
  char *v40;
  __int128 v41;
  std::string *v42;
  std::string::size_type size;
  std::string *v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::string v49;
  std::string v50;
  void *v51[2];
  std::string::size_type v52;
  std::string __p;
  __int128 v54;
  const __CFString *v55;
  const void *v56;

  if (!*((_BYTE *)a1 + 433))
    goto LABEL_27;
  v56 = 0;
  if ((*((_BYTE *)a2 + 17) & 4) == 0)
  {
    v6 = (const void *)NLTaggerCopyTagForCurrentToken();
    v7 = (const void *)*MEMORY[0x24BE1E520];
    v56 = v6;
    v8 = *a1;
    if (v6 == v7)
    {
      if (v8 == -1)
      {
        v9 = *(_OWORD *)a2;
        goto LABEL_19;
      }
      a1[1] = *a2 - v8 + a2[1];
    }
    else if (v8 != -1)
    {
      QP::Lexer::selectPersonLexemes((QP::Lexer *)a1);
      v9 = xmmword_218E9F890;
LABEL_19:
      *(_OWORD *)a1 = v9;
    }
    v13 = (__int128 *)(a1 + 2);
    v18 = a1[2];
    if (v6 == (const void *)*MEMORY[0x24BE1E528])
    {
      if (v18 != -1)
      {
        a1[3] = *a2 - v18 + a2[1];
        if (!v6)
          goto LABEL_27;
        goto LABEL_26;
      }
      v19 = *(_OWORD *)a2;
      goto LABEL_24;
    }
    if (v18 == -1)
      goto LABEL_25;
    QP::Lexer::selectLocationLexemes((QP::Lexer *)a1);
LABEL_23:
    v19 = xmmword_218E9F890;
LABEL_24:
    *v13 = v19;
    goto LABEL_25;
  }
  v10 = NLTaggerCopyTagForCurrentToken();
  v6 = (const void *)v10;
  v11 = *MEMORY[0x24BE1E500];
  v56 = (const void *)v10;
  if (v10 == v11)
  {
    *((_OWORD *)a1 + 2) = *(_OWORD *)a2;
    a1[6] = a2[1] + *a2;
    if (!v10)
      goto LABEL_27;
    goto LABEL_26;
  }
  if (v10 == *MEMORY[0x24BE1E4F8])
  {
    v13 = (__int128 *)(a1 + 4);
    v12 = a1[4];
    if (v12 != -1)
    {
      v14.location = a1[6];
      if (v14.location != -1)
      {
        v15 = *a2;
        a1[5] = *a2 - v12 + a2[1];
        v14.length = v15 - v14.location;
        a1[7] = v15 - v14.location;
        v55 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFStringRef)a1[55], v14);
        QP::getUTF8StringFromCFString(v55, &__p);
        std::allocate_shared[abi:ne180100]<QP::LexemeQuotedText,std::allocator<QP::LexemeQuotedText>,CFRange &,std::string,void>(a1 + 4, (uint64_t)&__p, v51);
        v16 = (char *)v51[0];
        v54 = *(_OWORD *)v51;
        v51[0] = 0;
        v51[1] = 0;
        v17 = v16;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          v17 = (char *)v54;
        }
        if (v17[71] < 0)
          std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v17 + 6), *((_QWORD *)v17 + 7));
        else
          __p = *(std::string *)(v17 + 2);
        if (a1 + 24 == (uint64_t *)std::__tree<std::string>::find<std::string>((uint64_t)(a1 + 23), (void **)&__p.__r_.__value_.__l.__data_))
        {
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)a1 + 17, &v54);
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a1 + 23, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
          std::to_string(&v50, a1[4]);
          std::to_string(&v49, a1[5]);
          if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v42 = &v49;
          else
            v42 = (std::string *)v49.__r_.__value_.__r.__words[0];
          if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
          else
            size = v49.__r_.__value_.__l.__size_;
          v44 = std::string::append(&v50, (const std::string::value_type *)v42, size);
          v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
          v52 = v44->__r_.__value_.__r.__words[2];
          *(_OWORD *)v51 = v45;
          v44->__r_.__value_.__l.__size_ = 0;
          v44->__r_.__value_.__r.__words[2] = 0;
          v44->__r_.__value_.__r.__words[0] = 0;
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)a1 + 26, v51, (uint64_t)v51);
          if (SHIBYTE(v52) < 0)
            operator delete(v51[0]);
          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v49.__r_.__value_.__l.__data_);
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v50.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v46 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
        if (*((_QWORD *)&v54 + 1))
        {
          v47 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        if (v55)
          CFRelease(v55);
        v6 = v56;
      }
    }
    goto LABEL_23;
  }
LABEL_25:
  if (v6)
LABEL_26:
    CFRelease(v6);
LABEL_27:
  v20 = *(_QWORD *)(a1[41] + 40);
  if (v20)
  {
    if (!*(_BYTE *)(v20 + 31))
    {
      v34 = a1[58];
      if (v34 != a1[57])
      {
        v35 = *(_QWORD *)(v34 - 8);
        if ((v35 & 0x800) == 0 && ((*((_DWORD *)a2 + 4) | v35) & 0x80) != 0)
          CFStringAppend(theString, CFSTR(" "));
      }
    }
  }
  v21 = a1[39];
  if (*(_BYTE *)(v21 + 60) && *(_BYTE *)(v21 + 61))
  {
    v22 = (const __CFString *)NLTaggerCopyTagForCurrentToken();
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
    v23 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFStringRef)a1[55], *(CFRange *)a2);
    v51[0] = (void *)v23;
    if (v22 && CFStringCompare(v22, v23, 1uLL))
      CFDictionarySetValue((CFMutableDictionaryRef)a1[38], v23, v22);
    if (v23)
      CFRelease(v23);
    if (v22)
      CFRelease(v22);
  }
  v25 = (CFRange *)a1[58];
  v24 = a1[59];
  if ((unint64_t)v25 >= v24)
  {
    v28 = a1[57];
    v29 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v25 - v28) >> 3);
    v30 = v29 + 1;
    if (v29 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - v28) >> 3);
    if (2 * v31 > v30)
      v30 = 2 * v31;
    if (v31 >= 0x555555555555555)
      v32 = 0xAAAAAAAAAAAAAAALL;
    else
      v32 = v30;
    if (v32)
      v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 59), v32);
    else
      v33 = 0;
    v36 = (CFRange *)&v33[24 * v29];
    v37 = &v33[24 * v32];
    v38 = *(CFRange *)a2;
    v36[1].location = a2[2];
    *v36 = v38;
    p_length = &v36[1].length;
    v40 = (char *)a1[57];
    v39 = (char *)a1[58];
    if (v39 != v40)
    {
      do
      {
        v41 = *(_OWORD *)(v39 - 24);
        v36[-1].length = *((_QWORD *)v39 - 1);
        *(_OWORD *)&v36[-2].length = v41;
        v36 = (CFRange *)((char *)v36 - 24);
        v39 -= 24;
      }
      while (v39 != v40);
      v39 = (char *)a1[57];
    }
    a1[57] = (uint64_t)v36;
    a1[58] = (uint64_t)p_length;
    a1[59] = (uint64_t)v37;
    if (v39)
      operator delete(v39);
  }
  else
  {
    v26 = *(CFRange *)a2;
    v25[1].location = a2[2];
    *v25 = v26;
    p_length = &v25[1].length;
  }
  a1[58] = (uint64_t)p_length;
}

void sub_218E3ED30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a26 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  if (a33 < 0)
    operator delete(a28);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v33 - 80);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v33 - 64), 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v33 - 56), 0);
  _Unwind_Resume(a1);
}

void QP::Lexer::selectPersonLexemes(QP::Lexer *this)
{
  std::string *v2;
  std::string::size_type size;
  std::string *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::string v9;
  std::string v10;
  void *__p[2];
  std::string::size_type v12;
  std::string v13;
  __int128 v14;

  if (*(_QWORD *)this != -1)
  {
    std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const(&)[7],CFRange &,void>("Person", (uint64_t)this, &v14);
    if (*(char *)(v14 + 71) < 0)
      std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(v14 + 48), *(_QWORD *)(v14 + 56));
    else
      v13 = *(std::string *)(v14 + 48);
    if ((void **)((char *)this + 192) == std::__tree<std::string>::find<std::string>((uint64_t)this + 184, (void **)&v13.__r_.__value_.__l.__data_))
    {
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)this + 17, &v14);
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)this + 23, (void **)&v13.__r_.__value_.__l.__data_, (uint64_t)&v13);
      std::to_string(&v10, *(_QWORD *)this);
      std::to_string(&v9, *((_QWORD *)this + 1));
      if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v2 = &v9;
      else
        v2 = (std::string *)v9.__r_.__value_.__r.__words[0];
      if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
      else
        size = v9.__r_.__value_.__l.__size_;
      v4 = std::string::append(&v10, (const std::string::value_type *)v2, size);
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v12 = v4->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v5;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      v4->__r_.__value_.__r.__words[0] = 0;
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 29, __p, (uint64_t)__p);
      if (SHIBYTE(v12) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v9.__r_.__value_.__l.__data_);
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v10.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
    if (*((_QWORD *)&v14 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_218E3EFAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a26 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  if (*(char *)(v26 - 41) < 0)
    operator delete(*(void **)(v26 - 64));
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v26 - 32);
  _Unwind_Resume(a1);
}

void QP::Lexer::selectLocationLexemes(QP::Lexer *this)
{
  std::string *v2;
  std::string::size_type size;
  std::string *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::string v9;
  std::string v10;
  void *__p[2];
  std::string::size_type v12;
  std::string v13;
  __int128 v14;

  if (*((_QWORD *)this + 2) != -1)
  {
    std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const(&)[9],CFRange &,void>("Location", (uint64_t)this + 16, &v14);
    if (*(char *)(v14 + 71) < 0)
      std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(v14 + 48), *(_QWORD *)(v14 + 56));
    else
      v13 = *(std::string *)(v14 + 48);
    if ((void **)((char *)this + 192) == std::__tree<std::string>::find<std::string>((uint64_t)this + 184, (void **)&v13.__r_.__value_.__l.__data_))
    {
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)this + 17, &v14);
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)this + 23, (void **)&v13.__r_.__value_.__l.__data_, (uint64_t)&v13);
      std::to_string(&v10, *((_QWORD *)this + 2));
      std::to_string(&v9, *((_QWORD *)this + 3));
      if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v2 = &v9;
      else
        v2 = (std::string *)v9.__r_.__value_.__r.__words[0];
      if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
      else
        size = v9.__r_.__value_.__l.__size_;
      v4 = std::string::append(&v10, (const std::string::value_type *)v2, size);
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v12 = v4->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v5;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      v4->__r_.__value_.__r.__words[0] = 0;
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 29, __p, (uint64_t)__p);
      if (SHIBYTE(v12) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v9.__r_.__value_.__l.__data_);
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v10.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
    if (*((_QWORD *)&v14 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_218E3F1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a26 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  if (*(char *)(v26 - 41) < 0)
    operator delete(*(void **)(v26 - 64));
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v26 - 32);
  _Unwind_Resume(a1);
}

void QP::Lexer::tagTokenSingleQuote(uint64_t a1, CFIndex *a2, __CFString *a3)
{
  CFIndex v6;
  __int128 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  _OWORD *v40;
  _OWORD *v41;
  _OWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  const __CFString *v53;
  unint64_t v54;
  char *v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  _OWORD *v67;
  _OWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  unint64_t v79;
  char *v80;
  _QWORD *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  unint64_t v90;
  char *v91;
  _QWORD *v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  _OWORD *v103;
  _OWORD *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  unint64_t v115;
  _OWORD *v116;
  _OWORD *v117;
  _OWORD *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  const __CFString *v129;
  _QWORD v130[11];
  __int128 v131;
  CFIndex v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  __n128 (*v136)(uint64_t, uint64_t);
  uint64_t (*v137)();
  __int128 v138;
  _QWORD v139[7];
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  __n128 (*v143)(uint64_t, uint64_t);
  uint64_t (*v144)();
  CFIndex v145;
  uint64_t v146;
  _QWORD v147[3];
  char v148;
  _QWORD v149[3];
  int v150;
  CFRange v151;

  v149[0] = 0;
  v149[1] = v149;
  v149[2] = 0x2000000000;
  v150 = 0;
  v147[0] = 0;
  v147[1] = v147;
  v147[2] = 0x2000000000;
  v148 = 0;
  v140 = 0;
  v141 = &v140;
  v142 = 0x3802000000;
  v143 = __Block_byref_object_copy__68;
  v144 = __Block_byref_object_dispose__69;
  v145 = *a2;
  v146 = 0;
  v139[0] = 0;
  v139[1] = v139;
  v139[2] = 0x3802000000;
  v139[3] = __Block_byref_object_copy__68;
  v139[4] = __Block_byref_object_dispose__69;
  v139[5] = v145;
  v139[6] = 0;
  v133 = 0;
  v134 = &v133;
  v135 = 0x3802000000;
  v136 = __Block_byref_object_copy__68;
  v137 = __Block_byref_object_dispose__69;
  v138 = xmmword_218E9F890;
  v6 = *(_QWORD *)(a1 + 440);
  v130[0] = MEMORY[0x24BDAC760];
  v130[1] = 0x40000000;
  v130[2] = ___ZN2QP5Lexer19tagTokenSingleQuoteE7NLTokenP10__CFString_block_invoke;
  v130[3] = &unk_24DA253B0;
  v130[4] = &v133;
  v130[5] = v147;
  v130[9] = a1;
  v130[10] = a3;
  v130[6] = &v140;
  v130[7] = v139;
  v7 = *(_OWORD *)a2;
  v8 = a2[1];
  v132 = a2[2];
  v131 = v7;
  v130[8] = v149;
  CFEnumerateCharactersInCFString(v6, v145, v8, (uint64_t)v130);
  v151.location = v141[5];
  v151.length = a2[1] + *a2 - v151.location;
  v141[6] = v151.length;
  if (CFStringFindCharacterFromSet(*(CFStringRef *)(a1 + 440), *(CFCharacterSetRef *)(a1 + 368), v151, 0, (CFRange *)(v134 + 5)))
  {
    v9 = v134;
    v10 = v134[5];
    if (v10)
    {
      v11 = v141;
      v141[6] = *a2 - v10 + a2[1];
      v12 = *(_QWORD *)(a1 + 80);
      v13 = *(char **)(a1 + 72);
      if ((unint64_t)v13 >= v12)
      {
        v17 = *(char **)(a1 + 64);
        v18 = (v13 - v17) >> 3;
        if ((unint64_t)(v18 + 1) >> 61)
          goto LABEL_159;
        v19 = v12 - (_QWORD)v17;
        v20 = (uint64_t)(v12 - (_QWORD)v17) >> 2;
        if (v20 <= v18 + 1)
          v20 = v18 + 1;
        if (v19 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        if (v21)
        {
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long>>(a1 + 80, v21);
          v17 = *(char **)(a1 + 64);
          v13 = *(char **)(a1 + 72);
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[8 * v18];
        v24 = &v22[8 * v21];
        *(_QWORD *)v23 = v11[5];
        v14 = v23 + 8;
        while (v13 != v17)
        {
          v25 = *((_QWORD *)v13 - 1);
          v13 -= 8;
          *((_QWORD *)v23 - 1) = v25;
          v23 -= 8;
        }
        *(_QWORD *)(a1 + 64) = v23;
        *(_QWORD *)(a1 + 72) = v14;
        *(_QWORD *)(a1 + 80) = v24;
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_QWORD *)v13 = v11[5];
        v14 = v13 + 8;
      }
      v26 = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 72) = v14;
      v27 = *(_OWORD **)(a1 + 96);
      if ((unint64_t)v27 >= v26)
      {
        v29 = *(_QWORD *)(a1 + 88);
        v30 = ((uint64_t)v27 - v29) >> 4;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 60)
          goto LABEL_158;
        v32 = v26 - v29;
        if (v32 >> 3 > v31)
          v31 = v32 >> 3;
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
          v33 = 0xFFFFFFFFFFFFFFFLL;
        else
          v33 = v31;
        if (v33)
          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(a1 + 104, v33);
        else
          v34 = 0;
        v35 = &v34[16 * v30];
        v36 = &v34[16 * v33];
        *(_OWORD *)v35 = *(_OWORD *)a2;
        v28 = v35 + 16;
        v38 = *(char **)(a1 + 88);
        v37 = *(char **)(a1 + 96);
        if (v37 != v38)
        {
          do
          {
            *((_OWORD *)v35 - 1) = *((_OWORD *)v37 - 1);
            v35 -= 16;
            v37 -= 16;
          }
          while (v37 != v38);
          v37 = *(char **)(a1 + 88);
        }
        *(_QWORD *)(a1 + 88) = v35;
        *(_QWORD *)(a1 + 96) = v28;
        *(_QWORD *)(a1 + 104) = v36;
        if (v37)
          operator delete(v37);
      }
      else
      {
        *v27 = *(_OWORD *)a2;
        v28 = v27 + 1;
      }
      v39 = *(_QWORD *)(a1 + 128);
      *(_QWORD *)(a1 + 96) = v28;
      v40 = v141 + 5;
      v41 = *(_OWORD **)(a1 + 120);
      if ((unint64_t)v41 >= v39)
      {
        v43 = *(_QWORD *)(a1 + 112);
        v44 = ((uint64_t)v41 - v43) >> 4;
        v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 60)
          goto LABEL_158;
        v46 = v39 - v43;
        if (v46 >> 3 > v45)
          v45 = v46 >> 3;
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
          v47 = 0xFFFFFFFFFFFFFFFLL;
        else
          v47 = v45;
        if (v47)
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(a1 + 128, v47);
        else
          v48 = 0;
        v49 = &v48[16 * v44];
        v50 = &v48[16 * v47];
        *(_OWORD *)v49 = *v40;
        v42 = v49 + 16;
        v52 = *(char **)(a1 + 112);
        v51 = *(char **)(a1 + 120);
        if (v51 != v52)
        {
          do
          {
            *((_OWORD *)v49 - 1) = *((_OWORD *)v51 - 1);
            v49 -= 16;
            v51 -= 16;
          }
          while (v51 != v52);
          v51 = *(char **)(a1 + 112);
        }
        *(_QWORD *)(a1 + 112) = v49;
        *(_QWORD *)(a1 + 120) = v42;
        *(_QWORD *)(a1 + 128) = v50;
        if (v51)
          operator delete(v51);
      }
      else
      {
        *v41 = *v40;
        v42 = v41 + 1;
      }
      *(_QWORD *)(a1 + 120) = v42;
      v53 = (const __CFString *)copyStringInsertingSpacesBetweenIdeographCharacters(*(const __CFString **)(a1 + 440), *(CFRange *)(v141 + 5));
      CFStringAppend(a3, v53);
      v9 = v134;
      *(_OWORD *)(v141 + 5) = *(_OWORD *)(v134 + 5);
      if (v53)
      {
        CFRelease(v53);
        v9 = v134;
      }
    }
    v54 = *(_QWORD *)(a1 + 80);
    v55 = *(char **)(a1 + 72);
    if ((unint64_t)v55 >= v54)
    {
      v57 = *(char **)(a1 + 64);
      v58 = (v55 - v57) >> 3;
      if ((unint64_t)(v58 + 1) >> 61)
        goto LABEL_159;
      v59 = v54 - (_QWORD)v57;
      v60 = (uint64_t)(v54 - (_QWORD)v57) >> 2;
      if (v60 <= v58 + 1)
        v60 = v58 + 1;
      if (v59 >= 0x7FFFFFFFFFFFFFF8)
        v61 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v61 = v60;
      if (v61)
      {
        v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long>>(a1 + 80, v61);
        v57 = *(char **)(a1 + 64);
        v55 = *(char **)(a1 + 72);
      }
      else
      {
        v62 = 0;
      }
      v63 = &v62[8 * v58];
      v64 = &v62[8 * v61];
      *(_QWORD *)v63 = v9[5];
      v56 = v63 + 8;
      while (v55 != v57)
      {
        v65 = *((_QWORD *)v55 - 1);
        v55 -= 8;
        *((_QWORD *)v63 - 1) = v65;
        v63 -= 8;
      }
      *(_QWORD *)(a1 + 64) = v63;
      *(_QWORD *)(a1 + 72) = v56;
      *(_QWORD *)(a1 + 80) = v64;
      if (v57)
        operator delete(v57);
    }
    else
    {
      *(_QWORD *)v55 = v9[5];
      v56 = v55 + 8;
    }
    v66 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 72) = v56;
    v67 = *(_OWORD **)(a1 + 96);
    if ((unint64_t)v67 >= v66)
    {
      v69 = *(_QWORD *)(a1 + 88);
      v70 = ((uint64_t)v67 - v69) >> 4;
      v71 = v70 + 1;
      if ((unint64_t)(v70 + 1) >> 60)
        goto LABEL_158;
      v72 = v66 - v69;
      if (v72 >> 3 > v71)
        v71 = v72 >> 3;
      if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF0)
        v73 = 0xFFFFFFFFFFFFFFFLL;
      else
        v73 = v71;
      if (v73)
        v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(a1 + 104, v73);
      else
        v74 = 0;
      v75 = &v74[16 * v70];
      v76 = &v74[16 * v73];
      *(_OWORD *)v75 = *(_OWORD *)a2;
      v68 = v75 + 16;
      v78 = *(char **)(a1 + 88);
      v77 = *(char **)(a1 + 96);
      if (v77 != v78)
      {
        do
        {
          *((_OWORD *)v75 - 1) = *((_OWORD *)v77 - 1);
          v75 -= 16;
          v77 -= 16;
        }
        while (v77 != v78);
        v77 = *(char **)(a1 + 88);
      }
      *(_QWORD *)(a1 + 88) = v75;
      *(_QWORD *)(a1 + 96) = v68;
      *(_QWORD *)(a1 + 104) = v76;
      if (v77)
        operator delete(v77);
    }
    else
    {
      *v67 = *(_OWORD *)a2;
      v68 = v67 + 1;
    }
    v79 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 96) = v68;
    v80 = *(char **)(a1 + 120);
    if ((unint64_t)v80 >= v79)
    {
      v82 = *(char **)(a1 + 112);
      v83 = (v80 - v82) >> 4;
      v84 = v83 + 1;
      if ((unint64_t)(v83 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v85 = v79 - (_QWORD)v82;
      if (v85 >> 3 > v84)
        v84 = v85 >> 3;
      if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF0)
        v86 = 0xFFFFFFFFFFFFFFFLL;
      else
        v86 = v84;
      if (v86)
      {
        v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(a1 + 128, v86);
        v82 = *(char **)(a1 + 112);
        v80 = *(char **)(a1 + 120);
      }
      else
      {
        v87 = 0;
      }
      v88 = &v87[16 * v83];
      v89 = &v87[16 * v86];
      v81 = v88 + 16;
      *(_QWORD *)v88 = 0;
      *((_QWORD *)v88 + 1) = 0;
      if (v80 != v82)
      {
        do
        {
          *((_OWORD *)v88 - 1) = *((_OWORD *)v80 - 1);
          v88 -= 16;
          v80 -= 16;
        }
        while (v80 != v82);
        v82 = *(char **)(a1 + 112);
      }
      *(_QWORD *)(a1 + 112) = v88;
      *(_QWORD *)(a1 + 120) = v81;
      *(_QWORD *)(a1 + 128) = v89;
      if (v82)
        operator delete(v82);
    }
    else
    {
      v81 = v80 + 16;
      *(_QWORD *)v80 = 0;
      *((_QWORD *)v80 + 1) = 0;
    }
    *(_QWORD *)(a1 + 120) = v81;
    if (CFStringGetLength(a3))
      CFStringAppend(a3, CFSTR(" "));
    v16 = v134[6] + v134[5];
    v15 = v141;
    v141[5] = v16;
    v15[6] = *a2 - v16 + a2[1];
  }
  else
  {
    v15 = v141;
    v16 = v141[5];
  }
  if (v16 == -1 || !v15[6])
    goto LABEL_157;
  v90 = *(_QWORD *)(a1 + 80);
  v91 = *(char **)(a1 + 72);
  if ((unint64_t)v91 < v90)
  {
    *(_QWORD *)v91 = v16;
    v92 = v91 + 8;
    goto LABEL_123;
  }
  v93 = *(char **)(a1 + 64);
  v94 = (v91 - v93) >> 3;
  if ((unint64_t)(v94 + 1) >> 61)
LABEL_159:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v95 = v90 - (_QWORD)v93;
  v96 = (uint64_t)(v90 - (_QWORD)v93) >> 2;
  if (v96 <= v94 + 1)
    v96 = v94 + 1;
  if (v95 >= 0x7FFFFFFFFFFFFFF8)
    v97 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v97 = v96;
  if (v97)
  {
    v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long>>(a1 + 80, v97);
    v93 = *(char **)(a1 + 64);
    v91 = *(char **)(a1 + 72);
    v16 = v15[5];
  }
  else
  {
    v98 = 0;
  }
  v99 = &v98[8 * v94];
  v100 = &v98[8 * v97];
  *(_QWORD *)v99 = v16;
  v92 = v99 + 8;
  while (v91 != v93)
  {
    v101 = *((_QWORD *)v91 - 1);
    v91 -= 8;
    *((_QWORD *)v99 - 1) = v101;
    v99 -= 8;
  }
  *(_QWORD *)(a1 + 64) = v99;
  *(_QWORD *)(a1 + 72) = v92;
  *(_QWORD *)(a1 + 80) = v100;
  if (v93)
    operator delete(v93);
LABEL_123:
  v102 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 72) = v92;
  v103 = *(_OWORD **)(a1 + 96);
  if ((unint64_t)v103 >= v102)
  {
    v105 = *(_QWORD *)(a1 + 88);
    v106 = ((uint64_t)v103 - v105) >> 4;
    v107 = v106 + 1;
    if ((unint64_t)(v106 + 1) >> 60)
      goto LABEL_158;
    v108 = v102 - v105;
    if (v108 >> 3 > v107)
      v107 = v108 >> 3;
    if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF0)
      v109 = 0xFFFFFFFFFFFFFFFLL;
    else
      v109 = v107;
    if (v109)
      v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(a1 + 104, v109);
    else
      v110 = 0;
    v111 = &v110[16 * v106];
    v112 = &v110[16 * v109];
    *(_OWORD *)v111 = *(_OWORD *)a2;
    v104 = v111 + 16;
    v114 = *(char **)(a1 + 88);
    v113 = *(char **)(a1 + 96);
    if (v113 != v114)
    {
      do
      {
        *((_OWORD *)v111 - 1) = *((_OWORD *)v113 - 1);
        v111 -= 16;
        v113 -= 16;
      }
      while (v113 != v114);
      v113 = *(char **)(a1 + 88);
    }
    *(_QWORD *)(a1 + 88) = v111;
    *(_QWORD *)(a1 + 96) = v104;
    *(_QWORD *)(a1 + 104) = v112;
    if (v113)
      operator delete(v113);
  }
  else
  {
    *v103 = *(_OWORD *)a2;
    v104 = v103 + 1;
  }
  v115 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 96) = v104;
  v116 = v141 + 5;
  v117 = *(_OWORD **)(a1 + 120);
  if ((unint64_t)v117 >= v115)
  {
    v119 = *(_QWORD *)(a1 + 112);
    v120 = ((uint64_t)v117 - v119) >> 4;
    v121 = v120 + 1;
    if (!((unint64_t)(v120 + 1) >> 60))
    {
      v122 = v115 - v119;
      if (v122 >> 3 > v121)
        v121 = v122 >> 3;
      if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFF0)
        v123 = 0xFFFFFFFFFFFFFFFLL;
      else
        v123 = v121;
      if (v123)
        v124 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(a1 + 128, v123);
      else
        v124 = 0;
      v125 = &v124[16 * v120];
      v126 = &v124[16 * v123];
      *(_OWORD *)v125 = *v116;
      v118 = v125 + 16;
      v128 = *(char **)(a1 + 112);
      v127 = *(char **)(a1 + 120);
      if (v127 != v128)
      {
        do
        {
          *((_OWORD *)v125 - 1) = *((_OWORD *)v127 - 1);
          v125 -= 16;
          v127 -= 16;
        }
        while (v127 != v128);
        v127 = *(char **)(a1 + 112);
      }
      *(_QWORD *)(a1 + 112) = v125;
      *(_QWORD *)(a1 + 120) = v118;
      *(_QWORD *)(a1 + 128) = v126;
      if (v127)
        operator delete(v127);
      goto LABEL_155;
    }
LABEL_158:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  *v117 = *v116;
  v118 = v117 + 1;
LABEL_155:
  *(_QWORD *)(a1 + 120) = v118;
  v129 = (const __CFString *)copyStringInsertingSpacesBetweenIdeographCharacters(*(const __CFString **)(a1 + 440), *(CFRange *)(v141 + 5));
  CFStringAppend(a3, v129);
  if (v129)
    CFRelease(v129);
LABEL_157:
  _Block_object_dispose(&v133, 8);
  _Block_object_dispose(v139, 8);
  _Block_object_dispose(&v140, 8);
  _Block_object_dispose(v147, 8);
  _Block_object_dispose(v149, 8);
}

void sub_218E3FBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0);
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 184), 8);
  _Block_object_dispose((const void *)(v31 - 128), 8);
  _Block_object_dispose((const void *)(v31 - 96), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__68(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void ___ZN2QP5Lexer19tagTokenSingleQuoteE7NLTokenP10__CFString_block_invoke(uint64_t a1, CFRange rangeToSearch)
{
  CFIndex length;
  CFIndex location;
  uint64_t v5;
  int CharacterFromSet;
  int v7;
  CFIndex v8;
  CFIndex v9;
  CFIndex v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  CFRange v17;
  const __CFString *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  CFIndex *v26;
  char *v27;
  CFIndex v28;
  unint64_t v29;
  char **v30;
  _OWORD *v31;
  _OWORD *v32;
  _OWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  unint64_t v43;
  void **v44;
  char *v45;
  void **v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  CFIndex *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  _OWORD *v70;
  _OWORD *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  unint64_t v81;
  char *v82;
  _QWORD *v83;
  CFIndex v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  const __CFString *v93;
  uint64_t v94;
  void **v95;
  char **v96;
  CFIndex v97;
  CFRange v98;

  length = rangeToSearch.length;
  location = rangeToSearch.location;
  v5 = *(_QWORD *)(a1 + 72);
  v98.location = rangeToSearch.location;
  v98.length = length;
  CharacterFromSet = CFStringFindCharacterFromSet(*(CFStringRef *)(v5 + 440), *(CFCharacterSetRef *)(v5 + 368), v98, 0, (CFRange *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
  v7 = CharacterFromSet;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48))
    {
      v97 = location;
      v8 = CFStringGetLength(*(CFStringRef *)(a1 + 80));
      v9 = v8;
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48);
      v11 = *(_QWORD *)(v5 + 80);
      v12 = (void **)(v5 + 64);
      v13 = *(char **)(v5 + 72);
      v95 = (void **)(v5 + 64);
      if ((unint64_t)v13 >= v11)
      {
        v19 = (char *)*v12;
        v20 = (v13 - (_BYTE *)*v12) >> 3;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 61)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v22 = v11 - (_QWORD)v19;
        if (v22 >> 2 > v21)
          v21 = v22 >> 2;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long>>(v5 + 80, v23);
          v19 = *(char **)(v5 + 64);
          v13 = *(char **)(v5 + 72);
        }
        else
        {
          v24 = 0;
        }
        v26 = (CFIndex *)&v24[8 * v20];
        v27 = &v24[8 * v23];
        *v26 = v9;
        v14 = v26 + 1;
        while (v13 != v19)
        {
          v28 = *((_QWORD *)v13 - 1);
          v13 -= 8;
          *--v26 = v28;
        }
        *(_QWORD *)(v5 + 64) = v26;
        *(_QWORD *)(v5 + 72) = v14;
        *(_QWORD *)(v5 + 80) = v27;
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_QWORD *)v13 = v8;
        v14 = v13 + 8;
      }
      v29 = *(_QWORD *)(v5 + 104);
      *(_QWORD *)(v5 + 72) = v14;
      v30 = (char **)(v5 + 88);
      v31 = (_OWORD *)(a1 + 88);
      v32 = *(_OWORD **)(v5 + 96);
      if ((unint64_t)v32 >= v29)
      {
        v34 = ((char *)v32 - *v30) >> 4;
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 60)
          goto LABEL_108;
        v36 = v29 - (_QWORD)*v30;
        if (v36 >> 3 > v35)
          v35 = v36 >> 3;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0)
          v37 = 0xFFFFFFFFFFFFFFFLL;
        else
          v37 = v35;
        if (v37)
          v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(v5 + 104, v37);
        else
          v38 = 0;
        v39 = &v38[16 * v34];
        v40 = &v38[16 * v37];
        *(_OWORD *)v39 = *v31;
        v33 = v39 + 16;
        v42 = *(char **)(v5 + 88);
        v41 = *(char **)(v5 + 96);
        if (v41 != v42)
        {
          do
          {
            *((_OWORD *)v39 - 1) = *((_OWORD *)v41 - 1);
            v39 -= 16;
            v41 -= 16;
          }
          while (v41 != v42);
          v41 = *v30;
        }
        *(_QWORD *)(v5 + 88) = v39;
        *(_QWORD *)(v5 + 96) = v33;
        *(_QWORD *)(v5 + 104) = v40;
        if (v41)
          operator delete(v41);
      }
      else
      {
        *v32 = *v31;
        v33 = v32 + 1;
      }
      v96 = (char **)(v5 + 88);
      v43 = *(_QWORD *)(v5 + 128);
      *(_QWORD *)(v5 + 96) = v33;
      v44 = (void **)(v5 + 112);
      v45 = *(char **)(v5 + 120);
      if ((unint64_t)v45 >= v43)
      {
        v46 = (void **)(v5 + 112);
        v48 = (char *)*v44;
        v49 = (v45 - (_BYTE *)*v44) >> 4;
        v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 60)
          goto LABEL_108;
        v51 = v43 - (_QWORD)v48;
        if (v51 >> 3 > v50)
          v50 = v51 >> 3;
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0)
          v52 = 0xFFFFFFFFFFFFFFFLL;
        else
          v52 = v50;
        if (v52)
        {
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(v5 + 128, v52);
          v48 = *(char **)(v5 + 112);
          v45 = *(char **)(v5 + 120);
        }
        else
        {
          v53 = 0;
        }
        v54 = (CFIndex *)&v53[16 * v49];
        v55 = &v53[16 * v52];
        *v54 = v9;
        v54[1] = v10;
        v47 = v54 + 2;
        if (v45 != v48)
        {
          do
          {
            *((_OWORD *)v54 - 1) = *((_OWORD *)v45 - 1);
            v54 -= 2;
            v45 -= 16;
          }
          while (v45 != v48);
          v48 = (char *)*v46;
        }
        *(_QWORD *)(v5 + 112) = v54;
        *(_QWORD *)(v5 + 120) = v47;
        *(_QWORD *)(v5 + 128) = v55;
        if (v48)
          operator delete(v48);
      }
      else
      {
        v46 = (void **)(v5 + 112);
        *(_QWORD *)v45 = v9;
        *((_QWORD *)v45 + 1) = v10;
        v47 = v45 + 16;
      }
      *(_QWORD *)(v5 + 120) = v47;
      v56 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v58 = *(char **)(v5 + 72);
      v57 = *(_QWORD *)(v5 + 80);
      if ((unint64_t)v58 >= v57)
      {
        v60 = (char *)*v95;
        v61 = (v58 - (_BYTE *)*v95) >> 3;
        v62 = v61 + 1;
        if ((unint64_t)(v61 + 1) >> 61)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v63 = v57 - (_QWORD)v60;
        if (v63 >> 2 > v62)
          v62 = v63 >> 2;
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
          v64 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v64 = v62;
        if (v64)
        {
          v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long>>(v5 + 80, v64);
          v60 = *(char **)(v5 + 64);
          v58 = *(char **)(v5 + 72);
        }
        else
        {
          v65 = 0;
        }
        v66 = &v65[8 * v61];
        v67 = &v65[8 * v64];
        *(_QWORD *)v66 = *(_QWORD *)(v56 + 40);
        v59 = v66 + 8;
        while (v58 != v60)
        {
          v68 = *((_QWORD *)v58 - 1);
          v58 -= 8;
          *((_QWORD *)v66 - 1) = v68;
          v66 -= 8;
        }
        *(_QWORD *)(v5 + 64) = v66;
        *(_QWORD *)(v5 + 72) = v59;
        *(_QWORD *)(v5 + 80) = v67;
        if (v60)
          operator delete(v60);
      }
      else
      {
        *(_QWORD *)v58 = *(_QWORD *)(v56 + 40);
        v59 = v58 + 8;
      }
      *(_QWORD *)(v5 + 72) = v59;
      v70 = *(_OWORD **)(v5 + 96);
      v69 = *(_QWORD *)(v5 + 104);
      if ((unint64_t)v70 >= v69)
      {
        v72 = ((char *)v70 - *v96) >> 4;
        v73 = v72 + 1;
        if ((unint64_t)(v72 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v74 = v69 - (_QWORD)*v96;
        if (v74 >> 3 > v73)
          v73 = v74 >> 3;
        if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0)
          v75 = 0xFFFFFFFFFFFFFFFLL;
        else
          v75 = v73;
        if (v75)
          v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(v5 + 104, v75);
        else
          v76 = 0;
        v77 = &v76[16 * v72];
        v78 = &v76[16 * v75];
        *(_OWORD *)v77 = *v31;
        v71 = v77 + 16;
        v80 = *(char **)(v5 + 88);
        v79 = *(char **)(v5 + 96);
        if (v79 != v80)
        {
          do
          {
            *((_OWORD *)v77 - 1) = *((_OWORD *)v79 - 1);
            v77 -= 16;
            v79 -= 16;
          }
          while (v79 != v80);
          v79 = *v96;
        }
        *(_QWORD *)(v5 + 88) = v77;
        *(_QWORD *)(v5 + 96) = v71;
        *(_QWORD *)(v5 + 104) = v78;
        if (v79)
          operator delete(v79);
      }
      else
      {
        *v70 = *v31;
        v71 = v70 + 1;
      }
      *(_QWORD *)(v5 + 96) = v71;
      v82 = *(char **)(v5 + 120);
      v81 = *(_QWORD *)(v5 + 128);
      if ((unint64_t)v82 < v81)
      {
        v83 = v82 + 16;
        *(_QWORD *)v82 = 0;
        *((_QWORD *)v82 + 1) = 0;
        v84 = v97;
LABEL_105:
        *(_QWORD *)(v5 + 120) = v83;
        v93 = (const __CFString *)copyStringInsertingSpacesBetweenIdeographCharacters(*(const __CFString **)(v5 + 440), *(CFRange *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
        CFStringAppend(*(CFMutableStringRef *)(a1 + 80), v93);
        CFStringAppend(*(CFMutableStringRef *)(a1 + 80), CFSTR(" "));
        v94 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        *(_QWORD *)(v94 + 40) = v84;
        *(_QWORD *)(v94 + 48) = 0;
        *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40) = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8)
                                                                                + 40);
        if (v93)
          CFRelease(v93);
        goto LABEL_107;
      }
      v85 = (char *)*v46;
      v86 = (v82 - (_BYTE *)*v46) >> 4;
      v87 = v86 + 1;
      if (!((unint64_t)(v86 + 1) >> 60))
      {
        v88 = v81 - (_QWORD)v85;
        if (v88 >> 3 > v87)
          v87 = v88 >> 3;
        if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF0)
          v89 = 0xFFFFFFFFFFFFFFFLL;
        else
          v89 = v87;
        if (v89)
        {
          v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(v5 + 128, v89);
          v85 = *(char **)(v5 + 112);
          v82 = *(char **)(v5 + 120);
        }
        else
        {
          v90 = 0;
        }
        v91 = &v90[16 * v86];
        v92 = &v90[16 * v89];
        v83 = v91 + 16;
        *(_QWORD *)v91 = 0;
        *((_QWORD *)v91 + 1) = 0;
        if (v82 != v85)
        {
          do
          {
            *((_OWORD *)v91 - 1) = *((_OWORD *)v82 - 1);
            v91 -= 16;
            v82 -= 16;
          }
          while (v82 != v85);
          v85 = (char *)*v46;
        }
        *(_QWORD *)(v5 + 112) = v91;
        *(_QWORD *)(v5 + 120) = v83;
        *(_QWORD *)(v5 + 128) = v92;
        v84 = v97;
        if (v85)
          operator delete(v85);
        goto LABEL_105;
      }
LABEL_108:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *(_QWORD *)(v15 + 40) = location;
    *(_QWORD *)(v15 + 48) = length;
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v17.length = *(_QWORD *)(v16 + 48);
    if (v17.length)
    {
      v17.location = *(_QWORD *)(v16 + 40);
      v18 = (const __CFString *)copyStringInsertingSpacesBetweenIdeographCharacters(*(const __CFString **)(v5 + 440), v17);
      CFStringAppend(*(CFMutableStringRef *)(a1 + 80), v18);
      CFStringAppend(*(CFMutableStringRef *)(a1 + 80), CFSTR(" "));
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48) = location
                                                                  + length
                                                                  - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)
                                                                              + 40);
      if (v18)
        CFRelease(v18);
    }
    else
    {
      CFStringAppend(*(CFMutableStringRef *)(a1 + 80), CFSTR(" "));
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      *(_QWORD *)(v25 + 40) = location;
      *(_QWORD *)(v25 + 48) = length;
    }
  }
  else if (!CharacterFromSet)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48) = location
                                                                + length
                                                                - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)
                                                                            + 40);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48) = location
                                                                + length
                                                                - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8)
                                                                            + 40);
  }
LABEL_107:
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v7 != 0;
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
}

void sub_218E402F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void QP::Lexer::tagTokenPunctuation(uint64_t a1, uint64_t a2, __CFString *theString, uint64_t a4, uint64_t a5)
{
  CFIndex Length;
  const __CFString *v10;
  CFIndex v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  CFIndex *v21;
  char *v22;
  CFIndex v23;
  unint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  CFIndex v37;
  unint64_t v38;
  char *v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  CFIndex *v47;
  char *v48;
  CFRange v49;
  CFIndex v50;
  CFIndex Count;
  const __CFString *v52;
  uint64_t v53;
  std::string *p_p;
  std::string::size_type size;
  std::string *v56;
  __CFString *YearRangeCompletion;
  __int128 *v58;
  std::string::size_type v59;
  uint64_t **v60;
  void **v61;
  char **v62;
  uint64_t v63;
  std::string v64;
  CFRange v65;
  uint64_t v66;
  std::string v67;
  std::string __p;
  _QWORD v69[5];
  CFRange v70;
  uint64_t v71;
  const __CFString *v72;

  Length = CFStringGetLength(theString);
  v10 = (const __CFString *)copyStringInsertingSpacesBetweenIdeographCharacters(*(const __CFString **)(a1 + 440), *(CFRange *)a2);
  v72 = v10;
  CFStringAppend(theString, v10);
  if ((*(_BYTE *)(a2 + 17) & 8) != 0)
    goto LABEL_93;
  v11 = CFStringGetLength(theString);
  v12 = *(_QWORD *)(a1 + 80);
  v13 = *(char **)(a1 + 72);
  if ((unint64_t)v13 >= v12)
  {
    v15 = *(char **)(a1 + 64);
    v16 = (v13 - v15) >> 3;
    if ((unint64_t)(v16 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v17 = v12 - (_QWORD)v15;
    v18 = (uint64_t)(v12 - (_QWORD)v15) >> 2;
    if (v18 <= v16 + 1)
      v18 = v16 + 1;
    if (v17 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    if (v19)
    {
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long>>(a1 + 80, v19);
      v15 = *(char **)(a1 + 64);
      v13 = *(char **)(a1 + 72);
    }
    else
    {
      v20 = 0;
    }
    v21 = (CFIndex *)&v20[8 * v16];
    v22 = &v20[8 * v19];
    *v21 = Length;
    v14 = v21 + 1;
    while (v13 != v15)
    {
      v23 = *((_QWORD *)v13 - 1);
      v13 -= 8;
      *--v21 = v23;
    }
    *(_QWORD *)(a1 + 64) = v21;
    *(_QWORD *)(a1 + 72) = v14;
    *(_QWORD *)(a1 + 80) = v22;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *(_QWORD *)v13 = Length;
    v14 = v13 + 8;
  }
  v24 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 72) = v14;
  v25 = *(_OWORD **)(a1 + 96);
  if ((unint64_t)v25 >= v24)
  {
    v27 = *(_QWORD *)(a1 + 88);
    v28 = ((uint64_t)v25 - v27) >> 4;
    v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 60)
      goto LABEL_96;
    v30 = v24 - v27;
    if (v30 >> 3 > v29)
      v29 = v30 >> 3;
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
      v31 = 0xFFFFFFFFFFFFFFFLL;
    else
      v31 = v29;
    if (v31)
      v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(a1 + 104, v31);
    else
      v32 = 0;
    v33 = &v32[16 * v28];
    v34 = &v32[16 * v31];
    *(_OWORD *)v33 = *(_OWORD *)a2;
    v26 = v33 + 16;
    v36 = *(char **)(a1 + 88);
    v35 = *(char **)(a1 + 96);
    if (v35 != v36)
    {
      do
      {
        *((_OWORD *)v33 - 1) = *((_OWORD *)v35 - 1);
        v33 -= 16;
        v35 -= 16;
      }
      while (v35 != v36);
      v35 = *(char **)(a1 + 88);
    }
    *(_QWORD *)(a1 + 88) = v33;
    *(_QWORD *)(a1 + 96) = v26;
    *(_QWORD *)(a1 + 104) = v34;
    if (v35)
      operator delete(v35);
  }
  else
  {
    *v25 = *(_OWORD *)a2;
    v26 = v25 + 1;
  }
  v37 = v11 - Length;
  v38 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 96) = v26;
  v39 = *(char **)(a1 + 120);
  if ((unint64_t)v39 < v38)
  {
    *(_QWORD *)v39 = Length;
    *((_QWORD *)v39 + 1) = v37;
    v40 = v39 + 16;
    goto LABEL_50;
  }
  v41 = *(char **)(a1 + 112);
  v42 = (v39 - v41) >> 4;
  v43 = v42 + 1;
  if ((unint64_t)(v42 + 1) >> 60)
LABEL_96:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v44 = v38 - (_QWORD)v41;
  if (v44 >> 3 > v43)
    v43 = v44 >> 3;
  if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
    v45 = 0xFFFFFFFFFFFFFFFLL;
  else
    v45 = v43;
  if (v45)
  {
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(a1 + 128, v45);
    v41 = *(char **)(a1 + 112);
    v39 = *(char **)(a1 + 120);
  }
  else
  {
    v46 = 0;
  }
  v47 = (CFIndex *)&v46[16 * v42];
  v48 = &v46[16 * v45];
  *v47 = Length;
  v47[1] = v37;
  v40 = v47 + 2;
  if (v39 != v41)
  {
    do
    {
      *((_OWORD *)v47 - 1) = *((_OWORD *)v39 - 1);
      v47 -= 2;
      v39 -= 16;
    }
    while (v39 != v41);
    v41 = *(char **)(a1 + 112);
  }
  *(_QWORD *)(a1 + 112) = v47;
  *(_QWORD *)(a1 + 120) = v40;
  *(_QWORD *)(a1 + 128) = v48;
  if (v41)
    operator delete(v41);
LABEL_50:
  *(_QWORD *)(a1 + 120) = v40;
  v49.location = *(_QWORD *)a2;
  v50 = *(_QWORD *)(a2 + 8);
  if (v50 + *(_QWORD *)a2 != a5)
    goto LABEL_93;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 312) + 8) == 9)
  {
    Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 408));
    v49.location = *(_QWORD *)a2;
    v50 = *(_QWORD *)(a2 + 8);
    if (!Count)
    {
      v49.length = *(_QWORD *)(a2 + 8);
      v52 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x24BDBD240], *(CFStringRef *)(a1 + 440), v49);
      v64.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
      v53 = *(_QWORD *)(a1 + 328);
      v69[0] = MEMORY[0x24BDAC760];
      v69[1] = 0x40000000;
      v69[2] = ___ZN2QP5Lexer19tagTokenPunctuationE7NLTokenP10__CFString7CFRange_block_invoke;
      v69[3] = &__block_descriptor_tmp_73;
      v69[4] = a1;
      v70 = *(CFRange *)a2;
      v71 = *(_QWORD *)(a2 + 16);
      QP::ParserGrammar::completions(v53, v52, (uint64_t)v69);
      QP::getUTF8StringFromCFString(v52, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      if (size)
      {
        v56 = (std::string *)((char *)p_p + size);
        while ((p_p->__r_.__value_.__s.__data_[0] & 0x80000000) == 0
             && (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * p_p->__r_.__value_.__s.__data_[0] + 60) & 0x400) != 0)
        {
          p_p = (std::string *)((char *)p_p + 1);
          if (!--size)
          {
            p_p = v56;
            break;
          }
        }
      }
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (__p.__r_.__value_.__l.__size_
          && __p.__r_.__value_.__l.__size_ <= 3
          && p_p == (std::string *)(__p.__r_.__value_.__r.__words[0] + __p.__r_.__value_.__l.__size_))
        {
          std::string::__init_copy_ctor_external(&v67, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          goto LABEL_73;
        }
      }
      else if (HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1 <= 2
             && p_p == (std::string *)((char *)&__p + HIBYTE(__p.__r_.__value_.__r.__words[2])))
      {
        v67 = __p;
LABEL_73:
        v65 = *(CFRange *)a2;
        v66 = *(_QWORD *)(a2 + 16);
        YearRangeCompletion = QP::Lexer::generateYearRangeCompletion(a1, (uint64_t)&v67, &v65.location);
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v67.__r_.__value_.__l.__data_);
        if (CFStringGetLength(YearRangeCompletion) >= 1)
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 408), YearRangeCompletion);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v52)
        CFRelease(v52);
      v49.location = *(_QWORD *)a2;
      v50 = *(_QWORD *)(a2 + 8);
    }
  }
  QP::Lexer::getExternalTypesForRange(a1, v49.location, v50, (uint64_t *)(a1 + 160), (uint64_t)&__p);
  v59 = __p.__r_.__value_.__l.__size_;
  v58 = (__int128 *)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
  {
    v60 = (uint64_t **)(a1 + 184);
    v61 = (void **)(a1 + 192);
    v62 = (char **)(a1 + 136);
    do
    {
      v63 = *(_QWORD *)v58;
      if (*(char *)(*(_QWORD *)v58 + 71) < 0)
        std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)(v63 + 48), *(_QWORD *)(v63 + 56));
      else
        v64 = *(std::string *)(v63 + 48);
      if (v61 == std::__tree<std::string>::find<std::string>((uint64_t)v60, (void **)&v64.__r_.__value_.__l.__data_))
      {
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100](v62, v58);
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v60, (void **)&v64.__r_.__value_.__l.__data_, (uint64_t)&v64);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      ++v58;
    }
    while (v58 != (__int128 *)v59);
  }
  v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
LABEL_93:
  if (v10)
    CFRelease(v10);
}

void sub_218E4087C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (a25 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v32 - 88), 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP5Lexer19tagTokenPunctuationE7NLTokenP10__CFString7CFRange_block_invoke(uint64_t a1, const __CFString *a2)
{
  uint64_t v3;
  const __CFString *v4;
  __CFString *Mutable;
  CFRange v6;

  v3 = *(_QWORD *)(a1 + 32);
  v6.length = *(_QWORD *)(a1 + 40);
  v6.location = 0;
  v4 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x24BDBD240], *(CFStringRef *)(v3 + 440), v6);
  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppend(Mutable, v4);
  CFStringAppend(Mutable, a2);
  if (Mutable != *(__CFString **)(v3 + 440))
    CFArrayAppendValue(*(CFMutableArrayRef *)(v3 + 408), Mutable);
  if (v4)
    CFRelease(v4);
}

void sub_218E409C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

__CFString *QP::Lexer::generateYearRangeCompletion(uint64_t a1, uint64_t a2, CFIndex *a3)
{
  __CFString *Mutable;
  uint64_t v7;
  __CFCalendar *v8;
  CFAbsoluteTime CurrentTime;
  std::string::size_type size;
  int v11;
  int v12;
  std::string *p_i;
  const __CFString *v14;
  std::string *p_str;
  const __CFString *v16;
  const __CFString *v17;
  std::string *v18;
  const __CFString *v19;
  std::string i;
  std::string __str;
  std::string v23;
  int v24;
  CFRange v25;

  Mutable = CFStringCreateMutable(0, 0);
  v7 = *(_QWORD *)(a1 + 312);
  v8 = *(__CFCalendar **)(v7 + 80);
  if (!v8)
    return Mutable;
  v24 = -1;
  CurrentTime = getCurrentTime(v8, *(const __CFDate **)(v7 + 72));
  CFCalendarDecomposeAbsoluteTime(v8, CurrentTime, "y", &v24);
  std::to_string(&v23, v24);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&i, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      goto LABEL_6;
    }
  }
  else
  {
    __str = *(std::string *)a2;
  }
  for (i = *(std::string *)a2; ; std::string::append(&i, "9", 1uLL))
  {
LABEL_6:
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (size > 3)
      break;
    std::string::append(&__str, "0", 1uLL);
  }
  v11 = std::stoi(&__str, 0, 10);
  if (v11 <= v24)
  {
    v12 = std::stoi(&i, 0, 10);
    if (v12 <= v24)
      p_i = &i;
    else
      p_i = &v23;
    std::string::operator=(&i, p_i);
    v25.length = *a3;
    v25.location = 0;
    v14 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x24BDBD240], *(CFStringRef *)(a1 + 440), v25);
    CFStringAppend(Mutable, v14);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    v16 = CFStringCreateWithCString(0, (const char *)p_str, 0x8000100u);
    CFStringAppend(Mutable, v16);
    v17 = CFStringCreateWithCString(0, " to ", 0x8000100u);
    CFStringAppend(Mutable, v17);
    if ((i.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &i;
    else
      v18 = (std::string *)i.__r_.__value_.__r.__words[0];
    v19 = CFStringCreateWithCString(0, (const char *)v18, 0x8000100u);
    CFStringAppend(Mutable, v19);
  }
  if (SHIBYTE(i.__r_.__value_.__r.__words[2]) < 0)
    operator delete(i.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  return Mutable;
}

void sub_218E40C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

_QWORD *QP::Lexer::selectKnowledgeSourceLexemes(_QWORD *this, const CFRange *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  _QWORD *v5;
  void (*v6)(_QWORD, _QWORD, const CFRange *, uint64_t, _QWORD, _QWORD **);
  _QWORD **v7;
  _QWORD v8[5];
  _QWORD *v9;

  if (a4)
  {
    v4 = (uint64_t)this;
    v5 = (_QWORD *)this[72];
    if (v5)
    {
      v6 = (void (*)(_QWORD, _QWORD, const CFRange *, uint64_t, _QWORD, _QWORD **))v5[3];
      if (v6)
      {
        v8[0] = MEMORY[0x24BDAC760];
        v8[1] = 0x40000000;
        v8[2] = ___ZN2QP5Lexer28selectKnowledgeSourceLexemesEPK7CFRangelb_block_invoke_2;
        v8[3] = &__block_descriptor_tmp_77;
        v8[4] = this;
        v9 = v8;
        if (*(_BYTE *)(this[39] + 52))
          v7 = &v9;
        else
          v7 = 0;
        v6(*v5, this[55], a2, a3, 0, v7);
        this = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(v4 + 576) + 16))(**(_QWORD **)(v4 + 576));
        if (!(_DWORD)this)
          return (_QWORD *)QP::ParserConfiguration::setCanUseEmbeddings(*(_QWORD *)(v4 + 312), (const __CFBoolean *)*MEMORY[0x24BDBD268]);
      }
    }
  }
  return this;
}

void ___ZN2QP5Lexer28selectKnowledgeSourceLexemesEPK7CFRangelb_block_invoke_2(uint64_t a1, CFRange a2, CFTypeRef value)
{
  CFAttributedStringSetAttribute(*(CFMutableAttributedStringRef *)(*(_QWORD *)(a1 + 32) + 448), a2, kQPInputAttributeAnnotationKey, value);
}

void ___ZN2QP5Lexer19selectEntityLexemesEP10__CFString_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  __int16 v7;
  uint64_t *v8;
  __int16 v9;
  unint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  const std::string *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t data;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unsigned int v34;
  __int16 v35;
  std::string *v36;
  std::string::size_type size;
  std::string *v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::string v43;
  std::string v44;
  void *__p[2];
  std::string::size_type v46;
  std::string v47;
  __int128 v48;
  uint64_t __val[2];
  _QWORD v50[8];
  uint64_t v51;
  char **v52;
  uint64_t v53;
  __n128 (*v54)(_QWORD *, uint64_t);
  void (*v55)(uint64_t);
  _QWORD v56[3];
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  _QWORD *(*v60)(_QWORD *, _QWORD *);
  void (*v61)(uint64_t);
  void *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  char v66;

  v2 = *(_QWORD *)(a1 + 32);
  v63 = 0;
  v64 = &v63;
  v65 = 0x2000000000;
  v66 = 0;
  v57 = 0;
  v58 = &v57;
  v59 = 0x4002000000;
  v60 = __Block_byref_object_copy__80;
  v61 = __Block_byref_object_dispose__81;
  v3 = (uint64_t)(*(_QWORD *)(v2 + 72) - *(_QWORD *)(v2 + 64)) >> 3;
  LOBYTE(v51) = 1;
  std::vector<BOOL>::vector(&v62, v3, (unsigned __int8 *)&v51);
  v51 = 0;
  v52 = (char **)&v51;
  v53 = 0x4002000000;
  v54 = __Block_byref_object_copy__3;
  v55 = __Block_byref_object_dispose__3;
  memset(v56, 0, sizeof(v56));
  v4 = *(_QWORD **)(v2 + 584);
  v5 = *(_QWORD *)(a1 + 40);
  v50[0] = MEMORY[0x24BDAC760];
  v50[1] = 0x40000000;
  v50[2] = ___ZN2QP5Lexer19selectEntityLexemesEP10__CFString_block_invoke_82;
  v50[3] = &unk_24DA25440;
  v50[4] = &v63;
  v50[5] = &v51;
  v50[6] = &v57;
  v50[7] = v2;
  QPDataDetectorEnumerateResults(v4, v5, (uint64_t)v50);
  if (*((_BYTE *)v64 + 24))
  {
    v48 = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(&v47, "Location");
    v6 = QP::ParserGrammar::symbolID(*(_QWORD *)(v2 + 328), (uint64_t)&v47);
    v7 = QP::ParserGrammar::symbolFlag(*(QP::ParserGrammar **)(v2 + 328), v6);
    v8 = v58;
    if (v58[6])
    {
      v9 = v7;
      v10 = 0;
      do
      {
        if (((*(_QWORD *)(v8[5] + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
        {
          *(_OWORD *)__val = *(_OWORD *)(*(_QWORD *)(v2 + 88) + 16 * v10);
          std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&v47, (uint64_t)__val, __p);
          v11 = *(_OWORD *)__p;
          __p[0] = 0;
          __p[1] = 0;
          v12 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
          v48 = v11;
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v15 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v16 = (unint64_t *)((char *)__p[1] + 8);
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
          *(_WORD *)(v48 + 88) = v9;
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100](v52 + 5, &v48);
          v8 = v58;
        }
        ++v10;
      }
      while (v8[6] > v10);
    }
    __val[0] = -1;
    __val[1] = -1;
    v18 = v52[5];
    v19 = v52[6];
    if (v18 != v19)
    {
      do
      {
        v20 = *(const std::string **)v18;
        v21 = (std::__shared_weak_count *)*((_QWORD *)v18 + 1);
        __p[0] = *(void **)v18;
        __p[1] = v21;
        if (v21)
        {
          v22 = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        if (__val[1] == -1)
        {
          *(_OWORD *)__val = *(_OWORD *)&v20[3].__r_.__value_.__l.__data_;
          std::string::operator=(&v47, v20);
        }
        else
        {
          data = (uint64_t)v20[3].__r_.__value_.__l.__data_;
          if (__val[0] + __val[1] < data)
            __val[1] = data - __val[0] + v20[3].__r_.__value_.__l.__size_;
        }
        if (v21)
        {
          v25 = (unint64_t *)&v21->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        v18 += 16;
      }
      while (v18 != v19);
      if (__val[1] != -1)
      {
        std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&v47, (uint64_t)__val, __p);
        v27 = *(_OWORD *)__p;
        __p[0] = 0;
        __p[1] = 0;
        v28 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
        v48 = v27;
        if (v28)
        {
          v29 = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v31 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v32 = (unint64_t *)((char *)__p[1] + 8);
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        v34 = QP::ParserGrammar::symbolID(*(_QWORD *)(v2 + 328), (uint64_t)&v47);
        v35 = QP::ParserGrammar::symbolFlag(*(QP::ParserGrammar **)(v2 + 328), v34);
        *(_WORD *)(v48 + 88) = v35;
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)(v2 + 136), &v48);
        std::to_string(&v44, __val[0]);
        std::to_string(&v43, __val[1]);
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v36 = &v43;
        else
          v36 = (std::string *)v43.__r_.__value_.__r.__words[0];
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
        else
          size = v43.__r_.__value_.__l.__size_;
        v38 = std::string::append(&v44, (const std::string::value_type *)v36, size);
        v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        v46 = v38->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)(v2 + 232), __p, (uint64_t)__p);
        if (SHIBYTE(v46) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v44.__r_.__value_.__l.__data_);
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(v2 + 184), (void **)(v48 + 48), v48 + 48);
      }
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    v40 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
    if (*((_QWORD *)&v48 + 1))
    {
      v41 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
  _Block_object_dispose(&v51, 8);
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  _Block_object_dispose(&v57, 8);
  if (v62)
    operator delete(v62);
  _Block_object_dispose(&v63, 8);
}

void sub_218E4125C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;
  void *v47;

  if (a26 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  if (a32 < 0)
    operator delete(a27);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  _Block_object_dispose(&a45, 8);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  _Block_object_dispose((const void *)(v45 - 176), 8);
  v47 = *(void **)(v45 - 136);
  if (v47)
    operator delete(v47);
  _Block_object_dispose((const void *)(v45 - 112), 8);
  _Unwind_Resume(a1);
}

_QWORD *__Block_byref_object_copy__80(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  result[7] = a2[7];
  a2[5] = 0;
  a2[6] = 0;
  a2[7] = 0;
  return result;
}

void __Block_byref_object_dispose__81(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 40);
  if (v1)
    operator delete(v1);
}

void ___ZN2QP5Lexer19selectEntityLexemesEP10__CFString_block_invoke_82(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  _QWORD *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  const __CFString *v26;
  uint64_t v27;
  _QWORD v28[4];
  __int128 v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  v8 = *(_QWORD **)(a1 + 56);
  v9 = (char *)v8[8];
  v10 = (char *)v8[9];
  v11 = v9;
  if (v9 != v10)
  {
    while (*(_QWORD *)v11 != a3)
    {
      v11 += 8;
      if (v11 == v10)
      {
        v11 = (char *)v8[9];
        break;
      }
    }
  }
  if (v11 != v10)
  {
    v12 = v11 - v9;
    v13 = v12 >> 3;
    v14 = v8[14];
    v15 = (_QWORD *)(v14 + 16 * (v12 >> 3));
    if (v15[1] + *v15 >= a3 + a4)
    {
      v19 = v12 >> 3;
    }
    else
    {
      v16 = v8[15] - v14;
      if (v13 <= v16 >> 4)
        v17 = v16 >> 4;
      else
        v17 = v12 >> 3;
      v18 = v15 + 3;
      v19 = v12 >> 3;
      while (v17 != v19)
      {
        ++v19;
        v20 = *(v18 - 1) + *v18;
        v18 += 2;
        if (v20 >= a3 + a4)
          goto LABEL_16;
      }
      v19 = v17;
    }
LABEL_16:
    v21 = v8[11];
    v22 = *(_QWORD *)(v21 + 16 * v13);
    v23 = v8[43];
    v24 = (unint64_t)v12 >> 3;
    v25 = *(_QWORD *)(v21 + 16 * v19) - v22 + *(_QWORD *)(v21 + 16 * v19 + 8);
    v26 = (const __CFString *)v8[55];
    v28[0] = MEMORY[0x24BDAC760];
    v28[1] = 0x40000000;
    v28[2] = ___ZN2QP5Lexer19selectEntityLexemesEP10__CFString_block_invoke_2;
    v28[3] = &unk_24DA25418;
    v29 = *(_OWORD *)(a1 + 32);
    v30 = v8;
    v31 = v22;
    v32 = v25;
    QP::LexemeConverter::enumerateEntitiesWithTypeAndValues(v23, v26, v22, v25, a2, a5, (uint64_t)v28);
    v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    *(_QWORD *)(v27 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v24);
  }
}

void ___ZN2QP5Lexer19selectEntityLexemesEP10__CFString_block_invoke_2(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  std::string *v5;
  int64_t size;
  std::string *v7;
  char *v8;
  int64_t v9;
  std::string *v10;
  char *v11;
  int64_t v13;
  std::string *v14;
  char *v15;
  BOOL v19;
  std::string *v20;
  char *v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string v26;
  std::string v27;
  void *__p[2];
  std::string::size_type v29;
  std::string v30;

  v4 = a1[6];
  v5 = *(std::string **)a2;
  if (*(char *)(*(_QWORD *)a2 + 71) < 0)
    std::string::__init_copy_ctor_external(&v30, v5[2].__r_.__value_.__l.__data_, v5[2].__r_.__value_.__l.__size_);
  else
    v30 = v5[2];
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  else
    size = v30.__r_.__value_.__l.__size_;
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v30;
  else
    v7 = (std::string *)v30.__r_.__value_.__r.__words[0];
  v8 = (char *)v7 + size;
  if (size >= 10)
  {
    v9 = size;
    v10 = v7;
    do
    {
      v11 = (char *)memchr(v10, 73, v9 - 9);
      if (!v11)
        break;
      if (*(_QWORD *)v11 == 0x6F7A656D69547349 && *((_WORD *)v11 + 4) == 25966)
      {
        if (v11 - (char *)v7 != -1 && v11 != v8 || size < 6)
          goto LABEL_39;
        goto LABEL_19;
      }
      v10 = (std::string *)(v11 + 1);
      v9 = v8 - (char *)v10;
    }
    while (v8 - (char *)v10 >= 10);
  }
  if (size >= 6)
  {
LABEL_19:
    v13 = size;
    v14 = v7;
    do
    {
      v15 = (char *)memchr(v14, 73, v13 - 5);
      if (!v15)
        break;
      if (*(_DWORD *)v15 == 1767142217 && *((_WORD *)v15 + 2) == 25965)
      {
        if (v15 != v8 && v15 - (char *)v7 != -1)
          *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
        break;
      }
      v14 = (std::string *)(v15 + 1);
      v13 = v8 - (char *)v14;
    }
    while (v8 - (char *)v14 >= 6);
  }
LABEL_39:
  if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
    v19 = size < 8;
  else
    v19 = 1;
  if (!v19)
  {
    v20 = v7;
    do
    {
      v21 = (char *)memchr(v20, 76, size - 7);
      if (!v21)
        break;
      if (*(_QWORD *)v21 == 0x6E6F697461636F4CLL)
      {
        if (v21 != v8 && v21 - (char *)v7 != -1)
        {
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)(*(_QWORD *)(a1[5] + 8) + 40), a2);
          goto LABEL_65;
        }
        break;
      }
      v20 = (std::string *)(v21 + 1);
      size = v8 - (char *)v20;
    }
    while (v8 - (char *)v20 >= 8);
  }
  if ((void **)(v4 + 192) == std::__tree<std::string>::find<std::string>(v4 + 184, (void **)&v30.__r_.__value_.__l.__data_))
  {
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)(v4 + 136), a2);
    std::to_string(&v27, a1[7]);
    std::to_string(&v26, a1[8]);
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v26;
    else
      v22 = (std::string *)v26.__r_.__value_.__r.__words[0];
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    else
      v23 = v26.__r_.__value_.__l.__size_;
    v24 = std::string::append(&v27, (const std::string::value_type *)v22, v23);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v29 = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)(v4 + 232), __p, (uint64_t)__p);
    if (SHIBYTE(v29) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(v4 + 184), (void **)&v30.__r_.__value_.__l.__data_, (uint64_t)&v30);
  }
LABEL_65:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
}

void sub_218E417BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a26 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

void QP::Lexer::sortLexemes(QP::Lexer *this)
{
  uint64_t *v3;
  __int128 *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  __int128 *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t *, uint64_t *);
  void **v16;

  v3 = (uint64_t *)*((_QWORD *)this + 17);
  v4 = (__int128 *)*((_QWORD *)this + 18);
  v5 = (char *)this + 136;
  v6 = 126 - 2 * __clz(((char *)v4 - (char *)v3) >> 4);
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = (uint64_t (*)(uint64_t *, uint64_t *))QP::lexeme_ordered_range;
  if (v4 == (__int128 *)v3)
    v7 = 0;
  else
    v7 = v6;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*,false>(v3, v4, &v15, v7, 1);
  QP::Lexer::expand((uint64_t)this, (uint64_t)this + 184, (uint64_t)v5, (uint64_t *)&v12);
  std::vector<std::shared_ptr<QP::Lexeme>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::Lexeme>*>,std::__wrap_iter<std::shared_ptr<QP::Lexeme>*>>((uint64_t *)this + 63, *((_QWORD *)this + 63), v12, v13, ((char *)v13 - (char *)v12) >> 4);
  v8 = (uint64_t *)*((_QWORD *)this + 63);
  v9 = (__int128 *)*((_QWORD *)this + 64);
  v10 = 126 - 2 * __clz(((char *)v9 - (char *)v8) >> 4);
  v15 = QP::lexeme_less_than_range;
  if (v9 == (__int128 *)v8)
    v11 = 0;
  else
    v11 = v10;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*,false>(v8, v9, &v15, v11, 1);
  v16 = (void **)&v12;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v16);
}

void sub_218E41900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  *(_QWORD *)(v10 - 24) = &a10;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 24));
  _Unwind_Resume(a1);
}

void QP::Lexer::addLexemes(QP::Lexer *this)
{
  const __CFString *v2;
  CFIndex Length;
  const __CFCharacterSet *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void ***v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t **v20;
  _QWORD v21[7];
  uint64_t v22[3];
  uint64_t ***v23;
  void ***v24;
  uint64_t v25;
  __n128 (*v26)(_QWORD *, uint64_t);
  void (*v27)(uint64_t);
  void *__p;
  void *v29;
  uint64_t v30;
  _QWORD *v31[3];
  uint64_t **v32;
  uint64_t **v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void **v38[2];

  v35 = 0;
  v36 = 0;
  v37 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v2 = (const __CFString *)*((_QWORD *)this + 55);
  Length = CFStringGetLength(v2);
  v4 = (const __CFCharacterSet *)*((_QWORD *)this + 50);
  memset(v31, 0, sizeof(v31));
  std::vector<std::shared_ptr<QP::Lexeme>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::Lexeme>*,std::shared_ptr<QP::Lexeme>*>((char *)v31, *((_QWORD **)this + 63), *((_QWORD **)this + 64), (uint64_t)(*((_QWORD *)this + 64) - *((_QWORD *)this + 63)) >> 4);
  QP::subtokenize(v2, 0, Length, v4, (uint64_t)&v35, (uint64_t *)&v32, v31);
  v23 = (uint64_t ***)v31;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v5 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v33 - v32));
  v38[0] = (void **)QP::ranges_greater_than_range;
  if (v33 == v32)
    v6 = 0;
  else
    v6 = v5;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*,false>((unint64_t)v32, v33, (uint64_t (**)(void **, void **))v38, v6, 1);
  v7 = v32;
  v19 = v33;
  if (v32 != v33)
  {
    v18 = (uint64_t *)((char *)this + 552);
    v8 = MEMORY[0x24BDAC760];
    do
    {
      v23 = 0;
      v24 = (void ***)&v23;
      v25 = 0x4002000000;
      v26 = __Block_byref_object_copy__89;
      v27 = __Block_byref_object_dispose__90;
      v29 = 0;
      v30 = 0;
      __p = 0;
      v10 = *v7;
      v9 = v7[1];
      if (*v7 == v9)
      {
        v14 = (void ***)&v23;
      }
      else
      {
        v20 = v7;
        v11 = 0;
        do
        {
          v12 = *v10;
          v13 = v10[1];
          memset(v22, 0, sizeof(v22));
          std::vector<std::shared_ptr<QP::Lexeme>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::Lexeme>*,std::shared_ptr<QP::Lexeme>*>((char *)v22, *((_QWORD **)this + 63), *((_QWORD **)this + 64), (uint64_t)(*((_QWORD *)this + 64) - *((_QWORD *)this + 63)) >> 4);
          v21[0] = v8;
          v21[1] = 0x40000000;
          v21[2] = ___ZN2QP5Lexer10addLexemesEv_block_invoke;
          v21[3] = &unk_24DA25488;
          v21[5] = this;
          v21[6] = v11;
          v21[4] = &v23;
          QP::enumerateIndexesOfRange(v22, v12, v13, (uint64_t)v21);
          v38[0] = (void **)v22;
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](v38);
          ++v11;
          v10 += 2;
        }
        while (v10 != v9);
        v14 = v24;
        v7 = v20;
      }
      v15 = (uint64_t)(v14 + 5);
      v16 = *((_QWORD *)this + 70);
      if (v16 >= *((_QWORD *)this + 71))
      {
        v17 = std::vector<std::vector<CFRange>>::__push_back_slow_path<std::vector<CFRange> const&>(v18, v15);
      }
      else
      {
        std::vector<std::vector<CFRange>>::__construct_one_at_end[abi:ne180100]<std::vector<CFRange> const&>((uint64_t)v18, v15);
        v17 = v16 + 24;
      }
      *((_QWORD *)this + 70) = v17;
      _Block_object_dispose(&v23, 8);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      v7 += 3;
    }
    while (v7 != v19);
  }
  v23 = &v32;
  std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
}

void sub_218E41BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  uint64_t v30;
  void *v32;

  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  a24 = v30 - 160;
  std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  v32 = *(void **)(v30 - 136);
  if (v32)
  {
    *(_QWORD *)(v30 - 128) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(a1);
}

void QP::subtokenize(const __CFString *a1, CFIndex a2, uint64_t a3, const __CFCharacterSet *a4, uint64_t a5, uint64_t *a6, _QWORD **a7)
{
  CFIndex v13;
  int v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  CFIndex *v24;
  CFIndex *v25;
  unint64_t v27;
  CFIndex *v28;
  _QWORD *v29;
  CFIndex *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  CFIndex *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD v41[3];
  char *v42;
  char *v43;
  uint64_t v44;
  void *__p;
  unint64_t v46;
  _QWORD v47[3];
  uint64_t v48[3];
  CFRange result;
  void **v50;
  void ***v51;
  uint64_t v52;
  char v53;
  void **v54;
  CFRange v55;

  if (a3 < 1)
    return;
  v13 = 1;
  while (1)
  {
    v42 = 0;
    v43 = 0;
    v44 = 0;
    std::vector<std::shared_ptr<QP::Lexeme>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::Lexeme>*,std::shared_ptr<QP::Lexeme>*>((char *)&v42, *a7, a7[1], ((char *)a7[1] - (char *)*a7) >> 4);
    v50 = 0;
    v51 = &v50;
    v52 = 0x2000000000;
    v53 = 0;
    if (a1)
    {
      result = (CFRange)xmmword_218E9F890;
      v55.location = a2;
      v55.length = v13;
      if (CFStringFindCharacterFromSet(a1, a4, v55, 0, &result) && result.location == a2 && v13 == result.length)
      {
        v14 = 1;
        v15 = 1;
      }
      else
      {
        memset(v48, 0, sizeof(v48));
        std::vector<std::shared_ptr<QP::Lexeme>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::Lexeme>*,std::shared_ptr<QP::Lexeme>*>((char *)v48, v42, v43, (v43 - v42) >> 4);
        __p = (void *)MEMORY[0x24BDAC760];
        v46 = 0x40000000;
        v47[0] = ___ZN2QPL13containsRangeEPK10__CFString7CFRangePK16__CFCharacterSetNSt3__16vectorINS7_10shared_ptrINS_6LexemeEEENS7_9allocatorISB_EEEEPb_block_invoke;
        v47[1] = &unk_24DA25518;
        v47[2] = &v50;
        QP::enumerateIndexesOfRange(v48, a2, v13, (uint64_t)&__p);
        v54 = (void **)v48;
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v54);
        v14 = 0;
        v15 = *((unsigned __int8 *)v51 + 24);
      }
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
    _Block_object_dispose(&v50, 8);
    __p = &v42;
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (v15)
      break;
LABEL_32:
    if (a3 == v13++)
      return;
  }
  if (a3 != v13)
  {
    __p = 0;
    v46 = 0;
    v47[0] = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 4);
    if (!v14)
    {
      v16 = (_QWORD *)v46;
      if (v46 >= v47[0])
      {
        v18 = __p;
        v19 = (uint64_t)(v46 - (_QWORD)__p) >> 4;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v21 = v47[0] - (_QWORD)__p;
        if ((uint64_t)(v47[0] - (_QWORD)__p) >> 3 > v20)
          v20 = v21 >> 3;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
          v22 = 0xFFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)v47, v22);
          v18 = __p;
          v16 = (_QWORD *)v46;
        }
        else
        {
          v23 = 0;
        }
        v24 = (CFIndex *)&v23[16 * v19];
        *v24 = a2;
        v24[1] = v13;
        v25 = v24;
        if (v16 != v18)
        {
          do
          {
            *((_OWORD *)v25 - 1) = *((_OWORD *)v16 - 1);
            v25 -= 2;
            v16 -= 2;
          }
          while (v16 != v18);
          v18 = __p;
        }
        v17 = v24 + 2;
        __p = v25;
        v46 = (unint64_t)(v24 + 2);
        v47[0] = &v23[16 * v22];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *(_QWORD *)v46 = a2;
        v16[1] = v13;
        v17 = v16 + 2;
      }
      v46 = (unint64_t)v17;
    }
    memset(v41, 0, sizeof(v41));
    std::vector<std::shared_ptr<QP::Lexeme>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::Lexeme>*,std::shared_ptr<QP::Lexeme>*>((char *)v41, *a7, a7[1], ((char *)a7[1] - (char *)*a7) >> 4);
    QP::subtokenize(a1, v13 + a2, a3 - v13, a4, &__p, a6, v41);
    v50 = (void **)v41;
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v50);
    if (__p)
    {
      v46 = (unint64_t)__p;
      operator delete(__p);
    }
    goto LABEL_32;
  }
  if (!v14)
  {
    v27 = *(_QWORD *)(a5 + 16);
    v28 = *(CFIndex **)(a5 + 8);
    if ((unint64_t)v28 >= v27)
    {
      v30 = *(CFIndex **)a5;
      v31 = ((uint64_t)v28 - *(_QWORD *)a5) >> 4;
      v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v33 = v27 - (_QWORD)v30;
      if (v33 >> 3 > v32)
        v32 = v33 >> 3;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
        v34 = 0xFFFFFFFFFFFFFFFLL;
      else
        v34 = v32;
      if (v34)
      {
        v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(a5 + 16, v34);
        v30 = *(CFIndex **)a5;
        v28 = *(CFIndex **)(a5 + 8);
      }
      else
      {
        v35 = 0;
      }
      v36 = (CFIndex *)&v35[16 * v31];
      v37 = &v35[16 * v34];
      *v36 = a2;
      v36[1] = a3;
      v29 = v36 + 2;
      if (v28 != v30)
      {
        do
        {
          *((_OWORD *)v36 - 1) = *((_OWORD *)v28 - 1);
          v36 -= 2;
          v28 -= 2;
        }
        while (v28 != v30);
        v30 = *(CFIndex **)a5;
      }
      *(_QWORD *)a5 = v36;
      *(_QWORD *)(a5 + 8) = v29;
      *(_QWORD *)(a5 + 16) = v37;
      if (v30)
        operator delete(v30);
    }
    else
    {
      *v28 = a2;
      v28[1] = a3;
      v29 = v28 + 2;
    }
    *(_QWORD *)(a5 + 8) = v29;
  }
  v38 = a6[1];
  if (v38 >= a6[2])
  {
    v39 = std::vector<std::vector<CFRange>>::__push_back_slow_path<std::vector<CFRange> const&>(a6, a5);
  }
  else
  {
    std::vector<std::vector<CFRange>>::__construct_one_at_end[abi:ne180100]<std::vector<CFRange> const&>((uint64_t)a6, a5);
    v39 = v38 + 24;
  }
  a6[1] = v39;
}

void sub_218E4202C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__89(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__90(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t *QP::enumerateIndexesOfRange(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  char v25;

  v6 = result;
  v25 = 0;
  v7 = (_QWORD *)result[1];
  if (a2)
  {
    v9 = (_QWORD *)*result;
    if (v7 != (_QWORD *)*result)
    {
      v10 = ((uint64_t)v7 - *result) >> 4;
      do
      {
        v11 = v10 >> 1;
        v12 = &v9[2 * (v10 >> 1)];
        v14 = *v12;
        v13 = v12 + 2;
        v10 += ~(v10 >> 1);
        if (*(_QWORD *)(v14 + 80) + *(_QWORD *)(v14 + 72) <= a2)
          v9 = v13;
        else
          v10 = v11;
      }
      while (v10);
    }
    if (v9 != v7)
    {
      v15 = v9;
      do
      {
        v16 = *(_QWORD *)(*v15 + 72);
        if (v16 == a2 && *(_QWORD *)(*v15 + 80) == a3)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, char *))(a4 + 16))(a4, ((uint64_t)v15 - *v6) >> 4, &v25);
          if (v25)
            return result;
          v7 = (_QWORD *)v6[1];
        }
        else if (v16 > a2)
        {
          return result;
        }
        v9 += 2;
        v15 += 2;
      }
      while (v9 != v7);
    }
  }
  else
  {
    v18 = *result;
    if (v7 != (_QWORD *)*result)
    {
      v19 = 0;
      v20 = 0;
      do
      {
        v21 = *(_QWORD *)(v18 + v19);
        v22 = *(_QWORD *)(v21 + 72);
        v23 = *(_QWORD *)(v21 + 80);
        if (v22)
          v24 = 0;
        else
          v24 = v23 == a3;
        if (v24)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t, char *))(a4 + 16))(a4, v20, &v25);
          if (v25)
            return result;
          v18 = *v6;
          v7 = (_QWORD *)v6[1];
        }
        else if (v22 > 0)
        {
          return result;
        }
        ++v20;
        v19 += 16;
      }
      while (v20 < ((uint64_t)v7 - v18) >> 4);
    }
  }
  return result;
}

void ___ZN2QP5Lexer10addLexemesEv_block_invoke(_QWORD *a1, uint64_t a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v3 = *(_OWORD *)(*(_QWORD *)(a1[5] + 504) + 16 * a2);
  v4 = *(std::__shared_weak_count **)(*(_QWORD *)(a1[5] + 504) + 16 * a2 + 8);
  if (*((_QWORD *)&v3 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v3 + 1) + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[6];
  v8 = *(_QWORD **)(a1[4] + 8);
  v9 = (char *)v8[6];
  v10 = v8[7];
  if ((unint64_t)v9 >= v10)
  {
    v12 = (char *)v8[5];
    v13 = (v9 - v12) >> 4;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v15 = v10 - (_QWORD)v12;
    if (v15 >> 3 > v14)
      v14 = v15 >> 3;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)(v8 + 7), v16);
      v12 = (char *)v8[5];
      v9 = (char *)v8[6];
    }
    else
    {
      v17 = 0;
    }
    v18 = &v17[16 * v13];
    v19 = &v17[16 * v16];
    *(_QWORD *)v18 = v7;
    *((_QWORD *)v18 + 1) = a2;
    v11 = v18 + 16;
    if (v9 != v12)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v9 - 1);
        v18 -= 16;
        v9 -= 16;
      }
      while (v9 != v12);
      v12 = (char *)v8[5];
    }
    v8[5] = v18;
    v8[6] = v11;
    v8[7] = v19;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *(_QWORD *)v9 = v7;
    *((_QWORD *)v9 + 1) = a2;
    v11 = v9 + 16;
  }
  v8[6] = v11;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_218E423BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QP::Lexer::addEntityLexemes(QP::Lexer *this)
{
  const __CFAllocator *v2;
  const __CFDictionary *Mutable;
  uint64_t v4;
  uint64_t v5;
  CFNumberRef v6;
  char v7;
  CFRange *v8;
  CFRange *v9;
  CFIndex v10;
  CFRange v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  CFStringRef v20;
  char *v21;
  size_t v22;
  char *v23;
  std::string *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::string v28;
  QP *v29;
  __int128 v30;
  std::string __p;
  void *value[2];
  unsigned __int8 v33;
  CFTypeRef v34;
  CFTypeRef cf[2];
  char v36;
  CFNumberRef number;
  CFNumberRef v38;
  CFRange v39;
  CFIndex location;
  uint64_t valuePtr;
  CFDictionaryRef v42;

  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  valuePtr = 0;
  v42 = Mutable;
  v4 = *((_QWORD *)this + 17);
  v5 = *((_QWORD *)this + 18);
  while (v4 != v5)
  {
    v6 = CFNumberCreate(v2, kCFNumberCFIndexType, (const void *)(*(_QWORD *)v4 + 72));
    v39.location = (CFIndex)v6;
    cf[0] = CFNumberCreate(v2, kCFNumberIntType, &valuePtr);
    if (*(unsigned __int16 *)(*(_QWORD *)v4 + 88) - 1 > 3)
      goto LABEL_11;
    value[0] = 0;
    if (CFDictionaryGetValueIfPresent(Mutable, v6, (const void **)value)
      && (__p.__r_.__value_.__r.__words[0] = 0,
          CFNumberGetValue((CFNumberRef)value[0], kCFNumberSInt64Type, &__p),
          *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 17) + 16 * __p.__r_.__value_.__r.__words[0]) + 80) > *(_QWORD *)(*(_QWORD *)v4 + 80)))
    {
      v7 = 0;
      ++valuePtr;
    }
    else
    {
      CFDictionarySetValue(Mutable, (const void *)v39.location, cf[0]);
      v7 = 1;
    }
    if (value[0])
      CFRelease(value[0]);
    if ((v7 & 1) != 0)
LABEL_11:
      ++valuePtr;
    if (cf[0])
      CFRelease(cf[0]);
    if (v39.location)
      CFRelease((CFTypeRef)v39.location);
    v4 += 16;
  }
  v8 = (CFRange *)*((_QWORD *)this + 57);
  v9 = (CFRange *)*((_QWORD *)this + 58);
  if (v8 != v9)
  {
    v10 = -1;
    do
    {
      v11 = *v8;
      location = v8[1].location;
      v39 = v11;
      v38 = CFNumberCreate(v2, kCFNumberCFIndexType, &v39);
      number = 0;
      if (CFDictionaryGetValueIfPresent(v42, v38, (const void **)&number))
      {
        value[0] = 0;
        CFNumberGetValue(number, kCFNumberSInt64Type, value);
        v12 = *(_OWORD *)(*((_QWORD *)this + 17) + 16 * (uint64_t)value[0]);
        *(_OWORD *)cf = v12;
        if (*((_QWORD *)&v12 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)this + 66, (__int128 *)cf);
        v15 = (std::__shared_weak_count *)cf[1];
        v16 = *((_QWORD *)cf[0] + 9);
        if (*((_QWORD *)cf[0] + 10) + v16 > v10)
          v10 = *((_QWORD *)cf[0] + 10) + v16;
        if (cf[1])
        {
          v17 = (unint64_t *)((char *)cf[1] + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
      }
      else if (v10 <= v39.location || v10 < v39.length + v39.location)
      {
        std::string::basic_string[abi:ne180100]<0>(cf, "Text");
        if ((location & 0x400) != 0)
        {
          if (v36 < 0)
          {
            cf[1] = (CFTypeRef)11;
            v19 = (char *)cf[0];
          }
          else
          {
            v36 = 11;
            v19 = (char *)cf;
          }
          strcpy(v19, "Punctuation");
        }
        v20 = CFStringCreateWithSubstring(v2, *((CFStringRef *)this + 55), v39);
        v34 = v20;
        QP::getUTF8StringFromCFString(v20, value);
        if (*((_QWORD *)this + 52))
        {
          if ((v33 & 0x80u) == 0)
            v21 = (char *)value;
          else
            v21 = (char *)value[0];
          if ((v33 & 0x80u) == 0)
            v22 = v33;
          else
            v22 = (size_t)value[1];
          memset(&__p, 0, sizeof(__p));
          std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>((char *)&__p, v21, &v21[v22], v22);
          CFStringGetLength(v20);
          if (SILocalizationGetTokenType() == 5)
          {
            if (v36 < 0)
            {
              cf[1] = (CFTypeRef)8;
              v23 = (char *)cf[0];
            }
            else
            {
              v36 = 8;
              v23 = (char *)cf;
            }
            strcpy(v23, "Stopword");
          }
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)cf, (uint64_t)&v39, &v30);
        v29 = 0;
        if (CFDictionaryGetValueIfPresent(*((CFDictionaryRef *)this + 38), v20, (const void **)&v29))
        {
          QP::getUTF8StringFromCFString((const __CFString *)v29, &__p);
          v24 = (std::string *)v30;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v28, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          else
            v28 = __p;
          std::string::operator=(v24 + 4, &v28);
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v28.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)this + 66, &v30);
        v25 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
        if (*((_QWORD *)&v30 + 1))
        {
          v26 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        if ((char)v33 < 0)
          operator delete(value[0]);
        if (v34)
          CFRelease(v34);
        if (v36 < 0)
          operator delete((void *)cf[0]);
      }
      if (number)
        CFRelease(number);
      if (v38)
        CFRelease(v38);
      v8 = (CFRange *)((char *)v8 + 24);
    }
    while (v8 != v9);
    Mutable = v42;
  }
  if (Mutable)
    CFRelease(Mutable);
}

void sub_218E428BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,const void *a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,const void *a39)
{
  uint64_t v39;

  if (a24 < 0)
    operator delete(__p);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a30 < 0)
    operator delete(a25);
  nlp::CFScopedPtr<__CFString const*>::reset(&a31, 0);
  if (a37 < 0)
    operator delete(a32);
  nlp::CFScopedPtr<__CFNumber const*>::reset(&a39, 0);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)(v39 - 136), 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)(v39 - 96), 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP5Lexer5parseEb_block_invoke(_QWORD *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFRange v10;
  uint64_t v11;
  CFRange v12;
  uint64_t v13;
  CFRange v14;
  uint64_t v15;

  v5 = a1[8];
  if ((*(_BYTE *)(a2 + 17) & 8) == 0)
  {
    v14 = *(CFRange *)a2;
    v15 = *(_QWORD *)(a2 + 16);
    QP::Lexer::tagTokenWhitespace((uint64_t *)v5, &v14.location, *(CFMutableStringRef *)(*(_QWORD *)(a1[4] + 8) + 24));
    v7 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
    v8 = *(_QWORD *)(a1[6] + 8);
    v9 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 24) = v9 + 1;
    *(_OWORD *)(v7 + 16 * v9) = *(_OWORD *)a2;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 464) - *(_QWORD *)(v5 + 456)) >> 3) >= a1[9])
      *a3 = 1;
  }
  if (CFStringFindCharacterFromSet(*(CFStringRef *)(v5 + 440), *(CFCharacterSetRef *)(v5 + 368), *(CFRange *)a2, 0, 0))
  {
    v12 = *(CFRange *)a2;
    v13 = *(_QWORD *)(a2 + 16);
    QP::Lexer::tagTokenSingleQuote(v5, &v12.location, *(__CFString **)(*(_QWORD *)(a1[4] + 8) + 24));
  }
  else if (!CFStringFindCharacterFromSet(*(CFStringRef *)(v5 + 440), *(CFCharacterSetRef *)(v5 + 392), *(CFRange *)a2, 0, 0))
  {
    v10 = *(CFRange *)a2;
    v11 = *(_QWORD *)(a2 + 16);
    QP::Lexer::tagTokenPunctuation(v5, (uint64_t)&v10, *(__CFString **)(*(_QWORD *)(a1[4] + 8) + 24), *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 40), *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 48));
  }
}

void QP::Lexer::merge(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __int16 a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  __int128 v32;

  v7 = *(_QWORD *)(a1 + 344);
  v8 = (std::__shared_weak_count *)a2[1];
  v30 = *a2;
  v31 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (std::__shared_weak_count *)a3[1];
  v28 = *a3;
  v29 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  QP::LexemeConverter::merge(v7, &v30, &v28, a4, (uint64_t)&v32);
  v14 = v29;
  if (v29)
  {
    v15 = (unint64_t *)&v29->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v31;
  if (v31)
  {
    v18 = (unint64_t *)&v31->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if ((_QWORD)v32)
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)(a1 + 504), &v32);
  v20 = *(_QWORD *)(a1 + 512);
  v22 = *(_QWORD *)(v20 - 16);
  v21 = *(_QWORD *)(v20 - 8);
  *a5 = v22;
  a5[1] = v21;
  if (v21)
  {
    v23 = (unint64_t *)(v21 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_218E42CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void QP::Lexer::resolve(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, BOOL *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 v24;

  v7 = *(_QWORD *)(a1 + 344);
  v8 = (std::__shared_weak_count *)a2[1];
  v22 = *a2;
  v23 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  QP::LexemeConverter::resolve(v7, &v22, a3, a4, (uint64_t)&v24);
  v11 = v23;
  if (v23)
  {
    v12 = (unint64_t *)&v23->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if ((_QWORD)v24)
  {
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)(a1 + 504), &v24);
    v14 = *(_QWORD *)(a1 + 512);
    v16 = *(_QWORD *)(v14 - 16);
    v15 = *(_QWORD *)(v14 - 8);
    *a5 = v16;
    a5[1] = v15;
    if (v15)
    {
      v17 = (unint64_t *)(v15 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_218E42DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

os_log_t ___ZL11lexerLoggerv_block_invoke()
{
  const char *v0;
  os_log_t result;

  v0 = _nlpLoggingSubsystem();
  result = os_log_create(v0, "QueryParserLexer");
  lexerLogger(void)::log = (uint64_t)result;
  return result;
}

void std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<CFRange>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<CFRange>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

std::string *QP::Lexeme::Lexeme(std::string *this, __int128 *a2, uint64_t a3, std::string::size_type a4)
{
  __int128 v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *p_p;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  std::string __p;
  std::string v20;
  std::string v21;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v8;
  }
  std::string::basic_string[abi:ne180100]<0>(this[1].__r_.__value_.__r.__words, "");
  std::to_string(&v20, a3);
  v9 = *((char *)a2 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)a2;
  else
    v10 = *(const std::string::value_type **)a2;
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)a2 + 23);
  else
    v11 = *((_QWORD *)a2 + 1);
  v12 = std::string::insert(&v20, 0, v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a4);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v16 = std::string::append(&v21, (const std::string::value_type *)p_p, size);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  this[2].__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  this[3].__r_.__value_.__r.__words[0] = a3;
  this[3].__r_.__value_.__l.__size_ = a4;
  LOWORD(this[3].__r_.__value_.__r.__words[2]) = 0;
  std::string::basic_string[abi:ne180100]<0>(this[4].__r_.__value_.__r.__words, "");
  return this;
}

void sub_218E43020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  void **v27;
  void **v28;

  if (*(char *)(v26 + 71) < 0)
    operator delete(*v28);
  if (*(char *)(v26 + 47) < 0)
    operator delete(*v27);
  if (*(char *)(v26 + 23) < 0)
    operator delete(*(void **)v26);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_218E431BC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::shared_ptr<QP::Lexeme>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::Lexeme>*>,std::__wrap_iter<std::shared_ptr<QP::Lexeme>*>>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD v33[5];

  v5 = (_QWORD *)a2;
  if (a5 < 1)
    return v5;
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    v13 = *a1;
    v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
    if (v14 >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v15 = (a2 - v13) >> 4;
    v16 = v10 - v13;
    if (v16 >> 3 > v14)
      v14 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v33[4] = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(v9, v17);
    else
      v18 = 0;
    v26 = (uint64_t *)&v18[16 * v15];
    v33[0] = v18;
    v33[1] = v26;
    v33[3] = &v18[16 * v17];
    v27 = &v26[2 * a5];
    do
    {
      *v26 = *a3;
      v28 = a3[1];
      v26[1] = v28;
      if (v28)
      {
        v29 = (unint64_t *)(v28 + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v26 += 2;
      a3 += 2;
    }
    while (v26 != v27);
    v33[2] = v27;
    v5 = (_QWORD *)std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__swap_out_circular_buffer(a1, v33, v5);
    std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer((uint64_t)v33);
    return v5;
  }
  v19 = (uint64_t)(v12 - a2) >> 4;
  if (v19 >= a5)
  {
    v20 = &a3[2 * a5];
LABEL_29:
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__move_range((uint64_t)a1, a2, v12, (char *)(a2 + 16 * a5));
    if (v20 != a3)
    {
      v31 = v5;
      do
      {
        std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v31, a3);
        a3 += 2;
        v31 += 2;
      }
      while (a3 != v20);
    }
    return v5;
  }
  v20 = &a3[2 * v19];
  if (v20 == a4)
  {
    v22 = *(uint64_t **)(v9 - 8);
  }
  else
  {
    v21 = &a3[2 * v19];
    v22 = *(uint64_t **)(v9 - 8);
    do
    {
      *v22 = *v21;
      v23 = v21[1];
      v22[1] = v23;
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v21 += 2;
      v22 += 2;
    }
    while (v21 != a4);
  }
  a1[1] = (uint64_t)v22;
  if ((uint64_t)(v12 - a2) >= 1)
    goto LABEL_29;
  return v5;
}

void sub_218E433A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*,false>(uint64_t *a1, __int128 *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, uint64_t))
{
  __int128 *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;

  if (a1 != a2)
  {
    v5 = (__int128 *)(a1 + 16);
    if (a1 + 16 != a2)
    {
      v7 = 0;
      v8 = a1;
      do
      {
        v9 = v8;
        v8 = (uint64_t)v5;
        if ((*a3)(v5, v9))
        {
          v16 = *(_OWORD *)v8;
          *(_QWORD *)v8 = 0;
          *(_QWORD *)(v8 + 8) = 0;
          v10 = v7;
          while (1)
          {
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](a1 + v10 + 16, (__int128 *)(a1 + v10));
            if (!v10)
              break;
            v11 = (*a3)(&v16, a1 + v10 - 16);
            v10 -= 16;
            if ((v11 & 1) == 0)
            {
              v12 = a1 + v10 + 16;
              goto LABEL_10;
            }
          }
          v12 = a1;
LABEL_10:
          std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v12, &v16);
          v13 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
          if (*((_QWORD *)&v16 + 1))
          {
            v14 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
        }
        v5 = (__int128 *)(v8 + 16);
        v7 += 16;
      }
      while (v8 + 16 != a2);
    }
  }
}

void sub_218E43824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  __int128 *v4;
  __int128 *v5;
  __int128 *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  if (a1 != a2)
  {
    v4 = a1;
    v5 = a1 + 1;
    if (a1 + 1 != a2)
    {
      do
      {
        v7 = v5;
        if ((*a3)(v5, v4))
        {
          v11 = *v7;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v7 + 1) = 0;
          do
          {
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)(v4 + 1), v4);
            --v4;
          }
          while (((*a3)(&v11, v4) & 1) != 0);
          std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)(v4 + 1), &v11);
          v8 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
          if (*((_QWORD *)&v11 + 1))
          {
            v9 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
            do
              v10 = __ldaxr(v9);
            while (__stlxr(v10 - 1, v9));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
        }
        v5 = v7 + 1;
        v4 = v7;
      }
      while (v7 + 1 != a2);
    }
  }
}

void sub_218E4391C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::Lexeme> *,BOOL (*&)(std::shared_ptr<QP::Lexeme>&,std::shared_ptr<QP::Lexeme>&)>(uint64_t a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  __int128 *v4;
  __int128 *v6;
  __int128 *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v15;

  v4 = a2;
  v15 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (((*a3)(&v15, a2 - 1) & 1) != 0)
  {
    v6 = (__int128 *)a1;
    do
      ++v6;
    while (((*a3)(&v15, v6) & 1) == 0);
  }
  else
  {
    v7 = (__int128 *)(a1 + 16);
    do
    {
      v6 = v7;
      if (v7 >= v4)
        break;
      v8 = (*a3)(&v15, v7);
      v7 = v6 + 1;
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      --v4;
    while (((*a3)(&v15, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = *(_QWORD *)v4;
    *(_QWORD *)v4 = v9;
    v10 = *((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = *((_QWORD *)v4 + 1);
    *((_QWORD *)v4 + 1) = v10;
    do
      ++v6;
    while (!(*a3)(&v15, v6));
    do
      --v4;
    while (((*a3)(&v15, v4) & 1) != 0);
  }
  if (v6 - 1 != (__int128 *)a1)
    std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](a1, v6 - 1);
  std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)(v6 - 1), &v15);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v6;
}

void sub_218E43AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__int128 *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::Lexeme> *,BOOL (*&)(std::shared_ptr<QP::Lexeme>&,std::shared_ptr<QP::Lexeme>&)>(uint64_t a1, uint64_t *a2, uint64_t (**a3)(uint64_t, __int128 *))
{
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v18;

  v6 = 0;
  v18 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  do
  {
    v7 = (*a3)(a1 + v6 + 16, &v18);
    v6 += 16;
  }
  while ((v7 & 1) != 0);
  v8 = a1 + v6;
  if (v6 == 16)
  {
    do
    {
      if (v8 >= (unint64_t)a2)
        break;
      a2 -= 2;
    }
    while (((*a3)((uint64_t)a2, &v18) & 1) == 0);
  }
  else
  {
    do
      a2 -= 2;
    while (!(*a3)((uint64_t)a2, &v18));
  }
  if (v8 >= (unint64_t)a2)
  {
    v13 = (__int128 *)(v8 - 16);
  }
  else
  {
    v9 = (uint64_t *)(a1 + v6);
    v10 = a2;
    do
    {
      v11 = *v9;
      *v9 = *v10;
      *v10 = v11;
      v12 = v9[1];
      v9[1] = v10[1];
      v10[1] = v12;
      do
        v9 += 2;
      while (((*a3)((uint64_t)v9, &v18) & 1) != 0);
      do
        v10 -= 2;
      while (!(*a3)((uint64_t)v10, &v18));
    }
    while (v9 < v10);
    v13 = (__int128 *)(v9 - 2);
  }
  if (v13 != (__int128 *)a1)
    std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](a1, v13);
  std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)v13, &v18);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v13;
}

void sub_218E43C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;

  v6 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)(a2 - 2, a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        v9 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v10 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a1 + 4, a3);
      v11 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      v20 = *(_OWORD *)v11;
      *v11 = 0;
      v11[1] = 0;
      v14 = v12;
      while (1)
      {
        std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)a1 + v14 + 48, (__int128 *)((char *)a1 + v14 + 32));
        if (v14 == -32)
          break;
        v15 = (*a3)((uint64_t *)&v20, (uint64_t *)((char *)a1 + v14 + 16));
        v14 -= 16;
        if ((v15 & 1) == 0)
        {
          v16 = (uint64_t)a1 + v14 + 48;
          goto LABEL_12;
        }
      }
      v16 = (uint64_t)a1;
LABEL_12:
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v16, &v20);
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
      if (*((_QWORD *)&v20 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (++v13 == 8)
        return v11 + 2 == a2;
    }
    v10 = v11;
    v12 += 16;
    v11 += 2;
    if (v11 == a2)
      return 1;
  }
}

void sub_218E43E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__int128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*,std::shared_ptr<QP::Lexeme>*>(char *a1, char *a2, __int128 *a3, uint64_t (**a4)(__int128 *, uint64_t))
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  if (a1 != a2)
  {
    v6 = (uint64_t)a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t)&a1[16 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if ((__int128 *)v6 != a3)
    {
      v14 = (__int128 *)v6;
      do
      {
        if ((*a4)(v14, (uint64_t)a1))
        {
          v15 = *(_QWORD *)v14;
          *(_QWORD *)v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v15;
          v16 = *((_QWORD *)v14 + 1);
          *((_QWORD *)v14 + 1) = *((_QWORD *)a1 + 1);
          *((_QWORD *)a1 + 1) = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*>((uint64_t)a1, a4, v9, (uint64_t)a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = (uint64_t)a3;
    }
    if (v8 >= 17)
    {
      v17 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*>((uint64_t)a1, v6, (unsigned int (**)(uint64_t, uint64_t))a4, v17);
        v6 -= 16;
      }
      while (v17-- > 2);
    }
    return (__int128 *)v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*>(uint64_t a1, uint64_t (**a2)(__int128 *, uint64_t), uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (a4 - a1) >> 4)
    {
      v10 = (a4 - a1) >> 3;
      v11 = v10 + 1;
      v12 = (__int128 *)(a1 + 16 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(v12, (uint64_t)(v12 + 1)))
      {
        ++v12;
        v11 = v13;
      }
      if (((*a2)(v12, v5) & 1) == 0)
      {
        v19 = *(_OWORD *)v5;
        *(_QWORD *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        do
        {
          v14 = (uint64_t)v12;
          std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v5, v12);
          if (v7 < v11)
            break;
          v15 = (2 * v11) | 1;
          v12 = (__int128 *)(a1 + 16 * v15);
          v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            v11 = v15;
          }
          else if ((*a2)((__int128 *)(a1 + 16 * v15), (uint64_t)(v12 + 1)))
          {
            ++v12;
          }
          else
          {
            v11 = v15;
          }
          v5 = v14;
        }
        while (!(*a2)(v12, (uint64_t)&v19));
        std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v14, &v19);
        v16 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
        if (*((_QWORD *)&v19 + 1))
        {
          v17 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
      }
    }
  }
}

void sub_218E44138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*>(uint64_t a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;

  if (a4 >= 2)
  {
    v13 = *(_OWORD *)a1;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v7 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a3, a4);
    v8 = v7;
    v9 = (__int128 *)(a2 - 16);
    if (v7 == v9)
    {
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)v7, &v13);
    }
    else
    {
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)v7, v9);
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)v9, &v13);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*>(a1, (uint64_t)(v8 + 1), (uint64_t (**)(__int128 *, __int128 *))a3, ((uint64_t)v8 - a1 + 16) >> 4);
    }
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
    if (*((_QWORD *)&v13 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_218E4422C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = v4 >> 1;
    v8 = (__int128 *)(a1 + 16 * (v4 >> 1));
    v9 = a2 - 16;
    if ((*a3)(v8, (__int128 *)(a2 - 16)))
    {
      v14 = *(_OWORD *)v9;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      do
      {
        v10 = (uint64_t)v8;
        std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v9, v8);
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (__int128 *)(a1 + 16 * v7);
        v9 = v10;
      }
      while (((*a3)(v8, &v14) & 1) != 0);
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v10, &v14);
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
      if (*((_QWORD *)&v14 + 1))
      {
        v12 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
  }
}

void sub_218E44328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        else
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<long>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

_QWORD *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t ___ZN2QPL13containsRangeEPK10__CFString7CFRangePK16__CFCharacterSetNSt3__16vectorINS7_10shared_ptrINS_6LexemeEEENS7_9allocatorISB_EEEEPb_block_invoke(uint64_t result, uint64_t a2, _BYTE *a3)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  *a3 = 1;
  return result;
}

_QWORD *std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_218E44620(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::shared_ptr<QP::Lexeme>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::Lexeme>*,std::shared_ptr<QP::Lexeme>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_218E446C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*,false>(unint64_t a1, _QWORD *a2, uint64_t (**a3)(void **, void **), uint64_t a4, char a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t (*v20)(void **, void **);
  char v21;
  _QWORD *v22;
  char v23;
  BOOL v24;
  uint64_t (*v25)(void **, void **);
  int v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  void *__p;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;

void sub_218E44AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(_QWORD *a1, _QWORD *a2, uint64_t (**a3)(void **, void **))
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t (*v8)(void **, void **);
  int v9;
  const void *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t (*v13)(void **, void **);
  const void *v14;
  uint64_t v15;
  int v16;
  void *v17;
  __int128 v19;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *__p;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;

  if (a1 == a2)
    return;
  v3 = a2;
  v4 = a1 + 3;
  if (a1 + 3 == a2)
    return;
  v5 = 0;
  v6 = a1;
  do
  {
    v7 = v4;
    v8 = *a3;
    v32 = 0;
    v33 = 0;
    v31 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v31, (const void *)v6[3], v6[4], (uint64_t)(v6[4] - v6[3]) >> 4);
    __p = 0;
    v29 = 0;
    v30 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, (const void *)*v6, v6[1], (uint64_t)(v6[1] - *v6) >> 4);
    v9 = v8(&v31, &__p);
    if (__p)
    {
      v29 = __p;
      operator delete(__p);
    }
    if (v31)
    {
      v32 = v31;
      operator delete(v31);
    }
    if (!v9)
      goto LABEL_24;
    v10 = (const void *)v6[3];
    v19 = *((_OWORD *)v6 + 2);
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    std::vector<CFRange>::__move_assign((uint64_t)v7, (__n128 *)v6);
    v11 = a1;
    if (v6 == a1)
      goto LABEL_21;
    v12 = v5;
    while (1)
    {
      v13 = *a3;
      v26 = 0;
      v27 = 0;
      v25 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v25, v10, v19, (uint64_t)(v19 - (_QWORD)v10) >> 4);
      v14 = *(const void **)((char *)a1 + v12 - 24);
      v15 = *(_QWORD *)((char *)a1 + v12 - 16);
      v22 = 0;
      v23 = 0;
      v24 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v22, v14, v15, (v15 - (uint64_t)v14) >> 4);
      v16 = v13(&v25, &v22);
      if (v22)
      {
        v23 = v22;
        operator delete(v22);
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
        if ((v16 & 1) == 0)
        {
          v11 = v6;
          goto LABEL_20;
        }
        goto LABEL_17;
      }
      if (!v16)
        break;
LABEL_17:
      v6 -= 3;
      std::vector<CFRange>::__move_assign((uint64_t)a1 + v12, (__n128 *)((char *)a1 + v12 - 24));
      v12 -= 24;
      if (!v12)
      {
        v11 = a1;
        goto LABEL_20;
      }
    }
    v11 = (_QWORD *)((char *)a1 + v12);
LABEL_20:
    v3 = a2;
LABEL_21:
    v17 = (void *)*v11;
    if (*v11)
    {
      v11[1] = v17;
      operator delete(v17);
      *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
    }
    *v11 = v10;
    *(_OWORD *)(v11 + 1) = v19;
LABEL_24:
    v4 = v7 + 3;
    v5 += 24;
    v6 = v7;
  }
  while (v7 + 3 != v3);
}

void sub_218E44D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;
  void *v24;

  v24 = *(void **)(v22 - 104);
  if (v24)
  {
    *(_QWORD *)(v22 - 96) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(void **, void **))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t (*v8)(void **, void **);
  int v9;
  const void *v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void **, void **);
  char v17;
  void *v18;
  __int128 v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *__p;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;

  if (a1 != a2)
  {
    v4 = a1;
    v5 = a1 + 24;
    if (a1 + 24 != a2)
    {
      do
      {
        v7 = v5;
        v8 = *a3;
        v30 = 0;
        v31 = 0;
        v29 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v29, *(const void **)(v4 + 24), *(_QWORD *)(v4 + 32), (uint64_t)(*(_QWORD *)(v4 + 32) - *(_QWORD *)(v4 + 24)) >> 4);
        __p = 0;
        v27 = 0;
        v28 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)v4, *(_QWORD *)(v4 + 8), (uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 4);
        v9 = v8(&v29, &__p);
        if (__p)
        {
          v27 = __p;
          operator delete(__p);
        }
        if (v29)
        {
          v30 = v29;
          operator delete(v29);
        }
        if (v9)
        {
          v10 = *(const void **)v7;
          v11 = *(_OWORD *)(v4 + 32);
          *(_QWORD *)(v7 + 8) = 0;
          *(_QWORD *)(v7 + 16) = 0;
          *(_QWORD *)v7 = 0;
          v19 = v11;
          v12 = v11;
          v13 = (uint64_t)(v11 - (_QWORD)v10) >> 4;
          v14 = v7;
          do
          {
            v15 = v14 - 24;
            std::vector<CFRange>::__move_assign(v14, (__n128 *)(v14 - 24));
            v16 = *a3;
            v24 = 0;
            v25 = 0;
            v23 = 0;
            std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v23, v10, v12, v13);
            v20 = 0;
            v21 = 0;
            v22 = 0;
            std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v20, *(const void **)(v14 - 48), *(_QWORD *)(v14 - 40), (uint64_t)(*(_QWORD *)(v14 - 40) - *(_QWORD *)(v14 - 48)) >> 4);
            v17 = v16(&v23, &v20);
            if (v20)
            {
              v21 = v20;
              operator delete(v20);
            }
            if (v23)
            {
              v24 = v23;
              operator delete(v23);
            }
            v14 -= 24;
          }
          while ((v17 & 1) != 0);
          v18 = *(void **)v15;
          if (*(_QWORD *)v15)
          {
            *(_QWORD *)(v15 + 8) = v18;
            operator delete(v18);
            *(_QWORD *)v15 = 0;
            *(_QWORD *)(v15 + 8) = 0;
            *(_QWORD *)(v15 + 16) = 0;
          }
          *(_QWORD *)v15 = v10;
          *(_OWORD *)(v15 + 8) = v19;
        }
        v5 = v7 + 24;
        v4 = v7;
      }
      while (v7 + 24 != a2);
    }
  }
}

void sub_218E44F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void **, void **))
{
  uint64_t (*v8)(void **, void **);
  char v9;
  uint64_t (*v10)(void **, void **);
  int v11;
  const void *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t result;
  char v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void **, void **);
  int v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(void **, void **);
  int v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *__p;
  void *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;

  v8 = *a4;
  v61 = 0;
  v62 = 0;
  v60 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v60, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  v57 = 0;
  v58 = 0;
  v59 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v57, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
  v9 = v8(&v60, &v57);
  if (v57)
  {
    v58 = v57;
    operator delete(v57);
  }
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  v10 = *a4;
  if ((v9 & 1) != 0)
  {
    v42 = 0;
    v43 = 0;
    v44 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v42, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
    __p = 0;
    v40 = 0;
    v41 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
    v11 = v10(&v42, &__p);
    if (__p)
    {
      v40 = __p;
      operator delete(__p);
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    v13 = (uint64_t *)(a1 + 16);
    v12 = *(const void **)a1;
    if (v11)
    {
      *(_QWORD *)a1 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v12;
      v14 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v14;
      v15 = (uint64_t *)(a3 + 16);
      result = 1;
LABEL_30:
      v32 = *v13;
      *v13 = *v15;
      *v15 = v32;
      return result;
    }
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v12;
    v25 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v13 = (uint64_t *)(a2 + 16);
    v26 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = v25;
    v27 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(a2 + 16) = v27;
    v28 = *a4;
    v37 = 0;
    v38 = 0;
    v36 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v36, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
    v33 = 0;
    v34 = 0;
    v35 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v33, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
    v29 = v28(&v36, &v33);
    if (v33)
    {
      v34 = v33;
      operator delete(v33);
    }
    if (v36)
    {
      v37 = v36;
      operator delete(v36);
    }
    if (v29)
    {
      v30 = *(const void **)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v30;
      v31 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v31;
      v15 = (uint64_t *)(a3 + 16);
      goto LABEL_29;
    }
  }
  else
  {
    v54 = 0;
    v55 = 0;
    v56 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v54, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
    v51 = 0;
    v52 = 0;
    v53 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v51, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
    v17 = v10(&v54, &v51);
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
    if (v54)
    {
      v55 = v54;
      operator delete(v54);
    }
    if ((v17 & 1) == 0)
      return 0;
    v18 = *(const void **)a2;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v18;
    v19 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v19;
    v15 = (uint64_t *)(a2 + 16);
    v20 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v20;
    v21 = *a4;
    v49 = 0;
    v50 = 0;
    v48 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v48, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
    v45 = 0;
    v46 = 0;
    v47 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v45, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
    v22 = v21(&v48, &v45);
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v22)
    {
      v23 = *(const void **)a1;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)a2 = v23;
      v24 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v24;
      v13 = (uint64_t *)(a1 + 16);
LABEL_29:
      result = 2;
      goto LABEL_30;
    }
  }
  return 1;
}

void sub_218E45344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<CFRange> *,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>)>(uint64_t a1, _QWORD *a2, uint64_t (**a3)(void **, void **))
{
  const void *v6;
  __int128 v7;
  uint64_t (*v8)(void **, void **);
  uint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t i;
  uint64_t (*v13)(void **, void **);
  char v14;
  uint64_t (*v15)(void **, void **);
  char v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void **, void **);
  int v21;
  uint64_t (*v22)(void **, void **);
  char v23;
  void **v24;
  void *v25;
  uint64_t (*v27)(void **, void **);
  char v28;
  __int128 v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  void *__p;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;

  v6 = *(const void **)a1;
  v7 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v8 = *a3;
  v64 = 0;
  v65 = 0;
  v63 = 0;
  v29 = v7;
  v9 = v7;
  v10 = (uint64_t)(v7 - (_QWORD)v6) >> 4;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v63, v6, v7, v10);
  v60 = 0;
  v61 = 0;
  v62 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v60, (const void *)*(a2 - 3), *(a2 - 2), (uint64_t)(*(a2 - 2) - *(a2 - 3)) >> 4);
  v11 = v8(&v63, &v60);
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  if (v63)
  {
    v64 = v63;
    operator delete(v63);
  }
  if ((v11 & 1) != 0)
  {
    i = a1;
    do
    {
      v13 = *a3;
      v58 = 0;
      v59 = 0;
      v57 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v57, v6, v9, v10);
      v54 = 0;
      v55 = 0;
      v56 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v54, *(const void **)(i + 24), *(_QWORD *)(i + 32), (uint64_t)(*(_QWORD *)(i + 32) - *(_QWORD *)(i + 24)) >> 4);
      v14 = v13(&v57, &v54);
      if (v54)
      {
        v55 = v54;
        operator delete(v54);
      }
      if (v57)
      {
        v58 = v57;
        operator delete(v57);
      }
      i += 24;
    }
    while ((v14 & 1) == 0);
  }
  else
  {
    for (i = a1 + 24; i < (unint64_t)a2; i += 24)
    {
      v27 = *a3;
      v52 = 0;
      v53 = 0;
      v51 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v51, v6, v9, v10);
      v48 = 0;
      v49 = 0;
      v50 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v48, *(const void **)i, *(_QWORD *)(i + 8), (uint64_t)(*(_QWORD *)(i + 8) - *(_QWORD *)i) >> 4);
      v28 = v27(&v51, &v48);
      if (v48)
      {
        v49 = v48;
        operator delete(v48);
      }
      if (v51)
      {
        v52 = v51;
        operator delete(v51);
      }
      if ((v28 & 1) != 0)
        break;
    }
  }
  if (i < (unint64_t)a2)
  {
    do
    {
      v15 = *a3;
      v46 = 0;
      v47 = 0;
      v45 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v45, v6, v9, v10);
      __p = 0;
      v43 = 0;
      v44 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, (const void *)*(a2 - 3), *(a2 - 2), (uint64_t)(*(a2 - 2) - *(a2 - 3)) >> 4);
      v16 = v15(&v45, &__p);
      if (__p)
      {
        v43 = __p;
        operator delete(__p);
      }
      if (v45)
      {
        v46 = v45;
        operator delete(v45);
      }
      a2 -= 3;
    }
    while ((v16 & 1) != 0);
  }
  while (i < (unint64_t)a2)
  {
    v17 = *(const void **)i;
    *(_QWORD *)i = *a2;
    *a2 = v17;
    v18 = *(_QWORD *)(i + 8);
    *(_QWORD *)(i + 8) = a2[1];
    a2[1] = v18;
    v19 = *(_QWORD *)(i + 16);
    *(_QWORD *)(i + 16) = a2[2];
    a2[2] = v19;
    do
    {
      v20 = *a3;
      v40 = 0;
      v41 = 0;
      v39 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v39, v6, v9, v10);
      v36 = 0;
      v37 = 0;
      v38 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v36, *(const void **)(i + 24), *(_QWORD *)(i + 32), (uint64_t)(*(_QWORD *)(i + 32) - *(_QWORD *)(i + 24)) >> 4);
      v21 = v20(&v39, &v36);
      if (v36)
      {
        v37 = v36;
        operator delete(v36);
      }
      if (v39)
      {
        v40 = v39;
        operator delete(v39);
      }
      i += 24;
    }
    while (!v21);
    do
    {
      v22 = *a3;
      v34 = 0;
      v35 = 0;
      v33 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v33, v6, v9, v10);
      v30 = 0;
      v31 = 0;
      v32 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v30, (const void *)*(a2 - 3), *(a2 - 2), (uint64_t)(*(a2 - 2) - *(a2 - 3)) >> 4);
      v23 = v22(&v33, &v30);
      if (v30)
      {
        v31 = v30;
        operator delete(v30);
      }
      if (v33)
      {
        v34 = v33;
        operator delete(v33);
      }
      a2 -= 3;
    }
    while ((v23 & 1) != 0);
  }
  v24 = (void **)(i - 24);
  if (i - 24 != a1)
    std::vector<CFRange>::__move_assign(a1, (__n128 *)(i - 24));
  v25 = *v24;
  if (*v24)
  {
    *(_QWORD *)(i - 16) = v25;
    operator delete(v25);
    *v24 = 0;
    *(_QWORD *)(i - 16) = 0;
    *(_QWORD *)(i - 8) = 0;
  }
  *(_QWORD *)(i - 24) = v6;
  *(_OWORD *)(i - 16) = v29;
  return i;
}

void sub_218E457E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  void *v33;
  uint64_t v34;
  void *v36;
  void *v37;

  v36 = *(void **)(v34 - 128);
  if (v36)
  {
    *(_QWORD *)(v34 - 120) = v36;
    operator delete(v36);
  }
  v37 = *(void **)(v34 - 104);
  if (v37)
  {
    *(_QWORD *)(v34 - 96) = v37;
    operator delete(v37);
  }
  if (v33)
    operator delete(v33);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<CFRange> *,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>)>(uint64_t a1, _QWORD *a2, uint64_t (**a3)(void **, void **))
{
  uint64_t v6;
  const void *v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t (*v11)(void **, void **);
  char v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t (*v16)(void **, void **);
  char v17;
  uint64_t (*v18)(void **, void **);
  const void *v19;
  uint64_t v20;
  char v21;
  char v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  uint64_t v29;
  uint64_t (*v30)(void **, void **);
  char v31;
  const void *v32;
  uint64_t v33;
  uint64_t (*v34)(void **, void **);
  int v35;
  void **v36;
  void *v37;
  __int128 v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  void *__p;
  void *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;

  v6 = 0;
  v7 = *(const void **)a1;
  v8 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v39 = v8;
  v9 = v8;
  v10 = (uint64_t)(v8 - (_QWORD)v7) >> 4;
  do
  {
    v11 = *a3;
    v68 = 0;
    v69 = 0;
    v67 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v67, *(const void **)(a1 + v6 + 24), *(_QWORD *)(a1 + v6 + 32), (uint64_t)(*(_QWORD *)(a1 + v6 + 32) - *(_QWORD *)(a1 + v6 + 24)) >> 4);
    v64 = 0;
    v65 = 0;
    v66 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v64, v7, v9, v10);
    v12 = v11(&v67, &v64);
    if (v64)
    {
      v65 = v64;
      operator delete(v64);
    }
    if (v67)
    {
      v68 = v67;
      operator delete(v67);
    }
    v6 += 24;
  }
  while ((v12 & 1) != 0);
  v13 = a1 + v6;
  if (v6 == 24)
  {
    if (v13 < (unint64_t)a2)
    {
      do
      {
        v18 = *a3;
        v62 = 0;
        v63 = 0;
        v61 = 0;
        v19 = (const void *)*(a2 - 3);
        v20 = *(a2 - 2);
        a2 -= 3;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v61, v19, v20, (v20 - (uint64_t)v19) >> 4);
        v58 = 0;
        v59 = 0;
        v60 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v58, v7, v9, v10);
        v21 = v18(&v61, &v58);
        if (v58)
        {
          v59 = v58;
          operator delete(v58);
        }
        if (v61)
        {
          v62 = v61;
          operator delete(v61);
        }
        if (v13 >= (unint64_t)a2)
          v22 = 1;
        else
          v22 = v21;
      }
      while ((v22 & 1) == 0);
    }
  }
  else
  {
    do
    {
      v14 = (const void *)*(a2 - 3);
      v15 = *(a2 - 2);
      a2 -= 3;
      v16 = *a3;
      v56 = 0;
      v57 = 0;
      v55 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v55, v14, v15, (v15 - (uint64_t)v14) >> 4);
      __p = 0;
      v53 = 0;
      v54 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, v7, v9, v10);
      v17 = v16(&v55, &__p);
      if (__p)
      {
        v53 = __p;
        operator delete(__p);
      }
      if (v55)
      {
        v56 = v55;
        operator delete(v55);
      }
    }
    while ((v17 & 1) == 0);
  }
  v23 = (_QWORD *)(a1 + v6);
  if (v13 < (unint64_t)a2)
  {
    v24 = a2;
    do
    {
      v25 = *v23;
      *v23 = *v24;
      *v24 = v25;
      v26 = v23[1];
      v23[1] = v24[1];
      v24[1] = v26;
      v27 = v23[2];
      v23[2] = v24[2];
      v24[2] = v27;
      do
      {
        v50 = 0;
        v51 = 0;
        v49 = 0;
        v28 = (const void *)v23[3];
        v29 = v23[4];
        v23 += 3;
        v30 = *a3;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v49, v28, v29, (v29 - (uint64_t)v28) >> 4);
        v46 = 0;
        v47 = 0;
        v48 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v46, v7, v9, v10);
        v31 = v30(&v49, &v46);
        if (v46)
        {
          v47 = v46;
          operator delete(v46);
        }
        if (v49)
        {
          v50 = v49;
          operator delete(v49);
        }
      }
      while ((v31 & 1) != 0);
      do
      {
        v44 = 0;
        v45 = 0;
        v43 = 0;
        v32 = (const void *)*(v24 - 3);
        v33 = *(v24 - 2);
        v24 -= 3;
        v34 = *a3;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v43, v32, v33, (v33 - (uint64_t)v32) >> 4);
        v40 = 0;
        v41 = 0;
        v42 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v40, v7, v9, v10);
        v35 = v34(&v43, &v40);
        if (v40)
        {
          v41 = v40;
          operator delete(v40);
        }
        if (v43)
        {
          v44 = v43;
          operator delete(v43);
        }
      }
      while (!v35);
    }
    while (v23 < v24);
  }
  v36 = (void **)(v23 - 3);
  if (v23 - 3 != (_QWORD *)a1)
    std::vector<CFRange>::__move_assign(a1, (__n128 *)(v23 - 3));
  v37 = *v36;
  if (*v36)
  {
    *(v23 - 2) = v37;
    operator delete(v37);
    *v36 = 0;
    *(v23 - 2) = 0;
    *(v23 - 1) = 0;
  }
  *(v23 - 3) = v7;
  *((_OWORD *)v23 - 1) = v39;
  return v23 - 3;
}

void sub_218E45C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  void *v31;
  uint64_t v32;
  void *v34;

  if (__p)
    operator delete(__p);
  v34 = *(void **)(v32 - 160);
  if (v34)
  {
    *(_QWORD *)(v32 - 152) = v34;
    operator delete(v34);
  }
  if (v31)
    operator delete(v31);
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(void **, void **))
{
  uint64_t v3;
  unint64_t v4;
  _BOOL8 result;
  uint64_t (*v6)(void **, void **);
  int v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t (*v15)(void **, void **);
  int v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void **, void **);
  const void *v21;
  uint64_t v22;
  int v23;
  void *v24;
  uint64_t v25;
  __int128 v26;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *__p;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;

  v3 = a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *a3;
      v45 = 0;
      v46 = 0;
      v44 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v44, *(const void **)(a2 - 24), *(_QWORD *)(a2 - 16), (uint64_t)(*(_QWORD *)(a2 - 16) - *(_QWORD *)(a2 - 24)) >> 4);
      v41 = 0;
      v42 = 0;
      v43 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v41, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
      v7 = v6(&v44, &v41);
      if (v41)
      {
        v42 = v41;
        operator delete(v41);
      }
      if (v44)
      {
        v45 = v44;
        operator delete(v44);
      }
      if (v7)
      {
        v8 = *(const void **)a1;
        *(_QWORD *)a1 = *(_QWORD *)(v3 - 24);
        *(_QWORD *)(v3 - 24) = v8;
        v9 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(v3 - 16);
        *(_QWORD *)(v3 - 16) = v9;
        v10 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(v3 - 8);
        *(_QWORD *)(v3 - 8) = v10;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(a1, a1 + 24, a2 - 24, a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24, a3);
      return 1;
    default:
      v11 = a1 + 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(a1, a1 + 24, a1 + 48, a3);
      v12 = a1 + 72;
      if (a1 + 72 == v3)
        return 1;
      v13 = 0;
      v14 = 0;
      v25 = v3;
      break;
  }
  do
  {
    v15 = *a3;
    v39 = 0;
    v40 = 0;
    v38 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v38, *(const void **)v12, *(_QWORD *)(v12 + 8), (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 4);
    __p = 0;
    v36 = 0;
    v37 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)v11, *(_QWORD *)(v11 + 8), (uint64_t)(*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 4);
    v16 = v15(&v38, &__p);
    if (__p)
    {
      v36 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    if (!v16)
      goto LABEL_31;
    v17 = *(const void **)v12;
    v26 = *(_OWORD *)(v12 + 8);
    *(_QWORD *)(v12 + 8) = 0;
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)v12 = 0;
    std::vector<CFRange>::__move_assign(v12, (__n128 *)v11);
    v18 = a1;
    if (v11 == a1)
      goto LABEL_28;
    v19 = v13;
    while (1)
    {
      v20 = *a3;
      v33 = 0;
      v34 = 0;
      v32 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v32, v17, v26, (uint64_t)(v26 - (_QWORD)v17) >> 4);
      v21 = *(const void **)(a1 + v19 + 24);
      v22 = *(_QWORD *)(a1 + v19 + 32);
      v29 = 0;
      v30 = 0;
      v31 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v29, v21, v22, (v22 - (uint64_t)v21) >> 4);
      v23 = v20(&v32, &v29);
      if (v29)
      {
        v30 = v29;
        operator delete(v29);
      }
      if (v32)
      {
        v33 = v32;
        operator delete(v32);
        if ((v23 & 1) == 0)
        {
          v18 = v11;
          goto LABEL_27;
        }
        goto LABEL_24;
      }
      if (!v23)
        break;
LABEL_24:
      v11 -= 24;
      std::vector<CFRange>::__move_assign(a1 + v19 + 48, (__n128 *)(a1 + v19 + 24));
      v19 -= 24;
      if (v19 == -48)
      {
        v18 = a1;
        goto LABEL_27;
      }
    }
    v18 = a1 + v19 + 48;
LABEL_27:
    v3 = v25;
LABEL_28:
    v24 = *(void **)v18;
    if (*(_QWORD *)v18)
    {
      *(_QWORD *)(v18 + 8) = v24;
      operator delete(v24);
      *(_QWORD *)v18 = 0;
      *(_QWORD *)(v18 + 8) = 0;
      *(_QWORD *)(v18 + 16) = 0;
    }
    *(_QWORD *)v18 = v17;
    *(_OWORD *)(v18 + 8) = v26;
    if (++v14 == 8)
      return v12 + 24 == v3;
LABEL_31:
    v11 = v12;
    v13 += 24;
    v12 += 24;
  }
  while (v12 != v3);
  return 1;
}

void sub_218E46104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  void *v28;
  void *v29;

  v28 = *(void **)(v26 - 136);
  if (v28)
  {
    *(_QWORD *)(v26 - 128) = v28;
    operator delete(v28);
  }
  v29 = *(void **)(v26 - 112);
  if (v29)
  {
    *(_QWORD *)(v26 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(void **, void **))
{
  uint64_t (*v10)(void **, void **);
  int v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void **, void **);
  int v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void **, void **);
  int v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *__p;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(a1, a2, a3, a5);
  v10 = *a5;
  v41 = 0;
  v42 = 0;
  v40 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v40, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4);
  __p = 0;
  v38 = 0;
  v39 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
  v11 = v10(&v40, &__p);
  if (__p)
  {
    v38 = __p;
    operator delete(__p);
  }
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  if (v11)
  {
    v12 = *(const void **)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v12;
    v13 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v13;
    v14 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = v14;
    v15 = *a5;
    v35 = 0;
    v36 = 0;
    v34 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v34, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
    v31 = 0;
    v32 = 0;
    v33 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v31, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
    v16 = v15(&v34, &v31);
    if (v31)
    {
      v32 = v31;
      operator delete(v31);
    }
    if (v34)
    {
      v35 = v34;
      operator delete(v34);
    }
    if (v16)
    {
      v17 = *(const void **)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v17;
      v18 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v18;
      v19 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = v19;
      v20 = *a5;
      v29 = 0;
      v30 = 0;
      v28 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v28, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
      v25 = 0;
      v26 = 0;
      v27 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v25, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
      v21 = v20(&v28, &v25);
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      if (v28)
      {
        v29 = v28;
        operator delete(v28);
      }
      if (v21)
      {
        v22 = *(const void **)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v22;
        v23 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v23;
        v24 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v24;
      }
    }
  }
}

void sub_218E463D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(void **, void **))
{
  uint64_t (*v12)(void **, void **);
  int v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void **, void **);
  int v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void **, void **);
  int v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void **, void **);
  int v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *__p;
  void *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(a1, a2, a3, a4, a6);
  v12 = *a6;
  v54 = 0;
  v55 = 0;
  v53 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v53, *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 4);
  v50 = 0;
  v51 = 0;
  v52 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v50, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4);
  v13 = v12(&v53, &v50);
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
  if (v13)
  {
    v14 = *(const void **)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v14;
    v15 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = *(_QWORD *)(a5 + 8);
    *(_QWORD *)(a5 + 8) = v15;
    v16 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(a5 + 16);
    *(_QWORD *)(a5 + 16) = v16;
    v17 = *a6;
    v48 = 0;
    v49 = 0;
    v47 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v47, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4);
    __p = 0;
    v45 = 0;
    v46 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
    v18 = v17(&v47, &__p);
    if (__p)
    {
      v45 = __p;
      operator delete(__p);
    }
    if (v47)
    {
      v48 = v47;
      operator delete(v47);
    }
    if (v18)
    {
      v19 = *(const void **)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v19;
      v20 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(a4 + 8) = v20;
      v21 = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a4 + 16);
      *(_QWORD *)(a4 + 16) = v21;
      v22 = *a6;
      v42 = 0;
      v43 = 0;
      v41 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v41, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
      v38 = 0;
      v39 = 0;
      v40 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v38, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
      v23 = v22(&v41, &v38);
      if (v38)
      {
        v39 = v38;
        operator delete(v38);
      }
      if (v41)
      {
        v42 = v41;
        operator delete(v41);
      }
      if (v23)
      {
        v24 = *(const void **)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v24;
        v25 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
        *(_QWORD *)(a3 + 8) = v25;
        v26 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
        *(_QWORD *)(a3 + 16) = v26;
        v27 = *a6;
        v36 = 0;
        v37 = 0;
        v35 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v35, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
        v32 = 0;
        v33 = 0;
        v34 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v32, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
        v28 = v27(&v35, &v32);
        if (v32)
        {
          v33 = v32;
          operator delete(v32);
        }
        if (v35)
        {
          v36 = v35;
          operator delete(v35);
        }
        if (v28)
        {
          v29 = *(const void **)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v29;
          v30 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a2 + 8) = v30;
          v31 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          *(_QWORD *)(a2 + 16) = v31;
        }
      }
    }
  }
}

void sub_218E46738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

__n128 std::vector<CFRange>::__move_assign(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*,std::vector<CFRange>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void **, void **))
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void **, void **);
  int v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *__p;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) / 24;
    if (a2 - a1 >= 25)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = a1 + 24 * v10;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(a1, a4, v9, v12);
        v12 -= 24;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *a4;
        v27 = 0;
        v28 = 0;
        v26 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v26, *(const void **)v14, *(_QWORD *)(v14 + 8), (uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)v14) >> 4);
        __p = 0;
        v24 = 0;
        v25 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
        v16 = v15(&v26, &__p);
        if (__p)
        {
          v24 = __p;
          operator delete(__p);
        }
        if (v26)
        {
          v27 = v26;
          operator delete(v26);
        }
        if (v16)
        {
          v17 = *(const void **)v14;
          *(_QWORD *)v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v17;
          v18 = *(_QWORD *)(v14 + 8);
          *(_QWORD *)(v14 + 8) = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v18;
          v19 = *(_QWORD *)(v14 + 16);
          *(_QWORD *)(v14 + 16) = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v19;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(a1, a4, v9, a1);
        }
        v14 += 24;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 25)
    {
      v20 = v8 / 0x18uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>((uint64_t *)a1, v6, a4, v20);
        v6 -= 24;
      }
      while (v20-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_218E46A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(uint64_t a1, uint64_t (**a2)(void **, void **), uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void **, void **);
  const void *v12;
  uint64_t v13;
  int v14;
  uint64_t (*v15)(void **, void **);
  char v16;
  __n128 result;
  const void *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void **, void **);
  const void *v25;
  uint64_t v26;
  int v27;
  uint64_t (*v28)(void **, void **);
  int v29;
  void *v30;
  __n128 v31;
  unint64_t v32;
  const void *v33;
  uint64_t v34;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *__p;
  void *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;

  v4 = a3 - 2;
  if (a3 < 2)
    return result;
  v5 = a4;
  v34 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - a1) >> 3)))
    return result;
  v8 = (0x5555555555555556 * ((a4 - a1) >> 3)) | 1;
  v9 = a1 + 24 * v8;
  v10 = 0x5555555555555556 * ((a4 - a1) >> 3) + 2;
  if (v10 < a3)
  {
    v11 = *a2;
    v58 = 0;
    v59 = 0;
    v57 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v57, *(const void **)v9, *(_QWORD *)(a1 + 24 * v8 + 8), (uint64_t)(*(_QWORD *)(a1 + 24 * v8 + 8) - *(_QWORD *)v9) >> 4);
    v12 = *(const void **)(v9 + 24);
    v13 = *(_QWORD *)(v9 + 32);
    v54 = 0;
    v55 = 0;
    v56 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v54, v12, v13, (v13 - (uint64_t)v12) >> 4);
    v14 = v11(&v57, &v54);
    if (v54)
    {
      v55 = v54;
      operator delete(v54);
    }
    if (v57)
    {
      v58 = v57;
      operator delete(v57);
      if ((v14 & 1) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
    if (v14)
    {
LABEL_8:
      v9 += 24;
      v8 = v10;
    }
  }
LABEL_9:
  v15 = *a2;
  v52 = 0;
  v53 = 0;
  v51 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v51, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 4);
  __p = 0;
  v49 = 0;
  v50 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 4);
  v16 = v15(&v51, &__p);
  if (__p)
  {
    v49 = __p;
    operator delete(__p);
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  if ((v16 & 1) == 0)
  {
    v18 = *(const void **)v5;
    v19 = *(_OWORD *)(v5 + 8);
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
    v31 = (__n128)v19;
    v20 = v19;
    v33 = v18;
    v32 = (uint64_t)(v19 - (_QWORD)v18) >> 4;
    while (1)
    {
      v21 = v9;
      std::vector<CFRange>::__move_assign(v5, (__n128 *)v9);
      if (v34 < v8)
      {
LABEL_30:
        v30 = *(void **)v21;
        if (*(_QWORD *)v21)
        {
          *(_QWORD *)(v21 + 8) = v30;
          operator delete(v30);
          *(_QWORD *)v21 = 0;
          *(_QWORD *)(v21 + 8) = 0;
          *(_QWORD *)(v21 + 16) = 0;
        }
        *(_QWORD *)v21 = v33;
        result = v31;
        *(__n128 *)(v21 + 8) = v31;
        return result;
      }
      v22 = (2 * v8) | 1;
      v9 = a1 + 24 * v22;
      v23 = 2 * v8 + 2;
      if (v23 >= a3)
      {
        v8 = (2 * v8) | 1;
      }
      else
      {
        v24 = *a2;
        v46 = 0;
        v47 = 0;
        v45 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v45, *(const void **)v9, *(_QWORD *)(a1 + 24 * v22 + 8), (uint64_t)(*(_QWORD *)(a1 + 24 * v22 + 8) - *(_QWORD *)v9) >> 4);
        v25 = *(const void **)(v9 + 24);
        v26 = *(_QWORD *)(v9 + 32);
        v42 = 0;
        v43 = 0;
        v44 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v42, v25, v26, (v26 - (uint64_t)v25) >> 4);
        v27 = v24(&v45, &v42);
        if (v42)
        {
          v43 = v42;
          operator delete(v42);
        }
        if (v45)
        {
          v46 = v45;
          operator delete(v45);
          v8 = (2 * v8) | 1;
          if ((v27 & 1) == 0)
            goto LABEL_25;
LABEL_24:
          v9 += 24;
          v8 = v23;
          goto LABEL_25;
        }
        v8 = (2 * v8) | 1;
        if (v27)
          goto LABEL_24;
      }
LABEL_25:
      v28 = *a2;
      v40 = 0;
      v41 = 0;
      v39 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v39, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 4);
      v36 = 0;
      v37 = 0;
      v38 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v36, v33, v20, v32);
      v29 = v28(&v39, &v36);
      if (v36)
      {
        v37 = v36;
        operator delete(v36);
      }
      if (v39)
      {
        v40 = v39;
        operator delete(v39);
      }
      v5 = v21;
      if (v29)
        goto LABEL_30;
    }
  }
  return result;
}

void sub_218E46D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  uint64_t v29;
  void *v31;
  void *__pa;

  v31 = *(void **)(v29 - 136);
  if (v31)
  {
    *(_QWORD *)(v29 - 128) = v31;
    operator delete(v31);
  }
  __pa = *(void **)(v29 - 112);
  if (__pa)
  {
    *(_QWORD *)(v29 - 104) = __pa;
    operator delete(__pa);
  }
  _Unwind_Resume(exception_object);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(uint64_t *a1, uint64_t a2, uint64_t (**a3)(void **, void **), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void **v12;
  uint64_t v13;
  void *v14;
  void *v15;

  if (a4 >= 2)
  {
    v7 = *a1;
    v8 = a1[1];
    v9 = a1[2];
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    v10 = (_QWORD *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>((uint64_t)a1, a3, a4);
    v11 = v10;
    v12 = (void **)(a2 - 24);
    if (v10 == (_QWORD *)(a2 - 24))
    {
      v15 = (void *)*v10;
      if (*v11)
      {
        v11[1] = v15;
        operator delete(v15);
        *v11 = 0;
        v11[1] = 0;
        v11[2] = 0;
      }
      *v11 = v7;
      v11[1] = v8;
      v11[2] = v9;
    }
    else
    {
      std::vector<CFRange>::__move_assign((uint64_t)v10, (__n128 *)(a2 - 24));
      v13 = (uint64_t)(v11 + 3);
      v14 = *v12;
      if (*v12)
      {
        *(_QWORD *)(a2 - 16) = v14;
        operator delete(v14);
        *v12 = 0;
        *(_QWORD *)(a2 - 16) = 0;
        *(_QWORD *)(a2 - 8) = 0;
      }
      *(_QWORD *)(a2 - 24) = v7;
      *(_QWORD *)(a2 - 16) = v8;
      *(_QWORD *)(a2 - 8) = v9;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>((uint64_t)a1, v13, a3, 0xAAAAAAAAAAAAAAABLL * ((v13 - (uint64_t)a1) >> 3));
    }
  }
}

void sub_218E46F54(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(uint64_t a1, uint64_t (**a2)(void **, void **), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void **, void **);
  int v14;
  void *__p;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1;
    v10 = v6 + 1;
    a1 += 24 * (v6 + 1);
    v11 = 2 * v6;
    v6 = (2 * v6) | 1;
    v12 = v11 + 2;
    if (v11 + 2 >= a3)
      goto LABEL_10;
    v13 = *a2;
    v20 = 0;
    v21 = 0;
    v19 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v19, *(const void **)a1, *(_QWORD *)(v9 + 24 * v10 + 8), (uint64_t)(*(_QWORD *)(v9 + 24 * v10 + 8) - *(_QWORD *)a1) >> 4);
    __p = 0;
    v17 = 0;
    v18 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 4);
    v14 = v13(&v19, &__p);
    if (__p)
    {
      v17 = __p;
      operator delete(__p);
    }
    if (v19)
    {
      v20 = v19;
      operator delete(v19);
      if ((v14 & 1) == 0)
        goto LABEL_10;
LABEL_9:
      a1 += 24;
      v6 = v12;
      goto LABEL_10;
    }
    if (v14)
      goto LABEL_9;
LABEL_10:
    std::vector<CFRange>::__move_assign(v9, (__n128 *)a1);
  }
  while (v6 <= v8);
  return a1;
}

void sub_218E470A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(void **, void **), uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void **, void **);
  const void *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  __n128 result;
  const void *v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t (*v21)(void **, void **);
  char v22;
  void *v23;
  __n128 v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *__p;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v8 = v4 >> 1;
    v9 = a1 + 24 * (v4 >> 1);
    v10 = *a3;
    v35 = 0;
    v36 = 0;
    v34 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v34, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 4);
    v11 = *(const void **)(a2 - 24);
    v12 = *(_QWORD *)(a2 - 16);
    v13 = (_QWORD *)(a2 - 24);
    __p = 0;
    v32 = 0;
    v33 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, v11, v12, (v12 - (uint64_t)v11) >> 4);
    v14 = v10(&v34, &__p);
    if (__p)
    {
      v32 = __p;
      operator delete(__p);
    }
    if (v34)
    {
      v35 = v34;
      operator delete(v34);
    }
    if (v14)
    {
      v16 = *(const void **)(a2 - 24);
      v17 = *(_OWORD *)(a2 - 16);
      *v13 = 0;
      *(_QWORD *)(a2 - 16) = 0;
      *(_QWORD *)(a2 - 8) = 0;
      v24 = (__n128)v17;
      v18 = v17;
      v19 = (uint64_t)(v17 - (_QWORD)v16) >> 4;
      do
      {
        v20 = (_QWORD *)v9;
        std::vector<CFRange>::__move_assign((uint64_t)v13, (__n128 *)v9);
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = a1 + 24 * v8;
        v21 = *a3;
        v29 = 0;
        v30 = 0;
        v28 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v28, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 4);
        v25 = 0;
        v26 = 0;
        v27 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v25, v16, v18, v19);
        v22 = v21(&v28, &v25);
        if (v25)
        {
          v26 = v25;
          operator delete(v25);
        }
        if (v28)
        {
          v29 = v28;
          operator delete(v28);
        }
        v13 = v20;
      }
      while ((v22 & 1) != 0);
      v23 = (void *)*v20;
      if (*v20)
      {
        v20[1] = v23;
        operator delete(v23);
        *v20 = 0;
        v20[1] = 0;
        v20[2] = 0;
      }
      *v20 = v16;
      result = v24;
      *(__n128 *)(v20 + 1) = v24;
    }
  }
  return result;
}

void sub_218E47284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<CFRange>>::__construct_one_at_end[abi:ne180100]<std::vector<CFRange> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_218E47340(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<CFRange>>::__push_back_slow_path<std::vector<CFRange> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  v15 += 24;
  std::vector<std::vector<CFRange>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<CFRange>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_218E47448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<CFRange>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<CFRange>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<CFRange>>,std::reverse_iterator<std::vector<CFRange>*>,std::reverse_iterator<std::vector<CFRange>*>,std::reverse_iterator<std::vector<CFRange>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<CFRange>>,std::reverse_iterator<std::vector<CFRange>*>,std::reverse_iterator<std::vector<CFRange>*>,std::reverse_iterator<std::vector<CFRange>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<CFRange>>,std::reverse_iterator<std::vector<CFRange>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<CFRange>>,std::reverse_iterator<std::vector<CFRange>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<CFRange>>,std::reverse_iterator<std::vector<CFRange>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<CFRange>>,std::reverse_iterator<std::vector<CFRange>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<CFRange>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<CFRange>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<CFRange>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

char *std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(char *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _BYTE *v7;
  char v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = (_BYTE *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_218E476C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

QP::LexemeConverter *std::unique_ptr<QP::LexemeConverter>::reset[abi:ne180100](QP::LexemeConverter **a1, QP::LexemeConverter *a2)
{
  QP::LexemeConverter *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    QP::LexemeConverter::~LexemeConverter(result);
    JUMPOUT(0x219A24D0CLL);
  }
  return result;
}

void QP::LexemeConverter::~LexemeConverter(QP::LexemeConverter *this)
{
  uint64_t v2;

  std::unique_ptr<QP::Transcriber>::reset[abi:ne180100]((QP::Transcriber **)this + 6, 0);
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    MEMORY[0x219A24D0C](v2, 0x60C4044C4A2DFLL);
  std::unique_ptr<QP::DateConverter>::reset[abi:ne180100]((uint64_t *)this + 4, 0);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

QP::Transcriber *std::unique_ptr<QP::Transcriber>::reset[abi:ne180100](QP::Transcriber **a1, QP::Transcriber *a2)
{
  QP::Transcriber *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    QP::Transcriber::~Transcriber(result);
    JUMPOUT(0x219A24D0CLL);
  }
  return result;
}

uint64_t *std::unique_ptr<QP::DateConverter>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v2 + 16);
    std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v2);
    JUMPOUT(0x219A24D0CLL);
  }
  return result;
}

void **std::unique_ptr<QP::Lexeme>::reset[abi:ne180100](void ***a1, void **a2)
{
  void **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    QP::Lexeme::~Lexeme(result);
    JUMPOUT(0x219A24D0CLL);
  }
  return result;
}

void QP::Lexeme::~Lexeme(void **this)
{
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void std::__shared_ptr_pointer<QP::Lexeme  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A24D0CLL);
}

void **std::__shared_ptr_pointer<QP::Lexeme  *>::__on_zero_shared(uint64_t a1)
{
  void **result;

  result = *(void ***)(a1 + 24);
  if (result)
  {
    QP::Lexeme::~Lexeme(result);
    JUMPOUT(0x219A24D0CLL);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<QP::Lexeme  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

std::string *std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  std::string *v6;
  std::string *result;

  v6 = (std::string *)operator new(0x90uLL);
  result = std::__shared_ptr_emplace<QP::Lexeme>::__shared_ptr_emplace[abi:ne180100]<std::string &,CFRange &,std::allocator<QP::Lexeme>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_218E479D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::Lexeme>::__shared_ptr_emplace[abi:ne180100]<std::string &,CFRange &,std::allocator<QP::Lexeme>,0>(std::string *a1, uint64_t a2, uint64_t a3)
{
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24DA255A8;
  a1->__r_.__value_.__l.__size_ = 0;
  std::construct_at[abi:ne180100]<QP::Lexeme,std::string &,CFRange &,QP::Lexeme*>(a1 + 1, a2, a3);
  return a1;
}

void sub_218E47A1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::Lexeme>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA255A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::Lexeme>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA255A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A24D0CLL);
}

void std::__shared_ptr_emplace<QP::Lexeme>::__on_zero_shared(uint64_t a1)
{
  QP::Lexeme::~Lexeme((void **)(a1 + 24));
}

std::string *std::construct_at[abi:ne180100]<QP::Lexeme,std::string &,CFRange &,QP::Lexeme*>(std::string *this, uint64_t a2, uint64_t a3)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  QP::Lexeme::Lexeme(this, (__int128 *)&__p, *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return this;
}

void sub_218E47AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const(&)[5],CFRange &,void>@<X0>(char *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  std::string *v6;
  std::string *result;

  v6 = (std::string *)operator new(0x90uLL);
  result = std::__shared_ptr_emplace<QP::Lexeme>::__shared_ptr_emplace[abi:ne180100]<char const(&)[5],CFRange &,std::allocator<QP::Lexeme>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_218E47B64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::Lexeme>::__shared_ptr_emplace[abi:ne180100]<char const(&)[5],CFRange &,std::allocator<QP::Lexeme>,0>(std::string *a1, char *a2, uint64_t a3)
{
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24DA255A8;
  a1->__r_.__value_.__l.__size_ = 0;
  std::construct_at[abi:ne180100]<QP::Lexeme,char const(&)[5],CFRange &,QP::Lexeme*>(a1 + 1, a2, a3);
  return a1;
}

void sub_218E47BB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<QP::Lexeme,char const(&)[5],CFRange &,QP::Lexeme*>(std::string *a1, char *a2, uint64_t a3)
{
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  QP::Lexeme::Lexeme(a1, (__int128 *)__p, *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
  if (v7 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_218E47C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *std::allocate_shared[abi:ne180100]<QP::LexemeQuotedText,std::allocator<QP::LexemeQuotedText>,CFRange &,std::string,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  std::string *v6;
  std::string *result;

  v6 = (std::string *)operator new(0xA8uLL);
  result = std::__shared_ptr_emplace<QP::LexemeQuotedText>::__shared_ptr_emplace[abi:ne180100]<CFRange &,std::string,std::allocator<QP::LexemeQuotedText>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_218E47C80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::LexemeQuotedText>::__shared_ptr_emplace[abi:ne180100]<CFRange &,std::string,std::allocator<QP::LexemeQuotedText>,0>(std::string *a1, uint64_t *a2, uint64_t a3)
{
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24DA255F8;
  a1->__r_.__value_.__l.__size_ = 0;
  std::construct_at[abi:ne180100]<QP::LexemeQuotedText,CFRange &,std::string,QP::LexemeQuotedText*>(a1 + 1, a2, a3);
  return a1;
}

void sub_218E47CCC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::LexemeQuotedText>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA255F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::LexemeQuotedText>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA255F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A24D0CLL);
}

void std::__shared_ptr_emplace<QP::LexemeQuotedText>::__on_zero_shared(uint64_t a1)
{
  std::__destroy_at[abi:ne180100]<QP::LexemeQuotedText,0>((void **)(a1 + 24));
}

std::string *std::construct_at[abi:ne180100]<QP::LexemeQuotedText,CFRange &,std::string,QP::LexemeQuotedText*>(std::string *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  std::string::size_type v5;
  void *__p[2];
  uint64_t v8;

  v4 = *a2;
  v5 = a2[1];
  *(_OWORD *)__p = *(_OWORD *)a3;
  v8 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  QP::LexemeQuotedText::LexemeQuotedText(a1, v4, v5, (__int128 *)__p);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_218E47D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *QP::LexemeQuotedText::LexemeQuotedText(std::string *a1, uint64_t a2, std::string::size_type a3, __int128 *a4)
{
  std::string *v8;
  __int128 v9;
  void *__p[2];
  char v12;

  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  QP::Lexeme::Lexeme(a1, (__int128 *)__p, a2, a3);
  if (v12 < 0)
    operator delete(__p[0]);
  v8 = a1 + 5;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v9 = *a4;
    a1[5].__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return a1;
}

void sub_218E47E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void **v15;

  QP::Lexeme::~Lexeme(v15);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<QP::LexemeQuotedText,0>(void **this)
{
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  QP::Lexeme::~Lexeme(this);
}

_OWORD *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

std::string *std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const(&)[7],CFRange &,void>@<X0>(char *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  std::string *v6;
  std::string *result;

  v6 = (std::string *)operator new(0x90uLL);
  result = std::__shared_ptr_emplace<QP::Lexeme>::__shared_ptr_emplace[abi:ne180100]<char const(&)[7],CFRange &,std::allocator<QP::Lexeme>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_218E47F84(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::Lexeme>::__shared_ptr_emplace[abi:ne180100]<char const(&)[7],CFRange &,std::allocator<QP::Lexeme>,0>(std::string *a1, char *a2, uint64_t a3)
{
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24DA255A8;
  a1->__r_.__value_.__l.__size_ = 0;
  std::construct_at[abi:ne180100]<QP::Lexeme,char const(&)[7],CFRange &,QP::Lexeme*>(a1 + 1, a2, a3);
  return a1;
}

void sub_218E47FD0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<QP::Lexeme,char const(&)[7],CFRange &,QP::Lexeme*>(std::string *a1, char *a2, uint64_t a3)
{
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  QP::Lexeme::Lexeme(a1, (__int128 *)__p, *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
  if (v7 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_218E48038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const(&)[9],CFRange &,void>@<X0>(char *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  std::string *v6;
  std::string *result;

  v6 = (std::string *)operator new(0x90uLL);
  result = std::__shared_ptr_emplace<QP::Lexeme>::__shared_ptr_emplace[abi:ne180100]<char const(&)[9],CFRange &,std::allocator<QP::Lexeme>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_218E480A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::Lexeme>::__shared_ptr_emplace[abi:ne180100]<char const(&)[9],CFRange &,std::allocator<QP::Lexeme>,0>(std::string *a1, char *a2, uint64_t a3)
{
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24DA255A8;
  a1->__r_.__value_.__l.__size_ = 0;
  std::construct_at[abi:ne180100]<QP::Lexeme,char const(&)[9],CFRange &,QP::Lexeme*>(a1 + 1, a2, a3);
  return a1;
}

void sub_218E480EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<QP::Lexeme,char const(&)[9],CFRange &,QP::Lexeme*>(std::string *a1, char *a2, uint64_t a3)
{
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  QP::Lexeme::Lexeme(a1, (__int128 *)__p, *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
  if (v7 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_218E48154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id QP::localeIdentifierAliases(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v13 != v5)
          objc_enumerationMutation(v3);
        v7 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        objc_msgSend(v2, "addObject:", v7, (_QWORD)v12);
        objc_msgSend(v7, "stringByReplacingOccurrencesOfString:withString:", CFSTR("_"), CFSTR("-"));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "addObject:", v8);

        objc_msgSend(v7, "stringByReplacingOccurrencesOfString:withString:", CFSTR("-"), CFSTR("_"));
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "addObject:", v9);

      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v4);
  }

  v10 = (void *)objc_msgSend(v2, "copy");
  return v10;
}

void sub_218E48300(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t QP::isECRSupportedLocale(QP *this, NSLocale *a2)
{
  void *v2;
  uint64_t v3;

  -[QP localeIdentifier](this, "localeIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "length"))
  {
    if (QP::isECRSupportedLocale(NSLocale *)::onceToken != -1)
      dispatch_once(&QP::isECRSupportedLocale(NSLocale *)::onceToken, &__block_literal_global_6);
    v3 = objc_msgSend((id)QP::isECRSupportedLocale(NSLocale *)::supportedLocaleIdentifiers, "containsObject:", v2);
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_218E483C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN2QP20isECRSupportedLocaleEP8NSLocale_block_invoke()
{
  uint64_t v0;
  void *v1;

  QP::localeIdentifierAliases(&unk_24DA34B90);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)QP::isECRSupportedLocale(NSLocale *)::supportedLocaleIdentifiers;
  QP::isECRSupportedLocale(NSLocale *)::supportedLocaleIdentifiers = v0;

}

id QP::normalizeTimeString(QP *this, NSString *a2)
{
  QP *v2;
  void *v3;

  v2 = this;
  if (QP::normalizeTimeString(NSString *)::onceToken != -1)
    dispatch_once(&QP::normalizeTimeString(NSString *)::onceToken, &__block_literal_global_30);
  objc_msgSend((id)QP::normalizeTimeString(NSString *)::regex, "stringByReplacingMatchesInString:options:range:withTemplate:", v2, 0, 0, -[QP length](v2, "length"), CFSTR("$1"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_218E4848C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN2QP19normalizeTimeStringEP8NSString_block_invoke()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x24BDD1798], "regularExpressionWithPattern:options:error:", CFSTR("(\\d+)(st|nd|rd|th)"), 1, 0);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)QP::normalizeTimeString(NSString *)::regex;
  QP::normalizeTimeString(NSString *)::regex = v0;

}

void QP::getVisualIdsAndScores(void *a1@<X0>, std::string *a2@<X8>)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  const __CFString *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  std::vector<std::string>::pointer end;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  std::string *v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  std::string *v33;
  id obj;
  void *__p[2];
  std::string::size_type v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  void *v41;
  char *v42;
  char *v43;
  std::vector<std::string> v44;
  std::__split_buffer<std::string> __v;
  _BYTE v46[128];
  uint64_t v47;

  v33 = a2;
  v47 = *MEMORY[0x24BDAC8D0];
  v2 = a1;
  memset(&v44, 0, sizeof(v44));
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  objc_msgSend(v2, "allKeys");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v46, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v38;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v38 != v4)
          objc_enumerationMutation(obj);
        v6 = *(const __CFString **)(*((_QWORD *)&v37 + 1) + 8 * i);
        objc_msgSend(v2, "objectForKeyedSubscript:", v6, v33);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "firstObject");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "doubleValue");
        v10 = v9;

        objc_msgSend(v7, "lastObject");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "doubleValue");
        v13 = v12;

        QP::getUTF8StringFromCFString(v6, __p);
        end = v44.__end_;
        if (v44.__end_ >= v44.__end_cap_.__value_)
        {
          v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v44.__end_ - (char *)v44.__begin_) >> 3);
          v17 = v16 + 1;
          if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((char *)v44.__end_cap_.__value_ - (char *)v44.__begin_) >> 3) > v17)
            v17 = 0x5555555555555556 * (((char *)v44.__end_cap_.__value_ - (char *)v44.__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v44.__end_cap_.__value_ - (char *)v44.__begin_) >> 3) >= 0x555555555555555)
            v18 = 0xAAAAAAAAAAAAAAALL;
          else
            v18 = v17;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v44.__end_cap_;
          if (v18)
            v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v44.__end_cap_, v18);
          else
            v19 = 0;
          v20 = v19 + v16;
          __v.__first_ = v19;
          __v.__begin_ = v20;
          __v.__end_cap_.__value_ = &v19[v18];
          v21 = *(_OWORD *)__p;
          v20->__r_.__value_.__r.__words[2] = v36;
          *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
          __p[1] = 0;
          v36 = 0;
          __p[0] = 0;
          __v.__end_ = v20 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v44, &__v);
          v22 = v44.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v44.__end_ = v22;
          if (SHIBYTE(v36) < 0)
            operator delete(__p[0]);
        }
        else
        {
          v15 = *(_OWORD *)__p;
          v44.__end_->__r_.__value_.__r.__words[2] = v36;
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v15;
          v44.__end_ = end + 1;
        }
        v23 = v42;
        if (v42 >= v43)
        {
          v25 = (char *)v41;
          v26 = (v42 - (_BYTE *)v41) >> 4;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 60)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v28 = v43 - (_BYTE *)v41;
          if ((v43 - (_BYTE *)v41) >> 3 > v27)
            v27 = v28 >> 3;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
            v29 = 0xFFFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          if (v29)
          {
            v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)&v43, v29);
            v25 = (char *)v41;
            v23 = v42;
          }
          else
          {
            v30 = 0;
          }
          v31 = &v30[16 * v26];
          *(_QWORD *)v31 = v10;
          *((_QWORD *)v31 + 1) = v13;
          v32 = v31;
          if (v23 != v25)
          {
            do
            {
              *((_OWORD *)v32 - 1) = *((_OWORD *)v23 - 1);
              v32 -= 16;
              v23 -= 16;
            }
            while (v23 != v25);
            v25 = (char *)v41;
          }
          v24 = v31 + 16;
          v41 = v32;
          v42 = v31 + 16;
          v43 = &v30[16 * v29];
          if (v25)
            operator delete(v25);
        }
        else
        {
          *(_QWORD *)v42 = v10;
          *((_QWORD *)v23 + 1) = v13;
          v24 = v23 + 16;
        }
        v42 = v24;

      }
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v46, 16);
    }
    while (v3);
  }

  std::pair<std::vector<std::string>,std::vector<std::pair<double,double>>>::pair[abi:ne180100]<std::vector<std::string>&,std::vector<std::pair<double,double>>&,0>(v33, (__int128 **)&v44, (__int128 **)&v41);
  if (v41)
  {
    v42 = (char *)v41;
    operator delete(v41);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);

}

void sub_218E48858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, int a6, __int16 a7, char a8, char a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22,uint64_t a23,std::__split_buffer<std::string> *__pa,std::__split_buffer<std::string> *a25,uint64_t a26,char a27)
{
  void *v27;

  if (__pa)
  {
    a25 = __pa;
    operator delete(__pa);
  }
  __pa = (std::__split_buffer<std::string> *)&a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);

  _Unwind_Resume(a1);
}

double QP::LLMParser::LLMParser(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  double result;

  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a4[1];
  *(_QWORD *)(a1 + 16) = *a4;
  *(_QWORD *)(a1 + 24) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a3[1];
  *(_QWORD *)(a1 + 32) = *a3;
  *(_QWORD *)(a1 + 40) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_QWORD *)(a1 + 96) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  return result;
}

void QP::LLMParser::enumerateParses(uint64_t a1, void *a2)
{
  void (**v3)(id, uint64_t *, char *);
  uint64_t *v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  char v15;

  v3 = a2;
  v15 = 0;
  v4 = *(uint64_t **)(a1 + 56);
  v5 = *(uint64_t **)(a1 + 64);
  if (v4 != v5)
  {
    do
    {
      v6 = (std::__shared_weak_count *)v4[1];
      v13 = *v4;
      v14 = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      v3[2](v3, &v13, &v15);
      v9 = v14;
      if (v14)
      {
        v10 = (unint64_t *)&v14->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v4 += 2;
      if (v15)
        v12 = 1;
      else
        v12 = v4 == v5;
    }
    while (!v12);
  }

}

void sub_218E48A50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

CFStringRef QP::LLMParser::getDisplayDate(QP::LLMParser *this)
{
  const __CFAllocator *v2;
  __CFDateFormatter *ISO8601Formatter;
  CFAbsoluteTime CurrentTime;
  const __CFDate *v5;
  CFStringRef StringWithDate;

  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  ISO8601Formatter = CFDateFormatterCreateISO8601Formatter((CFAllocatorRef)*MEMORY[0x24BDBD240], 0x333uLL);
  CurrentTime = getCurrentTime(*(__CFCalendar **)(*(_QWORD *)this + 88), *(const __CFDate **)(*(_QWORD *)this + 72));
  v5 = CFDateCreate(v2, CurrentTime);
  if (v5)
  {
    StringWithDate = CFDateFormatterCreateStringWithDate(v2, ISO8601Formatter, v5);
    CFRelease(v5);
    if (!ISO8601Formatter)
      return StringWithDate;
    goto LABEL_5;
  }
  StringWithDate = 0;
  if (ISO8601Formatter)
LABEL_5:
    CFRelease(ISO8601Formatter);
  return StringWithDate;
}

void sub_218E48B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  nlp::CFScopedPtr<__CFDate const*>::reset(&a9, 0);
  nlp::CFScopedPtr<__CFDateFormatter *>::reset(&a10, 0);
  _Unwind_Resume(a1);
}

void QP::LLMParser::safeMakeGroupAttribute(_QWORD *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;

  v3 = *a2;
  if (*a1)
  {
    if (v3)
    {
      v4 = a1[1];
      *(_QWORD *)&v19 = *a1;
      *((_QWORD *)&v19 + 1) = v4;
      if (v4)
      {
        v5 = (unint64_t *)(v4 + 8);
        do
          v6 = __ldxr(v5);
        while (__stxr(v6 + 1, v5));
        v3 = *a2;
      }
      v7 = a2[1];
      *(_QWORD *)&v18 = v3;
      *((_QWORD *)&v18 + 1) = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      QP::ParseAttribute::makeGroupAttribute(&v19, &v18, a3);
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
      if (*((_QWORD *)&v18 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
      if (*((_QWORD *)&v19 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    else
    {
      v17 = a1[1];
      *a3 = *a1;
      a3[1] = v17;
      *a1 = 0;
      a1[1] = 0;
    }
  }
  else
  {
    v16 = a2[1];
    *a3 = v3;
    a3[1] = v16;
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_218E48C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *QP::ParseAttribute::makeGroupAttribute@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  char **v27;
  uint64_t v29;
  __int128 v30;
  __int128 v31;

  v6 = *(uint64_t **)a1;
  v7 = *(uint64_t **)a2;
  v8 = **(_QWORD **)a1;
  v9 = **(_QWORD **)a2;
  v10 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if (v8 >= v9)
    v11 = **(_QWORD **)a2;
  else
    v11 = **(_QWORD **)a1;
  v12 = *(_QWORD *)(*(_QWORD *)a1 + 8) + v8;
  if (v12 <= v10 + v9)
    v12 = v10 + v9;
  *(_QWORD *)&v31 = v11;
  *((_QWORD *)&v31 + 1) = v12 - v11;
  v14 = v6[2];
  v13 = v6[3];
  v16 = v7[2];
  v15 = v7[3];
  if (v14 >= v16)
    v17 = v16;
  else
    v17 = v14;
  v18 = v13 + v14;
  if (v13 + v14 <= v15 + v16)
    v18 = v15 + v16;
  v19 = v18 - v17;
  if (v16 == -1)
    v17 = v14;
  else
    v13 = v19;
  v20 = v14 == -1;
  if (v14 == -1)
    v21 = v16;
  else
    v21 = v17;
  if (v20)
    v13 = v15;
  *(_QWORD *)&v30 = v21;
  *((_QWORD *)&v30 + 1) = v13;
  v29 = 0;
  std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange,int,int,void>(&v31, &v30, (int *)&v29 + 1, (int *)&v29, a3);
  v22 = *(uint64_t **)(*(_QWORD *)a1 + 120);
  v23 = *(uint64_t **)(*(_QWORD *)a1 + 128);
  v24 = *a3;
  if (v23 == v22)
  {
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)(v24 + 120), a1);
  }
  else if (v24 != *(_QWORD *)a1)
  {
    std::vector<std::shared_ptr<QP::ParseAttribute>>::__assign_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>(v24 + 120, v22, v23, ((char *)v23 - (char *)v22) >> 4);
  }
  v25 = *(uint64_t **)(*(_QWORD *)a2 + 120);
  v26 = *(uint64_t **)(*(_QWORD *)a2 + 128);
  v27 = (char **)(*a3 + 120);
  if (v26 == v25)
    return (_QWORD *)std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100](v27, a2);
  else
    return std::vector<std::shared_ptr<QP::ParseAttribute>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::ParseAttribute>*>,std::__wrap_iter<std::shared_ptr<QP::ParseAttribute>*>>((uint64_t *)v27, *(_QWORD *)(*a3 + 128), v25, v26, ((char *)v26 - (char *)v25) >> 4);
}

void sub_218E48DA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void QP::LLMParser::retrieveLexemeWithTextRange(QP::LLMParser *this@<X0>, CFRange a2@<0:X1, 8:X2>, CFRange a3@<0:X3, 8:X4>, const __CFString *a4@<X5>, const __CFString *a5@<X6>, const __CFString *a6@<X7>, uint64_t **a7@<X8>)
{
  CFIndex length;
  CFIndex location;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  CFIndex v18;
  uint64_t *v19;
  CFIndex v20;
  uint64_t v21;
  uint64_t *v24;
  CFIndex v25;
  void **v27;
  void *v28;
  size_t v29;
  uint64_t *v30;
  uint64_t *v31;
  void *p_p;
  size_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  const __CFString *v46;
  void *__p;
  size_t v48;
  unsigned __int8 v49;
  void *v50[2];
  unsigned __int8 v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  CFRange v54;
  _QWORD v55[2];

  length = a2.length;
  location = a2.location;
  v54 = a3;
  *a7 = 0;
  a7[1] = 0;
  QP::Lexer::lexemeAtLocation(*((_QWORD *)this + 2), 0, v50);
  std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)a7, (__int128 *)v50);
  v14 = (std::__shared_weak_count *)v50[1];
  if (v50[1])
  {
    v15 = (unint64_t *)((char *)v50[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v52 = 0;
  v53 = 0;
  if (!*a7)
    goto LABEL_64;
  v46 = a6;
  v17 = 0;
  v18 = location + length;
  do
  {
    if (CFStringsAreEqual(a4, kQPParseAttributeDateKey))
    {
      v19 = *a7;
      if (*((unsigned __int16 *)*a7 + 44) - 1 <= 3)
      {
        v20 = v19[9];
        v21 = v19[10] + v20;
        if (location <= v20 && v18 >= v21)
          break;
        if (v20 <= location && v21 >= v18)
          break;
      }
      goto LABEL_55;
    }
    if (CFStringsAreEqual(a4, kQPParseAttributeMediaKey) || CFStringsAreEqual(a4, kQPParseAttributeKindKey))
    {
      if (std::string::starts_with[abi:ne180100](*a7, "Media"))
        break;
      if (!v52 && std::string::starts_with[abi:ne180100](*a7, "Kind"))
        std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](&v52, (uint64_t *)a7);
      goto LABEL_55;
    }
    v24 = *a7;
    v25 = (*a7)[9];
    if (v25 <= location && (*a7)[10] + v25 >= v18)
    {
      QP::getUTF8StringFromCFString(a5, v50);
      v27 = (v51 & 0x80u) == 0 ? v50 : (void **)v50[0];
      v28 = (v51 & 0x80u) == 0 ? (void *)v51 : v50[1];
      if (*((char *)v24 + 23) < 0)
      {
        v30 = v24;
        v24 = (uint64_t *)*v24;
        v29 = v30[1];
      }
      else
      {
        v29 = *((unsigned __int8 *)v24 + 23);
      }
      __p = v24;
      v48 = v29;
      if (std::string_view::starts_with[abi:ne180100](&__p, v27, (size_t)v28))
      {
        v31 = *a7;
        QP::getUTF8StringFromCFString(v46, &__p);
        if ((v49 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = __p;
        if ((v49 & 0x80u) == 0)
          v33 = v49;
        else
          v33 = v48;
        if (*((char *)v31 + 23) < 0)
        {
          v36 = v31;
          v31 = (uint64_t *)*v31;
          v34 = v36[1];
        }
        else
        {
          v34 = *((unsigned __int8 *)v31 + 23);
        }
        v55[0] = v31;
        v55[1] = v34;
        v35 = std::string_view::ends_with[abi:ne180100](v55, p_p, v33);
        if ((char)v49 < 0)
          operator delete(__p);
      }
      else
      {
        v35 = 0;
      }
      if ((char)v51 < 0)
        operator delete(v50[0]);
      if (v35)
        break;
    }
LABEL_55:
    QP::Lexer::lexemeAtLocation(*((_QWORD *)this + 2), ++v17, v50);
    std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)a7, (__int128 *)v50);
    v37 = (std::__shared_weak_count *)v50[1];
    if (v50[1])
    {
      v38 = (unint64_t *)((char *)v50[1] + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  while (*a7);
  if (v52)
  {
    std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](a7, &v52);
    goto LABEL_69;
  }
  if (!*a7)
  {
LABEL_64:
    std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const*&,CFRange &,void>((char **)&QP::kLexemeTextType, (uint64_t)&v54, v50);
    std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)a7, (__int128 *)v50);
    v40 = (std::__shared_weak_count *)v50[1];
    if (v50[1])
    {
      v41 = (unint64_t *)((char *)v50[1] + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
LABEL_69:
  v43 = v53;
  if (v53)
  {
    p_shared_owners = (unint64_t *)&v53->__shared_owners_;
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_218E49148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;

  if (a19 < 0)
    operator delete(__p);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

BOOL std::string::starts_with[abi:ne180100](uint64_t *a1, char *__s)
{
  size_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD v8[2];

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    v6 = a1;
    a1 = (uint64_t *)*a1;
    v5 = v6[1];
  }
  else
  {
    v5 = *((unsigned __int8 *)a1 + 23);
  }
  v8[0] = a1;
  v8[1] = v5;
  return std::string_view::starts_with[abi:ne180100](v8, __s, v4);
}

void QP::LLMParser::createAttribute(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, const __CFString *a6@<X5>, std::string **a7@<X8>)
{
  std::string *v11;
  std::string::size_type v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::string *v21;
  std::string __p;
  std::string v23;
  int v24;
  __int128 v25;
  __int128 v26;

  *(_QWORD *)&v26 = a3;
  *((_QWORD *)&v26 + 1) = a4;
  v25 = a2;
  LODWORD(v23.__r_.__value_.__l.__data_) = 0;
  v24 = 0;
  std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange &,int,int,void>(&v25, &v26, (int *)&v23, &v24, a7);
  v11 = *a7;
  v12 = *(_QWORD *)a5;
  v13 = *(std::__shared_weak_count **)(a5 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
  }
  v18 = (std::__shared_weak_count *)v11[4].__r_.__value_.__r.__words[2];
  v11[4].__r_.__value_.__l.__size_ = v12;
  v11[4].__r_.__value_.__r.__words[2] = (std::string::size_type)v13;
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)(a1 + 80), (__int128 *)a5);
  QP::getUTF8StringFromCFString(a6, &v23);
  v21 = *a7;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
  else
    __p = v23;
  std::string::operator=(v21 + 2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_218E49338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void QP::LLMParser::gatherAttributes(QP::LLMParser *this@<X0>, const __CFString *DisplayDate@<X1>, CFRange a3@<0:X3, 8:X4>, CFRange a4@<0:X5, 8:X6>, CFStringRef theString1@<X7>, unint64_t a6@<X2>, uint64_t *a7@<X8>, const __CFString *a8, const __CFArray *a9, const __CFArray *a10, const __CFDictionary *a11)
{
  CFIndex length;
  CFIndex location;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  CFIndex v29;
  CFIndex v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *size;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  const __CFString *v48;
  const __CFString *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  CFIndex v53;
  CFIndex v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  const __CFDictionary *v58;
  std::string *v59;
  const __CFArray *v61;
  const __CFArray *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t i;
  uint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  CFIndex v70;
  CFIndex v71;
  unint64_t *v72;
  unint64_t v73;
  std::string *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  CFIndex v79;
  CFIndex v80;
  unint64_t *v81;
  unint64_t v82;
  std::string *v83;
  std::string::value_type *v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  CFIndex v88;
  CFIndex v89;
  unint64_t *v90;
  unint64_t v91;
  std::string *v92;
  std::string *v93;
  const char *v94;
  std::string *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  CFIndex v100;
  CFIndex v101;
  unint64_t *v102;
  unint64_t v103;
  const char *v104;
  std::string *v105;
  std::string *v106;
  std::string *v107;
  const char *v108;
  std::string::value_type *v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  CFIndex v113;
  CFIndex v114;
  unint64_t *v115;
  unint64_t v116;
  __int128 v117;
  std::string *v118[2];
  _QWORD v119[2];
  _QWORD v120[2];
  std::string *v121[2];
  _QWORD v122[2];
  __int128 v123;
  std::string *v124[2];
  _QWORD v125[2];
  _QWORD v126[2];
  std::string *v127[2];
  _QWORD v128[2];
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  _QWORD v133[2];
  std::string *v134[2];
  _QWORD v135[2];
  std::string __p;
  __int128 *v137;
  __int128 v138;
  std::string *v139[2];
  _QWORD v140[2];
  uint64_t v141;
  std::__shared_weak_count *v142;
  std::string *v143;
  std::__shared_weak_count *v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  __int128 v147;
  __int128 v148;
  std::string v149;
  CFRange v150;
  _BYTE v151[128];
  uint64_t v152;
  CFRange v153;

  length = a4.length;
  location = a4.location;
  v152 = *MEMORY[0x24BDAC8D0];
  v150 = a3;
  *a7 = 0;
  a7[1] = 0;
  memset(&v149, 0, sizeof(v149));
  v148 = 0uLL;
  if (CFStringsAreEqual(theString1, kQPParseAttributeFlightLocationKey)
    || CFStringsAreEqual(theString1, kQPParseAttributeFlightArrivalLocationKey)
    || CFStringsAreEqual(theString1, kQPParseAttributeFlightDepartureLocationKey)
    || CFStringsAreEqual(theString1, kQPParseAttributeRestaurantActionKey)
    || CFStringsAreEqual(theString1, kQPParseAttributeFlightActionKey)
    || CFStringsAreEqual(theString1, kQPParseAttributeHotelActionKey)
    || CFStringsAreEqual(theString1, kQPParseAttributeEarliestActionKey)
    || CFStringsAreEqual(theString1, kQPParseAttributeLatestActionKey))
  {
    std::string::__assign_external(&v149, (const std::string::value_type *)QP::kLexemeTextType);
    if (CFStringsAreEqual(theString1, kQPParseAttributeEarliestActionKey)
      || CFStringsAreEqual(theString1, kQPParseAttributeLatestActionKey))
    {
      DisplayDate = QP::LLMParser::getDisplayDate(this);
    }
    QP::getUTF8StringFromCFString(DisplayDate, &__p);
    std::allocate_shared[abi:ne180100]<QP::LexemeValue,std::allocator<QP::LexemeValue>,std::string &,std::string,CFRange &,void>((uint64_t)&v149, (uint64_t)&__p, (uint64_t)&v150, &v147);
    v18 = v147;
    v147 = 0uLL;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
    v148 = v18;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
    if (*((_QWORD *)&v147 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v25 = v148;
    *(_WORD *)(v148 + 88) = 6;
    v26 = (std::__shared_weak_count *)a7[1];
    v145 = *a7;
    v146 = v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v29 = v150.location;
    v30 = v150.length;
    v141 = v25;
    v142 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
    if (*((_QWORD *)&v148 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    QP::LLMParser::createAttribute((uint64_t)this, a6, v29, v30, (uint64_t)&v141, theString1, &v143);
    QP::LLMParser::safeMakeGroupAttribute(&v145, (uint64_t *)&v143, &__p);
    std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)a7, (__int128 *)&__p);
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v34 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v36 = v144;
    if (v144)
    {
      v37 = (unint64_t *)&v144->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = v142;
    if (v142)
    {
      v40 = (unint64_t *)&v142->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = v146;
    if (v146)
    {
      v43 = (unint64_t *)&v146->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    goto LABEL_50;
  }
  if (CFStringsAreEqual(theString1, kQPParseAttributeDateKey)
    || CFStringsAreEqual(theString1, kQPParseAttributeMediaKey)
    || CFStringsAreEqual(theString1, kQPParseAttributeKindKey)
    || CFStringsAreEqual(theString1, kQPParseAttributeAttachedKindKey)
    || CFStringsAreEqual(theString1, kQPParseAttributeTaggedKey)
    || CFStringsAreEqual(theString1, kQPParseAttributeFlagColorKey)
    || CFStringsAreEqual(theString1, kQPParseAttributePrintedActionKey)
    || CFStringsAreEqual(theString1, kQPParseAttributeCreatedActionKey)
    || CFStringsAreEqual(theString1, kQPParseAttributeModifiedActionKey))
  {
    if (CFStringsAreEqual(theString1, kQPParseAttributeAttachedKindKey))
    {
      v48 = CFSTR("Kind");
LABEL_69:
      v49 = &stru_24DA27910;
LABEL_75:
      v153.location = location;
      v153.length = length;
      QP::LLMParser::retrieveLexemeWithTextRange(this, v153, v150, theString1, v48, v49, (uint64_t **)&__p);
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)&v148, (__int128 *)&__p);
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
      v50 = a7[1];
      v140[0] = *a7;
      v140[1] = v50;
      if (v50)
      {
        v51 = (unint64_t *)(v50 + 8);
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
      v53 = v150.location;
      v54 = v150.length;
      v138 = v148;
      if (*((_QWORD *)&v148 + 1))
      {
        v55 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
      }
      QP::LLMParser::createAttribute((uint64_t)this, a6, v53, v54, (uint64_t)&v138, theString1, v139);
      QP::LLMParser::safeMakeGroupAttribute(v140, (uint64_t *)v139, &__p);
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)a7, (__int128 *)&__p);
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v139);
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&v138);
      v57 = v140;
LABEL_82:
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v57);
      goto LABEL_50;
    }
    if (CFStringsAreEqual(theString1, kQPParseAttributeTaggedKey))
    {
      v48 = CFSTR("Tag");
    }
    else
    {
      if (!CFStringsAreEqual(theString1, kQPParseAttributeFlagColorKey))
      {
        if (!CFStringsAreEqual(theString1, kQPParseAttributePrintedActionKey)
          && !CFStringsAreEqual(theString1, kQPParseAttributeCreatedActionKey)
          && !CFStringsAreEqual(theString1, kQPParseAttributeModifiedActionKey))
        {
          v49 = 0;
          v48 = 0;
          goto LABEL_75;
        }
        v48 = CFSTR("Action");
        goto LABEL_69;
      }
      v48 = CFSTR("Flag");
    }
    v49 = CFSTR("Status");
    goto LABEL_75;
  }
  if (CFStringsAreEqual(theString1, kQPParseAttributeGroundedPersonKey))
  {
    v58 = a11;
    if (-[__CFDictionary count](v58, "count"))
    {
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
      {
        v149.__r_.__value_.__l.__size_ = 14;
        v59 = (std::string *)v149.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&v149.__r_.__value_.__s + 23) = 14;
        v59 = &v149;
      }
      strcpy((char *)v59, "GroundedPerson");
      QP::getVisualIdsAndScores(v58, &__p);
      std::allocate_shared[abi:ne180100]<QP::LexemeGroundedPerson,std::allocator<QP::LexemeGroundedPerson>,std::string &,std::vector<std::string> &,std::vector<std::pair<double,double>> &,CFRange &,void>((uint64_t)&v149, (__int128 **)&__p, &v137, (uint64_t)&v150, &v147);
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)&v148, &v147);
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&v147);
      v75 = v148;
      *(_WORD *)(v148 + 88) = 16;
      v76 = a7[1];
      v135[0] = *a7;
      v135[1] = v76;
      if (v76)
      {
        v77 = (unint64_t *)(v76 + 8);
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }
      v79 = v150.location;
      v80 = v150.length;
      v133[0] = v75;
      v133[1] = *((_QWORD *)&v148 + 1);
      if (*((_QWORD *)&v148 + 1))
      {
        v81 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
        do
          v82 = __ldxr(v81);
        while (__stxr(v82 + 1, v81));
      }
      QP::LLMParser::createAttribute((uint64_t)this, a6, v79, v80, (uint64_t)v133, theString1, v134);
      QP::LLMParser::safeMakeGroupAttribute(v135, (uint64_t *)v134, &v147);
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)a7, &v147);
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&v147);
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v134);
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v133);
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v135);
      std::pair<std::vector<std::string>,std::vector<std::pair<double,double>>>::~pair((uint64_t)&__p);
    }

    goto LABEL_50;
  }
  if (!CFStringsAreEqual(theString1, kQPParseAttributeSenderKey)
    && !CFStringsAreEqual(theString1, kQPParseAttributeRecipientKey)
    && !CFStringsAreEqual(theString1, kQPParseAttributeSenderHandleKey)
    && !CFStringsAreEqual(theString1, kQPParseAttributeRecipientHandleKey)
    && !CFStringsAreEqual(theString1, kQPParseAttributeTaggedPersonKey))
  {
    if (CFStringsAreEqual(theString1, kQPParseAttributeReadKey)
      || CFStringsAreEqual(theString1, kQPParseAttributeUnreadKey)
      || CFStringsAreEqual(theString1, kQPParseAttributeFlaggedKey)
      || CFStringsAreEqual(theString1, kQPParseAttributeRepliedKey)
      || CFStringsAreEqual(theString1, kQPParseAttributeSharedKey))
    {
      *(_QWORD *)&v147 = 0;
      if (CFStringsAreEqual(theString1, kQPParseAttributeReadKey))
      {
        if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
        {
          v149.__r_.__value_.__l.__size_ = 10;
          v92 = (std::string *)v149.__r_.__value_.__r.__words[0];
        }
        else
        {
          *((_BYTE *)&v149.__r_.__value_.__s + 23) = 10;
          v92 = &v149;
        }
        strcpy((char *)v92, "ReadStatus");
      }
      else
      {
        if (CFStringsAreEqual(theString1, kQPParseAttributeUnreadKey))
        {
          if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
          {
            v149.__r_.__value_.__l.__size_ = 10;
            v93 = (std::string *)v149.__r_.__value_.__r.__words[0];
          }
          else
          {
            *((_BYTE *)&v149.__r_.__value_.__s + 23) = 10;
            v93 = &v149;
          }
          strcpy((char *)v93, "ReadStatus");
          v94 = "0";
          goto LABEL_162;
        }
        if (CFStringsAreEqual(theString1, kQPParseAttributeFlaggedKey))
        {
          if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
          {
            v149.__r_.__value_.__l.__size_ = 13;
            v95 = (std::string *)v149.__r_.__value_.__r.__words[0];
          }
          else
          {
            *((_BYTE *)&v149.__r_.__value_.__s + 23) = 13;
            v95 = &v149;
          }
          v104 = "FlaggedStatus";
        }
        else
        {
          if (!CFStringsAreEqual(theString1, kQPParseAttributeRepliedKey))
          {
            if (!CFStringsAreEqual(theString1, kQPParseAttributeSharedKey))
              goto LABEL_163;
            if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
            {
              v149.__r_.__value_.__l.__size_ = 12;
              v105 = (std::string *)v149.__r_.__value_.__r.__words[0];
            }
            else
            {
              *((_BYTE *)&v149.__r_.__value_.__s + 23) = 12;
              v105 = &v149;
            }
            strcpy((char *)v105, "SharedStatus");
            goto LABEL_156;
          }
          if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
          {
            v149.__r_.__value_.__l.__size_ = 13;
            v95 = (std::string *)v149.__r_.__value_.__r.__words[0];
          }
          else
          {
            *((_BYTE *)&v149.__r_.__value_.__s + 23) = 13;
            v95 = &v149;
          }
          v104 = "RepliedStatus";
        }
        v95->__r_.__value_.__r.__words[0] = *(_QWORD *)v104;
        *(std::string::size_type *)((char *)v95->__r_.__value_.__r.__words + 5) = *(_QWORD *)(v104 + 5);
        v95->__r_.__value_.__s.__data_[13] = 0;
      }
LABEL_156:
      v94 = "1";
LABEL_162:
      *(_QWORD *)&v147 = v94;
LABEL_163:
      std::allocate_shared[abi:ne180100]<QP::LexemeStatus,std::allocator<QP::LexemeStatus>,std::string &,char const*&,CFRange &,void>((uint64_t)&v149, (char **)&v147, (uint64_t)&v150, &__p);
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)&v148, (__int128 *)&__p);
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
      v96 = v148;
      *(_WORD *)(v148 + 88) = 5;
      v97 = a7[1];
      v122[0] = *a7;
      v122[1] = v97;
      if (v97)
      {
        v98 = (unint64_t *)(v97 + 8);
        do
          v99 = __ldxr(v98);
        while (__stxr(v99 + 1, v98));
      }
      v100 = v150.location;
      v101 = v150.length;
      v120[0] = v96;
      v120[1] = *((_QWORD *)&v148 + 1);
      if (*((_QWORD *)&v148 + 1))
      {
        v102 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
        do
          v103 = __ldxr(v102);
        while (__stxr(v103 + 1, v102));
      }
      QP::LLMParser::createAttribute((uint64_t)this, a6, v100, v101, (uint64_t)v120, theString1, v121);
      QP::LLMParser::safeMakeGroupAttribute(v122, (uint64_t *)v121, &__p);
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)a7, (__int128 *)&__p);
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v121);
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v120);
      v57 = v122;
      goto LABEL_82;
    }
    if (CFStringsAreEqual(theString1, kQPParseAttributeAttachmentKey))
    {
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
      {
        v149.__r_.__value_.__l.__size_ = 10;
        v106 = (std::string *)v149.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&v149.__r_.__value_.__s + 23) = 10;
        v106 = &v149;
      }
      LOWORD(v106->__r_.__value_.__r.__words[1]) = 29806;
      v108 = "Attachment";
    }
    else
    {
      if (CFStringsAreEqual(theString1, kQPParseAttributeReceivedKey))
      {
        if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
        {
          v149.__r_.__value_.__l.__size_ = 14;
          v107 = (std::string *)v149.__r_.__value_.__r.__words[0];
        }
        else
        {
          *((_BYTE *)&v149.__r_.__value_.__s + 23) = 14;
          v107 = &v149;
        }
        qmemcpy(v107, "ReceivedAction", 14);
        v109 = &v107->__r_.__value_.__s.__data_[14];
        goto LABEL_197;
      }
      if (!CFStringsAreEqual(theString1, kQPParseAttributeSentKey))
      {
        std::string::__assign_external(&v149, (const std::string::value_type *)QP::kLexemeTextType);
        goto LABEL_198;
      }
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
      {
        v149.__r_.__value_.__l.__size_ = 10;
        v106 = (std::string *)v149.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&v149.__r_.__value_.__s + 23) = 10;
        v106 = &v149;
      }
      LOWORD(v106->__r_.__value_.__r.__words[1]) = 28271;
      v108 = "SentAction";
    }
    v106->__r_.__value_.__r.__words[0] = *(_QWORD *)v108;
    v109 = &v106->__r_.__value_.__s.__data_[10];
LABEL_197:
    *v109 = 0;
LABEL_198:
    std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&v149, (uint64_t)&v150, &__p);
    std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)&v148, (__int128 *)&__p);
    std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
    v110 = a7[1];
    v119[0] = *a7;
    v119[1] = v110;
    if (v110)
    {
      v111 = (unint64_t *)(v110 + 8);
      do
        v112 = __ldxr(v111);
      while (__stxr(v112 + 1, v111));
    }
    v113 = v150.location;
    v114 = v150.length;
    v117 = v148;
    if (*((_QWORD *)&v148 + 1))
    {
      v115 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
      do
        v116 = __ldxr(v115);
      while (__stxr(v116 + 1, v115));
    }
    QP::LLMParser::createAttribute((uint64_t)this, a6, v113, v114, (uint64_t)&v117, theString1, v118);
    QP::LLMParser::safeMakeGroupAttribute(v119, (uint64_t *)v118, &__p);
    std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)a7, (__int128 *)&__p);
    std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
    std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v118);
    std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&v117);
    v57 = v119;
    goto LABEL_82;
  }
  if (!CFStringsAreEqual(theString1, kQPParseAttributeSenderKey)
    && !CFStringsAreEqual(theString1, kQPParseAttributeRecipientKey)
    && !CFStringsAreEqual(theString1, kQPParseAttributeTaggedPersonKey))
  {
    a9 = a10;
  }
  v61 = a9;
  if (-[__CFArray count](v61, "count"))
  {
    v131 = 0u;
    v132 = 0u;
    v129 = 0u;
    v130 = 0u;
    v62 = v61;
    v63 = -[__CFArray countByEnumeratingWithState:objects:count:](v62, "countByEnumeratingWithState:objects:count:", &v129, v151, 16);
    if (v63)
    {
      v64 = *(_QWORD *)v130;
      do
      {
        for (i = 0; i != v63; ++i)
        {
          if (*(_QWORD *)v130 != v64)
            objc_enumerationMutation(v62);
          QP::getUTF8StringFromCFString(*(const __CFString **)(*((_QWORD *)&v129 + 1) + 8 * i), &__p);
          std::allocate_shared[abi:ne180100]<QP::LexemeValue,std::allocator<QP::LexemeValue>,std::string &,std::string,CFRange &,void>((uint64_t)&v149, (uint64_t)&__p, (uint64_t)&v150, &v147);
          std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)&v148, &v147);
          std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&v147);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v66 = v148;
          *(_WORD *)(v148 + 88) = 6;
          v67 = a7[1];
          v128[0] = *a7;
          v128[1] = v67;
          if (v67)
          {
            v68 = (unint64_t *)(v67 + 8);
            do
              v69 = __ldxr(v68);
            while (__stxr(v69 + 1, v68));
          }
          v70 = v150.location;
          v71 = v150.length;
          v126[0] = v66;
          v126[1] = *((_QWORD *)&v148 + 1);
          if (*((_QWORD *)&v148 + 1))
          {
            v72 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
            do
              v73 = __ldxr(v72);
            while (__stxr(v73 + 1, v72));
          }
          QP::LLMParser::createAttribute((uint64_t)this, a6, v70, v71, (uint64_t)v126, theString1, v127);
          QP::LLMParser::safeMakeGroupAttribute(v128, (uint64_t *)v127, &__p);
          std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)a7, (__int128 *)&__p);
          std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
          std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v127);
          std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v126);
          std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v128);
        }
        v63 = -[__CFArray countByEnumeratingWithState:objects:count:](v62, "countByEnumeratingWithState:objects:count:", &v129, v151, 16);
      }
      while (v63);
    }

  }
  if (CFStringsAreEqual(theString1, kQPParseAttributeTaggedPersonKey))
  {
    if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    {
      v149.__r_.__value_.__l.__size_ = 12;
      v74 = (std::string *)v149.__r_.__value_.__r.__words[0];
    }
    else
    {
      *((_BYTE *)&v149.__r_.__value_.__s + 23) = 12;
      v74 = &v149;
    }
    LODWORD(v74->__r_.__value_.__r.__words[1]) = 1852797810;
    v74->__r_.__value_.__r.__words[0] = *(_QWORD *)"TaggedPerson";
    v84 = &v74->__r_.__value_.__s.__data_[12];
  }
  else
  {
    if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    {
      v149.__r_.__value_.__l.__size_ = 6;
      v83 = (std::string *)v149.__r_.__value_.__r.__words[0];
    }
    else
    {
      *((_BYTE *)&v149.__r_.__value_.__s + 23) = 6;
      v83 = &v149;
    }
    WORD2(v83->__r_.__value_.__r.__words[0]) = 28271;
    LODWORD(v83->__r_.__value_.__l.__data_) = 1936876880;
    v84 = &v83->__r_.__value_.__s.__data_[6];
  }
  *v84 = 0;
  std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&v149, (uint64_t)&v150, &__p);
  std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)&v148, (__int128 *)&__p);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  v85 = a7[1];
  v125[0] = *a7;
  v125[1] = v85;
  if (v85)
  {
    v86 = (unint64_t *)(v85 + 8);
    do
      v87 = __ldxr(v86);
    while (__stxr(v87 + 1, v86));
  }
  v88 = v150.location;
  v89 = v150.length;
  v123 = v148;
  if (*((_QWORD *)&v148 + 1))
  {
    v90 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
  }
  QP::LLMParser::createAttribute((uint64_t)this, a6, v88, v89, (uint64_t)&v123, theString1, v124);
  QP::LLMParser::safeMakeGroupAttribute(v125, (uint64_t *)v124, &__p);
  std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)a7, (__int128 *)&__p);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v124);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&v123);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v125);

LABEL_50:
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
  if (*((_QWORD *)&v148 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v149.__r_.__value_.__l.__data_);
}

void sub_218E4A3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  void *__p;
  char a72;
  uint64_t v72;

  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a67);
  if (a72 < 0)
    operator delete(__p);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v72);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::vector<std::string>,std::vector<std::pair<double,double>>>::~pair(uint64_t a1)
{
  void *v2;
  void **v4;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v4 = (void **)a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void QP::LLMParser::parse(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  uint8_t buf[16];

  if (llmParserLogger(void)::token != -1)
    dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_127);
  v4 = llmParserLogger(void)::log;
  if (os_log_type_enabled((os_log_t)llmParserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_218E10000, v4, OS_LOG_TYPE_DEFAULT, "[QPNLU] Parsing using LLMParse", buf, 2u);
  }
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  QP::LLMParser::parseInternal(a1);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (llmParserLogger(void)::token != -1)
    dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_127);
  v10 = llmParserLogger(void)::log;
  if (os_log_type_enabled((os_log_t)llmParserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_218E10000, v10, OS_LOG_TYPE_DEFAULT, "[QPNLU] Finished Parsing using LLMParse", buf, 2u);
  }
}

void sub_218E4A754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QP::LLMParser::parseInternal(uint64_t a1)
{
  const __CFString *v1;
  const void **v2;
  const __CFString *v3;
  const void *v4;
  CFTypeRef v5;
  QP::LLMParser *Length;
  const __CFDictionary *GroundTruthDataRef;
  const __CFDictionary *Value;
  const __CFDictionary *v9;
  NSObject *v10;
  CFIndex v11;
  const __CFDictionary *ValueAtIndex;
  QP *v13;
  CFIndex v14;
  CFIndex v15;
  CFIndex v16;
  NSString *v17;
  uint64_t v18;
  CFIndex v19;
  NSLocale *v20;
  void *v21;
  BOOL v22;
  const __CFDictionary *v23;
  const __CFArray *v24;
  const __CFArray *v25;
  void *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  void **v37;
  void **v38;
  void **v39;
  const char *v40;
  const __CFString *v41;
  unint64_t *v42;
  unint64_t v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  void **v57;
  void **v58;
  BOOL v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _BYTE *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  __CFString *v67;
  dispatch_semaphore_t v68;
  qos_class_t v69;
  NSObject *v70;
  unint64_t *v71;
  unint64_t v72;
  __CFString *v73;
  NSObject *v74;
  dispatch_time_t v75;
  void *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  void *v80;
  id v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  NSObject *v88;
  unsigned int v89;
  NSObject *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  NSObject *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  void *v107;
  const __CFArray *theArray;
  QP *v109;
  void *v110;
  void *v111;
  CFIndex v112;
  void *v113;
  CFMutableArrayRef Mutable;
  id v115;
  void *v116;
  id v117;
  id v118;
  id v119;
  void *v120;
  const __CFAllocator *allocator;
  unint64_t v123;
  CFIndex v124;
  __CFString *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  __int128 v128;
  uint8_t v129;
  char v130[7];
  const void *v131;
  std::__shared_weak_count *v132;
  CFIndex Count;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  const void *v139;
  const void **v140;
  uint64_t v141;
  uint64_t (*v142)(uint64_t, uint64_t);
  void (*v143)(uint64_t);
  id v144;
  __int128 v145;
  uint64_t v146;
  uint64_t (*v147)(uint64_t, uint64_t);
  void (*v148)(uint64_t);
  id v149;
  void *v150;
  void *v151;
  void *v152;
  void *v153;
  _QWORD v154[8];
  _QWORD v155[8];
  void *v156;
  void *v157;
  id v158;
  void *v159;
  uint8_t v160[4];
  int v161[3];
  uint64_t v162;
  uint64_t v163;
  uint8_t buf[16];
  void (*v165)(uint64_t);
  void *v166;
  __CFString *v167;
  NSObject *v168;
  __int128 *v169;
  const void **v170;
  _BYTE *v171;
  std::__shared_weak_count *v172;
  uint64_t v173;
  __int16 v174;
  uint64_t v175;
  CFRange v176;
  CFRange v177;

  v175 = *MEMORY[0x24BDAC8D0];
  v2 = (const void **)(a1 + 48);
  v1 = *(const __CFString **)(a1 + 48);
  if (!v1 || (v3 = *(const __CFString **)(*(_QWORD *)(a1 + 16) + 440)) == 0 || !CFStringsAreEqual(v1, v3))
  {
    QP::LLMParser::clear((const void **)a1);
    nlp::CFScopedPtr<__CFString const*>::reset(v2, 0);
    v4 = *(const void **)(*(_QWORD *)(a1 + 16) + 440);
    if (v4)
    {
      v5 = CFRetain(v4);
      nlp::CFScopedPtr<__CFString const*>::reset(v2, v5);
    }
    if (*v2)
    {
      Length = (QP::LLMParser *)CFStringGetLength((CFStringRef)*v2);
      if (Length)
      {
        GroundTruthDataRef = (const __CFDictionary *)QP::LLMParser::getGroundTruthDataRef(Length);
        Value = (const __CFDictionary *)CFDictionaryGetValue(GroundTruthDataRef, *v2);
        if (Value)
        {
          v9 = Value;
          if (llmParserLogger(void)::token != -1)
            dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_127);
          v10 = (id)llmParserLogger(void)::log;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_218E10000, v10, OS_LOG_TYPE_DEFAULT, "[QPNLU][LLMParser] successfully got non-empty prediction from ground Truth json file", buf, 2u);
          }

          std::map<std::string,std::map<std::string,std::set<std::string>>>::map[abi:ne180100](&v137, *(_QWORD *)(a1 + 32) + 424);
          v109 = (QP *)*(id *)(*(_QWORD *)a1 + 104);
          v134 = 0;
          v135 = 0;
          v136 = 0;
          CFDictionaryGetValue(v9, CFSTR("intentLabel"));
          v106 = (void *)objc_claimAutoreleasedReturnValue();
          CFDictionaryGetValue(v9, CFSTR("intentLabelId"));
          v107 = (void *)objc_claimAutoreleasedReturnValue();
          theArray = (const __CFArray *)CFDictionaryGetValue(v9, CFSTR("arguments"));
          Count = CFArrayGetCount(theArray);
          v115 = objc_alloc_init(MEMORY[0x24BDD16A8]);
          objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", Count);
          v110 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
          v111 = (void *)objc_claimAutoreleasedReturnValue();
          if (Count >= 1)
          {
            v123 = 0;
            v124 = 0;
            v11 = 0;
            allocator = (const __CFAllocator *)*MEMORY[0x24BDBD240];
            v105 = *MEMORY[0x24BDD0FC8];
            while (1)
            {
              v112 = v11;
              ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v11);
              objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
              v120 = (void *)objc_claimAutoreleasedReturnValue();
              Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x24BDBD690]);
              CFDictionaryGetValue(ValueAtIndex, CFSTR("text"));
              v13 = (QP *)objc_claimAutoreleasedReturnValue();
              CFDictionaryGetValue(ValueAtIndex, CFSTR("textLabel"));
              v119 = (id)objc_claimAutoreleasedReturnValue();
              CFDictionaryGetValue(ValueAtIndex, CFSTR("textLabelId"));
              v116 = (void *)objc_claimAutoreleasedReturnValue();
              CFDictionaryGetValue(ValueAtIndex, CFSTR("textRange"));
              v113 = (void *)objc_claimAutoreleasedReturnValue();
              v14 = objc_msgSend(v113, "rangeValue");
              v16 = v15;
              if (objc_msgSend(v119, "isEqualToString:", CFSTR("QUPP_ARG_TIME")))
              {
                QP::normalizeTimeString(v13, v17);
                v18 = objc_claimAutoreleasedReturnValue();

                v13 = (QP *)v18;
              }
              v125 = (__CFString *)v13;
              v19 = -[QP length](v13, "length");
              if (objc_msgSend(v115, "length"))
                objc_msgSend(v115, "appendString:", CFSTR(" "));
              objc_msgSend(v115, "appendString:", v13);
              if (QP::isECRSupportedLocale(v109, v20))
              {
                if ((objc_msgSend(v119, "isEqualToString:", CFSTR("QUPP_ARG_PERSON")) & 1) != 0
                  || (objc_msgSend(v119, "isEqualToString:", CFSTR("QUPP_ARG_PERSON_SENDER")) & 1) != 0
                  || objc_msgSend(v119, "isEqualToString:", CFSTR("QUPP_ARG_PERSON_RECEIVER")))
                {
                  break;
                }
              }
              v117 = 0;
              v118 = 0;
              v23 = 0;
              v24 = 0;
              v25 = 0;
LABEL_33:
              objc_msgSend(v120, "setObject:forKeyedSubscript:", v125, kQPQUOutputTokenKey);
              v159 = v116;
              objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v159, 1);
              v28 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v120, "setObject:forKeyedSubscript:", v28, kQPQUOutputTokenArgIdsKey);

              v158 = v119;
              objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v158, 1);
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v120, "setObject:forKeyedSubscript:", v29, kQPQUOutputTokenArgLabelsKey);

              objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", 1);
              v30 = (void *)objc_claimAutoreleasedReturnValue();
              v157 = v30;
              objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v157, 1);
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v120, "setObject:forKeyedSubscript:", v31, kQPQUOutputTokenArgScoresKey);

              objc_msgSend(MEMORY[0x24BDD1968], "valueWithRange:", v124, v19);
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v120, "setObject:forKeyedSubscript:", v32, kQPQUOutputTokenRangeKey);

              objc_msgSend(v120, "setObject:forKeyedSubscript:", Mutable, kQPQUOutputSpanTypesKey);
              objc_msgSend(MEMORY[0x24BDD16E0], "numberWithLong:", v123);
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              v156 = v33;
              objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v156, 1);
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v120, "setObject:forKeyedSubscript:", v34, kQPQUOutputTokenAttributeIndexesKey);

              v35 = (void *)objc_msgSend(v120, "copy");
              objc_msgSend(v110, "addObject:", v35);

              v145 = 0uLL;
              v36 = objc_retainAutorelease(v119);
              std::string::basic_string[abi:ne180100]<0>(buf, (char *)objc_msgSend(v36, "UTF8String"));
              v37 = std::__tree<std::string>::find<std::string>((uint64_t)&v137, (void **)buf);
              if (SHIBYTE(v165) < 0)
                operator delete(*(void **)buf);
              if (&v138 != (_QWORD **)v37)
              {
                v38 = (void **)v37[7];
                v39 = v37 + 8;
                if (v38 != v37 + 8)
                {
                  do
                  {
                    v40 = (const char *)(v38 + 4);
                    if (*((char *)v38 + 55) < 0)
                      v40 = *(const char **)v40;
                    v41 = CFStringCreateWithCString(allocator, v40, 0x8000100u);
                    v128 = v145;
                    if (*((_QWORD *)&v145 + 1))
                    {
                      v42 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
                      do
                        v43 = __ldxr(v42);
                      while (__stxr(v43 + 1, v42));
                    }
                    v176.location = v124;
                    v176.length = v19;
                    v177.location = v14;
                    v177.length = v16;
                    QP::LLMParser::gatherAttributes((QP::LLMParser *)a1, v125, v176, v177, v41, v123, &v126, (const __CFString *)v104, v24, v25, v23);
                    QP::LLMParser::safeMakeGroupAttribute(&v128, &v126, buf);
                    v44 = *(_OWORD *)buf;
                    memset(buf, 0, sizeof(buf));
                    v45 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
                    v145 = v44;
                    if (v45)
                    {
                      p_shared_owners = (unint64_t *)&v45->__shared_owners_;
                      do
                        v47 = __ldaxr(p_shared_owners);
                      while (__stlxr(v47 - 1, p_shared_owners));
                      if (!v47)
                      {
                        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                        std::__shared_weak_count::__release_weak(v45);
                      }
                    }
                    v48 = *(std::__shared_weak_count **)&buf[8];
                    if (*(_QWORD *)&buf[8])
                    {
                      v49 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                      do
                        v50 = __ldaxr(v49);
                      while (__stlxr(v50 - 1, v49));
                      if (!v50)
                      {
                        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                        std::__shared_weak_count::__release_weak(v48);
                      }
                    }
                    v51 = v127;
                    if (v127)
                    {
                      v52 = (unint64_t *)&v127->__shared_owners_;
                      do
                        v53 = __ldaxr(v52);
                      while (__stlxr(v53 - 1, v52));
                      if (!v53)
                      {
                        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                        std::__shared_weak_count::__release_weak(v51);
                      }
                    }
                    v54 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
                    if (*((_QWORD *)&v128 + 1))
                    {
                      v55 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
                      do
                        v56 = __ldaxr(v55);
                      while (__stlxr(v56 - 1, v55));
                      if (!v56)
                      {
                        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                        std::__shared_weak_count::__release_weak(v54);
                      }
                    }
                    v57 = (void **)v38[1];
                    if (v57)
                    {
                      do
                      {
                        v58 = v57;
                        v57 = (void **)*v57;
                      }
                      while (v57);
                    }
                    else
                    {
                      do
                      {
                        v58 = (void **)v38[2];
                        v59 = *v58 == v38;
                        v38 = v58;
                      }
                      while (!v59);
                    }
                    v38 = v58;
                  }
                  while (v58 != v39);
                }
                std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)&v134, &v145);
                ++v123;
              }
              v60 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
              if (*((_QWORD *)&v145 + 1))
              {
                v61 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
                do
                  v62 = __ldaxr(v61);
                while (__stlxr(v62 - 1, v61));
                if (!v62)
                {
                  ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                  std::__shared_weak_count::__release_weak(v60);
                }
              }

              v124 += v19 + 1;
              v11 = v112 + 1;
              if (v112 + 1 >= Count)
                goto LABEL_114;
            }
            objc_msgSend(v111, "objectForKeyedSubscript:", v13);
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            v22 = v21 == 0;

            if (!v22)
            {
              objc_msgSend(v111, "objectForKeyedSubscript:", v125);
              v23 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
              v24 = 0;
              v25 = 0;
              v117 = 0;
              v118 = 0;
LABEL_25:
              if (-[__CFDictionary count](v23, "count") || -[__CFArray count](v24, "count"))
              {
                objc_msgSend(v111, "setObject:forKeyedSubscript:", v23, v125);
                +[QPEntityResolutionPrefixCache sharedCache](QPEntityResolutionPrefixCache, "sharedCache");
                v26 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v26, "cacheGroundedToken:", v125);

                if (llmParserLogger(void)::token != -1)
                  dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_127);
                v27 = (id)llmParserLogger(void)::log;
                if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
                  QP::LLMParser::parseInternal(&v129, v130, v27);

              }
              goto LABEL_33;
            }
            v63 = *(_BYTE **)a1;
            v64 = *(std::__shared_weak_count **)(a1 + 8);
            v131 = *(const void **)a1;
            v132 = v64;
            if (v64)
            {
              v65 = (unint64_t *)&v64->__shared_owners_;
              do
                v66 = __ldxr(v65);
              while (__stxr(v66 + 1, v65));
            }
            v67 = v125;
            *(_QWORD *)&v145 = 0;
            *((_QWORD *)&v145 + 1) = &v145;
            v146 = 0x3032000000;
            v147 = __Block_byref_object_copy__4;
            v148 = __Block_byref_object_dispose__4;
            v149 = 0;
            v139 = 0;
            v140 = &v139;
            v141 = 0x3032000000;
            v142 = __Block_byref_object_copy__4;
            v143 = __Block_byref_object_dispose__4;
            v144 = 0;
            v68 = dispatch_semaphore_create(0);
            v69 = qos_class_self();
            dispatch_get_global_queue(v69, 0);
            v70 = objc_claimAutoreleasedReturnValue();
            *(_QWORD *)buf = MEMORY[0x24BDAC760];
            *(_QWORD *)&buf[8] = 3321888768;
            v165 = ___ZN2QPL28visualIdentifiersWithTimeoutEP8NSStringb27QPECRClientEntityFilterTypebNSt3__110shared_ptrINS_19ParserConfigurationEEEPU15__autoreleasingP7NSError_block_invoke;
            v166 = &unk_24DA256C0;
            v171 = v63;
            v172 = v64;
            if (v64)
            {
              v71 = (unint64_t *)&v64->__shared_owners_;
              do
                v72 = __ldxr(v71);
              while (__stxr(v72 + 1, v71));
            }
            v169 = &v145;
            v73 = v67;
            v174 = 256;
            v173 = 1;
            v167 = v73;
            v170 = &v139;
            v74 = v68;
            v168 = v74;
            dispatch_async(v70, buf);

            if (v63[34])
              v75 = -1;
            else
              v75 = dispatch_time(0, 100000000);
            if (dispatch_semaphore_wait(v74, v75))
            {
              v104 = 100;
              objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("ECR timed out after %dms"));
              v76 = (void *)objc_claimAutoreleasedReturnValue();
              v77 = (void *)MEMORY[0x24BDD1540];
              v162 = v105;
              v163 = (uint64_t)v76;
              objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v163, &v162, 1);
              v78 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v77, "errorWithDomain:code:userInfo:", CFSTR("com.apple.QueryParser.QueryUnderstandingError"), -2002, v78);
              v79 = objc_claimAutoreleasedReturnValue();
              v80 = (void *)v140[5];
              v140[5] = (const void *)v79;

            }
            v81 = objc_retainAutorelease((id)v140[5]);
            v117 = *(id *)(*((_QWORD *)&v145 + 1) + 40);

            v82 = v172;
            if (v172)
            {
              v83 = (unint64_t *)&v172->__shared_owners_;
              do
                v84 = __ldaxr(v83);
              while (__stlxr(v84 - 1, v83));
              if (!v84)
              {
                ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                std::__shared_weak_count::__release_weak(v82);
              }
            }

            _Block_object_dispose(&v139, 8);
            _Block_object_dispose(&v145, 8);

            v118 = v81;
            v85 = v132;
            if (!v132)
              goto LABEL_96;
            v86 = (unint64_t *)&v132->__shared_owners_;
            do
              v87 = __ldaxr(v86);
            while (__stlxr(v87 - 1, v86));
            if (!v87)
            {
              ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
              std::__shared_weak_count::__release_weak(v85);
              if (v117)
                goto LABEL_97;
            }
            else
            {
LABEL_96:
              if (v117)
              {
LABEL_97:
                objc_msgSend(v117, "objectForKey:", CFSTR("visualIdentifier"));
                v23 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v117, "objectForKey:", CFSTR("personNames"));
                v24 = (const __CFArray *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v117, "objectForKey:", CFSTR("personEmails"));
                v25 = (const __CFArray *)objc_claimAutoreleasedReturnValue();
                goto LABEL_100;
              }
            }
            v23 = 0;
            v24 = 0;
            v25 = 0;
LABEL_100:
            if (v118)
            {
              if (llmParserLogger(void)::token != -1)
                dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_127);
              v88 = (id)llmParserLogger(void)::log;
              if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                *(_QWORD *)&buf[4] = v118;
                _os_log_error_impl(&dword_218E10000, v88, OS_LOG_TYPE_ERROR, "[QPNLU] Unable to lookup visual identifiers: %@", buf, 0xCu);
              }

              do
                v89 = __ldaxr((unsigned int *)&sQUECRErrorCount);
              while (__stlxr(v89 + 1, (unsigned int *)&sQUECRErrorCount));
              if (v89 == 25)
              {
                if (llmParserLogger(void)::token != -1)
                  dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_127);
                v90 = (id)llmParserLogger(void)::log;
                if (os_log_type_enabled(v90, OS_LOG_TYPE_FAULT))
                  QP::LLMParser::parseInternal(v160, v161, v90);

              }
            }
            else
            {
              v118 = 0;
            }
            goto LABEL_25;
          }
LABEL_114:
          v155[0] = kQPQUParseTypeLLM;
          v154[0] = kQPQUOutputParseTypeKey;
          v154[1] = kQPQUOutputIntentIdsKey;
          v153 = v107;
          objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v153, 1);
          v91 = (void *)objc_claimAutoreleasedReturnValue();
          v155[1] = v91;
          v154[2] = kQPQUOutputIntentLabelsKey;
          v152 = v106;
          objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v152, 1);
          v92 = (void *)objc_claimAutoreleasedReturnValue();
          v155[2] = v92;
          v154[3] = kQPQUOutputIntentScoresKey;
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", 1);
          v93 = (void *)objc_claimAutoreleasedReturnValue();
          v151 = v93;
          objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v151, 1);
          v94 = (void *)objc_claimAutoreleasedReturnValue();
          v155[3] = v94;
          v154[4] = kQPQUOutputIsUnsafeKey;
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", 0);
          v95 = (void *)objc_claimAutoreleasedReturnValue();
          v155[4] = v95;
          v154[5] = kQPQUOutputUnsafeConfidenceScoreKey;
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", 0);
          v96 = (void *)objc_claimAutoreleasedReturnValue();
          v150 = v96;
          objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v150, 1);
          v97 = (void *)objc_claimAutoreleasedReturnValue();
          v155[5] = v97;
          v154[6] = kQPQUOutputTokenInfoKey;
          v98 = (void *)objc_msgSend(v110, "copy");
          v154[7] = CFSTR("debugDescription");
          v155[6] = v98;
          v155[7] = CFSTR("test qu");
          objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v155, v154, 8);
          v99 = objc_claimAutoreleasedReturnValue();

          *(_QWORD *)&v145 = v99;
          v139 = v115;
          v163 = (v135 - (uint64_t)v134) >> 4;
          std::allocate_shared[abi:ne180100]<QP::Parse,std::allocator<QP::Parse>,__CFString const*,unsigned long,long &,std::vector<std::shared_ptr<QP::ParseAttribute>> &,__CFDictionary const*&,void>(&v139, &v163, &Count, &v134, (uint64_t *)&v145, buf);
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)(a1 + 56), (__int128 *)buf);
          v100 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v101 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v102 = __ldaxr(v101);
            while (__stlxr(v102 - 1, v101));
            if (!v102)
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
            }
          }

          *(_QWORD *)buf = &v134;
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);

          std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::destroy((uint64_t)&v137, v138);
        }
        else
        {
          if (llmParserLogger(void)::token != -1)
            dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_127);
          v103 = llmParserLogger(void)::log;
          if (os_log_type_enabled((os_log_t)llmParserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_218E10000, v103, OS_LOG_TYPE_DEFAULT, "[QPNLU][LLMParser] Got empty prediction from ground Truth json file", buf, 2u);
          }
        }
      }
    }
  }
}

void sub_218E4B838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,_Unwind_Exception *exception_objecta,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61;

  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v61 - 208);

  a61 = (uint64_t)&a49;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a61);

  std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::destroy((uint64_t)&a52, (_QWORD *)a53);
  _Unwind_Resume(a1);
}

const void *QP::LLMParser::clear(const void **this)
{
  uint64_t i;
  const void *v3;
  const void *result;
  const void *v5;

  nlp::CFScopedPtr<__CFString const*>::reset(this + 6, 0);
  v3 = this[7];
  for (i = (uint64_t)this[8];
        (const void *)i != v3;
  this[8] = v3;
  v5 = this[10];
  for (result = this[11];
        result != v5;
  this[11] = v5;
  return result;
}

uint64_t QP::LLMParser::getGroundTruthDataRef(QP::LLMParser *this)
{
  unsigned __int8 v1;
  NSObject *v2;
  uint8_t v4[16];

  if ((v1 & 1) == 0
  {
    QP::LLMParser::getGroundTruthDataRef(void)::_groundTruthDataRef = (uint64_t)CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  }
  if (llmParserLogger(void)::token != -1)
    dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_127);
  v2 = llmParserLogger(void)::log;
  if (os_log_type_enabled((os_log_t)llmParserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_218E10000, v2, OS_LOG_TYPE_DEFAULT, "[QPNLU][LLMParser] started loading groundTruth predictions", v4, 2u);
  }
  if (QP::LLMParser::getGroundTruthDataRef(void)::onceToken != -1)
    dispatch_once(&QP::LLMParser::getGroundTruthDataRef(void)::onceToken, &__block_literal_global_86);
  return QP::LLMParser::getGroundTruthDataRef(void)::_groundTruthDataRef;
}

void sub_218E4BD88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN2QP9LLMParser21getGroundTruthDataRefEv_block_invoke()
{
  NSObject *v0;
  void *v1;
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t k;
  void *v21;
  void *v22;
  void *v23;
  int v24;
  void *v25;
  int v26;
  void *v27;
  void *v28;
  NSString *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  NSString *v36;
  void *v37;
  __CFDictionary *v38;
  void *v39;
  NSObject *v40;
  NSObject *v41;
  void *v42;
  void *v43;
  NSObject *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t j;
  void *v56;
  void *v57;
  NSObject *obj;
  id v59;
  void *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  id v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  id v74;
  uint8_t buf[4];
  void *v76;
  _BYTE v77[128];
  _BYTE v78[128];
  _BYTE v79[128];
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDD1488], "bundleWithIdentifier:", CFSTR("com.apple.QueryUnderstanding"));
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v49, "pathForResource:ofType:", CFSTR("groundTruth"), CFSTR("json"));
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  if (llmParserLogger(void)::token != -1)
    dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_127);
  v0 = llmParserLogger(void)::log;
  if (os_log_type_enabled((os_log_t)llmParserLogger(void)::log, OS_LOG_TYPE_DEBUG))
    ___ZN2QP9LLMParser21getGroundTruthDataRefEv_block_invoke_cold_3((uint64_t)v50, v0);
  if (v50)
  {
    v74 = 0;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithContentsOfFile:encoding:error:", v50, 4, &v74);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = v74;
    v47 = v2;
    v48 = v1;
    if (v1)
    {
      if (llmParserLogger(void)::token != -1)
        dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_127);
      v3 = llmParserLogger(void)::log;
      if (os_log_type_enabled((os_log_t)llmParserLogger(void)::log, OS_LOG_TYPE_DEBUG))
        ___ZN2QP9LLMParser21getGroundTruthDataRefEv_block_invoke_cold_2(v3, v4, v5);
      objc_msgSend(v1, "componentsSeparatedByString:", CFSTR("\n"));
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDBCEB8], "array");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      obj = v46;
      v6 = -[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v70, v79, 16);
      if (v6)
      {
        v7 = *(_QWORD *)v71;
        do
        {
          for (i = 0; i != v6; ++i)
          {
            if (*(_QWORD *)v71 != v7)
              objc_enumerationMutation(obj);
            v9 = *(void **)(*((_QWORD *)&v70 + 1) + 8 * i);
            if (objc_msgSend(v9, "length"))
            {
              objc_msgSend(v9, "dataUsingEncoding:", 4);
              v10 = (void *)objc_claimAutoreleasedReturnValue();
              v69 = 0;
              objc_msgSend(MEMORY[0x24BDD1608], "JSONObjectWithData:options:error:", v10, 0, &v69);
              v11 = (void *)objc_claimAutoreleasedReturnValue();
              v12 = v69;
              v13 = v12;
              if (v12)
              {
                objc_msgSend(v12, "localizedDescription");
                v14 = (void *)objc_claimAutoreleasedReturnValue();
                NSLog(CFSTR("Error parsing JSON: %@"), v14);

              }
              else
              {
                objc_msgSend(v57, "addObject:", v11);
              }

            }
          }
          v6 = -[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v70, v79, 16);
        }
        while (v6);
      }

      if (v57)
      {
        if (llmParserLogger(void)::token != -1)
          dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_127);
        v15 = llmParserLogger(void)::log;
        if (os_log_type_enabled((os_log_t)llmParserLogger(void)::log, OS_LOG_TYPE_DEBUG))
          ___ZN2QP9LLMParser21getGroundTruthDataRefEv_block_invoke_cold_1(v15, v16, v17);
        v67 = 0u;
        v68 = 0u;
        v65 = 0u;
        v66 = 0u;
        v51 = v57;
        v54 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v65, v78, 16);
        if (v54)
        {
          v53 = *(_QWORD *)v66;
          do
          {
            for (j = 0; j != v54; ++j)
            {
              if (*(_QWORD *)v66 != v53)
                objc_enumerationMutation(v51);
              v56 = *(void **)(*((_QWORD *)&v65 + 1) + 8 * j);
              objc_msgSend(v56, "objectForKeyedSubscript:", CFSTR("arguments"));
              v52 = (void *)objc_claimAutoreleasedReturnValue();
              v60 = (void *)objc_opt_new();
              v63 = 0u;
              v64 = 0u;
              v61 = 0u;
              v62 = 0u;
              v59 = v52;
              v18 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v61, v77, 16);
              if (v18)
              {
                v19 = *(_QWORD *)v62;
                do
                {
                  for (k = 0; k != v18; ++k)
                  {
                    if (*(_QWORD *)v62 != v19)
                      objc_enumerationMutation(v59);
                    v21 = *(void **)(*((_QWORD *)&v61 + 1) + 8 * k);
                    v22 = (void *)objc_opt_new();
                    objc_msgSend(v21, "objectForKeyedSubscript:", CFSTR("start_char_index"));
                    v23 = (void *)objc_claimAutoreleasedReturnValue();
                    v24 = objc_msgSend(v23, "intValue");

                    objc_msgSend(v21, "objectForKeyedSubscript:", CFSTR("end_char_index"));
                    v25 = (void *)objc_claimAutoreleasedReturnValue();
                    v26 = objc_msgSend(v25, "intValue");

                    objc_msgSend(v21, "objectForKeyedSubscript:", CFSTR("label"));
                    v27 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v22, "setValue:forKey:", v27, CFSTR("textLabel"));

                    v28 = (void *)MEMORY[0x24BDD16E0];
                    objc_msgSend(v21, "objectForKeyedSubscript:", CFSTR("label"));
                    v29 = (NSString *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v28, "numberWithInteger:", getEnumValueFromIntentArgString(v29));
                    v30 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v22, "setValue:forKey:", v30, CFSTR("textLabelId"));

                    objc_msgSend(v21, "objectForKeyedSubscript:", CFSTR("text"));
                    v31 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v22, "setValue:forKey:", v31, CFSTR("text"));

                    objc_msgSend(MEMORY[0x24BDD1968], "valueWithRange:", v24, v26 - (uint64_t)v24);
                    v32 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v22, "setValue:forKey:", v32, CFSTR("textRange"));

                    objc_msgSend(v60, "addObject:", v22);
                  }
                  v18 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v61, v77, 16);
                }
                while (v18);
              }

              v33 = (void *)objc_opt_new();
              objc_msgSend(v56, "objectForKeyedSubscript:", CFSTR("intent"));
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v33, "setValue:forKey:", v34, CFSTR("intentLabel"));

              v35 = (void *)MEMORY[0x24BDD16E0];
              objc_msgSend(v56, "objectForKeyedSubscript:", CFSTR("intent"));
              v36 = (NSString *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v35, "numberWithInteger:", getEnumValueFromIntentString(v36));
              v37 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v33, "setValue:forKey:", v37, CFSTR("intentLabelId"));

              objc_msgSend(v33, "setValue:forKey:", v60, CFSTR("arguments"));
              v38 = (__CFDictionary *)QP::LLMParser::getGroundTruthDataRef(void)::_groundTruthDataRef;
              objc_msgSend(v56, "objectForKeyedSubscript:", CFSTR("query"));
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              CFDictionarySetValue(v38, v39, v33);

            }
            v54 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v65, v78, 16);
          }
          while (v54);
        }

        if (llmParserLogger(void)::token != -1)
          dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_127);
        v40 = llmParserLogger(void)::log;
        if (os_log_type_enabled((os_log_t)llmParserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_218E10000, v40, OS_LOG_TYPE_DEFAULT, "[QPNLU][LLMParser] sucessfully loaded groundTruth predictions and parsed them to jsonObjects", buf, 2u);
        }
      }
      else
      {
        if (llmParserLogger(void)::token != -1)
          dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_127);
        v44 = (id)llmParserLogger(void)::log;
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend(v47, "localizedDescription");
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v76 = v45;
          _os_log_impl(&dword_218E10000, v44, OS_LOG_TYPE_DEFAULT, "[QPNLU] Error parsing JSON data for ground truth: %@", buf, 0xCu);

        }
      }

    }
    else
    {
      v42 = v2;
      if (llmParserLogger(void)::token != -1)
        dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_127);
      obj = (id)llmParserLogger(void)::log;
      if (os_log_type_enabled(obj, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend(v42, "localizedDescription");
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v76 = v43;
        _os_log_impl(&dword_218E10000, obj, OS_LOG_TYPE_DEFAULT, "[QPNLU] Failed to load ground truth JSON file: %@", buf, 0xCu);

      }
    }

  }
  else
  {
    if (llmParserLogger(void)::token != -1)
      dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_127);
    v41 = llmParserLogger(void)::log;
    if (os_log_type_enabled((os_log_t)llmParserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v76 = v49;
      _os_log_impl(&dword_218E10000, v41, OS_LOG_TYPE_DEFAULT, "[QPNLU] Failed to load file from bundle:%@", buf, 0xCu);
    }
  }

}

void sub_218E4C67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  void *v21;

  _Unwind_Resume(a1);
}

std::string *std::pair<std::vector<std::string>,std::vector<std::pair<double,double>>>::pair[abi:ne180100]<std::vector<std::string>&,std::vector<std::pair<double,double>>&,0>(std::string *a1, __int128 **a2, __int128 **a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  a1[1].__r_.__value_.__r.__words[0] = 0;
  a1[1].__r_.__value_.__l.__size_ = 0;
  a1[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::pair<double,double>>::__init_with_size[abi:ne180100]<std::pair<double,double>*,std::pair<double,double>*>((char *)&a1[1], *a3, a3[1], a3[1] - *a3);
  return a1;
}

void sub_218E4C89C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<double,double>>::__init_with_size[abi:ne180100]<std::pair<double,double>*,std::pair<double,double>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_218E4C908(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange,int,int,void>@<X0>(_OWORD *a1@<X1>, __int128 *a2@<X2>, int *a3@<X3>, int *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xA8uLL);
  result = std::__shared_ptr_emplace<QP::ParseAttribute>::__shared_ptr_emplace[abi:ne180100]<CFRange &,CFRange,int,int,std::allocator<QP::ParseAttribute>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_218E4C988(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<QP::ParseAttribute>::__shared_ptr_emplace[abi:ne180100]<CFRange &,CFRange,int,int,std::allocator<QP::ParseAttribute>,0>(_QWORD *a1, _OWORD *a2, __int128 *a3, int *a4, int *a5)
{
  a1[2] = 0;
  *a1 = &unk_24DA24D38;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<QP::ParseAttribute,CFRange,CFRange&,int,int,QP::ParseAttribute*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_218E4C9D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::shared_ptr<QP::ParseAttribute>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::ParseAttribute>*>,std::__wrap_iter<std::shared_ptr<QP::ParseAttribute>*>>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD v33[5];

  v5 = (_QWORD *)a2;
  if (a5 < 1)
    return v5;
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    v13 = *a1;
    v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
    if (v14 >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v15 = (a2 - v13) >> 4;
    v16 = v10 - v13;
    if (v16 >> 3 > v14)
      v14 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v33[4] = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(v9, v17);
    else
      v18 = 0;
    v26 = (uint64_t *)&v18[16 * v15];
    v33[0] = v18;
    v33[1] = v26;
    v33[3] = &v18[16 * v17];
    v27 = &v26[2 * a5];
    do
    {
      *v26 = *a3;
      v28 = a3[1];
      v26[1] = v28;
      if (v28)
      {
        v29 = (unint64_t *)(v28 + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v26 += 2;
      a3 += 2;
    }
    while (v26 != v27);
    v33[2] = v27;
    v5 = (_QWORD *)std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__swap_out_circular_buffer(a1, v33, v5);
    std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer((uint64_t)v33);
    return v5;
  }
  v19 = (uint64_t)(v12 - a2) >> 4;
  if (v19 >= a5)
  {
    v20 = &a3[2 * a5];
LABEL_29:
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__move_range((uint64_t)a1, a2, v12, (char *)(a2 + 16 * a5));
    if (v20 != a3)
    {
      v31 = v5;
      do
      {
        std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](v31, a3);
        a3 += 2;
        v31 += 2;
      }
      while (a3 != v20);
    }
    return v5;
  }
  v20 = &a3[2 * v19];
  if (v20 == a4)
  {
    v22 = *(uint64_t **)(v9 - 8);
  }
  else
  {
    v21 = &a3[2 * v19];
    v22 = *(uint64_t **)(v9 - 8);
    do
    {
      *v22 = *v21;
      v23 = v21[1];
      v22[1] = v23;
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v21 += 2;
      v22 += 2;
    }
    while (v21 != a4);
  }
  a1[1] = (uint64_t)v22;
  if ((uint64_t)(v12 - a2) >= 1)
    goto LABEL_29;
  return v5;
}

void sub_218E4CBC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL std::string_view::ends_with[abi:ne180100](_QWORD *a1, void *__s2, size_t a3)
{
  size_t v3;

  v3 = a1[1];
  return v3 >= a3
      && std::string_view::compare[abi:ne180100](a1, v3 - a3, 0xFFFFFFFFFFFFFFFFLL, __s2, a3) == 0;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  unint64_t v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = __n;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  std::string::size_type v4;

  v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

void ___ZL15llmParserLoggerv_block_invoke()
{
  const char *v0;
  os_log_t v1;
  void *v2;

  v0 = _nlpLoggingSubsystem();
  v1 = os_log_create(v0, "LLMParser");
  v2 = (void *)llmParserLogger(void)::log;
  llmParserLogger(void)::log = (uint64_t)v1;

}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

void ___ZN2QPL28visualIdentifiersWithTimeoutEP8NSStringb27QPECRClientEntityFilterTypebNSt3__110shared_ptrINS_19ParserConfigurationEEEPU15__autoreleasingP7NSError_block_invoke(uint64_t a1)
{
  __objc2_class **v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 64) + 55))
    v2 = off_24DA23458;
  else
    v2 = &off_24DA23460;
  -[__objc2_class sharedClient](*v2, "sharedClient");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(unsigned __int8 *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 64) + 57);
  v8 = *(unsigned __int8 *)(a1 + 89);
  v16 = 0;
  objc_msgSend(v3, "visualIdentifiersWithText:allowPrefixSearch:entityFilterType:includeInferredNames:allowGroundingToNamesAndEmails:error:", v4, v5, v6, v7, v8, &v16);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v16;
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v9;

  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v14 = *(void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = v10;
  v15 = v10;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_218E4CE24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_64c52_ZTSNSt3__110shared_ptrIN2QP19ParserConfigurationEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 72) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_64c52_ZTSNSt3__110shared_ptrIN2QP19ParserConfigurationEEE(uint64_t a1)
{
  return std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](a1 + 64);
}

void nlp::CFScopedPtr<__CFDate const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

std::string *std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const*&,CFRange &,void>@<X0>(char **a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  std::string *v6;
  std::string *result;

  v6 = (std::string *)operator new(0x90uLL);
  result = std::__shared_ptr_emplace<QP::Lexeme>::__shared_ptr_emplace[abi:ne180100]<char const*&,CFRange &,std::allocator<QP::Lexeme>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_218E4CEE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::Lexeme>::__shared_ptr_emplace[abi:ne180100]<char const*&,CFRange &,std::allocator<QP::Lexeme>,0>(std::string *a1, char **a2, uint64_t a3)
{
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24DA255A8;
  a1->__r_.__value_.__l.__size_ = 0;
  std::construct_at[abi:ne180100]<QP::Lexeme,char const*&,CFRange &,QP::Lexeme*>(a1 + 1, a2, a3);
  return a1;
}

void sub_218E4CF2C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<QP::Lexeme,char const*&,CFRange &,QP::Lexeme*>(std::string *a1, char **a2, uint64_t a3)
{
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, *a2);
  QP::Lexeme::Lexeme(a1, (__int128 *)__p, *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
  if (v7 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_218E4CF98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange &,int,int,void>@<X0>(_OWORD *a1@<X1>, __int128 *a2@<X2>, int *a3@<X3>, int *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xA8uLL);
  result = std::__shared_ptr_emplace<QP::ParseAttribute>::__shared_ptr_emplace[abi:ne180100]<CFRange &,CFRange &,int,int,std::allocator<QP::ParseAttribute>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_218E4D018(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<QP::ParseAttribute>::__shared_ptr_emplace[abi:ne180100]<CFRange &,CFRange &,int,int,std::allocator<QP::ParseAttribute>,0>(_QWORD *a1, _OWORD *a2, __int128 *a3, int *a4, int *a5)
{
  a1[2] = 0;
  *a1 = &unk_24DA24D38;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<QP::ParseAttribute,CFRange,CFRange&,int,int,QP::ParseAttribute*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_218E4D064(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

std::string *std::allocate_shared[abi:ne180100]<QP::LexemeValue,std::allocator<QP::LexemeValue>,std::string &,std::string,CFRange &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  std::string *v8;
  std::string *result;

  v8 = (std::string *)operator new(0xA8uLL);
  result = std::__shared_ptr_emplace<QP::LexemeValue>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string,CFRange &,std::allocator<QP::LexemeValue>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_218E4D0D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::LexemeValue>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string,CFRange &,std::allocator<QP::LexemeValue>,0>(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24DA25700;
  a1->__r_.__value_.__l.__size_ = 0;
  std::construct_at[abi:ne180100]<QP::LexemeValue,std::string &,std::string,CFRange &,QP::LexemeValue*>(a1 + 1, a2, a3, a4);
  return a1;
}

void sub_218E4D120(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::LexemeValue>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA25700;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::LexemeValue>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA25700;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A24D0CLL);
}

void std::__shared_ptr_emplace<QP::LexemeValue>::__on_zero_shared(uint64_t a1)
{
  std::__destroy_at[abi:ne180100]<QP::LexemeQuotedText,0>((void **)(a1 + 24));
}

std::string *std::construct_at[abi:ne180100]<QP::LexemeValue,std::string &,std::string,CFRange &,QP::LexemeValue*>(std::string *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *__p[2];
  uint64_t v9;
  std::string v10;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v10 = *(std::string *)a2;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v9 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  QP::LexemeValue::LexemeValue(this, (uint64_t)&v10, (__int128 *)__p, *(_QWORD *)a4, *(_QWORD *)(a4 + 8));
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  return this;
}

void sub_218E4D238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  std::construct_at[abi:ne180100]<QP::LexemeValue,std::string &,std::string,CFRange &,QP::LexemeValue*>((uint64_t)&a16);
  _Unwind_Resume(a1);
}

std::string *QP::LexemeValue::LexemeValue(std::string *this, uint64_t a2, __int128 *a3, uint64_t a4, std::string::size_type a5)
{
  std::string *v9;
  __int128 v10;
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  QP::Lexeme::Lexeme(this, (__int128 *)&__p, a4, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = this + 5;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    this[5].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  return this;
}

void sub_218E4D310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void **v14;

  QP::Lexeme::~Lexeme(v14);
  _Unwind_Resume(a1);
}

std::string *std::allocate_shared[abi:ne180100]<QP::LexemeGroundedPerson,std::allocator<QP::LexemeGroundedPerson>,std::string &,std::vector<std::string> &,std::vector<std::pair<double,double>> &,CFRange &,void>@<X0>(uint64_t a1@<X1>, __int128 **a2@<X2>, __int128 **a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  std::string *v10;
  std::string *result;

  v10 = (std::string *)operator new(0xC0uLL);
  result = std::__shared_ptr_emplace<QP::LexemeGroundedPerson>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::vector<std::string> &,std::vector<std::pair<double,double>> &,CFRange &,std::allocator<QP::LexemeGroundedPerson>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 1;
  a5[1] = v10;
  return result;
}

void sub_218E4D3A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::LexemeGroundedPerson>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::vector<std::string> &,std::vector<std::pair<double,double>> &,CFRange &,std::allocator<QP::LexemeGroundedPerson>,0>(std::string *a1, uint64_t a2, __int128 **a3, __int128 **a4, uint64_t a5)
{
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24DA25750;
  a1->__r_.__value_.__l.__size_ = 0;
  std::construct_at[abi:ne180100]<QP::LexemeGroundedPerson,std::string &,std::vector<std::string> &,std::vector<std::pair<double,double>> &,CFRange &,QP::LexemeGroundedPerson*>(a1 + 1, a2, a3, a4, a5);
  return a1;
}

void sub_218E4D3EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::LexemeGroundedPerson>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA25750;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::LexemeGroundedPerson>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA25750;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A24D0CLL);
}

void std::__shared_ptr_emplace<QP::LexemeGroundedPerson>::__on_zero_shared(uint64_t a1)
{
  std::__destroy_at[abi:ne180100]<QP::LexemeGroundedPerson,0>(a1 + 24);
}

std::string *std::construct_at[abi:ne180100]<QP::LexemeGroundedPerson,std::string &,std::vector<std::string> &,std::vector<std::pair<double,double>> &,CFRange &,QP::LexemeGroundedPerson*>(std::string *a1, uint64_t a2, __int128 **a3, __int128 **a4, uint64_t a5)
{
  void *__p;
  void *v11;
  uint64_t v12;
  std::string v13;
  std::string v14;
  std::string *v15;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v14 = *(std::string *)a2;
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<std::pair<double,double>>::__init_with_size[abi:ne180100]<std::pair<double,double>*,std::pair<double,double>*>((char *)&__p, *a4, a4[1], a4[1] - *a4);
  QP::LexemeGroundedPerson::LexemeGroundedPerson(a1, (uint64_t)&v14, (__int128 **)&v13, (__int128 **)&__p, *(_QWORD *)a5, *(_QWORD *)(a5 + 8));
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  v15 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_218E4D548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (__p)
    operator delete(__p);
  *(_QWORD *)(v20 - 40) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

std::string *QP::LexemeGroundedPerson::LexemeGroundedPerson(std::string *this, uint64_t a2, __int128 **a3, __int128 **a4, uint64_t a5, std::string::size_type a6)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  QP::Lexeme::Lexeme(this, (__int128 *)&__p, a5, a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  this[5].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 5, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  this[6].__r_.__value_.__r.__words[0] = 0;
  this[6].__r_.__value_.__l.__size_ = 0;
  this[6].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::pair<double,double>>::__init_with_size[abi:ne180100]<std::pair<double,double>*,std::pair<double,double>*>((char *)&this[6], *a4, a4[1], a4[1] - *a4);
  return this;
}

void sub_218E4D674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  void **v15;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  QP::Lexeme::~Lexeme(v15);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<QP::LexemeGroundedPerson,0>(uint64_t a1)
{
  void *v2;
  void **v3;

  v2 = *(void **)(a1 + 144);
  if (v2)
  {
    *(_QWORD *)(a1 + 152) = v2;
    operator delete(v2);
  }
  v3 = (void **)(a1 + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  QP::Lexeme::~Lexeme((void **)a1);
}

std::string *std::allocate_shared[abi:ne180100]<QP::LexemeStatus,std::allocator<QP::LexemeStatus>,std::string &,char const*&,CFRange &,void>@<X0>(uint64_t a1@<X1>, char **a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  std::string *v8;
  std::string *result;

  v8 = (std::string *)operator new(0xA8uLL);
  result = std::__shared_ptr_emplace<QP::LexemeStatus>::__shared_ptr_emplace[abi:ne180100]<std::string &,char const*&,CFRange &,std::allocator<QP::LexemeStatus>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_218E4D75C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::LexemeStatus>::__shared_ptr_emplace[abi:ne180100]<std::string &,char const*&,CFRange &,std::allocator<QP::LexemeStatus>,0>(std::string *a1, uint64_t a2, char **a3, uint64_t a4)
{
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24DA257A0;
  a1->__r_.__value_.__l.__size_ = 0;
  std::construct_at[abi:ne180100]<QP::LexemeStatus,std::string &,char const*&,CFRange &,QP::LexemeStatus*>(a1 + 1, a2, a3, a4);
  return a1;
}

void sub_218E4D7A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::LexemeStatus>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA257A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::LexemeStatus>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA257A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A24D0CLL);
}

void std::__shared_ptr_emplace<QP::LexemeStatus>::__on_zero_shared(uint64_t a1)
{
  std::__destroy_at[abi:ne180100]<QP::LexemeQuotedText,0>((void **)(a1 + 24));
}

std::string *std::construct_at[abi:ne180100]<QP::LexemeStatus,std::string &,char const*&,CFRange &,QP::LexemeStatus*>(std::string *a1, uint64_t a2, char **a3, uint64_t a4)
{
  void *__p[2];
  char v9;
  std::string v10;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v10 = *(std::string *)a2;
  std::string::basic_string[abi:ne180100]<0>(__p, *a3);
  QP::LexemeStatus::LexemeStatus(a1, (uint64_t)&v10, (__int128 *)__p, *(_QWORD *)a4, *(_QWORD *)(a4 + 8));
  if (v9 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  return a1;
}

void sub_218E4D8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

std::string *QP::LexemeStatus::LexemeStatus(std::string *this, uint64_t a2, __int128 *a3, uint64_t a4, std::string::size_type a5)
{
  std::string *v9;
  __int128 v10;
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  QP::Lexeme::Lexeme(this, (__int128 *)&__p, a4, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = this + 5;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    this[5].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  return this;
}

void sub_218E4D99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void **v14;

  QP::Lexeme::~Lexeme(v14);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::map<std::string,std::set<std::string>>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::map<std::string,std::set<std::string>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__tree_node<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_218E4DA04(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::map<std::string,std::set<std::string>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__tree_node<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  void **v4;
  uint64_t **v5;
  uint64_t v6;
  void **v7;
  void **v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t)(result + 1);
    do
    {
      result = std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::map<std::string,std::set<std::string>>> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (void **)v4[2];
          v9 = *v8 == v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::map<std::string,std::set<std::string>>> const&>(uint64_t **a1, uint64_t a2, void **a3, __int128 *a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  void **v12;

  v6 = std::__tree<std::string>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__construct_node<std::pair<std::string const,std::map<std::string,std::set<std::string>>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__construct_node<std::pair<std::string const,std::map<std::string,std::set<std::string>>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::map<std::string,std::set<std::string>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_218E4DB84(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::map<std::string,std::set<std::string>>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::map<std::string,std::set<std::string>>::map[abi:ne180100]((uint64_t *)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_218E4DBF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::string,std::set<std::string>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::set<std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::set<std::string>>,std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_218E4DC4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::set<std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::set<std::string>>,std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  void **v4;
  uint64_t **v5;
  uint64_t v6;
  void **v7;
  void **v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t)(result + 1);
    do
    {
      result = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::set<std::string>> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (void **)v4[2];
          v9 = *v8 == v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::set<std::string>> const&>(uint64_t **a1, uint64_t a2, void **a3, __int128 *a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  void **v12;

  v6 = std::__tree<std::string>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__construct_node<std::pair<std::string const,std::set<std::string>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__construct_node<std::pair<std::string const,std::set<std::string>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::set<std::string>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_218E4DDCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::set<std::string>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_218E4DE3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<QP::Parse,std::allocator<QP::Parse>,__CFString const*,unsigned long,long &,std::vector<std::shared_ptr<QP::ParseAttribute>> &,__CFDictionary const*&,void>@<X0>(const void **a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, _QWORD **a4@<X4>, uint64_t *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  _QWORD *result;

  v12 = operator new(0x78uLL);
  result = std::__shared_ptr_emplace<QP::Parse>::__shared_ptr_emplace[abi:ne180100]<__CFString const*,unsigned long,long &,std::vector<std::shared_ptr<QP::ParseAttribute>> &,__CFDictionary const*&,std::allocator<QP::Parse>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_218E4DECC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<QP::Parse>::__shared_ptr_emplace[abi:ne180100]<__CFString const*,unsigned long,long &,std::vector<std::shared_ptr<QP::ParseAttribute>> &,__CFDictionary const*&,std::allocator<QP::Parse>,0>(_QWORD *a1, const void **a2, uint64_t *a3, uint64_t *a4, _QWORD **a5, uint64_t *a6)
{
  a1[2] = 0;
  *a1 = &unk_24DA24DC8;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<QP::Parse,__CFString const*,unsigned long,long &,std::vector<std::shared_ptr<QP::ParseAttribute>> &,__CFDictionary const*&,QP::Parse*>((uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_218E4DF18(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<QP::Parse,__CFString const*,unsigned long,long &,std::vector<std::shared_ptr<QP::ParseAttribute>> &,__CFDictionary const*&,QP::Parse*>(uint64_t a1, const void **a2, uint64_t *a3, uint64_t *a4, _QWORD **a5, uint64_t *a6)
{
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12[3];
  void **v13;

  v8 = *a2;
  v9 = *a3;
  v10 = *a4;
  memset(v12, 0, sizeof(v12));
  std::vector<std::shared_ptr<QP::ParseAttribute>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>((char *)v12, *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  QP::Parse::Parse(a1, v8, v9, v10, v12, *a6, 0);
  v13 = (void **)v12;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v13);
  return a1;
}

void sub_218E4DFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t QP::DateFormatter::DateFormatter(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  CFDateFormatterRef ISO8601Formatter;

  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a3[1];
  *(_QWORD *)(a1 + 16) = *a3;
  *(_QWORD *)(a1 + 24) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  ISO8601Formatter = CFDateFormatterCreateISO8601Formatter((CFAllocatorRef)*MEMORY[0x24BDBD240], 0x333uLL);
  nlp::CFScopedPtr<__CFDateFormatter *>::reset((const void **)(a1 + 32), ISO8601Formatter);
  QP::DateFormatter::update((const void **)a1);
  return a1;
}

void sub_218E4E080(_Unwind_Exception *a1)
{
  const void **v1;
  uint64_t v2;
  const void **v3;

  nlp::CFScopedPtr<__CFDictionary const*>::reset(v1 + 7, 0);
  nlp::CFScopedPtr<__CFDateFormatter *>::reset(v1 + 6, 0);
  nlp::CFScopedPtr<__CFDateFormatter *>::reset(v1 + 5, 0);
  nlp::CFScopedPtr<__CFDateFormatter *>::reset(v3, 0);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  _Unwind_Resume(a1);
}

void QP::DateFormatter::update(const void **this)
{
  const __CFLocale *v1;
  const void **v3;
  const __CFAllocator *v4;
  CFDateFormatterRef v5;
  CFDateFormatterRef v6;

  if (*this)
  {
    v1 = (const __CFLocale *)*((_QWORD *)*this + 13);
    if (v1)
    {
      v3 = this + 6;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = CFDateFormatterCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v1, kCFDateFormatterShortStyle, kCFDateFormatterShortStyle);
      nlp::CFScopedPtr<__CFDateFormatter *>::reset(v3, v5);
      v6 = CFDateFormatterCreate(v4, *((CFLocaleRef *)*this + 13), kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
      nlp::CFScopedPtr<__CFDateFormatter *>::reset(this + 5, v6);
    }
  }
}

BOOL QP::DateFormatter::loadDateFormatterResource(QP::DateFormatter *this, const __CFURL *a2)
{
  return a2 != 0;
}

void QP::DateFormatter::clearResources(const void **this)
{
  nlp::CFScopedPtr<__CFDictionary const*>::reset(this + 7, 0);
}

CFStringRef QP::DateFormatter::copyWeekdayDisplayForDate(CFDateFormatterRef *a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  const __CFAllocator *v7;
  const __CFDate *v8;
  __CFCalendar *v9;
  CFDateRef v10;
  const __CFString *CFStringFromString;
  const __CFString *DateFormatFromTemplate;
  CFStringRef StringWithDate;
  __CFDateFormatter *v14;
  std::string __p;
  const __CFDate *v17;
  CFAbsoluteTime AbsoluteTime;
  __int128 v19;
  int v20[4];
  __int128 v21;
  int v22;
  _OWORD v23[2];
  __int128 v24;
  int v25;

  v3 = *(_OWORD *)(*(_QWORD *)a2 + 20);
  v4 = *(_OWORD *)(*(_QWORD *)a2 + 36);
  v5 = *(_OWORD *)(*(_QWORD *)a2 + 52);
  v25 = *(_DWORD *)(*(_QWORD *)a2 + 68);
  v23[1] = v4;
  v24 = v5;
  v23[0] = v3;
  if ((QP::DateComponents::isEmpty((QP::DateComponents *)v23) & 1) != 0 || (v24 & 0x80000000) != 0)
    return 0;
  *(_QWORD *)&v6 = -1;
  *((_QWORD *)&v6 + 1) = -1;
  *(_OWORD *)v20 = v6;
  v21 = v6;
  v19 = v6;
  v22 = -1;
  LODWORD(v21) = v24;
  AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v19, *((__CFCalendar **)*a1 + 10), *((const __CFDate **)*a1 + 9));
  v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v8 = CFDateCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], AbsoluteTime);
  v17 = v8;
  v9 = (__CFCalendar *)*((_QWORD *)*a1 + 11);
  if (v9)
  {
    AbsoluteTime = convertAbsoluteTime(*((__CFCalendar **)*a1 + 10), v9, v8, v20[0]);
    v10 = CFDateCreate(v7, AbsoluteTime);
    if (v8)
      CFRelease(v8);
    v17 = v10;
    v8 = v10;
  }
  QP::DateComponents::getShortFormatWithOptions((QP::DateComponents *)&v19, 0, &__p);
  CFStringFromString = QP::createCFStringFromString((uint64_t)&__p);
  DateFormatFromTemplate = CFDateFormatterCreateDateFormatFromTemplate(0, CFStringFromString, 0, *((CFLocaleRef *)*a1 + 13));
  StringWithDate = 0;
  v14 = a1[6];
  if (v14 && v8)
  {
    CFDateFormatterSetFormat(v14, DateFormatFromTemplate);
    StringWithDate = CFDateFormatterCreateStringWithDate(v7, a1[6], v8);
  }
  if (DateFormatFromTemplate)
    CFRelease(DateFormatFromTemplate);
  if (CFStringFromString)
    CFRelease(CFStringFromString);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v8)
      return StringWithDate;
    goto LABEL_19;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v8)
LABEL_19:
    CFRelease(v8);
  return StringWithDate;
}

void sub_218E4E344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, const void *a18)
{
  nlp::CFScopedPtr<__CFString const*>::reset(&a10, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a11, 0);
  if (a17 < 0)
    operator delete(__p);
  nlp::CFScopedPtr<__CFDate const*>::reset(&a18, 0);
  _Unwind_Resume(a1);
}

uint64_t QP::DateComponents::isEmpty(QP::DateComponents *this)
{
  if (!QP::DateComponents::hasDate(this)
    && (*((_DWORD *)this + 2) & 0x80000000) != 0
    && (*((_DWORD *)this + 1) & 0x80000000) != 0
    && (*(_DWORD *)this & 0x80000000) != 0)
  {
    return *((_DWORD *)this + 7) >> 31;
  }
  else
  {
    return 0;
  }
}

CFStringRef QP::DateFormatter::copyDateDisplayForDate(CFDateFormatterRef *a1, uint64_t *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  CFStringRef StringWithDate;
  const __CFAllocator *v8;
  const __CFDate *v9;
  __CFCalendar **v10;
  __CFCalendar *v11;
  CFDateRef v12;
  char v13;
  const __CFString *CFStringFromString;
  const __CFString *DateFormatFromTemplate;
  __CFDateFormatter *v16;
  std::string __p;
  const __CFDate *v18;
  CFAbsoluteTime AbsoluteTime;
  __int128 v20;
  int v21[4];
  _BYTE v22[20];

  v3 = *a2;
  v4 = *(_OWORD *)(*a2 + 20);
  v5 = *(_OWORD *)(*a2 + 52);
  *(_OWORD *)v21 = *(_OWORD *)(*a2 + 36);
  *(_OWORD *)v22 = v5;
  *(_DWORD *)&v22[16] = *(_DWORD *)(v3 + 68);
  v20 = v4;
  if ((QP::DateComponents::isEmpty((QP::DateComponents *)&v20) & 1) != 0)
    return 0;
  *(_QWORD *)&v20 = -1;
  *(_QWORD *)&v22[12] = -1;
  DWORD2(v20) = -1;
  v21[1] = -1;
  if ((QP::DateComponents::isEmpty((QP::DateComponents *)&v20) & 1) != 0)
    return 0;
  AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v20, *((__CFCalendar **)*a1 + 10), *((const __CFDate **)*a1 + 9));
  v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v9 = CFDateCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], AbsoluteTime);
  v18 = v9;
  v10 = (__CFCalendar **)*a1;
  v11 = (__CFCalendar *)*((_QWORD *)*a1 + 11);
  if (v11)
  {
    AbsoluteTime = convertAbsoluteTime(v10[10], v11, v9, v21[0]);
    v12 = CFDateCreate(v8, AbsoluteTime);
    if (v9)
      CFRelease(v9);
    v18 = v12;
    v10 = (__CFCalendar **)*a1;
    v9 = v12;
  }
  v13 = QP::ParserConfiguration::useEra((QP::ParserConfiguration *)v10);
  QP::DateComponents::getShortFormatWithOptions((QP::DateComponents *)&v20, v13, &__p);
  CFStringFromString = QP::createCFStringFromString((uint64_t)&__p);
  DateFormatFromTemplate = CFDateFormatterCreateDateFormatFromTemplate(0, CFStringFromString, 0, *((CFLocaleRef *)*a1 + 13));
  StringWithDate = 0;
  v16 = a1[6];
  if (v16 && v9)
  {
    CFDateFormatterSetFormat(v16, DateFormatFromTemplate);
    StringWithDate = CFDateFormatterCreateStringWithDate(v8, a1[6], v9);
  }
  if (DateFormatFromTemplate)
    CFRelease(DateFormatFromTemplate);
  if (CFStringFromString)
    CFRelease(CFStringFromString);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v9)
    CFRelease(v9);
  return StringWithDate;
}

void sub_218E4E5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, const void *a18)
{
  nlp::CFScopedPtr<__CFString const*>::reset(&a10, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a11, 0);
  if (a17 < 0)
    operator delete(__p);
  nlp::CFScopedPtr<__CFDate const*>::reset(&a18, 0);
  _Unwind_Resume(a1);
}

void QP::DateComponents::getShortFormatWithOptions(QP::DateComponents *this@<X0>, char a2@<W1>, std::string *a3@<X8>)
{
  uint64_t *v7;
  __int128 v8;
  _QWORD v9[5];
  char v10;
  _QWORD v11[5];
  char v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  __n128 (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  void *__p;
  uint64_t v19;
  uint64_t v20;

  if (QP::DateComponents::isTime(this))
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "hma");
    return;
  }
  if ((*((_DWORD *)this + 11) & 0x80000000) != 0
    && (*((_DWORD *)this + 10) & 0x80000000) != 0
    && (*((_DWORD *)this + 9) & 0x80000000) != 0
    && (*((_DWORD *)this + 12) & 0x80000000) != 0)
  {
    v13 = 0;
    v14 = &v13;
    v15 = 0x4002000000;
    v16 = __Block_byref_object_copy__5;
    v17 = __Block_byref_object_dispose__5;
    v19 = 0;
    v20 = 0;
    __p = 0;
    v11[0] = MEMORY[0x24BDAC760];
    v11[1] = 0x40000000;
    v11[2] = ___ZNK2QP14DateComponents25getShortFormatWithOptionsEbPd_block_invoke;
    v11[3] = &unk_24DA257E8;
    v11[4] = &v13;
    v12 = a2;
    QP::DateComponents::enumerate((unsigned int *)this, (uint64_t)v11);
    v7 = v14;
    if ((*((char *)v14 + 63) & 0x80000000) == 0)
      goto LABEL_8;
    std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v14[5], v14[6]);
  }
  else
  {
    v13 = 0;
    v14 = &v13;
    v15 = 0x4002000000;
    v16 = __Block_byref_object_copy__5;
    v17 = __Block_byref_object_dispose__5;
    v19 = 0;
    v20 = 0;
    __p = 0;
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 0x40000000;
    v9[2] = ___ZNK2QP14DateComponents25getShortFormatWithOptionsEbPd_block_invoke_2;
    v9[3] = &unk_24DA25810;
    v9[4] = &v13;
    v10 = a2;
    QP::DateComponents::enumerate((unsigned int *)this, (uint64_t)v9);
    v7 = v14;
    if ((*((char *)v14 + 63) & 0x80000000) == 0)
    {
LABEL_8:
      v8 = *(_OWORD *)(v7 + 5);
      a3->__r_.__value_.__r.__words[2] = v7[7];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v8;
      goto LABEL_10;
    }
    std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v14[5], v14[6]);
  }
LABEL_10:
  _Block_object_dispose(&v13, 8);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
}

void sub_218E4E7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  _Block_object_dispose(&a21, 8);
  if (a31 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

CFStringRef QP::DateFormatter::copyTimeDisplayForDate(CFDateFormatterRef *a1, uint64_t *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  int32x4_t v6;
  int32x4_t v7;
  const __CFAllocator *v8;
  const __CFDate *v9;
  __CFCalendar *v10;
  CFDateRef v11;
  const __CFString *CFStringFromString;
  const __CFString *DateFormatFromTemplate;
  CFStringRef StringWithDate;
  __CFDateFormatter *v15;
  std::string __p;
  const __CFDate *v18;
  CFAbsoluteTime AbsoluteTime;
  _DWORD v20[3];
  int v21[4];
  int32x4_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;

  v3 = *a2;
  v4 = *(_OWORD *)(*a2 + 20);
  v5 = *(_OWORD *)(*a2 + 52);
  v25 = *(_OWORD *)(*a2 + 36);
  v26 = v5;
  v27 = *(_DWORD *)(v3 + 68);
  v24 = v4;
  if ((QP::DateComponents::isEmpty((QP::DateComponents *)&v24) & 1) != 0)
    return 0;
  v6.i64[0] = *(_QWORD *)((char *)&v24 + 4);
  v6.i64[1] = __PAIR64__(HIDWORD(v25), v24);
  v7.i64[0] = -1;
  v7.i64[1] = -1;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32(v6, v7))) & 1) == 0)
    return 0;
  v22 = v7;
  v23 = -1;
  *(int32x4_t *)v21 = v7;
  v20[0] = v24;
  v20[1] = v24;
  v20[2] = DWORD2(v24);
  v22.i32[0] = HIDWORD(v25);
  AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)v20, *((__CFCalendar **)*a1 + 10), *((const __CFDate **)*a1 + 9));
  v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v9 = CFDateCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], AbsoluteTime);
  v18 = v9;
  v10 = (__CFCalendar *)*((_QWORD *)*a1 + 11);
  if (v10)
  {
    AbsoluteTime = convertAbsoluteTime(*((__CFCalendar **)*a1 + 10), v10, v9, v21[1]);
    v11 = CFDateCreate(v8, AbsoluteTime);
    if (v9)
      CFRelease(v9);
    v18 = v11;
    v9 = v11;
  }
  QP::DateComponents::getShortFormatWithOptions((QP::DateComponents *)v20, 0, &__p);
  CFStringFromString = QP::createCFStringFromString((uint64_t)&__p);
  DateFormatFromTemplate = CFDateFormatterCreateDateFormatFromTemplate(0, CFStringFromString, 0, *((CFLocaleRef *)*a1 + 13));
  StringWithDate = 0;
  v15 = a1[6];
  if (v15 && v9)
  {
    CFDateFormatterSetFormat(v15, DateFormatFromTemplate);
    StringWithDate = CFDateFormatterCreateStringWithDate(v8, a1[6], v9);
  }
  if (DateFormatFromTemplate)
    CFRelease(DateFormatFromTemplate);
  if (CFStringFromString)
    CFRelease(CFStringFromString);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v9)
      return StringWithDate;
    goto LABEL_19;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v9)
LABEL_19:
    CFRelease(v9);
  return StringWithDate;
}

void sub_218E4E9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17)
{
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a10, 0);
  if (a16 < 0)
    operator delete(__p);
  nlp::CFScopedPtr<__CFDate const*>::reset(&a17, 0);
  _Unwind_Resume(a1);
}

CFStringRef QP::DateFormatter::copyShortDisplayForDate(CFDateFormatterRef *a1, uint64_t a2, int a3, uint64_t a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  CFStringRef StringWithDate;
  unint64_t v12;
  unsigned int v13;
  int32x4_t v14;
  int32x4_t v15;
  int v16;
  const __CFAllocator *v17;
  const __CFDate *v18;
  __CFCalendar **v19;
  __CFCalendar *v20;
  CFDateRef v21;
  char v22;
  const __CFString *CFStringFromString;
  const __CFString *DateFormatFromTemplate;
  __CFDateFormatter *v25;
  const __CFAllocator *v26;
  const __CFDate *v27;
  __CFCalendar **v28;
  __CFCalendar *v29;
  CFDateRef v30;
  char v31;
  const __CFString *v32;
  const __CFString *v33;
  __CFDateFormatter *v34;
  std::string v36;
  void *v37;
  CFAbsoluteTime AbsoluteTime;
  void *__p[2];
  int v40[4];
  int32x4_t v41;
  int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int v46;

  v8 = *(_OWORD *)(*(_QWORD *)a2 + 20);
  v9 = *(_OWORD *)(*(_QWORD *)a2 + 36);
  v10 = *(_OWORD *)(*(_QWORD *)a2 + 52);
  v46 = *(_DWORD *)(*(_QWORD *)a2 + 68);
  v44 = v9;
  v45 = v10;
  v43 = v8;
  if ((QP::DateComponents::isEmpty((QP::DateComponents *)&v43) & 1) == 0)
  {
    if (a3)
    {
      v12 = __ROR8__(*((_QWORD *)*a1 + 1), 1);
      QP::updateDateComponentsWithRelativeDateOffset(*((_QWORD *)*a1 + 11), *((_QWORD *)*a1 + 13), *((const __CFDate **)*a1 + 9), (QP::DateComponents *)&v43, *(_DWORD *)(*(_QWORD *)a2 + 8), 1, (v12 > 6) | (0xEu >> v12) & 1, a4);
    }
    v13 = *(_DWORD *)(*(_QWORD *)a2 + 8);
    if ((int)v13 < 91 || v13 == 102)
    {
      v36.__r_.__value_.__r.__words[0] = 0;
      v36.__r_.__value_.__r.__words[0] = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v43, *((__CFCalendar **)*a1 + 10), *((const __CFDate **)*a1 + 9));
      v17 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v18 = CFDateCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], *(CFAbsoluteTime *)&v36.__r_.__value_.__l.__data_);
      *(_QWORD *)&AbsoluteTime = v18;
      v19 = (__CFCalendar **)*a1;
      v20 = (__CFCalendar *)*((_QWORD *)*a1 + 11);
      if (v20)
      {
        v36.__r_.__value_.__r.__words[0] = convertAbsoluteTime(v19[10], v20, v18, v44);
        v21 = CFDateCreate(v17, *(CFAbsoluteTime *)&v36.__r_.__value_.__l.__data_);
        if (v18)
          CFRelease(v18);
        *(_QWORD *)&AbsoluteTime = v21;
        v19 = (__CFCalendar **)*a1;
        v18 = v21;
      }
      v22 = QP::ParserConfiguration::useEra((QP::ParserConfiguration *)v19);
      QP::DateComponents::getShortFormatWithOptions((QP::DateComponents *)&v43, v22, (std::string *)__p);
      CFStringFromString = QP::createCFStringFromString((uint64_t)__p);
      v37 = (void *)CFStringFromString;
      DateFormatFromTemplate = CFDateFormatterCreateDateFormatFromTemplate(0, CFStringFromString, 0, *((CFLocaleRef *)*a1 + 13));
      StringWithDate = 0;
      v25 = a1[6];
      if (v25 && v18)
      {
        CFDateFormatterSetFormat(v25, DateFormatFromTemplate);
        StringWithDate = CFDateFormatterCreateStringWithDate(v17, a1[6], v18);
      }
      if (DateFormatFromTemplate)
        CFRelease(DateFormatFromTemplate);
      if (CFStringFromString)
        CFRelease(CFStringFromString);
      if (SHIBYTE(v40[1]) < 0)
      {
        operator delete(__p[0]);
        if (!v18)
          return StringWithDate;
      }
      else if (!v18)
      {
        return StringWithDate;
      }
      CFRelease(v18);
      return StringWithDate;
    }
    v42 = -1;
    v14.i64[0] = -1;
    v14.i64[1] = -1;
    *(int32x4_t *)v40 = v14;
    v41 = v14;
    *(int32x4_t *)__p = v14;
    v15.i64[0] = *(_QWORD *)((char *)&v43 + 4);
    v15.i64[1] = __PAIR64__(HIDWORD(v44), v43);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32(v15, v14))) & 1) != 0)
    {
      LODWORD(__p[0]) = v43;
      if (v13 >= 0x5D)
      {
        HIDWORD(__p[0]) = DWORD1(v43);
        if (v13 != 93)
        {
          LODWORD(__p[1]) = DWORD2(v43);
          v40[3] = HIDWORD(v44);
          if (v13 >= 0x5F)
          {
            HIDWORD(__p[1]) = HIDWORD(v43);
            if (v13 != 95)
            {
              v41.i32[0] = v45;
              if (v13 >= 0x64)
              {
                v40[0] = v44;
                if (v13 != 100)
                {
                  v16 = DWORD1(v44);
LABEL_38:
                  v40[1] = v16;
                }
              }
            }
          }
        }
      }
    }
    else
    {
      if (v13 == 96)
      {
        v41.i32[0] = v45;
        goto LABEL_39;
      }
      if ((v45 & 0x80000000) == 0)
        v41.i32[0] = v45;
      if ((v44 & 0x80000000) == 0)
      {
        v40[0] = v44;
        goto LABEL_39;
      }
      v16 = DWORD1(v44);
      if ((DWORD1(v44) & 0x80000000) == 0)
        goto LABEL_38;
    }
LABEL_39:
    AbsoluteTime = 0.0;
    AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)__p, *((__CFCalendar **)*a1 + 10), *((const __CFDate **)*a1 + 9));
    v26 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v27 = CFDateCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], AbsoluteTime);
    v37 = v27;
    v28 = (__CFCalendar **)*a1;
    v29 = (__CFCalendar *)*((_QWORD *)*a1 + 11);
    if (v29)
    {
      AbsoluteTime = convertAbsoluteTime(v28[10], v29, v27, v40[0]);
      v30 = CFDateCreate(v26, AbsoluteTime);
      if (v27)
        CFRelease(v27);
      v37 = v30;
      v28 = (__CFCalendar **)*a1;
      v27 = v30;
    }
    v31 = QP::ParserConfiguration::useEra((QP::ParserConfiguration *)v28);
    QP::DateComponents::getShortFormatWithOptions((QP::DateComponents *)&v43, v31, &v36);
    v32 = QP::createCFStringFromString((uint64_t)&v36);
    v33 = CFDateFormatterCreateDateFormatFromTemplate(0, v32, 0, *((CFLocaleRef *)*a1 + 13));
    StringWithDate = 0;
    v34 = a1[6];
    if (v34 && v27)
    {
      CFDateFormatterSetFormat(v34, v33);
      StringWithDate = CFDateFormatterCreateStringWithDate(v26, a1[6], v27);
    }
    if (v33)
      CFRelease(v33);
    if (v32)
      CFRelease(v32);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v36.__r_.__value_.__l.__data_);
      if (!v27)
        return StringWithDate;
    }
    else if (!v27)
    {
      return StringWithDate;
    }
    CFRelease(v27);
    return StringWithDate;
  }
  return 0;
}

void sub_218E4EE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, const void *a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  nlp::CFScopedPtr<__CFString const*>::reset(&a10, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a11, 0);
  if (a17 < 0)
    operator delete(__p);
  nlp::CFScopedPtr<__CFDate const*>::reset(&a18, 0);
  _Unwind_Resume(a1);
}

const __CFString *QP::DateFormatter::copyISODisplayForStartDate(uint64_t *a1, uint64_t *a2, int a3, char a4, int a5, uint64_t a6)
{
  CFStringRef StringWithDate;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char isEmpty;
  char v25;
  CFAbsoluteTime AbsoluteTime;
  const __CFAllocator *v27;
  const __CFDate *v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  _OWORD v36[3];
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int v45;

  if ((a4 & 1) != 0 || (StringWithDate = CFSTR("0"), a3 != 5) && a3 != 8)
  {
    v11 = *a2;
    v12 = *(_OWORD *)(*a2 + 20);
    v13 = *(_OWORD *)(*a2 + 52);
    v43 = *(_OWORD *)(*a2 + 36);
    v44 = v13;
    v45 = *(_DWORD *)(v11 + 68);
    v42 = v12;
    v14 = *(_OWORD *)(v11 + 88);
    v38 = *(_OWORD *)(v11 + 72);
    v39 = v14;
    v40 = *(_OWORD *)(v11 + 104);
    v41 = *(_DWORD *)(v11 + 120);
    v15 = *(_OWORD *)(v11 + 140);
    v36[0] = *(_OWORD *)(v11 + 124);
    v36[1] = v15;
    v36[2] = *(_OWORD *)(v11 + 156);
    v37 = *(_DWORD *)(v11 + 172);
    if (a5)
    {
      v16 = *(_DWORD *)(v11 + 8);
      v17 = __ROR8__(*(_QWORD *)(*a1 + 8), 1);
      QP::updateDateComponentsWithRelativeDateOffset(*(_QWORD *)(*a1 + 88), *(_QWORD *)(*a1 + 104), *(const __CFDate **)(*a1 + 72), (QP::DateComponents *)&v42, v16, 1, (v17 > 6) | (0xEu >> v17) & 1, a6);
    }
    v18 = (std::__shared_weak_count *)a1[1];
    v34 = *a1;
    v35 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    QP::DateConverter::resolveDateComponentsAsRange((uint64_t)&v34, a3, *(_DWORD *)(*a2 + 8), &v42, &v38, (uint64_t)v36, a5);
    v21 = v35;
    if (v35)
    {
      v22 = (unint64_t *)&v35->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v30 = v42;
    v31 = v43;
    v32 = v44;
    v33 = v45;
    if (QP::DateComponents::isEmpty((QP::DateComponents *)&v42)
      && (QP::DateComponents::isEmpty((QP::DateComponents *)&v38) & 1) == 0)
    {
      v30 = v38;
      v31 = v39;
      v32 = v40;
      v33 = v41;
    }
    if ((QP::DateComponents::isEmpty((QP::DateComponents *)&v30) & 1) != 0)
    {
      return CFSTR("0");
    }
    else
    {
      isEmpty = QP::DateComponents::isEmpty((QP::DateComponents *)&v38);
      if (a3 == 6)
        v25 = isEmpty;
      else
        v25 = 1;
      if ((v25 & 1) == 0)
      {
        v30 = v38;
        v31 = v39;
        v32 = v40;
        v33 = v41;
        QP::updateDateComponentsWithUnitOffset(*(__CFCalendar **)(*a1 + 88), *(_QWORD *)(*a1 + 104), *(const __CFDate **)(*a1 + 72), (QP::DateComponents *)&v30, *(_DWORD *)(*a2 + 8), 1);
      }
      AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v30, *(__CFCalendar **)(*a1 + 88), *(const __CFDate **)(*a1 + 72));
      v27 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v28 = CFDateCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], AbsoluteTime);
      if (v28)
      {
        StringWithDate = CFDateFormatterCreateStringWithDate(v27, (CFDateFormatterRef)a1[4], v28);
        CFRelease(v28);
      }
      else
      {
        return 0;
      }
    }
  }
  return StringWithDate;
}

void sub_218E4F1B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFDate const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

const __CFString *QP::DateFormatter::copyISODisplayForEndDate(uint64_t *a1, uint64_t *a2, int a3, int a4, int a5, uint64_t a6)
{
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  CFStringRef StringWithDate;
  CFAbsoluteTime AbsoluteTime;
  const __CFAllocator *v26;
  const __CFDate *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  _OWORD v34[3];
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int v43;

  if ((a3 & 0xFFFE) == 6 && !a4)
    return CFSTR("2147483647");
  v10 = *a2;
  v11 = *(_OWORD *)(*a2 + 20);
  v12 = *(_OWORD *)(*a2 + 52);
  v41 = *(_OWORD *)(*a2 + 36);
  v42 = v12;
  v43 = *(_DWORD *)(v10 + 68);
  v40 = v11;
  v13 = *(_OWORD *)(v10 + 88);
  v36 = *(_OWORD *)(v10 + 72);
  v37 = v13;
  v38 = *(_OWORD *)(v10 + 104);
  v39 = *(_DWORD *)(v10 + 120);
  v14 = *(_OWORD *)(v10 + 140);
  v34[0] = *(_OWORD *)(v10 + 124);
  v34[1] = v14;
  v34[2] = *(_OWORD *)(v10 + 156);
  v35 = *(_DWORD *)(v10 + 172);
  if (a5)
  {
    v15 = *(_DWORD *)(v10 + 8);
    v16 = __ROR8__(*(_QWORD *)(*a1 + 8), 1);
    QP::updateDateComponentsWithRelativeDateOffset(*(_QWORD *)(*a1 + 88), *(_QWORD *)(*a1 + 104), *(const __CFDate **)(*a1 + 72), (QP::DateComponents *)&v40, v15, 1, (v16 > 6) | (0xEu >> v16) & 1, a6);
  }
  v17 = (std::__shared_weak_count *)a1[1];
  v32 = *a1;
  v33 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  QP::DateConverter::resolveDateComponentsAsRange((uint64_t)&v32, a3, *(_DWORD *)(*a2 + 8), &v40, &v36, (uint64_t)v34, a5);
  v20 = v33;
  if (v33)
  {
    v21 = (unint64_t *)&v33->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v28 = v36;
  v29 = v37;
  v30 = v38;
  v31 = v39;
  if (QP::DateComponents::isEmpty((QP::DateComponents *)&v36)
    && (QP::DateComponents::isEmpty((QP::DateComponents *)&v40) & 1) == 0)
  {
    v28 = v40;
    v29 = v41;
    v30 = v42;
    v31 = v43;
  }
  if ((QP::DateComponents::isEmpty((QP::DateComponents *)&v28) & 1) != 0)
    return CFSTR("2147483647");
  if ((QP::DateComponents::isEmpty((QP::DateComponents *)&v40) & 1) == 0)
    QP::updateDateComponentsWithUnitOffset(*(__CFCalendar **)(*a1 + 88), *(_QWORD *)(*a1 + 104), *(const __CFDate **)(*a1 + 72), (QP::DateComponents *)&v28, *(_DWORD *)(*a2 + 8), 1);
  AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v28, *(__CFCalendar **)(*a1 + 88), *(const __CFDate **)(*a1 + 72));
  v26 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v27 = CFDateCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], AbsoluteTime);
  if (!v27)
    return 0;
  StringWithDate = CFDateFormatterCreateStringWithDate(v26, (CFDateFormatterRef)a1[4], v27);
  CFRelease(v27);
  return StringWithDate;
}

void sub_218E4F454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFDate const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

__CFString *QP::DateFormatter::copyDisplayForPeriodWithKey(CFDateFormatterRef *a1, _QWORD *a2, const __CFString *a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  CFIndex location;
  CFAllocatorRef *v13;
  CFArrayRef ArrayBySeparatingStrings;
  const void *ValueAtIndex;
  const void *v16;
  uint64_t v17;
  __int128 v18;
  std::__shared_count v19;
  __int128 v20;
  __int128 v21;
  CFDateFormatterRef v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  __int128 v29;
  unint64_t *v30;
  std::__shared_count v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  const void *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  const void *v41;
  unint64_t *v42;
  unint64_t v43;
  CFTypeRef v44;
  CFDateFormatterRef v45;
  __CFString *BundleWithIdentifier;
  const __CFString *v47;
  CFStringRef v48;
  __CFString *v49;
  uint64_t v50;
  const __CFAllocator *v51;
  const __CFArray *v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  const __CFString *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  CFMutableStringRef v64;
  const __CFString *v65;
  CFStringRef v66;
  CFDateFormatterRef v67;
  __CFString *v68;
  CFStringRef v69;
  const __CFAllocator *v70;
  const __CFArray *v71;
  const __CFArray *v72;
  const void *v73;
  CFTypeRef v74;
  const __CFString *v75;
  uint64_t IntValue;
  CFDateFormatterRef v77;
  __CFString *v78;
  const __CFString *v79;
  CFStringRef v80;
  CFDateFormatterRef v81;
  __CFString *v82;
  CFStringRef v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  CFStringRef v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  const void *v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  CFMutableStringRef MutableCopy;
  const __CFString *v105;
  CFStringRef Copy;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  const __CFString *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  const __CFString *v121;
  unint64_t *v122;
  unint64_t v123;
  CFMutableStringRef v124;
  const __CFString *v125;
  CFStringRef v126;
  const void *v127;
  CFDateFormatterRef v128;
  __CFString *v129;
  CFStringRef v130;
  uint64_t v131;
  const __CFAllocator *v132;
  const void *v133;
  const __CFString *v134;
  CFDateFormatterRef v135;
  __CFString *v136;
  const __CFString *v137;
  const void *v138;
  uint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  const void *v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  CFMutableStringRef v146;
  const __CFString *v147;
  CFMutableStringRef v148;
  const __CFString *v149;
  CFStringRef v150;
  const __CFString **v151;
  CFDateFormatterRef v152;
  __CFString *v153;
  uint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  CFStringRef v157;
  CFDateFormatterRef v158;
  __CFString *v159;
  CFDateFormatterRef v160;
  __CFString *v161;
  const __CFString *v162;
  CFDateFormatterRef v163;
  __CFString *v164;
  CFDateFormatterRef v165;
  __CFString *v166;
  CFDateFormatterRef v167;
  __CFString *v168;
  const __CFString *v169;
  CFDateFormatterRef v171;
  __CFString *v172;
  const __CFString *v173;
  const __CFAllocator *alloc;
  _QWORD v177[2];
  _QWORD v178[2];
  _QWORD v179[2];
  _QWORD v180[2];
  _QWORD v181[2];
  uint64_t v182[2];
  uint64_t v183[2];
  _QWORD v184[2];
  uint64_t v185[2];
  _QWORD v186[2];
  uint64_t v187[2];
  _QWORD v188[2];
  const __CFString *v189;
  _QWORD v190[2];
  const void *v191;
  _QWORD v192[2];
  CFTypeRef cf;
  CFStringRef v194;
  std::__shared_weak_count *v195;
  CFStringRef theString;
  std::__shared_weak_count *v197;
  CFDateFormatterRef v198;
  std::__shared_weak_count *v199;
  _OWORD v200[3];
  int v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  int v205;
  __int128 v206;
  __int128 v207;
  std::__shared_count v208;
  int v209;
  const __CFString *v210;
  const __CFString *v211;
  __CFString *v212;
  CFRange v213;
  CFRange v214;
  CFRange v215;
  CFRange v216;
  CFRange v217;
  CFRange v218;
  CFRange v219;

  if (!a3)
    return 0;
  v211 = 0;
  v212 = 0;
  location = CFStringFind(a3, CFSTR("::"), 0).location;
  v13 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
  if (location != -1)
  {
    alloc = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x24BDBD240], a3, CFSTR("::"));
    v210 = (const __CFString *)ArrayBySeparatingStrings;
    if (CFArrayGetCount(ArrayBySeparatingStrings) != 2)
    {
LABEL_92:
      if (ArrayBySeparatingStrings)
        CFRelease(ArrayBySeparatingStrings);
      goto LABEL_190;
    }
    ValueAtIndex = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 0);
    v16 = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 1);
    v17 = *a2;
    v18 = *(_OWORD *)(*a2 + 20);
    v19 = *(std::__shared_count *)(*a2 + 52);
    v207 = *(_OWORD *)(*a2 + 36);
    v208 = v19;
    v209 = *(_DWORD *)(v17 + 68);
    v206 = v18;
    v20 = *(_OWORD *)(v17 + 88);
    v202 = *(_OWORD *)(v17 + 72);
    v203 = v20;
    v204 = *(_OWORD *)(v17 + 104);
    v205 = *(_DWORD *)(v17 + 120);
    v21 = *(_OWORD *)(v17 + 140);
    v200[0] = *(_OWORD *)(v17 + 124);
    v200[1] = v21;
    v200[2] = *(_OWORD *)(v17 + 156);
    v201 = *(_DWORD *)(v17 + 172);
    v22 = a1[1];
    v198 = *a1;
    v199 = (std::__shared_weak_count *)v22;
    if (v22)
    {
      v23 = (unint64_t *)((char *)v22 + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v17 = *a2;
    }
    QP::DateConverter::resolveDateComponentsAsRange((uint64_t)&v198, a4, *(_DWORD *)(v17 + 8), &v206, &v202, (uint64_t)v200, a6);
    v25 = v199;
    if (v199)
    {
      p_shared_owners = (unint64_t *)&v199->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = (std::__shared_weak_count *)operator new(0xC8uLL);
    v29 = v207;
    *(_OWORD *)((char *)&v28[1].__shared_weak_owners_ + 4) = v206;
    v28->__shared_owners_ = 0;
    v30 = (unint64_t *)&v28->__shared_owners_;
    v28->__shared_weak_owners_ = 0;
    v28->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA25840;
    v28[1].__vftable = 0;
    WORD2(v28[1].__shared_owners_) = 0;
    LODWORD(v28[1].__shared_weak_owners_) = 0;
    theString = (CFStringRef)&v28[1];
    v197 = v28;
    *(_OWORD *)((char *)&v28[2].__shared_owners_ + 4) = v29;
    *(std::__shared_count *)((char *)v28 + 76) = v208;
    HIDWORD(v28[3].__shared_weak_owners_) = v209;
    v31.__vftable = (std::__shared_count_vtbl *)-1;
    v31.__shared_owners_ = -1;
    v28[4].std::__shared_count = v31;
    *((std::__shared_count *)v28 + 7) = v31;
    *((std::__shared_count *)v28 + 8) = v31;
    v28[6].std::__shared_count = v31;
    *((std::__shared_count *)v28 + 10) = v31;
    *((std::__shared_count *)v28 + 11) = v31;
    v28[8].__vftable = (std::__shared_weak_count_vtbl *)-1;
    LODWORD(v28[1].__shared_owners_) = 2;
    QP::DatePeriod::setDisplayKey((const void **)&v28[1].__vftable, CFSTR("FORMATTED"));
    v32 = (char *)operator new(0xC8uLL);
    v33 = v203;
    *(_OWORD *)(v32 + 44) = v202;
    *((_QWORD *)v32 + 1) = 0;
    *((_QWORD *)v32 + 2) = 0;
    *(_QWORD *)v32 = &unk_24DA25840;
    *((_QWORD *)v32 + 3) = 0;
    *((_WORD *)v32 + 18) = 0;
    *((_DWORD *)v32 + 10) = 0;
    v194 = (CFStringRef)(v32 + 24);
    v195 = (std::__shared_weak_count *)v32;
    *(_OWORD *)(v32 + 60) = v33;
    *(_OWORD *)(v32 + 76) = v204;
    *((_DWORD *)v32 + 23) = v205;
    *(_QWORD *)&v34 = -1;
    *((_QWORD *)&v34 + 1) = -1;
    *((_OWORD *)v32 + 6) = v34;
    *((_OWORD *)v32 + 7) = v34;
    *((_OWORD *)v32 + 8) = v34;
    *((_OWORD *)v32 + 9) = v34;
    *((_OWORD *)v32 + 10) = v34;
    *((_OWORD *)v32 + 11) = v34;
    *((_QWORD *)v32 + 24) = -1;
    *((_DWORD *)v32 + 8) = 2;
    QP::DatePeriod::setDisplayKey((const void **)v32 + 3, CFSTR("FORMATTED"));
    v192[0] = v28 + 1;
    v192[1] = v28;
    do
      v35 = __ldxr(v30);
    while (__stxr(v35 + 1, v30));
    v36 = (const void *)QP::DateFormatter::copyDisplayForPeriodWithKey(a1, v192, ValueAtIndex, a4, a5, a6, a7);
    v13 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
    cf = v36;
    do
      v37 = __ldaxr(v30);
    while (__stlxr(v37 - 1, v30));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
    v38 = v195;
    v190[0] = v194;
    v190[1] = v195;
    if (v195)
    {
      v39 = (unint64_t *)&v195->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v41 = (const void *)QP::DateFormatter::copyDisplayForPeriodWithKey(a1, v190, v16, a4, a5, a6, a7);
    v191 = v41;
    if (v38)
    {
      v42 = (unint64_t *)&v38->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
      v41 = v191;
    }
    v44 = cf;
    if (!cf)
    {
      if (!v41)
      {
LABEL_81:
        v84 = v195;
        if (v195)
        {
          v85 = (unint64_t *)&v195->__shared_owners_;
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
        }
        v87 = v197;
        if (v197)
        {
          v88 = (unint64_t *)&v197->__shared_owners_;
          do
            v89 = __ldaxr(v88);
          while (__stlxr(v89 - 1, v88));
          if (!v89)
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
          }
        }
        ArrayBySeparatingStrings = (CFArrayRef)v210;
        goto LABEL_92;
      }
      goto LABEL_79;
    }
    if (!v41)
    {
LABEL_80:
      CFRelease(v44);
      goto LABEL_81;
    }
    if (QP::DateComponents::isEmpty((QP::DateComponents *)v200))
    {
      v45 = *a1;
      BundleWithIdentifier = (__CFString *)*((_QWORD *)*a1 + 24);
      if (BundleWithIdentifier)
      {
        BundleWithIdentifier = (__CFString *)CFBundleGetBundleWithIdentifier(BundleWithIdentifier);
        v45 = *a1;
      }
      v47 = copyLocalizedString((__CFBundle *)BundleWithIdentifier, CFSTR("Dates"), CFSTR("FROM_DATE_TO_DATE"), *((const __CFString **)v45 + 17));
      v189 = v47;
      v48 = CFStringCreateWithFormat(alloc, 0, v47, v44, v41);
      if (v211)
        CFRelease(v211);
      v211 = v48;
      if (v47)
LABEL_78:
        CFRelease(v47);
    }
    else
    {
      v81 = *a1;
      v82 = (__CFString *)*((_QWORD *)*a1 + 24);
      if (v82)
      {
        v82 = (__CFString *)CFBundleGetBundleWithIdentifier(v82);
        v81 = *a1;
      }
      v47 = copyLocalizedString((__CFBundle *)v82, CFSTR("Dates"), CFSTR("EVERY_DATE_TO_DATE"), *((const __CFString **)v81 + 17));
      v189 = v47;
      v83 = CFStringCreateWithFormat(alloc, 0, v47, v44, v41);
      if (v211)
        CFRelease(v211);
      v211 = v83;
      if (v47)
        goto LABEL_78;
    }
LABEL_79:
    CFRelease(v41);
    if (!v44)
      goto LABEL_81;
    goto LABEL_80;
  }
  if (CFStringFind(a3, CFSTR(":"), 0).location != -1)
  {
    v50 = a7;
    v51 = *v13;
    v52 = CFStringCreateArrayBySeparatingStrings(*v13, a3, CFSTR(":"));
    *(_QWORD *)&v206 = v52;
    if (CFArrayGetCount(v52) != 2)
      goto LABEL_188;
    v53 = *(_DWORD *)(*a2 + 8) - 94;
    if (v53 <= 0x18)
    {
      if (((1 << v53) & 0x8001) != 0)
      {
        v97 = a2[1];
        v185[0] = *a2;
        v185[1] = v97;
        if (v97)
        {
          v98 = (unint64_t *)(v97 + 8);
          do
            v99 = __ldxr(v98);
          while (__stxr(v99 + 1, v98));
        }
        *(_QWORD *)&v202 = QP::DateFormatter::copyTimeDisplayForDate(a1, v185);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v185);
        v100 = CFArrayGetValueAtIndex(v52, 1);
        v101 = a2[1];
        v184[0] = *a2;
        v184[1] = v101;
        if (v101)
        {
          v102 = (unint64_t *)(v101 + 8);
          do
            v103 = __ldxr(v102);
          while (__stxr(v103 + 1, v102));
        }
        *(_QWORD *)&v200[0] = QP::DateFormatter::copyDisplayForPeriodWithKey(a1, v184, v100, a4, a5, a6, v50);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v184);
        if (!(_QWORD)v202)
          goto LABEL_187;
        MutableCopy = CFStringCreateMutableCopy(v51, 0, *(CFStringRef *)&v200[0]);
        theString = MutableCopy;
        v105 = (const __CFString *)v202;
        v215.length = CFStringGetLength(MutableCopy);
        v215.location = 0;
        CFStringFindAndReplace(MutableCopy, CFSTR("<date>"), v105, v215, 0);
        Copy = CFStringCreateCopy(v51, theString);
LABEL_159:
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v211, Copy);
        nlp::CFScopedPtr<__CFString *>::reset((const void **)&theString, 0);
LABEL_187:
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)v200, 0);
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v202, 0);
LABEL_188:
        if (v52)
          CFRelease(v52);
        goto LABEL_190;
      }
      if (((1 << v53) & 0x20004) != 0)
      {
        v107 = (std::__shared_weak_count *)a2[1];
        v188[0] = *a2;
        v188[1] = v107;
        if (v107)
        {
          v108 = (unint64_t *)&v107->__shared_owners_;
          do
            v109 = __ldxr(v108);
          while (__stxr(v109 + 1, v108));
        }
        *(_QWORD *)&v202 = QP::DateFormatter::copyWeekdayDisplayForDate(a1, (uint64_t)v188);
        if (v107)
        {
          v110 = (unint64_t *)&v107->__shared_owners_;
          do
            v111 = __ldaxr(v110);
          while (__stlxr(v111 - 1, v110));
          if (!v111)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
        }
        v112 = (std::__shared_weak_count *)a2[1];
        v187[0] = *a2;
        v187[1] = (uint64_t)v112;
        if (v112)
        {
          v113 = (unint64_t *)&v112->__shared_owners_;
          do
            v114 = __ldxr(v113);
          while (__stxr(v114 + 1, v113));
        }
        *(_QWORD *)&v200[0] = QP::DateFormatter::copyTimeDisplayForDate(a1, v187);
        if (v112)
        {
          v115 = (unint64_t *)&v112->__shared_owners_;
          do
            v116 = __ldaxr(v115);
          while (__stlxr(v116 - 1, v115));
          if (!v116)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
        v117 = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v206, 1);
        v118 = (std::__shared_weak_count *)a2[1];
        v186[0] = *a2;
        v186[1] = v118;
        if (v118)
        {
          v119 = (unint64_t *)&v118->__shared_owners_;
          do
            v120 = __ldxr(v119);
          while (__stxr(v120 + 1, v119));
        }
        v121 = (const __CFString *)QP::DateFormatter::copyDisplayForPeriodWithKey(a1, v186, v117, a4, a5, a6, v50);
        theString = v121;
        if (v118)
        {
          v122 = (unint64_t *)&v118->__shared_owners_;
          do
            v123 = __ldaxr(v122);
          while (__stlxr(v123 - 1, v122));
          if (!v123)
          {
            ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
            std::__shared_weak_count::__release_weak(v118);
          }
          v121 = theString;
        }
        v124 = CFStringCreateMutableCopy(v51, 0, v121);
        v194 = v124;
        v125 = (const __CFString *)v202;
        v216.length = CFStringGetLength(v124);
        v216.location = 0;
        CFStringFindAndReplace(v124, CFSTR("<date>"), v125, v216, 0);
        v126 = CFStringCreateCopy(v51, v124);
        if (v211)
          CFRelease(v211);
        v211 = v126;
        v127 = *(const void **)&v200[0];
        if (*(_QWORD *)&v200[0])
        {
          if (CFStringHasPrefix(v117, CFSTR("VAL_1")))
          {
            v128 = *a1;
            v129 = (__CFString *)*((_QWORD *)*a1 + 24);
            if (v129)
            {
              v129 = (__CFString *)CFBundleGetBundleWithIdentifier(v129);
              v128 = *a1;
            }
            v210 = copyLocalizedString((__CFBundle *)v129, CFSTR("Dates"), CFSTR("ORDINAL_WEEKDAY_AT_TIME_S"), *((const __CFString **)v128 + 17));
            v130 = CFStringCreateWithFormat(v51, 0, v210, v211, v127);
          }
          else
          {
            v152 = *a1;
            v153 = (__CFString *)*((_QWORD *)*a1 + 24);
            if (v153)
            {
              v153 = (__CFString *)CFBundleGetBundleWithIdentifier(v153);
              v152 = *a1;
            }
            v210 = copyLocalizedString((__CFBundle *)v153, CFSTR("Dates"), CFSTR("ORDINAL_WEEKDAY_AT_TIME_P"), *((const __CFString **)v152 + 17));
            v130 = CFStringCreateWithFormat(v51, 0, v210, v211, v127);
          }
          nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v211, v130);
          nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v210, 0);
        }
        if (v124)
          CFRelease(v124);
        if (v121)
          CFRelease(v121);
        if (v127)
          CFRelease(v127);
        if (v125)
          CFRelease(v125);
        v52 = (const __CFArray *)v206;
        goto LABEL_188;
      }
      if (((1 << v53) & 0x1000200) != 0)
      {
        v54 = a2[1];
        v183[0] = *a2;
        v183[1] = v54;
        if (v54)
        {
          v55 = (unint64_t *)(v54 + 8);
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
        }
        *(_QWORD *)&v202 = QP::DateFormatter::copyDateDisplayForDate(a1, v183);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v183);
        v57 = a2[1];
        v182[0] = *a2;
        v182[1] = v57;
        if (v57)
        {
          v58 = (unint64_t *)(v57 + 8);
          do
            v59 = __ldxr(v58);
          while (__stxr(v59 + 1, v58));
        }
        *(_QWORD *)&v200[0] = QP::DateFormatter::copyTimeDisplayForDate(a1, v182);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v182);
        v60 = (const __CFString *)CFArrayGetValueAtIndex(v52, 1);
        v61 = a2[1];
        v181[0] = *a2;
        v181[1] = v61;
        if (v61)
        {
          v62 = (unint64_t *)(v61 + 8);
          do
            v63 = __ldxr(v62);
          while (__stxr(v63 + 1, v62));
        }
        theString = (CFStringRef)QP::DateFormatter::copyDisplayForPeriodWithKey(a1, v181, v60, a4, a5, a6, v50);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v181);
        if ((_QWORD)v202)
        {
          v64 = CFStringCreateMutableCopy(v51, 0, theString);
          v194 = v64;
          v65 = (const __CFString *)v202;
          v214.length = CFStringGetLength(v64);
          v214.location = 0;
          CFStringFindAndReplace(v64, CFSTR("<date>"), v65, v214, 0);
          v66 = CFStringCreateCopy(v51, v194);
          nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v211, v66);
          if (!*(_QWORD *)&v200[0])
          {
LABEL_185:
            nlp::CFScopedPtr<__CFString *>::reset((const void **)&v194, 0);
            goto LABEL_186;
          }
          if (CFStringHasPrefix(v60, CFSTR("VAL_1")))
          {
            v67 = *a1;
            v68 = (__CFString *)*((_QWORD *)*a1 + 24);
            if (v68)
            {
              v68 = (__CFString *)CFBundleGetBundleWithIdentifier(v68);
              v67 = *a1;
            }
            v210 = copyLocalizedString((__CFBundle *)v68, CFSTR("Dates"), CFSTR("ORDINAL_WEEKDAY_AT_TIME_S"), *((const __CFString **)v67 + 17));
            v69 = CFStringCreateWithFormat(v51, 0, v210, v211, *(_QWORD *)&v200[0]);
          }
          else
          {
            v158 = *a1;
            v159 = (__CFString *)*((_QWORD *)*a1 + 24);
            if (v159)
            {
              v159 = (__CFString *)CFBundleGetBundleWithIdentifier(v159);
              v158 = *a1;
            }
            v210 = copyLocalizedString((__CFBundle *)v159, CFSTR("Dates"), CFSTR("ORDINAL_WEEKDAY_AT_TIME_P"), *((const __CFString **)v158 + 17));
            v69 = CFStringCreateWithFormat(v51, 0, v210, v211, *(_QWORD *)&v200[0]);
          }
          nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v211, v69);
          v151 = &v210;
          v150 = 0;
        }
        else
        {
          if (!*(_QWORD *)&v200[0])
          {
LABEL_186:
            nlp::CFScopedPtr<__CFString const*>::reset((const void **)&theString, 0);
            goto LABEL_187;
          }
          v148 = CFStringCreateMutableCopy(v51, 0, theString);
          v194 = v148;
          v149 = *(const __CFString **)&v200[0];
          v218.length = CFStringGetLength(v148);
          v218.location = 0;
          CFStringFindAndReplace(v148, CFSTR("<date>"), v149, v218, 0);
          v150 = CFStringCreateCopy(v51, v194);
          v151 = &v211;
        }
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)v151, v150);
        goto LABEL_185;
      }
    }
    v138 = CFArrayGetValueAtIndex(v52, 0);
    v139 = a2[1];
    v180[0] = *a2;
    v180[1] = v139;
    if (v139)
    {
      v140 = (unint64_t *)(v139 + 8);
      do
        v141 = __ldxr(v140);
      while (__stxr(v141 + 1, v140));
    }
    *(_QWORD *)&v202 = QP::DateFormatter::copyDisplayForPeriodWithKey(a1, v180, v138, a4, a5, a6, v50);
    std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v180);
    v142 = CFArrayGetValueAtIndex(v52, 1);
    v143 = a2[1];
    v179[0] = *a2;
    v179[1] = v143;
    if (v143)
    {
      v144 = (unint64_t *)(v143 + 8);
      do
        v145 = __ldxr(v144);
      while (__stxr(v145 + 1, v144));
    }
    *(_QWORD *)&v200[0] = QP::DateFormatter::copyDisplayForPeriodWithKey(a1, v179, v142, a4, a5, a6, v50);
    std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v179);
    if (!(_QWORD)v202 || !*(_QWORD *)&v200[0])
      goto LABEL_187;
    v146 = CFStringCreateMutableCopy(v51, 0, *(CFStringRef *)&v200[0]);
    theString = v146;
    v147 = (const __CFString *)v202;
    v217.length = CFStringGetLength(v146);
    v217.location = 0;
    CFStringFindAndReplace(v146, CFSTR("<date>"), v147, v217, 0);
    Copy = CFStringCreateCopy(v51, theString);
    goto LABEL_159;
  }
  if (CFStringHasPrefix(a3, CFSTR("VAL")))
  {
    v70 = *v13;
    v71 = CFStringCreateArrayBySeparatingStrings(*v13, a3, CFSTR("-"));
    v72 = v71;
    *(_QWORD *)&v206 = v71;
    if (v71)
    {
      *(_QWORD *)&v202 = 0;
      if (CFArrayGetCount(v71) == 2)
      {
        v73 = CFArrayGetValueAtIndex(v72, 1);
        v74 = CFRetain(v73);
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v202, v74);
        v75 = (const __CFString *)CFArrayGetValueAtIndex(v72, 0);
        v213.length = CFStringGetLength(v75) - 4;
        v213.location = 4;
        *(_QWORD *)&v200[0] = CFStringCreateWithSubstring(v70, v75, v213);
        IntValue = CFStringGetIntValue(*(CFStringRef *)&v200[0]);
        v77 = *a1;
        v78 = (__CFString *)*((_QWORD *)*a1 + 24);
        if (v78)
        {
          v78 = (__CFString *)CFBundleGetBundleWithIdentifier(v78);
          v77 = *a1;
        }
        v79 = copyLocalizedString((__CFBundle *)v78, CFSTR("Dates"), (const __CFString *)v202, *((const __CFString **)v77 + 17));
        theString = v79;
        if (v79 && (_DWORD)IntValue)
        {
          v80 = CFStringCreateWithFormat(v70, 0, v79, IntValue);
          nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v211, v80);
        }
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&theString, 0);
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)v200, 0);
      }
      if ((_QWORD)v202)
        CFRelease((CFTypeRef)v202);
      CFRelease(v72);
    }
    goto LABEL_190;
  }
  if (CFStringHasPrefix(a3, CFSTR("FORMATTED")))
  {
    v90 = a7;
    v91 = (std::__shared_weak_count *)a2[1];
    v178[0] = *a2;
    v178[1] = v91;
    if (v91)
    {
      v92 = (unint64_t *)&v91->__shared_owners_;
      do
        v93 = __ldxr(v92);
      while (__stxr(v93 + 1, v92));
    }
    v94 = QP::DateFormatter::copyShortDisplayForDate(a1, (uint64_t)v178, a6, v90);
    if (v211)
      CFRelease(v211);
    v211 = v94;
    if (v91)
    {
      v95 = (unint64_t *)&v91->__shared_owners_;
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    goto LABEL_190;
  }
  if (CFStringHasSuffix(a3, CFSTR("ORDINAL_WEEKDAY")))
  {
    v131 = *(unsigned int *)(*a2 + 52);
    if ((v131 & 0x80000000) == 0)
    {
      v132 = *v13;
      *(_QWORD *)&v206 = CFStringCreateArrayBySeparatingStrings(*v13, a3, CFSTR("_"));
      v133 = CFArrayGetValueAtIndex((CFArrayRef)v206, 0);
      v134 = CFStringCreateWithFormat(v132, 0, CFSTR("%@_%d_ORDINAL_WEEKDAY"), v133, v131);
      *(_QWORD *)&v202 = v134;
      v135 = *a1;
      v136 = (__CFString *)*((_QWORD *)*a1 + 24);
      if (v136)
      {
        v136 = (__CFString *)CFBundleGetBundleWithIdentifier(v136);
        v134 = (const __CFString *)v202;
        v135 = *a1;
      }
      v137 = copyLocalizedString((__CFBundle *)v136, CFSTR("Dates"), v134, *((const __CFString **)v135 + 17));
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v211, v137);
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v202, 0);
      nlp::CFScopedPtr<__CFArray const*>::reset((const void **)&v206, 0);
      goto LABEL_190;
    }
    v171 = *a1;
    v172 = (__CFString *)*((_QWORD *)*a1 + 24);
    if (v172)
    {
      v172 = (__CFString *)CFBundleGetBundleWithIdentifier(v172);
      v171 = *a1;
    }
LABEL_227:
    v173 = copyLocalizedString((__CFBundle *)v172, CFSTR("Dates"), a3, *((const __CFString **)v171 + 17));
    nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v211, v173);
    goto LABEL_190;
  }
  if (!CFStringHasPrefix(a3, CFSTR("holiday")))
  {
    v171 = *a1;
    v172 = (__CFString *)*((_QWORD *)*a1 + 24);
    if (v172)
    {
      v172 = (__CFString *)CFBundleGetBundleWithIdentifier(v172);
      v171 = *a1;
    }
    goto LABEL_227;
  }
  v154 = a2[1];
  v177[0] = *a2;
  v177[1] = v154;
  if (v154)
  {
    v155 = (unint64_t *)(v154 + 8);
    do
      v156 = __ldxr(v155);
    while (__stxr(v156 + 1, v155));
  }
  v157 = QP::DateFormatter::copyShortDisplayForDate(a1, (uint64_t)v177, a6, a7);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v211, v157);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v177);
LABEL_190:
  *(_QWORD *)&v206 = 0;
  if ((a5 & 1) == 0)
  {
    switch(a4)
    {
      case 5u:
        v160 = *a1;
        v161 = (__CFString *)*((_QWORD *)*a1 + 24);
        if (v161)
        {
          v161 = (__CFString *)CFBundleGetBundleWithIdentifier(v161);
          v160 = *a1;
        }
        v162 = copyLocalizedString((__CFBundle *)v161, CFSTR("Dates"), CFSTR("BEFORE_DATE"), *((const __CFString **)v160 + 17));
        break;
      case 6u:
        v163 = *a1;
        v164 = (__CFString *)*((_QWORD *)*a1 + 24);
        if (v164)
        {
          v164 = (__CFString *)CFBundleGetBundleWithIdentifier(v164);
          v163 = *a1;
        }
        v162 = copyLocalizedString((__CFBundle *)v164, CFSTR("Dates"), CFSTR("AFTER_DATE"), *((const __CFString **)v163 + 17));
        break;
      case 7u:
        v165 = *a1;
        v166 = (__CFString *)*((_QWORD *)*a1 + 24);
        if (v166)
        {
          v166 = (__CFString *)CFBundleGetBundleWithIdentifier(v166);
          v165 = *a1;
        }
        v162 = copyLocalizedString((__CFBundle *)v166, CFSTR("Dates"), CFSTR("SINCE_DATE"), *((const __CFString **)v165 + 17));
        break;
      case 8u:
        v167 = *a1;
        v168 = (__CFString *)*((_QWORD *)*a1 + 24);
        if (v168)
        {
          v168 = (__CFString *)CFBundleGetBundleWithIdentifier(v168);
          v167 = *a1;
        }
        v162 = copyLocalizedString((__CFBundle *)v168, CFSTR("Dates"), CFSTR("TO_DATE"), *((const __CFString **)v167 + 17));
        break;
      default:
        goto LABEL_207;
    }
    v169 = v162;
    *(_QWORD *)&v206 = v162;
    if (v162)
    {
      v49 = (__CFString *)CFStringCreateWithFormat(*v13, 0, v162, v211);
      if (v212)
        CFRelease(v212);
      goto LABEL_211;
    }
  }
LABEL_207:
  if (v211)
  {
    v49 = (__CFString *)CFStringCreateCopy(*v13, v211);
    if (v212)
      CFRelease(v212);
    v169 = 0;
LABEL_211:
    v212 = v49;
    if (!v49)
      goto LABEL_215;
    goto LABEL_214;
  }
  v169 = 0;
  v49 = v212;
  if (v212)
  {
LABEL_214:
    v49 = CFStringCreateMutableCopy(*v13, 0, v49);
    v219.length = CFStringGetLength(v49);
    v219.location = 0;
    CFStringFindAndReplace(v49, CFSTR(" "), CFSTR(" "), v219, 0);
  }
LABEL_215:
  if (v169)
    CFRelease(v169);
  if (v211)
    CFRelease(v211);
  if (v212)
    CFRelease(v212);
  return v49;
}

void sub_218E506A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,const void *a45,uint64_t a46,const void *a47,uint64_t a48,uint64_t a49,uint64_t a50,const void *a51)
{
  uint64_t v51;

  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v51 - 120), 0);
  nlp::CFScopedPtr<__CFString *>::reset(&a45, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a47, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a51, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v51 - 240), 0);
  nlp::CFScopedPtr<__CFArray const*>::reset((const void **)(v51 - 176), 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v51 - 112), 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v51 - 104), 0);
  _Unwind_Resume(a1);
}

void QP::DatePeriod::setDisplayKey(const void **this, const __CFString *a2)
{
  CFTypeRef v4;

  nlp::CFScopedPtr<__CFString const*>::reset(this, 0);
  if (a2)
  {
    v4 = CFRetain(a2);
    nlp::CFScopedPtr<__CFString const*>::reset(this, v4);
  }
}

__CFString *QP::DateFormatter::copyDisplayForDate(CFDateFormatterRef *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __CFString *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v12[2];

  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  v12[0] = *a2;
  v12[1] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v4 = *a2;
  }
  v8 = QP::DateFormatter::copyDisplayForPeriodWithKey(a1, v12, *(const __CFString **)v4, *(unsigned __int16 *)(v4 + 12), 0, a3, a4);
  if (v5)
  {
    v9 = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v8;
}

void sub_218E50A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__CFString *QP::DateFormatter::copyDisplayForDate(CFDateFormatterRef *a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  const __CFString **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __CFString *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v14[2];

  v6 = *(const __CFString ***)a2;
  v7 = *(std::__shared_weak_count **)(a2 + 8);
  v14[0] = *(_QWORD *)a2;
  v14[1] = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v6 = *(const __CFString ***)a2;
  }
  v10 = QP::DateFormatter::copyDisplayForPeriodWithKey(a1, v14, *v6, a3, a4, a5, a6);
  if (v7)
  {
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v10;
}

void sub_218E50B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__CFDictionary *QP::DateFormatter::copyStartComponentsForDate(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  _OWORD v17[3];
  int v18;
  __int128 v19[3];
  int v20;
  __int128 v21[3];
  int v22;

  v3 = *a2;
  v4 = *(_OWORD *)(*a2 + 20);
  v5 = *(_OWORD *)(*a2 + 52);
  v21[1] = *(_OWORD *)(*a2 + 36);
  v21[2] = v5;
  v22 = *(_DWORD *)(v3 + 68);
  v21[0] = v4;
  v6 = *(_OWORD *)(v3 + 88);
  v19[0] = *(_OWORD *)(v3 + 72);
  v19[1] = v6;
  v19[2] = *(_OWORD *)(v3 + 104);
  v20 = *(_DWORD *)(v3 + 120);
  v7 = *(_OWORD *)(v3 + 140);
  v17[0] = *(_OWORD *)(v3 + 124);
  v17[1] = v7;
  v17[2] = *(_OWORD *)(v3 + 156);
  v18 = *(_DWORD *)(v3 + 172);
  v8 = (std::__shared_weak_count *)a1[1];
  v15 = *a1;
  v16 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v3 = *a2;
  }
  QP::DateConverter::resolveDateComponentsAsRange((uint64_t)&v15, *(unsigned __int16 *)(v3 + 12), *(_DWORD *)(v3 + 8), v21, v19, (uint64_t)v17, 1);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if ((QP::DateComponents::isEmpty((QP::DateComponents *)v21) & 1) != 0)
    return 0;
  else
    return QP::copyDateComponentsDictionary(*(QP **)(*a1 + 80), *(__CFCalendar **)(*a1 + 72), (const __CFDate *)v21, 0);
}

void sub_218E50C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__CFDictionary *QP::copyDateComponentsDictionary(QP *this, __CFCalendar *a2, const __CFDate *a3, const QP::DateComponents *a4)
{
  int v4;
  double AbsoluteTime;
  const __CFAllocator *v8;
  __CFDictionary *Mutable;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int valuePtr;

  v4 = (int)a4;
  AbsoluteTime = QP::DateComponents::getAbsoluteTime(a3, this, a2);
  v31 = -1;
  valuePtr = -1;
  v29 = -1;
  v30 = -1;
  v27 = -1;
  v28 = -1;
  v25 = -1;
  v26 = -1;
  v23 = -1;
  v24 = -1;
  v22 = -1;
  if (v4)
  {
    if ((*((_DWORD *)a3 + 3) & 0x80000000) == 0)
      valuePtr = *((_DWORD *)a3 + 3);
    if ((*((_DWORD *)a3 + 4) & 0x80000000) == 0)
      v31 = *((_DWORD *)a3 + 4);
    if ((*((_DWORD *)a3 + 5) & 0x80000000) == 0)
      v30 = *((_DWORD *)a3 + 5);
    if ((*((_DWORD *)a3 + 8) & 0x80000000) == 0)
      v24 = *((_DWORD *)a3 + 8);
    if ((*((_DWORD *)a3 + 9) & 0x80000000) == 0)
      v23 = *((_DWORD *)a3 + 9);
    if ((*((_DWORD *)a3 + 10) & 0x80000000) == 0)
      v25 = *((_DWORD *)a3 + 10);
    if ((*((_DWORD *)a3 + 11) & 0x80000000) == 0)
      v26 = *((_DWORD *)a3 + 11);
    if ((*((_DWORD *)a3 + 2) & 0x80000000) == 0)
      v29 = *((_DWORD *)a3 + 2);
    if ((*((_DWORD *)a3 + 1) & 0x80000000) == 0)
      v28 = *((_DWORD *)a3 + 1);
    if ((*(_DWORD *)a3 & 0x80000000) == 0)
      v27 = *(_DWORD *)a3;
  }
  else
  {
    if ((*((_DWORD *)a3 + 9) & 0x80000000) == 0)
      v23 = *((_DWORD *)a3 + 9);
    CFCalendarDecomposeAbsoluteTime(this, AbsoluteTime, "dMyEwWYHms", &valuePtr, &v31, &v30, &v24, &v26, &v25, &v22, &v29, &v28, &v27);
    if (v23 == 0x7FFFFFFF)
      v23 = -1;
  }
  v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if ((*((_DWORD *)a3 + 3) & 0x80000000) == 0)
  {
    v10 = CFNumberCreate(v8, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(Mutable, CFSTR("d"), v10);
    if (v10)
      CFRelease(v10);
  }
  if ((*((_DWORD *)a3 + 4) & 0x80000000) == 0)
  {
    v11 = CFNumberCreate(v8, kCFNumberIntType, &v31);
    CFDictionarySetValue(Mutable, CFSTR("M"), v11);
    if (v11)
      CFRelease(v11);
  }
  if ((*((_DWORD *)a3 + 5) & 0x80000000) == 0)
  {
    v12 = CFNumberCreate(v8, kCFNumberIntType, &v30);
    CFDictionarySetValue(Mutable, CFSTR("y"), v12);
    if (v12)
      CFRelease(v12);
  }
  if ((*((_DWORD *)a3 + 8) & 0x80000000) == 0)
  {
    v13 = CFNumberCreate(v8, kCFNumberIntType, &v24);
    CFDictionarySetValue(Mutable, CFSTR("E"), v13);
    if (v13)
      CFRelease(v13);
  }
  if ((*((_DWORD *)a3 + 9) & 0x80000000) == 0)
  {
    v14 = CFNumberCreate(v8, kCFNumberIntType, &v23);
    CFDictionarySetValue(Mutable, CFSTR("F"), v14);
    if (v14)
      CFRelease(v14);
  }
  if ((*((_DWORD *)a3 + 10) & 0x80000000) == 0)
  {
    v15 = CFNumberCreate(v8, kCFNumberIntType, &v25);
    CFDictionarySetValue(Mutable, CFSTR("W"), v15);
    if (v15)
      CFRelease(v15);
  }
  if ((*((_DWORD *)a3 + 11) & 0x80000000) == 0)
  {
    v16 = CFNumberCreate(v8, kCFNumberIntType, &v26);
    CFDictionarySetValue(Mutable, CFSTR("w"), v16);
    if (v16)
      CFRelease(v16);
  }
  if ((*((_DWORD *)a3 + 12) & 0x80000000) == 0)
  {
    v17 = CFNumberCreate(v8, kCFNumberIntType, &v22);
    CFDictionarySetValue(Mutable, CFSTR("Y"), v17);
    if (v17)
      CFRelease(v17);
  }
  if ((*((_DWORD *)a3 + 2) & 0x80000000) == 0)
  {
    v18 = CFNumberCreate(v8, kCFNumberIntType, &v29);
    CFDictionarySetValue(Mutable, CFSTR("H"), v18);
    if (v18)
      CFRelease(v18);
  }
  if ((*((_DWORD *)a3 + 1) & 0x80000000) == 0)
  {
    v19 = CFNumberCreate(v8, kCFNumberIntType, (char *)a3 + 4);
    CFDictionarySetValue(Mutable, CFSTR("m"), v19);
    if (v19)
      CFRelease(v19);
  }
  if ((*(_DWORD *)a3 & 0x80000000) == 0)
  {
    v20 = CFNumberCreate(v8, kCFNumberIntType, a3);
    CFDictionarySetValue(Mutable, CFSTR("s"), v20);
    if (v20)
      CFRelease(v20);
  }
  return Mutable;
}

void sub_218E510D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

__CFDictionary *QP::DateFormatter::copyEndComponentsForDate(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  _OWORD v17[3];
  int v18;
  __int128 v19[3];
  int v20;
  __int128 v21[3];
  int v22;

  v3 = *a2;
  v4 = *(_OWORD *)(*a2 + 20);
  v5 = *(_OWORD *)(*a2 + 52);
  v21[1] = *(_OWORD *)(*a2 + 36);
  v21[2] = v5;
  v22 = *(_DWORD *)(v3 + 68);
  v21[0] = v4;
  v6 = *(_OWORD *)(v3 + 88);
  v19[0] = *(_OWORD *)(v3 + 72);
  v19[1] = v6;
  v19[2] = *(_OWORD *)(v3 + 104);
  v20 = *(_DWORD *)(v3 + 120);
  v7 = *(_OWORD *)(v3 + 140);
  v17[0] = *(_OWORD *)(v3 + 124);
  v17[1] = v7;
  v17[2] = *(_OWORD *)(v3 + 156);
  v18 = *(_DWORD *)(v3 + 172);
  v8 = (std::__shared_weak_count *)a1[1];
  v15 = *a1;
  v16 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v3 = *a2;
  }
  QP::DateConverter::resolveDateComponentsAsRange((uint64_t)&v15, *(unsigned __int16 *)(v3 + 12), *(_DWORD *)(v3 + 8), v21, v19, (uint64_t)v17, 1);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if ((QP::DateComponents::isEmpty((QP::DateComponents *)v19) & 1) != 0)
    return 0;
  else
    return QP::copyDateComponentsDictionary(*(QP **)(*a1 + 80), *(__CFCalendar **)(*a1 + 72), (const __CFDate *)v19, 0);
}

void sub_218E51234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__CFDictionary *QP::DateFormatter::copyFreqComponentsForDate(uint64_t a1, uint64_t a2)
{
  if ((QP::DateComponents::isEmpty((QP::DateComponents *)(*(_QWORD *)a2 + 124)) & 1) != 0)
    return 0;
  else
    return QP::copyDateComponentsDictionary(*(QP **)(*(_QWORD *)a1 + 80), *(__CFCalendar **)(*(_QWORD *)a1 + 72), (const __CFDate *)(*(_QWORD *)a2 + 124), (const QP::DateComponents *)1);
}

CFStringRef QP::DateFormatter::copyDisplayStringWithStartAndEndDateForRange(QP::DateFormatter *this, const __CFString *a2, CFDictionaryRef theDict, const __CFString *a4, const __CFDictionary *a5)
{
  CFStringRef v5;
  int v11;
  const __CFNumber *Value;
  const __CFNumber *v13;
  uint64_t v14;
  __CFString *BundleWithIdentifier;
  const __CFString *v16;
  CFStringRef Copy;
  uint64_t v18;
  __CFString *v19;
  const __CFString *v20;
  CFStringRef v21;
  uint64_t v22;
  __CFString *v23;
  const __CFString *v24;
  const __CFString *v26;
  int v27;
  int valuePtr;
  CFTypeRef cf;
  CFTypeRef v30;

  v5 = 0;
  if (a2)
  {
    if (theDict)
    {
      v11 = CFDictionaryContainsKey(theDict, kQPParseAttributeValueDateTemporalModifierKey);
      v5 = 0;
      if (a5)
      {
        if (a4 && v11)
        {
          if (CFDictionaryContainsKey(a5, kQPParseAttributeValueDateTemporalModifierKey))
          {
            cf = 0;
            v30 = 0;
            Value = (const __CFNumber *)CFDictionaryGetValue(theDict, kQPParseAttributeValueDateTemporalModifierKey);
            v13 = (const __CFNumber *)CFDictionaryGetValue(a5, kQPParseAttributeValueDateTemporalModifierKey);
            valuePtr = 0;
            CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
            v27 = 0;
            CFNumberGetValue(v13, kCFNumberIntType, &v27);
            if (valuePtr == 3)
            {
              v14 = *(_QWORD *)this;
              BundleWithIdentifier = *(__CFString **)(*(_QWORD *)this + 192);
              if (BundleWithIdentifier)
              {
                BundleWithIdentifier = (__CFString *)CFBundleGetBundleWithIdentifier(BundleWithIdentifier);
                v14 = *(_QWORD *)this;
              }
              v16 = copyLocalizedString((__CFBundle *)BundleWithIdentifier, CFSTR("Dates"), CFSTR("FROM_DATE"), *(const __CFString **)(v14 + 136));
              if (v16)
              {
                Copy = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, v16, a2);
                v30 = Copy;
                CFRelease(v16);
              }
              else
              {
                Copy = 0;
              }
            }
            else
            {
              Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], a2);
              v30 = Copy;
            }
            if (v27 == 3)
            {
              v18 = *(_QWORD *)this;
              v19 = *(__CFString **)(*(_QWORD *)this + 192);
              if (v19)
              {
                v19 = (__CFString *)CFBundleGetBundleWithIdentifier(v19);
                v18 = *(_QWORD *)this;
              }
              v20 = copyLocalizedString((__CFBundle *)v19, CFSTR("Dates"), CFSTR("TO_DATE"), *(const __CFString **)(v18 + 136));
              if (v20)
              {
                v21 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, v20, a4);
                cf = v21;
                CFRelease(v20);
              }
              else
              {
                v21 = 0;
              }
            }
            else
            {
              v21 = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], a4);
              cf = v21;
            }
            v22 = *(_QWORD *)this;
            v23 = *(__CFString **)(*(_QWORD *)this + 192);
            if (v23)
            {
              v23 = (__CFString *)CFBundleGetBundleWithIdentifier(v23);
              v22 = *(_QWORD *)this;
            }
            v24 = copyLocalizedString((__CFBundle *)v23, CFSTR("Dates"), CFSTR("DATE1_DATE2"), *(const __CFString **)(v22 + 136));
            v26 = v24;
            v5 = 0;
            if (v24)
            {
              if (!Copy
                || !v21
                || (v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, v24, Copy, v21),
                    (v24 = v26) != 0))
              {
                CFRelease(v24);
              }
            }
            if (cf)
              CFRelease(cf);
            if (v30)
              CFRelease(v30);
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return v5;
}

void sub_218E51538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void *v4;
  va_list va;
  uint64_t v6;
  const void *v7;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, const void *);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, const void *);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va1, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va2, 0);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void QP::DateComponents::enumerate(unsigned int *a1, uint64_t a2)
{
  unsigned int v4;
  _BOOL8 v5;
  void **v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  _QWORD v15[2];
  char v16;
  void *v17[2];
  char v18;
  void *__p[2];
  char v20;
  _QWORD v21[2];
  char v22;
  void *v23[2];
  char v24;
  void *v25[2];
  char v26;
  void *v27[2];
  char v28;
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  void *v33[2];
  char v34;

  if ((a1[3] & 0x80000000) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v33, "d");
    (*(void (**)(uint64_t, void **, _QWORD))(a2 + 16))(a2, v33, a1[3]);
    if (v34 < 0)
      operator delete(v33[0]);
  }
  if ((a1[4] & 0x80000000) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v31, "MMMM");
    (*(void (**)(uint64_t, void **, _QWORD))(a2 + 16))(a2, v31, a1[4]);
    if (v32 < 0)
      operator delete(v31[0]);
  }
  if ((a1[5] & 0x80000000) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "y");
    (*(void (**)(uint64_t, void **, _QWORD))(a2 + 16))(a2, v29, a1[5]);
    if (v30 < 0)
      operator delete(v29[0]);
  }
  if ((a1[2] & 0x80000000) == 0 || (a1[1] & 0x80000000) == 0 || (*a1 & 0x80000000) == 0)
  {
    if ((a1[7] & 0x80000000) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "H");
      (*(void (**)(uint64_t, void **, _QWORD))(a2 + 16))(a2, __p, a1[2] & ~((int)a1[2] >> 31));
      if (v20 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(v17, "m");
      (*(void (**)(uint64_t, void **, _QWORD))(a2 + 16))(a2, v17, a1[1] & ~((int)a1[1] >> 31));
      if (v18 < 0)
        operator delete(v17[0]);
      if ((*a1 & 0x80000000) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v15, "s");
        (*(void (**)(uint64_t, _QWORD *, _QWORD))(a2 + 16))(a2, v15, *a1);
        if (v16 < 0)
        {
          v6 = (void **)v15;
LABEL_34:
          operator delete(*v6);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "h");
      (*(void (**)(uint64_t, void **, _QWORD))(a2 + 16))(a2, v27, a1[2] & ~((int)a1[2] >> 31));
      if (v28 < 0)
        operator delete(v27[0]);
      std::string::basic_string[abi:ne180100]<0>(v25, "m");
      (*(void (**)(uint64_t, void **, _QWORD))(a2 + 16))(a2, v25, a1[1] & ~((int)a1[1] >> 31));
      if (v26 < 0)
        operator delete(v25[0]);
      if ((*a1 & 0x80000000) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v23, "s");
        (*(void (**)(uint64_t, void **, _QWORD))(a2 + 16))(a2, v23, *a1);
        if (v24 < 0)
          operator delete(v23[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v21, "a");
      v4 = a1[7];
      v5 = v4 > 8 || ((1 << v4) & 0x10A) == 0;
      (*(void (**)(uint64_t, _QWORD *, _BOOL8))(a2 + 16))(a2, v21, v5);
      if (v22 < 0)
      {
        v6 = (void **)v21;
        goto LABEL_34;
      }
    }
  }
  if ((a1[8] & 0x80000000) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "EEEE");
    (*(void (**)(uint64_t, void **, _QWORD))(a2 + 16))(a2, v13, a1[8]);
    if (v14 < 0)
      operator delete(v13[0]);
  }
  if ((a1[11] & 0x80000000) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "w");
    (*(void (**)(uint64_t, void **, _QWORD))(a2 + 16))(a2, v11, a1[11]);
    if (v12 < 0)
      operator delete(v11[0]);
  }
  if ((a1[10] & 0x80000000) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "W");
    (*(void (**)(uint64_t, void **, _QWORD))(a2 + 16))(a2, v9, a1[10]);
    if (v10 < 0)
      operator delete(v9[0]);
  }
  if ((a1[12] & 0x80000000) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "Y");
    (*(void (**)(uint64_t, void **, _QWORD))(a2 + 16))(a2, v7, a1[12]);
    if (v8 < 0)
      operator delete(v7[0]);
  }
}

void sub_218E51980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a38 < 0)
    operator delete(a33);
  _Unwind_Resume(exception_object);
}

void ___ZNK2QP14DateComponents25getShortFormatWithOptionsEbPd_block_invoke(uint64_t a1, uint64_t a2)
{
  _BOOL4 v4;
  _BOOL4 v5;
  std::string *v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  int v9;
  int v10;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;

  std::string::basic_string[abi:ne180100]<0>(v15, "w");
  if (QP::equals((_QWORD *)a2, v15))
  {
    v4 = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "Y");
    if (QP::equals((_QWORD *)a2, v13))
    {
      v4 = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "F");
      v4 = !QP::equals((_QWORD *)a2, __p);
      if (v12 < 0)
        operator delete(__p[0]);
    }
    if (v14 < 0)
      operator delete(v13[0]);
  }
  if (v16 < 0)
  {
    operator delete(v15[0]);
    if (!v4)
      return;
LABEL_13:
    std::string::basic_string[abi:ne180100]<0>(v15, "h");
    if (QP::equals((_QWORD *)a2, v15))
    {
      v5 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v13, "H");
      v5 = QP::equals((_QWORD *)a2, v13);
      if (v14 < 0)
        operator delete(v13[0]);
    }
    if (v16 < 0)
    {
      operator delete(v15[0]);
      if (v5)
        goto LABEL_19;
    }
    else if (v5)
    {
LABEL_19:
      v6 = (std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
      v7 = "ha";
      v8 = 2;
LABEL_34:
      std::string::append(v6, v7, v8);
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(v15, "y");
    if (QP::equals((_QWORD *)a2, v15))
    {
      v9 = *(unsigned __int8 *)(a1 + 40);
      if (v16 < 0)
        operator delete(v15[0]);
      if (v9)
      {
        v6 = (std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
        v7 = "GGGGyy";
        v8 = 6;
        goto LABEL_34;
      }
    }
    else if (v16 < 0)
    {
      operator delete(v15[0]);
    }
    v6 = (std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    v10 = *(char *)(a2 + 23);
    if (v10 >= 0)
      v7 = (const std::string::value_type *)a2;
    else
      v7 = *(const std::string::value_type **)a2;
    if (v10 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 23);
    else
      v8 = *(_QWORD *)(a2 + 8);
    goto LABEL_34;
  }
  if (v4)
    goto LABEL_13;
}

void sub_218E51C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZNK2QP14DateComponents25getShortFormatWithOptionsEbPd_block_invoke_2(uint64_t a1, uint64_t a2)
{
  _BOOL4 v4;
  _BOOL4 v5;
  std::string *v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  _BOOL4 v9;
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  int v13;
  void *v14[2];
  char v15;
  void *v16[2];
  char v17;
  void *__p[2];
  char v19;

  std::string::basic_string[abi:ne180100]<0>(__p, "w");
  v4 = QP::equals((_QWORD *)a2, __p);
  v5 = v4;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (v5)
      goto LABEL_3;
  }
  else if (v4)
  {
LABEL_3:
    v6 = (std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    v7 = "d";
    v8 = 1;
LABEL_37:
    std::string::append(v6, v7, v8);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Y");
  v9 = QP::equals((_QWORD *)a2, __p);
  v10 = v9;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (v10)
    {
LABEL_7:
      v6 = (std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
      if (*(_BYTE *)(a1 + 40))
      {
        v7 = "MMMMGy";
        v8 = 6;
      }
      else
      {
        v7 = "MMMMy";
        v8 = 5;
      }
      goto LABEL_37;
    }
  }
  else if (v9)
  {
    goto LABEL_7;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "d");
  if (QP::equals((_QWORD *)a2, __p))
  {
    v11 = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "M");
    if (QP::equals((_QWORD *)a2, v16))
    {
      v11 = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v14, "y");
      v11 = !QP::equals((_QWORD *)a2, v14);
      if (v15 < 0)
        operator delete(v14[0]);
    }
    if (v17 < 0)
      operator delete(v16[0]);
  }
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (!v11)
      return;
    goto LABEL_23;
  }
  if (v11)
  {
LABEL_23:
    std::string::basic_string[abi:ne180100]<0>(__p, "h");
    if (QP::equals((_QWORD *)a2, __p))
    {
      v12 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v16, "H");
      v12 = QP::equals((_QWORD *)a2, v16);
      if (v17 < 0)
        operator delete(v16[0]);
    }
    if (v19 < 0)
      operator delete(__p[0]);
    v6 = (std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    if (v12)
    {
      v7 = "ha";
      v8 = 2;
    }
    else
    {
      v13 = *(char *)(a2 + 23);
      if (v13 >= 0)
        v7 = (const std::string::value_type *)a2;
      else
        v7 = *(const std::string::value_type **)a2;
      if (v13 >= 0)
        v8 = *(unsigned __int8 *)(a2 + 23);
      else
        v8 = *(_QWORD *)(a2 + 8);
    }
    goto LABEL_37;
  }
}

void sub_218E51F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<QP::DatePeriod>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA25840;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::DatePeriod>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA25840;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A24D0CLL);
}

void std::__shared_ptr_emplace<QP::DatePeriod>::__on_zero_shared(uint64_t a1)
{
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(a1 + 24), 0);
}

uint64_t QP::SpotlightFormatter::isValid(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (*a2)
  {
    if (*(_QWORD *)result)
      return *(_QWORD *)(result + 88) || QP::Parse::isValid((CFStringRef *)result);
    else
      return 0;
  }
  return result;
}

BOOL QP::Parse::isValid(CFStringRef *this)
{
  CFMutableStringRef MutableCopy;
  CFStringRef v3;
  CFStringRef v4;
  CFIndex Length;
  _BOOL8 v6;

  if (!*this)
    return 0;
  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, *this);
  CFStringTrimWhitespace(MutableCopy);
  v4 = this[8];
  v3 = this[9];
  Length = CFStringGetLength(MutableCopy);
  v6 = 0;
  if (!v4 && v3 == (CFStringRef)Length)
    v6 = this[5] == this[4];
  if (MutableCopy)
    CFRelease(MutableCopy);
  return v6;
}

void sub_218E520C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t QP::SpotlightFormatter::setCompletion(QP::SpotlightFormatter *a1, const void ***a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  const void **v11;
  unsigned int v12;
  const __CFAllocator *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  CFIndex Count;
  CFStringRef v18;
  const void **v19;
  CFStringRef v20;
  CFMutableDictionaryRef v21;
  _BOOL4 v22;
  __int128 v23;
  _BOOL4 v24;
  BOOL v25;
  uint64_t v26;
  const void **v28;
  const __CFString *v29;
  CFIndex v30;
  const void *v31;
  const __CFString *v32;
  CFIndex Length;
  CFTypeRef v34;
  _BOOL4 v35;
  _BOOL4 v36;
  int HasPrefix;
  uint64_t v38;
  uint64_t v39;
  _BOOL4 v40;
  int v41;
  const __CFString *v42;
  int v43;
  _BOOL4 v44;
  BOOL v45;
  _BOOL4 v46;
  BOOL v47;
  _BOOL4 v48;
  BOOL v49;
  _BOOL4 v50;
  BOOL v51;
  _BOOL4 v52;
  BOOL v53;
  _BOOL4 v54;
  BOOL v55;
  _BOOL4 v56;
  BOOL v57;
  const void *v58;
  const __CFDictionary *v59;
  const __CFNumber *Value;
  const __CFNumber *v61;
  const __CFNumber *v62;
  const __CFNumber *v63;
  const __CFNumber *v64;
  const __CFNumber *v65;
  const __CFNumber *v66;
  const __CFNumber *v67;
  const __CFNumber *v68;
  BOOL v69;
  BOOL v70;
  BOOL v71;
  BOOL v72;
  char *v73;
  unint64_t *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  double AbsoluteTime;
  CFDateFormatterRef *v81;
  unint64_t v82;
  __CFString *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  const void **v88;
  const __CFString *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[8];
  std::__shared_weak_count *v107;
  const void **v108;
  std::__shared_weak_count *v109;
  int v110;
  char *v111;
  std::__shared_weak_count *v112;
  void *v113[2];
  char v114;
  void *valuePtr;
  std::__shared_weak_count *v116;
  char v117;
  __int128 v118;
  __int128 v119;
  CFTypeRef cf[2];
  int v121;
  void *__p[2];
  __int128 v123;
  _BYTE v124[20];
  int v125;
  uint64_t v126;
  uint64_t v127;
  CFAbsoluteTime at;
  CFTypeRef v129;
  CFTypeRef v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t (*v134)(uint64_t, uint64_t);
  void (*v135)(uint64_t);
  CFTypeRef v136;
  uint64_t v137;
  const void **v138;
  uint64_t v139;
  uint64_t (*v140)(uint64_t, uint64_t);
  void (*v141)(uint64_t);
  CFTypeRef v142;
  _QWORD v143[5];
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t (*v147)(uint64_t, uint64_t);
  void (*v148)(uint64_t);
  CFMutableArrayRef Mutable;
  void *v150[2];
  char v151;
  void *v152[2];
  char v153;
  void *v154[2];
  char v155;
  const void **v156;
  std::__shared_weak_count *v157;

  QP::SpotlightFormatter::clear(a1);
  QP::Formatter::clear((const void **)a1);
  v4 = (std::__shared_weak_count *)a2[1];
  v156 = *a2;
  v157 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = QP::Formatter::setCompletion((const void **)a1);
  v8 = v7;
  if (v157)
  {
    v9 = &v157->__shared_owners_;
    do
      v10 = __ldaxr((unint64_t *)v9);
    while (__stlxr(v10 - 1, (unint64_t *)v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
      if (v8)
        goto LABEL_9;
      return 0;
    }
  }
  if (!v7)
    return 0;
LABEL_9:
  v11 = *a2;
  if (!**a2 || !v11[2] || !v11[3] || !v11[5] || !v11[6])
    return 0;
  QP::getUTF8StringFromCFString((const __CFString *)v11[4], v154);
  QP::getUTF8StringFromCFString((const __CFString *)(*a2)[5], v152);
  QP::getUTF8StringFromCFString((const __CFString *)(*a2)[6], v150);
  QP::ParserGrammar::symbolID(*((_QWORD *)a1 + 3), (uint64_t)v152);
  v12 = QP::ParserGrammar::symbolID(*((_QWORD *)a1 + 3), (uint64_t)v150);
  v144 = 0;
  v145 = &v144;
  v146 = 0x3002000000;
  v147 = __Block_byref_object_copy__6;
  v148 = __Block_byref_object_dispose__6;
  v13 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v14 = *((_WORD *)*a2 + 36);
  v15 = MEMORY[0x24BDAC760];
  v16 = (uint64_t)(*a2)[7];
  v143[0] = MEMORY[0x24BDAC760];
  v143[1] = 0x40000000;
  v143[2] = ___ZN2QP18SpotlightFormatter13setCompletionENSt3__110shared_ptrINS_10CompletionEEE_block_invoke;
  v143[3] = &unk_24DA25888;
  v143[4] = &v144;
  QP::SpotlightFormatter::_parseAttributeKey((uint64_t)a1, (uint64_t)v154, 0, v12, v14, v16, 0, 0, 0, 0, 0, 0, (uint64_t)v143);
  v137 = 0;
  v138 = (const void **)&v137;
  v139 = 0x3002000000;
  v140 = __Block_byref_object_copy__1_0;
  v141 = __Block_byref_object_dispose__2_0;
  v142 = 0;
  Count = CFArrayGetCount((CFArrayRef)v145[5]);
  if (Count)
  {
    v18 = CFStringCreateByCombiningStrings(v13, (CFArrayRef)v145[5], CFSTR(" || "));
    __p[0] = (void *)v18;
    if (CFStringGetLength(v18))
    {
      v19 = v138;
      if (Count <= 1)
        v20 = CFStringCreateWithFormat(v13, 0, CFSTR("%@"), v18);
      else
        v20 = CFStringCreateWithFormat(v13, 0, CFSTR("(%@)"), v18);
      nlp::CFScopedPtr<__CFString const*>::reset(v19 + 5, v20);
    }
    if (v18)
      CFRelease(v18);
  }
  v131 = 0;
  v132 = &v131;
  v133 = 0x3002000000;
  v134 = __Block_byref_object_copy__6;
  v135 = __Block_byref_object_dispose__6;
  v136 = CFArrayCreateMutable(v13, 1, MEMORY[0x24BDBD690]);
  v21 = CFDictionaryCreateMutable(v13, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v129 = 0;
  v130 = v21;
  if (!v138[5])
  {
LABEL_45:
    v32 = (const __CFString *)v138[5];
    if (v32)
    {
      Length = CFStringGetLength(v32);
      v34 = v129;
      if (Length)
      {
        if (v129)
          QP::Formatter::setSuggestionValue(a1, kQPSuggestionResultSuggestionKey, v129);
        else
          QP::Formatter::setSuggestionValue(a1, kQPSuggestionResultSuggestionKey, **a2);
        QP::Formatter::setSuggestionValue(a1, kQPSuggestionResultDescriptionKey, v138[5]);
        QP::Formatter::setSuggestionValue(a1, kQPSuggestionResultTokensKey, (const void *)v132[5]);
        QP::Formatter::setSuggestionValue(a1, kQPSuggestionResultTypeKey, (*a2)[3]);
        __p[0] = 0;
        __p[1] = __p;
        *(_QWORD *)&v123 = 0x3002000000;
        *((_QWORD *)&v123 + 1) = __Block_byref_object_copy__98;
        *(_QWORD *)v124 = __Block_byref_object_dispose__99;
        *(_QWORD *)&v124[8] = CFDictionaryCreateMutable(v13, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        v35 = CFStringsAreEqual((CFStringRef)(*a2)[5], CFSTR("KIND"));
        if (CFStringsAreEqual((CFStringRef)(*a2)[5], CFSTR("ATTACH")))
        {
          v36 = 1;
        }
        else
        {
          HasPrefix = CFStringHasPrefix((CFStringRef)(*a2)[5], CFSTR("PROATTACH"));
          v36 = HasPrefix != 0;
          if (!(v35 | HasPrefix))
          {
LABEL_64:
            QP::Formatter::setSuggestionValue(a1, kQPSuggestionResultRankCategoriesKey, *((const void **)__p[1] + 5));
            _Block_object_dispose(__p, 8);
            if (*(_QWORD *)&v124[8])
              CFRelease(*(CFTypeRef *)&v124[8]);
            v26 = 1;
            goto LABEL_67;
          }
        }
        if (v35)
        {
          valuePtr = (void *)1;
          *(_QWORD *)&v118 = 0;
          *((_QWORD *)&v118 + 1) = &v118;
          *(_QWORD *)&v119 = 0x3002000000;
          *((_QWORD *)&v119 + 1) = __Block_byref_object_copy__106;
          cf[0] = __Block_byref_object_dispose__107;
          cf[1] = CFNumberCreate(v13, kCFNumberCFIndexType, &valuePtr);
          if (*(_QWORD *)(*((_QWORD *)&v118 + 1) + 40))
          {
            v38 = *((_QWORD *)a1 + 3);
            v105[0] = v15;
            v105[1] = 0x40000000;
            v105[2] = ___ZN2QP18SpotlightFormatter13setCompletionENSt3__110shared_ptrINS_10CompletionEEE_block_invoke_108;
            v105[3] = &unk_24DA258E8;
            v105[4] = __p;
            v105[5] = &v118;
            QP::ParserGrammar::categories(v38, v12, (uint64_t)v105);
          }
          _Block_object_dispose(&v118, 8);
          if (cf[1])
            CFRelease(cf[1]);
        }
        if (v36)
        {
          valuePtr = (void *)2;
          *(_QWORD *)&v118 = 0;
          *((_QWORD *)&v118 + 1) = &v118;
          *(_QWORD *)&v119 = 0x3002000000;
          *((_QWORD *)&v119 + 1) = __Block_byref_object_copy__106;
          cf[0] = __Block_byref_object_dispose__107;
          cf[1] = CFNumberCreate(v13, kCFNumberCFIndexType, &valuePtr);
          if (*(_QWORD *)(*((_QWORD *)&v118 + 1) + 40))
          {
            v39 = *((_QWORD *)a1 + 3);
            v104[0] = v15;
            v104[1] = 0x40000000;
            v104[2] = ___ZN2QP18SpotlightFormatter13setCompletionENSt3__110shared_ptrINS_10CompletionEEE_block_invoke_2;
            v104[3] = &unk_24DA25910;
            v104[4] = __p;
            v104[5] = &v118;
            QP::ParserGrammar::categories(v39, v12, (uint64_t)v104);
          }
          _Block_object_dispose(&v118, 8);
          nlp::CFScopedPtr<__CFNumber const*>::reset(&cf[1], 0);
        }
        goto LABEL_64;
      }
      v26 = 0;
    }
    else
    {
      v26 = 0;
      v34 = v129;
    }
LABEL_67:
    if (v34)
      CFRelease(v34);
    goto LABEL_69;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "kQPDate");
  v22 = QP::startswith((unsigned __int8 *)v154, (unsigned __int8 *)__p);
  if (SBYTE7(v123) < 0)
    operator delete(__p[0]);
  if (!v22)
  {
    if (v138[5])
    {
      CFDictionarySetValue(v21, CFSTR("TEXT"), (*a2)[2]);
      CFDictionarySetValue(v21, CFSTR("QUERY"), v138[5]);
      v28 = *a2;
      v29 = (const __CFString *)(*a2)[1];
      if (v29)
      {
        v30 = CFStringGetLength(v29);
        v28 = *a2;
        if (v30)
        {
          CFDictionarySetValue(v21, CFSTR("TOKEN"), v28[1]);
          v28 = *a2;
        }
      }
      if (*((_WORD *)v28 + 36) == 5)
      {
        v31 = v28[7];
        if (v31)
          CFDictionarySetValue(v21, CFSTR("STATUS"), v31);
      }
      CFArrayAppendValue((CFMutableArrayRef)v132[5], v21);
    }
    goto LABEL_45;
  }
  if (!(*a2)[1] || !(*a2)[2])
    goto LABEL_45;
  at = getCurrentTime(*(__CFCalendar **)(*((_QWORD *)a1 + 1) + 80), *(const __CFDate **)(*((_QWORD *)a1 + 1) + 72));
  v126 = 0;
  v127 = 0;
  v125 = 0;
  CFCalendarDecomposeAbsoluteTime(*(CFCalendarRef *)(*((_QWORD *)a1 + 1) + 80), at, "dMywE", (char *)&v127 + 4, &v127, (char *)&v126 + 4, &v126, &v125);
  *(_DWORD *)&v124[16] = -1;
  *(_QWORD *)&v23 = -1;
  *((_QWORD *)&v23 + 1) = -1;
  v123 = v23;
  *(_OWORD *)v124 = v23;
  *(_OWORD *)__p = v23;
  v121 = -1;
  v119 = v23;
  *(_OWORD *)cf = v23;
  v118 = v23;
  std::string::basic_string[abi:ne180100]<0>(&valuePtr, "RelativeMonthDate");
  v24 = QP::startswith((unsigned __int8 *)v150, (unsigned __int8 *)&valuePtr);
  if (v117 < 0)
    operator delete(valuePtr);
  if (v24)
  {
    std::string::basic_string[abi:ne180100]<0>(&valuePtr, "1");
    if (QP::endswith((uint64_t *)v150, (uint64_t *)&valuePtr))
    {
      std::string::basic_string[abi:ne180100]<0>(v113, "11");
      v25 = !QP::endswith((uint64_t *)v150, (uint64_t *)v113);
      if (v114 < 0)
        operator delete(v113[0]);
    }
    else
    {
      v25 = 0;
    }
    if (v117 < 0)
      operator delete(valuePtr);
    if (v25)
    {
      v43 = 1;
LABEL_193:
      LODWORD(v123) = v43;
      v41 = 6;
LABEL_194:
      v42 = CFSTR("FORMATTED");
LABEL_195:
      v73 = (char *)operator new(0xC8uLL);
      *((_QWORD *)v73 + 1) = 0;
      v74 = (unint64_t *)(v73 + 8);
      *((_QWORD *)v73 + 2) = 0;
      *((_QWORD *)v73 + 3) = 0;
      *(_QWORD *)v73 = &unk_24DA25840;
      valuePtr = v73 + 24;
      v116 = (std::__shared_weak_count *)v73;
      v75 = v123;
      *(_OWORD *)(v73 + 44) = *(_OWORD *)__p;
      *(_OWORD *)(v73 + 60) = v75;
      *(_OWORD *)(v73 + 76) = *(_OWORD *)v124;
      *((_DWORD *)v73 + 23) = *(_DWORD *)&v124[16];
      v76 = v118;
      v77 = v119;
      v78 = *(_OWORD *)cf;
      *((_DWORD *)v73 + 36) = v121;
      *((_OWORD *)v73 + 7) = v77;
      *((_OWORD *)v73 + 8) = v78;
      *((_OWORD *)v73 + 6) = v76;
      *(_QWORD *)&v76 = -1;
      *((_QWORD *)&v76 + 1) = -1;
      *(_OWORD *)(v73 + 148) = v76;
      *(_OWORD *)(v73 + 164) = v76;
      *(_OWORD *)(v73 + 180) = v76;
      *((_DWORD *)v73 + 49) = -1;
      *((_DWORD *)v73 + 8) = v41;
      *((_WORD *)v73 + 18) = 1;
      *((_DWORD *)v73 + 10) = 3;
      QP::DatePeriod::setDisplayKey((const void **)v73 + 3, v42);
      if (QP::DateComponents::isConcreteType(__p, *((_DWORD *)v73 + 8))
        && (QP::DateComponents::isEmpty((QP::DateComponents *)&v118) & 1) == 0)
      {
        QP::DateComponents::isConcreteType(&v118, *((_DWORD *)v73 + 8));
      }
      v79 = 0;
      if (QP::DateComponents::isEmpty((QP::DateComponents *)&v118)
        && (DWORD1(v123) & 0x80000000) != 0
        && (*(_DWORD *)&v124[16] & 0x80000000) != 0)
      {
        AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)__p, *(__CFCalendar **)(*((_QWORD *)a1 + 1) + 88), *(const __CFDate **)(*((_QWORD *)a1 + 1) + 72));
        if (AbsoluteTime <= getCurrentTime(*(__CFCalendar **)(*((_QWORD *)a1 + 1) + 88), *(const __CFDate **)(*((_QWORD *)a1 + 1) + 72)))v79 = 0;
        else
          v79 = 0xFFFFFFFFLL;
      }
      v81 = (CFDateFormatterRef *)*((_QWORD *)a1 + 5);
      v111 = v73 + 24;
      v112 = (std::__shared_weak_count *)v73;
      do
        v82 = __ldxr(v74);
      while (__stxr(v82 + 1, v74));
      v83 = QP::DateFormatter::copyDisplayForDate(v81, (uint64_t *)&v111, 1, v79);
      if (v129)
        CFRelease(v129);
      v129 = v83;
      v84 = v112;
      if (v112)
      {
        v85 = (unint64_t *)&v112->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v87 = *((_QWORD *)a1 + 3);
      v88 = *a2;
      v89 = (const __CFString *)(*a2)[2];
      v106[0] = v15;
      v106[1] = 1174405120;
      v106[2] = ___ZN2QP18SpotlightFormatter13setCompletionENSt3__110shared_ptrINS_10CompletionEEE_block_invoke_79;
      v106[3] = &unk_24DA258B0;
      v106[4] = &v131;
      v106[6] = a1;
      v106[7] = valuePtr;
      v107 = v116;
      if (v116)
      {
        v90 = (unint64_t *)&v116->__shared_owners_;
        do
          v91 = __ldxr(v90);
        while (__stxr(v91 + 1, v90));
        v88 = *a2;
      }
      v110 = v79;
      v106[5] = &v137;
      v108 = v88;
      v92 = (std::__shared_weak_count *)a2[1];
      v109 = v92;
      if (v92)
      {
        v93 = (unint64_t *)&v92->__shared_owners_;
        do
          v94 = __ldxr(v93);
        while (__stxr(v94 + 1, v93));
      }
      QP::ParserGrammar::tokens(v87, CFSTR("kQPDate"), CFSTR("0"), v89, (uint64_t)v106);
      v95 = v109;
      if (v109)
      {
        v96 = (unint64_t *)&v109->__shared_owners_;
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
      v98 = v107;
      if (v107)
      {
        v99 = (unint64_t *)&v107->__shared_owners_;
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
      v101 = v116;
      if (v116)
      {
        v102 = (unint64_t *)&v116->__shared_owners_;
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
      }
      goto LABEL_45;
    }
    std::string::basic_string[abi:ne180100]<0>(&valuePtr, "2");
    if (QP::endswith((uint64_t *)v150, (uint64_t *)&valuePtr))
    {
      std::string::basic_string[abi:ne180100]<0>(v113, "12");
      v45 = !QP::endswith((uint64_t *)v150, (uint64_t *)v113);
      if (v114 < 0)
        operator delete(v113[0]);
    }
    else
    {
      v45 = 0;
    }
    if (v117 < 0)
      operator delete(valuePtr);
    if (v45)
    {
      v43 = 2;
      goto LABEL_193;
    }
    std::string::basic_string[abi:ne180100]<0>(&valuePtr, "3");
    v47 = QP::endswith((uint64_t *)v150, (uint64_t *)&valuePtr);
    if (v117 < 0)
      operator delete(valuePtr);
    if (v47)
    {
      v43 = 3;
      goto LABEL_193;
    }
    std::string::basic_string[abi:ne180100]<0>(&valuePtr, "4");
    v49 = QP::endswith((uint64_t *)v150, (uint64_t *)&valuePtr);
    if (v117 < 0)
      operator delete(valuePtr);
    if (v49)
    {
      v43 = 4;
      goto LABEL_193;
    }
    std::string::basic_string[abi:ne180100]<0>(&valuePtr, "5");
    v51 = QP::endswith((uint64_t *)v150, (uint64_t *)&valuePtr);
    if (v117 < 0)
      operator delete(valuePtr);
    if (v51)
    {
      v43 = 5;
      goto LABEL_193;
    }
    std::string::basic_string[abi:ne180100]<0>(&valuePtr, "6");
    v53 = QP::endswith((uint64_t *)v150, (uint64_t *)&valuePtr);
    if (v117 < 0)
      operator delete(valuePtr);
    if (v53)
    {
      v43 = 6;
      goto LABEL_193;
    }
    std::string::basic_string[abi:ne180100]<0>(&valuePtr, "7");
    v55 = QP::endswith((uint64_t *)v150, (uint64_t *)&valuePtr);
    if (v117 < 0)
      operator delete(valuePtr);
    if (v55)
    {
      v43 = 7;
      goto LABEL_193;
    }
    std::string::basic_string[abi:ne180100]<0>(&valuePtr, "8");
    v57 = QP::endswith((uint64_t *)v150, (uint64_t *)&valuePtr);
    if (v117 < 0)
      operator delete(valuePtr);
    if (v57)
    {
      v43 = 8;
      goto LABEL_193;
    }
    std::string::basic_string[abi:ne180100]<0>(&valuePtr, "9");
    v69 = QP::endswith((uint64_t *)v150, (uint64_t *)&valuePtr);
    if (v117 < 0)
      operator delete(valuePtr);
    if (v69)
    {
      v43 = 9;
      goto LABEL_193;
    }
    std::string::basic_string[abi:ne180100]<0>(&valuePtr, "10");
    v70 = QP::endswith((uint64_t *)v150, (uint64_t *)&valuePtr);
    if (v117 < 0)
      operator delete(valuePtr);
    if (v70)
    {
      v43 = 10;
      goto LABEL_193;
    }
    std::string::basic_string[abi:ne180100]<0>(&valuePtr, "11");
    v71 = QP::endswith((uint64_t *)v150, (uint64_t *)&valuePtr);
    if (v117 < 0)
      operator delete(valuePtr);
    if (v71)
    {
      v43 = 11;
      goto LABEL_193;
    }
    std::string::basic_string[abi:ne180100]<0>(&valuePtr, "12");
    v72 = QP::endswith((uint64_t *)v150, (uint64_t *)&valuePtr);
    if (v117 < 0)
      operator delete(valuePtr);
    if (v72)
    {
      v43 = 12;
      goto LABEL_193;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&valuePtr, "RelativeTodayDate");
    v40 = QP::endswith((uint64_t *)v150, (uint64_t *)&valuePtr);
    if (v117 < 0)
      operator delete(valuePtr);
    if (v40)
    {
      HIDWORD(__p[1]) = HIDWORD(v127);
      *(_QWORD *)&v123 = __PAIR64__(HIDWORD(v126), v127);
      v41 = 7;
      v42 = CFSTR("TODAY");
      goto LABEL_195;
    }
    std::string::basic_string[abi:ne180100]<0>(&valuePtr, "RelativeYesterdayDate");
    v44 = QP::endswith((uint64_t *)v150, (uint64_t *)&valuePtr);
    if (v117 < 0)
      operator delete(valuePtr);
    if (v44)
    {
      CFCalendarAddComponents(*(CFCalendarRef *)(*((_QWORD *)a1 + 1) + 80), &at, 0, "d", 0xFFFFFFFFLL);
      CFCalendarDecomposeAbsoluteTime(*(CFCalendarRef *)(*((_QWORD *)a1 + 1) + 80), at, "dMy", (char *)&v127 + 4, &v127, (char *)&v126 + 4);
      HIDWORD(__p[1]) = HIDWORD(v127);
      *(_QWORD *)&v123 = __PAIR64__(HIDWORD(v126), v127);
      v41 = 19;
      v42 = CFSTR("YESTERDAY");
      goto LABEL_195;
    }
    std::string::basic_string[abi:ne180100]<0>(&valuePtr, "RelativeThisWeekDate");
    v46 = QP::endswith((uint64_t *)v150, (uint64_t *)&valuePtr);
    if (v117 < 0)
      operator delete(valuePtr);
    if (v46)
    {
      *(_QWORD *)&v124[12] = v126;
      v41 = 12;
      v42 = CFSTR("THIS_WEEK");
      goto LABEL_195;
    }
    std::string::basic_string[abi:ne180100]<0>(&valuePtr, "RelativeLastWeekDate");
    v48 = QP::endswith((uint64_t *)v150, (uint64_t *)&valuePtr);
    if (v117 < 0)
      operator delete(valuePtr);
    if (v48)
    {
      CFCalendarAddComponents(*(CFCalendarRef *)(*((_QWORD *)a1 + 1) + 80), &at, 0, "w", 0xFFFFFFFFLL);
      CFCalendarDecomposeAbsoluteTime(*(CFCalendarRef *)(*((_QWORD *)a1 + 1) + 80), at, "wY", &v126, (char *)&v126 + 4);
      *(_QWORD *)&v124[12] = v126;
      v41 = 24;
      v42 = CFSTR("LAST_WEEK");
      goto LABEL_195;
    }
    std::string::basic_string[abi:ne180100]<0>(&valuePtr, "RelativeThisMonthDate");
    v50 = QP::endswith((uint64_t *)v150, (uint64_t *)&valuePtr);
    if (v117 < 0)
      operator delete(valuePtr);
    if (v50)
    {
      *(_QWORD *)&v123 = __PAIR64__(HIDWORD(v126), v127);
      v41 = 13;
      v42 = CFSTR("THIS_MONTH");
      goto LABEL_195;
    }
    std::string::basic_string[abi:ne180100]<0>(&valuePtr, "RelativeLastMonthDate");
    v52 = QP::endswith((uint64_t *)v150, (uint64_t *)&valuePtr);
    if (v117 < 0)
      operator delete(valuePtr);
    if (v52)
    {
      CFCalendarAddComponents(*(CFCalendarRef *)(*((_QWORD *)a1 + 1) + 80), &at, 0, "M", 0xFFFFFFFFLL);
      CFCalendarDecomposeAbsoluteTime(*(CFCalendarRef *)(*((_QWORD *)a1 + 1) + 80), at, "My", &v127, (char *)&v126 + 4);
      *(_QWORD *)&v123 = __PAIR64__(HIDWORD(v126), v127);
      v41 = 25;
      v42 = CFSTR("LAST_MONTH");
      goto LABEL_195;
    }
    std::string::basic_string[abi:ne180100]<0>(&valuePtr, "RelativeThisYearDate");
    v54 = QP::endswith((uint64_t *)v150, (uint64_t *)&valuePtr);
    if (v117 < 0)
      operator delete(valuePtr);
    if (v54)
    {
      DWORD1(v123) = HIDWORD(v126);
      v41 = 14;
      v42 = CFSTR("THIS_YEAR");
      goto LABEL_195;
    }
    std::string::basic_string[abi:ne180100]<0>(&valuePtr, "RelativeLastYearDate");
    v56 = QP::endswith((uint64_t *)v150, (uint64_t *)&valuePtr);
    if (v117 < 0)
      operator delete(valuePtr);
    if (v56)
    {
      CFCalendarAddComponents(*(CFCalendarRef *)(*((_QWORD *)a1 + 1) + 80), &at, 0, "y", 0xFFFFFFFFLL);
      CFCalendarDecomposeAbsoluteTime(*(CFCalendarRef *)(*((_QWORD *)a1 + 1) + 80), at, "y", (char *)&v126 + 4);
      DWORD1(v123) = HIDWORD(v126);
      v41 = 26;
      v42 = CFSTR("LAST_YEAR");
      goto LABEL_195;
    }
    std::string::basic_string[abi:ne180100]<0>(&valuePtr, "CalendarDate");
    if (QP::endswith((uint64_t *)v150, (uint64_t *)&valuePtr))
    {
      v58 = (*a2)[8];
      if (v117 < 0)
        operator delete(valuePtr);
      if (v58)
      {
        v59 = (const __CFDictionary *)(*a2)[8];
        LODWORD(valuePtr) = 0;
        Value = (const __CFNumber *)CFDictionaryGetValue(v59, CFSTR("d"));
        if (Value)
        {
          CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
          HIDWORD(__p[1]) = (_DWORD)valuePtr;
        }
        v61 = (const __CFNumber *)CFDictionaryGetValue(v59, CFSTR("M"));
        if (v61)
        {
          CFNumberGetValue(v61, kCFNumberIntType, &valuePtr);
          LODWORD(v123) = (_DWORD)valuePtr;
        }
        v62 = (const __CFNumber *)CFDictionaryGetValue(v59, CFSTR("y"));
        if (v62)
        {
          CFNumberGetValue(v62, kCFNumberIntType, &valuePtr);
          DWORD1(v123) = (_DWORD)valuePtr;
        }
        v63 = (const __CFNumber *)CFDictionaryGetValue(v59, CFSTR("E"));
        if (v63)
        {
          CFNumberGetValue(v63, kCFNumberIntType, &valuePtr);
          *(_DWORD *)v124 = (_DWORD)valuePtr;
        }
        v64 = (const __CFNumber *)CFDictionaryGetValue(v59, CFSTR("w"));
        if (v64)
        {
          CFNumberGetValue(v64, kCFNumberIntType, &valuePtr);
          *(_DWORD *)&v124[12] = (_DWORD)valuePtr;
        }
        v65 = (const __CFNumber *)CFDictionaryGetValue(v59, CFSTR("Y"));
        if (v65)
        {
          CFNumberGetValue(v65, kCFNumberIntType, &valuePtr);
          *(_DWORD *)&v124[16] = (_DWORD)valuePtr;
        }
        v66 = (const __CFNumber *)CFDictionaryGetValue(v59, CFSTR("H"));
        if (v66)
        {
          CFNumberGetValue(v66, kCFNumberIntType, &valuePtr);
          LODWORD(__p[1]) = (_DWORD)valuePtr;
        }
        v67 = (const __CFNumber *)CFDictionaryGetValue(v59, CFSTR("m"));
        if (v67)
        {
          CFNumberGetValue(v67, kCFNumberIntType, &valuePtr);
          HIDWORD(__p[0]) = (_DWORD)valuePtr;
        }
        v68 = (const __CFNumber *)CFDictionaryGetValue(v59, CFSTR("s"));
        if (v68)
        {
          CFNumberGetValue(v68, kCFNumberIntType, &valuePtr);
          LODWORD(__p[0]) = (_DWORD)valuePtr;
        }
        v41 = 2;
        goto LABEL_194;
      }
    }
    else if (v117 < 0)
    {
      operator delete(valuePtr);
    }
  }
  v26 = 0;
LABEL_69:
  if (v130)
    CFRelease(v130);
  _Block_object_dispose(&v131, 8);
  if (v136)
    CFRelease(v136);
  _Block_object_dispose(&v137, 8);
  if (v142)
    CFRelease(v142);
  _Block_object_dispose(&v144, 8);
  if (Mutable)
    CFRelease(Mutable);
  if (v151 < 0)
    operator delete(v150[0]);
  if (v153 < 0)
    operator delete(v152[0]);
  if (v155 < 0)
    operator delete(v154[0]);
  return v26;
}

void sub_218E5348C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  const void *a69;
  const void *a70;
  __int16 a71;
  uint64_t v71;

  if (a49 < 0)
    operator delete(__p);
  nlp::CFScopedPtr<__CFString const*>::reset(&a69, 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset(&a70, 0);
  _Block_object_dispose(&a71, 8);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)&STACK[0x200], 0);
  _Block_object_dispose(&STACK[0x208], 8);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&STACK[0x230], 0);
  _Block_object_dispose((const void *)(v71 - 256), 8);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(v71 - 216), 0);
  if (*(char *)(v71 - 185) < 0)
    operator delete(*(void **)(v71 - 208));
  if (*(char *)(v71 - 161) < 0)
    operator delete(*(void **)(v71 - 184));
  if (*(char *)(v71 - 137) < 0)
    operator delete(*(void **)(v71 - 160));
  _Unwind_Resume(a1);
}

void QP::SpotlightFormatter::clear(QP::SpotlightFormatter *this)
{
  const void **v2;
  CFAllocatorRef *v3;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v5;
  CFMutableArrayRef v6;
  CFMutableArrayRef v7;
  CFMutableArrayRef v8;
  CFMutableArrayRef v9;
  CFMutableArrayRef v10;
  CFMutableArrayRef v11;

  v2 = (const void **)((char *)this + 88);
  v3 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
  if (*((_QWORD *)this + 11))
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    nlp::CFScopedPtr<__CFArray *>::reset(v2, Mutable);
  }
  if (*((_QWORD *)this + 12))
  {
    v5 = CFArrayCreateMutable(*v3, 0, MEMORY[0x24BDBD690]);
    nlp::CFScopedPtr<__CFArray *>::reset((const void **)this + 12, v5);
  }
  if (*((_QWORD *)this + 13))
  {
    v6 = CFArrayCreateMutable(*v3, 0, MEMORY[0x24BDBD690]);
    nlp::CFScopedPtr<__CFArray *>::reset((const void **)this + 13, v6);
  }
  if (*((_QWORD *)this + 14))
  {
    v7 = CFArrayCreateMutable(*v3, 0, MEMORY[0x24BDBD690]);
    nlp::CFScopedPtr<__CFArray *>::reset((const void **)this + 14, v7);
  }
  if (*((_QWORD *)this + 15))
  {
    v8 = CFArrayCreateMutable(*v3, 0, MEMORY[0x24BDBD690]);
    nlp::CFScopedPtr<__CFArray *>::reset((const void **)this + 15, v8);
  }
  if (*((_QWORD *)this + 16))
  {
    v9 = CFArrayCreateMutable(*v3, 0, MEMORY[0x24BDBD690]);
    nlp::CFScopedPtr<__CFArray *>::reset((const void **)this + 16, v9);
  }
  if (*((_QWORD *)this + 17))
  {
    v10 = CFArrayCreateMutable(*v3, 0, MEMORY[0x24BDBD690]);
    nlp::CFScopedPtr<__CFArray *>::reset((const void **)this + 17, v10);
  }
  if (*((_QWORD *)this + 18))
  {
    v11 = CFArrayCreateMutable(*v3, 0, MEMORY[0x24BDBD690]);
    nlp::CFScopedPtr<__CFArray *>::reset((const void **)this + 18, v11);
  }
  *((_WORD *)this + 96) = 0;
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(a1 + 40), 0);
}

void QP::SpotlightFormatter::_parseAttributeKey(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v20;
  _QWORD v21[14];
  __int16 v22;
  __int16 v23;

  if (QP::ParserGrammar::hasTranslations(*(_QWORD *)(a1 + 24), a2))
  {
    v20 = *(_QWORD *)(a1 + 24);
    v21[0] = MEMORY[0x24BDAC760];
    v21[1] = 0x40000000;
    v21[2] = ___ZN2QP18SpotlightFormatter18_parseAttributeKeyERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEtt12QPSymbolFlagPK10__CFStringPK9__CFArraySG_SD_SD_SD_SD_U13block_pointerFvSD_E_block_invoke;
    v21[3] = &unk_24DA25B40;
    v22 = a4;
    v21[4] = a13;
    v21[5] = a1;
    v21[6] = a9;
    v21[7] = a11;
    v21[8] = a10;
    v21[9] = a12;
    v23 = a5;
    v21[10] = a6;
    v21[11] = a7;
    v21[12] = a8;
    v21[13] = a2;
    QP::ParserGrammar::translations(v20, a2, (uint64_t)v21);
  }
}

void ___ZN2QP18SpotlightFormatter13setCompletionENSt3__110shared_ptrINS_10CompletionEEE_block_invoke(uint64_t a1, const void *a2)
{
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

uint64_t __Block_byref_object_copy__1_0(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

void __Block_byref_object_dispose__2_0(uint64_t a1)
{
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(a1 + 40), 0);
}

uint64_t QP::DateComponents::isConcreteType(_DWORD *a1, int a2)
{
  if ((a2 - 6) < 0x55)
    return 1;
  if (a2 != 3)
  {
    if ((a1[11] & 0x80000000) != 0)
    {
      if ((a1[10] & 0x80000000) == 0
        || (a1[9] & 0x80000000) == 0
        || (a1[12] & 0x80000000) == 0
        || (a1[3] & 0x80000000) != 0
        || (a1[4] & 0x80000000) != 0
        || (a1[5] & 0x80000000) != 0)
      {
        return 0;
      }
    }
    else if ((a1[12] & 0x80000000) != 0)
    {
      return 0;
    }
    return 1;
  }
  return 0;
}

void ___ZN2QP18SpotlightFormatter13setCompletionENSt3__110shared_ptrINS_10CompletionEEE_block_invoke_79(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFString *a5)
{
  uint64_t v7;
  const __CFAllocator *v8;
  uint64_t *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  CFMutableStringRef MutableCopy;
  const __CFString *v26;
  const __CFString *v27;
  uint64_t v28;
  CFStringRef Copy;
  CFDateFormatterRef *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __CFString *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __CFDictionary *v39;
  CFTypeRef v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  __CFString *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  CFTypeRef cf;
  uint64_t v47;
  std::__shared_weak_count *v48;
  void *value;
  __CFDictionary *Mutable;
  CFRange v51;
  CFRange v52;

  v7 = *(_QWORD *)(a1 + 48);
  if (CFArrayGetCount(*(CFArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40)))
    return;
  v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v9 = *(uint64_t **)(v7 + 40);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(std::__shared_weak_count **)(a1 + 64);
  v47 = v10;
  v48 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v10 = *(_QWORD *)(a1 + 56);
  }
  value = (void *)QP::DateFormatter::copyISODisplayForStartDate(v9, &v47, *(unsigned __int16 *)(v10 + 12), 0, 1, *(unsigned int *)(a1 + 88));
  v14 = v48;
  if (v48)
  {
    v15 = (unint64_t *)&v48->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(uint64_t **)(v7 + 40);
  v18 = *(_QWORD *)(a1 + 56);
  v19 = *(std::__shared_weak_count **)(a1 + 64);
  v44 = v18;
  v45 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    v18 = *(_QWORD *)(a1 + 56);
  }
  cf = QP::DateFormatter::copyISODisplayForEndDate(v17, &v44, *(unsigned __int16 *)(v18 + 12), 0, 1, *(unsigned int *)(a1 + 88));
  v22 = v45;
  if (!v45)
    goto LABEL_19;
  v23 = (unint64_t *)&v45->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if (a5)
    {
LABEL_20:
      MutableCopy = CFStringCreateMutableCopy(v8, 0, a5);
      v43 = MutableCopy;
      v26 = (const __CFString *)value;
      v51.length = CFStringGetLength(MutableCopy);
      v51.location = 0;
      CFStringFindAndReplace(MutableCopy, CFSTR("%1@"), v26, v51, 0);
      v27 = (const __CFString *)cf;
      v52.length = CFStringGetLength(MutableCopy);
      v52.location = 0;
      CFStringFindAndReplace(MutableCopy, CFSTR("%2@"), v27, v52, 0);
      CFDictionarySetValue(Mutable, CFSTR("QUERY"), MutableCopy);
      v28 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      Copy = CFStringCreateCopy(v8, MutableCopy);
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v28 + 40), Copy);
      if (MutableCopy)
        CFRelease(MutableCopy);
      goto LABEL_24;
    }
  }
  else
  {
LABEL_19:
    if (a5)
      goto LABEL_20;
  }
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), 0);
LABEL_24:
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    v30 = *(CFDateFormatterRef **)(v7 + 40);
    v31 = *(_QWORD *)(a1 + 56);
    v32 = *(std::__shared_weak_count **)(a1 + 64);
    v41 = v31;
    v42 = v32;
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
      v31 = *(_QWORD *)(a1 + 56);
    }
    v35 = QP::DateFormatter::copyDisplayForDate(v30, (uint64_t)&v41, *(unsigned __int16 *)(v31 + 12), 1u, 1, *(unsigned int *)(a1 + 88));
    v43 = v35;
    v36 = v42;
    if (v42)
    {
      v37 = (unint64_t *)&v42->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
      v35 = v43;
    }
    v39 = Mutable;
    if (v35)
      CFDictionarySetValue(Mutable, CFSTR("TEXT"), v35);
    else
      CFDictionarySetValue(Mutable, CFSTR("TEXT"), *(const void **)(*(_QWORD *)(a1 + 72) + 16));
    CFDictionarySetValue(v39, CFSTR("TOKEN"), *(const void **)(*(_QWORD *)(a1 + 72) + 8));
    CFDictionarySetValue(v39, CFSTR("DATE_FROM"), value);
    v40 = cf;
    CFDictionarySetValue(v39, CFSTR("DATE_TO"), cf);
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v39);
    if (v35)
      CFRelease(v35);
  }
  else
  {
    v40 = cf;
  }
  if (v40)
    CFRelease(v40);
  if (value)
    CFRelease(value);
  if (Mutable)
    CFRelease(Mutable);
}

void sub_218E53E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, uint64_t a15, uint64_t a16, const void *a17)
{
  uint64_t v17;

  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  nlp::CFScopedPtr<__CFString const*>::reset(&a14, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a17, 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)(v17 - 56), 0);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_56c43_ZTSNSt3__110shared_ptrIN2QP10DatePeriodEEE72c43_ZTSNSt3__110shared_ptrIN2QP10CompletionEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[10];
  result[9] = a2[9];
  result[10] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_56c43_ZTSNSt3__110shared_ptrIN2QP10DatePeriodEEE72c43_ZTSNSt3__110shared_ptrIN2QP10CompletionEEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 56;
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](a1 + 72);
  return std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v1);
}

uint64_t __Block_byref_object_copy__98(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

void __Block_byref_object_dispose__99(uint64_t a1)
{
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)(a1 + 40), 0);
}

uint64_t __Block_byref_object_copy__106(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

void __Block_byref_object_dispose__107(uint64_t a1)
{
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)(a1 + 40), 0);
}

void ___ZN2QP18SpotlightFormatter13setCompletionENSt3__110shared_ptrINS_10CompletionEEE_block_invoke_108(uint64_t a1, uint64_t a2)
{
  CFStringRef CFStringFromString;

  CFStringFromString = QP::createCFStringFromString(a2);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), CFStringFromString, *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  if (CFStringFromString)
    CFRelease(CFStringFromString);
}

void sub_218E53FBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP18SpotlightFormatter13setCompletionENSt3__110shared_ptrINS_10CompletionEEE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  CFStringRef CFStringFromString;

  CFStringFromString = QP::createCFStringFromString(a2);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), CFStringFromString, *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  if (CFStringFromString)
    CFRelease(CFStringFromString);
}

void sub_218E54034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void QP::SpotlightFormatter::setDefaultParse(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  const __CFString *v10;
  const __CFAllocator *v11;
  CFStringRef v12;
  uint64_t v13;
  const void **v14;
  CFNumberRef v15;
  CFDictionaryRef Copy;
  _QWORD valuePtr[2];
  const __CFString **v18;
  std::__shared_weak_count *v19;

  QP::SpotlightFormatter::clear((QP::SpotlightFormatter *)a1);
  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v18 = *(const __CFString ***)a2;
  v19 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  QP::Formatter::setDefaultParse(a1, &v18);
  v7 = v19;
  if (v19)
  {
    v8 = (unint64_t *)&v19->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = &stru_24DA27910;
  if (*(_QWORD *)a2 && **(_QWORD **)a2)
    v10 = **(const __CFString ***)a2;
  v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v12 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("(** = \"%@*\"cdw)"), v10);
  valuePtr[1] = v12;
  QP::Formatter::setResultValue((QP::Formatter *)a1, kQPParseResultDescriptionKey, v12);
  v13 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v13 + 200) && *(_QWORD *)(v13 + 104))
  {
    if (*(_BYTE *)(v13 + 33))
      v14 = (const void **)(a1 + 160);
    else
      v14 = (const void **)(a1 + 152);
  }
  else
  {
    v14 = (const void **)(a1 + 152);
  }
  QP::Formatter::setResultValue((QP::Formatter *)a1, kQPParseResultConfidenceKey, *v14);
  valuePtr[0] = 0;
  v15 = CFNumberCreate(v11, kCFNumberCFIndexType, valuePtr);
  if (v15)
    QP::Formatter::setResultValue((QP::Formatter *)a1, kQPParseResultAttributeCountKey, v15);
  Copy = CFDictionaryCreateCopy(v11, *(CFDictionaryRef *)(a1 + 176));
  QP::Formatter::setResultValue((QP::Formatter *)a1, kQPParseResultRankCategoriesKey, Copy);
  QP::Formatter::setResultValue((QP::Formatter *)a1, kQPParseResultSuggestionKey, &stru_24DA27910);
  QP::SpotlightFormatter::updateWithLastSuggestionFragment((CFArrayRef *)a1);
  if (Copy)
    CFRelease(Copy);
  if (v15)
    CFRelease(v15);
  if (v12)
    CFRelease(v12);
}

void sub_218E54244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  const void *v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, const void *);
  v7 = va_arg(va1, _QWORD);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va1, 0);
  _Unwind_Resume(a1);
}

void QP::SpotlightFormatter::updateWithLastSuggestionFragment(CFArrayRef *this)
{
  CFIndex Count;
  CFIndex v3;
  const __CFString *ValueAtIndex;
  const __CFArray *v5;
  const __CFArray *v6;
  const __CFAllocator *v7;
  __CFDictionary *Mutable;
  CFIndex v9;
  CFIndex v10;
  const void *v11;
  CFNumberRef v12;
  CFIndex v13;
  CFIndex v14;
  const void *v15;
  CFNumberRef v16;
  __CFString *MutableCopy;
  const __CFString *v18;
  const __CFString *v19;
  CFStringRef theString;
  CFArrayRef theArray;
  _QWORD valuePtr[2];

  Count = CFArrayGetCount(this[13]);
  if (Count)
  {
    v3 = Count;
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(this[13], Count - 1);
    if (v3 == CFArrayGetCount(this[12]))
      theString = (CFStringRef)CFArrayGetValueAtIndex(this[12], v3 - 1);
    else
      theString = 0;
    if (v3 == CFArrayGetCount(this[15]))
      v19 = (const __CFString *)CFArrayGetValueAtIndex(this[15], v3 - 1);
    else
      v19 = 0;
    if (v3 == CFArrayGetCount(this[14]))
      theArray = (CFArrayRef)CFArrayGetValueAtIndex(this[14], v3 - 1);
    else
      theArray = 0;
    if (v3 == CFArrayGetCount(this[16]))
      v5 = (const __CFArray *)CFArrayGetValueAtIndex(this[16], v3 - 1);
    else
      v5 = 0;
    if (v3 == CFArrayGetCount(this[17]))
    {
      v6 = (const __CFArray *)CFArrayGetValueAtIndex(this[17], v3 - 1);
      if (!ValueAtIndex)
        return;
    }
    else
    {
      v6 = 0;
      if (!ValueAtIndex)
        return;
    }
    if (CFStringGetLength(ValueAtIndex)
      && theArray
      && CFArrayGetCount(theArray)
      && v19
      && theString
      && CFStringGetLength(theString))
    {
      v18 = ValueAtIndex;
      v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      valuePtr[1] = Mutable;
      if (v5)
      {
        v9 = CFArrayGetCount(v5);
        if (v9 >= 1)
        {
          v10 = 0;
          do
          {
            v11 = CFArrayGetValueAtIndex(v5, v10);
            valuePtr[0] = 1;
            v12 = CFNumberCreate(v7, kCFNumberCFIndexType, valuePtr);
            if (v12)
            {
              CFDictionarySetValue(Mutable, v11, v12);
              CFRelease(v12);
            }
            ++v10;
          }
          while (v9 != v10);
        }
      }
      if (v6)
      {
        v13 = CFArrayGetCount(v6);
        if (v13 >= 1)
        {
          v14 = 0;
          do
          {
            v15 = CFArrayGetValueAtIndex(v6, v14);
            if (!CFDictionaryContainsKey(Mutable, v15))
            {
              valuePtr[0] = 2;
              v16 = CFNumberCreate(v7, kCFNumberCFIndexType, valuePtr);
              if (v16)
              {
                CFDictionarySetValue(Mutable, v15, v16);
                CFRelease(v16);
              }
            }
            ++v14;
          }
          while (v13 != v14);
        }
      }
      MutableCopy = CFStringCreateMutableCopy(v7, 0, v18);
      valuePtr[0] = MutableCopy;
      CFStringTrimWhitespace(MutableCopy);
      QP::Formatter::setSuggestionValue((QP::Formatter *)this, kQPSuggestionResultSuggestionKey, MutableCopy);
      QP::Formatter::setSuggestionValue((QP::Formatter *)this, kQPSuggestionResultDescriptionKey, theString);
      QP::Formatter::setSuggestionValue((QP::Formatter *)this, kQPSuggestionResultRankCategoriesKey, Mutable);
      if (CFArrayGetCount(theArray))
        QP::Formatter::setSuggestionValue((QP::Formatter *)this, kQPSuggestionResultTokensKey, theArray);
      else
        v19 = CFSTR("kQPSuggestion");
      QP::Formatter::setSuggestionValue((QP::Formatter *)this, kQPSuggestionResultTypeKey, v19);
      if (MutableCopy)
        CFRelease(MutableCopy);
      if (Mutable)
        CFRelease(Mutable);
    }
  }
}

void sub_218E5460C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

std::__shared_weak_count *QP::SpotlightFormatter::setParse(uint64_t a1, const __CFString ***a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  const __CFAllocator *v11;
  __CFArray *Mutable;
  CFIndex Count;
  CFIndex i;
  const __CFString *ValueAtIndex;
  const void *v16;
  CFStringRef v17;
  CFStringRef Copy;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  CFStringRef v25;
  const __CFString **v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  const __CFAllocator *v33;
  CFNumberRef v34;
  const __CFString *v35;
  __CFDictionary *v36;
  CFIndex v37;
  CFIndex j;
  const __CFArray *v39;
  CFIndex v40;
  CFIndex k;
  const void *v42;
  CFNumberRef v43;
  CFIndex v44;
  CFIndex m;
  const __CFArray *v46;
  CFIndex v47;
  CFIndex n;
  const void *v49;
  CFNumberRef v50;
  uint64_t v51;
  const __CFString *v53;
  const __CFString *v54;
  CFMutableStringRef MutableCopy;
  CFIndex v56;
  CFIndex v57;
  CFIndex v58;
  uint64_t v59;
  const __CFDictionary *v60;
  const __CFString *v61;
  uint64_t v62;
  uint64_t v63;
  const void **v64;
  CFIndex v65;
  char v66;
  uint64_t v67;
  const __CFDictionary *v68;
  CFIndex v69;
  BOOL v70;
  CFIndex v71;
  _BOOL4 v72;
  CFArrayRef *v73;
  unsigned int v74;
  QP::Formatter *v75;
  _QWORD v76[2];
  const __CFString **v77;
  std::__shared_weak_count *v78;
  CFTypeRef cf;
  __CFArray *valuePtr;
  const __CFString **v81;
  std::__shared_weak_count *v82;
  CFTypeRef v83;
  const __CFString **v84;
  std::__shared_weak_count *v85;
  CFRange v86;

  QP::SpotlightFormatter::clear((QP::SpotlightFormatter *)a1);
  QP::Formatter::clear((const void **)a1);
  v4 = (std::__shared_weak_count *)a2[1];
  v84 = *a2;
  v85 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = QP::Formatter::setParse(a1, (uint64_t)&v84);
  v8 = v85;
  if (v85)
  {
    v9 = (unint64_t *)&v85->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v83 = 0;
  if (v7 && CFArrayGetCount(*(CFArrayRef *)(a1 + 96)))
  {
    v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    valuePtr = Mutable;
    if (!(*a2)[11])
    {
      Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 96));
      if (Count >= 1)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), i);
          if (CFStringGetLength(ValueAtIndex))
            CFArrayAppendValue(Mutable, ValueAtIndex);
        }
      }
    }
    v16 = *(const void **)(a1 + 168);
    v17 = CFStringCreateByCombiningStrings(v11, Mutable, CFSTR(" && "));
    cf = v17;
    if (CFArrayGetCount(Mutable) < 2)
    {
      if (!CFArrayGetCount(Mutable))
      {
        v61 = **a2;
        if (v61 && CFStringGetLength(v61))
        {
          v25 = CFStringCreateWithFormat(v11, 0, CFSTR("(** = \"%@*\"cwd)"), **a2);
          v62 = *(_QWORD *)(a1 + 8);
          v63 = *(_QWORD *)(v62 + 200);
          v83 = v25;
          if (v63 && *(_QWORD *)(v62 + 104))
          {
            if (*(_BYTE *)(v62 + 33))
              v64 = (const void **)(a1 + 160);
            else
              v64 = (const void **)(a1 + 152);
          }
          else
          {
            v64 = (const void **)(a1 + 152);
          }
          v16 = *v64;
          goto LABEL_31;
        }
        v25 = CFSTR("(true)");
LABEL_30:
        v83 = v25;
LABEL_31:
        QP::Formatter::setResultValue((QP::Formatter *)a1, kQPParseResultDescriptionKey, v25);
        QP::Formatter::setResultValue((QP::Formatter *)a1, kQPParseResultConfidenceKey, v16);
        if (v17)
          CFRelease(v17);
        if (Mutable)
          CFRelease(Mutable);
        v7 = 1;
        goto LABEL_36;
      }
      Copy = CFStringCreateCopy(v11, v17);
    }
    else
    {
      Copy = CFStringCreateWithFormat(v11, 0, CFSTR("(%@)"), v17);
    }
    v25 = Copy;
    goto LABEL_30;
  }
  v19 = (std::__shared_weak_count *)a2[1];
  v81 = *a2;
  v82 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  (*(void (**)(uint64_t, const __CFString ***))(*(_QWORD *)a1 + 40))(a1, &v81);
  v22 = v82;
  if (v82)
  {
    v23 = (unint64_t *)&v82->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_36:
  v26 = *a2;
  valuePtr = (__CFArray *)(*a2)[5];
  if (valuePtr == (__CFArray *)1 && *(_BYTE *)(a1 + 192))
  {
    v27 = (std::__shared_weak_count *)a2[1];
    v77 = v26;
    v78 = v27;
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    (*(void (**)(uint64_t, const __CFString ***))(*(_QWORD *)a1 + 40))(a1, &v77);
    v30 = v78;
    if (v78)
    {
      v31 = (unint64_t *)&v78->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
      v30 = 0;
    }
    goto LABEL_75;
  }
  v33 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v34 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberCFIndexType, &valuePtr);
  cf = v34;
  if (v34)
    QP::Formatter::setResultValue((QP::Formatter *)a1, kQPParseResultAttributeCountKey, v34);
  v35 = (*a2)[11];
  if (v35)
    QP::Formatter::setResultValue((QP::Formatter *)a1, kQPParseResultQUOutputKey, v35);
  v36 = CFDictionaryCreateMutable(v33, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v74 = v7;
  v76[1] = v36;
  v75 = (QP::Formatter *)a1;
  v37 = CFArrayGetCount(*(CFArrayRef *)(a1 + 128));
  if (v37 >= 1)
  {
    for (j = 0; j != v37; ++j)
    {
      v39 = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 128), j);
      v40 = CFArrayGetCount(v39);
      if (v40 >= 1)
      {
        for (k = 0; k != v40; ++k)
        {
          v42 = CFArrayGetValueAtIndex(v39, k);
          v76[0] = 1;
          v43 = CFNumberCreate(v33, kCFNumberCFIndexType, v76);
          if (v43)
          {
            CFDictionarySetValue(v36, v42, v43);
            CFRelease(v43);
          }
        }
      }
    }
  }
  v44 = CFArrayGetCount(*(CFArrayRef *)(a1 + 136));
  if (v44 >= 1)
  {
    for (m = 0; m != v44; ++m)
    {
      v46 = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 136), m);
      v47 = CFArrayGetCount(v46);
      if (v47 >= 1)
      {
        for (n = 0; n != v47; ++n)
        {
          v49 = CFArrayGetValueAtIndex(v46, n);
          if (!CFDictionaryContainsKey(v36, v49))
          {
            v76[0] = 2;
            v50 = CFNumberCreate(v33, kCFNumberCFIndexType, v76);
            if (v50)
            {
              CFDictionarySetValue(v36, v49, v50);
              CFRelease(v50);
            }
          }
        }
      }
    }
  }
  QP::Formatter::setResultValue((QP::Formatter *)a1, kQPParseResultRankCategoriesKey, v36);
  v51 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v51 + 63) && !*(_BYTE *)(a1 + 193))
  {
    v76[0] = 0;
    if (*(_BYTE *)(v51 + 31))
      v53 = CFSTR(" ");
    else
      v53 = &stru_24DA27910;
    v54 = CFStringCreateByCombiningStrings(v33, *(CFArrayRef *)(a1 + 104), v53);
    v76[0] = v54;
    MutableCopy = CFStringCreateMutableCopy(v33, 0, v54);
    CFStringLowercase(MutableCopy, *(CFLocaleRef *)(*(_QWORD *)(a1 + 8) + 104));
    if (!CFStringGetLength(MutableCopy))
    {
LABEL_112:
      if (MutableCopy)
        CFRelease(MutableCopy);
      if (v54)
        CFRelease(v54);
      goto LABEL_71;
    }
    v86.length = CFStringGetLength(MutableCopy);
    v86.location = 0;
    CFStringFindAndReplace(MutableCopy, CFSTR("  "), CFSTR(" "), v86, 0);
    CFStringTrimWhitespace(MutableCopy);
    QP::Formatter::setResultValue((QP::Formatter *)a1, kQPParseResultSuggestionKey, MutableCopy);
    v56 = CFArrayGetCount(*(CFArrayRef *)(a1 + 88));
    v57 = CFArrayGetCount(*(CFArrayRef *)(a1 + 112));
    if (v56 < 1)
    {
      v59 = 0;
    }
    else
    {
      v58 = 0;
      v59 = 0;
      do
      {
        v60 = (const __CFDictionary *)CFArrayGetValueAtIndex(*((CFArrayRef *)v75 + 11), v58);
        if (CFDictionaryGetCount(v60))
          ++v59;
        ++v58;
      }
      while (v56 != v58);
    }
    if (v57 < 1)
    {
      v72 = 0;
      v66 = 0;
    }
    else
    {
      v65 = 0;
      v66 = 0;
      v67 = 0;
      do
      {
        v68 = (const __CFDictionary *)CFArrayGetValueAtIndex(*((CFArrayRef *)v75 + 14), v65);
        v69 = CFDictionaryGetCount(v68);
        v70 = v69 != 0;
        if (v69)
          ++v67;
        v71 = v65 + 1;
        if (v57 - 1 != v65)
          v70 = 0;
        v66 |= v70;
        ++v65;
      }
      while (v57 != v71);
      v72 = v67 != 0;
      if (v59 == 1)
      {
        v73 = (CFArrayRef *)v75;
        if (v67)
        {
LABEL_109:
          if ((v66 & 1) != 0 && v72)
            QP::SpotlightFormatter::updateWithLastSuggestionFragment(v73);
          goto LABEL_112;
        }
LABEL_108:
        QP::Formatter::setSuggestionValue((QP::Formatter *)v73, kQPSuggestionResultSuggestionKey, MutableCopy);
        QP::Formatter::setSuggestionValue((QP::Formatter *)v73, kQPSuggestionResultDescriptionKey, v83);
        QP::Formatter::setSuggestionValue((QP::Formatter *)v73, kQPSuggestionResultRankCategoriesKey, v36);
        QP::Formatter::setSuggestionValue((QP::Formatter *)v73, kQPSuggestionResultTypeKey, CFSTR("kQPSuggestion"));
        goto LABEL_109;
      }
    }
    v73 = (CFArrayRef *)v75;
    goto LABEL_108;
  }
  QP::Formatter::setResultValue((QP::Formatter *)a1, kQPParseResultSuggestionKey, &stru_24DA27910);
  QP::SpotlightFormatter::updateWithLastSuggestionFragment((CFArrayRef *)a1);
LABEL_71:
  if (v36)
    CFRelease(v36);
  v30 = (std::__shared_weak_count *)v74;
  if (cf)
    CFRelease(cf);
LABEL_75:
  if (v83)
    CFRelease(v83);
  return v30;
}

void sub_218E54E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  const void *v6;
  va_list va;
  const void *v8;
  va_list va1;
  const void *v10;
  va_list va2;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  va_list va3;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va4;

  va_start(va4, a5);
  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v8 = va_arg(va2, const void *);
  va_copy(va3, va2);
  v10 = va_arg(va3, const void *);
  v12 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v14 = va_arg(va4, const void *);
  v16 = va_arg(va4, _QWORD);
  v17 = va_arg(va4, _QWORD);
  v18 = va_arg(va4, _QWORD);
  nlp::CFScopedPtr<__CFString *>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va1, 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)va2, 0);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)va3, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va4, 0);
  _Unwind_Resume(a1);
}

void QP::SpotlightFormatter::updateParseWithDateAttribute(QP::Formatter *a1, const __CFString *a2, CFRange **a3)
{
  CFRange *v4;
  std::__shared_weak_count *location;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  CFIndex length;
  const __CFAllocator *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  CFRange *v31;
  _BOOL4 v32;
  _BOOL4 v33;
  CFStringRef v34;
  uint64_t v35;
  double AbsoluteTime;
  uint64_t *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  CFRange *v52;
  CFRange *v53;
  uint64_t v54;
  unint64_t *p_length;
  unint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  CFIndex Count;
  uint64_t v62;
  CFStringRef v63;
  const void **v64;
  CFStringRef v65;
  CFDateFormatterRef *v66;
  unint64_t *v67;
  unint64_t v68;
  __CFString *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  CFRange *v73;
  const __CFString *v74;
  CFStringRef v75;
  uint64_t v76;
  const __CFString *BundleWithIdentifier;
  uint64_t v78;
  const __CFString *v79;
  const __CFString *v80;
  CFStringRef Copy;
  CFStringRef v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  const __CFString *v94;
  const __CFDictionary *v95;
  const __CFArray *v96;
  const __CFArray *v97;
  unint64_t *p_shared_owners;
  unint64_t v99;
  BOOL v100;
  _QWORD v101[7];
  _QWORD v102[2];
  int v103;
  CFMutableDictionaryRef theDict;
  const __CFString *v105;
  _QWORD v106[7];
  CFTypeRef v107;
  CFTypeRef *v108;
  uint64_t v109;
  uint64_t (*v110)(uint64_t, uint64_t);
  void (*v111)(uint64_t);
  CFTypeRef cf;
  CFTypeRef value;
  CFTypeRef *p_value;
  uint64_t v115;
  uint64_t (*v116)(uint64_t, uint64_t);
  void (*v117)(uint64_t);
  CFTypeRef v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  __CFString *v121;
  CFTypeRef v122;
  _QWORD v123[12];
  std::__shared_weak_count *v124;
  uint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  BOOL v128;
  _QWORD v129[3];
  char v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t (*v136)(uint64_t, uint64_t);
  void (*v137)(uint64_t);
  CFTypeRef v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t (*v144)(uint64_t, uint64_t);
  void (*v145)(uint64_t);
  CFTypeRef started;
  _QWORD v147[5];
  CFTypeRef v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t (*v152)(uint64_t, uint64_t);
  void (*v153)(uint64_t);
  CFTypeRef v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  _OWORD v157[3];
  int v158;
  __int128 v159[3];
  int v160;
  __int128 v161[3];
  int v162;
  _OWORD v163[3];
  int v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  int v168;
  void *__p[2];
  __int128 v170;
  __int128 v171;
  int v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  CFTypeRef v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  const __CFString *v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t (*v183)(uint64_t, uint64_t);
  void (*v184)(uint64_t);
  CFTypeRef v185;
  const __CFDictionary *v186;
  const __CFArray *v187;
  const __CFArray *Mutable;
  uint64_t v189;
  const void **v190;
  uint64_t v191;
  uint64_t (*v192)(uint64_t, uint64_t);
  void (*v193)(uint64_t);
  CFTypeRef v194;
  const __CFString *v195;
  CFIndex v196;
  std::__shared_weak_count *v197;

  v4 = *a3;
  location = (std::__shared_weak_count *)(*a3)[7].location;
  if (!location)
    return;
  v8 = std::__shared_weak_count::lock(location);
  if (!v8)
    return;
  v9 = v8;
  length = v4[6].length;
  v196 = length;
  v197 = v8;
  if (!length)
  {
LABEL_158:
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v99 = __ldaxr(p_shared_owners);
    while (__stlxr(v99 - 1, p_shared_owners));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    return;
  }
  v194 = 0;
  v195 = 0;
  v189 = 0;
  v190 = (const void **)&v189;
  v191 = 0x3002000000;
  v192 = __Block_byref_object_copy__1_0;
  v193 = __Block_byref_object_dispose__2_0;
  v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v187 = CFArrayCreateMutable(v11, 0, MEMORY[0x24BDBD690]);
  v186 = CFDictionaryCreateMutable(v11, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v180 = 0;
  v181 = &v180;
  v182 = 0x3002000000;
  v183 = __Block_byref_object_copy__6;
  v184 = __Block_byref_object_dispose__6;
  v185 = CFArrayCreateMutable(v11, 0, MEMORY[0x24BDBD690]);
  v176 = 0;
  v177 = &v176;
  v178 = 0x2000000000;
  v179 = CFSTR("kQPDate");
  if (*(_QWORD *)(*((_QWORD *)a1 + 1) + 8))
  {
    if (getDateActionFilters(void)::onceToken != -1)
      dispatch_once(&getDateActionFilters(void)::onceToken, &__block_literal_global_7);
    v12 = getDateActionFilters(void)::gDateActionFilters;
  }
  else
  {
    v12 = 0;
  }
  if (QP::ParserGrammar::hasTranslations(*((_QWORD *)a1 + 3), (uint64_t)&(*a3)[3]))
  {
    v175 = CFDictionaryCreateMutable(v11, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    v13 = *(_QWORD *)(length + 120);
    v14 = *(std::__shared_weak_count **)(length + 128);
    v173 = v13;
    v174 = v14;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    if (!v13 || BYTE1((*a3)[4].length))
      goto LABEL_135;
    v17 = *(_OWORD *)(v13 + 140);
    *(_OWORD *)__p = *(_OWORD *)(v13 + 124);
    v170 = v17;
    v171 = *(_OWORD *)(v13 + 156);
    v172 = *(_DWORD *)(v13 + 172);
    v18 = *(_OWORD *)(v13 + 36);
    v165 = *(_OWORD *)(v13 + 20);
    v166 = v18;
    v167 = *(_OWORD *)(v13 + 52);
    v168 = *(_DWORD *)(v13 + 68);
    v19 = *(_OWORD *)(v13 + 88);
    v163[0] = *(_OWORD *)(v13 + 72);
    v163[1] = v19;
    v163[2] = *(_OWORD *)(v13 + 104);
    v164 = *(_DWORD *)(v13 + 120);
    v20 = *(_OWORD *)(v13 + 36);
    v161[0] = *(_OWORD *)(v13 + 20);
    v161[1] = v20;
    v161[2] = *(_OWORD *)(v13 + 52);
    v162 = *(_DWORD *)(v13 + 68);
    v21 = *(_OWORD *)(v13 + 88);
    v159[0] = *(_OWORD *)(v13 + 72);
    v159[1] = v21;
    v159[2] = *(_OWORD *)(v13 + 104);
    v160 = *(_DWORD *)(v13 + 120);
    v22 = *(_OWORD *)(v13 + 140);
    v157[0] = *(_OWORD *)(v13 + 124);
    v157[1] = v22;
    v157[2] = *(_OWORD *)(v13 + 156);
    v158 = *(_DWORD *)(v13 + 172);
    v23 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
    v155 = *((_QWORD *)a1 + 1);
    v156 = v23;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    QP::DateConverter::resolveDateComponentsAsRange((uint64_t)&v155, *(unsigned __int16 *)(v13 + 12), *(_DWORD *)(v13 + 8), v161, v159, (uint64_t)v157, 1);
    v26 = v156;
    if (v156)
    {
      v27 = (unint64_t *)&v156->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = v173;
    v30 = QP::DateComponents::isConcreteType(&v165, *(_DWORD *)(v173 + 8))
       && QP::DateComponents::isEmpty((QP::DateComponents *)__p)
       && ((QP::DateComponents::isEmpty((QP::DateComponents *)v163) & 1) != 0
        || (QP::DateComponents::isConcreteType(v163, *(_DWORD *)(v29 + 8)) & 1) != 0);
    if ((*(_DWORD *)(v29 + 16) - 1) < 2)
      v30 = 1;
    v100 = v30;
    v35 = 0;
    if (QP::DateComponents::isEmpty((QP::DateComponents *)v163)
      && (DWORD1(v166) & 0x80000000) != 0
      && v168 < 0)
    {
      AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v165, *(__CFCalendar **)(*((_QWORD *)a1 + 1) + 88), *(const __CFDate **)(*((_QWORD *)a1 + 1) + 72));
      if (AbsoluteTime <= getCurrentTime(*(__CFCalendar **)(*((_QWORD *)a1 + 1) + 88), *(const __CFDate **)(*((_QWORD *)a1 + 1) + 72)))v35 = 0;
      else
        v35 = 0xFFFFFFFFLL;
    }
    v149 = 0;
    v150 = &v149;
    v151 = 0x3002000000;
    v152 = __Block_byref_object_copy__6;
    v153 = __Block_byref_object_dispose__6;
    v154 = CFArrayCreateMutable(v11, 0, MEMORY[0x24BDBD690]);
    v147[0] = 0;
    v147[1] = v147;
    v147[2] = 0x3002000000;
    v147[3] = __Block_byref_object_copy__6;
    v147[4] = __Block_byref_object_dispose__6;
    v148 = CFArrayCreateMutable(v11, 0, MEMORY[0x24BDBD690]);
    v141 = 0;
    v142 = &v141;
    v143 = 0x3002000000;
    v144 = __Block_byref_object_copy__1_0;
    v145 = __Block_byref_object_dispose__2_0;
    v37 = (uint64_t *)*((_QWORD *)a1 + 5);
    v139 = v29;
    v140 = v174;
    if (v174)
    {
      v38 = (unint64_t *)&v174->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    started = QP::DateFormatter::copyISODisplayForStartDate(v37, &v139, *(unsigned __int16 *)(v29 + 12), 0, 1, v35);
    v40 = v140;
    if (v140)
    {
      v41 = (unint64_t *)&v140->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v133 = 0;
    v134 = &v133;
    v135 = 0x3002000000;
    v136 = __Block_byref_object_copy__1_0;
    v137 = __Block_byref_object_dispose__2_0;
    v43 = (uint64_t *)*((_QWORD *)a1 + 5);
    v44 = v173;
    v131 = v173;
    v132 = v174;
    if (v174)
    {
      v45 = (unint64_t *)&v174->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    v138 = QP::DateFormatter::copyISODisplayForEndDate(v43, &v131, *(unsigned __int16 *)(v44 + 12), 0, 1, v35);
    v47 = v132;
    if (v132)
    {
      v48 = (unint64_t *)&v132->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    if (v142[5] && v134[5])
    {
      value = CFStringCreateWithFormat(v11, 0, CFSTR("$time.iso(%@)"), v142[5]);
      v107 = CFStringCreateWithFormat(v11, 0, CFSTR("$time.iso(%@)"), v134[5]);
      QP::Formatter::setParseAttribute(a1, CFSTR("kQPDateStart"), value, (*a3)[1]);
      QP::Formatter::setParseAttribute(a1, CFSTR("kQPDateEnd"), v107, (*a3)[1]);
      nlp::CFScopedPtr<__CFString const*>::reset(&v107, 0);
      nlp::CFScopedPtr<__CFString const*>::reset(&value, 0);
    }
    v129[0] = 0;
    v129[1] = v129;
    v129[2] = 0x2000000000;
    v130 = 0;
    v50 = *((_QWORD *)a1 + 3);
    v51 = MEMORY[0x24BDAC760];
    v123[2] = ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke;
    v123[3] = &unk_24DA25A30;
    v53 = *a3;
    v52 = a3[1];
    v54 = (uint64_t)&(*a3)[3];
    v123[0] = MEMORY[0x24BDAC760];
    v123[1] = 1174405120;
    v123[10] = a1;
    v123[11] = v53;
    v124 = (std::__shared_weak_count *)v52;
    if (v52)
    {
      p_length = (unint64_t *)&v52->length;
      do
        v56 = __ldxr(p_length);
      while (__stxr(v56 + 1, p_length));
    }
    v123[4] = &v141;
    v123[5] = &v133;
    v125 = v12;
    v123[6] = &v149;
    v128 = v100;
    v57 = v173;
    v58 = v174;
    v126 = v173;
    v127 = v174;
    if (v174)
    {
      v59 = (unint64_t *)&v174->__shared_owners_;
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
    v123[7] = v147;
    v123[8] = v129;
    v123[9] = &v176;
    QP::ParserGrammar::translations(v50, v54, (uint64_t)v123);
    v122 = CFStringCreateWithSubstring(v11, a2, *(CFRange *)(v196 + 72));
    QP::Formatter::setParseAttribute(a1, kQPParseAttributeDateKey, v122, (*a3)[1]);
    Count = CFArrayGetCount((CFArrayRef)v150[5]);
    if (Count)
    {
      v62 = v35;
      v63 = CFStringCreateByCombiningStrings(v11, (CFArrayRef)v150[5], CFSTR(" || "));
      value = v63;
      if (CFStringGetLength(v63))
      {
        v64 = v190;
        if (Count <= 1)
          v65 = CFStringCreateWithFormat(v11, 0, CFSTR("%@"), v63);
        else
          v65 = CFStringCreateWithFormat(v11, 0, CFSTR("(%@)"), v63);
        nlp::CFScopedPtr<__CFString const*>::reset(v64 + 5, v65);
        if (CFStringGetLength((CFStringRef)v190[5]))
          QP::Formatter::setParseAttribute(a1, kQPParseAttributeDescriptionKey, v190[5], (*a3)[1]);
        ++*((_QWORD *)a1 + 10);
      }
      if (v63)
        CFRelease(v63);
      v35 = v62;
      v51 = MEMORY[0x24BDAC760];
    }
    v66 = (CFDateFormatterRef *)*((_QWORD *)a1 + 5);
    v119 = v57;
    v120 = v58;
    if (v58)
    {
      v67 = (unint64_t *)&v58->__shared_owners_;
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
    v69 = QP::DateFormatter::copyDisplayForDate(v66, &v119, 1, v35);
    v121 = v69;
    v70 = v120;
    if (v120)
    {
      v71 = (unint64_t *)&v120->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
      v69 = v121;
    }
    if (!v69)
    {
LABEL_114:
      if (v122)
        CFRelease(v122);
      v86 = v127;
      if (v127)
      {
        v87 = (unint64_t *)&v127->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      v89 = v124;
      if (v124)
      {
        v90 = (unint64_t *)&v124->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      _Block_object_dispose(v129, 8);
      _Block_object_dispose(&v133, 8);
      if (v138)
        CFRelease(v138);
      _Block_object_dispose(&v141, 8);
      if (started)
        CFRelease(started);
      _Block_object_dispose(v147, 8);
      if (v148)
        CFRelease(v148);
      _Block_object_dispose(&v149, 8);
      if (v154)
        CFRelease(v154);
      v14 = v174;
LABEL_135:
      if (v14)
      {
        v92 = (unint64_t *)&v14->__shared_owners_;
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if (v175)
        CFRelease(v175);
      goto LABEL_142;
    }
    value = 0;
    p_value = &value;
    v115 = 0x3002000000;
    v116 = __Block_byref_object_copy__1_0;
    v117 = __Block_byref_object_dispose__2_0;
    v118 = 0;
    v107 = 0;
    v108 = &v107;
    v109 = 0x3002000000;
    v110 = __Block_byref_object_copy__1_0;
    v111 = __Block_byref_object_dispose__2_0;
    cf = 0;
    v73 = *a3;
    v106[0] = v51;
    v106[1] = 0x40000000;
    v106[2] = ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_151;
    v106[3] = &unk_24DA25A68;
    v106[5] = &v107;
    v106[6] = a1;
    v106[4] = &value;
    QP::ParseAttribute::actionsForRoot((uint64_t)v73, (uint64_t)v106);
    v74 = (const __CFString *)p_value[5];
    if (v74)
    {
      v75 = CFStringCreateWithFormat(v11, 0, v74, v69);
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v195, v75);
      QP::SpotlightFormatter::addDisplay(a1, v195, (*a3)[1]);
      CFDictionarySetValue(v186, CFSTR("kQPDisplay"), v195);
      v177[3] = (uint64_t)CFSTR("kQPDateSpecial");
      if (!v190[5])
        goto LABEL_109;
      if (!v142[5])
        goto LABEL_109;
      if (!v134[5])
        goto LABEL_109;
      if (!v108[5])
        goto LABEL_109;
      v76 = *((_QWORD *)a1 + 1);
      if (!*(_BYTE *)(v76 + 63))
        goto LABEL_109;
      BundleWithIdentifier = *(const __CFString **)(v76 + 192);
      if (BundleWithIdentifier)
      {
        BundleWithIdentifier = (const __CFString *)CFBundleGetBundleWithIdentifier(BundleWithIdentifier);
        v76 = *((_QWORD *)a1 + 1);
      }
      v78 = *(_QWORD *)(v76 + 8);
      v79 = CFSTR("Search");
      if (v78 != 8)
        v79 = 0;
      if (v78 == 2)
        v80 = CFSTR("Mail");
      else
        v80 = v79;
      v105 = copyLocalizedStringForDomain((unint64_t)BundleWithIdentifier, v80, CFSTR("Tokens"), CFSTR("TOKEN:kQPTokenDate"), *(const __CFString **)(v76 + 136));
      if (v105)
      {
        theDict = CFDictionaryCreateMutable(v11, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        CFDictionarySetValue(theDict, CFSTR("QUERY"), v190[5]);
        CFDictionarySetValue(theDict, CFSTR("TOKEN"), v108[5]);
        CFDictionarySetValue(theDict, CFSTR("TEXT"), v69);
        CFDictionarySetValue(theDict, CFSTR("DATE_FROM"), (const void *)v142[5]);
        CFDictionarySetValue(theDict, CFSTR("DATE_TO"), (const void *)v134[5]);
        CFArrayAppendValue((CFMutableArrayRef)v181[5], theDict);
        nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)&theDict, 0);
      }
    }
    else
    {
      Copy = CFStringCreateCopy(v11, v69);
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v195, Copy);
      QP::SpotlightFormatter::addDisplay(a1, v69, (*a3)[1]);
      CFDictionarySetValue(v186, CFSTR("kQPDisplay"), v69);
      v82 = CFStringCreateWithFormat(v11, 0, CFSTR("%d"), WORD2((*a3)[2].location));
      v105 = v82;
      v83 = *((_QWORD *)a1 + 3);
      v101[0] = v51;
      v101[1] = 1174405120;
      v101[2] = ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_2_167;
      v101[3] = &unk_24DA25A90;
      v101[6] = a1;
      v102[0] = v173;
      v102[1] = v174;
      if (v174)
      {
        v84 = (unint64_t *)&v174->__shared_owners_;
        do
          v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
      }
      v103 = v35;
      v101[4] = &v189;
      v101[5] = &v180;
      QP::ParserGrammar::tokens(v83, CFSTR("kQPDate"), v82, v69, (uint64_t)v101);
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v102);
    }
    nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v105, 0);
LABEL_109:
    _Block_object_dispose(&v107, 8);
    if (cf)
      CFRelease(cf);
    _Block_object_dispose(&value, 8);
    if (v118)
      CFRelease(v118);
    CFRelease(v69);
    goto LABEL_114;
  }
  v31 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, "kQPDateExtension");
  v32 = QP::equals(&v31[3].location, __p);
  v33 = v32;
  if (SBYTE7(v170) < 0)
  {
    operator delete(__p[0]);
    if (!v33)
      goto LABEL_142;
  }
  else if (!v32)
  {
    goto LABEL_142;
  }
  v34 = CFStringCreateWithSubstring(v11, a2, *(CFRange *)(length + 72));
  __p[0] = (void *)v34;
  QP::Formatter::setParseAttribute(a1, kQPParseAttributeDateExtensionKey, v34, (*a3)[1]);
  ++*((_QWORD *)a1 + 10);
  v177[3] = (uint64_t)CFSTR("kQPDateExtension");
  if (v34)
    CFRelease(v34);
LABEL_142:
  if (CFArrayGetCount((CFArrayRef)v181[5]))
  {
    v94 = CFSTR("kQPTokenDate");
    v177[3] = (uint64_t)CFSTR("kQPTokenDate");
  }
  else
  {
    v94 = (const __CFString *)v177[3];
  }
  QP::SpotlightFormatter::addTokens(a1, v94, (const __CFArray *)v181[5]);
  QP::SpotlightFormatter::addSuggestion(a1, v195);
  QP::SpotlightFormatter::addDescription(a1, (CFStringRef)v190[5]);
  v95 = v186;
  QP::SpotlightFormatter::addAttributes(a1, v186);
  v96 = Mutable;
  QP::SpotlightFormatter::addPrimaryCategories(a1, Mutable);
  v97 = v187;
  QP::SpotlightFormatter::addSecondaryCategory(a1, v187);
  _Block_object_dispose(&v176, 8);
  _Block_object_dispose(&v180, 8);
  if (v185)
    CFRelease(v185);
  if (v95)
    CFRelease(v95);
  if (v97)
    CFRelease(v97);
  if (v96)
    CFRelease(v96);
  _Block_object_dispose(&v189, 8);
  if (v194)
    CFRelease(v194);
  if (v195)
    CFRelease(v195);
  v9 = v197;
  if (v197)
    goto LABEL_158;
}

void sub_218E55E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,const void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,const void *a44,const void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  char a69;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  nlp::CFScopedPtr<__CFString const*>::reset(&a22, 0);
  _Block_object_dispose(&a30, 8);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v70 + 40), 0);
  _Block_object_dispose(&a36, 8);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v69 + 40), 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a44, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a45, 0);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a60);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a57);
  _Block_object_dispose(&a63, 8);
  _Block_object_dispose(&a69, 8);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&STACK[0x208], 0);
  _Block_object_dispose(&STACK[0x220], 8);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&STACK[0x248], 0);
  _Block_object_dispose(&STACK[0x250], 8);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)&STACK[0x278], 0);
  _Block_object_dispose(&STACK[0x280], 8);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)&STACK[0x2A8], 0);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x440]);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)&STACK[0x450], 0);
  _Block_object_dispose(&STACK[0x458], 8);
  _Block_object_dispose(&STACK[0x478], 8);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)&STACK[0x4A0], 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)(v71 - 216), 0);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(v71 - 208), 0);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(v71 - 200), 0);
  _Block_object_dispose((const void *)(v71 - 192), 8);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v71 - 152), 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v71 - 144), 0);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v71 - 136);
  _Unwind_Resume(a1);
}

void ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  void **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  const __CFString *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD v30[4];
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  char v38;
  _QWORD v39[4];
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  char v49;

  v5 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v6 = MEMORY[0x24BDAC760];
  v39[0] = MEMORY[0x24BDAC760];
  v39[1] = 1174405120;
  v39[2] = ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_2;
  v39[3] = &unk_24DA25998;
  v43 = v5;
  v44 = v4;
  v7 = *(std::__shared_weak_count **)(a1 + 96);
  v45 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v40 = *(_OWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 48);
  v46 = a2;
  v41 = v10;
  v49 = *(_BYTE *)(a1 + 128);
  v47 = *(_OWORD *)(a1 + 104);
  v11 = *(std::__shared_weak_count **)(a1 + 120);
  v48 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v42 = *(_OWORD *)(a1 + 56);
  QP::ParseAttribute::actionsForRoot(v4, (uint64_t)v39);
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
  {
    v20 = *(_QWORD *)(v5 + 24);
    v21 = (void **)(*(_QWORD *)(a1 + 88) + 48);
    v30[0] = v6;
    v30[1] = 1174405120;
    v30[2] = ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_142;
    v30[3] = &unk_24DA259F8;
    v34 = v5;
    v35 = a2;
    v31 = *(_OWORD *)(a1 + 32);
    v32 = *(_QWORD *)(a1 + 48);
    v38 = *(_BYTE *)(a1 + 128);
    v36 = *(_OWORD *)(a1 + 104);
    v22 = *(std::__shared_weak_count **)(a1 + 120);
    v37 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v33 = *(_QWORD *)(a1 + 56);
    QP::ParserGrammar::actions(v20, v21, (unsigned __int16)kQPSymbolIdDefault, (unsigned __int16)kQPSymbolIdActionDefault, (uint64_t)v30);
    v25 = *(_DWORD *)(*(_QWORD *)(a1 + 112) + 16);
    if (v25 == 1)
    {
      v26 = CFSTR("kQPDateDistantPast");
    }
    else
    {
      if (v25 != 2)
      {
LABEL_27:
        v27 = v37;
        if (v37)
        {
          v28 = (unint64_t *)&v37->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        goto LABEL_8;
      }
      v26 = CFSTR("kQPDateDistantFuture");
    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = v26;
    goto LABEL_27;
  }
LABEL_8:
  v14 = v48;
  if (v48)
  {
    v15 = (unint64_t *)&v48->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v45;
  if (v45)
  {
    v18 = (unint64_t *)&v45->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_218E563EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v39;

  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v38);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a38);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v39 + 80);
  _Unwind_Resume(a1);
}

void QP::ParseAttribute::actionsForRoot(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD **v5;
  _QWORD *v6;
  _QWORD **v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD **v11;
  _QWORD *v12[2];

  v2 = *(_QWORD **)(a1 + 80);
  v3 = (_QWORD *)(a1 + 88);
  if (v2 != (_QWORD *)(a1 + 88))
  {
    do
    {
      std::set<unsigned short>::set[abi:ne180100]((uint64_t *)&v11, (uint64_t)(v2 + 5));
      v5 = v11;
      if (v11 != v12)
      {
        do
        {
          (*(void (**)(uint64_t, _QWORD, _QWORD))(a2 + 16))(a2, *((unsigned __int16 *)v2 + 16), *((unsigned __int16 *)v5 + 13));
          v6 = v5[1];
          if (v6)
          {
            do
            {
              v7 = (_QWORD **)v6;
              v6 = (_QWORD *)*v6;
            }
            while (v6);
          }
          else
          {
            do
            {
              v7 = (_QWORD **)v5[2];
              v8 = *v7 == v5;
              v5 = v7;
            }
            while (!v8);
          }
          v5 = v7;
        }
        while (v7 != v12);
      }
      std::__tree<unsigned short>::destroy((uint64_t)&v11, v12[0]);
      v9 = (_QWORD *)v2[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v2[2];
          v8 = *v10 == (_QWORD)v2;
          v2 = v10;
        }
        while (!v8);
      }
      v2 = v10;
    }
    while (v10 != v3);
  }
}

void sub_218E56514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<unsigned short>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_2(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[4];
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  char v25;

  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(_QWORD *)(v6 + 24);
  v9 = (void **)(v7 + 48);
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 1174405120;
  v17[2] = ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_3;
  v17[3] = &unk_24DA25960;
  v18 = *(_OWORD *)(a1 + 32);
  v22 = *(_OWORD *)(a1 + 96);
  v10 = *(_QWORD *)(a1 + 48);
  v21 = v6;
  v19 = v10;
  v25 = *(_BYTE *)(a1 + 128);
  v11 = *(std::__shared_weak_count **)(a1 + 120);
  v23 = *(_QWORD *)(a1 + 112);
  v24 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v20 = *(_OWORD *)(a1 + 56);
  QP::ParserGrammar::actions(v8, v9, a2, a3, (uint64_t)v17);
  v14 = v24;
  if (v24)
  {
    v15 = (unint64_t *)&v24->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_218E56624(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __CFString *CFStringFromString;
  const __CFAllocator *v5;
  CFStringRef v6;
  const __CFDictionary *v7;
  const void *Value;
  CFStringRef v9;
  const __CFArray *v10;
  CFStringRef v11;
  uint64_t v12;
  __CFCalendar *v13;
  const __CFDate *v14;
  const __CFDictionary *v15;
  uint64_t v16;
  int v17;
  CFStringRef v18;
  const __CFArray *v19;
  const __CFArray *v20;
  _QWORD v21[5];
  CFStringRef v22;
  __CFString *v23;
  CFRange v24;
  CFRange v25;
  CFRange v26;

  v3 = *(_QWORD *)(a1 + 72);
  CFStringFromString = (__CFString *)QP::createCFStringFromString(a2);
  v23 = CFStringFromString;
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, *(CFStringRef *)(a1 + 80), CFStringFromString, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  v22 = v6;
  v7 = *(const __CFDictionary **)(a1 + 88);
  if (v7)
  {
    Value = CFDictionaryGetValue(v7, CFStringFromString);
    if (Value)
    {
      v9 = CFStringCreateWithFormat(v5, 0, CFSTR("(%@ && %@)"), v6, Value);
      if (v6)
        CFRelease(v6);
      v22 = v9;
      v6 = v9;
    }
  }
  v10 = *(const __CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  v24.length = CFArrayGetCount(v10);
  v24.location = 0;
  if (!CFArrayContainsValue(v10, v24, v6))
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v6);
  if (*(_BYTE *)(a1 + 112) || !CFStringHasPrefix(CFStringFromString, CFSTR("kMDItem")))
  {
    v11 = v6;
  }
  else
  {
    v12 = *(_QWORD *)(v3 + 8);
    v14 = *(const __CFDate **)(v12 + 72);
    v13 = *(__CFCalendar **)(v12 + 80);
    v15 = *(const __CFDictionary **)(a1 + 88);
    v16 = *(_QWORD *)(a1 + 96);
    v17 = *(unsigned __int16 *)(v16 + 12);
    v21[0] = MEMORY[0x24BDAC760];
    v21[1] = 0x40000000;
    v21[2] = ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_4;
    v21[3] = &unk_24DA25938;
    v21[4] = *(_QWORD *)(a1 + 56);
    QP::enumerateQueryWithAction(v13, v14, CFStringFromString, v15, v17, (unsigned int *)(v16 + 20), (unsigned int *)(v16 + 72), (uint64_t)v21);
    v18 = CFStringCreateByCombiningStrings(v5, *(CFArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), CFSTR(" && "));
    if (CFArrayGetCount(*(CFArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40)) < 2)
    {
      v20 = *(const __CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      v26.length = CFArrayGetCount(v20);
      v26.location = 0;
      if (!CFArrayContainsValue(v20, v26, v18))
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v18);
      v11 = v6;
    }
    else
    {
      v11 = CFStringCreateWithFormat(v5, 0, CFSTR("(%@)"), v18);
      if (v6)
        CFRelease(v6);
      v22 = v11;
      v19 = *(const __CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      v25.length = CFArrayGetCount(v19);
      v25.location = 0;
      if (!CFArrayContainsValue(v19, v25, v11))
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v11);
    }
    if (v18)
      CFRelease(v18);
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
  if (v11)
  {
    CFRelease(v11);
    CFStringFromString = v23;
  }
  if (CFStringFromString)
    CFRelease(CFStringFromString);
}

void sub_218E568F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v1 - 64), 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v1 - 56), 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_4(uint64_t a1, const void *a2)
{
  const __CFArray *v4;
  CFRange v5;

  v4 = *(const __CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v5.length = CFArrayGetCount(v4);
  v5.location = 0;
  if (!CFArrayContainsValue(v4, v5, a2))
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

uint64_t __copy_helper_block_e8_96c43_ZTSNSt3__110shared_ptrIN2QP10DatePeriodEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(result + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(result + 104) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_96c43_ZTSNSt3__110shared_ptrIN2QP10DatePeriodEEE(uint64_t a1)
{
  return std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](a1 + 96);
}

_QWORD *__copy_helper_block_e8_80c47_ZTSNSt3__110shared_ptrIN2QP14ParseAttributeEEE112c43_ZTSNSt3__110shared_ptrIN2QP10DatePeriodEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[11];
  result[10] = a2[10];
  result[11] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[15];
  result[14] = a2[14];
  result[15] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_80c47_ZTSNSt3__110shared_ptrIN2QP14ParseAttributeEEE112c43_ZTSNSt3__110shared_ptrIN2QP10DatePeriodEEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 80;
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](a1 + 112);
  return std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v1);
}

void ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_142(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __CFString *CFStringFromString;
  const __CFAllocator *v5;
  CFStringRef v6;
  const __CFDictionary *v7;
  const void *Value;
  CFStringRef v9;
  const __CFArray *v10;
  CFStringRef v11;
  uint64_t v12;
  __CFCalendar *v13;
  const __CFDate *v14;
  const __CFDictionary *v15;
  uint64_t v16;
  int v17;
  CFStringRef v18;
  const __CFArray *v19;
  const __CFArray *v20;
  _QWORD v21[5];
  CFStringRef v22;
  __CFString *v23;
  CFRange v24;
  CFRange v25;
  CFRange v26;

  v3 = *(_QWORD *)(a1 + 64);
  CFStringFromString = (__CFString *)QP::createCFStringFromString(a2);
  v23 = CFStringFromString;
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, *(CFStringRef *)(a1 + 72), CFStringFromString, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  v22 = v6;
  v7 = *(const __CFDictionary **)(a1 + 80);
  if (v7)
  {
    Value = CFDictionaryGetValue(v7, CFStringFromString);
    if (Value)
    {
      v9 = CFStringCreateWithFormat(v5, 0, CFSTR("(%@ && %@)"), v6, Value);
      if (v6)
        CFRelease(v6);
      v22 = v9;
      v6 = v9;
    }
  }
  v10 = *(const __CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  v24.length = CFArrayGetCount(v10);
  v24.location = 0;
  if (!CFArrayContainsValue(v10, v24, v6))
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v6);
  if (*(_BYTE *)(a1 + 104) || !CFStringHasPrefix(CFStringFromString, CFSTR("kMDItem")))
  {
    v11 = v6;
  }
  else
  {
    v12 = *(_QWORD *)(v3 + 8);
    v14 = *(const __CFDate **)(v12 + 72);
    v13 = *(__CFCalendar **)(v12 + 80);
    v15 = *(const __CFDictionary **)(a1 + 80);
    v16 = *(_QWORD *)(a1 + 88);
    v17 = *(unsigned __int16 *)(v16 + 12);
    v21[0] = MEMORY[0x24BDAC760];
    v21[1] = 0x40000000;
    v21[2] = ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_2_143;
    v21[3] = &unk_24DA259D0;
    v21[4] = *(_QWORD *)(a1 + 56);
    QP::enumerateQueryWithAction(v13, v14, CFStringFromString, v15, v17, (unsigned int *)(v16 + 20), (unsigned int *)(v16 + 72), (uint64_t)v21);
    v18 = CFStringCreateByCombiningStrings(v5, *(CFArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), CFSTR(" && "));
    if (CFArrayGetCount(*(CFArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40)) < 2)
    {
      v20 = *(const __CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      v26.length = CFArrayGetCount(v20);
      v26.location = 0;
      if (!CFArrayContainsValue(v20, v26, v18))
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v18);
      v11 = v6;
    }
    else
    {
      v11 = CFStringCreateWithFormat(v5, 0, CFSTR("(%@)"), v18);
      if (v6)
        CFRelease(v6);
      v22 = v11;
      v19 = *(const __CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      v25.length = CFArrayGetCount(v19);
      v25.location = 0;
      if (!CFArrayContainsValue(v19, v25, v11))
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v11);
    }
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
    if (v18)
      CFRelease(v18);
  }
  if (v11)
  {
    CFRelease(v11);
    CFStringFromString = v23;
  }
  if (CFStringFromString)
    CFRelease(CFStringFromString);
}

void sub_218E56D14(_Unwind_Exception *a1)
{
  uint64_t v1;

  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v1 - 64), 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v1 - 56), 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_2_143(uint64_t a1, const void *a2)
{
  const __CFArray *v4;
  CFRange v5;

  v4 = *(const __CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v5.length = CFArrayGetCount(v4);
  v5.location = 0;
  if (!CFArrayContainsValue(v4, v5, a2))
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

uint64_t __copy_helper_block_e8_88c43_ZTSNSt3__110shared_ptrIN2QP10DatePeriodEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(result + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(result + 96) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_88c43_ZTSNSt3__110shared_ptrIN2QP10DatePeriodEEE(uint64_t a1)
{
  return std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](a1 + 88);
}

_QWORD *__copy_helper_block_e8_88c47_ZTSNSt3__110shared_ptrIN2QP14ParseAttributeEEE112c43_ZTSNSt3__110shared_ptrIN2QP10DatePeriodEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[12];
  result[11] = a2[11];
  result[12] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[15];
  result[14] = a2[14];
  result[15] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_88c47_ZTSNSt3__110shared_ptrIN2QP14ParseAttributeEEE112c43_ZTSNSt3__110shared_ptrIN2QP10DatePeriodEEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 88;
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](a1 + 112);
  return std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v1);
}

void ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_151(_QWORD *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  CFStringRef CFStringFromString;
  CFStringRef v9;
  uint64_t v10;
  CFStringRef v11;
  uint64_t v12;
  uint64_t v13;
  const __CFString *BundleWithIdentifier;
  uint64_t v15;
  const __CFString *v16;
  const __CFString *v17;
  const __CFString *v18;
  std::string __p;

  if (!*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40))
  {
    v6 = a1[6];
    if (QP::ParserGrammar::hasSuggestion(*(QP::ParserGrammar **)(v6 + 24), kQPParseAttributeDateKey, a2, a3))
    {
      v7 = *(_QWORD *)(a1[4] + 8);
      QP::ParserGrammar::suggestion(*(QP::ParserGrammar **)(v6 + 24), kQPParseAttributeDateKey, a2, a3, &__p);
      CFStringFromString = QP::createCFStringFromString((uint64_t)&__p);
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v7 + 40), CFStringFromString);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      QP::ParserGrammar::symbol(*(QP::ParserGrammar **)(v6 + 24), a3, &__p);
      v9 = QP::createCFStringFromString((uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v10 = *(_QWORD *)(a1[5] + 8);
      v11 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("TOKEN:%@"), v9);
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v10 + 40), v11);
      v12 = *(_QWORD *)(a1[5] + 8);
      v13 = *(_QWORD *)(v6 + 8);
      BundleWithIdentifier = *(const __CFString **)(v13 + 192);
      if (BundleWithIdentifier)
      {
        BundleWithIdentifier = (const __CFString *)CFBundleGetBundleWithIdentifier(BundleWithIdentifier);
        v13 = *(_QWORD *)(v6 + 8);
      }
      v15 = *(_QWORD *)(v13 + 8);
      v16 = CFSTR("Search");
      if (v15 != 8)
        v16 = 0;
      if (v15 == 2)
        v17 = CFSTR("Mail");
      else
        v17 = v16;
      v18 = copyLocalizedStringForDomain((unint64_t)BundleWithIdentifier, v17, CFSTR("Token"), *(const __CFString **)(*(_QWORD *)(a1[5] + 8) + 40), *(const __CFString **)(v13 + 136));
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v12 + 40), v18);
      if (v9)
        CFRelease(v9);
    }
  }
}

void sub_218E57008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void QP::SpotlightFormatter::addDisplay(QP::SpotlightFormatter *this, CFStringRef theString, CFRange a3)
{
  CFIndex length;
  CFIndex location;
  const __CFString *v5;
  CFRange v7;

  if (a3.location != -1)
  {
    length = a3.length;
    if (a3.length)
    {
      location = a3.location;
      v5 = theString;
      if (!theString || !CFStringGetLength(theString))
        v5 = &stru_24DA27910;
      v7.location = location;
      v7.length = length;
      QP::Formatter::setParseAttribute(this, kQPParseAttributeDisplayKey, v5, v7);
    }
  }
}

void ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_2_167(uint64_t a1, const void *a2, int a3, CFStringRef str, const __CFString *a5)
{
  uint64_t v8;
  unsigned __int16 IntValue;
  QP::DatePeriod *v10;
  CFDateFormatterRef *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  const __CFAllocator *v18;
  uint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  CFMutableStringRef MutableCopy;
  const __CFString *v34;
  const __CFString *v35;
  __CFDictionary *v36;
  __CFString *v37;
  CFTypeRef v38;
  const __CFString *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  const __CFString *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  CFTypeRef cf;
  CFMutableDictionaryRef theDict;
  uint64_t v47;
  std::__shared_weak_count *v48;
  __CFString *v49;
  CFRange v50;
  CFRange v51;

  v8 = *(_QWORD *)(a1 + 48);
  IntValue = CFStringGetIntValue(str);
  if (IntValue == 6)
  {
    v10 = *(QP::DatePeriod **)(a1 + 56);
    if ((*((_DWORD *)v10 + 2) - 6) < 0xD
      || QP::DatePeriod::hasTodayReference(v10, *(__CFCalendar **)(*(_QWORD *)(v8 + 8) + 80), *(const __CFDate **)(*(_QWORD *)(v8 + 8) + 72)))
    {
      return;
    }
  }
  v11 = *(CFDateFormatterRef **)(v8 + 40);
  v12 = *(std::__shared_weak_count **)(a1 + 64);
  v47 = *(_QWORD *)(a1 + 56);
  v48 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v49 = QP::DateFormatter::copyDisplayForDate(v11, (uint64_t)&v47, IntValue, 1u, 1, *(unsigned int *)(a1 + 72));
  v15 = v48;
  if (v48)
  {
    v16 = (unint64_t *)&v48->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v19 = *(uint64_t **)(v8 + 40);
  v20 = *(std::__shared_weak_count **)(a1 + 64);
  v43 = *(_QWORD *)(a1 + 56);
  v44 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  cf = QP::DateFormatter::copyISODisplayForStartDate(v19, &v43, IntValue, 0, 1, *(unsigned int *)(a1 + 72));
  v23 = v44;
  if (v44)
  {
    v24 = (unint64_t *)&v44->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = *(uint64_t **)(v8 + 40);
  v27 = *(std::__shared_weak_count **)(a1 + 64);
  v40 = *(_QWORD *)(a1 + 56);
  v41 = v27;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v42 = QP::DateFormatter::copyISODisplayForEndDate(v26, &v40, IntValue, 0, 1, *(unsigned int *)(a1 + 72));
  v30 = v41;
  if (!v41)
    goto LABEL_27;
  v31 = (unint64_t *)&v41->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (v32)
  {
LABEL_27:
    if (a5)
      goto LABEL_28;
LABEL_31:
    v36 = theDict;
    CFDictionarySetValue(theDict, CFSTR("QUERY"), *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
  std::__shared_weak_count::__release_weak(v30);
  if (!a5)
    goto LABEL_31;
LABEL_28:
  MutableCopy = CFStringCreateMutableCopy(v18, 0, a5);
  v34 = (const __CFString *)cf;
  v50.length = CFStringGetLength(MutableCopy);
  v50.location = 0;
  CFStringFindAndReplace(MutableCopy, CFSTR("%1@"), v34, v50, 0);
  v35 = v42;
  v51.length = CFStringGetLength(MutableCopy);
  v51.location = 0;
  CFStringFindAndReplace(MutableCopy, CFSTR("%2@"), v35, v51, 0);
  v36 = theDict;
  CFDictionarySetValue(theDict, CFSTR("QUERY"), MutableCopy);
  if (MutableCopy)
    CFRelease(MutableCopy);
LABEL_32:
  v37 = v49;
  if (!a2 || !v49)
  {
    v39 = v42;
LABEL_38:
    if (!v39)
      goto LABEL_40;
    goto LABEL_39;
  }
  v38 = cf;
  v39 = v42;
  if (!cf)
    goto LABEL_38;
  if (!v42)
  {
LABEL_41:
    CFRelease(v38);
    goto LABEL_42;
  }
  CFDictionarySetValue(v36, CFSTR("TOKEN"), a2);
  CFDictionarySetValue(v36, CFSTR("TEXT"), v37);
  CFDictionarySetValue(v36, CFSTR("DATE_FROM"), v38);
  CFDictionarySetValue(v36, CFSTR("DATE_TO"), v39);
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v36);
LABEL_39:
  CFRelease(v39);
LABEL_40:
  v38 = cf;
  if (cf)
    goto LABEL_41;
LABEL_42:
  if (v36)
    CFRelease(v36);
  if (v37)
    CFRelease(v37);
}

void sub_218E5745C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  const void *v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  va_list va1;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, const void *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, const void *);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va1, 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)va2, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v5 - 72), 0);
  _Unwind_Resume(a1);
}

BOOL QP::DatePeriod::hasTodayReference(QP::DatePeriod *this, __CFCalendar *a2, const __CFDate *a3)
{
  CFAbsoluteTime CurrentTime;
  int v7;
  int v8;
  int v9;

  CurrentTime = getCurrentTime(a2, a3);
  v8 = -1;
  v9 = -1;
  v7 = -1;
  CFCalendarDecomposeAbsoluteTime(a2, CurrentTime, "yMd", &v7, &v8, &v9);
  return *((_DWORD *)this + 2) == 2
      && (*((_DWORD *)this + 10) == v7 && *((_DWORD *)this + 9) == v8 && *((_DWORD *)this + 8) == v9
       || *((_DWORD *)this + 23) == v7 && *((_DWORD *)this + 22) == v8 && *((_DWORD *)this + 21) == v9);
}

uint64_t __copy_helper_block_e8_56c43_ZTSNSt3__110shared_ptrIN2QP10DatePeriodEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 64) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_56c43_ZTSNSt3__110shared_ptrIN2QP10DatePeriodEEE(uint64_t a1)
{
  return std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](a1 + 56);
}

void QP::SpotlightFormatter::addTokens(QP::SpotlightFormatter *this, const __CFString *a2, const __CFArray *a3)
{
  __CFArray *v4;
  const __CFArray *v6;
  const __CFString *v7;

  v4 = (__CFArray *)*((_QWORD *)this + 14);
  if (v4 && *((_QWORD *)this + 15))
  {
    if (a3)
      v6 = a3;
    else
      v6 = (const __CFArray *)*((_QWORD *)this + 23);
    CFArrayAppendValue(v4, v6);
    if (a2)
      v7 = a2;
    else
      v7 = CFSTR("kQPSuggestion");
    CFArrayAppendValue(*((CFMutableArrayRef *)this + 15), v7);
  }
}

void QP::SpotlightFormatter::addSuggestion(QP::SpotlightFormatter *this, CFStringRef theString)
{
  __CFArray *v3;
  CFIndex Length;
  const __CFString *v6;

  v3 = (__CFArray *)*((_QWORD *)this + 13);
  if (v3)
  {
    if (theString && (Length = CFStringGetLength(theString), v3 = (__CFArray *)*((_QWORD *)this + 13), Length))
      v6 = theString;
    else
      v6 = &stru_24DA27910;
    CFArrayAppendValue(v3, v6);
  }
}

void QP::SpotlightFormatter::addDescription(QP::SpotlightFormatter *this, CFStringRef theString)
{
  __CFArray *v3;
  CFIndex Length;
  const __CFString *v6;

  v3 = (__CFArray *)*((_QWORD *)this + 12);
  if (v3)
  {
    if (theString && (Length = CFStringGetLength(theString), v3 = (__CFArray *)*((_QWORD *)this + 12), Length))
      v6 = theString;
    else
      v6 = &stru_24DA27910;
    CFArrayAppendValue(v3, v6);
  }
}

void QP::SpotlightFormatter::addAttributes(QP::SpotlightFormatter *this, const __CFDictionary *a2)
{
  __CFArray *v3;

  v3 = (__CFArray *)*((_QWORD *)this + 11);
  if (v3)
  {
    if (!a2)
      a2 = (const __CFDictionary *)*((_QWORD *)this + 22);
    CFArrayAppendValue(v3, a2);
  }
}

void QP::SpotlightFormatter::addPrimaryCategories(QP::SpotlightFormatter *this, const __CFArray *a2)
{
  __CFArray *v3;

  v3 = (__CFArray *)*((_QWORD *)this + 16);
  if (v3)
  {
    if (!a2)
      a2 = (const __CFArray *)*((_QWORD *)this + 23);
    CFArrayAppendValue(v3, a2);
  }
}

void QP::SpotlightFormatter::addSecondaryCategory(QP::SpotlightFormatter *this, const __CFArray *a2)
{
  __CFArray *v3;

  v3 = (__CFArray *)*((_QWORD *)this + 17);
  if (v3)
  {
    if (!a2)
      a2 = (const __CFArray *)*((_QWORD *)this + 23);
    CFArrayAppendValue(v3, a2);
  }
}

void ___ZN2QP18SpotlightFormatter18_parseAttributeKeyERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEtt12QPSymbolFlagPK10__CFStringPK9__CFArraySG_SD_SD_SD_SD_U13block_pointerFvSD_E_block_invoke(uint64_t a1, CFStringRef theString)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  const __CFString *v11;
  const __CFString *v12;
  const __CFString *v13;
  const void **p_MutableCopy;
  const __CFString *v15;
  int v16;
  const __CFString *v17;
  CFIndex v18;
  const __CFAllocator *v19;
  const __CFString *v20;
  CFMutableStringRef v21;
  _QWORD *v22;
  _BOOL4 v23;
  CFIndex Count;
  __CFString *v25;
  CFIndex v26;
  const __CFArray *ValueAtIndex;
  const __CFString *v28;
  __CFString *v29;
  const __CFArray *v30;
  const __CFString *v31;
  const __CFString *v32;
  __CFString *v33;
  const __CFString *v34;
  CFStringRef theStringa[2];
  char v36;
  CFStringRef MutableCopy;
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  CFRange v41;
  CFRange v42;
  CFRange v43;
  CFRange v44;
  CFRange v45;
  CFRange v46;
  CFRange v47;
  CFRange v48;
  CFRange v49;
  CFRange v50;

  v4 = *(_QWORD *)(a1 + 40);
  if (CFStringContainsString(theString, CFSTR("%@u")))
  {
    if (QP::ParserGrammar::hasUTIs(*(QP::ParserGrammar **)(v4 + 24), *(unsigned __int16 *)(a1 + 112)))
    {
      v5 = *(_QWORD *)(v4 + 24);
      v6 = *(unsigned __int16 *)(a1 + 112);
      v40[0] = MEMORY[0x24BDAC760];
      v40[1] = 0x40000000;
      v40[2] = ___ZN2QP18SpotlightFormatter18_parseAttributeKeyERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEtt12QPSymbolFlagPK10__CFStringPK9__CFArraySG_SD_SD_SD_SD_U13block_pointerFvSD_E_block_invoke_2;
      v40[3] = &unk_24DA25AC8;
      v40[4] = *(_QWORD *)(a1 + 32);
      v40[5] = theString;
      QP::ParserGrammar::UTIs(v5, v6, (uint64_t)v40);
    }
    return;
  }
  if (CFStringContainsString(theString, CFSTR("%@e")))
  {
    if (QP::ParserGrammar::hasFileExtensions(*(QP::ParserGrammar **)(v4 + 24), *(unsigned __int16 *)(a1 + 112)))
    {
      v7 = *(_QWORD *)(v4 + 24);
      v8 = *(unsigned __int16 *)(a1 + 112);
      v39[0] = MEMORY[0x24BDAC760];
      v39[1] = 0x40000000;
      v39[2] = ___ZN2QP18SpotlightFormatter18_parseAttributeKeyERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEtt12QPSymbolFlagPK10__CFStringPK9__CFArraySG_SD_SD_SD_SD_U13block_pointerFvSD_E_block_invoke_3;
      v39[3] = &unk_24DA25AF0;
      v39[4] = *(_QWORD *)(a1 + 32);
      v39[5] = theString;
      QP::ParserGrammar::fileExtensions(v7, v8, (uint64_t)v39);
    }
    return;
  }
  if (CFStringContainsString(theString, CFSTR("%@c")))
  {
    if (QP::ParserGrammar::hasCategories(*(QP::ParserGrammar **)(v4 + 24), *(unsigned __int16 *)(a1 + 112)))
    {
      v9 = *(_QWORD *)(v4 + 24);
      v10 = *(unsigned __int16 *)(a1 + 112);
      v38[0] = MEMORY[0x24BDAC760];
      v38[1] = 0x40000000;
      v38[2] = ___ZN2QP18SpotlightFormatter18_parseAttributeKeyERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEtt12QPSymbolFlagPK10__CFStringPK9__CFArraySG_SD_SD_SD_SD_U13block_pointerFvSD_E_block_invoke_4;
      v38[3] = &unk_24DA25B18;
      v38[4] = *(_QWORD *)(a1 + 32);
      v38[5] = theString;
      QP::ParserGrammar::categories(v9, v10, (uint64_t)v38);
    }
    return;
  }
  if (CFStringContainsString(theString, CFSTR("%@l"))
    || CFStringContainsString(theString, CFSTR("%@h"))
    || CFStringContainsString(theString, CFSTR("%@n")))
  {
    if (!*(_QWORD *)(a1 + 48) || !*(_QWORD *)(a1 + 56) || !*(_QWORD *)(a1 + 64))
      return;
    theStringa[0] = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, theString);
    v11 = *(const __CFString **)(a1 + 56);
    v41.length = CFStringGetLength(theStringa[0]);
    v41.location = 0;
    CFStringFindAndReplace((CFMutableStringRef)theStringa[0], CFSTR("%@l"), v11, v41, 0);
    v12 = *(const __CFString **)(a1 + 48);
    v42.length = CFStringGetLength(theStringa[0]);
    v42.location = 0;
    CFStringFindAndReplace((CFMutableStringRef)theStringa[0], CFSTR("%@h"), v12, v42, 0);
    v13 = *(const __CFString **)(a1 + 64);
    v43.length = CFStringGetLength(theStringa[0]);
    v43.location = 0;
    CFStringFindAndReplace((CFMutableStringRef)theStringa[0], CFSTR("%@n"), v13, v43, 0);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    goto LABEL_17;
  }
  if (CFStringContainsString(theString, CFSTR("%@m")))
  {
    if (!*(_QWORD *)(a1 + 72))
      return;
    theStringa[0] = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, theString);
    v15 = *(const __CFString **)(a1 + 72);
    v44.length = CFStringGetLength(theStringa[0]);
    v44.location = 0;
    CFStringFindAndReplace((CFMutableStringRef)theStringa[0], CFSTR("%@m"), v15, v44, 0);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    goto LABEL_17;
  }
  v16 = *(unsigned __int16 *)(a1 + 114);
  if (v16 != 16)
  {
    if (v16 != 5)
    {
      if (!*(_QWORD *)(a1 + 80))
      {
        (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
        return;
      }
      MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, theString);
      v22 = *(_QWORD **)(a1 + 104);
      std::string::basic_string[abi:ne180100]<0>(theStringa, "kQPMe");
      v23 = QP::equals(v22, theStringa);
      if (v36 < 0)
        operator delete((void *)theStringa[0]);
      if (v23)
      {
        Count = CFArrayGetCount(*(CFArrayRef *)(v4 + 144));
        if (Count)
        {
          v25 = (__CFString *)MutableCopy;
          v26 = Count - 1;
          ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 144), Count - 1);
          v28 = (const __CFString *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
          v47.length = CFStringGetLength(MutableCopy);
          v47.location = 0;
          CFStringFindAndReplace(v25, CFSTR("%@a"), v28, v47, 0);
          v29 = (__CFString *)MutableCopy;
          v30 = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 144), v26);
          v31 = (const __CFString *)CFArrayGetValueAtIndex(v30, 1);
          v48.length = CFStringGetLength(MutableCopy);
          v48.location = 0;
          CFStringFindAndReplace(v29, CFSTR("%@x"), v31, v48, 0);
          (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
        }
      }
      else
      {
        v33 = (__CFString *)MutableCopy;
        v34 = *(const __CFString **)(a1 + 80);
        v50.length = CFStringGetLength(MutableCopy);
        v50.location = 0;
        CFStringFindAndReplace(v33, CFSTR("%@v"), v34, v50, 0);
        (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
      }
      p_MutableCopy = (const void **)&MutableCopy;
      goto LABEL_18;
    }
    if (!*(_QWORD *)(a1 + 80))
      return;
    theStringa[0] = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, theString);
    v17 = *(const __CFString **)(a1 + 80);
    v45.length = CFStringGetLength(theStringa[0]);
    v45.location = 0;
    CFStringFindAndReplace((CFMutableStringRef)theStringa[0], CFSTR("%@s"), v17, v45, 0);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
LABEL_17:
    p_MutableCopy = (const void **)theStringa;
LABEL_18:
    nlp::CFScopedPtr<__CFString *>::reset(p_MutableCopy, 0);
    return;
  }
  if (!*(_QWORD *)(a1 + 88) || !CFStringContainsString(theString, CFSTR("%@i")))
  {
    if (!*(_QWORD *)(a1 + 80))
      return;
    theStringa[0] = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, theString);
    v32 = *(const __CFString **)(a1 + 80);
    v49.length = CFStringGetLength(theStringa[0]);
    v49.location = 0;
    CFStringFindAndReplace((CFMutableStringRef)theStringa[0], CFSTR("%@v"), v32, v49, 0);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    goto LABEL_17;
  }
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 88)) >= 1)
  {
    v18 = 0;
    v19 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    do
    {
      v20 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), v18);
      CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), v18);
      v21 = CFStringCreateMutableCopy(v19, 0, theString);
      theStringa[0] = v21;
      v46.length = CFStringGetLength(v21);
      v46.location = 0;
      CFStringFindAndReplace(v21, CFSTR("%@i"), v20, v46, 0);
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
      nlp::CFScopedPtr<__CFString *>::reset((const void **)theStringa, 0);
      ++v18;
    }
    while (v18 < CFArrayGetCount(*(CFArrayRef *)(a1 + 88)));
  }
}

void sub_218E57DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, const void *a15)
{
  if (a14 < 0)
    operator delete(__p);
  nlp::CFScopedPtr<__CFString *>::reset(&a15, 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP18SpotlightFormatter18_parseAttributeKeyERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEtt12QPSymbolFlagPK10__CFStringPK9__CFArraySG_SD_SD_SD_SD_U13block_pointerFvSD_E_block_invoke_2(uint64_t a1, uint64_t a2)
{
  CFMutableStringRef MutableCopy;
  const __CFString *CFStringFromString;
  CFRange v6;

  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, *(CFStringRef *)(a1 + 40));
  CFStringFromString = QP::createCFStringFromString(a2);
  v6.length = CFStringGetLength(MutableCopy);
  v6.location = 0;
  CFStringFindAndReplace(MutableCopy, CFSTR("%@u"), CFStringFromString, v6, 0);
  (*(void (**)(_QWORD, CFMutableStringRef))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), MutableCopy);
  if (CFStringFromString)
    CFRelease(CFStringFromString);
  if (MutableCopy)
    CFRelease(MutableCopy);
}

void sub_218E57EB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP18SpotlightFormatter18_parseAttributeKeyERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEtt12QPSymbolFlagPK10__CFStringPK9__CFArraySG_SD_SD_SD_SD_U13block_pointerFvSD_E_block_invoke_3(uint64_t a1, uint64_t a2)
{
  CFMutableStringRef MutableCopy;
  const __CFString *CFStringFromString;
  CFRange v6;

  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, *(CFStringRef *)(a1 + 40));
  CFStringFromString = QP::createCFStringFromString(a2);
  v6.length = CFStringGetLength(MutableCopy);
  v6.location = 0;
  CFStringFindAndReplace(MutableCopy, CFSTR("%@e"), CFStringFromString, v6, 0);
  (*(void (**)(_QWORD, CFMutableStringRef))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), MutableCopy);
  if (CFStringFromString)
    CFRelease(CFStringFromString);
  if (MutableCopy)
    CFRelease(MutableCopy);
}

void sub_218E57F98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP18SpotlightFormatter18_parseAttributeKeyERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEtt12QPSymbolFlagPK10__CFStringPK9__CFArraySG_SD_SD_SD_SD_U13block_pointerFvSD_E_block_invoke_4(uint64_t a1, uint64_t a2)
{
  CFMutableStringRef MutableCopy;
  const __CFString *CFStringFromString;
  CFRange v6;

  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, *(CFStringRef *)(a1 + 40));
  CFStringFromString = QP::createCFStringFromString(a2);
  v6.length = CFStringGetLength(MutableCopy);
  v6.location = 0;
  CFStringFindAndReplace(MutableCopy, CFSTR("%@c"), CFStringFromString, v6, 0);
  (*(void (**)(_QWORD, CFMutableStringRef))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), MutableCopy);
  if (CFStringFromString)
    CFRelease(CFStringFromString);
  if (MutableCopy)
    CFRelease(MutableCopy);
}

void sub_218E5807C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void QP::SpotlightFormatter::updateParseWithAnyAttribute(CFArrayRef *a1, uint64_t a2, QP::ParseAttribute **a3)
{
  CFIndex Count;
  const __CFAllocator *v7;
  const CFArrayCallBacks *v8;
  QP::ParseAttribute *v9;
  CFIndex v10;
  CFIndex v11;
  CFStringRef v12;
  CFIndex v13;
  CFStringRef v14;
  CFStringRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  QP::ParseAttribute *v22;
  std::__shared_weak_count *v23;
  void *newValues[2];
  CFStringRef v25;
  _QWORD v26[11];
  _QWORD v27[3];
  char v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  void (*v33)(uint64_t);
  CFTypeRef cf;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t);
  void (*v39)(uint64_t);
  CFMutableArrayRef Mutable;
  CFRange v41;
  CFRange v42;
  CFRange v43;

  if (*((_QWORD *)*a3 + 16) == *((_QWORD *)*a3 + 15))
  {
    v16 = (std::__shared_weak_count *)a3[1];
    v22 = *a3;
    v23 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    QP::Formatter::updateParseWithAnyAttribute((uint64_t)a1, a2, &v22);
    v19 = v23;
    if (v23)
    {
      v20 = (unint64_t *)&v23->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  else
  {
    Count = CFArrayGetCount(a1[12]);
    v35 = 0;
    v36 = &v35;
    v37 = 0x3002000000;
    v38 = __Block_byref_object_copy__6;
    v39 = __Block_byref_object_dispose__6;
    v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v8 = (const CFArrayCallBacks *)MEMORY[0x24BDBD690];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    v29 = 0;
    v30 = &v29;
    v31 = 0x3002000000;
    v32 = __Block_byref_object_copy__6;
    v33 = __Block_byref_object_dispose__6;
    cf = CFArrayCreateMutable(v7, 0, v8);
    v9 = *a3;
    v10 = *((_QWORD *)*a3 + 2);
    v11 = *((_QWORD *)v9 + 3);
    v27[0] = 0;
    v27[1] = v27;
    v27[2] = 0x2000000000;
    v28 = 0;
    v26[0] = MEMORY[0x24BDAC760];
    v26[1] = 0x40000000;
    v26[2] = ___ZN2QP18SpotlightFormatter27updateParseWithAnyAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke;
    v26[3] = &unk_24DA25B68;
    v26[8] = v10;
    v26[9] = v11;
    v26[10] = a2;
    v26[4] = v27;
    v26[5] = &v29;
    v26[6] = &v35;
    v26[7] = a1;
    QP::ParseAttribute::enumerateAttributes((uint64_t)v9, (uint64_t)v26);
    if (CFArrayGetCount((CFArrayRef)v30[5]))
    {
      v12 = CFStringCreateByCombiningStrings(v7, (CFArrayRef)v30[5], CFSTR("|"));
      v25 = v12;
      v42.location = v10;
      v42.length = v11;
      QP::Formatter::setParseAttribute((QP::Formatter *)a1, kQPParseAttributeDisplayKey, v12, v42);
      if (v12)
        CFRelease(v12);
    }
    v13 = CFArrayGetCount(a1[12]);
    if (CFArrayGetCount((CFArrayRef)v36[5]))
    {
      v14 = CFStringCreateByCombiningStrings(v7, (CFArrayRef)v36[5], CFSTR(" || "));
      v25 = v14;
      v15 = CFStringCreateWithFormat(v7, 0, CFSTR("(%@)"), v14);
      newValues[1] = (void *)v15;
      v43.location = v10;
      v43.length = v11;
      QP::Formatter::setParseAttribute((QP::Formatter *)a1, kQPParseAttributeDescriptionKey, v15, v43);
      newValues[0] = (void *)v15;
      v41.length = v13 - Count;
      v41.location = Count;
      CFArrayReplaceValues(a1[12], v41, (const void **)newValues, 1);
      if (v15)
        CFRelease(v15);
      if (v14)
        CFRelease(v14);
    }
    _Block_object_dispose(v27, 8);
    _Block_object_dispose(&v29, 8);
    if (cf)
      CFRelease(cf);
    _Block_object_dispose(&v35, 8);
    if (Mutable)
      CFRelease(Mutable);
  }
}

void sub_218E583B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN2QP18SpotlightFormatter27updateParseWithAnyAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke(CFRange *a1, CFRange **a2)
{
  QP::Formatter *length;
  CFRange *v5;
  _BOOL4 v6;
  _BOOL4 v7;
  CFRange *v8;
  _BOOL4 v9;
  uint64_t location;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  const __CFString *ParseAttribute;
  const __CFString *v18;
  const __CFString *v19;
  const __CFString *v20;
  CFRange *v21;
  std::__shared_weak_count *v22;
  void *__p[2];
  char v24;

  length = (QP::Formatter *)a1[3].length;
  v5 = *a2 + 3;
  std::string::basic_string[abi:ne180100]<0>(__p, "kQPGroundedPerson");
  v6 = QP::equals(v5, __p);
  v7 = v6;
  if ((v24 & 0x80000000) == 0)
  {
    if (!v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7)
LABEL_3:
    *(_BYTE *)(*(_QWORD *)(a1[2].location + 8) + 24) = 1;
LABEL_4:
  if (*(_BYTE *)(*(_QWORD *)(a1[2].location + 8) + 24))
  {
    v8 = *a2 + 3;
    std::string::basic_string[abi:ne180100]<0>(__p, "kQPPerson");
    v9 = !QP::equals(v8, __p) || *(_QWORD *)(*((_QWORD *)length + 1) + 8) != 9;
    if (v24 < 0)
    {
      operator delete(__p[0]);
      if (!v9)
        return;
    }
    else if (!v9)
    {
      return;
    }
  }
  *(CFRange *)__p = (*a2)[1];
  QP::Formatter::removeParseAttribute(length, kQPParseAttributeDisplayKey, a1[4]);
  QP::Formatter::removeParseAttribute(length, kQPParseAttributeDescriptionKey, a1[4]);
  (*a2)[1] = a1[4];
  location = a1[5].location;
  v11 = (std::__shared_weak_count *)a2[1];
  v21 = *a2;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  QP::Formatter::updateParseWithAnyAttribute((uint64_t)length, location, (QP::ParseAttribute **)&v21);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  (*a2)[1] = *(CFRange *)__p;
  ParseAttribute = (const __CFString *)QP::Formatter::getParseAttribute(length, kQPParseAttributeDisplayKey, a1[4]);
  if (ParseAttribute)
  {
    v18 = ParseAttribute;
    if (CFStringGetLength(ParseAttribute))
      CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(a1[2].length + 8) + 40), v18);
  }
  v19 = (const __CFString *)QP::Formatter::getParseAttribute(length, kQPParseAttributeDescriptionKey, a1[4]);
  if (v19)
  {
    v20 = v19;
    if (CFStringGetLength(v19))
      CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(a1[3].location + 8) + 40), v20);
  }
}

void sub_218E5867C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QP::SpotlightFormatter::updateParseWithAttribute(uint64_t a1, const __CFString *a2, CFRange **a3)
{
  const __CFAllocator *v5;
  const CFArrayCallBacks *v6;
  __CFDictionary *v7;
  uint64_t v8;
  CFRange *v9;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t v12;
  const __CFDictionary *v13;
  const __CFArray *Value;
  const __CFArray *v15;
  CFIndex Count;
  CFMutableArrayRef MutableCopy;
  CFRange *v18;
  _BOOL4 v19;
  _BOOL4 v20;
  __CFString *v21;
  CFTypeRef v22;
  CFRange *v23;
  _BOOL4 v24;
  _BOOL4 v25;
  CFRange *v26;
  _BOOL4 v27;
  _BOOL4 v28;
  CFRange *v29;
  _BOOL4 v30;
  _BOOL4 v31;
  CFRange *v32;
  _BOOL4 v33;
  CFRange *v34;
  std::__shared_weak_count *location;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t length;
  const void **v39;
  CFStringRef v40;
  CFStringRef CFStringFromString;
  uint64_t location_low;
  QP::ParserGrammar *v43;
  int v44;
  int v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  const void **v51;
  unint64_t *v52;
  unint64_t v53;
  __CFArray *v54;
  __CFArray *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t i;
  unint64_t v59;
  __int128 *v60;
  __int128 v61;
  std::string *p_p;
  CFStringRef v63;
  uint64_t v64;
  CFStringRef v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  double v74;
  unint64_t v75;
  CFRange *v76;
  _BOOL4 v77;
  __CFString **v78;
  CFStringRef v79;
  unint64_t v80;
  const void **v81;
  CFStringRef v82;
  CFStringRef v83;
  uint64_t v84;
  unsigned int v85;
  const void **v86;
  CFStringRef v87;
  std::string *v88;
  char v89;
  uint64_t v90;
  const __CFString *v91;
  unint64_t v92;
  CFRange *v93;
  _BOOL4 v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *size;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  const void **v102;
  CFStringRef v103;
  CFIndex v104;
  const __CFString *v105;
  const void **v106;
  CFStringRef v107;
  uint64_t v108;
  uint64_t v109;
  const __CFString *v110;
  const void **v111;
  CFStringRef v112;
  uint64_t v113;
  CFIndex v114;
  const void **v115;
  CFStringRef Copy;
  CFIndex v117;
  CFIndex v118;
  const __CFArray *ValueAtIndex;
  const __CFString *v120;
  const void *v121;
  const void *v122;
  const void *v123;
  const void *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  CFRange *v129;
  CFRange *v130;
  _BOOL4 v131;
  CFRange *v132;
  CFStringRef v133;
  const __CFString *v134;
  _BOOL4 v135;
  unsigned int v136;
  std::__shared_weak_count *v137;
  unsigned int v138;
  const __CFAllocator *allocator;
  _QWORD v141[11];
  _QWORD v142[10];
  _QWORD v143[5];
  _QWORD v144[5];
  _QWORD v145[5];
  _QWORD v146[8];
  std::string __p;
  uint64_t (*v148)(uint64_t, uint64_t);
  void (*v149)(uint64_t);
  CFTypeRef v150;
  CFStringRef format;
  std::__shared_weak_count *v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  std::string v155;
  CFTypeRef cf;
  uint64_t v157;
  const void **v158;
  uint64_t v159;
  uint64_t (*v160)(uint64_t, uint64_t);
  void (*v161)(uint64_t);
  CFTypeRef v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t (*v166)(uint64_t, uint64_t);
  void (*v167)(uint64_t);
  CFTypeRef v168;
  uint64_t v169;
  const void **v170;
  uint64_t v171;
  uint64_t (*v172)(uint64_t, uint64_t);
  void (*v173)(uint64_t);
  CFTypeRef v174;
  CFTypeRef v175;
  CFTypeRef v176;
  CFTypeRef v177;
  CFTypeRef v178;
  CFTypeRef v179;
  CFTypeRef v180;
  CFTypeRef v181;
  uint64_t v182;
  const void **v183;
  uint64_t v184;
  uint64_t (*v185)(uint64_t, uint64_t);
  void (*v186)(uint64_t);
  CFTypeRef v187;
  CFTypeRef v188;
  CFMutableDictionaryRef theDict;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t (*v193)(uint64_t, uint64_t);
  void (*v194)(uint64_t);
  CFTypeRef v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t (*v199)(uint64_t, uint64_t);
  void (*v200)(uint64_t);
  CFMutableArrayRef v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t (*v205)(uint64_t, uint64_t);
  void (*v206)(uint64_t);
  CFMutableArrayRef v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t (*v211)(uint64_t, uint64_t);
  void (*v212)(uint64_t);
  CFMutableArrayRef Mutable;
  std::string *v214;

  v208 = 0;
  v209 = &v208;
  v210 = 0x3002000000;
  v211 = __Block_byref_object_copy__6;
  v212 = __Block_byref_object_dispose__6;
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v6 = (const CFArrayCallBacks *)MEMORY[0x24BDBD690];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v202 = 0;
  v203 = &v202;
  v204 = 0x3002000000;
  v205 = __Block_byref_object_copy__6;
  v206 = __Block_byref_object_dispose__6;
  v207 = CFArrayCreateMutable(v5, 0, v6);
  v196 = 0;
  v197 = &v196;
  v198 = 0x3002000000;
  v199 = __Block_byref_object_copy__6;
  v200 = __Block_byref_object_dispose__6;
  v201 = CFArrayCreateMutable(v5, 0, MEMORY[0x24BDBD690]);
  v190 = 0;
  v191 = &v190;
  v192 = 0x3002000000;
  v193 = __Block_byref_object_copy__6;
  v194 = __Block_byref_object_dispose__6;
  v195 = CFArrayCreateMutable(v5, 0, MEMORY[0x24BDBD690]);
  v7 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  theDict = v7;
  v188 = 0;
  v182 = 0;
  v183 = (const void **)&v182;
  v184 = 0x3002000000;
  v185 = __Block_byref_object_copy__1_0;
  v186 = __Block_byref_object_dispose__2_0;
  v187 = 0;
  v181 = 0;
  v180 = 0;
  v179 = 0;
  v178 = 0;
  v177 = 0;
  v176 = 0;
  v175 = 0;
  v169 = 0;
  v170 = (const void **)&v169;
  v171 = 0x3002000000;
  v172 = __Block_byref_object_copy__1_0;
  v173 = __Block_byref_object_dispose__2_0;
  v174 = 0;
  v163 = 0;
  v164 = &v163;
  v165 = 0x3002000000;
  v166 = __Block_byref_object_copy__1_0;
  v167 = __Block_byref_object_dispose__2_0;
  v168 = 0;
  v157 = 0;
  v158 = (const void **)&v157;
  v159 = 0x3002000000;
  v160 = __Block_byref_object_copy__1_0;
  v161 = __Block_byref_object_dispose__2_0;
  v8 = (uint64_t)&(*a3)[3];
  v162 = 0;
  cf = QP::createCFStringFromString(v8);
  v9 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "kQPMe");
  v10 = QP::equals(&v9[3].location, &__p);
  v11 = v10;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v11)
      goto LABEL_15;
LABEL_5:
    v12 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(v12 + 36))
    {
      v13 = *(const __CFDictionary **)(v12 + 216);
      if (!v13 || !CFDictionaryContainsKey(*(CFDictionaryRef *)(v12 + 216), CFSTR("meContent")))
        goto LABEL_13;
      Value = (const __CFArray *)CFDictionaryGetValue(v13, CFSTR("meContent"));
    }
    else
    {
      Value = (const __CFArray *)getContentsArray();
    }
    v15 = Value;
    if (Value && CFArrayGetCount(Value))
    {
      Count = CFArrayGetCount(v15);
      MutableCopy = CFArrayCreateMutableCopy(v5, Count, v15);
LABEL_14:
      nlp::CFScopedPtr<__CFArray *>::reset((const void **)(a1 + 144), MutableCopy);
      goto LABEL_15;
    }
LABEL_13:
    MutableCopy = CFArrayCreateMutable(v5, 0, MEMORY[0x24BDBD690]);
    goto LABEL_14;
  }
  if (v10)
    goto LABEL_5;
LABEL_15:
  v18 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "kQPAttachment");
  v19 = QP::startswith((unsigned __int8 *)&v18[3], (unsigned __int8 *)&__p);
  v20 = v19;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v20)
    {
LABEL_17:
      v21 = kQPParseAttributeAttachmentKey;
      v22 = cf;
      if (cf)
        goto LABEL_39;
      goto LABEL_40;
    }
  }
  else if (v19)
  {
    goto LABEL_17;
  }
  v23 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "kQPAttached");
  v24 = QP::startswith((unsigned __int8 *)&v23[3], (unsigned __int8 *)&__p);
  v25 = v24;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v25)
    {
LABEL_22:
      v21 = kQPParseAttributeAttachmentKindKey;
      v22 = cf;
      if (cf)
        goto LABEL_39;
      goto LABEL_40;
    }
  }
  else if (v24)
  {
    goto LABEL_22;
  }
  v26 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "kQPFileExtension");
  v27 = QP::equals(&v26[3].location, &__p);
  v28 = v27;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v28)
    {
LABEL_27:
      v21 = kQPParseAttributeKindKey;
      v22 = cf;
      if (cf)
        goto LABEL_39;
      goto LABEL_40;
    }
  }
  else if (v27)
  {
    goto LABEL_27;
  }
  v29 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "TaggedPerson");
  v30 = QP::endswith(&v29[3].location, (uint64_t *)&__p);
  v31 = v30;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v31)
    {
LABEL_32:
      v21 = kQPParseAttributeTaggedPersonKey;
      v22 = cf;
      if (cf)
        goto LABEL_39;
      goto LABEL_40;
    }
  }
  else if (v30)
  {
    goto LABEL_32;
  }
  v32 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "GroundedPerson");
  v33 = QP::endswith(&v32[3].location, (uint64_t *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v33)
  {
    v21 = kQPParseAttributeGroundedPersonKey;
    v22 = cf;
    if (cf)
LABEL_39:
      CFRelease(v22);
LABEL_40:
    cf = v21;
    goto LABEL_41;
  }
  v76 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Person");
  v77 = QP::endswith(&v76[3].location, (uint64_t *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v77)
  {
    v78 = &kQPParseAttributePersonKey;
LABEL_245:
    nlp::CFScopedPtr<__CFString const*>::reset(&cf, *v78);
    goto LABEL_41;
  }
  v93 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Recipient");
  if (QP::endswith(&v93[3].location, (uint64_t *)&__p))
  {
    v94 = 1;
  }
  else
  {
    v129 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&v155, "RecipientHandle");
    v94 = QP::endswith(&v129[3].location, (uint64_t *)&v155);
    if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v155.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v94)
  {
    v78 = &kQPParseAttributeRecipientKey;
    goto LABEL_245;
  }
  v130 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Sender");
  if (QP::endswith(&v130[3].location, (uint64_t *)&__p))
  {
    v131 = 1;
  }
  else
  {
    v132 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&v155, "SenderHandle");
    v131 = QP::endswith(&v132[3].location, (uint64_t *)&v155);
    if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v155.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v131)
  {
    v78 = &kQPParseAttributeSenderKey;
    goto LABEL_245;
  }
LABEL_41:
  v34 = *a3;
  location = (std::__shared_weak_count *)(*a3)[7].location;
  if (location)
  {
    v36 = std::__shared_weak_count::lock(location);
    v154 = v36;
    if (v36)
    {
      v37 = v36;
      allocator = v5;
      length = v34[6].length;
      v153 = length;
      if (!length)
        goto LABEL_190;
      v39 = v183;
      v40 = CFStringCreateWithSubstring(allocator, a2, *(CFRange *)(length + 72));
      nlp::CFScopedPtr<__CFString const*>::reset(v39 + 5, v40);
      CFStringFromString = QP::createCFStringFromString(length);
      location_low = LOWORD((*a3)[2].location);
      v43 = *(QP::ParserGrammar **)(a1 + 24);
      v188 = CFStringFromString;
      v136 = QP::ParserGrammar::replacementID(v43, location_low);
      v137 = v37;
      v138 = QP::ParserGrammar::symbolID(*(_QWORD *)(a1 + 24), length);
      v44 = QP::ParseAttribute::flag((QP::ParseAttribute *)*a3);
      v45 = v44;
      v46 = 0;
      v135 = v11;
      if (v44 > 6)
      {
        v47 = v138;
        if (v44 == 7)
        {
          v155.__r_.__value_.__r.__words[0] = length;
          v155.__r_.__value_.__l.__size_ = (std::string::size_type)v137;
          p_shared_owners = (unint64_t *)&v137->__shared_owners_;
          do
            v69 = __ldxr(p_shared_owners);
          while (__stxr(v69 + 1, p_shared_owners));
          v71 = *(_QWORD *)(length + 120);
          v70 = *(std::__shared_weak_count **)(length + 128);
          format = (CFStringRef)v71;
          v152 = v70;
          if (v70)
          {
            v72 = (unint64_t *)&v70->__shared_owners_;
            do
              v73 = __ldxr(v72);
            while (__stxr(v73 + 1, v72));
          }
          if (v71)
          {
            QP::NumericValue::upper((QP::NumericValue *)v71, &__p);
            v180 = QP::createCFStringFromString((uint64_t)&__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            QP::NumericValue::lower((QP::NumericValue *)v71, &__p);
            v178 = QP::createCFStringFromString((uint64_t)&__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            QP::NumericValue::value((int **)v71, &__p);
            v179 = QP::createCFStringFromString((uint64_t)&__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (*(_QWORD *)v71)
              v74 = (double)**(int **)v71;
            else
              v74 = **(double **)(v71 + 16);
            v177 = CFStringCreateWithFormat(allocator, 0, CFSTR("%.f"), *(_QWORD *)&v74);
          }
          if (v70)
          {
            v95 = (unint64_t *)&v70->__shared_owners_;
            do
              v96 = __ldaxr(v95);
            while (__stlxr(v96 - 1, v95));
            if (!v96)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
          }
          size = (std::__shared_weak_count *)v155.__r_.__value_.__l.__size_;
          if (v155.__r_.__value_.__l.__size_)
          {
            v98 = (unint64_t *)(v155.__r_.__value_.__l.__size_ + 8);
            do
              v99 = __ldaxr(v98);
            while (__stlxr(v99 - 1, v98));
            if (!v99)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
          v46 = 0;
          v45 = 7;
        }
        else if (v44 == 16)
        {
          format = (CFStringRef)length;
          v152 = v137;
          v52 = (unint64_t *)&v137->__shared_owners_;
          do
            v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
          v54 = CFArrayCreateMutable(allocator, 0, MEMORY[0x24BDBD690]);
          v55 = CFArrayCreateMutable(allocator, 0, MEMORY[0x24BDBD690]);
          v56 = 0;
          v57 = 0;
          for (i = 0; ; ++i)
          {
            memset(&__p, 0, sizeof(__p));
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__p, *(__int128 **)(length + 120), *(__int128 **)(length + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(length + 128) - *(_QWORD *)(length + 120)) >> 3));
            v59 = 0xAAAAAAAAAAAAAAABLL
                * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3);
            v155.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v155);
            if (v59 <= i)
              break;
            memset(&v155, 0, sizeof(v155));
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v155, *(__int128 **)(length + 120), *(__int128 **)(length + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(length + 128) - *(_QWORD *)(length + 120)) >> 3));
            v60 = (__int128 *)(v155.__r_.__value_.__r.__words[0] + v57);
            if (*(char *)(v155.__r_.__value_.__r.__words[0] + v57 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v60, *((_QWORD *)v60 + 1));
            }
            else
            {
              v61 = *v60;
              __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v60 + 2);
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v61;
            }
            v214 = &v155;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v214);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            v63 = CFStringCreateWithCString(allocator, (const char *)p_p, 0x8000100u);
            CFArrayAppendValue(v54, v63);
            CFRelease(v63);
            memset(&v155, 0, sizeof(v155));
            std::vector<std::pair<double,double>>::__init_with_size[abi:ne180100]<std::pair<double,double>*,std::pair<double,double>*>((char *)&v155, *(__int128 **)(length + 144), *(__int128 **)(length + 152), (uint64_t)(*(_QWORD *)(length + 152) - *(_QWORD *)(length + 144)) >> 4);
            v64 = *(_QWORD *)(v155.__r_.__value_.__r.__words[0] + v56);
            v155.__r_.__value_.__l.__size_ = v155.__r_.__value_.__r.__words[0];
            operator delete(v155.__r_.__value_.__l.__data_);
            v65 = CFStringCreateWithFormat(allocator, 0, CFSTR("W(%.2g, 0)"), v64);
            CFArrayAppendValue(v55, v65);
            CFRelease(v65);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v57 += 24;
            v56 += 16;
          }
          v176 = v54;
          v175 = v55;
          do
            v75 = __ldaxr(v52);
          while (__stlxr(v75 - 1, v52));
          v45 = 16;
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
            std::__shared_weak_count::__release_weak(v137);
          }
          v46 = 0;
          v47 = v138;
        }
      }
      else if (v44 == 5)
      {
        format = (CFStringRef)length;
        v152 = v137;
        v66 = (unint64_t *)&v137->__shared_owners_;
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
        if (*(char *)(length + 143) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(length + 120), *(_QWORD *)(length + 128));
        else
          __p = *(std::string *)(length + 120);
        v134 = CFStringFromString;
        if (QP::ParserGrammar::hasValue(*(_QWORD *)(a1 + 24), v138, (void **)&__p.__r_.__value_.__l.__data_))
        {
          v81 = v183;
          QP::ParserGrammar::value(*(_QWORD *)(a1 + 24), v138, (void **)&__p.__r_.__value_.__l.__data_, &v155);
          v82 = QP::createCFStringFromString((uint64_t)&v155);
          nlp::CFScopedPtr<__CFString const*>::reset(v81 + 5, v82);
          if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v155.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        QP::LexemeStatus::suggestionKey((QP::LexemeStatus *)length, &__p);
        v83 = QP::createCFStringFromString((uint64_t)&__p);
        v214 = (std::string *)v83;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v84 = *(_QWORD *)(a1 + 24);
        QP::LexemeStatus::suggestionKey((QP::LexemeStatus *)length, &__p);
        v85 = QP::ParserGrammar::symbolID(v84, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v133 = v83;
        if (QP::ParserGrammar::isValidSuggestionKey(*(QP::ParserGrammar **)(a1 + 24), (CFStringRef)cf, v136, v85)&& QP::ParserGrammar::hasSuggestion(*(QP::ParserGrammar **)(a1 + 24), (const __CFString *)cf, v136, v85))
        {
          v86 = v158;
          QP::ParserGrammar::suggestion(*(QP::ParserGrammar **)(a1 + 24), (const __CFString *)cf, v136, v85, &__p);
          v87 = QP::createCFStringFromString((uint64_t)&__p);
          nlp::CFScopedPtr<__CFString const*>::reset(v86 + 5, v87);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          QP::SpotlightFormatter::addDisplay((QP::SpotlightFormatter *)a1, (CFStringRef)v158[5], (*a3)[1]);
          CFDictionarySetValue(v7, CFSTR("kQPDisplay"), v158[5]);
          v88 = (std::string *)(length + 120);
          v89 = 1;
        }
        else
        {
          v88 = (std::string *)(length + 120);
          v89 = 0;
          *(_BYTE *)(a1 + 193) = 1;
        }
        __p.__r_.__value_.__r.__words[0] = 0;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
        __p.__r_.__value_.__r.__words[2] = 0x3002000000;
        v148 = __Block_byref_object_copy__1_0;
        v149 = __Block_byref_object_dispose__2_0;
        if (*(char *)(length + 143) < 0)
          std::string::__init_copy_ctor_external(&v155, *(const std::string::value_type **)(length + 120), *(_QWORD *)(length + 128));
        else
          v155 = *v88;
        v47 = v138;
        v150 = QP::createCFStringFromString((uint64_t)&v155);
        if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v155.__r_.__value_.__l.__data_);
        v90 = *(_QWORD *)(a1 + 24);
        v91 = *(const __CFString **)(__p.__r_.__value_.__l.__size_ + 40);
        v146[0] = MEMORY[0x24BDAC760];
        v146[1] = 0x40000000;
        v146[2] = ___ZN2QP18SpotlightFormatter24updateParseWithAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke;
        v146[3] = &unk_24DA25B90;
        v146[4] = &v163;
        v146[5] = &v169;
        v146[6] = &__p;
        v146[7] = &v202;
        QP::ParserGrammar::tokens(v90, (const __CFString *)cf, v134, v91, (uint64_t)v146);
        _Block_object_dispose(&__p, 8);
        if (v150)
          CFRelease(v150);
        v45 = 5;
        if (v133)
          CFRelease(v133);
        do
          v92 = __ldaxr(v66);
        while (__stlxr(v92 - 1, v66));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
          std::__shared_weak_count::__release_weak(v137);
        }
        v46 = v89;
      }
      else
      {
        v47 = v138;
        if (v44 == 6)
        {
          v48 = a1;
          v155.__r_.__value_.__r.__words[0] = length;
          v155.__r_.__value_.__l.__size_ = (std::string::size_type)v137;
          v49 = (unint64_t *)&v137->__shared_owners_;
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
          v51 = v183;
          if (*(char *)(length + 143) < 0)
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(length + 120), *(_QWORD *)(length + 128));
          else
            __p = *(std::string *)(length + 120);
          v79 = QP::createCFStringFromString((uint64_t)&__p);
          nlp::CFScopedPtr<__CFString const*>::reset(v51 + 5, v79);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          a1 = v48;
          do
            v80 = __ldaxr(v49);
          while (__stlxr(v80 - 1, v49));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
            std::__shared_weak_count::__release_weak(v137);
          }
          v46 = 0;
        }
      }
      v100 = (uint64_t)&(*a3)[3];
      v101 = (uint64_t)v183[5];
      v145[0] = MEMORY[0x24BDAC760];
      v145[1] = 0x40000000;
      v145[2] = ___ZN2QP18SpotlightFormatter24updateParseWithAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_2;
      v145[3] = &unk_24DA25BB8;
      v145[4] = &v208;
      QP::SpotlightFormatter::_parseAttributeKey(a1, v100, 0, v47, v45, v101, (uint64_t)v176, (uint64_t)v175, (uint64_t)v180, (uint64_t)v179, (uint64_t)v178, (uint64_t)v177, (uint64_t)v145);
      if (v45 == 15)
        *(_BYTE *)(a1 + 192) = 1;
      v102 = v183;
      v103 = CFStringCreateWithSubstring(allocator, a2, *(CFRange *)(v153 + 72));
      nlp::CFScopedPtr<__CFString const*>::reset(v102 + 5, v103);
      if (cf && CFStringGetLength((CFStringRef)cf))
      {
        v104 = CFArrayGetCount((CFArrayRef)v209[5]);
        if (v104)
        {
          v105 = CFStringCreateByCombiningStrings(allocator, (CFArrayRef)v209[5], CFSTR(" || "));
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v105;
          if (CFStringGetLength(v105))
          {
            v106 = v170;
            if (v104 <= 1)
              v107 = CFStringCreateWithFormat(allocator, 0, CFSTR("%@"), v105);
            else
              v107 = CFStringCreateWithFormat(allocator, 0, CFSTR("(%@)"), v105);
            nlp::CFScopedPtr<__CFString const*>::reset(v106 + 5, v107);
            if (CFStringGetLength((CFStringRef)v170[5]))
              QP::Formatter::setParseAttribute((QP::Formatter *)a1, kQPParseAttributeDescriptionKey, v170[5], (*a3)[1]);
            QP::Formatter::setParseAttribute((QP::Formatter *)a1, (CFStringRef)cf, v183[5], (*a3)[1]);
            ++*(_QWORD *)(a1 + 80);
            if (CFStringsAreEqual((CFStringRef)cf, kQPParseAttributeKindKey)
              || CFStringsAreEqual((CFStringRef)cf, kQPParseAttributeApplicationKey))
            {
              v108 = *(_QWORD *)(a1 + 24);
              v144[0] = MEMORY[0x24BDAC760];
              v144[1] = 0x40000000;
              v144[2] = ___ZN2QP18SpotlightFormatter24updateParseWithAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_3;
              v144[3] = &unk_24DA25BE0;
              v144[4] = &v196;
              QP::ParserGrammar::categories(v108, v47, (uint64_t)v144);
            }
            if (CFStringsAreEqual((CFStringRef)cf, kQPParseAttributeAttachmentKey)
              || CFStringsAreEqual((CFStringRef)cf, kQPParseAttributeAttachmentKindKey))
            {
              v109 = *(_QWORD *)(a1 + 24);
              v143[0] = MEMORY[0x24BDAC760];
              v143[1] = 0x40000000;
              v143[2] = ___ZN2QP18SpotlightFormatter24updateParseWithAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_4;
              v143[3] = &unk_24DA25C08;
              v143[4] = &v190;
              QP::ParserGrammar::categories(v109, v47, (uint64_t)v143);
            }
          }
          if (v105)
            CFRelease(v105);
        }
        else
        {
          QP::Formatter::setParseAttribute((QP::Formatter *)a1, (CFStringRef)cf, &stru_24DA27910, (*a3)[1]);
          QP::SpotlightFormatter::addDisplay((QP::SpotlightFormatter *)a1, &stru_24DA27910, (*a3)[1]);
        }
        if ((v46 & 1) == 0)
        {
          QP::ParserGrammar::symbol(*(QP::ParserGrammar **)(a1 + 24), v47, &v155);
          if (QP::ParserGrammar::isValidSuggestionKey(*(QP::ParserGrammar **)(a1 + 24), (CFStringRef)cf, v136, v47))
          {
            if (QP::ParserGrammar::hasSuggestion(*(QP::ParserGrammar **)(a1 + 24), (const __CFString *)cf, v136, v47))
            {
              QP::ParserGrammar::suggestion(*(QP::ParserGrammar **)(a1 + 24), (const __CFString *)cf, v136, v47, &__p);
              v110 = QP::createCFStringFromString((uint64_t)&__p);
              format = v110;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(__p.__r_.__value_.__l.__data_);
                v110 = format;
              }
              v111 = v158;
              v112 = CFStringCreateWithFormat(allocator, 0, v110, v183[5]);
              nlp::CFScopedPtr<__CFString const*>::reset(v111 + 5, v112);
              QP::SpotlightFormatter::addDisplay((QP::SpotlightFormatter *)a1, (CFStringRef)v158[5], (*a3)[1]);
              CFDictionarySetValue(theDict, CFSTR("kQPDisplay"), v158[5]);
              nlp::CFScopedPtr<__CFString const*>::reset((const void **)&format, 0);
            }
            else
            {
              QP::SpotlightFormatter::addDisplay((QP::SpotlightFormatter *)a1, &stru_24DA27910, (*a3)[1]);
            }
          }
          else
          {
            QP::SpotlightFormatter::addDisplay((QP::SpotlightFormatter *)a1, &stru_24DA27910, (*a3)[1]);
            *(_BYTE *)(a1 + 193) = 1;
          }
          if (v135)
          {
            v113 = a1;
            v114 = CFArrayGetCount(*(CFArrayRef *)(a1 + 144));
            if (v114)
            {
              v115 = (const void **)(v164 + 5);
              if (!v164[5])
              {
                Copy = CFStringCreateCopy(allocator, CFSTR("kQPTokenMe"));
                nlp::CFScopedPtr<__CFString const*>::reset(v115, Copy);
              }
              if (v114 >= 2)
              {
                v117 = 0;
                v118 = v114 - 1;
                do
                {
                  ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v113 + 144), v117);
                  v120 = (const __CFString *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
                  v121 = CFArrayGetValueAtIndex(ValueAtIndex, 1);
                  v122 = CFArrayGetValueAtIndex(ValueAtIndex, 2);
                  v123 = CFArrayGetValueAtIndex(ValueAtIndex, 3);
                  v124 = CFArrayGetValueAtIndex(ValueAtIndex, 4);
                  __p.__r_.__value_.__r.__words[0] = 0;
                  __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
                  __p.__r_.__value_.__r.__words[2] = 0x3002000000;
                  v148 = __Block_byref_object_copy__6;
                  v149 = __Block_byref_object_dispose__6;
                  v150 = CFArrayCreateMutable(allocator, 0, MEMORY[0x24BDBD690]);
                  v125 = *(_QWORD *)(v113 + 24);
                  v142[0] = MEMORY[0x24BDAC760];
                  v142[1] = 0x40000000;
                  v142[2] = ___ZN2QP18SpotlightFormatter24updateParseWithAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_5;
                  v142[3] = &unk_24DA25C30;
                  v142[6] = v124;
                  v142[7] = v123;
                  v142[8] = v121;
                  v142[9] = v122;
                  v142[4] = &v169;
                  v142[5] = &__p;
                  QP::ParserGrammar::tokens(v125, (const __CFString *)cf, (const __CFString *)v188, v120, (uint64_t)v142);
                  if (CFArrayGetCount(*(CFArrayRef *)(__p.__r_.__value_.__l.__size_ + 40)))
                    CFArrayAppendValue((CFMutableArrayRef)v203[5], *(const void **)(__p.__r_.__value_.__l.__size_ + 40));
                  _Block_object_dispose(&__p, 8);
                  if (v150)
                    CFRelease(v150);
                  ++v117;
                }
                while (v118 != v117);
              }
            }
          }
          else
          {
            __p.__r_.__value_.__r.__words[0] = 0;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
            __p.__r_.__value_.__r.__words[2] = 0x2000000000;
            v148 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 224);
            v126 = *(_QWORD *)(a1 + 24);
            v141[0] = MEMORY[0x24BDAC760];
            v141[1] = 0x40000000;
            v141[2] = ___ZN2QP18SpotlightFormatter24updateParseWithAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_6;
            v141[3] = &unk_24DA25C58;
            v113 = a1;
            v141[4] = &v163;
            v141[5] = &v182;
            v141[6] = &v169;
            v141[7] = &__p;
            v141[8] = &v157;
            v141[9] = &v202;
            v141[10] = a1;
            QP::ParserGrammar::tokens(v126, (const __CFString *)cf, (const __CFString *)v188, 0, (uint64_t)v141);
            _Block_object_dispose(&__p, 8);
          }
          if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v155.__r_.__value_.__l.__data_);
          a1 = v113;
        }
      }
      QP::SpotlightFormatter::addTokens((QP::SpotlightFormatter *)a1, (const __CFString *)v164[5], (const __CFArray *)v203[5]);
      QP::SpotlightFormatter::addSuggestion((QP::SpotlightFormatter *)a1, (CFStringRef)v158[5]);
      QP::SpotlightFormatter::addDescription((QP::SpotlightFormatter *)a1, (CFStringRef)v170[5]);
      QP::SpotlightFormatter::addAttributes((QP::SpotlightFormatter *)a1, theDict);
      QP::SpotlightFormatter::addPrimaryCategories((QP::SpotlightFormatter *)a1, (const __CFArray *)v197[5]);
      QP::SpotlightFormatter::addSecondaryCategory((QP::SpotlightFormatter *)a1, (const __CFArray *)v191[5]);
      v37 = v154;
      if (v154)
      {
LABEL_190:
        v127 = (unint64_t *)&v37->__shared_owners_;
        do
          v128 = __ldaxr(v127);
        while (__stlxr(v128 - 1, v127));
        if (!v128)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
    }
  }
  if (cf)
    CFRelease(cf);
  _Block_object_dispose(&v157, 8);
  if (v162)
    CFRelease(v162);
  _Block_object_dispose(&v163, 8);
  if (v168)
    CFRelease(v168);
  _Block_object_dispose(&v169, 8);
  if (v174)
    CFRelease(v174);
  if (v175)
    CFRelease(v175);
  if (v176)
    CFRelease(v176);
  if (v177)
    CFRelease(v177);
  if (v178)
    CFRelease(v178);
  if (v179)
    CFRelease(v179);
  if (v180)
    CFRelease(v180);
  if (v181)
    CFRelease(v181);
  _Block_object_dispose(&v182, 8);
  if (v187)
    CFRelease(v187);
  if (v188)
    CFRelease(v188);
  if (theDict)
    CFRelease(theDict);
  _Block_object_dispose(&v190, 8);
  if (v195)
    CFRelease(v195);
  _Block_object_dispose(&v196, 8);
  if (v201)
    CFRelease(v201);
  _Block_object_dispose(&v202, 8);
  if (v207)
    CFRelease(v207);
  _Block_object_dispose(&v208, 8);
  if (Mutable)
    CFRelease(Mutable);
}

void sub_218E59C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  char a72;
  uint64_t v72;

  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  if (a72 < 0)
    operator delete(a67);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&STACK[0x240], 0);
  _Block_object_dispose(&STACK[0x248], 8);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&STACK[0x270], 0);
  _Block_object_dispose(&STACK[0x278], 8);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&STACK[0x2A0], 0);
  _Block_object_dispose(&STACK[0x2A8], 8);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&STACK[0x2D0], 0);
  nlp::CFScopedPtr<__CFArray const*>::reset((const void **)&STACK[0x2D8], 0);
  nlp::CFScopedPtr<__CFArray const*>::reset((const void **)&STACK[0x2E0], 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&STACK[0x2E8], 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&STACK[0x2F0], 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&STACK[0x2F8], 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&STACK[0x300], 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&STACK[0x308], 0);
  _Block_object_dispose(&STACK[0x310], 8);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&STACK[0x338], 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&STACK[0x340], 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)&STACK[0x348], 0);
  _Block_object_dispose(&STACK[0x350], 8);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)&STACK[0x378], 0);
  _Block_object_dispose((const void *)(v72 - 256), 8);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(v72 - 216), 0);
  _Block_object_dispose((const void *)(v72 - 208), 8);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(v72 - 168), 0);
  _Block_object_dispose((const void *)(v72 - 160), 8);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(v72 - 120), 0);
  _Unwind_Resume(a1);
}

std::string *QP::NumericValue::upper@<X0>(QP::NumericValue *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;

  if (*(_QWORD *)this)
    return std::to_string(a2, *(_DWORD *)(*(_QWORD *)this + 8));
  v3 = *((_QWORD *)this + 2);
  if (v3)
    return std::to_string(a2, *(double *)(v3 + 16));
  else
    return (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "");
}

std::string *QP::NumericValue::lower@<X0>(QP::NumericValue *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;

  if (*(_QWORD *)this)
    return std::to_string(a2, *(_DWORD *)(*(_QWORD *)this + 4));
  v3 = *((_QWORD *)this + 2);
  if (v3)
    return std::to_string(a2, *(double *)(v3 + 8));
  else
    return (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "");
}

std::string *QP::NumericValue::value@<X0>(int **this@<X0>, std::string *a2@<X8>)
{
  double *v3;

  if (*this)
    return std::to_string(a2, **this);
  v3 = (double *)this[2];
  if (v3)
    return std::to_string(a2, *v3);
  else
    return (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "");
}

void QP::LexemeStatus::suggestionKey(QP::LexemeStatus *this@<X0>, std::string *a2@<X8>)
{
  size_t v4;
  std::string *p_p;
  QP::LexemeStatus *v6;
  const std::string::value_type *v7;
  char *v8;
  const std::string::value_type *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  std::string __p;

  if (*((char *)this + 23) >= 0)
    v4 = *((unsigned __int8 *)this + 23);
  else
    v4 = *((_QWORD *)this + 1);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v4 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v4)
  {
    if (*((char *)this + 23) >= 0)
      v6 = this;
    else
      v6 = *(QP::LexemeStatus **)this;
    memmove(p_p, v6, v4);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v4) = 45;
  v9 = (const std::string::value_type *)*((_QWORD *)this + 15);
  v8 = (char *)this + 120;
  v7 = v9;
  v10 = v8[23];
  if (v10 >= 0)
    v11 = v8;
  else
    v11 = v7;
  if (v10 >= 0)
    v12 = v8[23];
  else
    v12 = *((_QWORD *)v8 + 1);
  v13 = std::string::append(&__p, v11, v12);
  *a2 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_218E5A2AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN2QP18SpotlightFormatter24updateParseWithAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke(_QWORD *a1, const void *a2, const void *a3, const __CFString *a4, const void *a5)
{
  const __CFAllocator *v10;
  __CFDictionary *Mutable;
  uint64_t v12;
  const void **v13;
  uint64_t v14;
  CFStringRef Copy;
  const void *v16;

  v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v12 = *(_QWORD *)(a1[4] + 8);
  v14 = *(_QWORD *)(v12 + 40);
  v13 = (const void **)(v12 + 40);
  if (!v14)
  {
    Copy = CFStringCreateCopy(v10, a4);
    nlp::CFScopedPtr<__CFString const*>::reset(v13, Copy);
  }
  CFDictionarySetValue(Mutable, CFSTR("TOKEN"), a2);
  CFDictionarySetValue(Mutable, CFSTR("TEXT"), a3);
  if (a5)
    CFDictionarySetValue(Mutable, CFSTR("QUERY"), a5);
  else
    CFDictionarySetValue(Mutable, CFSTR("QUERY"), *(const void **)(*(_QWORD *)(a1[5] + 8) + 40));
  v16 = *(const void **)(*(_QWORD *)(a1[6] + 8) + 40);
  if (v16)
    CFDictionarySetValue(Mutable, CFSTR("STATUS"), v16);
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(a1[7] + 8) + 40), Mutable);
  if (Mutable)
    CFRelease(Mutable);
}

void sub_218E5A410(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP18SpotlightFormatter24updateParseWithAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_2(uint64_t a1, const void *a2)
{
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void ___ZN2QP18SpotlightFormatter24updateParseWithAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  CFStringRef CFStringFromString;

  CFStringFromString = QP::createCFStringFromString(a2);
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), CFStringFromString);
  if (CFStringFromString)
    CFRelease(CFStringFromString);
}

void sub_218E5A490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP18SpotlightFormatter24updateParseWithAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_4(uint64_t a1, uint64_t a2)
{
  CFStringRef CFStringFromString;

  CFStringFromString = QP::createCFStringFromString(a2);
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), CFStringFromString);
  if (CFStringFromString)
    CFRelease(CFStringFromString);
}

void sub_218E5A500(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP18SpotlightFormatter24updateParseWithAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_5(uint64_t a1, const void *a2, const void *a3, const __CFString *a4, const __CFString *a5)
{
  const __CFAllocator *v10;
  __CFDictionary *Mutable;
  CFMutableStringRef MutableCopy;
  int v13;
  const __CFString *v14;
  const __CFString *v15;
  CFNumberRef v16;
  int valuePtr;
  CFMutableStringRef v18;
  __CFDictionary *v19;
  CFRange v20;
  CFRange v21;

  v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v19 = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("TOKEN"), a2);
  CFDictionarySetValue(Mutable, CFSTR("TEXT"), a3);
  CFDictionarySetValue(Mutable, CFSTR("EMAILS"), *(const void **)(a1 + 48));
  if (a5)
  {
    MutableCopy = CFStringCreateMutableCopy(v10, 0, a5);
    v18 = MutableCopy;
    if (CFStringsAreEqual(a4, CFSTR("0")))
    {
      CFStringReplaceAll(MutableCopy, *(CFStringRef *)(a1 + 56));
      v13 = 3;
    }
    else
    {
      v14 = *(const __CFString **)(a1 + 64);
      v20.length = CFStringGetLength(MutableCopy);
      v20.location = 0;
      CFStringFindAndReplace(MutableCopy, CFSTR("%@a"), v14, v20, 0);
      v15 = *(const __CFString **)(a1 + 72);
      v21.length = CFStringGetLength(MutableCopy);
      v21.location = 0;
      CFStringFindAndReplace(MutableCopy, CFSTR("%@x"), v15, v21, 0);
      if (CFStringsAreEqual(a4, CFSTR("3")))
        v13 = 1;
      else
        v13 = 2;
    }
    valuePtr = v13;
    v16 = CFNumberCreate(v10, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(Mutable, CFSTR("TYPE"), v16);
    CFDictionarySetValue(Mutable, CFSTR("QUERY"), MutableCopy);
    if (MutableCopy)
      CFRelease(MutableCopy);
  }
  else
  {
    CFDictionarySetValue(Mutable, CFSTR("QUERY"), *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
  }
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), Mutable);
  if (Mutable)
    CFRelease(Mutable);
}

void sub_218E5A714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP18SpotlightFormatter24updateParseWithAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_6(_QWORD *a1, const void *a2, const __CFString *a3, const __CFString *a4, const void *a5)
{
  uint64_t v10;
  const __CFAllocator *v11;
  __CFDictionary *Mutable;
  uint64_t v13;
  const void **v14;
  uint64_t v15;
  CFStringRef Copy;
  void *v17;
  const void *v18;
  __CFString *MutableCopy;
  const __CFDictionary *v20;
  const __CFDictionary *Value;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  uint64_t v26;
  CFTypeRef v27;
  __CFArray *v28;
  CFStringRef v29;
  uint64_t v30;
  CFStringRef v31;
  void *v32;

  v10 = a1[10];
  v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v13 = *(_QWORD *)(a1[4] + 8);
  v15 = *(_QWORD *)(v13 + 40);
  v14 = (const void **)(v13 + 40);
  if (!v15)
  {
    Copy = CFStringCreateCopy(v11, a4);
    nlp::CFScopedPtr<__CFString const*>::reset(v14, Copy);
  }
  if (a3 && *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40))
    v17 = (void *)CFStringCreateWithFormat(v11, 0, a3, *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40));
  else
    v17 = (void *)CFRetain(a3);
  v18 = v17;
  v32 = v17;
  CFDictionarySetValue(Mutable, CFSTR("TOKEN"), a2);
  CFDictionarySetValue(Mutable, CFSTR("TEXT"), v18);
  if (a5)
    CFDictionarySetValue(Mutable, CFSTR("QUERY"), a5);
  else
    CFDictionarySetValue(Mutable, CFSTR("QUERY"), *(const void **)(*(_QWORD *)(a1[6] + 8) + 40));
  MutableCopy = CFStringCreateMutableCopy(v11, 0, *(CFStringRef *)(*(_QWORD *)(a1[5] + 8) + 40));
  CFStringLowercase(MutableCopy, *(CFLocaleRef *)(*(_QWORD *)(v10 + 8) + 104));
  v20 = *(const __CFDictionary **)(*(_QWORD *)(a1[7] + 8) + 24);
  if (v20 && CFDictionaryContainsKey(v20, MutableCopy))
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(*(_QWORD *)(a1[7] + 8) + 24), MutableCopy);
    CFDictionarySetValue(Mutable, CFSTR("TEXT"), *(const void **)(*(_QWORD *)(a1[5] + 8) + 40));
    v22 = CFDictionaryGetValue(Value, CFSTR("ORIGINAL_TEXT"));
    v23 = CFDictionaryGetValue(Value, CFSTR("ATTRIBUTE"));
    v24 = CFDictionaryGetValue(Value, CFSTR("STATUS"));
    v25 = CFDictionaryGetValue(Value, CFSTR("TOKEN"));
    if (v22)
    {
      CFDictionarySetValue(Mutable, CFSTR("TEXT"), v22);
      v26 = *(_QWORD *)(a1[8] + 8);
      v27 = CFRetain(v22);
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v26 + 40), v27);
    }
    if (v24)
      CFDictionarySetValue(Mutable, CFSTR("STATUS"), v24);
    if (v25)
      CFDictionarySetValue(Mutable, CFSTR("TOKEN"), v25);
    if (v23 && v24)
    {
      v28 = CFArrayCreateMutable(v11, 0, MEMORY[0x24BDBD690]);
      CFArrayAppendValue(v28, v23);
      CFArrayAppendValue(v28, v24);
      v29 = CFStringCreateByCombiningStrings(v11, v28, CFSTR("="));
      CFDictionarySetValue(Mutable, CFSTR("QUERY"), v29);
      v30 = *(_QWORD *)(a1[6] + 8);
      v31 = CFStringCreateWithFormat(v11, 0, CFSTR("%@"), v29, v29, v28, MutableCopy, v32, Mutable);
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v30 + 40), v31);
      if (v29)
        CFRelease(v29);
      if (v28)
        CFRelease(v28);
    }
  }
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(a1[9] + 8) + 40), Mutable);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v18)
    CFRelease(v18);
  if (Mutable)
    CFRelease(Mutable);
}

void sub_218E5AAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void *v4;
  va_list va;
  const void *v6;
  va_list va1;
  const void *v8;
  va_list va2;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v6 = va_arg(va2, const void *);
  va_copy(va3, va2);
  v8 = va_arg(va3, const void *);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFString *>::reset((const void **)va1, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va2, 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)va3, 0);
  _Unwind_Resume(a1);
}

void QP::SpotlightFormatter::~SpotlightFormatter(const void **this)
{
  QP::SpotlightFormatter::~SpotlightFormatter(this);
  JUMPOUT(0x219A24D0CLL);
}

{
  const void **v2;

  *this = &off_24DA25C88;
  v2 = this + 11;
  nlp::CFScopedPtr<__CFArray const*>::reset(this + 23, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset(this + 22, 0);
  nlp::CFScopedPtr<__CFNumber const*>::reset(this + 21, 0);
  nlp::CFScopedPtr<__CFNumber const*>::reset(this + 20, 0);
  nlp::CFScopedPtr<__CFNumber const*>::reset(this + 19, 0);
  nlp::CFScopedPtr<__CFArray *>::reset(this + 18, 0);
  nlp::CFScopedPtr<__CFArray *>::reset(this + 17, 0);
  nlp::CFScopedPtr<__CFArray *>::reset(this + 16, 0);
  nlp::CFScopedPtr<__CFArray *>::reset(this + 15, 0);
  nlp::CFScopedPtr<__CFArray *>::reset(this + 14, 0);
  nlp::CFScopedPtr<__CFArray *>::reset(this + 13, 0);
  nlp::CFScopedPtr<__CFArray *>::reset(this + 12, 0);
  nlp::CFScopedPtr<__CFArray *>::reset(v2, 0);
  QP::Formatter::~Formatter((QP::Formatter *)this);
}

void ___ZL20getDateActionFiltersv_block_invoke()
{
  const __CFAllocator *v0;
  __CFString *v1;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x24BDAC8D0];
  v0 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v1 = (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("_kMDItemBundleID == %s"), "com.apple.mobilesafari");
  values = v1;
  keys[0] = CFSTR("kMDItemUsedDates");
  getDateActionFilters(void)::gDateActionFilters = (uint64_t)CFDictionaryCreate(v0, (const void **)keys, (const void **)&values, 1, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (v1)
    CFRelease(v1);
}

void sub_218E5AC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *std::set<unsigned short>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<unsigned short>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned short,std::__tree_node<unsigned short,void *> *,long>>(a1, *(unsigned __int16 **)a2, (unsigned __int16 *)(a2 + 8));
  return a1;
}

void sub_218E5AC94(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<unsigned short>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned short>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned short,std::__tree_node<unsigned short,void *> *,long>>(uint64_t *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unsigned __int16 *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<unsigned short>::__emplace_hint_unique_key_args<unsigned short,unsigned short const&>(v5, v6, v4 + 13, v4 + 13);
      v7 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned __int16 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned __int16 *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<unsigned short>::__emplace_hint_unique_key_args<unsigned short,unsigned short const&>(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, _WORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<unsigned short>::__find_equal<unsigned short>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_WORD *)v7 + 13) = *a4;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<unsigned short>::__find_equal<unsigned short>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int16 *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((unsigned __int16 *)a2 + 13), v6 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((unsigned __int16 *)v10 + 13) < v15)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(unsigned __int16 *)(v16 + 26);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int16 *)a4 + 13))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(unsigned __int16 *)(v20 + 26);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

QP::SpellCheckWrapper *QP::SpellCheckWrapper::SpellCheckWrapper(QP::SpellCheckWrapper *this, __CFString *a2)
{
  void *v4;
  void *v5;
  const __CFString *v6;
  void *v7;
  objc_class *v8;
  id v9;
  void *v10;
  _QWORD v12[5];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  objc_msgSend(MEMORY[0x24BDBCEA0], "preferredLanguages");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "firstObject");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (a2)
  {
    v6 = a2;

    v5 = (void *)v6;
  }
  objc_storeStrong((id *)&QP::m_preferred_language, v5);
  v13 = 0;
  v14 = &v13;
  v15 = 0x2050000000;
  v7 = (void *)getUITextCheckerClass(void)::softClass;
  v16 = getUITextCheckerClass(void)::softClass;
  if (!getUITextCheckerClass(void)::softClass)
  {
    v12[0] = MEMORY[0x24BDAC760];
    v12[1] = 3221225472;
    v12[2] = ___ZL21getUITextCheckerClassv_block_invoke;
    v12[3] = &unk_24DA25D38;
    v12[4] = &v13;
    ___ZL21getUITextCheckerClassv_block_invoke((uint64_t)v12);
    v7 = (void *)v14[3];
  }
  v8 = objc_retainAutorelease(v7);
  _Block_object_dispose(&v13, 8);
  v9 = objc_alloc_init(v8);
  v10 = (void *)QP::m_text_checker;
  QP::m_text_checker = (uint64_t)v9;

  return this;
}

void sub_218E5B13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t QP::SpellCheckWrapper::spellCheck(QP::SpellCheckWrapper *this, __CFString *a2, int a3)
{
  __CFString *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v4 = a2;
  v5 = (void *)QP::m_text_checker;
  v6 = -[__CFString length](v4, "length");
  if (objc_msgSend(v5, "rangeOfMisspelledWordInString:range:startingAt:wrap:language:", v4, 0, v6, 0, 0, QP::m_preferred_language)|| v7 != -[__CFString length](v4, "length"))
  {
    v11 = 0;
LABEL_9:
    v12 = 0;
    goto LABEL_10;
  }
  v8 = (void *)QP::m_text_checker;
  v9 = -[__CFString length](v4, "length");
  objc_msgSend(v8, "guessesForWordRange:inString:language:", 0, v9, v4, QP::m_preferred_language);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (!v10 || !objc_msgSend(v10, "count"))
    goto LABEL_9;
  if ((unint64_t)objc_msgSend(v11, "count") <= 0xA)
    a3 = objc_msgSend(v11, "count");
  v12 = objc_msgSend(v11, "subarrayWithRange:", 0, a3);
LABEL_10:

  return v12;
}

void sub_218E5B288(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

Class ___ZL21getUITextCheckerClassv_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!UIKitLibraryCore(char **)::frameworkLibrary)
  {
    UIKitLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
    if (!UIKitLibraryCore(char **)::frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("UITextChecker");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)___ZL21getUITextCheckerClassv_block_invoke_cold_1();
    free(v3);
  }
  getUITextCheckerClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

_QWORD *QP::U2Parser::addArgActions(uint64_t a1, void **a2)
{
  uint64_t v4;
  _QWORD *result;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  uint64_t **v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  BOOL v11;

  v4 = *(_QWORD *)(a1 + 112);
  result = std::__tree<std::string>::find<std::string>(v4 + 400, a2);
  if ((_QWORD *)(v4 + 408) != result)
  {
    result = std::__tree<std::string>::find<std::string>(v4 + 400, a2);
    v6 = (unsigned __int16 *)result[7];
    v7 = (unsigned __int16 *)(result + 8);
    if (v6 != (unsigned __int16 *)(result + 8))
    {
      v8 = (uint64_t **)(a1 + 128);
      do
      {
        result = std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>(v8, v6 + 13, v6 + 13);
        v9 = (unsigned __int16 *)*((_QWORD *)v6 + 1);
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = *(unsigned __int16 **)v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (unsigned __int16 *)*((_QWORD *)v6 + 2);
            v11 = *(_QWORD *)v10 == (_QWORD)v6;
            v6 = v10;
          }
          while (!v11);
        }
        v6 = v10;
      }
      while (v10 != v7);
    }
  }
  return result;
}

void QP::U2Parser::addArgActionstoTimeAttr(uint64_t *a1, QP::ParseAttribute ***a2)
{
  uint64_t v4;
  unsigned int v5;
  QP::ParseAttribute **v6;
  QP::ParseAttribute **v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  void *__p[2];
  char v14;

  v4 = a1[14];
  std::string::basic_string[abi:ne180100]<0>(__p, "ACTION");
  v5 = QP::ParserGrammar::symbolID(v4, (uint64_t)__p);
  if (v14 < 0)
    operator delete(__p[0]);
  v7 = *a2;
  v6 = a2[1];
  if (v7 != v6)
  {
    v8 = a1 + 17;
    do
    {
      if (QP::ParseAttribute::flag(*v7) == 1 && !*((_BYTE *)*v7 + 73))
      {
        v9 = (_QWORD *)a1[16];
        if (v9 != v8)
        {
          do
          {
            QP::ParseAttribute::addAction(*v7, v5, *((_WORD *)v9 + 13));
            v10 = (_QWORD *)v9[1];
            if (v10)
            {
              do
              {
                v11 = v10;
                v10 = (_QWORD *)*v10;
              }
              while (v10);
            }
            else
            {
              do
              {
                v11 = (_QWORD *)v9[2];
                v12 = *v11 == (_QWORD)v9;
                v9 = v11;
              }
              while (!v12);
            }
            v9 = v11;
          }
          while (v11 != v8);
        }
      }
      v7 += 2;
    }
    while (v7 != v6);
  }
}

void sub_218E5B540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t QP::U2Parser::mergeActionsforSearchtoolPersonalAnswers(uint64_t a1, uint64_t *a2, QP::ParseAttribute ***a3)
{
  uint64_t result;
  QP::ParseAttribute **v7;
  QP::ParseAttribute **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  _QWORD *v19;
  _QWORD *v20;

  result = SPQueryKindIsSearchToolSearch(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 184));
  if ((_DWORD)result)
  {
    result = std::string::starts_with[abi:ne180100](a2, "INTENT_FLIGHT");
    if ((result & 1) != 0
      || (result = std::string::starts_with[abi:ne180100](a2, "INTENT_HOTEL"), (result & 1) != 0)
      || (result = std::string::starts_with[abi:ne180100](a2, "INTENT_RESTAURANT"), (_DWORD)result))
    {
      v7 = *a3;
      v8 = a3[1];
      if (*a3 != v8)
      {
        v9 = *(_QWORD *)(a1 + 112);
        v10 = v9 + 376;
        v11 = v9 + 384;
        do
        {
          result = QP::ParseAttribute::flag(*v7);
          if ((_DWORD)result == 1 && !*((_BYTE *)*v7 + 73))
          {
            result = (uint64_t)std::__tree<std::string>::find<std::string>(v10, (void **)a2);
            if (v11 != result)
            {
              v12 = *(_QWORD **)(result + 56);
              v13 = (_QWORD *)(result + 64);
              if (v12 != (_QWORD *)(result + 64))
              {
                do
                {
                  v14 = (_QWORD *)v12[5];
                  if (v14 != v12 + 6)
                  {
                    v15 = *((unsigned __int16 *)v12 + 16);
                    do
                    {
                      result = (uint64_t)QP::ParseAttribute::addAction(*v7, v15, *((_WORD *)v14 + 13));
                      v16 = (_QWORD *)v14[1];
                      if (v16)
                      {
                        do
                        {
                          v17 = v16;
                          v16 = (_QWORD *)*v16;
                        }
                        while (v16);
                      }
                      else
                      {
                        do
                        {
                          v17 = (_QWORD *)v14[2];
                          v18 = *v17 == (_QWORD)v14;
                          v14 = v17;
                        }
                        while (!v18);
                      }
                      v14 = v17;
                    }
                    while (v17 != v12 + 6);
                  }
                  v19 = (_QWORD *)v12[1];
                  if (v19)
                  {
                    do
                    {
                      v20 = v19;
                      v19 = (_QWORD *)*v19;
                    }
                    while (v19);
                  }
                  else
                  {
                    do
                    {
                      v20 = (_QWORD *)v12[2];
                      v18 = *v20 == (_QWORD)v12;
                      v12 = v20;
                    }
                    while (!v18);
                  }
                  v12 = v20;
                }
                while (v20 != v13);
              }
            }
          }
          v7 += 2;
        }
        while (v7 != v8);
      }
    }
  }
  return result;
}

id QP::localIdentifierAliases(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v13 != v5)
          objc_enumerationMutation(v3);
        v7 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        objc_msgSend(v2, "addObject:", v7, (_QWORD)v12);
        objc_msgSend(v7, "stringByReplacingOccurrencesOfString:withString:", CFSTR("_"), CFSTR("-"));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "addObject:", v8);

        objc_msgSend(v7, "stringByReplacingOccurrencesOfString:withString:", CFSTR("-"), CFSTR("_"));
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "addObject:", v9);

      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v4);
  }

  v10 = (void *)objc_msgSend(v2, "copy");
  return v10;
}

void sub_218E5B87C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZN2QP19isSupportedQULocaleEP8NSLocale_block_invoke()
{
  uint64_t v0;
  void *v1;
  id v2;

  v2 = (id)objc_msgSend(&unk_24DA34BA8, "mutableCopy");
  if (_os_feature_enabled_impl())
    objc_msgSend(v2, "addObjectsFromArray:", &unk_24DA34BC0);
  QP::localIdentifierAliases(v2);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)QP::isSupportedQULocale(NSLocale *)::supportedLocaleIdentifiers;
  QP::isSupportedQULocale(NSLocale *)::supportedLocaleIdentifiers = v0;

}

void sub_218E5B944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN2QP20isSupportedECRLocaleEP8NSLocale_block_invoke()
{
  uint64_t v0;
  void *v1;

  QP::localIdentifierAliases(&unk_24DA34BD8);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)QP::isSupportedECRLocale(NSLocale *)::supportedLocaleIdentifiers;
  QP::isSupportedECRLocale(NSLocale *)::supportedLocaleIdentifiers = v0;

}

uint64_t QP::isAllowedPeopleSpanToken(QP *this, NSString *a2)
{
  QP *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v2 = this;
  if (QP::isAllowedPeopleSpanToken(NSString *)::onceToken != -1)
    dispatch_once(&QP::isAllowedPeopleSpanToken(NSString *)::onceToken, &__block_literal_global_43);
  v3 = (void *)QP::isAllowedPeopleSpanToken(NSString *)::disallowedTokens;
  -[QP localizedLowercaseString](v2, "localizedLowercaseString");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "containsObject:", v4) ^ 1;

  return v5;
}

void sub_218E5BA08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZN2QP24isAllowedPeopleSpanTokenEP8NSString_block_invoke()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x24BDBCF20], "setWithArray:", &unk_24DA34BF0);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)QP::isAllowedPeopleSpanToken(NSString *)::disallowedTokens;
  QP::isAllowedPeopleSpanToken(NSString *)::disallowedTokens = v0;

}

uint64_t QP::U2Parser::U2Parser(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 88) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 96) = *a4;
  v8 = a4[1];
  *(_QWORD *)(a1 + 104) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_QWORD *)(a1 + 112) = *a3;
  v11 = a3[1];
  *(_QWORD *)(a1 + 120) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 200) = 0;
  objc_msgSend(MEMORY[0x24BE7BEA8], "setUseSpotlightResources:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 80) + 64));
  return a1;
}

void sub_218E5BB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;

  a10 = (void **)(v10 + 184);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 160);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&a10);
  nlp::CFScopedPtr<__CFString const*>::reset(v15, 0);
  std::__tree<unsigned short>::destroy(v14, *(_QWORD **)(v10 + 136));
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v13);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v12);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v11);
  if (*(char *)(v10 + 79) < 0)
    operator delete(*(void **)(v10 + 56));
  _Unwind_Resume(a1);
}

__CFArray *QP::U2Parser::createPeopleNameRangesFromPersonLexemes(QP::U2Parser *this)
{
  __CFArray *Mutable;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  std::__shared_weak_count *v14;
  _QWORD *v15;
  uint64_t v16;
  void **v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  _BOOL4 v21;
  _BOOL4 v22;
  void *v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  void *__p[2];
  unsigned __int8 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[2];
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v3 = *(void **)(*((_QWORD *)this + 10) + 232);
  if (v3)
  {
    v4 = *((id *)this + 19);
    if (objc_msgSend(v4, "length"))
    {
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v5 = v3;
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
      if (v6)
      {
        v7 = *(_QWORD *)v37;
        do
        {
          for (i = 0; i != v6; ++i)
          {
            if (*(_QWORD *)v37 != v7)
              objc_enumerationMutation(v5);
            v9 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * i);
            if (objc_msgSend(v9, "length"))
            {
              v11 = objc_msgSend(v4, "rangeOfString:options:range:locale:", v9, 0, 0, objc_msgSend(v4, "length"), *(_QWORD *)(*((_QWORD *)this + 10) + 104));
              if (v11 != 0x7FFFFFFFFFFFFFFFLL)
              {
                objc_msgSend(MEMORY[0x24BDD1968], "valueWithRange:", v11, v10);
                v12 = (void *)objc_claimAutoreleasedReturnValue();
                CFArrayAppendValue(Mutable, v12);

              }
            }
          }
          v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
        }
        while (v6);
      }

    }
    return Mutable;
  }
  v35 = 0uLL;
  QP::Lexer::lexemeAtLocation(*((_QWORD *)this + 12), 0, __p);
  v15 = __p[0];
  v14 = (std::__shared_weak_count *)__p[1];
  v35 = *(_OWORD *)__p;
  if (!__p[0])
    goto LABEL_44;
  v16 = 0;
  do
  {
    QP::getUTF8StringFromCFString(CFSTR("Person"), __p);
    if ((v34 & 0x80u) == 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    if ((v34 & 0x80u) == 0)
      v18 = v34;
    else
      v18 = (size_t)__p[1];
    if (*((char *)v15 + 23) < 0)
    {
      v20 = (_QWORD *)*v15;
      v19 = v15[1];
    }
    else
    {
      v19 = *((unsigned __int8 *)v15 + 23);
      v20 = v15;
    }
    v40[0] = v20;
    v40[1] = v19;
    v21 = std::string_view::starts_with[abi:ne180100](v40, v17, v18);
    v22 = v21;
    if (((char)v34 & 0x80000000) == 0)
    {
      if (!v21)
        goto LABEL_32;
LABEL_31:
      objc_msgSend(MEMORY[0x24BDD1968], "valueWithRange:", v15[9], v15[10], __p[0]);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      CFArrayAppendValue(Mutable, v23);

      goto LABEL_32;
    }
    operator delete(__p[0]);
    if (v22)
      goto LABEL_31;
LABEL_32:
    QP::Lexer::lexemeAtLocation(*((_QWORD *)this + 12), ++v16, __p);
    v24 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v25 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
    v35 = v24;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v29 = (unint64_t *)((char *)__p[1] + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v15 = (_QWORD *)v35;
  }
  while ((_QWORD)v35);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
LABEL_44:
  if (v14)
  {
    v31 = (unint64_t *)&v14->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return Mutable;
}

void sub_218E5BF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

__CFArray *QP::U2Parser::createLocationNameRangesFromLocationLexemes(QP::U2Parser *this)
{
  __CFArray *Mutable;
  std::__shared_weak_count *v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  _BOOL4 v10;
  _BOOL4 v11;
  void *v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  void *__p[2];
  unsigned __int8 v24;
  __int128 v25;
  _QWORD v26[2];

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v25 = 0uLL;
  QP::Lexer::lexemeAtLocation(*((_QWORD *)this + 12), 0, __p);
  v4 = __p[0];
  v3 = (std::__shared_weak_count *)__p[1];
  v25 = *(_OWORD *)__p;
  if (__p[0])
  {
    v5 = 0;
    while (1)
    {
      QP::getUTF8StringFromCFString(CFSTR("Location"), __p);
      v6 = (v24 & 0x80u) == 0 ? __p : (void **)__p[0];
      v7 = (v24 & 0x80u) == 0 ? (void *)v24 : __p[1];
      if (*((char *)v4 + 23) < 0)
      {
        v9 = (_QWORD *)*v4;
        v8 = v4[1];
      }
      else
      {
        v8 = *((unsigned __int8 *)v4 + 23);
        v9 = v4;
      }
      v26[0] = v9;
      v26[1] = v8;
      v10 = std::string_view::starts_with[abi:ne180100](v26, v6, (size_t)v7);
      v11 = v10;
      if ((char)v24 < 0)
        break;
      if (v10)
        goto LABEL_16;
LABEL_17:
      QP::Lexer::lexemeAtLocation(*((_QWORD *)this + 12), ++v5, __p);
      v13 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      v25 = v13;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v17 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v18 = (unint64_t *)((char *)__p[1] + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v4 = (_QWORD *)v25;
      if (!(_QWORD)v25)
      {
        v3 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
        goto LABEL_29;
      }
    }
    operator delete(__p[0]);
    if (!v11)
      goto LABEL_17;
LABEL_16:
    objc_msgSend(MEMORY[0x24BDD1968], "valueWithRange:", v4[9], v4[10], __p[0]);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    CFArrayAppendValue(Mutable, v12);

    goto LABEL_17;
  }
LABEL_29:
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return Mutable;
}

void sub_218E5C17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

__CFAttributedString *QP::U2Parser::createAnnotations(QP::U2Parser *this)
{
  __CFAttributedString *Mutable;
  std::__shared_weak_count *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  const void *v6;
  void **v7;
  size_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  BOOL v11;
  const __CFString *v12;
  void **v13;
  size_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  BOOL v17;
  void **v18;
  size_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  _BOOL4 v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p[2];
  unsigned __int8 v34;
  __int128 v35;
  unsigned __int8 *v36;
  uint64_t v37;
  CFRange v38;

  Mutable = CFAttributedStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  v38.location = 0;
  v38.length = 0;
  CFAttributedStringReplaceString(Mutable, v38, *((CFStringRef *)this + 19));
  v35 = 0uLL;
  QP::Lexer::lexemeAtLocation(*((_QWORD *)this + 12), 0, __p);
  v4 = (unsigned __int8 *)__p[0];
  v3 = (std::__shared_weak_count *)__p[1];
  v35 = *(_OWORD *)__p;
  if (__p[0])
  {
    v5 = 0;
    v6 = (const void *)MEMORY[0x24BDBD1B8];
    do
    {
      QP::getUTF8StringFromCFString(CFSTR("Person"), __p);
      if ((v34 & 0x80u) == 0)
        v7 = __p;
      else
        v7 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v8 = v34;
      else
        v8 = (size_t)__p[1];
      if ((char)v4[23] < 0)
      {
        v10 = *(unsigned __int8 **)v4;
        v9 = *((_QWORD *)v4 + 1);
      }
      else
      {
        v9 = v4[23];
        v10 = v4;
      }
      v36 = v10;
      v37 = v9;
      v11 = std::string_view::starts_with[abi:ne180100](&v36, v7, v8);
      if ((char)v34 < 0)
        operator delete(__p[0]);
      v12 = CFSTR("kQPQUPersonSpan");
      if (v11)
        goto LABEL_39;
      QP::getUTF8StringFromCFString(CFSTR("Location"), __p);
      if ((v34 & 0x80u) == 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v14 = v34;
      else
        v14 = (size_t)__p[1];
      if ((char)v4[23] < 0)
      {
        v16 = *(unsigned __int8 **)v4;
        v15 = *((_QWORD *)v4 + 1);
      }
      else
      {
        v15 = v4[23];
        v16 = v4;
      }
      v36 = v16;
      v37 = v15;
      v17 = std::string_view::starts_with[abi:ne180100](&v36, v13, v14);
      if ((char)v34 < 0)
        operator delete(__p[0]);
      v12 = CFSTR("kQPQULocationSpan");
      if (v17)
        goto LABEL_39;
      QP::getUTF8StringFromCFString(CFSTR("Holiday"), __p);
      if ((v34 & 0x80u) == 0)
        v18 = __p;
      else
        v18 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v19 = v34;
      else
        v19 = (size_t)__p[1];
      if ((char)v4[23] < 0)
      {
        v21 = *(unsigned __int8 **)v4;
        v20 = *((_QWORD *)v4 + 1);
      }
      else
      {
        v20 = v4[23];
        v21 = v4;
      }
      v36 = v21;
      v37 = v20;
      v22 = std::string_view::starts_with[abi:ne180100](&v36, v18, v19);
      if ((char)v34 < 0)
        operator delete(__p[0]);
      v12 = CFSTR("kQPQUHolidaySpan");
      if (v22)
LABEL_39:
        CFAttributedStringSetAttribute(Mutable, *(CFRange *)(v4 + 72), v12, v6);
      QP::Lexer::lexemeAtLocation(*((_QWORD *)this + 12), ++v5, __p);
      v23 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
      v35 = v23;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v28 = (unint64_t *)((char *)__p[1] + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v4 = (unsigned __int8 *)v35;
    }
    while ((_QWORD)v35);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
  }
  if (v3)
  {
    v30 = (unint64_t *)&v3->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return Mutable;
}

void sub_218E5C478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

__CFArray *QP::U2Parser::createTokenOutputSpans(QP::U2Parser *this, const __CFAttributedString *a2, CFRange a3)
{
  CFIndex length;
  CFIndex location;
  __CFArray *Mutable;
  const __CFDictionary *Attributes;
  const __CFDictionary *v8;
  CFIndex Count;
  unint64_t v10;
  const void **v11;
  size_t v12;
  _BOOL4 v13;
  const __CFString *v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _QWORD v18[2];

  length = a3.length;
  location = a3.location;
  v18[1] = *MEMORY[0x24BDAC8D0];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  if (location != -1 && length >= 1)
  {
    Attributes = CFAttributedStringGetAttributes(a2, location, 0);
    if (Attributes)
    {
      v8 = Attributes;
      Count = CFDictionaryGetCount(Attributes);
      MEMORY[0x24BDAC7A8](Count);
      v11 = (const void **)((char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
      v12 = v10 >= 0x200 ? 512 : v10;
      bzero((char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
      CFDictionaryGetKeysAndValues(v8, v11, 0);
      if (Count >= 1)
      {
        do
        {
          v13 = CFStringsAreEqual(CFSTR("kQPQUPersonSpan"), (const __CFString *)*v11);
          v14 = CFSTR("Person");
          if (v13
            || (v15 = CFStringsAreEqual(CFSTR("kQPQULocationSpan"), (const __CFString *)*v11),
                v14 = CFSTR("Location"),
                v15)
            || (v16 = CFStringsAreEqual(CFSTR("kQPQUHolidaySpan"), (const __CFString *)*v11), v14 = CFSTR("Holiday"),
                                                                                              v16))
          {
            CFArrayAppendValue(Mutable, v14);
          }
          ++v11;
          --Count;
        }
        while (Count);
      }
    }
  }
  return Mutable;
}

void QP::U2Parser::lexemeForTokenWithRange(QP::U2Parser *this@<X0>, const __CFString *a2@<X1>, CFRange a3@<0:X2, 8:X3>, const __CFString **a4@<X4>, const __CFString *a5@<X5>, const __CFString *a6@<X6>, _QWORD *a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  CFIndex v14;
  _BYTE *v16;
  size_t v17;
  size_t v18;
  void *v19;
  void *p_p;
  size_t v21;
  uint64_t v22;
  void *v23;
  _BOOL4 v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  NSObject *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  NSObject *v36;
  uint64_t v37;
  void *v38;
  void *__p;
  size_t v41;
  unsigned __int8 v42;
  __int128 v43;
  CFRange v44;
  _QWORD v45[2];
  _BYTE buf[22];
  unsigned __int8 v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v44 = a3;
  v43 = 0uLL;
  QP::Lexer::lexemeAtLocation(*((_QWORD *)this + 12), 0, buf);
  v43 = *(_OWORD *)buf;
  v12 = *(_QWORD *)buf;
  if (*(_QWORD *)buf)
  {
    v13 = 0;
    while (1)
    {
      v14 = *(_QWORD *)(v12 + 72);
      if (v14 <= v44.location && *(_QWORD *)(v12 + 80) + v14 >= v44.length + v44.location)
      {
        QP::getUTF8StringFromCFString(a5, buf);
        v16 = (v47 & 0x80u) == 0 ? buf : *(_BYTE **)buf;
        v17 = (v47 & 0x80u) == 0 ? v47 : *(_QWORD *)&buf[8];
        if (*(char *)(v12 + 23) < 0)
        {
          v19 = *(void **)v12;
          v18 = *(_QWORD *)(v12 + 8);
        }
        else
        {
          v18 = *(unsigned __int8 *)(v12 + 23);
          v19 = (void *)v12;
        }
        __p = v19;
        v41 = v18;
        if (std::string_view::starts_with[abi:ne180100](&__p, v16, v17))
        {
          QP::getUTF8StringFromCFString(a6, &__p);
          if ((v42 & 0x80u) == 0)
            p_p = &__p;
          else
            p_p = __p;
          if ((v42 & 0x80u) == 0)
            v21 = v42;
          else
            v21 = v41;
          if (*(char *)(v12 + 23) < 0)
          {
            v23 = *(void **)v12;
            v22 = *(_QWORD *)(v12 + 8);
          }
          else
          {
            v22 = *(unsigned __int8 *)(v12 + 23);
            v23 = (void *)v12;
          }
          v45[0] = v23;
          v45[1] = v22;
          v24 = std::string_view::ends_with[abi:ne180100](v45, p_p, v21);
          if ((char)v42 < 0)
            operator delete(__p);
        }
        else
        {
          v24 = 0;
        }
        if ((char)v47 < 0)
          operator delete(*(void **)buf);
        if (v24)
          break;
      }
      QP::Lexer::lexemeAtLocation(*((_QWORD *)this + 12), ++v13, buf);
      v25 = *(_OWORD *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
      v43 = v25;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v30 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v12 = v43;
      if (!(_QWORD)v43)
        goto LABEL_43;
    }
    if (u2ParserLogger(void)::token != -1)
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
    v36 = u2ParserLogger(void)::log;
    if (os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_DEBUG))
    {
      v38 = (void *)v12;
      if (*(char *)(v12 + 23) < 0)
        v38 = *(void **)v12;
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v38;
      _os_log_debug_impl(&dword_218E10000, v36, OS_LOG_TYPE_DEBUG, "Found matching lexeme for %@ with type %s", buf, 0x16u);
    }
    v37 = *((_QWORD *)&v43 + 1);
    *a7 = v12;
    a7[1] = v37;
  }
  else
  {
LABEL_43:
    if (u2ParserLogger(void)::token != -1)
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
    v32 = u2ParserLogger(void)::log;
    if (os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = a2;
      _os_log_impl(&dword_218E10000, v32, OS_LOG_TYPE_DEFAULT, "Unable to find a Kind* or Media lexeme for %@; falling back to Text",
        buf,
        0xCu);
    }
    *a4 = kQPParseAttributeKeywordKey;
    std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const*&,CFRange &,void>((char **)&QP::kLexemeTextType, (uint64_t)&v44, a7);
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
    if (*((_QWORD *)&v43 + 1))
    {
      v34 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }
}

void sub_218E5C9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

id u2ParserLogger(void)
{
  if (u2ParserLogger(void)::token != -1)
    dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
  return (id)u2ParserLogger(void)::log;
}

void QP::U2Parser::lexemeForArgMediaTypeWithRange(QP::U2Parser *this@<X0>, const __CFString *a2@<X1>, CFRange a3@<0:X2, 8:X3>, const __CFString **a4@<X4>, _QWORD *a5@<X8>)
{
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  CFIndex v12;
  NSObject *v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  NSObject *v25;
  NSObject *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  int v33[4];
  uint64_t v34;
  std::__shared_weak_count *v35;
  CFRange v36;
  _BYTE buf[22];
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v36 = a3;
  v34 = 0;
  v35 = 0;
  memset(v33, 0, sizeof(v33));
  QP::Lexer::lexemeAtLocation(*((_QWORD *)this + 12), 0, buf);
  v9 = *(_OWORD *)buf;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  *(_OWORD *)v33 = v9;
  v10 = (uint64_t *)v9;
  if (!(_QWORD)v9)
  {
LABEL_29:
    v23 = v34;
    if (v34)
    {
      *a4 = kQPParseAttributeKindKey;
      v24 = v35;
      *a5 = v23;
      a5[1] = v24;
      v34 = 0;
      v35 = 0;
    }
    else
    {
      if (u2ParserLogger(void)::token != -1)
        dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
      v25 = u2ParserLogger(void)::log;
      if (os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = a2;
        _os_log_impl(&dword_218E10000, v25, OS_LOG_TYPE_DEFAULT, "[QPNLU] Unable to find a Kind* or Media lexeme for %@; falling back to Text",
          buf,
          0xCu);
      }
      *a4 = kQPParseAttributeKeywordKey;
      std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const*&,CFRange &,void>((char **)&QP::kLexemeTextType, (uint64_t)&v36, a5);
    }
    goto LABEL_41;
  }
  v11 = 0;
  while (1)
  {
    v12 = v10[9];
    if (v12 <= v36.location && v10[10] + v12 >= v36.length + v36.location)
      break;
LABEL_14:
    QP::Lexer::lexemeAtLocation(*((_QWORD *)this + 12), ++v11, buf);
    v15 = *(_OWORD *)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v16 = *(std::__shared_weak_count **)&v33[2];
    *(_OWORD *)v33 = v15;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v20 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v10 = *(uint64_t **)v33;
    if (!*(_QWORD *)v33)
      goto LABEL_29;
  }
  if (!std::string::starts_with[abi:ne180100](v10, "Media"))
  {
    if (!v34 && std::string::starts_with[abi:ne180100](*(uint64_t **)v33, "Kind"))
    {
      if (u2ParserLogger(void)::token != -1)
        dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
      v14 = u2ParserLogger(void)::log;
      if (os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_DEBUG))
      {
        v22 = *(_QWORD *)v33;
        if (*(char *)(*(_QWORD *)v33 + 23) < 0)
          v22 = **(_QWORD **)v33;
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = a2;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v22;
        _os_log_debug_impl(&dword_218E10000, v14, OS_LOG_TYPE_DEBUG, "Found matching Kind lexeme for %@ with type %s", buf, 0x16u);
      }
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](&v34, (uint64_t *)v33);
    }
    goto LABEL_14;
  }
  if (u2ParserLogger(void)::token != -1)
    dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
  v26 = u2ParserLogger(void)::log;
  if (os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_DEBUG))
    QP::U2Parser::lexemeForArgMediaTypeWithRange((uint64_t)v33, (uint64_t)a2, v26);
  *a4 = kQPParseAttributeMediaKey;
  *(_OWORD *)a5 = *(_OWORD *)v33;
  memset(v33, 0, sizeof(v33));
LABEL_41:
  v27 = *(std::__shared_weak_count **)&v33[2];
  if (*(_QWORD *)&v33[2])
  {
    v28 = (unint64_t *)(*(_QWORD *)&v33[2] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v35;
  if (v35)
  {
    v31 = (unint64_t *)&v35->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_218E5CEBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

void QP::U2Parser::parse(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  os_signpost_id_t v5;
  os_signpost_id_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  NSObject *v12;
  os_signpost_id_t v13;
  os_signpost_id_t v14;
  uint8_t buf[16];

  if (u2ParserLogger(void)::token != -1)
    dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
  v4 = (id)u2ParserLogger(void)::log;
  if (u2ParserLogger(void)::token != -1)
    dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
  v5 = os_signpost_id_make_with_pointer((os_log_t)u2ParserLogger(void)::log, *(const void **)(*(_QWORD *)(a1 + 96) + 440));
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v6 = v5;
    if (os_signpost_enabled(v4))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_218E10000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v6, "U2Parser.parse", "", buf, 2u);
    }
  }

  v7 = *(std::__shared_weak_count **)(a2 + 8);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  QP::U2Parser::parseInternal(a1);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (u2ParserLogger(void)::token != -1)
    dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
  v12 = (id)u2ParserLogger(void)::log;
  if (u2ParserLogger(void)::token != -1)
    dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
  v13 = os_signpost_id_make_with_pointer((os_log_t)u2ParserLogger(void)::log, *(const void **)(*(_QWORD *)(a1 + 96) + 440));
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v14 = v13;
    if (os_signpost_enabled(v12))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_218E10000, v12, OS_SIGNPOST_INTERVAL_END, v14, "U2Parser.parse", "", buf, 2u);
    }
  }

}

void sub_218E5D0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QP::U2Parser::parseInternal(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  __int128 v4;
  std::string *v5;
  const __CFString *v6;
  const __CFString *v7;
  const void *v8;
  CFTypeRef v9;
  QP *v10;
  NSLocale *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v16;
  const __CFString *v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  NSObject *v23;
  const char *v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  const std::string::value_type *v29;
  NSObject *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  id v39;
  NSObject *v40;
  os_signpost_id_t v41;
  os_signpost_id_t v42;
  dispatch_semaphore_t v43;
  qos_class_t v44;
  NSObject *v45;
  unint64_t *v46;
  unint64_t v47;
  id v48;
  NSObject *v49;
  dispatch_time_t v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  id v56;
  NSObject *v57;
  os_signpost_id_t v58;
  os_signpost_id_t v59;
  id v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t i;
  uint64_t v77;
  void *v78;
  BOOL v79;
  id v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  QP *v85;
  NSString *v86;
  void *v87;
  void *v88;
  uint64_t v89;
  __CFArray *PeopleNameRangesFromPersonLexemes;
  id v91;
  id v92;
  void *v93;
  void *v94;
  _BOOL4 v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t j;
  void *v100;
  void *v101;
  _BOOL4 v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t k;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  NSObject *v110;
  NSObject *v111;
  NSObject *v112;
  os_signpost_id_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  unsigned int v117;
  id v118;
  id v119;
  NSObject *v120;
  NSObject *v121;
  unsigned int v122;
  dispatch_time_t v123;
  dispatch_time_t v124;
  id v125;
  unsigned int v126;
  NSObject *v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  __CFArray *v131;
  __CFArray *LocationNameRangesFromLocationLexemes;
  id v133;
  NSObject *v134;
  NSObject *v135;
  os_signpost_id_t v136;
  void *v137;
  uint64_t v138;
  void *v139;
  CFArrayRef ArrayBySeparatingStrings;
  void *v141;
  char *v142;
  void *v143;
  float v144;
  float v145;
  void *v146;
  void *v147;
  float v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  uint64_t v153;
  void *v154;
  QP *v155;
  NSString *v156;
  void *v157;
  BOOL v158;
  id v159;
  uint64_t v160;
  const std::string::value_type *v161;
  NSObject *v162;
  void *v163;
  BOOL v164;
  void *v165;
  char *v166;
  void *v167;
  void *v168;
  id v169;
  void *v170;
  void *v171;
  void *v172;
  NSObject *v173;
  void *v174;
  void *v175;
  CFIndex v176;
  CFIndex v177;
  CFIndex v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t n;
  void *v190;
  void *v191;
  void *v192;
  void *v193;
  void *v194;
  QP::U2Parser *v195;
  __CFArray *TokenOutputSpans;
  NSLocale *v197;
  int HasArgIdWithScore;
  NSObject *v199;
  void *v200;
  void *v201;
  void *v202;
  int v203;
  int v204;
  void *v205;
  void *v206;
  uint64_t v207;
  int v208;
  BOOL v209;
  int v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void *v217;
  void *v218;
  uint64_t v219;
  void *v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  CFRange *v226;
  __CFString *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  __int128 v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  CFRange *p_buf;
  NSObject *v243;
  int v244;
  NSObject *v245;
  NSObject *v246;
  os_signpost_id_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  CFIndex location;
  CFIndex v255;
  uint64_t v256;
  unint64_t *v257;
  unint64_t v258;
  unint64_t *v259;
  unint64_t v260;
  CFRange v261;
  NSObject *v263;
  void *v264;
  void *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  NSObject *v270;
  NSObject *v271;
  os_signpost_id_t v272;
  NSObject *v273;
  unsigned int v274;
  NSObject *v275;
  void *v276;
  NSObject *v277;
  void *v278;
  void *v279;
  void *v280;
  void *v281;
  NSObject *v282;
  id v283;
  uint64_t v284;
  uint64_t v285;
  char v287;
  uint64_t v288;
  unint64_t *v289;
  unint64_t v290;
  _QWORD *v291;
  uint64_t v292;
  unint64_t *v293;
  unint64_t v294;
  uint64_t v295;
  unint64_t *v296;
  unint64_t v297;
  uint64_t v298;
  unint64_t *v299;
  unint64_t v300;
  uint64_t v301;
  unint64_t *v302;
  unint64_t v303;
  uint64_t v304;
  unint64_t *v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t *v308;
  unint64_t v309;
  uint64_t v310;
  unint64_t *v311;
  unint64_t v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  uint64_t v343;
  unint64_t *v344;
  unint64_t v345;
  _QWORD *v346;
  uint64_t v347;
  unint64_t *v348;
  unint64_t v349;
  uint64_t v350;
  unint64_t *v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t *v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t *v357;
  unint64_t v358;
  _QWORD *v359;
  uint64_t v360;
  unint64_t *v361;
  unint64_t v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  unint64_t v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  std::__shared_weak_count *v387;
  unint64_t *v388;
  unint64_t v389;
  std::__shared_weak_count *v390;
  unint64_t *v391;
  unint64_t v392;
  std::__shared_weak_count *v393;
  unint64_t *v394;
  unint64_t v395;
  std::__shared_weak_count *v396;
  unint64_t *v397;
  unint64_t v398;
  std::__shared_weak_count *v399;
  unint64_t *v400;
  unint64_t v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  std::__shared_weak_count *v405;
  unint64_t *v406;
  unint64_t v407;
  std::__shared_weak_count *v408;
  unint64_t *v409;
  unint64_t v410;
  std::__shared_weak_count *v411;
  unint64_t *v412;
  unint64_t v413;
  std::__shared_weak_count *v414;
  unint64_t *v415;
  unint64_t v416;
  std::__shared_weak_count *v417;
  unint64_t *v418;
  unint64_t v419;
  std::__shared_weak_count *v420;
  unint64_t *v421;
  unint64_t v422;
  char *v423;
  std::__shared_weak_count *v424;
  unint64_t *v425;
  unint64_t v426;
  std::__shared_weak_count *v427;
  unint64_t *v428;
  unint64_t v429;
  std::__shared_weak_count *v430;
  unint64_t *v431;
  unint64_t v432;
  std::__shared_weak_count *v433;
  unint64_t *v434;
  unint64_t v435;
  std::__shared_weak_count *v436;
  unint64_t *v437;
  unint64_t v438;
  std::__shared_weak_count *v439;
  unint64_t *v440;
  unint64_t v441;
  std::__shared_weak_count *v442;
  unint64_t *v443;
  unint64_t v444;
  std::__shared_weak_count *v445;
  unint64_t *v446;
  unint64_t v447;
  std::__shared_weak_count *v448;
  unint64_t *v449;
  unint64_t v450;
  std::__shared_weak_count *v451;
  unint64_t *v452;
  unint64_t v453;
  char *v454;
  std::__shared_weak_count *v455;
  unint64_t *v456;
  unint64_t v457;
  std::__shared_weak_count *v458;
  unint64_t *v459;
  unint64_t v460;
  std::__shared_weak_count *v461;
  unint64_t *v462;
  unint64_t v463;
  std::__shared_weak_count *v464;
  unint64_t *v465;
  unint64_t v466;
  std::__shared_weak_count *v467;
  unint64_t *v468;
  unint64_t v469;
  std::__shared_weak_count *v470;
  unint64_t *v471;
  unint64_t v472;
  std::__shared_weak_count *v473;
  unint64_t *v474;
  unint64_t v475;
  std::__shared_weak_count *v476;
  unint64_t *v477;
  unint64_t v478;
  std::__shared_weak_count *v479;
  unint64_t *v480;
  unint64_t v481;
  std::__shared_weak_count *v482;
  unint64_t *v483;
  unint64_t v484;
  char *v485;
  std::__shared_weak_count *v486;
  unint64_t *v487;
  unint64_t v488;
  std::__shared_weak_count *v489;
  unint64_t *v490;
  unint64_t v491;
  std::__shared_weak_count *v492;
  unint64_t *v493;
  unint64_t v494;
  std::__shared_weak_count *v495;
  unint64_t *v496;
  unint64_t v497;
  std::__shared_weak_count *v498;
  unint64_t *v499;
  unint64_t v500;
  std::__shared_weak_count *v501;
  unint64_t *v502;
  unint64_t v503;
  std::__shared_weak_count *v504;
  unint64_t *v505;
  unint64_t v506;
  std::__shared_weak_count *v507;
  unint64_t *v508;
  unint64_t v509;
  std::__shared_weak_count *v510;
  unint64_t *v511;
  unint64_t v512;
  std::__shared_weak_count *v513;
  unint64_t *v514;
  unint64_t v515;
  std::__shared_weak_count *v516;
  unint64_t *v517;
  unint64_t v518;
  std::__shared_weak_count *v519;
  unint64_t *v520;
  unint64_t v521;
  std::__shared_weak_count *v522;
  unint64_t *v523;
  unint64_t v524;
  std::__shared_weak_count *v525;
  unint64_t *v526;
  unint64_t v527;
  std::__shared_weak_count *v528;
  unint64_t *v529;
  unint64_t v530;
  uint64_t v531;
  uint64_t v532;
  unint64_t *v533;
  unint64_t v534;
  std::__shared_weak_count *v535;
  unint64_t *v536;
  unint64_t v537;
  std::__shared_weak_count *v538;
  unint64_t *v539;
  unint64_t v540;
  std::__shared_weak_count *v541;
  unint64_t *v542;
  unint64_t v543;
  std::__shared_weak_count *v544;
  unint64_t *v545;
  unint64_t v546;
  std::__shared_weak_count *v547;
  unint64_t *v548;
  unint64_t v549;
  char *v550;
  std::__shared_weak_count *v551;
  unint64_t *v552;
  unint64_t v553;
  std::__shared_weak_count *v554;
  unint64_t *v555;
  unint64_t v556;
  std::__shared_weak_count *v557;
  unint64_t *v558;
  unint64_t v559;
  std::__shared_weak_count *v560;
  unint64_t *v561;
  unint64_t v562;
  std::__shared_weak_count *v563;
  unint64_t *v564;
  unint64_t v565;
  char *v566;
  std::__shared_weak_count *v567;
  unint64_t *v568;
  unint64_t v569;
  std::__shared_weak_count *v570;
  unint64_t *v571;
  unint64_t v572;
  std::__shared_weak_count *v573;
  unint64_t *v574;
  unint64_t v575;
  std::__shared_weak_count *v576;
  unint64_t *v577;
  unint64_t v578;
  std::__shared_weak_count *v579;
  unint64_t *v580;
  unint64_t v581;
  char *v582;
  std::__shared_weak_count *v583;
  unint64_t *v584;
  unint64_t v585;
  std::__shared_weak_count *v586;
  unint64_t *v587;
  unint64_t v588;
  std::__shared_weak_count *v589;
  unint64_t *v590;
  unint64_t v591;
  std::__shared_weak_count *v592;
  unint64_t *v593;
  unint64_t v594;
  std::__shared_weak_count *v595;
  unint64_t *v596;
  unint64_t v597;
  std::__shared_weak_count *v598;
  unint64_t *v599;
  unint64_t v600;
  std::__shared_weak_count *v601;
  unint64_t *v602;
  unint64_t v603;
  std::__shared_weak_count *v604;
  unint64_t *v605;
  unint64_t v606;
  std::__shared_weak_count *v607;
  unint64_t *v608;
  unint64_t v609;
  std::__shared_weak_count *v610;
  unint64_t *v611;
  unint64_t v612;
  std::__shared_weak_count *v613;
  unint64_t *v614;
  unint64_t v615;
  std::__shared_weak_count *v616;
  unint64_t *v617;
  unint64_t v618;
  std::__shared_weak_count *v619;
  unint64_t *v620;
  unint64_t v621;
  std::__shared_weak_count *v622;
  unint64_t *v623;
  unint64_t v624;
  std::__shared_weak_count *v625;
  unint64_t *v626;
  unint64_t v627;
  std::__shared_weak_count *v628;
  unint64_t *v629;
  unint64_t v630;
  std::__shared_weak_count *v631;
  unint64_t *v632;
  unint64_t v633;
  std::__shared_weak_count *v634;
  unint64_t *v635;
  unint64_t v636;
  std::__shared_weak_count *v637;
  unint64_t *v638;
  unint64_t v639;
  std::__shared_weak_count *v640;
  unint64_t *v641;
  unint64_t v642;
  std::__shared_weak_count *v643;
  unint64_t *v644;
  unint64_t v645;
  std::__shared_weak_count *v646;
  unint64_t *v647;
  unint64_t v648;
  std::__shared_weak_count *v649;
  unint64_t *v650;
  unint64_t v651;
  std::__shared_weak_count *v652;
  unint64_t *v653;
  unint64_t v654;
  std::__shared_weak_count *v655;
  unint64_t *v656;
  unint64_t v657;
  std::__shared_weak_count *v658;
  unint64_t *v659;
  unint64_t v660;
  std::__shared_weak_count *v661;
  unint64_t *v662;
  unint64_t v663;
  std::__shared_weak_count *v664;
  unint64_t *v665;
  unint64_t v666;
  std::__shared_weak_count *v667;
  unint64_t *v668;
  unint64_t v669;
  std::__shared_weak_count *v670;
  unint64_t *v671;
  unint64_t v672;
  std::__shared_weak_count *v673;
  unint64_t *v674;
  unint64_t v675;
  std::__shared_weak_count *v676;
  unint64_t *v677;
  unint64_t v678;
  std::__shared_weak_count *v679;
  unint64_t *v680;
  unint64_t v681;
  std::__shared_weak_count *v682;
  unint64_t *v683;
  unint64_t v684;
  std::__shared_weak_count *v685;
  unint64_t *v686;
  unint64_t v687;
  std::__shared_weak_count *v688;
  unint64_t *v689;
  unint64_t v690;
  std::__shared_weak_count *v691;
  unint64_t *v692;
  unint64_t v693;
  std::__shared_weak_count *v694;
  unint64_t *v695;
  unint64_t v696;
  std::__shared_weak_count *v697;
  unint64_t *v698;
  unint64_t v699;
  std::__shared_weak_count *v700;
  unint64_t *v701;
  unint64_t v702;
  std::__shared_weak_count *v703;
  unint64_t *v704;
  unint64_t v705;
  std::__shared_weak_count *v706;
  unint64_t *v707;
  unint64_t v708;
  std::__shared_weak_count *v709;
  unint64_t *v710;
  unint64_t v711;
  std::__shared_weak_count *v712;
  unint64_t *v713;
  unint64_t v714;
  std::__shared_weak_count *v715;
  unint64_t *v716;
  unint64_t v717;
  std::__shared_weak_count *v718;
  unint64_t *v719;
  unint64_t v720;
  std::__shared_weak_count *v721;
  unint64_t *v722;
  unint64_t v723;
  std::__shared_weak_count *v724;
  unint64_t *v725;
  unint64_t v726;
  std::__shared_weak_count *v727;
  unint64_t *v728;
  unint64_t v729;
  std::__shared_weak_count *v730;
  unint64_t *v731;
  unint64_t v732;
  std::__shared_weak_count *v733;
  unint64_t *v734;
  unint64_t v735;
  std::__shared_weak_count *v736;
  unint64_t *v737;
  unint64_t v738;
  std::__shared_weak_count *v739;
  unint64_t *v740;
  unint64_t v741;
  std::__shared_weak_count *v742;
  unint64_t *v743;
  unint64_t v744;
  std::__shared_weak_count *v745;
  unint64_t *v746;
  unint64_t v747;
  uint64_t v748;
  unint64_t *v749;
  unint64_t v750;
  _QWORD *v751;
  uint64_t v752;
  unint64_t *v753;
  unint64_t v754;
  int v755;
  int v756;
  uint64_t v757;
  uint64_t v758;
  unint64_t v759;
  uint64_t v760;
  unint64_t v761;
  char *v762;
  uint64_t v763;
  char *v764;
  _QWORD *v765;
  _QWORD *v766;
  char *v767;
  __int128 v768;
  int64x2_t v769;
  _OWORD *v770;
  uint64_t (*v771)(uint64_t, uint64_t);
  std::__shared_weak_count *v772;
  unint64_t *v773;
  unint64_t v774;
  std::__shared_weak_count *v775;
  unint64_t *v776;
  unint64_t v777;
  int v778;
  int v779;
  uint64_t v780;
  uint64_t v781;
  unint64_t v782;
  uint64_t v783;
  unint64_t v784;
  char *v785;
  uint64_t v786;
  char *v787;
  _QWORD *v788;
  _QWORD *v789;
  char *v790;
  __int128 v791;
  int64x2_t v792;
  _OWORD *v793;
  uint64_t (*v794)(uint64_t, uint64_t);
  std::__shared_weak_count *v795;
  unint64_t *v796;
  unint64_t v797;
  std::__shared_weak_count *v798;
  unint64_t *v799;
  unint64_t v800;
  std::__shared_weak_count *v801;
  unint64_t *v802;
  unint64_t v803;
  std::__shared_weak_count *v804;
  unint64_t *v805;
  unint64_t v806;
  std::__shared_weak_count *v807;
  unint64_t *v808;
  unint64_t v809;
  std::__shared_weak_count *v810;
  unint64_t *v811;
  unint64_t v812;
  std::__shared_weak_count *v813;
  unint64_t *v814;
  unint64_t v815;
  char *v816;
  std::__shared_weak_count *v817;
  unint64_t *v818;
  unint64_t v819;
  std::__shared_weak_count *v820;
  unint64_t *v821;
  unint64_t v822;
  std::__shared_weak_count *v823;
  unint64_t *v824;
  unint64_t v825;
  std::__shared_weak_count *v826;
  unint64_t *v827;
  unint64_t v828;
  std::__shared_weak_count *v829;
  unint64_t *v830;
  unint64_t v831;
  char *v832;
  std::__shared_weak_count *v833;
  unint64_t *v834;
  unint64_t v835;
  std::__shared_weak_count *v836;
  unint64_t *v837;
  unint64_t v838;
  std::__shared_weak_count *v839;
  unint64_t *v840;
  unint64_t v841;
  std::__shared_weak_count *v842;
  unint64_t *v843;
  unint64_t v844;
  std::__shared_weak_count *v845;
  unint64_t *v846;
  unint64_t v847;
  std::__shared_weak_count *v848;
  unint64_t *v849;
  unint64_t v850;
  std::__shared_weak_count *v851;
  unint64_t *v852;
  unint64_t v853;
  std::__shared_weak_count *v854;
  unint64_t *v855;
  unint64_t v856;
  std::__shared_weak_count *v857;
  unint64_t *v858;
  unint64_t v859;
  std::__shared_weak_count *v860;
  unint64_t *v861;
  unint64_t v862;
  std::__shared_weak_count *v863;
  unint64_t *v864;
  unint64_t v865;
  std::__shared_weak_count *v866;
  unint64_t *v867;
  unint64_t v868;
  std::__shared_weak_count *v869;
  unint64_t *v870;
  unint64_t v871;
  std::__shared_weak_count *v872;
  unint64_t *v873;
  unint64_t v874;
  std::__shared_weak_count *v875;
  unint64_t *v876;
  unint64_t v877;
  void *v878;
  id v879;
  unint64_t v880;
  void *v881;
  void *v882;
  BOOL v883;
  void *v884;
  void *v885;
  void *v886;
  float v887;
  BOOL v888;
  void *v889;
  void *v890;
  void *v891;
  char v892;
  std::__shared_weak_count *v893;
  unint64_t *v894;
  unint64_t v895;
  std::__shared_weak_count *v896;
  unint64_t *v897;
  unint64_t v898;
  std::__shared_weak_count *v899;
  unint64_t *v900;
  unint64_t v901;
  std::__shared_weak_count *v902;
  unint64_t *v903;
  unint64_t v904;
  std::__shared_weak_count *v905;
  unint64_t *v906;
  unint64_t v907;
  void *v908;
  void *v909;
  uint64_t v910;
  uint64_t v911;
  std::__shared_weak_count *v912;
  unint64_t *v913;
  unint64_t v914;
  __int128 *m;
  __int128 *v916;
  NSObject *v917;
  unint64_t v918;
  NSObject *v919;
  unint64_t v920;
  unint64_t v921;
  unint64_t v922;
  uint64_t v923;
  char *v924;
  int v925;
  uint64_t v926;
  void *v927;
  void *v928;
  void *v929;
  void *v930;
  double v931;
  void *v932;
  void *v933;
  void *v934;
  void *v935;
  uint64_t v936;
  unsigned int v937;
  const __CFAllocator *alloc;
  const __CFArray *theArray;
  float v940;
  char v941;
  char v942;
  char v943;
  uint64_t v944;
  uint64_t v945;
  unint64_t v946;
  void *v947;
  uint64_t v948;
  void *v949;
  int v950;
  __CFArray *v951;
  unint64_t v952;
  int v953;
  __CFAttributedString *cf;
  __CFArray *v955;
  int v956;
  void *v957;
  __CFDictionary *v958;
  id v959;
  char v960;
  uint64_t v961;
  void *v962;
  uint64_t v963;
  __CFString *v964;
  id v965;
  id v966;
  std::string *v967;
  unint64_t v968;
  uint64_t v969;
  CFIndex Length;
  uint64_t v971;
  int v972;
  uint64_t v973;
  unint64_t v974;
  void *v975;
  id ptr;
  __CFString *ptra;
  void *ptrb;
  uint64_t *v979;
  void *v980;
  uint64_t v981;
  void *v982;
  QP::U2Parser *v983;
  id obj;
  id obja;
  const void **v986;
  uint64_t v987;
  id v988;
  void *v989;
  uint64_t v990;
  void *v991;
  QP *v992;
  void *v993;
  QP::ParseAttribute **v994[3];
  std::string v995;
  QP::ParseAttribute **v996[3];
  const std::string *v997;
  std::__shared_weak_count *v998;
  std::string *v999;
  std::__shared_weak_count *v1000;
  uint64_t v1001;
  std::__shared_weak_count *v1002;
  const std::string *v1003;
  std::__shared_weak_count *v1004;
  std::string *v1005;
  std::__shared_weak_count *v1006;
  uint64_t v1007;
  std::__shared_weak_count *v1008;
  const std::string *v1009;
  std::__shared_weak_count *v1010;
  std::string *v1011;
  std::__shared_weak_count *v1012;
  uint64_t v1013;
  std::__shared_weak_count *v1014;
  const std::string *v1015;
  std::__shared_weak_count *v1016;
  std::string *v1017;
  std::__shared_weak_count *v1018;
  uint64_t v1019;
  std::__shared_weak_count *v1020;
  void *v1021[2];
  char v1022;
  const std::string *v1023;
  std::__shared_weak_count *v1024;
  std::string *v1025;
  std::__shared_weak_count *v1026;
  uint64_t v1027;
  std::__shared_weak_count *v1028;
  void *v1029[2];
  char v1030;
  const std::string *v1031;
  std::__shared_weak_count *v1032;
  std::string *v1033;
  std::__shared_weak_count *v1034;
  uint64_t v1035;
  std::__shared_weak_count *v1036;
  const std::string *v1037;
  std::__shared_weak_count *v1038;
  const std::string *v1039;
  std::__shared_weak_count *v1040;
  const std::string *v1041[2];
  std::string *v1042[2];
  _QWORD v1043[2];
  const std::string *v1044[2];
  std::string *v1045[2];
  _QWORD v1046[2];
  const std::string *v1047;
  std::__shared_weak_count *v1048;
  std::string *v1049;
  std::__shared_weak_count *v1050;
  uint64_t v1051;
  std::__shared_weak_count *v1052;
  const std::string *v1053;
  std::__shared_weak_count *v1054;
  std::string *v1055;
  std::__shared_weak_count *v1056;
  uint64_t v1057;
  std::__shared_weak_count *v1058;
  const std::string *v1059;
  std::__shared_weak_count *v1060;
  std::string *v1061;
  std::__shared_weak_count *v1062;
  uint64_t v1063;
  std::__shared_weak_count *v1064;
  const std::string *v1065;
  std::__shared_weak_count *v1066;
  std::string *v1067;
  std::__shared_weak_count *v1068;
  uint64_t v1069;
  std::__shared_weak_count *v1070;
  const std::string *v1071;
  std::__shared_weak_count *v1072;
  std::string *v1073;
  std::__shared_weak_count *v1074;
  uint64_t v1075;
  std::__shared_weak_count *v1076;
  const std::string *v1077;
  std::__shared_weak_count *v1078;
  std::string *v1079;
  std::__shared_weak_count *v1080;
  uint64_t v1081;
  std::__shared_weak_count *v1082;
  const std::string *v1083;
  std::__shared_weak_count *v1084;
  std::string *v1085;
  std::__shared_weak_count *v1086;
  uint64_t v1087;
  std::__shared_weak_count *v1088;
  const std::string *v1089;
  std::__shared_weak_count *v1090;
  std::string *v1091;
  std::__shared_weak_count *v1092;
  uint64_t v1093;
  std::__shared_weak_count *v1094;
  const std::string *v1095;
  std::__shared_weak_count *v1096;
  std::string *v1097;
  std::__shared_weak_count *v1098;
  uint64_t v1099;
  std::__shared_weak_count *v1100;
  const std::string *v1101;
  std::__shared_weak_count *v1102;
  std::string *v1103;
  std::__shared_weak_count *v1104;
  uint64_t v1105;
  std::__shared_weak_count *v1106;
  const std::string *v1107;
  std::__shared_weak_count *v1108;
  std::string *v1109;
  std::__shared_weak_count *v1110;
  uint64_t v1111;
  std::__shared_weak_count *v1112;
  void *v1113[2];
  char v1114;
  const std::string *v1115;
  std::__shared_weak_count *v1116;
  std::string *v1117;
  std::__shared_weak_count *v1118;
  uint64_t v1119;
  std::__shared_weak_count *v1120;
  void *v1121[2];
  char v1122;
  const std::string *v1123;
  std::__shared_weak_count *v1124;
  std::string *v1125;
  std::__shared_weak_count *v1126;
  uint64_t v1127;
  std::__shared_weak_count *v1128;
  void *v1129[2];
  char v1130;
  const std::string *v1131;
  std::__shared_weak_count *v1132;
  std::string *v1133;
  std::__shared_weak_count *v1134;
  uint64_t v1135;
  std::__shared_weak_count *v1136;
  const std::string *v1137[2];
  std::string *v1138[2];
  _QWORD v1139[2];
  _QWORD v1140[6];
  CFRange v1141;
  const std::string *v1142;
  std::__shared_weak_count *v1143;
  std::string *v1144;
  std::__shared_weak_count *v1145;
  uint64_t v1146;
  std::__shared_weak_count *v1147;
  const std::string *v1148;
  std::__shared_weak_count *v1149;
  std::string *v1150;
  std::__shared_weak_count *v1151;
  uint64_t v1152;
  std::__shared_weak_count *v1153;
  const std::string *v1154;
  std::__shared_weak_count *v1155;
  std::string *v1156;
  std::__shared_weak_count *v1157;
  uint64_t v1158;
  std::__shared_weak_count *v1159;
  void *v1160[2];
  char v1161;
  const std::string *v1162;
  std::__shared_weak_count *v1163;
  std::string *v1164;
  std::__shared_weak_count *v1165;
  uint64_t v1166;
  std::__shared_weak_count *v1167;
  const std::string *v1168;
  std::__shared_weak_count *v1169;
  std::string *v1170;
  std::__shared_weak_count *v1171;
  uint64_t v1172;
  std::__shared_weak_count *v1173;
  void *v1174[2];
  char v1175;
  const std::string *v1176;
  std::__shared_weak_count *v1177;
  std::string *v1178;
  std::__shared_weak_count *v1179;
  uint64_t v1180;
  std::__shared_weak_count *v1181;
  const std::string *v1182;
  std::__shared_weak_count *v1183;
  std::string *v1184;
  std::__shared_weak_count *v1185;
  uint64_t v1186;
  std::__shared_weak_count *v1187;
  void *__p[2];
  char v1189;
  const std::string *v1190;
  std::__shared_weak_count *v1191;
  std::string *v1192;
  std::__shared_weak_count *v1193;
  uint64_t v1194;
  std::__shared_weak_count *v1195;
  const std::string *v1196;
  std::__shared_weak_count *v1197;
  std::string *v1198;
  std::__shared_weak_count *v1199;
  uint64_t v1200;
  std::__shared_weak_count *v1201;
  const std::string *v1202;
  std::__shared_weak_count *v1203;
  std::string *v1204;
  std::__shared_weak_count *v1205;
  uint64_t v1206;
  std::__shared_weak_count *v1207;
  const std::string *v1208;
  std::__shared_weak_count *v1209;
  std::string *v1210;
  std::__shared_weak_count *v1211;
  uint64_t v1212;
  std::__shared_weak_count *v1213;
  const std::string *v1214[2];
  std::string *v1215[2];
  _QWORD v1216[2];
  const std::string *v1217[2];
  std::string *v1218[2];
  _QWORD v1219[2];
  const std::string *v1220[2];
  std::string *v1221[2];
  _QWORD v1222[2];
  const std::string *v1223[2];
  std::string *v1224[2];
  _QWORD v1225[2];
  const std::string *v1226[2];
  std::string *v1227[2];
  _QWORD v1228[2];
  const std::string *v1229[2];
  std::string *v1230[2];
  _QWORD v1231[2];
  const std::string *v1232;
  std::__shared_weak_count *v1233;
  std::string *v1234;
  std::__shared_weak_count *v1235;
  uint64_t v1236;
  std::__shared_weak_count *v1237;
  const std::string *v1238;
  std::__shared_weak_count *v1239;
  std::string *v1240;
  std::__shared_weak_count *v1241;
  uint64_t v1242;
  std::__shared_weak_count *v1243;
  uint64_t v1244[2];
  _QWORD v1245[2];
  uint64_t v1246[2];
  _QWORD v1247[2];
  uint64_t v1248[2];
  _QWORD v1249[2];
  uint64_t v1250[2];
  _QWORD v1251[2];
  uint64_t v1252[2];
  _QWORD v1253[2];
  uint64_t v1254[2];
  _QWORD v1255[2];
  uint64_t v1256[2];
  _QWORD v1257[2];
  uint64_t v1258[2];
  _QWORD v1259[2];
  const std::string *v1260[2];
  std::string *v1261[2];
  _QWORD v1262[2];
  __int128 v1263;
  _QWORD v1264[8];
  char v1265;
  char v1266[15];
  char v1267;
  char v1268[7];
  id v1269;
  _QWORD v1270[2];
  char v1271;
  char v1272[15];
  __int128 v1273;
  __int128 v1274;
  __int128 v1275;
  __int128 v1276;
  CFRange buf;
  __int128 v1278;
  __int128 v1279;
  __int128 v1280;
  __int128 v1281;
  uint64_t v1282;
  std::__shared_weak_count *v1283;
  __int128 v1284;
  __int128 v1285;
  __int128 v1286;
  __int128 v1287;
  void *v1288;
  void *v1289;
  uint64_t v1290;
  uint64_t v1291;
  _QWORD v1292[7];
  uint64_t v1293;
  uint64_t v1294;
  void *v1295;
  void *v1296;
  void *v1297;
  void *v1298;
  id v1299;
  void *v1300;
  void *v1301;
  uint8_t v1302[4];
  int v1303;
  void *v1304;
  _BYTE v1305[128];
  int64x2_t v1306;
  _QWORD v1307[2];
  _BYTE v1308[128];
  _BYTE v1309[24];
  uint64_t (*v1310)(uint64_t, uint64_t);
  void (*v1311)(uint64_t);
  id v1312;
  __int128 __s;
  __int128 v1314;
  __int128 v1315;
  __int128 v1316;
  _BYTE v1317[72];
  std::__shared_weak_count *v1318;
  uint64_t v1319;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v979 = v2;
  v3 = v1;
  v1319 = *MEMORY[0x24BDAC8D0];
  memset(&v1317[4], 0, 48);
  v4 = *(_OWORD *)&v1317[16];
  *(_OWORD *)(v1 + 4) = *(_OWORD *)v1317;
  *(_DWORD *)v1 = 0;
  *(_OWORD *)(v1 + 20) = v4;
  *(_OWORD *)(v1 + 36) = *(_OWORD *)&v1317[32];
  *(_DWORD *)(v1 + 52) = *(_DWORD *)&v1317[48];
  v5 = (std::string *)(v1 + 56);
  if (*(char *)(v1 + 79) < 0)
    operator delete(v5->__r_.__value_.__l.__data_);
  v5->__r_.__value_.__r.__words[0] = 0;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v981 = mach_absolute_time();
  v6 = *(const __CFString **)(v3 + 152);
  v986 = (const void **)(v3 + 152);
  if (v6)
  {
    v7 = *(const __CFString **)(*(_QWORD *)(v3 + 96) + 440);
    if (v7)
    {
      if (CFStringsAreEqual(v6, v7) && !*(_BYTE *)(*(_QWORD *)(v3 + 80) + 36))
        return;
    }
  }
  QP::U2Parser::clear((const void **)v3);
  nlp::CFScopedPtr<__CFString const*>::reset(v986, 0);
  v8 = *(const void **)(*(_QWORD *)(v3 + 96) + 440);
  if (v8)
  {
    v9 = CFRetain(v8);
    nlp::CFScopedPtr<__CFString const*>::reset(v986, v9);
  }
  v10 = (QP *)*(id *)(*(_QWORD *)(v3 + 80) + 104);
  v992 = v10;
  if (!v10)
  {
    *(_DWORD *)v3 = 2;
    if (*(char *)(v3 + 79) < 0)
    {
      *(_QWORD *)(v3 + 64) = 13;
      v5 = *(std::string **)(v3 + 56);
    }
    else
    {
      *(_BYTE *)(v3 + 79) = 13;
    }
    strcpy((char *)v5, "no locale set");
    if (u2ParserLogger(void)::token != -1)
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
    if (os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_ERROR))
      QP::U2Parser::parseInternal();
    goto LABEL_1387;
  }
  if ((QP::isSupportedQULocale(v10, v11) & 1) == 0)
  {
    *(_DWORD *)v3 = 2;
    if (*(char *)(v3 + 79) < 0)
    {
      *(_QWORD *)(v3 + 64) = 18;
      v5 = *(std::string **)(v3 + 56);
    }
    else
    {
      *(_BYTE *)(v3 + 79) = 18;
    }
    strcpy((char *)v5, "unsupported locale");
    if (u2ParserLogger(void)::token != -1)
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
    v18 = u2ParserLogger(void)::log;
    if (os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v1317 = 0;
      _os_log_impl(&dword_218E10000, v18, OS_LOG_TYPE_DEFAULT, "[QPNLU] Unsupported locale", v1317, 2u);
    }
    goto LABEL_1387;
  }
  v983 = (QP::U2Parser *)v3;
  v967 = v5;
  if (u2ParserLogger(void)::token != -1)
    dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
  v12 = (id)u2ParserLogger(void)::log;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    QP::U2Parser::parseInternal();

  v13 = *((_QWORD *)v983 + 10);
  v14 = *(_QWORD *)(v13 + 8);
  v961 = v14;
  v16 = v14 != 13 && v14 != 9;
  v960 = v16;
  v17 = (const __CFString *)*((_QWORD *)v983 + 19);
  if (v17)
  {
    Length = CFStringGetLength(v17);
    v13 = *((_QWORD *)v983 + 10);
  }
  else
  {
    Length = 0;
  }
  if (*(_BYTE *)(v13 + 34))
  {
    v19 = 0xFFFFFFFFLL;
  }
  else
  {
    v19 = *(unsigned int *)(v13 + 44);
    if (!(_DWORD)v19)
    {
      if (Length <= 2)
        v19 = 0;
      else
        v19 = 150;
    }
  }
  objc_msgSend(MEMORY[0x24BE7BEA8], "sharedInstance");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "getModelForLocale:withTimeoutMS:", v992, v19);
  v975 = (void *)objc_claimAutoreleasedReturnValue();

  v21 = mach_absolute_time();
  if (QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::onceToken != -1)
    dispatch_once(&QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::onceToken, &__block_literal_global_183);
  v22 = (v21 - v981)
      * QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::sTimebaseInfo
      / *(unsigned int *)algn_253D1B614;
  *((_QWORD *)v983 + 2) = v22;
  if (!v975)
  {
    *(_DWORD *)v983 = 2;
    objc_msgSend(MEMORY[0x24BE7BEA8], "sharedInstance");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "loadError");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "description");
    v27 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v28 = objc_msgSend(v27, "UTF8String");
    if (v28)
      v29 = (const std::string::value_type *)v28;
    else
      v29 = "timeout";
    std::string::__assign_external(v967, v29);

    if (u2ParserLogger(void)::token != -1)
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
    v30 = (id)u2ParserLogger(void)::log;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      -[QP localeIdentifier](v992, "localeIdentifier");
      v170 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BE7BEA8], "sharedInstance");
      v171 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v171, "loadError");
      v172 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v1317 = 138412802;
      *(_QWORD *)&v1317[4] = v170;
      *(_WORD *)&v1317[12] = 1024;
      *(_DWORD *)&v1317[14] = v19;
      *(_WORD *)&v1317[18] = 2112;
      *(_QWORD *)&v1317[20] = v172;
      _os_log_error_impl(&dword_218E10000, v30, OS_LOG_TYPE_ERROR, "[QPNLU] Unable to load %@ U2 model with timeout:%dms lastError:%@", v1317, 0x1Cu);

    }
    goto LABEL_1386;
  }
  if (!Length)
  {
    *(_DWORD *)v983 = 1;
    if (u2ParserLogger(void)::token != -1)
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
    v23 = u2ParserLogger(void)::log;
    if (!os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_INFO))
      goto LABEL_1386;
    *(_WORD *)v1317 = 0;
    v24 = "[QPNLU] Skipping parse for empty input";
LABEL_65:
    _os_log_impl(&dword_218E10000, v23, OS_LOG_TYPE_INFO, v24, v1317, 2u);
    goto LABEL_1386;
  }
  if (QP::Lexer::containsLegacyQuerySyntax(*((QP::Lexer **)v983 + 12)))
  {
    *(_DWORD *)v983 = 1;
    if (u2ParserLogger(void)::token != -1)
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
    v23 = u2ParserLogger(void)::log;
    if (!os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_INFO))
      goto LABEL_1386;
    *(_WORD *)v1317 = 0;
    v24 = "[QPNLU] Skipping parse for legacy query syntax input";
    goto LABEL_65;
  }
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v959 = objc_alloc_init(MEMORY[0x24BE7BEB0]);
  v32 = *((_QWORD *)v983 + 10);
  v946 = v22;
  if (*(_BYTE *)(v32 + 56) || *(_BYTE *)(v32 + 59))
  {
    v33 = mach_absolute_time();
    v34 = (void *)*((_QWORD *)v983 + 19);
    v36 = *((_QWORD *)v983 + 10);
    v35 = (std::__shared_weak_count *)*((_QWORD *)v983 + 11);
    v1282 = v36;
    v1283 = v35;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v38 = __ldxr(p_shared_owners);
      while (__stxr(v38 + 1, p_shared_owners));
    }
    v39 = v34;
    *(_QWORD *)v1309 = 0;
    *(_QWORD *)&v1309[8] = v1309;
    *(_QWORD *)&v1309[16] = 0x3032000000;
    v1310 = __Block_byref_object_copy__184;
    v1311 = __Block_byref_object_dispose__185;
    v1312 = 0;
    *(_QWORD *)&v1284 = 0;
    *((_QWORD *)&v1284 + 1) = &v1284;
    *(_QWORD *)&v1285 = 0x3032000000;
    *((_QWORD *)&v1285 + 1) = __Block_byref_object_copy__184;
    *(_QWORD *)&v1286 = __Block_byref_object_dispose__185;
    *((_QWORD *)&v1286 + 1) = 0;
    v973 = v33;
    if (u2ParserLogger(void)::token != -1)
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
    v40 = (id)u2ParserLogger(void)::log;
    if (u2ParserLogger(void)::token != -1)
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
    v41 = os_signpost_id_make_with_pointer((os_log_t)u2ParserLogger(void)::log, v39);
    if (v41 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v42 = v41;
      if (os_signpost_enabled(v40))
      {
        *(_WORD *)v1317 = 0;
        _os_signpost_emit_with_name_impl(&dword_218E10000, v40, OS_SIGNPOST_INTERVAL_BEGIN, v42, "U2Parser.ECR", "", v1317, 2u);
      }
    }

    v43 = dispatch_semaphore_create(0);
    v44 = qos_class_self();
    dispatch_get_global_queue(v44, 0);
    v45 = objc_claimAutoreleasedReturnValue();
    *(_QWORD *)v1317 = MEMORY[0x24BDAC760];
    *(_QWORD *)&v1317[8] = 3321888768;
    *(_QWORD *)&v1317[16] = ___ZN2QPL31allVisualIdentifiersWithTimeoutEP8NSStringNSt3__110shared_ptrINS_19ParserConfigurationEEEPU15__autoreleasingP7NSError_block_invoke;
    *(_QWORD *)&v1317[24] = &unk_24DA25E68;
    *(_QWORD *)&v1317[64] = v36;
    v1318 = v35;
    if (v35)
    {
      v46 = (unint64_t *)&v35->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    *(_QWORD *)&v1317[48] = v1309;
    v48 = v39;
    *(_QWORD *)&v1317[32] = v48;
    *(_QWORD *)&v1317[56] = &v1284;
    v49 = v43;
    *(_QWORD *)&v1317[40] = v49;
    dispatch_async(v45, v1317);

    if (*(_BYTE *)(v36 + 34))
      v50 = -1;
    else
      v50 = dispatch_time(0, 200000000);
    if (dispatch_semaphore_wait(v49, v50))
    {
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("ECR timed out after %dms"), 200);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      v52 = (void *)MEMORY[0x24BDD1540];
      v1306.i64[0] = *MEMORY[0x24BDD0FC8];
      *(_QWORD *)&__s = v51;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &__s, &v1306, 1);
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v52, "errorWithDomain:code:userInfo:", CFSTR("com.apple.QueryParser.QueryUnderstandingError"), -2002, v53);
      v54 = objc_claimAutoreleasedReturnValue();
      v55 = *(void **)(*((_QWORD *)&v1284 + 1) + 40);
      *(_QWORD *)(*((_QWORD *)&v1284 + 1) + 40) = v54;

    }
    v56 = objc_retainAutorelease(*(id *)(*((_QWORD *)&v1284 + 1) + 40));
    if (u2ParserLogger(void)::token != -1)
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
    v57 = (id)u2ParserLogger(void)::log;
    if (u2ParserLogger(void)::token != -1)
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
    v58 = os_signpost_id_make_with_pointer((os_log_t)u2ParserLogger(void)::log, v48);
    if (v58 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v59 = v58;
      if (os_signpost_enabled(v57))
      {
        LOWORD(buf.location) = 0;
        _os_signpost_emit_with_name_impl(&dword_218E10000, v57, OS_SIGNPOST_INTERVAL_END, v59, "U2Parser.ECR", "", (uint8_t *)&buf, 2u);
      }
    }

    v60 = *(id *)(*(_QWORD *)&v1309[8] + 40);
    v61 = v1318;
    if (v1318)
    {
      v62 = (unint64_t *)&v1318->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }

    _Block_object_dispose(&v1284, 8);
    _Block_object_dispose(v1309, 8);

    ptr = v56;
    v993 = (void *)objc_msgSend(v60, "mutableCopy");

    v64 = v1283;
    if (v1283)
    {
      v65 = (unint64_t *)&v1283->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v971 = mach_absolute_time();
    if (QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::onceToken != -1)
      dispatch_once(&QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::onceToken, &__block_literal_global_183);
    v963 = QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::sTimebaseInfo;
    v968 = *(unsigned int *)algn_253D1B614;
    if (ptr)
    {
      if (u2ParserLogger(void)::token != -1)
        dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
      v67 = (id)u2ParserLogger(void)::log;
      if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
        QP::U2Parser::parseInternal((uint64_t)ptr, v67, v68, v69, v70, v71, v72, v73);

      v950 = 1;
    }
    else
    {
      v950 = 0;
    }
    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v989 = (void *)objc_claimAutoreleasedReturnValue();
    v1280 = 0u;
    v1281 = 0u;
    v1278 = 0u;
    v1279 = 0u;
    objc_msgSend(v993, "allKeys");
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    obj = v74;
    v75 = objc_msgSend(v74, "countByEnumeratingWithState:objects:count:", &v1278, v1308, 16);
    if (v75)
    {
      v987 = *(_QWORD *)v1279;
      do
      {
        for (i = 0; i != v75; ++i)
        {
          if (*(_QWORD *)v1279 != v987)
            objc_enumerationMutation(obj);
          v77 = *(_QWORD *)(*((_QWORD *)&v1278 + 1) + 8 * i);
          objc_msgSend(v993, "objectForKeyedSubscript:", v77);
          v78 = (void *)objc_claimAutoreleasedReturnValue();
          v79 = objc_msgSend(v78, "count") == 0;

          if (!v79)
          {
            v80 = (id)*v986;
            v81 = 0;
            do
            {
              v83 = objc_msgSend(v80, "rangeOfString:options:range:locale:", v77, 129, v81, objc_msgSend(v80, "length") - v81, v992);
              if (v83 == 0x7FFFFFFFFFFFFFFFLL)
                break;
              v84 = v82;
              objc_msgSend(v80, "substringWithRange:", v83, v82);
              v85 = (QP *)objc_claimAutoreleasedReturnValue();
              if (QP::isAllowedPeopleSpanToken(v85, v86))
              {
                objc_msgSend(MEMORY[0x24BDD1968], "valueWithRange:", v83, v84);
                v87 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v989, "addObject:", v87);

              }
              if ((-[QP isEqualToString:](v85, "isEqualToString:", v77) & 1) == 0)
              {
                objc_msgSend(v993, "objectForKeyedSubscript:", v77);
                v88 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v993, "setObject:forKeyedSubscript:", v88, v85);

              }
              v81 += v84 + v83;
            }
            while (v81 < objc_msgSend(v80, "length"));

          }
        }
        v74 = obj;
        v75 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v1278, v1308, 16);
      }
      while (v75);
    }

    v89 = *((_QWORD *)v983 + 10);
    if (*(_QWORD *)(v89 + 232) || !*(_BYTE *)(v89 + 56))
    {
      PeopleNameRangesFromPersonLexemes = QP::U2Parser::createPeopleNameRangesFromPersonLexemes(v983);
      objc_msgSend(v959, "setPeopleNameRanges:", PeopleNameRangesFromPersonLexemes);
      CFRelease(PeopleNameRangesFromPersonLexemes);
    }
    else
    {
      objc_msgSend(v959, "setPeopleNameRanges:", v989);
    }

    v953 = 1;
    v952 = (v971 - v973) * v963 / v968;
  }
  else
  {
    v131 = QP::U2Parser::createPeopleNameRangesFromPersonLexemes(v983);
    LocationNameRangesFromLocationLexemes = QP::U2Parser::createLocationNameRangesFromLocationLexemes(v983);
    objc_msgSend(v959, "setPeopleNameRanges:", v131);
    objc_msgSend(v959, "setLocationNameRanges:", LocationNameRangesFromLocationLexemes);
    CFRelease(v131);
    CFRelease(LocationNameRangesFromLocationLexemes);
    v950 = 0;
    v953 = 0;
    v952 = 0;
    v993 = v31;
  }
  v91 = (id)*v986;
  v92 = v959;
  objc_msgSend(MEMORY[0x24BDD16A8], "string");
  v93 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v93, "appendFormat:", CFSTR("People names:\n"));
  objc_msgSend(v92, "peopleNameRanges");
  v94 = (void *)objc_claimAutoreleasedReturnValue();
  v95 = objc_msgSend(v94, "count") == 0;

  if (v95)
  {
    objc_msgSend(v93, "appendFormat:", CFSTR("  none\n"));
  }
  else
  {
    v1286 = 0u;
    v1287 = 0u;
    v1284 = 0u;
    v1285 = 0u;
    objc_msgSend(v92, "peopleNameRanges");
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    v97 = objc_msgSend(v96, "countByEnumeratingWithState:objects:count:", &v1284, v1317, 16);
    if (v97)
    {
      v98 = *(_QWORD *)v1285;
      do
      {
        for (j = 0; j != v97; ++j)
        {
          if (*(_QWORD *)v1285 != v98)
            objc_enumerationMutation(v96);
          v100 = *(void **)(*((_QWORD *)&v1284 + 1) + 8 * j);
          objc_msgSend(v100, "rangeValue");
          objc_msgSend(v93, "appendFormat:", CFSTR("  %@\n"), v100);
        }
        v97 = objc_msgSend(v96, "countByEnumeratingWithState:objects:count:", &v1284, v1317, 16);
      }
      while (v97);
    }

  }
  objc_msgSend(v93, "appendFormat:", CFSTR("Location names:\n"));
  objc_msgSend(v92, "locationNameRanges");
  v101 = (void *)objc_claimAutoreleasedReturnValue();
  v102 = objc_msgSend(v101, "count") == 0;

  if (v102)
  {
    objc_msgSend(v93, "appendFormat:", CFSTR("  none\n"));
  }
  else
  {
    v1315 = 0u;
    v1316 = 0u;
    __s = 0u;
    v1314 = 0u;
    objc_msgSend(v92, "locationNameRanges");
    v103 = (void *)objc_claimAutoreleasedReturnValue();
    v104 = objc_msgSend(v103, "countByEnumeratingWithState:objects:count:", &__s, v1309, 16);
    if (v104)
    {
      v105 = *(_QWORD *)v1314;
      do
      {
        for (k = 0; k != v104; ++k)
        {
          if (*(_QWORD *)v1314 != v105)
            objc_enumerationMutation(v103);
          v107 = objc_msgSend(*(id *)(*((_QWORD *)&__s + 1) + 8 * k), "rangeValue");
          objc_msgSend(v91, "substringWithRange:", v107, v108);
          v109 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v93, "appendFormat:", CFSTR("  %@\n"), v109);

        }
        v104 = objc_msgSend(v103, "countByEnumeratingWithState:objects:count:", &__s, v1309, 16);
      }
      while (v104);
    }

  }
  if (u2ParserLogger(void)::token != -1)
    dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
  v110 = (id)u2ParserLogger(void)::log;
  if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v1317 = 138412290;
    *(_QWORD *)&v1317[4] = v93;
    _os_log_impl(&dword_218E10000, v110, OS_LOG_TYPE_DEFAULT, "[QPNLU] QU model input spans\n%@", v1317, 0xCu);
  }

  if (u2ParserLogger(void)::token != -1)
    dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
  v111 = (id)u2ParserLogger(void)::log;
  if (u2ParserLogger(void)::token != -1)
    dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
  v112 = (id)u2ParserLogger(void)::log;
  v113 = os_signpost_id_make_with_pointer(v112, *(const void **)(*((_QWORD *)v983 + 12) + 440));

  if (v113 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v111))
  {
    *(_WORD *)v1317 = 0;
    _os_signpost_emit_with_name_impl(&dword_218E10000, v111, OS_SIGNPOST_INTERVAL_BEGIN, v113, "U2Parser.inference", "", v1317, 2u);
  }

  v114 = *((_QWORD *)v983 + 19);
  v115 = *((_QWORD *)v983 + 10);
  v116 = *(unsigned __int8 *)(v115 + 35);
  v117 = *(_DWORD *)(v115 + 44);
  *(_QWORD *)v1309 = 0;
  *(_QWORD *)&v1309[8] = v1309;
  *(_QWORD *)&v1309[16] = 0x3032000000;
  v1310 = __Block_byref_object_copy__184;
  v1311 = __Block_byref_object_dispose__185;
  v1312 = 0;
  *(_QWORD *)&v1284 = 0;
  *((_QWORD *)&v1284 + 1) = &v1284;
  *(_QWORD *)&v1285 = 0x3032000000;
  *((_QWORD *)&v1285 + 1) = __Block_byref_object_copy__184;
  *(_QWORD *)&v1286 = __Block_byref_object_dispose__185;
  *((_QWORD *)&v1286 + 1) = 0;
  v118 = v92;
  v119 = v975;
  v120 = dispatch_group_create();
  dispatch_group_enter(v120);
  *(_QWORD *)v1317 = MEMORY[0x24BDAC760];
  *(_QWORD *)&v1317[8] = 3221225472;
  *(_QWORD *)&v1317[16] = ___ZN2QPL26u2UnderstandingWithTimeoutEPU31objcproto20QUUnderstandingModel11objc_objectPK10__CFStringP7QUSpansbjPU15__autoreleasingP7NSError_block_invoke;
  *(_QWORD *)&v1317[24] = &unk_24DA25EA0;
  *(_QWORD *)&v1317[40] = &v1284;
  *(_QWORD *)&v1317[48] = v1309;
  v121 = v120;
  *(_QWORD *)&v1317[32] = v121;
  objc_msgSend(v119, "getUnderstandingForQueryString:spans:withCompletionHandler:", v114, v118, v1317);
  v947 = v118;

  if (v117)
    v122 = v117;
  else
    v122 = 100;
  v123 = dispatch_time(0, 1000000 * v122);
  if (v116)
    v124 = -1;
  else
    v124 = v123;
  if (dispatch_group_wait(v121, v124))
  {
    if (u2ParserLogger(void)::token != -1)
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
    if (os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_ERROR))
      QP::U2Parser::parseInternal();
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.QueryParser.QueryUnderstandingError"), -2001, 0);
    v125 = (id)objc_claimAutoreleasedReturnValue();
    do
      v126 = __ldaxr((unsigned int *)&QP::sQUInferenceTimeoutCount);
    while (__stlxr(v126 + 1, (unsigned int *)&QP::sQUInferenceTimeoutCount));
    if (v126 == 25)
    {
      if (u2ParserLogger(void)::token != -1)
        dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
      v127 = u2ParserLogger(void)::log;
      if (os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_FAULT))
        QP::U2Parser::parseInternal(v127, v128, v129);
    }
  }
  else
  {
    v130 = *(void **)(*((_QWORD *)&v1284 + 1) + 40);
    if (v130)
      v125 = objc_retainAutorelease(v130);
    else
      v125 = 0;
  }
  v988 = *(id *)(*(_QWORD *)&v1309[8] + 40);

  _Block_object_dispose(&v1284, 8);
  _Block_object_dispose(v1309, 8);

  v133 = v125;
  if (u2ParserLogger(void)::token != -1)
    dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
  v134 = (id)u2ParserLogger(void)::log;
  if (u2ParserLogger(void)::token != -1)
    dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
  v135 = (id)u2ParserLogger(void)::log;
  v136 = os_signpost_id_make_with_pointer(v135, *(const void **)(*((_QWORD *)v983 + 12) + 440));

  if (v136 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v134))
  {
    *(_WORD *)v1317 = 0;
    _os_signpost_emit_with_name_impl(&dword_218E10000, v134, OS_SIGNPOST_INTERVAL_END, v136, "U2Parser.inference", "", v1317, 2u);
  }

  if (!v988)
  {
    *(_DWORD *)v983 = 3;
    objc_msgSend(v133, "description");
    v159 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v160 = objc_msgSend(v159, "UTF8String");
    if (v160)
      v161 = (const std::string::value_type *)v160;
    else
      v161 = "timeout";
    std::string::__assign_external(v967, v161);

    if (u2ParserLogger(void)::token != -1)
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
    v162 = (id)u2ParserLogger(void)::log;
    if (os_log_type_enabled(v162, OS_LOG_TYPE_ERROR))
      QP::U2Parser::parseInternal();

    objc_msgSend(v133, "domain");
    v163 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v163, "isEqualToString:", CFSTR("com.apple.QueryParser.QueryUnderstandingError")))
    {
      v164 = objc_msgSend(v133, "code") == -2001;

      v165 = 0;
      if (v164)
        goto LABEL_1385;
    }
    else
    {

    }
    objc_msgSend(MEMORY[0x24BE7BEA8], "sharedInstance");
    v167 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v167, "releaseModel");

    objc_msgSend(MEMORY[0x24BE7BEA8], "sharedInstance");
    v168 = (void *)objc_claimAutoreleasedReturnValue();
    v169 = (id)objc_msgSend(v168, "getModelForLocale:withTimeoutMS:", v992, 0);

    goto LABEL_1384;
  }
  *((_QWORD *)v983 + 3) = objc_msgSend(v988, "predictionTime");
  *((_QWORD *)v983 + 5) = objc_msgSend(v988, "embeddingsTime");
  objc_msgSend(v988, "tokens");
  v137 = (void *)objc_claimAutoreleasedReturnValue();
  v138 = objc_msgSend(v137, "count");
  objc_msgSend(v988, "argIds");
  v139 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v138) = v138 == objc_msgSend(v139, "count");

  if ((v138 & 1) == 0)
  {
    *(_DWORD *)v983 = 4;
    if (*((char *)v983 + 79) < 0)
    {
      *((_QWORD *)v983 + 8) = 17;
      v166 = (char *)*((_QWORD *)v983 + 7);
    }
    else
    {
      *((_BYTE *)v983 + 79) = 17;
      v166 = (char *)v967;
    }
    strcpy(v166, "Invalid U2 output");
    u2ParserLogger();
    v173 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v173, OS_LOG_TYPE_ERROR))
      QP::U2Parser::parseInternal();

    goto LABEL_1384;
  }
  v1284 = 0uLL;
  *(_QWORD *)&v1285 = 0;
  alloc = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFStringRef)*v986, CFSTR(" "));
  objc_msgSend(v988, "intentId");
  v141 = (void *)objc_claimAutoreleasedReturnValue();
  theArray = ArrayBySeparatingStrings;
  v956 = objc_msgSend(v141, "intValue");

  v142 = (char *)intentLabel();
  std::string::basic_string[abi:ne180100]<0>(&__s, v142);
  objc_msgSend(v988, "safetyScore");
  v143 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v143, "floatValue");
  v145 = v144;

  objc_msgSend(v119, "modelMetadata");
  v146 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v146, "objectForKeyedSubscript:", CFSTR("safety_threshold"));
  v147 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v147, "floatValue");
  v940 = v148;

  v149 = (void *)MEMORY[0x24BDBCEB8];
  objc_msgSend(v988, "tokens");
  v150 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v149, "arrayWithCapacity:", objc_msgSend(v150, "count"));
  v957 = (void *)objc_claimAutoreleasedReturnValue();

  v1306 = 0uLL;
  v1307[0] = 0;
  objc_msgSend(v988, "tokens");
  v151 = (void *)objc_claimAutoreleasedReturnValue();
  v969 = objc_msgSend(v151, "count");

  cf = QP::U2Parser::createAnnotations(v983);
  v152 = v988;
  if (*(_BYTE *)(*((_QWORD *)v983 + 10) + 56))
  {
    if (v969 < 1)
      goto LABEL_1357;
    v153 = 0;
    while (1)
    {
      objc_msgSend(v152, "tokens");
      v154 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v154, "objectAtIndexedSubscript:", v153);
      v155 = (QP *)objc_claimAutoreleasedReturnValue();

      if (!QP::isAllowedPeopleSpanToken(v155, v156))
        break;
      objc_msgSend(v993, "objectForKeyedSubscript:", v155);
      v157 = (void *)objc_claimAutoreleasedReturnValue();
      v158 = objc_msgSend(v157, "count") == 0;

      if (v158)
        break;

      ++v153;
      v152 = v988;
      if (v969 == v153)
      {
        v943 = 1;
        goto LABEL_222;
      }
    }

    v943 = 0;
    v152 = v988;
  }
  else
  {
    v943 = 0;
  }
LABEL_222:
  if (v969 < 1)
  {
LABEL_1357:
    v942 = 0;
LABEL_1358:
    v916 = (__int128 *)v1306.i64[1];
    for (m = (__int128 *)v1306.i64[0]; m != v916; ++m)
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)&v1284, m);
    goto LABEL_1367;
  }
  v974 = 0;
  v941 = 0;
  v942 = 0;
  v990 = 0;
  v945 = 0;
  v937 = v956 & 0xFFFFFFFD;
  v948 = -1;
  v944 = -1;
  do
  {
    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    obja = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v988, "tokens");
    v174 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v174, "objectAtIndexedSubscript:", v990);
    ptra = (__CFString *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v988, "tokenRanges");
    v175 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v175, "objectAtIndexedSubscript:", v990);
    v962 = (void *)objc_claimAutoreleasedReturnValue();

    v176 = objc_msgSend(v962, "rangeValue");
    v178 = v176;
    buf.location = 0;
    if (v176 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v177 = 0;
      buf.location = -1;
    }
    else
    {
      buf.location = v176;
    }
    buf.length = v177;
    objc_msgSend(v988, "argIdsForTokens");
    v179 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v179, "objectAtIndexedSubscript:", v990);
    v180 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v180, "firstObject");
    v181 = (void *)objc_claimAutoreleasedReturnValue();
    v972 = objc_msgSend(v181, "intValue");

    objc_msgSend(obja, "setObject:forKeyedSubscript:", ptra, kQPQUOutputTokenKey);
    objc_msgSend(v988, "argIdsForTokens");
    v182 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v182, "objectAtIndexedSubscript:", v990);
    v183 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(obja, "setObject:forKeyedSubscript:", v183, kQPQUOutputTokenArgIdsKey);

    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v184 = (void *)objc_claimAutoreleasedReturnValue();
    v1275 = 0u;
    v1276 = 0u;
    v1273 = 0u;
    v1274 = 0u;
    objc_msgSend(v988, "argIdsForTokens");
    v185 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v185, "objectAtIndexedSubscript:", v990);
    v186 = (void *)objc_claimAutoreleasedReturnValue();

    v187 = objc_msgSend(v186, "countByEnumeratingWithState:objects:count:", &v1273, v1305, 16);
    if (v187)
    {
      v188 = *(_QWORD *)v1274;
      do
      {
        for (n = 0; n != v187; ++n)
        {
          if (*(_QWORD *)v1274 != v188)
            objc_enumerationMutation(v186);
          v190 = (void *)MEMORY[0x24BDD17C8];
          objc_msgSend(*(id *)(*((_QWORD *)&v1273 + 1) + 8 * n), "intValue");
          objc_msgSend(v190, "stringWithUTF8String:", intentArgLabel());
          v191 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v184, "addObject:", v191);

        }
        v187 = objc_msgSend(v186, "countByEnumeratingWithState:objects:count:", &v1273, v1305, 16);
      }
      while (v187);
    }

    v192 = (void *)objc_msgSend(v184, "copy");
    objc_msgSend(obja, "setObject:forKeyedSubscript:", v192, kQPQUOutputTokenArgLabelsKey);

    objc_msgSend(v988, "argScoresForTokens");
    v193 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v193, "objectAtIndexedSubscript:", v990);
    v194 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(obja, "setObject:forKeyedSubscript:", v194, kQPQUOutputTokenArgScoresKey);

    v195 = (QP::U2Parser *)objc_msgSend(obja, "setObject:forKeyedSubscript:", v962, kQPQUOutputTokenRangeKey);
    TokenOutputSpans = QP::U2Parser::createTokenOutputSpans(v195, cf, buf);
    objc_msgSend(obja, "setObject:forKeyedSubscript:", TokenOutputSpans, kQPQUOutputSpanTypesKey);
    CFRelease(TokenOutputSpans);
    if (v178 == 0x7FFFFFFFFFFFFFFFLL)
    {
      *(_DWORD *)v983 = 4;
      std::string::__assign_external(v967, "Token not found in user query", 0x1DuLL);
      if (u2ParserLogger(void)::token != -1)
        dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
      v917 = (id)u2ParserLogger(void)::log;
      if (os_log_type_enabled(v917, OS_LOG_TYPE_ERROR))
        QP::U2Parser::parseInternal();

      goto LABEL_1380;
    }
    if (v990 <= v948)
    {
      if (u2ParserLogger(void)::token != -1)
        dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
      v199 = (id)u2ParserLogger(void)::log;
      if (os_log_type_enabled(v199, OS_LOG_TYPE_DEBUG))
        QP::U2Parser::parseInternal(&v1271, v1272);

      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithLong:", v974 - 1);
      v200 = (void *)objc_claimAutoreleasedReturnValue();
      v1304 = v200;
      objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v1304, 1);
      v201 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(obja, "setObject:forKeyedSubscript:", v201, kQPQUOutputTokenAttributeIndexesKey);

      v202 = (void *)objc_msgSend(obja, "copy");
      objc_msgSend(v957, "addObject:", v202);

      goto LABEL_1355;
    }
    if (!QP::isSupportedECRLocale(v992, v197))
    {
LABEL_268:
      v951 = 0;
      v955 = 0;
      v958 = 0;
      v949 = 0;
      goto LABEL_269;
    }
    if ((QP::tokenHasArgIdWithScore(v988, v990, 2, 0.3) & 1) != 0
      || (QP::tokenHasArgIdWithScore(v988, v990, 3, 0.3) & 1) != 0)
    {
      HasArgIdWithScore = 1;
    }
    else
    {
      HasArgIdWithScore = QP::tokenHasArgIdWithScore(v988, v990, 4, 0.3);
    }
    if (*(_BYTE *)(*((_QWORD *)v983 + 10) + 58))
      v203 = QP::tokenHasArgIdWithScore(v988, v990, 6, 0.3);
    else
      v203 = 0;
    v204 = 0;
    if (((HasArgIdWithScore | v203) & 1) == 0 && v990 == v969 - 1)
    {
      +[QPEntityResolutionPrefixCache sharedCache](QPEntityResolutionPrefixCache, "sharedCache");
      v205 = (void *)objc_claimAutoreleasedReturnValue();
      v204 = objc_msgSend(v205, "hasPreviouslyGroundedPrefixOfToken:", ptra);

    }
    objc_msgSend(v993, "objectForKeyedSubscript:", ptra);
    v206 = (void *)objc_claimAutoreleasedReturnValue();

    if ((v943 & 1) != 0 || (v207 = *((_QWORD *)v983 + 10), *(_BYTE *)(v207 + 59)))
    {
      if (v206)
        v208 = 1;
      else
        v208 = v203;
      if ((v208 | HasArgIdWithScore | v204) != 1)
        goto LABEL_268;
      v207 = *((_QWORD *)v983 + 10);
    }
    else if ((v203 | HasArgIdWithScore | v204) != 1)
    {
      goto LABEL_268;
    }
    v209 = *(_BYTE *)(v207 + 58) == 0;
    v210 = v203 ^ 1;
    if (v209)
      v210 = 1;
    if (v210 | HasArgIdWithScore)
      v211 = v209;
    else
      v211 = 2;
    if (v206)
    {
      objc_msgSend(v993, "objectForKeyedSubscript:", ptra);
      v958 = (__CFDictionary *)objc_claimAutoreleasedReturnValue();
      v951 = 0;
      v955 = 0;
      v212 = 0;
      v213 = -[__CFDictionary count](v958, "count");
    }
    else
    {
      u2ParserLogger();
      v245 = objc_claimAutoreleasedReturnValue();
      u2ParserLogger();
      v246 = objc_claimAutoreleasedReturnValue();
      v247 = os_signpost_id_make_with_pointer(v246, ptra);

      if (v247 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v245))
      {
        *(_WORD *)v1317 = 0;
        _os_signpost_emit_with_name_impl(&dword_218E10000, v245, OS_SIGNPOST_INTERVAL_BEGIN, v247, "U2Parser.ECR", "", v1317, 2u);
      }

      v248 = mach_absolute_time();
      v249 = *((_QWORD *)v983 + 11);
      v1270[0] = *((_QWORD *)v983 + 10);
      v1270[1] = v249;
      if (v249)
      {
        v250 = (unint64_t *)(v249 + 8);
        do
          v251 = __ldxr(v250);
        while (__stxr(v251 + 1, v250));
      }
      v1269 = 0;
      QP::visualIdentifiersWithTimeout(ptra, v211, v960, v1270, &v1269);
      v212 = (void *)objc_claimAutoreleasedReturnValue();
      v965 = v1269;
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1270);
      if (v212)
      {
        objc_msgSend(v212, "objectForKey:", CFSTR("visualIdentifier"));
        v252 = objc_claimAutoreleasedReturnValue();
        objc_msgSend(v212, "objectForKey:", CFSTR("personNames"));
        v253 = objc_claimAutoreleasedReturnValue();
        objc_msgSend(v212, "objectForKey:", CFSTR("personEmails"));
        v951 = (__CFArray *)objc_claimAutoreleasedReturnValue();
        v955 = (__CFArray *)v253;
        v958 = (__CFDictionary *)v252;
      }
      else
      {
        v951 = 0;
        v955 = 0;
        v958 = 0;
      }
      v269 = QPTimingNanosecondsSinceAbsoluteTime(v248);
      u2ParserLogger();
      v270 = objc_claimAutoreleasedReturnValue();
      u2ParserLogger();
      v271 = objc_claimAutoreleasedReturnValue();
      v272 = os_signpost_id_make_with_pointer(v271, ptra);

      if (v272 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v270))
      {
        *(_WORD *)v1317 = 0;
        _os_signpost_emit_with_name_impl(&dword_218E10000, v270, OS_SIGNPOST_INTERVAL_END, v272, "U2Parser.ECR", "", v1317, 2u);
      }

      if (v965)
      {
        u2ParserLogger();
        v273 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v273, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v1317 = 138412290;
          *(_QWORD *)&v1317[4] = v965;
          _os_log_error_impl(&dword_218E10000, v273, OS_LOG_TYPE_ERROR, "[QPNLU] Unable to lookup visual identifiers: %@", v1317, 0xCu);
        }

        ++v950;
        do
          v274 = __ldaxr((unsigned int *)&QP::sQUECRErrorCount);
        while (__stlxr(v274 + 1, (unsigned int *)&QP::sQUECRErrorCount));
        if (v274 == 25)
        {
          u2ParserLogger();
          v275 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v275, OS_LOG_TYPE_FAULT))
            QP::U2Parser::parseInternal(v1302, &v1303, v275);

        }
      }

      ++v953;
      v952 += v269;
      v213 = -[__CFDictionary count](v958, "count");
    }
    v949 = v212;
    if (!v213 && !-[__CFArray count](v955, "count"))
    {
      if ((v204 & 1) == 0)
        goto LABEL_269;
      u2ParserLogger();
      v282 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v282, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v1317 = 138412290;
        *(_QWORD *)&v1317[4] = ptra;
        _os_log_debug_impl(&dword_218E10000, v282, OS_LOG_TYPE_DEBUG, "[QPNLU] Not boosting ARG_PERSON labeling for %@", v1317, 0xCu);
      }
      goto LABEL_361;
    }
    objc_msgSend(v993, "setObject:forKeyedSubscript:", v958, ptra);
    +[QPEntityResolutionPrefixCache sharedCache](QPEntityResolutionPrefixCache, "sharedCache");
    v276 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v276, "cacheGroundedToken:", ptra);

    u2ParserLogger();
    v277 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v277, OS_LOG_TYPE_DEBUG))
      QP::U2Parser::parseInternal(&v1267, v1268);

    if ((v204 & 1) != 0)
    {
      objc_msgSend(obja, "setObject:forKeyedSubscript:", &unk_24DA34C08, kQPQUOutputTokenArgIdsKey);
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", intentArgLabel());
      v278 = (void *)objc_claimAutoreleasedReturnValue();
      v1301 = v278;
      objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v1301, 1);
      v279 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(obja, "setObject:forKeyedSubscript:", v279, kQPQUOutputTokenArgLabelsKey);

      objc_msgSend(obja, "setObject:forKeyedSubscript:", &unk_24DA34C20, kQPQUOutputTokenArgScoresKey);
      objc_msgSend(v988, "argIds");
      v280 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v280, "objectAtIndexedSubscript:", v990);
      v281 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v281, "intValue");

      u2ParserLogger();
      v282 = objc_claimAutoreleasedReturnValue();
      v942 = 1;
      if (os_log_type_enabled(v282, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", intentArgLabel());
        v283 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v1317 = 138412546;
        *(_QWORD *)&v1317[4] = ptra;
        *(_WORD *)&v1317[12] = 2112;
        *(_QWORD *)&v1317[14] = v283;
        _os_log_impl(&dword_218E10000, v282, OS_LOG_TYPE_INFO, "[QPNLU] boosting ARG_PERSON labeling for %@ originally labeled %@", v1317, 0x16u);

        v942 = 1;
      }
LABEL_361:

    }
LABEL_269:
    *((_QWORD *)v983 + 4) = v952;
    *((_DWORD *)v983 + 12) = v953;
    *((_DWORD *)v983 + 13) = v950;
    *(_QWORD *)v1317 = 0;
    *(_QWORD *)&v1317[8] = v1317;
    *(_QWORD *)&v1317[16] = 0x4012000000;
    *(_QWORD *)&v1317[24] = __Block_byref_object_copy__7;
    *(_QWORD *)&v1317[32] = __Block_byref_object_dispose__7;
    *(_QWORD *)&v1317[40] = &unk_218EB5CA1;
    *(_QWORD *)&v1317[48] = 0;
    *(_QWORD *)&v1317[56] = 0;
    if (!QP::tokenHasArgIdWithScore(v988, v990, 8, 0.2))
      goto LABEL_365;
    v214 = v990;
    if (v990 <= v944 + v945)
      v215 = v944;
    else
      v215 = v990;
    v216 = v990 + 1;
    if (v990 + 1 < v969)
    {
      do
      {
        if ((QP::tokenHasArgIdWithScore(v988, v216, 8, 0.2) & 1) == 0
          && !QP::tokenHasArgIdWithScore(v988, v216, 0, 0.97))
        {
          break;
        }
        ++v216;
      }
      while (v969 != v216);
      v214 = v216 - 1;
    }
    objc_msgSend(v988, "tokenRanges");
    v217 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v217, "objectAtIndexedSubscript:", v215);
    v218 = (void *)objc_claimAutoreleasedReturnValue();
    v219 = objc_msgSend(v218, "rangeValue");

    objc_msgSend(v988, "tokenRanges");
    v220 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v220, "objectAtIndexedSubscript:", v214);
    v221 = (void *)objc_claimAutoreleasedReturnValue();
    v222 = objc_msgSend(v221, "rangeValue");
    v224 = v223;

    if (v219 != -1)
    {
      v225 = *v979;
      if (*v979)
      {
        v1264[0] = MEMORY[0x24BDAC760];
        v1264[1] = 3221225472;
        v1264[2] = ___ZN2QP8U2Parser13parseInternalENSt3__110shared_ptrINS_5ParseEEE_block_invoke;
        v1264[3] = &unk_24DA25E00;
        v1264[6] = v219;
        v1264[7] = v224 - v219 + v222;
        v1264[5] = v983;
        v1264[4] = v1317;
        QP::Parse::enumerateParseAttributes(v225, (uint64_t)v1264);
      }
      v226 = *(CFRange **)(*(_QWORD *)&v1317[8] + 48);
      if (v226)
        goto LABEL_327;
      v227 = kQPParseAttributeKeywordKey;
      QP::Lexer::lexemeAtLocation(*((_QWORD *)v983 + 12), 0, v1309);
      v228 = *(_QWORD *)v1309;
      if (*(_QWORD *)v1309)
      {
        v964 = v227;
        v229 = 0;
        v230 = v224 + v222;
        while (1)
        {
          if (*(unsigned __int16 *)(v228 + 88) - 1 <= 3)
          {
            v231 = *(_QWORD *)(v228 + 72);
            v232 = *(_QWORD *)(v228 + 80) + v231;
            if (v219 <= v231 && v230 >= v232)
              break;
            if (v231 <= v219 && v232 >= v230)
              break;
          }
          QP::Lexer::lexemeAtLocation(*((_QWORD *)v983 + 12), ++v229, &v1263);
          v235 = v1263;
          v1263 = 0uLL;
          v236 = *(std::__shared_weak_count **)&v1309[8];
          *(_OWORD *)v1309 = v235;
          if (v236)
          {
            v237 = (unint64_t *)&v236->__shared_owners_;
            do
              v238 = __ldaxr(v237);
            while (__stlxr(v238 - 1, v237));
            if (!v238)
            {
              ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
              std::__shared_weak_count::__release_weak(v236);
            }
          }
          v239 = (std::__shared_weak_count *)*((_QWORD *)&v1263 + 1);
          if (*((_QWORD *)&v1263 + 1))
          {
            v240 = (unint64_t *)(*((_QWORD *)&v1263 + 1) + 8);
            do
              v241 = __ldaxr(v240);
            while (__stlxr(v241 - 1, v240));
            if (!v241)
            {
              ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
              std::__shared_weak_count::__release_weak(v239);
            }
          }
          v228 = *(_QWORD *)v1309;
          if (!*(_QWORD *)v1309)
          {
            p_buf = &buf;
            v227 = v964;
            goto LABEL_320;
          }
        }
        p_buf = (CFRange *)(v228 + 72);
        v227 = kQPParseAttributeDateKey;
      }
      else
      {
        p_buf = &buf;
      }
LABEL_320:
      location = p_buf->location;
      v255 = p_buf->length;
      v256 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 56);
      v1262[0] = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
      v1262[1] = v256;
      if (v256)
      {
        v257 = (unint64_t *)(v256 + 8);
        do
          v258 = __ldxr(v257);
        while (__stxr(v258 + 1, v257));
      }
      v1260[0] = (const std::string *)v228;
      v1260[1] = *(const std::string **)&v1309[8];
      if (*(_QWORD *)&v1309[8])
      {
        v259 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
        do
          v260 = __ldxr(v259);
        while (__stxr(v260 + 1, v259));
      }
      QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, location, v255, v227, v1260, v972, v1261);
      QP::operator+(v1262, (uint64_t *)v1261, &v1263);
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, &v1263);
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&v1263);
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1261);
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1260);
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1262);
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1309);
      v226 = *(CFRange **)(*(_QWORD *)&v1317[8] + 48);
      if (v226)
      {
LABEL_327:
        v261 = v226[1];
        if (v261.location != buf.location || v261.length != buf.length)
        {
          *(_QWORD *)&v1263 = CFStringCreateWithSubstring(alloc, (CFStringRef)*v986, v261);
          u2ParserLogger();
          v263 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v263, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)v1309 = 138412290;
            *(_QWORD *)&v1309[4] = v1263;
            _os_log_impl(&dword_218E10000, v263, OS_LOG_TYPE_INFO, "[QPNLU] Grounded date phrase %@", v1309, 0xCu);
          }

          if (v214 > v990)
          {
            while (1)
            {
              objc_msgSend(v988, "tokenRanges");
              v264 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v264, "objectAtIndexedSubscript:", v214);
              v265 = (void *)objc_claimAutoreleasedReturnValue();
              v266 = objc_msgSend(v265, "rangeValue");
              v268 = v267;

              if (v266 + v268 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v1317[8] + 48) + 24)
                                + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v1317[8] + 48) + 16))
                break;
              if ((uint64_t)--v214 <= v990)
                goto LABEL_363;
            }
            v948 = v214;
          }
LABEL_363:
          nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v1263, 0);
        }
      }
      v941 = 1;
LABEL_365:
      v284 = *(_QWORD *)&v1317[8];
      v285 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
      if (v285)
      {
        if (*(_QWORD *)(v285 + 16) != buf.location || *(_QWORD *)(v285 + 24) != buf.length)
        {
LABEL_1341:
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)&v1284, (__int128 *)(v284 + 48));
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithLong:", v974);
          v908 = (void *)objc_claimAutoreleasedReturnValue();
          v1300 = v908;
          objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v1300, 1);
          v909 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(obja, "setObject:forKeyedSubscript:", v909, kQPQUOutputTokenAttributeIndexesKey);

          ++v974;
          goto LABEL_1348;
        }
      }
      if (v961 == 13)
      {
        if (-[__CFDictionary count](v958, "count"))
        {
          v288 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 56);
          v1259[0] = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
          v1259[1] = v288;
          if (v288)
          {
            v289 = (unint64_t *)(v288 + 8);
            do
              v290 = __ldxr(v289);
            while (__stxr(v290 + 1, v289));
          }
          QP::U2Parser::makeVisualIdentifierAttribute((char **)v983, buf, v958, v974, v1258);
          QP::operator+(v1259, v1258, v1309);
          std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
          std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1309);
          std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1258);
          v291 = v1259;
        }
        else
        {
          if ((QP::tokenHasArgIdWithScore(v988, v990, 2, 0.3) & 1) == 0
            && (QP::tokenHasArgIdWithScore(v988, v990, 3, 0.3) & 1) == 0
            && !QP::tokenHasArgIdWithScore(v988, v990, 4, 0.3))
          {
            goto LABEL_418;
          }
          v292 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 56);
          v1257[0] = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
          v1257[1] = v292;
          if (v292)
          {
            v293 = (unint64_t *)(v292 + 8);
            do
              v294 = __ldxr(v293);
            while (__stxr(v294 + 1, v293));
          }
          QP::U2Parser::makeIdentifierAttribute((char **)v983, buf, kQPParseAttributeTaggedPersonKey, 0, 0, v974, v1256);
          QP::operator+(v1257, v1256, v1309);
          std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
          std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1309);
          std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1256);
          v291 = v1257;
        }
LABEL_417:
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v291);
        goto LABEL_418;
      }
      if (v972 == 4)
      {
        v287 = QP::tokenHasArgIdWithScore(v988, v990, 4, 0.3);
LABEL_388:
        if ((v287 & 1) == 0)
        {
          v284 = *(_QWORD *)&v1317[8];
          v285 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
          goto LABEL_390;
        }
      }
      else
      {
        if (v972 == 3)
        {
          v287 = QP::tokenHasArgIdWithScore(v988, v990, 3, 0.3);
          goto LABEL_388;
        }
LABEL_390:
        v295 = *(_QWORD *)(v284 + 56);
        v1255[0] = v285;
        v1255[1] = v295;
        if (v295)
        {
          v296 = (unint64_t *)(v295 + 8);
          do
            v297 = __ldxr(v296);
          while (__stxr(v297 + 1, v296));
        }
        QP::U2Parser::makeVisualIdentifierAttribute((char **)v983, buf, v958, v974, v1254);
        QP::operator+(v1255, v1254, v1309);
        std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1309);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1254);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1255);
      }
      if (QP::tokenHasArgIdWithScore(v988, v990, 2, 0.3))
      {
        v298 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 56);
        v1253[0] = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
        v1253[1] = v298;
        if (v298)
        {
          v299 = (unint64_t *)(v298 + 8);
          do
            v300 = __ldxr(v299);
          while (__stxr(v300 + 1, v299));
        }
        QP::U2Parser::makeIdentifierAttribute((char **)v983, buf, kQPParseAttributePersonKey, v955, 0, v974, v1252);
        QP::operator+(v1253, v1252, v1309);
        std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1309);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1252);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1253);
      }
      if (QP::tokenHasArgIdWithScore(v988, v990, 3, 0.3))
      {
        v301 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 56);
        v1251[0] = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
        v1251[1] = v301;
        if (v301)
        {
          v302 = (unint64_t *)(v301 + 8);
          do
            v303 = __ldxr(v302);
          while (__stxr(v303 + 1, v302));
        }
        QP::U2Parser::makeIdentifierAttribute((char **)v983, buf, kQPParseAttributeSenderKey, v955, 0, v974, v1250);
        QP::operator+(v1251, v1250, v1309);
        std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1309);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1250);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1251);
        if (!v937)
        {
          v304 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 56);
          v1249[0] = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
          v1249[1] = v304;
          if (v304)
          {
            v305 = (unint64_t *)(v304 + 8);
            do
              v306 = __ldxr(v305);
            while (__stxr(v306 + 1, v305));
          }
          QP::U2Parser::makeIdentifierAttribute((char **)v983, buf, kQPParseAttributeSenderHandleKey, 0, v951, v974, v1248);
          QP::operator+(v1249, v1248, v1309);
          std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
          std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1309);
          std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1248);
          std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1249);
        }
      }
      if (QP::tokenHasArgIdWithScore(v988, v990, 4, 0.3))
      {
        v307 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 56);
        v1247[0] = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
        v1247[1] = v307;
        if (v307)
        {
          v308 = (unint64_t *)(v307 + 8);
          do
            v309 = __ldxr(v308);
          while (__stxr(v309 + 1, v308));
        }
        QP::U2Parser::makeIdentifierAttribute((char **)v983, buf, kQPParseAttributeRecipientKey, v955, 0, v974, v1246);
        QP::operator+(v1247, v1246, v1309);
        std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1309);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1246);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1247);
        if (!v937)
        {
          v310 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 56);
          v1245[0] = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
          v1245[1] = v310;
          if (v310)
          {
            v311 = (unint64_t *)(v310 + 8);
            do
              v312 = __ldxr(v311);
            while (__stxr(v312 + 1, v311));
          }
          QP::U2Parser::makeIdentifierAttribute((char **)v983, buf, kQPParseAttributeRecipientHandleKey, 0, v951, v974, v1244);
          QP::operator+(v1245, v1244, v1309);
          std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
          std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1309);
          std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1244);
          v291 = v1245;
          goto LABEL_417;
        }
      }
LABEL_418:
      if (QP::tokenHasArgIdWithScore(v988, v990, 1, 0.3))
      {
        v313 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
        v1242 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
        v1243 = v313;
        if (v313)
        {
          v314 = (unint64_t *)&v313->__shared_owners_;
          do
            v315 = __ldxr(v314);
          while (__stxr(v315 + 1, v314));
        }
        v1239 = 0;
        v1238 = 0;
        QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeKindKey, &v1238, v972, &v1240);
        QP::operator+(&v1242, (uint64_t *)&v1240, v1309);
        std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
        v316 = *(std::__shared_weak_count **)&v1309[8];
        if (*(_QWORD *)&v1309[8])
        {
          v317 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
          do
            v318 = __ldaxr(v317);
          while (__stlxr(v318 - 1, v317));
          if (!v318)
          {
            ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
            std::__shared_weak_count::__release_weak(v316);
          }
        }
        v319 = v1241;
        if (v1241)
        {
          v320 = (unint64_t *)&v1241->__shared_owners_;
          do
            v321 = __ldaxr(v320);
          while (__stlxr(v321 - 1, v320));
          if (!v321)
          {
            ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
            std::__shared_weak_count::__release_weak(v319);
          }
        }
        v322 = v1239;
        if (v1239)
        {
          v323 = (unint64_t *)&v1239->__shared_owners_;
          do
            v324 = __ldaxr(v323);
          while (__stlxr(v324 - 1, v323));
          if (!v324)
          {
            ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
            std::__shared_weak_count::__release_weak(v322);
          }
        }
        v325 = v1243;
        if (v1243)
        {
          v326 = (unint64_t *)&v1243->__shared_owners_;
          do
            v327 = __ldaxr(v326);
          while (__stlxr(v327 - 1, v326));
          if (!v327)
          {
            ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
            std::__shared_weak_count::__release_weak(v325);
          }
        }
      }
      if (QP::tokenHasArgIdWithScore(v988, v990, 21, 0.9))
      {
        v328 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
        v1236 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
        v1237 = v328;
        if (v328)
        {
          v329 = (unint64_t *)&v328->__shared_owners_;
          do
            v330 = __ldxr(v329);
          while (__stxr(v330 + 1, v329));
        }
        v1233 = 0;
        v1232 = 0;
        QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeFavoritedKey, &v1232, v972, &v1234);
        QP::operator+(&v1236, (uint64_t *)&v1234, v1309);
        std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
        v331 = *(std::__shared_weak_count **)&v1309[8];
        if (*(_QWORD *)&v1309[8])
        {
          v332 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
          do
            v333 = __ldaxr(v332);
          while (__stlxr(v333 - 1, v332));
          if (!v333)
          {
            ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
            std::__shared_weak_count::__release_weak(v331);
          }
        }
        v334 = v1235;
        if (v1235)
        {
          v335 = (unint64_t *)&v1235->__shared_owners_;
          do
            v336 = __ldaxr(v335);
          while (__stlxr(v336 - 1, v335));
          if (!v336)
          {
            ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
            std::__shared_weak_count::__release_weak(v334);
          }
        }
        v337 = v1233;
        if (v1233)
        {
          v338 = (unint64_t *)&v1233->__shared_owners_;
          do
            v339 = __ldaxr(v338);
          while (__stlxr(v339 - 1, v338));
          if (!v339)
          {
            ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
            std::__shared_weak_count::__release_weak(v337);
          }
        }
        v340 = v1237;
        if (v1237)
        {
          v341 = (unint64_t *)&v1237->__shared_owners_;
          do
            v342 = __ldaxr(v341);
          while (__stlxr(v342 - 1, v341));
          if (!v342)
          {
            ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
            std::__shared_weak_count::__release_weak(v340);
          }
        }
      }
      if (!QP::tokenHasArgIdWithScore(v988, v990, 16, 0.8))
        goto LABEL_486;
      if (v956)
      {
        if (v956 != 5)
        {
          if (v956 == 2)
          {
            v343 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 56);
            v1231[0] = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1231[1] = v343;
            if (v343)
            {
              v344 = (unint64_t *)(v343 + 8);
              do
                v345 = __ldxr(v344);
              while (__stxr(v345 + 1, v344));
            }
            v1229[1] = 0;
            v1229[0] = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeFlaggedKey, v1229, v972, v1230);
            QP::operator+(v1231, (uint64_t *)v1230, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1309);
            std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1230);
            std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1229);
            v346 = v1231;
            goto LABEL_485;
          }
LABEL_486:
          if (QP::tokenHasArgIdWithScore(v988, v990, 17, 0.8))
          {
            if (v956 == 2)
            {
              v356 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 56);
              v1219[0] = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
              v1219[1] = v356;
              if (v356)
              {
                v357 = (unint64_t *)(v356 + 8);
                do
                  v358 = __ldxr(v357);
                while (__stxr(v358 + 1, v357));
              }
              v1217[1] = 0;
              v1217[0] = 0;
              QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeFlaggedKey, v1217, v972, v1218);
              QP::operator+(v1219, (uint64_t *)v1218, v1309);
              std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
              std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1309);
              std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1218);
              std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1217);
              v359 = v1219;
            }
            else
            {
              v360 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 56);
              v1216[0] = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
              v1216[1] = v360;
              if (v360)
              {
                v361 = (unint64_t *)(v360 + 8);
                do
                  v362 = __ldxr(v361);
                while (__stxr(v362 + 1, v361));
              }
              v1214[1] = 0;
              v1214[0] = 0;
              QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeTaggedKey, v1214, v972, v1215);
              QP::operator+(v1216, (uint64_t *)v1215, v1309);
              std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
              std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1309);
              std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1215);
              std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1214);
              v359 = v1216;
            }
            std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v359);
          }
          if (QP::tokenHasArgIdWithScore(v988, v990, 44, 0.8))
          {
            v363 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
            v1212 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1213 = v363;
            if (v363)
            {
              v364 = (unint64_t *)&v363->__shared_owners_;
              do
                v365 = __ldxr(v364);
              while (__stxr(v365 + 1, v364));
            }
            v1209 = 0;
            v1208 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeFlagColorKey, &v1208, v972, &v1210);
            QP::operator+(&v1212, (uint64_t *)&v1210, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            v366 = *(std::__shared_weak_count **)&v1309[8];
            if (*(_QWORD *)&v1309[8])
            {
              v367 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
              do
                v368 = __ldaxr(v367);
              while (__stlxr(v368 - 1, v367));
              if (!v368)
              {
                ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
                std::__shared_weak_count::__release_weak(v366);
              }
            }
            v369 = v1211;
            if (v1211)
            {
              v370 = (unint64_t *)&v1211->__shared_owners_;
              do
                v371 = __ldaxr(v370);
              while (__stlxr(v371 - 1, v370));
              if (!v371)
              {
                ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
                std::__shared_weak_count::__release_weak(v369);
              }
            }
            v372 = v1209;
            if (v1209)
            {
              v373 = (unint64_t *)&v1209->__shared_owners_;
              do
                v374 = __ldaxr(v373);
              while (__stlxr(v374 - 1, v373));
              if (!v374)
              {
                ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
                std::__shared_weak_count::__release_weak(v372);
              }
            }
            v375 = v1213;
            if (v1213)
            {
              v376 = (unint64_t *)&v1213->__shared_owners_;
              do
                v377 = __ldaxr(v376);
              while (__stlxr(v377 - 1, v376));
              if (!v377)
              {
                ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
                std::__shared_weak_count::__release_weak(v375);
              }
            }
          }
          if (QP::tokenHasArgIdWithScore(v988, v990, 43, 0.8))
          {
            v378 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
            v1206 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1207 = v378;
            if (v378)
            {
              v379 = (unint64_t *)&v378->__shared_owners_;
              do
                v380 = __ldxr(v379);
              while (__stxr(v380 + 1, v379));
            }
            v1203 = 0;
            v1202 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeTagColorKey, &v1202, v972, &v1204);
            QP::operator+(&v1206, (uint64_t *)&v1204, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            v381 = *(std::__shared_weak_count **)&v1309[8];
            if (*(_QWORD *)&v1309[8])
            {
              v382 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
              do
                v383 = __ldaxr(v382);
              while (__stlxr(v383 - 1, v382));
              if (!v383)
              {
                ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
                std::__shared_weak_count::__release_weak(v381);
              }
            }
            v384 = v1205;
            if (v1205)
            {
              v385 = (unint64_t *)&v1205->__shared_owners_;
              do
                v386 = __ldaxr(v385);
              while (__stlxr(v386 - 1, v385));
              if (!v386)
              {
                ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
                std::__shared_weak_count::__release_weak(v384);
              }
            }
            v387 = v1203;
            if (v1203)
            {
              v388 = (unint64_t *)&v1203->__shared_owners_;
              do
                v389 = __ldaxr(v388);
              while (__stlxr(v389 - 1, v388));
              if (!v389)
              {
                ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
                std::__shared_weak_count::__release_weak(v387);
              }
            }
            v390 = v1207;
            if (v1207)
            {
              v391 = (unint64_t *)&v1207->__shared_owners_;
              do
                v392 = __ldaxr(v391);
              while (__stlxr(v392 - 1, v391));
              if (!v392)
              {
                ((void (*)(std::__shared_weak_count *))v390->__on_zero_shared)(v390);
                std::__shared_weak_count::__release_weak(v390);
              }
            }
          }
          if (QP::tokenHasArgIdWithScore(v988, v990, 24, 0.8))
          {
            v393 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
            v1200 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1201 = v393;
            if (v393)
            {
              v394 = (unint64_t *)&v393->__shared_owners_;
              do
                v395 = __ldxr(v394);
              while (__stxr(v395 + 1, v394));
            }
            v1197 = 0;
            v1196 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeRepliedKey, &v1196, v972, &v1198);
            QP::operator+(&v1200, (uint64_t *)&v1198, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            v396 = *(std::__shared_weak_count **)&v1309[8];
            if (*(_QWORD *)&v1309[8])
            {
              v397 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
              do
                v398 = __ldaxr(v397);
              while (__stlxr(v398 - 1, v397));
              if (!v398)
              {
                ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
                std::__shared_weak_count::__release_weak(v396);
              }
            }
            v399 = v1199;
            if (v1199)
            {
              v400 = (unint64_t *)&v1199->__shared_owners_;
              do
                v401 = __ldaxr(v400);
              while (__stlxr(v401 - 1, v400));
              if (!v401)
              {
                ((void (*)(std::__shared_weak_count *))v399->__on_zero_shared)(v399);
                std::__shared_weak_count::__release_weak(v399);
              }
            }
            v402 = v1197;
            if (v1197)
            {
              v403 = (unint64_t *)&v1197->__shared_owners_;
              do
                v404 = __ldaxr(v403);
              while (__stlxr(v404 - 1, v403));
              if (!v404)
              {
                ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
                std::__shared_weak_count::__release_weak(v402);
              }
            }
            v405 = v1201;
            if (v1201)
            {
              v406 = (unint64_t *)&v1201->__shared_owners_;
              do
                v407 = __ldaxr(v406);
              while (__stlxr(v407 - 1, v406));
              if (!v407)
              {
                ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
                std::__shared_weak_count::__release_weak(v405);
              }
            }
          }
          if (QP::tokenHasArgIdWithScore(v988, v990, 28, 0.6))
          {
            v408 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
            v1194 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1195 = v408;
            if (v408)
            {
              v409 = (unint64_t *)&v408->__shared_owners_;
              do
                v410 = __ldxr(v409);
              while (__stxr(v410 + 1, v409));
            }
            v1191 = 0;
            v1190 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeReadKey, &v1190, v972, &v1192);
            QP::operator+(&v1194, (uint64_t *)&v1192, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            v411 = *(std::__shared_weak_count **)&v1309[8];
            if (*(_QWORD *)&v1309[8])
            {
              v412 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
              do
                v413 = __ldaxr(v412);
              while (__stlxr(v413 - 1, v412));
              if (!v413)
              {
                ((void (*)(std::__shared_weak_count *))v411->__on_zero_shared)(v411);
                std::__shared_weak_count::__release_weak(v411);
              }
            }
            v414 = v1193;
            if (v1193)
            {
              v415 = (unint64_t *)&v1193->__shared_owners_;
              do
                v416 = __ldaxr(v415);
              while (__stlxr(v416 - 1, v415));
              if (!v416)
              {
                ((void (*)(std::__shared_weak_count *))v414->__on_zero_shared)(v414);
                std::__shared_weak_count::__release_weak(v414);
              }
            }
            v417 = v1191;
            if (v1191)
            {
              v418 = (unint64_t *)&v1191->__shared_owners_;
              do
                v419 = __ldaxr(v418);
              while (__stlxr(v419 - 1, v418));
              if (!v419)
              {
                ((void (*)(std::__shared_weak_count *))v417->__on_zero_shared)(v417);
                std::__shared_weak_count::__release_weak(v417);
              }
            }
            v420 = v1195;
            if (v1195)
            {
              v421 = (unint64_t *)&v1195->__shared_owners_;
              do
                v422 = __ldaxr(v421);
              while (__stlxr(v422 - 1, v421));
              if (!v422)
              {
                ((void (*)(std::__shared_weak_count *))v420->__on_zero_shared)(v420);
                std::__shared_weak_count::__release_weak(v420);
              }
            }
            v423 = (char *)intentArgLabel();
            std::string::basic_string[abi:ne180100]<0>(__p, v423);
            QP::U2Parser::addArgActions((uint64_t)v983, __p);
            if (v1189 < 0)
              operator delete(__p[0]);
          }
          if (QP::tokenHasArgIdWithScore(v988, v990, 29, 0.6))
          {
            v424 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
            v1186 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1187 = v424;
            if (v424)
            {
              v425 = (unint64_t *)&v424->__shared_owners_;
              do
                v426 = __ldxr(v425);
              while (__stxr(v426 + 1, v425));
            }
            v1183 = 0;
            v1182 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeUnreadKey, &v1182, v972, &v1184);
            QP::operator+(&v1186, (uint64_t *)&v1184, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            v427 = *(std::__shared_weak_count **)&v1309[8];
            if (*(_QWORD *)&v1309[8])
            {
              v428 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
              do
                v429 = __ldaxr(v428);
              while (__stlxr(v429 - 1, v428));
              if (!v429)
              {
                ((void (*)(std::__shared_weak_count *))v427->__on_zero_shared)(v427);
                std::__shared_weak_count::__release_weak(v427);
              }
            }
            v430 = v1185;
            if (v1185)
            {
              v431 = (unint64_t *)&v1185->__shared_owners_;
              do
                v432 = __ldaxr(v431);
              while (__stlxr(v432 - 1, v431));
              if (!v432)
              {
                ((void (*)(std::__shared_weak_count *))v430->__on_zero_shared)(v430);
                std::__shared_weak_count::__release_weak(v430);
              }
            }
            v433 = v1183;
            if (v1183)
            {
              v434 = (unint64_t *)&v1183->__shared_owners_;
              do
                v435 = __ldaxr(v434);
              while (__stlxr(v435 - 1, v434));
              if (!v435)
              {
                ((void (*)(std::__shared_weak_count *))v433->__on_zero_shared)(v433);
                std::__shared_weak_count::__release_weak(v433);
              }
            }
            v436 = v1187;
            if (v1187)
            {
              v437 = (unint64_t *)&v1187->__shared_owners_;
              do
                v438 = __ldaxr(v437);
              while (__stlxr(v438 - 1, v437));
              if (!v438)
              {
                ((void (*)(std::__shared_weak_count *))v436->__on_zero_shared)(v436);
                std::__shared_weak_count::__release_weak(v436);
              }
            }
          }
          if (QP::tokenHasArgIdWithScore(v988, v990, 22, 0.8))
          {
            v439 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
            v1180 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1181 = v439;
            if (v439)
            {
              v440 = (unint64_t *)&v439->__shared_owners_;
              do
                v441 = __ldxr(v440);
              while (__stxr(v441 + 1, v440));
            }
            v1177 = 0;
            v1176 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeSentKey, &v1176, v972, &v1178);
            QP::operator+(&v1180, (uint64_t *)&v1178, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            v442 = *(std::__shared_weak_count **)&v1309[8];
            if (*(_QWORD *)&v1309[8])
            {
              v443 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
              do
                v444 = __ldaxr(v443);
              while (__stlxr(v444 - 1, v443));
              if (!v444)
              {
                ((void (*)(std::__shared_weak_count *))v442->__on_zero_shared)(v442);
                std::__shared_weak_count::__release_weak(v442);
              }
            }
            v445 = v1179;
            if (v1179)
            {
              v446 = (unint64_t *)&v1179->__shared_owners_;
              do
                v447 = __ldaxr(v446);
              while (__stlxr(v447 - 1, v446));
              if (!v447)
              {
                ((void (*)(std::__shared_weak_count *))v445->__on_zero_shared)(v445);
                std::__shared_weak_count::__release_weak(v445);
              }
            }
            v448 = v1177;
            if (v1177)
            {
              v449 = (unint64_t *)&v1177->__shared_owners_;
              do
                v450 = __ldaxr(v449);
              while (__stlxr(v450 - 1, v449));
              if (!v450)
              {
                ((void (*)(std::__shared_weak_count *))v448->__on_zero_shared)(v448);
                std::__shared_weak_count::__release_weak(v448);
              }
            }
            v451 = v1181;
            if (v1181)
            {
              v452 = (unint64_t *)&v1181->__shared_owners_;
              do
                v453 = __ldaxr(v452);
              while (__stlxr(v453 - 1, v452));
              if (!v453)
              {
                ((void (*)(std::__shared_weak_count *))v451->__on_zero_shared)(v451);
                std::__shared_weak_count::__release_weak(v451);
              }
            }
            v454 = (char *)intentArgLabel();
            std::string::basic_string[abi:ne180100]<0>(v1174, v454);
            QP::U2Parser::addArgActions((uint64_t)v983, v1174);
            if (v1175 < 0)
              operator delete(v1174[0]);
          }
          if (QP::tokenHasArgIdWithScore(v988, v990, 36, 0.8))
          {
            v455 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
            v1172 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1173 = v455;
            if (v455)
            {
              v456 = (unint64_t *)&v455->__shared_owners_;
              do
                v457 = __ldxr(v456);
              while (__stxr(v457 + 1, v456));
            }
            v1169 = 0;
            v1168 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeSharedKey, &v1168, v972, &v1170);
            QP::operator+(&v1172, (uint64_t *)&v1170, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            v458 = *(std::__shared_weak_count **)&v1309[8];
            if (*(_QWORD *)&v1309[8])
            {
              v459 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
              do
                v460 = __ldaxr(v459);
              while (__stlxr(v460 - 1, v459));
              if (!v460)
              {
                ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
                std::__shared_weak_count::__release_weak(v458);
              }
            }
            v461 = v1171;
            if (v1171)
            {
              v462 = (unint64_t *)&v1171->__shared_owners_;
              do
                v463 = __ldaxr(v462);
              while (__stlxr(v463 - 1, v462));
              if (!v463)
              {
                ((void (*)(std::__shared_weak_count *))v461->__on_zero_shared)(v461);
                std::__shared_weak_count::__release_weak(v461);
              }
            }
            v464 = v1169;
            if (v1169)
            {
              v465 = (unint64_t *)&v1169->__shared_owners_;
              do
                v466 = __ldaxr(v465);
              while (__stlxr(v466 - 1, v465));
              if (!v466)
              {
                ((void (*)(std::__shared_weak_count *))v464->__on_zero_shared)(v464);
                std::__shared_weak_count::__release_weak(v464);
              }
            }
            v467 = v1173;
            if (v1173)
            {
              v468 = (unint64_t *)&v1173->__shared_owners_;
              do
                v469 = __ldaxr(v468);
              while (__stlxr(v469 - 1, v468));
              if (!v469)
              {
                ((void (*)(std::__shared_weak_count *))v467->__on_zero_shared)(v467);
                std::__shared_weak_count::__release_weak(v467);
              }
            }
          }
          if (QP::tokenHasArgIdWithScore(v988, v990, 23, 0.8))
          {
            v470 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
            v1166 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1167 = v470;
            if (v470)
            {
              v471 = (unint64_t *)&v470->__shared_owners_;
              do
                v472 = __ldxr(v471);
              while (__stxr(v472 + 1, v471));
            }
            v1163 = 0;
            v1162 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeReceivedKey, &v1162, v972, &v1164);
            QP::operator+(&v1166, (uint64_t *)&v1164, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            v473 = *(std::__shared_weak_count **)&v1309[8];
            if (*(_QWORD *)&v1309[8])
            {
              v474 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
              do
                v475 = __ldaxr(v474);
              while (__stlxr(v475 - 1, v474));
              if (!v475)
              {
                ((void (*)(std::__shared_weak_count *))v473->__on_zero_shared)(v473);
                std::__shared_weak_count::__release_weak(v473);
              }
            }
            v476 = v1165;
            if (v1165)
            {
              v477 = (unint64_t *)&v1165->__shared_owners_;
              do
                v478 = __ldaxr(v477);
              while (__stlxr(v478 - 1, v477));
              if (!v478)
              {
                ((void (*)(std::__shared_weak_count *))v476->__on_zero_shared)(v476);
                std::__shared_weak_count::__release_weak(v476);
              }
            }
            v479 = v1163;
            if (v1163)
            {
              v480 = (unint64_t *)&v1163->__shared_owners_;
              do
                v481 = __ldaxr(v480);
              while (__stlxr(v481 - 1, v480));
              if (!v481)
              {
                ((void (*)(std::__shared_weak_count *))v479->__on_zero_shared)(v479);
                std::__shared_weak_count::__release_weak(v479);
              }
            }
            v482 = v1167;
            if (v1167)
            {
              v483 = (unint64_t *)&v1167->__shared_owners_;
              do
                v484 = __ldaxr(v483);
              while (__stlxr(v484 - 1, v483));
              if (!v484)
              {
                ((void (*)(std::__shared_weak_count *))v482->__on_zero_shared)(v482);
                std::__shared_weak_count::__release_weak(v482);
              }
            }
            v485 = (char *)intentArgLabel();
            std::string::basic_string[abi:ne180100]<0>(v1160, v485);
            QP::U2Parser::addArgActions((uint64_t)v983, v1160);
            if (v1161 < 0)
              operator delete(v1160[0]);
          }
          if (QP::tokenHasArgIdWithScore(v988, v990, 18, 0.8))
          {
            v486 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
            v1158 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1159 = v486;
            if (v486)
            {
              v487 = (unint64_t *)&v486->__shared_owners_;
              do
                v488 = __ldxr(v487);
              while (__stxr(v488 + 1, v487));
            }
            v1155 = 0;
            v1154 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeAttachmentKey, &v1154, v972, &v1156);
            QP::operator+(&v1158, (uint64_t *)&v1156, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            v489 = *(std::__shared_weak_count **)&v1309[8];
            if (*(_QWORD *)&v1309[8])
            {
              v490 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
              do
                v491 = __ldaxr(v490);
              while (__stlxr(v491 - 1, v490));
              if (!v491)
              {
                ((void (*)(std::__shared_weak_count *))v489->__on_zero_shared)(v489);
                std::__shared_weak_count::__release_weak(v489);
              }
            }
            v492 = v1157;
            if (v1157)
            {
              v493 = (unint64_t *)&v1157->__shared_owners_;
              do
                v494 = __ldaxr(v493);
              while (__stlxr(v494 - 1, v493));
              if (!v494)
              {
                ((void (*)(std::__shared_weak_count *))v492->__on_zero_shared)(v492);
                std::__shared_weak_count::__release_weak(v492);
              }
            }
            v495 = v1155;
            if (v1155)
            {
              v496 = (unint64_t *)&v1155->__shared_owners_;
              do
                v497 = __ldaxr(v496);
              while (__stlxr(v497 - 1, v496));
              if (!v497)
              {
                ((void (*)(std::__shared_weak_count *))v495->__on_zero_shared)(v495);
                std::__shared_weak_count::__release_weak(v495);
              }
            }
            v498 = v1159;
            if (v1159)
            {
              v499 = (unint64_t *)&v1159->__shared_owners_;
              do
                v500 = __ldaxr(v499);
              while (__stlxr(v500 - 1, v499));
              if (!v500)
              {
                ((void (*)(std::__shared_weak_count *))v498->__on_zero_shared)(v498);
                std::__shared_weak_count::__release_weak(v498);
              }
            }
          }
          if (QP::tokenHasArgIdWithScore(v988, v990, 19, 0.8))
          {
            v501 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
            v1152 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1153 = v501;
            if (v501)
            {
              v502 = (unint64_t *)&v501->__shared_owners_;
              do
                v503 = __ldxr(v502);
              while (__stxr(v503 + 1, v502));
            }
            v1149 = 0;
            v1148 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeAttachedKindKey, &v1148, v972, &v1150);
            QP::operator+(&v1152, (uint64_t *)&v1150, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            v504 = *(std::__shared_weak_count **)&v1309[8];
            if (*(_QWORD *)&v1309[8])
            {
              v505 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
              do
                v506 = __ldaxr(v505);
              while (__stlxr(v506 - 1, v505));
              if (!v506)
              {
                ((void (*)(std::__shared_weak_count *))v504->__on_zero_shared)(v504);
                std::__shared_weak_count::__release_weak(v504);
              }
            }
            v507 = v1151;
            if (v1151)
            {
              v508 = (unint64_t *)&v1151->__shared_owners_;
              do
                v509 = __ldaxr(v508);
              while (__stlxr(v509 - 1, v508));
              if (!v509)
              {
                ((void (*)(std::__shared_weak_count *))v507->__on_zero_shared)(v507);
                std::__shared_weak_count::__release_weak(v507);
              }
            }
            v510 = v1149;
            if (v1149)
            {
              v511 = (unint64_t *)&v1149->__shared_owners_;
              do
                v512 = __ldaxr(v511);
              while (__stlxr(v512 - 1, v511));
              if (!v512)
              {
                ((void (*)(std::__shared_weak_count *))v510->__on_zero_shared)(v510);
                std::__shared_weak_count::__release_weak(v510);
              }
            }
            v513 = v1153;
            if (v1153)
            {
              v514 = (unint64_t *)&v1153->__shared_owners_;
              do
                v515 = __ldaxr(v514);
              while (__stlxr(v515 - 1, v514));
              if (!v515)
              {
                ((void (*)(std::__shared_weak_count *))v513->__on_zero_shared)(v513);
                std::__shared_weak_count::__release_weak(v513);
              }
            }
          }
          if (QP::tokenHasArgIdWithScore(v988, v990, 20, 0.8))
          {
            v516 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
            v1146 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1147 = v516;
            if (v516)
            {
              v517 = (unint64_t *)&v516->__shared_owners_;
              do
                v518 = __ldxr(v517);
              while (__stxr(v518 + 1, v517));
            }
            v1143 = 0;
            v1142 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeAttachedNameKey, &v1142, v972, &v1144);
            QP::operator+(&v1146, (uint64_t *)&v1144, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            v519 = *(std::__shared_weak_count **)&v1309[8];
            if (*(_QWORD *)&v1309[8])
            {
              v520 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
              do
                v521 = __ldaxr(v520);
              while (__stlxr(v521 - 1, v520));
              if (!v521)
              {
                ((void (*)(std::__shared_weak_count *))v519->__on_zero_shared)(v519);
                std::__shared_weak_count::__release_weak(v519);
              }
            }
            v522 = v1145;
            if (v1145)
            {
              v523 = (unint64_t *)&v1145->__shared_owners_;
              do
                v524 = __ldaxr(v523);
              while (__stlxr(v524 - 1, v523));
              if (!v524)
              {
                ((void (*)(std::__shared_weak_count *))v522->__on_zero_shared)(v522);
                std::__shared_weak_count::__release_weak(v522);
              }
            }
            v525 = v1143;
            if (v1143)
            {
              v526 = (unint64_t *)&v1143->__shared_owners_;
              do
                v527 = __ldaxr(v526);
              while (__stlxr(v527 - 1, v526));
              if (!v527)
              {
                ((void (*)(std::__shared_weak_count *))v525->__on_zero_shared)(v525);
                std::__shared_weak_count::__release_weak(v525);
              }
            }
            v528 = v1147;
            if (v1147)
            {
              v529 = (unint64_t *)&v1147->__shared_owners_;
              do
                v530 = __ldaxr(v529);
              while (__stlxr(v530 - 1, v529));
              if (!v530)
              {
                ((void (*)(std::__shared_weak_count *))v528->__on_zero_shared)(v528);
                std::__shared_weak_count::__release_weak(v528);
              }
            }
          }
          if (QP::tokenHasArgIdWithScore(v988, v990, 37, 0.6))
          {
            v531 = *v979;
            if (*v979)
            {
              v1140[0] = MEMORY[0x24BDAC760];
              v1140[1] = 3221225472;
              v1140[2] = ___ZN2QP8U2Parser13parseInternalENSt3__110shared_ptrINS_5ParseEEE_block_invoke_135;
              v1140[3] = &unk_24DA25E00;
              v1141 = buf;
              v1140[5] = v983;
              v1140[4] = v1317;
              QP::Parse::enumerateParseAttributes(v531, (uint64_t)v1140);
            }
            if (!*(_QWORD *)(*(_QWORD *)&v1317[8] + 48))
            {
              v532 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 56);
              v1139[0] = 0;
              v1139[1] = v532;
              if (v532)
              {
                v533 = (unint64_t *)(v532 + 8);
                do
                  v534 = __ldxr(v533);
                while (__stxr(v534 + 1, v533));
              }
              v1137[1] = 0;
              v1137[0] = 0;
              QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeTransportActionKey, v1137, v972, v1138);
              QP::operator+(v1139, (uint64_t *)v1138, v1309);
              std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
              std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1309);
              std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1138);
              std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1137);
              std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1139);
            }
          }
          if (QP::tokenHasArgIdWithScore(v988, v990, 38, 0.6))
          {
            v535 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
            v1135 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1136 = v535;
            if (v535)
            {
              v536 = (unint64_t *)&v535->__shared_owners_;
              do
                v537 = __ldxr(v536);
              while (__stxr(v537 + 1, v536));
            }
            v1132 = 0;
            v1131 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributePrintedActionKey, &v1131, v972, &v1133);
            QP::operator+(&v1135, (uint64_t *)&v1133, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            v538 = *(std::__shared_weak_count **)&v1309[8];
            if (*(_QWORD *)&v1309[8])
            {
              v539 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
              do
                v540 = __ldaxr(v539);
              while (__stlxr(v540 - 1, v539));
              if (!v540)
              {
                ((void (*)(std::__shared_weak_count *))v538->__on_zero_shared)(v538);
                std::__shared_weak_count::__release_weak(v538);
              }
            }
            v541 = v1134;
            if (v1134)
            {
              v542 = (unint64_t *)&v1134->__shared_owners_;
              do
                v543 = __ldaxr(v542);
              while (__stlxr(v543 - 1, v542));
              if (!v543)
              {
                ((void (*)(std::__shared_weak_count *))v541->__on_zero_shared)(v541);
                std::__shared_weak_count::__release_weak(v541);
              }
            }
            v544 = v1132;
            if (v1132)
            {
              v545 = (unint64_t *)&v1132->__shared_owners_;
              do
                v546 = __ldaxr(v545);
              while (__stlxr(v546 - 1, v545));
              if (!v546)
              {
                ((void (*)(std::__shared_weak_count *))v544->__on_zero_shared)(v544);
                std::__shared_weak_count::__release_weak(v544);
              }
            }
            v547 = v1136;
            if (v1136)
            {
              v548 = (unint64_t *)&v1136->__shared_owners_;
              do
                v549 = __ldaxr(v548);
              while (__stlxr(v549 - 1, v548));
              if (!v549)
              {
                ((void (*)(std::__shared_weak_count *))v547->__on_zero_shared)(v547);
                std::__shared_weak_count::__release_weak(v547);
              }
            }
            v550 = (char *)intentArgLabel();
            std::string::basic_string[abi:ne180100]<0>(v1129, v550);
            QP::U2Parser::addArgActions((uint64_t)v983, v1129);
            if (v1130 < 0)
              operator delete(v1129[0]);
          }
          if (QP::tokenHasArgIdWithScore(v988, v990, 35, 0.6))
          {
            v551 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
            v1127 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1128 = v551;
            if (v551)
            {
              v552 = (unint64_t *)&v551->__shared_owners_;
              do
                v553 = __ldxr(v552);
              while (__stxr(v553 + 1, v552));
            }
            v1124 = 0;
            v1123 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeModifiedActionKey, &v1123, v972, &v1125);
            QP::operator+(&v1127, (uint64_t *)&v1125, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            v554 = *(std::__shared_weak_count **)&v1309[8];
            if (*(_QWORD *)&v1309[8])
            {
              v555 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
              do
                v556 = __ldaxr(v555);
              while (__stlxr(v556 - 1, v555));
              if (!v556)
              {
                ((void (*)(std::__shared_weak_count *))v554->__on_zero_shared)(v554);
                std::__shared_weak_count::__release_weak(v554);
              }
            }
            v557 = v1126;
            if (v1126)
            {
              v558 = (unint64_t *)&v1126->__shared_owners_;
              do
                v559 = __ldaxr(v558);
              while (__stlxr(v559 - 1, v558));
              if (!v559)
              {
                ((void (*)(std::__shared_weak_count *))v557->__on_zero_shared)(v557);
                std::__shared_weak_count::__release_weak(v557);
              }
            }
            v560 = v1124;
            if (v1124)
            {
              v561 = (unint64_t *)&v1124->__shared_owners_;
              do
                v562 = __ldaxr(v561);
              while (__stlxr(v562 - 1, v561));
              if (!v562)
              {
                ((void (*)(std::__shared_weak_count *))v560->__on_zero_shared)(v560);
                std::__shared_weak_count::__release_weak(v560);
              }
            }
            v563 = v1128;
            if (v1128)
            {
              v564 = (unint64_t *)&v1128->__shared_owners_;
              do
                v565 = __ldaxr(v564);
              while (__stlxr(v565 - 1, v564));
              if (!v565)
              {
                ((void (*)(std::__shared_weak_count *))v563->__on_zero_shared)(v563);
                std::__shared_weak_count::__release_weak(v563);
              }
            }
            v566 = (char *)intentArgLabel();
            std::string::basic_string[abi:ne180100]<0>(v1121, v566);
            QP::U2Parser::addArgActions((uint64_t)v983, v1121);
            if (v1122 < 0)
              operator delete(v1121[0]);
          }
          if (QP::tokenHasArgIdWithScore(v988, v990, 32, 0.6))
          {
            v567 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
            v1119 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1120 = v567;
            if (v567)
            {
              v568 = (unint64_t *)&v567->__shared_owners_;
              do
                v569 = __ldxr(v568);
              while (__stxr(v569 + 1, v568));
            }
            v1116 = 0;
            v1115 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeCreatedActionKey, &v1115, v972, &v1117);
            QP::operator+(&v1119, (uint64_t *)&v1117, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            v570 = *(std::__shared_weak_count **)&v1309[8];
            if (*(_QWORD *)&v1309[8])
            {
              v571 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
              do
                v572 = __ldaxr(v571);
              while (__stlxr(v572 - 1, v571));
              if (!v572)
              {
                ((void (*)(std::__shared_weak_count *))v570->__on_zero_shared)(v570);
                std::__shared_weak_count::__release_weak(v570);
              }
            }
            v573 = v1118;
            if (v1118)
            {
              v574 = (unint64_t *)&v1118->__shared_owners_;
              do
                v575 = __ldaxr(v574);
              while (__stlxr(v575 - 1, v574));
              if (!v575)
              {
                ((void (*)(std::__shared_weak_count *))v573->__on_zero_shared)(v573);
                std::__shared_weak_count::__release_weak(v573);
              }
            }
            v576 = v1116;
            if (v1116)
            {
              v577 = (unint64_t *)&v1116->__shared_owners_;
              do
                v578 = __ldaxr(v577);
              while (__stlxr(v578 - 1, v577));
              if (!v578)
              {
                ((void (*)(std::__shared_weak_count *))v576->__on_zero_shared)(v576);
                std::__shared_weak_count::__release_weak(v576);
              }
            }
            v579 = v1120;
            if (v1120)
            {
              v580 = (unint64_t *)&v1120->__shared_owners_;
              do
                v581 = __ldaxr(v580);
              while (__stlxr(v581 - 1, v580));
              if (!v581)
              {
                ((void (*)(std::__shared_weak_count *))v579->__on_zero_shared)(v579);
                std::__shared_weak_count::__release_weak(v579);
              }
            }
            v582 = (char *)intentArgLabel();
            std::string::basic_string[abi:ne180100]<0>(v1113, v582);
            QP::U2Parser::addArgActions((uint64_t)v983, v1113);
            if (v1114 < 0)
              operator delete(v1113[0]);
          }
          if (QP::tokenHasArgIdWithScore(v988, v990, 58, 0.6))
          {
            v583 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
            v1111 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1112 = v583;
            if (v583)
            {
              v584 = (unint64_t *)&v583->__shared_owners_;
              do
                v585 = __ldxr(v584);
              while (__stxr(v585 + 1, v584));
            }
            v1108 = 0;
            v1107 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeFlightActionKey, &v1107, v972, &v1109);
            QP::operator+(&v1111, (uint64_t *)&v1109, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            v586 = *(std::__shared_weak_count **)&v1309[8];
            if (*(_QWORD *)&v1309[8])
            {
              v587 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
              do
                v588 = __ldaxr(v587);
              while (__stlxr(v588 - 1, v587));
              if (!v588)
              {
                ((void (*)(std::__shared_weak_count *))v586->__on_zero_shared)(v586);
                std::__shared_weak_count::__release_weak(v586);
              }
            }
            v589 = v1110;
            if (v1110)
            {
              v590 = (unint64_t *)&v1110->__shared_owners_;
              do
                v591 = __ldaxr(v590);
              while (__stlxr(v591 - 1, v590));
              if (!v591)
              {
                ((void (*)(std::__shared_weak_count *))v589->__on_zero_shared)(v589);
                std::__shared_weak_count::__release_weak(v589);
              }
            }
            v592 = v1108;
            if (v1108)
            {
              v593 = (unint64_t *)&v1108->__shared_owners_;
              do
                v594 = __ldaxr(v593);
              while (__stlxr(v594 - 1, v593));
              if (!v594)
              {
                ((void (*)(std::__shared_weak_count *))v592->__on_zero_shared)(v592);
                std::__shared_weak_count::__release_weak(v592);
              }
            }
            v595 = v1112;
            if (v1112)
            {
              v596 = (unint64_t *)&v1112->__shared_owners_;
              do
                v597 = __ldaxr(v596);
              while (__stlxr(v597 - 1, v596));
              if (!v597)
              {
                ((void (*)(std::__shared_weak_count *))v595->__on_zero_shared)(v595);
                std::__shared_weak_count::__release_weak(v595);
              }
            }
          }
          if ((QP::tokenHasArgIdWithScore(v988, v990, 62, 0.6) & 1) != 0
            || (QP::tokenHasArgIdWithScore(v988, v990, 54, 0.6) & 1) != 0
            || QP::tokenHasArgIdWithScore(v988, v990, 55, 0.6))
          {
            v598 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
            v1105 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1106 = v598;
            if (v598)
            {
              v599 = (unint64_t *)&v598->__shared_owners_;
              do
                v600 = __ldxr(v599);
              while (__stxr(v600 + 1, v599));
            }
            v1102 = 0;
            v1101 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeFlightArrivalLocationKey, &v1101, v972, &v1103);
            QP::operator+(&v1105, (uint64_t *)&v1103, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            v601 = *(std::__shared_weak_count **)&v1309[8];
            if (*(_QWORD *)&v1309[8])
            {
              v602 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
              do
                v603 = __ldaxr(v602);
              while (__stlxr(v603 - 1, v602));
              if (!v603)
              {
                ((void (*)(std::__shared_weak_count *))v601->__on_zero_shared)(v601);
                std::__shared_weak_count::__release_weak(v601);
              }
            }
            v604 = v1104;
            if (v1104)
            {
              v605 = (unint64_t *)&v1104->__shared_owners_;
              do
                v606 = __ldaxr(v605);
              while (__stlxr(v606 - 1, v605));
              if (!v606)
              {
                ((void (*)(std::__shared_weak_count *))v604->__on_zero_shared)(v604);
                std::__shared_weak_count::__release_weak(v604);
              }
            }
            v607 = v1102;
            if (v1102)
            {
              v608 = (unint64_t *)&v1102->__shared_owners_;
              do
                v609 = __ldaxr(v608);
              while (__stlxr(v609 - 1, v608));
              if (!v609)
              {
                ((void (*)(std::__shared_weak_count *))v607->__on_zero_shared)(v607);
                std::__shared_weak_count::__release_weak(v607);
              }
            }
            v610 = v1106;
            if (v1106)
            {
              v611 = (unint64_t *)&v1106->__shared_owners_;
              do
                v612 = __ldaxr(v611);
              while (__stlxr(v612 - 1, v611));
              if (!v612)
              {
                ((void (*)(std::__shared_weak_count *))v610->__on_zero_shared)(v610);
                std::__shared_weak_count::__release_weak(v610);
              }
            }
          }
          if ((QP::tokenHasArgIdWithScore(v988, v990, 61, 0.6) & 1) != 0
            || (QP::tokenHasArgIdWithScore(v988, v990, 56, 0.6) & 1) != 0
            || QP::tokenHasArgIdWithScore(v988, v990, 57, 0.6))
          {
            v613 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
            v1099 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1100 = v613;
            if (v613)
            {
              v614 = (unint64_t *)&v613->__shared_owners_;
              do
                v615 = __ldxr(v614);
              while (__stxr(v615 + 1, v614));
            }
            v1096 = 0;
            v1095 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeFlightDepartureLocationKey, &v1095, v972, &v1097);
            QP::operator+(&v1099, (uint64_t *)&v1097, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            v616 = *(std::__shared_weak_count **)&v1309[8];
            if (*(_QWORD *)&v1309[8])
            {
              v617 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
              do
                v618 = __ldaxr(v617);
              while (__stlxr(v618 - 1, v617));
              if (!v618)
              {
                ((void (*)(std::__shared_weak_count *))v616->__on_zero_shared)(v616);
                std::__shared_weak_count::__release_weak(v616);
              }
            }
            v619 = v1098;
            if (v1098)
            {
              v620 = (unint64_t *)&v1098->__shared_owners_;
              do
                v621 = __ldaxr(v620);
              while (__stlxr(v621 - 1, v620));
              if (!v621)
              {
                ((void (*)(std::__shared_weak_count *))v619->__on_zero_shared)(v619);
                std::__shared_weak_count::__release_weak(v619);
              }
            }
            v622 = v1096;
            if (v1096)
            {
              v623 = (unint64_t *)&v1096->__shared_owners_;
              do
                v624 = __ldaxr(v623);
              while (__stlxr(v624 - 1, v623));
              if (!v624)
              {
                ((void (*)(std::__shared_weak_count *))v622->__on_zero_shared)(v622);
                std::__shared_weak_count::__release_weak(v622);
              }
            }
            v625 = v1100;
            if (v1100)
            {
              v626 = (unint64_t *)&v1100->__shared_owners_;
              do
                v627 = __ldaxr(v626);
              while (__stlxr(v627 - 1, v626));
              if (!v627)
              {
                ((void (*)(std::__shared_weak_count *))v625->__on_zero_shared)(v625);
                std::__shared_weak_count::__release_weak(v625);
              }
            }
          }
          if ((QP::tokenHasArgIdWithScore(v988, v990, 59, 0.6) & 1) != 0
            || QP::tokenHasArgIdWithScore(v988, v990, 60, 0.6))
          {
            v628 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
            v1093 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1094 = v628;
            if (v628)
            {
              v629 = (unint64_t *)&v628->__shared_owners_;
              do
                v630 = __ldxr(v629);
              while (__stxr(v630 + 1, v629));
            }
            v1090 = 0;
            v1089 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeFlightCarrierKey, &v1089, v972, &v1091);
            QP::operator+(&v1093, (uint64_t *)&v1091, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            v631 = *(std::__shared_weak_count **)&v1309[8];
            if (*(_QWORD *)&v1309[8])
            {
              v632 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
              do
                v633 = __ldaxr(v632);
              while (__stlxr(v633 - 1, v632));
              if (!v633)
              {
                ((void (*)(std::__shared_weak_count *))v631->__on_zero_shared)(v631);
                std::__shared_weak_count::__release_weak(v631);
              }
            }
            v634 = v1092;
            if (v1092)
            {
              v635 = (unint64_t *)&v1092->__shared_owners_;
              do
                v636 = __ldaxr(v635);
              while (__stlxr(v636 - 1, v635));
              if (!v636)
              {
                ((void (*)(std::__shared_weak_count *))v634->__on_zero_shared)(v634);
                std::__shared_weak_count::__release_weak(v634);
              }
            }
            v637 = v1090;
            if (v1090)
            {
              v638 = (unint64_t *)&v1090->__shared_owners_;
              do
                v639 = __ldaxr(v638);
              while (__stlxr(v639 - 1, v638));
              if (!v639)
              {
                ((void (*)(std::__shared_weak_count *))v637->__on_zero_shared)(v637);
                std::__shared_weak_count::__release_weak(v637);
              }
            }
            v640 = v1094;
            if (v1094)
            {
              v641 = (unint64_t *)&v1094->__shared_owners_;
              do
                v642 = __ldaxr(v641);
              while (__stlxr(v642 - 1, v641));
              if (!v642)
              {
                ((void (*)(std::__shared_weak_count *))v640->__on_zero_shared)(v640);
                std::__shared_weak_count::__release_weak(v640);
              }
            }
          }
          if (QP::tokenHasArgIdWithScore(v988, v990, 53, 0.6))
          {
            v643 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
            v1087 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1088 = v643;
            if (v643)
            {
              v644 = (unint64_t *)&v643->__shared_owners_;
              do
                v645 = __ldxr(v644);
              while (__stxr(v645 + 1, v644));
            }
            v1084 = 0;
            v1083 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeFlightLocationKey, &v1083, v972, &v1085);
            QP::operator+(&v1087, (uint64_t *)&v1085, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            v646 = *(std::__shared_weak_count **)&v1309[8];
            if (*(_QWORD *)&v1309[8])
            {
              v647 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
              do
                v648 = __ldaxr(v647);
              while (__stlxr(v648 - 1, v647));
              if (!v648)
              {
                ((void (*)(std::__shared_weak_count *))v646->__on_zero_shared)(v646);
                std::__shared_weak_count::__release_weak(v646);
              }
            }
            v649 = v1086;
            if (v1086)
            {
              v650 = (unint64_t *)&v1086->__shared_owners_;
              do
                v651 = __ldaxr(v650);
              while (__stlxr(v651 - 1, v650));
              if (!v651)
              {
                ((void (*)(std::__shared_weak_count *))v649->__on_zero_shared)(v649);
                std::__shared_weak_count::__release_weak(v649);
              }
            }
            v652 = v1084;
            if (v1084)
            {
              v653 = (unint64_t *)&v1084->__shared_owners_;
              do
                v654 = __ldaxr(v653);
              while (__stlxr(v654 - 1, v653));
              if (!v654)
              {
                ((void (*)(std::__shared_weak_count *))v652->__on_zero_shared)(v652);
                std::__shared_weak_count::__release_weak(v652);
              }
            }
            v655 = v1088;
            if (v1088)
            {
              v656 = (unint64_t *)&v1088->__shared_owners_;
              do
                v657 = __ldaxr(v656);
              while (__stlxr(v657 - 1, v656));
              if (!v657)
              {
                ((void (*)(std::__shared_weak_count *))v655->__on_zero_shared)(v655);
                std::__shared_weak_count::__release_weak(v655);
              }
            }
          }
          if (QP::tokenHasArgIdWithScore(v988, v990, 64, 0.6))
          {
            v658 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
            v1081 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1082 = v658;
            if (v658)
            {
              v659 = (unint64_t *)&v658->__shared_owners_;
              do
                v660 = __ldxr(v659);
              while (__stxr(v660 + 1, v659));
            }
            v1078 = 0;
            v1077 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeHotelActionKey, &v1077, v972, &v1079);
            QP::operator+(&v1081, (uint64_t *)&v1079, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            v661 = *(std::__shared_weak_count **)&v1309[8];
            if (*(_QWORD *)&v1309[8])
            {
              v662 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
              do
                v663 = __ldaxr(v662);
              while (__stlxr(v663 - 1, v662));
              if (!v663)
              {
                ((void (*)(std::__shared_weak_count *))v661->__on_zero_shared)(v661);
                std::__shared_weak_count::__release_weak(v661);
              }
            }
            v664 = v1080;
            if (v1080)
            {
              v665 = (unint64_t *)&v1080->__shared_owners_;
              do
                v666 = __ldaxr(v665);
              while (__stlxr(v666 - 1, v665));
              if (!v666)
              {
                ((void (*)(std::__shared_weak_count *))v664->__on_zero_shared)(v664);
                std::__shared_weak_count::__release_weak(v664);
              }
            }
            v667 = v1078;
            if (v1078)
            {
              v668 = (unint64_t *)&v1078->__shared_owners_;
              do
                v669 = __ldaxr(v668);
              while (__stlxr(v669 - 1, v668));
              if (!v669)
              {
                ((void (*)(std::__shared_weak_count *))v667->__on_zero_shared)(v667);
                std::__shared_weak_count::__release_weak(v667);
              }
            }
            v670 = v1082;
            if (v1082)
            {
              v671 = (unint64_t *)&v1082->__shared_owners_;
              do
                v672 = __ldaxr(v671);
              while (__stlxr(v672 - 1, v671));
              if (!v672)
              {
                ((void (*)(std::__shared_weak_count *))v670->__on_zero_shared)(v670);
                std::__shared_weak_count::__release_weak(v670);
              }
            }
          }
          if (QP::tokenHasArgIdWithScore(v988, v990, 66, 0.6))
          {
            v673 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
            v1075 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1076 = v673;
            if (v673)
            {
              v674 = (unint64_t *)&v673->__shared_owners_;
              do
                v675 = __ldxr(v674);
              while (__stxr(v675 + 1, v674));
            }
            v1072 = 0;
            v1071 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeHotelNameKey, &v1071, v972, &v1073);
            QP::operator+(&v1075, (uint64_t *)&v1073, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            v676 = *(std::__shared_weak_count **)&v1309[8];
            if (*(_QWORD *)&v1309[8])
            {
              v677 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
              do
                v678 = __ldaxr(v677);
              while (__stlxr(v678 - 1, v677));
              if (!v678)
              {
                ((void (*)(std::__shared_weak_count *))v676->__on_zero_shared)(v676);
                std::__shared_weak_count::__release_weak(v676);
              }
            }
            v679 = v1074;
            if (v1074)
            {
              v680 = (unint64_t *)&v1074->__shared_owners_;
              do
                v681 = __ldaxr(v680);
              while (__stlxr(v681 - 1, v680));
              if (!v681)
              {
                ((void (*)(std::__shared_weak_count *))v679->__on_zero_shared)(v679);
                std::__shared_weak_count::__release_weak(v679);
              }
            }
            v682 = v1072;
            if (v1072)
            {
              v683 = (unint64_t *)&v1072->__shared_owners_;
              do
                v684 = __ldaxr(v683);
              while (__stlxr(v684 - 1, v683));
              if (!v684)
              {
                ((void (*)(std::__shared_weak_count *))v682->__on_zero_shared)(v682);
                std::__shared_weak_count::__release_weak(v682);
              }
            }
            v685 = v1076;
            if (v1076)
            {
              v686 = (unint64_t *)&v1076->__shared_owners_;
              do
                v687 = __ldaxr(v686);
              while (__stlxr(v687 - 1, v686));
              if (!v687)
              {
                ((void (*)(std::__shared_weak_count *))v685->__on_zero_shared)(v685);
                std::__shared_weak_count::__release_weak(v685);
              }
            }
          }
          if (QP::tokenHasArgIdWithScore(v988, v990, 65, 0.6))
          {
            v688 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
            v1069 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1070 = v688;
            if (v688)
            {
              v689 = (unint64_t *)&v688->__shared_owners_;
              do
                v690 = __ldxr(v689);
              while (__stxr(v690 + 1, v689));
            }
            v1066 = 0;
            v1065 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeHotelProviderKey, &v1065, v972, &v1067);
            QP::operator+(&v1069, (uint64_t *)&v1067, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            v691 = *(std::__shared_weak_count **)&v1309[8];
            if (*(_QWORD *)&v1309[8])
            {
              v692 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
              do
                v693 = __ldaxr(v692);
              while (__stlxr(v693 - 1, v692));
              if (!v693)
              {
                ((void (*)(std::__shared_weak_count *))v691->__on_zero_shared)(v691);
                std::__shared_weak_count::__release_weak(v691);
              }
            }
            v694 = v1068;
            if (v1068)
            {
              v695 = (unint64_t *)&v1068->__shared_owners_;
              do
                v696 = __ldaxr(v695);
              while (__stlxr(v696 - 1, v695));
              if (!v696)
              {
                ((void (*)(std::__shared_weak_count *))v694->__on_zero_shared)(v694);
                std::__shared_weak_count::__release_weak(v694);
              }
            }
            v697 = v1066;
            if (v1066)
            {
              v698 = (unint64_t *)&v1066->__shared_owners_;
              do
                v699 = __ldaxr(v698);
              while (__stlxr(v699 - 1, v698));
              if (!v699)
              {
                ((void (*)(std::__shared_weak_count *))v697->__on_zero_shared)(v697);
                std::__shared_weak_count::__release_weak(v697);
              }
            }
            v700 = v1070;
            if (v1070)
            {
              v701 = (unint64_t *)&v1070->__shared_owners_;
              do
                v702 = __ldaxr(v701);
              while (__stlxr(v702 - 1, v701));
              if (!v702)
              {
                ((void (*)(std::__shared_weak_count *))v700->__on_zero_shared)(v700);
                std::__shared_weak_count::__release_weak(v700);
              }
            }
          }
          if (QP::tokenHasArgIdWithScore(v988, v990, 67, 0.6))
          {
            v703 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
            v1063 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1064 = v703;
            if (v703)
            {
              v704 = (unint64_t *)&v703->__shared_owners_;
              do
                v705 = __ldxr(v704);
              while (__stxr(v705 + 1, v704));
            }
            v1060 = 0;
            v1059 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeRestaurantActionKey, &v1059, v972, &v1061);
            QP::operator+(&v1063, (uint64_t *)&v1061, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            v706 = *(std::__shared_weak_count **)&v1309[8];
            if (*(_QWORD *)&v1309[8])
            {
              v707 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
              do
                v708 = __ldaxr(v707);
              while (__stlxr(v708 - 1, v707));
              if (!v708)
              {
                ((void (*)(std::__shared_weak_count *))v706->__on_zero_shared)(v706);
                std::__shared_weak_count::__release_weak(v706);
              }
            }
            v709 = v1062;
            if (v1062)
            {
              v710 = (unint64_t *)&v1062->__shared_owners_;
              do
                v711 = __ldaxr(v710);
              while (__stlxr(v711 - 1, v710));
              if (!v711)
              {
                ((void (*)(std::__shared_weak_count *))v709->__on_zero_shared)(v709);
                std::__shared_weak_count::__release_weak(v709);
              }
            }
            v712 = v1060;
            if (v1060)
            {
              v713 = (unint64_t *)&v1060->__shared_owners_;
              do
                v714 = __ldaxr(v713);
              while (__stlxr(v714 - 1, v713));
              if (!v714)
              {
                ((void (*)(std::__shared_weak_count *))v712->__on_zero_shared)(v712);
                std::__shared_weak_count::__release_weak(v712);
              }
            }
            v715 = v1064;
            if (v1064)
            {
              v716 = (unint64_t *)&v1064->__shared_owners_;
              do
                v717 = __ldaxr(v716);
              while (__stlxr(v717 - 1, v716));
              if (!v717)
              {
                ((void (*)(std::__shared_weak_count *))v715->__on_zero_shared)(v715);
                std::__shared_weak_count::__release_weak(v715);
              }
            }
          }
          if (QP::tokenHasArgIdWithScore(v988, v990, 68, 0.6))
          {
            v718 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
            v1057 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1058 = v718;
            if (v718)
            {
              v719 = (unint64_t *)&v718->__shared_owners_;
              do
                v720 = __ldxr(v719);
              while (__stxr(v720 + 1, v719));
            }
            v1054 = 0;
            v1053 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeRestaurantNameKey, &v1053, v972, &v1055);
            QP::operator+(&v1057, (uint64_t *)&v1055, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            v721 = *(std::__shared_weak_count **)&v1309[8];
            if (*(_QWORD *)&v1309[8])
            {
              v722 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
              do
                v723 = __ldaxr(v722);
              while (__stlxr(v723 - 1, v722));
              if (!v723)
              {
                ((void (*)(std::__shared_weak_count *))v721->__on_zero_shared)(v721);
                std::__shared_weak_count::__release_weak(v721);
              }
            }
            v724 = v1056;
            if (v1056)
            {
              v725 = (unint64_t *)&v1056->__shared_owners_;
              do
                v726 = __ldaxr(v725);
              while (__stlxr(v726 - 1, v725));
              if (!v726)
              {
                ((void (*)(std::__shared_weak_count *))v724->__on_zero_shared)(v724);
                std::__shared_weak_count::__release_weak(v724);
              }
            }
            v727 = v1054;
            if (v1054)
            {
              v728 = (unint64_t *)&v1054->__shared_owners_;
              do
                v729 = __ldaxr(v728);
              while (__stlxr(v729 - 1, v728));
              if (!v729)
              {
                ((void (*)(std::__shared_weak_count *))v727->__on_zero_shared)(v727);
                std::__shared_weak_count::__release_weak(v727);
              }
            }
            v730 = v1058;
            if (v1058)
            {
              v731 = (unint64_t *)&v1058->__shared_owners_;
              do
                v732 = __ldaxr(v731);
              while (__stlxr(v732 - 1, v731));
              if (!v732)
              {
                ((void (*)(std::__shared_weak_count *))v730->__on_zero_shared)(v730);
                std::__shared_weak_count::__release_weak(v730);
              }
            }
          }
          if (QP::tokenHasArgIdWithScore(v988, v990, 49, 0.6))
          {
            v733 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
            v1051 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1052 = v733;
            if (v733)
            {
              v734 = (unint64_t *)&v733->__shared_owners_;
              do
                v735 = __ldxr(v734);
              while (__stxr(v735 + 1, v734));
            }
            v1048 = 0;
            v1047 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeReadingListActionKey, &v1047, v972, &v1049);
            QP::operator+(&v1051, (uint64_t *)&v1049, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            v736 = *(std::__shared_weak_count **)&v1309[8];
            if (*(_QWORD *)&v1309[8])
            {
              v737 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
              do
                v738 = __ldaxr(v737);
              while (__stlxr(v738 - 1, v737));
              if (!v738)
              {
                ((void (*)(std::__shared_weak_count *))v736->__on_zero_shared)(v736);
                std::__shared_weak_count::__release_weak(v736);
              }
            }
            v739 = v1050;
            if (v1050)
            {
              v740 = (unint64_t *)&v1050->__shared_owners_;
              do
                v741 = __ldaxr(v740);
              while (__stlxr(v741 - 1, v740));
              if (!v741)
              {
                ((void (*)(std::__shared_weak_count *))v739->__on_zero_shared)(v739);
                std::__shared_weak_count::__release_weak(v739);
              }
            }
            v742 = v1048;
            if (v1048)
            {
              v743 = (unint64_t *)&v1048->__shared_owners_;
              do
                v744 = __ldaxr(v743);
              while (__stlxr(v744 - 1, v743));
              if (!v744)
              {
                ((void (*)(std::__shared_weak_count *))v742->__on_zero_shared)(v742);
                std::__shared_weak_count::__release_weak(v742);
              }
            }
            v745 = v1052;
            if (v1052)
            {
              v746 = (unint64_t *)&v1052->__shared_owners_;
              do
                v747 = __ldaxr(v746);
              while (__stlxr(v747 - 1, v746));
              if (!v747)
              {
                ((void (*)(std::__shared_weak_count *))v745->__on_zero_shared)(v745);
                std::__shared_weak_count::__release_weak(v745);
              }
            }
          }
          if (QP::tokenHasArgIdWithScore(v988, v990, 9, 0.6))
          {
            if (v956 == 23)
            {
              v748 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 56);
              v1046[0] = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
              v1046[1] = v748;
              if (v748)
              {
                v749 = (unint64_t *)(v748 + 8);
                do
                  v750 = __ldxr(v749);
                while (__stxr(v750 + 1, v749));
              }
              v1044[1] = 0;
              v1044[0] = 0;
              QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeEventKindKey, v1044, v972, v1045);
              QP::operator+(v1046, (uint64_t *)v1045, v1309);
              std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
              std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1309);
              std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1045);
              std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1044);
              v751 = v1046;
            }
            else
            {
              v752 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 56);
              v1043[0] = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
              v1043[1] = v752;
              if (v752)
              {
                v753 = (unint64_t *)(v752 + 8);
                do
                  v754 = __ldxr(v753);
                while (__stxr(v754 + 1, v753));
              }
              v1041[1] = 0;
              v1041[0] = 0;
              QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeKeywordKey, v1041, v972, v1042);
              QP::operator+(v1043, (uint64_t *)v1042, v1309);
              std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
              std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1309);
              std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1042);
              std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1041);
              v751 = v1043;
            }
            std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v751);
          }
          v755 = QP::tokenHasArgIdWithScore(v988, v990, 51, 0.6);
          if (v956 == 23)
            v756 = v755;
          else
            v756 = 0;
          if (v756 == 1)
          {
            v1040 = 0;
            v1039 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeEarliestActionKey, &v1039, v972, (std::string **)&v1263);
            v757 = v1306.i64[1];
            if (v1306.i64[1] >= v1307[0])
            {
              v758 = (v1306.i64[1] - v1306.i64[0]) >> 4;
              v759 = v758 + 1;
              if ((unint64_t)(v758 + 1) >> 60)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              v760 = v1307[0] - v1306.i64[0];
              if ((v1307[0] - v1306.i64[0]) >> 3 > v759)
                v759 = v760 >> 3;
              if ((unint64_t)v760 >= 0x7FFFFFFFFFFFFFF0)
                v761 = 0xFFFFFFFFFFFFFFFLL;
              else
                v761 = v759;
              v1311 = (void (*)(uint64_t))v1307;
              v762 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)v1307, v761);
              v764 = &v762[16 * v758];
              *(_OWORD *)v764 = v1263;
              v1263 = 0uLL;
              v765 = (_QWORD *)v1306.i64[1];
              v766 = (_QWORD *)v1306.i64[0];
              if (v1306.i64[1] == v1306.i64[0])
              {
                v769 = vdupq_n_s64(v1306.u64[1]);
                v767 = &v762[16 * v758];
              }
              else
              {
                v767 = &v762[16 * v758];
                do
                {
                  v768 = *((_OWORD *)v765 - 1);
                  v765 -= 2;
                  *((_OWORD *)v767 - 1) = v768;
                  v767 -= 16;
                  *v765 = 0;
                  v765[1] = 0;
                }
                while (v765 != v766);
                v769 = v1306;
              }
              v770 = v764 + 16;
              v1306.i64[0] = (uint64_t)v767;
              v1306.i64[1] = (uint64_t)(v764 + 16);
              *(int64x2_t *)&v1309[8] = v769;
              v771 = (uint64_t (*)(uint64_t, uint64_t))v1307[0];
              v1307[0] = &v762[16 * v763];
              v1310 = v771;
              *(_QWORD *)v1309 = v769.i64[0];
              std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer((uint64_t)v1309);
              v772 = (std::__shared_weak_count *)*((_QWORD *)&v1263 + 1);
              v1306.i64[1] = (uint64_t)v770;
              if (*((_QWORD *)&v1263 + 1))
              {
                v773 = (unint64_t *)(*((_QWORD *)&v1263 + 1) + 8);
                do
                  v774 = __ldaxr(v773);
                while (__stlxr(v774 - 1, v773));
                if (!v774)
                {
                  ((void (*)(std::__shared_weak_count *))v772->__on_zero_shared)(v772);
                  std::__shared_weak_count::__release_weak(v772);
                }
              }
            }
            else
            {
              *(_OWORD *)v1306.i64[1] = v1263;
              v1263 = 0uLL;
              v1306.i64[1] = v757 + 16;
            }
            v775 = v1040;
            if (v1040)
            {
              v776 = (unint64_t *)&v1040->__shared_owners_;
              do
                v777 = __ldaxr(v776);
              while (__stlxr(v777 - 1, v776));
              if (!v777)
              {
                ((void (*)(std::__shared_weak_count *))v775->__on_zero_shared)(v775);
                std::__shared_weak_count::__release_weak(v775);
              }
            }
          }
          v778 = QP::tokenHasArgIdWithScore(v988, v990, 52, 0.6);
          if (v956 == 23)
            v779 = v778;
          else
            v779 = 0;
          if (v779 == 1)
          {
            v1038 = 0;
            v1037 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeLatestActionKey, &v1037, v972, (std::string **)&v1263);
            v780 = v1306.i64[1];
            if (v1306.i64[1] >= v1307[0])
            {
              v781 = (v1306.i64[1] - v1306.i64[0]) >> 4;
              v782 = v781 + 1;
              if ((unint64_t)(v781 + 1) >> 60)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              v783 = v1307[0] - v1306.i64[0];
              if ((v1307[0] - v1306.i64[0]) >> 3 > v782)
                v782 = v783 >> 3;
              if ((unint64_t)v783 >= 0x7FFFFFFFFFFFFFF0)
                v784 = 0xFFFFFFFFFFFFFFFLL;
              else
                v784 = v782;
              v1311 = (void (*)(uint64_t))v1307;
              v785 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)v1307, v784);
              v787 = &v785[16 * v781];
              *(_OWORD *)v787 = v1263;
              v1263 = 0uLL;
              v788 = (_QWORD *)v1306.i64[1];
              v789 = (_QWORD *)v1306.i64[0];
              if (v1306.i64[1] == v1306.i64[0])
              {
                v792 = vdupq_n_s64(v1306.u64[1]);
                v790 = &v785[16 * v781];
              }
              else
              {
                v790 = &v785[16 * v781];
                do
                {
                  v791 = *((_OWORD *)v788 - 1);
                  v788 -= 2;
                  *((_OWORD *)v790 - 1) = v791;
                  v790 -= 16;
                  *v788 = 0;
                  v788[1] = 0;
                }
                while (v788 != v789);
                v792 = v1306;
              }
              v793 = v787 + 16;
              v1306.i64[0] = (uint64_t)v790;
              v1306.i64[1] = (uint64_t)(v787 + 16);
              *(int64x2_t *)&v1309[8] = v792;
              v794 = (uint64_t (*)(uint64_t, uint64_t))v1307[0];
              v1307[0] = &v785[16 * v786];
              v1310 = v794;
              *(_QWORD *)v1309 = v792.i64[0];
              std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer((uint64_t)v1309);
              v795 = (std::__shared_weak_count *)*((_QWORD *)&v1263 + 1);
              v1306.i64[1] = (uint64_t)v793;
              if (*((_QWORD *)&v1263 + 1))
              {
                v796 = (unint64_t *)(*((_QWORD *)&v1263 + 1) + 8);
                do
                  v797 = __ldaxr(v796);
                while (__stlxr(v797 - 1, v796));
                if (!v797)
                {
                  ((void (*)(std::__shared_weak_count *))v795->__on_zero_shared)(v795);
                  std::__shared_weak_count::__release_weak(v795);
                }
              }
            }
            else
            {
              *(_OWORD *)v1306.i64[1] = v1263;
              v1263 = 0uLL;
              v1306.i64[1] = v780 + 16;
            }
            v798 = v1038;
            if (v1038)
            {
              v799 = (unint64_t *)&v1038->__shared_owners_;
              do
                v800 = __ldaxr(v799);
              while (__stlxr(v800 - 1, v799));
              if (!v800)
              {
                ((void (*)(std::__shared_weak_count *))v798->__on_zero_shared)(v798);
                std::__shared_weak_count::__release_weak(v798);
              }
            }
          }
          if (QP::tokenHasArgIdWithScore(v988, v990, 34, 0.6))
          {
            v801 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
            v1035 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1036 = v801;
            if (v801)
            {
              v802 = (unint64_t *)&v801->__shared_owners_;
              do
                v803 = __ldxr(v802);
              while (__stxr(v803 + 1, v802));
            }
            v1032 = 0;
            v1031 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeCompletedActionKey, &v1031, v972, &v1033);
            QP::operator+(&v1035, (uint64_t *)&v1033, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            v804 = *(std::__shared_weak_count **)&v1309[8];
            if (*(_QWORD *)&v1309[8])
            {
              v805 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
              do
                v806 = __ldaxr(v805);
              while (__stlxr(v806 - 1, v805));
              if (!v806)
              {
                ((void (*)(std::__shared_weak_count *))v804->__on_zero_shared)(v804);
                std::__shared_weak_count::__release_weak(v804);
              }
            }
            v807 = v1034;
            if (v1034)
            {
              v808 = (unint64_t *)&v1034->__shared_owners_;
              do
                v809 = __ldaxr(v808);
              while (__stlxr(v809 - 1, v808));
              if (!v809)
              {
                ((void (*)(std::__shared_weak_count *))v807->__on_zero_shared)(v807);
                std::__shared_weak_count::__release_weak(v807);
              }
            }
            v810 = v1032;
            if (v1032)
            {
              v811 = (unint64_t *)&v1032->__shared_owners_;
              do
                v812 = __ldaxr(v811);
              while (__stlxr(v812 - 1, v811));
              if (!v812)
              {
                ((void (*)(std::__shared_weak_count *))v810->__on_zero_shared)(v810);
                std::__shared_weak_count::__release_weak(v810);
              }
            }
            v813 = v1036;
            if (v1036)
            {
              v814 = (unint64_t *)&v1036->__shared_owners_;
              do
                v815 = __ldaxr(v814);
              while (__stlxr(v815 - 1, v814));
              if (!v815)
              {
                ((void (*)(std::__shared_weak_count *))v813->__on_zero_shared)(v813);
                std::__shared_weak_count::__release_weak(v813);
              }
            }
            v816 = (char *)intentArgLabel();
            std::string::basic_string[abi:ne180100]<0>(v1029, v816);
            QP::U2Parser::addArgActions((uint64_t)v983, v1029);
            if (v1030 < 0)
              operator delete(v1029[0]);
          }
          if (QP::tokenHasArgIdWithScore(v988, v990, 33, 0.6))
          {
            v817 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
            v1027 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1028 = v817;
            if (v817)
            {
              v818 = (unint64_t *)&v817->__shared_owners_;
              do
                v819 = __ldxr(v818);
              while (__stxr(v819 + 1, v818));
            }
            v1024 = 0;
            v1023 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeDueActionKey, &v1023, v972, &v1025);
            QP::operator+(&v1027, (uint64_t *)&v1025, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            v820 = *(std::__shared_weak_count **)&v1309[8];
            if (*(_QWORD *)&v1309[8])
            {
              v821 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
              do
                v822 = __ldaxr(v821);
              while (__stlxr(v822 - 1, v821));
              if (!v822)
              {
                ((void (*)(std::__shared_weak_count *))v820->__on_zero_shared)(v820);
                std::__shared_weak_count::__release_weak(v820);
              }
            }
            v823 = v1026;
            if (v1026)
            {
              v824 = (unint64_t *)&v1026->__shared_owners_;
              do
                v825 = __ldaxr(v824);
              while (__stlxr(v825 - 1, v824));
              if (!v825)
              {
                ((void (*)(std::__shared_weak_count *))v823->__on_zero_shared)(v823);
                std::__shared_weak_count::__release_weak(v823);
              }
            }
            v826 = v1024;
            if (v1024)
            {
              v827 = (unint64_t *)&v1024->__shared_owners_;
              do
                v828 = __ldaxr(v827);
              while (__stlxr(v828 - 1, v827));
              if (!v828)
              {
                ((void (*)(std::__shared_weak_count *))v826->__on_zero_shared)(v826);
                std::__shared_weak_count::__release_weak(v826);
              }
            }
            v829 = v1028;
            if (v1028)
            {
              v830 = (unint64_t *)&v1028->__shared_owners_;
              do
                v831 = __ldaxr(v830);
              while (__stlxr(v831 - 1, v830));
              if (!v831)
              {
                ((void (*)(std::__shared_weak_count *))v829->__on_zero_shared)(v829);
                std::__shared_weak_count::__release_weak(v829);
              }
            }
            v832 = (char *)intentArgLabel();
            std::string::basic_string[abi:ne180100]<0>(v1021, v832);
            QP::U2Parser::addArgActions((uint64_t)v983, v1021);
            if (v1022 < 0)
              operator delete(v1021[0]);
          }
          if (QP::tokenHasArgIdWithScore(v988, v990, 27, 0.6))
          {
            v833 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
            v1019 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1020 = v833;
            if (v833)
            {
              v834 = (unint64_t *)&v833->__shared_owners_;
              do
                v835 = __ldxr(v834);
              while (__stxr(v835 + 1, v834));
            }
            v1016 = 0;
            v1015 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeDraftActionKey, &v1015, v972, &v1017);
            QP::operator+(&v1019, (uint64_t *)&v1017, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            v836 = *(std::__shared_weak_count **)&v1309[8];
            if (*(_QWORD *)&v1309[8])
            {
              v837 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
              do
                v838 = __ldaxr(v837);
              while (__stlxr(v838 - 1, v837));
              if (!v838)
              {
                ((void (*)(std::__shared_weak_count *))v836->__on_zero_shared)(v836);
                std::__shared_weak_count::__release_weak(v836);
              }
            }
            v839 = v1018;
            if (v1018)
            {
              v840 = (unint64_t *)&v1018->__shared_owners_;
              do
                v841 = __ldaxr(v840);
              while (__stlxr(v841 - 1, v840));
              if (!v841)
              {
                ((void (*)(std::__shared_weak_count *))v839->__on_zero_shared)(v839);
                std::__shared_weak_count::__release_weak(v839);
              }
            }
            v842 = v1016;
            if (v1016)
            {
              v843 = (unint64_t *)&v1016->__shared_owners_;
              do
                v844 = __ldaxr(v843);
              while (__stlxr(v844 - 1, v843));
              if (!v844)
              {
                ((void (*)(std::__shared_weak_count *))v842->__on_zero_shared)(v842);
                std::__shared_weak_count::__release_weak(v842);
              }
            }
            v845 = v1020;
            if (v1020)
            {
              v846 = (unint64_t *)&v1020->__shared_owners_;
              do
                v847 = __ldaxr(v846);
              while (__stlxr(v847 - 1, v846));
              if (!v847)
              {
                ((void (*)(std::__shared_weak_count *))v845->__on_zero_shared)(v845);
                std::__shared_weak_count::__release_weak(v845);
              }
            }
          }
          if (QP::tokenHasArgIdWithScore(v988, v990, 31, 0.6))
          {
            v848 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
            v1013 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1014 = v848;
            if (v848)
            {
              v849 = (unint64_t *)&v848->__shared_owners_;
              do
                v850 = __ldxr(v849);
              while (__stxr(v850 + 1, v849));
            }
            v1010 = 0;
            v1009 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeJunkActionKey, &v1009, v972, &v1011);
            QP::operator+(&v1013, (uint64_t *)&v1011, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            v851 = *(std::__shared_weak_count **)&v1309[8];
            if (*(_QWORD *)&v1309[8])
            {
              v852 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
              do
                v853 = __ldaxr(v852);
              while (__stlxr(v853 - 1, v852));
              if (!v853)
              {
                ((void (*)(std::__shared_weak_count *))v851->__on_zero_shared)(v851);
                std::__shared_weak_count::__release_weak(v851);
              }
            }
            v854 = v1012;
            if (v1012)
            {
              v855 = (unint64_t *)&v1012->__shared_owners_;
              do
                v856 = __ldaxr(v855);
              while (__stlxr(v856 - 1, v855));
              if (!v856)
              {
                ((void (*)(std::__shared_weak_count *))v854->__on_zero_shared)(v854);
                std::__shared_weak_count::__release_weak(v854);
              }
            }
            v857 = v1010;
            if (v1010)
            {
              v858 = (unint64_t *)&v1010->__shared_owners_;
              do
                v859 = __ldaxr(v858);
              while (__stlxr(v859 - 1, v858));
              if (!v859)
              {
                ((void (*)(std::__shared_weak_count *))v857->__on_zero_shared)(v857);
                std::__shared_weak_count::__release_weak(v857);
              }
            }
            v860 = v1014;
            if (v1014)
            {
              v861 = (unint64_t *)&v1014->__shared_owners_;
              do
                v862 = __ldaxr(v861);
              while (__stlxr(v862 - 1, v861));
              if (!v862)
              {
                ((void (*)(std::__shared_weak_count *))v860->__on_zero_shared)(v860);
                std::__shared_weak_count::__release_weak(v860);
              }
            }
          }
          if (QP::tokenHasArgIdWithScore(v988, v990, 26, 0.6))
          {
            v863 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
            v1007 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
            v1008 = v863;
            if (v863)
            {
              v864 = (unint64_t *)&v863->__shared_owners_;
              do
                v865 = __ldxr(v864);
              while (__stxr(v865 + 1, v864));
            }
            v1004 = 0;
            v1003 = 0;
            QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeArchiveActionKey, &v1003, v972, &v1005);
            QP::operator+(&v1007, (uint64_t *)&v1005, v1309);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
            v866 = *(std::__shared_weak_count **)&v1309[8];
            if (*(_QWORD *)&v1309[8])
            {
              v867 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
              do
                v868 = __ldaxr(v867);
              while (__stlxr(v868 - 1, v867));
              if (!v868)
              {
                ((void (*)(std::__shared_weak_count *))v866->__on_zero_shared)(v866);
                std::__shared_weak_count::__release_weak(v866);
              }
            }
            v869 = v1006;
            if (v1006)
            {
              v870 = (unint64_t *)&v1006->__shared_owners_;
              do
                v871 = __ldaxr(v870);
              while (__stlxr(v871 - 1, v870));
              if (!v871)
              {
                ((void (*)(std::__shared_weak_count *))v869->__on_zero_shared)(v869);
                std::__shared_weak_count::__release_weak(v869);
              }
            }
            v872 = v1004;
            if (v1004)
            {
              v873 = (unint64_t *)&v1004->__shared_owners_;
              do
                v874 = __ldaxr(v873);
              while (__stlxr(v874 - 1, v873));
              if (!v874)
              {
                ((void (*)(std::__shared_weak_count *))v872->__on_zero_shared)(v872);
                std::__shared_weak_count::__release_weak(v872);
              }
            }
            v875 = v1008;
            if (v1008)
            {
              v876 = (unint64_t *)&v1008->__shared_owners_;
              do
                v877 = __ldaxr(v876);
              while (__stlxr(v877 - 1, v876));
              if (!v877)
              {
                ((void (*)(std::__shared_weak_count *))v875->__on_zero_shared)(v875);
                std::__shared_weak_count::__release_weak(v875);
              }
            }
          }
          objc_msgSend(MEMORY[0x24BDBCF20], "setWithArray:", &unk_24DA34C38);
          v878 = (void *)objc_claimAutoreleasedReturnValue();
          v879 = v988;
          v966 = v878;
          v880 = 0;
          do
          {
            objc_msgSend(v879, "argIdsForTokens");
            v881 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v881, "objectAtIndexedSubscript:", v990);
            v882 = (void *)objc_claimAutoreleasedReturnValue();
            v883 = v880 < objc_msgSend(v882, "count");

            if (!v883)
              goto LABEL_1339;
            if (v880)
            {
              objc_msgSend(v879, "argScoresForTokens");
              v884 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v884, "objectAtIndexedSubscript:", v990);
              v885 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v885, "objectAtIndexedSubscript:", v880);
              v886 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v886, "floatValue");
              v888 = v887 < 0.3;

              if (v888)
              {
LABEL_1339:

                goto LABEL_1340;
              }
            }
            objc_msgSend(v879, "argIdsForTokens");
            v889 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v889, "objectAtIndexedSubscript:", v990);
            v890 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v890, "objectAtIndexedSubscript:", v880);
            v891 = (void *)objc_claimAutoreleasedReturnValue();
            v892 = objc_msgSend(v966, "containsObject:", v891);

            ++v880;
          }
          while ((v892 & 1) == 0);

          v893 = *(std::__shared_weak_count **)(*(_QWORD *)&v1317[8] + 56);
          v1001 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
          v1002 = v893;
          if (v893)
          {
            v894 = (unint64_t *)&v893->__shared_owners_;
            do
              v895 = __ldxr(v894);
            while (__stxr(v895 + 1, v894));
          }
          v998 = 0;
          v997 = 0;
          QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeKeywordKey, &v997, v972, &v999);
          QP::operator+(&v1001, (uint64_t *)&v999, v1309);
          std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
          v896 = *(std::__shared_weak_count **)&v1309[8];
          if (*(_QWORD *)&v1309[8])
          {
            v897 = (unint64_t *)(*(_QWORD *)&v1309[8] + 8);
            do
              v898 = __ldaxr(v897);
            while (__stlxr(v898 - 1, v897));
            if (!v898)
            {
              ((void (*)(std::__shared_weak_count *))v896->__on_zero_shared)(v896);
              std::__shared_weak_count::__release_weak(v896);
            }
          }
          v899 = v1000;
          if (v1000)
          {
            v900 = (unint64_t *)&v1000->__shared_owners_;
            do
              v901 = __ldaxr(v900);
            while (__stlxr(v901 - 1, v900));
            if (!v901)
            {
              ((void (*)(std::__shared_weak_count *))v899->__on_zero_shared)(v899);
              std::__shared_weak_count::__release_weak(v899);
            }
          }
          v902 = v998;
          if (v998)
          {
            v903 = (unint64_t *)&v998->__shared_owners_;
            do
              v904 = __ldaxr(v903);
            while (__stlxr(v904 - 1, v903));
            if (!v904)
            {
              ((void (*)(std::__shared_weak_count *))v902->__on_zero_shared)(v902);
              std::__shared_weak_count::__release_weak(v902);
            }
          }
          v905 = v1002;
          if (v1002)
          {
            v906 = (unint64_t *)&v1002->__shared_owners_;
            do
              v907 = __ldaxr(v906);
            while (__stlxr(v907 - 1, v906));
            if (!v907)
            {
              ((void (*)(std::__shared_weak_count *))v905->__on_zero_shared)(v905);
              std::__shared_weak_count::__release_weak(v905);
            }
          }
LABEL_1340:

          v284 = *(_QWORD *)&v1317[8];
          if (*(_QWORD *)(*(_QWORD *)&v1317[8] + 48))
            goto LABEL_1341;
          v910 = v944;
          if (v990 <= v944 + v945)
            v911 = v945 + 1;
          else
            v911 = 1;
          if (v990 > v944 + v945)
            v910 = v990;
          v944 = v910;
          v945 = v911;
LABEL_1348:
          v243 = objc_msgSend(obja, "copy");
          objc_msgSend(v957, "addObject:", v243);
          v244 = 1;
          goto LABEL_1349;
        }
        v347 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 56);
        v1228[0] = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
        v1228[1] = v347;
        if (v347)
        {
          v348 = (unint64_t *)(v347 + 8);
          do
            v349 = __ldxr(v348);
          while (__stxr(v349 + 1, v348));
        }
        v1226[1] = 0;
        v1226[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeTaggedKey, v1226, v972, v1227);
        QP::operator+(v1228, (uint64_t *)v1227, v1309);
        std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1309);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1227);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1226);
        v346 = v1228;
      }
      else
      {
        v350 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 56);
        v1225[0] = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
        v1225[1] = v350;
        if (v350)
        {
          v351 = (unint64_t *)(v350 + 8);
          do
            v352 = __ldxr(v351);
          while (__stxr(v352 + 1, v351));
        }
        v1223[1] = 0;
        v1223[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeFlaggedKey, v1223, v972, v1224);
        QP::operator+(v1225, (uint64_t *)v1224, v1309);
        std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1309);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1224);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1223);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1225);
        v353 = *(_QWORD *)(*(_QWORD *)&v1317[8] + 56);
        v1222[0] = *(_QWORD *)(*(_QWORD *)&v1317[8] + 48);
        v1222[1] = v353;
        if (v353)
        {
          v354 = (unint64_t *)(v353 + 8);
          do
            v355 = __ldxr(v354);
          while (__stxr(v355 + 1, v354));
        }
        v1220[1] = 0;
        v1220[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t)v983, ptra, v974, buf.location, buf.length, kQPParseAttributeTaggedKey, v1220, v972, v1221);
        QP::operator+(v1222, (uint64_t *)v1221, v1309);
        std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)&v1317[8] + 48, (__int128 *)v1309);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1309);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1221);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1220);
        v346 = v1222;
      }
LABEL_485:
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v346);
      goto LABEL_486;
    }
    *(_DWORD *)v983 = 4;
    std::string::__assign_external(v967, "Unable to find range for ARG_TIME group", 0x27uLL);
    u2ParserLogger();
    v243 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v243, OS_LOG_TYPE_ERROR))
      QP::U2Parser::parseInternal(&v1265, v1266);
    v244 = 0;
    v941 = 1;
LABEL_1349:

    _Block_object_dispose(v1317, 8);
    v912 = *(std::__shared_weak_count **)&v1317[56];
    if (*(_QWORD *)&v1317[56])
    {
      v913 = (unint64_t *)(*(_QWORD *)&v1317[56] + 8);
      do
        v914 = __ldaxr(v913);
      while (__stlxr(v914 - 1, v913));
      if (!v914)
      {
        ((void (*)(std::__shared_weak_count *))v912->__on_zero_shared)(v912);
        std::__shared_weak_count::__release_weak(v912);
      }
    }

    if (!v244)
      goto LABEL_1381;
LABEL_1355:
    ++v990;
  }
  while (v990 != v969);
  v152 = v988;
  if ((v941 & 1) == 0)
    goto LABEL_1358;
LABEL_1367:
  QP::debugDescriptionWithQUOutput((void *)*v986, v152, v957, v993, v942 & 1);
  obja = (id)objc_claimAutoreleasedReturnValue();
  v918 = QPTimingNanosecondsSinceAbsoluteTime(v981);
  u2ParserLogger();
  v919 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v919, OS_LOG_TYPE_DEFAULT))
  {
    v920 = objc_msgSend(v152, "embeddingsTime");
    v921 = objc_msgSend(v152, "predictionTime");
    v922 = objc_msgSend(v152, "embeddingsTime");
    *(_DWORD *)v1317 = 134219522;
    *(double *)&v1317[4] = (float)((float)v918 / 1000000.0);
    *(_WORD *)&v1317[12] = 2048;
    *(double *)&v1317[14] = (float)((float)v946 / 1000000.0);
    *(_WORD *)&v1317[22] = 2048;
    *(double *)&v1317[24] = (float)((float)v920 / 1000000.0);
    *(_WORD *)&v1317[32] = 2048;
    *(double *)&v1317[34] = (float)((float)((float)v921 - (float)v922) / 1000000.0);
    *(_WORD *)&v1317[42] = 2048;
    *(double *)&v1317[44] = (float)((float)v952 / 1000000.0);
    *(_WORD *)&v1317[52] = 1024;
    *(_DWORD *)&v1317[54] = v953;
    *(_WORD *)&v1317[58] = 2112;
    *(_QWORD *)&v1317[60] = obja;
    _os_log_impl(&dword_218E10000, v919, OS_LOG_TYPE_DEFAULT, "[QPNLU] QU parsed in %.1fms (load:%.1f; nlx:%.1f; u2:%.1f; ecr:%.1f(%u))\n%@",
      v1317,
      0x44u);
  }

  *((_QWORD *)v983 + 1) = v918;
  *(_DWORD *)v983 = 1;
  v923 = *((_QWORD *)v983 + 10);
  if (!*(_BYTE *)(v923 + 36) && !*(_BYTE *)(v923 + 34))
  {
    v924 = QPProcessName();
    v925 = strcmp("searchd", v924);
    if (Length >= 3 && !v925)
      QP::logQueryUnderstandingOverviewCAEvent(v988, v992, Length, v969, objc_msgSend(v993, "count") != 0);
  }
  *(_QWORD *)v1309 = 0;
  v1292[0] = kQPQUOutputIntentIdsKey;
  objc_msgSend(v988, "intentId");
  v1291 = objc_claimAutoreleasedReturnValue();
  v982 = (void *)v1291;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v1291, 1);
  v926 = objc_claimAutoreleasedReturnValue();
  v1293 = v926;
  v1292[1] = kQPQUOutputIntentLabelsKey;
  v927 = (void *)MEMORY[0x24BDD17C8];
  objc_msgSend(v988, "intentId");
  v991 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v991, "intValue");
  objc_msgSend(v927, "stringWithUTF8String:", intentLabel());
  v1290 = objc_claimAutoreleasedReturnValue();
  v980 = (void *)v1290;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v1290, 1);
  v1294 = objc_claimAutoreleasedReturnValue();
  v1292[2] = kQPQUOutputIntentScoresKey;
  ptrb = (void *)v1294;
  objc_msgSend(v988, "confidenceScore");
  v928 = (void *)objc_claimAutoreleasedReturnValue();
  v1289 = v928;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v1289, 1);
  v929 = (void *)objc_claimAutoreleasedReturnValue();
  v1295 = v929;
  v1292[3] = kQPQUOutputIsUnsafeKey;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v145 >= v940);
  v930 = (void *)objc_claimAutoreleasedReturnValue();
  v1296 = v930;
  v1292[4] = kQPQUOutputUnsafeConfidenceScoreKey;
  *(float *)&v931 = v145;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v931);
  v932 = (void *)objc_claimAutoreleasedReturnValue();
  v1288 = v932;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v1288, 1);
  v933 = (void *)objc_claimAutoreleasedReturnValue();
  v934 = (void *)v926;
  v1297 = v933;
  v1292[5] = kQPQUOutputTokenInfoKey;
  v935 = (void *)objc_msgSend(v957, "copy");
  v1292[6] = CFSTR("debugDescription");
  v1298 = v935;
  v1299 = obja;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v1293, v1292, 7);
  v936 = objc_claimAutoreleasedReturnValue();

  *(_QWORD *)v1309 = v936;
  CFRelease(cf);
  memset(v996, 0, sizeof(v996));
  std::vector<std::shared_ptr<QP::ParseAttribute>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>((char *)v996, (_QWORD *)v1284, *((_QWORD **)&v1284 + 1), (uint64_t)(*((_QWORD *)&v1284 + 1) - v1284) >> 4);
  QP::U2Parser::addArgActionstoTimeAttr((uint64_t *)v983, v996);
  *(_QWORD *)v1317 = v996;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1317);
  if (SBYTE7(v1314) < 0)
  {
    std::string::__init_copy_ctor_external(&v995, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
  }
  else
  {
    *(_OWORD *)&v995.__r_.__value_.__l.__data_ = __s;
    v995.__r_.__value_.__r.__words[2] = v1314;
  }
  memset(v994, 0, sizeof(v994));
  std::vector<std::shared_ptr<QP::ParseAttribute>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>((char *)v994, (_QWORD *)v1284, *((_QWORD **)&v1284 + 1), (uint64_t)(*((_QWORD *)&v1284 + 1) - v1284) >> 4);
  QP::U2Parser::mergeActionsforSearchtoolPersonalAnswers((uint64_t)v983, (uint64_t *)&v995, v994);
  *(_QWORD *)v1317 = v994;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1317);
  if (SHIBYTE(v995.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v995.__r_.__value_.__l.__data_);
  buf.location = (uint64_t)(*((_QWORD *)&v1284 + 1) - v1284) >> 4;
  *(_QWORD *)&v1263 = CFArrayGetCount(theArray);
  std::allocate_shared[abi:ne180100]<QP::Parse,std::allocator<QP::Parse>,nlp::CFScopedPtr<__CFString const*> &,unsigned long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,__CFDictionary const*&,void>(v986, &buf.location, (uint64_t *)&v1263, (_QWORD **)&v1284, (uint64_t *)v1309, v1317);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)v983 + 20, (__int128 *)v1317);
  CFRelease(theArray);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v1317);
LABEL_1380:

LABEL_1381:
  *(_QWORD *)v1317 = &v1306;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1317);

  if (SBYTE7(v1314) < 0)
    operator delete((void *)__s);
  *(_QWORD *)v1317 = &v1284;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1317);
LABEL_1384:
  v165 = v988;
LABEL_1385:

LABEL_1386:
LABEL_1387:

}

void sub_218E6443C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,void *a41,void *a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,_Unwind_Exception *exception_objecta,void *a60,uint64_t a61,void *a62,void *a63)
{
  void *v63;
  void *v64;
  void *v65;

  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0xB10]);
  _Block_object_dispose(&STACK[0x1040], 8);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](a29);

  STACK[0x1040] = (unint64_t)&STACK[0xEE0];
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x1040]);

  if (SLOBYTE(STACK[0x1017]) < 0)
    operator delete((void *)STACK[0x1000]);
  STACK[0x1040] = (unint64_t)&STACK[0xD60];
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x1040]);

  _Unwind_Resume(a1);
}

void QP::operator+(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;

  v3 = *a2;
  if (*a1)
  {
    if (v3)
    {
      v4 = a1[1];
      *(_QWORD *)&v19 = *a1;
      *((_QWORD *)&v19 + 1) = v4;
      if (v4)
      {
        v5 = (unint64_t *)(v4 + 8);
        do
          v6 = __ldxr(v5);
        while (__stxr(v6 + 1, v5));
        v3 = *a2;
      }
      v7 = a2[1];
      *(_QWORD *)&v18 = v3;
      *((_QWORD *)&v18 + 1) = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      QP::ParseAttribute::makeGroupAttribute(&v19, &v18, a3);
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
      if (*((_QWORD *)&v18 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
      if (*((_QWORD *)&v19 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    else
    {
      v17 = a1[1];
      *a3 = *a1;
      a3[1] = v17;
      *a1 = 0;
      a1[1] = 0;
    }
  }
  else
  {
    v16 = a2[1];
    *a3 = v3;
    a3[1] = v16;
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_218E656C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void QP::U2Parser::makePersonAttribute(QP::U2Parser *this@<X0>, CFRange a2@<0:X3, 8:X4>, const __CFString *a3@<X5>, const __CFString *a4@<X6>, unint64_t a5@<X2>, std::string **a6@<X8>)
{
  __int128 v11;
  std::string *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  char *v37;
  __int128 v38;
  int64x2_t v39;
  uint64_t v40;
  std::string *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  __int128 v45;
  std::string __str;
  __int128 v47;
  __int128 v48;
  void *__p[2];
  char v50;
  __int128 v51;
  CFRange v52;
  std::string v53;
  uint64_t v54;
  char *v55;

  v52 = a2;
  v51 = a5;
  LODWORD(v53.__r_.__value_.__l.__data_) = 0;
  LODWORD(__p[0]) = 0;
  LODWORD(v48) = 2;
  std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange &,int,int,QUIntentArgType,void>(&v51, (__int128 *)&v52.location, (int *)&v53, (int *)__p, (int *)&v48, a6);
  std::string::basic_string[abi:ne180100]<0>(__p, "Person");
  QP::getUTF8StringFromCFString(a4, &v53);
  std::allocate_shared[abi:ne180100]<QP::LexemeValue,std::allocator<QP::LexemeValue>,std::string &,std::string,CFRange &,void>((uint64_t)__p, (uint64_t)&v53, (uint64_t)&v52, &v48);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  v11 = v48;
  *(_WORD *)(v48 + 88) = 6;
  v12 = *a6;
  if (*((_QWORD *)&v11 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v15 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 16);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = (std::__shared_weak_count *)v12[4].__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12[4].__r_.__value_.__r.__words[1] = v11;
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  if (*((_QWORD *)&v11 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v11 + 1) + 16))(*((_QWORD *)&v11 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v11 + 1));
    }
  }
  v20 = v48;
  v47 = v48;
  v21 = *((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = *((_QWORD *)this + 25);
  v25 = (_QWORD *)*((_QWORD *)this + 24);
  if ((unint64_t)v25 >= v24)
  {
    v45 = v20;
    v27 = *((_QWORD *)this + 23);
    v28 = ((uint64_t)v25 - v27) >> 4;
    if ((unint64_t)(v28 + 1) >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v29 = v24 - v27;
    v30 = v29 >> 3;
    if (v29 >> 3 <= (unint64_t)(v28 + 1))
      v30 = v28 + 1;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v31 = 0xFFFFFFFFFFFFFFFLL;
    else
      v31 = v30;
    v55 = (char *)this + 200;
    v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)this + 200, v31);
    v34 = &v32[16 * v28];
    *(_OWORD *)v34 = v45;
    v36 = (_QWORD *)*((_QWORD *)this + 23);
    v35 = (_QWORD *)*((_QWORD *)this + 24);
    if (v35 == v36)
    {
      v39 = vdupq_n_s64((unint64_t)v35);
      v37 = &v32[16 * v28];
    }
    else
    {
      v37 = &v32[16 * v28];
      do
      {
        v38 = *((_OWORD *)v35 - 1);
        v35 -= 2;
        *((_OWORD *)v37 - 1) = v38;
        v37 -= 16;
        *v35 = 0;
        v35[1] = 0;
      }
      while (v35 != v36);
      v39 = *(int64x2_t *)((char *)this + 184);
    }
    v26 = v34 + 16;
    *((_QWORD *)this + 23) = v37;
    *((_QWORD *)this + 24) = v34 + 16;
    *(int64x2_t *)&v53.__r_.__value_.__r.__words[1] = v39;
    v40 = *((_QWORD *)this + 25);
    *((_QWORD *)this + 25) = &v32[16 * v33];
    v54 = v40;
    v53.__r_.__value_.__r.__words[0] = v39.i64[0];
    std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer((uint64_t)&v53);
  }
  else
  {
    *v25 = v20;
    v25[1] = v21;
    v26 = v25 + 2;
  }
  *((_QWORD *)this + 24) = v26;
  QP::getUTF8StringFromCFString(a3, &v53);
  v41 = *a6;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__str, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
  else
    __str = v53;
  std::string::operator=(v41 + 2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (v50 < 0)
    operator delete(__p[0]);
}

void sub_218E659D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;

  if (*(char *)(v28 - 65) < 0)
    operator delete(*(void **)(v28 - 88));
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  if (a27 < 0)
    operator delete(__p);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v27);
  _Unwind_Resume(a1);
}

void QP::U2Parser::makeVisualIdentifierAttribute(char **this@<X0>, CFRange a2@<0:X2, 8:X3>, const __CFDictionary *a3@<X4>, unint64_t a4@<X1>, uint64_t *a5@<X8>)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  const __CFString *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  std::vector<std::string>::pointer end;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  std::string *v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  std::__shared_weak_count *begin;
  unint64_t *p_size;
  unint64_t v43;
  __int128 v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::string *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  QP *v74;
  id obj;
  const __CFDictionary *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  std::string __str;
  void *__p[2];
  std::string::size_type v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  void *v90;
  char *v91;
  char *v92;
  std::vector<std::string> v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  __int128 v96;
  __int128 v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  CFRange v101;
  std::__split_buffer<std::string> __v;
  _BYTE v103[128];
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  v101 = a2;
  *a5 = 0;
  a5[1] = 0;
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v97 = 0uLL;
  v78 = a3;
  if (-[__CFDictionary count](v78, "count"))
  {
    v96 = a4;
    LODWORD(__v.__first_) = 0;
    LODWORD(v93.__begin_) = 0;
    LODWORD(v90) = 2;
    std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange &,int,int,QUIntentArgType,void>(&v96, (__int128 *)&v101.location, (int *)&__v, (int *)&v93, (int *)&v90, &v94);
    if (SHIBYTE(v100) < 0)
    {
      v99 = 14;
      v6 = (char *)v98;
    }
    else
    {
      HIBYTE(v100) = 14;
      v6 = (char *)&v98;
    }
    strcpy(v6, "GroundedPerson");
    memset(&v93, 0, sizeof(v93));
    v90 = 0;
    v91 = 0;
    v92 = 0;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    -[__CFDictionary allKeys](v78, "allKeys", kQPParseAttributeGroundedPersonKey);
    obj = (id)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v86, v103, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v87;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v87 != v8)
            objc_enumerationMutation(obj);
          v10 = *(const __CFString **)(*((_QWORD *)&v86 + 1) + 8 * i);
          -[__CFDictionary objectForKeyedSubscript:](v78, "objectForKeyedSubscript:", v10);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "firstObject");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "doubleValue");
          v14 = v13;

          objc_msgSend(v11, "lastObject");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "doubleValue");
          v17 = v16;

          QP::getUTF8StringFromCFString(v10, __p);
          end = v93.__end_;
          if (v93.__end_ >= v93.__end_cap_.__value_)
          {
            v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v93.__end_ - (char *)v93.__begin_) >> 3);
            v21 = v20 + 1;
            if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)v93.__end_cap_.__value_ - (char *)v93.__begin_) >> 3) > v21)
              v21 = 0x5555555555555556 * (((char *)v93.__end_cap_.__value_ - (char *)v93.__begin_) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v93.__end_cap_.__value_ - (char *)v93.__begin_) >> 3) >= 0x555555555555555)
              v22 = 0xAAAAAAAAAAAAAAALL;
            else
              v22 = v21;
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v93.__end_cap_;
            if (v22)
              v23 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v93.__end_cap_, v22);
            else
              v23 = 0;
            v24 = v23 + v20;
            __v.__first_ = v23;
            __v.__begin_ = v24;
            __v.__end_cap_.__value_ = &v23[v22];
            v25 = *(_OWORD *)__p;
            v24->__r_.__value_.__r.__words[2] = v85;
            *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
            __p[1] = 0;
            v85 = 0;
            __p[0] = 0;
            __v.__end_ = v24 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v93, &__v);
            v26 = v93.__end_;
            std::__split_buffer<std::string>::~__split_buffer(&__v);
            v93.__end_ = v26;
            if (SHIBYTE(v85) < 0)
              operator delete(__p[0]);
          }
          else
          {
            v19 = *(_OWORD *)__p;
            v93.__end_->__r_.__value_.__r.__words[2] = v85;
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v19;
            v93.__end_ = end + 1;
          }
          v27 = v91;
          if (v91 >= v92)
          {
            v29 = (char *)v90;
            v30 = (v91 - (_BYTE *)v90) >> 4;
            v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 60)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v32 = v92 - (_BYTE *)v90;
            if ((v92 - (_BYTE *)v90) >> 3 > v31)
              v31 = v32 >> 3;
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
              v33 = 0xFFFFFFFFFFFFFFFLL;
            else
              v33 = v31;
            if (v33)
            {
              v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)&v92, v33);
              v29 = (char *)v90;
              v27 = v91;
            }
            else
            {
              v34 = 0;
            }
            v35 = &v34[16 * v30];
            *(_QWORD *)v35 = v14;
            *((_QWORD *)v35 + 1) = v17;
            v36 = v35;
            if (v27 != v29)
            {
              do
              {
                *((_OWORD *)v36 - 1) = *((_OWORD *)v27 - 1);
                v36 -= 16;
                v27 -= 16;
              }
              while (v27 != v29);
              v29 = (char *)v90;
            }
            v28 = v35 + 16;
            v90 = v36;
            v91 = v35 + 16;
            v92 = &v34[16 * v33];
            if (v29)
              operator delete(v29);
          }
          else
          {
            *(_QWORD *)v91 = v14;
            *((_QWORD *)v27 + 1) = v17;
            v28 = v27 + 16;
          }
          v91 = v28;

        }
        v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v86, v103, 16);
      }
      while (v7);
    }

    std::allocate_shared[abi:ne180100]<QP::LexemeGroundedPerson,std::allocator<QP::LexemeGroundedPerson>,std::string &,std::vector<std::string> &,std::vector<std::pair<double,double>> &,CFRange &,void>((uint64_t)&v98, (__int128 **)&v93, (__int128 **)&v90, (uint64_t)&v101, &__v);
    v37 = *(_OWORD *)&__v.__first_;
    __v.__first_ = 0;
    __v.__begin_ = 0;
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
    v97 = v37;
    if (v38)
    {
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldaxr(p_shared_owners);
      while (__stlxr(v40 - 1, p_shared_owners));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    begin = (std::__shared_weak_count *)__v.__begin_;
    if (__v.__begin_)
    {
      p_size = &__v.__begin_->__r_.__value_.__l.__size_;
      do
        v43 = __ldaxr(p_size);
      while (__stlxr(v43 - 1, p_size));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))begin->__on_zero_shared)(begin);
        std::__shared_weak_count::__release_weak(begin);
      }
    }
    v44 = v97;
    *(_WORD *)(v97 + 88) = 16;
    v45 = v94;
    if (*((_QWORD *)&v44 + 1))
    {
      v46 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
      v48 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 16);
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    v50 = *(std::__shared_weak_count **)(v45 + 112);
    *(_OWORD *)(v45 + 104) = v44;
    if (v50)
      std::__shared_weak_count::__release_weak(v50);
    if (*((_QWORD *)&v44 + 1))
    {
      v51 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v44 + 1) + 16))(*((_QWORD *)&v44 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v44 + 1));
      }
    }
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100](this + 23, &v97);
    QP::getUTF8StringFromCFString((const __CFString *)v74, &__v);
    v53 = (std::string *)v94;
    if (SHIBYTE(__v.__end_) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)__v.__first_, (std::string::size_type)__v.__begin_);
    }
    else
    {
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&__v.__first_;
      __str.__r_.__value_.__r.__words[2] = (std::string::size_type)__v.__end_;
    }
    std::string::operator=(v53 + 2, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v54 = (std::__shared_weak_count *)a5[1];
    v81 = *a5;
    v82 = v54;
    if (v54)
    {
      v55 = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    v79 = v94;
    v80 = v95;
    if (v95)
    {
      v57 = (unint64_t *)&v95->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
    }
    QP::operator+(&v81, &v79, __p);
    std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)a5, (__int128 *)__p);
    v59 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v60 = (unint64_t *)((char *)__p[1] + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    v62 = v80;
    if (v80)
    {
      v63 = (unint64_t *)&v80->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    v65 = v82;
    if (v82)
    {
      v66 = (unint64_t *)&v82->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    if (v90)
    {
      v91 = (char *)v90;
      operator delete(v90);
    }
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v93;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    v68 = v95;
    if (v95)
    {
      v69 = (unint64_t *)&v95->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
  }

  v71 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
  if (*((_QWORD *)&v97 + 1))
  {
    v72 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (SHIBYTE(v100) < 0)
    operator delete(v98);
}

void sub_218E6619C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a59 < 0)
    operator delete(__p);
  if (a33)
  {
    a34 = (uint64_t)a33;
    operator delete(a33);
  }
  a33 = &a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a39);

  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  if (a51 < 0)
    operator delete(a46);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](a11);
  _Unwind_Resume(a1);
}

void QP::U2Parser::makeIdentifierAttribute(char **this@<X0>, CFRange a2@<0:X3, 8:X4>, CFStringRef theString1@<X5>, const __CFArray *a4@<X6>, const __CFArray *a5@<X7>, unint64_t a6@<X2>, uint64_t *a7@<X8>)
{
  const __CFArray *v14;
  char *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *size;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::string *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  const __CFArray *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t i;
  const __CFString *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  const __CFArray *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t j;
  const __CFString *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  const __CFArray *v87;
  std::string *v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  std::string *v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  __int128 v108;
  std::string __str;
  std::string __p;
  int v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  __int128 v114;
  __int128 v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  CFRange v119;
  _BYTE v120[128];
  _BYTE v121[128];
  uint64_t v122;

  v122 = *MEMORY[0x24BDAC8D0];
  v119 = a2;
  *a7 = 0;
  a7[1] = 0;
  if (CFStringsAreEqual(theString1, kQPParseAttributePersonKey)
    || CFStringsAreEqual(theString1, kQPParseAttributeSenderKey)
    || CFStringsAreEqual(theString1, kQPParseAttributeRecipientKey)
    || CFStringsAreEqual(theString1, kQPParseAttributeTaggedPersonKey)
    || CFStringsAreEqual(theString1, kQPParseAttributeSenderHandleKey)
    || CFStringsAreEqual(theString1, kQPParseAttributeRecipientHandleKey))
  {
    v116 = 0;
    v117 = 0;
    v118 = 0;
    v115 = 0uLL;
    v87 = a4;
    v14 = a5;
    v114 = a6;
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    LODWORD(v108) = 0;
    v111 = 2;
    std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange &,int,int,QUIntentArgType,void>(&v114, (__int128 *)&v119.location, (int *)&__p, (int *)&v108, &v111, &v112);
    if (SHIBYTE(v118) < 0)
    {
      v117 = 12;
      v15 = (char *)v116;
    }
    else
    {
      HIBYTE(v118) = 12;
      v15 = (char *)&v116;
    }
    strcpy(v15, "TaggedPerson");
    std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&v116, (uint64_t)&v119, &__p);
    v16 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
    v115 = v16;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v21 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v23 = v112;
    v24 = v115;
    if (*((_QWORD *)&v115 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      v27 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 16);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v29 = *(std::__shared_weak_count **)(v23 + 112);
    *(_OWORD *)(v23 + 104) = v24;
    if (v29)
      std::__shared_weak_count::__release_weak(v29);
    if (*((_QWORD *)&v24 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v24 + 1) + 16))(*((_QWORD *)&v24 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v24 + 1));
      }
    }
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100](this + 23, &v115);
    QP::getUTF8StringFromCFString(theString1, &__p);
    v32 = (std::string *)v112;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      __str = __p;
    std::string::operator=(v32 + 2, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v33 = (std::__shared_weak_count *)a7[1];
    v106 = *a7;
    v107 = v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v104 = v112;
    v105 = v113;
    if (v113)
    {
      v36 = (unint64_t *)&v113->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    QP::operator+(&v106, &v104, &v108);
    std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)a7, &v108);
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
    if (*((_QWORD *)&v108 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = v105;
    if (v105)
    {
      v42 = (unint64_t *)&v105->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = v107;
    if (v107)
    {
      v45 = (unint64_t *)&v107->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    if (-[__CFArray count](v87, "count"))
    {
      v102 = 0u;
      v103 = 0u;
      v100 = 0u;
      v101 = 0u;
      v47 = v87;
      v48 = -[__CFArray countByEnumeratingWithState:objects:count:](v47, "countByEnumeratingWithState:objects:count:", &v100, v121, 16);
      if (v48)
      {
        v49 = *(_QWORD *)v101;
        do
        {
          for (i = 0; i != v48; ++i)
          {
            if (*(_QWORD *)v101 != v49)
              objc_enumerationMutation(v47);
            v51 = *(const __CFString **)(*((_QWORD *)&v100 + 1) + 8 * i);
            v52 = (std::__shared_weak_count *)a7[1];
            v98 = *a7;
            v99 = v52;
            if (v52)
            {
              v53 = (unint64_t *)&v52->__shared_owners_;
              do
                v54 = __ldxr(v53);
              while (__stxr(v54 + 1, v53));
            }
            QP::U2Parser::makePersonAttribute((QP::U2Parser *)this, v119, theString1, v51, a6, &v96);
            QP::operator+(&v98, (uint64_t *)&v96, &v108);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)a7, &v108);
            v55 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
            if (*((_QWORD *)&v108 + 1))
            {
              v56 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
            v58 = v97;
            if (v97)
            {
              v59 = (unint64_t *)&v97->__shared_owners_;
              do
                v60 = __ldaxr(v59);
              while (__stlxr(v60 - 1, v59));
              if (!v60)
              {
                ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                std::__shared_weak_count::__release_weak(v58);
              }
            }
            v61 = v99;
            if (v99)
            {
              v62 = (unint64_t *)&v99->__shared_owners_;
              do
                v63 = __ldaxr(v62);
              while (__stlxr(v63 - 1, v62));
              if (!v63)
              {
                ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                std::__shared_weak_count::__release_weak(v61);
              }
            }
          }
          v48 = -[__CFArray countByEnumeratingWithState:objects:count:](v47, "countByEnumeratingWithState:objects:count:", &v100, v121, 16);
        }
        while (v48);
      }

    }
    if (-[__CFArray count](v14, "count"))
    {
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      v64 = v14;
      v65 = -[__CFArray countByEnumeratingWithState:objects:count:](v64, "countByEnumeratingWithState:objects:count:", &v92, v120, 16);
      if (v65)
      {
        v66 = *(_QWORD *)v93;
        do
        {
          for (j = 0; j != v65; ++j)
          {
            if (*(_QWORD *)v93 != v66)
              objc_enumerationMutation(v64);
            v68 = *(const __CFString **)(*((_QWORD *)&v92 + 1) + 8 * j);
            v69 = (std::__shared_weak_count *)a7[1];
            v90 = *a7;
            v91 = v69;
            if (v69)
            {
              v70 = (unint64_t *)&v69->__shared_owners_;
              do
                v71 = __ldxr(v70);
              while (__stxr(v71 + 1, v70));
            }
            QP::U2Parser::makePersonAttribute((QP::U2Parser *)this, v119, theString1, v68, a6, &v88);
            QP::operator+(&v90, (uint64_t *)&v88, &v108);
            std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)a7, &v108);
            v72 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
            if (*((_QWORD *)&v108 + 1))
            {
              v73 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
              do
                v74 = __ldaxr(v73);
              while (__stlxr(v74 - 1, v73));
              if (!v74)
              {
                ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                std::__shared_weak_count::__release_weak(v72);
              }
            }
            v75 = v89;
            if (v89)
            {
              v76 = (unint64_t *)&v89->__shared_owners_;
              do
                v77 = __ldaxr(v76);
              while (__stlxr(v77 - 1, v76));
              if (!v77)
              {
                ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                std::__shared_weak_count::__release_weak(v75);
              }
            }
            v78 = v91;
            if (v91)
            {
              v79 = (unint64_t *)&v91->__shared_owners_;
              do
                v80 = __ldaxr(v79);
              while (__stlxr(v80 - 1, v79));
              if (!v80)
              {
                ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                std::__shared_weak_count::__release_weak(v78);
              }
            }
          }
          v65 = -[__CFArray countByEnumeratingWithState:objects:count:](v64, "countByEnumeratingWithState:objects:count:", &v92, v120, 16);
        }
        while (v65);
      }

    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v81 = v113;
    if (v113)
    {
      v82 = (unint64_t *)&v113->__shared_owners_;
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }

    v84 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
    if (*((_QWORD *)&v115 + 1))
    {
      v85 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    if (SHIBYTE(v118) < 0)
      operator delete(v116);
  }
}

void sub_218E66AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t v63;
  void *v64;
  void *v65;

  if (a50 < 0)
    operator delete(__p);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a52);

  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a56);
  if (a63 < 0)
    operator delete(a58);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v63);
  _Unwind_Resume(a1);
}

void QP::U2Parser::makeAttribute(uint64_t a1@<X0>, const __CFString *a2@<X1>, unint64_t a3@<X2>, CFIndex a4@<X3>, CFIndex a5@<X4>, __CFString *a6@<X5>, const std::string **a7@<X6>, int a8@<W7>, std::string **a9@<X8>)
{
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  std::string *v21;
  std::string *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_size;
  unint64_t v25;
  unint64_t *p_shared_weak_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::string *v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::string *v42;
  std::string *v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  std::string *v49;
  std::string *v50;
  std::string *v51;
  std::string *v52;
  __int16 v53;
  std::string *v54;
  std::string *v55;
  std::string *v56;
  std::string *v57;
  std::string *v58;
  std::string *v59;
  std::string *v60;
  std::string *v61;
  std::string *v62;
  const __CFAllocator *v63;
  CFDateFormatterRef ISO8601Formatter;
  CFAbsoluteTime CurrentTime;
  CFDateRef v66;
  const __CFString *StringWithDate;
  std::string __p;
  CFDateRef v69;
  CFDateFormatterRef formatter;
  std::string v71;
  __int128 v72;
  std::string *__str[2];
  std::string v74;
  __int128 v75;
  int v76;
  __CFString *v77;
  CFRange v78;

  v78.location = a4;
  v78.length = a5;
  v77 = a6;
  v76 = a8;
  v75 = a3;
  LODWORD(v74.__r_.__value_.__l.__data_) = 0;
  LODWORD(v71.__r_.__value_.__l.__data_) = 0;
  std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange &,int,int,QUIntentArgType &,void>(&v75, (__int128 *)&v78.location, (int *)&v74, (int *)&v71, &v76, a9);
  memset(&v74, 0, sizeof(v74));
  __str[0] = 0;
  __str[1] = 0;
  if (CFStringsAreEqual(a6, kQPParseAttributeKindKey))
  {
    QP::U2Parser::lexemeForArgMediaTypeWithRange((QP::U2Parser *)a1, a2, v78, (const __CFString **)&v77, &v71);
    v14 = *(_OWORD *)&v71.__r_.__value_.__l.__data_;
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = 0uLL;
    v15 = (std::__shared_weak_count *)__str[1];
    *(_OWORD *)__str = v14;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    size = (std::__shared_weak_count *)v71.__r_.__value_.__l.__size_;
    if (v71.__r_.__value_.__l.__size_)
    {
      v19 = (unint64_t *)(v71.__r_.__value_.__l.__size_ + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    std::string::operator=(&v74, __str[0]);
    goto LABEL_13;
  }
  if (CFStringsAreEqual(a6, kQPParseAttributeKeywordKey))
  {
    std::string::__assign_external(&v74, (const std::string::value_type *)QP::kLexemeTextType);
    std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&v74, (uint64_t)&v78, &v71);
    v32 = *(_OWORD *)&v71.__r_.__value_.__l.__data_;
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = 0uLL;
    v33 = (std::__shared_weak_count *)__str[1];
    *(_OWORD *)__str = v32;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = (std::__shared_weak_count *)v71.__r_.__value_.__l.__size_;
    if (v71.__r_.__value_.__l.__size_)
    {
      v37 = (unint64_t *)(v71.__r_.__value_.__l.__size_ + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      goto LABEL_36;
    }
    goto LABEL_13;
  }
  if (CFStringsAreEqual(a6, kQPParseAttributeDateKey))
  {
    std::string::operator=(&v74, *a7);
    std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](__str, (uint64_t *)a7);
    goto LABEL_13;
  }
  if (!CFStringsAreEqual(a6, kQPParseAttributeFavoritedKey))
  {
    if (CFStringsAreEqual(a6, kQPParseAttributeSentKey))
    {
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      {
        v74.__r_.__value_.__l.__size_ = 10;
        v43 = (std::string *)v74.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&v74.__r_.__value_.__s + 23) = 10;
        v43 = &v74;
      }
      strcpy((char *)v43, "SentAction");
      std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&v74, (uint64_t)&v78, &v71);
      goto LABEL_79;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeReceivedKey))
    {
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      {
        v74.__r_.__value_.__l.__size_ = 14;
        v49 = (std::string *)v74.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&v74.__r_.__value_.__s + 23) = 14;
        v49 = &v74;
      }
      strcpy((char *)v49, "ReceivedAction");
      std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&v74, (uint64_t)&v78, &v71);
      goto LABEL_79;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeFlaggedKey))
    {
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      {
        v74.__r_.__value_.__l.__size_ = 13;
        v50 = (std::string *)v74.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&v74.__r_.__value_.__s + 23) = 13;
        v50 = &v74;
      }
      strcpy((char *)v50, "FlaggedStatus");
      std::allocate_shared[abi:ne180100]<QP::LexemeStatus,std::allocator<QP::LexemeStatus>,std::string &,char const*&,CFRange &,void>((uint64_t)&v74, QP::kActive, (uint64_t)&v78, &v71);
LABEL_89:
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)__str, (__int128 *)&v71);
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&v71);
LABEL_90:
      v52 = __str[0];
      v53 = 5;
LABEL_91:
      LOWORD(v52[3].__r_.__value_.__r.__words[2]) = v53;
      goto LABEL_13;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeSharedKey))
    {
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      {
        v74.__r_.__value_.__l.__size_ = 12;
        v51 = (std::string *)v74.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&v74.__r_.__value_.__s + 23) = 12;
        v51 = &v74;
      }
      strcpy((char *)v51, "SharedStatus");
      std::allocate_shared[abi:ne180100]<QP::LexemeStatus,std::allocator<QP::LexemeStatus>,std::string &,char const*&,CFRange &,void>((uint64_t)&v74, QP::kActive, (uint64_t)&v78, &v71);
      goto LABEL_89;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeTaggedKey))
    {
      QP::U2Parser::lexemeForTokenWithRange((QP::U2Parser *)a1, a2, v78, (const __CFString **)&v77, CFSTR("Tag"), CFSTR("Status"), &v71);
      goto LABEL_79;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeFlagColorKey))
    {
      QP::U2Parser::lexemeForTokenWithRange((QP::U2Parser *)a1, a2, v78, (const __CFString **)&v77, CFSTR("Flag"), CFSTR("Status"), &v71);
      goto LABEL_79;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeTagColorKey))
    {
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      {
        v74.__r_.__value_.__l.__size_ = 14;
        v54 = (std::string *)v74.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&v74.__r_.__value_.__s + 23) = 14;
        v54 = &v74;
      }
      strcpy((char *)v54, "TagColorStatus");
      QP::getUTF8StringFromCFString(a2, &v71);
      std::allocate_shared[abi:ne180100]<QP::LexemeValue,std::allocator<QP::LexemeValue>,std::string &,std::string,CFRange &,void>((uint64_t)&v74, (uint64_t)&v71, (uint64_t)&v78, &v72);
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)__str, &v72);
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&v72);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      goto LABEL_90;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeRepliedKey))
    {
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      {
        v74.__r_.__value_.__l.__size_ = 13;
        v55 = (std::string *)v74.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&v74.__r_.__value_.__s + 23) = 13;
        v55 = &v74;
      }
      strcpy((char *)v55, "RepliedStatus");
      std::allocate_shared[abi:ne180100]<QP::LexemeStatus,std::allocator<QP::LexemeStatus>,std::string &,char const*&,CFRange &,void>((uint64_t)&v74, QP::kActive, (uint64_t)&v78, &v71);
      goto LABEL_89;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeGroupActionKey))
    {
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      {
        v74.__r_.__value_.__l.__size_ = 11;
        v56 = (std::string *)v74.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&v74.__r_.__value_.__s + 23) = 11;
        v56 = &v74;
      }
      strcpy((char *)v56, "GroupStatus");
      std::allocate_shared[abi:ne180100]<QP::LexemeStatus,std::allocator<QP::LexemeStatus>,std::string &,char const*&,CFRange &,void>((uint64_t)&v74, QP::kActive, (uint64_t)&v78, &v71);
      goto LABEL_89;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeReadKey))
    {
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      {
        v74.__r_.__value_.__l.__size_ = 10;
        v57 = (std::string *)v74.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&v74.__r_.__value_.__s + 23) = 10;
        v57 = &v74;
      }
      strcpy((char *)v57, "ReadStatus");
      std::allocate_shared[abi:ne180100]<QP::LexemeStatus,std::allocator<QP::LexemeStatus>,std::string &,char const*&,CFRange &,void>((uint64_t)&v74, QP::kActive, (uint64_t)&v78, &v71);
      goto LABEL_89;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeUnreadKey))
    {
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      {
        v74.__r_.__value_.__l.__size_ = 10;
        v58 = (std::string *)v74.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&v74.__r_.__value_.__s + 23) = 10;
        v58 = &v74;
      }
      strcpy((char *)v58, "ReadStatus");
      std::allocate_shared[abi:ne180100]<QP::LexemeStatus,std::allocator<QP::LexemeStatus>,std::string &,char const*&,CFRange &,void>((uint64_t)&v74, QP::kInactive, (uint64_t)&v78, &v71);
      goto LABEL_89;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeAttachmentKey))
    {
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      {
        v74.__r_.__value_.__l.__size_ = 10;
        v59 = (std::string *)v74.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&v74.__r_.__value_.__s + 23) = 10;
        v59 = &v74;
      }
      strcpy((char *)v59, "Attachment");
      std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&v74, (uint64_t)&v78, &v71);
      goto LABEL_79;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeAttachedKindKey))
    {
      QP::U2Parser::lexemeForTokenWithRange((QP::U2Parser *)a1, a2, v78, (const __CFString **)&v77, CFSTR("Kind"), &stru_24DA27910, &v71);
      goto LABEL_79;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeAttachedNameKey))
    {
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      {
        v74.__r_.__value_.__l.__size_ = 12;
        v60 = (std::string *)v74.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&v74.__r_.__value_.__s + 23) = 12;
        v60 = &v74;
      }
      strcpy((char *)v60, "AttachedName");
      QP::getUTF8StringFromCFString(a2, &v71);
      std::allocate_shared[abi:ne180100]<QP::LexemeValue,std::allocator<QP::LexemeValue>,std::string &,std::string,CFRange &,void>((uint64_t)&v74, (uint64_t)&v71, (uint64_t)&v78, &v72);
      goto LABEL_134;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeTransportActionKey))
    {
LABEL_131:
      std::string::__assign_external(&v74, (const std::string::value_type *)QP::kLexemeTextType);
      QP::getUTF8StringFromCFString(a2, &v71);
      std::allocate_shared[abi:ne180100]<QP::LexemeValue,std::allocator<QP::LexemeValue>,std::string &,std::string,CFRange &,void>((uint64_t)&v74, (uint64_t)&v71, (uint64_t)&v78, &v72);
LABEL_134:
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)__str, &v72);
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&v72);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      v52 = __str[0];
      v53 = 6;
      goto LABEL_91;
    }
    if (!CFStringsAreEqual(a6, kQPParseAttributePrintedActionKey)
      && !CFStringsAreEqual(a6, kQPParseAttributeCreatedActionKey)
      && !CFStringsAreEqual(a6, kQPParseAttributeModifiedActionKey))
    {
      if (CFStringsAreEqual(a6, kQPParseAttributeTitleKey))
        goto LABEL_131;
      if (!CFStringsAreEqual(a6, kQPParseAttributeFlightActionKey)
        && !CFStringsAreEqual(a6, kQPParseAttributeHotelActionKey))
      {
        if (CFStringsAreEqual(a6, kQPParseAttributeFlightArrivalLocationKey)
          || CFStringsAreEqual(a6, kQPParseAttributeFlightDepartureLocationKey))
        {
          QP::U2Parser::lexemeForTokenWithRange((QP::U2Parser *)a1, a2, v78, (const __CFString **)&v77, &stru_24DA27910, &stru_24DA27910, &v71);
          goto LABEL_79;
        }
        if (!CFStringsAreEqual(a6, kQPParseAttributeFlightCarrierKey)
          && !CFStringsAreEqual(a6, kQPParseAttributeFlightLocationKey)
          && !CFStringsAreEqual(a6, kQPParseAttributeHotelNameKey)
          && !CFStringsAreEqual(a6, kQPParseAttributeHotelProviderKey)
          && !CFStringsAreEqual(a6, kQPParseAttributeRestaurantActionKey)
          && !CFStringsAreEqual(a6, kQPParseAttributeRestaurantNameKey))
        {
          if (!CFStringsAreEqual(a6, kQPParseAttributeBookmarkedActionKey)
            && !CFStringsAreEqual(a6, kQPParseAttributeBrowsedActionKey)
            && !CFStringsAreEqual(a6, kQPParseAttributeReadingListActionKey))
          {
            if (CFStringsAreEqual(a6, kQPParseAttributeEventKindKey))
            {
              if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
              {
                v74.__r_.__value_.__l.__size_ = 9;
                v61 = (std::string *)v74.__r_.__value_.__r.__words[0];
              }
              else
              {
                *((_BYTE *)&v74.__r_.__value_.__s + 23) = 9;
                v61 = &v74;
              }
              strcpy((char *)v61, "EventKind");
              std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&v74, (uint64_t)&v78, &v71);
              goto LABEL_79;
            }
            if (CFStringsAreEqual(a6, kQPParseAttributeKindReminderKey))
            {
              if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
              {
                v74.__r_.__value_.__l.__size_ = 12;
                v62 = (std::string *)v74.__r_.__value_.__r.__words[0];
              }
              else
              {
                *((_BYTE *)&v74.__r_.__value_.__s + 23) = 12;
                v62 = &v74;
              }
              strcpy((char *)v62, "ReminderKind");
              std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&v74, (uint64_t)&v78, &v71);
              goto LABEL_79;
            }
            if (!CFStringsAreEqual(a6, kQPParseAttributeAllDayActionKey)
              && !CFStringsAreEqual(a6, kQPParseAttributeCompletedActionKey)
              && !CFStringsAreEqual(a6, kQPParseAttributeDueActionKey)
              && !CFStringsAreEqual(a6, kQPParseAttributeDraftActionKey)
              && !CFStringsAreEqual(a6, kQPParseAttributeJunkActionKey)
              && !CFStringsAreEqual(a6, kQPParseAttributeArchiveActionKey))
            {
              if (CFStringsAreEqual(a6, kQPParseAttributeEarliestActionKey)
                || CFStringsAreEqual(a6, kQPParseAttributeLatestActionKey))
              {
                formatter = 0;
                v63 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
                ISO8601Formatter = CFDateFormatterCreateISO8601Formatter((CFAllocatorRef)*MEMORY[0x24BDBD240], 0x333uLL);
                nlp::CFScopedPtr<__CFDateFormatter *>::reset((const void **)&formatter, ISO8601Formatter);
                CurrentTime = getCurrentTime(*(__CFCalendar **)(*(_QWORD *)(a1 + 80) + 88), *(const __CFDate **)(*(_QWORD *)(a1 + 80) + 72));
                v66 = CFDateCreate(v63, CurrentTime);
                v69 = v66;
                if (v66)
                {
                  StringWithDate = CFDateFormatterCreateStringWithDate(v63, formatter, v66);
                  if (StringWithDate)
                  {
                    std::string::__assign_external(&v74, (const std::string::value_type *)QP::kLexemeTextType);
                    QP::getUTF8StringFromCFString(StringWithDate, &v71);
                    std::allocate_shared[abi:ne180100]<QP::LexemeValue,std::allocator<QP::LexemeValue>,std::string &,std::string,CFRange &,void>((uint64_t)&v74, (uint64_t)&v71, (uint64_t)&v78, &v72);
                    std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)__str, &v72);
                    std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&v72);
                    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v71.__r_.__value_.__l.__data_);
                    LOWORD(__str[0][3].__r_.__value_.__r.__words[2]) = 6;
                  }
                }
                nlp::CFScopedPtr<__CFDate const*>::reset((const void **)&v69, 0);
                nlp::CFScopedPtr<__CFDateFormatter *>::reset((const void **)&formatter, 0);
              }
              goto LABEL_13;
            }
          }
          std::string::__assign_external(&v74, (const std::string::value_type *)QP::kLexemeTextType);
          std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&v74, (uint64_t)&v78, &v71);
LABEL_79:
          std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)__str, (__int128 *)&v71);
          std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&v71);
          goto LABEL_13;
        }
        goto LABEL_131;
      }
    }
    QP::U2Parser::lexemeForTokenWithRange((QP::U2Parser *)a1, a2, v78, (const __CFString **)&v77, CFSTR("Action"), &stru_24DA27910, &v71);
    goto LABEL_79;
  }
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
  {
    v74.__r_.__value_.__l.__size_ = 15;
    v42 = (std::string *)v74.__r_.__value_.__r.__words[0];
  }
  else
  {
    *((_BYTE *)&v74.__r_.__value_.__s + 23) = 15;
    v42 = &v74;
  }
  strcpy((char *)v42, "FavoritedAction");
  std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&v74, (uint64_t)&v78, &v71);
  v44 = *(_OWORD *)&v71.__r_.__value_.__l.__data_;
  *(_OWORD *)&v71.__r_.__value_.__l.__data_ = 0uLL;
  v45 = (std::__shared_weak_count *)__str[1];
  *(_OWORD *)__str = v44;
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v36 = (std::__shared_weak_count *)v71.__r_.__value_.__l.__size_;
  if (v71.__r_.__value_.__l.__size_)
  {
    v48 = (unint64_t *)(v71.__r_.__value_.__l.__size_ + 8);
    do
      v38 = __ldaxr(v48);
    while (__stlxr(v38 - 1, v48));
LABEL_36:
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
LABEL_13:
  v21 = *a9;
  v22 = __str[0];
  v23 = (std::__shared_weak_count *)__str[1];
  if (__str[1])
  {
    p_size = &__str[1]->__r_.__value_.__l.__size_;
    do
      v25 = __ldxr(p_size);
    while (__stxr(v25 + 1, p_size));
    p_shared_weak_owners = (unint64_t *)&v23->__shared_weak_owners_;
    do
      v27 = __ldxr(p_shared_weak_owners);
    while (__stxr(v27 + 1, p_shared_weak_owners));
  }
  v28 = (std::__shared_weak_count *)v21[4].__r_.__value_.__r.__words[2];
  v21[4].__r_.__value_.__l.__size_ = (std::string::size_type)v22;
  v21[4].__r_.__value_.__r.__words[2] = (std::string::size_type)v23;
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  if (v23)
  {
    v29 = (unint64_t *)&v23->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((char **)(a1 + 184), (__int128 *)__str);
  QP::getUTF8StringFromCFString(v77, &v71);
  v31 = *a9;
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
  else
    __p = v71;
  std::string::operator=(v31 + 2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  v39 = (std::__shared_weak_count *)__str[1];
  if (__str[1])
  {
    v40 = &__str[1]->__r_.__value_.__l.__size_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
}

void sub_218E67D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, const void *a16, const void *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (a23 < 0)
    operator delete(__p);
  nlp::CFScopedPtr<__CFDate const*>::reset(&a16, 0);
  nlp::CFScopedPtr<__CFDateFormatter *>::reset(&a17, 0);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  if (a34 < 0)
    operator delete(a29);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v34);
  _Unwind_Resume(a1);
}

BOOL QP::U2Parser::isIntentUnsafe(QP::U2Parser *this)
{
  unint64_t v1;
  BOOL v2;
  _BOOL8 v3;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v1 = __ROR8__(*(_QWORD *)(*((_QWORD *)this + 10) + 8), 1);
  v2 = *(_QWORD *)(*((_QWORD *)this + 10) + 8) == 9 || v1 >= 7;
  if (v2 || ((0x71u >> v1) & 1) == 0)
  {
    v5[0] = MEMORY[0x24BDAC760];
    v5[1] = 3221225472;
    v5[2] = ___ZN2QP8U2Parser14isIntentUnsafeEv_block_invoke;
    v5[3] = &unk_24DA25DD8;
    v5[4] = &v6;
    QP::U2Parser::enumerateParses((uint64_t)this, v5);
    v3 = *((_BYTE *)v7 + 24) != 0;
  }
  else
  {
    v3 = 0;
  }
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_218E67F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void QP::U2Parser::enumerateParses(uint64_t a1, void *a2)
{
  void (**v3)(id, uint64_t *, char *);
  uint64_t *v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  char v15;

  v3 = a2;
  v15 = 0;
  v4 = *(uint64_t **)(a1 + 160);
  v5 = *(uint64_t **)(a1 + 168);
  if (v4 != v5)
  {
    do
    {
      v6 = (std::__shared_weak_count *)v4[1];
      v13 = *v4;
      v14 = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      v3[2](v3, &v13, &v15);
      v9 = v14;
      if (v14)
      {
        v10 = (unint64_t *)&v14->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v4 += 2;
      if (v15)
        v12 = 1;
      else
        v12 = v4 == v5;
    }
    while (!v12);
  }

}

void sub_218E6800C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void QP::U2Parser::clear(const void **this)
{
  uint64_t i;
  const void *v3;
  uint64_t j;
  const void *v5;
  _QWORD *v6;
  _QWORD *v7;

  nlp::CFScopedPtr<__CFString const*>::reset(this + 19, 0);
  v3 = this[20];
  for (i = (uint64_t)this[21];
        (const void *)i != v3;
  this[21] = v3;
  v5 = this[23];
  for (j = (uint64_t)this[24];
        (const void *)j != v5;
  v7 = this[17];
  v6 = this + 17;
  v6[7] = v5;
  std::__tree<unsigned short>::destroy((uint64_t)(v6 - 1), v7);
  *(v6 - 1) = v6;
  *v6 = 0;
  v6[1] = 0;
}

unint64_t QPTimingNanosecondsSinceAbsoluteTime(uint64_t a1)
{
  uint64_t v2;

  v2 = mach_absolute_time();
  if (QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::onceToken != -1)
    dispatch_once(&QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::onceToken, &__block_literal_global_183);
  return (v2 - a1)
       * QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::sTimebaseInfo
       / *(unsigned int *)algn_253D1B614;
}

uint64_t QP::tokenHasArgIdWithScore(void *a1, uint64_t a2, int a3, float a4)
{
  id v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  unint64_t v12;
  char v13;
  void *v14;
  void *v15;
  void *v16;
  float v17;
  float v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  uint64_t v23;

  v7 = a1;
  v8 = 0;
  while (1)
  {
    v9 = v8;
    objc_msgSend(v7, "argIdsForTokens");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "objectAtIndexedSubscript:", a2);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "count");

    if (v12 <= v9)
      break;
    if (v9)
    {
      objc_msgSend(v7, "argScoresForTokens");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "objectAtIndexedSubscript:", a2);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "objectAtIndexedSubscript:", v9);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "floatValue");
      v18 = v17;

      if (v18 < a4)
      {
        v13 = 0;
        break;
      }
    }
    objc_msgSend(v7, "argIdsForTokens");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "objectAtIndexedSubscript:", a2);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "objectAtIndexedSubscript:", v9);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "intValue");

    v8 = v9 + 1;
    if (v22 == a3)
    {
      v13 = 1;
      break;
    }
  }
  v23 = (v12 > v9) & v13;

  return v23;
}

void sub_218E682A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id QP::visualIdentifiersWithTimeout(void *a1, uint64_t a2, char a3, _QWORD *a4, _QWORD *a5)
{
  id v9;
  dispatch_semaphore_t v10;
  qos_class_t v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  id v16;
  NSObject *v17;
  dispatch_time_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t block;
  uint64_t v30;
  void (*v31)(uint64_t);
  void *v32;
  id v33;
  NSObject *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  void (*v46)(uint64_t);
  id v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t);
  void (*v52)(uint64_t);
  id v53;
  uint64_t v54;
  _QWORD v55[2];

  v55[1] = *MEMORY[0x24BDAC8D0];
  v9 = a1;
  v48 = 0;
  v49 = &v48;
  v50 = 0x3032000000;
  v51 = __Block_byref_object_copy__184;
  v52 = __Block_byref_object_dispose__185;
  v53 = 0;
  v42 = 0;
  v43 = &v42;
  v44 = 0x3032000000;
  v45 = __Block_byref_object_copy__184;
  v46 = __Block_byref_object_dispose__185;
  v47 = 0;
  v10 = dispatch_semaphore_create(0);
  v11 = qos_class_self();
  dispatch_get_global_queue(v11, 0);
  v12 = objc_claimAutoreleasedReturnValue();
  block = MEMORY[0x24BDAC760];
  v30 = 3321888768;
  v31 = ___ZN2QPL28visualIdentifiersWithTimeoutEP8NSStringb27QPECRClientEntityFilterTypebNSt3__110shared_ptrINS_19ParserConfigurationEEEPU15__autoreleasingP7NSError_block_invoke_0;
  v32 = &unk_24DA256C0;
  v13 = (std::__shared_weak_count *)a4[1];
  v37 = *a4;
  v38 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v35 = &v48;
  v16 = v9;
  v40 = 0;
  v39 = a2;
  v41 = a3;
  v33 = v16;
  v36 = &v42;
  v17 = v10;
  v34 = v17;
  dispatch_async(v12, &block);

  if (*(_BYTE *)(*a4 + 34))
    v18 = -1;
  else
    v18 = dispatch_time(0, 100000000);
  if (dispatch_semaphore_wait(v17, v18))
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("ECR timed out after %dms"), 100, block, v30, v31, v32, v33);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = (void *)MEMORY[0x24BDD1540];
    v54 = *MEMORY[0x24BDD0FC8];
    v55[0] = v19;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v55, &v54, 1);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "errorWithDomain:code:userInfo:", CFSTR("com.apple.QueryParser.QueryUnderstandingError"), -2002, v21);
    v22 = objc_claimAutoreleasedReturnValue();
    v23 = (void *)v43[5];
    v43[5] = v22;

  }
  if (a5)
    *a5 = objc_retainAutorelease((id)v43[5]);
  v24 = (id)v49[5];

  v25 = v38;
  if (v38)
  {
    v26 = (unint64_t *)&v38->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  _Block_object_dispose(&v42, 8);
  _Block_object_dispose(&v48, 8);

  return v24;
}

void sub_218E685CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id a33)
{
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Block_object_dispose(&a22, 8);

  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__7(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__7(uint64_t a1)
{
  return std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](a1 + 48);
}

void ___ZN2QP8U2Parser13parseInternalENSt3__110shared_ptrINS_5ParseEEE_block_invoke(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  _QWORD *v35;
  char *v36;
  __int128 v37;
  int64x2_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  int64x2_t v65;
  uint64_t v66;
  _QWORD *v67;

  v4 = (_QWORD *)a1[5];
  v5 = *a2;
  v6 = *(_QWORD *)(*a2 + 16);
  v7 = *(_QWORD *)(*a2 + 24);
  v8 = *(std::__shared_weak_count **)(*a2 + 112);
  if (v8)
  {
    v9 = std::__shared_weak_count::lock(v8);
    v10 = v9;
    if (*(unsigned __int16 *)(*(_QWORD *)(v5 + 104) + 88) - 1 >= 4)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v10);
      }
      return;
    }
  }
  else
  {
    if (MEMORY[0x58] - 1 > 3)
      return;
    v10 = 0;
  }
  v13 = a1[6];
  v15 = v13 <= v6;
  v14 = a1[7] + v13;
  v15 = !v15 || v14 < v7 + v6;
  v16 = !v15;
  if (!v10)
    goto LABEL_19;
  v17 = (unint64_t *)&v10->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v16)
      return;
  }
  else
  {
LABEL_19:
    if (!v16)
      return;
  }
  v19 = *a2;
  v62 = 0;
  v63 = 0;
  v20 = *(std::__shared_weak_count **)(v19 + 112);
  if (!v20)
  {
    v21 = 0;
    goto LABEL_26;
  }
  v21 = std::__shared_weak_count::lock(v20);
  v63 = v21;
  if (!v21)
  {
LABEL_26:
    v22 = 0;
    goto LABEL_27;
  }
  v22 = *(_QWORD *)(v19 + 104);
  v62 = v22;
LABEL_27:
  v23 = v4[25];
  v24 = (_QWORD *)v4[24];
  if ((unint64_t)v24 >= v23)
  {
    v26 = v4[23];
    v27 = ((uint64_t)v24 - v26) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v29 = v23 - v26;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v67 = v4 + 25;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)(v4 + 25), v30);
    v33 = &v31[16 * v27];
    *(_QWORD *)v33 = v22;
    *((_QWORD *)v33 + 1) = v21;
    v35 = (_QWORD *)v4[23];
    v34 = (_QWORD *)v4[24];
    if (v34 == v35)
    {
      v38 = vdupq_n_s64((unint64_t)v34);
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 2;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *v34 = 0;
        v34[1] = 0;
      }
      while (v34 != v35);
      v38 = *(int64x2_t *)(v4 + 23);
    }
    v25 = v33 + 16;
    v4[23] = v36;
    v4[24] = v33 + 16;
    v65 = v38;
    v39 = v4[25];
    v4[25] = &v31[16 * v32];
    v66 = v39;
    v64 = v38.i64[0];
    std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer((uint64_t)&v64);
  }
  else
  {
    *v24 = v22;
    v24[1] = v21;
    v25 = v24 + 2;
  }
  v4[24] = v25;
  v40 = *a2;
  *(_DWORD *)(*a2 + 76) = 8;
  v41 = *(_QWORD *)(a1[4] + 8);
  v43 = *(_QWORD *)(v41 + 48);
  v42 = *(std::__shared_weak_count **)(v41 + 56);
  v60 = v43;
  v61 = v42;
  if (v42)
  {
    v44 = (unint64_t *)&v42->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
    v40 = *a2;
  }
  v46 = (std::__shared_weak_count *)a2[1];
  v58 = v40;
  v59 = v46;
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  QP::operator+(&v60, &v58, &v64);
  std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)(a1[4] + 8) + 48, (__int128 *)&v64);
  v49 = (std::__shared_weak_count *)v65.i64[0];
  if (v65.i64[0])
  {
    v50 = (unint64_t *)(v65.i64[0] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = v59;
  if (v59)
  {
    v53 = (unint64_t *)&v59->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v61;
  if (v61)
  {
    v56 = (unint64_t *)&v61->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
}

void sub_218E689BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void ___ZN2QP8U2Parser13parseInternalENSt3__110shared_ptrINS_5ParseEEE_block_invoke_135(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  _QWORD *v30;
  char *v31;
  __int128 v32;
  int64x2_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  std::string v56;
  uint64_t v57;
  int64x2_t v58;
  uint64_t v59;
  _QWORD *v60;

  v4 = (_QWORD *)a1[5];
  v5 = *a2;
  v6 = *(_QWORD *)(*a2 + 16);
  v7 = *(_QWORD *)(*a2 + 24);
  v57 = 0;
  v58.i64[0] = 0;
  v8 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v5 + 112));
  v9 = *(_QWORD *)(v5 + 104);
  v57 = v9;
  v58.i64[0] = (uint64_t)v8;
  if (*(char *)(v9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)v9, *(_QWORD *)(v9 + 8));
  }
  else
  {
    v10 = *(_OWORD *)v9;
    v56.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 16);
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v10;
  }
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (std::string::starts_with[abi:ne180100]((uint64_t *)&v56, "Action"))
  {
    v13 = a1[6];
    if (v6 <= v13 && v7 + v6 >= a1[7] + v13)
    {
      v14 = *a2;
      v54 = 0;
      v55 = 0;
      v15 = *(std::__shared_weak_count **)(v14 + 112);
      if (v15)
      {
        v16 = std::__shared_weak_count::lock(v15);
        v55 = v16;
        if (v16)
        {
          v17 = *(_QWORD *)(v14 + 104);
          v54 = v17;
LABEL_16:
          v18 = v4[25];
          v19 = (_QWORD *)v4[24];
          if ((unint64_t)v19 >= v18)
          {
            v21 = v4[23];
            v22 = ((uint64_t)v19 - v21) >> 4;
            v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 60)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v24 = v18 - v21;
            if (v24 >> 3 > v23)
              v23 = v24 >> 3;
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
              v25 = 0xFFFFFFFFFFFFFFFLL;
            else
              v25 = v23;
            v60 = v4 + 25;
            v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)(v4 + 25), v25);
            v28 = &v26[16 * v22];
            *(_QWORD *)v28 = v17;
            *((_QWORD *)v28 + 1) = v16;
            v30 = (_QWORD *)v4[23];
            v29 = (_QWORD *)v4[24];
            if (v29 == v30)
            {
              v33 = vdupq_n_s64((unint64_t)v29);
              v31 = &v26[16 * v22];
            }
            else
            {
              v31 = &v26[16 * v22];
              do
              {
                v32 = *((_OWORD *)v29 - 1);
                v29 -= 2;
                *((_OWORD *)v31 - 1) = v32;
                v31 -= 16;
                *v29 = 0;
                v29[1] = 0;
              }
              while (v29 != v30);
              v33 = *(int64x2_t *)(v4 + 23);
            }
            v20 = v28 + 16;
            v4[23] = v31;
            v4[24] = v28 + 16;
            v58 = v33;
            v34 = v4[25];
            v4[25] = &v26[16 * v27];
            v59 = v34;
            v57 = v33.i64[0];
            std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer((uint64_t)&v57);
          }
          else
          {
            *v19 = v17;
            v19[1] = v16;
            v20 = v19 + 2;
          }
          v4[24] = v20;
          v35 = *(std::__shared_weak_count **)(*(_QWORD *)(a1[4] + 8) + 56);
          v52 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 48);
          v53 = v35;
          if (v35)
          {
            v36 = (unint64_t *)&v35->__shared_owners_;
            do
              v37 = __ldxr(v36);
            while (__stxr(v37 + 1, v36));
          }
          v38 = (std::__shared_weak_count *)a2[1];
          v50 = *a2;
          v51 = v38;
          if (v38)
          {
            v39 = (unint64_t *)&v38->__shared_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
          }
          QP::operator+(&v52, &v50, &v57);
          std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](*(_QWORD *)(a1[4] + 8) + 48, (__int128 *)&v57);
          v41 = (std::__shared_weak_count *)v58.i64[0];
          if (v58.i64[0])
          {
            v42 = (unint64_t *)(v58.i64[0] + 8);
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = v51;
          if (v51)
          {
            v45 = (unint64_t *)&v51->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          v47 = v53;
          if (v53)
          {
            v48 = (unint64_t *)&v53->__shared_owners_;
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          goto LABEL_51;
        }
      }
      else
      {
        v16 = 0;
      }
      v17 = 0;
      goto LABEL_16;
    }
  }
LABEL_51:
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
}

void sub_218E68D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

id QP::debugDescriptionWithQUOutput(void *a1, void *a2, void *a3, void *a4, int a5)
{
  id v8;
  unint64_t v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  float v18;
  unint64_t i;
  void *v20;
  unint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  int v31;
  unint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  float v61;
  uint64_t v62;
  const __CFString *v63;
  void *context;
  void *v66;
  id v67;
  id v68;
  void *v69;
  __CFString *v70;
  void *v71;
  unint64_t v72;
  id v73;
  void *v75;
  __CFString *v76;
  void *v77;
  void *v78;
  id v79;
  NSRange v80;

  v8 = a1;
  v73 = a2;
  v68 = a3;
  v79 = a4;
  context = (void *)MEMORY[0x219A25054]();
  objc_msgSend(MEMORY[0x24BDD16A8], "string");
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  v67 = v8;
  v9 = objc_msgSend(v67, "length");
  if (v9 > 4)
  {
    v12 = (void *)MEMORY[0x24BDD17C8];
    objc_msgSend(v67, "substringToIndex:", 3);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v67, "substringFromIndex:", v9 - 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "stringWithFormat:", CFSTR("%@...%@<%lu chars>"), v13, v14, v9);
    v11 = (id)objc_claimAutoreleasedReturnValue();

    v10 = v67;
  }
  else
  {
    v10 = v67;
    v11 = v67;
  }

  objc_msgSend(v77, "appendFormat:", CFSTR("  q: %@\n"), v11);
  objc_msgSend(v73, "intentId");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "intValue");
  v16 = intentLabel();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v16);
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v73, "safetyScore");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "floatValue");
  objc_msgSend(v77, "appendFormat:", CFSTR("INTENT: %@, unsafeConf: %.2f\n"), v66, v18);

  for (i = 0; ; i = v72 + 1)
  {
    objc_msgSend(v73, "tokens");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend(v20, "count");

    if (v21 <= i)
      break;
    objc_msgSend(v73, "tokens");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v72 = i;
    objc_msgSend(v22, "objectAtIndexedSubscript:", i);
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v73, "tokenRanges");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "objectAtIndexedSubscript:", i);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v80.location = objc_msgSend(v25, "rangeValue");
    NSStringFromRange(v80);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v77, "appendFormat:", CFSTR("  %@:"), v26);

    objc_msgSend(v73, "argIdsForTokens");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "objectAtIndexedSubscript:", v72);
    v78 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v73, "argScoresForTokens");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "objectAtIndexedSubscript:", v72);
    v75 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v68, "objectAtIndexedSubscript:", v72);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v69, "objectForKeyedSubscript:", kQPQUOutputSpanTypesKey);
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v71, "count"))
    {
      v29 = (void *)MEMORY[0x24BDD17C8];
      objc_msgSend(v71, "componentsJoinedByString:", CFSTR(","));
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "stringWithFormat:", CFSTR(" spans:%@"), v30);
      v70 = (__CFString *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v70 = &stru_24DA27910;
    }
    v31 = 0;
    v32 = 0;
    v76 = &stru_24DA27910;
    while (v32 < objc_msgSend(v78, "count"))
    {
      if (v32)
        objc_msgSend(v77, "appendString:", CFSTR(","));
      objc_msgSend(v78, "objectAtIndexedSubscript:", v32);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = (void *)objc_msgSend(v33, "intValue");

      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", intentArgShortLabel());
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v32
        && a5
        && (objc_msgSend(v73, "tokens"),
            v36 = (void *)objc_claimAutoreleasedReturnValue(),
            v37 = objc_msgSend(v36, "count") - 1,
            v36,
            v37 == v72))
      {
        v38 = (void *)MEMORY[0x24BDD17C8];
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", intentArgShortLabel());
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v38, "stringWithFormat:", CFSTR("%@ {originally %@}"), v39, v35);
        v34 = (void *)objc_claimAutoreleasedReturnValue();

        v35 = v34;
      }
      else if ((_DWORD)v34 != 2)
      {
        objc_msgSend(v79, "objectForKeyedSubscript:", v23);
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        v34 = (void *)objc_msgSend(v40, "count");

        if (!v34)
          goto LABEL_24;
      }
      objc_msgSend(v79, "objectForKeyedSubscript:", v23);
      v41 = (void *)objc_claimAutoreleasedReturnValue();

      if (v41)
      {
        objc_msgSend(v79, "objectForKeyedSubscript:", v23);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v42, "allKeys");
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v43, "firstObject");
        v44 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v79, "objectForKeyedSubscript:", v23);
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v45, "objectForKeyedSubscript:", v44);
        v46 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v79, "objectForKeyedSubscript:", v23);
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        v48 = objc_msgSend(v47, "count");

        v49 = (void *)MEMORY[0x24BDD17C8];
        objc_msgSend(v46, "firstObject");
        if (v48 < 2)
        {
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v34, "doubleValue");
          v58 = v57;
          objc_msgSend(v46, "lastObject");
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v52, "doubleValue");
          objc_msgSend(v49, "stringWithFormat:", CFSTR("vids: (%@(%.2g, %2.g))"), v44, v58, v59);
          v55 = v76;
          v76 = (__CFString *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v34, "doubleValue");
          v51 = v50;
          objc_msgSend(v46, "lastObject");
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v52, "doubleValue");
          v54 = v53;
          objc_msgSend(v79, "objectForKeyedSubscript:", v23);
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v49, "stringWithFormat:", CFSTR("vids: (%@(%.2g, %.2g) + %lu more)"), v44, v51, v54, objc_msgSend(v55, "count") - 1);
          v56 = objc_claimAutoreleasedReturnValue();

          v76 = (__CFString *)v56;
        }

      }
LABEL_24:
      objc_msgSend(v75, "objectAtIndexedSubscript:", v32);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v60, "floatValue");
      LODWORD(v34) = llroundf(v61 * 100.0);

      if (v31 == (_DWORD)v34)
        objc_msgSend(v77, "appendFormat:", CFSTR(" %@"), v35);
      else
        objc_msgSend(v77, "appendFormat:", CFSTR(" %@ %d%%"), v35, v34);

      ++v32;
      v31 = (int)v34;
    }
    v62 = -[__CFString length](v76, "length");
    v63 = &stru_24DA27910;
    if (v62)
      v63 = CFSTR(" ");
    objc_msgSend(v77, "appendFormat:", CFSTR("%@%@%@\n"), v63, v76, v70);

  }
  objc_autoreleasePoolPop(context);

  return v77;
}

void sub_218E6943C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;
  uint64_t v25;

  _Unwind_Resume(a1);
}

void QP::logQueryUnderstandingOverviewCAEvent(void *a1, void *a2, unsigned int a3, unsigned int a4, BOOL a5)
{
  xpc_object_t empty;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  id v13;
  const char *v14;
  void *v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  int v23;
  xpc_object_t xdict;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v26 = a1;
  v27 = a2;
  empty = xpc_dictionary_create_empty();
  xdict = empty;
  objc_msgSend(v26, "intentId");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "intValue");

  if (v10 >= 3)
    v11 = 0;
  else
    v11 = qword_218E9FCC8[v10];
  v12 = QPProcessName();
  xpc_dictionary_set_string(empty, "process", v12);
  objc_msgSend(v27, "localeIdentifier");
  v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v14 = (const char *)objc_msgSend(v13, "cStringUsingEncoding:", 4);

  if (v14)
    xpc_dictionary_set_string(empty, "locale", v14);
  xpc_dictionary_set_uint64(empty, "queryLength", a3);
  xpc_dictionary_set_uint64(empty, "tokenCount", a4);
  xpc_dictionary_set_uint64(empty, "queryIntent", v11);
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  objc_msgSend(v26, "argIdsForTokens");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
  if (v19)
  {
    v31 = 0;
    v32 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v20 = *(_QWORD *)v34;
    do
    {
      for (i = 0; i != v19; ++i)
      {
        if (*(_QWORD *)v34 != v20)
          objc_enumerationMutation(v15);
        objc_msgSend(*(id *)(*((_QWORD *)&v33 + 1) + 8 * i), "firstObject");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = objc_msgSend(v22, "intValue");

        switch(v23)
        {
          case 0:
            BYTE4(v28) = 1;
            break;
          case 1:
            BYTE4(v31) = 1;
            break;
          case 2:
            BYTE4(v29) = 1;
            break;
          case 3:
            BYTE4(v32) = 1;
            break;
          case 4:
          case 6:
          case 13:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
            continue;
          case 5:
            LOBYTE(v32) = 1;
            break;
          case 7:
            LOBYTE(v29) = 1;
            break;
          case 8:
            BYTE4(v30) = 1;
            break;
          case 9:
            v16 = 1;
            break;
          case 10:
            LOBYTE(v31) = 1;
            break;
          case 11:
            v18 = 1;
            break;
          case 12:
            LOBYTE(v30) = 1;
            break;
          case 21:
            v17 = 1;
            break;
          default:
            if (v23 == 50)
              LOBYTE(v28) = 1;
            break;
        }
      }
      v19 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
    }
    while (v19);
  }
  else
  {
    v31 = 0;
    v32 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
  }

  xpc_dictionary_set_BOOL(xdict, "queryContainsActionTokens", 0);
  xpc_dictionary_set_BOOL(xdict, "queryContainsCaptureDeviceTokens", 0);
  xpc_dictionary_set_BOOL(xdict, "queryContainsEventTokens", v16 & 1);
  xpc_dictionary_set_BOOL(xdict, "queryContainsFavoritedTokens", v17 & 1);
  xpc_dictionary_set_BOOL(xdict, "queryContainsGenericLocationTokens", v18 & 1);
  xpc_dictionary_set_BOOL(xdict, "queryContainsLocationTokens", v31 & 1);
  xpc_dictionary_set_BOOL(xdict, "queryContainsMediaTypeTokens", v31 & 0x100000000);
  xpc_dictionary_set_BOOL(xdict, "queryContainsNounTokens", v32 & 1);
  xpc_dictionary_set_BOOL(xdict, "queryContainsPersonSenderTokens", v32 & 0x100000000);
  xpc_dictionary_set_BOOL(xdict, "queryContainsPersonTokens", v29 & 0x100000000);
  xpc_dictionary_set_BOOL(xdict, "queryContainsSortCriteriaTokens", v28 & 1);
  xpc_dictionary_set_BOOL(xdict, "queryContainsSourceAppTokens", v30 & 1);
  xpc_dictionary_set_BOOL(xdict, "queryContainsTimeTokens", v30 & 0x100000000);
  xpc_dictionary_set_BOOL(xdict, "queryContainsUnspecifiedTokens", v28 & 0x100000000);
  xpc_dictionary_set_BOOL(xdict, "queryContainsVisualQualityTokens", v29 & 1);
  xpc_dictionary_set_BOOL(xdict, "ecrGroundedPersonEntity", a5);
  analytics_send_event();

}

void sub_218E69AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void QP::U2Parser::cooldown(QP::U2Parser *this)
{
  QP *v2;
  NSLocale *v3;
  NSObject *v4;
  void *v5;
  NSLocale *v6;
  void *v7;
  void *v8;
  uint8_t v9[16];

  v2 = (QP *)*(id *)(*((_QWORD *)this + 10) + 104);
  if (QP::isSupportedQULocale(v2, v3))
  {
    if (u2ParserLogger(void)::token != -1)
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
    v4 = u2ParserLogger(void)::log;
    if (os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_218E10000, v4, OS_LOG_TYPE_DEFAULT, "[QPNLU] Cooldown QU model", v9, 2u);
    }
    objc_msgSend(MEMORY[0x24BE7BEA8], "sharedInstance");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "releaseModel");

    if (QP::isSupportedECRLocale(v2, v6))
    {
      if (*(_BYTE *)(*((_QWORD *)this + 10) + 55))
        +[QPInProcessECRClient sharedClient](QPInProcessECRClient, "sharedClient");
      else
        +[QPXPCECRClient sharedClient](QPXPCECRClient, "sharedClient");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = v7;
      if (*(_BYTE *)(*((_QWORD *)this + 10) + 36))
        objc_msgSend(v7, "cooldownSync");
      else
        objc_msgSend(v7, "cooldownAsync");

    }
  }

}

void sub_218E69CA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL14u2ParserLoggerv_block_invoke()
{
  const char *v0;
  os_log_t v1;
  void *v2;

  v0 = _nlpLoggingSubsystem();
  v1 = os_log_create(v0, "QPU2Parser");
  v2 = (void *)u2ParserLogger(void)::log;
  u2ParserLogger(void)::log = (uint64_t)v1;

}

uint64_t ___Z36QPTimingNanosecondsSinceAbsoluteTimey_block_invoke()
{
  return mach_timebase_info((mach_timebase_info_t)&QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::sTimebaseInfo);
}

uint64_t __Block_byref_object_copy__184(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__185(uint64_t a1)
{

}

void ___ZN2QPL31allVisualIdentifiersWithTimeoutEP8NSStringNSt3__110shared_ptrINS_19ParserConfigurationEEEPU15__autoreleasingP7NSError_block_invoke(uint64_t a1)
{
  __objc2_class **v2;
  void *v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 64) + 55))
    v2 = off_24DA23458;
  else
    v2 = &off_24DA23460;
  -[__objc2_class sharedClient](*v2, "sharedClient");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = *(_BYTE *)(*(_QWORD *)(a1 + 64) + 58) == 0;
  v5 = *(_QWORD *)(a1 + 32);
  v13 = 0;
  objc_msgSend(v3, "visualIdentifiersWithQuery:entityFilterType:error:", v5, v4, &v13);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v13;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v6;

  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v7;
  v12 = v7;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_218E69DF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN2QPL26u2UnderstandingWithTimeoutEPU31objcproto20QUUnderstandingModel11objc_objectPK10__CFStringP7QUSpansbjPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id *v15;
  void *v16;

  v6 = a2;
  v7 = a3;
  if (v7)
  {
    if (u2ParserLogger(void)::token != -1)
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_160);
    v8 = u2ParserLogger(void)::log;
    if (os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_ERROR))
      ___ZN2QPL26u2UnderstandingWithTimeoutEPU31objcproto20QUUnderstandingModel11objc_objectPK10__CFStringP7QUSpansbjPU15__autoreleasingP7NSError_block_invoke_cold_1((uint64_t)v7, v8, v9, v10, v11, v12, v13, v14);
    v15 = (id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v16 = a3;
  }
  else
  {
    v15 = (id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    v16 = a2;
  }
  objc_storeStrong(v15, v16);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void ___ZN2QPL28visualIdentifiersWithTimeoutEP8NSStringb27QPECRClientEntityFilterTypebNSt3__110shared_ptrINS_19ParserConfigurationEEEPU15__autoreleasingP7NSError_block_invoke_0(uint64_t a1)
{
  __objc2_class **v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 64) + 55))
    v2 = off_24DA23458;
  else
    v2 = &off_24DA23460;
  -[__objc2_class sharedClient](*v2, "sharedClient");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(unsigned __int8 *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 64) + 57);
  v8 = *(unsigned __int8 *)(a1 + 89);
  v16 = 0;
  objc_msgSend(v3, "visualIdentifiersWithText:allowPrefixSearch:entityFilterType:includeInferredNames:allowGroundingToNamesAndEmails:error:", v4, v5, v6, v7, v8, &v16);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v16;
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v9;

  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v14 = *(void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = v10;
  v15 = v10;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_218E69FB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange &,int,int,QUIntentArgType,void>@<X0>(_OWORD *a1@<X1>, __int128 *a2@<X2>, int *a3@<X3>, int *a4@<X4>, int *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  _QWORD *result;

  v12 = operator new(0xA8uLL);
  result = std::__shared_ptr_emplace<QP::ParseAttribute>::__shared_ptr_emplace[abi:ne180100]<CFRange &,CFRange &,int,int,QUIntentArgType,std::allocator<QP::ParseAttribute>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_218E6A034(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<QP::ParseAttribute>::__shared_ptr_emplace[abi:ne180100]<CFRange &,CFRange &,int,int,QUIntentArgType,std::allocator<QP::ParseAttribute>,0>(_QWORD *a1, _OWORD *a2, __int128 *a3, int *a4, int *a5, int *a6)
{
  a1[2] = 0;
  *a1 = &unk_24DA24D38;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<QP::ParseAttribute,CFRange &,CFRange &,int,int,QUIntentArgType,QP::ParseAttribute*>((uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_218E6A080(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<QP::ParseAttribute,CFRange &,CFRange &,int,int,QUIntentArgType,QP::ParseAttribute*>(uint64_t a1, _OWORD *a2, __int128 *a3, int *a4, int *a5, int *a6)
{
  int v7;
  int v8;
  int v9;
  __int128 v10;

  v7 = *a4;
  v8 = *a5;
  v9 = *a6;
  v10 = *a3;
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_WORD *)(a1 + 32) = v7;
  *(_DWORD *)(a1 + 34) = (unsigned __int16)v8;
  *(_QWORD *)(a1 + 40) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 48), "");
  *(_WORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = v9;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  return a1;
}

_QWORD *std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange &,int,int,QUIntentArgType &,void>@<X0>(_OWORD *a1@<X1>, __int128 *a2@<X2>, int *a3@<X3>, int *a4@<X4>, int *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  _QWORD *result;

  v12 = operator new(0xA8uLL);
  result = std::__shared_ptr_emplace<QP::ParseAttribute>::__shared_ptr_emplace[abi:ne180100]<CFRange &,CFRange &,int,int,QUIntentArgType &,std::allocator<QP::ParseAttribute>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_218E6A188(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<QP::ParseAttribute>::__shared_ptr_emplace[abi:ne180100]<CFRange &,CFRange &,int,int,QUIntentArgType &,std::allocator<QP::ParseAttribute>,0>(_QWORD *a1, _OWORD *a2, __int128 *a3, int *a4, int *a5, int *a6)
{
  a1[2] = 0;
  *a1 = &unk_24DA24D38;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<QP::ParseAttribute,CFRange &,CFRange &,int,int,QUIntentArgType,QP::ParseAttribute*>((uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_218E6A1D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<QP::Parse,std::allocator<QP::Parse>,nlp::CFScopedPtr<__CFString const*> &,unsigned long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,__CFDictionary const*&,void>@<X0>(const void **a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, _QWORD **a4@<X4>, uint64_t *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  _QWORD *result;

  v12 = operator new(0x78uLL);
  result = std::__shared_ptr_emplace<QP::Parse>::__shared_ptr_emplace[abi:ne180100]<nlp::CFScopedPtr<__CFString const*> &,unsigned long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,__CFDictionary const*&,std::allocator<QP::Parse>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_218E6A25C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<QP::Parse>::__shared_ptr_emplace[abi:ne180100]<nlp::CFScopedPtr<__CFString const*> &,unsigned long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,__CFDictionary const*&,std::allocator<QP::Parse>,0>(_QWORD *a1, const void **a2, uint64_t *a3, uint64_t *a4, _QWORD **a5, uint64_t *a6)
{
  a1[2] = 0;
  *a1 = &unk_24DA24DC8;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<QP::Parse,nlp::CFScopedPtr<__CFString const*> &,unsigned long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,__CFDictionary const*&,QP::Parse*>((uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_218E6A2A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<QP::Parse,nlp::CFScopedPtr<__CFString const*> &,unsigned long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,__CFDictionary const*&,QP::Parse*>(uint64_t a1, const void **a2, uint64_t *a3, uint64_t *a4, _QWORD **a5, uint64_t *a6)
{
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12[3];
  void **v13;

  v8 = *a2;
  v9 = *a3;
  v10 = *a4;
  memset(v12, 0, sizeof(v12));
  std::vector<std::shared_ptr<QP::ParseAttribute>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>((char *)v12, *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  QP::Parse::Parse(a1, v8, v9, v10, v12, *a6, 0);
  v13 = (void **)v12;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v13);
  return a1;
}

void sub_218E6A350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_BYTE *OUTLINED_FUNCTION_4(_BYTE *result, _BYTE *a2)
{
  *result = 0;
  *a2 = 0;
  return result;
}

void OUTLINED_FUNCTION_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_6(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 8u);
}

QP::QueryParserEngine *QP::QueryParserEngine::QueryParserEngine(QP::QueryParserEngine *this, const __CFDictionary *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_QWORD *)this = &off_24DA25ED0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_BYTE *)this + 88) = 0;
  QP::QueryParserEngine::init(this, a2);
  return this;
}

void sub_218E6A3F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;

  v5 = v3;
  v7 = *v5;
  *v5 = 0;
  if (v7)
    std::default_delete<QP::Embedder>::operator()[abi:ne180100]((uint64_t)v5, v7);
  QP::QueryParserEngine::QueryParserEngine(v4);
  std::unique_ptr<QP::Parser>::reset[abi:ne180100]((QP::Parser **)(v2 + 56), 0);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v2 + 40);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v2 + 24);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void QP::QueryParserEngine::init(QP::QueryParserEngine *this, const __CFDictionary *a2)
{
  NSObject *v3;
  os_signpost_id_t v4;
  os_signpost_id_t v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  QP::Parser *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  _QWORD *v90;
  _QWORD *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  NSObject *v137;
  os_signpost_id_t v138;
  os_signpost_id_t v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  __int128 buf;
  const __CFDictionary *v175;

  v175 = a2;
  if (parserLogger(void)::token != -1)
    dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
  v3 = parserLogger(void)::log;
  v4 = os_signpost_id_generate((os_log_t)parserLogger(void)::log);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v5 = v4;
    if (os_signpost_enabled(v3))
    {
      LOWORD(buf) = 0;
      _os_signpost_emit_with_name_impl(&dword_218E10000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v5, "QueryParserEngine::init::begin", "", (uint8_t *)&buf, 2u);
    }
  }
  std::allocate_shared[abi:ne180100]<QP::ParserConfiguration,std::allocator<QP::ParserConfiguration>,__CFDictionary const*&,void>(&v175, &buf);
  v6 = (char *)this + 8;
  std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)this + 8, &buf);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  std::allocate_shared[abi:ne180100]<QP::ParserGrammar,std::allocator<QP::ParserGrammar>,std::shared_ptr<QP::ParserConfiguration> &,void>((uint64_t *)this + 1, &buf);
  std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)this + 24, &buf);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  std::allocate_shared[abi:ne180100]<QP::Lexer,std::allocator<QP::Lexer>,std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,void>((uint64_t *)this + 1, (uint64_t *)this + 3, &buf);
  std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)this + 40, &buf);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = operator new();
  v17 = (QP::Parser *)v16;
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v172 = *((_QWORD *)this + 1);
  v173 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  v170 = *((_QWORD *)this + 3);
  v171 = v21;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v168 = *((_QWORD *)this + 5);
  v169 = v24;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  QP::Parser::Parser(v16, &v172, &v170, &v168);
  std::unique_ptr<QP::Parser>::reset[abi:ne180100]((QP::Parser **)this + 7, v17);
  v27 = v169;
  if (v169)
  {
    v28 = (unint64_t *)&v169->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v171;
  if (v171)
  {
    v31 = (unint64_t *)&v171->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v173;
  if (v173)
  {
    v34 = (unint64_t *)&v173->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = operator new();
  v37 = v36;
  v38 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v166 = *((_QWORD *)this + 1);
  v167 = v38;
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  QP::Embedder::Embedder(v36, &v166);
  v41 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v37;
  if (v41)
    std::default_delete<QP::Embedder>::operator()[abi:ne180100]((uint64_t)this + 72, v41);
  v42 = v167;
  if (v167)
  {
    v43 = (unint64_t *)&v167->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = *(_QWORD *)v6;
  if (*(_DWORD *)(*(_QWORD *)v6 + 16) != 1)
  {
    v63 = *(_QWORD *)(v45 + 8);
    switch(v63)
    {
      case 9:
        *((_QWORD *)this + 10) = QPSpotlightKnowledgeSourceCreate(*(const void **)(v45 + 184), *(void **)(v45 + 176), v175);
        v90 = (_QWORD *)operator new();
        v91 = v90;
        v92 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
        v152 = *((_QWORD *)this + 1);
        v153 = v92;
        if (v92)
        {
          v93 = (unint64_t *)&v92->__shared_owners_;
          do
            v94 = __ldxr(v93);
          while (__stxr(v94 + 1, v93));
        }
        v95 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
        v150 = *((_QWORD *)this + 3);
        v151 = v95;
        if (v95)
        {
          v96 = (unint64_t *)&v95->__shared_owners_;
          do
            v97 = __ldxr(v96);
          while (__stxr(v97 + 1, v96));
        }
        QP::PhotosParserFormatter::PhotosParserFormatter(v90, &v152, &v150);
        v98 = *((_QWORD *)this + 8);
        *((_QWORD *)this + 8) = v91;
        if (v98)
          (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
        v99 = v151;
        if (v151)
        {
          v100 = (unint64_t *)&v151->__shared_owners_;
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
        v60 = v153;
        if (!v153)
          goto LABEL_175;
        v102 = (unint64_t *)&v153->__shared_owners_;
        do
          v62 = __ldaxr(v102);
        while (__stlxr(v62 - 1, v102));
        break;
      case 13:
        v103 = QPSpotlightKnowledgeSourceCreate(*(const void **)(v45 + 184), *(void **)(v45 + 176), v175);
        *((_QWORD *)this + 10) = v103;
        v104 = *((_QWORD *)this + 5);
        if (v104)
          QP::Lexer::useKnowledgeSource(v104, (uint64_t)v103);
        v105 = (_QWORD *)operator new();
        v106 = v105;
        v107 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
        v148 = *((_QWORD *)this + 1);
        v149 = v107;
        if (v107)
        {
          v108 = (unint64_t *)&v107->__shared_owners_;
          do
            v109 = __ldxr(v108);
          while (__stxr(v109 + 1, v108));
        }
        v110 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
        v146 = *((_QWORD *)this + 3);
        v147 = v110;
        if (v110)
        {
          v111 = (unint64_t *)&v110->__shared_owners_;
          do
            v112 = __ldxr(v111);
          while (__stxr(v112 + 1, v111));
        }
        v113 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
        v144 = *((_QWORD *)this + 5);
        v145 = v113;
        if (v113)
        {
          v114 = (unint64_t *)&v113->__shared_owners_;
          do
            v115 = __ldxr(v114);
          while (__stxr(v115 + 1, v114));
        }
        QP::VisualGenerationFormatter::VisualGenerationFormatter(v105, &v148, &v146, &v144);
        v116 = *((_QWORD *)this + 8);
        *((_QWORD *)this + 8) = v106;
        if (v116)
          (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
        v117 = v145;
        if (v145)
        {
          v118 = (unint64_t *)&v145->__shared_owners_;
          do
            v119 = __ldaxr(v118);
          while (__stlxr(v119 - 1, v118));
          if (!v119)
          {
            ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
            std::__shared_weak_count::__release_weak(v117);
          }
        }
        v120 = v147;
        if (v147)
        {
          v121 = (unint64_t *)&v147->__shared_owners_;
          do
            v122 = __ldaxr(v121);
          while (__stlxr(v122 - 1, v121));
          if (!v122)
          {
            ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
            std::__shared_weak_count::__release_weak(v120);
          }
        }
        v60 = v149;
        if (!v149)
          goto LABEL_175;
        v123 = (unint64_t *)&v149->__shared_owners_;
        do
          v62 = __ldaxr(v123);
        while (__stlxr(v62 - 1, v123));
        break;
      case 12:
        v64 = (_QWORD *)operator new();
        v65 = v64;
        v66 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
        v156 = *((_QWORD *)this + 1);
        v157 = v66;
        if (v66)
        {
          v67 = (unint64_t *)&v66->__shared_owners_;
          do
            v68 = __ldxr(v67);
          while (__stxr(v68 + 1, v67));
        }
        v69 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
        v154 = *((_QWORD *)this + 3);
        v155 = v69;
        if (v69)
        {
          v70 = (unint64_t *)&v69->__shared_owners_;
          do
            v71 = __ldxr(v70);
          while (__stxr(v71 + 1, v70));
        }
        QP::RemindersParserFormatter::RemindersParserFormatter(v64, &v156, &v154);
        v72 = *((_QWORD *)this + 8);
        *((_QWORD *)this + 8) = v65;
        if (v72)
          (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
        v73 = v155;
        if (v155)
        {
          v74 = (unint64_t *)&v155->__shared_owners_;
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }
        v60 = v157;
        if (!v157)
          goto LABEL_175;
        v76 = (unint64_t *)&v157->__shared_owners_;
        do
          v62 = __ldaxr(v76);
        while (__stlxr(v62 - 1, v76));
        break;
      default:
        v124 = operator new();
        v125 = v124;
        v126 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
        v142 = *((_QWORD *)this + 1);
        v143 = v126;
        if (v126)
        {
          v127 = (unint64_t *)&v126->__shared_owners_;
          do
            v128 = __ldxr(v127);
          while (__stxr(v128 + 1, v127));
        }
        v129 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
        v140 = *((_QWORD *)this + 3);
        v141 = v129;
        if (v129)
        {
          v130 = (unint64_t *)&v129->__shared_owners_;
          do
            v131 = __ldxr(v130);
          while (__stxr(v131 + 1, v130));
        }
        QP::Formatter::Formatter(v124, &v142, &v140, *(const __CFString **)(*(_QWORD *)v6 + 176));
        v132 = *((_QWORD *)this + 8);
        *((_QWORD *)this + 8) = v125;
        if (v132)
          (*(void (**)(uint64_t))(*(_QWORD *)v132 + 8))(v132);
        v133 = v141;
        if (v141)
        {
          v134 = (unint64_t *)&v141->__shared_owners_;
          do
            v135 = __ldaxr(v134);
          while (__stlxr(v135 - 1, v134));
          if (!v135)
          {
            ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
            std::__shared_weak_count::__release_weak(v133);
          }
        }
        v60 = v143;
        if (!v143)
          goto LABEL_175;
        v136 = (unint64_t *)&v143->__shared_owners_;
        do
          v62 = __ldaxr(v136);
        while (__stlxr(v62 - 1, v136));
        break;
    }
LABEL_173:
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
    goto LABEL_175;
  }
  v46 = QPSpotlightKnowledgeSourceCreate(*(const void **)(v45 + 184), *(void **)(v45 + 176), v175);
  *((_QWORD *)this + 10) = v46;
  v47 = *((_QWORD *)this + 5);
  if (v47)
    QP::Lexer::useKnowledgeSource(v47, (uint64_t)v46);
  if (*(_QWORD *)(*(_QWORD *)v6 + 8) != 9)
  {
    v77 = operator new();
    v78 = v77;
    v79 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    v160 = *((_QWORD *)this + 1);
    v161 = v79;
    if (v79)
    {
      v80 = (unint64_t *)&v79->__shared_owners_;
      do
        v81 = __ldxr(v80);
      while (__stxr(v81 + 1, v80));
    }
    v82 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    v158 = *((_QWORD *)this + 3);
    v159 = v82;
    if (v82)
    {
      v83 = (unint64_t *)&v82->__shared_owners_;
      do
        v84 = __ldxr(v83);
      while (__stxr(v84 + 1, v83));
    }
    QP::SpotlightFormatter::SpotlightFormatter(v77, &v160, &v158);
    v85 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v78;
    if (v85)
      (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
    v86 = v159;
    if (v159)
    {
      v87 = (unint64_t *)&v159->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    v60 = v161;
    if (!v161)
      goto LABEL_175;
    v89 = (unint64_t *)&v161->__shared_owners_;
    do
      v62 = __ldaxr(v89);
    while (__stlxr(v62 - 1, v89));
    goto LABEL_173;
  }
  v48 = (_QWORD *)operator new();
  v49 = v48;
  v50 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v164 = *((_QWORD *)this + 1);
  v165 = v50;
  if (v50)
  {
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  v53 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  v162 = *((_QWORD *)this + 3);
  v163 = v53;
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  QP::PhotosFormatter::PhotosFormatter(v48, &v164, &v162);
  v56 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v49;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = v163;
  if (v163)
  {
    v58 = (unint64_t *)&v163->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = v165;
  if (v165)
  {
    v61 = (unint64_t *)&v165->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    goto LABEL_173;
  }
LABEL_175:
  (*(void (**)(_QWORD, QP::QueryParserEngine *))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), this);
  QP::QueryParserEngine::updateResources(this);
  if (parserLogger(void)::token != -1)
    dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
  v137 = parserLogger(void)::log;
  v138 = os_signpost_id_generate((os_log_t)parserLogger(void)::log);
  if (v138 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v139 = v138;
    if (os_signpost_enabled(v137))
    {
      LOWORD(buf) = 0;
      _os_signpost_emit_with_name_impl(&dword_218E10000, v137, OS_SIGNPOST_INTERVAL_END, v139, "QueryParserEngine::init::end", "", (uint8_t *)&buf, 2u);
    }
  }
}

void sub_218E6AEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  MEMORY[0x219A24D0C](v11, 0x10E1C409C49465BLL);
  _Unwind_Resume(a1);
}

QP::Parser *std::unique_ptr<QP::Parser>::reset[abi:ne180100](QP::Parser **a1, QP::Parser *a2)
{
  QP::Parser *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    QP::Parser::~Parser(result);
    JUMPOUT(0x219A24D0CLL);
  }
  return result;
}

void QP::QueryParserEngine::updateResources(QP::QueryParserEngine *this)
{
  const __CFLocale *v2;
  const __CFLocale *LanguageCode;
  const __CFString *ScriptCode;
  NSObject *v5;
  CFAllocatorRef *v6;
  const __CFString *v7;
  __CFError **v8;
  __CFError **v9;
  const __CFURL *v10;
  uint64_t v11;
  NSObject *v12;
  __CFError **v13;
  uint64_t v14;
  const __CFString *v15;
  CFURLRef v16;
  const __CFLocale *v17;
  const __CFString *v18;
  __CFBundle *BundleWithIdentifier;
  NSObject *v20;
  __CFError **v21;
  uint64_t v22;
  const __CFURL *v23;
  __CFError **v24;
  _QWORD v25[11];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  void (*v30)(uint64_t);
  CFTypeRef cf;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  void (*v36)(uint64_t);
  CFTypeRef v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t);
  void (*v42)(uint64_t);
  CFTypeRef v43;
  const __CFURL *v44;
  const __CFURL **v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t);
  void (*v48)(uint64_t);
  CFTypeRef v49;
  const __CFString *v50;
  const __CFString **v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t);
  void (*v54)(uint64_t);
  CFTypeRef v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t);
  void (*v60)(uint64_t);
  CFTypeRef v61;
  uint8_t v62[4];
  uint64_t v63;
  __int128 buf;
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t);
  void (*v67)(uint64_t);
  CFTypeRef v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v2 = *(const __CFLocale **)(*((_QWORD *)this + 1) + 104);
  LanguageCode = getLanguageCode(v2);
  ScriptCode = getScriptCode((const __CFString *)v2);
  if (parserLogger(void)::token != -1)
    dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
  v5 = parserLogger(void)::log;
  if (os_log_type_enabled((os_log_t)parserLogger(void)::log, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = LanguageCode;
    _os_log_impl(&dword_218E10000, v5, OS_LOG_TYPE_INFO, "QueryParserEngine: updating resources for language %@", (uint8_t *)&buf, 0xCu);
  }
  QP::QueryParserEngine::clearResources(this);
  *((_BYTE *)this + 88) = 0;
  if (*(_QWORD *)(*((_QWORD *)this + 1) + 168))
  {
    *(_QWORD *)&buf = 0;
    v56 = 0;
    v50 = 0;
    v6 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
    if (ScriptCode)
      v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("%@_%@"), LanguageCode, ScriptCode);
    else
      v7 = (const __CFString *)CFRetain(LanguageCode);
    v15 = v7;
    v50 = v7;
    v16 = CFURLCreateCopyAppendingPathComponent(*v6, *(CFURLRef *)(*((_QWORD *)this + 1) + 168), v7, 1u);
    *(_QWORD *)&buf = v16;
    if ((QP::QueryParserEngine::loadAssetsWithURL(this, v17, v16) & 1) != 0)
    {
      if (v15)
        CFRelease(v15);
      if (v16)
        CFRelease(v16);
      *((_BYTE *)this + 88) = 1;
    }
    else
    {
      QP::QueryParserEngine::clearResources(this);
      v18 = *(const __CFString **)(*((_QWORD *)this + 1) + 192);
      if (v18)
        BundleWithIdentifier = CFBundleGetBundleWithIdentifier(v18);
      else
        BundleWithIdentifier = 0;
      v23 = systemListenerCopyResourceFromBundleWithName(CFSTR("cfg"), CFSTR("plist"), CFSTR("root"), BundleWithIdentifier);
      v44 = v23;
      QP::ParserGrammar::loadParserGrammarResource(*((const void ***)this + 3), v23, (__CFError **)1, v24);
      if (v23)
        CFRelease(v23);
      if (v15)
        CFRelease(v15);
      if (v16)
        CFRelease(v16);
    }
  }
  else
  {
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v65 = 0x3002000000;
    v66 = __Block_byref_object_copy__8;
    v67 = __Block_byref_object_dispose__8;
    v68 = 0;
    v56 = 0;
    v57 = &v56;
    v58 = 0x3002000000;
    v59 = __Block_byref_object_copy__8;
    v60 = __Block_byref_object_dispose__8;
    v61 = 0;
    v50 = 0;
    v51 = &v50;
    v52 = 0x3002000000;
    v53 = __Block_byref_object_copy__8;
    v54 = __Block_byref_object_dispose__8;
    v55 = 0;
    v44 = 0;
    v45 = &v44;
    v46 = 0x3002000000;
    v47 = __Block_byref_object_copy__8;
    v48 = __Block_byref_object_dispose__8;
    v49 = 0;
    v38 = 0;
    v39 = &v38;
    v40 = 0x3002000000;
    v41 = __Block_byref_object_copy__8;
    v42 = __Block_byref_object_dispose__8;
    v43 = 0;
    v32 = 0;
    v33 = &v32;
    v34 = 0x3002000000;
    v35 = __Block_byref_object_copy__8;
    v36 = __Block_byref_object_dispose__8;
    v37 = 0;
    v26 = 0;
    v27 = &v26;
    v28 = 0x3002000000;
    v29 = __Block_byref_object_copy__8;
    v30 = __Block_byref_object_dispose__8;
    cf = 0;
    v25[0] = MEMORY[0x24BDAC760];
    v25[1] = 0x40000000;
    v25[2] = ___ZN2QP17QueryParserEngine15updateResourcesEv_block_invoke;
    v25[3] = &unk_24DA25EF0;
    v25[4] = &buf;
    v25[5] = &v56;
    v25[6] = &v32;
    v25[7] = &v50;
    v25[8] = &v44;
    v25[9] = &v38;
    v25[10] = &v26;
    systemListenerEnumerateResourcesWithContentType((uint64_t)CFSTR("QueryParser"), v25);
    v10 = *(const __CFURL **)(*((_QWORD *)&buf + 1) + 40);
    if (v10)
    {
      QP::ParserConfiguration::loadConfigurationResource(*((QP::ParserConfiguration **)this + 1), v10, v8, v9);
      v11 = *((_QWORD *)this + 1);
      if (*(_QWORD *)(v11 + 200) && *(_QWORD *)(v11 + 104) && *(_BYTE *)(v11 + 33))
      {
        if (parserLogger(void)::token != -1)
          dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
        v12 = parserLogger(void)::log;
        if (os_log_type_enabled((os_log_t)parserLogger(void)::log, OS_LOG_TYPE_INFO))
        {
          v14 = *(_QWORD *)(*((_QWORD *)&buf + 1) + 40);
          *(_DWORD *)v62 = 138412290;
          v63 = v14;
          _os_log_impl(&dword_218E10000, v12, OS_LOG_TYPE_INFO, "QueryParserEngine: loading assets with url %@", v62, 0xCu);
        }
        QP::ParserGrammar::loadParserGrammarResource(*((const void ***)this + 3), (CFURLRef)v57[5], 0, v13);
        QP::Lexer::loadLexerResource(*((QP::Lexer **)this + 5), (CFURLRef)v51[5]);
        QP::Lexer::loadLexerResource(*((QP::Lexer **)this + 5), v45[5]);
        QP::Lexer::loadLexerResource(*((QP::Lexer **)this + 5), (CFURLRef)v39[5]);
        QP::Formatter::loadFormatterResource(*((QP::DateFormatter ***)this + 8), (const __CFURL *)v33[5]);
        QP::Lexer::loadLexerResource(*((QP::Lexer **)this + 5), (CFURLRef)v27[5]);
        QPSpotlightKnowledgeSourceLoadResources(*((_QWORD **)this + 10));
        *((_BYTE *)this + 88) = 1;
      }
    }
    else if (v57[5])
    {
      if (parserLogger(void)::token != -1)
        dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
      v20 = parserLogger(void)::log;
      if (os_log_type_enabled((os_log_t)parserLogger(void)::log, OS_LOG_TYPE_INFO))
      {
        v22 = v57[5];
        *(_DWORD *)v62 = 138412290;
        v63 = v22;
        _os_log_impl(&dword_218E10000, v20, OS_LOG_TYPE_INFO, "QueryParserEngine: loading fallback with url %@", v62, 0xCu);
      }
      QP::ParserGrammar::loadParserGrammarResource(*((const void ***)this + 3), (CFURLRef)v57[5], (__CFError **)1, v21);
    }
    _Block_object_dispose(&v26, 8);
    if (cf)
      CFRelease(cf);
    _Block_object_dispose(&v32, 8);
    if (v37)
      CFRelease(v37);
    _Block_object_dispose(&v38, 8);
    if (v43)
      CFRelease(v43);
    _Block_object_dispose(&v44, 8);
    if (v49)
      CFRelease(v49);
    _Block_object_dispose(&v50, 8);
    if (v55)
      CFRelease(v55);
    _Block_object_dispose(&v56, 8);
    if (v61)
      CFRelease(v61);
    _Block_object_dispose(&buf, 8);
    if (v68)
      CFRelease(v68);
  }
}

void sub_218E6B5B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void QP::QueryParserEngine::~QueryParserEngine(QP::QueryParserEngine *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  *(_QWORD *)this = &off_24DA25ED0;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<QP::Parser>::reset[abi:ne180100]((QP::Parser **)this + 7, 0);
  v14 = 0uLL;
  std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)this + 40, &v14);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v14 = 0uLL;
  std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)this + 24, &v14);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v10 = (uint64_t *)((char *)this + 72);
  v9 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
    std::default_delete<QP::Embedder>::operator()[abi:ne180100]((uint64_t)this + 72, v9);
  v11 = (uint64_t *)*((_QWORD *)this + 10);
  if (v11)
    QPSpotlightKnowledgeSourceRelease(v11);
  v12 = *v10;
  *v10 = 0;
  if (v12)
    std::default_delete<QP::Embedder>::operator()[abi:ne180100]((uint64_t)this + 72, v12);
  v13 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  std::unique_ptr<QP::Parser>::reset[abi:ne180100]((QP::Parser **)this + 7, 0);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  QP::QueryParserEngine::~QueryParserEngine(this);
  JUMPOUT(0x219A24D0CLL);
}

uint64_t QP::QueryParserEngine::setLocale(QP::ParserConfiguration **this, const __CFLocale *a2, const __CFArray *a3, int a4)
{
  return QP::ParserConfiguration::setLocale(this[1], a2, a3, a4);
}

uint64_t QP::QueryParserEngine::locale(QP::QueryParserEngine *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return *(_QWORD *)(v1 + 104);
  else
    return 0;
}

uint64_t QP::QueryParserEngine::getPreferredLanguages(QP::QueryParserEngine *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return *(_QWORD *)(v1 + 160);
  else
    return 0;
}

uint64_t QP::QueryParserEngine::useKnowledgeSource(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return QP::Lexer::useKnowledgeSource(result, a2);
  return result;
}

uint64_t QP::QueryParserEngine::useSystemLocale(QP::QueryParserEngine *this, const __CFBoolean *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return QP::ParserConfiguration::setUseSystemLocale(result, a2);
  return result;
}

uint64_t QP::QueryParserEngine::resourcesLoaded(QP::QueryParserEngine *this)
{
  return *((unsigned __int8 *)this + 88);
}

BOOL QP::QueryParserEngine::parsingEnabled(QP::QueryParserEngine *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  return v1 && *(_BYTE *)(v1 + 48) != 0;
}

uint64_t QP::QueryParserEngine::setPrivateParsing(QP::QueryParserEngine *this, const __CFBoolean *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return QP::ParserConfiguration::setPrivateParsing(result, a2);
  return result;
}

uint64_t QP::QueryParserEngine::setEmbeddingsEnabled(QP::QueryParserEngine *this, const __CFBoolean *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return QP::ParserConfiguration::setEmbeddingsEnabled(result, a2);
  return result;
}

uint64_t QP::QueryParserEngine::embeddingsEnabled(QP::QueryParserEngine *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 1) + 50);
}

uint64_t QP::QueryParserEngine::setU2Enabled(QP::QueryParserEngine *this, const __CFBoolean *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return QP::ParserConfiguration::setU2Enabled(result, a2);
  return result;
}

uint64_t QP::QueryParserEngine::U2Enabled(QP::QueryParserEngine *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 1) + 53);
}

uint64_t QP::QueryParserEngine::setUseLLMParse(QP::QueryParserEngine *this, const __CFBoolean *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return QP::ParserConfiguration::setUseLLMParse(result, a2);
  return result;
}

uint64_t QP::QueryParserEngine::useLLMParse(QP::QueryParserEngine *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 1) + 54);
}

void QP::QueryParserEngine::preheat(QP::Parser **this)
{
  QP::Embedder *v2;

  QP::Parser::preheat(this[7]);
  if (*((_BYTE *)this[1] + 50))
  {
    v2 = this[9];
    if (v2)
      QP::Embedder::preheat(v2);
  }
}

QP::Embedder *QP::QueryParserEngine::cooldown(QP::Parser **this)
{
  QP::Embedder *result;

  QP::Parser::cooldown(this[7]);
  result = this[9];
  if (result)
    return (QP::Embedder *)QP::Embedder::cooldown(result);
  return result;
}

_BYTE *QP::QueryParserEngine::setIsEntitySearch(QP::QueryParserEngine *this, const __CFBoolean *a2, const __CFBoolean *a3, const __CFBoolean *a4)
{
  _BYTE *result;

  result = (_BYTE *)*((_QWORD *)this + 1);
  if (result)
    return QP::ParserConfiguration::setIsEntitySearch(result, a2, a3, a4);
  return result;
}

BOOL QP::QueryParserEngine::entitySearchEnabled(QP::QueryParserEngine *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  return v1 && *(_BYTE *)(v1 + 60) != 0;
}

uint64_t QP::QueryParserEngine::loadAssetsWithURL(QP::QueryParserEngine *this, const __CFLocale *a2, CFURLRef url)
{
  const __CFAllocator *v5;
  const __CFURL *v6;
  __CFError **v7;
  __CFError **v8;
  uint64_t v9;
  NSObject *v10;
  __CFError **v11;
  const __CFURL *v12;
  const __CFURL *v13;
  const __CFURL *v14;
  const __CFURL *v15;
  const __CFURL *v16;
  uint64_t v17;
  uint8_t buf[4];
  CFURLRef v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v6 = CFURLCreateCopyAppendingPathComponent((CFAllocatorRef)*MEMORY[0x24BDBD240], url, CFSTR("config.plist"), 0);
  QP::ParserConfiguration::loadConfigurationResource(*((QP::ParserConfiguration **)this + 1), v6, v7, v8);
  v9 = *((_QWORD *)this + 1);
  if (!*(_QWORD *)(v9 + 200) || !*(_QWORD *)(v9 + 104) || !*(_BYTE *)(v9 + 33))
  {
    v17 = 0;
    if (!v6)
      return v17;
LABEL_23:
    CFRelease(v6);
    return v17;
  }
  if (parserLogger(void)::token != -1)
    dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
  v10 = parserLogger(void)::log;
  if (os_log_type_enabled((os_log_t)parserLogger(void)::log, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v20 = url;
    _os_log_impl(&dword_218E10000, v10, OS_LOG_TYPE_INFO, "QueryParserEngine: loading assets with url %@", buf, 0xCu);
  }
  v12 = CFURLCreateCopyAppendingPathComponent(v5, url, CFSTR("cfg.plist"), 0);
  if (v6)
    CFRelease(v6);
  QP::ParserGrammar::loadParserGrammarResource(*((const void ***)this + 3), v12, 0, v11);
  v13 = CFURLCreateCopyAppendingPathComponent(v5, url, CFSTR("root.cache"), 0);
  if (v12)
    CFRelease(v12);
  QP::Lexer::loadLexerResource(*((QP::Lexer **)this + 5), v13);
  v14 = CFURLCreateCopyAppendingPathComponent(v5, url, CFSTR("dates.cache"), 0);
  if (v13)
    CFRelease(v13);
  QP::Lexer::loadLexerResource(*((QP::Lexer **)this + 5), v14);
  v15 = CFURLCreateCopyAppendingPathComponent(v5, url, CFSTR("lexicon.cache"), 0);
  if (v14)
    CFRelease(v14);
  QP::Lexer::loadLexerResource(*((QP::Lexer **)this + 5), v15);
  v16 = CFURLCreateCopyAppendingPathComponent(v5, url, CFSTR("dates.plist"), 0);
  if (v15)
    CFRelease(v15);
  QP::Formatter::loadFormatterResource(*((QP::DateFormatter ***)this + 8), v16);
  v6 = CFURLCreateCopyAppendingPathComponent(v5, url, CFSTR("reference.mdplist"), 0);
  if (v16)
    CFRelease(v16);
  QP::Lexer::loadLexerResource(*((QP::Lexer **)this + 5), v6);
  v17 = 1;
  if (v6)
    goto LABEL_23;
  return v17;
}

void sub_218E6BCBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void QP::QueryParserEngine::clearResources(QP::QueryParserEngine *this)
{
  QP::ParserGrammar::clearResources(*((QP::ParserGrammar **)this + 3));
  QP::Lexer::clearResources(*((QP::DateConverter ****)this + 5));
  QP::Formatter::clearResources(*((QP::Formatter **)this + 8));
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
  nlp::CFScopedPtr<__CFURL const*>::reset((const void **)(a1 + 40), 0);
}

void ___ZN2QP17QueryParserEngine15updateResourcesEv_block_invoke(_QWORD *a1, CFURLRef url)
{
  const __CFString *PathComponent;
  uint64_t v5;
  CFTypeRef v6;

  PathComponent = CFURLCopyLastPathComponent(url);
  if (CFStringsAreEqual(PathComponent, CFSTR("config.plist")))
  {
    v5 = *(_QWORD *)(a1[4] + 8);
    v6 = CFRetain(url);
  }
  else if (CFStringsAreEqual(PathComponent, CFSTR("cfg.plist")))
  {
    v5 = *(_QWORD *)(a1[5] + 8);
    v6 = CFRetain(url);
  }
  else if (CFStringsAreEqual(PathComponent, CFSTR("dates.plist")))
  {
    v5 = *(_QWORD *)(a1[6] + 8);
    v6 = CFRetain(url);
  }
  else if (CFStringsAreEqual(PathComponent, CFSTR("root.cache")))
  {
    v5 = *(_QWORD *)(a1[7] + 8);
    v6 = CFRetain(url);
  }
  else if (CFStringsAreEqual(PathComponent, CFSTR("dates.cache")))
  {
    v5 = *(_QWORD *)(a1[8] + 8);
    v6 = CFRetain(url);
  }
  else if (CFStringsAreEqual(PathComponent, CFSTR("lexicon.cache")))
  {
    v5 = *(_QWORD *)(a1[9] + 8);
    v6 = CFRetain(url);
  }
  else
  {
    if (!CFStringsAreEqual(PathComponent, CFSTR("reference.mdplist")))
      goto LABEL_16;
    v5 = *(_QWORD *)(a1[10] + 8);
    v6 = CFRetain(url);
  }
  nlp::CFScopedPtr<__CFURL const*>::reset((const void **)(v5 + 40), v6);
LABEL_16:
  if (PathComponent)
    CFRelease(PathComponent);
}

void sub_218E6BECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void QP::QueryParserEngine::setString(QP::QueryParserEngine *this, const __CFString *a2, const __CFDictionary *a3)
{
  QP::QueryParserEngine::setString(this, a2, a3, *(unsigned __int8 *)(*((_QWORD *)this + 1) + 53), *(unsigned __int8 *)(*((_QWORD *)this + 1) + 54), *(unsigned __int8 *)(*((_QWORD *)this + 1) + 50), *(unsigned __int8 *)(*((_QWORD *)this + 1) + 60), 1);
}

void QP::QueryParserEngine::setString(QP::QueryParserEngine *this, const __CFString *a2, const __CFDictionary *a3, int a4, int a5, int a6, int a7, int a8)
{
  const __CFLocale *Locale;
  void *Region;
  const __CFArray *PreferredLanguages;
  const void **v17;
  CFIndex FirstWeekDay;
  QP::ParserConfiguration *v19;
  const void **v20;
  NSObject *v21;
  os_signpost_id_t v22;
  os_signpost_id_t v23;
  int v24;
  NSObject *v25;
  os_signpost_id_t v26;
  os_signpost_id_t v27;
  NSObject *v28;
  os_signpost_id_t v29;
  os_signpost_id_t v30;
  NSObject *v31;
  NSObject *v32;
  os_signpost_id_t v33;
  os_signpost_id_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  xpc_object_t empty;
  const __CFString *v45;
  void **v46;
  unsigned int v47;
  char *v48;
  NSObject *v49;
  char *v50;
  void **v51;
  const char *v52;
  NSObject *v53;
  QP::Embedder *v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t value;
  unsigned int Length;
  char *string;
  uint64_t v67;
  _QWORD v70[6];
  void *__p[2];
  uint64_t v72;
  _BYTE buf[24];
  void **v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  unsigned int v78;
  __int16 v79;
  unsigned int v80;
  __int16 v81;
  double v82;
  __int16 v83;
  double v84;
  __int16 v85;
  double v86;
  __int16 v87;
  double v88;
  __int16 v89;
  double v90;
  __int16 v91;
  double v92;
  __int16 v93;
  int v94;
  __int16 v95;
  int v96;
  __int16 v97;
  const char *v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(*((_QWORD *)this + 1) + 32))
  {
    if (systemListenerHasLocaleUpdates())
    {
      Locale = (const __CFLocale *)systemListenerGetLocale();
      Region = systemListenerGetRegion();
      PreferredLanguages = (const __CFArray *)systemListenerGetPreferredLanguages();
      QP::ParserConfiguration::setLocale(*((QP::ParserConfiguration **)this + 1), Locale, PreferredLanguages, 1);
      v17 = (const void **)*((_QWORD *)this + 1);
      if (v17)
        QP::ParserConfiguration::setCalendarRegion(v17, Region);
    }
  }
  if (!*(_QWORD *)(*((_QWORD *)this + 1) + 168) && systemListenerHasResourceUpdates())
    QP::QueryParserEngine::updateResources(this);
  if (*(_BYTE *)(*((_QWORD *)this + 1) + 32))
  {
    if (systemListenerHasFirstWeekDayUpdates())
    {
      FirstWeekDay = systemListenerGetFirstWeekDay();
      v19 = (QP::ParserConfiguration *)*((_QWORD *)this + 1);
      if (v19)
        QP::ParserConfiguration::setFirstWeekDay(v19, FirstWeekDay);
    }
  }
  QP::ParserConfiguration::setCanUseEmbeddings(*((_QWORD *)this + 1), (const __CFBoolean *)*MEMORY[0x24BDBD270]);
  if (a6)
  {
    v20 = (const void **)*((_QWORD *)this + 9);
    if (v20)
      QP::Embedder::clear(v20);
  }
  if (*((_QWORD *)this + 5))
  {
    v67 = mach_absolute_time();
    if (parserLogger(void)::token != -1)
      dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
    v21 = parserLogger(void)::log;
    v22 = os_signpost_id_generate((os_log_t)parserLogger(void)::log);
    if (v22 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v23 = v22;
      if (os_signpost_enabled(v21))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_218E10000, v21, OS_SIGNPOST_INTERVAL_BEGIN, v23, "QPLexer::setString::begin", "", buf, 2u);
      }
    }
    v24 = (a6 & 1) != 0 || *(_QWORD *)(*((_QWORD *)this + 1) + 8) == 13;
    QP::Lexer::setString(*((const void ***)this + 5), a2, v24);
    if (parserLogger(void)::token != -1)
      dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
    v25 = parserLogger(void)::log;
    v26 = os_signpost_id_generate((os_log_t)parserLogger(void)::log);
    if (v26 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v27 = v26;
      if (os_signpost_enabled(v25))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_218E10000, v25, OS_SIGNPOST_INTERVAL_END, v27, "QPLexer::setString::end", "", buf, 2u);
      }
    }
    if (*((_QWORD *)this + 7))
    {
      if (parserLogger(void)::token != -1)
        dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
      v28 = parserLogger(void)::log;
      v29 = os_signpost_id_generate((os_log_t)parserLogger(void)::log);
      if (v29 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v30 = v29;
        if (os_signpost_enabled(v28))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_218E10000, v28, OS_SIGNPOST_INTERVAL_BEGIN, v30, "QPParser::parse::begin", "", buf, 2u);
        }
      }
      if (parserLogger(void)::token != -1)
        dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
      v31 = parserLogger(void)::log;
      if (os_log_type_enabled((os_log_t)parserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = a4;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = a5;
        _os_log_impl(&dword_218E10000, v31, OS_LOG_TYPE_DEFAULT, "[QPNLU] starting m_parser parse with u2:%d and llm:%d", buf, 0xEu);
      }
      QP::Parser::parse(*((QP::Parser **)this + 7), a4, a5, a7, a8);
      if (parserLogger(void)::token != -1)
        dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
      v32 = parserLogger(void)::log;
      v33 = os_signpost_id_generate((os_log_t)parserLogger(void)::log);
      if (v33 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v34 = v33;
        if (os_signpost_enabled(v32))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_218E10000, v32, OS_SIGNPOST_INTERVAL_END, v34, "QPParser::parse::end", "", buf, 2u);
        }
      }
      v35 = mach_absolute_time();
      if (QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::onceToken == -1)
      {
        if (!a4)
          goto LABEL_75;
      }
      else
      {
        dispatch_once(&QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::onceToken, &__block_literal_global_56);
        if (!a4)
          goto LABEL_75;
      }
      v36 = *((_QWORD *)this + 1);
      if (!*(_BYTE *)(v36 + 36) && !*(_BYTE *)(v36 + 49))
      {
        v60 = QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::sTimebaseInfo;
        v61 = *(unsigned int *)algn_253D1B614;
        v37 = *(unsigned int **)(*((_QWORD *)this + 7) + 48);
        Length = CFStringGetLength(a2);
        v38 = (char *)(v37 + 14);
        if (*((char *)v37 + 79) < 0)
        {
          if (!*((_QWORD *)v37 + 8))
          {
            string = 0;
LABEL_55:
            v39 = *(_QWORD *)(*((_QWORD *)this + 1) + 104);
            value = *v37;
            v40 = *((_QWORD *)this + 5);
            v42 = *(_QWORD *)(v40 + 456);
            v41 = *(_QWORD *)(v40 + 464);
            v58 = *((_QWORD *)v37 + 2);
            v59 = *((_QWORD *)v37 + 1);
            v43 = *((_QWORD *)v37 + 5);
            v56 = *((_QWORD *)v37 + 4);
            v57 = *((_QWORD *)v37 + 3);
            v63 = v37[12];
            v62 = v37[13];
            empty = xpc_dictionary_create_empty();
            __p[0] = 0;
            __p[1] = 0;
            v72 = 0;
            if (v39)
            {
              v45 = (const __CFString *)MEMORY[0x219A24574](v39);
              if (v45)
              {
                QP::getUTF8StringFromCFString(v45, buf);
                if (SHIBYTE(v72) < 0)
                  operator delete(__p[0]);
                *(_OWORD *)__p = *(_OWORD *)buf;
                v72 = *(_QWORD *)&buf[16];
              }
            }
            if (v72 >= 0)
              v46 = __p;
            else
              v46 = (void **)__p[0];
            xpc_dictionary_set_string(empty, "locale", (const char *)v46);
            xpc_dictionary_set_uint64(empty, "status", value);
            xpc_dictionary_set_uint64(empty, "queryLength", Length);
            v47 = -1431655765 * ((v41 - v42) >> 3);
            xpc_dictionary_set_uint64(empty, "tokenCount", v47);
            xpc_dictionary_set_double(empty, "totalLatency", (double)((v35 - v67) * v60 / v61) / 1000000000.0);
            xpc_dictionary_set_double(empty, "quLatency", (double)v59 / 1000000000.0);
            xpc_dictionary_set_double(empty, "loadLatency", (double)v58 / 1000000000.0);
            xpc_dictionary_set_double(empty, "cdmLatency", (double)v43 / 1000000000.0);
            xpc_dictionary_set_double(empty, "u2Latency", (double)(v57 - v43) / 1000000000.0);
            xpc_dictionary_set_double(empty, "ecrLatency", (double)v56 / 1000000000.0);
            xpc_dictionary_set_uint64(empty, "ecrCount", v63);
            xpc_dictionary_set_uint64(empty, "ecrErrorCount", v62);
            if (string)
              xpc_dictionary_set_string(empty, "errorMessage", string);
            v48 = QPProcessName();
            xpc_dictionary_set_string(empty, "process", v48);
            if (parserLogger(void)::token != -1)
              dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
            v49 = parserLogger(void)::log;
            if (os_log_type_enabled((os_log_t)parserLogger(void)::log, OS_LOG_TYPE_INFO))
            {
              v50 = QPProcessName();
              v51 = __p;
              if (v72 < 0)
                v51 = (void **)__p[0];
              *(_DWORD *)buf = 136318722;
              v52 = "";
              *(_QWORD *)&buf[4] = "com.apple.queryUnderstandingPerfAndReliability";
              *(_WORD *)&buf[12] = 2080;
              if (string)
                v52 = string;
              *(_QWORD *)&buf[14] = v50;
              *(_WORD *)&buf[22] = 2080;
              v74 = v51;
              v75 = 2048;
              v76 = value;
              v77 = 1024;
              v78 = Length;
              v79 = 1024;
              v80 = v47;
              v81 = 2048;
              v82 = (double)((v35 - v67) * v60 / v61) / 1000000000.0;
              v83 = 2048;
              v84 = (double)v59 / 1000000000.0;
              v85 = 2048;
              v86 = (double)v58 / 1000000000.0;
              v87 = 2048;
              v88 = (double)v43 / 1000000000.0;
              v89 = 2048;
              v90 = (double)(v57 - v43) / 1000000000.0;
              v91 = 2048;
              v92 = (double)v56 / 1000000000.0;
              v93 = 1024;
              v94 = v63;
              v95 = 1024;
              v96 = v62;
              v97 = 2080;
              v98 = v52;
              _os_log_impl(&dword_218E10000, v49, OS_LOG_TYPE_INFO, "log_query_parse_analytic_event: %s {\n\tprocess: %s\n\\tlocale: %s\ntstatus: %llu\n\tqueryLength: %u\n\ttokenCount: %u\n\ttotalLatency: %.4f\n\tquLatency: %.4f\n\tloadLatency: %.4f\n\tcdmLatency: %.4f\n\tu2Latency: %.4f\n\tecrLatency: %.4f\n\tecrCount: %u\n\tecrErrorCount: %u\n\terrorMessage: %s\n}",
                buf,
                0x88u);
            }
            analytics_send_event();
            xpc_release(empty);
            if (SHIBYTE(v72) < 0)
              operator delete(__p[0]);
            goto LABEL_75;
          }
          v38 = *(char **)v38;
        }
        else if (!*((_BYTE *)v37 + 79))
        {
          v38 = 0;
        }
        string = v38;
        goto LABEL_55;
      }
LABEL_75:
      if (parserLogger(void)::token != -1)
        dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
      v53 = parserLogger(void)::log;
      if (os_log_type_enabled((os_log_t)parserLogger(void)::log, OS_LOG_TYPE_DEBUG))
        QP::QueryParserEngine::setString((uint64_t)a3, v53);
      if (a6)
      {
        if (*(_BYTE *)(*((_QWORD *)this + 1) + 51))
        {
          v54 = (QP::Embedder *)*((_QWORD *)this + 9);
          if (v54)
          {
            if (QP::Embedder::shouldEmbedLanguage(v54, a3)
              && QP::Embedder::shouldEmbedString(*((QP::Embedder **)this + 9), a2))
            {
              v55 = (uint64_t *)*((_QWORD *)this + 7);
              v70[0] = MEMORY[0x24BDAC760];
              v70[1] = 0x40000000;
              v70[2] = ___ZN2QP17QueryParserEngine9setStringEPK10__CFStringPK14__CFDictionarybbbbb_block_invoke;
              v70[3] = &__block_descriptor_tmp_25_0;
              v70[4] = this;
              v70[5] = a3;
              QP::Parser::embeddingString(v55, (uint64_t)v70);
            }
          }
        }
      }
    }
  }
}

void sub_218E6C810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN2QP17QueryParserEngine9setStringEPK10__CFStringPK14__CFDictionarybbbbb_block_invoke(uint64_t a1, const __CFAttributedString *a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  const __CFAttributedString *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (QP::Embedder::shouldEmbedScript(*(QP::Embedder **)(v4 + 72), a2))
    {
      QP::Embedder::setAttributedString(*(const void ***)(v4 + 72), a2, *(const __CFDictionary **)(a1 + 40));
    }
    else
    {
      if (parserLogger(void)::token != -1)
        dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
      v5 = parserLogger(void)::log;
      if (os_log_type_enabled((os_log_t)parserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
      {
        v6 = 138412290;
        v7 = a2;
        _os_log_impl(&dword_218E10000, v5, OS_LOG_TYPE_DEFAULT, "[QPParser] not generating embedding for %@ due to unicode chars in embedding query string", (uint8_t *)&v6, 0xCu);
      }
    }
  }
}

uint64_t QP::QueryParserEngine::string(QP::QueryParserEngine *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 5);
  if (v1)
    return *(_QWORD *)(v1 + 440);
  else
    return 0;
}

void QP::QueryParserEngine::setDate(QP::QueryParserEngine *this, const __CFDate *a2)
{
  QP::ParserConfiguration *v2;

  v2 = (QP::ParserConfiguration *)*((_QWORD *)this + 1);
  if (v2)
    QP::ParserConfiguration::setDate(v2, a2);
}

uint64_t QP::QueryParserEngine::getDate(QP::QueryParserEngine *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return *(_QWORD *)(v1 + 72);
  else
    return 0;
}

uint64_t QP::QueryParserEngine::getCalendar(QP::QueryParserEngine *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return *(_QWORD *)(v1 + 88);
  else
    return 0;
}

_QWORD *QP::QueryParserEngine::updateWithOptions(QP::QueryParserEngine *this, const __CFDictionary *a2)
{
  QP::ParserConfiguration *v4;
  _QWORD *result;

  v4 = (QP::ParserConfiguration *)*((_QWORD *)this + 1);
  if (v4)
  {
    QP::ParserConfiguration::update(v4);
    QP::Lexer::updateResources(*((QP::Lexer **)this + 5));
    QP::Lexer::clear(*((QP::Lexer **)this + 5));
    QP::Parser::clear(*((QP::Parser **)this + 7));
  }
  result = (_QWORD *)*((_QWORD *)this + 10);
  if (result)
    return QPSpotlightKnowledgeSourceUpdateOptions(result, (uint64_t)a2);
  return result;
}

uint64_t QP::QueryParserEngine::updateEntitySearch(uint64_t this)
{
  uint64_t v1;

  if (*(_QWORD *)(this + 8))
  {
    v1 = this;
    QP::Lexer::updateTagger(*(QP::Lexer **)(this + 40));
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 64) + 48))(*(_QWORD *)(v1 + 64));
  }
  return this;
}

_DWORD *QP::QueryParserEngine::setFormat(uint64_t a1, int a2, int a3)
{
  _DWORD *result;

  result = *(_DWORD **)(a1 + 8);
  if (result)
    return (_DWORD *)QP::ParserConfiguration::setParserFormat(result, a2, a3);
  return result;
}

uint64_t QP::QueryParserEngine::setCustomFieldSpecifications(QP::QueryParserEngine *this, const __CFDictionary *a2, int a3)
{
  uint64_t result;
  uint64_t *v5;

  result = *((_QWORD *)this + 1);
  if (result)
  {
    result = QP::ParserConfiguration::setCustomFieldSpecifications((QP::ParserConfiguration *)result, a2, a3);
    if ((_DWORD)result)
    {
      v5 = (uint64_t *)*((_QWORD *)this + 10);
      if (v5)
        QPSpotlightKnowledgeSourceSetCustomFields(v5, *(const __CFDictionary **)(*((_QWORD *)this + 1) + 224));
      return 1;
    }
  }
  return result;
}

QP::ParserConfiguration *QP::QueryParserEngine::setContextIdentifier(QP::QueryParserEngine *this, const __CFString *a2, int a3)
{
  QP::ParserConfiguration *result;

  result = (QP::ParserConfiguration *)*((_QWORD *)this + 1);
  if (result)
    return (QP::ParserConfiguration *)QP::ParserConfiguration::setAppContext(result, a2, a3);
  return result;
}

QP::ParserConfiguration *QP::QueryParserEngine::setCustomResourceDirectory(QP::QueryParserEngine *this, const __CFURL *a2, int a3)
{
  QP::ParserConfiguration *result;

  result = (QP::ParserConfiguration *)*((_QWORD *)this + 1);
  if (result)
    return (QP::ParserConfiguration *)QP::ParserConfiguration::setCustomResourceDirectory(result, a2, a3);
  return result;
}

uint64_t QP::QueryParserEngine::getCustomResourceDirectory(QP::QueryParserEngine *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return *(_QWORD *)(v1 + 168);
  else
    return 0;
}

uint64_t QP::QueryParserEngine::setLoadAnnotations(QP::QueryParserEngine *this, const __CFBoolean *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return QP::ParserConfiguration::setAnnotationsEnabled(result, a2);
  return result;
}

uint64_t QP::QueryParserEngine::setIgnoreAttributedParses(QP::QueryParserEngine *this, const __CFBoolean *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return QP::ParserConfiguration::setIgnoreAttributedParses(result, a2);
  return result;
}

uint64_t QP::QueryParserEngine::setIgnoreFutureDates(QP::QueryParserEngine *this, const __CFBoolean *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return QP::ParserConfiguration::setIgnoreFutureDates(result, a2);
  return result;
}

uint64_t QP::QueryParserEngine::setIgnorePastDates(QP::QueryParserEngine *this, const __CFBoolean *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return QP::ParserConfiguration::setIgnorePastDates(result, a2);
  return result;
}

uint64_t QP::QueryParserEngine::setIgnoreRecurringDates(QP::QueryParserEngine *this, const __CFBoolean *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return QP::ParserConfiguration::setIgnoreRecurringDates(result, a2);
  return result;
}

uint64_t QP::QueryParserEngine::setResolveFutureDates(QP::QueryParserEngine *this, const __CFBoolean *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return QP::ParserConfiguration::setResolveFutureDates(result, a2);
  return result;
}

uint64_t QP::QueryParserEngine::setResolvePastDates(QP::QueryParserEngine *this, const __CFBoolean *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return QP::ParserConfiguration::setResolvePastDates(result, a2);
  return result;
}

uint64_t QP::QueryParserEngine::setResolveConcreteDates(QP::QueryParserEngine *this, const __CFBoolean *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return QP::ParserConfiguration::setResolveConcreteDates(result, a2);
  return result;
}

uint64_t QP::QueryParserEngine::setUsePartOfSpeech(QP::QueryParserEngine *this, const __CFBoolean *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return QP::ParserConfiguration::setUsePartOfSpeech(result, a2);
  return result;
}

__n128 __Block_byref_object_copy__26(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__27(uint64_t a1)
{
  return std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](a1 + 40);
}

__n128 __Block_byref_object_copy__28(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t __Block_byref_object_copy__30(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

void __Block_byref_object_dispose__31(uint64_t a1)
{
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)(a1 + 40), 0);
}

void QP::QueryParserEngine::enumerateParseResults(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  const __CFDictionary *v16;
  CFDictionaryRef Copy;
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  char v21;
  _QWORD v22[9];
  _QWORD v23[5];
  __int128 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  __n128 (*v32)(uint64_t, uint64_t);
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  std::__shared_weak_count *v35;

  if (a1[1])
  {
    v3 = a1[7];
    if (v3)
    {
      if (a1[8])
      {
        v29 = 0;
        v30 = &v29;
        v31 = 0x3802000000;
        v32 = __Block_byref_object_copy__26;
        v33 = __Block_byref_object_dispose__27;
        v34 = 0;
        v35 = 0;
        v25 = 0;
        v26 = &v25;
        v27 = 0x2000000000;
        v28 = 0;
        v23[0] = 0;
        v23[1] = v23;
        v23[2] = 0x3802000000;
        v23[3] = __Block_byref_object_copy__28;
        v23[4] = __Block_byref_object_dispose__29;
        v24 = xmmword_218E9F890;
        v22[0] = MEMORY[0x24BDAC760];
        v22[1] = 0x40000000;
        v22[2] = ___ZN2QP17QueryParserEngine21enumerateParseResultsEU13block_pointerFvPK14__CFDictionaryPbE_block_invoke;
        v22[3] = &unk_24DA25F38;
        v22[7] = v23;
        v22[8] = a1;
        v22[5] = &v29;
        v22[6] = &v25;
        v22[4] = a2;
        QP::Parser::enumerateParses(v3, (uint64_t)v22);
        v21 = 0;
        v5 = v26[3];
        if (v5)
        {
          (*(void (**)(uint64_t, uint64_t, char *))(a2 + 16))(a2, v5, &v21);
          CFRelease((CFTypeRef)v26[3]);
        }
        else if (v30[5])
        {
          v9 = a1[8];
          v10 = (std::__shared_weak_count *)v30[6];
          v19 = v30[5];
          v20 = v10;
          if (v10)
          {
            p_shared_owners = (unint64_t *)&v10->__shared_owners_;
            do
              v12 = __ldxr(p_shared_owners);
            while (__stxr(v12 + 1, p_shared_owners));
          }
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 32))(v9, &v19);
          v13 = v20;
          if (v20)
          {
            v14 = (unint64_t *)&v20->__shared_owners_;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          v16 = *(const __CFDictionary **)(a1[8] + 56);
          if (v16)
          {
            Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v16);
            if (Copy)
            {
              v18 = 0;
              (*(void (**)(uint64_t, CFDictionaryRef, char *))(a2 + 16))(a2, Copy, &v18);
              CFRelease(Copy);
            }
          }
        }
        _Block_object_dispose(v23, 8);
        _Block_object_dispose(&v25, 8);
        _Block_object_dispose(&v29, 8);
        v6 = v35;
        if (v35)
        {
          v7 = (unint64_t *)&v35->__shared_owners_;
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 - 1, v7));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
      }
    }
  }
}

void sub_218E6CE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  uint64_t v16;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 136), 8);
  _Block_object_dispose((const void *)(v16 - 104), 8);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v15 + 40);
  _Unwind_Resume(a1);
}

void ___ZN2QP17QueryParserEngine21enumerateParseResultsEU13block_pointerFvPK14__CFDictionaryPbE_block_invoke(_QWORD *a1, uint64_t *a2, _BYTE *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char v11;
  char v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  const __CFDictionary *v22;
  CFDictionaryRef Copy;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;

  v6 = a1[8];
  v7 = *(_QWORD *)(v6 + 64);
  v8 = a2[1];
  v26 = *a2;
  v27 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 32))(v7, &v26);
  v12 = v11;
  v13 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if ((v12 & 1) != 0)
        goto LABEL_9;
LABEL_19:
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40), a2);
      return;
    }
  }
  if ((v11 & 1) == 0)
    goto LABEL_19;
LABEL_9:
  if (!*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24)
    || QP::Parse::isValid((CFStringRef *)*a2)
    || ((v16 = *(_QWORD *)(a1[7] + 8),
         v17 = *(_QWORD *)(v16 + 40),
         v18 = *(_QWORD *)(v16 + 48),
         v19 = *(_QWORD *)(*a2 + 64),
         v20 = *(_QWORD *)(*a2 + 72),
         v17 == v19)
      ? (v21 = v18 == v20)
      : (v21 = 0),
        v21))
  {
    v22 = *(const __CFDictionary **)(*(_QWORD *)(v6 + 64) + 56);
    if (v22)
      Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v22);
    else
      Copy = 0;
    v24 = *(_QWORD *)(a1[6] + 8);
    if (*(_QWORD *)(v24 + 24))
    {
      (*(void (**)(_QWORD))(a1[4] + 16))(a1[4]);
      CFRelease(*(CFTypeRef *)(*(_QWORD *)(a1[6] + 8) + 24));
      *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = 0;
      v24 = *(_QWORD *)(a1[6] + 8);
    }
    *(_QWORD *)(v24 + 24) = Copy;
    v19 = *(_QWORD *)(*a2 + 64);
    v20 = *(_QWORD *)(*a2 + 72);
  }
  else
  {
    *a3 = 1;
  }
  v25 = *(_QWORD *)(a1[7] + 8);
  *(_QWORD *)(v25 + 40) = v19;
  *(_QWORD *)(v25 + 48) = v20;
}

void sub_218E6CFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QP::QueryParserEngine::enumerateSuggestionResults(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  const __CFDictionary *v6;
  uint64_t v7;
  _QWORD v8[6];
  char v9;
  _QWORD v10[10];
  _QWORD v11[3];
  char v12;
  _QWORD v13[4];
  _QWORD v14[4];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  CFTypeRef v20;

  if (a1[1])
  {
    v3 = a1[7];
    if (v3)
    {
      if (a1[8])
      {
        v15 = 0;
        v16 = &v15;
        v17 = 0x3002000000;
        v18 = __Block_byref_object_copy__30;
        v19 = __Block_byref_object_dispose__31;
        v20 = 0;
        v14[0] = 0;
        v14[1] = v14;
        v14[2] = 0x2000000000;
        v14[3] = -1;
        v13[0] = 0;
        v13[1] = v13;
        v13[2] = 0x2000000000;
        v13[3] = -1;
        v11[0] = 0;
        v11[1] = v11;
        v11[2] = 0x2000000000;
        v12 = 0;
        v5 = MEMORY[0x24BDAC760];
        v10[0] = MEMORY[0x24BDAC760];
        v10[1] = 0x40000000;
        v10[2] = ___ZN2QP17QueryParserEngine26enumerateSuggestionResultsEU13block_pointerFvPK14__CFDictionaryPbE_block_invoke;
        v10[3] = &unk_24DA25F60;
        v10[6] = v13;
        v10[7] = &v15;
        v10[4] = a2;
        v10[5] = v14;
        v10[8] = v11;
        v10[9] = a1;
        QP::Parser::enumerateParses(v3, (uint64_t)v10);
        v9 = 0;
        v6 = (const __CFDictionary *)v16[5];
        if (v6 && CFDictionaryGetCount(v6))
        {
          (*(void (**)(uint64_t, uint64_t, char *))(a2 + 16))(a2, v16[5], &v9);
        }
        else
        {
          v7 = a1[7];
          v8[0] = v5;
          v8[1] = 0x40000000;
          v8[2] = ___ZN2QP17QueryParserEngine26enumerateSuggestionResultsEU13block_pointerFvPK14__CFDictionaryPbE_block_invoke_2;
          v8[3] = &unk_24DA25F88;
          v8[4] = a2;
          v8[5] = a1;
          QP::Parser::enumerateTokenCompletions(v7, (uint64_t)v8);
        }
        _Block_object_dispose(v11, 8);
        _Block_object_dispose(v13, 8);
        _Block_object_dispose(v14, 8);
        _Block_object_dispose(&v15, 8);
        if (v20)
          CFRelease(v20);
      }
    }
  }
}

void sub_218E6D1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t v32;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v32 - 144), 8);
  _Block_object_dispose((const void *)(v32 - 112), 8);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)(v31 + 40), 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP17QueryParserEngine26enumerateSuggestionResultsEU13block_pointerFvPK14__CFDictionaryPbE_block_invoke(_QWORD *a1, _QWORD *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char v11;
  char v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  const __CFDictionary *v17;
  CFDictionaryRef Copy;
  uint64_t v19;
  uint64_t v20;
  CFTypeRef v21;
  uint64_t v22;
  CFTypeRef v23;
  uint64_t v24;
  const __CFDictionary *v25;
  CFIndex Count;
  uint64_t v27;
  std::__shared_weak_count *v28;
  CFTypeRef cf;

  v4 = a1[9];
  cf = 0;
  if (*(_QWORD *)(*a2 + 40) < *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24))
  {
    *a3 = 1;
    return;
  }
  v7 = *(_QWORD *)(v4 + 64);
  v8 = (std::__shared_weak_count *)a2[1];
  v27 = *a2;
  v28 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 32))(v7, &v27);
  v12 = v11;
  v13 = v28;
  if (!v28)
    goto LABEL_10;
  v14 = (unint64_t *)&v28->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
LABEL_10:
    if ((v11 & 1) != 0)
      goto LABEL_11;
LABEL_19:
    v21 = cf;
    goto LABEL_30;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if ((v12 & 1) == 0)
    goto LABEL_19;
LABEL_11:
  v16 = *(_QWORD *)(v4 + 64);
  v17 = *(const __CFDictionary **)(v16 + 64);
  if (v17)
  {
    Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v17);
    if (cf)
      CFRelease(cf);
    cf = Copy;
    v16 = *(_QWORD *)(v4 + 64);
  }
  v19 = *(_QWORD *)(v16 + 80);
  v20 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
  if (v19 <= v20)
    goto LABEL_21;
  v21 = cf;
  if (!CFDictionaryGetCount((CFDictionaryRef)cf))
  {
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 64) + 80);
    v20 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
LABEL_21:
    if (v19 < v20)
    {
      if (cf)
        CFRelease(cf);
      v21 = 0;
      cf = 0;
      *a3 = 1;
      goto LABEL_30;
    }
    v24 = a1[7];
    v25 = *(const __CFDictionary **)(*(_QWORD *)(v24 + 8) + 40);
    if (v25)
    {
      Count = CFDictionaryGetCount(v25);
      v24 = a1[7];
      if (Count)
      {
        (*(void (**)(void))(a1[4] + 16))();
        *(_BYTE *)(*(_QWORD *)(a1[8] + 8) + 24) = 1;
        nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)(*(_QWORD *)(a1[7] + 8) + 40), 0);
        v24 = a1[7];
      }
    }
    v22 = *(_QWORD *)(v24 + 8);
    v21 = cf;
    v23 = CFRetain(cf);
    goto LABEL_29;
  }
  v22 = *(_QWORD *)(a1[7] + 8);
  v23 = CFRetain(v21);
LABEL_29:
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)(v22 + 40), v23);
LABEL_30:
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = *(_QWORD *)(*a2 + 40);
  *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = *(_QWORD *)(*(_QWORD *)(v4 + 64) + 80);
  if (v21)
    CFRelease(v21);
}

void sub_218E6D450(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)va1, 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP17QueryParserEngine26enumerateSuggestionResultsEU13block_pointerFvPK14__CFDictionaryPbE_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  const __CFDictionary *v11;
  const void *Copy;
  uint64_t v13;
  std::__shared_weak_count *v14;
  CFTypeRef cf;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = (std::__shared_weak_count *)a2[1];
  v13 = *a2;
  v14 = v5;
  cf = 0;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 24))(v4, &v13);
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *(const __CFDictionary **)(*(_QWORD *)(v3 + 64) + 64);
  if (!v11)
  {
    Copy = cf;
    if (!cf)
      return;
    goto LABEL_15;
  }
  Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v11);
  if (cf)
    CFRelease(cf);
  cf = Copy;
  if (Copy)
  {
LABEL_15:
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    CFRelease(Copy);
  }
}

void sub_218E6D580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t QP::QueryParserEngine::copyCompletions(QP::QueryParserEngine *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  CFMutableArrayRef Mutable;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  Mutable = 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  if (*((_QWORD *)this + 1))
  {
    v2 = *((_QWORD *)this + 7);
    if (v2)
    {
      if (*((_QWORD *)this + 8))
      {
        v5[0] = MEMORY[0x24BDAC760];
        v5[1] = 0x40000000;
        v5[2] = ___ZN2QP17QueryParserEngine15copyCompletionsEv_block_invoke;
        v5[3] = &unk_24DA25FB0;
        v5[4] = &v6;
        QP::Parser::enumerateCompletions(v2, (uint64_t)v5);
      }
    }
  }
  v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_218E6D674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN2QP17QueryParserEngine15copyCompletionsEv_block_invoke(uint64_t a1, const void *a2)
{
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), a2);
}

uint64_t QP::QueryParserEngine::copyLastTokenCompletedQuery(QP::QueryParserEngine *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  CFMutableArrayRef Mutable;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  Mutable = 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v5[0] = MEMORY[0x24BDAC760];
    v5[1] = 0x40000000;
    v5[2] = ___ZN2QP17QueryParserEngine27copyLastTokenCompletedQueryEv_block_invoke;
    v5[3] = &unk_24DA25FD8;
    v5[4] = &v6;
    QP::Lexer::enumerateLastTokenCompletedQueries(v2, (uint64_t)v5);
  }
  v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_218E6D750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN2QP17QueryParserEngine27copyLastTokenCompletedQueryEv_block_invoke(uint64_t a1, const void *a2)
{
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), a2);
}

void QP::QueryParserEngine::enumerateDateRangeParses(QP::DateFormatter ***a1, const __CFString *a2, const __CFDictionary *a3, const __CFString *a4, const __CFDictionary *a5, uint64_t a6)
{
  const __CFString *v8;
  const __CFString *v9;

  v8 = QP::Formatter::copyDisplayStringWithStartAndEndDateForRange(a1[8], a2, a3, a4, a5);
  if (v8)
  {
    v9 = v8;
    QP::QueryParserEngine::setString((QP::QueryParserEngine *)a1, v8, 0, 0, 0, 0, 0, 0);
    QP::QueryParserEngine::enumerateParseResults(a1, a6);
    CFRelease(v9);
  }
}

void sub_218E6D7F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFDataRef QP::QueryParserEngine::copyQueryEmbeddingData(QP::QueryParserEngine *this)
{
  const __CFData *v1;

  v1 = *(const __CFData **)(*((_QWORD *)this + 9) + 16);
  if (v1)
    return CFDataCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v1);
  else
    return 0;
}

CFAttributedStringRef QP::QueryParserEngine::copyAttributedInput(QP::QueryParserEngine *this)
{
  const __CFAttributedString *v1;

  v1 = *(const __CFAttributedString **)(*((_QWORD *)this + 5) + 448);
  if (v1)
    return CFAttributedStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v1);
  else
    return 0;
}

void QP::QueryParserEngine::cancelWithQueryReference(QP::Embedder **this, CFDictionaryRef theDict)
{
  const __CFNumber *Value;
  uint64_t valuePtr;

  if (theDict && CFDictionaryContainsKey(theDict, CFSTR("queryID")))
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("queryID"));
    valuePtr = -1;
    CFNumberGetValue(Value, kCFNumberCFIndexType, &valuePtr);
    if (valuePtr != -1)
      QP::Embedder::cancelWithQueryID(this[9], valuePtr);
  }
}

uint64_t QP::Parser::Parser(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  QP::GraphStructureStack *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  CFMutableArrayRef Mutable;
  uint64_t v27;
  std::__shared_weak_count *v28;

  *(_QWORD *)a1 = *a2;
  v8 = a2[1];
  *(_QWORD *)(a1 + 8) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_QWORD *)(a1 + 16) = *a3;
  v11 = a3[1];
  *(_QWORD *)(a1 + 24) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_QWORD *)(a1 + 32) = *a4;
  v14 = a4[1];
  *(_QWORD *)(a1 + 40) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  std::allocate_shared[abi:ne180100]<QP::U2Parser,std::allocator<QP::U2Parser>,std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,std::shared_ptr<QP::Lexer> &,void>(a2, a3, a4, (_QWORD *)(a1 + 48));
  std::allocate_shared[abi:ne180100]<QP::LLMParser,std::allocator<QP::LLMParser>,std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,std::shared_ptr<QP::Lexer> &,void>(a2, a3, a4, (_QWORD *)(a1 + 64));
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  v17 = operator new();
  v18 = (QP::GraphStructureStack *)v17;
  v19 = a3[1];
  v27 = *a3;
  v28 = (std::__shared_weak_count *)v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  QP::GraphStructureStack::GraphStructureStack(v17, &v27);
  std::unique_ptr<QP::GraphStructureStack>::reset[abi:ne180100]((QP::GraphStructureStack **)(a1 + 80), v18);
  v22 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(a1 + 96), Mutable);
  return a1;
}

void sub_218E6DAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void **v18;
  uint64_t v19;

  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  MEMORY[0x219A24D0C](v19, 0x1020C402AAE87FCLL);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  a12 = v17 + 24;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  nlp::CFScopedPtr<__CFArray *>::reset(v18, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v17 + 8), 0);
  std::unique_ptr<QP::GraphStructureStack>::reset[abi:ne180100]((QP::GraphStructureStack **)v17, 0);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v16);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v15);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v14);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v13);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

QP::GraphStructureStack *std::unique_ptr<QP::GraphStructureStack>::reset[abi:ne180100](QP::GraphStructureStack **a1, QP::GraphStructureStack *a2)
{
  QP::GraphStructureStack *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    QP::GraphStructureStack::~GraphStructureStack(result);
    JUMPOUT(0x219A24D0CLL);
  }
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<QP::U2Parser,std::allocator<QP::U2Parser>,std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,std::shared_ptr<QP::Lexer> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0xE8uLL);
  result = std::__shared_ptr_emplace<QP::U2Parser>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,std::shared_ptr<QP::Lexer> &,std::allocator<QP::U2Parser>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_218E6DC00(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<QP::U2Parser>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,std::shared_ptr<QP::Lexer> &,std::allocator<QP::U2Parser>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  a1[2] = 0;
  *a1 = &unk_24DA26070;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<QP::U2Parser,std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,std::shared_ptr<QP::Lexer> &,QP::U2Parser*>((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_218E6DC4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::U2Parser>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA26070;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::U2Parser>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA26070;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A24D0CLL);
}

void std::__shared_ptr_emplace<QP::U2Parser>::__on_zero_shared(uint64_t a1)
{
  QP::U2Parser::~U2Parser((QP::U2Parser *)(a1 + 24));
}

uint64_t std::construct_at[abi:ne180100]<QP::U2Parser,std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,std::shared_ptr<QP::Lexer> &,QP::U2Parser*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v5 = (std::__shared_weak_count *)a2[1];
  v28 = *a2;
  v29 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (std::__shared_weak_count *)a3[1];
  v26 = *a3;
  v27 = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (std::__shared_weak_count *)a4[1];
  v24 = *a4;
  v25 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  QP::U2Parser::U2Parser(a1, &v28, &v26, &v24);
  v14 = v25;
  if (v25)
  {
    v15 = (unint64_t *)&v25->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v27;
  if (v27)
  {
    v18 = (unint64_t *)&v27->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v29;
  if (v29)
  {
    v21 = (unint64_t *)&v29->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  return a1;
}

void sub_218E6DDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void QP::U2Parser::~U2Parser(QP::U2Parser *this)
{
  void **v2;

  v2 = (void **)((char *)this + 184);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 160);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)this + 19, 0);
  std::__tree<unsigned short>::destroy((uint64_t)this + 128, *((_QWORD **)this + 17));
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)this + 112);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)this + 96);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)this + 80);
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
}

_QWORD *std::allocate_shared[abi:ne180100]<QP::LLMParser,std::allocator<QP::LLMParser>,std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,std::shared_ptr<QP::Lexer> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x80uLL);
  result = std::__shared_ptr_emplace<QP::LLMParser>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,std::shared_ptr<QP::Lexer> &,std::allocator<QP::LLMParser>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_218E6DF00(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<QP::LLMParser>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,std::shared_ptr<QP::Lexer> &,std::allocator<QP::LLMParser>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  a1[2] = 0;
  *a1 = &unk_24DA260C0;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<QP::LLMParser,std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,std::shared_ptr<QP::Lexer> &,QP::LLMParser*>((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_218E6DF4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::LLMParser>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA260C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::LLMParser>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA260C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A24D0CLL);
}

void std::__shared_ptr_emplace<QP::LLMParser>::__on_zero_shared(uint64_t a1)
{
  QP::LLMParser::~LLMParser((const void **)(a1 + 24));
}

uint64_t std::construct_at[abi:ne180100]<QP::LLMParser,std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,std::shared_ptr<QP::Lexer> &,QP::LLMParser*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v5 = (std::__shared_weak_count *)a2[1];
  v28 = *a2;
  v29 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (std::__shared_weak_count *)a3[1];
  v26 = *a3;
  v27 = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (std::__shared_weak_count *)a4[1];
  v24 = *a4;
  v25 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  QP::LLMParser::LLMParser(a1, &v28, &v26, &v24);
  v14 = v25;
  if (v25)
  {
    v15 = (unint64_t *)&v25->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v27;
  if (v27)
  {
    v18 = (unint64_t *)&v27->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v29;
  if (v29)
  {
    v21 = (unint64_t *)&v29->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  return a1;
}

void sub_218E6E0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void QP::LLMParser::~LLMParser(const void **this)
{
  void **v2;

  v2 = (void **)(this + 10);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)(this + 7);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v2);
  nlp::CFScopedPtr<__CFString const*>::reset(this + 6, 0);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)(this + 4));
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)(this + 2));
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void QP::GraphStructureStack::~GraphStructureStack(QP::GraphStructureStack *this)
{
  void **v2;

  v2 = (void **)((char *)this + 64);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 40);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

_QWORD *QP::PhotosFormatter::PhotosFormatter(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  const __CFLocale *v18;
  const __CFString *Value;
  QP::SpellCheckWrapper *v20;
  uint64_t v21;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v5 = (std::__shared_weak_count *)a2[1];
  v25 = *a2;
  v26 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = a3[1];
  v23 = *a3;
  v24 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  QP::SpotlightFormatter::SpotlightFormatter((uint64_t)a1, &v25, &v23);
  v11 = v24;
  if (v24)
  {
    v12 = (unint64_t *)&v24->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v26;
  if (v26)
  {
    v15 = (unint64_t *)&v26->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *a1 = &off_24DA274C0;
  a1[25] = 0;
  v17 = *a2;
  if (*(_BYTE *)(*a2 + 60) && *(_BYTE *)(v17 + 62))
  {
    v18 = *(const __CFLocale **)(v17 + 104);
    if (v18)
      Value = (const __CFString *)CFLocaleGetValue(v18, (CFLocaleKey)*MEMORY[0x24BDBD418]);
    else
      Value = 0;
    v20 = (QP::SpellCheckWrapper *)operator new();
    QP::SpellCheckWrapper::SpellCheckWrapper(v20, Value);
    v21 = a1[25];
    a1[25] = v20;
    if (v21)
      MEMORY[0x219A24D0C](v21, 0xC400A2AC0F1);
  }
  return a1;
}

void sub_218E6E35C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x219A24D0C](v2, 0xC400A2AC0F1);
  v4 = *(_QWORD *)(v1 + 200);
  *(_QWORD *)(v1 + 200) = 0;
  if (v4)
    MEMORY[0x219A24D0C](v4, 0xC400A2AC0F1);
  QP::SpotlightFormatter::~SpotlightFormatter((const void **)v1);
  _Unwind_Resume(a1);
}

uint64_t QP::SpotlightFormatter::SpotlightFormatter(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  const __CFAllocator *v16;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v18;
  CFMutableArrayRef v19;
  CFMutableArrayRef v20;
  CFMutableArrayRef v21;
  CFMutableArrayRef v22;
  CFMutableArrayRef v23;
  CFMutableArrayRef v24;
  CFMutableDictionaryRef v25;
  CFMutableArrayRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  uint64_t valuePtr;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;

  v4 = (std::__shared_weak_count *)a2[1];
  v34 = *a2;
  v35 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = a3[1];
  v32 = *a3;
  v33 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  QP::Formatter::Formatter(a1, &v34, &v32, *(const __CFString **)(*a2 + 176));
  v10 = v33;
  if (v33)
  {
    v11 = (unint64_t *)&v33->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v35;
  if (v35)
  {
    v14 = (unint64_t *)&v35->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *(_QWORD *)a1 = &off_24DA25C88;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  v16 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(a1 + 88), Mutable);
  v18 = CFArrayCreateMutable(v16, 0, MEMORY[0x24BDBD690]);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(a1 + 96), v18);
  v19 = CFArrayCreateMutable(v16, 0, MEMORY[0x24BDBD690]);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(a1 + 104), v19);
  v20 = CFArrayCreateMutable(v16, 0, MEMORY[0x24BDBD690]);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(a1 + 112), v20);
  v21 = CFArrayCreateMutable(v16, 0, MEMORY[0x24BDBD690]);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(a1 + 120), v21);
  v22 = CFArrayCreateMutable(v16, 0, MEMORY[0x24BDBD690]);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(a1 + 128), v22);
  v23 = CFArrayCreateMutable(v16, 0, MEMORY[0x24BDBD690]);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(a1 + 136), v23);
  v24 = CFArrayCreateMutable(v16, 0, MEMORY[0x24BDBD690]);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(a1 + 144), v24);
  v25 = CFDictionaryCreateMutable(v16, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)(a1 + 176), v25);
  v26 = CFArrayCreateMutable(v16, 0, MEMORY[0x24BDBD690]);
  nlp::CFScopedPtr<__CFArray const*>::reset((const void **)(a1 + 184), v26);
  valuePtr = 0;
  v27 = CFNumberCreate(v16, kCFNumberCFIndexType, &valuePtr);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)(a1 + 152), v27);
  valuePtr = 1;
  v28 = CFNumberCreate(v16, kCFNumberCFIndexType, &valuePtr);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)(a1 + 160), v28);
  valuePtr = 3;
  v29 = CFNumberCreate(v16, kCFNumberCFIndexType, &valuePtr);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)(a1 + 168), v29);
  *(_WORD *)(a1 + 192) = 0;
  return a1;
}

void sub_218E6E700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t QP::Formatter::Formatter(uint64_t a1, _QWORD *a2, uint64_t *a3, const __CFString *a4)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  const void **v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  const __CFAllocator *v28;
  CFStringRef Copy;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v31;
  CFMutableAttributedStringRef v32;
  const void **v34;
  const void **v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  *(_QWORD *)a1 = &unk_24DA271A8;
  v8 = a2[1];
  *(_QWORD *)(a1 + 8) = *a2;
  *(_QWORD *)(a1 + 16) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = a3[1];
  *(_QWORD *)(a1 + 24) = *a3;
  *(_QWORD *)(a1 + 32) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v34 = (const void **)(a1 + 64);
  v35 = (const void **)(a1 + 48);
  *(_OWORD *)(a1 + 72) = 0u;
  v14 = operator new();
  v15 = (const void **)v14;
  v16 = (std::__shared_weak_count *)a2[1];
  v38 = *a2;
  v39 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v19 = (std::__shared_weak_count *)a3[1];
  v36 = *a3;
  v37 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  QP::DateFormatter::DateFormatter(v14, &v38, &v36);
  std::unique_ptr<QP::DateFormatter>::reset[abi:ne180100]((const void ***)(a1 + 40), v15);
  v22 = v37;
  if (v37)
  {
    v23 = (unint64_t *)&v37->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v39;
  if (v39)
  {
    v26 = (unint64_t *)&v39->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (a4)
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], a4);
  else
    Copy = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("com.apple.query.parser"), v34, v35, v36);
  nlp::CFScopedPtr<__CFString const*>::reset(v35, Copy);
  Mutable = CFDictionaryCreateMutable(v28, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)(a1 + 56), Mutable);
  v31 = CFDictionaryCreateMutable(v28, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  nlp::CFScopedPtr<__CFDictionary *>::reset(v34, v31);
  v32 = CFAttributedStringCreateMutable(v28, 0);
  nlp::CFScopedPtr<__CFAttributedString *>::reset((const void **)(a1 + 72), v32);
  return a1;
}

void sub_218E6EA38(_Unwind_Exception *a1, const void **a2, const void **a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  const void ***v5;
  const void **v6;
  uint64_t v7;
  const void **v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  MEMORY[0x219A24D0C](v7, 0x60C40FA586727);
  nlp::CFScopedPtr<__CFAttributedString *>::reset(v8, 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset(a2, 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset(v6, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(a3, 0);
  std::unique_ptr<QP::DateFormatter>::reset[abi:ne180100](v5, 0);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

_QWORD *QP::RemindersParserFormatter::RemindersParserFormatter(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v4 = (std::__shared_weak_count *)a2[1];
  v19 = *a2;
  v20 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = a3[1];
  v17 = *a3;
  v18 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  QP::Formatter::Formatter((uint64_t)a1, &v19, &v17, CFSTR("com.apple.reminders.parser"));
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v20;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *a1 = &unk_24DA24758;
  return a1;
}

void sub_218E6EBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *QP::PhotosParserFormatter::PhotosParserFormatter(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v4 = (std::__shared_weak_count *)a2[1];
  v19 = *a2;
  v20 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = a3[1];
  v17 = *a3;
  v18 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  QP::Formatter::Formatter((uint64_t)a1, &v19, &v17, CFSTR("com.apple.photos"));
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v20;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *a1 = &unk_24DA24EB8;
  return a1;
}

void sub_218E6ECDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *QP::VisualGenerationFormatter::VisualGenerationFormatter(_QWORD *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v6 = (std::__shared_weak_count *)a2[1];
  v24 = *a2;
  v25 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = a3[1];
  v22 = *a3;
  v23 = (std::__shared_weak_count *)v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  QP::Formatter::Formatter((uint64_t)a1, &v24, &v22, CFSTR("com.apple.visual-generation"));
  v12 = v23;
  if (v23)
  {
    v13 = (unint64_t *)&v23->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v25;
  if (v25)
  {
    v16 = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *a1 = &off_24DA264C0;
  v18 = a4[1];
  a1[11] = *a4;
  a1[12] = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  a1[13] = NLDependencyParserCreateWithOptions();
  return a1;
}

void sub_218E6EE38(_Unwind_Exception *a1)
{
  QP::Formatter *v1;
  uint64_t v2;

  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v2);
  QP::Formatter::~Formatter(v1);
  _Unwind_Resume(a1);
}

uint64_t ___Z36QPTimingNanosecondsSinceAbsoluteTimey_block_invoke_0()
{
  return mach_timebase_info((mach_timebase_info_t)&QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::sTimebaseInfo);
}

_QWORD *std::allocate_shared[abi:ne180100]<QP::ParserConfiguration,std::allocator<QP::ParserConfiguration>,__CFDictionary const*&,void>@<X0>(const __CFDictionary **a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x120uLL);
  result = std::__shared_ptr_emplace<QP::ParserConfiguration>::__shared_ptr_emplace[abi:ne180100]<__CFDictionary const*&,std::allocator<QP::ParserConfiguration>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_218E6EEBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<QP::ParserConfiguration>::__shared_ptr_emplace[abi:ne180100]<__CFDictionary const*&,std::allocator<QP::ParserConfiguration>,0>(_QWORD *a1, const __CFDictionary **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_24DA26150;
  QP::ParserConfiguration::ParserConfiguration((QP::ParserConfiguration *)(a1 + 3), *a2);
  return a1;
}

void sub_218E6EF0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::ParserConfiguration>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA26150;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::ParserConfiguration>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA26150;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A24D0CLL);
}

uint64_t std::__shared_ptr_emplace<QP::ParserConfiguration>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<QP::ParserGrammar,std::allocator<QP::ParserGrammar>,std::shared_ptr<QP::ParserConfiguration> &,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x3C8uLL);
  result = std::__shared_ptr_emplace<QP::ParserGrammar>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<QP::ParserConfiguration> &,std::allocator<QP::ParserGrammar>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_218E6EFBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<QP::ParserGrammar>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<QP::ParserConfiguration> &,std::allocator<QP::ParserGrammar>,0>(_QWORD *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = &unk_24DA261A0;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<QP::ParserGrammar,std::shared_ptr<QP::ParserConfiguration> &,QP::ParserGrammar*>((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_218E6F008(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::ParserGrammar>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA261A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::ParserGrammar>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA261A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A24D0CLL);
}

void std::__shared_ptr_emplace<QP::ParserGrammar>::__on_zero_shared(uint64_t a1)
{
  QP::ParserGrammar::~ParserGrammar((QP::ParserGrammar *)(a1 + 24));
}

uint64_t std::construct_at[abi:ne180100]<QP::ParserGrammar,std::shared_ptr<QP::ParserConfiguration> &,QP::ParserGrammar*>(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v3 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  QP::ParserGrammar::ParserGrammar(a1, &v10);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void sub_218E6F0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<QP::Lexer,std::allocator<QP::Lexer>,std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x278uLL);
  result = std::__shared_ptr_emplace<QP::Lexer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,std::allocator<QP::Lexer>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_218E6F15C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<QP::Lexer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,std::allocator<QP::Lexer>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  a1[2] = 0;
  *a1 = &unk_24DA261F0;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<QP::Lexer,std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,QP::Lexer*>((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_218E6F1A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::Lexer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA261F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::Lexer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA261F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A24D0CLL);
}

void std::__shared_ptr_emplace<QP::Lexer>::__on_zero_shared(uint64_t a1)
{
  QP::Lexer::~Lexer((QP::Lexer *)(a1 + 24));
}

uint64_t std::construct_at[abi:ne180100]<QP::Lexer,std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,QP::Lexer*>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v4 = (std::__shared_weak_count *)a2[1];
  v19 = *a2;
  v20 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (std::__shared_weak_count *)a3[1];
  v17 = *a3;
  v18 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  QP::Lexer::Lexer(a1, &v19, &v17);
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v20;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return a1;
}

void sub_218E6F2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void QP::Parser::~Parser(QP::Parser *this)
{
  void **v2;

  v2 = (void **)((char *)this + 128);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 104);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v2);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)this + 12, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)this + 11, 0);
  std::unique_ptr<QP::GraphStructureStack>::reset[abi:ne180100]((QP::GraphStructureStack **)this + 10, 0);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void std::default_delete<QP::Embedder>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    nlp::CFScopedPtr<__CFData const*>::reset((const void **)(a2 + 16), 0);
    std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](a2);
    JUMPOUT(0x219A24D0CLL);
  }
}

void QP::HolidayReference::load(QP::HolidayReference *this, const __CFURL *a2)
{
  uint64_t v2;

  if (a2)
    QP::getFileSystemRepresentationFromCFURL(a2, &v2);
}

void sub_218E6F4D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 17) < 0)
    operator delete(*(void **)(v1 - 40));
  _Unwind_Resume(exception_object);
}

QP::HolidayReference *QP::HolidayReference::HolidayReference(QP::HolidayReference *this, const __CFURL *a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  QP::HolidayReference::load(this, a2);
  return this;
}

void QP::HolidayReference::~HolidayReference(QP::HolidayReference *this)
{
  void *v2;
  const void *v3;

  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
    munmap(v2, *(_QWORD *)this);
  v3 = (const void *)*((_QWORD *)this + 2);
  if (v3)
    CFRelease(v3);
}

BOOL QP::HolidayReference::hasResources(QP::HolidayReference *this)
{
  return *((_QWORD *)this + 2) != 0;
}

BOOL QP::HolidayReference::containsLookupKey(QP::HolidayReference *this, CFStringRef theString)
{
  _BOOL8 result;
  CFIndex MaximumSizeForEncoding;
  uint64_t v6;
  char *v7;
  CFIndex v8;
  CFIndex v10[2];
  CFRange v11;

  result = 0;
  v10[1] = *MEMORY[0x24BDAC8D0];
  if (theString)
  {
    if (*((_QWORD *)this + 2))
    {
      v10[0] = CFStringGetLength(theString);
      MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(v10[0], 0x8000100u);
      MEMORY[0x24BDAC7A8](MaximumSizeForEncoding);
      v7 = (char *)v10 - v6 + 16;
      v11.location = 0;
      v11.length = v10[0];
      CFStringGetBytes(theString, v11, 0x8000100u, 0x2Du, 0, (UInt8 *)v10 - v6 + 16, v8, v10);
      v7[v10[0]] = 0;
      return _MDPlistContainerGetPlistObjectAtKeyPath() != 0;
    }
  }
  return result;
}

CFStringRef QP::HolidayReference::copyStringForLookupKey(QP::HolidayReference *this, CFStringRef theString)
{
  CFStringRef result;
  CFIndex MaximumSizeForEncoding;
  uint64_t v6;
  char *v7;
  CFIndex v8;
  const UInt8 *Value;
  __int128 v10;
  uint64_t v11;
  CFIndex v12;
  __int128 v13;
  uint64_t v14;
  CFIndex v15[2];
  CFRange v16;

  result = 0;
  v15[1] = *MEMORY[0x24BDAC8D0];
  if (theString && *((_QWORD *)this + 2))
  {
    v15[0] = CFStringGetLength(theString);
    MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(v15[0], 0x8000100u);
    MEMORY[0x24BDAC7A8](MaximumSizeForEncoding);
    v7 = (char *)&v10 - v6;
    v16.location = 0;
    v16.length = v15[0];
    CFStringGetBytes(theString, v16, 0x8000100u, 0x2Du, 0, (UInt8 *)&v10 - v6, v8, v15);
    v7[v15[0]] = 0;
    if (_MDPlistContainerGetPlistObjectAtKeyPath())
    {
      v12 = 0;
      v10 = v13;
      v11 = v14;
      Value = (const UInt8 *)_MDPlistStringGetValue();
      return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], Value, v12, 0x8000100u, 0);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL QP::HolidayReference::getIntegerForLookupKey(QP::HolidayReference *this, CFStringRef theString, uint64_t *a3)
{
  _BOOL8 v3;
  CFIndex MaximumSizeForEncoding;
  uint64_t v7;
  char *v8;
  CFIndex v9;
  int PlistObjectAtKeyPath;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  CFIndex v16[2];
  CFRange v17;

  v3 = 0;
  v16[1] = *MEMORY[0x24BDAC8D0];
  if (theString)
  {
    if (*((_QWORD *)this + 2))
    {
      v16[0] = CFStringGetLength(theString);
      MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(v16[0], 0x8000100u);
      MEMORY[0x24BDAC7A8](MaximumSizeForEncoding);
      v8 = (char *)&v12 - v7;
      v17.location = 0;
      v17.length = v16[0];
      CFStringGetBytes(theString, v17, 0x8000100u, 0x2Du, 0, (UInt8 *)&v12 - v7, v9, v16);
      v8[v16[0]] = 0;
      PlistObjectAtKeyPath = _MDPlistContainerGetPlistObjectAtKeyPath();
      v3 = PlistObjectAtKeyPath != 0;
      if (a3)
      {
        if (PlistObjectAtKeyPath)
        {
          v12 = v14;
          v13 = v15;
          *a3 = _MDPlistNumberGetIntValue();
        }
      }
    }
  }
  return v3;
}

void QP::HolidayReference::normalizeDateValues(QP::HolidayReference *this, __CFDictionary *a2, unsigned int a3, uint64_t a4)
{
  const __CFAllocator *v7;
  __CFCalendar *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const __CFNumber *Value;
  const __CFNumber *v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  const __CFNumber *v18;
  const __CFNumber *v19;
  const __CFNumber *v20;
  CFIndex length;
  const __CFNumber *v22;
  const __CFNumber *v23;
  const __CFNumber *v24;
  CFNumberRef v25;
  CFNumberRef v26;
  uint64_t v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  CFNumberRef v34;
  CFNumberRef v35;
  CFNumberRef v36;
  int v37;
  uint64_t valuePtr;
  CFCalendarRef calendar;
  CFAbsoluteTime at;

  if (a2 && *((_QWORD *)this + 2))
  {
    at = 0.0;
    v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v8 = CFCalendarCreateWithIdentifier((CFAllocatorRef)*MEMORY[0x24BDBD240], CFSTR("gregorian"));
    calendar = v8;
    v9 = CFDictionaryContainsKey(a2, CFSTR("Day"));
    v10 = CFDictionaryContainsKey(a2, CFSTR("Weekday"));
    v11 = CFDictionaryContainsKey(a2, CFSTR("WeekOfYear"));
    v12 = CFDictionaryContainsKey(a2, CFSTR("WeekdayOrdinal"));
    if ((_DWORD)a4 && v9)
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("Day"));
      v14 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("Month"));
      valuePtr = 0;
      v37 = a3;
      CFNumberGetValue(Value, kCFNumberIntType, (char *)&valuePtr + 4);
      CFNumberGetValue(v14, kCFNumberIntType, &valuePtr);
      CFCalendarComposeAbsoluteTime(v8, &at, "dMy", HIDWORD(valuePtr), valuePtr, a3);
      CFCalendarAddComponents(v8, &at, 0, "d", a4);
      CFCalendarDecomposeAbsoluteTime(v8, at, "dMy", (char *)&valuePtr + 4, &valuePtr, &v37);
      v15 = CFNumberCreate(v7, kCFNumberIntType, (char *)&valuePtr + 4);
      v36 = v15;
      v16 = CFNumberCreate(v7, kCFNumberIntType, &valuePtr);
      v35 = v16;
      v17 = CFNumberCreate(v7, kCFNumberIntType, &v37);
      v34 = v17;
      CFDictionarySetValue(a2, CFSTR("Day"), v15);
      CFDictionarySetValue(a2, CFSTR("Month"), v16);
      CFDictionarySetValue(a2, CFSTR("Year"), v17);
      if (v17)
        CFRelease(v17);
      if (v16)
        CFRelease(v16);
      if (!v15)
        goto LABEL_40;
    }
    else
    {
      if (v12)
      {
        v18 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("Weekday"));
        v19 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("WeekdayOrdinal"));
        v20 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("Month"));
        valuePtr = 0;
        v37 = 0;
        v33 = 0;
        v31 = a3;
        v32 = 0;
        CFNumberGetValue(v18, kCFNumberIntType, (char *)&valuePtr + 4);
        CFNumberGetValue(v19, kCFNumberIntType, &v37);
        CFNumberGetValue(v20, kCFNumberIntType, &valuePtr);
        length = CFCalendarGetMaximumRangeOfUnit(v8, 0x200uLL).length;
        CFCalendarComposeAbsoluteTime(v8, &at, "My", valuePtr, v31);
        CFCalendarDecomposeAbsoluteTime(v8, at, "E", &v33);
        if (SHIDWORD(valuePtr) >= (int)v33)
        {
          if ((int)v33 < SHIDWORD(valuePtr))
            CFCalendarAddComponents(v8, &at, 0, "d", (HIDWORD(valuePtr) - v33));
        }
        else
        {
          CFCalendarAddComponents(v8, &at, 0, "d", length - (int)v33 + SHIDWORD(valuePtr));
        }
        if (v37 >= 2)
        {
          CFCalendarAddComponents(v8, &at, 0, "F", (v37 - 1));
        }
        else if (v37 == -1)
        {
          do
          {
            CFCalendarDecomposeAbsoluteTime(v8, at, "M", &v32);
            v8 = calendar;
            if (v32 == (_DWORD)valuePtr)
              v27 = 1;
            else
              v27 = -1;
            CFCalendarAddComponents(calendar, &at, 0, "w", v27);
          }
          while (v32 == (_DWORD)valuePtr);
        }
        CFCalendarAddComponents(v8, &at, 0, "d", a4);
        v8 = calendar;
        CFCalendarDecomposeAbsoluteTime(calendar, at, "Ewy", (char *)&valuePtr + 4, (char *)&v33 + 4, &v31);
        v28 = CFNumberCreate(v7, kCFNumberIntType, (char *)&valuePtr + 4);
        v36 = v28;
        v29 = CFNumberCreate(v7, kCFNumberIntType, (char *)&v33 + 4);
        v35 = v29;
        v30 = CFNumberCreate(v7, kCFNumberIntType, &v31);
        v34 = v30;
        CFDictionaryRemoveValue(a2, CFSTR("WeekdayOrdinal"));
        CFDictionaryRemoveValue(a2, CFSTR("Month"));
        CFDictionarySetValue(a2, CFSTR("Weekday"), v28);
        CFDictionarySetValue(a2, CFSTR("WeekOfYear"), v29);
        CFDictionarySetValue(a2, CFSTR("Year"), v30);
        if (v30)
          CFRelease(v30);
        if (v29)
          CFRelease(v29);
        if (v28)
          CFRelease(v28);
        goto LABEL_40;
      }
      if (!v10 || !v11)
      {
        if (!(v10 | v9))
          CFDictionaryRemoveAllValues(a2);
        goto LABEL_40;
      }
      v22 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("Weekday"));
      v23 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("WeekOfYear"));
      v24 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("Year"));
      valuePtr = 0;
      v37 = 0;
      CFNumberGetValue(v22, kCFNumberIntType, (char *)&valuePtr + 4);
      CFNumberGetValue(v23, kCFNumberIntType, &valuePtr);
      CFNumberGetValue(v24, kCFNumberIntType, &v37);
      CFCalendarComposeAbsoluteTime(v8, &at, "EwY", HIDWORD(valuePtr), valuePtr, v37);
      CFCalendarAddComponents(v8, &at, 0, "d", a4);
      CFCalendarDecomposeAbsoluteTime(v8, at, "EwY", (char *)&valuePtr + 4, &valuePtr, &v37);
      v15 = CFNumberCreate(v7, kCFNumberIntType, (char *)&valuePtr + 4);
      v36 = v15;
      v25 = CFNumberCreate(v7, kCFNumberIntType, &valuePtr);
      v35 = v25;
      v26 = CFNumberCreate(v7, kCFNumberIntType, &v37);
      v34 = v26;
      CFDictionarySetValue(a2, CFSTR("Weekday"), v15);
      CFDictionarySetValue(a2, CFSTR("WeekOfYear"), v25);
      CFDictionarySetValue(a2, CFSTR("Year"), v26);
      if (v26)
        CFRelease(v26);
      if (v25)
        CFRelease(v25);
      if (!v15)
      {
LABEL_40:
        if (v8)
          CFRelease(v8);
        return;
      }
    }
    CFRelease(v15);
    goto LABEL_40;
  }
}

void sub_218E6FFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  const void *v8;
  va_list va;
  const void *v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v10 = va_arg(va2, const void *);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)va1, 0);
  nlp::CFScopedPtr<__CFCalendar *>::reset((const void **)va2, 0);
  _Unwind_Resume(a1);
}

void QP::HolidayReference::updateDateValuesForLookupKey(QP::HolidayReference *this, __CFDictionary *a2, const __CFString *a3, unsigned int a4)
{
  const __CFAllocator *v7;
  const __CFString *v8;
  CFStringRef v9;
  CFStringRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFStringRef v14;
  CFStringRef v15;
  CFStringRef v16;
  uint64_t v17;
  CFStringRef v18;
  CFIndex MaximumSizeForEncoding;
  UInt8 *v20;
  CFIndex v21;
  int PlistObjectType;
  CFNumberRef v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFStringRef v26;
  CFStringRef v27;
  CFNumberRef v28;
  _QWORD v29[5];
  unsigned int v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 valuePtr;
  uint64_t v38;
  CFNumberRef v39;
  CFNumberRef v40;
  CFNumberRef v41;
  int v42[2];
  uint64_t v43;
  uint64_t v44[2];
  CFStringRef v45;
  unsigned int v46;
  uint64_t v47;
  CFRange v48;

  v47 = *MEMORY[0x24BDAC8D0];
  v46 = a4;
  if (a3 && *((_QWORD *)this + 2))
  {
    v45 = 0;
    v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v45 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("%@/Type"), a3);
    if (!QP::HolidayReference::containsLookupKey(this, v45))
    {
LABEL_62:
      if (v45)
        CFRelease(v45);
      return;
    }
    v8 = QP::HolidayReference::copyStringForLookupKey(this, v45);
    v44[1] = (uint64_t)v8;
    if (CFStringsAreEqual(v8, CFSTR("AbsoluteDate")))
    {
      *(_QWORD *)&valuePtr = 0;
      v44[0] = 0;
      v9 = CFStringCreateWithFormat(v7, 0, CFSTR("%@/Day"), a3);
      if (v45)
        CFRelease(v45);
      v45 = v9;
      QP::HolidayReference::getIntegerForLookupKey(this, v9, (uint64_t *)&valuePtr);
      v10 = CFStringCreateWithFormat(v7, 0, CFSTR("%@/Month"), a3);
      if (v45)
        CFRelease(v45);
      v45 = v10;
      QP::HolidayReference::getIntegerForLookupKey(this, v10, v44);
      if ((valuePtr & 0x8000000000000000) != 0 || v44[0] < 0)
        goto LABEL_60;
      v11 = CFNumberCreate(v7, kCFNumberIntType, &valuePtr);
      v43 = (uint64_t)v11;
      if (v11)
        CFDictionarySetValue(a2, CFSTR("Day"), v11);
      v12 = CFNumberCreate(v7, kCFNumberIntType, v44);
      *(_QWORD *)v42 = v12;
      if (v12)
        CFDictionarySetValue(a2, CFSTR("Month"), v12);
      v13 = CFNumberCreate(v7, kCFNumberIntType, &v46);
      v41 = v13;
      if (v13)
      {
        CFDictionarySetValue(a2, CFSTR("Year"), v13);
        CFRelease(v13);
      }
      if (v12)
        CFRelease(v12);
      if (!v11)
        goto LABEL_60;
      goto LABEL_20;
    }
    if (CFStringsAreEqual(v8, CFSTR("MonthRelativeWeekDay")))
    {
      *(_QWORD *)&valuePtr = 0;
      v43 = 0;
      v44[0] = 0;
      v14 = CFStringCreateWithFormat(v7, 0, CFSTR("%@/WeekDay"), a3);
      if (v45)
        CFRelease(v45);
      v45 = v14;
      QP::HolidayReference::getIntegerForLookupKey(this, v14, (uint64_t *)&valuePtr);
      v15 = CFStringCreateWithFormat(v7, 0, CFSTR("%@/Month"), a3);
      if (v45)
        CFRelease(v45);
      v45 = v15;
      QP::HolidayReference::getIntegerForLookupKey(this, v15, v44);
      v16 = CFStringCreateWithFormat(v7, 0, CFSTR("%@/WeekDayNumberInMonth"), a3);
      if (v45)
        CFRelease(v45);
      v45 = v16;
      QP::HolidayReference::getIntegerForLookupKey(this, v16, &v43);
      if ((valuePtr & 0x8000000000000000) != 0 || v44[0] < 0)
        goto LABEL_60;
      v11 = CFCalendarCreateWithIdentifier(v7, CFSTR("gregorian"));
      *(_QWORD *)v42 = v11;
      if (MEMORY[0x219A2437C]() == 1)
      {
        if ((_QWORD)valuePtr == 7)
          v17 = 1;
        else
          v17 = valuePtr + 1;
        *(_QWORD *)&valuePtr = v17;
      }
      v23 = CFNumberCreate(v7, kCFNumberIntType, &valuePtr);
      v41 = v23;
      if (v23)
        CFDictionarySetValue(a2, CFSTR("Weekday"), v23);
      v24 = CFNumberCreate(v7, kCFNumberIntType, v44);
      v40 = v24;
      if (v24)
        CFDictionarySetValue(a2, CFSTR("Month"), v24);
      v25 = CFNumberCreate(v7, kCFNumberIntType, &v43);
      v39 = v25;
      if (v25)
      {
        CFDictionarySetValue(a2, CFSTR("WeekdayOrdinal"), v25);
        CFRelease(v25);
      }
      if (v24)
        CFRelease(v24);
      if (v23)
        CFRelease(v23);
      if (!v11)
        goto LABEL_60;
LABEL_20:
      CFRelease(v11);
      goto LABEL_60;
    }
    if (CFStringsAreEqual(v8, CFSTR("DateList")))
    {
      v18 = CFStringCreateWithFormat(v7, 0, CFSTR("%@/%d"), a3, v46);
      if (v45)
        CFRelease(v45);
      v45 = v18;
      v44[0] = CFStringGetLength(v18);
      MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(v44[0], 0x8000100u);
      v20 = (UInt8 *)v29 - ((MEMORY[0x24BDAC7A8](MaximumSizeForEncoding) + 15) & 0xFFFFFFFFFFFFFFF0);
      v48.location = 0;
      v48.length = v44[0];
      CFStringGetBytes(v18, v48, 0x8000100u, 0x2Du, 0, v20, v21, v44);
      v20[v44[0]] = 0;
      if (_MDPlistContainerGetPlistObjectAtKeyPath())
      {
        v35 = valuePtr;
        v36 = v38;
        PlistObjectType = _MDPlistGetPlistObjectType();
        if (PlistObjectType == 241)
        {
          v33 = valuePtr;
          v34 = v38;
          if (_MDPlistDictionaryGetCount())
          {
            v31 = valuePtr;
            v32 = v38;
            v29[0] = MEMORY[0x24BDAC760];
            v29[1] = 0x40000000;
            v29[2] = ___ZNK2QP16HolidayReference28updateDateValuesForLookupKeyEP14__CFDictionaryPK10__CFStringi_block_invoke;
            v29[3] = &__block_descriptor_tmp_10;
            v29[4] = a2;
            v30 = v46;
            _MDPlistDictionaryIterate();
          }
        }
        else if (PlistObjectType == 240)
        {
          CFDictionarySetValue(a2, CFSTR("List"), (const void *)*MEMORY[0x24BDBD270]);
        }
      }
      goto LABEL_60;
    }
    if (CFStringsAreEqual(v8, CFSTR("SpecialDateRelativeDate")))
    {
      if (!CFStringHasPrefix(a3, CFSTR("/easter")))
      {
        v26 = CFStringCreateWithFormat(v7, 0, CFSTR("%@/SpecialDate"), a3);
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v45, v26);
        *(_QWORD *)&valuePtr = QP::HolidayReference::copyStringForLookupKey(this, v45);
        if ((_QWORD)valuePtr)
        {
          v27 = CFStringCreateWithFormat(v7, 0, CFSTR("%@/RelativeDays"), a3);
          nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v45, v27);
          v44[0] = 0;
          QP::HolidayReference::getIntegerForLookupKey(this, v45, v44);
          v43 = (uint64_t)CFNumberCreate(v7, kCFNumberIntType, v44);
          if (v43)
          {
            CFDictionarySetValue(a2, CFSTR("RootHoliday"), (const void *)valuePtr);
            CFDictionarySetValue(a2, CFSTR("DayOffset"), (const void *)v43);
          }
          nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)&v43, 0);
        }
        else
        {
          CFDictionarySetValue(a2, CFSTR("SpecialDate"), (const void *)*MEMORY[0x24BDBD270]);
        }
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&valuePtr, 0);
        goto LABEL_60;
      }
      v42[0] = 1;
      LODWORD(v41) = 1;
      if (CFStringHasSuffix(a3, CFSTR("JULIAN")))
      {
        QP::extractJulianEasterInYear(&v41, v42, (int *)v46);
LABEL_71:
        *(_QWORD *)&valuePtr = CFNumberCreate(v7, kCFNumberIntType, &v41);
        CFDictionarySetValue(a2, CFSTR("Day"), (const void *)valuePtr);
        v44[0] = (uint64_t)CFNumberCreate(v7, kCFNumberIntType, v42);
        CFDictionarySetValue(a2, CFSTR("Month"), (const void *)v44[0]);
        v28 = CFNumberCreate(v7, kCFNumberIntType, &v46);
        v43 = (uint64_t)v28;
        if (v28)
          CFDictionarySetValue(a2, CFSTR("Year"), v28);
        nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)&v43, 0);
        nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)v44, 0);
        nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)&valuePtr, 0);
        goto LABEL_60;
      }
      if (CFStringHasSuffix(a3, CFSTR("GREGORIAN")))
      {
        QP::extractGregorianEasterInYear(&v41, (unsigned int *)v42, (int *)v46);
        goto LABEL_71;
      }
      CFDictionarySetValue(a2, CFSTR("SpecialDate"), (const void *)*MEMORY[0x24BDBD270]);
    }
LABEL_60:
    if (v8)
      CFRelease(v8);
    goto LABEL_62;
  }
}

void sub_218E708F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v1 - 168), 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v1 - 96), 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v1 - 88), 0);
  _Unwind_Resume(a1);
}

void ___ZNK2QP16HolidayReference28updateDateValuesForLookupKeyEP14__CFDictionaryPK10__CFStringi_block_invoke(uint64_t a1, char *__s1, size_t a3)
{
  CFNumberRef v6;
  const __CFAllocator *v7;
  CFNumberRef v8;
  uint64_t valuePtr;

  if (!strncmp(__s1, "Day", a3))
  {
    valuePtr = _MDPlistNumberGetIntValue();
    v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), CFSTR("Day"), v6);
    if (!v6)
      return;
    goto LABEL_10;
  }
  if (strncmp(__s1, "Month", a3))
  {
    if (!strncmp(__s1, "NoDefinition", a3))
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), CFSTR("NoDefinition"), (const void *)*MEMORY[0x24BDBD270]);
    return;
  }
  valuePtr = _MDPlistNumberGetIntValue();
  v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), CFSTR("Month"), v6);
  v8 = CFNumberCreate(v7, kCFNumberIntType, (const void *)(a1 + 40));
  if (v8)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), CFSTR("Year"), v8);
    CFRelease(v8);
  }
  if (v6)
LABEL_10:
    CFRelease(v6);
}

void sub_218E70C4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)va1, 0);
  _Unwind_Resume(a1);
}

_DWORD *QP::extractJulianEasterInYear(_DWORD *this, int *a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  if ((int)a3 <= 0)
    v3 = -(-(int)a3 & 3);
  else
    v3 = a3 & 3;
  v4 = 4 * ((int)a3 % 7) + 2 * v3 + 34;
  v5 = v4
     - 7
     * ((v4
       - (__int16)(19 * ((int)a3 % 19)
                 + 15
                 - 30
                 * (((__int16)((34953 * (__int16)(19 * ((int)a3 % 19) + 15)) >> 16) >> 4)
                  + ((unsigned __int16)(((34953 * (__int16)(19 * ((int)a3 % 19) + 15)) >> 16) & 0x8000) >> 15))))
      / 7)
     + 114;
  v6 = 9
     * (v4
                       - 7
                       * ((v4
                         - (__int16)(19 * ((int)a3 % 19)
                                   + 15
                                   - 30
                                   * (((__int16)((34953 * (__int16)(19 * ((int)a3 % 19) + 15)) >> 16) >> 4)
                                    + ((unsigned __int16)(((34953 * (__int16)(19 * ((int)a3 % 19) + 15)) >> 16) & 0x8000) >> 15))))
                        / 7)
                       + 114);
  v7 = (((v5 - BYTE1(v6)) >> 1) + (v6 >> 8)) >> 4;
  v8 = (v5 - 31 * v7);
  if (this)
    *this = (v8 + 13) % QP::extractJulianEasterInYear(int *,int *,int)::lastDayOfMonthLeapYear[v7 - 1] + 1;
  if (a2)
    *a2 = (v8 + 13) / QP::extractJulianEasterInYear(int *,int *,int)::lastDayOfMonthLeapYear[v7 - 1] + v7;
  return this;
}

_DWORD *QP::extractGregorianEasterInYear(_DWORD *this, unsigned int *a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;
  int v10;
  __int16 v11;
  char v12;
  unsigned int v13;

  v3 = (int)a3 % 19;
  v4 = (int)a3 / 100;
  v5 = (int)a3 % 100;
  v6 = ((int)a3 / 100) & 3;
  if ((int)a3 / -100 >= 0)
    v6 = -(((int)a3 / -100) & 3);
  v7 = ((unint64_t)(1431655765 * (v4 + (v4 + 8) / -25 + 1)) >> 32) - (v4 + (v4 + 8) / -25 + 1);
  v8 = (int)(v4 + (int)a3 / -400 + 19 * v3 + (v7 >> 1) + (v7 >> 31) + 15) % 30;
  v9 = v5 + (((char)v5 >> 13) & 3);
  v10 = (2 * (v6 + (v9 >> 2)) + ((v9 & 0xFC) - v5 + 32) - v8) % 7;
  v11 = (37201 * (__int16)(v3 + 11 * v8 + 22 * v10)) >> 16;
  v12 = HIBYTE(v11) + ((unsigned __int16)(v11 & 0x8000) >> 15);
  if (this)
  {
    v13 = 9 * (v10 + v8 - 7 * v12 + 114);
    *this = (v10
                            + v8
                            - 7 * v12
                            + 114
                            - 31 * ((((v10 + v8 - 7 * v12 + 114 - BYTE1(v13)) >> 1) + (v13 >> 8)) >> 4)
                            + 1);
  }
  if (a2)
    *a2 = (((v10
                            + v8
                            - 7 * v12
                            + 114
                            - ((unsigned __int16)(9 * (v10 + v8 - 7 * v12 + 114)) >> 8)) >> 1)
         + ((9 * (v10 + v8 - 7 * v12 + 114)) >> 8)) >> 4;
  return this;
}

BOOL QP::HolidayReference::containsHoliday(QP::HolidayReference *this, const __CFString *a2)
{
  _BOOL8 v2;
  const __CFString *v4;
  const __CFString *v5;

  v2 = 0;
  if (a2 && *((_QWORD *)this + 2))
  {
    v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("/%@"), a2);
    if (v4)
    {
      v5 = v4;
      v2 = QP::HolidayReference::containsLookupKey(this, v4);
      CFRelease(v5);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void sub_218E71008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

__CFDictionary *QP::HolidayReference::copyValuesForYear(QP::HolidayReference *this, const __CFString *a2, const __CFString *a3, const __CFString *a4, int a5)
{
  __CFDictionary *Mutable;
  const __CFAllocator *v11;
  const __CFString *v12;
  CFStringRef v13;
  const __CFString *v14;
  const __CFString *v15;
  CFStringRef v16;
  CFStringRef v17;
  __CFString *MutableCopy;
  const __CFString *v19;
  const __CFString *v20;
  CFStringRef v21;
  const __CFString *Value;
  const void *v23;
  const __CFString *v24;
  const __CFNumber *v25;
  const __CFDictionary *v26;
  CFIndex Count;
  unint64_t v28;
  const void **v29;
  size_t v30;
  uint64_t v31;
  const void **v32;
  CFStringRef v33;
  const __CFString *v34;
  uint64_t v36;
  unsigned int valuePtr;
  void *v38;
  CFStringRef v39;
  const __CFString *v40;
  uint64_t v41;

  Mutable = 0;
  v41 = *MEMORY[0x24BDAC8D0];
  if (a5 < 2005 || !a4 || !a3 || !a2 || !*((_QWORD *)this + 2))
    return Mutable;
  v39 = 0;
  v40 = 0;
  v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (CFStringsAreEqual(a3, CFSTR("generic")) || CFStringsAreEqual(a3, CFSTR("general")))
  {
    v12 = CFStringCreateWithFormat(v11, 0, CFSTR("/%@/%@"), a2, a4);
    v40 = v12;
    if (QP::HolidayReference::containsLookupKey(this, v12))
    {
      v13 = QP::HolidayReference::copyStringForLookupKey(this, v12);
      v39 = v13;
      v14 = CFStringCreateWithFormat(v11, 0, CFSTR("/%@/%@.%@"), a2, a4, v13);
      if (v12)
        CFRelease(v12);
      v40 = v14;
      if (QP::HolidayReference::containsLookupKey(this, v14))
      {
        QP::HolidayReference::updateDateValuesForLookupKey(this, Mutable, v14, a5);
        CFDictionarySetValue(Mutable, CFSTR("Calendar"), v13);
      }
    }
    else
    {
      v15 = CFStringCreateWithFormat(v11, 0, CFSTR("/%@/default"), a2);
      if (v12)
        CFRelease(v12);
      v40 = v15;
      v16 = QP::HolidayReference::copyStringForLookupKey(this, v15);
      v17 = v16;
      v39 = v16;
      if (v16)
      {
        v14 = CFStringCreateWithFormat(v11, 0, CFSTR("/%@/%@.%@"), a2, a4, v16);
        if (v15)
          CFRelease(v15);
        v40 = v14;
        if (QP::HolidayReference::containsLookupKey(this, v14))
        {
          QP::HolidayReference::updateDateValuesForLookupKey(this, Mutable, v14, a5);
          CFDictionarySetValue(Mutable, CFSTR("Calendar"), v17);
        }
      }
      else
      {
        v14 = v15;
      }
    }
    goto LABEL_31;
  }
  MutableCopy = CFStringCreateMutableCopy(v11, 0, a3);
  v38 = MutableCopy;
  CFStringUppercase(MutableCopy, 0);
  v14 = CFStringCreateWithFormat(v11, 0, CFSTR("/%@/%@.%@"), a2, a4, MutableCopy);
  v40 = v14;
  if (QP::HolidayReference::containsLookupKey(this, v14))
  {
    QP::HolidayReference::updateDateValuesForLookupKey(this, Mutable, v14, a5);
    CFDictionarySetValue(Mutable, CFSTR("Calendar"), MutableCopy);
    goto LABEL_23;
  }
  v19 = CFStringCreateWithFormat(v11, 0, CFSTR("/%@/default.%@"), a2, MutableCopy);
  if (v14)
    CFRelease(v14);
  v40 = v19;
  if (QP::HolidayReference::containsLookupKey(this, v19))
  {
    QP::HolidayReference::updateDateValuesForLookupKey(this, Mutable, v19, a5);
    CFDictionarySetValue(Mutable, CFSTR("Calendar"), MutableCopy);
    v14 = v19;
LABEL_23:
    if (!MutableCopy)
      goto LABEL_31;
    goto LABEL_30;
  }
  v14 = v19;
  if (MutableCopy)
LABEL_30:
    CFRelease(MutableCopy);
LABEL_31:
  if (!CFDictionaryGetCount(Mutable))
  {
    v20 = CFStringCreateWithFormat(v11, 0, CFSTR("/%@/default"), a2);
    if (v14)
      CFRelease(v14);
    v40 = v20;
    if (QP::HolidayReference::containsLookupKey(this, v20))
    {
      v21 = QP::HolidayReference::copyStringForLookupKey(this, v20);
      if (v39)
        CFRelease(v39);
      v39 = v21;
      v14 = CFStringCreateWithFormat(v11, 0, CFSTR("/%@/default.%@"), a2, v21);
      if (v20)
        CFRelease(v20);
      v40 = v14;
      if (QP::HolidayReference::containsLookupKey(this, v14))
      {
        QP::HolidayReference::updateDateValuesForLookupKey(this, Mutable, v14, a5);
        CFDictionarySetValue(Mutable, CFSTR("Calendar"), v21);
      }
    }
    else
    {
      v14 = v20;
    }
  }
  if (CFDictionaryContainsKey(Mutable, CFSTR("RootHoliday")))
  {
    Value = (const __CFString *)CFDictionaryGetValue(Mutable, CFSTR("RootHoliday"));
    if (CFStringsAreEqual(a2, Value))
    {
      v23 = CFDictionaryGetValue(Mutable, CFSTR("Calendar"));
      if (v23)
      {
        v24 = CFStringCreateWithFormat(v11, 0, CFSTR("/%@/default.%@"), a2, v23);
        if (v14)
          CFRelease(v14);
        v40 = v24;
        if (QP::HolidayReference::containsLookupKey(this, v24))
        {
          CFDictionaryRemoveAllValues(Mutable);
          QP::HolidayReference::updateDateValuesForLookupKey(this, Mutable, v24, a5);
        }
        else if (QP::HolidayReference::containsLookupKey(this, CFSTR("default")))
        {
          v33 = QP::HolidayReference::copyStringForLookupKey(this, CFSTR("default"));
          v38 = (void *)v33;
          v34 = CFStringCreateWithFormat(v11, 0, CFSTR("/%@/default.%@"), a2, v33);
          if (v24)
            CFRelease(v24);
          v40 = v34;
          if (QP::HolidayReference::containsLookupKey(this, v34))
          {
            CFDictionaryRemoveAllValues(Mutable);
            QP::HolidayReference::updateDateValuesForLookupKey(this, Mutable, v34, a5);
          }
          if (v33)
            CFRelease(v33);
          v24 = v34;
        }
      }
      else
      {
        CFDictionaryRemoveAllValues(Mutable);
        v24 = v14;
      }
      QP::HolidayReference::normalizeDateValues(this, Mutable, a5, 0);
      v14 = v24;
    }
    else
    {
      valuePtr = 0;
      v25 = (const __CFNumber *)CFDictionaryGetValue(Mutable, CFSTR("DayOffset"));
      CFNumberGetValue(v25, kCFNumberIntType, &valuePtr);
      v26 = (const __CFDictionary *)QP::HolidayReference::copyValuesForYear(this, Value, a3, a4, a5);
      v38 = v26;
      CFDictionaryRemoveAllValues(Mutable);
      Count = CFDictionaryGetCount(v26);
      v36 = (uint64_t)&v36;
      MEMORY[0x24BDAC7A8](Count);
      v28 = (8 * Count + 15) & 0xFFFFFFFFFFFFFFF0;
      v29 = (const void **)((char *)&v36 - v28);
      if ((unint64_t)(8 * Count) >= 0x200)
        v30 = 512;
      else
        v30 = 8 * Count;
      bzero((char *)&v36 - v28, v30);
      MEMORY[0x24BDAC7A8](v31);
      v32 = (const void **)((char *)&v36 - v28);
      bzero((char *)&v36 - v28, v30);
      CFDictionaryGetKeysAndValues(v26, (const void **)((char *)&v36 - v28), (const void **)((char *)&v36 - v28));
      if (Count >= 1)
      {
        do
        {
          CFDictionarySetValue(Mutable, *v29++, *v32++);
          --Count;
        }
        while (Count);
      }
      QP::HolidayReference::normalizeDateValues(this, Mutable, a5, valuePtr);
      if (v26)
        CFRelease(v26);
    }
  }
  else
  {
    QP::HolidayReference::normalizeDateValues(this, Mutable, a5, 0);
  }
  if (v39)
    CFRelease(v39);
  if (v14)
    CFRelease(v14);
  return Mutable;
}

void sub_218E71748(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void nlp::CFScopedPtr<__CFCalendar *>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t QP::LexemeConverter::LexemeConverter(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  QP::Transcriber *v20;

  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = a3[1];
  *(_QWORD *)(a1 + 16) = *a3;
  *(_QWORD *)(a1 + 24) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (*a2 && *a3)
  {
    v11 = (_QWORD *)operator new();
    v12 = *a2;
    v13 = (std::__shared_weak_count *)a2[1];
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      *v11 = v12;
      v11[1] = v13;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      v11[2] = 0;
      v11[3] = 0;
      std::unique_ptr<QP::DateConverter>::reset[abi:ne180100]((uint64_t *)(a1 + 32), (uint64_t)v11);
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    else
    {
      *v11 = v12;
      v11[1] = 0;
      v11[2] = 0;
      v11[3] = 0;
      std::unique_ptr<QP::DateConverter>::reset[abi:ne180100]((uint64_t *)(a1 + 32), (uint64_t)v11);
    }
    v18 = (_QWORD *)operator new();
    *v18 = *(_QWORD *)(*a2 + 104);
    v19 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v18;
    if (v19)
      MEMORY[0x219A24D0C](v19, 0x60C4044C4A2DFLL);
    v20 = (QP::Transcriber *)operator new();
    QP::Transcriber::Transcriber(v20, *(const __CFLocale **)(*a2 + 104));
    std::unique_ptr<QP::Transcriber>::reset[abi:ne180100]((QP::Transcriber **)(a1 + 48), v20);
  }
  return a1;
}

void sub_218E719F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  QP::Transcriber **v4;
  uint64_t v5;
  uint64_t v7;

  MEMORY[0x219A24D0C](v5, 0x60C405C6656D0);
  std::unique_ptr<QP::Transcriber>::reset[abi:ne180100](v4, 0);
  v7 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (v7)
    MEMORY[0x219A24D0C](v7, 0x60C4044C4A2DFLL);
  std::unique_ptr<QP::DateConverter>::reset[abi:ne180100](v3, 0);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

QP::HolidayReference **QP::LexemeConverter::loadDateReferenceResourceURL(QP::LexemeConverter *this, const __CFURL *a2)
{
  QP::HolidayReference **result;

  result = (QP::HolidayReference **)*((_QWORD *)this + 4);
  if (result)
    return (QP::HolidayReference **)QP::DateConverter::loadDateReferenceResourceURL(result, a2);
  return result;
}

void QP::LexemeConverter::clearResources(QP::DateConverter **this)
{
  QP::DateConverter::clearResources(this[4]);
}

void QP::LexemeConverter::enumerateEntitiesWithString(uint64_t a1, const __CFString *a2, const __CFString *a3, CFIndex a4, CFIndex a5, CFIndex a6, CFIndex a7, uint64_t a8)
{
  const __CFCharacterSet *Predefined;
  _BOOL4 v15;
  std::__shared_weak_count *v16;
  void *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  _WORD *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  _WORD *v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  void *v46;
  std::__shared_weak_count *v47;
  _WORD *v48;
  std::__shared_weak_count *v49;
  _WORD *v50;
  std::__shared_weak_count *v51;
  void *__p;
  std::__shared_weak_count *v53;
  char v54;
  _WORD *v55;
  std::__shared_weak_count *v56;
  CFTypeRef cf;
  void *v58;
  std::__shared_weak_count *v59;
  CFRange result;
  void *v61;
  std::__shared_weak_count *v62;
  CFRange v63;
  CFRange v64;

  v63.location = a4;
  v63.length = a5;
  if (!a2 || a4 == -1)
    return;
  v61 = 0;
  v62 = 0;
  result = (CFRange)xmmword_218E9F890;
  Predefined = CFCharacterSetGetPredefined(kCFCharacterSetPunctuation);
  CFStringFindCharacterFromSet(a2, Predefined, v63, 0, &result);
  if (a3)
    v15 = CFStringHasPrefix(a3, CFSTR("QuotedText")) != 0;
  else
    v15 = 0;
  if (result.location != -1 && result.location == v63.location && result.length == v63.length)
  {
    std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const(&)[6],CFRange &,void>("Punct", (uint64_t)&v63, &__p);
    v17 = __p;
    v16 = v53;
    v61 = __p;
    v62 = v53;
    *((_WORD *)__p + 44) = 12;
    v58 = v17;
    v59 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, void **))(a8 + 16))(a8, &v58);
    v20 = v59;
    if (!v59)
      goto LABEL_48;
    v21 = (unint64_t *)&v59->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
  }
  else
  {
    if (v15)
    {
      v64.location = a6;
      v64.length = a7;
      cf = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x24BDBD240], a2, v64);
      QP::getUTF8StringFromCFString((const __CFString *)cf, &__p);
      std::allocate_shared[abi:ne180100]<QP::LexemeQuotedText,std::allocator<QP::LexemeQuotedText>,CFRange &,std::string,void>(&v63.location, (uint64_t)&__p, &v55);
      v24 = v55;
      v23 = v56;
      v55 = 0;
      v56 = 0;
      v61 = v24;
      v62 = v23;
      if (v54 < 0)
        operator delete(__p);
      v24[44] = 15;
      v50 = v24;
      v51 = v23;
      if (v23)
      {
        v25 = (unint64_t *)&v23->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      (*(void (**)(uint64_t, _WORD **))(a8 + 16))(a8, &v50);
      v27 = v51;
      if (v51)
      {
        v28 = (unint64_t *)&v51->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      if (cf)
        CFRelease(cf);
      goto LABEL_48;
    }
    if (a3)
    {
      QP::getUTF8StringFromCFString(a3, &__p);
      std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&__p, (uint64_t)&v63, &v55);
      v31 = v55;
      v30 = v56;
      v61 = v55;
      v62 = v56;
      v32 = QP::ParserGrammar::symbolID(*(_QWORD *)(a1 + 16), (uint64_t)&__p);
      v31[44] = QP::ParserGrammar::symbolFlag(*(QP::ParserGrammar **)(a1 + 16), v32);
      v48 = v31;
      v49 = v30;
      if (v30)
      {
        v33 = (unint64_t *)&v30->__shared_owners_;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      (*(void (**)(uint64_t, _WORD **))(a8 + 16))(a8, &v48);
      v35 = v49;
      if (v49)
      {
        v36 = (unint64_t *)&v49->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      if (v54 < 0)
        operator delete(__p);
      goto LABEL_48;
    }
    std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const(&)[5],CFRange &,void>("Text", (uint64_t)&v63, &__p);
    v39 = __p;
    v38 = v53;
    v61 = __p;
    v62 = v53;
    *((_WORD *)__p + 44) = 15;
    v46 = v39;
    v47 = v38;
    if (v38)
    {
      v40 = (unint64_t *)&v38->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    (*(void (**)(uint64_t, void **))(a8 + 16))(a8, &v46);
    v20 = v47;
    if (!v47)
      goto LABEL_48;
    v42 = (unint64_t *)&v47->__shared_owners_;
    do
      v22 = __ldaxr(v42);
    while (__stlxr(v22 - 1, v42));
  }
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
LABEL_48:
  v43 = v62;
  if (v62)
  {
    v44 = (unint64_t *)&v62->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_218E71E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v27 - 88);
  _Unwind_Resume(a1);
}

void QP::LexemeConverter::enumerateEntitiesWithTypeAndValues(uint64_t a1, CFStringRef theString, uint64_t a3, uint64_t a4, const __CFString *a5, const __CFDictionary *a6, uint64_t a7)
{
  CFIndex Count;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  const void **v20;
  size_t v21;
  uint64_t v22;
  char *v23;
  __int16 v24;
  __CFString *MutableCopy;
  const __CFDictionary *v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  __int128 v66;
  unint64_t *v67;
  unint64_t v68;
  __int128 *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  const __CFString *Value;
  __int128 v76;
  unint64_t *v77;
  unint64_t v78;
  const __CFString *v79;
  __int128 v80;
  unint64_t *v81;
  unint64_t v82;
  __int128 v83;
  unint64_t *v84;
  unint64_t v85;
  __int128 v86;
  unint64_t *v87;
  unint64_t v88;
  __int128 *v89;
  __int128 v90;
  unint64_t *v91;
  unint64_t v92;
  __int128 v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  int v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  char v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  char v113;
  __int128 v114;
  _QWORD v115[5];

  v115[3] = *MEMORY[0x24BDAC8D0];
  v115[0] = a3;
  v115[1] = a4;
  if (!theString || !a5 || a4 + a3 > CFStringGetLength(theString))
    return;
  v114 = 0uLL;
  if (a6)
    Count = CFDictionaryGetCount(a6);
  else
    Count = 0;
  v13 = *(_QWORD *)(a1 + 16);
  QP::getUTF8StringFromCFString(a5, &v112);
  v14 = QP::ParserGrammar::symbolID(v13, (uint64_t)&v112);
  v15 = v14;
  if (v113 < 0)
  {
    operator delete((void *)v112);
    if (!v15)
      goto LABEL_92;
LABEL_11:
    v16 = QP::ParserGrammar::symbolFlag(*(QP::ParserGrammar **)(a1 + 16), v15);
    v17 = v16;
    if (!Count)
    {
      if (QP::ParserGrammar::isValidType(*(QP::ParserGrammar **)(a1 + 16), a5))
      {
        QP::getUTF8StringFromCFString(a5, &v112);
        std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string,CFRange &,void>((uint64_t)&v112, (uint64_t)v115, &v105);
        v40 = v105;
        v105 = 0uLL;
        v41 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
        v114 = v40;
        if (v41)
        {
          p_shared_owners = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldaxr(p_shared_owners);
          while (__stlxr(v43 - 1, p_shared_owners));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        v44 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
        if (*((_QWORD *)&v105 + 1))
        {
          v45 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        if (v113 < 0)
          operator delete((void *)v112);
        v47 = v114;
        *(_WORD *)(v114 + 88) = v17;
        v98 = v47;
        if (*((_QWORD *)&v47 + 1))
        {
          v48 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
          do
            v49 = __ldxr(v48);
          while (__stxr(v49 + 1, v48));
        }
        (*(void (**)(uint64_t, __int128 *))(a7 + 16))(a7, &v98);
        v50 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
        if (*((_QWORD *)&v98 + 1))
        {
          v51 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
      }
      goto LABEL_92;
    }
    v96 = (uint64_t)&v96;
    v18 = 8 * Count;
    MEMORY[0x24BDAC7A8](v16);
    v97 = v17;
    v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
    v20 = (const void **)((char *)&v96 - v19);
    if (v18 >= 0x200)
      v21 = 512;
    else
      v21 = v18;
    bzero((char *)&v96 - v19, v21);
    MEMORY[0x24BDAC7A8](v22);
    v23 = (char *)&v96 - v19;
    v24 = v97;
    bzero(v23, v21);
    CFDictionaryGetKeysAndValues(a6, v20, (const void **)v23);
    if (CFStringsAreEqual(a5, CFSTR("Field")))
    {
      MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, theString);
      *(_QWORD *)&v107 = MutableCopy;
      CFStringLowercase(MutableCopy, *(CFLocaleRef *)(*(_QWORD *)a1 + 104));
      v26 = *(const __CFDictionary **)(*(_QWORD *)a1 + 224);
      if (v26 && CFDictionaryContainsKey(v26, MutableCopy))
      {
        QP::getUTF8StringFromCFString(a5, &v112);
        std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string,CFRange &,void>((uint64_t)&v112, (uint64_t)v115, &v105);
        v27 = v105;
        v105 = 0uLL;
        v28 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
        v114 = v27;
        if (v28)
        {
          v29 = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v31 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
        if (*((_QWORD *)&v105 + 1))
        {
          v32 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        if (v113 < 0)
          operator delete((void *)v112);
        v34 = v114;
        *(_WORD *)(v114 + 88) = v24;
        v111 = v34;
        if (*((_QWORD *)&v34 + 1))
        {
          v35 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        (*(void (**)(uint64_t, __int128 *))(a7 + 16))(a7, &v111);
        v37 = (std::__shared_weak_count *)*((_QWORD *)&v111 + 1);
        if (*((_QWORD *)&v111 + 1))
        {
          v38 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
      }
      if ((_QWORD)v107)
        CFRelease((CFTypeRef)v107);
      goto LABEL_92;
    }
    if (CFStringsAreEqual(a5, CFSTR("Person")) || CFStringsAreEqual(a5, CFSTR("Contact")))
    {
      std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const(&)[7],CFRange &,void>("Person", (uint64_t)v115, &v112);
      v53 = v112;
      v112 = 0uLL;
      v54 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
      v114 = v53;
      if (v54)
      {
        v55 = (unint64_t *)&v54->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v57 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
      if (*((_QWORD *)&v112 + 1))
      {
        v58 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v60 = v114;
      *(_WORD *)(v114 + 88) = v24;
      v110 = v60;
      if (*((_QWORD *)&v60 + 1))
      {
        v61 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
      (*(void (**)(uint64_t, __int128 *))(a7 + 16))(a7, &v110);
      v63 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
      if (*((_QWORD *)&v110 + 1))
      {
        v64 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      goto LABEL_92;
    }
    if (CFStringsAreEqual(a5, CFSTR("Location")))
    {
      std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const(&)[9],CFRange &,void>("Location", (uint64_t)v115, &v112);
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)&v114, &v112);
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&v112);
      v66 = v114;
      *(_WORD *)(v114 + 88) = v24;
      v109 = v66;
      if (*((_QWORD *)&v66 + 1))
      {
        v67 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      (*(void (**)(uint64_t, __int128 *))(a7 + 16))(a7, &v109);
      v69 = &v109;
      goto LABEL_91;
    }
    if (CFStringFind(a5, CFSTR("Email"), 0).location != -1)
    {
      std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const(&)[6],CFRange &,void>("Email", (uint64_t)v115, &v112);
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)&v114, &v112);
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&v112);
      v108 = v114;
      if (*((_QWORD *)&v114 + 1))
      {
        v70 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
        do
          v71 = __ldxr(v70);
        while (__stxr(v71 + 1, v70));
      }
      (*(void (**)(uint64_t, __int128 *))(a7 + 16))(a7, &v108);
      v69 = &v108;
      goto LABEL_91;
    }
    if (CFStringHasSuffix(a5, CFSTR("Status")))
    {
      if (!CFDictionaryContainsKey(a6, CFSTR("Value")))
        goto LABEL_92;
      Value = (const __CFString *)CFDictionaryGetValue(a6, CFSTR("Value"));
      QP::getUTF8StringFromCFString(a5, &v112);
      QP::getUTF8StringFromCFString(Value, &v105);
      std::allocate_shared[abi:ne180100]<QP::LexemeStatus,std::allocator<QP::LexemeStatus>,std::string,std::string,CFRange &,void>((uint64_t)&v112, (uint64_t)&v105, (uint64_t)v115, &v107);
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)&v114, &v107);
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&v107);
      if (v106 < 0)
        operator delete((void *)v105);
      if (v113 < 0)
        operator delete((void *)v112);
      v76 = v114;
      *(_WORD *)(v114 + 88) = 5;
      v104 = v76;
      if (*((_QWORD *)&v76 + 1))
      {
        v77 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }
      (*(void (**)(uint64_t, __int128 *))(a7 + 16))(a7, &v104);
      v69 = &v104;
      goto LABEL_91;
    }
    if (CFStringHasSuffix(a5, CFSTR("Hashtag")))
    {
      if (!CFDictionaryContainsKey(a6, CFSTR("Value")))
        goto LABEL_92;
      v79 = (const __CFString *)CFDictionaryGetValue(a6, CFSTR("Value"));
      QP::getUTF8StringFromCFString(a5, &v112);
      QP::getUTF8StringFromCFString(v79, &v105);
      std::allocate_shared[abi:ne180100]<QP::LexemeValue,std::allocator<QP::LexemeValue>,std::string,std::string,CFRange &,void>((uint64_t)&v112, (uint64_t)&v105, (uint64_t)v115, &v107);
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)&v114, &v107);
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&v107);
      if (v106 < 0)
        operator delete((void *)v105);
      if (v113 < 0)
        operator delete((void *)v112);
      v80 = v114;
      *(_WORD *)(v114 + 88) = 6;
      v103 = v80;
      if (*((_QWORD *)&v80 + 1))
      {
        v81 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
        do
          v82 = __ldxr(v81);
        while (__stxr(v82 + 1, v81));
      }
      (*(void (**)(uint64_t, __int128 *))(a7 + 16))(a7, &v103);
      v69 = &v103;
      goto LABEL_91;
    }
    if (CFStringHasSuffix(a5, CFSTR("Value")) || CFStringHasSuffix(a5, CFSTR("Count")))
    {
      QP::NumericConverter::numericValueForTypeWithValues(*(QP::NumericConverter **)(a1 + 40), a5, a6, &v107);
      if ((_QWORD)v107)
      {
        QP::getUTF8StringFromCFString(a5, &v112);
        std::allocate_shared[abi:ne180100]<QP::LexemeNumber,std::allocator<QP::LexemeNumber>,std::string,std::unique_ptr<QP::NumericValue>,CFRange &,void>((uint64_t)&v112, (std::string::size_type *)&v107, (uint64_t)v115, &v105);
        std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)&v114, &v105);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&v105);
        if (v113 < 0)
          operator delete((void *)v112);
        v83 = v114;
        *(_WORD *)(v114 + 88) = 7;
        v102 = v83;
        if (*((_QWORD *)&v83 + 1))
        {
          v84 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
        (*(void (**)(uint64_t, __int128 *))(a7 + 16))(a7, &v102);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&v102);
      }
      std::unique_ptr<QP::DateConverter>::reset[abi:ne180100]((uint64_t *)&v107, 0);
      goto LABEL_92;
    }
    if (!CFStringHasSuffix(a5, CFSTR("Date"))
      && !CFStringHasSuffix(a5, CFSTR("Time"))
      && !CFStringHasSuffix(a5, CFSTR("Period")))
    {
      if (!QP::ParserGrammar::isValidType(*(QP::ParserGrammar **)(a1 + 16), a5))
        goto LABEL_92;
      QP::getUTF8StringFromCFString(a5, &v112);
      std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string,CFRange &,void>((uint64_t)&v112, (uint64_t)v115, &v105);
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)&v114, &v105);
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&v105);
      if (v113 < 0)
        operator delete((void *)v112);
      v93 = v114;
      *(_WORD *)(v114 + 88) = v97;
      v99 = v93;
      if (*((_QWORD *)&v93 + 1))
      {
        v94 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
        do
          v95 = __ldxr(v94);
        while (__stxr(v95 + 1, v94));
      }
      (*(void (**)(uint64_t, __int128 *))(a7 + 16))(a7, &v99);
      v69 = &v99;
LABEL_91:
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v69);
      goto LABEL_92;
    }
    if (CFDictionaryContainsKey(a6, CFSTR("Value")))
    {
      QP::DateConverter::datePeriodForRelativeDate(*(const void ****)(a1 + 32), a5, (QP::DatePeriod **)&v107);
      if ((_QWORD)v107)
      {
        QP::getUTF8StringFromCFString(a5, &v112);
        std::allocate_shared[abi:ne180100]<QP::LexemeDateTime,std::allocator<QP::LexemeDateTime>,std::string,std::unique_ptr<QP::DatePeriod>,CFRange &,void>((uint64_t)&v112, (const void ***)&v107, (uint64_t)v115, &v105);
        std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)&v114, &v105);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&v105);
        if (v113 < 0)
          operator delete((void *)v112);
        v86 = v114;
        *(_WORD *)(v114 + 88) = v97;
        v101 = v86;
        if (*((_QWORD *)&v86 + 1))
        {
          v87 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
          do
            v88 = __ldxr(v87);
          while (__stxr(v88 + 1, v87));
        }
        (*(void (**)(uint64_t, __int128 *))(a7 + 16))(a7, &v101);
        v89 = &v101;
LABEL_146:
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v89);
      }
    }
    else
    {
      QP::DateConverter::datePeriodForValues(*(_QWORD *)(a1 + 32), a5, a6, (QP::DatePeriod **)&v107);
      if ((_QWORD)v107)
      {
        QP::getUTF8StringFromCFString(a5, &v112);
        std::allocate_shared[abi:ne180100]<QP::LexemeDateTime,std::allocator<QP::LexemeDateTime>,std::string,std::unique_ptr<QP::DatePeriod>,CFRange &,void>((uint64_t)&v112, (const void ***)&v107, (uint64_t)v115, &v105);
        std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)&v114, &v105);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&v105);
        if (v113 < 0)
          operator delete((void *)v112);
        v90 = v114;
        *(_WORD *)(v114 + 88) = v97;
        v100 = v90;
        if (*((_QWORD *)&v90 + 1))
        {
          v91 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
          do
            v92 = __ldxr(v91);
          while (__stxr(v92 + 1, v91));
        }
        (*(void (**)(uint64_t, __int128 *))(a7 + 16))(a7, &v100);
        v89 = &v100;
        goto LABEL_146;
      }
    }
    std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&v107, 0);
    goto LABEL_92;
  }
  if (v14)
    goto LABEL_11;
LABEL_92:
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
  if (*((_QWORD *)&v114 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
}

void sub_218E72A5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v1 + 32);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v2 - 144);
  _Unwind_Resume(a1);
}

void QP::LexemeConverter::merge(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, __int16 a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  QP::HolidayReference **v14;
  std::__shared_weak_count *v15;
  const __CFString **v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  CFStringRef *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  const void **v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  CFStringRef *v38;
  std::__shared_weak_count *v39;
  const __CFString **v40;
  std::__shared_weak_count *v41;
  const void **v42[2];
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;

  v6 = *a2;
  if (*(unsigned __int16 *)(*a2 + 88) - 1 > 3)
    goto LABEL_39;
  v7 = *a3;
  if (*(unsigned __int16 *)(*a3 + 88) - 1 > 3)
    goto LABEL_39;
  v8 = (std::__shared_weak_count *)a2[1];
  v44 = *a2;
  v45 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v7 = *a3;
  }
  v11 = (std::__shared_weak_count *)a3[1];
  v42[1] = (const void **)v7;
  v43 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(QP::HolidayReference ***)(a1 + 32);
  v16 = *(const __CFString ***)(v6 + 120);
  v15 = *(std::__shared_weak_count **)(v6 + 128);
  v40 = v16;
  v41 = v15;
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v20 = *(CFStringRef **)(v7 + 120);
  v19 = *(std::__shared_weak_count **)(v7 + 128);
  v38 = v20;
  v39 = v19;
  if (v19)
  {
    v21 = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  QP::DateConverter::merge(v14, &v40, &v38, a4, v42);
  v23 = v39;
  if (v39)
  {
    v24 = (unint64_t *)&v39->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v41;
  if (v41)
  {
    v27 = (unint64_t *)&v41->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v42[0];
  if (v42[0])
  {
    std::allocate_shared[abi:ne180100]<QP::LexemeDateTime,std::allocator<QP::LexemeDateTime>,char const(&)[10],std::unique_ptr<QP::DatePeriod>,CFRange &,void>("DateRange", v42, v44 + 72, &v37);
    v30 = v37;
    *(_OWORD *)a5 = v37;
    *(_WORD *)(v30 + 88) = 4;
  }
  std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](v42, 0);
  v31 = v43;
  if (v43)
  {
    v32 = (unint64_t *)&v43->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v45;
  if (v45)
  {
    v35 = (unint64_t *)&v45->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (!v29)
  {
LABEL_39:
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
  }
}

void sub_218E72E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  const void **v9;
  va_list va;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, const void **);
  std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)va, 0);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v7 - 56);
  _Unwind_Resume(a1);
}

void QP::LexemeConverter::resolve(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, BOOL *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  QP::HolidayReference **v10;
  std::__shared_weak_count *v11;
  const __CFString **v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  const void **v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  const __CFString **v25;
  std::__shared_weak_count *v26;
  const void **v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v6 = *a2;
  if (*(unsigned __int16 *)(*a2 + 88) - 1 > 3)
    goto LABEL_20;
  v7 = (std::__shared_weak_count *)a2[1];
  v28 = *a2;
  v29 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = *(QP::HolidayReference ***)(a1 + 32);
  v12 = *(const __CFString ***)(v6 + 120);
  v11 = *(std::__shared_weak_count **)(v6 + 128);
  v25 = v12;
  v26 = v11;
  if (v11)
  {
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  QP::DateConverter::resolve(v10, &v25, a3, a4, &v27);
  v15 = v26;
  if (v26)
  {
    v16 = (unint64_t *)&v26->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v27;
  if (v27)
  {
    v19 = v28;
    std::allocate_shared[abi:ne180100]<QP::LexemeDateTime,std::allocator<QP::LexemeDateTime>,std::string &,std::unique_ptr<QP::DatePeriod>,CFRange &,void>(v28, &v27, v28 + 72, &v24);
    v20 = v24;
    *(_OWORD *)a5 = v24;
    *(_WORD *)(v20 + 88) = *(_WORD *)(v19 + 88);
  }
  std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](&v27, 0);
  v21 = v29;
  if (!v29)
    goto LABEL_19;
  v22 = (unint64_t *)&v29->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
  {
LABEL_19:
    if (v18)
      return;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (!v18)
  {
LABEL_20:
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
  }
}

void sub_218E72FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  const void **v6;
  va_list va;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, const void **);
  std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)va, 0);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

std::string *std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const(&)[6],CFRange &,void>@<X0>(char *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  std::string *v6;
  std::string *result;

  v6 = (std::string *)operator new(0x90uLL);
  result = std::__shared_ptr_emplace<QP::Lexeme>::__shared_ptr_emplace[abi:ne180100]<char const(&)[6],CFRange &,std::allocator<QP::Lexeme>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_218E73054(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::Lexeme>::__shared_ptr_emplace[abi:ne180100]<char const(&)[6],CFRange &,std::allocator<QP::Lexeme>,0>(std::string *a1, char *a2, uint64_t a3)
{
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24DA255A8;
  a1->__r_.__value_.__l.__size_ = 0;
  std::construct_at[abi:ne180100]<QP::Lexeme,char const(&)[6],CFRange &,QP::Lexeme*>(a1 + 1, a2, a3);
  return a1;
}

void sub_218E730A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<QP::Lexeme,char const(&)[6],CFRange &,QP::Lexeme*>(std::string *a1, char *a2, uint64_t a3)
{
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  QP::Lexeme::Lexeme(a1, (__int128 *)__p, *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
  if (v7 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_218E73108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string,CFRange &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  std::string *v6;
  std::string *result;

  v6 = (std::string *)operator new(0x90uLL);
  result = std::__shared_ptr_emplace<QP::Lexeme>::__shared_ptr_emplace[abi:ne180100]<std::string,CFRange &,std::allocator<QP::Lexeme>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_218E73170(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::Lexeme>::__shared_ptr_emplace[abi:ne180100]<std::string,CFRange &,std::allocator<QP::Lexeme>,0>(std::string *a1, uint64_t a2, uint64_t a3)
{
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24DA255A8;
  a1->__r_.__value_.__l.__size_ = 0;
  std::construct_at[abi:ne180100]<QP::Lexeme,std::string,CFRange &,QP::Lexeme*>(a1 + 1, a2, a3);
  return a1;
}

void sub_218E731BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<QP::Lexeme,std::string,CFRange &,QP::Lexeme*>(std::string *a1, uint64_t a2, uint64_t a3)
{
  void *__p[2];
  uint64_t v6;

  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  QP::Lexeme::Lexeme(a1, (__int128 *)__p, *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_218E73230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *std::allocate_shared[abi:ne180100]<QP::LexemeStatus,std::allocator<QP::LexemeStatus>,std::string,std::string,CFRange &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  std::string *v8;
  std::string *result;

  v8 = (std::string *)operator new(0xA8uLL);
  result = std::__shared_ptr_emplace<QP::LexemeStatus>::__shared_ptr_emplace[abi:ne180100]<std::string,std::string,CFRange &,std::allocator<QP::LexemeStatus>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_218E732A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::LexemeStatus>::__shared_ptr_emplace[abi:ne180100]<std::string,std::string,CFRange &,std::allocator<QP::LexemeStatus>,0>(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24DA257A0;
  a1->__r_.__value_.__l.__size_ = 0;
  std::construct_at[abi:ne180100]<QP::LexemeStatus,std::string,std::string,CFRange &,QP::LexemeStatus*>(a1 + 1, a2, a3, a4);
  return a1;
}

void sub_218E732F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<QP::LexemeStatus,std::string,std::string,CFRange &,QP::LexemeStatus*>(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *__p[2];
  uint64_t v7;
  void *v8[2];
  uint64_t v9;

  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v7 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  QP::LexemeStatus::LexemeStatus(a1, (uint64_t)v8, (__int128 *)__p, *(_QWORD *)a4, *(_QWORD *)(a4 + 8));
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
  return a1;
}

void sub_218E73394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  std::construct_at[abi:ne180100]<QP::LexemeValue,std::string &,std::string,CFRange &,QP::LexemeValue*>((uint64_t)&a16);
  _Unwind_Resume(a1);
}

std::string *std::allocate_shared[abi:ne180100]<QP::LexemeValue,std::allocator<QP::LexemeValue>,std::string,std::string,CFRange &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  std::string *v8;
  std::string *result;

  v8 = (std::string *)operator new(0xA8uLL);
  result = std::__shared_ptr_emplace<QP::LexemeValue>::__shared_ptr_emplace[abi:ne180100]<std::string,std::string,CFRange &,std::allocator<QP::LexemeValue>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_218E73414(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::LexemeValue>::__shared_ptr_emplace[abi:ne180100]<std::string,std::string,CFRange &,std::allocator<QP::LexemeValue>,0>(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24DA25700;
  a1->__r_.__value_.__l.__size_ = 0;
  std::construct_at[abi:ne180100]<QP::LexemeValue,std::string,std::string,CFRange &,QP::LexemeValue*>(a1 + 1, a2, a3, a4);
  return a1;
}

void sub_218E73460(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<QP::LexemeValue,std::string,std::string,CFRange &,QP::LexemeValue*>(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *__p[2];
  uint64_t v7;
  void *v8[2];
  uint64_t v9;

  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v7 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  QP::LexemeValue::LexemeValue(a1, (uint64_t)v8, (__int128 *)__p, *(_QWORD *)a4, *(_QWORD *)(a4 + 8));
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
  return a1;
}

void sub_218E73500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  std::construct_at[abi:ne180100]<QP::LexemeValue,std::string &,std::string,CFRange &,QP::LexemeValue*>((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void std::default_delete<QP::NumericValue>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](a2 + 16);
    std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](a2);
    JUMPOUT(0x219A24D0CLL);
  }
}

std::string *std::allocate_shared[abi:ne180100]<QP::LexemeNumber,std::allocator<QP::LexemeNumber>,std::string,std::unique_ptr<QP::NumericValue>,CFRange &,void>@<X0>(uint64_t a1@<X1>, std::string::size_type *a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  std::string *v8;
  std::string *result;

  v8 = (std::string *)operator new(0xA0uLL);
  result = std::__shared_ptr_emplace<QP::LexemeNumber>::__shared_ptr_emplace[abi:ne180100]<std::string,std::unique_ptr<QP::NumericValue>,CFRange &,std::allocator<QP::LexemeNumber>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_218E735C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::LexemeNumber>::__shared_ptr_emplace[abi:ne180100]<std::string,std::unique_ptr<QP::NumericValue>,CFRange &,std::allocator<QP::LexemeNumber>,0>(std::string *a1, uint64_t a2, std::string::size_type *a3, uint64_t a4)
{
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24DA26260;
  a1->__r_.__value_.__l.__size_ = 0;
  std::construct_at[abi:ne180100]<QP::LexemeNumber,std::string,std::unique_ptr<QP::NumericValue>,CFRange &,QP::LexemeNumber*>(a1 + 1, a2, a3, a4);
  return a1;
}

void sub_218E73610(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::LexemeNumber>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA26260;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::LexemeNumber>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA26260;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A24D0CLL);
}

void std::__shared_ptr_emplace<QP::LexemeNumber>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](a1 + 144);
  QP::Lexeme::~Lexeme(v1);
}

std::string *std::construct_at[abi:ne180100]<QP::LexemeNumber,std::string,std::unique_ptr<QP::NumericValue>,CFRange &,QP::LexemeNumber*>(std::string *a1, uint64_t a2, std::string::size_type *a3, uint64_t a4)
{
  std::__shared_weak_count *v7;
  std::string::size_type v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::string::size_type v13;
  std::__shared_weak_count *v14;
  void *__p[2];
  uint64_t v16;

  *(_OWORD *)__p = *(_OWORD *)a2;
  v16 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = *a3;
  if (v13)
  {
    v7 = (std::__shared_weak_count *)operator new();
    v8 = *a3;
    v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA262B0;
    v7->__shared_owners_ = 0;
    v7->__shared_weak_owners_ = 0;
    v7[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  }
  else
  {
    v7 = 0;
  }
  v14 = v7;
  *a3 = 0;
  QP::LexemeNumber::LexemeNumber(a1, (uint64_t)__p, &v13, *(_QWORD *)a4, *(_QWORD *)(a4 + 8));
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_218E73790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<QP::NumericValue  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A24D0CLL);
}

void std::__shared_ptr_pointer<QP::NumericValue  *>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<QP::NumericValue>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<QP::NumericValue  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

std::string *QP::LexemeNumber::LexemeNumber(std::string *this, uint64_t a2, std::string::size_type *a3, uint64_t a4, std::string::size_type a5)
{
  std::string::size_type v9;
  unint64_t *v10;
  unint64_t v11;
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  QP::Lexeme::Lexeme(this, (__int128 *)&__p, a4, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = a3[1];
  this[5].__r_.__value_.__r.__words[0] = *a3;
  this[5].__r_.__value_.__l.__size_ = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return this;
}

void sub_218E738D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const void ***std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](const void ***result, const void **a2)
{
  const void **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    nlp::CFScopedPtr<__CFString const*>::reset(v2, 0);
    JUMPOUT(0x219A24D0CLL);
  }
  return result;
}

void std::default_delete<QP::DatePeriod>::operator()[abi:ne180100](uint64_t a1, const void **a2)
{
  if (a2)
  {
    nlp::CFScopedPtr<__CFString const*>::reset(a2, 0);
    JUMPOUT(0x219A24D0CLL);
  }
}

std::string *std::allocate_shared[abi:ne180100]<QP::LexemeDateTime,std::allocator<QP::LexemeDateTime>,std::string,std::unique_ptr<QP::DatePeriod>,CFRange &,void>@<X0>(uint64_t a1@<X1>, const void ***a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  std::string *v8;
  std::string *result;

  v8 = (std::string *)operator new(0xA0uLL);
  result = std::__shared_ptr_emplace<QP::LexemeDateTime>::__shared_ptr_emplace[abi:ne180100]<std::string,std::unique_ptr<QP::DatePeriod>,CFRange &,std::allocator<QP::LexemeDateTime>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_218E739E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::LexemeDateTime>::__shared_ptr_emplace[abi:ne180100]<std::string,std::unique_ptr<QP::DatePeriod>,CFRange &,std::allocator<QP::LexemeDateTime>,0>(std::string *a1, uint64_t a2, const void ***a3, uint64_t a4)
{
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24DA26310;
  a1->__r_.__value_.__l.__size_ = 0;
  std::construct_at[abi:ne180100]<QP::LexemeDateTime,std::string,std::unique_ptr<QP::DatePeriod>,CFRange &,QP::LexemeDateTime*>(a1 + 1, a2, a3, a4);
  return a1;
}

void sub_218E73A30(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::LexemeDateTime>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA26310;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::LexemeDateTime>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24DA26310;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A24D0CLL);
}

void std::__shared_ptr_emplace<QP::LexemeDateTime>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](a1 + 144);
  QP::Lexeme::~Lexeme(v1);
}

std::string *std::construct_at[abi:ne180100]<QP::LexemeDateTime,std::string,std::unique_ptr<QP::DatePeriod>,CFRange &,QP::LexemeDateTime*>(std::string *a1, uint64_t a2, const void ***a3, uint64_t a4)
{
  const void **v5;
  const void **v7;
  void *__p[2];
  uint64_t v9;

  *(_OWORD *)__p = *(_OWORD *)a2;
  v9 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v5 = *a3;
  *a3 = 0;
  v7 = v5;
  QP::LexemeDateTime::LexemeDateTime(a1, (uint64_t)__p, (uint64_t *)&v7, *(_QWORD *)a4, *(_QWORD *)(a4 + 8));
  std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](&v7, 0);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_218E73B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void **a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](&a10, 0);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

std::string *QP::LexemeDateTime::LexemeDateTime(std::string *this, uint64_t a2, uint64_t *a3, uint64_t a4, std::string::size_type a5)
{
  std::string::size_type size;
  std::string *v10;
  std::string *data;
  std::string *p_p;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string __p;
  std::string v18;
  std::string __str;
  std::string v20;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v20 = *(std::string *)a2;
  QP::Lexeme::Lexeme(this, (__int128 *)&v20, a4, a5);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  std::shared_ptr<QP::DatePeriod>::shared_ptr[abi:ne180100]<QP::DatePeriod,std::default_delete<QP::DatePeriod>,void>((uint64_t *)&this[5], a3);
  if ((this[2].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(this[2].__r_.__value_.__r.__words[2]);
  else
    size = this[2].__r_.__value_.__l.__size_;
  v10 = &v18;
  std::string::basic_string[abi:ne180100]((uint64_t)&v18, size + 1);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = (std::string *)v18.__r_.__value_.__r.__words[0];
  if (size)
  {
    if ((this[2].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      data = this + 2;
    else
      data = (std::string *)this[2].__r_.__value_.__l.__data_;
    memmove(v10, data, size);
  }
  *(_WORD *)((char *)&v10->__r_.__value_.__l.__data_ + size) = 58;
  QP::DatePeriod::description((QP::DatePeriod *)this[5].__r_.__value_.__l.__data_, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v13 = __p.__r_.__value_.__l.__size_;
  v14 = std::string::append(&v18, (const std::string::value_type *)p_p, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::string::operator=(this + 2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  return this;
}

void sub_218E73CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void **v26;
  uint64_t v27;

  if (a26 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v27);
  QP::Lexeme::~Lexeme(v26);
  _Unwind_Resume(a1);
}

void sub_218E73D54(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  JUMPOUT(0x218E73D4CLL);
}

void QP::DatePeriod::description(QP::DatePeriod *this@<X0>, std::string *a2@<X8>)
{
  std::string::size_type size;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *p_p;
  std::string::size_type v14;
  std::string *v15;
  std::string __p;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  std::string v21;

  QP::DateComponents::description((QP::DatePeriod *)((char *)this + 20), &v18);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  else
    size = v18.__r_.__value_.__l.__size_;
  v5 = &v19;
  std::string::basic_string[abi:ne180100]((uint64_t)&v19, size + 1);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v5 = (std::string *)v19.__r_.__value_.__r.__words[0];
  if (size)
  {
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v18;
    else
      v6 = (std::string *)v18.__r_.__value_.__r.__words[0];
    memmove(v5, v6, size);
  }
  *(_WORD *)((char *)&v5->__r_.__value_.__l.__data_ + size) = 45;
  QP::DateComponents::description((QP::DatePeriod *)((char *)this + 72), &v17);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v17;
  else
    v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  else
    v8 = v17.__r_.__value_.__l.__size_;
  v9 = std::string::append(&v19, (const std::string::value_type *)v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v20, "+", 1uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  QP::DateComponents::description((QP::DatePeriod *)((char *)this + 124), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v14 = __p.__r_.__value_.__l.__size_;
  v15 = std::string::append(&v21, (const std::string::value_type *)p_p, v14);
  *a2 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
}

void sub_218E73F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v38 - 41) < 0)
    operator delete(*(void **)(v38 - 64));
  if (a38 < 0)
    operator delete(a33);
  if (a20 < 0)
    operator delete(a15);
  if (a32 < 0)
    operator delete(a27);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t *std::shared_ptr<QP::DatePeriod>::shared_ptr[abi:ne180100]<QP::DatePeriod,std::default_delete<QP::DatePeriod>,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = *a2;
  *a1 = *a2;
  if (v4)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_24DA26360;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  a1[1] = (uint64_t)v5;
  *a2 = 0;
  return a1;
}

void std::__shared_ptr_pointer<QP::DatePeriod  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A24D0CLL);
}

void std::__shared_ptr_pointer<QP::DatePeriod  *>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<QP::DatePeriod>::operator()[abi:ne180100](a1 + 24, *(const void ***)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<QP::DatePeriod  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void QP::DateComponents::description(QP::DateComponents *this@<X0>, std::string *a2@<X8>)
{
  int v4;
  std::string *v5;
  std::string::size_type v6;
  int v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  int v12;
  std::string *v13;
  std::string::size_type v14;
  int v15;
  std::string *v16;
  std::string::size_type v17;
  int v18;
  std::string *v19;
  std::string::size_type v20;
  int v21;
  std::string *v22;
  std::string::size_type v23;
  int v24;
  std::string *v25;
  std::string::size_type v26;
  int v27;
  std::string *v28;
  std::string::size_type v29;
  int v30;
  std::string *v31;
  std::string::size_type v32;
  int v33;
  std::string *v34;
  std::string::size_type v35;
  int v36;
  std::string *v37;
  std::string::size_type size;
  std::string v39;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v4 = *((_DWORD *)this + 2);
  if ((v4 & 0x80000000) == 0)
  {
    std::to_string(&v39, v4);
    v5 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &v39
       : (std::string *)v39.__r_.__value_.__r.__words[0];
    v6 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? HIBYTE(v39.__r_.__value_.__r.__words[2])
       : v39.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v5, v6);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
  }
  v7 = *((_DWORD *)this + 1);
  if ((v7 & 0x80000000) == 0)
  {
    std::to_string(&v39, v7);
    v8 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &v39
       : (std::string *)v39.__r_.__value_.__r.__words[0];
    v9 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? HIBYTE(v39.__r_.__value_.__r.__words[2])
       : v39.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v8, v9);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
  }
  if ((*(_DWORD *)this & 0x80000000) == 0)
  {
    std::to_string(&v39, *(_DWORD *)this);
    v10 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v39
        : (std::string *)v39.__r_.__value_.__r.__words[0];
    v11 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v39.__r_.__value_.__r.__words[2])
        : v39.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v10, v11);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
  }
  v12 = *((_DWORD *)this + 3);
  if ((v12 & 0x80000000) == 0)
  {
    std::to_string(&v39, v12);
    v13 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v39
        : (std::string *)v39.__r_.__value_.__r.__words[0];
    v14 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v39.__r_.__value_.__r.__words[2])
        : v39.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v13, v14);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
  }
  v15 = *((_DWORD *)this + 4);
  if ((v15 & 0x80000000) == 0)
  {
    std::to_string(&v39, v15);
    v16 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v39
        : (std::string *)v39.__r_.__value_.__r.__words[0];
    v17 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v39.__r_.__value_.__r.__words[2])
        : v39.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v16, v17);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
  }
  v18 = *((_DWORD *)this + 5);
  if ((v18 & 0x80000000) == 0)
  {
    std::to_string(&v39, v18);
    v19 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v39
        : (std::string *)v39.__r_.__value_.__r.__words[0];
    v20 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v39.__r_.__value_.__r.__words[2])
        : v39.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v19, v20);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
  }
  v21 = *((_DWORD *)this + 6);
  if ((v21 & 0x80000000) == 0)
  {
    std::to_string(&v39, v21);
    v22 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v39
        : (std::string *)v39.__r_.__value_.__r.__words[0];
    v23 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v39.__r_.__value_.__r.__words[2])
        : v39.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v22, v23);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
  }
  v24 = *((_DWORD *)this + 7);
  if ((v24 & 0x80000000) == 0)
  {
    std::to_string(&v39, v24);
    v25 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v39
        : (std::string *)v39.__r_.__value_.__r.__words[0];
    v26 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v39.__r_.__value_.__r.__words[2])
        : v39.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v25, v26);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
  }
  v27 = *((_DWORD *)this + 8);
  if ((v27 & 0x80000000) == 0)
  {
    std::to_string(&v39, v27);
    v28 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v39
        : (std::string *)v39.__r_.__value_.__r.__words[0];
    v29 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v39.__r_.__value_.__r.__words[2])
        : v39.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v28, v29);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
  }
  v30 = *((_DWORD *)this + 9);
  if ((v30 & 0x80000000) == 0)
  {
    std::to_string(&v39, v30);
    v31 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v39
        : (std::string *)v39.__r_.__value_.__r.__words[0];
    v32 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v39.__r_.__value_.__r.__words[2])
        : v39.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v31, v32);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
  }
  v33 = *((_DWORD *)this + 11);
  if ((v33 & 0x80000000) == 0)
  {
    std::to_string(&v39, v33);
    v34 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v39
        : (std::string *)v39.__r_.__value_.__r.__words[0];
    v35 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v39.__r_.__value_.__r.__words[2])
        : v39.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v34, v35);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
  }
  v36 = *((_DWORD *)this + 12);
  if ((v36 & 0x80000000) == 0)
  {
    std::to_string(&v39, v36);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = &v39;
    else
      v37 = (std::string *)v39.__r_.__value_.__r.__words[0];
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    else
      size = v39.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v37, size);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
  }
}

void sub_218E74404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

std::string *std::allocate_shared[abi:ne180100]<QP::LexemeDateTime,std::allocator<QP::LexemeDateTime>,char const(&)[10],std::unique_ptr<QP::DatePeriod>,CFRange &,void>@<X0>(char *a1@<X1>, const void ***a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  std::string *v8;
  std::string *result;

  v8 = (std::string *)operator new(0xA0uLL);
  result = std::__shared_ptr_emplace<QP::LexemeDateTime>::__shared_ptr_emplace[abi:ne180100]<char const(&)[10],std::unique_ptr<QP::DatePeriod>,CFRange &,std::allocator<QP::LexemeDateTime>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_218E744EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::LexemeDateTime>::__shared_ptr_emplace[abi:ne180100]<char const(&)[10],std::unique_ptr<QP::DatePeriod>,CFRange &,std::allocator<QP::LexemeDateTime>,0>(std::string *a1, char *a2, const void ***a3, uint64_t a4)
{
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24DA26310;
  a1->__r_.__value_.__l.__size_ = 0;
  std::construct_at[abi:ne180100]<QP::LexemeDateTime,char const(&)[10],std::unique_ptr<QP::DatePeriod>,CFRange &,QP::LexemeDateTime*>(a1 + 1, a2, a3, a4);
  return a1;
}

void sub_218E74538(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<QP::LexemeDateTime,char const(&)[10],std::unique_ptr<QP::DatePeriod>,CFRange &,QP::LexemeDateTime*>(std::string *a1, char *a2, const void ***a3, uint64_t a4)
{
  const void **v7;
  const void **v9;
  void *__p[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v7 = *a3;
  *a3 = 0;
  v9 = v7;
  QP::LexemeDateTime::LexemeDateTime(a1, (uint64_t)__p, (uint64_t *)&v9, *(_QWORD *)a4, *(_QWORD *)(a4 + 8));
  std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](&v9, 0);
  if (v11 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_218E745C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

std::string *std::allocate_shared[abi:ne180100]<QP::LexemeDateTime,std::allocator<QP::LexemeDateTime>,std::string &,std::unique_ptr<QP::DatePeriod>,CFRange &,void>@<X0>(uint64_t a1@<X1>, const void ***a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  std::string *v8;
  std::string *result;

  v8 = (std::string *)operator new(0xA0uLL);
  result = std::__shared_ptr_emplace<QP::LexemeDateTime>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::unique_ptr<QP::DatePeriod>,CFRange &,std::allocator<QP::LexemeDateTime>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_218E7464C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::LexemeDateTime>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::unique_ptr<QP::DatePeriod>,CFRange &,std::allocator<QP::LexemeDateTime>,0>(std::string *a1, uint64_t a2, const void ***a3, uint64_t a4)
{
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24DA26310;
  a1->__r_.__value_.__l.__size_ = 0;
  std::construct_at[abi:ne180100]<QP::LexemeDateTime,std::string &,std::unique_ptr<QP::DatePeriod>,CFRange &,QP::LexemeDateTime*>(a1 + 1, a2, a3, a4);
  return a1;
}

void sub_218E74698(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<QP::LexemeDateTime,std::string &,std::unique_ptr<QP::DatePeriod>,CFRange &,QP::LexemeDateTime*>(std::string *this, uint64_t a2, const void ***a3, uint64_t a4)
{
  const void **v7;
  const void **v9;
  std::string v10;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v10 = *(std::string *)a2;
  v7 = *a3;
  *a3 = 0;
  v9 = v7;
  QP::LexemeDateTime::LexemeDateTime(this, (uint64_t)&v10, (uint64_t *)&v9, *(_QWORD *)a4, *(_QWORD *)(a4 + 8));
  std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](&v9, 0);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  return this;
}

void sub_218E7474C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void **a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](&a10, 0);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

const void *QPAnnotationsGetIdentifier(CFIndex a1)
{
  const __CFArray *v2;

  if (getAnnotationsList(void)::onceToken != -1)
    dispatch_once(&getAnnotationsList(void)::onceToken, &__block_literal_global_10);
  if (a1 >= 1
    && (v2 = (const __CFArray *)getAnnotationsList(void)::gAnnotations,
        CFArrayGetCount((CFArrayRef)getAnnotationsList(void)::gAnnotations) >= a1))
  {
    return CFArrayGetValueAtIndex(v2, a1 - 1);
  }
  else
  {
    return 0;
  }
}

void ___ZL18getAnnotationsListv_block_invoke()
{
  __CFArray *Mutable;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  CFArrayAppendValue(Mutable, CFSTR("COPYRIGHTED"));
  CFArrayAppendValue(Mutable, CFSTR("PHOTOSENSITIVE"));
  CFArrayAppendValue(Mutable, CFSTR("PUBLIC_FIGURE"));
  CFArrayAppendValue(Mutable, CFSTR("FICTIONAL_CHARACTER"));
  getAnnotationsList(void)::gAnnotations = (uint64_t)Mutable;
}

__CFArray *QP::GPVisualGenerationFormatterCreateMergedDepParserPeopleEntities(CFStringRef **a1, const __CFArray *a2)
{
  CFIndex i;
  const __CFArray *ValueAtIndex;
  const __CFArray *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  const __CFNumber *v11;
  const __CFNumber *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t *v42;
  __CFArray *theArray;
  CFIndex Length;
  _QWORD v45[6];
  std::__shared_weak_count *v46;
  __CFArray *v47;
  uint64_t v48[2];
  _QWORD v49[6];
  std::__shared_weak_count *v50;
  __CFArray *v51;
  uint64_t v52[2];
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t valuePtr;
  _BYTE buf[12];
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  CFIndex v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v53 = 0;
  v54 = &v53;
  v55 = 0x2000000000;
  v56 = 0;
  v42 = (uint64_t *)a1;
  Length = CFStringGetLength(**a1);
  if (a2)
  {
    for (i = 0; ; ++i)
    {
      if (CFArrayGetCount(a2) <= i)
        goto LABEL_40;
      ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(a2, i);
      v6 = ValueAtIndex;
      if (!ValueAtIndex || CFArrayGetCount(ValueAtIndex) < 3)
        break;
      v11 = (const __CFNumber *)CFArrayGetValueAtIndex(v6, 0);
      v12 = (const __CFNumber *)CFArrayGetValueAtIndex(v6, 1);
      v13 = CFArrayGetValueAtIndex(v6, 2);
      valuePtr = 0;
      *(_QWORD *)buf = 0;
      CFNumberGetValue(v11, kCFNumberCFIndexType, buf);
      CFNumberGetValue(v12, kCFNumberCFIndexType, &valuePtr);
      v7 = 0;
      v8 = -1;
      if (!v11)
        goto LABEL_7;
      if (!v12)
        goto LABEL_7;
      if (!v13)
        goto LABEL_7;
      v7 = valuePtr;
      v8 = *(_QWORD *)buf;
      if (*(_QWORD *)buf == -1)
        goto LABEL_7;
      v14 = v54[3];
      if (*(uint64_t *)buf < v14 || valuePtr + *(_QWORD *)buf > Length)
        goto LABEL_7;
      v15 = *(_QWORD *)buf - v14;
      if (*(uint64_t *)buf > v14)
      {
        if (v15 <= 1)
        {
          CFArrayAppendValue(theArray, v6);
          continue;
        }
        v16 = *v42;
        v17 = (std::__shared_weak_count *)v42[1];
        v52[0] = *v42;
        v52[1] = (uint64_t)v17;
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldxr(p_shared_owners);
          while (__stxr(v19 + 1, p_shared_owners));
          v16 = *v42;
          v20 = (std::__shared_weak_count *)v42[1];
        }
        else
        {
          v20 = 0;
        }
        v49[0] = MEMORY[0x24BDAC760];
        v49[1] = 1174405120;
        v49[2] = ___ZN2QP62GPVisualGenerationFormatterCreateMergedDepParserPeopleEntitiesENSt3__110shared_ptrINS_5ParseEEEPK9__CFArray_block_invoke;
        v49[3] = &unk_24DA263F8;
        v49[5] = v16;
        v50 = v20;
        if (v20)
        {
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v51 = theArray;
        v49[4] = &v53;
        QP::enumeratePersonAttributesInRange(v52, v14, v15, (uint64_t)v49);
        if (v17)
        {
          v23 = (unint64_t *)&v17->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v25 = v50;
        if (v50)
        {
          v26 = (unint64_t *)&v50->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
      }
      CFArrayAppendValue(theArray, v6);
      v54[3] = v7 + v8;
LABEL_11:
      ;
    }
    v7 = 0;
    v8 = -1;
LABEL_7:
    if (vgFormatterLogger(void)::token != -1)
      dispatch_once(&vgFormatterLogger(void)::token, &__block_literal_global_11);
    v9 = vgFormatterLogger(void)::log;
    if (os_log_type_enabled((os_log_t)vgFormatterLogger(void)::log, OS_LOG_TYPE_DEFAULT))
    {
      v10 = v54[3];
      *(_DWORD *)buf = 134218752;
      *(_QWORD *)&buf[4] = v8;
      v59 = 2048;
      v60 = v7;
      v61 = 2048;
      v62 = v10;
      v63 = 2048;
      v64 = Length;
      _os_log_impl(&dword_218E10000, v9, OS_LOG_TYPE_DEFAULT, "Encountered unexpected entity range (%ld, %ld) with current:%ld, length:%ld", buf, 0x2Au);
    }
    goto LABEL_11;
  }
LABEL_40:
  v28 = v54[3];
  if (v28 < Length - 1)
  {
    v29 = *v42;
    v30 = (std::__shared_weak_count *)v42[1];
    v48[0] = *v42;
    v48[1] = (uint64_t)v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      v29 = *v42;
      v33 = (std::__shared_weak_count *)v42[1];
    }
    else
    {
      v33 = 0;
    }
    v45[0] = MEMORY[0x24BDAC760];
    v45[1] = 1174405120;
    v45[2] = ___ZN2QP62GPVisualGenerationFormatterCreateMergedDepParserPeopleEntitiesENSt3__110shared_ptrINS_5ParseEEEPK9__CFArray_block_invoke_1;
    v45[3] = &unk_24DA26430;
    v45[5] = v29;
    v46 = v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v47 = theArray;
    v45[4] = &v53;
    QP::enumeratePersonAttributesInRange(v48, v28, Length - v28, (uint64_t)v45);
    if (v30)
    {
      v36 = (unint64_t *)&v30->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v38 = v46;
    if (v46)
    {
      v39 = (unint64_t *)&v46->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
  _Block_object_dispose(&v53, 8);
  return theArray;
}

void sub_218E74D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  _Block_object_dispose(&a36, 8);
  _Unwind_Resume(a1);
}

void QP::enumeratePersonAttributesInRange(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v5[8];
  _QWORD v6[7];

  v6[0] = 0;
  v6[1] = v6;
  v6[2] = 0x3802000000;
  v6[3] = __Block_byref_object_copy__21;
  v6[4] = __Block_byref_object_dispose__22;
  v6[5] = a2;
  v6[6] = a3;
  v4 = *a1;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 0x40000000;
  v5[2] = ___ZN2QPL32enumeratePersonAttributesInRangeENSt3__110shared_ptrINS_5ParseEEE7CFRangeU13block_pointerFvNS1_INS_14ParseAttributeEEEE_block_invoke;
  v5[3] = &unk_24DA26598;
  v5[4] = a4;
  v5[5] = v6;
  v5[6] = a2;
  v5[7] = a3;
  QP::Parse::enumerateParseAttributes(v4, (uint64_t)v5);
  _Block_object_dispose(v6, 8);
}

void sub_218E74E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN2QP62GPVisualGenerationFormatterCreateMergedDepParserPeopleEntitiesENSt3__110shared_ptrINS_5ParseEEEPK9__CFArray_block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  CFRange v5;
  uint64_t v6;
  uint64_t v7;
  __CFArray *EntityInfo;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (vgFormatterLogger(void)::token != -1)
    dispatch_once(&vgFormatterLogger(void)::token, &__block_literal_global_11);
  v4 = vgFormatterLogger(void)::log;
  if (os_log_type_enabled((os_log_t)vgFormatterLogger(void)::log, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(*(_QWORD *)a2 + 16);
    v6 = *(_QWORD *)(*(_QWORD *)a2 + 24);
    v9 = 134218240;
    v10 = v7;
    v11 = 2048;
    v12 = v6;
    _os_log_impl(&dword_218E10000, v4, OS_LOG_TYPE_DEFAULT, "Found QU person prediction at (%ld, %ld) outside of any DependencyParser entities", (uint8_t *)&v9, 0x16u);
  }
  v5.location = *(_QWORD *)(*(_QWORD *)a2 + 24);
  EntityInfo = QP::createEntityInfo(**(const __CFString ***)(a1 + 40), *(const __CFString **)(*(_QWORD *)a2 + 16), v5);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), EntityInfo);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(*(_QWORD *)a2 + 24)
                                                              + *(_QWORD *)(*(_QWORD *)a2 + 16);
  CFRelease(EntityInfo);
}

__CFArray *QP::createEntityInfo(const __CFString *this, const __CFString *a2, CFRange a3)
{
  const __CFAllocator *v4;
  __CFArray *Mutable;
  CFNumberRef v6;
  CFNumberRef v7;
  CFStringRef v8;
  CFRange valuePtr;

  valuePtr.location = (CFIndex)a2;
  valuePtr.length = a3.location;
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v6 = CFNumberCreate(v4, kCFNumberIntType, &valuePtr);
  CFArrayAppendValue(Mutable, v6);
  v7 = CFNumberCreate(v4, kCFNumberIntType, &valuePtr.length);
  CFArrayAppendValue(Mutable, v7);
  v8 = CFStringCreateWithSubstring(v4, this, valuePtr);
  CFArrayAppendValue(Mutable, v8);
  if (v8)
    CFRelease(v8);
  if (v7)
    CFRelease(v7);
  if (v6)
    CFRelease(v6);
  return Mutable;
}

void sub_218E75074(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  const void *v5;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v5 = va_arg(va2, const void *);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)va1, 0);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)va2, 0);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c37_ZTSNSt3__110shared_ptrIN2QP5ParseEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_40c37_ZTSNSt3__110shared_ptrIN2QP5ParseEEE(uint64_t a1)
{
  return std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](a1 + 40);
}

void ___ZN2QP62GPVisualGenerationFormatterCreateMergedDepParserPeopleEntitiesENSt3__110shared_ptrINS_5ParseEEEPK9__CFArray_block_invoke_1(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  CFRange v5;
  uint64_t v6;
  uint64_t v7;
  __CFArray *EntityInfo;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (vgFormatterLogger(void)::token != -1)
    dispatch_once(&vgFormatterLogger(void)::token, &__block_literal_global_11);
  v4 = vgFormatterLogger(void)::log;
  if (os_log_type_enabled((os_log_t)vgFormatterLogger(void)::log, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(*(_QWORD *)a2 + 16);
    v6 = *(_QWORD *)(*(_QWORD *)a2 + 24);
    v9 = 134218240;
    v10 = v7;
    v11 = 2048;
    v12 = v6;
    _os_log_impl(&dword_218E10000, v4, OS_LOG_TYPE_DEFAULT, "Found QU person prediction at (%ld, %ld) outside of any DependencyParser entities", (uint8_t *)&v9, 0x16u);
  }
  v5.location = *(_QWORD *)(*(_QWORD *)a2 + 24);
  EntityInfo = QP::createEntityInfo(**(const __CFString ***)(a1 + 40), *(const __CFString **)(*(_QWORD *)a2 + 16), v5);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), EntityInfo);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(*(_QWORD *)a2 + 24)
                                                              + *(_QWORD *)(*(_QWORD *)a2 + 16);
  CFRelease(EntityInfo);
}

BOOL QP::VisualGenerationFormatter::isValid(uint64_t a1, _QWORD **a2)
{
  _QWORD *v2;

  v2 = *a2;
  return *a2 && *v2 && v2[5] != 0;
}

const __CFString *QP::VisualGenerationFormatter::safetyRiskInRange(QP::VisualGenerationFormatter *this, CFRange a2)
{
  uint64_t v2;
  const __CFAttributedString *v3;
  CFIndex length;
  CFIndex location;
  CFIndex v7;
  const __CFDictionary *Attributes;
  const __CFString *Value;
  const __CFString *v11;

  v2 = *((_QWORD *)this + 11);
  v3 = *(const __CFAttributedString **)(v2 + 448);
  if (!v3)
    return 0;
  length = a2.length;
  location = a2.location;
  if (!CFAttributedStringGetLength(*(CFAttributedStringRef *)(v2 + 448)) || length == 0)
    return 0;
  v7 = location + length;
  if (location + length > CFAttributedStringGetLength(v3) || length < 1)
    return 0;
  while (1)
  {
    Attributes = CFAttributedStringGetAttributes(v3, location, 0);
    if (Attributes)
    {
      Value = (const __CFString *)CFDictionaryGetValue(Attributes, kQPInputAttributeAnnotationKey);
      if (Value)
      {
        v11 = Value;
        if (CFStringsAreEqual(CFSTR("COPYRIGHTED"), Value)
          || CFStringsAreEqual(CFSTR("PUBLIC_FIGURE"), v11)
          || CFStringsAreEqual(CFSTR("FICTIONAL_CHARACTER"), v11))
        {
          break;
        }
      }
    }
    if (++location >= v7)
      return 0;
  }
  return v11;
}

__CFArray *QP::VisualGenerationFormatter::createEntities(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  __CFArray *Mutable;
  uint64_t v6;
  unint64_t v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  CFMutableDictionaryRef v11;
  __CFDictionary *v12;
  CFStringRef CFStringFromString;
  double v14;
  const void *v15;
  void *__p;
  _BYTE *v18;
  uint64_t v19;
  std::string v20;

  v3 = *a2;
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *(__int128 **)(v3 + 120), *(__int128 **)(v3 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v3 + 128) - *(_QWORD *)(v3 + 120)) >> 3));
  v4 = *a2;
  v18 = 0;
  v19 = 0;
  __p = 0;
  std::vector<std::pair<double,double>>::__init_with_size[abi:ne180100]<std::pair<double,double>*,std::pair<double,double>*>((char *)&__p, *(__int128 **)(v4 + 144), *(__int128 **)(v4 + 152), (uint64_t)(*(_QWORD *)(v4 + 152) - *(_QWORD *)(v4 + 144)) >> 4);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  if (v20.__r_.__value_.__l.__size_ != v20.__r_.__value_.__r.__words[0])
  {
    v6 = 0;
    v7 = 0;
    v8 = (const void *)*MEMORY[0x24BDBD268];
    v9 = (const void *)*MEMORY[0x24BDBD270];
    v10 = 8;
    do
    {
      v11 = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20.__r_.__value_.__l.__size_ - v20.__r_.__value_.__r.__words[0]) >> 3) <= v7)
        std::vector<std::string>::__throw_out_of_range[abi:ne180100]();
      v12 = v11;
      CFStringFromString = QP::createCFStringFromString(v20.__r_.__value_.__r.__words[0] + v6);
      CFDictionarySetValue(v12, kQPParseAttributeValueNamedEntityIdentifierKey, CFStringFromString);
      CFRelease(CFStringFromString);
      v14 = 1.0;
      if (v7 < (v18 - (_BYTE *)__p) >> 4)
        v14 = *(double *)((char *)__p + v10);
      if (v14 == 1.0)
        v15 = v8;
      else
        v15 = v9;
      CFDictionarySetValue(v12, kQPNamedEntityIsInferredKey, v15);
      CFArrayAppendValue(Mutable, v12);
      CFRelease(v12);
      ++v7;
      v10 += 16;
      v6 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20.__r_.__value_.__l.__size_ - v20.__r_.__value_.__r.__words[0]) >> 3) > v7);
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  __p = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return Mutable;
}

void sub_218E75524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  __p = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

__CFArray *QP::VisualGenerationFormatter::createEntitiesWithIntersection(QP::VisualGenerationFormatter *this, const __CFArray *a2, const __CFArray *a3)
{
  const __CFAllocator *v5;
  __CFSet *Mutable;
  CFIndex v7;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  __CFArray *v10;
  CFIndex v11;
  const __CFDictionary *v12;
  const void *v13;

  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6B8]);
  if (CFArrayGetCount(a2) >= 1)
  {
    v7 = 0;
    do
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v7);
      Value = CFDictionaryGetValue(ValueAtIndex, kQPParseAttributeValueNamedEntityIdentifierKey);
      CFSetAddValue(Mutable, Value);
      ++v7;
    }
    while (v7 < CFArrayGetCount(a2));
  }
  v10 = CFArrayCreateMutable(v5, 0, MEMORY[0x24BDBD690]);
  if (CFArrayGetCount(a3) >= 1)
  {
    v11 = 0;
    do
    {
      v12 = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, v11);
      v13 = CFDictionaryGetValue(v12, kQPParseAttributeValueNamedEntityIdentifierKey);
      if (CFSetContainsValue(Mutable, v13))
        CFArrayAppendValue(v10, v12);
      ++v11;
    }
    while (v11 < CFArrayGetCount(a3));
  }
  CFRelease(Mutable);
  return v10;
}

uint64_t QP::VisualGenerationFormatter::setParse(const void **a1, CFStringRef **a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unsigned int v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  CFStringRef v11;
  uint64_t v12;
  const __CFArray *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  CFStringRef *v18;
  unint64_t *v19;
  unint64_t v20;
  __CFArray *MergedDepParserPeopleEntities;
  unint64_t *v22;
  unint64_t v23;
  CFIndex v24;
  uint64_t v25;
  const __CFArray *ValueAtIndex;
  const __CFArray *v27;
  const __CFNumber *v28;
  const __CFNumber *v29;
  const void *v30;
  CFIndex v31;
  CFIndex v32;
  CFStringRef *v33;
  CFNumberRef v34;
  const __CFString *v35;
  const __CFString *v36;
  CFNumberRef v37;
  unsigned int v39;
  _QWORD v40[10];
  CFNumberRef v41;
  CFNumberRef *v42;
  uint64_t v43;
  uint64_t v44;
  CFIndex v45;
  CFIndex valuePtr;
  CFStringRef *v47[2];
  CFStringRef *v48;
  std::__shared_weak_count *v49;
  __int128 buf;
  uint64_t v51;
  char v52;
  uint64_t v53;
  CFRange v54;
  CFRange v55;
  CFRange v56;
  CFRange v57;
  CFRange v58;

  v53 = *MEMORY[0x24BDAC8D0];
  QP::Formatter::clear(a1);
  QP::Formatter::clear(a1);
  v4 = (std::__shared_weak_count *)a2[1];
  v48 = *a2;
  v49 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = QP::Formatter::setParse((uint64_t)a1, (uint64_t)&v48);
  v8 = v49;
  if (v49)
  {
    v9 = (unint64_t *)&v49->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v39 = v7;
  v11 = **a2;
  v12 = mach_absolute_time();
  v13 = (const __CFArray *)NLDependencyParserCopyNounPhrasesFromSentence();
  v14 = mach_absolute_time();
  if (QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::onceToken != -1)
    dispatch_once(&QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::onceToken, &__block_literal_global_28);
  v16 = QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::sTimebaseInfo;
  v15 = *(unsigned int *)algn_253D1B614;
  if (vgFormatterLogger(void)::token != -1)
    dispatch_once(&vgFormatterLogger(void)::token, &__block_literal_global_11);
  v17 = vgFormatterLogger(void)::log;
  if (os_log_type_enabled((os_log_t)vgFormatterLogger(void)::log, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(double *)((char *)&buf + 4) = (float)((float)((v14 - v12) * v16 / v15) / 1000000.0);
    _os_log_impl(&dword_218E10000, v17, OS_LOG_TYPE_DEFAULT, "DP parsed in %.1fms", (uint8_t *)&buf, 0xCu);
  }
  v18 = a2[1];
  v47[0] = *a2;
  v47[1] = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 1);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  MergedDepParserPeopleEntities = QP::GPVisualGenerationFormatterCreateMergedDepParserPeopleEntities(v47, v13);
  if (!v18)
    goto LABEL_22;
  v22 = (unint64_t *)(v18 + 1);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
  {
LABEL_22:
    if (!v13)
      goto LABEL_24;
    goto LABEL_23;
  }
  ((void (*)(CFStringRef *))(*v18)->data)(v18);
  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v18);
  if (v13)
LABEL_23:
    CFRelease(v13);
LABEL_24:
  if (MergedDepParserPeopleEntities)
  {
    if (CFArrayGetCount(MergedDepParserPeopleEntities) <= 0)
    {
      CFRelease(MergedDepParserPeopleEntities);
    }
    else
    {
      v24 = 0;
      v25 = 0;
      do
      {
        ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(MergedDepParserPeopleEntities, v24);
        v27 = ValueAtIndex;
        if (ValueAtIndex)
        {
          if (CFArrayGetCount(ValueAtIndex) >= 3)
          {
            v28 = (const __CFNumber *)CFArrayGetValueAtIndex(v27, 0);
            v29 = (const __CFNumber *)CFArrayGetValueAtIndex(v27, 1);
            v30 = CFArrayGetValueAtIndex(v27, 2);
            v45 = 0;
            valuePtr = 0;
            CFNumberGetValue(v28, kCFNumberCFIndexType, &valuePtr);
            CFNumberGetValue(v29, kCFNumberCFIndexType, &v45);
            if (v28)
            {
              if (v29 && v30)
              {
                v32 = v45;
                v31 = valuePtr;
                *(_QWORD *)&buf = 0;
                *((_QWORD *)&buf + 1) = &buf;
                v51 = 0x2000000000;
                v52 = 0;
                v41 = 0;
                v42 = &v41;
                v43 = 0x2000000000;
                v44 = 0;
                v33 = *a2;
                v40[0] = MEMORY[0x24BDAC760];
                v40[1] = 0x40000000;
                v40[2] = ___ZN2QP25VisualGenerationFormatter8setParseENSt3__110shared_ptrINS_5ParseEEE_block_invoke;
                v40[3] = &unk_24DA26490;
                v40[6] = a1;
                v40[7] = valuePtr;
                v40[8] = v45;
                v40[9] = v11;
                v40[4] = &v41;
                v40[5] = &buf;
                QP::Parse::enumerateParseAttributes((uint64_t)v33, (uint64_t)v40);
                if (v42[3] || *(_BYTE *)(*((_QWORD *)&buf + 1) + 24))
                {
                  v55.location = v31;
                  v55.length = v32;
                  QP::Formatter::setParseAttribute((QP::Formatter *)a1, kQPParseAttributeEntityTypeKey, CFSTR("NamedEntity"), v55);
                  if (!*(_BYTE *)(*((_QWORD *)&buf + 1) + 24) && CFArrayGetCount(v42[3]))
                  {
                    v56.location = v31;
                    v56.length = v32;
                    QP::Formatter::setParseAttribute((QP::Formatter *)a1, kQPParseAttributeValueNamedEntitiesKey, v42[3], v56);
                  }
                }
                else
                {
                  v57.location = v31;
                  v57.length = v32;
                  QP::Formatter::setParseAttribute((QP::Formatter *)a1, kQPParseAttributeEntityTypeKey, CFSTR("GenericEntity"), v57);
                }
                v34 = v42[3];
                if (v34)
                  CFRelease(v34);
                v54.location = v31;
                v54.length = v32;
                v35 = QP::VisualGenerationFormatter::safetyRiskInRange((QP::VisualGenerationFormatter *)a1, v54);
                v36 = v35;
                if (v35 && CFStringGetLength(v35))
                {
                  v58.location = v31;
                  v58.length = v32;
                  QP::Formatter::setParseAttribute((QP::Formatter *)a1, kQPParseAttributeSafetyRiskTypeKey, v36, v58);
                }
                ++v25;
                _Block_object_dispose(&v41, 8);
                _Block_object_dispose(&buf, 8);
              }
            }
          }
        }
        ++v24;
      }
      while (CFArrayGetCount(MergedDepParserPeopleEntities) > v24);
      CFRelease(MergedDepParserPeopleEntities);
      if (v25)
      {
        *(_QWORD *)&buf = 3;
        v37 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberIntType, &buf);
        v41 = v37;
        QP::Formatter::setResultValue((QP::Formatter *)a1, kQPParseResultConfidenceKey, v37);
        if (v37)
          CFRelease(v37);
      }
    }
  }
  return v39;
}

void sub_218E75B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN2QP25VisualGenerationFormatter8setParseENSt3__110shared_ptrINS_5ParseEEE_block_invoke(uint64_t a1, uint64_t *a2)
{
  CFIndex v3;
  uint64_t v4;
  CFIndex v5;
  uint64_t v6;
  CFIndex v7;
  CFIndex v8;
  uint64_t v9;
  UniChar CharacterAtIndex;
  const __CFCharacterSet *Predefined;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  BOOL v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  __CFArray *v30;
  const __CFArray *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  const void *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  _QWORD v46[5];
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  __n128 (*v50)(uint64_t, uint64_t);
  uint64_t (*v51)(uint64_t);
  uint64_t v52;
  std::__shared_weak_count *v53;

  v3 = *(_QWORD *)(a1 + 56);
  v4 = *a2;
  v5 = *(_QWORD *)(*a2 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  if (v3 <= v5)
    v7 = v5;
  else
    v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64) + v3;
  if (v8 >= v6 + v5)
    v8 = v6 + v5;
  if (v8 <= v7)
    v9 = -1;
  else
    v9 = v7;
  if (v9 != -1)
  {
    if (v6 == 1)
    {
      CharacterAtIndex = CFStringGetCharacterAtIndex(*(CFStringRef *)(a1 + 72), v5);
      Predefined = CFCharacterSetGetPredefined(kCFCharacterSetPunctuation);
      if (CFCharacterSetIsCharacterMember(Predefined, CharacterAtIndex))
        return;
      v4 = *a2;
    }
    if (*(_QWORD *)(v4 + 128) != *(_QWORD *)(v4 + 120))
    {
      v47 = 0;
      v48 = (std::__shared_weak_count *)&v47;
      v49 = 0x3802000000;
      v50 = __Block_byref_object_copy__9;
      v51 = __Block_byref_object_dispose__9;
      v52 = 0;
      v53 = 0;
      v46[0] = MEMORY[0x24BDAC760];
      v46[1] = 0x40000000;
      v46[2] = ___ZN2QP25VisualGenerationFormatter8setParseENSt3__110shared_ptrINS_5ParseEEE_block_invoke_8;
      v46[3] = &unk_24DA26468;
      v46[4] = &v47;
      QP::ParseAttribute::enumerateAttributes(v4, (uint64_t)v46);
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](a2, &v48[1].__shared_weak_owners_);
      _Block_object_dispose(&v47, 8);
      v13 = v53;
      if (v53)
      {
        p_shared_owners = (unint64_t *)&v53->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v4 = *a2;
    }
    v16 = *(unsigned __int8 *)(v4 + 71);
    v17 = (char)v16;
    if ((v16 & 0x80u) != 0)
      v16 = *(_QWORD *)(v4 + 56);
    if (v16 == 17
      && (v17 >= 0 ? (v18 = v4 + 48) : (v18 = *(_QWORD *)(v4 + 48)),
          (v19 = *(_QWORD *)v18,
           v20 = *(_QWORD *)(v18 + 8),
           v21 = *(unsigned __int8 *)(v18 + 16),
           v19 == 0x6E756F724750516BLL)
        ? (v22 = v20 == 0x6F73726550646564)
        : (v22 = 0),
          v22 ? (v23 = v21 == 110) : (v23 = 0),
          v23))
    {
      v47 = 0;
      v48 = 0;
      v24 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v4 + 112));
      v25 = v24;
      v26 = *(_QWORD *)(v4 + 104);
      v47 = v26;
      v48 = v24;
      if (*(_WORD *)(v26 + 88) == 16)
      {
        v44 = v26;
        v45 = v24;
        v27 = (unint64_t *)&v24->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
        v42 = v26;
        v43 = v24;
        do
          v29 = __ldxr(v27);
        while (__stxr(v29 + 1, v27));
        v30 = QP::VisualGenerationFormatter::createEntities((uint64_t)v24, &v42);
        v31 = v30;
        v32 = v43;
        if (v43)
        {
          v33 = (unint64_t *)&v43->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        v35 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v36 = *(const void **)(v35 + 24);
        if (v36)
        {
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = QP::VisualGenerationFormatter::createEntitiesWithIntersection(v30, *(const __CFArray **)(v35 + 24), v31);
          CFRelease(v31);
          CFRelease(v36);
        }
        else
        {
          *(_QWORD *)(v35 + 24) = v31;
        }
        v37 = v45;
        if (v45)
        {
          v38 = (unint64_t *)&v45->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        v25 = v48;
      }
      if (v25)
      {
        v40 = (unint64_t *)&v25->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else if ((*(_DWORD *)(v4 + 76) - 2) <= 2)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    }
  }
}

void sub_218E75F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__9(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__9(uint64_t a1)
{
  return std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](a1 + 40);
}

void QP::VisualGenerationFormatter::~VisualGenerationFormatter(const void **this)
{
  QP::VisualGenerationFormatter::~VisualGenerationFormatter(this);
  JUMPOUT(0x219A24D0CLL);
}

{
  char *v2;

  *this = &off_24DA264C0;
  v2 = (char *)(this + 11);
  nlp::CFScopedPtr<void *>::reset(this + 13, 0);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  QP::Formatter::~Formatter((QP::Formatter *)this);
}

os_log_t ___ZL17vgFormatterLoggerv_block_invoke()
{
  const char *v0;
  os_log_t result;

  v0 = _nlpLoggingSubsystem();
  result = os_log_create(v0, "VisualGenerationFormatter");
  vgFormatterLogger(void)::log = (uint64_t)result;
  return result;
}

__n128 __Block_byref_object_copy__21(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void ___ZN2QPL32enumeratePersonAttributesInRangeENSt3__110shared_ptrINS_5ParseEEE7CFRangeU13block_pointerFvNS1_INS_14ParseAttributeEEEE_block_invoke(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  _QWORD v33[5];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  __n128 (*v37)(uint64_t, uint64_t);
  uint64_t (*v38)(uint64_t);
  uint64_t v39;
  std::__shared_weak_count *v40;

  v3 = *(_QWORD *)(a1[5] + 8);
  v4 = *(_QWORD *)(v3 + 40);
  v5 = *a2;
  v6 = *(_QWORD *)(*a2 + 16);
  v7 = *(_QWORD *)(v3 + 48) + v4;
  if (v4 <= v6 && v7 >= *(_QWORD *)(*a2 + 24) + v6)
  {
    if (*(_QWORD *)(v5 + 128) != *(_QWORD *)(v5 + 120))
    {
      v34 = 0;
      v35 = &v34;
      v36 = 0x3802000000;
      v37 = __Block_byref_object_copy__9;
      v38 = __Block_byref_object_dispose__9;
      v39 = 0;
      v40 = 0;
      v33[0] = MEMORY[0x24BDAC760];
      v33[1] = 0x40000000;
      v33[2] = ___ZN2QPL32enumeratePersonAttributesInRangeENSt3__110shared_ptrINS_5ParseEEE7CFRangeU13block_pointerFvNS1_INS_14ParseAttributeEEEE_block_invoke_2;
      v33[3] = &unk_24DA26570;
      v33[4] = &v34;
      QP::ParseAttribute::enumerateAttributes(v5, (uint64_t)v33);
      std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100](a2, v35 + 5);
      _Block_object_dispose(&v34, 8);
      v10 = v40;
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v5 = *a2;
    }
    v13 = *(unsigned __int8 *)(v5 + 71);
    v14 = (char)v13;
    if ((v13 & 0x80u) != 0)
      v13 = *(_QWORD *)(v5 + 56);
    if (v13 == 17
      && (v14 >= 0 ? (v15 = v5 + 48) : (v15 = *(_QWORD *)(v5 + 48)),
          (v16 = *(_QWORD *)v15,
           v17 = *(_QWORD *)(v15 + 8),
           v18 = *(unsigned __int8 *)(v15 + 16),
           v16 == 0x6E756F724750516BLL)
        ? (v19 = v17 == 0x6F73726550646564)
        : (v19 = 0),
          v19 ? (v20 = v18 == 110) : (v20 = 0),
          v20)
      || (*(_DWORD *)(v5 + 76) - 2) <= 2)
    {
      v21 = a1[4];
      v22 = (std::__shared_weak_count *)a2[1];
      v31 = v5;
      v32 = v22;
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      (*(void (**)(uint64_t, uint64_t *))(v21 + 16))(v21, &v31);
      v25 = v32;
      if (v32)
      {
        v26 = (unint64_t *)&v32->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v28 = *(_QWORD *)(*a2 + 24) + *(_QWORD *)(*a2 + 16);
      v29 = a1[6] - v28 + a1[7];
      v30 = *(_QWORD *)(a1[5] + 8);
      *(_QWORD *)(v30 + 40) = v28;
      *(_QWORD *)(v30 + 48) = v29;
    }
  }
}

void sub_218E762D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

uint64_t ___Z36QPTimingNanosecondsSinceAbsoluteTimey_block_invoke_1()
{
  return mach_timebase_info((mach_timebase_info_t)&QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::sTimebaseInfo);
}

void nlp::CFScopedPtr<void *>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t _CFInit_QueryParserWrapper(uint64_t result)
{
  *(_QWORD *)(result + 16) = &unk_24DA26720;
  return result;
}

uint64_t nlp::CFFinalize(nlp *this, const void *a2)
{
  return (**((uint64_t (***)(char *))this + 2))((char *)this + 16);
}

uint64_t _CFGetTypeID_QueryParserWrapper(void)
{
  unsigned __int8 v0;

  {
    unk_253D1B5E8 = 0u;
    unk_253D1B5D8 = 0u;
    _CFGetTypeID_QueryParserWrapper(void)::typeID = _CFRuntimeRegisterClass();
  }
  return _CFGetTypeID_QueryParserWrapper(void)::typeID;
}

void sub_218E764EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t createQueryParserEngineWrapper(QP::QueryParserEngine *a1)
{
  uint64_t result;

  CFAllocatorGetDefault();
  _CFGetTypeID_QueryParserWrapper();
  result = _CFRuntimeCreateInstance();
  *(_QWORD *)(result + 24) = a1;
  return result;
}

__CFDictionary *QPQueryParserCopyDefaultOptionsForContext(const __CFString *Identifier)
{
  const __CFAllocator *v2;
  __CFDictionary *Mutable;
  CFMutableStringRef MutableCopy;
  __CFBundle *MainBundle;
  int v6;
  int v7;
  CFNumberRef v8;
  const void *v9;
  const void *v10;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const __CFString *v20;
  const void *v21;
  const void *v22;
  CFNumberRef v23;
  int valuePtr;
  CFTypeRef cf;

  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Identifier)
    return Mutable;
  MutableCopy = CFStringCreateMutableCopy(v2, 0, Identifier);
  cf = MutableCopy;
  CFStringLowercase(MutableCopy, 0);
  MainBundle = CFBundleGetMainBundle();
  if (!MainBundle || (Identifier = CFBundleGetIdentifier(MainBundle)) != 0)
    CFDictionarySetValue(Mutable, kQPQueryParserOptionBundleIdentifierKey, Identifier);
  v6 = _os_feature_enabled_impl();
  v7 = _os_feature_enabled_impl();
  CFDictionarySetValue(Mutable, kQPQueryParserOptionContextIdentifierKey, MutableCopy);
  if (CFStringsAreEqual(MutableCopy, CFSTR("com.apple.mail"))
    || CFStringsAreEqual(MutableCopy, CFSTR("com.apple.mobilemail")))
  {
    valuePtr = 1;
    v8 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
    v23 = v8;
    CFDictionarySetValue(Mutable, kQPQueryParserOptionFormatKey, v8);
    CFDictionarySetValue(Mutable, kQPQueryParserOptionContextIdentifierKey, CFSTR("com.apple.mail"));
    v9 = (const void *)*MEMORY[0x24BDBD270];
    CFDictionarySetValue(Mutable, kQPQueryParserOptionResolveDatesInPastKey, (const void *)*MEMORY[0x24BDBD270]);
    if (v6)
      v10 = v9;
    else
      v10 = (const void *)*MEMORY[0x24BDBD268];
    CFDictionarySetValue(Mutable, kQPQueryParserOptionU2EnabledKey, v10);
    CFDictionarySetValue(Mutable, CFSTR("loadAnnotations"), v9);
    if (!v8)
      goto LABEL_12;
    goto LABEL_11;
  }
  if (!CFStringsAreEqual(MutableCopy, CFSTR("com.apple.notes"))
    && !CFStringsAreEqual(MutableCopy, CFSTR("com.apple.mobilenotes")))
  {
    if (CFStringsAreEqual(MutableCopy, CFSTR("com.apple.calendar"))
      || CFStringsAreEqual(MutableCopy, CFSTR("com.apple.calendarui"))
      || CFStringsAreEqual(MutableCopy, CFSTR("com.apple.ical"))
      || CFStringsAreEqual(MutableCopy, CFSTR("com.apple.ical.calendarquerygenius"))
      || CFStringsAreEqual(MutableCopy, CFSTR("com.apple.mobilecal")))
    {
      valuePtr = 1;
      v23 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(Mutable, kQPQueryParserOptionFormatKey, v23);
      CFDictionarySetValue(Mutable, kQPQueryParserOptionContextIdentifierKey, CFSTR("com.apple.calendar"));
      CFDictionarySetValue(Mutable, CFSTR("loadAnnotations"), (const void *)*MEMORY[0x24BDBD270]);
    }
    else if (CFStringsAreEqual(MutableCopy, CFSTR("com.apple.photos"))
           || CFStringsAreEqual(MutableCopy, CFSTR("com.apple.mobileslideshow"))
           || CFStringsAreEqual(MutableCopy, CFSTR("com.apple.plphotosctl")))
    {
      valuePtr = 1;
      v23 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(Mutable, kQPQueryParserOptionFormatKey, v23);
      v13 = (const void *)*MEMORY[0x24BDBD270];
      CFDictionarySetValue(Mutable, kQPQueryParserOptionIgnoreFutureDatesKey, (const void *)*MEMORY[0x24BDBD270]);
      CFDictionarySetValue(Mutable, kQPQueryParserOptionResolveDatesInPastKey, v13);
      CFDictionarySetValue(Mutable, kQPQueryParserOptionContextIdentifierKey, CFSTR("com.apple.photos"));
      CFDictionarySetValue(Mutable, kQPQueryParserOptionIgnoreSingleYearSuggestionKey, v13);
      CFDictionarySetValue(Mutable, kQPQueryParserOptionU2EnabledKey, v13);
      CFDictionarySetValue(Mutable, CFSTR("useECRForPets"), v13);
      CFDictionarySetValue(Mutable, CFSTR("loadAnnotations"), v13);
      if (CFStringsAreEqual(Identifier, CFSTR("com.apple.plphotosctl")))
      {
        CFDictionarySetValue(Mutable, CFSTR("waitForLoad"), v13);
        CFDictionarySetValue(Mutable, CFSTR("forTesting"), v13);
      }
    }
    else if (CFStringsAreEqual(MutableCopy, CFSTR("com.apple.photos.parser")))
    {
      valuePtr = 0;
      v23 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(Mutable, kQPQueryParserOptionFormatKey, v23);
      v14 = (const void *)*MEMORY[0x24BDBD270];
      CFDictionarySetValue(Mutable, kQPQueryParserOptionIgnoreFutureDatesKey, (const void *)*MEMORY[0x24BDBD270]);
      CFDictionarySetValue(Mutable, kQPQueryParserOptionResolveDatesInPastKey, v14);
      CFDictionarySetValue(Mutable, kQPQueryParserOptionU2EnabledKey, v14);
      CFDictionarySetValue(Mutable, kQPQueryParserOptionContextIdentifierKey, CFSTR("com.apple.photos"));
    }
    else if (CFStringsAreEqual(MutableCopy, CFSTR("com.apple.reminders.parser")))
    {
      valuePtr = 0;
      v23 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(Mutable, kQPQueryParserOptionFormatKey, v23);
      v15 = (const void *)*MEMORY[0x24BDBD270];
      CFDictionarySetValue(Mutable, kQPQueryParserOptionIgnorePastDatesKey, (const void *)*MEMORY[0x24BDBD270]);
      CFDictionarySetValue(Mutable, kQPQueryParserOptionIgnoreRecurringDatesKey, (const void *)*MEMORY[0x24BDBD268]);
      CFDictionarySetValue(Mutable, kQPQueryParserOptionResolveDatesInFutureKey, v15);
      CFDictionarySetValue(Mutable, kQPQueryParserOptionResolveConcreteDatesKey, v15);
      CFDictionarySetValue(Mutable, CFSTR("usePartOfSpeech"), v15);
      CFDictionarySetValue(Mutable, kQPQueryParserOptionBundleIdentifierKey, CFSTR("com.apple.reminders"));
      CFDictionarySetValue(Mutable, CFSTR("loadAnnotations"), v15);
    }
    else if (CFStringsAreEqual(MutableCopy, CFSTR("com.apple.queryparser"))
           || CFStringsAreEqual(MutableCopy, CFSTR("com.apple.query.parser"))
           || CFStringsAreEqual(MutableCopy, CFSTR("com.apple.query-parser"))
           || CFStringsAreEqual(MutableCopy, CFSTR("com.apple.default")))
    {
      valuePtr = 0;
      v23 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(Mutable, kQPQueryParserOptionFormatKey, v23);
      CFDictionarySetValue(Mutable, kQPQueryParserOptionIgnoreRecurringDatesKey, (const void *)*MEMORY[0x24BDBD268]);
      CFDictionarySetValue(Mutable, kQPQueryParserOptionContextIdentifierKey, CFSTR("com.apple.query.parser"));
    }
    else if (SPQueryKindIsSearchToolSearch((uint64_t)Identifier))
    {
      valuePtr = 1;
      v23 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(Mutable, kQPQueryParserOptionFormatKey, v23);
      v16 = (const void *)*MEMORY[0x24BDBD270];
      CFDictionarySetValue(Mutable, kQPQueryParserOptionResolveDatesInPastKey, (const void *)*MEMORY[0x24BDBD270]);
      CFDictionarySetValue(Mutable, kQPQueryParserOptionContextIdentifierKey, CFSTR("com.apple.spotlight"));
      CFDictionarySetValue(Mutable, kQPQueryParserOptionUseECRInProcessKey, v16);
      v17 = (const void *)*MEMORY[0x24BDBD268];
      if ((v6 & ~v7) != 0)
        v18 = v16;
      else
        v18 = (const void *)*MEMORY[0x24BDBD268];
      CFDictionarySetValue(Mutable, kQPQueryParserOptionU2EnabledKey, v18);
      if (v7)
        v19 = v16;
      else
        v19 = v17;
      CFDictionarySetValue(Mutable, kQPQueryParserOptionUseLLMParseKey, v19);
      CFDictionarySetValue(Mutable, CFSTR("loadAnnotations"), v16);
      CFDictionarySetValue(Mutable, kQPQueryParserOptionUseLexemeSubEntitiesKey, v16);
    }
    else
    {
      v20 = (const __CFString *)cf;
      if (CFStringsAreEqual((CFStringRef)cf, CFSTR("com.apple.spotlight"))
        || CFStringsAreEqual((CFStringRef)cf, CFSTR("com.apple.searchd"))
        || CFStringsAreEqual((CFStringRef)cf, CFSTR("com.apple.finder"))
        || CFStringsAreEqual((CFStringRef)cf, CFSTR("com.apple.documentsapp"))
        || CFStringsAreEqual((CFStringRef)cf, CFSTR("com.apple.search.framework"))
        || CFStringsAreEqual((CFStringRef)cf, CFSTR("com.apple.pommesctl"))
        || CFStringsAreEqual((CFStringRef)cf, CFSTR("com.apple.cslinguistics")))
      {
        valuePtr = 1;
        v23 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionFormatKey, v23);
        v21 = (const void *)*MEMORY[0x24BDBD270];
        CFDictionarySetValue(Mutable, kQPQueryParserOptionResolveDatesInPastKey, (const void *)*MEMORY[0x24BDBD270]);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionContextIdentifierKey, CFSTR("com.apple.spotlight"));
        CFDictionarySetValue(Mutable, kQPQueryParserOptionUseECRInProcessKey, v21);
        CFDictionarySetValue(Mutable, CFSTR("useECRForPets"), v21);
        CFDictionarySetValue(Mutable, CFSTR("loadAnnotations"), v21);
        if (CFStringsAreEqual(v20, CFSTR("com.apple.pommesctl"))
          || CFStringsAreEqual(v20, CFSTR("com.apple.cslinguistics")))
        {
          CFDictionarySetValue(Mutable, kQPQueryParserOptionIgnoreFutureDatesKey, v21);
          CFDictionarySetValue(Mutable, kQPQueryParserOptionIgnoreSingleYearSuggestionKey, v21);
          CFDictionarySetValue(Mutable, (const void *)kQPQueryParserOptionForTestingKey, v21);
          CFDictionarySetValue(Mutable, (const void *)kQPQueryParserOptionWaitForLoadKey, v21);
        }
        if (CFStringsAreEqual(Identifier, CFSTR("com.apple.Spotlight"))
          || CFStringsAreEqual(Identifier, CFSTR("com.apple.Search.framework")))
        {
          CFDictionarySetValue(Mutable, kQPQueryParserOptionU2EnabledKey, v21);
        }
      }
      else if (CFStringsAreEqual((CFStringRef)cf, CFSTR("com.apple.visual-generation")))
      {
        CFDictionarySetValue(Mutable, kQPQueryParserOptionContextIdentifierKey, CFSTR("com.apple.visual-generation"));
        v22 = (const void *)*MEMORY[0x24BDBD270];
        CFDictionarySetValue(Mutable, kQPQueryParserOptionU2EnabledKey, (const void *)*MEMORY[0x24BDBD270]);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionUseECRInProcessKey, v22);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionUseECRForSpansKey, v22);
        CFDictionarySetValue(Mutable, CFSTR("useECRForInferredNames"), v22);
        CFDictionarySetValue(Mutable, CFSTR("loadAnnotations"), v22);
        v23 = CFNumberCreate(v2, kCFNumberSInt32Type, &kVisualGenerationEmbeddingTimeoutMs);
        CFDictionarySetValue(Mutable, CFSTR("kMDQueryOptionEmbeddingGenerationTimeout"), v23);
      }
      else
      {
        valuePtr = 1;
        v23 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionFormatKey, v23);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionResolveDatesInPastKey, (const void *)*MEMORY[0x24BDBD270]);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionContextIdentifierKey, CFSTR("com.apple.query.search"));
      }
    }
    nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)&v23, 0);
    goto LABEL_12;
  }
  valuePtr = 1;
  v8 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
  v23 = v8;
  CFDictionarySetValue(Mutable, kQPQueryParserOptionFormatKey, v8);
  v12 = (const void *)*MEMORY[0x24BDBD270];
  CFDictionarySetValue(Mutable, kQPQueryParserOptionIgnoreFutureDatesKey, (const void *)*MEMORY[0x24BDBD270]);
  CFDictionarySetValue(Mutable, kQPQueryParserOptionResolveDatesInPastKey, v12);
  CFDictionarySetValue(Mutable, kQPQueryParserOptionContextIdentifierKey, CFSTR("com.apple.notes"));
  CFDictionarySetValue(Mutable, CFSTR("loadAnnotations"), v12);
  if (v8)
LABEL_11:
    CFRelease(v8);
LABEL_12:
  if (cf)
    CFRelease(cf);
  return Mutable;
}

void sub_218E7703C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  nlp::CFScopedPtr<__CFString *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

BOOL QPQueryParserAvailableForLocale(_BOOL8 result)
{
  if (result)
    return systemListenerResourcesAvailableForLocaleAndContentType(result, CFSTR("QueryParser"));
  return result;
}

uint64_t QPQueryParserCreate(const __CFDictionary *a1)
{
  QP::QueryParserEngine *v2;

  v2 = (QP::QueryParserEngine *)operator new();
  QP::QueryParserEngine::QueryParserEngine(v2, a1);
  return createQueryParserEngineWrapper(v2);
}

void sub_218E77130(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A24D0C](v1, 0x10A1C405DCF1DC0);
  _Unwind_Resume(a1);
}

QP::Embedder *QPQueryParserCooldown(QP::Embedder *result)
{
  if (result)
  {
    result = (QP::Embedder *)*((_QWORD *)result + 3);
    if (result)
      return QP::QueryParserEngine::cooldown((QP::Parser **)result);
  }
  return result;
}

void QPQueryParserSetOptions(uint64_t a1, CFDictionaryRef theDict)
{
  QP::QueryParserEngine *v3;
  const __CFNumber *v4;
  const __CFBoolean *v5;
  const __CFBoolean *v6;
  const __CFBoolean *v7;
  const __CFBoolean *v8;
  const __CFBoolean *v9;
  const __CFBoolean *v10;
  const __CFBoolean *v11;
  int v12;
  BOOL v13;
  const __CFBoolean *v14;
  const __CFArray *v15;
  uint64_t v16;
  uint64_t PreferredLanguages;
  const __CFBoolean *v18;
  const __CFBoolean *v19;
  __CFArray *v20;
  __CFBoolean *v21;
  __CFDictionary *v22;
  const void *v23;
  __CFBoolean *v24;
  __CFBoolean *v25;
  __CFBoolean *v26;
  __CFBoolean *v27;
  __CFBoolean *v28;
  __CFDate *v29;
  const __CFLocale *v30;
  __CFString *Value;
  void *values;
  int valuePtr;

  if (a1)
  {
    if (theDict)
    {
      v3 = *(QP::QueryParserEngine **)(a1 + 24);
      if (v3)
      {
        Value = (__CFString *)CFDictionaryGetValue(theDict, kQPQueryParserOptionContextIdentifierKey);
        v30 = (const __CFLocale *)CFDictionaryGetValue(theDict, kQPQueryParserOptionLocaleKey);
        v20 = (__CFArray *)CFDictionaryGetValue(theDict, kQPQueryParserOptionPreferredLanguagesKey);
        v29 = (__CFDate *)CFDictionaryGetValue(theDict, kQPQueryParserOptionReferenceDateKey);
        v4 = (const __CFNumber *)CFDictionaryGetValue(theDict, kQPQueryParserOptionFormatKey);
        v5 = (const __CFBoolean *)CFDictionaryGetValue(theDict, CFSTR("loadAnnotations"));
        v6 = (const __CFBoolean *)CFDictionaryGetValue(theDict, kQPQueryParserOptionIgnoreFutureDatesKey);
        v7 = (const __CFBoolean *)CFDictionaryGetValue(theDict, kQPQueryParserOptionIgnorePastDatesKey);
        v8 = (const __CFBoolean *)CFDictionaryGetValue(theDict, kQPQueryParserOptionIgnoreRecurringDatesKey);
        v9 = (const __CFBoolean *)CFDictionaryGetValue(theDict, kQPQueryParserOptionResolveDatesInFutureKey);
        v10 = (const __CFBoolean *)CFDictionaryGetValue(theDict, kQPQueryParserOptionResolveDatesInPastKey);
        v25 = (__CFBoolean *)CFDictionaryGetValue(theDict, kQPQueryParserOptionResolveConcreteDatesKey);
        v27 = (__CFBoolean *)CFDictionaryGetValue(theDict, CFSTR("usePartOfSpeech"));
        v23 = CFDictionaryGetValue(theDict, CFSTR("forTesting"));
        v22 = (__CFDictionary *)CFDictionaryGetValue(theDict, kQPQueryParserOptionCustomFieldSpecifications);
        v24 = (__CFBoolean *)CFDictionaryGetValue(theDict, kQPQueryParserOptionPrivateParsingKey);
        v26 = (__CFBoolean *)CFDictionaryGetValue(theDict, kQPQueryParserOptionEmbeddingsEnabledKey);
        v11 = (const __CFBoolean *)CFDictionaryGetValue(theDict, kQPQueryParserOptionU2EnabledKey);
        v28 = (__CFBoolean *)CFDictionaryGetValue(theDict, kQPQueryParserOptionUseLLMParseKey);
        v21 = (__CFBoolean *)CFDictionaryGetValue(theDict, kQPQueryParserOptionIsEntitySearchKey);
        v19 = (const __CFBoolean *)CFDictionaryGetValue(theDict, kQPQueryParserOptionEnableEntitySearchStemming);
        v18 = (const __CFBoolean *)CFDictionaryGetValue(theDict, kQPQueryParserOptionEnableEntitySearchSpellCorrect);
        if (v4)
        {
          valuePtr = 0;
          CFNumberGetValue(v4, kCFNumberSInt32Type, &valuePtr);
          LODWORD(v4) = QP::QueryParserEngine::setFormat((uint64_t)v3, valuePtr, 0);
        }
        if (v5)
          QP::QueryParserEngine::setLoadAnnotations(v3, v5);
        if (v6)
          QP::QueryParserEngine::setIgnoreFutureDates(v3, v6);
        if (v7)
          QP::QueryParserEngine::setIgnorePastDates(v3, v7);
        if (v8)
          QP::QueryParserEngine::setIgnoreRecurringDates(v3, v8);
        if (v9)
          QP::QueryParserEngine::setResolvePastDates(v3, v9);
        if (v10)
          QP::QueryParserEngine::setResolveFutureDates(v3, v10);
        if (v25)
          QP::QueryParserEngine::setResolveConcreteDates(v3, v25);
        if (v27)
          QP::QueryParserEngine::setUsePartOfSpeech(v3, v27);
        if (v29)
          QP::QueryParserEngine::setDate(v3, v29);
        if (v24)
          QP::QueryParserEngine::setPrivateParsing(v3, v24);
        if (v26)
          QP::QueryParserEngine::setEmbeddingsEnabled(v3, v26);
        if (v11)
        {
          v12 = CFBooleanGetValue(v11);
          v13 = v12 == QP::QueryParserEngine::U2Enabled(v3);
          v14 = v21;
          if (!v13)
          {
            if (QP::QueryParserEngine::U2Enabled(v3))
              QP::QueryParserEngine::cooldown((QP::Parser **)v3);
            QP::QueryParserEngine::setU2Enabled(v3, v11);
            LODWORD(v4) = 1;
          }
        }
        else
        {
          v14 = v21;
        }
        if (v28)
        {
          QP::QueryParserEngine::setUseLLMParse(v3, v28);
          LODWORD(v4) = 1;
        }
        if (v14)
        {
          QP::QueryParserEngine::setIsEntitySearch(v3, v14, v19, v18);
          QP::QueryParserEngine::updateEntitySearch((uint64_t)v3);
        }
        if (v30)
        {
          if (v20)
          {
            LODWORD(v4) = QP::QueryParserEngine::setLocale((QP::ParserConfiguration **)v3, v30, v20, 0) | v4;
          }
          else
          {
            values = (void *)CFLocaleGetValue(v30, (CFLocaleKey)*MEMORY[0x24BDBD418]);
            v15 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (const void **)&values, 1, MEMORY[0x24BDBD690]);
            LODWORD(v4) = QP::QueryParserEngine::setLocale((QP::ParserConfiguration **)v3, v30, v15, 0) | v4;
            CFRelease(v15);
          }
        }
        if (Value)
          LODWORD(v4) = QP::QueryParserEngine::setContextIdentifier(v3, Value, 0) | v4;
        if (v22)
          LODWORD(v4) = QP::QueryParserEngine::setCustomFieldSpecifications(v3, v22, 0) | v4;
        if (v23)
        {
          systemListenerEnableAutoUpdatingLocale(0);
          systemListenerEnableForceLoadingAssets(1);
          v16 = QP::QueryParserEngine::locale(v3);
          PreferredLanguages = QP::QueryParserEngine::getPreferredLanguages(v3);
          systemListenerSetLocale(v16, PreferredLanguages);
        }
        if ((_DWORD)v4)
          QP::QueryParserEngine::updateWithOptions(v3, theDict);
      }
    }
  }
}

__CFDictionary *QPQueryParserCopyOptions(uint64_t a1)
{
  __CFDictionary *Mutable;
  __CFDictionary *v3;
  QP::QueryParserEngine *v4;
  const void *v5;
  const void *v6;
  const void *PreferredLanguages;
  const void *Calendar;
  const void *Date;
  _BYTE *v10;
  const void **v11;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v3 = Mutable;
  if (a1)
  {
    v4 = *(QP::QueryParserEngine **)(a1 + 24);
    if (v4)
    {
      v5 = *(const void **)(*((_QWORD *)v4 + 1) + 176);
      if (v5)
        CFDictionarySetValue(Mutable, kQPQueryParserOptionContextIdentifierKey, v5);
      v6 = (const void *)QP::QueryParserEngine::locale(v4);
      if (v6)
        CFDictionarySetValue(v3, kQPQueryParserOptionLocaleKey, v6);
      PreferredLanguages = (const void *)QP::QueryParserEngine::getPreferredLanguages(v4);
      if (PreferredLanguages)
        CFDictionarySetValue(v3, kQPQueryParserOptionPreferredLanguagesKey, PreferredLanguages);
      Calendar = (const void *)QP::QueryParserEngine::getCalendar(v4);
      if (Calendar)
        CFDictionarySetValue(v3, kQPQueryParserOptionReferenceCalendarKey, Calendar);
      Date = (const void *)QP::QueryParserEngine::getDate(v4);
      if (Date)
        CFDictionarySetValue(v3, kQPQueryParserOptionReferenceDateKey, Date);
      v10 = (_BYTE *)*((_QWORD *)v4 + 1);
      v11 = (const void **)MEMORY[0x24BDBD270];
      if (v10[23])
      {
        CFDictionarySetValue(v3, kQPQueryParserOptionIgnoreFutureDatesKey, (const void *)*MEMORY[0x24BDBD270]);
        v10 = (_BYTE *)*((_QWORD *)v4 + 1);
      }
      if (v10[24])
      {
        CFDictionarySetValue(v3, kQPQueryParserOptionIgnorePastDatesKey, *v11);
        v10 = (_BYTE *)*((_QWORD *)v4 + 1);
      }
      if (v10[27])
      {
        CFDictionarySetValue(v3, kQPQueryParserOptionResolveDatesInFutureKey, *v11);
        v10 = (_BYTE *)*((_QWORD *)v4 + 1);
      }
      if (v10[26])
      {
        CFDictionarySetValue(v3, kQPQueryParserOptionResolveDatesInPastKey, *v11);
        v10 = (_BYTE *)*((_QWORD *)v4 + 1);
      }
      if (v10[28])
        CFDictionarySetValue(v3, kQPQueryParserOptionResolveConcreteDatesKey, *v11);
    }
  }
  return v3;
}

QP::QueryParserEngine *QPQueryParserSetUseSystemLocale(QP::QueryParserEngine *result, const __CFBoolean *a2)
{
  if (result)
  {
    result = (QP::QueryParserEngine *)*((_QWORD *)result + 3);
    if (result)
      return (QP::QueryParserEngine *)QP::QueryParserEngine::useSystemLocale(result, a2);
  }
  return result;
}

uint64_t QPQueryParserSetLocale(uint64_t result, const __CFLocale *a2, const __CFArray *a3)
{
  if (result)
  {
    result = *(_QWORD *)(result + 24);
    if (result)
      return QP::QueryParserEngine::setLocale((QP::ParserConfiguration **)result, a2, a3, 1);
  }
  return result;
}

uint64_t QPQueryParserGetLocale(uint64_t a1)
{
  QP::QueryParserEngine *v1;

  if (a1 && (v1 = *(QP::QueryParserEngine **)(a1 + 24)) != 0)
    return QP::QueryParserEngine::locale(v1);
  else
    return 0;
}

uint64_t QPQueryParserGetPreferredLanguages(uint64_t a1)
{
  QP::QueryParserEngine *v1;

  if (a1 && (v1 = *(QP::QueryParserEngine **)(a1 + 24)) != 0)
    return QP::QueryParserEngine::getPreferredLanguages(v1);
  else
    return 0;
}

QP::ParserConfiguration *QPQueryParserSetCustomResourceDirectory(QP::ParserConfiguration *result, const __CFURL *a2)
{
  if (result)
  {
    result = (QP::ParserConfiguration *)*((_QWORD *)result + 3);
    if (result)
      return QP::QueryParserEngine::setCustomResourceDirectory(result, a2, 1);
  }
  return result;
}

uint64_t QPQueryParserGetCustomResourceDirectory(uint64_t a1)
{
  QP::QueryParserEngine *v1;

  if (a1 && (v1 = *(QP::QueryParserEngine **)(a1 + 24)) != 0)
    return QP::QueryParserEngine::getCustomResourceDirectory(v1);
  else
    return 0;
}

QP::QueryParserEngine *QPQueryParserSetIgnoreAttributedParses(QP::QueryParserEngine *result, const __CFBoolean *a2)
{
  if (result)
  {
    result = (QP::QueryParserEngine *)*((_QWORD *)result + 3);
    if (result)
      return (QP::QueryParserEngine *)QP::QueryParserEngine::setIgnoreAttributedParses(result, a2);
  }
  return result;
}

_DWORD *QPQueryParserSetFormat(_DWORD *result, int a2)
{
  if (result)
  {
    result = (_DWORD *)*((_QWORD *)result + 3);
    if (result)
      return QP::QueryParserEngine::setFormat((uint64_t)result, a2, 1);
  }
  return result;
}

QP::ParserConfiguration *QPQueryParserSetContext(QP::ParserConfiguration *result, const __CFString *a2)
{
  if (result)
  {
    result = (QP::ParserConfiguration *)*((_QWORD *)result + 3);
    if (result)
      return QP::QueryParserEngine::setContextIdentifier(result, a2, 1);
  }
  return result;
}

void QPQueryParserSetReferenceDate(uint64_t a1, const __CFDate *a2)
{
  QP::QueryParserEngine *v2;

  if (a1)
  {
    v2 = *(QP::QueryParserEngine **)(a1 + 24);
    if (v2)
      QP::QueryParserEngine::setDate(v2, a2);
  }
}

uint64_t QPQueryParserGetReferenceDate(uint64_t a1)
{
  QP::QueryParserEngine *v1;

  if (a1 && (v1 = *(QP::QueryParserEngine **)(a1 + 24)) != 0)
    return QP::QueryParserEngine::getDate(v1);
  else
    return 0;
}

uint64_t QPQueryParserGetCalendar(uint64_t a1)
{
  QP::QueryParserEngine *v1;

  if (a1 && (v1 = *(QP::QueryParserEngine **)(a1 + 24)) != 0)
    return QP::QueryParserEngine::getCalendar(v1);
  else
    return 0;
}

QP::QueryParserEngine *QPQueryParserIsAvailable(QP::QueryParserEngine *result)
{
  if (result)
  {
    result = (QP::QueryParserEngine *)*((_QWORD *)result + 3);
    if (result)
      return (QP::QueryParserEngine *)QP::QueryParserEngine::resourcesLoaded(result);
  }
  return result;
}

QP::QueryParserEngine *QPQueryParserIsParsingAvailable(QP::QueryParserEngine *result)
{
  if (result)
  {
    result = (QP::QueryParserEngine *)*((_QWORD *)result + 3);
    if (result)
      return (QP::QueryParserEngine *)QP::QueryParserEngine::parsingEnabled(result);
  }
  return result;
}

uint64_t QPQueryParserUseKnowledgeSource(uint64_t result, uint64_t a2)
{
  if (result)
  {
    result = *(_QWORD *)(result + 24);
    if (result)
      return QP::QueryParserEngine::useKnowledgeSource(result, a2);
  }
  return result;
}

__CFDictionary *QPQueryParserParse(uint64_t a1, const __CFString *a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5)
{
  QP::QueryParserEngine *v8;
  int v10;
  int v11;
  int v12;
  _BOOL4 v13;
  _QWORD v15[6];
  _QWORD v16[5];
  CFTypeRef cf;

  if (!a1)
    return QPQueryParserCopyInputAttributes(a1, a2, a3);
  v8 = *(QP::QueryParserEngine **)(a1 + 24);
  if (v8)
  {
    if (a5)
      QPQueryParserEnumerateSuggestions(a1, a2, a5);
    if (a4)
    {
      v10 = QP::QueryParserEngine::U2Enabled(v8);
      v11 = QP::QueryParserEngine::useLLMParse(v8);
      v12 = QP::QueryParserEngine::embeddingsEnabled(v8);
      v13 = QP::QueryParserEngine::entitySearchEnabled(v8);
      QP::QueryParserEngine::setString(v8, a2, a3, v10, v11, v12, v13, 0);
      v16[0] = 0;
      v16[1] = v16;
      v16[2] = 0x3002000000;
      v16[3] = __Block_byref_object_copy__10;
      v16[4] = __Block_byref_object_dispose__10;
      cf = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6B8]);
      v15[0] = MEMORY[0x24BDAC760];
      v15[1] = 0x40000000;
      v15[2] = __QPQueryParserParse_block_invoke;
      v15[3] = &unk_24DA26600;
      v15[4] = a4;
      v15[5] = v16;
      QP::QueryParserEngine::enumerateParseResults(v8, (uint64_t)v15);
      _Block_object_dispose(v16, 8);
      if (cf)
        CFRelease(cf);
    }
    return QPQueryParserCopyInputAttributes(a1, a2, a3);
  }
  return 0;
}

void sub_218E77A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  const void **v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  nlp::CFScopedPtr<__CFSet *>::reset(v7, 0);
  _Unwind_Resume(a1);
}

void QPQueryParserEnumerateSuggestions(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  QP::QueryParserEngine *v3;
  const __CFArray *v5;
  const __CFArray *TokenCompletedQuery;
  CFIndex Count;
  CFIndex i;
  const __CFString *ValueAtIndex;
  CFIndex v10;
  CFIndex v11;
  const CFSetCallBacks *v12;
  const __CFString *v13;
  const __CFAllocator *allocator;
  _QWORD v15[6];
  _QWORD v16[5];
  CFTypeRef cf;
  _QWORD v18[8];
  _QWORD v19[6];
  _QWORD v20[5];
  CFMutableSetRef Mutable;

  if (a1)
  {
    v3 = *(QP::QueryParserEngine **)(a1 + 24);
    if (v3)
    {
      QP::QueryParserEngine::setString(*(QP::QueryParserEngine **)(a1 + 24), a2, 0, 0, 0, 0, 0, 1);
      if (a3)
      {
        v20[0] = 0;
        v20[1] = v20;
        v20[2] = 0x3002000000;
        v20[3] = __Block_byref_object_copy__10;
        v20[4] = __Block_byref_object_dispose__10;
        allocator = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6B8]);
        v19[0] = MEMORY[0x24BDAC760];
        v19[1] = 0x40000000;
        v19[2] = __QPQueryParserEnumerateSuggestions_block_invoke;
        v19[3] = &unk_24DA26650;
        v19[4] = a3;
        v19[5] = v20;
        QP::QueryParserEngine::enumerateSuggestionResults(v3, (uint64_t)v19);
        v5 = (const __CFArray *)QP::QueryParserEngine::copyCompletions(v3);
        v18[7] = v5;
        TokenCompletedQuery = (const __CFArray *)QP::QueryParserEngine::copyLastTokenCompletedQuery(v3);
        v18[6] = TokenCompletedQuery;
        Count = CFArrayGetCount(v5);
        if (Count >= 1)
        {
          for (i = 0; i != Count; ++i)
          {
            ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v5, i);
            QP::QueryParserEngine::setString(v3, ValueAtIndex, 0, 0, 0, 0, 0, 0);
            v18[0] = MEMORY[0x24BDAC760];
            v18[1] = 0x40000000;
            v18[2] = __QPQueryParserEnumerateSuggestions_block_invoke_2;
            v18[3] = &unk_24DA26678;
            v18[4] = a3;
            v18[5] = v20;
            QP::QueryParserEngine::enumerateSuggestionResults(v3, (uint64_t)v18);
          }
        }
        v10 = CFArrayGetCount(TokenCompletedQuery);
        if (v10 >= 1)
        {
          v11 = 0;
          v12 = (const CFSetCallBacks *)MEMORY[0x24BDBD6B8];
          do
          {
            v13 = (const __CFString *)CFArrayGetValueAtIndex(TokenCompletedQuery, v11);
            QP::QueryParserEngine::setString(v3, v13, 0, 0, 0, 0, 0, 0);
            v16[0] = 0;
            v16[1] = v16;
            v16[2] = 0x3002000000;
            v16[3] = __Block_byref_object_copy__10;
            v16[4] = __Block_byref_object_dispose__10;
            cf = CFSetCreateMutable(allocator, 0, v12);
            v15[0] = MEMORY[0x24BDAC760];
            v15[1] = 0x40000000;
            v15[2] = __QPQueryParserEnumerateSuggestions_block_invoke_3;
            v15[3] = &unk_24DA266A0;
            v15[4] = a3;
            v15[5] = v16;
            QP::QueryParserEngine::enumerateParseResults(v3, (uint64_t)v15);
            _Block_object_dispose(v16, 8);
            if (cf)
              CFRelease(cf);
            ++v11;
          }
          while (v10 != v11);
        }
        if (TokenCompletedQuery)
          CFRelease(TokenCompletedQuery);
        if (v5)
          CFRelease(v5);
        _Block_object_dispose(v20, 8);
        if (Mutable)
          CFRelease(Mutable);
      }
    }
  }
}

void sub_218E77D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,const void *a30,const void *a31)
{
  uint64_t v31;

  nlp::CFScopedPtr<__CFArray const*>::reset(&a30, 0);
  nlp::CFScopedPtr<__CFArray const*>::reset(&a31, 0);
  _Block_object_dispose((const void *)(v31 - 152), 8);
  nlp::CFScopedPtr<__CFSet *>::reset((const void **)(v31 - 112), 0);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
  nlp::CFScopedPtr<__CFSet *>::reset((const void **)(a1 + 40), 0);
}

__CFDictionary *QPQueryParserCopyInputAttributes(uint64_t a1, const __CFString *a2, const __CFDictionary *a3)
{
  QP::QueryParserEngine *v3;
  uint64_t v6;
  __CFDictionary *Mutable;
  CFDataRef EmbeddingData;
  CFDataRef v9;
  CFAttributedStringRef v10;
  CFAttributedStringRef v11;
  CFIndex Length;
  const __CFString *v14;
  const __CFString *v15;

  if (!a1)
    return 0;
  v3 = *(QP::QueryParserEngine **)(a1 + 24);
  if (!v3)
    return 0;
  v6 = QP::QueryParserEngine::string(*(QP::QueryParserEngine **)(a1 + 24));
  if (!a2 && v6
    || a2
    && (!QP::QueryParserEngine::string(v3)
     || (Length = CFStringGetLength(a2),
         v14 = (const __CFString *)QP::QueryParserEngine::string(v3),
         Length != CFStringGetLength(v14))
     || (v15 = (const __CFString *)QP::QueryParserEngine::string(v3), !CFStringsAreEqual(a2, v15))))
  {
    QP::QueryParserEngine::setString(v3, a2, a3);
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (QP::QueryParserEngine::embeddingsEnabled(v3))
  {
    EmbeddingData = QP::QueryParserEngine::copyQueryEmbeddingData(v3);
    if (EmbeddingData)
    {
      v9 = EmbeddingData;
      CFDictionarySetValue(Mutable, (const void *)kQPInputAttributesEmbeddingResultKey, EmbeddingData);
      CFRelease(v9);
    }
  }
  v10 = QP::QueryParserEngine::copyAttributedInput(v3);
  if (v10)
  {
    v11 = v10;
    CFDictionarySetValue(Mutable, (const void *)kQPInputAttributesAttributedResultKey, v10);
    CFRelease(v11);
  }
  return Mutable;
}

void QPQueryParserCancel(uint64_t a1, const __CFDictionary *a2)
{
  QP::Embedder **v2;

  if (a1)
  {
    v2 = *(QP::Embedder ***)(a1 + 24);
    if (v2)
      QP::QueryParserEngine::cancelWithQueryReference(v2, a2);
  }
}

void QPQueryParserEnumerateParses(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  QP::QueryParserEngine *v3;
  int v6;
  int v7;
  int v8;
  _BOOL4 v9;
  _QWORD v10[6];
  _QWORD v11[5];
  CFTypeRef cf;

  if (a1)
  {
    v3 = *(QP::QueryParserEngine **)(a1 + 24);
    if (v3)
    {
      v6 = QP::QueryParserEngine::U2Enabled(*(QP::QueryParserEngine **)(a1 + 24));
      v7 = QP::QueryParserEngine::useLLMParse(v3);
      v8 = QP::QueryParserEngine::embeddingsEnabled(v3);
      v9 = QP::QueryParserEngine::entitySearchEnabled(v3);
      QP::QueryParserEngine::setString(v3, a2, 0, v6, v7, v8, v9, 0);
      if (a3)
      {
        v11[0] = 0;
        v11[1] = v11;
        v11[2] = 0x3002000000;
        v11[3] = __Block_byref_object_copy__10;
        v11[4] = __Block_byref_object_dispose__10;
        cf = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6B8]);
        v10[0] = MEMORY[0x24BDAC760];
        v10[1] = 0x40000000;
        v10[2] = __QPQueryParserEnumerateParses_block_invoke;
        v10[3] = &unk_24DA26628;
        v10[4] = a3;
        v10[5] = v11;
        QP::QueryParserEngine::enumerateParseResults(v3, (uint64_t)v10);
        _Block_object_dispose(v11, 8);
        if (cf)
          CFRelease(cf);
      }
    }
  }
}

void sub_218E7813C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  const void **v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  nlp::CFScopedPtr<__CFSet *>::reset(v7, 0);
  _Unwind_Resume(a1);
}

uint64_t QPQueryParserCopyParses(uint64_t a1, const __CFString *a2)
{
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  CFMutableArrayRef Mutable;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  Mutable = 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 0x40000000;
  v6[2] = __QPQueryParserCopyParses_block_invoke;
  v6[3] = &unk_24DA266C8;
  v6[4] = &v7;
  QPQueryParserEnumerateParses(a1, a2, (uint64_t)v6);
  v4 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_218E7852C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void QPQueryParserEnumerateParsesForStartAndEndDates(uint64_t a1, const __CFString *a2, const __CFDictionary *a3, const __CFString *a4, const __CFDictionary *a5, uint64_t a6)
{
  QP::DateFormatter ***v6;
  _QWORD v7[5];

  if (a1 && a6)
  {
    v6 = *(QP::DateFormatter ****)(a1 + 24);
    if (v6)
    {
      v7[0] = MEMORY[0x24BDAC760];
      v7[1] = 0x40000000;
      v7[2] = __QPQueryParserEnumerateParsesForStartAndEndDates_block_invoke;
      v7[3] = &unk_24DA266F0;
      v7[4] = a6;
      QP::QueryParserEngine::enumerateDateRangeParses(v6, a2, a3, a4, a5, (uint64_t)v7);
    }
  }
}

void QueryParserWrapper::~QueryParserWrapper(QueryParserWrapper *this)
{
  uint64_t v1;

  *(_QWORD *)this = &unk_24DA26720;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v1;

  *(_QWORD *)this = &unk_24DA26720;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x219A24D0CLL);
}

uint64_t nlp::CFType::Equal()
{
  return 0;
}

uint64_t nlp::CFType::Hash(nlp::CFType *this)
{
  return 0;
}

uint64_t nlp::CFType::CopyFormattingDesc(nlp::CFType *this, const __CFDictionary *a2)
{
  return 0;
}

uint64_t nlp::CFType::CopyDebugDesc(nlp::CFType *this)
{
  return 0;
}

uint64_t QP::updateDateComponentsWithRelativeDateOffset(uint64_t result, uint64_t a2, const __CFDate *a3, QP::DateComponents *this, int a5, int a6, char a7, uint64_t a8)
{
  __CFCalendar *v14;
  CFAbsoluteTime AbsoluteTime;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int32x4_t v21;
  int32x4_t v22;
  uint16x4_t v23;
  CFIndex length;
  char v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  CFAbsoluteTime at;

  if (result)
  {
    if (a2)
    {
      v14 = (__CFCalendar *)result;
      result = QP::DateComponents::isEmpty(this);
      if ((result & 1) == 0)
      {
        AbsoluteTime = QP::DateComponents::getAbsoluteTime(this, v14, a3);
        at = AbsoluteTime;
        v37 = 0;
        v38 = 0;
        v16 = *(_QWORD *)this;
        v17 = *((_DWORD *)this + 3);
        v35 = *((_DWORD *)this + 2);
        v36 = 0;
        v18 = *((_DWORD *)this + 4);
        v19 = *((_DWORD *)this + 5);
        v33 = *((_QWORD *)this + 3);
        v34 = v16;
        v20 = *((_DWORD *)this + 8);
        v32 = *(_QWORD *)((char *)this + 36);
        v30 = *((_DWORD *)this + 12);
        v31 = *((_DWORD *)this + 11);
        if (QP::DateComponents::isTime(this))
        {
          result = CFCalendarAddComponents(v14, &at, 0, "d", a8);
          v21.i64[0] = -1;
          v21.i64[1] = -1;
          if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32(*(int32x4_t *)((char *)this + 36), v21))) & 1) == 0
            && (*((_DWORD *)this + 8) & 0x80000000) != 0)
          {
            if (!a6)
              goto LABEL_36;
            goto LABEL_25;
          }
          result = CFCalendarDecomposeAbsoluteTime(v14, at, "EwY", &v37, &v36, (char *)&v38 + 4);
          v20 = v37;
LABEL_20:
          if (!a6)
          {
LABEL_36:
            v29 = v32;
            v28 = v33;
            v27 = v30;
            v26 = v31;
            goto LABEL_37;
          }
LABEL_21:
          v26 = v36;
          v27 = HIDWORD(v38);
          v29 = v32;
          v28 = v33;
LABEL_37:
          *(_QWORD *)this = v34;
          *((_DWORD *)this + 2) = v35;
          *((_DWORD *)this + 3) = v17;
          *((_DWORD *)this + 4) = v18;
          *((_DWORD *)this + 5) = v19;
          *((_QWORD *)this + 3) = v28;
          *((_DWORD *)this + 8) = v20;
          *(_QWORD *)((char *)this + 36) = v29;
          *((_DWORD *)this + 11) = v26;
          *((_DWORD *)this + 12) = v27;
          return result;
        }
        v22.i64[0] = -1;
        v22.i64[1] = -1;
        v23 = (uint16x4_t)vmovn_s32(vcgtq_s32(*(int32x4_t *)((char *)this + 36), v22));
        if ((vmaxv_u16(v23) & 1) != 0)
        {
          if ((v23.i8[0] & 1) != 0)
          {
            length = CFCalendarGetRangeOfUnit(v14, 0x400uLL, 8uLL, AbsoluteTime).length;
            CFCalendarAddComponents(v14, &at, 0, "F", (length - *((int *)this + 9)) * (int)a8);
            result = CFCalendarDecomposeAbsoluteTime(v14, at, "EwY", &v37, &v36, (char *)&v38 + 4);
            goto LABEL_17;
          }
        }
        else if ((*((_DWORD *)this + 8) & 0x80000000) != 0 || (*((_DWORD *)this + 3) & 0x80000000) == 0)
        {
          if (a5 == 99)
          {
            CFCalendarAddComponents(v14, &at, 0, "M", a8);
          }
          else
          {
            if (a5 == 94)
            {
              CFCalendarAddComponents(v14, &at, 0, "d", a8);
LABEL_25:
              result = CFCalendarDecomposeAbsoluteTime(v14, at, "dMy", (char *)&v37 + 4, &v38, (char *)&v38 + 4);
              v17 = HIDWORD(v37);
              v18 = v38;
              v19 = HIDWORD(v38);
              goto LABEL_36;
            }
            if ((a5 - 91) > 2)
              CFCalendarAddComponents(v14, &at, 0, "y", a8);
            else
              CFCalendarAddComponents(v14, &at, 0, "d", a8);
          }
          result = CFCalendarDecomposeAbsoluteTime(v14, at, "dMy", (char *)&v37 + 4, &v38, (char *)&v38 + 4);
          if (*((int *)this + 3) >= 0)
            v17 = HIDWORD(v37);
          if (*((int *)this + 4) >= 0)
            v18 = v38;
          if (a6)
            v19 = HIDWORD(v38);
          goto LABEL_36;
        }
        CFCalendarAddComponents(v14, &at, 0, "w", a8);
        result = CFCalendarDecomposeAbsoluteTime(v14, at, "EwY", &v37, &v36, (char *)&v38 + 4);
        if (*((int *)this + 8) >= 0)
          v20 = v37;
LABEL_17:
        v25 = a7 ^ 1;
        if (!(_DWORD)a8)
          v25 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_21;
        goto LABEL_20;
      }
    }
  }
  return result;
}

void QP::updateDateComponentsWithUnitOffset(__CFCalendar *a1, uint64_t a2, const __CFDate *a3, QP::DateComponents *this, int a5, uint64_t a6)
{
  CFAbsoluteTime AbsoluteTime;
  int v12;
  int v13;
  int v14;
  _BOOL4 v15;
  const char *v16;
  char *v17;
  int v18;
  CFAbsoluteTime at;

  if (!a1 || !a2 || (QP::DateComponents::isEmpty(this) & 1) != 0)
    return;
  AbsoluteTime = QP::DateComponents::getAbsoluteTime(this, a1, a3);
  v12 = *((_DWORD *)this + 2);
  at = AbsoluteTime;
  v13 = *((_DWORD *)this + 1);
  v14 = *(_DWORD *)this;
  v15 = 1;
  if (v12 < 0 && v13 < 0 && v14 < 0)
    v15 = *((_DWORD *)this + 7) >= 0;
  if (a5 == 6 || !v15)
  {
    if ((*((_DWORD *)this + 8) & 0x80000000) == 0)
    {
      CFCalendarAddComponents(a1, &at, 0, "E", a6);
      goto LABEL_41;
    }
    if ((*((_DWORD *)this + 11) & 0x80000000) == 0)
    {
      CFCalendarAddComponents(a1, &at, 0, "w", a6);
      goto LABEL_41;
    }
    if ((*((_DWORD *)this + 3) & 0x80000000) == 0)
    {
      CFCalendarAddComponents(a1, &at, 0, "d", a6);
      goto LABEL_41;
    }
    if ((*((_DWORD *)this + 4) & 0x80000000) == 0)
    {
      CFCalendarAddComponents(a1, &at, 0, "M", a6);
      goto LABEL_41;
    }
    if ((*((_DWORD *)this + 5) & 0x80000000) != 0)
      goto LABEL_41;
    v16 = "y";
    goto LABEL_40;
  }
  if ((v14 & 0x80000000) == 0
    && (a5 - 31) <= 0x2F
    && ((1 << (a5 - 31)) & 0x801001000001) != 0)
  {
    CFCalendarAddComponents(a1, &at, 0, "s", a6);
    goto LABEL_41;
  }
  if ((v13 & 0x80000000) == 0
    && (a5 - 32) <= 0x2F
    && ((1 << (a5 - 32)) & 0x801000000001) != 0)
  {
    CFCalendarAddComponents(a1, &at, 0, "m", a6);
    goto LABEL_41;
  }
  if ((v12 & 0x80000000) == 0)
  {
    if ((a5 - 33) <= 0x2F && ((1 << (a5 - 33)) & 0x801000000001) != 0
      || (a5 - 45) < 0xFFFFFFFD)
    {
      CFCalendarAddComponents(a1, &at, 0, "H", a6);
    }
    goto LABEL_41;
  }
  if (v13 < 0)
    v16 = "s";
  else
    v16 = "m";
  if ((a5 - 45) <= 0xFFFFFFFC && (v13 & v14) >= 0)
LABEL_40:
    CFCalendarAddComponents(a1, &at, 0, v16, a6);
LABEL_41:
  if ((*(_DWORD *)this & 0x80000000) == 0)
    CFCalendarDecomposeAbsoluteTime(a1, at, "s", this);
  if ((*((_DWORD *)this + 1) & 0x80000000) == 0)
    CFCalendarDecomposeAbsoluteTime(a1, at, "m", (char *)this + 4);
  if ((*((_DWORD *)this + 2) & 0x80000000) == 0)
  {
    CFCalendarDecomposeAbsoluteTime(a1, at, "H", (char *)this + 8);
    *((_DWORD *)this + 7) = -1;
  }
  if ((*((_DWORD *)this + 8) & 0x80000000) == 0)
    CFCalendarDecomposeAbsoluteTime(a1, at, "E", (char *)this + 32);
  if ((*((_DWORD *)this + 3) & 0x80000000) == 0)
    CFCalendarDecomposeAbsoluteTime(a1, at, "d", (char *)this + 12);
  if ((*((_DWORD *)this + 4) & 0x80000000) == 0)
    CFCalendarDecomposeAbsoluteTime(a1, at, "M", (char *)this + 16);
  if ((*((_DWORD *)this + 5) & 0x80000000) == 0)
    CFCalendarDecomposeAbsoluteTime(a1, at, "y", (char *)this + 20);
  if ((*((_DWORD *)this + 11) & 0x80000000) == 0)
    CFCalendarDecomposeAbsoluteTime(a1, at, "w", (char *)this + 44);
  v18 = *((_DWORD *)this + 12);
  v17 = (char *)this + 48;
  if ((v18 & 0x80000000) == 0)
    CFCalendarDecomposeAbsoluteTime(a1, at, "Y", v17);
}

uint64_t QP::updateDateComponentsWithHoliday(QP::HolidayReference **a1, __CFString *a2, const __CFString *a3, const __CFString *a4, __CFCalendar *a5, int a6, int a7, __CFString *a8, _DWORD *a9)
{
  uint64_t v9;
  QP::HolidayReference *v13;
  __CFDictionary *v18;
  __CFDictionary *v19;
  const __CFNumber *Value;
  const __CFNumber *v21;
  const __CFNumber *v22;
  const __CFNumber *v23;
  const __CFNumber *v24;
  const __CFAllocator *v25;
  CFCalendarRef v26;
  __CFCalendar *v27;
  const __CFString *v28;
  uint64_t v29;
  const __CFString *v30;
  uint64_t v31;
  unsigned int v32;
  _DWORD *v33;
  int v34;
  const __CFString *v35;
  CFMutableStringRef MutableCopy;
  const __CFString *v37;
  const void *v39[2];
  CFAbsoluteTime at;
  unsigned int v41;
  uint64_t v42;
  _QWORD valuePtr[2];

  v9 = 0;
  if (a5)
  {
    if (a3)
    {
      if (a2)
      {
        v13 = *a1;
        if (v13)
        {
          if (QP::HolidayReference::containsHoliday(v13, a2))
          {
            v18 = QP::HolidayReference::copyValuesForYear(*a1, a2, a3, a4, a7);
            valuePtr[1] = v18;
            if (v18)
            {
              v19 = v18;
              if (!CFDictionaryContainsKey(v18, CFSTR("Year")))
              {
                v9 = 0;
LABEL_44:
                CFRelease(v19);
                return v9;
              }
              v42 = 0;
              valuePtr[0] = 0;
              v41 = a7;
              at = 0.0;
              Value = (const __CFNumber *)CFDictionaryGetValue(v19, CFSTR("Day"));
              if (Value)
                CFNumberGetValue(Value, kCFNumberIntType, (char *)valuePtr + 4);
              v21 = (const __CFNumber *)CFDictionaryGetValue(v19, CFSTR("Month"));
              if (v21)
                CFNumberGetValue(v21, kCFNumberIntType, valuePtr);
              v22 = (const __CFNumber *)CFDictionaryGetValue(v19, CFSTR("Weekday"));
              if (v22)
                CFNumberGetValue(v22, kCFNumberIntType, (char *)&v42 + 4);
              v23 = (const __CFNumber *)CFDictionaryGetValue(v19, CFSTR("WeekOfYear"));
              if (v23)
                CFNumberGetValue(v23, kCFNumberIntType, &v42);
              v24 = (const __CFNumber *)CFDictionaryGetValue(v19, CFSTR("Year"));
              if (v24)
                CFNumberGetValue(v24, kCFNumberIntType, &v41);
              v25 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
              v26 = CFCalendarCreateWithIdentifier((CFAllocatorRef)*MEMORY[0x24BDBD240], CFSTR("gregorian"));
              v27 = v26;
              v39[1] = v26;
              if (HIDWORD(v42) && (_DWORD)v42)
              {
                CFCalendarComposeAbsoluteTime(v26, &at, "EwY", HIDWORD(v42), v42, v41);
                v28 = (const __CFString *)MEMORY[0x219A24388](a5);
                if (CFStringsAreEqual(v28, CFSTR("gregorian"))
                  && (v29 = MEMORY[0x219A2437C](v27), v29 == MEMORY[0x219A2437C](a5)))
                {
                  CFCalendarDecomposeAbsoluteTime(v27, at, "EwY", (char *)&v42 + 4, &v42, &v41);
                }
                else
                {
                  CFCalendarDecomposeAbsoluteTime(a5, at, "EwY", (char *)&v42 + 4, &v42, &v41);
                }
                a9[8] = HIDWORD(v42);
                v32 = v41;
                a9[11] = v42;
                a9[12] = v32;
                v33 = a9 + 5;
              }
              else
              {
                v9 = 0;
                if (!HIDWORD(valuePtr[0]) || !LODWORD(valuePtr[0]))
                {
LABEL_42:
                  if (v27)
                    CFRelease(v27);
                  goto LABEL_44;
                }
                CFCalendarComposeAbsoluteTime(v26, &at, "dMy", HIDWORD(valuePtr[0]), LODWORD(valuePtr[0]), v41);
                v30 = (const __CFString *)MEMORY[0x219A24388](a5);
                if (CFStringsAreEqual(v30, CFSTR("gregorian"))
                  && (v31 = MEMORY[0x219A2437C](v27), v31 == MEMORY[0x219A2437C](a5)))
                {
                  CFCalendarDecomposeAbsoluteTime(v27, at, "dMy", (char *)valuePtr + 4, valuePtr, &v41);
                }
                else
                {
                  CFCalendarDecomposeAbsoluteTime(a5, at, "dMy", (char *)valuePtr + 4, valuePtr, &v41);
                }
                v34 = valuePtr[0];
                a9[3] = HIDWORD(valuePtr[0]);
                a9[4] = v34;
                a9[5] = v41;
                v33 = a9 + 8;
              }
              *v33 = -1;
              if (a8)
              {
                if (CFDictionaryContainsKey(v19, CFSTR("Calendar")))
                {
                  v35 = (const __CFString *)CFDictionaryGetValue(v19, CFSTR("Calendar"));
                  MutableCopy = CFStringCreateMutableCopy(v25, 0, v35);
                  v39[0] = MutableCopy;
                  CFStringLowercase(MutableCopy, 0);
                  v37 = CFStringCreateWithFormat(v25, 0, CFSTR("holiday-%@-%@-%@"), a2, MutableCopy, a4);
                  CFStringAppend(a8, v37);
                  if (v37)
                    CFRelease(v37);
                  if (MutableCopy)
                    CFRelease(MutableCopy);
                }
                else
                {
                  v39[0] = CFStringCreateWithFormat(v25, 0, CFSTR("holiday-%@-gregorian-%@"), a2, a4);
                  CFStringAppend(a8, (CFStringRef)v39[0]);
                  nlp::CFScopedPtr<__CFString const*>::reset(v39, 0);
                }
              }
              v9 = 1;
              goto LABEL_42;
            }
          }
          return 0;
        }
      }
    }
  }
  return v9;
}

void sub_218E79164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  const void *v7;
  va_list va;
  const void *v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va2;

  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v9 = va_arg(va2, const void *);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFCalendar *>::reset((const void **)va1, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)va2, 0);
  _Unwind_Resume(a1);
}

uint64_t QP::updateDateComponentsWithHolidayDisplayKey(QP::HolidayReference **a1, const __CFString *a2, __CFCalendar *a3, uint64_t a4, int a5, _DWORD *a6)
{
  CFArrayRef ArrayBySeparatingStrings;
  __CFString *ValueAtIndex;
  const __CFString *v12;
  const __CFString *v13;
  int v14;
  QP::HolidayReference *v15;
  QP::HolidayReference *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t updated;
  unint64_t *v20;
  unint64_t v21;
  QP::HolidayReference *v23[2];
  CFTypeRef cf;

  if (!a2)
    return 0;
  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x24BDBD240], a2, CFSTR("-"));
  cf = ArrayBySeparatingStrings;
  if (CFArrayGetCount(ArrayBySeparatingStrings) == 4)
  {
    ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 1);
    v12 = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 2);
    v13 = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 3);
    v15 = *a1;
    v16 = a1[1];
    v23[0] = v15;
    v23[1] = v16;
    if (v16)
    {
      v17 = (unint64_t *)((char *)v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    updated = QP::updateDateComponentsWithHoliday(v23, ValueAtIndex, v12, v13, a3, v14, a5, 0, a6);
    if (v16)
    {
      v20 = (unint64_t *)((char *)v16 + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        (*(void (**)(QP::HolidayReference *))(*(_QWORD *)v16 + 16))(v16);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v16);
      }
    }
  }
  else
  {
    updated = 0;
  }
  if (cf)
    CFRelease(cf);
  return updated;
}

void sub_218E79340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);
  nlp::CFScopedPtr<__CFArray const*>::reset((const void **)va1, 0);
  _Unwind_Resume(a1);
}

CFStringRef QP::copyDisplayKeyForPeriodDate(QP *this, const QP::DateComponents *a2, const QP::DateComponents *a3)
{
  uint64_t v3;
  int v4;
  __CFString **v5;
  CFStringRef result;

  v3 = *((unsigned int *)a2 + 3);
  if ((v3 & 0x80000000) != 0
    && (v3 = *((unsigned int *)a2 + 5), (v3 & 0x80000000) != 0)
    && (v3 = *((unsigned int *)a2 + 11), (v3 & 0x80000000) != 0))
  {
    v3 = 1;
  }
  else
  {
    if ((_DWORD)v3 == 3)
    {
      v4 = *((_DWORD *)this + 7) - 1;
      if (v4 < 7)
      {
        v5 = off_24DA26828;
        return v5[v4];
      }
      return 0;
    }
    if ((_DWORD)v3 == 2)
    {
      v4 = *((_DWORD *)this + 7) - 1;
      if (v4 < 7)
      {
        v5 = off_24DA267F0;
        return v5[v4];
      }
      return 0;
    }
  }
  switch(*((_DWORD *)this + 7))
  {
    case 1:
    case 3:
      result = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_EVERY_MORNING"), v3);
      break;
    case 2:
    case 5:
      result = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_EVERY_AFTERNOON"), v3);
      break;
    case 4:
      result = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_EVERY_NOON"), v3);
      break;
    case 6:
      result = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_EVERY_EVENING"), v3);
      break;
    case 7:
      result = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_EVERY_NIGHT"), v3);
      break;
    default:
      return 0;
  }
  return result;
}

const __CFString *QP::copyDisplayKeyForOrdinalDate(QP *this, const QP::DateComponents *a2, const QP::DateComponents *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  int32x4_t v9;
  int32x4_t v10;

  v5 = *((unsigned int *)a2 + 3);
  if ((v5 & 0x80000000) != 0)
  {
    v5 = *((unsigned int *)a2 + 4);
    if ((v5 & 0x80000000) != 0)
    {
      v5 = *((unsigned int *)a2 + 5);
      if ((v5 & 0x80000000) != 0)
      {
        v6 = *((_DWORD *)a2 + 11);
        if (v6 < 0)
          v5 = 1;
        else
          v5 = v6;
      }
    }
  }
  v7 = *((_DWORD *)this + 9);
  if (v7 < 0)
  {
    if (QP::DateComponents::isTime(this)
      || (v9 = *(int32x4_t *)((char *)this + 4),
          v9.i32[2] = *(_DWORD *)this,
          v9.i32[3] = *((_DWORD *)this + 7),
          v10.i64[0] = -1,
          v10.i64[1] = -1,
          (vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32(v9, v10))) & 1) != 0)
      && (*((_DWORD *)a2 + 3) & 0x80000000) == 0)
    {
      if ((v5 - 1) >= 3)
        return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("FORMATTED:VAL_%d-N_EVERY_TIME"), v5);
      else
        return off_24DA26860[(int)v5 - 1];
    }
    else if ((_DWORD)v5 == 2)
    {
      return CFSTR("FORMATTED:EVERY_TWO_DATE");
    }
    else if ((_DWORD)v5 == 3)
    {
      return CFSTR("FORMATTED:EVERY_THREE_DATE");
    }
    else
    {
      return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("FORMATTED:VAL_%d-N_EVERY_DATE"), v5);
    }
  }
  else
  {
    switch(v7)
    {
      case 3:
        return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("FORMATTED:3_%d_ORDINAL_WEEKDAY"), *((unsigned int *)this + 8));
      case 2:
        return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("FORMATTED:2_%d_ORDINAL_WEEKDAY"), *((unsigned int *)this + 8));
      case 1:
        return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("FORMATTED:1_%d_ORDINAL_WEEKDAY"), *((unsigned int *)this + 8));
      default:
        return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("FORMATTED:VAL_%d-N_%d_ORDINAL_WEEKDAY"), *((unsigned int *)this + 9), *((unsigned int *)this + 8));
    }
  }
}

uint64_t QP::DateConverter::loadDateReferenceResourceURL(QP::HolidayReference **this, CFURLRef url)
{
  const __CFString *v4;
  _BOOL4 v5;
  QP::HolidayReference *v6;

  if (!url)
    goto LABEL_8;
  v4 = CFURLCopyPathExtension(url);
  v5 = CFStringsAreEqual(v4, CFSTR("mdplist"));
  if (!v5)
  {
    if (!v4)
      goto LABEL_7;
    goto LABEL_6;
  }
  v6 = (QP::HolidayReference *)operator new();
  QP::HolidayReference::HolidayReference(v6, url);
  this += 2;
  std::shared_ptr<QP::HolidayReference>::reset[abi:ne180100]<QP::HolidayReference,void>(this, (uint64_t)v6);
  LOBYTE(this) = QP::HolidayReference::hasResources(*this);
  if (v4)
LABEL_6:
    CFRelease(v4);
LABEL_7:
  if (!v5)
LABEL_8:
    LOBYTE(this) = 0;
  return this & 1;
}

void sub_218E7972C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x219A24D0C](v2, 0x1070C40D30B4D84);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void std::shared_ptr<QP::HolidayReference>::reset[abi:ne180100]<QP::HolidayReference,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<QP::HolidayReference>::shared_ptr[abi:ne180100]<QP::HolidayReference,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void QP::DateConverter::clearResources(QP::DateConverter *this)
{
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v3;
  __int128 v4;

  v4 = 0uLL;
  std::shared_ptr<QP::GraphStructureStack::Node>::operator=[abi:ne180100]((uint64_t)this + 16, &v4);
  v1 = (std::__shared_weak_count *)*((_QWORD *)&v4 + 1);
  if (*((_QWORD *)&v4 + 1))
  {
    v2 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

BOOL QP::DateConverter::isValid(QP::DateConverter *this, QP::DatePeriod *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _BYTE v10[20];
  int v11;

  v4 = *(_QWORD *)this;
  if (*(_BYTE *)(*(_QWORD *)this + 23))
  {
    v5 = *((_DWORD *)a2 + 2);
    if (v5 < 91)
    {
      if (v5 > 54)
        return 0;
      if ((v5 - 1) <= 1)
      {
        v7 = *((_DWORD *)a2 + 10);
        QP::getCurrentDateComponents(*(__CFCalendar **)(v4 + 80), *(__CFCalendar **)(v4 + 72), (uint64_t)v10);
        if ((v7 & 0x80000000) == 0 && v7 > v11)
          return 0;
      }
    }
    else if (v5 < 0x69)
    {
      return 0;
    }
  }
  else if (*(_BYTE *)(v4 + 24))
  {
    v6 = *((_DWORD *)a2 + 2);
    if (v6 < 19)
    {
      if ((v6 - 1) <= 1)
      {
        v8 = *((_DWORD *)a2 + 10);
        QP::getCurrentDateComponents(*(__CFCalendar **)(v4 + 80), *(__CFCalendar **)(v4 + 72), (uint64_t)v10);
        if ((v8 & 0x80000000) == 0 && v8 < v11)
          return 0;
      }
    }
    else if (v6 < 0x37)
    {
      return 0;
    }
  }
  return !*(_BYTE *)(*(_QWORD *)this + 25) || (*((_DWORD *)a2 + 2) - 105) >= 0x10;
}

__CFCalendar *QP::getCurrentDateComponents@<X0>(__CFCalendar *this@<X0>, __CFCalendar *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  __CFCalendar *v6;
  CFAbsoluteTime CurrentTime;

  *(_DWORD *)(a3 + 48) = -1;
  *(_QWORD *)&v5 = -1;
  *((_QWORD *)&v5 + 1) = -1;
  *(_OWORD *)(a3 + 16) = v5;
  *(_OWORD *)(a3 + 32) = v5;
  *(_OWORD *)a3 = v5;
  if (this)
  {
    v6 = this;
    CurrentTime = getCurrentTime(this, a2);
    return (__CFCalendar *)CFCalendarDecomposeAbsoluteTime(v6, CurrentTime, "dEMywYHms", a3 + 12, a3 + 32, a3 + 16, a3 + 20, a3 + 44, a3 + 48, a3 + 8, a3 + 4, a3);
  }
  return this;
}

uint64_t QP::DateConverter::datePeriodForValues@<X0>(uint64_t this@<X0>, CFStringRef theString@<X1>, const __CFDictionary *a3@<X2>, QP::DatePeriod **a4@<X8>)
{
  QP::ParserConfiguration **v7;
  uint64_t v8;
  __int128 v9;
  char updated;
  QP::DatePeriod *v11;
  const __CFString *v12;
  QP::DatePeriod *v13;

  if (theString)
  {
    v7 = (QP::ParserConfiguration **)this;
    this = CFStringGetLength(theString);
    if (a3)
    {
      if (this)
      {
        this = CFStringHasPrefix(theString, CFSTR("Formatted"));
        if (!(_DWORD)this)
        {
          v8 = operator new();
          *(_QWORD *)v8 = 0;
          *(_DWORD *)(v8 + 8) = 0;
          *(_WORD *)(v8 + 12) = 0;
          *(_DWORD *)(v8 + 16) = 0;
          *(_QWORD *)&v9 = -1;
          *((_QWORD *)&v9 + 1) = -1;
          *(_OWORD *)(v8 + 20) = v9;
          *(_OWORD *)(v8 + 36) = v9;
          *(_OWORD *)(v8 + 52) = v9;
          *(_OWORD *)(v8 + 68) = v9;
          *(_OWORD *)(v8 + 84) = v9;
          *(_OWORD *)(v8 + 100) = v9;
          *(_OWORD *)(v8 + 116) = v9;
          *(_OWORD *)(v8 + 132) = v9;
          *(_OWORD *)(v8 + 148) = v9;
          *(_OWORD *)(v8 + 160) = v9;
          v13 = (QP::DatePeriod *)v8;
          if (CFStringContainsString(theString, CFSTR("Calendar")))
          {
            updated = QP::DateConverter::updatePeriodForCalendar(v7, theString, a3, v13);
          }
          else if (CFStringHasSuffix(theString, CFSTR("FormattedDate"))
                 || CFStringHasSuffix(theString, CFSTR("FormattedTime")))
          {
            updated = QP::DateConverter::updatePeriodForFormattedDate((std::__shared_weak_count **)v7, theString, a3, v13);
          }
          else if (CFStringFind(theString, CFSTR("Period"), 0).location == -1)
          {
            if (CFStringHasPrefix(theString, CFSTR("HolidayCompound")))
            {
              updated = QP::DateConverter::updatePeriodForHolidayCompoundDate((std::__shared_weak_count **)v7, a3, v13);
            }
            else if (CFStringHasPrefix(theString, CFSTR("HolidayRelative")))
            {
              updated = QP::DateConverter::updatePeriodForHolidayRelativeDate(v7, theString, a3, v13);
            }
            else if (CFStringHasPrefix(theString, CFSTR("Holiday")))
            {
              updated = QP::DateConverter::updatePeriodForHolidayDate(v7, a3, v13);
            }
            else if (CFStringHasPrefix(theString, CFSTR("Compound")))
            {
              updated = QP::DateConverter::updatePeriodForValueCompoundDate((std::__shared_weak_count **)v7, v12, a3, (const void **)v13);
            }
            else
            {
              if (!CFStringHasPrefix(theString, CFSTR("Every")))
              {
                if (!QP::DateConverter::updatePeriodForValueDate((QP::DateConverter *)v7, theString, a3, v13))goto LABEL_28;
LABEL_13:
                if (QP::DateConverter::isValid((QP::DateConverter *)v7, v13))
                {
                  v11 = v13;
                  v13 = 0;
LABEL_29:
                  *a4 = v11;
                  return (uint64_t)std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&v13, 0);
                }
LABEL_28:
                v11 = 0;
                goto LABEL_29;
              }
              updated = QP::DateConverter::updatePeriodForOrdinalDate((std::__shared_weak_count **)v7, theString, a3, v13);
            }
          }
          else
          {
            updated = QP::DateConverter::updatePeriodForPeriodTime((std::__shared_weak_count **)v7, theString, a3, v13);
          }
          if ((updated & 1) == 0)
            goto LABEL_28;
          goto LABEL_13;
        }
      }
    }
  }
  *a4 = 0;
  return this;
}

void sub_218E79C38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)va, 0);
  _Unwind_Resume(a1);
}

uint64_t QP::DateConverter::updatePeriodForCalendar(QP::ParserConfiguration **this, const __CFString *a2, CFDictionaryRef theDict, QP::DatePeriod *a4)
{
  uint64_t Value;
  const __CFLocale *v9;
  const __CFString *v10;
  int HasPrefix;
  int HasSuffix;
  const __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFString *v17;
  const __CFString *ScriptCode;
  BOOL v19;
  _BOOL4 v20;
  CFStringRef v22;
  CFStringRef v23;
  const __CFDictionary *v24;
  __int128 v25;
  QP::ParserConfiguration *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  CFIndex Count;
  unint64_t v33;
  const void **v34;
  size_t v35;
  unsigned __int8 v36;
  char v37;
  char v38;
  const __CFString *v39;
  BOOL v40;
  __int128 v41;
  __int128 v42;
  int v43;
  _QWORD v45[2];
  _QWORD v46[2];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  int v54;
  CFStringRef v55;
  uint64_t v56;

  Value = 0;
  v56 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return Value;
  if (!theDict)
    return Value;
  Value = (uint64_t)CFDictionaryGetValue(theDict, CFSTR("CalendarSystem"));
  if (!Value)
    return Value;
  v9 = (const __CFLocale *)*((_QWORD *)*this + 13);
  v10 = (const __CFString *)MEMORY[0x219A24388](*((_QWORD *)*this + 10));
  if (!CFStringHasPrefix((CFStringRef)Value, CFSTR("generic"))
    && CFStringFind((CFStringRef)Value, v10, 0).location == -1)
  {
    return 0;
  }
  HasPrefix = CFStringHasPrefix(a2, CFSTR("Ambiguous"));
  HasSuffix = CFStringHasSuffix(a2, CFSTR("Time"));
  v13 = CFSTR("Ambiguoustime");
  if (!HasSuffix)
    v13 = CFSTR("Ambiguousdate");
  v14 = CFSTR("Date");
  if (HasSuffix)
    v14 = CFSTR("Time");
  if (HasPrefix)
    v15 = v13;
  else
    v15 = v14;
  v55 = 0;
  v16 = (const __CFString *)CFLocaleGetValue(v9, (CFLocaleKey)*MEMORY[0x24BDBD418]);
  v17 = (const __CFString *)CFLocaleGetValue(v9, (CFLocaleKey)*MEMORY[0x24BDBD3D8]);
  ScriptCode = getScriptCode((const __CFString *)v9);
  if (!QP::ParserConfiguration::regionValidForLanguage(*this, v16, ScriptCode, v17))
    v17 = (const __CFString *)QP::ParserConfiguration::canonicalRegionForLanguage(*this, v16, ScriptCode, v17);
  v19 = !v16 || ScriptCode == 0;
  v20 = !v19;
  if (!v20 || v17 == 0)
  {
    if (v20)
    {
      v22 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("%@_%@_%@_%@"), v15, Value, v16, ScriptCode);
    }
    else if (v16 && v17)
    {
      v22 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("%@_%@_%@_%@"), v15, Value, v16, v17);
    }
    else
    {
      if (!v16)
        return 0;
      v22 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("%@_%@_%@"), v15, Value, v16);
    }
  }
  else
  {
    v22 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("%@_%@_%@_%@_%@"), v15, Value, v16, ScriptCode, v17);
  }
  v23 = v22;
  v55 = v22;
  if (!v22)
    return 0;
  v24 = (const __CFDictionary *)CFDictionaryGetValue(theDict, v22);
  if (!v24)
  {
    Value = 0;
LABEL_63:
    CFRelease(v23);
    return Value;
  }
  v54 = -1;
  *(_QWORD *)&v25 = -1;
  *((_QWORD *)&v25 + 1) = -1;
  v52 = v25;
  v53 = v25;
  v51 = v25;
  v50 = -1;
  v48 = v25;
  v49 = v25;
  v47 = v25;
  v26 = *this;
  v27 = (std::__shared_weak_count *)this[1];
  v46[0] = v26;
  v46[1] = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
  }
  Value = QP::updateDateComponentsWithValues((uint64_t)v46, (SInt32 *)&v51, v24, 0);
  if (v27)
  {
    v30 = (unint64_t *)&v27->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if ((Value & 1) != 0)
  {
    Count = CFDictionaryGetCount(v24);
    v45[1] = v45;
    MEMORY[0x24BDAC7A8](Count);
    v34 = (const void **)((char *)v45 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v33 >= 0x200)
      v35 = 512;
    else
      v35 = v33;
    bzero((char *)v45 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0), v35);
    CFDictionaryGetKeysAndValues(v24, v34, 0);
    if (Count < 1)
    {
      v37 = 0;
      v36 = 0;
      v38 = 1;
    }
    else
    {
      v36 = 0;
      v37 = 0;
      v38 = 1;
      do
      {
        v39 = (const __CFString *)*v34;
        if (CFStringCompare((CFStringRef)*v34, CFSTR("hh"), 0) && CFStringCompare(v39, CFSTR("HH"), 0))
        {
          v40 = CFStringCompare(v39, CFSTR("mm"), 0) == kCFCompareEqualTo;
          v38 &= v40;
          v36 |= v40;
        }
        else
        {
          v37 = 1;
        }
        ++v34;
        --Count;
      }
      while (Count);
    }
    v41 = v52;
    *(_OWORD *)((char *)a4 + 20) = v51;
    *(_OWORD *)((char *)a4 + 36) = v41;
    *(_OWORD *)((char *)a4 + 52) = v53;
    v42 = v48;
    *(_OWORD *)((char *)a4 + 72) = v47;
    *((_DWORD *)a4 + 17) = v54;
    *(_OWORD *)((char *)a4 + 88) = v42;
    *(_OWORD *)((char *)a4 + 104) = v49;
    *((_DWORD *)a4 + 30) = v50;
    QP::DatePeriod::setDisplayKey((const void **)a4, CFSTR("FORMATTED"));
    if (((v38 & v37) & v36 & 1) != 0)
      v43 = 121;
    else
      v43 = 2;
    *((_DWORD *)a4 + 2) = v43;
  }
  v23 = v55;
  if (v55)
    goto LABEL_63;
  return Value;
}

void sub_218E7A118(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100](v1 - 240);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v1 - 104), 0);
  _Unwind_Resume(a1);
}

uint64_t QP::DateConverter::updatePeriodForFormattedDate(std::__shared_weak_count **this, const __CFString *a2, CFDictionaryRef theDict, QP::DatePeriod *a4)
{
  std::__shared_weak_count *v5;
  __CFCalendar *shared_weak_owners;
  uint64_t shared_owners;
  const __CFDate *v11;
  const __CFString *v12;
  const __CFDictionary *Value;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t updated;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  int v23;
  double CurrentTime;
  double AbsoluteTime;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  const __CFDate *v29;
  uint64_t v30;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  const __CFDictionary *v38;
  const QP::DateComponents *v39;
  int v40;
  int v41;
  const __CFString *v42;
  _QWORD v43[2];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  int v55;

  if (!theDict)
    return 0;
  v5 = *this;
  shared_weak_owners = (__CFCalendar *)(*this)[3].__shared_weak_owners_;
  if (!shared_weak_owners)
    return 0;
  shared_owners = v5[4].__shared_owners_;
  if (!shared_owners)
    return 0;
  v11 = (const __CFDate *)v5[3].__vftable;
  v12 = CFSTR("FormattedDate");
  if (!CFDictionaryContainsKey(theDict, CFSTR("FormattedDate")))
  {
    v12 = CFSTR("FormattedRecurringDate");
    if (!CFDictionaryContainsKey(theDict, CFSTR("FormattedRecurringDate")))
    {
      v12 = CFSTR("FormattedTime");
      if (!CFDictionaryContainsKey(theDict, CFSTR("FormattedTime")))
        return 0;
    }
  }
  Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, v12);
  if (!Value)
    return 0;
  v55 = -1;
  *(_QWORD *)&v14 = -1;
  *((_QWORD *)&v14 + 1) = -1;
  v53 = v14;
  v54 = v14;
  v52 = v14;
  v51 = -1;
  v49 = v14;
  v50 = v14;
  v48 = v14;
  v47 = -1;
  v45 = v14;
  v46 = v14;
  v44 = v14;
  v15 = this[1];
  v43[0] = *this;
  v43[1] = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  updated = QP::updateDateComponentsWithValues((uint64_t)v43, (SInt32 *)&v52, Value, 0);
  v19 = updated;
  if (v15)
  {
    v20 = (unint64_t *)&v15->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      if ((v19 & 1) == 0)
        return v19;
LABEL_16:
      QP::DatePeriod::setDisplayKey((const void **)a4, CFSTR("FORMATTED"));
      *((_DWORD *)a4 + 2) = 2;
      v22 = BYTE3((*this)[1].__vftable);
      v23 = BYTE2((*this)[1].__vftable);
      CurrentTime = getCurrentTime(shared_weak_owners, v11);
      AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v52, shared_weak_owners, v11);
      if (CFStringHasPrefix(a2, CFSTR("This")))
      {
        if (v22)
          v26 = AbsoluteTime <= CurrentTime;
        else
          v26 = 1;
        if (v26)
        {
          if (v23 && AbsoluteTime < CurrentTime)
          {
            v27 = (uint64_t)shared_weak_owners;
            v28 = shared_owners;
            v29 = v11;
            v30 = 1;
          }
          else
          {
            v27 = (uint64_t)shared_weak_owners;
            v28 = shared_owners;
            v29 = v11;
            v30 = 0;
          }
          QP::updateDateComponentsWithRelativeDateOffset(v27, v28, v29, (QP::DateComponents *)&v52, *((_DWORD *)a4 + 2), 1, 0, v30);
        }
        else
        {
          QP::updateDateComponentsWithRelativeDateOffset((uint64_t)shared_weak_owners, shared_owners, v11, (QP::DateComponents *)&v52, *((_DWORD *)a4 + 2), 1, 0, 0xFFFFFFFFLL);
        }
        v32 = 17;
      }
      else if (CFStringHasPrefix(a2, CFSTR("Last")))
      {
        QP::updateDateComponentsWithRelativeDateOffset((uint64_t)shared_weak_owners, shared_owners, v11, (QP::DateComponents *)&v52, *((_DWORD *)a4 + 2), 1, 0, 0xFFFFFFFFLL);
        if (QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v52, shared_weak_owners, v11) > CurrentTime)
          QP::updateDateComponentsWithRelativeDateOffset((uint64_t)shared_weak_owners, shared_owners, v11, (QP::DateComponents *)&v52, *((_DWORD *)a4 + 2), 1, 0, 0xFFFFFFFFLL);
        v32 = 29;
      }
      else
      {
        if (!CFStringHasPrefix(a2, CFSTR("Next")))
        {
          if (CFStringHasPrefix(a2, CFSTR("Every")))
          {
            if (CFStringHasPrefix(a2, CFSTR("EveryNum")))
            {
              v40 = QP::intValueForNumberInValues((QP *)(*this)[4].__shared_owners_, theDict, v38);
            }
            else if (CFStringHasPrefix(a2, CFSTR("EveryTwo")))
            {
              v40 = 2;
            }
            else
            {
              v40 = 1;
            }
            if ((HIDWORD(v53) & 0x80000000) != 0)
            {
              if ((v52 & 0x80000000) != 0)
              {
                if ((DWORD1(v52) & 0x80000000) != 0)
                {
                  if ((DWORD2(v52) & 0x80000000) != 0)
                  {
                    if ((v54 & 0x80000000) != 0)
                    {
                      if ((HIDWORD(v52) & 0x80000000) != 0 && (v53 & 0x80000000) != 0)
                      {
                        if ((DWORD1(v53) & 0x80000000) == 0)
                          DWORD1(v45) = v40;
                      }
                      else
                      {
                        DWORD1(v45) = v40;
                      }
                    }
                    else
                    {
                      HIDWORD(v46) = v40;
                    }
                  }
                  else
                  {
                    DWORD2(v44) = v40;
                  }
                }
                else
                {
                  DWORD1(v44) = v40;
                }
              }
              else
              {
                LODWORD(v44) = v40;
              }
            }
            else
            {
              HIDWORD(v44) = v40;
            }
            v42 = QP::copyDisplayKeyForOrdinalDate((QP *)&v52, (const QP::DateComponents *)&v44, v39);
            QP::DatePeriod::setDisplayKey((const void **)a4, v42);
            if (v40 <= 1)
              v41 = 103;
            else
              v41 = 118;
            *((_DWORD *)a4 + 2) = v41;
            nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v42, 0);
          }
          goto LABEL_37;
        }
        QP::updateDateComponentsWithRelativeDateOffset((uint64_t)shared_weak_owners, shared_owners, v11, (QP::DateComponents *)&v52, *((_DWORD *)a4 + 2), 1, 0, 1);
        if (QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v52, shared_weak_owners, v11) < CurrentTime)
          QP::updateDateComponentsWithRelativeDateOffset((uint64_t)shared_weak_owners, shared_owners, v11, (QP::DateComponents *)&v52, *((_DWORD *)a4 + 2), 1, 0, 1);
        v32 = 65;
      }
      *((_DWORD *)a4 + 2) = v32;
LABEL_37:
      v33 = v53;
      *(_OWORD *)((char *)a4 + 20) = v52;
      *(_OWORD *)((char *)a4 + 36) = v33;
      *(_OWORD *)((char *)a4 + 52) = v54;
      *((_DWORD *)a4 + 17) = v55;
      v34 = v49;
      *(_OWORD *)((char *)a4 + 72) = v48;
      *(_OWORD *)((char *)a4 + 88) = v34;
      *(_OWORD *)((char *)a4 + 104) = v50;
      *((_DWORD *)a4 + 30) = v51;
      v35 = v44;
      v36 = v45;
      v37 = v46;
      *((_DWORD *)a4 + 43) = v47;
      *(_OWORD *)((char *)a4 + 156) = v37;
      *(_OWORD *)((char *)a4 + 140) = v36;
      *(_OWORD *)((char *)a4 + 124) = v35;
      return v19;
    }
  }
  if ((updated & 1) != 0)
    goto LABEL_16;
  return v19;
}

void sub_218E7A638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t QP::DateConverter::updatePeriodForPeriodTime(std::__shared_weak_count **this, const __CFString *a2, CFDictionaryRef theDict, QP::DatePeriod *a4)
{
  uint64_t v4;
  std::__shared_weak_count *v6;
  __CFCalendar *shared_weak_owners;
  uint64_t shared_owners;
  const __CFDate *v11;
  const __CFString *v12;
  const __CFDictionary *Value;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  char updated;
  char v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  int v23;
  double CurrentTime;
  double AbsoluteTime;
  BOOL v26;
  int v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  const __CFDictionary *v35;
  const QP::DateComponents *v36;
  int v37;
  CFStringRef v38;
  int v39;
  CFStringRef v40;
  _QWORD v41[2];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  int v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int v53;

  v4 = (uint64_t)theDict;
  if (theDict)
  {
    v6 = *this;
    shared_weak_owners = (__CFCalendar *)(*this)[3].__shared_weak_owners_;
    if (shared_weak_owners)
    {
      shared_owners = v6[4].__shared_owners_;
      if (shared_owners)
      {
        v11 = (const __CFDate *)v6[3].__vftable;
        v12 = CFSTR("FormattedPeriod");
        if (CFDictionaryContainsKey(theDict, CFSTR("FormattedPeriod"))
          || (v12 = CFSTR("FormattedRecurringPeriod"),
              CFDictionaryContainsKey((CFDictionaryRef)v4, CFSTR("FormattedRecurringPeriod"))))
        {
          Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v4, v12);
          if (Value)
          {
            v53 = -1;
            *(_QWORD *)&v14 = -1;
            *((_QWORD *)&v14 + 1) = -1;
            v51 = v14;
            v52 = v14;
            v50 = v14;
            v49 = -1;
            v47 = v14;
            v48 = v14;
            v46 = v14;
            v45 = -1;
            v43 = v14;
            v44 = v14;
            v42 = v14;
            v15 = this[1];
            v41[0] = *this;
            v41[1] = v15;
            if (v15)
            {
              p_shared_owners = (unint64_t *)&v15->__shared_owners_;
              do
                v17 = __ldxr(p_shared_owners);
              while (__stxr(v17 + 1, p_shared_owners));
            }
            updated = QP::updateDateComponentsWithValues((uint64_t)v41, (SInt32 *)&v50, Value, 0);
            v19 = updated;
            if (!v15)
              goto LABEL_14;
            v20 = (unint64_t *)&v15->__shared_owners_;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
              if ((v19 & 1) != 0)
              {
LABEL_15:
                QP::DatePeriod::setDisplayKey((const void **)a4, CFSTR("FORMATTED"));
                *((_DWORD *)a4 + 2) = 3;
                v22 = BYTE3((*this)[1].__vftable);
                v23 = BYTE2((*this)[1].__vftable);
                CurrentTime = getCurrentTime(shared_weak_owners, v11);
                AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v50, shared_weak_owners, v11);
                if (!CFStringHasPrefix(a2, CFSTR("This")))
                {
                  if (!CFStringHasPrefix(a2, CFSTR("Last")))
                  {
                    if (CFStringHasPrefix(a2, CFSTR("Next")))
                    {
                      v4 = 1;
                      QP::updateDateComponentsWithRelativeUnitOffset((uint64_t)shared_weak_owners, shared_owners, v11, (QP::DateComponents *)&v50, *((_DWORD *)a4 + 2), 1, 0);
                      *((_DWORD *)a4 + 2) = 66;
                      goto LABEL_33;
                    }
                    if (CFStringHasPrefix(a2, CFSTR("Every")))
                    {
                      if (CFStringHasPrefix(a2, CFSTR("EveryNum")))
                      {
                        v37 = QP::intValueForNumberInValues((QP *)(*this)[4].__shared_owners_, (CFDictionaryRef)v4, v35);
                      }
                      else if (CFStringHasPrefix(a2, CFSTR("EveryTwo")))
                      {
                        v37 = 2;
                      }
                      else
                      {
                        v37 = 1;
                      }
                      HIDWORD(v42) = v37;
                      v38 = QP::copyDisplayKeyForPeriodDate((QP *)&v50, (const QP::DateComponents *)&v42, v36);
                      v40 = v38;
                      if (v37 <= 1)
                        v39 = 104;
                      else
                        v39 = 119;
                      *((_DWORD *)a4 + 2) = v39;
                      QP::DatePeriod::setDisplayKey((const void **)a4, v38);
                      v4 = v38 != 0;
                      nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v40, 0);
                      goto LABEL_33;
                    }
LABEL_32:
                    v4 = 1;
LABEL_33:
                    v30 = v51;
                    *(_OWORD *)((char *)a4 + 20) = v50;
                    *(_OWORD *)((char *)a4 + 36) = v30;
                    *(_OWORD *)((char *)a4 + 52) = v52;
                    *((_DWORD *)a4 + 17) = v53;
                    v31 = v47;
                    *(_OWORD *)((char *)a4 + 72) = v46;
                    *(_OWORD *)((char *)a4 + 88) = v31;
                    *(_OWORD *)((char *)a4 + 104) = v48;
                    *((_DWORD *)a4 + 30) = v49;
                    v32 = v42;
                    v33 = v43;
                    v34 = v44;
                    *((_DWORD *)a4 + 43) = v45;
                    *(_OWORD *)((char *)a4 + 156) = v34;
                    *(_OWORD *)((char *)a4 + 140) = v33;
                    *(_OWORD *)((char *)a4 + 124) = v32;
                    return v4;
                  }
                  QP::updateDateComponentsWithRelativeUnitOffset((uint64_t)shared_weak_owners, shared_owners, v11, (QP::DateComponents *)&v50, *((_DWORD *)a4 + 2), 0xFFFFFFFFLL, 0);
                  v28 = 30;
LABEL_31:
                  *((_DWORD *)a4 + 2) = v28;
                  goto LABEL_32;
                }
                if (v22)
                  v26 = AbsoluteTime <= CurrentTime;
                else
                  v26 = 1;
                if (v26)
                {
                  if (!v23 || AbsoluteTime >= CurrentTime)
                    goto LABEL_30;
                  v29 = 1;
                }
                else
                {
                  v29 = 0xFFFFFFFFLL;
                }
                QP::updateDateComponentsWithRelativeUnitOffset((uint64_t)shared_weak_owners, shared_owners, v11, (QP::DateComponents *)&v50, *((_DWORD *)a4 + 2), v29, 0);
LABEL_30:
                v28 = 18;
                goto LABEL_31;
              }
            }
            else
            {
LABEL_14:
              if ((updated & 1) != 0)
                goto LABEL_15;
            }
          }
        }
      }
    }
    return 0;
  }
  return v4;
}

void sub_218E7A9F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t QP::DateConverter::updatePeriodForHolidayCompoundDate(std::__shared_weak_count **this, CFDictionaryRef theDict, QP::DatePeriod *a3)
{
  __int128 v6;
  CFIndex Count;
  unint64_t v8;
  const void **v9;
  size_t v10;
  uint64_t v11;
  const __CFString *v12;
  const __CFDictionary *Value;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  char updated;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  _OWORD *v24;
  uint64_t v25;
  int v27;
  int v28;
  const __CFDictionary *v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 *v32;
  uint64_t *v33;
  _QWORD v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  CFTypeRef v43;
  int v44;
  __int16 v45;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _OWORD v50[5];
  _BYTE v51[28];
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  if (!theDict
    || !CFDictionaryContainsKey(theDict, CFSTR("HolidayDate"))
    || !(*this)[4].__shared_owners_
    || !(*this)[3].__shared_owners_)
  {
    return 0;
  }
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  *(_QWORD *)&v6 = -1;
  *((_QWORD *)&v6 + 1) = -1;
  v47 = v6;
  v48 = v6;
  v49 = v6;
  v50[0] = v6;
  v50[1] = v6;
  v50[2] = v6;
  v50[3] = v6;
  v50[4] = v6;
  *(_OWORD *)v51 = v6;
  *(_OWORD *)&v51[12] = v6;
  Count = CFDictionaryGetCount(theDict);
  v33 = &v30;
  MEMORY[0x24BDAC7A8](Count);
  v9 = (const void **)((char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v8 >= 0x200)
    v10 = 512;
  else
    v10 = v8;
  bzero((char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  CFDictionaryGetKeysAndValues(theDict, v9, 0);
  if (Count >= 1)
  {
    v11 = 0;
    v31 = (_OWORD *)((char *)v50 + 4);
    v32 = &v47;
    do
    {
      v12 = (const __CFString *)v9[v11];
      if (!CFStringHasPrefix(v12, CFSTR("HolidayDate")))
      {
        if (CFStringHasPrefix(v12, CFSTR("Relative")))
        {
          QP::DateConverter::updatePeriodForRelativeDate((QP::DateConverter *)this, v12, (QP::DatePeriod *)&v43);
        }
        else if (CFStringHasSuffix(v12, CFSTR("Date")))
        {
          Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, v12);
          if (Value
            && (QP::DateConverter::updatePeriodForValueDate((QP::DateConverter *)this, v12, Value, (QP::DatePeriod *)&v43) & 1) == 0)
          {
            goto LABEL_39;
          }
        }
        else
        {
          v42 = -1;
          *(_QWORD *)&v14 = -1;
          *((_QWORD *)&v14 + 1) = -1;
          v40 = v14;
          v41 = v14;
          v39 = v14;
          v38 = -1;
          v36 = v14;
          v37 = v14;
          v35 = v14;
          v15 = this[1];
          v34[0] = *this;
          v34[1] = v15;
          if (v15)
          {
            p_shared_owners = (unint64_t *)&v15->__shared_owners_;
            do
              v17 = __ldxr(p_shared_owners);
            while (__stxr(v17 + 1, p_shared_owners));
          }
          updated = QP::updateDateComponentsWithValues((uint64_t)v34, (SInt32 *)&v39, theDict, 0);
          if (v15)
          {
            v19 = (unint64_t *)&v15->__shared_owners_;
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
          if ((updated & 1) == 0)
          {
LABEL_39:
            v25 = 0;
            goto LABEL_55;
          }
          v21 = v40;
          v22 = v32;
          *v32 = v39;
          v22[1] = v21;
          v22[2] = v41;
          *((_DWORD *)v22 + 12) = v42;
          v23 = v36;
          v24 = v31;
          *v31 = v35;
          v24[1] = v23;
          v24[2] = v37;
          *((_DWORD *)v24 + 12) = v38;
          v44 = 1;
        }
      }
      ++v11;
    }
    while (v11 != Count);
  }
  if ((v44 - 6) >= 0xD)
  {
    if ((v44 - 19) >= 0xC)
    {
      if ((v44 - 55) >= 0xC)
      {
        if ((v44 - 78) >= 0xB)
        {
          if ((v44 - 67) >= 0xB)
          {
            if ((v44 - 31) >= 0xB)
            {
              if ((v44 - 42) >= 0xB)
              {
                if ((v44 - 91) >= 0xE)
                  v27 = v44;
                else
                  v27 = 102;
              }
              else
              {
                v27 = 51;
              }
            }
            else
            {
              v27 = 40;
            }
          }
          else
          {
            v27 = 76;
          }
        }
        else
        {
          v27 = 87;
        }
      }
      else
      {
        v27 = 64;
      }
    }
    else
    {
      v27 = 28;
    }
  }
  else
  {
    v27 = 16;
  }
  v28 = DWORD1(v48);
  *(_QWORD *)((char *)a3 + 20) = -1;
  *(_QWORD *)((char *)a3 + 28) = -1;
  *((_DWORD *)a3 + 9) = -1;
  *((_DWORD *)a3 + 10) = v28;
  *(_QWORD *)((char *)a3 + 44) = -1;
  *(_QWORD *)((char *)a3 + 52) = -1;
  *(_QWORD *)((char *)a3 + 60) = -1;
  *((_DWORD *)a3 + 17) = -1;
  v29 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("HolidayDate"));
  v25 = QP::DateConverter::updatePeriodForHolidayDate((QP::HolidayReference **)this, v29, a3);
  if ((_DWORD)v25)
  {
    if (v27 == 1 || v27 == 89 || v27 == 53)
      QP::DatePeriod::setDisplayKey((const void **)a3, CFSTR("FORMATTED"));
    *((_DWORD *)a3 + 2) = v27;
  }
LABEL_55:
  if (v43)
    CFRelease(v43);
  return v25;
}

void sub_218E7AE30(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t QP::DateConverter::updatePeriodForHolidayRelativeDate(QP::HolidayReference **this, const __CFString *a2, CFDictionaryRef theDict, QP::DatePeriod *a4)
{
  uint64_t result;
  QP::HolidayReference *v9;
  int v10;
  int v11;
  int v12;
  const __CFDictionary *Value;
  _BYTE v14[20];
  int v15;

  result = 0;
  if (a2)
  {
    if (theDict)
    {
      result = CFDictionaryContainsKey(theDict, CFSTR("HolidayDate"));
      if ((_DWORD)result)
      {
        v9 = *this;
        if (!*((_QWORD *)*this + 13))
          return 0;
        result = *((_QWORD *)v9 + 10);
        if (result)
        {
          QP::getCurrentDateComponents((__CFCalendar *)result, *((__CFCalendar **)v9 + 9), (uint64_t)v14);
          if (CFStringHasSuffix(a2, CFSTR("ThisDate")))
          {
            v10 = 16;
            v11 = -1;
LABEL_8:
            v12 = v15;
            goto LABEL_19;
          }
          if (CFStringHasSuffix(a2, CFSTR("LastLastDate")))
          {
            v12 = v15 - 2;
            v10 = 40;
          }
          else if (CFStringHasSuffix(a2, CFSTR("LastDate")))
          {
            v12 = v15 - 1;
            v10 = 28;
          }
          else if (CFStringHasSuffix(a2, CFSTR("NextNextDate")))
          {
            v12 = v15 + 2;
            v10 = 87;
          }
          else if (CFStringHasSuffix(a2, CFSTR("NextDate")))
          {
            v12 = v15 + 1;
            v10 = 64;
          }
          else
          {
            if (CFStringHasSuffix(a2, CFSTR("EveryDate")))
            {
              v10 = 102;
              v11 = 1;
              goto LABEL_8;
            }
            v10 = 1;
            v12 = -1;
          }
          v11 = -1;
LABEL_19:
          *(_QWORD *)((char *)a4 + 28) = -1;
          *(_QWORD *)((char *)a4 + 20) = -1;
          *((_DWORD *)a4 + 9) = -1;
          *((_DWORD *)a4 + 10) = v12;
          *(_QWORD *)((char *)a4 + 44) = -1;
          *(_QWORD *)((char *)a4 + 52) = -1;
          *(_QWORD *)((char *)a4 + 60) = -1;
          *((_DWORD *)a4 + 17) = -1;
          *(_QWORD *)((char *)a4 + 124) = -1;
          *(_QWORD *)((char *)a4 + 132) = -1;
          *((_DWORD *)a4 + 35) = -1;
          *((_DWORD *)a4 + 36) = v11;
          *(_QWORD *)((char *)a4 + 148) = -1;
          *(_QWORD *)((char *)a4 + 156) = -1;
          *(_QWORD *)((char *)a4 + 164) = -1;
          *((_DWORD *)a4 + 43) = -1;
          Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("HolidayDate"));
          result = QP::DateConverter::updatePeriodForHolidayDate(this, Value, a4);
          if ((_DWORD)result)
            *((_DWORD *)a4 + 2) = v10;
        }
      }
    }
  }
  return result;
}

uint64_t QP::DateConverter::updatePeriodForHolidayDate(QP::HolidayReference **this, CFDictionaryRef theDict, QP::DatePeriod *a3)
{
  __CFCalendar *v4;
  __CFString *Value;
  const __CFString *v8;
  const __CFString *v9;
  __int128 v10;
  __int128 v11;
  double AbsoluteTime;
  int v13;
  int isEmpty;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  CFMutableStringRef MutableCopy;
  QP::HolidayReference *v21;
  unint64_t *v22;
  unint64_t v23;
  char updated;
  unint64_t *v25;
  unint64_t v26;
  __CFString *v27;
  int v28;
  QP::HolidayReference *v29;
  unint64_t *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  int v35;
  QP::HolidayReference *v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  int v41;
  QP::HolidayReference *v42[2];
  QP::HolidayReference *v43[2];
  QP::HolidayReference *v44[2];
  CFStringRef theString;
  _BYTE v46[20];
  int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  int v55;
  CFRange v56;
  CFRange v57;

  if (!theDict)
    return 0;
  if (!*((_QWORD *)*this + 13))
    return 0;
  v4 = (__CFCalendar *)*((_QWORD *)*this + 11);
  if (!v4)
    return 0;
  Value = (__CFString *)CFDictionaryGetValue(theDict, CFSTR("Identifier"));
  v8 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("CalendarSystem"));
  if (!((unint64_t)v8 | (unint64_t)Value))
    return 0;
  v9 = v8;
  v10 = *(_OWORD *)((char *)a3 + 36);
  v52 = *(_OWORD *)((char *)a3 + 20);
  v53 = v10;
  v54 = *(_OWORD *)((char *)a3 + 52);
  v55 = *((_DWORD *)a3 + 17);
  v11 = *(_OWORD *)((char *)a3 + 88);
  v48 = *(_OWORD *)((char *)a3 + 72);
  v49 = v11;
  v50 = *(_OWORD *)((char *)a3 + 104);
  v51 = *((_DWORD *)a3 + 30);
  QP::getCurrentDateComponents(v4, *((__CFCalendar **)*this + 9), (uint64_t)v46);
  AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)v46, v4, *((const __CFDate **)*this + 9));
  v13 = DWORD1(v53);
  isEmpty = QP::DateComponents::isEmpty((QP::DateComponents *)&v52);
  if (SDWORD1(v53) < 0)
    v15 = 1;
  else
    v15 = isEmpty;
  v41 = v47;
  if (v15)
    v16 = v47;
  else
    v16 = v13;
  v17 = *((unsigned __int8 *)*this + 27);
  v18 = *((unsigned __int8 *)*this + 26);
  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, &stru_24DA27910);
  v21 = this[3];
  v44[0] = this[2];
  v44[1] = v21;
  theString = MutableCopy;
  if (v21)
  {
    v22 = (unint64_t *)((char *)v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  updated = QP::updateDateComponentsWithHoliday(v44, Value, v9, *((const __CFString **)*this + 15), *((__CFCalendar **)*this + 11), v19, v16, MutableCopy, &v52);
  if (v21)
  {
    v25 = (unint64_t *)((char *)v21 + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      (*(void (**)(QP::HolidayReference *))(*(_QWORD *)v21 + 16))(v21);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v21);
    }
  }
  if ((updated & 1) != 0)
  {
    if (v15)
    {
      if (v17)
      {
        if (QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v52, *((__CFCalendar **)*this + 11), *((const __CFDate **)*this + 9)) > AbsoluteTime)
        {
          v27 = (__CFString *)theString;
          v56.length = CFStringGetLength(theString);
          v56.location = 0;
          CFStringDelete(v27, v56);
          v29 = this[3];
          v43[0] = this[2];
          v43[1] = v29;
          if (v29)
          {
            v30 = (unint64_t *)((char *)v29 + 8);
            do
              v31 = __ldxr(v30);
            while (__stxr(v31 + 1, v30));
          }
          v32 = QP::updateDateComponentsWithHoliday(v43, Value, v9, *((const __CFString **)*this + 15), *((__CFCalendar **)*this + 11), v28, v41 - 1, v27, &v52);
          std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v43);
          if ((v32 & 1) == 0)
          {
            v33 = 0;
            goto LABEL_38;
          }
        }
      }
      else if (v18
             && QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v52, *((__CFCalendar **)*this + 11), *((const __CFDate **)*this + 9)) < AbsoluteTime)
      {
        v27 = (__CFString *)theString;
        v57.length = CFStringGetLength(theString);
        v57.location = 0;
        CFStringDelete(v27, v57);
        v36 = this[3];
        v42[0] = this[2];
        v42[1] = v36;
        if (v36)
        {
          v37 = (unint64_t *)((char *)v36 + 8);
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
        }
        v33 = QP::updateDateComponentsWithHoliday(v42, Value, v9, *((const __CFString **)*this + 15), *((__CFCalendar **)*this + 11), v35, v41 + 1, v27, &v52);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v42);
        if (!(_DWORD)v33)
          goto LABEL_38;
      }
    }
    v27 = (__CFString *)theString;
    QP::DatePeriod::setDisplayKey((const void **)a3, theString);
    v33 = 1;
    *((_DWORD *)a3 + 2) = 1;
    v39 = v53;
    *(_OWORD *)((char *)a3 + 20) = v52;
    *(_OWORD *)((char *)a3 + 36) = v39;
    *(_OWORD *)((char *)a3 + 52) = v54;
    *((_DWORD *)a3 + 17) = v55;
    v40 = v49;
    *(_OWORD *)((char *)a3 + 72) = v48;
    *(_OWORD *)((char *)a3 + 88) = v40;
    *(_OWORD *)((char *)a3 + 104) = v50;
    *((_DWORD *)a3 + 30) = v51;
  }
  else
  {
    v33 = 0;
    v27 = (__CFString *)theString;
  }
LABEL_38:
  if (v27)
    CFRelease(v27);
  return v33;
}

void sub_218E7B3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);
  nlp::CFScopedPtr<__CFString *>::reset((const void **)va1, 0);
  _Unwind_Resume(a1);
}

uint64_t QP::DateConverter::updatePeriodForValueCompoundDate(std::__shared_weak_count **this, const __CFString *a2, CFDictionaryRef theDict, const void **a4)
{
  CFIndex Count;
  unint64_t v6;
  const void **v7;
  size_t v8;
  uint64_t v9;
  const __CFString *v10;
  char *v11;
  const void **v12;
  const __CFString *v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  const __CFDictionary *Value;
  uint64_t result;
  const __CFDictionary *v24;
  const QP::DateComponents *v25;
  int v26;
  const void **v27;
  int v28;
  int v29;
  const __CFDictionary *v30;
  const __CFDictionary *v31;
  const QP::DateComponents *v32;
  int v33;
  const __CFString *v34;
  int v35;
  int v36;
  _QWORD v37[2];
  const void **v38;
  std::__shared_weak_count **v39;
  _QWORD v40[2];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  int v48;
  uint64_t v49;

  v39 = this;
  v49 = *MEMORY[0x24BDAC8D0];
  if (!theDict)
    return 0;
  v38 = a4;
  Count = CFDictionaryGetCount(theDict);
  v37[1] = v37;
  MEMORY[0x24BDAC7A8](Count);
  v7 = (const void **)((char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v6 >= 0x200)
    v8 = 512;
  else
    v8 = v6;
  bzero((char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  CFDictionaryGetKeysAndValues(theDict, v7, 0);
  if (Count < 1)
    goto LABEL_24;
  v9 = 0;
  v10 = 0;
  v11 = (char *)v38 + 20;
  v12 = v38 + 9;
  do
  {
    v13 = (const __CFString *)v7[v9];
    if (!CFStringHasSuffix(v13, CFSTR("Date")))
    {
      v48 = -1;
      *(_QWORD *)&v14 = -1;
      *((_QWORD *)&v14 + 1) = -1;
      v46 = v14;
      v47 = v14;
      v45 = v14;
      v44 = -1;
      v42 = v14;
      v43 = v14;
      v41 = v14;
      v15 = v39[1];
      v40[0] = *v39;
      v40[1] = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      QP::updateDateComponentsWithValues((uint64_t)v40, (SInt32 *)&v45, theDict, 0);
      if (v15)
      {
        v18 = (unint64_t *)&v15->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v20 = v46;
      *(_OWORD *)v11 = v45;
      *((_OWORD *)v11 + 1) = v20;
      *((_OWORD *)v11 + 2) = v47;
      *((_DWORD *)v11 + 12) = v48;
      v21 = v42;
      *(_OWORD *)v12 = v41;
      *((_OWORD *)v12 + 1) = v21;
      *((_OWORD *)v12 + 2) = v43;
      v13 = v10;
      *((_DWORD *)v12 + 12) = v44;
    }
    ++v9;
    v10 = v13;
  }
  while (v9 != Count);
  if (!v13)
  {
LABEL_24:
    result = 0;
    goto LABEL_25;
  }
  Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, v13);
  if (CFStringHasPrefix(v13, CFSTR("Relative")))
  {
    result = QP::DateConverter::updatePeriodForRelativeDate((QP::DateConverter *)v39, v13, (QP::DatePeriod *)v38);
    if ((_DWORD)result)
    {
      if (CFStringContainsString(v13, CFSTR("Every")))
      {
        if (CFStringContainsString(v13, CFSTR("EveryNum")))
        {
          v26 = QP::intValueForNumberInValues((QP *)(*v39)[4].__shared_owners_, Value, v24);
        }
        else if (CFStringContainsString(v13, CFSTR("EveryTwo")))
        {
          v26 = 2;
        }
        else if (CFStringContainsString(v13, CFSTR("EveryThree")))
        {
          v26 = 3;
        }
        else
        {
          v26 = 1;
        }
        v34 = QP::copyDisplayKeyForOrdinalDate((QP *)v11, (const QP::DateComponents *)((char *)v38 + 124), v25);
        *(_QWORD *)&v45 = v34;
        v27 = v38;
        QP::DatePeriod::setDisplayKey(v38, v34);
        if (v26 <= 1)
          v35 = 103;
        else
          v35 = 118;
        *((_DWORD *)v27 + 2) = v35;
        if (!v34)
          goto LABEL_69;
        goto LABEL_68;
      }
      goto LABEL_42;
    }
    goto LABEL_25;
  }
  v30 = (const __CFDictionary *)CFDictionaryGetValue(theDict, v13);
  if (!CFStringHasPrefix(v13, CFSTR("Every")))
  {
    result = QP::DateConverter::updatePeriodForValueDate((QP::DateConverter *)v39, v13, v30, (QP::DatePeriod *)v38);
    if ((_DWORD)result)
    {
LABEL_42:
      QP::DatePeriod::setDisplayKey(v38, CFSTR("FORMATTED"));
      result = 1;
    }
LABEL_25:
    v27 = v38;
    goto LABEL_26;
  }
  result = QP::DateConverter::updatePeriodForOrdinalDate(v39, v13, v30, (QP::DatePeriod *)v38);
  if (!(_DWORD)result)
    goto LABEL_25;
  if (CFStringContainsString(v13, CFSTR("EveryNum")))
  {
    v33 = QP::intValueForNumberInValues((QP *)(*v39)[4].__shared_owners_, v30, v31);
  }
  else if (CFStringContainsString(v13, CFSTR("EveryTwo")))
  {
    v33 = 2;
  }
  else if (CFStringContainsString(v13, CFSTR("EveryThree")))
  {
    v33 = 3;
  }
  else
  {
    v33 = 1;
  }
  v34 = QP::copyDisplayKeyForOrdinalDate((QP *)v11, (const QP::DateComponents *)((char *)v38 + 124), v32);
  *(_QWORD *)&v45 = v34;
  v27 = v38;
  QP::DatePeriod::setDisplayKey(v38, v34);
  if (v33 <= 1)
    v36 = 103;
  else
    v36 = 118;
  *((_DWORD *)v27 + 2) = v36;
  if (!v34)
    goto LABEL_69;
LABEL_68:
  CFRelease(v34);
LABEL_69:
  result = 1;
LABEL_26:
  v28 = *((_DWORD *)v27 + 2);
  if ((v28 - 6) < 0xD)
  {
    v29 = 17;
LABEL_45:
    *((_DWORD *)v27 + 2) = v29;
    return result;
  }
  if ((v28 - 55) < 0xC)
  {
    v29 = 65;
    goto LABEL_45;
  }
  if ((v28 - 19) < 0xC)
  {
    v29 = 29;
    goto LABEL_45;
  }
  if ((v28 - 55) < 0x24)
  {
    v29 = 90;
    goto LABEL_45;
  }
  if ((v28 - 19) < 0x24)
  {
    v29 = 54;
    goto LABEL_45;
  }
  if ((v28 - 91) < 0xE)
  {
    v29 = 103;
    goto LABEL_45;
  }
  if ((v28 - 105) <= 0xF)
  {
    v29 = 118;
    goto LABEL_45;
  }
  return result;
}

void sub_218E7B8D4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t QP::DateConverter::updatePeriodForOrdinalDate(std::__shared_weak_count **this, const __CFString *a2, const __CFDictionary *a3, QP::DatePeriod *a4)
{
  std::__shared_weak_count *v5;
  QP *shared_owners;
  __CFCalendar *v7;
  __int128 v11;
  int v12;
  int v13;
  __int128 v14;
  int v15;
  int v16;
  __int128 v17;
  int v18;
  const __CFDictionary *v19;
  int HasSuffix;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  char updated;
  char v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t result;
  const __CFDictionary *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  __int128 v48;
  __int128 v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  const __CFString *v60;
  _QWORD v61[2];
  uint64_t v62;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  int v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  int v76;
  CFAbsoluteTime at[2];

  if (!a2)
    return 0;
  v5 = *this;
  shared_owners = (QP *)(*this)[4].__shared_owners_;
  if (!shared_owners)
    return 0;
  v7 = (__CFCalendar *)v5[3].__shared_owners_;
  if (!v7)
    return 0;
  at[0] = getCurrentTime((__CFCalendar *)v5[3].__shared_owners_, (const __CFDate *)v5[3].__vftable);
  v11 = *(_OWORD *)((char *)a4 + 36);
  v73 = *(_OWORD *)((char *)a4 + 20);
  v74 = v11;
  v75 = *(_OWORD *)((char *)a4 + 52);
  v76 = *((_DWORD *)a4 + 17);
  v52 = *((_DWORD *)a4 + 31);
  v53 = *((_DWORD *)a4 + 32);
  v12 = *((_DWORD *)a4 + 35);
  v54 = *((_DWORD *)a4 + 33);
  v55 = *((_DWORD *)a4 + 34);
  v13 = *((_DWORD *)a4 + 36);
  v14 = *(_OWORD *)((char *)a4 + 148);
  v15 = *((_DWORD *)a4 + 42);
  v72 = *((_DWORD *)a4 + 41);
  v16 = *((_DWORD *)a4 + 43);
  v17 = *(_OWORD *)((char *)a4 + 88);
  v69 = *(_OWORD *)((char *)a4 + 72);
  v70 = v17;
  v71 = v14;
  v18 = *((_DWORD *)a4 + 26);
  v68 = *(_QWORD *)((char *)a4 + 108);
  v58 = *((_DWORD *)a4 + 29);
  v59 = v18;
  v56 = v16;
  v57 = *((_DWORD *)a4 + 30);
  v67 = -1;
  v65 = -1;
  v66 = -1;
  v63 = -1;
  v64 = -1;
  v62 = -1;
  CFCalendarDecomposeAbsoluteTime(v7, at[0], "yMdEwHms", (char *)&v67 + 4, &v67, &v66, &v65, &v64, &v63, (char *)&v62 + 4, &v62);
  HasSuffix = CFStringHasSuffix(a2, CFSTR("EveryNumIsoDayPerMonthDate"));
  if (HasSuffix)
  {
    v21 = QP::intValueForNumberInValues(shared_owners, a3, v19);
    goto LABEL_8;
  }
  if (!CFStringHasSuffix(a2, CFSTR("EveryLastIsoDayPerMonthDate")))
  {
    if (CFStringHasPrefix(a2, CFSTR("EveryNum")))
    {
      v31 = QP::intValueForNumberInValues(shared_owners, a3, v30);
      if ((v31 & 0x80000000) != 0)
        return 0;
      v32 = v31;
      if (CFStringFind(a2, CFSTR("Second"), 0).location != -1)
      {
        v60 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_EVERY_SECOND"), v32);
        QP::DatePeriod::setDisplayKey((const void **)a4, v60);
        if (v32 <= 1)
          v33 = 91;
        else
          v33 = 106;
        *((_DWORD *)a4 + 2) = v33;
        if (QP::DateComponents::isEmpty((QP::DateComponents *)&v73))
        {
          *(_QWORD *)&v73 = v62;
          *((_QWORD *)&v73 + 1) = __PAIR64__(v66, v63);
          *(_QWORD *)&v74 = v67;
        }
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v60, 0);
        v34 = v32;
        v36 = v55;
        v35 = v56;
        goto LABEL_78;
      }
      if (CFStringFind(a2, CFSTR("Minute"), 0).location != -1)
      {
        v60 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_EVERY_MINUTE"), v32);
        QP::DatePeriod::setDisplayKey((const void **)a4, v60);
        if (v32 <= 1)
          v43 = 92;
        else
          v43 = 107;
        *((_DWORD *)a4 + 2) = v43;
        if (QP::DateComponents::isEmpty((QP::DateComponents *)&v73))
        {
          *(_QWORD *)&v73 = v62;
          *((_QWORD *)&v73 + 1) = __PAIR64__(v66, v63);
          *(_QWORD *)&v74 = v67;
        }
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v60, 0);
        v38 = v32;
        v36 = v55;
        v35 = v56;
        v34 = v52;
        goto LABEL_79;
      }
      if (CFStringFind(a2, CFSTR("Hour"), 0).location != -1)
      {
        v60 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_EVERY_HOUR"), v32);
        QP::DatePeriod::setDisplayKey((const void **)a4, v60);
        if (v32 <= 1)
          v44 = 93;
        else
          v44 = 108;
        *((_DWORD *)a4 + 2) = v44;
        if (QP::DateComponents::isEmpty((QP::DateComponents *)&v73))
        {
          *(_QWORD *)&v73 = v62;
          *((_QWORD *)&v73 + 1) = __PAIR64__(v66, v63);
          *(_QWORD *)&v74 = v67;
        }
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v60, 0);
        v39 = v32;
        v36 = v55;
        v35 = v56;
        v34 = v52;
        v38 = v53;
        goto LABEL_80;
      }
      if (CFStringFind(a2, CFSTR("Day"), 0).location != -1)
      {
        v60 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_EVERY_DAY"), v32);
        QP::DatePeriod::setDisplayKey((const void **)a4, v60);
        if (v32 <= 1)
          v45 = 94;
        else
          v45 = 109;
        *((_DWORD *)a4 + 2) = v45;
        if (QP::DateComponents::isEmpty((QP::DateComponents *)&v73))
        {
          HIDWORD(v73) = v66;
          *(_QWORD *)&v74 = v67;
        }
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v60, 0);
        v36 = v32;
        v35 = v56;
        goto LABEL_77;
      }
      if (CFStringFind(a2, CFSTR("Weekend"), 0).location == -1)
      {
        if (CFStringFind(a2, CFSTR("Week"), 0).location == -1)
        {
          if (CFStringFind(a2, CFSTR("Month"), 0).location == -1)
          {
            if (CFStringFind(a2, CFSTR("Year"), 0).location != -1)
            {
              v60 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_EVERY_YEAR"), v32);
              QP::DatePeriod::setDisplayKey((const void **)a4, v60);
              if (v32 <= 1)
                v51 = 100;
              else
                v51 = 115;
              *((_DWORD *)a4 + 2) = v51;
              if (QP::DateComponents::isEmpty((QP::DateComponents *)&v73))
                DWORD1(v74) = HIDWORD(v67);
              nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v60, 0);
              v13 = v32;
            }
          }
          else
          {
            v60 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_EVERY_MONTH"), v32);
            QP::DatePeriod::setDisplayKey((const void **)a4, v60);
            if (v32 <= 1)
              v50 = 99;
            else
              v50 = 114;
            *((_DWORD *)a4 + 2) = v50;
            if (QP::DateComponents::isEmpty((QP::DateComponents *)&v73))
              *(_QWORD *)&v74 = v67;
            nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v60, 0);
            v12 = v32;
          }
          goto LABEL_76;
        }
        v60 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_EVERY_WEEK"), v32);
        QP::DatePeriod::setDisplayKey((const void **)a4, v60);
        if (v32 <= 1)
          v47 = 98;
        else
          v47 = 113;
        *((_DWORD *)a4 + 2) = v47;
        if (QP::DateComponents::isEmpty((QP::DateComponents *)&v73))
        {
          CFCalendarComposeAbsoluteTime(v7, at, "wY", v64, HIDWORD(v67));
          CFCalendarDecomposeAbsoluteTime(v7, at[0], "yEw", (char *)&v67 + 4, &v65, &v64);
          HIDWORD(v75) = v64;
          v76 = HIDWORD(v67);
        }
      }
      else
      {
        v60 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_EVERY_WEEKEND"), v32);
        QP::DatePeriod::setDisplayKey((const void **)a4, v60);
        if (v32 <= 1)
          v46 = 97;
        else
          v46 = 112;
        *((_DWORD *)a4 + 2) = v46;
        if (QP::DateComponents::isEmpty((QP::DateComponents *)&v73))
        {
          CFCalendarComposeAbsoluteTime(v7, at, "wY", v64, HIDWORD(v67));
          CFCalendarAddComponents(v7, at, 0, "E", 6);
          CFCalendarDecomposeAbsoluteTime(v7, at[0], "yEw", (char *)&v67 + 4, &v65, &v64);
          LODWORD(v75) = v65;
          HIDWORD(v75) = v64;
          v76 = HIDWORD(v67);
          CFCalendarAddComponents(v7, at, 0, "d", 1);
          CFCalendarDecomposeAbsoluteTime(v7, at[0], "yEw", (char *)&v67 + 4, &v65, &v64);
          v58 = v64;
          v59 = v65;
          v57 = HIDWORD(v67);
        }
      }
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v60, 0);
      v15 = v32;
    }
LABEL_76:
    v36 = v55;
    v35 = v56;
LABEL_77:
    v34 = v52;
LABEL_78:
    v38 = v53;
LABEL_79:
    v39 = v54;
LABEL_80:
    v40 = v58;
    v41 = v59;
    v42 = v57;
LABEL_81:
    v48 = v74;
    *(_OWORD *)((char *)a4 + 20) = v73;
    *(_OWORD *)((char *)a4 + 36) = v48;
    *(_OWORD *)((char *)a4 + 52) = v75;
    *((_DWORD *)a4 + 17) = v76;
    *((_DWORD *)a4 + 31) = v34;
    *((_DWORD *)a4 + 32) = v38;
    *((_DWORD *)a4 + 33) = v39;
    *((_DWORD *)a4 + 34) = v36;
    *((_DWORD *)a4 + 35) = v12;
    *((_DWORD *)a4 + 36) = v13;
    *(_OWORD *)((char *)a4 + 148) = v71;
    *((_DWORD *)a4 + 41) = v72;
    *((_DWORD *)a4 + 42) = v15;
    *((_DWORD *)a4 + 43) = v35;
    v49 = v70;
    *(_OWORD *)((char *)a4 + 72) = v69;
    *(_OWORD *)((char *)a4 + 88) = v49;
    *((_DWORD *)a4 + 26) = v41;
    *(_QWORD *)((char *)a4 + 108) = v68;
    result = 1;
    *((_DWORD *)a4 + 29) = v40;
    *((_DWORD *)a4 + 30) = v42;
    return result;
  }
  v21 = 0xFFFFFFFFLL;
LABEL_8:
  v22 = this[1];
  v61[0] = *this;
  v61[1] = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  updated = QP::updateDateComponentsWithValues((uint64_t)v61, (SInt32 *)&v73, a3, 1);
  v26 = updated;
  if (v22)
  {
    v27 = (unint64_t *)&v22->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      if ((v26 & 1) != 0)
        goto LABEL_16;
      return 0;
    }
  }
  if ((updated & 1) == 0)
    return 0;
LABEL_16:
  if (!HasSuffix || (result = 0, v21 <= 5) && (v75 & 0x80000000) == 0)
  {
    switch((int)v21)
    {
      case -1:
        v60 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("FORMATTED:LAST_%d_ORDINAL_WEEKDAY"), v75);
        QP::DatePeriod::setDisplayKey((const void **)a4, v60);
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v60, 0);
        LODWORD(v21) = 0x7FFFFFFF;
        goto LABEL_38;
      case 1:
        v60 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("FORMATTED:1_%d_ORDINAL_WEEKDAY"), v75);
        QP::DatePeriod::setDisplayKey((const void **)a4, v60);
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v60, 0);
        v37 = 96;
        LODWORD(v21) = 1;
        goto LABEL_40;
      case 2:
        v60 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("FORMATTED:2_%d_ORDINAL_WEEKDAY"), v75);
        QP::DatePeriod::setDisplayKey((const void **)a4, v60);
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v60, 0);
        LODWORD(v21) = 2;
        goto LABEL_38;
      case 3:
        v60 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("FORMATTED:3_%d_ORDINAL_WEEKDAY"), v75);
        QP::DatePeriod::setDisplayKey((const void **)a4, v60);
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v60, 0);
        LODWORD(v21) = 3;
        goto LABEL_38;
      default:
        v60 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("FORMATTED:VAL_%d-N_%d_ORDINAL_WEEKDAY"), v21, v75);
        QP::DatePeriod::setDisplayKey((const void **)a4, v60);
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v60, 0);
        if ((int)v21 < 2)
        {
          v37 = 96;
LABEL_40:
          v36 = v55;
          v35 = v56;
          v34 = v52;
          v38 = v53;
          v39 = v54;
          v40 = v58;
          v41 = v59;
          v42 = v57;
        }
        else
        {
LABEL_38:
          v36 = v55;
          v35 = v56;
          v34 = v52;
          v38 = v53;
          v39 = v54;
          v40 = v58;
          v41 = v59;
          v42 = v57;
          v37 = 111;
        }
        *((_DWORD *)a4 + 2) = v37;
        DWORD1(v75) = v21;
        v12 = 1;
        break;
    }
    goto LABEL_81;
  }
  return result;
}

void sub_218E7C368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  _Unwind_Resume(exception_object);
}

uint64_t QP::DateConverter::updatePeriodForValueDate(QP::DateConverter *this, const __CFString *a2, const __CFDictionary *a3, QP::DatePeriod *a4)
{
  uint64_t v4;
  uint64_t v7;
  QP *v8;
  __CFCalendar *v9;
  __int128 v12;
  int v13;
  __int128 v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  const __CFDictionary *v19;
  uint64_t v20;
  int v21;
  CFStringRef v22;
  int v23;
  int v24;
  int v25;
  int HasSuffix;
  CFIndex location;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  char updated;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  char v40;
  CFRange RangeOfUnit;
  unsigned int v42;
  int *v43;
  __int128 *v44;
  __int128 v45;
  int v46;
  __int128 v47;
  int v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  _QWORD v54[2];
  _QWORD v55[2];
  _QWORD v56[2];
  int v57;
  const __CFString *v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  int v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  int v76;
  CFAbsoluteTime at[3];

  v4 = 0;
  if (!a2 || !a3)
    return v4;
  v7 = *(_QWORD *)this;
  v8 = *(QP **)(*(_QWORD *)this + 104);
  if (!v8)
    return 0;
  v9 = *(__CFCalendar **)(v7 + 80);
  if (!v9)
    return 0;
  at[0] = getCurrentTime(*(__CFCalendar **)(v7 + 80), *(const __CFDate **)(v7 + 72));
  v12 = *(_OWORD *)((char *)a4 + 36);
  v73 = *(_OWORD *)((char *)a4 + 20);
  v74 = v12;
  v75 = *(_OWORD *)((char *)a4 + 52);
  v13 = *((_DWORD *)a4 + 18);
  v76 = *((_DWORD *)a4 + 17);
  v69 = *(_OWORD *)((char *)a4 + 124);
  v14 = *(_OWORD *)((char *)a4 + 156);
  v70 = *(_OWORD *)((char *)a4 + 140);
  v71 = v14;
  v72 = *((_DWORD *)a4 + 43);
  v15 = *((_DWORD *)a4 + 21);
  v49 = *((_DWORD *)a4 + 20);
  v50 = *((_DWORD *)a4 + 19);
  v16 = *((_DWORD *)a4 + 22);
  v67 = *((_DWORD *)a4 + 23);
  v68 = v16;
  v17 = *((_QWORD *)a4 + 12);
  v18 = *((_DWORD *)a4 + 26);
  v65 = *(_QWORD *)((char *)a4 + 108);
  v66 = v17;
  v52 = *((_DWORD *)a4 + 30);
  v53 = *((_DWORD *)a4 + 29);
  v64 = -1;
  v62 = -1;
  v63 = -1;
  v61 = -1;
  v59 = -1;
  v60 = -1;
  CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMdEwHms", (char *)&v64 + 4, &v64, &v63, &v62, &v61, (char *)&v60 + 4, &v60, &v59);
  v20 = QP::intValueForNumberInValues(v8, a3, v19);
  if (CFStringHasPrefix(a2, CFSTR("NextNum")))
  {
    if (CFStringHasSuffix(a2, CFSTR("RangeDate")))
    {
      if ((v20 & 0x80000000) == 0)
      {
        v21 = v15;
        v51 = v18;
        if (CFStringFind(a2, CFSTR("Second"), 0).location != -1)
        {
          v22 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_NEXT_SECONDS"), v20);
          v58 = v22;
          QP::DatePeriod::setDisplayKey((const void **)a4, v22);
          *((_DWORD *)a4 + 2) = 78;
          *(_QWORD *)&v74 = v64;
          HIDWORD(v73) = v63;
          LODWORD(v73) = v59;
          *(_QWORD *)((char *)&v73 + 4) = v60;
          CFCalendarAddComponents(v9, at, 0, "s", v20);
          CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMdEwHms", (char *)&v64 + 4, &v64, &v63, &v62, &v61, (char *)&v60 + 4, &v60, &v59);
          v21 = v63;
          v67 = HIDWORD(v64);
          v68 = v64;
          v23 = v60;
          v24 = HIDWORD(v60);
          v25 = v59;
          if (v22)
            CFRelease(v22);
          goto LABEL_69;
        }
        if (CFStringFind(a2, CFSTR("Minute"), 0).location != -1)
        {
          v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_NEXT_MINUTES"), v20);
          QP::DatePeriod::setDisplayKey((const void **)a4, v58);
          *((_DWORD *)a4 + 2) = 79;
          *(_QWORD *)&v74 = v64;
          HIDWORD(v73) = v63;
          LODWORD(v73) = v59;
          *(_QWORD *)((char *)&v73 + 4) = v60;
          CFCalendarAddComponents(v9, at, 0, "m", v20);
          CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMdEwHms", (char *)&v64 + 4, &v64, &v63, &v62, &v61, (char *)&v60 + 4, &v60, &v59);
LABEL_49:
          v21 = v63;
          v67 = HIDWORD(v64);
          v68 = v64;
          v23 = v60;
          v24 = HIDWORD(v60);
          v25 = v59;
LABEL_68:
          nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v58, 0);
LABEL_69:
          v4 = 1;
          goto LABEL_147;
        }
        if (CFStringFind(a2, CFSTR("Hour"), 0).location != -1)
        {
          v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_NEXT_HOURS"), v20);
          QP::DatePeriod::setDisplayKey((const void **)a4, v58);
          *((_DWORD *)a4 + 2) = 80;
          *(_QWORD *)&v74 = v64;
          HIDWORD(v73) = v63;
          LODWORD(v73) = v59;
          *(_QWORD *)((char *)&v73 + 4) = v60;
          CFCalendarAddComponents(v9, at, 0, "H", v20);
          CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMdEwHms", (char *)&v64 + 4, &v64, &v63, &v62, &v61, (char *)&v60 + 4, &v60, &v59);
          goto LABEL_49;
        }
        if (CFStringFind(a2, CFSTR("Day"), 0).location != -1)
        {
          v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_NEXT_DAYS"), v20);
          QP::DatePeriod::setDisplayKey((const void **)a4, v58);
          v24 = v49;
          v23 = v50;
          v25 = v13;
          *((_DWORD *)a4 + 2) = 81;
          HIDWORD(v73) = v63;
          *(_QWORD *)&v74 = v64;
          CFCalendarAddComponents(v9, at, 0, "d", v20);
          CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v64 + 4, &v64, &v63);
          v21 = v63;
          v67 = HIDWORD(v64);
          v68 = v64;
          goto LABEL_68;
        }
        if (CFStringFind(a2, CFSTR("Weekend"), 0).location != -1)
        {
          v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_NEXT_WEEKENDS"), v20);
          QP::DatePeriod::setDisplayKey((const void **)a4, v58);
          v24 = v49;
          v23 = v50;
          v25 = v13;
          *((_DWORD *)a4 + 2) = 82;
          CFCalendarComposeAbsoluteTime(v9, at, "wY", v61, HIDWORD(v64));
          CFCalendarAddComponents(v9, at, 0, "E", 6);
          CFCalendarDecomposeAbsoluteTime(v9, at[0], "yEw", (char *)&v64 + 4, &v62, &v61);
          LODWORD(v75) = v62;
          HIDWORD(v75) = v61;
          v76 = HIDWORD(v64);
          CFCalendarComposeAbsoluteTime(v9, at, "wY", v61 + v20, HIDWORD(v64));
          CFCalendarAddComponents(v9, at, 0, "E", 6);
          CFCalendarAddComponents(v9, at, 0, "d", 1);
          CFCalendarDecomposeAbsoluteTime(v9, at[0], "yEw", (char *)&v64 + 4, &v62, &v61);
LABEL_102:
          v51 = v62;
LABEL_105:
          v52 = HIDWORD(v64);
          v53 = v61;
          goto LABEL_68;
        }
        if (CFStringFind(a2, CFSTR("Week"), 0).location != -1)
        {
          v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_NEXT_WEEKS"), v20);
          QP::DatePeriod::setDisplayKey((const void **)a4, v58);
          v24 = v49;
          v23 = v50;
          v25 = v13;
          *((_DWORD *)a4 + 2) = 83;
          HIDWORD(v75) = v61;
          v76 = HIDWORD(v64);
          CFCalendarAddComponents(v9, at, 0, "w", v20);
          CFCalendarDecomposeAbsoluteTime(v9, at[0], "yw", (char *)&v64 + 4, &v61);
          goto LABEL_105;
        }
        if (CFStringFind(a2, CFSTR("Month"), 0).location != -1)
        {
          v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_NEXT_MONTHS"), v20);
          QP::DatePeriod::setDisplayKey((const void **)a4, v58);
          *((_DWORD *)a4 + 2) = 84;
          *(_QWORD *)&v74 = v64;
          CFCalendarAddComponents(v9, at, 0, "M", v20);
          CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v64 + 4, &v64, &v63);
LABEL_121:
          v68 = v64;
LABEL_130:
          v67 = HIDWORD(v64);
          goto LABEL_144;
        }
        if (CFStringFind(a2, CFSTR("Year"), 0).location != -1)
        {
          v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_NEXT_YEARS"), v20);
          QP::DatePeriod::setDisplayKey((const void **)a4, v58);
          *((_DWORD *)a4 + 2) = 85;
          DWORD1(v74) = HIDWORD(v64);
          CFCalendarAddComponents(v9, at, 0, "y", v20);
          CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v64 + 4, &v64, &v63);
          goto LABEL_130;
        }
LABEL_145:
        v4 = 1;
        v24 = v49;
        v23 = v50;
        v21 = v15;
        goto LABEL_146;
      }
      return 0;
    }
    v21 = v15;
    if (CFStringHasSuffix(a2, CFSTR("Date")))
    {
      if ((v20 & 0x80000000) == 0)
      {
        v51 = v18;
        if (CFStringFind(a2, CFSTR("Seconds"), 0).location != -1)
        {
          v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_SECONDS"), v20);
          QP::DatePeriod::setDisplayKey((const void **)a4, v58);
          v24 = v49;
          v23 = v50;
          v25 = v13;
          *((_DWORD *)a4 + 2) = 67;
          CFCalendarAddComponents(v9, at, 0, "s", v20);
          CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMdHms", (char *)&v64 + 4, &v64, &v63, (char *)&v60 + 4, &v60, &v59);
LABEL_67:
          *(_QWORD *)&v74 = v64;
          HIDWORD(v73) = v63;
          LODWORD(v73) = v59;
          *(_QWORD *)((char *)&v73 + 4) = v60;
          goto LABEL_68;
        }
        if (CFStringFind(a2, CFSTR("Minute"), 0).location != -1)
        {
          v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_MINUTES"), v20);
          QP::DatePeriod::setDisplayKey((const void **)a4, v58);
          v24 = v49;
          v23 = v50;
          v25 = v13;
          *((_DWORD *)a4 + 2) = 68;
          CFCalendarAddComponents(v9, at, 0, "m", v20);
          CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMdHms", (char *)&v64 + 4, &v64, &v63, (char *)&v60 + 4, &v60, &v59);
          goto LABEL_67;
        }
        if (CFStringFind(a2, CFSTR("Hour"), 0).location != -1)
        {
          v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_HOURS"), v20);
          QP::DatePeriod::setDisplayKey((const void **)a4, v58);
          v24 = v49;
          v23 = v50;
          v25 = v13;
          *((_DWORD *)a4 + 2) = 69;
          CFCalendarAddComponents(v9, at, 0, "H", v20);
          CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMdHms", (char *)&v64 + 4, &v64, &v63, (char *)&v60 + 4, &v60, &v59);
          goto LABEL_67;
        }
        if (CFStringFind(a2, CFSTR("Day"), 0).location != -1)
        {
          v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_DAYS"), v20);
          QP::DatePeriod::setDisplayKey((const void **)a4, v58);
          v24 = v49;
          v23 = v50;
          v25 = v13;
          *((_DWORD *)a4 + 2) = 70;
          CFCalendarAddComponents(v9, at, 0, "d", v20);
          CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v64 + 4, &v64, &v63);
          goto LABEL_88;
        }
        if (CFStringFind(a2, CFSTR("Weekend"), 0).location != -1)
        {
          v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_WEEKENDS"), v20);
          QP::DatePeriod::setDisplayKey((const void **)a4, v58);
          v24 = v49;
          v23 = v50;
          v25 = v13;
          *((_DWORD *)a4 + 2) = 71;
          CFCalendarComposeAbsoluteTime(v9, at, "wY", v61 + v20, HIDWORD(v64));
          CFCalendarAddComponents(v9, at, 0, "E", 6);
          CFCalendarDecomposeAbsoluteTime(v9, at[0], "yEw", (char *)&v64 + 4, &v62, &v61);
          LODWORD(v75) = v62;
          HIDWORD(v75) = v61;
          v76 = HIDWORD(v64);
          CFCalendarAddComponents(v9, at, 0, "d", 1);
          CFCalendarDecomposeAbsoluteTime(v9, at[0], "yEw", (char *)&v64 + 4, &v62, &v61);
          goto LABEL_102;
        }
        if (CFStringFind(a2, CFSTR("Week"), 0).location != -1)
        {
          v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_WEEKS"), v20);
          QP::DatePeriod::setDisplayKey((const void **)a4, v58);
          *((_DWORD *)a4 + 2) = 72;
          CFCalendarAddComponents(v9, at, 0, "w", v20);
          CFCalendarDecomposeAbsoluteTime(v9, at[0], "wyMd", &v61, (char *)&v64 + 4, &v64, &v63);
          v42 = v61;
          goto LABEL_143;
        }
        if (CFStringFind(a2, CFSTR("Month"), 0).location != -1)
        {
          v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_MONTHS"), v20);
          QP::DatePeriod::setDisplayKey((const void **)a4, v58);
          *((_DWORD *)a4 + 2) = 73;
          CFCalendarAddComponents(v9, at, 0, "M", v20);
          CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v64 + 4, &v64, &v63);
          goto LABEL_127;
        }
        if (CFStringFind(a2, CFSTR("Year"), 0).location == -1)
          goto LABEL_145;
        v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_YEARS"), v20);
        QP::DatePeriod::setDisplayKey((const void **)a4, v58);
        *((_DWORD *)a4 + 2) = 74;
        CFCalendarAddComponents(v9, at, 0, "y", v20);
        CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v64 + 4, &v64, &v63);
LABEL_151:
        DWORD1(v74) = HIDWORD(v64);
        goto LABEL_144;
      }
      return 0;
    }
    v51 = v18;
    goto LABEL_33;
  }
  v51 = v18;
  if (!CFStringHasPrefix(a2, CFSTR("Num")))
  {
    if (!CFStringHasPrefix(a2, CFSTR("Compound")))
    {
      if (!CFStringHasPrefix(a2, CFSTR("RelativeEnd")))
        goto LABEL_145;
      QP::DatePeriod::setDisplayKey((const void **)a4, CFSTR("FORMATTED"));
      *((_DWORD *)a4 + 2) = 2;
      v33 = *((_QWORD *)this + 1);
      v54[0] = *(_QWORD *)this;
      v54[1] = v33;
      if (v33)
      {
        v34 = (unint64_t *)(v33 + 8);
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      updated = QP::updateDateComponentsWithValues((uint64_t)v54, (SInt32 *)&v73, a3, 0);
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v54);
      v21 = v15;
      if ((updated & 1) == 0)
      {
        v4 = 0;
        goto LABEL_34;
      }
      if (CFStringHasPrefix(a2, CFSTR("RelativeEndIsoMonth")))
      {
        CFCalendarComposeAbsoluteTime(v9, at, "My", v74, HIDWORD(v64));
        v4 = 1;
        CFCalendarAddComponents(v9, at, 0, "M", 1);
        CFCalendarAddComponents(v9, at, 0, "d", 0xFFFFFFFFLL);
        CFCalendarDecomposeAbsoluteTime(v9, at[0], "dMy", &v63, &v64, (char *)&v64 + 4);
        HIDWORD(v73) = v63;
        *(_QWORD *)&v74 = v64;
        goto LABEL_34;
      }
      if (CFStringHasPrefix(a2, CFSTR("RelativeEndIsoDay")))
      {
        CFCalendarComposeAbsoluteTime(v9, at, "My", v64, HIDWORD(v64));
        CFCalendarAddComponents(v9, at, 0, "M", 1);
        CFCalendarDecomposeAbsoluteTime(v9, at[0], "E", &v62);
        if ((int)v75 >= v62)
        {
          v25 = v13;
          v24 = v49;
          v23 = v50;
          if ((int)v75 > v62)
          {
            RangeOfUnit = CFCalendarGetRangeOfUnit(v9, 0x200uLL, 8uLL, at[0]);
            CFCalendarAddComponents(v9, at, 0, "E", -(uint64_t)v62 - (RangeOfUnit.length - (int)v75));
          }
        }
        else
        {
          CFCalendarAddComponents(v9, at, 0, "E", (v75 - v62));
          v25 = v13;
          v24 = v49;
          v23 = v50;
        }
        CFCalendarDecomposeAbsoluteTime(v9, at[0], "wY", &v61, (char *)&v64 + 4);
        HIDWORD(v75) = v61;
        v76 = HIDWORD(v64);
        DWORD1(v75) = 0x7FFFFFFF;
        goto LABEL_69;
      }
      goto LABEL_33;
    }
    if (CFStringFind(a2, CFSTR("Day"), 0).location == -1)
    {
      if (CFStringFind(a2, CFSTR("Month"), 0).location != -1)
      {
        QP::DatePeriod::setDisplayKey((const void **)a4, CFSTR("FORMATTED"));
        *((_DWORD *)a4 + 2) = 2;
        v37 = *((_QWORD *)this + 1);
        v55[0] = *(_QWORD *)this;
        v55[1] = v37;
        v23 = v50;
        if (v37)
        {
          v38 = (unint64_t *)(v37 + 8);
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        v40 = QP::updateDateComponentsWithValues((uint64_t)v55, (SInt32 *)&v73, a3, 0);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v55);
        v21 = v15;
        if ((v40 & 1) != 0)
        {
          *(_QWORD *)&v74 = v64;
          v4 = 1;
        }
        else
        {
          v4 = 0;
        }
        v25 = v13;
        v24 = v49;
        goto LABEL_147;
      }
      goto LABEL_145;
    }
    QP::DatePeriod::setDisplayKey((const void **)a4, CFSTR("FORMATTED"));
    *((_DWORD *)a4 + 2) = 2;
    v28 = *((_QWORD *)this + 1);
    v56[0] = *(_QWORD *)this;
    v56[1] = v28;
    if (v28)
    {
      v29 = (unint64_t *)(v28 + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v31 = QP::updateDateComponentsWithValues((uint64_t)v56, (SInt32 *)&v73, a3, 0);
    v24 = v49;
    v23 = v50;
    v32 = v31;
    v21 = v15;
    std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v56);
    if ((v32 & 1) == 0)
    {
      v4 = 0;
LABEL_146:
      v25 = v13;
      goto LABEL_147;
    }
    HIDWORD(v73) = v63;
    *(_QWORD *)&v74 = v64;
    LODWORD(v75) = -1;
LABEL_77:
    v4 = 1;
    goto LABEL_146;
  }
  HasSuffix = CFStringHasSuffix(a2, CFSTR("RangeDate"));
  location = CFStringFind(a2, CFSTR("Second"), 0).location;
  if (!HasSuffix)
  {
    if (location == -1)
    {
      if (CFStringFind(a2, CFSTR("Minute"), 0).location == -1)
      {
        if (CFStringFind(a2, CFSTR("Hour"), 0).location == -1)
        {
          if (CFStringFind(a2, CFSTR("Day"), 0).location == -1)
          {
            if (CFStringFind(a2, CFSTR("Weekend"), 0).location != -1)
            {
              v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_WEEKENDS_AGO"), v20);
              QP::DatePeriod::setDisplayKey((const void **)a4, v58);
              v24 = v49;
              v23 = v50;
              *((_DWORD *)a4 + 2) = 35;
              if ((v20 & 0x80000000) == 0)
              {
                v21 = v15;
                CFCalendarComposeAbsoluteTime(v9, at, "wY", v61 - v20, HIDWORD(v64));
                CFCalendarAddComponents(v9, at, 0, "E", 6);
                CFCalendarDecomposeAbsoluteTime(v9, at[0], "yEw", (char *)&v64 + 4, &v62, &v61);
                LODWORD(v75) = v62;
                HIDWORD(v75) = v61;
                v76 = HIDWORD(v64);
                CFCalendarAddComponents(v9, at, 0, "d", 1);
                CFCalendarDecomposeAbsoluteTime(v9, at[0], "yEw", (char *)&v64 + 4, &v62, &v61);
                v53 = v61;
                v51 = v62;
                v52 = HIDWORD(v64);
                nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v58, 0);
                v4 = 1;
                v25 = v13;
                goto LABEL_147;
              }
              goto LABEL_135;
            }
            if (CFStringFind(a2, CFSTR("Week"), 0).location != -1)
            {
              v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_WEEKS_AGO"), v20);
              QP::DatePeriod::setDisplayKey((const void **)a4, v58);
              *((_DWORD *)a4 + 2) = 36;
              if ((v20 & 0x80000000) == 0)
              {
                if (*(_DWORD *)(*(_QWORD *)this + 40) == 1 && (int)v75 <= 0)
                {
                  CFCalendarAddComponents(v9, at, 0, "dw", 0xFFFFFFFFLL, -(int)v20);
                  CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v64 + 4, &v64, &v63);
                  HIDWORD(v73) = v63;
                  *(_QWORD *)&v74 = v64;
                  CFCalendarAddComponents(v9, at, 0, "d", 2);
                  CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v64 + 4, &v64, &v63);
                  v15 = v63;
                  goto LABEL_121;
                }
                v57 = 0;
                CFCalendarDecomposeAbsoluteTime(v9, at[0], "w", &v57);
                v42 = v57 - v20;
LABEL_143:
                HIDWORD(v75) = v42;
                v76 = HIDWORD(v64);
                goto LABEL_144;
              }
              goto LABEL_135;
            }
            v43 = (int *)&v74 + 1;
            if (CFStringFind(a2, CFSTR("Month"), 0).location == -1)
            {
              if (CFStringFind(a2, CFSTR("Year"), 0).location == -1)
                goto LABEL_145;
              v4 = 0;
              if (SHIDWORD(v64) < (int)v20 || (v20 & 0x80000000) != 0 || HIDWORD(v64) - (int)v20 < HIDWORD(v64) - 1970)
                return v4;
              v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_YEARS_AGO"), v20);
              QP::DatePeriod::setDisplayKey((const void **)a4, v58);
              *((_DWORD *)a4 + 2) = 38;
              if (*(_DWORD *)(*(_QWORD *)this + 40) == 1 && (int)v74 <= 0)
              {
                CFCalendarAddComponents(v9, at, 0, "dy", 4294967293, -(int)v20);
                CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v64 + 4, &v64, &v63);
                HIDWORD(v73) = v63;
                *(_QWORD *)&v74 = v64;
                CFCalendarAddComponents(v9, at, 0, "d", 6);
                CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v64 + 4, &v64, &v63);
                v15 = v63;
                v68 = v64;
                v43 = &v67;
              }
              else
              {
                CFCalendarAddComponents(v9, at, 0, "dM", (1 - v63), (1 - v64));
                CFCalendarAddComponents(v9, at, 0, "y", -(int)v20);
                if ((int)v74 >= 2)
                  CFCalendarAddComponents(v9, at, 0, "M", (v74 - 1));
                CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v64 + 4, &v64, &v63);
              }
            }
            else
            {
              v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_MONTHS_AGO"), v20);
              QP::DatePeriod::setDisplayKey((const void **)a4, v58);
              *((_DWORD *)a4 + 2) = 37;
              if ((v20 & 0x80000000) != 0)
                goto LABEL_135;
              if (*(_DWORD *)(*(_QWORD *)this + 40) == 1)
              {
                CFCalendarAddComponents(v9, at, 0, "dM", 4294967293, -(int)v20);
                CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v64 + 4, &v64, &v63);
                HIDWORD(v73) = v63;
                *(_QWORD *)&v74 = v64;
                CFCalendarAddComponents(v9, at, 0, "d", 6);
                CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v64 + 4, &v64, &v63);
                v43 = &v67;
                v44 = (__int128 *)&v68;
                v15 = v63;
              }
              else
              {
                CFCalendarAddComponents(v9, at, 0, "dM", (1 - v63), -(int)v20);
                CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v64 + 4, &v64, &v63);
                v44 = &v74;
              }
              *(_DWORD *)v44 = v64;
            }
            *v43 = HIDWORD(v64);
            goto LABEL_144;
          }
          v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_DAYS_AGO"), v20);
          QP::DatePeriod::setDisplayKey((const void **)a4, v58);
          v24 = v49;
          v23 = v50;
          *((_DWORD *)a4 + 2) = 34;
          if ((v20 & 0x80000000) != 0)
            goto LABEL_135;
          v21 = v15;
          CFCalendarAddComponents(v9, at, 0, "d", -(int)v20);
          CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v64 + 4, &v64, &v63);
          HIDWORD(v73) = v63;
          *(_QWORD *)&v74 = v64;
          goto LABEL_76;
        }
        v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_HOURS_AGO"), v20);
        QP::DatePeriod::setDisplayKey((const void **)a4, v58);
        v24 = v49;
        v23 = v50;
        *((_DWORD *)a4 + 2) = 33;
        if ((v20 & 0x80000000) != 0)
          goto LABEL_135;
        v21 = v15;
        CFCalendarAddComponents(v9, at, 0, "H", -(int)v20);
        CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMdHms", (char *)&v64 + 4, &v64, &v63, (char *)&v60 + 4, &v60, &v59);
      }
      else
      {
        v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_MINUTES_AGO"), v20);
        QP::DatePeriod::setDisplayKey((const void **)a4, v58);
        v24 = v49;
        v23 = v50;
        *((_DWORD *)a4 + 2) = 32;
        if ((v20 & 0x80000000) != 0)
          goto LABEL_135;
        v21 = v15;
        CFCalendarAddComponents(v9, at, 0, "m", -(int)v20);
        CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMdHms", (char *)&v64 + 4, &v64, &v63, (char *)&v60 + 4, &v60, &v59);
      }
    }
    else
    {
      v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_SECONDS_AGO"), v20);
      QP::DatePeriod::setDisplayKey((const void **)a4, v58);
      v24 = v49;
      v23 = v50;
      *((_DWORD *)a4 + 2) = 31;
      if ((v20 & 0x80000000) != 0)
        goto LABEL_135;
      v21 = v15;
      CFCalendarAddComponents(v9, at, 0, "s", -(int)v20);
      CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMdHms", (char *)&v64 + 4, &v64, &v63, (char *)&v60 + 4, &v60, &v59);
    }
    LODWORD(v73) = v59;
    *(_QWORD *)((char *)&v73 + 4) = v60;
    HIDWORD(v73) = v63;
    *(_QWORD *)&v74 = v64;
LABEL_76:
    nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v58, 0);
    goto LABEL_77;
  }
  if (location != -1)
  {
    v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_LAST_SECONDS"), v20);
    QP::DatePeriod::setDisplayKey((const void **)a4, v58);
    *((_DWORD *)a4 + 2) = 42;
    if ((v20 & 0x80000000) == 0)
    {
      v25 = v59;
      v23 = v60;
      v24 = HIDWORD(v60);
      v21 = v63;
      v67 = HIDWORD(v64);
      v68 = v64;
      CFCalendarAddComponents(v9, at, 0, "s", -(int)v20);
      CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMdHms", (char *)&v64 + 4, &v64, &v63, (char *)&v60 + 4, &v60, &v59);
LABEL_63:
      LODWORD(v73) = v59;
      *(_QWORD *)((char *)&v73 + 4) = v60;
      HIDWORD(v73) = v63;
      *(_QWORD *)&v74 = v64;
      goto LABEL_68;
    }
    goto LABEL_135;
  }
  if (CFStringFind(a2, CFSTR("Minute"), 0).location != -1)
  {
    v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_LAST_MINUTES"), v20);
    QP::DatePeriod::setDisplayKey((const void **)a4, v58);
    *((_DWORD *)a4 + 2) = 43;
    if ((v20 & 0x80000000) == 0)
    {
      v25 = v59;
      v23 = v60;
      v24 = HIDWORD(v60);
      v21 = v63;
      v67 = HIDWORD(v64);
      v68 = v64;
      CFCalendarAddComponents(v9, at, 0, "m", -(int)v20);
      CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMdHms", (char *)&v64 + 4, &v64, &v63, (char *)&v60 + 4, &v60, &v59);
      goto LABEL_63;
    }
LABEL_135:
    nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v58, 0);
    return 0;
  }
  if (CFStringFind(a2, CFSTR("Hour"), 0).location != -1)
  {
    v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_LAST_HOURS"), v20);
    QP::DatePeriod::setDisplayKey((const void **)a4, v58);
    *((_DWORD *)a4 + 2) = 44;
    if ((v20 & 0x80000000) == 0)
    {
      v25 = v59;
      v23 = v60;
      v24 = HIDWORD(v60);
      v21 = v63;
      v67 = HIDWORD(v64);
      v68 = v64;
      CFCalendarAddComponents(v9, at, 0, "H", -(int)v20);
      CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMdHms", (char *)&v64 + 4, &v64, &v63, (char *)&v60 + 4, &v60, &v59);
      goto LABEL_63;
    }
    goto LABEL_135;
  }
  if (CFStringFind(a2, CFSTR("Day"), 0).location != -1)
  {
    v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_LAST_DAYS"), v20);
    QP::DatePeriod::setDisplayKey((const void **)a4, v58);
    v24 = v49;
    v23 = v50;
    *((_DWORD *)a4 + 2) = 45;
    if ((v20 & 0x80000000) == 0)
    {
      v25 = v13;
      v21 = v63;
      v67 = HIDWORD(v64);
      v68 = v64;
      CFCalendarAddComponents(v9, at, 0, "d", -(int)v20);
      CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v64 + 4, &v64, &v63);
LABEL_88:
      HIDWORD(v73) = v63;
      *(_QWORD *)&v74 = v64;
      goto LABEL_68;
    }
    goto LABEL_135;
  }
  if (CFStringFind(a2, CFSTR("Weekend"), 0).location != -1)
  {
    v21 = v15;
    v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_LAST_WEEKENDS"), v20);
    QP::DatePeriod::setDisplayKey((const void **)a4, v58);
    v24 = v49;
    v23 = v50;
    *((_DWORD *)a4 + 2) = 46;
    if ((v20 & 0x80000000) == 0)
    {
      v25 = v13;
      CFCalendarComposeAbsoluteTime(v9, at, "wY", v61, HIDWORD(v64));
      CFCalendarAddComponents(v9, at, 0, "E", 6);
      CFCalendarAddComponents(v9, at, 0, "d", 1);
      CFCalendarDecomposeAbsoluteTime(v9, at[0], "yEw", (char *)&v64 + 4, &v62, &v61);
      v53 = v61;
      v51 = v62;
      v52 = HIDWORD(v64);
      CFCalendarAddComponents(v9, at, 0, "w", -(int)v20);
      CFCalendarAddComponents(v9, at, 0, "E", 6);
      CFCalendarDecomposeAbsoluteTime(v9, at[0], "yEw", (char *)&v64 + 4, &v62, &v61);
      LODWORD(v75) = v62;
      HIDWORD(v75) = v61;
      v76 = HIDWORD(v64);
      goto LABEL_68;
    }
    goto LABEL_135;
  }
  if (CFStringFind(a2, CFSTR("Week"), 0).location != -1)
  {
    v21 = v15;
    v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_LAST_WEEKS"), v20);
    QP::DatePeriod::setDisplayKey((const void **)a4, v58);
    *((_DWORD *)a4 + 2) = 47;
    if ((v20 & 0x80000000) != 0)
      goto LABEL_135;
    CFCalendarComposeAbsoluteTime(v9, at, "wY", v61, HIDWORD(v64));
    CFCalendarDecomposeAbsoluteTime(v9, at[0], "yEw", (char *)&v64 + 4, &v62, &v61);
    v52 = HIDWORD(v64);
    v53 = v61;
    CFCalendarAddComponents(v9, at, 0, "w", -(int)v20);
    CFCalendarDecomposeAbsoluteTime(v9, at[0], "yEw", (char *)&v64 + 4, &v62, &v61);
    HIDWORD(v75) = v61;
    v76 = HIDWORD(v64);
    nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v58, 0);
LABEL_33:
    v4 = 1;
LABEL_34:
    v25 = v13;
    v24 = v49;
    v23 = v50;
LABEL_147:
    v45 = v74;
    *(_OWORD *)((char *)a4 + 20) = v73;
    *(_OWORD *)((char *)a4 + 36) = v45;
    *(_OWORD *)((char *)a4 + 52) = v75;
    *((_DWORD *)a4 + 17) = v76;
    *((_DWORD *)a4 + 18) = v25;
    *((_DWORD *)a4 + 19) = v23;
    *((_DWORD *)a4 + 20) = v24;
    *((_DWORD *)a4 + 21) = v21;
    v46 = v67;
    *((_DWORD *)a4 + 22) = v68;
    *((_DWORD *)a4 + 23) = v46;
    *((_QWORD *)a4 + 12) = v66;
    *((_DWORD *)a4 + 26) = v51;
    *(_QWORD *)((char *)a4 + 108) = v65;
    *((_DWORD *)a4 + 29) = v53;
    *((_DWORD *)a4 + 30) = v52;
    *((_DWORD *)a4 + 43) = v72;
    v47 = v71;
    *(_OWORD *)((char *)a4 + 140) = v70;
    *(_OWORD *)((char *)a4 + 156) = v47;
    *(_OWORD *)((char *)a4 + 124) = v69;
    return v4;
  }
  if (CFStringFind(a2, CFSTR("Month"), 0).location != -1)
  {
    v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_LAST_MONTHS"), v20);
    QP::DatePeriod::setDisplayKey((const void **)a4, v58);
    *((_DWORD *)a4 + 2) = 48;
    if ((v20 & 0x80000000) == 0)
    {
      v67 = HIDWORD(v64);
      v68 = v64;
      CFCalendarAddComponents(v9, at, 0, "dM", (1 - v63), -(int)v20);
      CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v64 + 4, &v64, &v63);
LABEL_127:
      *(_QWORD *)&v74 = v64;
LABEL_144:
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v58, 0);
      goto LABEL_145;
    }
    goto LABEL_135;
  }
  if (CFStringFind(a2, CFSTR("Year"), 0).location == -1)
    goto LABEL_145;
  v4 = 0;
  if (SHIDWORD(v64) >= (int)v20 && (v20 & 0x80000000) == 0 && HIDWORD(v64) - (int)v20 >= HIDWORD(v64) - 1970)
  {
    v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_LAST_YEARS"), v20);
    QP::DatePeriod::setDisplayKey((const void **)a4, v58);
    *((_DWORD *)a4 + 2) = 49;
    v67 = HIDWORD(v64);
    CFCalendarAddComponents(v9, at, 0, "dMy", (1 - v63), (1 - v64), -(int)v20);
    CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v64 + 4, &v64, &v63);
    goto LABEL_151;
  }
  return v4;
}

void sub_218E7E814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,const void *a27)
{
  nlp::CFScopedPtr<__CFString const*>::reset(&a27, 0);
  _Unwind_Resume(a1);
}

const void ***QP::DateConverter::datePeriodForRelativeDate@<X0>(const void ***this@<X0>, CFStringRef theString@<X1>, QP::DatePeriod **a3@<X8>)
{
  QP::DateConverter *v5;
  uint64_t v6;
  __int128 v7;
  QP::DatePeriod *v8;
  QP::DatePeriod *v9;

  if (theString && (v5 = (QP::DateConverter *)this, (this = (const void ***)CFStringGetLength(theString)) != 0))
  {
    v6 = operator new();
    *(_QWORD *)v6 = 0;
    *(_DWORD *)(v6 + 8) = 0;
    *(_WORD *)(v6 + 12) = 0;
    *(_DWORD *)(v6 + 16) = 0;
    *(_QWORD *)&v7 = -1;
    *((_QWORD *)&v7 + 1) = -1;
    *(_OWORD *)(v6 + 20) = v7;
    *(_OWORD *)(v6 + 36) = v7;
    *(_OWORD *)(v6 + 52) = v7;
    *(_OWORD *)(v6 + 68) = v7;
    *(_OWORD *)(v6 + 84) = v7;
    *(_OWORD *)(v6 + 100) = v7;
    *(_OWORD *)(v6 + 116) = v7;
    *(_OWORD *)(v6 + 132) = v7;
    *(_OWORD *)(v6 + 148) = v7;
    *(_OWORD *)(v6 + 160) = v7;
    v9 = (QP::DatePeriod *)v6;
    if ((QP::DateConverter::updatePeriodForRelativeDate(v5, theString, (QP::DatePeriod *)v6) & 1) != 0
      && QP::DateConverter::isValid(v5, v9))
    {
      v8 = v9;
      v9 = 0;
    }
    else
    {
      v8 = 0;
    }
    *a3 = v8;
    return std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&v9, 0);
  }
  else
  {
    *a3 = 0;
  }
  return this;
}

void sub_218E7EA4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)va, 0);
  _Unwind_Resume(a1);
}

uint64_t QP::DateConverter::updatePeriodForRelativeDate(QP::DateConverter *this, const __CFString *a2, QP::DatePeriod *a3)
{
  uint64_t result;
  _QWORD *v5;
  __CFCalendar *v6;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  const __CFDate *v13;
  double CurrentTime;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  CFStringRef v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  double AbsoluteTime;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  int v66;
  const __CFString *v67;
  const void *v68;
  CFAbsoluteTime at;
  _BYTE v70[12];
  unsigned int v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  __int128 v75;
  int v76;
  __int128 v77;
  __int128 v78;
  _BYTE v79[32];
  __int128 v80;
  unsigned int v81;

  result = 0;
  if (a2)
  {
    v5 = *(_QWORD **)this;
    if (*(_QWORD *)this)
    {
      if (!v5[13])
        return 0;
      v6 = (__CFCalendar *)v5[11];
      if (!v6)
        return 0;
      v9 = *(_OWORD *)((char *)a3 + 20);
      v10 = *(_OWORD *)((char *)a3 + 52);
      *(_OWORD *)&v79[16] = *(_OWORD *)((char *)a3 + 36);
      v80 = v10;
      v81 = *((_DWORD *)a3 + 17);
      v11 = *(_OWORD *)((char *)a3 + 88);
      v77 = *(_OWORD *)((char *)a3 + 72);
      v78 = v11;
      *(_OWORD *)v79 = v9;
      v65 = *((_DWORD *)a3 + 26);
      v57 = *(_QWORD *)((char *)a3 + 108);
      v63 = *((_DWORD *)a3 + 30);
      v64 = *((_DWORD *)a3 + 29);
      v12 = *((_DWORD *)a3 + 31);
      v66 = *((_DWORD *)a3 + 32);
      v61 = *((_DWORD *)a3 + 34);
      v62 = *((_DWORD *)a3 + 33);
      v58 = *((_DWORD *)a3 + 36);
      v59 = *((_DWORD *)a3 + 35);
      v75 = *(_OWORD *)((char *)a3 + 148);
      v60 = *((_DWORD *)a3 + 42);
      v76 = *((_DWORD *)a3 + 41);
      v55 = v12;
      v56 = *((_DWORD *)a3 + 43);
      v74 = -1;
      v72 = -1;
      v73 = -1;
      v71 = -1;
      memset(v70, 255, sizeof(v70));
      v13 = (const __CFDate *)v5[9];
      CurrentTime = getCurrentTime(v6, v13);
      at = CurrentTime;
      CFCalendarDecomposeAbsoluteTime(v6, CurrentTime, "yMdEwHms", &v74, (char *)&v73 + 4, &v73, &v72, &v71, &v70[8], &v70[4], v70);
      v15 = *(unsigned __int8 *)(*(_QWORD *)this + 27);
      v16 = *(unsigned __int8 *)(*(_QWORD *)this + 26);
      if (CFStringHasPrefix(a2, CFSTR("RelativeNow")))
      {
        *((_DWORD *)a3 + 2) = 6;
        QP::DatePeriod::setDisplayKey((const void **)a3, CFSTR("NOW"));
        *(_QWORD *)v79 = *(_QWORD *)v70;
        *(_DWORD *)&v79[8] = *(_DWORD *)&v70[8];
        *(_DWORD *)&v79[12] = v73;
LABEL_7:
        *(_DWORD *)&v79[16] = HIDWORD(v73);
        *(_DWORD *)&v79[20] = v74;
LABEL_8:
        v17 = v55;
LABEL_91:
        v42 = *(_OWORD *)&v79[16];
        v43 = v80;
        *(_OWORD *)((char *)a3 + 20) = *(_OWORD *)v79;
        *(_OWORD *)((char *)a3 + 36) = v42;
        *(_OWORD *)((char *)a3 + 52) = v43;
        *((_DWORD *)a3 + 17) = v81;
        v44 = v78;
        *(_OWORD *)((char *)a3 + 72) = v77;
        *(_OWORD *)((char *)a3 + 88) = v44;
        *((_DWORD *)a3 + 26) = v65;
        *(_QWORD *)((char *)a3 + 108) = v57;
        *((_DWORD *)a3 + 29) = v64;
        *((_DWORD *)a3 + 30) = v63;
        *((_DWORD *)a3 + 31) = v17;
        *((_DWORD *)a3 + 32) = v66;
        *((_DWORD *)a3 + 33) = v62;
        *((_DWORD *)a3 + 34) = v61;
        *((_DWORD *)a3 + 35) = v59;
        *((_DWORD *)a3 + 36) = v58;
        *((_DWORD *)a3 + 41) = v76;
        *(_OWORD *)((char *)a3 + 148) = v75;
        result = 1;
        *((_DWORD *)a3 + 42) = v60;
        *((_DWORD *)a3 + 43) = v56;
        return result;
      }
      if (CFStringHasPrefix(a2, CFSTR("RelativeEvery")))
      {
        if (CFStringHasPrefix(a2, CFSTR("RelativeEveryTwo")))
        {
          v18 = 2;
        }
        else
        {
          if (!CFStringHasPrefix(a2, CFSTR("RelativeEveryThree")))
          {
            v18 = 1;
            v20 = 91;
            v21 = 92;
            v22 = 93;
            v23 = 94;
            v53 = 97;
            v54 = 95;
            v51 = 99;
            v52 = 98;
            v24 = 100;
LABEL_19:
            v50 = v24;
            v68 = 0;
            if (CFStringFind(a2, CFSTR("Second"), 0).location != -1)
            {
              v25 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_EVERY_SECOND"), v18);
              v67 = v25;
              QP::DatePeriod::setDisplayKey((const void **)a3, v25);
              *((_DWORD *)a3 + 2) = v20;
              *(_DWORD *)&v79[20] = v74;
              *(_QWORD *)&v79[12] = v73;
              *(_DWORD *)v79 = *(_DWORD *)v70;
              *(_QWORD *)&v79[4] = *(_QWORD *)&v70[4];
              if (v25)
                CFRelease(v25);
              goto LABEL_90;
            }
            if (CFStringFind(a2, CFSTR("Minute"), 0).location == -1)
            {
              if (CFStringFind(a2, CFSTR("Hour"), 0).location == -1)
              {
                if (CFStringFind(a2, CFSTR("Day"), 0).location == -1)
                {
                  if (CFStringFind(a2, CFSTR("Weekday"), 0).location == -1)
                  {
                    if (CFStringFind(a2, CFSTR("Weekend"), 0).location == -1)
                    {
                      if (CFStringFind(a2, CFSTR("Week"), 0).location == -1)
                      {
                        if (CFStringFind(a2, CFSTR("Month"), 0).location == -1)
                        {
                          if (CFStringFind(a2, CFSTR("Year"), 0).location != -1)
                          {
                            v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_EVERY_YEAR"), v18);
                            QP::DatePeriod::setDisplayKey((const void **)a3, v67);
                            *((_DWORD *)a3 + 2) = v50;
                            *(_DWORD *)&v79[20] = v74;
                            nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v67, 0);
                            v58 = v18;
                          }
                        }
                        else
                        {
                          v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_EVERY_MONTH"), v18);
                          QP::DatePeriod::setDisplayKey((const void **)a3, v67);
                          *((_DWORD *)a3 + 2) = v51;
                          *(_DWORD *)&v79[16] = HIDWORD(v73);
                          *(_DWORD *)&v79[20] = v74;
                          nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v67, 0);
                          v59 = v18;
                        }
                      }
                      else
                      {
                        v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_EVERY_WEEK"), v18);
                        QP::DatePeriod::setDisplayKey((const void **)a3, v67);
                        *((_DWORD *)a3 + 2) = v52;
                        HIDWORD(v80) = v71;
                        v81 = v74;
                        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v67, 0);
                        v60 = v18;
                      }
                      goto LABEL_89;
                    }
                    v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_EVERY_WEEKEND"), v18);
                    QP::DatePeriod::setDisplayKey((const void **)a3, v67);
                    *((_DWORD *)a3 + 2) = v53;
                    CFCalendarComposeAbsoluteTime(v6, &at, "wY", v71, v74);
                    CFCalendarAddComponents(v6, &at, 0, "E", 6);
                    CFCalendarDecomposeAbsoluteTime(v6, at, "yEw", &v74, &v72, &v71);
                    LODWORD(v80) = v72;
                    HIDWORD(v80) = v71;
                    v81 = v74;
                    CFCalendarAddComponents(v6, &at, 0, "d", 1);
                    CFCalendarDecomposeAbsoluteTime(v6, at, "yEw", &v74, &v72, &v71);
                  }
                  else
                  {
                    v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_EVERY_WEEKDAY"), v18);
                    QP::DatePeriod::setDisplayKey((const void **)a3, v67);
                    *((_DWORD *)a3 + 2) = v54;
                    v38 = MEMORY[0x219A2437C](*(_QWORD *)(*(_QWORD *)this + 80));
                    CFCalendarComposeAbsoluteTime(v6, &at, "yEw", v74, 2, v71);
                    if (v16 && v38 < v72)
                      CFCalendarAddComponents(v6, &at, 0, "w", 1);
                    CFCalendarDecomposeAbsoluteTime(v6, at, "yEw", &v74, &v72, &v71);
                    LODWORD(v80) = v72;
                    HIDWORD(v80) = v71;
                    v81 = v74;
                    CFCalendarAddComponents(v6, &at, 0, "d", 4);
                    CFCalendarDecomposeAbsoluteTime(v6, at, "yEw", &v74, &v72, &v71);
                  }
                  v65 = v72;
                  v63 = v74;
                  v64 = v71;
                  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v67, 0);
                  v60 = v18;
                }
                else
                {
                  v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_EVERY_DAY"), v18);
                  QP::DatePeriod::setDisplayKey((const void **)a3, v67);
                  *((_DWORD *)a3 + 2) = v23;
                  *(_QWORD *)&v79[12] = v73;
                  *(_DWORD *)&v79[20] = v74;
                  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v67, 0);
                  v61 = v18;
                }
              }
              else
              {
                v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_EVERY_HOUR"), v18);
                QP::DatePeriod::setDisplayKey((const void **)a3, v67);
                *((_DWORD *)a3 + 2) = v22;
                *(_DWORD *)&v79[20] = v74;
                *(_DWORD *)&v79[8] = *(_DWORD *)&v70[8];
                *(_QWORD *)&v79[12] = v73;
                *(_DWORD *)v79 = *(_DWORD *)v70;
                *(_DWORD *)&v79[4] = *(_DWORD *)&v70[4];
                nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v67, 0);
                v62 = v18;
              }
            }
            else
            {
              v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_EVERY_MINUTE"), v18);
              QP::DatePeriod::setDisplayKey((const void **)a3, v67);
              *((_DWORD *)a3 + 2) = v21;
              *(_DWORD *)&v79[20] = v74;
              *(_QWORD *)&v79[12] = v73;
              *(_DWORD *)v79 = *(_DWORD *)v70;
              *(_QWORD *)&v79[4] = *(_QWORD *)&v70[4];
              nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v67, 0);
              v66 = v18;
            }
LABEL_89:
            LODWORD(v18) = v55;
LABEL_90:
            v17 = v18;
            goto LABEL_91;
          }
          v18 = 3;
        }
        v20 = 106;
        v21 = 107;
        v22 = 108;
        v23 = 109;
        v53 = 112;
        v54 = 110;
        v51 = 114;
        v52 = 113;
        v24 = 115;
        goto LABEL_19;
      }
      if (CFStringHasPrefix(a2, CFSTR("RelativeNext")))
      {
        if (CFStringHasPrefix(a2, CFSTR("RelativeNextTwo")))
        {
          v19 = 2;
        }
        else
        {
          if (!CFStringHasPrefix(a2, CFSTR("RelativeNextThree")))
          {
            v19 = 1;
            v26 = 55;
            v27 = 59;
            v28 = 60;
            v29 = 61;
            v30 = 62;
LABEL_30:
            v68 = 0;
            if (CFStringFind(a2, CFSTR("Second"), 0).location == -1)
            {
              if (CFStringFind(a2, CFSTR("Minute"), 0).location != -1)
              {
                v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_MINUTES"), v19);
                QP::DatePeriod::setDisplayKey((const void **)a3, v67);
                *((_DWORD *)a3 + 2) = 68;
                CFCalendarAddComponents(v6, &at, 0, "m", v19);
                CFCalendarDecomposeAbsoluteTime(v6, at, "yMdHms", &v74, (char *)&v73 + 4, &v73, &v70[8], &v70[4], v70);
                *(_DWORD *)&v79[20] = v74;
                *(_QWORD *)&v79[12] = v73;
                *(_QWORD *)&v79[4] = *(_QWORD *)&v70[4];
                goto LABEL_36;
              }
              if (CFStringFind(a2, CFSTR("Hour"), 0).location == -1)
              {
                if (CFStringFind(a2, CFSTR("Day"), 0).location == -1)
                {
                  if (CFStringFind(a2, CFSTR("Weekend"), 0).location == -1)
                  {
                    if (CFStringFind(a2, CFSTR("Week"), 0).location == -1)
                    {
                      if (CFStringFind(a2, CFSTR("Month"), 0).location == -1)
                      {
                        if (CFStringFind(a2, CFSTR("Year"), 0).location == -1)
                          goto LABEL_37;
                        v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_YEARS"), v19);
                        QP::DatePeriod::setDisplayKey((const void **)a3, v67);
                        *((_DWORD *)a3 + 2) = v30;
                        CFCalendarAddComponents(v6, &at, 0, "dMy", (1 - v73), (1 - HIDWORD(v73)), v19);
                        CFCalendarDecomposeAbsoluteTime(v6, at, "yMd", &v74, (char *)&v73 + 4, &v73);
                        *(_DWORD *)&v79[20] = v74;
                      }
                      else
                      {
                        v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_MONTHS"), v19);
                        QP::DatePeriod::setDisplayKey((const void **)a3, v67);
                        *((_DWORD *)a3 + 2) = v29;
                        CFCalendarDecomposeAbsoluteTime(v6, at, "yM", &v74, (char *)&v73 + 4);
                        *(_DWORD *)&v79[16] = HIDWORD(v73) + v19;
                        *(_DWORD *)&v79[20] = v74;
                      }
                    }
                    else
                    {
                      v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_WEEKS"), v19);
                      QP::DatePeriod::setDisplayKey((const void **)a3, v67);
                      *((_DWORD *)a3 + 2) = v28;
                      CFCalendarAddComponents(v6, &at, 0, "w", v19);
                      CFCalendarDecomposeAbsoluteTime(v6, at, "yEw", &v74, &v72, &v71);
                      HIDWORD(v80) = v71;
                      v81 = v74;
                    }
                  }
                  else
                  {
                    v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_WEEKENDS"), v19);
                    QP::DatePeriod::setDisplayKey((const void **)a3, v67);
                    *((_DWORD *)a3 + 2) = v27;
                    CFCalendarComposeAbsoluteTime(v6, &at, "wY", v71, v74);
                    CFCalendarAddComponents(v6, &at, 0, "w", v19);
                    CFCalendarAddComponents(v6, &at, 0, "E", 6);
                    CFCalendarDecomposeAbsoluteTime(v6, at, "yEw", &v74, &v72, &v71);
                    LODWORD(v80) = v72;
                    HIDWORD(v80) = v71;
                    v81 = v74;
                    CFCalendarAddComponents(v6, &at, 0, "d", 1);
                    CFCalendarDecomposeAbsoluteTime(v6, at, "yEw", &v74, &v72, &v71);
                    v65 = v72;
                    v63 = v74;
                    v64 = v71;
                  }
                }
                else
                {
                  v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_DAYS"), v19);
                  QP::DatePeriod::setDisplayKey((const void **)a3, v67);
                  *((_DWORD *)a3 + 2) = v26;
                  CFCalendarAddComponents(v6, &at, 0, "d", v19);
                  CFCalendarDecomposeAbsoluteTime(v6, at, "yMdHms", &v74, (char *)&v73 + 4, &v73, &v70[8], &v70[4], v70);
                  *(_DWORD *)&v79[20] = v74;
                  *(_QWORD *)&v79[12] = v73;
                }
LABEL_36:
                nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v67, 0);
LABEL_37:
                nlp::CFScopedPtr<__CFString const*>::reset(&v68, 0);
                goto LABEL_8;
              }
              v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_HOURS"), v19);
              QP::DatePeriod::setDisplayKey((const void **)a3, v67);
              *((_DWORD *)a3 + 2) = 69;
              CFCalendarAddComponents(v6, &at, 0, "H", v19);
              CFCalendarDecomposeAbsoluteTime(v6, at, "yMdHms", &v74, (char *)&v73 + 4, &v73, &v70[8], &v70[4], v70);
            }
            else
            {
              v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("VAL_%d-N_SECONDS"), v19);
              QP::DatePeriod::setDisplayKey((const void **)a3, v67);
              *((_DWORD *)a3 + 2) = 67;
              CFCalendarAddComponents(v6, &at, 0, "s", v19);
              CFCalendarDecomposeAbsoluteTime(v6, at, "yMdHms", &v74, (char *)&v73 + 4, &v73, &v70[8], &v70[4], v70);
            }
            *(_DWORD *)&v79[20] = v74;
            *(_QWORD *)&v79[12] = v73;
            *(_DWORD *)v79 = *(_DWORD *)v70;
            *(_QWORD *)&v79[4] = *(_QWORD *)&v70[4];
            goto LABEL_36;
          }
          v19 = 3;
        }
        v26 = 70;
        v27 = 71;
        v28 = 72;
        v29 = 73;
        v30 = 74;
        goto LABEL_30;
      }
      if (CFStringHasPrefix(a2, CFSTR("RelativeLast")))
      {
        if (CFStringFind(a2, CFSTR("Weekend"), 0).location != -1)
        {
          QP::DatePeriod::setDisplayKey((const void **)a3, CFSTR("LAST_WEEKEND"));
          *((_DWORD *)a3 + 2) = 23;
          CFCalendarComposeAbsoluteTime(v6, &at, "EwY", 7, v71 - 1, v74);
          CFCalendarDecomposeAbsoluteTime(v6, at, "EwY", &v72, &v71, &v74);
          LODWORD(v80) = v72;
          HIDWORD(v80) = v71;
          v81 = v74;
          CFCalendarAddComponents(v6, &at, 0, "d", 1);
          CFCalendarDecomposeAbsoluteTime(v6, at, "yEw", &v74, &v72, &v71);
          v63 = v74;
          v64 = v71;
          v65 = 1;
          goto LABEL_8;
        }
        if (CFStringFind(a2, CFSTR("Week"), 0).location != -1)
        {
          QP::DatePeriod::setDisplayKey((const void **)a3, CFSTR("LAST_WEEK"));
          *((_DWORD *)a3 + 2) = 24;
          v33 = v71 - 1;
LABEL_46:
          HIDWORD(v80) = v33;
          v81 = v74;
          goto LABEL_8;
        }
        if (CFStringFind(a2, CFSTR("Month"), 0).location != -1)
        {
          QP::DatePeriod::setDisplayKey((const void **)a3, CFSTR("LAST_MONTH"));
          *((_DWORD *)a3 + 2) = 25;
          v36 = (1 - v73);
          v37 = 0xFFFFFFFFLL;
LABEL_69:
          CFCalendarAddComponents(v6, &at, 0, "dM", v36, v37);
          CFCalendarDecomposeAbsoluteTime(v6, at, "yMd", &v74, (char *)&v73 + 4, &v73);
          goto LABEL_7;
        }
        if (CFStringFind(a2, CFSTR("Year"), 0).location == -1)
          goto LABEL_8;
        QP::DatePeriod::setDisplayKey((const void **)a3, CFSTR("LAST_YEAR"));
        *((_DWORD *)a3 + 2) = 26;
        v39 = (1 - v73);
        v40 = (1 - HIDWORD(v73));
        v41 = 0xFFFFFFFFLL;
LABEL_83:
        CFCalendarAddComponents(v6, &at, 0, "dMy", v39, v40, v41);
        CFCalendarDecomposeAbsoluteTime(v6, at, "yMd", &v74, (char *)&v73 + 4, &v73);
        goto LABEL_143;
      }
      if (CFStringHasPrefix(a2, CFSTR("RelativeThis")))
      {
        if (CFStringFind(a2, CFSTR("Second"), 0).location != -1)
        {
          QP::DatePeriod::setDisplayKey((const void **)a3, CFSTR("THIS_SECOND"));
          *((_DWORD *)a3 + 2) = 8;
          v31 = *(_DWORD *)&v70[8];
          *(_DWORD *)v79 = *(_DWORD *)v70;
          *(_DWORD *)&v79[4] = *(_DWORD *)&v70[4];
LABEL_43:
          v32 = HIDWORD(v73);
          *(_DWORD *)&v79[8] = v31;
LABEL_142:
          *(_DWORD *)&v79[16] = v32;
          goto LABEL_143;
        }
        if (CFStringFind(a2, CFSTR("Minute"), 0).location != -1)
        {
          QP::DatePeriod::setDisplayKey((const void **)a3, CFSTR("THIS_MINUTE"));
          *((_DWORD *)a3 + 2) = 9;
          *(_DWORD *)&v79[4] = *(_DWORD *)&v70[4];
          *(_DWORD *)&v79[8] = *(_DWORD *)&v70[8];
          goto LABEL_7;
        }
        if (CFStringFind(a2, CFSTR("Hour"), 0).location != -1)
        {
          QP::DatePeriod::setDisplayKey((const void **)a3, CFSTR("THIS_HOUR"));
          *((_DWORD *)a3 + 2) = 10;
          v31 = *(_DWORD *)&v70[8];
          goto LABEL_43;
        }
        if (CFStringFind(a2, CFSTR("Weekend"), 0).location == -1)
        {
          if (CFStringFind(a2, CFSTR("Week"), 0).location != -1)
          {
            QP::DatePeriod::setDisplayKey((const void **)a3, CFSTR("THIS_WEEK"));
            *((_DWORD *)a3 + 2) = 12;
            v33 = v71;
            goto LABEL_46;
          }
          if (CFStringFind(a2, CFSTR("Month"), 0).location != -1)
          {
            QP::DatePeriod::setDisplayKey((const void **)a3, CFSTR("THIS_MONTH"));
            *((_DWORD *)a3 + 2) = 13;
            goto LABEL_7;
          }
          if (CFStringFind(a2, CFSTR("Year"), 0).location == -1)
            goto LABEL_8;
          QP::DatePeriod::setDisplayKey((const void **)a3, CFSTR("THIS_YEAR"));
          *((_DWORD *)a3 + 2) = 14;
LABEL_143:
          *(_DWORD *)&v79[20] = v74;
          goto LABEL_8;
        }
        QP::DatePeriod::setDisplayKey((const void **)a3, CFSTR("THIS_WEEKEND"));
        *((_DWORD *)a3 + 2) = 11;
        v46 = MEMORY[0x219A2437C](*(_QWORD *)(*(_QWORD *)this + 80));
        v47 = MEMORY[0x219A2437C](v6);
        CFCalendarComposeAbsoluteTime(v6, &at, "EwY", 7, v71, v74);
        if (v46 == v47)
        {
          if (v15 && at > CurrentTime)
          {
            v48 = 0xFFFFFFFFLL;
          }
          else
          {
            if (!v16 || at >= CurrentTime)
              goto LABEL_130;
            v48 = 1;
          }
          CFCalendarAddComponents(v6, &at, 0, "w", at, v48);
        }
LABEL_130:
        CFCalendarDecomposeAbsoluteTime(v6, at, "yEw", &v74, &v72, &v71);
        LODWORD(v80) = v72;
        HIDWORD(v80) = v71;
        v81 = v74;
        v65 = 1;
        CFCalendarAddComponents(v6, &at, 0, "d", 1);
        CFCalendarDecomposeAbsoluteTime(v6, at, "wY", &v71, &v74);
        v63 = v74;
        v64 = v71;
        goto LABEL_8;
      }
      if (!CFStringHasPrefix(a2, CFSTR("RelativeEnd")))
      {
        if (CFStringHasSuffix(a2, CFSTR("TodayDate")))
        {
          QP::DatePeriod::setDisplayKey((const void **)a3, CFSTR("TODAY"));
          *((_DWORD *)a3 + 2) = 7;
LABEL_141:
          v32 = HIDWORD(v73);
          *(_DWORD *)&v79[12] = v73;
          goto LABEL_142;
        }
        if (CFStringHasSuffix(a2, CFSTR("YesterdayDate")))
        {
          QP::DatePeriod::setDisplayKey((const void **)a3, CFSTR("YESTERDAY"));
          *((_DWORD *)a3 + 2) = 19;
          v45 = 0xFFFFFFFFLL;
        }
        else if (CFStringHasSuffix(a2, CFSTR("TomorrowDate")))
        {
          QP::DatePeriod::setDisplayKey((const void **)a3, CFSTR("TOMORROW"));
          *((_DWORD *)a3 + 2) = 55;
          v45 = 1;
        }
        else if (CFStringHasSuffix(a2, CFSTR("TwoDaysDate")))
        {
          QP::DatePeriod::setDisplayKey((const void **)a3, CFSTR("VAL_2-N_DAYS_AGO"));
          *((_DWORD *)a3 + 2) = 34;
          v45 = 4294967294;
        }
        else
        {
          if (!CFStringHasSuffix(a2, CFSTR("ThreeDaysDate")))
          {
            if (CFStringHasSuffix(a2, CFSTR("TwoWeeksDate")))
            {
              QP::DatePeriod::setDisplayKey((const void **)a3, CFSTR("VAL_2-N_WEEKS_AGO"));
              *((_DWORD *)a3 + 2) = 36;
              v33 = v71 - 2;
              goto LABEL_46;
            }
            if (CFStringHasSuffix(a2, CFSTR("ThreeWeeksDate")))
            {
              QP::DatePeriod::setDisplayKey((const void **)a3, CFSTR("VAL_3-N_WEEKS_AGO"));
              *((_DWORD *)a3 + 2) = 36;
              v33 = v71 - 3;
              goto LABEL_46;
            }
            if (CFStringHasSuffix(a2, CFSTR("TwoMonthsDate")))
            {
              QP::DatePeriod::setDisplayKey((const void **)a3, CFSTR("VAL_2-N_MONTHS_AGO"));
              *((_DWORD *)a3 + 2) = 37;
              v36 = (1 - v73);
              v37 = 4294967294;
              goto LABEL_69;
            }
            if (CFStringHasSuffix(a2, CFSTR("ThreeMonthsDate")))
            {
              QP::DatePeriod::setDisplayKey((const void **)a3, CFSTR("VAL_3-N_MONTHS_AGO"));
              *((_DWORD *)a3 + 2) = 37;
              v36 = (1 - v73);
              v37 = 4294967293;
              goto LABEL_69;
            }
            if (CFStringHasSuffix(a2, CFSTR("TwoYearsDate")))
            {
              QP::DatePeriod::setDisplayKey((const void **)a3, CFSTR("VAL_2-N_YEARS_AGO"));
              *((_DWORD *)a3 + 2) = 38;
              v39 = (1 - v73);
              v40 = (1 - HIDWORD(v73));
              v41 = 4294967294;
            }
            else
            {
              if (!CFStringHasSuffix(a2, CFSTR("ThreeYearsDate")))
                goto LABEL_8;
              QP::DatePeriod::setDisplayKey((const void **)a3, CFSTR("VAL_3-N_YEARS_AGO"));
              *((_DWORD *)a3 + 2) = 38;
              v39 = (1 - v73);
              v40 = (1 - HIDWORD(v73));
              v41 = 4294967293;
            }
            goto LABEL_83;
          }
          QP::DatePeriod::setDisplayKey((const void **)a3, CFSTR("VAL_3-N_DAYS_AGO"));
          *((_DWORD *)a3 + 2) = 34;
          v45 = 4294967293;
        }
        CFCalendarAddComponents(v6, &at, 0, "d", v45, v49);
LABEL_140:
        CFCalendarDecomposeAbsoluteTime(v6, at, "yMd", &v74, (char *)&v73 + 4, &v73);
        goto LABEL_141;
      }
      if (!CFStringHasSuffix(a2, CFSTR("IsoMonthDate")))
        goto LABEL_8;
      QP::DatePeriod::setDisplayKey((const void **)a3, CFSTR("FORMATTED"));
      *((_DWORD *)a3 + 2) = 2;
      AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)v79, v6, v13);
      if (v16)
      {
        if (at <= AbsoluteTime
          || (!*(_DWORD *)&v79[8] || *(int *)&v79[8] >= *(int *)&v70[8])
          && (!(_DWORD)v80 || (int)v80 >= v72)
          && (!*(_DWORD *)&v79[12] || *(int *)&v79[12] >= (int)v73)
          && (!*(_DWORD *)&v79[16] || *(int *)&v79[16] >= SHIDWORD(v73)))
        {
          goto LABEL_104;
        }
        v35 = 1;
      }
      else
      {
        if (at >= AbsoluteTime
          && (!*(_DWORD *)&v79[8] || *(int *)&v79[8] < *(int *)&v70[8])
          && (!(_DWORD)v80 || (int)v80 < v72)
          && (!*(_DWORD *)&v79[12] || *(int *)&v79[12] < (int)v73)
          && (!*(_DWORD *)&v79[16] || *(int *)&v79[16] < SHIDWORD(v73)))
        {
          goto LABEL_104;
        }
        v35 = 0xFFFFFFFFLL;
      }
      CFCalendarAddComponents(v6, &at, 0, "y", v35);
LABEL_104:
      CFCalendarAddComponents(v6, &at, 0, "dM", -(int)v73, (1 - HIDWORD(v73)));
      CFCalendarAddComponents(v6, &at, 0, "dM", 0xFFFFFFFFLL, *(unsigned int *)&v79[16]);
      goto LABEL_140;
    }
  }
  return result;
}

void sub_218E803B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,const void *a28,const void *a29)
{
  nlp::CFScopedPtr<__CFString const*>::reset(&a28, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a29, 0);
  _Unwind_Resume(a1);
}

uint64_t QP::updateDateComponentsWithValues(uint64_t a1, SInt32 *a2, CFDictionaryRef theDict, int a4)
{
  CFIndex Count;
  unint64_t v7;
  const void **v8;
  size_t v9;
  uint64_t v10;
  BOOL v11;
  const __CFString *v12;
  const __CFString *Value;
  SInt32 IntFromSpelledNumber;
  int HasPrefix;
  const __CFDictionary *v16;
  const __CFString *v17;
  const __CFString *v18;
  uint64_t result;
  const __CFString *v20;
  SInt32 IntValue;
  int v22;
  int v23;
  int v24;
  SInt32 v25;
  SInt32 v26;
  SInt32 v27;
  unsigned int v28;
  uint64_t v29;
  const __CFLocale *v30;
  int v31;
  uint64_t v32;

  v31 = a4;
  v32 = *MEMORY[0x24BDAC8D0];
  if (!theDict)
    return 0;
  v30 = *(const __CFLocale **)(*(_QWORD *)a1 + 104);
  if (!v30)
    return 0;
  Count = CFDictionaryGetCount(theDict);
  MEMORY[0x24BDAC7A8](Count);
  v8 = (const void **)((char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v7 >= 0x200)
    v9 = 512;
  else
    v9 = v7;
  bzero((char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  CFDictionaryGetKeysAndValues(theDict, v8, 0);
  if (Count < 1)
  {
LABEL_82:
    if ((a2[8] & 0x80000000) == 0 && (a2[3] & 0x80000000) == 0)
      a2[8] = -1;
    if ((a2[9] & 0x80000000) == 0 || (a2[10] & 0x80000000) == 0 || (a2[11] & 0x80000000) == 0)
    {
      a2[12] = a2[5];
      a2[5] = -1;
    }
    v25 = a2[2];
    v26 = a2[7];
    if (v25 < 0)
    {
      if (v26 < 0)
        return 1;
      v28 = v26 - 1;
      if (v28 >= 8)
        return 1;
      v27 = *(_DWORD *)&asc_218EA01E8[4 * v28];
    }
    else
    {
      if (v26 < 0)
        return 1;
      result = 1;
      if (v25 != 12 || v26 != 1)
        return result;
      v27 = 0;
    }
    a2[2] = v27;
    return 1;
  }
  v10 = 0;
  v11 = 1;
  v29 = (uint64_t)&v29;
  while (1)
  {
    v12 = (const __CFString *)v8[v10];
    if (CFStringHasSuffix(v12, CFSTR("Date")) || CFStringHasPrefix(v12, CFSTR("NUMBERS")))
      goto LABEL_10;
    if (CFStringHasPrefix(v12, CFSTR("SPELLED")))
    {
      if ((v31 & 1) == 0)
      {
        Value = (const __CFString *)CFDictionaryGetValue(theDict, v12);
        IntFromSpelledNumber = getIntFromSpelledNumber(Value, v30);
        if (IntFromSpelledNumber < 0)
          return 0;
        a2[5] = IntFromSpelledNumber;
      }
      goto LABEL_10;
    }
    HasPrefix = CFStringHasPrefix(v12, CFSTR("Num"));
    v16 = (const __CFDictionary *)CFDictionaryGetValue(theDict, v12);
    v17 = (const __CFString *)v16;
    if (!HasPrefix)
    {
      if (CFStringHasPrefix(v12, CFSTR("d")) || CFStringHasPrefix(v12, CFSTR("DAY_ORDINAL")))
      {
        result = CFStringGetIntValue(v17);
        if (!(_DWORD)result)
          return result;
        a2[3] = result;
      }
      else if (CFStringHasPrefix(v12, CFSTR("E")))
      {
        result = CFStringGetIntValue(v17);
        if (!(_DWORD)result)
          return result;
        a2[8] = result;
      }
      else if (CFStringHasPrefix(v12, CFSTR("M")))
      {
        result = CFStringGetIntValue(v17);
        if (!(_DWORD)result)
          return result;
        a2[4] = result;
      }
      else if (CFStringHasPrefix(v12, CFSTR("y")) || CFStringHasPrefix(v12, CFSTR("Y")))
      {
        IntValue = CFStringGetIntValue(v17);
        result = 0;
        if (!IntValue || IntValue > 2100)
          return result;
        a2[5] = IntValue;
        if (CFStringCompare(v12, CFSTR("yy"), 0) == kCFCompareEqualTo)
        {
          v22 = a2[5];
          if (v22 > 39)
            v23 = v22 + 1900;
          else
            v23 = v22 + 2000;
          a2[5] = v23;
        }
      }
      else if (CFStringHasPrefix(v12, CFSTR("F")))
      {
        result = CFStringGetIntValue(v17);
        if (!(_DWORD)result)
          return result;
        a2[9] = result;
      }
      else if (CFStringHasPrefix(v12, CFSTR("w")))
      {
        result = CFStringGetIntValue(v17);
        if (!(_DWORD)result)
          return result;
        a2[11] = result;
      }
      else if (CFStringHasPrefix(v12, CFSTR("W")))
      {
        result = CFStringGetIntValue(v17);
        if (!(_DWORD)result)
          return result;
        a2[10] = result;
      }
      else if (CFStringHasPrefix(v12, CFSTR("q")) || CFStringHasPrefix(v12, CFSTR("Q")))
      {
        result = CFStringGetIntValue(v17);
        if (!(_DWORD)result)
          return result;
        a2[6] = result;
      }
      else if (CFStringHasPrefix(v12, CFSTR("h")) || CFStringHasPrefix(v12, CFSTR("H")))
      {
        a2[2] = CFStringGetIntValue(v17);
      }
      else if (CFStringHasPrefix(v12, CFSTR("m")))
      {
        a2[1] = CFStringGetIntValue(v17);
      }
      else if (CFStringHasPrefix(v12, CFSTR("s")))
      {
        *a2 = CFStringGetIntValue(v17);
      }
      else
      {
        result = CFStringHasPrefix(v12, CFSTR("a"));
        if (!(_DWORD)result)
          return result;
        if (CFStringHasPrefix(v17, CFSTR("am")))
        {
          v24 = 1;
        }
        else if (CFStringHasPrefix(v17, CFSTR("pm")))
        {
          v24 = 2;
        }
        else if (CFStringHasPrefix(v17, CFSTR("morning")))
        {
          v24 = 3;
        }
        else if (CFStringHasPrefix(v17, CFSTR("noon")))
        {
          v24 = 4;
        }
        else if (CFStringHasPrefix(v17, CFSTR("afternoon")))
        {
          v24 = 5;
        }
        else if (CFStringHasPrefix(v17, CFSTR("evening")))
        {
          v24 = 6;
        }
        else
        {
          if (!CFStringHasPrefix(v17, CFSTR("night")))
          {
            if (CFStringHasPrefix(v17, CFSTR("midnight")))
              a2[7] = 8;
            goto LABEL_10;
          }
          v24 = 7;
        }
        a2[7] = v24;
      }
      goto LABEL_10;
    }
    if (!CFDictionaryContainsKey(v16, CFSTR("NUMBERS")))
    {
      if (CFDictionaryContainsKey((CFDictionaryRef)v17, CFSTR("DIGITS")))
      {
        v20 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v17, CFSTR("DIGITS"));
        CFStringGetIntValue(v20);
      }
      goto LABEL_10;
    }
    v18 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v17, CFSTR("NUMBERS"));
    if ((getIntFromSpelledNumber(v18, v30) & 0x80000000) != 0)
      break;
LABEL_10:
    v11 = ++v10 < Count;
    if (Count == v10)
      goto LABEL_82;
  }
  if (!v11)
    goto LABEL_82;
  return 0;
}

uint64_t QP::intValueForNumberInValues(QP *this, CFDictionaryRef theDict, const __CFDictionary *a3)
{
  const __CFString *Value;
  uint64_t IntFromSpelledNumber;
  const __CFString *v7;
  const __CFString *v8;
  CFMutableStringRef MutableCopy;

  if (!theDict)
    return 0xFFFFFFFFLL;
  Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("SPELLED"));
  if (Value)
  {
    IntFromSpelledNumber = getIntFromSpelledNumber(Value, this);
    if ((IntFromSpelledNumber & 0x80000000) == 0)
      return IntFromSpelledNumber;
    v7 = CFSTR("NUMBERS");
    goto LABEL_5;
  }
  v8 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("DIGITS"));
  if (!v8)
  {
    v8 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("NON_YEAR_DIGITS"));
    if (!v8)
    {
      v8 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("NON_MONTH_DIGITS"));
      if (!v8)
      {
        IntFromSpelledNumber = 0xFFFFFFFFLL;
        v7 = CFSTR("NON_DAY_DIGITS");
LABEL_5:
        v8 = (const __CFString *)CFDictionaryGetValue(theDict, v7);
        if (!v8)
          return IntFromSpelledNumber;
      }
    }
  }
  IntFromSpelledNumber = CFStringGetIntValue(v8);
  if (!(_DWORD)IntFromSpelledNumber)
  {
    if (CFStringsAreEqual(v8, CFSTR("0")))
    {
      return 0;
    }
    else
    {
      MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, v8);
      CFStringNormalize(MutableCopy, kCFStringNormalizationFormKC);
      IntFromSpelledNumber = CFStringGetIntValue(MutableCopy);
      if (MutableCopy)
        CFRelease(MutableCopy);
    }
  }
  return IntFromSpelledNumber;
}

void sub_218E80BF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t QP::updateDateComponentsWithRelativeUnitOffset(uint64_t result, uint64_t a2, const __CFDate *a3, QP::DateComponents *this, int a5, uint64_t a6, int a7)
{
  __CFCalendar *v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  CFAbsoluteTime at;

  if (result)
  {
    if (a2)
    {
      v12 = (__CFCalendar *)result;
      result = QP::DateComponents::isEmpty(this);
      if ((result & 1) == 0)
      {
        at = QP::DateComponents::getAbsoluteTime(this, v12, a3);
        v33 = 0;
        v34 = 0;
        v32 = 0;
        v31 = 0;
        v29 = 0;
        v30 = 0;
        v13 = *((_DWORD *)this + 1);
        v14 = *((_DWORD *)this + 2);
        v15 = *(_DWORD *)this;
        if ((v14 & 0x80000000) == 0
          || (v13 & 0x80000000) == 0
          || (v15 & 0x80000000) == 0
          || (*((_DWORD *)this + 7) & 0x80000000) == 0)
        {
          if (a7)
          {
            if ((v15 & 0x80000000) == 0 || (v13 & v14 & 0x80000000) == 0)
            {
              if (v13 < 0)
                v16 = "H";
              else
                v16 = "m";
              if (v15 < 0)
                CFCalendarAddComponents(v12, &at, 0, v16, a6);
              else
                CFCalendarAddComponents(v12, &at, 0, "s", a6);
            }
          }
          else
          {
            CFCalendarAddComponents(v12, &at, 0, "d", a6);
          }
          CFCalendarDecomposeAbsoluteTime(v12, at, "dEMyHmsa", (char *)&v33 + 4, &v33, &v34, (char *)&v34 + 4, (char *)&v30 + 4, &v30, (char *)&v29 + 4, &v29);
          v17 = v34;
          v18 = HIDWORD(v34);
          v19 = HIDWORD(v33);
          if (__PAIR64__(v30, HIDWORD(v29)))
            v20 = v30;
          else
            v20 = -1;
          if (HIDWORD(v29))
            v21 = HIDWORD(v29);
          else
            v21 = -1;
          if ((_DWORD)v29)
            v22 = 2;
          else
            v22 = 1;
          v23 = HIDWORD(v30);
          v24 = -1;
          goto LABEL_31;
        }
        if ((*((_DWORD *)this + 11) & 0x80000000) == 0)
        {
          if ((*((_DWORD *)this + 8) & 0x80000000) == 0)
          {
            CFCalendarAddComponents(v12, &at, 0, "d", a6);
LABEL_44:
            CFCalendarDecomposeAbsoluteTime(v12, at, "EwY", &v33, &v32, (char *)&v34 + 4);
            v26 = v32;
            v24 = v33;
            v23 = -1;
            v19 = -1;
            v17 = -1;
            v18 = -1;
            v20 = -1;
            result = HIDWORD(v34);
            v22 = -1;
            goto LABEL_45;
          }
          if ((*((_DWORD *)this + 10) & 0x80000000) != 0)
          {
            CFCalendarAddComponents(v12, &at, 0, "w", a6);
            CFCalendarDecomposeAbsoluteTime(v12, at, "wY", &v32, (char *)&v34 + 4);
            v26 = v32;
            v23 = -1;
            v19 = -1;
            v17 = -1;
            v18 = -1;
            result = HIDWORD(v34);
            v20 = -1;
            v22 = -1;
            v24 = -1;
LABEL_45:
            v21 = -1;
            v25 = -1;
            goto LABEL_49;
          }
          goto LABEL_41;
        }
        v27 = *((_DWORD *)this + 10);
        if (v27 < 0 && (*((_DWORD *)this + 9) & 0x80000000) != 0)
        {
          v28 = *((_DWORD *)this + 8);
          if ((*((_DWORD *)this + 12) & 0x80000000) == 0)
          {
            if (v28 < 0)
              goto LABEL_47;
LABEL_43:
            CFCalendarAddComponents(v12, &at, 0, "w", a6);
            goto LABEL_44;
          }
          if ((v28 & 0x80000000) == 0)
            goto LABEL_43;
          if ((*((_DWORD *)this + 3) & 0x80000000) == 0)
          {
            CFCalendarAddComponents(v12, &at, 0, "d", a6);
            CFCalendarDecomposeAbsoluteTime(v12, at, "dMy", (char *)&v33 + 4, &v34, (char *)&v34 + 4);
            v19 = HIDWORD(v33);
            v17 = v34;
            v23 = -1;
            v20 = -1;
            v22 = -1;
            v24 = -1;
            v21 = -1;
            v18 = HIDWORD(v34);
LABEL_31:
            v25 = -1;
            v26 = -1;
            result = 0xFFFFFFFFLL;
LABEL_49:
            *(_DWORD *)this = v21;
            *((_DWORD *)this + 1) = v20;
            *((_DWORD *)this + 2) = v23;
            *((_DWORD *)this + 3) = v19;
            *((_DWORD *)this + 4) = v17;
            *((_DWORD *)this + 5) = v18;
            *((_DWORD *)this + 6) = -1;
            *((_DWORD *)this + 7) = v22;
            *((_DWORD *)this + 8) = v24;
            *((_DWORD *)this + 9) = -1;
            *((_DWORD *)this + 10) = v25;
            *((_DWORD *)this + 11) = v26;
            *((_DWORD *)this + 12) = result;
            return result;
          }
          if ((*((_DWORD *)this + 4) & 0x80000000) == 0)
          {
            if (a5 == 4)
              CFCalendarAddComponents(v12, &at, 0, "y", a6);
            else
              CFCalendarAddComponents(v12, &at, 0, "M", a6);
            CFCalendarDecomposeAbsoluteTime(v12, at, "yM", (char *)&v34 + 4, &v34);
            v17 = v34;
            v18 = HIDWORD(v34);
            v23 = -1;
            v19 = -1;
            goto LABEL_61;
          }
          if ((*((_DWORD *)this + 5) & 0x80000000) == 0)
          {
            CFCalendarAddComponents(v12, &at, 0, "y", a6);
            CFCalendarDecomposeAbsoluteTime(v12, at, "y", (char *)&v34 + 4);
            v23 = -1;
            v19 = -1;
            v18 = HIDWORD(v34);
            v17 = -1;
LABEL_61:
            v20 = -1;
            v22 = -1;
            v24 = -1;
            v21 = -1;
            goto LABEL_31;
          }
        }
        else
        {
          if ((*((_DWORD *)this + 8) & 0x80000000) == 0)
            goto LABEL_43;
          if ((v27 & 0x80000000) == 0)
          {
LABEL_41:
            CFCalendarAddComponents(v12, &at, 0, "M", a6);
            CFCalendarDecomposeAbsoluteTime(v12, at, "WMY", &v31, &v34, (char *)&v34 + 4);
            v25 = v31;
            v17 = v34;
            result = HIDWORD(v34);
            v23 = -1;
            v19 = -1;
            v18 = -1;
            v20 = -1;
            v22 = -1;
            v24 = -1;
            v21 = -1;
LABEL_48:
            v26 = -1;
            goto LABEL_49;
          }
          if ((*((_DWORD *)this + 12) & 0x80000000) == 0)
          {
LABEL_47:
            CFCalendarAddComponents(v12, &at, 0, "Y", a6);
            CFCalendarDecomposeAbsoluteTime(v12, at, "Y", (char *)&v34 + 4);
            v23 = -1;
            v19 = -1;
            result = HIDWORD(v34);
            v17 = -1;
            v18 = -1;
            v20 = -1;
            v22 = -1;
            v24 = -1;
            v21 = -1;
            v25 = -1;
            goto LABEL_48;
          }
        }
        v23 = -1;
        v19 = -1;
        v17 = -1;
        v18 = -1;
        goto LABEL_61;
      }
    }
  }
  return result;
}

void QP::DateConverter::mergeDateTime(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, __int16 a4@<W3>, const void ***a5@<X8>)
{
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __n128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  const void **v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  const QP::DateComponents *v27;
  const __CFString *v28;
  __int128 v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  __n128 v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  __int128 v39;
  int v40;
  const void **v41;
  __int128 v42;
  int v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _QWORD v47[3];
  _QWORD v48[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  int v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;

  *a5 = 0;
  v8 = *(_QWORD *)a2 + 20;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) - 91) > 0x1D)
  {
    v30 = *(_OWORD *)(*(_QWORD *)a2 + 36);
    v53 = *(_OWORD *)v8;
    v54 = v30;
    v55 = *(_OWORD *)(v8 + 32);
    v56 = *(_DWORD *)(v8 + 48);
    if (*(_DWORD *)(*a3 + 8) != 3 || (HIDWORD(v54) & 0x80000000) != 0)
      QP::DateComponents::merge((int *)&v53, (const QP::DateComponents *)(*a3 + 20));
    v52 = -1;
    *(_QWORD *)&v31 = -1;
    *((_QWORD *)&v31 + 1) = -1;
    v50 = v31;
    v51 = v31;
    v49 = v31;
    v32 = (std::__shared_weak_count *)a1[1];
    v47[0] = *a1;
    v47[1] = v32;
    if (v32)
    {
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(p_shared_owners);
      while (__stxr(v34 + 1, p_shared_owners));
    }
    v35.n128_f64[0] = QP::resolveDateComponents(v47, &v53, &v49);
    if (v32)
    {
      v36 = (unint64_t *)&v32->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v32->__on_zero_shared)(v32, v35);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v38 = operator new();
    *(_QWORD *)v38 = 0;
    *(_DWORD *)(v38 + 8) = 0;
    *(_WORD *)(v38 + 12) = 0;
    *(_DWORD *)(v38 + 16) = 0;
    *(_QWORD *)&v39 = -1;
    *((_QWORD *)&v39 + 1) = -1;
    *(_OWORD *)(v38 + 20) = v39;
    *(_OWORD *)(v38 + 36) = v39;
    *(_OWORD *)(v38 + 52) = v39;
    *(_OWORD *)(v38 + 68) = v39;
    *(_OWORD *)(v38 + 84) = v39;
    *(_OWORD *)(v38 + 100) = v39;
    *(_OWORD *)(v38 + 116) = v39;
    *(_OWORD *)(v38 + 132) = v39;
    *(_OWORD *)(v38 + 148) = v39;
    *(_OWORD *)(v38 + 160) = v39;
    std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](a5, (const void **)v38);
    v40 = 0;
    v41 = *a5;
    v42 = v55;
    v43 = v56;
    v44 = v54;
    *(_OWORD *)((char *)v41 + 20) = v53;
    *(_OWORD *)((char *)v41 + 36) = v44;
    *(_OWORD *)((char *)v41 + 52) = v42;
    *((_DWORD *)v41 + 17) = v43;
    v45 = v50;
    *(_OWORD *)(v41 + 9) = v49;
    *(_OWORD *)(v41 + 11) = v45;
    v46 = v51;
    *((_DWORD *)v41 + 30) = v52;
    *((_DWORD *)v41 + 2) = 2;
    *((_WORD *)v41 + 6) = a4;
    *(_OWORD *)(v41 + 13) = v46;
    if ((unsigned __int16)(a4 - 1) <= 7u)
      v40 = dword_218EA0224[(__int16)(a4 - 1)];
    *((_DWORD *)v41 + 4) = v40;
    QP::DatePeriod::setDisplayKey(v41, CFSTR("FORMATTED"));
  }
  else
  {
    v10 = *(_OWORD *)(*(_QWORD *)a2 + 36);
    v53 = *(_OWORD *)v8;
    v54 = v10;
    v55 = *(_OWORD *)(v8 + 32);
    v56 = *(_DWORD *)(v8 + 48);
    QP::DateComponents::merge((int *)&v53, (const QP::DateComponents *)(*a3 + 20));
    v11 = *a3;
    v12 = *(_OWORD *)(*a3 + 88);
    v49 = *(_OWORD *)(*a3 + 72);
    v50 = v12;
    v51 = *(_OWORD *)(v11 + 104);
    v52 = *(_DWORD *)(v11 + 120);
    v13 = (std::__shared_weak_count *)a1[1];
    v48[0] = *a1;
    v48[1] = v13;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16.n128_f64[0] = QP::resolveDateComponents(v48, &v53, &v49);
    if (v13)
    {
      v17 = (unint64_t *)&v13->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v16);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v19 = operator new();
    *(_QWORD *)v19 = 0;
    *(_DWORD *)(v19 + 8) = 0;
    *(_WORD *)(v19 + 12) = 0;
    *(_DWORD *)(v19 + 16) = 0;
    *(_QWORD *)&v20 = -1;
    *((_QWORD *)&v20 + 1) = -1;
    *(_OWORD *)(v19 + 20) = v20;
    *(_OWORD *)(v19 + 36) = v20;
    *(_OWORD *)(v19 + 52) = v20;
    *(_OWORD *)(v19 + 68) = v20;
    *(_OWORD *)(v19 + 84) = v20;
    *(_OWORD *)(v19 + 100) = v20;
    *(_OWORD *)(v19 + 116) = v20;
    *(_OWORD *)(v19 + 132) = v20;
    *(_OWORD *)(v19 + 148) = v20;
    *(_OWORD *)(v19 + 160) = v20;
    std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](a5, (const void **)v19);
    v21 = *a5;
    *((_DWORD *)v21 + 17) = v56;
    *(_OWORD *)((char *)v21 + 52) = v55;
    v22 = v53;
    *(_OWORD *)((char *)v21 + 36) = v54;
    *(_OWORD *)((char *)v21 + 20) = v22;
    v23 = v50;
    *(_OWORD *)(v21 + 9) = v49;
    *(_OWORD *)(v21 + 11) = v23;
    *(_OWORD *)(v21 + 13) = v51;
    *((_DWORD *)v21 + 30) = v52;
    v24 = *(_OWORD *)(*(_QWORD *)a2 + 124);
    v25 = *(_OWORD *)(*(_QWORD *)a2 + 140);
    v26 = *(_OWORD *)(*(_QWORD *)a2 + 156);
    *((_DWORD *)v21 + 43) = *(_DWORD *)(*(_QWORD *)a2 + 172);
    *(_OWORD *)((char *)v21 + 156) = v26;
    *(_OWORD *)((char *)v21 + 140) = v25;
    *(_OWORD *)((char *)v21 + 124) = v24;
    *((_DWORD *)v21 + 2) = *(_DWORD *)(*(_QWORD *)a2 + 8);
    *((_WORD *)v21 + 6) = 1;
    *((_DWORD *)v21 + 4) = 3;
    v28 = QP::copyDisplayKeyForOrdinalDate((QP *)&v53, (const QP::DateComponents *)((char *)v21 + 124), v27);
    v47[2] = v28;
    QP::DatePeriod::setDisplayKey(*a5, v28);
    if (v28)
      CFRelease(v28);
  }
}

void sub_218E814B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void ***v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](v2, 0);
  _Unwind_Resume(a1);
}

int *QP::DateComponents::merge(int *this, const QP::DateComponents *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v2 = *(_DWORD *)a2;
  v3 = this[1];
  if (*this >= 0)
    v2 = *this;
  *this = v2;
  v4 = *((_DWORD *)a2 + 1);
  if (v3 >= 0)
    v4 = v3;
  this[1] = v4;
  v5 = *((_DWORD *)a2 + 2);
  v6 = this[3];
  if (this[2] >= 0)
    v5 = this[2];
  this[2] = v5;
  v7 = *((_DWORD *)a2 + 3);
  if (v6 >= 0)
    v7 = v6;
  this[3] = v7;
  v8 = *((_DWORD *)a2 + 4);
  v9 = this[5];
  if (this[4] >= 0)
    v8 = this[4];
  this[4] = v8;
  v10 = *((_DWORD *)a2 + 5);
  if (v9 >= 0)
    v10 = v9;
  this[5] = v10;
  v11 = *((_DWORD *)a2 + 6);
  v12 = this[7];
  if (this[6] >= 0)
    v11 = this[6];
  this[6] = v11;
  v13 = *((_DWORD *)a2 + 7);
  if (v12 >= 0)
    v13 = v12;
  this[7] = v13;
  v14 = *((_DWORD *)a2 + 8);
  v15 = this[9];
  if (this[8] >= 0)
    v14 = this[8];
  this[8] = v14;
  v16 = *((_DWORD *)a2 + 9);
  if (v15 >= 0)
    v16 = v15;
  this[9] = v16;
  v17 = *((_DWORD *)a2 + 10);
  v18 = this[11];
  if (this[10] >= 0)
    v17 = this[10];
  this[10] = v17;
  v19 = *((_DWORD *)a2 + 11);
  if (v18 >= 0)
    v19 = v18;
  this[11] = v19;
  v20 = this[12];
  if (v20 < 0)
    v20 = *((_DWORD *)a2 + 12);
  this[12] = v20;
  return this;
}

double QP::resolveDateComponents(_QWORD *a1, __int128 *a2, __int128 *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  double result;
  _BYTE v21[52];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;

  v6 = a2[1];
  v26 = *a2;
  v7 = a2[2];
  v27 = v6;
  v28 = v7;
  v29 = *((_DWORD *)a2 + 12);
  v8 = a3[1];
  v22 = *a3;
  v23 = v8;
  v24 = a3[2];
  v25 = *((_DWORD *)a3 + 12);
  QP::getCurrentDateComponents(*(__CFCalendar **)(*a1 + 80), *(__CFCalendar **)(*a1 + 72), (uint64_t)v21);
  v9 = (std::__shared_weak_count *)a1[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    v13 = (std::__shared_weak_count *)a1[1];
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      do
        v16 = __ldaxr(v14);
      while (__stlxr(v16 - 1, v14));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  v17 = v27;
  v18 = v28;
  *a2 = v26;
  a2[1] = v17;
  a2[2] = v18;
  *((_DWORD *)a2 + 12) = v29;
  v19 = v23;
  *a3 = v22;
  a3[1] = v19;
  result = *(double *)&v24;
  a3[2] = v24;
  *((_DWORD *)a3 + 12) = v25;
  return result;
}

const void ***QP::DateConverter::mergeDate@<X0>(QP::HolidayReference **a1@<X0>, const __CFString ***a2@<X1>, CFStringRef **a3@<X2>, const void ***a4@<X8>)
{
  const __CFString **v8;
  __int128 v9;
  __int128 v10;
  CFStringRef *v11;
  __int128 v12;
  __int128 v13;
  __CFCalendar *v14;
  const __CFDate *v15;
  double CurrentTime;
  uint64_t v17;
  BOOL v18;
  int v19;
  int v20;
  QP::HolidayReference *v22;
  uint64_t v23;
  double AbsoluteTime;
  char v25;
  const __CFString **v26;
  int v27;
  QP::HolidayReference *v28;
  unint64_t *v29;
  unint64_t v30;
  const __CFString **v31;
  int v32;
  BOOL v33;
  QP::HolidayReference *v34;
  unint64_t *v35;
  unint64_t v36;
  double v37;
  uint64_t v38;
  const __CFString **v39;
  int v40;
  BOOL v41;
  QP::HolidayReference *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  double v48;
  uint64_t v49;
  const __CFString **v50;
  int v51;
  BOOL v52;
  QP::HolidayReference *v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  QP::HolidayReference *v60;
  std::__shared_weak_count *v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  __n128 v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  __int128 v68;
  const void **v69;
  int v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  CFAllocatorRef *v74;
  CFStringRef v75;
  uint64_t v76;
  __int128 v77;
  const QP::DateComponents *v78;
  int v79;
  const void **v80;
  QP *v81;
  __int128 v82;
  __int128 v83;
  int v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  unsigned __int16 v89;
  const __CFString *v90;
  const __CFAllocator *v91;
  CFStringRef Copy;
  const __CFString *v93;
  const void **v94;
  unint64_t v96;
  unint64_t v97;
  CFAbsoluteTime v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD v101[3];
  CFStringRef v102;
  QP::HolidayReference *v103[2];
  QP::HolidayReference *v104[2];
  const __CFDate *v105;
  QP::HolidayReference *v106[2];
  QP::HolidayReference *v107[2];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  int v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  int v115;
  const void **v116[3];

  v116[0] = 0;
  v8 = *a2;
  v9 = *(_OWORD *)((char *)*a2 + 20);
  v10 = *(_OWORD *)((char *)*a2 + 52);
  v113 = *(_OWORD *)((char *)*a2 + 36);
  v114 = v10;
  v115 = *((_DWORD *)v8 + 17);
  v112 = v9;
  v11 = *a3;
  v12 = *(_OWORD *)((char *)*a3 + 20);
  v13 = *(_OWORD *)((char *)*a3 + 36);
  v110 = *(_OWORD *)((char *)*a3 + 52);
  v111 = *((_DWORD *)v11 + 17);
  v108 = v12;
  v109 = v13;
  if (QP::DateComponents::isEmpty((QP::DateComponents *)&v112)
    && (QP::DateComponents::isEmpty((QP::DateComponents *)&v108) & 1) != 0
    || !QP::DateComponents::isEmpty((QP::DateComponents *)((char *)*a2 + 124))
    || !QP::DateComponents::isEmpty((QP::DateComponents *)((char *)*a3 + 124)))
  {
    goto LABEL_86;
  }
  v100 = *((_QWORD *)*a1 + 13);
  v14 = (__CFCalendar *)*((_QWORD *)*a1 + 11);
  v15 = (const __CFDate *)*((_QWORD *)*a1 + 9);
  CurrentTime = getCurrentTime(v14, v15);
  LODWORD(v102) = -1;
  CFCalendarDecomposeAbsoluteTime(v14, CurrentTime, "y", &v102);
  v18 = (int)(HIDWORD(v112) | v113 | DWORD1(v113) | v114 | HIDWORD(v114) | v115) >= 0;
  if ((SDWORD1(v113) & 0x80000000) == 0)
    v19 = DWORD1(v113);
  else
    v19 = v115;
  if ((SDWORD1(v109) & 0x80000000) == 0)
    v20 = DWORD1(v109);
  else
    v20 = v111;
  if (v20 == -1)
  {
    if (v19 != -1 && (int)(HIDWORD(v112) | v113 | DWORD1(v113) | v114 | HIDWORD(v114) | v115) < 0)
      goto LABEL_31;
    v22 = *a1;
    if (*((_BYTE *)*a1 + 24))
    {
      if (QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v108, v14, v15) < CurrentTime)
      {
        v23 = 1;
LABEL_37:
        v26 = *a3;
        v27 = *((_DWORD *)*a3 + 2);
        if ((v27 - 1) <= 0x3F && ((1 << (v27 - 1)) & 0x8000000008008001) != 0
          || v27 == 102)
        {
          v28 = a1[3];
          v107[0] = a1[2];
          v107[1] = v28;
          if (v28)
          {
            v29 = (unint64_t *)((char *)v28 + 8);
            do
              v30 = __ldxr(v29);
            while (__stxr(v30 + 1, v29));
            v26 = *a3;
          }
          QP::updateDateComponentsWithHolidayDisplayKey(v107, *v26, v14, v17, (_DWORD)v102 + v23, &v108);
          std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v107);
        }
        else
        {
          v97 = __ROR8__(*((_QWORD *)*a1 + 1), 1);
          QP::updateDateComponentsWithRelativeDateOffset((uint64_t)v14, v100, v15, (QP::DateComponents *)&v108, v27, 1, (v97 > 6) | (0xEu >> v97) & 1, v23);
        }
        if ((SDWORD1(v109) & 0x80000000) == 0)
          v20 = DWORD1(v109);
        else
          v20 = v111;
        goto LABEL_48;
      }
      v22 = *a1;
    }
    if (*((_BYTE *)v22 + 23)
      && QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v108, v14, v15) > CurrentTime)
    {
      v23 = 0xFFFFFFFFLL;
    }
    else
    {
      v23 = 0;
    }
    goto LABEL_37;
  }
  if (*((_BYTE *)*a1 + 24))
  {
    if (QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v108, v14, v15) < CurrentTime)
    {
LABEL_31:
      *a4 = 0;
      return std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](v116, 0);
    }
  }
  else if (*((_BYTE *)*a1 + 23)
         && QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v108, v14, v15) > CurrentTime)
  {
    goto LABEL_31;
  }
  if (*((_DWORD *)*a2 + 2) == 2 && *((_DWORD *)*a3 + 2) == 2 && v19 != -1)
  {
    AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v108, v14, v15);
    v25 = AbsoluteTime >= QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v112, v14, v15) || v18;
    if ((v25 & 1) == 0)
      goto LABEL_31;
    goto LABEL_60;
  }
LABEL_48:
  if (v19 == -1)
  {
    v31 = *a2;
    v32 = *((_DWORD *)*a2 + 2);
    v33 = (v32 - 1) > 0x3F || ((1 << (v32 - 1)) & 0x8000000008008001) == 0;
    if (v33 && v32 != 102)
    {
      v98 = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v108, v14, v15);
      v105 = CFDateCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v98);
      v99 = __ROR8__(*((_QWORD *)*a1 + 1), 1);
      QP::updateDateComponentsWithRelativeUnitOffset((uint64_t)v14, v100, v105, (QP::DateComponents *)&v112, *((_DWORD *)*a2 + 2), 0, (v99 > 6) | (0xEu >> v99) & 1);
      nlp::CFScopedPtr<__CFDate const*>::reset((const void **)&v105, 0);
    }
    else
    {
      v34 = a1[3];
      v106[0] = a1[2];
      v106[1] = v34;
      if (v34)
      {
        v35 = (unint64_t *)((char *)v34 + 8);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
        v31 = *a2;
      }
      QP::updateDateComponentsWithHolidayDisplayKey(v106, *v31, v14, v17, v20, &v112);
      std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v106);
    }
  }
LABEL_60:
  v37 = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v108, v14, v15);
  if (v37 < QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v112, v14, v15))
  {
    v39 = *a2;
    v40 = *((_DWORD *)*a2 + 2);
    v41 = (v40 - 1) > 0x3F || ((1 << (v40 - 1)) & 0x8000000008008001) == 0;
    if (!v41 || v40 == 102)
    {
      v42 = a1[3];
      v104[0] = a1[2];
      v104[1] = v42;
      if (v42)
      {
        v43 = (unint64_t *)((char *)v42 + 8);
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
        v39 = *a2;
      }
      QP::updateDateComponentsWithHolidayDisplayKey(v104, *v39, v14, v38, v20, &v112);
      if (v42)
      {
        v45 = (unint64_t *)((char *)v42 + 8);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          (*(void (**)(QP::HolidayReference *))(*(_QWORD *)v42 + 16))(v42);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v42);
        }
      }
    }
    else
    {
      v47 = __ROR8__(*((_QWORD *)*a1 + 1), 1);
      QP::updateDateComponentsWithRelativeDateOffset((uint64_t)v14, v100, v15, (QP::DateComponents *)&v112, v40, 1, (v47 > 6) | (0xEu >> v47) & 1, (v20 - (_DWORD)v102));
    }
    v48 = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v108, v14, v15);
    if (v48 < QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v112, v14, v15))
    {
      v50 = *a2;
      v51 = *((_DWORD *)*a2 + 2);
      v52 = (v51 - 1) > 0x3F || ((1 << (v51 - 1)) & 0x8000000008008001) == 0;
      if (!v52 || v51 == 102)
      {
        v53 = a1[3];
        v103[0] = a1[2];
        v103[1] = v53;
        if (v53)
        {
          v54 = (unint64_t *)((char *)v53 + 8);
          do
            v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
          v50 = *a2;
        }
        QP::updateDateComponentsWithHolidayDisplayKey(v103, *v50, v14, v49, v20 - 1, &v112);
        std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)v103);
      }
      else
      {
        v96 = __ROR8__(*((_QWORD *)*a1 + 1), 1);
        QP::updateDateComponentsWithRelativeDateOffset((uint64_t)v14, v100, v15, (QP::DateComponents *)&v112, v51, 1, (v96 > 6) | (0xEu >> v96) & 1, 0xFFFFFFFFLL);
      }
    }
  }
LABEL_86:
  v56 = *((unsigned __int16 *)*a2 + 6);
  if (v56 == 5)
  {
    v57 = 0xFFFFFFFFLL;
  }
  else
  {
    if (v56 != 6)
      goto LABEL_91;
    v57 = 1;
  }
  QP::updateDateComponentsWithRelativeUnitOffset(*((_QWORD *)*a1 + 10), *((_QWORD *)*a1 + 13), *((const __CFDate **)*a1 + 9), (QP::DateComponents *)&v112, *((_DWORD *)*a2 + 2), v57, 0);
LABEL_91:
  if ((QP::DateComponents::isEmpty((QP::DateComponents *)&v108) & 1) == 0)
  {
    v58 = *((unsigned __int16 *)*a3 + 6);
    if (v58 == 5)
    {
      v59 = 0xFFFFFFFFLL;
      goto LABEL_96;
    }
    if (v58 == 6)
    {
      v59 = 1;
LABEL_96:
      QP::updateDateComponentsWithRelativeUnitOffset(*((_QWORD *)*a1 + 10), *((_QWORD *)*a1 + 13), *((const __CFDate **)*a1 + 9), (QP::DateComponents *)&v108, *((_DWORD *)*a3 + 2), v59, 0);
    }
  }
  if ((QP::DateComponents::isEmpty((QP::DateComponents *)((char *)*a2 + 124)) & 1) != 0)
  {
    v60 = *a1;
    v61 = (std::__shared_weak_count *)a1[1];
    v101[0] = v60;
    v101[1] = v61;
    if (v61)
    {
      p_shared_owners = (unint64_t *)&v61->__shared_owners_;
      do
        v63 = __ldxr(p_shared_owners);
      while (__stxr(v63 + 1, p_shared_owners));
    }
    v64.n128_f64[0] = QP::resolveDateComponents(v101, &v112, &v108);
    if (v61)
    {
      v65 = (unint64_t *)&v61->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v61->__on_zero_shared)(v61, v64);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    v67 = operator new();
    *(_QWORD *)v67 = 0;
    *(_DWORD *)(v67 + 8) = 0;
    *(_WORD *)(v67 + 12) = 0;
    *(_DWORD *)(v67 + 16) = 0;
    *(_QWORD *)&v68 = -1;
    *((_QWORD *)&v68 + 1) = -1;
    *(_OWORD *)(v67 + 20) = v68;
    *(_OWORD *)(v67 + 36) = v68;
    *(_OWORD *)(v67 + 52) = v68;
    *(_OWORD *)(v67 + 68) = v68;
    *(_OWORD *)(v67 + 84) = v68;
    *(_OWORD *)(v67 + 100) = v68;
    *(_OWORD *)(v67 + 116) = v68;
    *(_OWORD *)(v67 + 132) = v68;
    *(_OWORD *)(v67 + 148) = v68;
    *(_OWORD *)(v67 + 160) = v68;
    std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](v116, (const void **)v67);
    v69 = v116[0];
    v70 = v115;
    v72 = v113;
    v71 = v114;
    *(_OWORD *)((char *)v116[0] + 20) = v112;
    *(_OWORD *)((char *)v69 + 36) = v72;
    *(_OWORD *)((char *)v69 + 52) = v71;
    *((_DWORD *)v69 + 17) = v70;
    v73 = v109;
    *(_OWORD *)(v69 + 9) = v108;
    *(_OWORD *)(v69 + 11) = v73;
    *(_OWORD *)(v69 + 13) = v110;
    *((_DWORD *)v69 + 30) = v111;
    v74 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
    *((_DWORD *)v69 + 2) = 4;
    v75 = CFStringCreateWithFormat(*v74, 0, CFSTR("%@::%@"), **a2, **a3);
    v105 = (const __CFDate *)v75;
    QP::DatePeriod::setDisplayKey(v116[0], v75);
    if (v75)
      CFRelease(v75);
  }
  else
  {
    v76 = operator new();
    *(_QWORD *)v76 = 0;
    *(_DWORD *)(v76 + 8) = 0;
    *(_WORD *)(v76 + 12) = 0;
    *(_DWORD *)(v76 + 16) = 0;
    *(_QWORD *)&v77 = -1;
    *((_QWORD *)&v77 + 1) = -1;
    *(_OWORD *)(v76 + 20) = v77;
    *(_OWORD *)(v76 + 36) = v77;
    *(_OWORD *)(v76 + 52) = v77;
    *(_OWORD *)(v76 + 68) = v77;
    *(_OWORD *)(v76 + 84) = v77;
    *(_OWORD *)(v76 + 100) = v77;
    *(_OWORD *)(v76 + 116) = v77;
    *(_OWORD *)(v76 + 132) = v77;
    *(_OWORD *)(v76 + 148) = v77;
    *(_OWORD *)(v76 + 160) = v77;
    std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](v116, (const void **)v76);
    v79 = 0;
    v80 = v116[0];
    v81 = (QP *)((char *)v116[0] + 20);
    v83 = v113;
    v82 = v114;
    v84 = v115;
    *(_OWORD *)((char *)v116[0] + 20) = v112;
    *(_OWORD *)((char *)v80 + 36) = v83;
    *((_DWORD *)v80 + 17) = v84;
    *(_OWORD *)((char *)v80 + 52) = v82;
    v85 = v109;
    *(_OWORD *)(v80 + 9) = v108;
    *(_OWORD *)(v80 + 11) = v85;
    *(_OWORD *)(v80 + 13) = v110;
    *((_DWORD *)v80 + 30) = v111;
    v86 = *(_OWORD *)((char *)*a2 + 124);
    v87 = *(_OWORD *)((char *)*a2 + 140);
    v88 = *(_OWORD *)((char *)*a2 + 156);
    *((_DWORD *)v80 + 43) = *((_DWORD *)*a2 + 43);
    *(_OWORD *)((char *)v80 + 156) = v88;
    *(_OWORD *)((char *)v80 + 140) = v87;
    *(_OWORD *)((char *)v80 + 124) = v86;
    *((_DWORD *)v80 + 2) = 4;
    LOWORD(v84) = *((_WORD *)*a2 + 6);
    *((_WORD *)v80 + 6) = v84;
    v89 = v84 - 1;
    if (v89 <= 7u)
      v79 = dword_218EA0224[(__int16)v89];
    *((_DWORD *)v80 + 4) = v79;
    v90 = QP::copyDisplayKeyForOrdinalDate(v81, (const QP::DateComponents *)((char *)v80 + 124), v78);
    v105 = (const __CFDate *)v90;
    v91 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], **a3);
    v102 = Copy;
    v93 = CFStringCreateWithFormat(v91, 0, CFSTR("%@::%@"), v90, Copy);
    v101[2] = v93;
    QP::DatePeriod::setDisplayKey(v116[0], v93);
    if (v93)
      CFRelease(v93);
    if (Copy)
      CFRelease(Copy);
    if (v90)
      CFRelease(v90);
  }
  v94 = v116[0];
  v116[0] = 0;
  *a4 = v94;
  return std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](v116, 0);
}

void sub_218E82110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  nlp::CFScopedPtr<__CFDate const*>::reset((const void **)va, 0);
  std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)(v12 - 120), 0);
  _Unwind_Resume(a1);
}

void QP::DateConverter::mergeTime(uint64_t a1@<X1>, uint64_t a2@<X2>, __int16 a3@<W3>, const void ***a4@<X8>)
{
  uint64_t v8;
  __int128 v9;
  int v10;
  const void **v11;
  __int128 v12;
  int v13;
  const void *v14;
  int v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;

  *a4 = 0;
  v8 = operator new();
  *(_QWORD *)v8 = 0;
  *(_DWORD *)(v8 + 8) = 0;
  *(_WORD *)(v8 + 12) = 0;
  *(_DWORD *)(v8 + 16) = 0;
  *(_QWORD *)&v9 = -1;
  *((_QWORD *)&v9 + 1) = -1;
  *(_OWORD *)(v8 + 20) = v9;
  *(_OWORD *)(v8 + 36) = v9;
  *(_OWORD *)(v8 + 52) = v9;
  *(_OWORD *)(v8 + 68) = v9;
  *(_OWORD *)(v8 + 84) = v9;
  *(_OWORD *)(v8 + 100) = v9;
  *(_OWORD *)(v8 + 116) = v9;
  *(_OWORD *)(v8 + 132) = v9;
  *(_OWORD *)(v8 + 148) = v9;
  *(_OWORD *)(v8 + 160) = v9;
  std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](a4, (const void **)v8);
  v10 = *(_DWORD *)(*(_QWORD *)a1 + 48);
  v17 = *(_OWORD *)(*(_QWORD *)a1 + 72);
  v18 = *(_OWORD *)(*(_QWORD *)a1 + 88);
  v19 = *(_OWORD *)(*(_QWORD *)a1 + 104);
  v20 = *(_DWORD *)(*(_QWORD *)a1 + 120);
  if (v10 < 0 && *(int *)(*(_QWORD *)a2 + 48) >= 0)
    v10 = *(_DWORD *)(*(_QWORD *)a2 + 48);
  v11 = *a4;
  v12 = *(_OWORD *)(*(_QWORD *)a1 + 52);
  v16 = *(_DWORD *)(*(_QWORD *)a1 + 68);
  v13 = *(_DWORD *)(*(_QWORD *)a1 + 44);
  v14 = *(const void **)(*(_QWORD *)a1 + 36);
  *(_OWORD *)((char *)v11 + 20) = *(_OWORD *)(*(_QWORD *)a1 + 20);
  *(const void **)((char *)v11 + 36) = v14;
  *((_DWORD *)v11 + 11) = v13;
  *((_DWORD *)v11 + 12) = v10;
  *(_OWORD *)((char *)v11 + 52) = v12;
  *((_DWORD *)v11 + 17) = v16;
  *((_DWORD *)v11 + 30) = v20;
  *(_OWORD *)(v11 + 13) = v19;
  *(_OWORD *)(v11 + 11) = v18;
  *(_OWORD *)(v11 + 9) = v17;
  *((_DWORD *)v11 + 2) = 2;
  *((_WORD *)v11 + 6) = a3;
  if ((unsigned __int16)(a3 - 1) > 7u)
    v15 = 0;
  else
    v15 = dword_218EA0224[(__int16)(a3 - 1)];
  *((_DWORD *)v11 + 4) = v15;
  QP::DatePeriod::setDisplayKey(v11, CFSTR("FORMATTED"));
}

void sub_218E8235C(_Unwind_Exception *a1)
{
  const void ***v1;

  std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void QP::DateConverter::merge(QP::HolidayReference **a1@<X0>, const __CFString ***a2@<X1>, CFStringRef **a3@<X2>, __int16 a4@<W3>, const void ***a5@<X8>)
{
  const __CFString **v10;
  CFStringRef *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  CFStringRef *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  const __CFString **v24;
  CFStringRef *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  CFStringRef *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  const __CFString **v35;
  CFStringRef *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  CFStringRef *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  _QWORD v47[2];
  const __CFString **v48;
  std::__shared_weak_count *v49;
  CFStringRef *v50[2];
  const __CFString **v51;
  std::__shared_weak_count *v52;
  uint64_t v53[2];
  const __CFString **v54;
  std::__shared_weak_count *v55;

  v10 = *a2;
  if ((QP::DateComponents::hasDate((QP::DateComponents *)((char *)*a2 + 20))
     || QP::DateComponents::hasDate((QP::DateComponents *)(v10 + 9)))
    && ((v11 = *a3, QP::DateComponents::isTime((QP::DateComponents *)((char *)*a3 + 20)))
     || QP::DateComponents::isTime((QP::DateComponents *)(v11 + 9))))
  {
    v12 = (std::__shared_weak_count *)a2[1];
    v54 = *a2;
    v55 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *a3;
    v16 = (std::__shared_weak_count *)a3[1];
    v53[0] = (uint64_t)v15;
    v53[1] = (uint64_t)v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    QP::DateConverter::mergeDateTime(a1, (uint64_t)&v54, v53, a4, a5);
    if (v16)
    {
      v19 = (unint64_t *)&v16->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v21 = v55;
    if (v55)
    {
      v22 = (unint64_t *)&v55->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
LABEL_57:
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  else
  {
    v24 = *a2;
    if ((QP::DateComponents::hasDate((QP::DateComponents *)((char *)*a2 + 20))
       || QP::DateComponents::hasDate((QP::DateComponents *)(v24 + 9)))
      && ((v25 = *a3, QP::DateComponents::hasDate((QP::DateComponents *)((char *)*a3 + 20)))
       || QP::DateComponents::hasDate((QP::DateComponents *)(v25 + 9))))
    {
      v26 = (std::__shared_weak_count *)a2[1];
      v51 = *a2;
      v52 = v26;
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      v29 = a3[1];
      v50[0] = *a3;
      v50[1] = v29;
      if (v29)
      {
        v30 = (unint64_t *)(v29 + 1);
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      QP::DateConverter::mergeDate(a1, &v51, v50, a5);
      if (v29)
      {
        v32 = (unint64_t *)(v29 + 1);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(CFStringRef *))(*v29)->data)(v29);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v29);
        }
      }
      v21 = v52;
      if (v52)
      {
        v34 = (unint64_t *)&v52->__shared_owners_;
        do
          v23 = __ldaxr(v34);
        while (__stlxr(v23 - 1, v34));
        goto LABEL_57;
      }
    }
    else
    {
      v35 = *a2;
      if (!QP::DateComponents::isTime((QP::DateComponents *)((char *)*a2 + 20))
        && !QP::DateComponents::isTime((QP::DateComponents *)(v35 + 9))
        || (v36 = *a3, !QP::DateComponents::isTime((QP::DateComponents *)((char *)*a3 + 20)))
        && !QP::DateComponents::isTime((QP::DateComponents *)(v36 + 9)))
      {
        *a5 = 0;
        return;
      }
      v37 = (std::__shared_weak_count *)a2[1];
      v48 = *a2;
      v49 = v37;
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      v40 = *a3;
      v41 = (std::__shared_weak_count *)a3[1];
      v47[0] = v40;
      v47[1] = v41;
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      QP::DateConverter::mergeTime((uint64_t)&v48, (uint64_t)v47, a4, a5);
      if (v41)
      {
        v44 = (unint64_t *)&v41->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v21 = v49;
      if (v49)
      {
        v46 = (unint64_t *)&v49->__shared_owners_;
        do
          v23 = __ldaxr(v46);
        while (__stlxr(v23 - 1, v46));
        goto LABEL_57;
      }
    }
  }
}

void sub_218E82698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<QP::ParserConfiguration>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t QP::DateConverter::resolveDateComponentsAsRange(uint64_t a1, int a2, int a3, __int128 *a4, __int128 *a5, uint64_t a6, int a7)
{
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  const __CFDate *v16;
  unint64_t v17;
  unsigned int v18;
  QP::DateComponents *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;

  if (a7)
  {
    v12 = a4[1];
    v31 = *a4;
    v32 = v12;
    v33 = a4[2];
    v34 = *((_DWORD *)a4 + 12);
    v13 = a5[1];
    v27 = *a5;
    v28 = v13;
    v29 = a5[2];
    v30 = *((_DWORD *)a5 + 12);
    v14 = *(_QWORD *)(*(_QWORD *)a1 + 104);
    v15 = *(_QWORD *)(*(_QWORD *)a1 + 88);
    v16 = *(const __CFDate **)(*(_QWORD *)a1 + 72);
    if (QP::DateComponents::isEmpty((QP::DateComponents *)&v27))
    {
      switch(a2)
      {
        case 5:
          goto LABEL_8;
        case 6:
          v17 = __ROR8__(*(_QWORD *)(*(_QWORD *)a1 + 8), 1);
          v18 = (v17 > 6) | (0xEu >> v17) & 1;
          v19 = (QP::DateComponents *)&v31;
          goto LABEL_11;
        case 7:
          goto LABEL_9;
        case 8:
          v27 = v31;
          v28 = v32;
          v29 = v33;
          v30 = v34;
          *(_QWORD *)&v22 = -1;
          *((_QWORD *)&v22 + 1) = -1;
          v31 = v22;
          v32 = v22;
          v33 = v22;
          v34 = -1;
          v23 = __ROR8__(*(_QWORD *)(*(_QWORD *)a1 + 8), 1);
          v18 = (v23 > 6) | (0xEu >> v23) & 1;
          v19 = (QP::DateComponents *)&v27;
LABEL_11:
          QP::updateDateComponentsWithRelativeUnitOffset(v15, v14, v16, v19, a3, 1, v18);
          break;
        default:
          goto LABEL_12;
      }
      goto LABEL_12;
    }
    switch(a2)
    {
      case 8:
        goto LABEL_8;
      case 7:
LABEL_9:
        v30 = -1;
        *(_QWORD *)&v21 = -1;
        *((_QWORD *)&v21 + 1) = -1;
        v28 = v21;
        v29 = v21;
        v27 = v21;
        break;
      case 5:
LABEL_8:
        v27 = v31;
        v28 = v32;
        v29 = v33;
        v30 = v34;
        *(_QWORD *)&v20 = -1;
        *((_QWORD *)&v20 + 1) = -1;
        v31 = v20;
        v32 = v20;
        v33 = v20;
        v34 = -1;
        break;
    }
LABEL_12:
    v24 = v32;
    *a4 = v31;
    a4[1] = v24;
    a4[2] = v33;
    *((_DWORD *)a4 + 12) = v34;
    v25 = v28;
    *a5 = v27;
    a5[1] = v25;
    a5[2] = v29;
    *((_DWORD *)a5 + 12) = v30;
  }
  return 1;
}

void QP::DateConverter::resolveDate(QP::HolidayReference **a1@<X0>, const __CFString ***a2@<X1>, int a3@<W2>, BOOL *a4@<X3>, const void ***a5@<X8>)
{
  const __CFDate *v10;
  __CFCalendar *v11;
  double CurrentTime;
  const __CFString **v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  double AbsoluteTime;
  int v19;
  CFTypeRef v20;
  int v21;
  _BOOL4 v22;
  char v24;
  _BOOL4 v25;
  int v26;
  _BOOL4 v31;
  int v32;
  BOOL v33;
  int v34;
  int v35;
  int v36;
  CFAbsoluteTime v37;
  uint64_t v38;
  __int128 v39;
  CFTypeRef *v40;
  __int128 v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  CFAbsoluteTime v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int16 v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  int v54;
  __int128 v55;
  QP::HolidayReference *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  QP::HolidayReference *v61;
  const void **v62;
  BOOL v63;
  BOOL v64;
  char v65;
  uint64_t v66;
  int v67;
  unint64_t v68;
  unsigned int v69;
  int32x4_t v70;
  uint16x4_t v71;
  uint64_t v72;
  __int128 v73;
  unint64_t v74;
  double v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  unint64_t v79;
  int32x4_t v80;
  int16x4_t v81;
  uint64_t v82;
  unint64_t v83;
  double v84;
  BOOL v85;
  double v86;
  double v87;
  uint64_t v88;
  __int128 v89;
  const void **v90;
  int v91;
  int v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  int v99;
  _BOOL4 v100;
  _BOOL4 v101;
  BOOL *v102;
  _BOOL4 v103;
  uint64_t v104;
  QP::HolidayReference *v105[2];
  int v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  int v110;
  int v111;
  CFTypeRef cf;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  int v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  int v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  int v124;

  *a5 = 0;
  v10 = (const __CFDate *)*((_QWORD *)*a1 + 9);
  v11 = (__CFCalendar *)*((_QWORD *)*a1 + 11);
  v104 = *((_QWORD *)*a1 + 13);
  CurrentTime = getCurrentTime(v11, v10);
  v102 = a4;
  v13 = *a2;
  v14 = *(_OWORD *)((char *)*a2 + 20);
  v15 = *(_OWORD *)((char *)*a2 + 52);
  v122 = *(_OWORD *)((char *)*a2 + 36);
  v123 = v15;
  v124 = *((_DWORD *)v13 + 17);
  v121 = v14;
  v16 = *(_OWORD *)(v13 + 11);
  v117 = *(_OWORD *)(v13 + 9);
  v118 = v16;
  v119 = *(_OWORD *)(v13 + 13);
  v120 = *((_DWORD *)v13 + 30);
  v17 = *(_OWORD *)((char *)v13 + 140);
  v113 = *(_OWORD *)((char *)v13 + 124);
  v114 = v17;
  v115 = *(_OWORD *)((char *)v13 + 156);
  v116 = *((_DWORD *)v13 + 43);
  AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v121, v11, v10);
  v19 = *((_DWORD *)*a2 + 2);
  v20 = **a2;
  if (v20)
    v20 = CFRetain(v20);
  v21 = *((_DWORD *)*a2 + 2);
  cf = v20;
  if (v21 < 6)
  {
    v103 = 0;
  }
  else
  {
    v22 = v21 < 0x13 || v21 < 0x1F || (v21 - 55) < 0xC;
    v103 = v22;
  }
  v24 = 1;
  if (((v19 - 28) > 0x3D || ((1 << (v19 - 28)) & 0x2000001002000001) == 0)
    && v19 != 16)
  {
    v24 = 0;
  }
  if (v21 < 31)
  {
    v101 = 0;
  }
  else
  {
    v25 = v21 < 0x35 || (v21 - 67) < 0x16;
    v101 = v25;
  }
  v26 = 1;
  if ((a3 - 4) >= 5
    && !*((_BYTE *)*a1 + 28)
    && ((v21 - 1) > 0x3F || ((1 << (v21 - 1)) & 0x8000000008008001) == 0)
    && v21 != 102)
  {
    v26 = 0;
  }
  v99 = v26;
  v31 = (int)v123 >= 0 && v123 < 0 && SDWORD2(v123) < 0 && SDWORD1(v123) < 0 && v124 < 0;
  v100 = v31;
  v32 = HIDWORD(v122);
  if ((DWORD2(v121) & 0x80000000) != 0 && (DWORD1(v121) & 0x80000000) != 0 && (v121 & 0x80000000) != 0)
    goto LABEL_52;
  v33 = v21 != 121 && v122 < 0;
  v34 = v103;
  if (!v33)
    v34 = 1;
  if (((v101 | v34) & 1) != 0)
  {
LABEL_52:
    if ((HIDWORD(v122) & 0x80000000) != 0)
      goto LABEL_77;
    goto LABEL_72;
  }
  LODWORD(v107) = 0;
  v111 = 0;
  CFCalendarDecomposeAbsoluteTime(v11, AbsoluteTime, "Ha", &v107, &v111);
  if (DWORD2(v121) != -1 && !QP::DateComponents::isTime((QP::DateComponents *)&v121))
  {
LABEL_66:
    v35 = v107;
    if ((int)v107 > 6)
      goto LABEL_69;
    goto LABEL_67;
  }
  if (AbsoluteTime >= CurrentTime || !*((_BYTE *)*a1 + 26))
  {
    if (AbsoluteTime > CurrentTime && *((_BYTE *)*a1 + 27))
    {
      if ((int)v107 < 13)
        goto LABEL_69;
      v36 = v107 - 12;
      goto LABEL_68;
    }
    goto LABEL_66;
  }
  v35 = v107;
  if ((int)v107 <= 11)
  {
LABEL_67:
    v36 = v35 + 12;
LABEL_68:
    DWORD2(v121) = v36;
  }
LABEL_69:
  v37 = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v121, v11, v10);
  CFCalendarDecomposeAbsoluteTime(v11, v37, "H", &v107);
  DWORD2(v121) = v107;
  HIDWORD(v122) = -1;
  AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v121, v11, v10);
  if (!*a5)
  {
    v38 = operator new();
    *(_QWORD *)v38 = 0;
    *(_DWORD *)(v38 + 8) = 0;
    *(_WORD *)(v38 + 12) = 0;
    *(_DWORD *)(v38 + 16) = 0;
    *(_QWORD *)&v39 = -1;
    *((_QWORD *)&v39 + 1) = -1;
    *(_OWORD *)(v38 + 20) = v39;
    *(_OWORD *)(v38 + 36) = v39;
    *(_OWORD *)(v38 + 52) = v39;
    *(_OWORD *)(v38 + 68) = v39;
    *(_OWORD *)(v38 + 84) = v39;
    *(_OWORD *)(v38 + 100) = v39;
    *(_OWORD *)(v38 + 116) = v39;
    *(_OWORD *)(v38 + 132) = v39;
    *(_OWORD *)(v38 + 148) = v39;
    *(_OWORD *)(v38 + 160) = v39;
    std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](a5, (const void **)v38);
  }
  if ((HIDWORD(v122) & 0x80000000) == 0)
  {
LABEL_72:
    v111 = 0;
    if (v32 == 8)
    {
      v40 = (CFTypeRef *)*a2;
      v41 = *(_OWORD *)((char *)*a2 + 36);
      v107 = *(_OWORD *)((char *)*a2 + 20);
      v108 = v41;
      v109 = *(_OWORD *)((char *)v40 + 52);
      v110 = *((_DWORD *)v40 + 17);
      *(_QWORD *)&v107 = -1;
      DWORD2(v107) = -1;
      HIDWORD(v108) = -1;
      if ((QP::DateComponents::isEmpty((QP::DateComponents *)&v107) & 1) == 0)
      {
        v42 = __ROR8__(*((_QWORD *)*a1 + 1), 1);
        QP::updateDateComponentsWithRelativeUnitOffset((uint64_t)v11, v104, v10, (QP::DateComponents *)&v107, v19, 0, (v42 > 6) | (0xEu >> v42) & 1);
        HIDWORD(v108) = HIDWORD(v122);
        DWORD2(v107) = DWORD2(v121);
        *(_QWORD *)&v107 = v121;
        v122 = v108;
        v123 = v109;
        v124 = v110;
        v121 = v107;
        AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v121, v11, v10);
      }
    }
    CFCalendarDecomposeAbsoluteTime(v11, AbsoluteTime, "H", &v111);
    DWORD2(v121) = v111;
    HIDWORD(v122) = -1;
    if (!*a5)
    {
      v43 = operator new();
      *(_QWORD *)v43 = 0;
      *(_DWORD *)(v43 + 8) = 0;
      *(_WORD *)(v43 + 12) = 0;
      *(_DWORD *)(v43 + 16) = 0;
      *(_QWORD *)&v44 = -1;
      *((_QWORD *)&v44 + 1) = -1;
      *(_OWORD *)(v43 + 20) = v44;
      *(_OWORD *)(v43 + 36) = v44;
      *(_OWORD *)(v43 + 52) = v44;
      *(_OWORD *)(v43 + 68) = v44;
      *(_OWORD *)(v43 + 84) = v44;
      *(_OWORD *)(v43 + 100) = v44;
      *(_OWORD *)(v43 + 116) = v44;
      *(_OWORD *)(v43 + 132) = v44;
      *(_OWORD *)(v43 + 148) = v44;
      *(_OWORD *)(v43 + 160) = v44;
      std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](a5, (const void **)v43);
    }
  }
LABEL_77:
  if ((HIDWORD(v118) & 0x80000000) == 0)
  {
    LODWORD(v107) = 0;
    v45 = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v117, v11, v10);
    CFCalendarDecomposeAbsoluteTime(v11, v45, "H", &v107);
    DWORD2(v117) = v107;
    HIDWORD(v118) = -1;
    if (!*a5)
    {
      v46 = operator new();
      *(_QWORD *)v46 = 0;
      *(_DWORD *)(v46 + 8) = 0;
      *(_WORD *)(v46 + 12) = 0;
      *(_DWORD *)(v46 + 16) = 0;
      *(_QWORD *)&v47 = -1;
      *((_QWORD *)&v47 + 1) = -1;
      *(_OWORD *)(v46 + 20) = v47;
      *(_OWORD *)(v46 + 36) = v47;
      *(_OWORD *)(v46 + 52) = v47;
      *(_OWORD *)(v46 + 68) = v47;
      *(_OWORD *)(v46 + 84) = v47;
      *(_OWORD *)(v46 + 100) = v47;
      *(_OWORD *)(v46 + 116) = v47;
      *(_OWORD *)(v46 + 132) = v47;
      *(_OWORD *)(v46 + 148) = v47;
      *(_OWORD *)(v46 + 160) = v47;
      std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](a5, (const void **)v46);
    }
  }
  v111 = 0;
  CFCalendarDecomposeAbsoluteTime(v11, AbsoluteTime, "y", &v111);
  v106 = 0;
  CFCalendarDecomposeAbsoluteTime(v11, CurrentTime, "y", &v106);
  v49 = a3 - 9;
  if ((v24 & 1) != 0
    || (v50 = *((_DWORD *)*a2 + 2), (v50 - 1) <= 0x3F)
    && ((1 << (v50 - 1)) & 0x8000000008008001) != 0
    || v50 == 102)
  {
    v51 = v111;
    if (v111 == v106)
    {
      v52 = v100;
      if (v49 < 0xFFFAu)
        v52 = 1;
      if (v52 != 1)
        goto LABEL_95;
      if (AbsoluteTime > CurrentTime)
      {
        if (*((_BYTE *)*a1 + 27) || (v53 = __ROR8__(*((_QWORD *)*a1 + 1), 1), v53 >= 7))
          v54 = -1;
        else
          v54 = dword_218EA0208[v53];
        goto LABEL_97;
      }
      if (AbsoluteTime < CurrentTime)
        v54 = *((unsigned __int8 *)*a1 + 26);
      else
LABEL_95:
        v54 = 0;
LABEL_97:
      v110 = -1;
      *(_QWORD *)&v55 = -1;
      *((_QWORD *)&v55 + 1) = -1;
      v108 = v55;
      v109 = v55;
      v107 = v55;
      v56 = a1[3];
      v105[0] = a1[2];
      v105[1] = v56;
      if (v56)
      {
        v57 = (unint64_t *)((char *)v56 + 8);
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      QP::updateDateComponentsWithHolidayDisplayKey(v105, **a2, v11, v48, v54 + v51, &v121);
      if (v56)
      {
        v59 = (unint64_t *)((char *)v56 + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          (*(void (**)(QP::HolidayReference *))(*(_QWORD *)v56 + 16))(v56);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v56);
        }
      }
      if (QP::DateComponents::isEmpty((QP::DateComponents *)&v117)
        && (QP::DateComponents::isEmpty((QP::DateComponents *)&v107) & 1) == 0)
      {
        v117 = v107;
        v118 = v108;
        v119 = v109;
        v120 = v110;
      }
    }
  }
  v61 = *a1;
  if (*((_QWORD *)*a1 + 1) != 9)
  {
    if (!*((_BYTE *)v61 + 27))
    {
      v64 = *((_BYTE *)v61 + 26) == 0;
      v65 = v99;
      if (!v64)
        v65 = 1;
      if ((v65 & 1) == 0 && (QP::DateComponents::isEmpty((QP::DateComponents *)&v117) & 1) != 0)
        goto LABEL_177;
    }
    if (v103)
    {
      v66 = 0;
      goto LABEL_133;
    }
    v67 = v100;
    if (v49 < 0xFFFAu)
      v67 = 1;
    if (v67 != 1)
      goto LABEL_128;
    if (AbsoluteTime > CurrentTime)
    {
      if (*((_BYTE *)*a1 + 27) || (v68 = __ROR8__(*((_QWORD *)*a1 + 1), 1), v68 >= 7))
        v69 = -1;
      else
        v69 = dword_218EA0208[v68];
      goto LABEL_130;
    }
    if (AbsoluteTime < CurrentTime)
      v69 = *((unsigned __int8 *)*a1 + 26);
    else
LABEL_128:
      v69 = 0;
LABEL_130:
    if (v101)
      v66 = 0;
    else
      v66 = v69;
LABEL_133:
    if ((HIDWORD(v123) & 0x80000000) != 0)
    {
      v70.i64[0] = v122;
      v70.i64[1] = *(_QWORD *)((char *)&v123 + 4);
      v71.i32[0] = vmovn_s32(vcgtq_s32(v70, (int32x4_t)xmmword_218E9F890)).u32[0];
      v71.i32[1] = vmovn_s32(vcgtq_s32((int32x4_t)xmmword_218E9F890, v70)).i32[1];
      if ((vminv_u16(v71) & 1) == 0 || (HIDWORD(v121) & 0x80000000) != 0 || (v124 & 0x80000000) == 0 || (_DWORD)v66)
        goto LABEL_141;
    }
    else if ((_DWORD)v66 || v124 < 0)
    {
LABEL_141:
      if (!*a5)
      {
        v72 = operator new();
        *(_QWORD *)v72 = 0;
        *(_DWORD *)(v72 + 8) = 0;
        *(_WORD *)(v72 + 12) = 0;
        *(_DWORD *)(v72 + 16) = 0;
        *(_QWORD *)&v73 = -1;
        *((_QWORD *)&v73 + 1) = -1;
        *(_OWORD *)(v72 + 20) = v73;
        *(_OWORD *)(v72 + 36) = v73;
        *(_OWORD *)(v72 + 52) = v73;
        *(_OWORD *)(v72 + 68) = v73;
        *(_OWORD *)(v72 + 84) = v73;
        *(_OWORD *)(v72 + 100) = v73;
        *(_OWORD *)(v72 + 116) = v73;
        *(_OWORD *)(v72 + 132) = v73;
        *(_OWORD *)(v72 + 148) = v73;
        *(_OWORD *)(v72 + 160) = v73;
        std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](a5, (const void **)v72);
      }
      v74 = __ROR8__(*((_QWORD *)*a1 + 1), 1);
      QP::updateDateComponentsWithRelativeDateOffset((uint64_t)v11, *((_QWORD *)*a1 + 13), v10, (QP::DateComponents *)&v121, *((_DWORD *)*a2 + 2), v99, (v74 > 6) | (0xEu >> v74) & 1, v66);
    }
    if ((QP::DateComponents::isEmpty((QP::DateComponents *)&v117) & 1) != 0)
    {
LABEL_177:
      v62 = *a5;
      v63 = 1;
      goto LABEL_178;
    }
    if (v19 == 4)
      LOWORD(a3) = 0;
    v75 = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v117, v11, v10);
    if (v103)
    {
      v76 = 0;
      goto LABEL_160;
    }
    v77 = v100;
    if (v49 < 0xFFFAu)
      v77 = 1;
    if (v77 != 1)
      goto LABEL_156;
    if (v75 > CurrentTime)
    {
      v78 = -*((char *)*a1 + 27);
      goto LABEL_157;
    }
    if (v75 < CurrentTime)
      v78 = *((unsigned __int8 *)*a1 + 26);
    else
LABEL_156:
      v78 = 0;
LABEL_157:
    if (v101)
      v76 = 0;
    else
      v76 = v78;
LABEL_160:
    v79 = __ROR8__(*((_QWORD *)*a1 + 1), 1);
    QP::updateDateComponentsWithRelativeDateOffset((uint64_t)v11, *((_QWORD *)*a1 + 13), v10, (QP::DateComponents *)&v117, *((_DWORD *)*a2 + 2), 1, (v79 > 6) | (0xEu >> v79) & 1, v76);
    if ((QP::DateComponents::isEmpty((QP::DateComponents *)&v113) & 1) != 0 || *((_BYTE *)*a1 + 28))
    {
      if ((HIDWORD(v123) & 0x80000000) != 0)
      {
        v80.i64[0] = v122;
        v80.i64[1] = *(_QWORD *)((char *)&v123 + 4);
        v81.i32[0] = vmovn_s32(vcgtq_s32(v80, (int32x4_t)xmmword_218E9F890)).u32[0];
        v81.i32[1] = vmovn_s32(vcgtq_s32((int32x4_t)xmmword_218E9F890, v80)).i32[1];
        if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(v81, 0xFuLL))) & 1) != 0
          && (HIDWORD(v121) & 0x80000000) == 0
          && v124 < 0)
        {
          goto LABEL_174;
        }
      }
      else if ((v124 & 0x80000000) == 0)
      {
        goto LABEL_174;
      }
      v82 = 0;
      do
      {
        v83 = __ROR8__(*((_QWORD *)*a1 + 1), 1);
        QP::updateDateComponentsWithRelativeUnitOffset((uint64_t)v11, v104, v10, (QP::DateComponents *)&v121, v19, v82, (v83 > 6) | (0xEu >> v83) & 1);
        v84 = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v121, v11, v10);
        v85 = v84 < QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v117, v11, v10) || (int)v82 <= -2;
        v82 = (v82 - 1);
      }
      while (!v85);
    }
LABEL_174:
    v86 = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v121, v11, v10);
    v87 = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v117, v11, v10);
    v63 = v86 < v87;
    v62 = *a5;
    if (*a5 || v86 >= v87)
    {
LABEL_178:
      if (!v62)
        goto LABEL_183;
      goto LABEL_179;
    }
    goto LABEL_176;
  }
  v62 = *a5;
  if (!*a5)
  {
LABEL_176:
    v88 = operator new();
    *(_QWORD *)v88 = 0;
    *(_DWORD *)(v88 + 8) = 0;
    *(_WORD *)(v88 + 12) = 0;
    *(_DWORD *)(v88 + 16) = 0;
    *(_QWORD *)&v89 = -1;
    *((_QWORD *)&v89 + 1) = -1;
    *(_OWORD *)(v88 + 20) = v89;
    *(_OWORD *)(v88 + 36) = v89;
    *(_OWORD *)(v88 + 52) = v89;
    *(_OWORD *)(v88 + 68) = v89;
    *(_OWORD *)(v88 + 84) = v89;
    *(_OWORD *)(v88 + 100) = v89;
    *(_OWORD *)(v88 + 116) = v89;
    *(_OWORD *)(v88 + 132) = v89;
    *(_OWORD *)(v88 + 148) = v89;
    *(_OWORD *)(v88 + 160) = v89;
    std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](a5, (const void **)v88);
    goto LABEL_177;
  }
  v63 = 1;
LABEL_179:
  QP::DatePeriod::setDisplayKey(v62, (const __CFString *)cf);
  v90 = *a5;
  *((_DWORD *)v90 + 2) = v19;
  *((_WORD *)v90 + 6) = a3;
  if ((unsigned __int16)(a3 - 1) > 7u)
    v91 = 0;
  else
    v91 = dword_218EA0224[(__int16)(a3 - 1)];
  *((_DWORD *)v90 + 4) = v91;
  v92 = v124;
  v94 = v122;
  v93 = v123;
  *(_OWORD *)((char *)v90 + 20) = v121;
  *(_OWORD *)((char *)v90 + 36) = v94;
  *(_OWORD *)((char *)v90 + 52) = v93;
  *((_DWORD *)v90 + 17) = v92;
  v95 = v118;
  *(_OWORD *)(v90 + 9) = v117;
  *(_OWORD *)(v90 + 11) = v95;
  *(_OWORD *)(v90 + 13) = v119;
  *((_DWORD *)v90 + 30) = v120;
  v96 = v113;
  v97 = v114;
  v98 = v115;
  *((_DWORD *)v90 + 43) = v116;
  *(_OWORD *)((char *)v90 + 156) = v98;
  *(_OWORD *)((char *)v90 + 140) = v97;
  *(_OWORD *)((char *)v90 + 124) = v96;
LABEL_183:
  if (v102)
    *v102 = v63;
  if (cf)
    CFRelease(cf);
}

