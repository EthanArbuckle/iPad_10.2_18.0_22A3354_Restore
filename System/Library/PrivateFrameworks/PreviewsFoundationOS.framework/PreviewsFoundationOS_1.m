uint64_t sub_24483982C(uint64_t *a1, uint64_t (**a2)())
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *a2 = sub_24481D21C;
  a2[1] = (uint64_t (*)())v5;
  return result;
}

uint64_t sub_244839890(double a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t AssociatedConformanceWitness;
  char *v22;
  void (*v23)(char *, uint64_t);
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t (*)(), _QWORD *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36[16];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v3 = *(_QWORD **)v1;
  v4 = sub_2448EA734();
  v34 = *(_QWORD *)(v4 - 8);
  v35 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v33 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v3[17];
  v6 = v3[18];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = AssociatedTypeWitness;
  v11 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v30 - v14;
  v39 = *(_QWORD *)(v1 + v3[20]);
  v37 = v7;
  v38 = v6;
  type metadata accessor for DelayedInvocation.DelayedInvocationBox.State(255, v7, v6, v16);
  v17 = sub_2448EA5D8();
  swift_retain();
  v18 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v17);
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_2447B9000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/DelayedInvocation.swift", 129, 2, 92, 40, (uint64_t)"schedule(delay:)", 16, 2, (uint64_t)sub_24483A4EC, (uint64_t)v36, v17, (uint64_t)&type metadata for Identifier, v18);
  swift_release();
  v19 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 152);
  v31 = v40;
  v32 = v19;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v7, v6);
  v20 = v10;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v22 = v15;
  (*(void (**)(uint64_t, uint64_t, double))(AssociatedConformanceWitness + 8))(v20, AssociatedConformanceWitness, a1);
  v23 = *(void (**)(char *, uint64_t))(v9 + 8);
  v23(v13, v20);
  v24 = v33;
  sub_2448EA728();
  v25 = swift_allocObject();
  swift_weakInit();
  v26 = (_QWORD *)swift_allocObject();
  v26[2] = v7;
  v26[3] = v6;
  v27 = v31;
  v26[4] = v25;
  v26[5] = v27;
  v28 = *(void (**)(char *, char *, uint64_t (*)(), _QWORD *, uint64_t, uint64_t))(v6 + 32);
  swift_retain();
  v28(v22, v24, sub_24483A54C, v26, v7, v6);
  swift_release();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v24, v35);
  v23(v22, v20);
  return swift_release();
}

void sub_244839B78(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;

  if (qword_257389CA0 != -1)
    swift_once();
  v5 = (_QWORD *)((char *)off_25738DB00 + 16);
  v6 = (os_unfair_lock_s *)((char *)off_25738DB00 + 24);
  swift_retain();
  os_unfair_lock_lock(v6);
  sub_24483B130(v5, &v8);
  os_unfair_lock_unlock(v6);
  if (v2)
  {
    __break(1u);
  }
  else
  {
    v7 = v8;
    swift_release();
    *(_QWORD *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 24) = 0;
    *a2 = v7;
  }
}

uint64_t sub_244839C48(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v7 = a2;
    v8 = 0;
    sub_244839CAC(&v7, v4, v5, v6);
    return swift_release();
  }
  return result;
}

uint64_t sub_244839CAC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  void (*v13)(uint64_t);
  uint64_t v14;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  void (*v21)(uint64_t);

  v5 = *v4;
  v6 = *a1;
  v7 = *((_BYTE *)a1 + 8);
  v20 = *(uint64_t *)((char *)v4 + *(_QWORD *)(*v4 + 160));
  v8 = *(_QWORD *)(v5 + 144);
  v16 = *(_QWORD *)(v5 + 136);
  v17 = v8;
  v18 = v6;
  v19 = v7;
  type metadata accessor for DelayedInvocation.DelayedInvocationBox.State(255, v16, v8, a4);
  v9 = sub_2448EA5D8();
  swift_retain();
  v10 = __swift_instantiateConcreteTypeFromMangledName(qword_25738DA78);
  v11 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v9);
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_2447B9000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/DelayedInvocation.swift", 129, 2, 105, 52, (uint64_t)"invoke(expectedSeed:)", 21, 2, (uint64_t)sub_24483A498, (uint64_t)v15, v9, v10, v11);
  result = swift_release();
  v13 = v21;
  if (v21)
  {
    v14 = swift_retain();
    v13(v14);
    sub_2447C8F84((uint64_t)v13);
    return sub_2447C8F84((uint64_t)v13);
  }
  return result;
}

uint64_t sub_244839DD0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t (**a4)()@<X8>)
{
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((*(_BYTE *)(result + 24) & 1) == 0 && ((a3 & 1) != 0 || *(_QWORD *)(result + 16) == a2))
  {
    v8 = *(_QWORD *)result;
    v7 = *(_QWORD *)(result + 8);
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 1;
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v8;
    *(_QWORD *)(v6 + 24) = v7;
    result = swift_retain();
    v5 = sub_24481D21C;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  *a4 = v5;
  a4[1] = (uint64_t (*)())v6;
  return result;
}

uint64_t sub_244839E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[16];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *v4;
  v13 = *(uint64_t *)((char *)v4 + *(_QWORD *)(*v4 + 160));
  v6 = *(_QWORD *)(v5 + 144);
  v11 = *(_QWORD *)(v5 + 136);
  v12 = v6;
  type metadata accessor for DelayedInvocation.DelayedInvocationBox.State(255, v11, v6, a4);
  v7 = sub_2448EA5D8();
  swift_retain();
  v8 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v7);
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_2447B9000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/DelayedInvocation.swift", 129, 2, 131, 29, (uint64_t)"cancel()", 8, 2, (uint64_t)sub_24483A4DC, (uint64_t)v10, v7, MEMORY[0x24BEE4AE0] + 8, v8);
  return swift_release();
}

uint64_t sub_244839F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  char v6;

  v5 = 0;
  v6 = 1;
  return sub_244839CAC(&v5, a2, a3, a4);
}

uint64_t sub_244839F68()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 136) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152));
  return swift_release();
}

uint64_t sub_244839FA0()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 136) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152));
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t *sub_244839FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;

  v7 = *a4;
  v8 = *(_QWORD *)(*a4 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))((uint64_t)a4 + *(_QWORD *)(*a4 + 152), a1, v8);
  v9 = *(_QWORD *)(v7 + 144);
  v14[0] = a2;
  v14[1] = a3;
  v14[2] = 0;
  v15 = 1;
  v11 = type metadata accessor for DelayedInvocation.DelayedInvocationBox.State(0, v8, v9, v10);
  swift_retain();
  v12 = sub_24481320C(v14, v11);
  swift_release();
  *(uint64_t *)((char *)a4 + *(_QWORD *)(*a4 + 160)) = v12;
  return a4;
}

uint64_t *sub_24483A0A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;

  v6 = (uint64_t *)swift_allocObject();
  v7 = sub_244839FEC(a1, a2, a3, v6);
  swift_release();
  return v7;
}

uint64_t sub_24483A104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = v5;
  type metadata accessor for DelayedInvocation.DelayedInvocationBox(0, a4, a5, a4);
  *(_QWORD *)(v6 + 16) = sub_24483A0A0(a1, a2, a3);
  return v6;
}

uint64_t sub_24483A164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;

  v10 = swift_allocObject();
  type metadata accessor for DelayedInvocation.DelayedInvocationBox(0, a4, a5, v11);
  *(_QWORD *)(v10 + 16) = sub_24483A0A0(a1, a2, a3);
  return v10;
}

uint64_t sub_24483A1E8@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = (*(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)a1 + 16) + 80))();
  v5 = v4;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = v5;
  *a2 = sub_24481E54C;
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t type metadata accessor for DelayedInvocation()
{
  return objc_opt_self();
}

uint64_t method lookup function for DelayedInvocation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DelayedInvocation.__allocating_init<A>(scheduler:callback:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t type metadata accessor for DelayedInvocation.BaseDelayedInvocationBox()
{
  return objc_opt_self();
}

uint64_t sub_24483A2A4()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for DelayedInvocation.DelayedInvocationBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DelayedInvocation.DelayedInvocationBox);
}

uint64_t sub_24483A32C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t sub_24483A368(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  v5 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  return a1;
}

uint64_t sub_24483A3BC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t sub_24483A400(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_24483A448(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for DelayedInvocation.DelayedInvocationBox.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DelayedInvocation.DelayedInvocationBox.State);
}

uint64_t sub_24483A498@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v2;

  return sub_244839DD0(a1, *(_QWORD *)(v2 + 32), *(_BYTE *)(v2 + 40), a2);
}

uint64_t sub_24483A4B8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24483A4DC(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = 1;
  return result;
}

void sub_24483A4EC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_244839B78(a1, a2);
}

uint64_t sub_24483A504()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_24483A528()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24483A54C()
{
  uint64_t v0;

  return sub_244839C48(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_24483A558@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = sub_24481E54C;
  a2[1] = (uint64_t (*)())v5;
  return swift_retain();
}

uint64_t sub_24483A5AC()
{
  return 16;
}

__n128 sub_24483A5B8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_24483A5C4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_24483A5E4(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_24483A614(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_24483A630(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

uint64_t type metadata accessor for DelayedInvocation.DelayedInvocationBox.State.SchedulingState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DelayedInvocation.DelayedInvocationBox.State.SchedulingState);
}

uint64_t QueryResolver.queryResolverPublisher.getter()
{
  return 0;
}

uint64_t Optional<A>.resolutions.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t inited;
  unint64_t v15;

  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, a1);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a1);
    v12 = sub_2447C8E84(MEMORY[0x24BEE4AF8]);
  }
  else
  {
    (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 8))(&v15, v10, a2);
    v12 = v15;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A348);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2448ECF10;
  *(_QWORD *)(inited + 32) = v12;
  static QueryResolutionsBuilder.buildBlock(_:)(inited, a3);
  swift_setDeallocating();
  return swift_arrayDestroy();
}

uint64_t sub_24483A7C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return Optional<A>.resolutions.getter(a1, *(_QWORD *)(a2 - 8), a3);
}

uint64_t Weak<>.resolutions.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v9;

  swift_beginAccess();
  MEMORY[0x24951AE5C](v2 + 16);
  v5 = sub_2448EB508();
  Optional<A>.resolutions.getter(v5, a1, &v9);
  swift_unknownObjectRelease();
  v6 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A348);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2448ECF10;
  *(_QWORD *)(inited + 32) = v6;
  static QueryResolutionsBuilder.buildBlock(_:)(inited, a2);
  swift_setDeallocating();
  return swift_arrayDestroy();
}

uint64_t sub_24483A8A0@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return Weak<>.resolutions.getter(*(_QWORD *)(a1 - 8), a2);
}

uint64_t dispatch thunk of QueryResolver.resolutions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of QueryResolver.queryResolverPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t Identifier.init()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t result;

  if (qword_257389CA0 != -1)
    swift_once();
  v2 = off_25738DB00;
  v3 = (os_unfair_lock_s *)((char *)off_25738DB00 + 24);
  swift_retain();
  os_unfair_lock_lock(v3);
  v4 = v2[2];
  v2[2] = v4 + 1;
  os_unfair_lock_unlock(v3);
  result = swift_release();
  *a1 = v4;
  return result;
}

BOOL static Identifier.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t Identifier.description.getter()
{
  return sub_2448EBB5C();
}

uint64_t Identifier.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  unint64_t v20;
  void (*v21)(char *, uint64_t);
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  _QWORD *v27;
  _QWORD v28[3];
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  char v35;

  v30 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)v28 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  v13 = MEMORY[0x24BDAC7A8](v9);
  v15 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v28 - v16;
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v29 = a1;
  v18((char *)v28 - v16, a1, a2);
  if ((sub_2448EB208() & 1) != 0)
  {
    v21 = *(void (**)(char *, uint64_t))(v12 + 8);
    v21(v17, a2);
    goto LABEL_8;
  }
  v19 = sub_2448EB610();
  v28[2] = v28;
  MEMORY[0x24BDAC7A8](v19);
  v28[-4] = a2;
  v28[-3] = a3;
  v28[-2] = 10;
  v28[1] = a3;
  swift_getAssociatedConformanceWitness();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738DB10);
  sub_2448EACC8();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v17, a2);
  if ((v33 & 1) == 0)
  {
    v22 = v32;
    v23 = v31;
    v21 = *(void (**)(char *, uint64_t))(v12 + 8);
    v21(v15, a2);
    v34 = v23;
    if ((v22 & 1) == 0)
      goto LABEL_6;
LABEL_8:
    v25 = 0;
    v24 = 1;
    goto LABEL_9;
  }
  v20 = sub_24483B22C();
  sub_24483B270((uint64_t)v15, 10, MEMORY[0x24BEE4568], v20, (uint64_t)&v34);
  v21 = *(void (**)(char *, uint64_t))(v12 + 8);
  v21(v15, a2);
  if ((v35 & 1) != 0)
    goto LABEL_8;
LABEL_6:
  v24 = 0;
  v25 = v34;
LABEL_9:
  result = ((uint64_t (*)(uint64_t, uint64_t))v21)(v29, a2);
  v27 = v30;
  *v30 = v25;
  *((_BYTE *)v27 + 8) = v24;
  return result;
}

uint64_t Identifier.hash(into:)()
{
  return sub_2448EBD30();
}

uint64_t sub_24483AC6C()
{
  return 0x696669746E656469;
}

uint64_t sub_24483AC88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_2448EBBEC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_24483AD28()
{
  sub_24483B3BC();
  return sub_2448EBD9C();
}

uint64_t sub_24483AD50()
{
  sub_24483B3BC();
  return sub_2448EBDA8();
}

uint64_t Identifier.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738DB18);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24483B3BC();
  sub_2448EBD6C();
  sub_2448EBB08();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t Identifier.hashValue.getter()
{
  sub_2448EBD00();
  sub_2448EBD30();
  return sub_2448EBD3C();
}

uint64_t Identifier.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738DB28);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24483B3BC();
  sub_2448EBD60();
  if (!v2)
  {
    v9 = sub_2448EBAF0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_24483AFA8()
{
  return sub_2448EBB5C();
}

uint64_t sub_24483AFE8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Identifier.init(from:)(a1, a2);
}

uint64_t sub_24483AFFC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738DB18);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24483B3BC();
  sub_2448EBD6C();
  sub_2448EBB08();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_24483B0E4()
{
  uint64_t v0;
  uint64_t result;

  v0 = arc4random_uniform(0x2710u);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738DB58);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = v0;
  off_25738DB00 = (_UNKNOWN *)result;
  return result;
}

_QWORD *sub_24483B130@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = (*result)++;
  *a2 = v2;
  return result;
}

unsigned __int8 *sub_24483B144@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  int v7;
  BOOL v8;
  int v9;

  v7 = *result;
  if (v7 == 43)
  {
    v8 = a2-- < 1;
    if (v8)
      goto LABEL_15;
    if (result)
      ++result;
    else
      result = 0;
LABEL_12:
    v9 = 0;
    return (unsigned __int8 *)sub_24483B5CC(result, a2, a3, v9, a4, a5, a6);
  }
  if (v7 != 45)
    goto LABEL_12;
  v8 = a2-- < 1;
  if (!v8)
  {
    if (result)
      ++result;
    else
      result = 0;
    v9 = 1;
    return (unsigned __int8 *)sub_24483B5CC(result, a2, a3, v9, a4, a5, a6);
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

unsigned __int8 *sub_24483B1B4@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;

  v7 = *(_QWORD *)(v3 + 32);
  v8 = sub_24483B22C();
  return sub_24483B144(a1, a2, v7, MEMORY[0x24BEE4568], v8, a3);
}

unint64_t sub_24483B22C()
{
  unint64_t result;

  result = qword_25738DB08;
  if (!qword_25738DB08)
  {
    result = MEMORY[0x24951AC70](MEMORY[0x24BEE45A8], MEMORY[0x24BEE4568]);
    atomic_store(result, (unint64_t *)&qword_25738DB08);
  }
  return result;
}

uint64_t sub_24483B270@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v20[2];

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *))(v10 + 16))((char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_2448EAC98();
  v13 = v12;
  sub_2448EB508();
  if ((v13 & 0x1000000000000000) == 0)
  {
    if ((v13 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v15 = HIBYTE(v13) & 0xF;
    v20[0] = v11;
    v20[1] = v13 & 0xFFFFFFFFFFFFFFLL;
    v14 = (unsigned __int8 *)v20;
    goto LABEL_7;
  }
  v11 = sub_2448CC194();
  v17 = v16;
  swift_bridgeObjectRelease();
  v13 = v17;
  if ((v17 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v11 & 0x1000000000000000) != 0)
  {
    v14 = (unsigned __int8 *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v15 = v11 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v14 = (unsigned __int8 *)sub_2448EB820();
  }
LABEL_7:
  sub_24483BAC4(v14, v15, a2, a3, a4, a5);
  return swift_bridgeObjectRelease();
}

unint64_t sub_24483B3BC()
{
  unint64_t result;

  result = qword_25738DB20;
  if (!qword_25738DB20)
  {
    result = MEMORY[0x24951AC70](&unk_2448F2114, &type metadata for Identifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25738DB20);
  }
  return result;
}

unint64_t sub_24483B404()
{
  unint64_t result;

  result = qword_25738DB30;
  if (!qword_25738DB30)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for Identifier, &type metadata for Identifier);
    atomic_store(result, (unint64_t *)&qword_25738DB30);
  }
  return result;
}

ValueMetadata *type metadata accessor for Identifier()
{
  return &type metadata for Identifier;
}

uint64_t storeEnumTagSinglePayload for Identifier.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_24483B498 + 4 * byte_2448F1F40[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_24483B4B8 + 4 * byte_2448F1F45[v4]))();
}

_BYTE *sub_24483B498(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_24483B4B8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24483B4C0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24483B4C8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24483B4D0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24483B4D8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Identifier.CodingKeys()
{
  return &type metadata for Identifier.CodingKeys;
}

unint64_t sub_24483B4F8()
{
  unint64_t result;

  result = qword_25738DB38;
  if (!qword_25738DB38)
  {
    result = MEMORY[0x24951AC70](&unk_2448F20EC, &type metadata for Identifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25738DB38);
  }
  return result;
}

unint64_t sub_24483B540()
{
  unint64_t result;

  result = qword_25738DB40;
  if (!qword_25738DB40)
  {
    result = MEMORY[0x24951AC70](&unk_2448F205C, &type metadata for Identifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25738DB40);
  }
  return result;
}

unint64_t sub_24483B588()
{
  unint64_t result;

  result = qword_25738DB48;
  if (!qword_25738DB48)
  {
    result = MEMORY[0x24951AC70](&unk_2448F2084, &type metadata for Identifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25738DB48);
  }
  return result;
}

uint64_t sub_24483B5CC@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  int v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  char *v30;
  unsigned int v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  char *v36;
  int v37;
  int v38;
  char *v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  char *v50;
  int v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  uint64_t v62;

  v51 = a4;
  v52 = a1;
  v53 = a7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v50 = (char *)&v46 - v12;
  v55 = a6;
  v13 = *(_QWORD *)(a6 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v58 = *(_QWORD *)(a5 - 8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v16);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v46 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v25 = (char *)&v46 - v24;
  if (!a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56))(v53, 1, 1, a5);
  v57 = v23;
  v26 = a3 + 48;
  v27 = a3 + 55;
  v28 = a3 + 87;
  if (a3 <= 10)
    v28 = 97;
  v46 = v28;
  if (a3 <= 10)
    v27 = 65;
  v47 = v27;
  v62 = a3;
  if (a3 > 10)
    v26 = 58;
  v49 = v26;
  sub_24481EBC8();
  v56 = v25;
  v54 = v13;
  sub_2448EB61C();
  swift_getAssociatedConformanceWitness();
  sub_2448EBC4C();
  sub_2448EBBC8();
  v29 = v52;
  if (!v52)
  {
    v33 = *(void (**)(char *, uint64_t))(v58 + 8);
    v30 = v56;
LABEL_28:
    v33(v30, a5);
    v41 = v58;
    v42 = v53;
    (*(void (**)(uint64_t, char *, uint64_t))(v58 + 32))(v53, v22, a5);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v41 + 56))(v42, 0, 1, a5);
  }
  v30 = v56;
  while (1)
  {
    v31 = *v29;
    if (v31 >= 0x30 && v31 < v49)
    {
      v48 = a2;
      v59 = v31 - 48;
      sub_24483BB34();
      sub_2448EB61C();
      goto LABEL_20;
    }
    if (v31 < 0x41 || v31 >= v47)
      break;
    v48 = a2;
    v60 = v31 - 55;
    sub_24483BB34();
LABEL_19:
    sub_2448EB61C();
    v30 = v56;
LABEL_20:
    LODWORD(v52) = sub_2448EB940();
    v32 = v58;
    v33 = *(void (**)(char *, uint64_t))(v58 + 8);
    v33(v22, a5);
    v34 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
    v34(v22, v18, a5);
    v35 = v18;
    v36 = v57;
    if ((v51 & 1) != 0)
      v37 = sub_2448EB94C();
    else
      v37 = sub_2448EB934();
    v38 = v37;
    v33(v36, a5);
    v33(v22, a5);
    v39 = v50;
    v34(v50, v35, a5);
    v34(v22, v39, a5);
    if (((v52 | v38) & 1) != 0)
    {
      v33(v22, a5);
      v33(v30, a5);
      v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56);
      return v40(v53, 1, 1, a5);
    }
    v18 = v35;
    ++v29;
    a2 = v48 - 1;
    if (v48 == 1)
      goto LABEL_28;
  }
  if (v31 >= 0x61 && v31 < v46)
  {
    v48 = a2;
    v61 = v31 - 87;
    sub_24483BB34();
    goto LABEL_19;
  }
  v44 = v58;
  v45 = *(void (**)(char *, uint64_t))(v58 + 8);
  v45(v22, a5);
  v45(v56, a5);
  v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56);
  return v40(v53, 1, 1, a5);
}

unsigned __int8 *sub_24483BAC4@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  int v6;
  BOOL v7;
  int v8;

  v6 = *result;
  if (v6 == 43)
  {
    v7 = a2-- < 1;
    if (v7)
      goto LABEL_15;
    if (result)
      ++result;
    else
      result = 0;
LABEL_12:
    v8 = 0;
    return (unsigned __int8 *)sub_24483B5CC(result, a2, a3, v8, a4, a5, a6);
  }
  if (v6 != 45)
    goto LABEL_12;
  v7 = a2-- < 1;
  if (!v7)
  {
    if (result)
      ++result;
    else
      result = 0;
    v8 = 1;
    return (unsigned __int8 *)sub_24483B5CC(result, a2, a3, v8, a4, a5, a6);
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

unint64_t sub_24483BB34()
{
  unint64_t result;

  result = qword_25738DB50;
  if (!qword_25738DB50)
  {
    result = MEMORY[0x24951AC70](MEMORY[0x24BEE4298], MEMORY[0x24BEE4260]);
    atomic_store(result, (unint64_t *)&qword_25738DB50);
  }
  return result;
}

BOOL static FutureSerialQueue.Priority.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t FutureSerialQueue.Priority.hash(into:)()
{
  return sub_2448EBD0C();
}

void *static FutureSerialQueue.Priority.allCases.getter()
{
  return &unk_25157DDC0;
}

uint64_t FutureSerialQueue.Priority.hashValue.getter()
{
  sub_2448EBD00();
  sub_2448EBD0C();
  return sub_2448EBD3C();
}

BOOL sub_24483BBFC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t _s20PreviewsFoundationOS22DiagnosticsLogPositionO9hashValueSivg_0()
{
  sub_2448EBD00();
  sub_2448EBD0C();
  return sub_2448EBD3C();
}

uint64_t sub_24483BC54()
{
  return sub_2448EBD0C();
}

uint64_t sub_24483BC7C()
{
  sub_2448EBD00();
  sub_2448EBD0C();
  return sub_2448EBD3C();
}

void sub_24483BCBC(_QWORD *a1@<X8>)
{
  *a1 = &unk_25157D870;
}

uint64_t sub_24483BCCC(uint64_t *a1, unsigned __int8 a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;

  v3 = v2;
  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  v8 = *v2;
  if (*(_QWORD *)(v8 + 16) && (v9 = sub_244828E8C(a2), (v10 & 1) != 0))
  {
    v11 = *(_QWORD **)(*(_QWORD *)(v8 + 56) + 8 * v9);
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v11 = sub_2447C29CC(0, v11[2] + 1, 1, v11);
  v13 = v11[2];
  v12 = v11[3];
  if (v13 >= v12 >> 1)
    v11 = sub_2447C29CC((_QWORD *)(v12 > 1), v13 + 1, 1, v11);
  v11[2] = v13 + 1;
  v14 = &v11[3 * v13];
  v14[4] = v5;
  v14[5] = v6;
  v14[6] = v7;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v17 = *v3;
  *v3 = 0x8000000000000000;
  sub_24481FC28((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
  *v3 = v17;
  return swift_bridgeObjectRelease();
}

void sub_24483BDF8(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  _QWORD *v7;
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD *);
  _QWORD v20[4];

  v2 = v1;
  v4 = *v1;
  if (*(_QWORD *)(v4 + 16)
    && (v5 = sub_244828E8C(0), (v6 & 1) != 0)
    && (v7 = *(_QWORD **)(*(_QWORD *)(v4 + 56) + 8 * v5), v7[2]))
  {
    v8 = 0;
  }
  else
  {
    v9 = *v2;
    if (*(_QWORD *)(*v2 + 16)
      && (v10 = sub_244828E8C(1u), (v11 & 1) != 0)
      && (v7 = *(_QWORD **)(*(_QWORD *)(v9 + 56) + 8 * v10), v7[2]))
    {
      v8 = 1;
    }
    else
    {
      v12 = *v2;
      if (!*(_QWORD *)(*v2 + 16)
        || (v13 = sub_244828E8C(2u), (v14 & 1) == 0)
        || (v7 = *(_QWORD **)(*(_QWORD *)(v12 + 56) + 8 * v13), !v7[2]))
      {
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
        return;
      }
      v8 = 2;
    }
  }
  v15 = v7[4];
  v16 = v7[5];
  v17 = v7[6];
  swift_retain();
  v19 = sub_24483BF50(v20, v8);
  if (*(_QWORD *)v18)
  {
    if (!*(_QWORD *)(*(_QWORD *)v18 + 16))
    {
      __break(1u);
      return;
    }
    swift_retain();
    sub_24483D760(0, 1);
    ((void (*)(_QWORD *, _QWORD))v19)(v20, 0);
    swift_release();
  }
  else
  {
    ((void (*)(_QWORD *, _QWORD))v19)(v20, 0);
  }
  *a1 = v15;
  a1[1] = v16;
  a1[2] = v17;
}

void (*sub_24483BF50(_QWORD *a1, unsigned __int8 a2))(_QWORD *a1)
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_24483D0E4(v4, a2);
  return sub_24483BF9C;
}

void sub_24483BF9C(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t FutureSerialQueue.__allocating_init(on:)(_OWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 24) = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738DB60);
  v3 = swift_allocObject();
  *(_DWORD *)(v3 + 36) = 0;
  *(_QWORD *)(v3 + 16) = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v3 + 24) = 0;
  *(_BYTE *)(v3 + 32) = 1;
  *(_QWORD *)(v2 + 16) = v3;
  return v2;
}

uint64_t FutureSerialQueue.init(on:)(_OWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_OWORD *)(v1 + 24) = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738DB60);
  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 36) = 0;
  *(_QWORD *)(v2 + 16) = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v2 + 24) = 0;
  *(_BYTE *)(v2 + 32) = 1;
  *(_QWORD *)(v1 + 16) = v2;
  return v1;
}

uint64_t FutureSerialQueue.enqueue<A>(priority:makeFuture:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  _QWORD *v17;
  uint64_t v20[3];

  v5 = v4;
  type metadata accessor for Future(0, a4, a3, a4);
  v8 = sub_2447EB4A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/FutureSerialQueue.swift", 129, 2, 89, 57, (uint64_t)"enqueue(priority:makeFuture:)", 29, 2);
  v10 = v9;
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = a2;
  v11[3] = a3;
  v11[4] = v10;
  v12 = qword_257389CA0;
  swift_retain();
  swift_retain();
  if (v12 != -1)
    swift_once();
  v13 = (_QWORD *)((char *)off_25738DB00 + 16);
  v14 = (os_unfair_lock_s *)((char *)off_25738DB00 + 24);
  swift_retain();
  os_unfair_lock_lock(v14);
  sub_24483B130(v13, v20);
  os_unfair_lock_unlock(v14);
  v15 = v20[0];
  swift_release();
  v16 = *(os_unfair_lock_s **)(v5 + 16);
  swift_retain();
  os_unfair_lock_lock(v16 + 9);
  v20[0] = v15;
  v20[1] = (uint64_t)sub_24483D34C;
  v20[2] = (uint64_t)v11;
  sub_24483BCCC(v20, a1);
  os_unfair_lock_unlock(v16 + 9);
  swift_release();
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = v5;
  v17[3] = v15;
  v17[4] = sub_24483D34C;
  v17[5] = v11;
  swift_retain();
  swift_retain();
  Future.observeCancelation(_:)((uint64_t)sub_24483D35C, (uint64_t)v17);
  swift_release();
  sub_24483C3C4();
  swift_release();
  swift_release();
  return v8;
}

{
  _QWORD *v8;
  uint64_t v9;

  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a4;
  v8[3] = a2;
  v8[4] = a3;
  swift_retain();
  v9 = FutureSerialQueue.enqueue<A>(priority:makeFuture:)(a1, (uint64_t)sub_24483D368, (uint64_t)v8, a4);
  swift_release();
  return v9;
}

uint64_t sub_24483C278(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v13[2];
  _QWORD v14[2];

  v7 = *a5;
  v8 = a3();
  v9 = *(_QWORD *)(v7 + 80);
  sub_244836CF8(v14);
  v10 = (void *)v14[0];
  v13[0] = v14[0];
  v13[1] = v14[1];
  Promise.track(future:on:)(v8, v13);
  sub_24481241C(v10);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v9;
  v11[3] = a1;
  v11[4] = a2;
  swift_retain();
  Future.observeFinish(_:)((uint64_t)sub_24481E31C, (uint64_t)v11);
  swift_release();
  return swift_release();
}

uint64_t sub_24483C348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(a2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 36));
  v5 = sub_24483CE10(*(_QWORD *)(v4 + 16), a3);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 16) = v5;
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 36));
  return swift_release();
}

void sub_24483C3C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t (*)(), _QWORD *);
  uint64_t (*v9)(uint64_t);
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  const void *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t aBlock;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  void *v32;
  uint64_t (*v33)();
  _QWORD *v34;

  v1 = sub_2448EA704();
  v26 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_2448EA734();
  v25 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v0[2];
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 36));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  if (*(_BYTE *)(v6 + 32) == 1)
  {
    sub_24483BDF8(&aBlock);
    v8 = (void (*)(uint64_t (*)(), _QWORD *))v30;
    if (v30)
    {
      v9 = v31;
      v7 = aBlock;
      *(_QWORD *)(v6 + 24) = aBlock;
      *(_BYTE *)(v6 + 32) = 0;
    }
    else
    {
      v7 = 0;
      v9 = 0;
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 36));
  swift_release();
  if (v8)
  {
    v24 = v1;
    v10 = (void *)v0[3];
    v11 = v0[4];
    v12 = (_QWORD *)swift_allocObject();
    v12[2] = v7;
    v12[3] = v8;
    v12[4] = v9;
    v12[5] = v0;
    aBlock = (uint64_t)v10;
    v30 = v11;
    sub_24483D714(v7, (uint64_t)v8);
    sub_24483D714(v7, (uint64_t)v8);
    swift_retain();
    sub_24483D714(v7, (uint64_t)v8);
    swift_retain();
    sub_24483D714(v7, (uint64_t)v8);
    swift_retain();
    sub_24481240C(v10);
    if ((ExecutionLane.isCurrentLane.getter() & 1) != 0)
    {
      v13 = (_QWORD *)swift_allocObject();
      v13[2] = v0;
      v13[3] = v7;
      v13[4] = v8;
      v13[5] = v9;
      sub_24483D714(v7, (uint64_t)v8);
      swift_retain();
      v8(sub_24483DA78, v13);
      swift_release();
      swift_release();
      sub_24483D734(v7, (uint64_t)v8);
      swift_release();
      sub_24483D734(v7, (uint64_t)v8);
      swift_release();
      sub_24483D734(v7, (uint64_t)v8);
      sub_24483D734(v7, (uint64_t)v8);
      sub_24481241C(v10);
    }
    else
    {
      v23 = v11;
      if (v10)
      {
        if (v10 == (void *)1)
        {
          sub_244803860();
          v22 = sub_2448EB418();
          v33 = sub_24483D708;
          v34 = v12;
          aBlock = MEMORY[0x24BDAC760];
          v30 = 1107296256;
          v31 = sub_2447EB164;
          v32 = &block_descriptor_15;
          v14 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          sub_2448EA71C();
          aBlock = MEMORY[0x24BEE4AF8];
          v21 = sub_2447EB5DC();
          __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
          sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
          v15 = v24;
          sub_2448EB6C4();
          v16 = (void *)v22;
          MEMORY[0x249519C08](0, v5, v3, v14);
          _Block_release(v14);

          (*(void (**)(char *, uint64_t))(v26 + 8))(v3, v15);
          (*(void (**)(char *, uint64_t))(v25 + 8))(v5, v27);
          swift_release();
          sub_24483D734(v7, (uint64_t)v8);
          swift_release();
          sub_24483D734(v7, (uint64_t)v8);
          swift_release();
          sub_24483D734(v7, (uint64_t)v8);
          sub_24483D734(v7, (uint64_t)v8);
          v17 = 1;
        }
        else
        {
          v33 = sub_24483D708;
          v34 = v12;
          aBlock = MEMORY[0x24BDAC760];
          v30 = 1107296256;
          v31 = sub_2447EB164;
          v32 = &block_descriptor_6;
          v19 = v3;
          v21 = (unint64_t)_Block_copy(&aBlock);
          sub_24481240C(v10);
          swift_retain();
          sub_2448EA71C();
          v28 = MEMORY[0x24BEE4AF8];
          v22 = sub_2447EB5DC();
          __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
          sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
          sub_2448EB6C4();
          v20 = (const void *)v21;
          MEMORY[0x249519C08](0, v5, v19, v21);
          _Block_release(v20);
          sub_24481241C(v10);
          (*(void (**)(char *, uint64_t))(v26 + 8))(v19, v24);
          (*(void (**)(char *, uint64_t))(v25 + 8))(v5, v27);
          swift_release();
          swift_release();
          sub_24483D734(v7, (uint64_t)v8);
          swift_release();
          sub_24483D734(v7, (uint64_t)v8);
          swift_release();
          sub_24483D734(v7, (uint64_t)v8);
          sub_24483D734(v7, (uint64_t)v8);
          v17 = (uint64_t)v10;
        }
        sub_24481241C((id)v17);
      }
      else
      {
        v18 = (_QWORD *)swift_allocObject();
        v18[2] = v0;
        v18[3] = v7;
        v18[4] = v8;
        v18[5] = v9;
        sub_24483D714(v7, (uint64_t)v8);
        swift_retain();
        v8(sub_24483D728, v18);
        swift_release();
        swift_release();
        sub_24483D734(v7, (uint64_t)v8);
        swift_release();
        sub_24483D734(v7, (uint64_t)v8);
        swift_release();
        sub_24483D734(v7, (uint64_t)v8);
        sub_24483D734(v7, (uint64_t)v8);
        sub_24481241C(0);
      }
    }
  }
}

uint64_t sub_24483CAC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE v7[16];
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for Future(0, a3, a3, a4);
  v8 = a1;
  v9 = a2;
  return sub_2447EB460((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/FutureSerialQueue.swift", 129, 2, 122, 23, (uint64_t)"enqueue(priority:makeFuture:)", 29, 2, (void (*)(uint64_t))sub_24481D1FC, (uint64_t)v7);
}

uint64_t sub_24483CB40(uint64_t a1, void (*a2)(uint64_t (*)(), _QWORD *), uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a4;
  v8[3] = a1;
  v8[4] = a2;
  v8[5] = a3;
  swift_retain();
  swift_retain();
  a2(sub_24483DA78, v8);
  return swift_release();
}

uint64_t sub_24483CBBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 36));
  if ((*(_BYTE *)(v3 + 32) & 1) == 0 && *(_QWORD *)(v3 + 24) == a2)
  {
    *(_QWORD *)(v3 + 24) = 0;
    *(_BYTE *)(v3 + 32) = 1;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 36));
  v4 = swift_release();
  return sub_24483C3C4(v4);
}

uint64_t FutureSerialQueue.deinit()
{
  uint64_t v0;

  swift_release();
  sub_24481241C(*(id *)(v0 + 24));
  return v0;
}

uint64_t FutureSerialQueue.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  sub_24481241C(*(id *)(v0 + 24));
  return swift_deallocClassInstance();
}

char *sub_24483CC80(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v8;
  int64_t v9;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v17;
  _QWORD *v18;
  char *result;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v8 = *(_QWORD **)v6;
  v9 = *(_QWORD *)(*(_QWORD *)v6 + 16);
  if (v9 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v12 = 1 - v11;
  if (__OFSUB__(1, v11))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v13 = v9 + v12;
  if (__OFADD__(v9, v12))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v13 > v8[3] >> 1)
  {
    if (v9 <= v13)
      v17 = v9 + v12;
    else
      v17 = v9;
    v8 = sub_2447C3328(isUniquelyReferenced_nonNull_native, v17, 1, v8);
  }
  v18 = &v8[4 * a1 + 4];
  result = (char *)swift_arrayDestroy();
  if (!v12)
    goto LABEL_20;
  v20 = v8[2];
  v21 = __OFSUB__(v20, a2);
  v22 = v20 - a2;
  if (v21)
    goto LABEL_26;
  if ((v22 & 0x8000000000000000) == 0)
  {
    result = (char *)(v18 + 4);
    v23 = &v8[4 * a2 + 4];
    if (v18 + 4 != v23 || result >= (char *)&v23[4 * v22])
      result = (char *)memmove(result, v23, 32 * v22);
    v24 = v8[2];
    v21 = __OFADD__(v24, v12);
    v25 = v24 + v12;
    if (!v21)
    {
      v8[2] = v25;
LABEL_20:
      *v18 = a3;
      v18[1] = a4;
      v18[2] = a5;
      v18[3] = a6;
      *(_QWORD *)v6 = v8;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = (char *)sub_2448EBA48();
  __break(1u);
  return result;
}

_QWORD *sub_24483CE10(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  int64_t v36;
  __int128 v37;

  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CFC0);
  result = (_QWORD *)sub_2448EBA24();
  v5 = 0;
  v33 = a1;
  v8 = *(_QWORD *)(a1 + 64);
  v7 = a1 + 64;
  v6 = v8;
  v9 = 1 << *(_BYTE *)(v7 - 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v6;
  v30 = v7;
  v31 = (unint64_t)(v9 + 63) >> 6;
  v32 = result + 8;
  v29 = result;
  if ((v10 & v6) == 0)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v12 | (v5 << 6); ; i = __clz(__rbit64(v15)) + (v5 << 6))
  {
    v17 = *(_BYTE *)(*(_QWORD *)(v33 + 48) + i);
    v18 = *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * i);
    v19 = *(_QWORD *)(v18 + 16);
    if (v19)
    {
      v34 = *(_BYTE *)(*(_QWORD *)(v33 + 48) + i);
      v35 = v11;
      v36 = v5;
      swift_bridgeObjectRetain_n();
      v20 = (_OWORD *)(v18 + 40);
      v21 = MEMORY[0x24BEE4AF8];
      do
      {
        v25 = *((_QWORD *)v20 - 1);
        if (v25 != a2)
        {
          v37 = *v20;
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            sub_2447CEEA4(0, *(_QWORD *)(v21 + 16) + 1, 1);
          v23 = *(_QWORD *)(v21 + 16);
          v22 = *(_QWORD *)(v21 + 24);
          if (v23 >= v22 >> 1)
            sub_2447CEEA4(v22 > 1, v23 + 1, 1);
          *(_QWORD *)(v21 + 16) = v23 + 1;
          v24 = v21 + 24 * v23;
          *(_QWORD *)(v24 + 32) = v25;
          *(_OWORD *)(v24 + 40) = v37;
        }
        v20 = (_OWORD *)((char *)v20 + 24);
        --v19;
      }
      while (v19);
      swift_bridgeObjectRelease_n();
      result = v29;
      v11 = v35;
      v5 = v36;
      v17 = v34;
    }
    else
    {
      v21 = MEMORY[0x24BEE4AF8];
    }
    *(_QWORD *)((char *)v32 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_BYTE *)(result[6] + i) = v17;
    *(_QWORD *)(result[7] + 8 * i) = v21;
    v26 = result[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
    {
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    result[2] = v28;
    if (v11)
      goto LABEL_4;
LABEL_5:
    v14 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_35;
    if (v14 >= v31)
      return result;
    v15 = *(_QWORD *)(v30 + 8 * v14);
    ++v5;
    if (!v15)
    {
      v5 = v14 + 1;
      if (v14 + 1 >= v31)
        return result;
      v15 = *(_QWORD *)(v30 + 8 * v5);
      if (!v15)
      {
        v5 = v14 + 2;
        if (v14 + 2 >= v31)
          return result;
        v15 = *(_QWORD *)(v30 + 8 * v5);
        if (!v15)
          break;
      }
    }
LABEL_18:
    v11 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v31)
    return result;
  v15 = *(_QWORD *)(v30 + 8 * v16);
  if (v15)
  {
    v5 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    v5 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v5 >= v31)
      return result;
    v15 = *(_QWORD *)(v30 + 8 * v5);
    ++v16;
    if (v15)
      goto LABEL_18;
  }
LABEL_36:
  __break(1u);
  return result;
}

void (*sub_24483D0E4(_QWORD *a1, unsigned __int8 a2))(uint64_t a1)
{
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;

  v4 = malloc(0x50uLL);
  *a1 = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = sub_24483D2F4(v4);
  v4[9] = sub_24483D19C((uint64_t)(v4 + 4), a2, isUniquelyReferenced_nonNull_native);
  return sub_24483D160;
}

void sub_24483D160(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 72))(*(_QWORD *)a1 + 32, 0);
  v2(v1, 0);
  free(v1);
}

unint64_t (*sub_24483D19C(uint64_t a1, unsigned __int8 a2, char a3))(unint64_t result)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t (*result)(unint64_t);

  v4 = v3;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 24) = a2;
  v8 = *v3;
  v10 = sub_244828E8C(a2);
  *(_BYTE *)(a1 + 25) = v9 & 1;
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = *(_QWORD *)(v8 + 24);
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      *(_QWORD *)(a1 + 16) = v10;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v16 = *(_QWORD *)(*(_QWORD *)(*v4 + 56) + 8 * v10);
LABEL_12:
        *(_QWORD *)a1 = v16;
        return sub_24483D2AC;
      }
LABEL_11:
      v16 = 0;
      goto LABEL_12;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_24482E270();
      goto LABEL_7;
    }
    sub_24482B5E8(v13, a3 & 1);
    v17 = sub_244828E8C(a2);
    if ((v14 & 1) == (v18 & 1))
    {
      v10 = v17;
      *(_QWORD *)(a1 + 16) = v17;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (unint64_t (*)(unint64_t))sub_2448EBC7C();
  __break(1u);
  return result;
}

unint64_t sub_24483D2AC(unint64_t result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v2 = **(_QWORD ***)(result + 8);
    if ((*(_BYTE *)(result + 25) & 1) != 0)
      *(_QWORD *)(v2[7] + 8 * *(_QWORD *)(result + 16)) = v1;
    else
      return sub_24482062C(*(_QWORD *)(result + 16), *(_BYTE *)(result + 24), v1, v2);
  }
  else if ((*(_BYTE *)(result + 25) & 1) != 0)
  {
    return sub_2447CD830(*(_QWORD *)(result + 16), **(_QWORD **)(result + 8));
  }
  return result;
}

uint64_t (*sub_24483D2F4(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_24483D314;
}

uint64_t sub_24483D314(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

uint64_t sub_24483D320()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24483D34C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_24483C278(a1, a2, *(uint64_t (**)(void))(v2 + 16), *(_QWORD *)(v2 + 24), *(uint64_t **)(v2 + 32));
}

uint64_t sub_24483D35C(uint64_t a1)
{
  uint64_t v1;

  return sub_24483C348(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_24483D368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_24483CAC4(v4[3], v4[4], v4[2], a4);
}

unint64_t sub_24483D378()
{
  unint64_t result;

  result = qword_25738DB68;
  if (!qword_25738DB68)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for FutureSerialQueue.Priority, &type metadata for FutureSerialQueue.Priority);
    atomic_store(result, (unint64_t *)&qword_25738DB68);
  }
  return result;
}

uint64_t sub_24483D3BC()
{
  return sub_2447EB714(&qword_25738DB70, &qword_25738DB78, MEMORY[0x24BEE12E0]);
}

uint64_t type metadata accessor for FutureSerialQueue()
{
  return objc_opt_self();
}

uint64_t method lookup function for FutureSerialQueue()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FutureSerialQueue.__allocating_init(on:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t getEnumTagSinglePayload for FutureSerialQueue.Priority(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FutureSerialQueue.Priority(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_24483D4F8 + 4 * byte_2448F2175[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_24483D52C + 4 * byte_2448F2170[v4]))();
}

uint64_t sub_24483D52C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24483D534(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24483D53CLL);
  return result;
}

uint64_t sub_24483D548(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24483D550);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_24483D554(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24483D55C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FutureSerialQueue.Priority()
{
  return &type metadata for FutureSerialQueue.Priority;
}

uint64_t initializeBufferWithCopyOfBuffer for FutureSerialQueue.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FutureSerialQueue.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  return a1;
}

uint64_t assignWithTake for FutureSerialQueue.State(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for FutureSerialQueue.State(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FutureSerialQueue.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FutureSerialQueue.State()
{
  return &type metadata for FutureSerialQueue.State;
}

uint64_t sub_24483D6DC()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24483D708()
{
  uint64_t v0;

  return sub_24483CB40(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t (*)(), _QWORD *))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_24483D714(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
    return swift_retain();
  return result;
}

uint64_t sub_24483D728()
{
  uint64_t v0;

  return sub_24483CBBC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_24483D734(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
    return swift_release();
  return result;
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t sub_24483D760(uint64_t a1, int64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_2447C29CC(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[3 * a2 + 4];
    if (a1 != a2 || &v4[3 * a1 + 4] >= (_QWORD *)&v16[24 * v15])
      result = (uint64_t)memmove(&v4[3 * a1 + 4], v16, 24 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t objectdestroy_2Tm_0()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24483D904()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t destroy for FutureSerialQueue.Operation()
{
  return swift_release();
}

_QWORD *_s20PreviewsFoundationOS17FutureSerialQueueC9OperationVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a2[2];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = v4;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for FutureSerialQueue.Operation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  *a1 = *a2;
  v3 = a2[2];
  a1[1] = a2[1];
  a1[2] = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for FutureSerialQueue.Operation(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FutureSerialQueue.Operation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FutureSerialQueue.Operation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FutureSerialQueue.Operation()
{
  return &type metadata for FutureSerialQueue.Operation;
}

unint64_t static PrintToConsoleUtilities.pathToLiveExecutionResultsProbe.getter()
{
  return 0xD00000000000005FLL;
}

ValueMetadata *type metadata accessor for PrintToConsoleUtilities()
{
  return &type metadata for PrintToConsoleUtilities;
}

void __swiftcall BuildNumber.init(majorRelease:minorRelease:majorBuild:minorBuild:)(PreviewsFoundationOS::BuildNumber *__return_ptr retstr, Swift::Int majorRelease, Swift::String minorRelease, Swift::Int majorBuild, Swift::String_optional minorBuild)
{
  retstr->majorRelease = majorRelease;
  retstr->majorBuild = majorBuild;
  retstr->rawMinorRelease = minorRelease;
  retstr->rawMinorBuild = minorBuild;
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> BuildNumber.init(_:)(PreviewsFoundationOS::BuildNumber *__return_ptr retstr, Swift::String a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  char v12;
  void (*v13)(char *, uint64_t);
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  void *v23;
  void *v24;
  char v25;
  PreviewsFoundationOS::BuildNumber *v26;
  char *v27;
  uint64_t v28;
  PreviewsFoundationOS::BuildNumber *v29;

  v29 = retstr;
  v2 = sub_2448EB4CC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_allocWithZone(MEMORY[0x24BDD17A8]);
  v7 = (void *)sub_2448EAA70();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, sel_initWithString_, v7);

  v9 = *MEMORY[0x24BDD0458];
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v10(v5, v9, v2);
  v11 = sub_2448EB4D8();
  LOBYTE(v6) = v12;
  v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v5, v2);
  v14 = 0;
  if ((v6 & 1) != 0 || v11 < 1)
    goto LABEL_13;
  v15 = sub_2448EB4C0();
  if (!v16)
    goto LABEL_12;
  v17 = v15;
  v18 = v16;
  if ((sub_2448EA950() & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_12:
    v14 = 1;
    goto LABEL_13;
  }
  v10(v5, v9, v2);
  v19 = sub_2448EB4D8();
  v21 = v20;
  v13(v5, v2);
  if ((v21 & 1) != 0 || v19 < 1)
  {
    swift_bridgeObjectRelease();
    v14 = 2;
  }
  else
  {
    v22 = sub_2448EB4C0();
    v24 = v23;
    if (v23 && (swift_bridgeObjectRetain(), v25 = sub_2448EA950(), swift_bridgeObjectRelease(), (v25 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = 3;
    }
    else
    {
      if ((objc_msgSend(v8, sel_isAtEnd) & 1) != 0)
      {

        v26 = v29;
        v29->majorRelease = v11;
        v26->majorBuild = v19;
        v26->rawMinorRelease._countAndFlagsBits = v17;
        v26->rawMinorRelease._object = v18;
        v26->rawMinorBuild.value._countAndFlagsBits = v22;
        v26->rawMinorBuild.value._object = v24;
        return;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = 4;
    }
  }
LABEL_13:
  sub_24483DD18();
  swift_allocError();
  *v27 = v14;
  swift_willThrow();

}

unint64_t sub_24483DD18()
{
  unint64_t result;

  result = qword_25738DC58;
  if (!qword_25738DC58)
  {
    result = MEMORY[0x24951AC70](&unk_2448F2484, &type metadata for BuildNumber.Invalid);
    atomic_store(result, (unint64_t *)&qword_25738DC58);
  }
  return result;
}

void static BuildNumber.createConfidently(_:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  Swift::String v6;
  void *v7;
  int64x2_t v8;
  Swift::String_optional rawMinorBuild;
  void *object;
  uint64_t countAndFlagsBits;
  PreviewsFoundationOS::BuildNumber v12;
  uint64_t v13;
  char v14;

  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = a1;
  v6._object = a2;
  BuildNumber.init(_:)(&v12, v6);
  if (v7)
  {
    v12.majorRelease = (Swift::Int)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Source"
                                   "s/PreviewsFoundation/BuildNumber.swift";
    v12.majorBuild = 123;
    LOBYTE(v12.rawMinorRelease._countAndFlagsBits) = 2;
    *(_OWORD *)&v12.rawMinorRelease._object = xmmword_2448F22E0;
    v12.rawMinorBuild.value._object = "createConfidently(_:)";
    v13 = 21;
    v14 = 2;
    sub_244823F6C();

    v8 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    rawMinorBuild = (Swift::String_optional)0;
    object = (void *)0xE100000000000000;
    countAndFlagsBits = 90;
  }
  else
  {
    v8 = *(int64x2_t *)&v12.majorRelease;
    countAndFlagsBits = v12.rawMinorRelease._countAndFlagsBits;
    object = v12.rawMinorRelease._object;
    rawMinorBuild = v12.rawMinorBuild;
  }
  *(int64x2_t *)a3 = v8;
  *(_QWORD *)(a3 + 16) = countAndFlagsBits;
  *(_QWORD *)(a3 + 24) = object;
  *(Swift::String_optional *)(a3 + 32) = rawMinorBuild;
}

double sub_24483DE28()
{
  double result;

  *(_QWORD *)&result = sub_24483DE34((PreviewsFoundationOS::BuildNumber *)&xmmword_25738DC28).u64[0];
  return result;
}

int64x2_t sub_24483DE34@<Q0>(PreviewsFoundationOS::BuildNumber *a1@<X8>)
{
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  int64x2_t result;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;

  v2 = UVCurrentSystemBuildNumberString();
  if (v2)
  {
    v3 = v2;
    v4 = sub_2448EAA94();
    v6 = v5;

    v7._countAndFlagsBits = v4;
    v7._object = v6;
    BuildNumber.init(_:)(a1, v7);
    v10 = v9;
    if (!v9)
      return result;
  }
  else
  {
    sub_24483F0B0();
    v10 = (void *)swift_allocError();
    swift_willThrow();
  }
  if (qword_257389CF0 != -1)
    swift_once();
  v11 = sub_2448EA5FC();
  __swift_project_value_buffer(v11, (uint64_t)qword_25738F7C8);
  v12 = v10;
  v13 = v10;
  v14 = sub_2448EA5E4();
  v15 = sub_2448EB3A0();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    v17 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v16 = 138543362;
    v18 = v10;
    v19 = _swift_stdlib_bridgeErrorToNSError();
    sub_2448EB598();
    *v17 = v19;

    _os_log_impl(&dword_2447B9000, v14, v15, "Failed to get current system version, falling back to 1A1: %{public}@", v16, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(qword_25738AEF0);
    swift_arrayDestroy();
    MEMORY[0x24951AD84](v17, -1, -1);
    MEMORY[0x24951AD84](v16, -1, -1);
  }
  else
  {

  }
  result = vdupq_n_s64(1uLL);
  *(int64x2_t *)&a1->majorRelease = result;
  a1->rawMinorRelease._countAndFlagsBits = 65;
  a1->rawMinorRelease._object = (void *)0xE100000000000000;
  a1->rawMinorBuild.value._countAndFlagsBits = 0;
  a1->rawMinorBuild.value._object = 0;
  return result;
}

uint64_t static BuildNumber.current.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (qword_257389CA8 != -1)
    swift_once();
  v2 = qword_25738DC38;
  v3 = unk_25738DC40;
  v5 = qword_25738DC48;
  v4 = unk_25738DC50;
  *(_OWORD *)a1 = xmmword_25738DC28;
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

int64x2_t static BuildNumber.distantPast.getter@<Q0>(int64x2_t *a1@<X8>)
{
  int64x2_t result;

  result = vdupq_n_s64(1uLL);
  *a1 = result;
  a1[1].i64[0] = 65;
  a1[1].i64[1] = 0xE100000000000000;
  a1[2].i64[0] = 0;
  a1[2].i64[1] = 0;
  return result;
}

int64x2_t static BuildNumber.distantFuture.getter@<Q0>(int64x2_t *a1@<X8>)
{
  int64x2_t result;

  result = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *a1 = result;
  a1[1].i64[0] = 90;
  a1[1].i64[1] = 0xE100000000000000;
  a1[2].i64[0] = 0;
  a1[2].i64[1] = 0;
  return result;
}

uint64_t BuildNumber.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  sub_2448EBD0C();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2448EA944();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2448EAB60();
  swift_bridgeObjectRelease();
  sub_2448EBD0C();
  if (!v1)
    return sub_2448EBD18();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2448EA938();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2448EBD18();
  swift_bridgeObjectRetain();
  sub_2448EAB60();
  return swift_bridgeObjectRelease_n();
}

uint64_t BuildNumber.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 40);
  v3 = sub_2448EBB5C();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2448EA944();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EBB5C();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_2448EA938();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t BuildNumber.releaseDescription.getter()
{
  uint64_t v1;

  v1 = sub_2448EBB5C();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2448EA944();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t BuildNumber.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  sub_2448EBD00();
  sub_2448EBD0C();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2448EA944();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2448EAB60();
  swift_bridgeObjectRelease();
  sub_2448EBD0C();
  if (v1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_2448EA938();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2448EBD18();
    swift_bridgeObjectRetain();
    sub_2448EAB60();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    sub_2448EBD18();
  }
  return sub_2448EBD3C();
}

uint64_t sub_24483E55C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  sub_2448EBD00();
  sub_2448EBD0C();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2448EA944();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2448EAB60();
  swift_bridgeObjectRelease();
  sub_2448EBD0C();
  if (v1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_2448EA938();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2448EBD18();
    swift_bridgeObjectRetain();
    sub_2448EAB60();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    sub_2448EBD18();
  }
  return sub_2448EBD3C();
}

BOOL sub_24483E690(__int128 *a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v2 = *((_QWORD *)a1 + 3);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((_QWORD *)a2 + 3);
  v5 = *a1;
  v12 = *((_QWORD *)a1 + 2);
  v13 = v2;
  v14 = a1[2];
  v7 = *a2;
  v8 = v3;
  v9 = v4;
  v10 = a2[2];
  v11 = v5;
  return !_s20PreviewsFoundationOS11BuildNumberV1loiySbAC_ACtFZ_0(&v7, &v11);
}

BOOL sub_24483E6E8(__int128 *a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v2 = *((_QWORD *)a1 + 3);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((_QWORD *)a2 + 3);
  v5 = *a1;
  v12 = *((_QWORD *)a1 + 2);
  v13 = v2;
  v14 = a1[2];
  v7 = *a2;
  v8 = v3;
  v9 = v4;
  v10 = a2[2];
  v11 = v5;
  return !_s20PreviewsFoundationOS11BuildNumberV1loiySbAC_ACtFZ_0(&v11, &v7);
}

BOOL sub_24483E740(__int128 *a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v2 = *((_QWORD *)a1 + 3);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((_QWORD *)a2 + 3);
  v5 = *a1;
  v12 = *((_QWORD *)a1 + 2);
  v13 = v2;
  v14 = a1[2];
  v7 = *a2;
  v8 = v3;
  v9 = v4;
  v10 = a2[2];
  v11 = v5;
  return _s20PreviewsFoundationOS11BuildNumberV1loiySbAC_ACtFZ_0(&v7, &v11);
}

BOOL _s20PreviewsFoundationOS11BuildNumberV1loiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a1 < *a2;
  if (*a1 == *a2)
  {
    v3 = a1[5];
    v26 = a2[1];
    v27 = a1[1];
    v4 = a2[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v5 = sub_2448EA944();
    v7 = v6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8 = sub_2448EA944();
    v10 = v9;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v5 == v8 && v7 == v10)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v11 = sub_2448EBBEC();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v16 = sub_2448EA944();
        v18 = v17;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v19 = sub_2448EA944();
        v21 = v20;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v16 == v19 && v18 == v21)
        {
          swift_bridgeObjectRelease_n();
          return 0;
        }
LABEL_29:
        v25 = sub_2448EBBEC();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v25 & 1;
      }
    }
    v2 = v27 < v26;
    if (v27 == v26)
    {
      if (v3)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v12 = sub_2448EA938();
        v14 = v13;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (!v4)
        {
          if (!v14)
            return 0;
LABEL_25:
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      else
      {
        if (!v4)
          return 0;
        v14 = 0;
        v12 = 0;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v22 = sub_2448EA938();
      v24 = v23;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v14)
      {
        if (v24)
        {
          swift_bridgeObjectRelease();
          return 1;
        }
        return 0;
      }
      if (!v24)
        goto LABEL_25;
      if (v12 == v22 && v14 == v24)
      {
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
      goto LABEL_29;
    }
  }
  return v2;
}

uint64_t _s20PreviewsFoundationOS11BuildNumberV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*a1 != *a2)
    goto LABEL_5;
  v2 = a1[5];
  v3 = a2[5];
  v4 = a2[1];
  v5 = a1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = sub_2448EA944();
  v8 = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = sub_2448EA944();
  v11 = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v6 == v9 && v8 == v11)
  {
    swift_bridgeObjectRelease_n();
    if (v5 != v4)
    {
LABEL_5:
      v12 = 0;
      return v12 & 1;
    }
LABEL_8:
    if (v2)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v14 = sub_2448EA938();
      v16 = v15;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v3)
      {
LABEL_10:
        v17 = sub_2448EA938();
        v19 = v18;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v16)
        {
          if (v19)
          {
            if (v14 == v17 && v16 == v19)
            {
              swift_bridgeObjectRelease();
              v12 = 1;
            }
            else
            {
              v12 = sub_2448EBBEC();
              swift_bridgeObjectRelease();
            }
            goto LABEL_22;
          }
          goto LABEL_17;
        }
        if (v19)
        {
          v12 = 0;
          goto LABEL_22;
        }
        goto LABEL_20;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v14 = 0;
      v16 = 0;
      if (v3)
        goto LABEL_10;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v16)
    {
LABEL_17:
      v12 = 0;
LABEL_22:
      swift_bridgeObjectRelease();
      return v12 & 1;
    }
LABEL_20:
    v12 = 1;
    return v12 & 1;
  }
  v13 = sub_2448EBBEC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = 0;
  if ((v13 & 1) != 0 && v5 == v4)
    goto LABEL_8;
  return v12 & 1;
}

unint64_t sub_24483ECF0()
{
  unint64_t result;

  result = qword_25738DC60;
  if (!qword_25738DC60)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for BuildNumber, &type metadata for BuildNumber);
    atomic_store(result, (unint64_t *)&qword_25738DC60);
  }
  return result;
}

uint64_t destroy for BuildNumber()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for BuildNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for BuildNumber(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for BuildNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BuildNumber(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BuildNumber(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BuildNumber()
{
  return &type metadata for BuildNumber;
}

uint64_t getEnumTagSinglePayload for BuildNumber.Invalid(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BuildNumber.Invalid(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_24483EFE8 + 4 * byte_2448F2305[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_24483F01C + 4 * byte_2448F2300[v4]))();
}

uint64_t sub_24483F01C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24483F024(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24483F02CLL);
  return result;
}

uint64_t sub_24483F038(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24483F040);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_24483F044(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24483F04C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BuildNumber.Invalid()
{
  return &type metadata for BuildNumber.Invalid;
}

unint64_t sub_24483F06C()
{
  unint64_t result;

  result = qword_25738DC68;
  if (!qword_25738DC68)
  {
    result = MEMORY[0x24951AC70](&unk_2448F245C, &type metadata for BuildNumber.Invalid);
    atomic_store(result, (unint64_t *)&qword_25738DC68);
  }
  return result;
}

unint64_t sub_24483F0B0()
{
  unint64_t result;

  result = qword_25738DC70;
  if (!qword_25738DC70)
  {
    result = MEMORY[0x24951AC70](&unk_2448F24F0, &type metadata for BuildNumber.FailedToGetCurrentVersionString);
    atomic_store(result, (unint64_t *)&qword_25738DC70);
  }
  return result;
}

ValueMetadata *type metadata accessor for BuildNumber.FailedToGetCurrentVersionString()
{
  return &type metadata for BuildNumber.FailedToGetCurrentVersionString;
}

uint64_t static AlwaysEqual.== infix(_:_:)()
{
  return 1;
}

uint64_t static AlwaysEqual.< infix(_:_:)()
{
  return 0;
}

uint64_t Inhabited.predicated.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t HasHead;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  HasHead = type metadata accessor for HasHead(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  v6 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v8 = type metadata accessor for Predicated(0, HasHead, v6, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a3, v3, v8);
}

uint64_t type metadata accessor for HasHead(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HasHead);
}

uint64_t Inhabited.predicated.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t HasHead;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  HasHead = type metadata accessor for HasHead(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  v7 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v9 = type metadata accessor for Predicated(0, HasHead, v7, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v4, a1, v9);
}

uint64_t (*Inhabited.predicated.modify())()
{
  return nullsub_1;
}

uint64_t Inhabited.init(predicated:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t HasHead;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  HasHead = type metadata accessor for HasHead(255, a2, a3, a4);
  v8 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v10 = type metadata accessor for Predicated(0, HasHead, v8, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a5, a1, v10);
}

uint64_t sub_24483F26C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return Inhabited.init(predicated:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4);
}

uint64_t static Inhabited<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = *(_QWORD *)(a3 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v18 - v8;
  v13 = type metadata accessor for Inhabited(0, v10, v12, v11);
  v14 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, v13);
  PredicatedWrapper.value.getter(v13, v14, (uint64_t)v9);
  PredicatedWrapper.value.getter(v13, v14, (uint64_t)v7);
  v15 = sub_2448EAA64();
  v16 = *(void (**)(char *, uint64_t))(v4 + 8);
  v16(v7, a3);
  v16(v9, a3);
  return v15 & 1;
}

uint64_t type metadata accessor for Inhabited(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Inhabited);
}

uint64_t sub_24483F3A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Inhabited<>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t Inhabited<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>);
  PredicatedWrapper.value.getter(a2, v7, (uint64_t)v6);
  sub_2448EA920();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t Inhabited<>.hashValue.getter(uint64_t a1)
{
  _BYTE v3[72];

  sub_2448EBD00();
  Inhabited<>.hash(into:)((uint64_t)v3, a1);
  return sub_2448EBD3C();
}

uint64_t sub_24483F4B8(uint64_t a1)
{
  return Inhabited<>.hashValue.getter(a1);
}

uint64_t sub_24483F4C0(uint64_t a1, uint64_t a2)
{
  return Inhabited<>.hash(into:)(a1, a2);
}

uint64_t sub_24483F4C8(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];

  sub_2448EBD00();
  Inhabited<>.hash(into:)((uint64_t)v4, a2);
  return sub_2448EBD3C();
}

uint64_t static HasHead.isSatisfied(by:)()
{
  return sub_2448EAD28();
}

uint64_t sub_24483F564()
{
  return static HasHead.isSatisfied(by:)();
}

uint64_t Inhabited.makeIterator()(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  MEMORY[0x24BDAC7A8](a1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, a1);
  PredicatedWrapper.value.getter(a1, v4, (uint64_t)v3);
  return sub_2448EACB0();
}

uint64_t Inhabited.sorted(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t HasHead;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v36 = a2;
  v31 = a4;
  v5 = *(_QWORD *)(a3 + 16);
  v34 = *(_QWORD *)(a3 + 24);
  v35 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = sub_2448EB508();
  MEMORY[0x24BDAC7A8](v7);
  v32 = AssociatedTypeWitness;
  v33 = (char *)&v29 - v8;
  v9 = sub_2448EAEE4();
  v30 = MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v9);
  HasHead = type metadata accessor for HasHead(255, v9, v30, v10);
  v12 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v14 = type metadata accessor for Predicated(0, HasHead, v12, v13);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v29 - v16;
  v18 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, a3);
  PredicatedWrapper.value.getter(a3, v21, (uint64_t)v20);
  v22 = v37;
  v23 = sub_2448EAD58();
  result = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v5);
  if (!v22)
  {
    v39 = v23;
    v38 = v23;
    MEMORY[0x24951AC70](MEMORY[0x24BEE12E0], v9);
    v25 = (uint64_t)v33;
    sub_2448EB250();
    v26 = v32;
    v27 = *(_QWORD *)(v32 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v25, 1, v32);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      static Predicated.unverified(value:proof:)((uint64_t)&v39, v25, HasHead, v12, (uint64_t)v17);
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
      swift_bridgeObjectRelease();
      return Inhabited.init(predicated:)((uint64_t)v17, v9, v30, v28, v31);
    }
  }
  return result;
}

uint64_t Inhabited.map<A>(using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t HasHead;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t);
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68[16];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[5];

  v66 = a1;
  v67 = a2;
  v61 = a5;
  v54 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v55 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_2448EAEE4();
  v11 = MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v10);
  v65 = v10;
  v63 = v11;
  HasHead = type metadata accessor for HasHead(255, v10, v11, v12);
  v14 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v58 = HasHead;
  v62 = v14;
  v16 = type metadata accessor for Predicated(0, HasHead, v14, v15);
  MEMORY[0x24BDAC7A8](v16);
  v59 = (uint64_t)&v48 - v17;
  v52 = sub_2448EB508();
  v51 = *(_QWORD *)(v52 - 8);
  v18 = MEMORY[0x24BDAC7A8](v52);
  v64 = (char *)&v48 - v19;
  v60 = *(_QWORD *)(a4 - 8);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v57 = (char *)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(a3 + 16);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = MEMORY[0x24BDAC7A8](v20);
  v53 = (uint64_t)&v48 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v48 - v26;
  v28 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, a3);
  v56 = v5;
  PredicatedWrapper.value.getter(a3, v28, (uint64_t)v27);
  v69 = v22;
  v70 = a4;
  v71 = *(_QWORD *)(a3 + 24);
  v29 = v71;
  v72 = v66;
  v73 = v67;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0A8);
  v31 = sub_2448CDDF0((void (*)(char *, char *))sub_24483FD94, (uint64_t)v68, v22, a4, v30, v29, MEMORY[0x24BEE3F20], (uint64_t)v74);
  v32 = *(uint64_t (**)(char *, uint64_t))(v23 + 8);
  result = v32(v27, v22);
  if (!v6)
  {
    v34 = (uint64_t)v57;
    v50 = (void (*)(uint64_t, uint64_t))v32;
    v66 = v29;
    v67 = v28;
    v49 = v22;
    v35 = v58;
    v36 = v61;
    v48 = a3;
    v37 = v31;
    v74[0] = v31;
    MEMORY[0x24951AC70](MEMORY[0x24BEE12E0], v65);
    v38 = v64;
    sub_2448EB250();
    v39 = v60;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v38, 1, a4) == 1)
    {
      (*(void (**)(char *, uint64_t))(v51 + 8))(v64, v52);
      v42 = v48;
      (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v55, v56, v48);
      v74[0] = 0;
      v74[1] = 0xE000000000000000;
      sub_2448EB79C();
      sub_2448EABC0();
      v43 = v53;
      v44 = v67;
      PredicatedWrapper.value.getter(v42, v67, v53);
      v45 = v49;
      swift_getDynamicType();
      v46 = v50;
      v50(v43, v45);
      sub_2448EBDB4();
      sub_2448EABC0();
      swift_bridgeObjectRelease();
      sub_2448EABC0();
      PredicatedWrapper.value.getter(v42, v44, v43);
      v47 = sub_2448EACBC();
      v46(v43, v45);
      v74[4] = v47;
      sub_2448EBB5C();
      sub_2448EABC0();
      swift_bridgeObjectRelease();
      sub_2448EABC0();
      result = sub_2448EB9A0();
      __break(1u);
    }
    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v34, v64, a4);
      v74[0] = v37;
      v40 = v59;
      static Predicated.unverified(value:proof:)((uint64_t)v74, v34, v35, v62, v59);
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v34, a4);
      swift_bridgeObjectRelease();
      return Inhabited.init(predicated:)(v40, v65, v63, v41, v36);
    }
  }
  return result;
}

uint64_t sub_24483FD94(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v2 + 40))();
  if (v3)
    *a2 = v3;
  return result;
}

uint64_t Inhabited.reversed()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t HasHead;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];

  v45 = a2;
  v36 = *(_QWORD *)(a1 - 8);
  v3 = MEMORY[0x24BDAC7A8](a1);
  v37 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = sub_2448EAEE4();
  v43 = MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v8);
  HasHead = type metadata accessor for HasHead(255, v8, v43, v9);
  v41 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v42 = HasHead;
  v12 = type metadata accessor for Predicated(0, HasHead, v41, v11);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v31 - v13;
  v34 = sub_2448EB508();
  v32 = *(_QWORD *)(v34 - 8);
  v15 = MEMORY[0x24BDAC7A8](v34);
  v17 = (char *)&v31 - v16;
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v19 = MEMORY[0x24BDAC7A8](v15);
  v21 = (char *)&v31 - v20;
  v35 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, a1);
  v38 = a1;
  v33 = v24;
  PredicatedWrapper.value.getter(a1, v24, (uint64_t)v23);
  v39 = v5;
  v40 = v6;
  v25 = sub_2448EAD7C();
  v47[0] = v25;
  MEMORY[0x24951AC70](MEMORY[0x24BEE12B0], v8);
  sub_2448EA968();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v17, v34);
    v28 = v38;
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v37, v44, v38);
    v47[0] = 0;
    v47[1] = 0xE000000000000000;
    sub_2448EB79C();
    sub_2448EABC0();
    PredicatedWrapper.value.getter(v28, v33, (uint64_t)v23);
    v29 = v40;
    v30 = sub_2448EACBC();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v23, v29);
    v46 = v30;
    sub_2448EBB5C();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    sub_2448EABC0();
    result = sub_2448EB9A0();
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v21, v17, AssociatedTypeWitness);
    v47[0] = v25;
    static Predicated.unverified(value:proof:)((uint64_t)v47, (uint64_t)v21, v42, v41, (uint64_t)v14);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, AssociatedTypeWitness);
    swift_bridgeObjectRelease();
    return Inhabited.init(predicated:)((uint64_t)v14, v8, v43, v26, v45);
  }
  return result;
}

uint64_t Inhabited.mapWithPrevious<A>(using:)@<X0>(uint64_t a1@<X0>, void (*a2)(_QWORD, _QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t HasHead;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_QWORD, _QWORD);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(_QWORD, _QWORD);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68[16];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(_QWORD, _QWORD);
  char *v74;
  _QWORD v75[5];

  v63 = a1;
  v64 = a2;
  v60 = a5;
  v49 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v52 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_2448EAEE4();
  v58 = MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v9);
  v59 = v9;
  HasHead = type metadata accessor for HasHead(255, v9, v58, v10);
  v12 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v57 = HasHead;
  v56 = v12;
  v14 = type metadata accessor for Predicated(0, HasHead, v12, v13);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v55 = (uint64_t)&v48 - v16;
  v17 = *(_QWORD *)(a4 - 8);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v53 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(a3 + 16);
  v62 = *(_QWORD *)(v20 - 8);
  v21 = MEMORY[0x24BDAC7A8](v18);
  v51 = (uint64_t)&v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v48 - v23;
  v67 = sub_2448EB508();
  v65 = *(_QWORD *)(v67 - 8);
  v25 = MEMORY[0x24BDAC7A8](v67);
  v61 = (char *)&v48 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v48 - v27;
  v54 = v17;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))((char *)&v48 - v27, 1, 1, a4);
  v29 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, a3);
  v50 = v5;
  PredicatedWrapper.value.getter(a3, v29, (uint64_t)v24);
  v69 = v20;
  v70 = a4;
  v71 = *(_QWORD *)(a3 + 24);
  v30 = v71;
  v72 = v63;
  v73 = v64;
  v74 = v28;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0A8);
  v32 = v66;
  v33 = sub_2448CDDF0((void (*)(char *, char *))sub_244840868, (uint64_t)v68, v20, a4, v31, v30, MEMORY[0x24BEE3F20], (uint64_t)v75);
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v24, v20);
    return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v28, v67);
  }
  v34 = v33;
  v66 = v30;
  v35 = *(void (**)(_QWORD, _QWORD))(v62 + 8);
  v62 = v20;
  v63 = v29;
  v64 = v35;
  v35(v24, v20);
  v75[0] = v34;
  v36 = v59;
  MEMORY[0x24951AC70](MEMORY[0x24BEE12E0], v59);
  v37 = v61;
  sub_2448EB250();
  v38 = v54;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v37, 1, a4) != 1)
  {
    v39 = (uint64_t)v53;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v53, v61, a4);
    v75[0] = v34;
    v40 = v55;
    static Predicated.unverified(value:proof:)((uint64_t)v75, v39, v57, v56, v55);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, a4);
    swift_bridgeObjectRelease();
    Inhabited.init(predicated:)(v40, v36, v58, v41, v60);
    return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v28, v67);
  }
  (*(void (**)(char *, uint64_t))(v65 + 8))(v61, v67);
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v52, v50, a3);
  v75[0] = 0;
  v75[1] = 0xE000000000000000;
  sub_2448EB79C();
  sub_2448EABC0();
  v43 = v51;
  v44 = v63;
  PredicatedWrapper.value.getter(a3, v63, v51);
  v45 = v62;
  swift_getDynamicType();
  v46 = v64;
  v64(v43, v45);
  sub_2448EBDB4();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  PredicatedWrapper.value.getter(a3, v44, v43);
  v47 = sub_2448EACBC();
  v46(v43, v45);
  v75[4] = v47;
  sub_2448EBB5C();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  result = sub_2448EB9A0();
  __break(1u);
  return result;
}

uint64_t sub_24484072C@<X0>(uint64_t a1@<X0>, void (*a2)(char *, uint64_t)@<X1>, char *a3@<X3>, uint64_t a4@<X5>, _QWORD *a5@<X7>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v20 = a5;
  v11 = sub_2448EB508();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v19 - v13;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))((char *)&v19 - v13, a3, v11);
  v19 = a6;
  v15 = v21;
  a2(v14, a1);
  if (v15)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    *v20 = v15;
  }
  else
  {
    v17 = *(void (**)(char *, uint64_t))(v12 + 8);
    v17(v14, v11);
    v17(a3, v11);
    v18 = *(_QWORD *)(a4 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(a3, v19, a4);
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(a3, 0, 1, a4);
  }
  return result;
}

uint64_t sub_244840868@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_24484072C(a1, *(void (**)(char *, uint64_t))(v3 + 40), *(char **)(v3 + 56), *(_QWORD *)(v3 + 24), a2, a3);
}

uint64_t Inhabited.enumerated()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t TupleTypeMetadata2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t HasHead;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t AssociatedTypeWitness;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v43 = a2;
  v3 = *(_QWORD *)(a1 + 16);
  v34 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v5 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v41 = TupleTypeMetadata2;
  v42 = v5;
  v6 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v8 = (uint64_t *)((char *)&v32 - v7);
  v38 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v6);
  v37 = (uint64_t)&v32 - v9;
  v10 = sub_2448EB9F4();
  v39 = MEMORY[0x24951AC70](MEMORY[0x24BEE2FC0], v10);
  HasHead = type metadata accessor for HasHead(255, v10, v39, v11);
  v36 = HasHead;
  v35 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v14 = type metadata accessor for Predicated(0, HasHead, v35, v13);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v32 - v16;
  v18 = *(_QWORD *)(v3 - 8);
  v19 = MEMORY[0x24BDAC7A8](v15);
  v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v32 - v22;
  v24 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, a1);
  PredicatedWrapper.value.getter(a1, v24, (uint64_t)v21);
  sub_2448EACEC();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v3);
  v25 = v37;
  Inhabited.first.getter(a1, v26, v37);
  v27 = AssociatedTypeWitness;
  v28 = v41;
  v29 = (char *)v8 + *(int *)(v41 + 48);
  *v8 = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v29, v25, v27);
  static Predicated.unverified(value:proof:)((uint64_t)v23, (uint64_t)v8, v36, v35, (uint64_t)v17);
  (*(void (**)(_QWORD *, uint64_t))(v42 + 8))(v8, v28);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v23, v10);
  return Inhabited.init(predicated:)((uint64_t)v17, v10, v39, v30, v43);
}

uint64_t Inhabited.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t HasHead;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;

  HasHead = type metadata accessor for HasHead(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  v6 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v8 = v3 + *(int *)(type metadata accessor for Predicated(0, HasHead, v6, v7) + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a3, v8, AssociatedTypeWitness);
}

uint64_t sub_244840BD0(uint64_t a1)
{
  uint64_t v1;

  Inhabited.makeIterator()(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t Inhabited<>.startIndex.getter(uint64_t a1, uint64_t a2)
{
  return sub_244840C1C(a1, a2, (void (*)(uint64_t, uint64_t))MEMORY[0x24BEE18A0]);
}

uint64_t Inhabited<>.endIndex.getter(uint64_t a1, uint64_t a2)
{
  return sub_244840C1C(a1, a2, (void (*)(uint64_t, uint64_t))MEMORY[0x24BEE1910]);
}

uint64_t sub_244840C1C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, a1);
  PredicatedWrapper.value.getter(a1, v10, (uint64_t)v9);
  a3(v6, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t Inhabited<>.index(after:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_244841608(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE18D8]);
}

uint64_t Inhabited<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  void (*v10)(_BYTE *, _QWORD);
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  _BYTE v15[32];

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>);
  PredicatedWrapper.value.getter(a2, v9, (uint64_t)v8);
  v10 = (void (*)(_BYTE *, _QWORD))sub_2448EB2E0();
  v12 = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a3, v12, AssociatedTypeWitness);
  v10(v15, 0);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>);
  PredicatedWrapper.value.getter(a2, v9, (uint64_t)v8);
  RandomAccessCollection.subscript.getter(a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  void (*v10)(_BYTE *, _QWORD);
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  _BYTE v15[32];

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>);
  PredicatedWrapper.value.getter(a2, v9, (uint64_t)v8);
  v10 = (void (*)(_BYTE *, _QWORD))sub_2448EB2E0();
  v12 = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a3, v12, AssociatedTypeWitness);
  v10(v15, 0);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t Inhabited<>.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_244841608(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1A20]);
}

uint64_t sub_244840DF4(uint64_t a1, uint64_t a2)
{
  return Inhabited<>.startIndex.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t sub_244840DFC(uint64_t a1, uint64_t a2)
{
  return Inhabited<>.endIndex.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t (*sub_244840E04(uint64_t **a1, uint64_t a2, uint64_t a3))()
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_244840E68(v6, a2, a3);
  return sub_2447DB4C4;
}

void (*sub_244840E68(uint64_t *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  void *v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *a1 = AssociatedTypeWitness;
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  a1[1] = v7;
  v8 = malloc(*(_QWORD *)(v7 + 64));
  a1[2] = (uint64_t)v8;
  Inhabited<>.subscript.getter(a2, a3, (uint64_t)v8);
  return sub_2447DD234;
}

uint64_t sub_244840EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Inhabited<>.subscript.getter(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t sub_244840F08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  swift_getAssociatedTypeWitness();
  v2 = sub_2448EB508();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t sub_244840F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Inhabited<>.index(after:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t sub_244840F74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 - 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)&v11 - v8;
  Inhabited<>.index(after:)(a1, a2, v5);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v9, AssociatedTypeWitness);
}

uint64_t Inhabited.orderedKeyedMap<A, B>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t HasHead;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t TupleTypeMetadata2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t result;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  char *v67;
  void (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;

  v90 = a2;
  v88 = a5;
  v89 = a1;
  v85 = a6;
  v79 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v74 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = v10;
  v13 = type metadata accessor for OrderedDictionary(255, v11, v10, v12);
  v14 = MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedDictionary<A, B>, v13);
  v87 = v13;
  v84 = v14;
  HasHead = type metadata accessor for HasHead(255, v13, v14, v15);
  v17 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v80 = HasHead;
  v82 = v17;
  v19 = type metadata accessor for Predicated(0, HasHead, v17, v18);
  MEMORY[0x24BDAC7A8](v19);
  v83 = (uint64_t)&v66 - v20;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v73 = sub_2448EB508();
  v72 = *(_QWORD *)(v73 - 8);
  v22 = MEMORY[0x24BDAC7A8](v73);
  v77 = (char *)&v66 - v23;
  v81 = TupleTypeMetadata2;
  v86 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v24 = MEMORY[0x24BDAC7A8](v22);
  v78 = (char *)&v66 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v76 = (char *)&v66 - v27;
  v28 = *(_QWORD *)(a3 + 16);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = MEMORY[0x24BDAC7A8](v26);
  v32 = (char *)&v66 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v34 = (char *)&v66 - v33;
  v35 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, a3);
  v75 = v6;
  PredicatedWrapper.value.getter(a3, v35, (uint64_t)v34);
  v36 = *(_QWORD *)(a3 + 24);
  v37 = v90;
  v90 = a4;
  v38 = v91;
  Sequence.orderedKeyedMap<A, B>(_:)(v89, v37, v28, a4, v92, v36, v88, &v93);
  v39 = *(uint64_t (**)(char *, uint64_t))(v29 + 8);
  v40 = v34;
  v41 = v28;
  result = v39(v40, v28);
  if (!v38)
  {
    v88 = 0;
    v43 = v76;
    v68 = (void (*)(uint64_t, uint64_t))v39;
    v69 = v36;
    v70 = v35;
    v67 = v32;
    v71 = v41;
    v44 = v79;
    v45 = v90;
    v89 = *((_QWORD *)&v93 + 1);
    v91 = v93;
    MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedDictionary<A, B>, v87);
    v46 = v77;
    sub_2448EB250();
    v47 = v81;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48))(v46, 1, v81) == 1)
    {
      (*(void (**)(char *, uint64_t))(v72 + 8))(v46, v73);
      (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v74, v75, a3);
      *(_QWORD *)&v93 = 0;
      *((_QWORD *)&v93 + 1) = 0xE000000000000000;
      sub_2448EB79C();
      sub_2448EABC0();
      v61 = (uint64_t)v67;
      v62 = v70;
      PredicatedWrapper.value.getter(a3, v70, (uint64_t)v67);
      v63 = v71;
      swift_getDynamicType();
      v64 = v68;
      v68(v61, v63);
      sub_2448EBDB4();
      sub_2448EABC0();
      swift_bridgeObjectRelease();
      sub_2448EABC0();
      PredicatedWrapper.value.getter(a3, v62, v61);
      v65 = sub_2448EACBC();
      v64(v61, v63);
      v94 = v65;
      sub_2448EBB5C();
      sub_2448EABC0();
      swift_bridgeObjectRelease();
      sub_2448EABC0();
      result = sub_2448EB9A0();
      __break(1u);
    }
    else
    {
      v48 = *(int *)(v47 + 48);
      v49 = v43;
      v50 = &v43[v48];
      v51 = &v46[v48];
      v52 = v46;
      v53 = v45;
      v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32);
      v54(v43, v52, v45);
      v55 = v92;
      v56 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 32);
      v56(v50, v51, v92);
      *(_QWORD *)&v93 = v91;
      *((_QWORD *)&v93 + 1) = v89;
      v57 = (uint64_t)v78;
      v58 = &v78[*(int *)(v47 + 48)];
      v54(v78, v49, v53);
      v56(v58, v50, v55);
      v59 = v83;
      static Predicated.unverified(value:proof:)((uint64_t)&v93, v57, v80, v82, v83);
      (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v57, v47);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return Inhabited.init(predicated:)(v59, v87, v84, v60, v85);
    }
  }
  return result;
}

uint64_t Inhabited<>.index(before:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_244841608(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE0740]);
}

uint64_t sub_244841608(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>);
  PredicatedWrapper.value.getter(a2, v12, (uint64_t)v11);
  a4(a1, v8, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_2448416CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Inhabited<>.index(before:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t sub_2448416D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 - 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)&v11 - v8;
  Inhabited<>.index(before:)(a1, a2, v5);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v9, AssociatedTypeWitness);
}

uint64_t Inhabited<>.last.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t HasHead;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = a2;
  v32 = *(_QWORD *)(a1 - 8);
  v4 = MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v4 + 16);
  v29 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = sub_2448EB508();
  v30 = *(_QWORD *)(v10 - 8);
  v31 = v10;
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v28 - v12;
  v14 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, a1);
  PredicatedWrapper.value.getter(a1, v17, (uint64_t)v16);
  sub_2448EA968();
  v18 = v16;
  v19 = v6;
  v20 = v32;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v6, v2, a1);
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v13, 1, AssociatedTypeWitness) == 1)
  {
    HasHead = type metadata accessor for HasHead(255, v8, v29, v22);
    v24 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
    v26 = type metadata accessor for Predicated(0, HasHead, v24, v25);
    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 16))(v33, &v19[*(int *)(v26 + 36)], AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v19, a1);
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v13, v31);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v19, a1);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 32))(v33, v13, AssociatedTypeWitness);
  }
}

uint64_t Inhabited<>.reversed()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t HasHead;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = a3;
  v23[1] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v28 = AssociatedTypeWitness;
  v5 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v26 = (uint64_t)v23 - v6;
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_2448EBA0C();
  v25 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v23 - v10;
  v24 = MEMORY[0x24951AC70](MEMORY[0x24BEE3048], v9);
  HasHead = type metadata accessor for HasHead(255, v9, v24, v12);
  v14 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v16 = type metadata accessor for Predicated(0, HasHead, v14, v15);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v23 - v17;
  v19 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, a1);
  PredicatedWrapper.value.getter(a1, v19, (uint64_t)v8);
  sub_2448EA998();
  v20 = v26;
  Inhabited<>.last.getter(a1, v26);
  static Predicated.unverified(value:proof:)((uint64_t)v11, v20, HasHead, v14, (uint64_t)v18);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v20, v28);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v9);
  return Inhabited.init(predicated:)((uint64_t)v18, v9, v24, v21, v29);
}

uint64_t Inhabited<>.index(_:offsetBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, v8);
  PredicatedWrapper.value.getter(a3, v9, (uint64_t)v7);
  sub_2448EB184();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Inhabited<>.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, v8);
  PredicatedWrapper.value.getter(a3, v9, (uint64_t)v7);
  v10 = sub_2448EB190();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v10;
}

uint64_t sub_244841E40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Inhabited<>.index(_:offsetBy:)(a1, a2, a3);
}

uint64_t sub_244841E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Inhabited<>.distance(from:to:)(a1, a2, a3);
}

uint64_t Inhabited<>.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;

  sub_244846520(a1, a2, a3, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a2, AssociatedTypeWitness);
  v7 = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
}

{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;

  sub_244846798(a1, a2, a3, a4);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v6 = sub_2448EB370();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a2, v6);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t sub_244842008@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t HasHead;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v29 = a3;
  v31 = a1;
  v32 = a6;
  v8 = *(_QWORD *)(a5 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v12 = (char *)&v29 - v11;
  v13 = *(_QWORD *)(v8 + 8);
  v15 = type metadata accessor for Inhabited(0, a4, v13, v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v29 - v17;
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v30 = a2;
  v19(v18, a2, v15);
  Inhabited<>.startIndex.getter(v15, v8);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  swift_getAssociatedConformanceWitness();
  LOBYTE(v15) = sub_2448EAA64();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  if ((v15 & 1) != 0)
  {
    v21 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v32, v29, v21);
  }
  else
  {
    HasHead = type metadata accessor for HasHead(255, a4, v13, v20);
    v24 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
    v26 = type metadata accessor for Predicated(0, HasHead, v24, v25);
    v27 = v30 + *(int *)(v26 + 36);
    v28 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v32, v27, v28);
  }
}

void (*Inhabited<>.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  size_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v9 = malloc(0x50uLL);
  *a1 = v9;
  v9[1] = a4;
  v9[2] = v4;
  *v9 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[3] = AssociatedTypeWitness;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9[4] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[5] = malloc(v12);
  v13 = malloc(v12);
  v9[6] = v13;
  v14 = swift_getAssociatedTypeWitness();
  v9[7] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v9[8] = v15;
  v9[9] = malloc(*(_QWORD *)(v15 + 64));
  (*(void (**)(void))(v15 + 16))();
  Inhabited<>.subscript.getter(a2, a3, (uint64_t)v13);
  return sub_244842338;
}

{
  uint64_t v4;
  _QWORD *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;

  v9 = malloc(0x50uLL);
  *a1 = v9;
  v9[1] = a4;
  v9[2] = v4;
  *v9 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[3] = AssociatedTypeWitness;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9[4] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[5] = malloc(v12);
  v9[6] = malloc(v12);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v13 = sub_2448EB370();
  v9[7] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v9[8] = v14;
  v9[9] = malloc(*(_QWORD *)(v14 + 64));
  (*(void (**)(void))(v14 + 16))();
  Inhabited<>.subscript.getter(a2, a3);
  return sub_244842994;
}

void sub_244842338(uint64_t **a1, char a2)
{
  sub_2448429A0(a1, a2, (void (*)(void *, void *, uint64_t, uint64_t))sub_244846520);
}

uint64_t Inhabited<>.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>);
  PredicatedWrapper.value.getter(a2, v7, (uint64_t)v6);
  sub_2448EB2D4();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_2448423FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(a3 + a2 - 8);
  v7 = type metadata accessor for Inhabited(0, *(_QWORD *)(a3 + a2 - 16), *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8), (uint64_t)a4);
  return a4(a2, v7, v6);
}

uint64_t sub_244842464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(a4 + a3 - 8);
  v9 = type metadata accessor for Inhabited(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8), a4);
  return a5(a1, a3, v9, v8);
}

uint64_t sub_2448425A4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  void (*v18)(char *, uint64_t);
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  void (*v22)(_BYTE *, _QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t HasHead;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[32];

  v35 = a2;
  v38 = a5;
  v7 = *(_QWORD *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v33 - v10;
  v37 = *(_QWORD *)(v7 + 8);
  v13 = type metadata accessor for Inhabited(0, a3, v37, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v33 - v15;
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v36 = a1;
  v34 = v17;
  v17(v16, a1, v13);
  Inhabited<>.startIndex.getter(v13, v7);
  v18 = *(void (**)(char *, uint64_t))(v14 + 8);
  v18(v16, v13);
  swift_getAssociatedConformanceWitness();
  sub_2448EB370();
  v19 = sub_2448EB364();
  v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v20(v11, AssociatedTypeWitness);
  if ((v19 & 1) != 0)
  {
    v34(v16, v36, v13);
    Inhabited<>.startIndex.getter(v13, v7);
    v18(v16, v13);
    v22 = (void (*)(_BYTE *, _QWORD))sub_2448EB2E0();
    v24 = v23;
    v25 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v38, v24, v25);
    v22(v39, 0);
    return ((uint64_t (*)(char *, uint64_t))v20)(v11, AssociatedTypeWitness);
  }
  else
  {
    HasHead = type metadata accessor for HasHead(255, a3, v37, v21);
    v28 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
    v30 = type metadata accessor for Predicated(0, HasHead, v28, v29);
    v31 = v36 + *(int *)(v30 + 36);
    v32 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v38, v31, v32);
  }
}

void sub_244842994(uint64_t **a1, char a2)
{
  sub_2448429A0(a1, a2, (void (*)(void *, void *, uint64_t, uint64_t))sub_244846798);
}

void sub_2448429A0(uint64_t **a1, char a2, void (*a3)(void *, void *, uint64_t, uint64_t))
{
  uint64_t *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v13)(void *, uint64_t);
  uint64_t v14;
  uint64_t v15;

  v3 = *a1;
  v5 = (*a1)[8];
  v4 = (void *)(*a1)[9];
  v6 = (void *)(*a1)[6];
  v15 = (*a1)[7];
  v8 = (*a1)[4];
  v7 = (void *)(*a1)[5];
  v9 = (*a1)[3];
  v11 = **a1;
  v10 = (*a1)[1];
  if ((a2 & 1) != 0)
  {
    v14 = (*a1)[8];
    (*(void (**)(uint64_t, void *, uint64_t))(v8 + 16))(v3[5], v6, v3[3]);
    a3(v7, v4, v11, v10);
    (*(void (**)(void *, uint64_t))(v14 + 8))(v4, v15);
    v13 = *(void (**)(void *, uint64_t))(v8 + 8);
    v13(v7, v9);
  }
  else
  {
    a3(v6, v4, *v3, v3[1]);
    (*(void (**)(void *, uint64_t))(v5 + 8))(v4, v15);
    v13 = *(void (**)(void *, uint64_t))(v8 + 8);
  }
  v13(v6, v9);
  free(v4);
  free(v6);
  free(v7);
  free(v3);
}

uint64_t Inhabited<>.withFirst(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];
  void (*v17)(char *);
  uint64_t v18;

  v17 = a1;
  v18 = a4;
  v16[1] = a2;
  v5 = *(_QWORD *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)v16 - v8;
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v16 - v12;
  Inhabited.first.getter(a3, v14, (uint64_t)v16 - v12);
  v17(v13);
  Inhabited<>.startIndex.getter(a3, v5);
  sub_244846520((uint64_t)v13, (uint64_t)v9, a3, v18);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_244842BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;

  sub_244846520(a1, a2, a3, *(_QWORD *)(a4 - 8));
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a2, AssociatedTypeWitness);
  v7 = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
}

uint64_t (*sub_244842CA8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  _QWORD *v8;

  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[4] = Inhabited<>.subscript.modify(v8, a2, a3, *(_QWORD *)(a4 - 8));
  return sub_2447DB4C4;
}

uint64_t sub_244842D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Inhabited<>.subscript.setter(a1, a2, a3, *(_QWORD *)(a4 - 8));
}

uint64_t (*sub_244842D14(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  _QWORD *v8;

  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[4] = Inhabited<>.subscript.modify(v8, a2, a3, *(_QWORD *)(a4 - 8));
  return sub_2447DB4C4;
}

uint64_t sub_244842D78()
{
  return sub_2448EAA28();
}

uint64_t sub_244842D90()
{
  return sub_2448EAA10();
}

uint64_t sub_244842DB0()
{
  return sub_2448EAA04();
}

uint64_t Inhabited<>.init(_:otherElements:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t HasHead;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v22 = a2;
  v26 = a5;
  v25 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
  HasHead = type metadata accessor for HasHead(255, a3, v25, a4);
  v23 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v8 = type metadata accessor for Predicated(0, HasHead, v23, v7);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v22 - v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v15 = (char *)&v22 - v14;
  v16 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2448EB358();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, AssociatedTypeWitness);
  sub_2448EB304();
  v27 = v22;
  v19 = sub_2448EAEE4();
  MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v19);
  sub_2448EB2F8();
  static Predicated.unverified(value:proof:)((uint64_t)v18, a1, HasHead, v23, (uint64_t)v10);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, a3);
  return Inhabited.init(predicated:)((uint64_t)v10, a3, v25, v20, v26);
}

uint64_t Inhabited<>.init<A>(_:otherElements:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t HasHead;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v36 = a2;
  v37 = a6;
  v31 = a4;
  v38 = a7;
  v33 = *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8);
  HasHead = type metadata accessor for HasHead(255, a3, v33, a4);
  v34 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v11 = type metadata accessor for Predicated(0, HasHead, v34, v10);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v32 = (uint64_t)&v29 - v13;
  v14 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v19 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v21 = (char *)&v29 - v20;
  v30 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v29 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2448EB358();
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, a1, AssociatedTypeWitness);
  sub_2448EB304();
  v24 = v36;
  v25 = v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v36, v31);
  sub_2448EB2F8();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v24, v25);
  v26 = v32;
  static Predicated.unverified(value:proof:)((uint64_t)v23, a1, HasHead, v34, v32);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v23, a3);
  return Inhabited.init(predicated:)(v26, a3, v33, v27, v38);
}

uint64_t Inhabited<>.append(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t HasHead;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = v4;
  v26 = a1;
  v27 = a3;
  v7 = *(_QWORD *)(a2 + 16);
  HasHead = type metadata accessor for HasHead(255, v7, *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8), a4);
  v23 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v9 = type metadata accessor for Predicated(0, HasHead, v23, v8);
  v25 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v22 - v10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v16 = (char *)&v22 - v15;
  v17 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, a2);
  PredicatedWrapper.value.getter(a2, v20, (uint64_t)v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v26, AssociatedTypeWitness);
  sub_2448EB304();
  static Predicated.unverified(value:proof:)((uint64_t)v19, v5 + *(int *)(v9 + 36), HasHead, v23, (uint64_t)v11);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v25 + 40))(v5, v11, v9);
}

uint64_t Inhabited<>.appending(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a4, v4, a2);
  return Inhabited<>.append(_:)(a1, a2, a3, v8);
}

uint64_t Inhabited<>.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t HasHead;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v30 = a4;
  v31 = a5;
  v25 = a3;
  v29 = a1;
  v7 = *(_QWORD *)(a2 + 16);
  HasHead = type metadata accessor for HasHead(255, v7, *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8), a4);
  v26 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v10 = type metadata accessor for Predicated(0, HasHead, v26, v9);
  v28 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v24 - v12;
  v14 = *(_QWORD *)(a3 - 8);
  v15 = MEMORY[0x24BDAC7A8](v11);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, a2);
  v22 = v27;
  PredicatedWrapper.value.getter(a2, v21, (uint64_t)v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v29, v25);
  sub_2448EB2F8();
  static Predicated.unverified(value:proof:)((uint64_t)v20, v22 + *(int *)(v10 + 36), HasHead, v26, (uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 40))(v22, v13, v10);
}

uint64_t Inhabited<>.appending<A>(contentsOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a6, v6, a2);
  return Inhabited<>.append<A>(contentsOf:)(a1, a2, a3, a4, a5);
}

uint64_t Inhabited<>.insert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t HasHead;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  void (*v25)(_BYTE *, _QWORD);
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t AssociatedTypeWitness;
  _BYTE v43[32];

  v35 = a2;
  v36 = a4;
  v33 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v32 = *(_QWORD *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v40 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)&v29 - v6;
  HasHead = type metadata accessor for HasHead(255, v5, *(_QWORD *)(v32 + 8), v8);
  v38 = HasHead;
  v37 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v41 = type metadata accessor for Predicated(0, HasHead, v37, v10);
  v39 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v34 = (uint64_t)&v29 - v11;
  v12 = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(v12 - 8);
  v13 = v30;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v29 - v15;
  v17 = *(_QWORD *)(v5 - 8);
  v18 = MEMORY[0x24BDAC7A8](v14);
  v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v29 - v21;
  v23 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, a3);
  PredicatedWrapper.value.getter(a3, v23, (uint64_t)v22);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v24(v16, v33, v12);
  sub_2448EB31C();
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v22, v5);
  sub_2448EB1E4();
  v25 = (void (*)(_BYTE *, _QWORD))sub_2448EB2E0();
  ((void (*)(char *))v24)(v16);
  v25(v43, 0);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v7, AssociatedTypeWitness);
  v26 = *(void (**)(char *, uint64_t))(v17 + 8);
  v26(v22, v5);
  v27 = v34;
  static Predicated.unverified(value:proof:)((uint64_t)v20, (uint64_t)v16, v38, v37, v34);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v16, v12);
  v26(v20, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 40))(v31, v27, v41);
}

uint64_t Inhabited<>.inserting(_:at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a5, v5);
  return Inhabited<>.insert(_:at:)(a1, a2, a3, a4);
}

uint64_t Inhabited<>.insert<A>(contentsOf:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t HasHead;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, _QWORD);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52[40];

  v45 = a6;
  v43 = a5;
  v41 = a2;
  v38 = a1;
  v8 = *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8);
  v9 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v49 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v50 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v47 = (char *)&v37 - v11;
  v48 = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v13 = (char *)&v37 - v12;
  HasHead = type metadata accessor for HasHead(255, v9, v8, v14);
  v40 = HasHead;
  v39 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v46 = type metadata accessor for Predicated(0, HasHead, v39, v16);
  v42 = *(_QWORD *)(v46 - 8);
  v17 = MEMORY[0x24BDAC7A8](v46);
  v37 = (uint64_t)&v37 - v18;
  v19 = *(_QWORD *)(a4 - 8);
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(v9 - 8);
  v24 = MEMORY[0x24BDAC7A8](v20);
  v26 = (char *)&v37 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v37 - v27;
  v29 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, a3);
  PredicatedWrapper.value.getter(a3, v29, (uint64_t)v28);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v38, a4);
  sub_2448EB310();
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v26, v28, v9);
  sub_2448EB1E4();
  v30 = (void (*)(char *, _QWORD))sub_2448EB2E0();
  v32 = v49;
  v31 = v50;
  v33 = (uint64_t)v47;
  (*(void (**)(char *))(v49 + 16))(v47);
  v30(v52, 0);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v13, v48);
  v34 = *(void (**)(char *, uint64_t))(v23 + 8);
  v34(v28, v9);
  v35 = v37;
  static Predicated.unverified(value:proof:)((uint64_t)v26, v33, v40, v39, v37);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v31);
  v34(v26, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 40))(v51, v35, v46);
}

uint64_t Inhabited<>.inserting<A>(contentsOf:at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a7, v7);
  return Inhabited<>.insert<A>(contentsOf:at:)(a1, a2, a3, a4, a5, a6);
}

uint64_t Inhabited.init<A>(_:otherElements:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t HasHead;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v26 = a2;
  v28 = a4;
  v6 = sub_2448EB160();
  v27 = MEMORY[0x24951AC70](MEMORY[0x24BEE1718], v6);
  HasHead = type metadata accessor for HasHead(255, v6, v27, v7);
  v9 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v11 = type metadata accessor for Predicated(0, HasHead, v9, v10);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v25 - v13;
  v15 = *(_QWORD *)(a3 - 8);
  v16 = MEMORY[0x24BDAC7A8](v12);
  v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v25 - v19;
  v30 = sub_2448EA7E8();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a1, a3);
  sub_2448EB10C();
  v21 = *(void (**)(char *, uint64_t))(v15 + 8);
  v21(v20, a3);
  v29 = v26;
  v22 = sub_2448EAEE4();
  MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v22);
  sub_2448EB148();
  v29 = v30;
  static Predicated.unverified(value:proof:)((uint64_t)&v29, a1, HasHead, v9, (uint64_t)v14);
  v21((char *)a1, a3);
  swift_bridgeObjectRelease();
  return Inhabited.init(predicated:)((uint64_t)v14, v6, v27, v23, v28);
}

uint64_t Inhabited.insert<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t HasHead;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = MEMORY[0x24951AC70](MEMORY[0x24BEE1718], v4);
  HasHead = type metadata accessor for HasHead(255, v4, v5, v6);
  v28 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v9 = type metadata accessor for Predicated(0, HasHead, v28, v8);
  v29 = *(_QWORD *)(v9 - 8);
  v30 = v9;
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v27 - v11;
  v13 = *(_QWORD *)(v4 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v10);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v27 - v18;
  v20 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, a2);
  PredicatedWrapper.value.getter(a2, v20, (uint64_t)&v32);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a1, v13);
  sub_2448EB10C();
  v21 = *(void (**)(char *, uint64_t))(v14 + 8);
  v21(v19, v13);
  v31 = v32;
  swift_bridgeObjectRetain();
  v22 = sub_2448EB0C4();
  v24 = v23;
  LOBYTE(v14) = v25 & 1;
  sub_2448EB178();
  sub_2447DDA3C(v22, v24, v14);
  swift_bridgeObjectRelease();
  static Predicated.unverified(value:proof:)((uint64_t)&v31, (uint64_t)v19, HasHead, v28, (uint64_t)v12);
  v21(v19, v13);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 40))(v27, v12, v30);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t HasHead;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v26 = a1;
  v2 = a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 + 16);
  v30 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24951AC70](&protocol conformance descriptor for IdentifiedSet<A>, v3);
  HasHead = type metadata accessor for HasHead(255, v3, v7, v8);
  v27 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v11 = type metadata accessor for Predicated(0, HasHead, v27, v10);
  v28 = *(_QWORD *)(v11 - 8);
  v29 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v25 - v12;
  v14 = sub_2448EB508();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v25 - v16;
  v18 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, v2);
  PredicatedWrapper.value.getter(v2, v18, (uint64_t)&v33);
  IdentifiedSet.insert(_:)(v26, v3);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  v19 = v33;
  v31 = v33;
  v32 = v33;
  swift_bridgeObjectRetain();
  v20 = IdentifiedSet.startIndex.getter(v3);
  v22 = v21;
  LOBYTE(v2) = v23 & 1;
  v31 = v19;
  IdentifiedSet.subscript.getter(v20, v21);
  sub_2447DDA3C(v20, v22, v2);
  swift_bridgeObjectRelease();
  static Predicated.unverified(value:proof:)((uint64_t)&v32, (uint64_t)v6, HasHead, v27, (uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v4);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(_QWORD, char *, uint64_t))(v28 + 40))(v25[1], v13, v29);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t HasHead;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;

  v3 = v2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 + 16);
  v28 = *(_QWORD *)(v6 - 8);
  v24 = v6;
  v25 = a1;
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedIdentifiedSet<A>, v5);
  HasHead = type metadata accessor for HasHead(255, v5, v9, v10);
  v12 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v14 = type metadata accessor for Predicated(0, HasHead, v12, v13);
  v26 = *(_QWORD *)(v14 - 8);
  v27 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v23 - v15;
  v17 = sub_2448EB508();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v23 - v19;
  v21 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, a2);
  PredicatedWrapper.value.getter(a2, v21, (uint64_t)&v32);
  OrderedIdentifiedSet.insert(_:)(v25, v5, (uint64_t)v20);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  v31[0] = v32;
  v31[1] = v33;
  v29 = v32;
  v30 = v33;
  OrderedIdentifiedSet.subscript.getter(0, v5, (uint64_t)v8);
  static Predicated.unverified(value:proof:)((uint64_t)v31, (uint64_t)v8, HasHead, v12, (uint64_t)v16);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 40))(v3, v16, v27);
}

uint64_t Inhabited.formUnion<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t HasHead;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v5 = v4;
  v31 = a4;
  v29 = a1;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(v8 + 16);
  v34 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24951AC70](MEMORY[0x24BEE1718], v8);
  HasHead = type metadata accessor for HasHead(255, v8, v12, v13);
  v30 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v16 = type metadata accessor for Predicated(0, HasHead, v30, v15);
  v32 = *(_QWORD *)(v16 - 8);
  v33 = v16;
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v29 - v18;
  v20 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v29 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, a2);
  PredicatedWrapper.value.getter(a2, v23, (uint64_t)&v36);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, v29, a3);
  sub_2448EB148();
  v35 = v36;
  swift_bridgeObjectRetain();
  v24 = sub_2448EB0C4();
  v26 = v25;
  LOBYTE(v20) = v27 & 1;
  sub_2448EB178();
  sub_2447DDA3C(v24, v26, v20);
  swift_bridgeObjectRelease();
  static Predicated.unverified(value:proof:)((uint64_t)&v35, (uint64_t)v11, HasHead, v30, (uint64_t)v19);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v9);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v32 + 40))(v5, v19, v33);
}

uint64_t Inhabited.init<A>(_:otherElements:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t HasHead;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v24 = a2;
  v26 = a5;
  v7 = type metadata accessor for IdentifiedSet(255, a3, a4, a4);
  v25 = MEMORY[0x24951AC70](&protocol conformance descriptor for IdentifiedSet<A>, v7);
  HasHead = type metadata accessor for HasHead(255, v7, v25, v8);
  v10 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v12 = type metadata accessor for Predicated(0, HasHead, v10, v11);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v23 - v13;
  v15 = sub_2448EB508();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v23 - v17;
  IdentifiedSet.init()(&v28);
  IdentifiedSet.insert(_:)(a1, v7);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v27 = v24;
  v19 = sub_2448EAEE4();
  v20 = MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v19);
  IdentifiedSet.merge<A>(_:)((uint64_t)&v27, v7, v19, v20);
  swift_bridgeObjectRelease();
  v27 = v28;
  static Predicated.unverified(value:proof:)((uint64_t)&v27, a1, HasHead, v10, (uint64_t)v14);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  swift_bridgeObjectRelease();
  return Inhabited.init(predicated:)((uint64_t)v14, v7, v25, v21, v26);
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t HasHead;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;

  v23 = a2;
  v25 = a5;
  v7 = type metadata accessor for OrderedIdentifiedSet(255, a3, a4, a4);
  v24 = MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedIdentifiedSet<A>, v7);
  HasHead = type metadata accessor for HasHead(255, v7, v24, v8);
  v10 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v12 = type metadata accessor for Predicated(0, HasHead, v10, v11);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v22 - v13;
  v15 = sub_2448EB508();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v22 - v17;
  OrderedIdentifiedSet.init()(a3, &v27);
  OrderedIdentifiedSet.insert(_:)(a1, v7, (uint64_t)v18);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  *(_QWORD *)&v26 = v23;
  v19 = sub_2448EAEE4();
  MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v19);
  OrderedIdentifiedSet.append<A>(contentsOf:)((uint64_t)&v26, v7, v19);
  swift_bridgeObjectRelease();
  v26 = v27;
  static Predicated.unverified(value:proof:)((uint64_t)&v26, a1, HasHead, v10, (uint64_t)v14);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return Inhabited.init(predicated:)((uint64_t)v14, v7, v24, v20, v25);
}

uint64_t Inhabited.contains<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;

  v4 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>);
  PredicatedWrapper.value.getter(a2, v4, (uint64_t)&v6);
  LOBYTE(a2) = IdentifiedSet.contains(_:)(a1, *(_QWORD *)(a2 + 16));
  swift_bridgeObjectRelease();
  return a2 & 1;
}

void Inhabited.contains<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>);
  PredicatedWrapper.value.getter(a2, v4, (uint64_t)&v5);
  OrderedIdentifiedSet.contains(_:)(a1, *(_QWORD *)(a2 + 16));
}

uint64_t sub_2448449EC(char a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1 & 1;
}

uint64_t Inhabited.appending<A, B>(contentsOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t HasHead;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];

  v23 = a3;
  v24 = a4;
  v22 = a1;
  v26 = a5;
  v6 = *(_QWORD *)(a2 + 16);
  v25 = *(_QWORD *)(v6 + 16);
  v7 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedIdentifiedSet<A>, v6);
  HasHead = type metadata accessor for HasHead(255, v6, v10, v11);
  v13 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v15 = type metadata accessor for Predicated(0, HasHead, v13, v14);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v21 - v16;
  v18 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, a2);
  PredicatedWrapper.value.getter(a2, v18, (uint64_t)&v29);
  v27 = v29;
  v28 = v30;
  OrderedIdentifiedSet.appending<A>(_:)(v22, v6, v23, v24, v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v29 = v31[0];
  v30 = v31[1];
  OrderedIdentifiedSet.subscript.getter(0, v6, (uint64_t)v9);
  static Predicated.unverified(value:proof:)((uint64_t)v31, (uint64_t)v9, HasHead, v13, (uint64_t)v17);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return Inhabited.init(predicated:)((uint64_t)v17, v6, v10, v19, v26);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t HasHead;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];

  v23 = a3;
  v24 = a4;
  v22 = a1;
  v26 = a5;
  v6 = *(_QWORD *)(a2 + 16);
  v25 = *(_QWORD *)(v6 + 16);
  v7 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedSet<A>, v6);
  HasHead = type metadata accessor for HasHead(255, v6, v10, v11);
  v13 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v15 = type metadata accessor for Predicated(0, HasHead, v13, v14);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v21 - v16;
  v18 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, a2);
  PredicatedWrapper.value.getter(a2, v18, (uint64_t)&v29);
  v27 = v29;
  v28 = v30;
  OrderedSet.appending<A>(contentsOf:)(v22, v6, v23, v24, v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v29 = v31[0];
  v30 = v31[1];
  OrderedSet.subscript.getter();
  static Predicated.unverified(value:proof:)((uint64_t)v31, (uint64_t)v9, HasHead, v13, (uint64_t)v17);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return Inhabited.init(predicated:)((uint64_t)v17, v6, v10, v19, v26);
}

uint64_t Inhabited.append<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t HasHead;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;

  v3 = v2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 + 16);
  v21 = a1;
  v22 = v6;
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedSet<A>, v5);
  HasHead = type metadata accessor for HasHead(255, v5, v10, v11);
  v13 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v15 = type metadata accessor for Predicated(0, HasHead, v13, v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v21 - v17;
  v19 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, a2);
  PredicatedWrapper.value.getter(a2, v19, (uint64_t)&v26);
  OrderedSet.append(_:)(v21, v5);
  v25[0] = v26;
  v25[1] = v27;
  v23 = v26;
  v24 = v27;
  OrderedSet.subscript.getter();
  static Predicated.unverified(value:proof:)((uint64_t)v25, (uint64_t)v9, HasHead, v13, (uint64_t)v18);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 40))(v3, v18, v15);
}

uint64_t Inhabited.append<A, B>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t HasHead;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;

  v5 = v4;
  v23 = a3;
  v24 = a4;
  v22 = a1;
  v7 = *(_QWORD *)(a2 + 16);
  v25 = *(_QWORD *)(v7 + 16);
  v8 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedSet<A>, v7);
  HasHead = type metadata accessor for HasHead(255, v7, v11, v12);
  v14 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v16 = type metadata accessor for Predicated(0, HasHead, v14, v15);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v22 - v18;
  v20 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, a2);
  PredicatedWrapper.value.getter(a2, v20, (uint64_t)&v29);
  OrderedSet.append<A>(contentsOf:)(v22, v7, v23);
  v28[0] = v29;
  v28[1] = v30;
  v26 = v29;
  v27 = v30;
  OrderedSet.subscript.getter();
  static Predicated.unverified(value:proof:)((uint64_t)v28, (uint64_t)v10, HasHead, v14, (uint64_t)v19);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 40))(v5, v19, v16);
}

uint64_t Inhabited.appending<A, B>(contentsOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t HasHead;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t TupleTypeMetadata2;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[3];

  v27[1] = a1;
  v36 = a3;
  v4 = *(_QWORD **)(a2 + 16);
  v5 = v4[3];
  v30 = v4[2];
  v6 = v30;
  v7 = v5;
  v34 = v5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v35 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v8 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v10 = (char *)v27 - v9;
  v31 = *(_QWORD *)(v7 - 8);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v28 = (uint64_t)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedDictionary<A, B>, v4);
  HasHead = type metadata accessor for HasHead(255, (uint64_t)v4, v32, v15);
  v27[0] = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v18 = type metadata accessor for Predicated(0, HasHead, v27[0], v17);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)v27 - v19;
  v21 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, a2);
  PredicatedWrapper.value.getter(a2, v21, (uint64_t)&v41);
  v39 = v41;
  v40 = v42;
  PredicatedWrapper.value.getter(a2, v21, (uint64_t)&v38);
  v37 = v38;
  OrderedDictionary.appending(contentsOf:)(&v37, v4, v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v41 = v43[0];
  v42 = v43[1];
  v22 = v28;
  OrderedDictionary.subscript.getter((uint64_t)v14, v28, 0, v4);
  v23 = TupleTypeMetadata2;
  v24 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v10, v14, v30);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v24, v22, v34);
  static Predicated.unverified(value:proof:)((uint64_t)v43, (uint64_t)v10, HasHead, v27[0], (uint64_t)v20);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return Inhabited.init(predicated:)((uint64_t)v20, (uint64_t)v4, v32, v25, v36);
}

uint64_t Inhabited<>.uniqued()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t HasHead;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v29 = a2;
  v33 = a3;
  v4 = *(_QWORD *)(a1 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)&v27 - v6;
  v8 = sub_2448EB160();
  v31 = v8;
  v30 = MEMORY[0x24951AC70](MEMORY[0x24BEE1718], v8);
  HasHead = type metadata accessor for HasHead(255, v8, v30, v9);
  v28 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v12 = type metadata accessor for Predicated(0, HasHead, v28, v11);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v27 - v14;
  v16 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, a1);
  PredicatedWrapper.value.getter(a1, v19, (uint64_t)v18);
  v20 = Collection<>.uniqued()(v4);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v4);
  v34 = v20;
  v21 = sub_2448EB0C4();
  v23 = v22;
  LOBYTE(v4) = v24 & 1;
  sub_2448EB178();
  sub_2447DDA3C(v21, v23, v4);
  static Predicated.unverified(value:proof:)((uint64_t)&v34, (uint64_t)v7, HasHead, v28, (uint64_t)v15);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v7, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  return Inhabited.init(predicated:)((uint64_t)v15, v31, v30, v25, v33);
}

uint64_t Inhabited<>.orderedUniqued()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t HasHead;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;

  v29[0] = a3;
  v29[1] = a2;
  v33 = a4;
  v6 = *(_QWORD *)(a1 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v31 = AssociatedTypeWitness;
  v32 = v8;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)v29 - v9;
  v13 = type metadata accessor for OrderedSet(255, v11, a3, v12);
  v30 = MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedSet<A>, v13);
  HasHead = type metadata accessor for HasHead(255, v13, v30, v14);
  v16 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v18 = type metadata accessor for Predicated(0, HasHead, v16, v17);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)v29 - v20;
  v22 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)v29 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, a1);
  PredicatedWrapper.value.getter(a1, v25, (uint64_t)v24);
  v26 = Collection<>.orderedUniqued()(v6, v29[0], &v35);
  (*(void (**)(char *, uint64_t, double))(v22 + 8))(v24, v6, v26);
  v34 = v35;
  OrderedSet.subscript.getter();
  static Predicated.unverified(value:proof:)((uint64_t)&v35, (uint64_t)v10, HasHead, v16, (uint64_t)v21);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return Inhabited.init(predicated:)((uint64_t)v21, v13, v30, v27, v33);
}

uint64_t Inhabited<>.identified()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t HasHead;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v33 = a3;
  v5 = a1;
  v38 = a4;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v36 = AssociatedTypeWitness;
  v37 = v9;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v33 - v10;
  v14 = type metadata accessor for IdentifiedSet(255, v12, a3, v13);
  v35 = MEMORY[0x24951AC70](&protocol conformance descriptor for IdentifiedSet<A>, v14);
  HasHead = type metadata accessor for HasHead(255, v14, v35, v15);
  v34 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v18 = type metadata accessor for Predicated(0, HasHead, v34, v17);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v33 - v20;
  v22 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, v5);
  PredicatedWrapper.value.getter(v5, v25, (uint64_t)v24);
  Sequence<>.identified()(v7, v6, v33, &v40);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v7);
  v26 = v40;
  v39 = v40;
  v27 = IdentifiedSet.startIndex.getter(v14);
  v29 = v28;
  LOBYTE(v5) = v30 & 1;
  v39 = v26;
  swift_bridgeObjectRetain();
  IdentifiedSet.subscript.getter(v27, v29);
  sub_2447DDA3C(v27, v29, v5);
  swift_bridgeObjectRelease();
  static Predicated.unverified(value:proof:)((uint64_t)&v40, (uint64_t)v11, HasHead, v34, (uint64_t)v21);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v11, v36);
  swift_bridgeObjectRelease();
  return Inhabited.init(predicated:)((uint64_t)v21, v14, v35, v31, v38);
}

uint64_t Inhabited<>.orderedIdentified()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t HasHead;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;

  v34 = a4;
  v6 = *(_QWORD *)(a2 + 8);
  v30[0] = a3;
  v30[1] = v6;
  v7 = *(_QWORD *)(a1 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v32 = AssociatedTypeWitness;
  v33 = v9;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)v30 - v10;
  v14 = type metadata accessor for OrderedIdentifiedSet(255, v12, a3, v13);
  v31 = MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedIdentifiedSet<A>, v14);
  HasHead = type metadata accessor for HasHead(255, v14, v31, v15);
  v17 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v19 = type metadata accessor for Predicated(0, HasHead, v17, v18);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)v30 - v21;
  v23 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v25 = (char *)v30 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, a1);
  PredicatedWrapper.value.getter(a1, v26, (uint64_t)v25);
  v27 = Sequence<>.orderedIdentified()(v7, &v36);
  (*(void (**)(char *, uint64_t, double))(v23 + 8))(v25, v7, v27);
  v35 = v36;
  OrderedIdentifiedSet.subscript.getter(0, v14, (uint64_t)v11);
  static Predicated.unverified(value:proof:)((uint64_t)&v36, (uint64_t)v11, HasHead, v17, (uint64_t)v22);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return Inhabited.init(predicated:)((uint64_t)v22, v14, v31, v28, v34);
}

uint64_t Inhabited.invert<A, B>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  void (*v74)(char *, char *, uint64_t);
  void (*v75)(char *, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t HasHead;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  _QWORD v84[2];
  _QWORD v85[4];
  uint64_t v86;

  v70 = a2;
  v71 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v71 + 16);
  v5 = *(_QWORD *)(v4 + 16);
  v6 = sub_2448EAEE4();
  v81 = MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v6);
  v82 = v6;
  HasHead = type metadata accessor for HasHead(255, v6, v81, v7);
  v67 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v9 = type metadata accessor for Predicated(0, HasHead, v67, v8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v66 = (uint64_t)&v62 - v11;
  v68 = *(_QWORD *)(a1 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v69 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = v5;
  v14 = *(_QWORD *)(v5 - 8);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v78 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v62 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v62 - v21;
  v23 = *(_QWORD *)(v4 - 8);
  v24 = MEMORY[0x24BDAC7A8](v20);
  v26 = (char *)&v62 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v24);
  v29 = (char *)&v62 - v28;
  MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)&v62 - v30;
  v72 = a1;
  Inhabited.first.getter(a1, v32, (uint64_t)&v62 - v30);
  v33 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  v33(v29, v31, v4);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v31, v4);
    (*(void (**)(uint64_t, char *, _QWORD))(*(_QWORD *)(*(_QWORD *)(v4 + 24) - 8) + 32))(v70, v29, *(_QWORD *)(v4 + 24));
    type metadata accessor for Inhabited(255, v82, v81, v34);
    sub_2448EBD48();
    return swift_storeEnumTagMultiPayload();
  }
  v75 = (void (*)(char *, uint64_t, uint64_t))v33;
  v83 = v19;
  v64 = v31;
  v76 = v23;
  v35 = v80;
  v74 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v74(v22, v29, v80);
  sub_2448464D4(v35, v35);
  swift_allocObject();
  v36 = sub_2448EAE0C();
  v77 = v14;
  v37 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v65 = v22;
  v73 = v37;
  v37(v38, v22, v35);
  sub_244805474();
  v63 = v36;
  v86 = v36;
  v39 = v72;
  (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v69, v2, v72);
  v84[1] = 1;
  v84[0] = MEMORY[0x24951AC70](MEMORY[0x24BEE12E0], v71);
  MEMORY[0x24951AC70](&protocol conformance descriptor for <> Inhabited<A>, v39, v84);
  sub_2448EB280();
  v40 = v85[1];
  v41 = v85[2];
  v42 = v85[3];
  swift_unknownObjectRetain();
  v43 = sub_2448EB670();
  swift_unknownObjectRelease();
  if (v43 == sub_2448EB688())
  {
    swift_unknownObjectRelease();
    v44 = v81;
    v45 = v70;
    v46 = HasHead;
    v47 = v63;
LABEL_11:
    (*(void (**)(char *, uint64_t))(v76 + 8))(v64, v4);
    v85[0] = v47;
    v55 = v66;
    v56 = (uint64_t)v65;
    static Predicated.unverified(value:proof:)((uint64_t)v85, (uint64_t)v65, v46, v67, v66);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v56, v35);
    v57 = v55;
    v58 = v82;
    Inhabited.init(predicated:)(v57, v82, v44, v59, v45);
    type metadata accessor for Inhabited(255, v58, v44, v60);
    sub_2448EBD48();
    return swift_storeEnumTagMultiPayload();
  }
  v71 = v42 >> 1;
  v72 = v43;
  v48 = v43;
  v49 = v83;
  while (1)
  {
    result = sub_2448EB67C();
    if (v72 < v41 || v71 <= v48)
      break;
    v51 = v76;
    v75(v26, v40 + *(_QWORD *)(v76 + 72) * v48, v4);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v77 + 8))(v65, v80);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v64, v4);
      (*(void (**)(uint64_t, char *, _QWORD))(*(_QWORD *)(*(_QWORD *)(v4 + 24) - 8) + 32))(v70, v26, *(_QWORD *)(v4 + 24));
      type metadata accessor for Inhabited(255, v82, v81, v61);
      sub_2448EBD48();
      return swift_storeEnumTagMultiPayload();
    }
    ++v48;
    v52 = v80;
    v74(v49, v26, v80);
    v73(v78, v83, v52);
    v49 = v83;
    sub_2448EAE9C();
    v53 = v52;
    v46 = HasHead;
    (*(void (**)(char *, uint64_t))(v77 + 8))(v49, v53);
    v54 = sub_2448EB688();
    v44 = v81;
    if (v48 == v54)
    {
      swift_unknownObjectRelease();
      v47 = v86;
      v45 = v70;
      v35 = v80;
      goto LABEL_11;
    }
  }
  __break(1u);
  return result;
}

uint64_t Sequence.inhabited()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Inhabited(0, a1, v8, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, a1);
  v11 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, v10);
  return PredicatedWrapper.init(_:)((uint64_t)v7, v10, v11, a2);
}

uint64_t sub_2448464D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (swift_isClassType())
    v3 = a2;
  else
    v3 = 0;
  if (v3)
    return __swift_instantiateConcreteTypeFromMangledName(&qword_25738B410);
  else
    return sub_2448EBB68();
}

uint64_t sub_244846520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t HasHead;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v5 = v4;
  v39 = a4;
  v35 = a2;
  v36 = a1;
  v7 = *(_QWORD *)(a3 + 16);
  HasHead = type metadata accessor for HasHead(255, v7, *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8), a4);
  v37 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v9 = type metadata accessor for Predicated(0, HasHead, v37, v8);
  v40 = *(_QWORD *)(v9 - 8);
  v41 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v34 = (uint64_t)&v30 - v10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v31 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = v31;
  v32 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = (char *)&v30 - v13;
  v15 = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v30 - v18;
  v33 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, a3);
  PredicatedWrapper.value.getter(a3, v22, (uint64_t)v21);
  v23 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v35, v15);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v25 = v36;
  v26 = v32;
  v24(v14, v36, v32);
  v27 = v39;
  sub_2448EAA4C();
  sub_244842008(v23, v5, v25, v7, v27, (uint64_t)v14);
  v28 = v34;
  static Predicated.unverified(value:proof:)((uint64_t)v21, (uint64_t)v14, HasHead, v37, v34);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v26);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v21, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 40))(v5, v28, v41);
}

uint64_t sub_244846798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t HasHead;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v35 = a2;
  v39 = a4;
  v36 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  HasHead = type metadata accessor for HasHead(255, v5, *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8), a4);
  v37 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  v7 = type metadata accessor for Predicated(0, HasHead, v37, v6);
  v40 = *(_QWORD *)(v7 - 8);
  v41 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v33 = (uint64_t)&v28 - v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v31 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v32 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v28 - v10;
  v12 = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(v12 - 8);
  v30 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v28 - v13;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v15 = sub_2448EB370();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v28 - v18;
  v20 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v28 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, a3);
  v24 = v34;
  PredicatedWrapper.value.getter(a3, v23, (uint64_t)v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v35, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v14, v36, v30);
  v25 = v39;
  sub_2448EAA40();
  sub_2448425A4(v24, (uint64_t)v22, v5, v25, (uint64_t)v11);
  v26 = v33;
  static Predicated.unverified(value:proof:)((uint64_t)v22, (uint64_t)v11, HasHead, v37, v33);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v32);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 40))(v24, v26, v41);
}

void sub_244846A78()
{
  JUMPOUT(0x24951AC70);
}

uint64_t sub_244846A88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x24951AC70](&protocol conformance descriptor for <> Inhabited<A>, a1, &v4);
}

uint64_t sub_244846AC0()
{
  return swift_getAssociatedConformanceWitness();
}

void sub_244846ADC()
{
  JUMPOUT(0x24951AC70);
}

uint64_t sub_244846AEC()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_244846B10()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_244846B34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 16);
  return MEMORY[0x24951AC70](&protocol conformance descriptor for <> Inhabited<A>, a1, &v4);
}

uint64_t sub_244846B6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x24951AC70](&protocol conformance descriptor for <> Inhabited<A>, a1, &v4);
}

uint64_t sub_244846BA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_244846C28(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> Inhabited<A>, MEMORY[0x24BEE0658]);
}

uint64_t sub_244846BB8()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_244846BDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x24951AC70](&protocol conformance descriptor for <> Inhabited<A>, a1, &v4);
}

uint64_t sub_244846C14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_244846C28(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> Inhabited<A>, MEMORY[0x24BEE0668]);
}

uint64_t sub_244846C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;

  v9 = *(_QWORD *)(a3 - 8);
  v8 = MEMORY[0x24951AC70](a4, a2, &v9);
  return MEMORY[0x24951AC70](a5, a1, &v8);
}

uint64_t sub_244846C78()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_244846C9C()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_244846CC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2448423FC(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))Inhabited<>.subscript.getter);
}

uint64_t sub_244846CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_244842464(a1, a2, a3, a4, sub_244846520);
}

uint64_t sub_244846CF8()
{
  return 16;
}

__n128 sub_244846D04(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_244846D10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2448423FC(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))Inhabited<>.subscript.getter);
}

uint64_t sub_244846D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_244842464(a1, a2, a3, a4, sub_244846798);
}

uint64_t sub_244846D48()
{
  return 16;
}

__n128 sub_244846D54(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_244846D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t HasHead;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;

  HasHead = type metadata accessor for HasHead(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v5 = MEMORY[0x24951AC70](&protocol conformance descriptor for HasHead<A>, HasHead);
  result = type metadata accessor for Predicated(319, HasHead, v5, v6);
  if (v8 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_244846DF0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v9 + 80));
  if (v12 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (v11 & (unint64_t)~v10) + *(_QWORD *)(v9 + 64) > 0x18)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    v16 = AssociatedTypeWitness;
    v17 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v17, ((unint64_t)a2 + v11) & v17, v16);
  }
  return a1;
}

uint64_t sub_244846EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(uint64_t, _QWORD))(v3 + 8))(a1, *(_QWORD *)(a2 + 16));
  v4 = *(_QWORD *)(v3 + 64) + a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))((v4 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
}

uint64_t sub_244846F60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_244846FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 24))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_244847090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_244847128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 40))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_2448471C0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v7)
    v11 = v7;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = *(_QWORD *)(v6 + 64) + v12;
  if (a2 <= v11)
    goto LABEL_23;
  v14 = (v13 & ~v12) + *(_QWORD *)(v9 + 64);
  v15 = 8 * v14;
  if (v14 <= 3)
  {
    v17 = ((a2 - v11 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      v16 = *(_DWORD *)(a1 + v14);
      if (!v16)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v17 > 0xFF)
    {
      v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v17 < 2)
    {
LABEL_23:
      if (v11)
      {
        if (v7 >= v10)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
        else
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))((v13 + a1) & ~v12, v10, AssociatedTypeWitness);
      }
      return 0;
    }
  }
  v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14))
    goto LABEL_23;
LABEL_14:
  v18 = (v16 - 1) << v15;
  if (v14 > 3)
    v18 = 0;
  if ((_DWORD)v14)
  {
    if (v14 <= 3)
      v19 = v14;
    else
      v19 = 4;
    __asm { BR              X12 }
  }
  return v11 + v18 + 1;
}

void sub_24484736C(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v9 + 84) <= v8)
    v10 = v8;
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = ((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
      + *(_QWORD *)(v9 + 64);
  if (a3 <= v10)
  {
    v12 = 0;
  }
  else if (v11 <= 3)
  {
    v14 = ((a3 - v10 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v12 = 4u;
    }
    else if (v14 >= 0x100)
    {
      v12 = 2;
    }
    else
    {
      v12 = v14 > 1;
    }
  }
  else
  {
    v12 = 1u;
  }
  if (v10 < a2)
  {
    v13 = ~v10 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        v15 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if ((_DWORD)v11 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_2448475A0@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v43 = a3;
  v42 = sub_2448EA434();
  v7 = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v36 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738CF38);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738CB98);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (uint64_t *)((char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_24482FC80(a2, (uint64_t)v14);
  v15 = *v14;
  swift_bridgeObjectRetain();
  sub_2447BD180((uint64_t)v14, &qword_25738CB98);
  v41 = *(_QWORD *)(v15 + 16);
  v34 = a4;
  v33 = v15;
  if (v41)
  {
    v16 = 0;
    v40 = v15 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v17 = *(_QWORD *)(v7 + 72);
    v38 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v39 = v17;
    v18 = v36;
    v19 = v42;
    v35 = v7;
    v37 = v11;
    v38(v11, v40, v42);
    while (1)
    {
      v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
      v20(v11, 0, 1, v19);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v19) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v18, v11, v19);
      sub_2448EA41C();
      v21 = (void *)sub_2448EAA70();
      swift_bridgeObjectRelease();
      v22 = objc_msgSend(v21, sel_pathComponents, v33, v34);

      v23 = sub_2448EADE8();
      v24 = *(_QWORD *)(v23 + 16);
      v25 = sub_2448EB0D0();
      v45 = v25;
      if (v24)
      {
        v26 = (uint64_t *)(v23 + 40);
        do
        {
          v27 = *(v26 - 1);
          v28 = *v26;
          swift_bridgeObjectRetain();
          sub_244848584(&v44, v27, v28);
          swift_bridgeObjectRelease();
          v26 += 2;
          --v24;
        }
        while (v24);
        swift_bridgeObjectRelease();
        v29 = v45;
        v7 = v35;
        v18 = v36;
      }
      else
      {
        v29 = v25;
        swift_bridgeObjectRelease();
      }
      v11 = v37;
      v19 = v42;
      v30 = *(_QWORD *)(sub_244849000(v43, v29) + 16);
      swift_release();
      if (*(_QWORD *)a1 < v30)
      {
        *(_QWORD *)a1 = v30;
        v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738DEA0);
        (*(void (**)(char *, char *, uint64_t))(v7 + 24))(&a1[*(int *)(v31 + 48)], v18, v19);
      }
      ++v16;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v19);
      if (v16 == v41)
        goto LABEL_14;
      v38(v11, v40 + v39 * v16, v19);
    }
  }
  else
  {
    v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v19 = v42;
LABEL_14:
    v20(v11, 1, 1, v19);
  }
  swift_bridgeObjectRelease();
  sub_2447D3184((uint64_t)a1, v34, &qword_25738DEA0);
  return swift_bridgeObjectRelease();
}

uint64_t BuiltProductPathResolver.providers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_244847900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A208);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v0 + 120))
  {
    v4 = *(_QWORD *)(v0 + 120);
  }
  else
  {
    v5 = sub_2448EAF74();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v3, 1, 1, v5);
    v6 = sub_244849950();
    v7 = (_QWORD *)swift_allocObject();
    v7[2] = v0;
    v7[3] = v6;
    v7[4] = v0;
    swift_retain_n();
    v4 = sub_2447C5CD8((uint64_t)v3, (uint64_t)&unk_25738DEC8, (uint64_t)v7);
    *(_QWORD *)(v0 + 120) = v4;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v4;
}

uint64_t sub_2448479F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 56) = a1;
  *(_QWORD *)(v4 + 64) = a4;
  return swift_task_switch();
}

uint64_t sub_244847A10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 112);
  *(_QWORD *)(v0 + 72) = v1;
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 80) = v2;
  if (v2)
  {
    v3 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v0 + 88) = 0;
    *(_QWORD *)(v0 + 96) = v3;
    v4 = v1 + 32;
    swift_bridgeObjectRetain();
    sub_2447CE01C(v4, v0 + 16);
    v5 = *(_QWORD *)(v0 + 40);
    v6 = *(_QWORD *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v5);
    v13 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v6 + 8) + *(_QWORD *)(v6 + 8));
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 104) = v7;
    *v7 = v0;
    v7[1] = sub_244847B0C;
    return v13(v5, v6);
  }
  else
  {
    v9 = *(uint64_t **)(v0 + 56);
    v10 = sub_244849A24(MEMORY[0x24BEE4AF8]);
    v12 = v11;
    swift_bridgeObjectRelease();
    *v9 = v10;
    v9[1] = v12;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_244847B0C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_244847B6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  int64_t v4;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t (*v34)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 96) + 16);
  v4 = v3 + v2;
  if (__OFADD__(v3, v2))
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *(_QWORD *)(v0 + 96);
  if (isUniquelyReferenced_nonNull_native && v4 <= *(_QWORD *)(v6 + 24) >> 1)
  {
    if (*(_QWORD *)(v1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v3 <= v4)
    v22 = v3 + v2;
  else
    v22 = v3;
  v6 = sub_2447C29B8(isUniquelyReferenced_nonNull_native, v22, 1, *(_QWORD *)(v0 + 96));
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_23;
  }
LABEL_5:
  v7 = *(_QWORD *)(v6 + 16);
  v8 = (*(_QWORD *)(v6 + 24) >> 1) - v7;
  v9 = sub_2448EA434();
  if (v8 < v2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = *(_QWORD *)(v10 + 72);
  v13 = v6 + v11 + v12 * v7;
  v14 = *(_QWORD *)(v0 + 112) + v11;
  v15 = v12 * v2;
  v16 = v13 + v15;
  v17 = v14 + v15;
  if (v14 < v16 && v13 < v17)
    return sub_2448EBA48();
  swift_arrayInitWithCopy();
  if (v2)
  {
    v19 = *(_QWORD *)(v6 + 16);
    v20 = __OFADD__(v19, v2);
    v21 = v19 + v2;
    if (!v20)
    {
      *(_QWORD *)(v6 + 16) = v21;
      goto LABEL_19;
    }
LABEL_25:
    __break(1u);
    return sub_2448EBA48();
  }
LABEL_19:
  v24 = *(_QWORD *)(v0 + 80);
  v23 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  if (v23 + 1 == v24)
  {
    swift_bridgeObjectRelease();
    v25 = *(uint64_t **)(v0 + 56);
    v26 = sub_244849A24(v6);
    v28 = v27;
    swift_bridgeObjectRelease();
    *v25 = v26;
    v25[1] = v28;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v30 = *(_QWORD *)(v0 + 88) + 1;
    *(_QWORD *)(v0 + 88) = v30;
    *(_QWORD *)(v0 + 96) = v6;
    sub_2447CE01C(*(_QWORD *)(v0 + 72) + 40 * v30 + 32, v0 + 16);
    v31 = *(_QWORD *)(v0 + 40);
    v32 = *(_QWORD *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v31);
    v34 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v32 + 8) + *(_QWORD *)(v32 + 8));
    v33 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 104) = v33;
    *v33 = v0;
    v33[1] = sub_244847B0C;
    return v34(v31, v32);
  }
}

uint64_t BuiltProductPathResolver.__allocating_init(providers:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  swift_defaultActor_initialize();
  *(_QWORD *)(v2 + 112) = a1;
  *(_QWORD *)(v2 + 120) = 0;
  return v2;
}

uint64_t BuiltProductPathResolver.init(providers:)(uint64_t a1)
{
  uint64_t v1;

  swift_defaultActor_initialize();
  *(_QWORD *)(v1 + 112) = a1;
  *(_QWORD *)(v1 + 120) = 0;
  return v1;
}

uint64_t sub_244847E24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return swift_task_switch();
}

uint64_t sub_244847E40()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 56) = sub_244847900();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v1;
  *v1 = v0;
  v1[1] = sub_244847EB0;
  return sub_2448EB058();
}

uint64_t sub_244847EB0()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_244847F10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = sub_244847F74(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  v3 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v3);
}

uint64_t sub_244847F74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v50[3];
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v56 = a4;
  v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738DEA0);
  v7 = MEMORY[0x24BDAC7A8](v54);
  v53 = (char *)v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v52 = (uint64_t)v50 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738DEA8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738CB98);
  v13 = *(_QWORD *)(v55 - 8);
  MEMORY[0x24BDAC7A8](v55);
  v51 = (uint64_t)v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738CF38);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_2448EA434();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v50[0] = (char *)v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)v50 - v22;
  v50[1] = a1;
  v50[2] = a2;
  v24 = (void *)sub_2448EAA70();
  v25 = objc_msgSend(v24, sel_lastPathComponent);

  v26 = sub_2448EAA94();
  v28 = v27;

  if (*(_QWORD *)(a3 + 16))
  {
    swift_bridgeObjectRetain();
    v29 = sub_244828D0C(v26, v28);
    if ((v30 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v17, *(_QWORD *)(a3 + 56) + *(_QWORD *)(v19 + 72) * v29, v18);
      v31 = 0;
    }
    else
    {
      v31 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, v31, 1, v18);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) != 1)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v23, v17, v18);
      v37 = sub_2448EA41C();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v18);
      return v37;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
  }
  sub_2447BD180((uint64_t)v17, &qword_25738CF38);
  v32 = v56;
  if (*(_QWORD *)(v56 + 16))
  {
    v33 = sub_244828D0C(v26, v28);
    v34 = v55;
    if ((v35 & 1) != 0)
    {
      sub_24482FC80(*(_QWORD *)(v32 + 56) + *(_QWORD *)(v13 + 72) * v33, (uint64_t)v12);
      v36 = 0;
    }
    else
    {
      v36 = 1;
    }
  }
  else
  {
    v36 = 1;
    v34 = v55;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v12, v36, 1, v34);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v34) == 1)
  {
    sub_2447BD180((uint64_t)v12, &qword_25738DEA8);
    return 0;
  }
  else
  {
    v38 = v51;
    sub_2447D3184((uint64_t)v12, v51, &qword_25738CB98);
    v39 = (void *)sub_2448EAA70();
    v40 = objc_msgSend(v39, sel_pathComponents);

    v41 = sub_2448EADE8();
    v42 = sub_2447D1038(v41);
    swift_bridgeObjectRelease();
    v43 = v38 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_25738DEB0) + 36);
    v45 = v53;
    v44 = v54;
    v46 = &v53[*(int *)(v54 + 48)];
    *(_QWORD *)v53 = 0;
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v46, v43, v18);
    v47 = v52;
    sub_2448475A0(v45, v38, v42, v52);
    v48 = v50[0];
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v19 + 32))(v50[0], v47 + *(int *)(v44 + 48), v18);
    v37 = sub_2448EA41C();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v48, v18);
    sub_2447BD180(v38, &qword_25738CB98);
  }
  return v37;
}

uint64_t BuiltProductPathResolver.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t BuiltProductPathResolver.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t BuiltProductPathResolver.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_24484846C()
{
  uint64_t v0;

  return v0;
}

uint64_t type metadata accessor for BuiltProductPathResolver()
{
  return objc_opt_self();
}

uint64_t method lookup function for BuiltProductPathResolver()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of BuiltProductPathResolver.__allocating_init(providers:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of BuiltProductPathResolver.resolve(path:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 136) + *(_QWORD *)(*(_QWORD *)v2 + 136));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_24484851C;
  return v8(a1, a2);
}

uint64_t sub_24484851C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

ValueMetadata *type metadata accessor for BuiltProductPathResolver.Cache()
{
  return &type metadata for BuiltProductPathResolver.Cache;
}

uint64_t sub_244848584(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_2448EBD00();
  swift_bridgeObjectRetain();
  sub_2448EAB60();
  v8 = sub_2448EBD3C();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_2448EBBEC() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_2448EBBEC() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_244848A0C(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_244848730()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CF50);
  v3 = sub_2448EB754();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_2448EBD00();
      sub_2448EAB60();
      result = sub_2448EBD3C();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_244848A0C(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_244848730();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_244848BA4();
      goto LABEL_22;
    }
    sub_244848D54();
  }
  v11 = *v4;
  sub_2448EBD00();
  sub_2448EAB60();
  result = sub_2448EBD3C();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_2448EBBEC(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_2448EBC70();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_2448EBBEC();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

void *sub_244848BA4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CF50);
  v2 = *v0;
  v3 = sub_2448EB748();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_244848D54()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CF50);
  v3 = sub_2448EB754();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_2448EBD00();
    swift_bridgeObjectRetain();
    sub_2448EAB60();
    result = sub_2448EBD3C();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_244849000(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unint64_t v5;
  size_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v10[2];

  v3 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x24BDAC8D0];
  v4 = *(_BYTE *)(a2 + 32);
  v5 = (unint64_t)((1 << v4) + 63) >> 6;
  v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    v7 = sub_244849180((uint64_t)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v5, a2, v3);
    swift_release();
  }
  else
  {
    v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    v7 = sub_244849180((uint64_t)v8, v5, a2, v3);
    swift_release();
    MEMORY[0x24951AD84](v8, -1, -1);
  }
  return v7;
}

uint64_t sub_244849180(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t v28;
  unint64_t i;
  unint64_t v30;
  _QWORD *v31;
  BOOL v32;
  BOOL v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  BOOL v52;
  uint64_t v53;
  _QWORD *v54;
  BOOL v55;
  unint64_t *v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  int64_t v63;

  v4 = a4;
  v5 = a3;
  v57 = (unint64_t *)result;
  if (*(_QWORD *)(a4 + 16) < *(_QWORD *)(a3 + 16))
  {
    v6 = 0;
    v58 = a4 + 56;
    v7 = 1 << *(_BYTE *)(a4 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(a4 + 56);
    v59 = (unint64_t)(v7 + 63) >> 6;
    v61 = 0;
    v10 = a3 + 56;
    while (1)
    {
      while (1)
      {
        if (v9)
        {
          v11 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          v62 = v6;
          v12 = v11 | (v6 << 6);
        }
        else
        {
          v13 = v6 + 1;
          if (__OFADD__(v6, 1))
          {
            __break(1u);
            goto LABEL_81;
          }
          if (v13 >= v59)
            goto LABEL_79;
          v14 = *(_QWORD *)(v58 + 8 * v13);
          v15 = v6 + 1;
          if (!v14)
          {
            v15 = v6 + 2;
            if (v6 + 2 >= v59)
              goto LABEL_79;
            v14 = *(_QWORD *)(v58 + 8 * v15);
            if (!v14)
            {
              v15 = v6 + 3;
              if (v6 + 3 >= v59)
                goto LABEL_79;
              v14 = *(_QWORD *)(v58 + 8 * v15);
              if (!v14)
              {
                v16 = v6 + 4;
                if (v6 + 4 >= v59)
                  goto LABEL_79;
                v14 = *(_QWORD *)(v58 + 8 * v16);
                if (!v14)
                {
                  while (1)
                  {
                    v15 = v16 + 1;
                    if (__OFADD__(v16, 1))
                      goto LABEL_83;
                    if (v15 >= v59)
                      goto LABEL_79;
                    v14 = *(_QWORD *)(v58 + 8 * v15);
                    ++v16;
                    if (v14)
                      goto LABEL_22;
                  }
                }
                v15 = v6 + 4;
              }
            }
          }
LABEL_22:
          v9 = (v14 - 1) & v14;
          v62 = v15;
          v12 = __clz(__rbit64(v14)) + (v15 << 6);
        }
        v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v12);
        v19 = *v17;
        v18 = v17[1];
        sub_2448EBD00();
        swift_bridgeObjectRetain();
        sub_2448EAB60();
        v20 = sub_2448EBD3C();
        v21 = -1 << *(_BYTE *)(v5 + 32);
        v22 = v20 & ~v21;
        v23 = v22 >> 6;
        v24 = 1 << v22;
        if (((1 << v22) & *(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
          break;
LABEL_6:
        result = swift_bridgeObjectRelease();
        v6 = v62;
        v5 = a3;
        v4 = a4;
      }
      v25 = *(_QWORD *)(a3 + 48);
      v26 = (_QWORD *)(v25 + 16 * v22);
      v27 = *v26 == v19 && v26[1] == v18;
      if (!v27 && (sub_2448EBBEC() & 1) == 0)
      {
        v28 = ~v21;
        for (i = v22 + 1; ; i = v30 + 1)
        {
          v30 = i & v28;
          if (((*(_QWORD *)(v10 + (((i & v28) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v28)) & 1) == 0)
            break;
          v31 = (_QWORD *)(v25 + 16 * v30);
          v32 = *v31 == v19 && v31[1] == v18;
          if (v32 || (sub_2448EBBEC() & 1) != 0)
          {
            result = swift_bridgeObjectRelease();
            v23 = v30 >> 6;
            v24 = 1 << v30;
            goto LABEL_38;
          }
        }
        goto LABEL_6;
      }
      result = swift_bridgeObjectRelease();
LABEL_38:
      v6 = v62;
      v5 = a3;
      v57[v23] |= v24;
      v33 = __OFADD__(v61++, 1);
      v4 = a4;
      if (v33)
        goto LABEL_82;
    }
  }
  v34 = 0;
  v60 = a3 + 56;
  v61 = 0;
  v35 = 1 << *(_BYTE *)(a3 + 32);
  if (v35 < 64)
    v36 = ~(-1 << v35);
  else
    v36 = -1;
  v37 = v36 & *(_QWORD *)(a3 + 56);
  v63 = (unint64_t)(v35 + 63) >> 6;
  v38 = a4 + 56;
  while (1)
  {
    if (v37)
    {
      v39 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      v40 = v39 | (v34 << 6);
      goto LABEL_63;
    }
    v41 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
    if (v41 >= v63)
      goto LABEL_79;
    v42 = *(_QWORD *)(v60 + 8 * v41);
    ++v34;
    if (!v42)
    {
      v34 = v41 + 1;
      if (v41 + 1 >= v63)
        goto LABEL_79;
      v42 = *(_QWORD *)(v60 + 8 * v34);
      if (!v42)
      {
        v34 = v41 + 2;
        if (v41 + 2 >= v63)
          goto LABEL_79;
        v42 = *(_QWORD *)(v60 + 8 * v34);
        if (!v42)
          break;
      }
    }
LABEL_62:
    v37 = (v42 - 1) & v42;
    v40 = __clz(__rbit64(v42)) + (v34 << 6);
LABEL_63:
    v44 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v40);
    v46 = *v44;
    v45 = v44[1];
    sub_2448EBD00();
    swift_bridgeObjectRetain();
    sub_2448EAB60();
    v47 = sub_2448EBD3C();
    v48 = -1 << *(_BYTE *)(v4 + 32);
    v49 = v47 & ~v48;
    if (((*(_QWORD *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) == 0)
      goto LABEL_46;
    v50 = *(_QWORD *)(a4 + 48);
    v51 = (_QWORD *)(v50 + 16 * v49);
    v52 = *v51 == v46 && v51[1] == v45;
    if (v52 || (sub_2448EBBEC() & 1) != 0)
    {
LABEL_76:
      result = swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v57 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
      v33 = __OFADD__(v61++, 1);
      v5 = a3;
      v4 = a4;
      if (v33)
      {
        __break(1u);
LABEL_79:
        swift_retain();
        return sub_2448496BC(v57, a2, v61, v5);
      }
    }
    else
    {
      v53 = ~v48;
      while (1)
      {
        v49 = (v49 + 1) & v53;
        if (((*(_QWORD *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) == 0)
          break;
        v54 = (_QWORD *)(v50 + 16 * v49);
        v55 = *v54 == v46 && v54[1] == v45;
        if (v55 || (sub_2448EBBEC() & 1) != 0)
          goto LABEL_76;
      }
LABEL_46:
      result = swift_bridgeObjectRelease();
      v5 = a3;
      v4 = a4;
    }
  }
  v43 = v41 + 3;
  if (v43 >= v63)
    goto LABEL_79;
  v42 = *(_QWORD *)(v60 + 8 * v43);
  if (v42)
  {
    v34 = v43;
    goto LABEL_62;
  }
  while (1)
  {
    v34 = v43 + 1;
    if (__OFADD__(v43, 1))
      break;
    if (v34 >= v63)
      goto LABEL_79;
    v42 = *(_QWORD *)(v60 + 8 * v34);
    ++v43;
    if (v42)
      goto LABEL_62;
  }
LABEL_84:
  __break(1u);
  return result;
}

uint64_t sub_2448496BC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;

  v4 = a4;
  if (!a3)
  {
    v8 = MEMORY[0x24BEE4B08];
LABEL_36:
    swift_release();
    return v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CF50);
  result = sub_2448EB760();
  v8 = result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    sub_2448EBD00();
    swift_bridgeObjectRetain();
    sub_2448EAB60();
    result = sub_2448EBD3C();
    v20 = -1 << *(_BYTE *)(v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

unint64_t sub_244849950()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25738DEC0;
  if (!qword_25738DEC0)
  {
    v1 = type metadata accessor for BuiltProductPathResolver();
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for BuiltProductPathResolver, v1);
    atomic_store(result, (unint64_t *)&qword_25738DEC0);
  }
  return result;
}

uint64_t sub_244849994()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2448499C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_2447C62E8;
  v5[7] = a1;
  v5[8] = v4;
  return swift_task_switch();
}

uint64_t sub_244849A24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v45)(uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  _QWORD *v67;
  int isUniquelyReferenced_nonNull_native;
  char v69;
  unint64_t v70;
  uint64_t v71;
  _BOOL8 v72;
  uint64_t v73;
  char v74;
  unint64_t v75;
  char v76;
  void (*v77)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  char v82;
  int v83;
  _QWORD *v84;
  int v85;
  char v86;
  unint64_t v87;
  uint64_t v88;
  _BOOL8 v89;
  uint64_t v90;
  char v91;
  unint64_t v92;
  char v93;
  char *v94;
  char *v95;
  char *v96;
  void (*v97)(uint64_t, char *, uint64_t);
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  unint64_t *v103;
  char *v104;
  void (*v105)(char *, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  char v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t *v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t result;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  unint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  char *v148;
  unint64_t *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  void (*v157)(char *, char *, uint64_t);
  void (*v158)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v159)(char *, uint64_t, uint64_t);
  char *v160;
  _QWORD *v161;
  uint64_t v162;

  v162 = *MEMORY[0x24BDAC8D0];
  v142 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738DEB0);
  MEMORY[0x24BDAC7A8](v142);
  v141 = (unint64_t *)((char *)&v129 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738DEA8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v129 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738CB98);
  v6 = *(_QWORD *)(v151 - 8);
  v7 = MEMORY[0x24BDAC7A8](v151);
  v136 = (uint64_t)&v129 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v135 = (uint64_t)&v129 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v143 = (uint64_t)&v129 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v149 = (unint64_t *)((char *)&v129 - v13);
  v14 = sub_2448EA434();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v139 = (char *)&v129 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v138 = (char *)&v129 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v140 = (char *)&v129 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v144 = (char *)&v129 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v137 = (char *)&v129 - v25;
  MEMORY[0x24BDAC7A8](v24);
  v160 = (char *)&v129 - v26;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738CF38);
  v28 = MEMORY[0x24BDAC7A8](v27);
  v29 = MEMORY[0x24BDAC7A8](v28);
  v30 = MEMORY[0x24BDAC7A8](v29);
  v146 = (char *)&v129 - v31;
  v32 = MEMORY[0x24BDAC7A8](v30);
  v145 = (char *)&v129 - v33;
  MEMORY[0x24BDAC7A8](v32);
  v37 = (char *)&v129 - v34;
  v38 = *(_QWORD *)(a1 + 16);
  if (v38)
  {
    v134 = v36;
    v130 = v35;
    v39 = *(unsigned __int8 *)(v15 + 80);
    v40 = (v39 + 32) & ~v39;
    v41 = a1 + v40;
    v42 = *(_QWORD *)(v15 + 72);
    v159 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    v147 = v40;
    v156 = v42;
    v133 = v42 + v40;
    v132 = v39 | 7;
    v131 = xmmword_2448ECF10;
    v154 = MEMORY[0x24BEE4B00];
    v155 = (_QWORD *)MEMORY[0x24BEE4B00];
    v148 = v5;
    v152 = v15;
    v153 = v6;
    v150 = (char *)&v129 - v34;
    v159(v37, a1 + v40, v14);
    while (1)
    {
      v45 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
      v45((uint64_t)v37, 0, 1, v14);
      v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
      if (v46(v37, 1, v14) == 1)
        return v154;
      v158 = v45;
      v157 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
      v157(v160, v37, v14);
      v47 = sub_2448EA3D4();
      v49 = v48;
      v50 = v155;
      if (v155[2])
      {
        swift_bridgeObjectRetain();
        v51 = sub_244828D0C(v47, v49);
        if ((v52 & 1) != 0)
        {
          sub_24482FC80(v50[7] + *(_QWORD *)(v6 + 72) * v51, (uint64_t)v5);
          v53 = 0;
        }
        else
        {
          v53 = 1;
        }
        v54 = v151;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v5, v53, 1, v151);
        swift_bridgeObjectRelease();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v5, 1, v54) != 1)
        {
          v61 = v149;
          sub_2447D3184((uint64_t)v5, (uint64_t)v149, &qword_25738CB98);
          v62 = *v61;
          v159(v144, (uint64_t)v160, v14);
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v62 = sub_2447C29B8(0, *(_QWORD *)(v62 + 16) + 1, 1, v62);
          v64 = *(_QWORD *)(v62 + 16);
          v63 = *(_QWORD *)(v62 + 24);
          if (v64 >= v63 >> 1)
            v62 = sub_2447C29B8(v63 > 1, v64 + 1, 1, v62);
          *(_QWORD *)(v62 + 16) = v64 + 1;
          v157((char *)(v62 + v147 + v64 * v156), v144, v14);
          v65 = (uint64_t)v149;
          v66 = v141;
          v159((char *)v141 + *(int *)(v142 + 36), (uint64_t)v149 + *(int *)(v142 + 36), v14);
          *v66 = v62;
          sub_24484A834((uint64_t)v66, v65, &qword_25738DEB0);
          sub_24482FC80(v65, v143);
          v67 = v155;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v161 = v67;
          v70 = sub_244828D0C(v47, v49);
          v71 = v67[2];
          v72 = (v69 & 1) == 0;
          v73 = v71 + v72;
          if (__OFADD__(v71, v72))
          {
            __break(1u);
LABEL_67:
            __break(1u);
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
          }
          v74 = v69;
          if (v67[3] >= v73)
          {
            v44 = v158;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_24482E66C();
              goto LABEL_26;
            }
          }
          else
          {
            sub_24482BC20(v73, isUniquelyReferenced_nonNull_native);
            v75 = sub_244828D0C(v47, v49);
            if ((v74 & 1) != (v76 & 1))
              goto LABEL_70;
            v70 = v75;
LABEL_26:
            v44 = v158;
          }
          v119 = v161;
          v155 = v161;
          if ((v74 & 1) != 0)
          {
            sub_24484A834(v143, v161[7] + *(_QWORD *)(v153 + 72) * v70, &qword_25738CB98);
          }
          else
          {
            v161[(v70 >> 6) + 8] |= 1 << v70;
            v120 = (uint64_t *)(v119[6] + 16 * v70);
            *v120 = v47;
            v120[1] = v49;
            sub_2447D3184(v143, v119[7] + *(_QWORD *)(v153 + 72) * v70, &qword_25738CB98);
            v121 = v119[2];
            v122 = __OFADD__(v121, 1);
            v123 = v121 + 1;
            if (v122)
              goto LABEL_68;
            v119[2] = v123;
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_2447BD180((uint64_t)v149, &qword_25738CB98);
          v15 = v152;
          (*(void (**)(char *, uint64_t))(v152 + 8))(v160, v14);
          goto LABEL_60;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v5, 1, 1, v151);
      }
      sub_2447BD180((uint64_t)v5, &qword_25738DEA8);
      v55 = v154;
      v56 = (uint64_t)v145;
      if (!*(_QWORD *)(v154 + 16))
      {
        v58 = v38;
        v77 = v158;
        v158((uint64_t)v145, 1, 1, v14);
        v78 = (uint64_t)v146;
LABEL_30:
        sub_2447BD180(v56, &qword_25738CF38);
        v159((char *)v78, (uint64_t)v160, v14);
        v77(v78, 0, 1, v14);
        if (v46((char *)v78, 1, v14) == 1)
        {
          sub_2447BD180(v78, &qword_25738CF38);
          v79 = v154;
          swift_bridgeObjectRetain();
          v80 = sub_244828D0C(v47, v49);
          v82 = v81;
          swift_bridgeObjectRelease();
          v38 = v58;
          if ((v82 & 1) != 0)
          {
            v83 = swift_isUniquelyReferenced_nonNull_native();
            v161 = (_QWORD *)v79;
            v15 = v152;
            if (!v83)
            {
              sub_24482E410();
              v79 = (uint64_t)v161;
            }
            swift_bridgeObjectRelease();
            v43 = v134;
            v157((char *)v134, (char *)(*(_QWORD *)(v79 + 56) + v80 * v156), v14);
            v154 = v79;
            sub_2447CD9E8(v80, v79);
            swift_bridgeObjectRelease();
            v44 = v158;
            v158(v43, 0, 1, v14);
          }
          else
          {
            v15 = v152;
            v43 = v134;
            v44 = v158;
            v158(v134, 1, 1, v14);
          }
          swift_bridgeObjectRelease();
          sub_2447BD180(v43, &qword_25738CF38);
LABEL_5:
          v6 = v153;
          (*(void (**)(char *, uint64_t))(v15 + 8))(v160, v14);
          goto LABEL_6;
        }
        v157(v140, (char *)v78, v14);
        v84 = (_QWORD *)v154;
        v85 = swift_isUniquelyReferenced_nonNull_native();
        v161 = v84;
        v87 = sub_244828D0C(v47, v49);
        v88 = v84[2];
        v89 = (v86 & 1) == 0;
        v90 = v88 + v89;
        if (__OFADD__(v88, v89))
          goto LABEL_67;
        v91 = v86;
        v38 = v58;
        if (v84[3] >= v90)
        {
          v44 = v158;
          if ((v85 & 1) == 0)
          {
            sub_24482E410();
            goto LABEL_39;
          }
        }
        else
        {
          sub_24482B8B8(v90, v85);
          v92 = sub_244828D0C(v47, v49);
          if ((v91 & 1) != (v93 & 1))
          {
LABEL_70:
            result = sub_2448EBC7C();
            __break(1u);
            return result;
          }
          v87 = v92;
LABEL_39:
          v44 = v158;
        }
        v124 = v161;
        if ((v91 & 1) != 0)
        {
          v15 = v152;
          (*(void (**)(unint64_t, char *, uint64_t))(v152 + 40))(v161[7] + v87 * v156, v140, v14);
        }
        else
        {
          v161[(v87 >> 6) + 8] |= 1 << v87;
          v125 = (uint64_t *)(v124[6] + 16 * v87);
          *v125 = v47;
          v125[1] = v49;
          v157((char *)(v124[7] + v87 * v156), v140, v14);
          v126 = v124[2];
          v122 = __OFADD__(v126, 1);
          v127 = v126 + 1;
          if (v122)
            goto LABEL_69;
          v124[2] = v127;
          swift_bridgeObjectRetain();
          v15 = v152;
        }
        v154 = (uint64_t)v161;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v5 = v148;
        goto LABEL_5;
      }
      swift_bridgeObjectRetain();
      v57 = sub_244828D0C(v47, v49);
      v58 = v38;
      if ((v59 & 1) != 0)
      {
        v159((char *)v56, *(_QWORD *)(v55 + 56) + v57 * v156, v14);
        v60 = 0;
      }
      else
      {
        v60 = 1;
      }
      v78 = (uint64_t)v146;
      v77 = v158;
      v158(v56, v60, 1, v14);
      swift_bridgeObjectRelease();
      if (v46((char *)v56, 1, v14) == 1)
        goto LABEL_30;
      v94 = v137;
      v157(v137, (char *)v56, v14);
      v95 = v138;
      v96 = v94;
      v97 = (void (*)(uint64_t, char *, uint64_t))v159;
      v159(v138, (uint64_t)v96, v14);
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A128);
      v98 = swift_allocObject();
      *(_OWORD *)(v98 + 16) = v131;
      v97(v98 + v147, v160, v14);
      v97((uint64_t)v139, v95, v14);
      swift_bridgeObjectRetain();
      v99 = sub_2447C29B8(0, 1, 1, MEMORY[0x24BEE4AF8]);
      v101 = *(_QWORD *)(v99 + 16);
      v100 = *(_QWORD *)(v99 + 24);
      v38 = v58;
      if (v101 >= v100 >> 1)
        v99 = sub_2447C29B8(v100 > 1, v101 + 1, 1, v99);
      *(_QWORD *)(v99 + 16) = v101 + 1;
      v157((char *)(v99 + v147 + v101 * v156), v139, v14);
      v161 = (_QWORD *)v99;
      sub_2447CC3E8(v98);
      v102 = v161;
      v103 = v141;
      v104 = v138;
      v159((char *)v141 + *(int *)(v142 + 36), (uint64_t)v138, v14);
      *v103 = (unint64_t)v102;
      swift_bridgeObjectRetain();
      v105 = *(void (**)(char *, uint64_t))(v152 + 8);
      v105(v104, v14);
      swift_bridgeObjectRelease();
      v106 = v135;
      sub_2447D3184((uint64_t)v103, v135, &qword_25738DEB0);
      v107 = v106;
      v108 = v136;
      sub_2447D3184(v107, v136, &qword_25738CB98);
      v109 = v155;
      v110 = swift_isUniquelyReferenced_nonNull_native();
      v161 = v109;
      sub_24481FD5C(v108, v47, v49, v110);
      v155 = v161;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v111 = v154;
      swift_bridgeObjectRetain();
      v112 = sub_244828D0C(v47, v49);
      v113 = v111;
      v114 = v112;
      LOBYTE(v108) = v115;
      swift_bridgeObjectRelease();
      if ((v108 & 1) != 0)
      {
        v116 = swift_isUniquelyReferenced_nonNull_native();
        v161 = (_QWORD *)v111;
        v44 = v158;
        if (!v116)
        {
          sub_24482E410();
          v44 = v158;
          v113 = (uint64_t)v161;
        }
        swift_bridgeObjectRelease();
        v117 = v130;
        v157((char *)v130, (char *)(*(_QWORD *)(v113 + 56) + v114 * v156), v14);
        v154 = v113;
        sub_2447CD9E8(v114, v113);
        swift_bridgeObjectRelease();
        v118 = 0;
        v15 = v152;
      }
      else
      {
        v118 = 1;
        v15 = v152;
        v117 = v130;
        v44 = v158;
      }
      v44(v117, v118, 1, v14);
      sub_2447BD180(v117, &qword_25738CF38);
      v105(v137, v14);
      v105(v160, v14);
      swift_bridgeObjectRelease();
LABEL_60:
      v5 = v148;
      v6 = v153;
LABEL_6:
      v37 = v150;
      v41 += v156;
      if (!--v38)
        goto LABEL_64;
      v159(v150, v41, v14);
    }
  }
  v44 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
  v154 = MEMORY[0x24BEE4B00];
  v155 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_64:
  v44((uint64_t)v37, 1, 1, v14);
  return v154;
}

uint64_t sub_24484A834(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t audit_token_t.pid.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  audit_token_t v5;

  *(_QWORD *)v5.val = a1;
  *(_QWORD *)&v5.val[2] = a2;
  *(_QWORD *)&v5.val[4] = a3;
  *(_QWORD *)&v5.val[6] = a4;
  return audit_token_to_pid(&v5);
}

BOOL static audit_token_t.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v8;
  _BOOL4 v9;
  _BOOL4 v10;

  if (a1 != a5)
    return 0;
  v8 = HIDWORD(a4) == HIDWORD(a8);
  if ((_DWORD)a4 != (_DWORD)a8)
    v8 = 0;
  v9 = HIDWORD(a3) == HIDWORD(a7) && v8;
  if ((_DWORD)a3 != (_DWORD)a7)
    v9 = 0;
  v10 = HIDWORD(a2) == HIDWORD(a6) && v9;
  return (_DWORD)a2 == (_DWORD)a6 && v10;
}

BOOL sub_24484A914(int32x4_t *a1, int32x4_t *a2)
{
  _BOOL8 result;

  result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*a1, *a2)), 0xFuLL))) & 1) != 0
    && a1[1].i32[0] == a2[1].i32[0]
    && a1[1].i32[1] == a2[1].i32[1]
    && a1[1].i32[2] == a2[1].i32[2])
  {
    return a1[1].i32[3] == a2[1].i32[3];
  }
  return result;
}

uint64_t audit_token_t.hash(into:)()
{
  sub_2448EBD24();
  sub_2448EBD24();
  sub_2448EBD24();
  sub_2448EBD24();
  sub_2448EBD24();
  sub_2448EBD24();
  sub_2448EBD24();
  return sub_2448EBD24();
}

uint64_t audit_token_t.hashValue.getter()
{
  sub_2448EBD00();
  sub_2448EBD24();
  sub_2448EBD24();
  sub_2448EBD24();
  sub_2448EBD24();
  sub_2448EBD24();
  sub_2448EBD24();
  sub_2448EBD24();
  sub_2448EBD24();
  return sub_2448EBD3C();
}

uint64_t sub_24484AAE8()
{
  sub_2448EBD00();
  sub_2448EBD24();
  sub_2448EBD24();
  sub_2448EBD24();
  sub_2448EBD24();
  sub_2448EBD24();
  sub_2448EBD24();
  sub_2448EBD24();
  sub_2448EBD24();
  return sub_2448EBD3C();
}

uint64_t sub_24484ABAC()
{
  sub_2448EBD24();
  sub_2448EBD24();
  sub_2448EBD24();
  sub_2448EBD24();
  sub_2448EBD24();
  sub_2448EBD24();
  sub_2448EBD24();
  return sub_2448EBD24();
}

uint64_t sub_24484AC38()
{
  sub_2448EBD00();
  sub_2448EBD24();
  sub_2448EBD24();
  sub_2448EBD24();
  sub_2448EBD24();
  sub_2448EBD24();
  sub_2448EBD24();
  sub_2448EBD24();
  sub_2448EBD24();
  return sub_2448EBD3C();
}

unint64_t sub_24484ACFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25738DED0[0];
  if (!qword_25738DED0[0])
  {
    type metadata accessor for audit_token_t(255);
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for audit_token_t, v1);
    atomic_store(result, qword_25738DED0);
  }
  return result;
}

uint64_t Query.uncachedValue(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                         + 32))(v3, a1, a2, a3, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t Query.value<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 40))(a2, a3, a5);
}

uint64_t Query.debugDescription.getter()
{
  swift_getDynamicType();
  return sub_2448EBDB4();
}

uint64_t Query<>.value<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  return QueryManager.cachedValue<A, B>(for:)(v6, a3, a4, a5, a6);
}

uint64_t dispatch thunk of Query.uncachedValue(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

void InvalidatableExclusionCache.__allocating_init()()
{
  swift_allocObject();
  InvalidatableExclusionCache.init()();
}

uint64_t sub_24484AE84()
{
  uint64_t v0;

  return v0;
}

void InvalidatableExclusionCache.init()()
{
  sub_2447F8114();
  type metadata accessor for InvalidatableCache();
}

uint64_t sub_24484AED8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = sub_2448EA7C4();
  v1 = sub_2448EA8B4();
  v2 = sub_24481320C(&v4, v1);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 16) = v2;
  return v0;
}

void InvalidatableExclusionCache.futureResource(matching:excluding:createFuture:)()
{
  sub_2447F8114();
  swift_retain();
  type metadata accessor for InvalidatableCache();
}

uint64_t sub_24484AFB8()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD *, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v17;
  uint64_t v18[2];
  _QWORD v19[20];

  sub_2448EA8B4();
  v3 = sub_2448EA5D8();
  type metadata accessor for Future(255, v0, v4, v5);
  type metadata accessor for Promise(255, v0, v6, v7);
  sub_2448EAEE4();
  swift_getTupleTypeMetadata3();
  sub_2448EB508();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v3);
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_2447B9000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/InvalidatableExclusionCache.swift", 139, 2, 28, 49, (uint64_t)"futureResource(matching:excluding:createFuture:)", 48, 2, (uint64_t)sub_24484BA48, (uint64_t)&v17, v3, TupleTypeMetadata2, v9);
  swift_release();
  v10 = *(_QWORD *)(v2 - 112);
  v11 = *(_QWORD *)(v2 - 96);
  if (v11)
  {
    v13 = *(_QWORD *)(v2 - 88);
    v19[0] = *(_QWORD *)(v2 - 104);
    v12 = v19[0];
    swift_retain();
    swift_bridgeObjectRetain();
    v14 = v1(v19, v13);
    swift_bridgeObjectRelease();
    sub_244836CF8(v19);
    v15 = (void *)v19[0];
    v18[0] = v19[0];
    v18[1] = v19[1];
    Promise.track(future:on:)(v14, v18);
    swift_release();
    swift_release();
    sub_24484BA68(v12, v11);
    sub_24481241C(v15);
  }
  return v10;
}

void sub_24484B1B0()
{
  sub_2447F8114();
  type metadata accessor for InvalidatableCache();
}

void sub_24484B21C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  os_unfair_lock_s *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD v32[6];
  uint64_t v33;

  v7 = sub_2448EA8B4();
  v8 = MEMORY[0x24951AC70](&protocol conformance descriptor for [A : B], v7);
  v9 = *(_QWORD *)(v6 - 256);
  v10 = KeyValueMap.guaranteedValue(for:creatingIfNecessaryWith:)(v1, (uint64_t (*)(uint64_t))sub_24484BBD0, v6 - 176, v7, v8, v6 - 120);
  *(_QWORD *)(v6 - 256) = v9;
  v11 = *(_QWORD *)(v6 - 120);
  *(_QWORD *)(v6 - 72) = InvalidatableCache.snapshot.getter(v10, v12, v13, v14);
  *(_QWORD *)(v6 - 224) = v4;
  *(_QWORD *)(v6 - 216) = v2;
  *(_QWORD *)(v6 - 208) = v3;
  *(_QWORD *)(v6 - 200) = v0;
  *(_QWORD *)(v6 - 264) = v5;
  *(_QWORD *)(v6 - 192) = v5;
  v17 = type metadata accessor for Future(255, v2, v15, v16);
  v18 = sub_2448EA8B4();
  MEMORY[0x24951AC70](MEMORY[0x24BEE04D8], v18);
  v19 = *(_QWORD *)(v6 - 256);
  sub_2448EAD28();
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(v6 - 112);
  if (v20)
  {
    swift_release();
    v21 = *(_QWORD **)(v6 - 248);
    *v21 = v20;
    v21[1] = 0;
    v21[2] = 0;
    v21[3] = 0;
  }
  else
  {
    *(_QWORD *)(v6 - 272) = v17;
    *(_QWORD *)(v6 - 256) = v2;
    *(_QWORD *)(v6 - 280) = v0;
    if (qword_257389CA0 != -1)
      swift_once();
    v22 = (_QWORD *)((char *)off_25738DB00 + 16);
    v23 = (os_unfair_lock_s *)((char *)off_25738DB00 + 24);
    swift_retain();
    os_unfair_lock_lock(v23);
    sub_24483B130(v22, (_QWORD *)(v6 - 120));
    v24 = *(_QWORD *)(v6 - 264);
    if (v19)
    {
      os_unfair_lock_unlock(v23);
      __break(1u);
    }
    else
    {
      os_unfair_lock_unlock(v23);
      v25 = *(_QWORD *)(v6 - 120);
      swift_release();
      v26 = sub_2447EB4A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/InvalidatableExclusionCache.swift", 139, 2, 37, 72, (uint64_t)"futureResource(matching:excluding:createFuture:)", 48, 2);
      *(_QWORD *)(v6 - 272) = v27;
      *(_QWORD *)(v6 - 288) = &v33;
      *(_QWORD *)(v6 - 120) = v24;
      MEMORY[0x24BDAC7A8](v26);
      v32[2] = v4;
      v32[3] = v3;
      v32[4] = v11;
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738DF58);
      sub_24484BC88();
      v28 = sub_2448EACE0();
      *(_QWORD *)(v6 - 120) = v25;
      MEMORY[0x24BDAC7A8](v28);
      v32[-4] = v4;
      v32[-3] = v3;
      v32[-2] = *(_QWORD *)(v6 - 280);
      v32[-1] = v26;
      v30 = InvalidatableCache.futureResource(for:create:)(v6 - 120, (uint64_t (*)(uint64_t))sub_24484BCD4, (uint64_t)&v32[-6], v29);
      swift_release();
      swift_release();
      v31 = *(uint64_t **)(v6 - 248);
      *v31 = v30;
      v31[1] = v25;
      v31[2] = *(_QWORD *)(v6 - 272);
      v31[3] = v28;
    }
  }
}

uint64_t sub_24484B51C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v6 = *a2;
  v10 = *a1;
  if (!InvalidatableCache.subscript.getter((uint64_t)&v10, (uint64_t)a2, a3, a4))
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v6 + 88) - 8) + 56))(a5, 1, 1);
  sub_2448D27B0(v7, v8, a5);
  return swift_release();
}

uint64_t sub_24484B5A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = nullsub_1(a1);
  if (!v1)
    return swift_retain();
  return result;
}

void InvalidatableExclusionCache.cachedResources.getter()
{
  sub_2447F8114();
  type metadata accessor for InvalidatableCache();
}

uint64_t sub_24484B614()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_2448EA8B4();
  v1 = sub_2448EA5D8();
  v2 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v1);
  SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/InvalidatableExclusionCache.swift", 139, 2, 60, 27, (uint64_t)"cachedResources", 15, 2, v1, v2);
  v3 = ((uint64_t (*)())j_nullsub_1)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 - 72) = v3;
  v4 = sub_2448EA884();
  v5 = sub_2448EAEE4();
  MEMORY[0x24951AC70](MEMORY[0x24BEE03C0], v4);
  MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v5);
  v6 = sub_2448EAD64();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_24484B760@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v6 = InvalidatableCache.snapshot.getter(a1, a2, a3, a4);
  type metadata accessor for Future(0, a3, v7, v8);
  sub_2447F8114();
  j_nullsub_1(v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  v9 = sub_2448EA884();
  MEMORY[0x24951AC70](MEMORY[0x24BEE03C0], v9);
  v10 = sub_2448EACE0();
  swift_release();
  result = swift_bridgeObjectRelease();
  *a5 = v10;
  return result;
}

Swift::Void __swiftcall InvalidatableExclusionCache.invalidate()()
{
  sub_2447F8114();
  type metadata accessor for InvalidatableCache();
}

uint64_t sub_24484B8F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_2448EA8B4();
  v1 = sub_2448EA5D8();
  v2 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v1);
  SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/InvalidatableExclusionCache.swift", 139, 2, 67, 20, (uint64_t)"invalidate()", 12, 2, v1, v2);
  v3 = j_nullsub_1();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 - 72) = v3;
  v4 = sub_2448EA884();
  MEMORY[0x24951AC70](MEMORY[0x24BEE03C0], v4);
  sub_2448EAD70();
  return swift_bridgeObjectRelease();
}

uint64_t InvalidatableExclusionCache.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t InvalidatableExclusionCache.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

void sub_24484BA48()
{
  sub_24484B1B0();
}

uint64_t sub_24484BA68(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24484BA98@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return sub_24484B760(a1, v2[2], v2[3], v2[4], a2);
}

void sub_24484BAB4()
{
  InvalidatableCache.invalidate()();
}

uint64_t sub_24484BADC()
{
  return swift_initClassMetadata2();
}

void type metadata accessor for InvalidatableExclusionCache()
{
  JUMPOUT(0x24951ABD4);
}

uint64_t method lookup function for InvalidatableExclusionCache()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of InvalidatableExclusionCache.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_24484BB40@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return sub_2448D27B0(a1, a2, a3);
}

uint64_t sub_24484BB60()
{
  return 32;
}

__n128 sub_24484BB6C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_24484BB78()
{
  swift_retain();
  swift_getAtKeyPath();
  return swift_release();
}

void sub_24484BBD0()
{
  sub_2447F8114();
  type metadata accessor for InvalidatableCache();
}

uint64_t sub_24484BC14()
{
  uint64_t *v0;
  uint64_t result;

  result = InvalidatableCache.__allocating_init()();
  *v0 = result;
  return result;
}

BOOL sub_24484BC38(uint64_t *a1)
{
  uint64_t v1;

  return !sub_2447CB654(*a1, *(_QWORD *)(v1 + 48));
}

uint64_t sub_24484BC6C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_24484B51C(a1, *(uint64_t **)(v2 + 32), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

unint64_t sub_24484BC88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25738DF60;
  if (!qword_25738DF60)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738DF58);
    result = MEMORY[0x24951AC70](MEMORY[0x24BEE1718], v1);
    atomic_store(result, (unint64_t *)&qword_25738DF60);
  }
  return result;
}

uint64_t sub_24484BCD4()
{
  uint64_t v0;

  return sub_24484B5A0(*(_QWORD *)(v0 + 40));
}

uint64_t NSThread.currentExecutionExclusivity.getter()
{
  id v0;
  char v1;

  sub_24484BD60();
  v0 = objc_msgSend((id)objc_opt_self(), sel_currentThread);
  v1 = sub_2448EB490();

  if ((v1 & 1) != 0)
    return 2;
  else
    return 0;
}

unint64_t sub_24484BD60()
{
  unint64_t result;

  result = qword_25738DF68;
  if (!qword_25738DF68)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25738DF68);
  }
  return result;
}

uint64_t sub_24484BD9C()
{
  id v0;
  char v1;

  sub_24484BD60();
  v0 = objc_msgSend((id)objc_opt_self(), sel_currentThread);
  v1 = sub_2448EB490();

  if ((v1 & 1) != 0)
    return 2;
  else
    return 0;
}

uint64_t WeakArray.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result;

  type metadata accessor for Weak(0, a1, a2, a3);
  result = sub_2448EAE54();
  *a4 = result;
  return result;
}

uint64_t WeakArray.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD v13[6];

  v13[2] = a2;
  v13[3] = a3;
  v13[4] = a4;
  v9 = type metadata accessor for Weak(0, a2, a3, a4);
  v11 = sub_2448CDDF0((void (*)(char *, char *))sub_24484C570, (uint64_t)v13, a3, v9, MEMORY[0x24BEE4078], a4, MEMORY[0x24BEE40A8], v10);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  *a5 = v11;
  return result;
}

uint64_t WeakArray.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v8 = a1;
  v5 = sub_2448EAEE4();
  v6 = MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v5);
  result = WeakArray.init<A>(_:)((uint64_t)&v8, a2, v5, v6, &v9);
  *a3 = v9;
  return result;
}

uint64_t WeakArray.array.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for Weak(255, *(_QWORD *)(a1 + 16), a3, a4);
  v4 = sub_2448EAEE4();
  swift_bridgeObjectRetain();
  MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v4);
  v5 = sub_2448EACE0();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t WeakArray.startIndex.getter()
{
  return 0;
}

void WeakArray.endIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for Weak(0, *(_QWORD *)(a1 + 16), a3, a4);
  JUMPOUT(0x2495196A4);
}

Swift::Int __swiftcall WeakArray.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Int __swiftcall WeakArray.index(before:)(Swift::Int before)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFSUB__(before, 1);
  result = before - 1;
  if (v1)
    __break(1u);
  return result;
}

uint64_t WeakArray.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for Weak(0, *(_QWORD *)(a2 + 16), a3, a4);
  sub_2448EAF08();
  swift_beginAccess();
  v4 = MEMORY[0x24951AE5C](v6 + 16);
  swift_release();
  return v4;
}

uint64_t sub_24484C0C4(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a3;
  v5 = type metadata accessor for WeakArray(0, *(unint64_t *)((char *)a3 + a4 - 8), (uint64_t)a3, a4);
  v6 = swift_unknownObjectRetain();
  sub_24484C61C(v6, v4, v5, v7);
  return swift_unknownObjectRelease();
}

uint64_t WeakArray.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_24484C61C(a1, a2, a3, a4);
  return swift_unknownObjectRelease();
}

uint64_t (*WeakArray.subscript.modify(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  a1[2] = a3;
  a1[3] = v4;
  a1[1] = a2;
  *a1 = WeakArray.subscript.getter(a2, a3, a3, a4);
  return sub_24484C194;
}

uint64_t sub_24484C194(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  v6 = *a1;
  if ((a2 & 1) != 0)
  {
    v7 = swift_unknownObjectRetain();
    sub_24484C61C(v7, v5, v4, v8);
    swift_unknownObjectRelease();
  }
  else
  {
    sub_24484C61C(v6, v5, v4, a4);
  }
  return swift_unknownObjectRelease();
}

uint64_t WeakArray.append(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for Weak(0, *(_QWORD *)(a2 + 16), a3, a4);
  sub_2448D173C();
  sub_2448EAEE4();
  return sub_2448EAE9C();
}

uint64_t sub_24484C25C()
{
  return sub_2448EB1C0();
}

uint64_t sub_24484C268()
{
  return sub_2448EB1D8();
}

_QWORD *sub_24484C274@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFSUB__(*result, 1))
    __break(1u);
  else
    *a2 = *result - 1;
  return result;
}

_QWORD *sub_24484C28C(_QWORD *result)
{
  if (__OFSUB__(*result, 1))
    __break(1u);
  else
    --*result;
  return result;
}

uint64_t sub_24484C2A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for WeakArray<A>, a3);
  return sub_2448EB1C0();
}

uint64_t sub_24484C308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for WeakArray<A>, a4);
  return sub_2448EB19C();
}

uint64_t sub_24484C36C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for WeakArray<A>, a3);
  return sub_2448EB1D8();
}

void sub_24484C3C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WeakArray.endIndex.getter(a1, a2, a3, a4);
}

uint64_t sub_24484C3D4(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

void (*sub_24484C3E4(uint64_t **a1, uint64_t *a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;

  v6 = (uint64_t *)malloc(0x30uLL);
  *a1 = v6;
  v8 = sub_24484C470(v6, *a2, a3, v7);
  v6[4] = v9;
  v6[5] = (uint64_t)v8;
  return sub_24484C444;
}

void sub_24484C444(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 40))(*a1);
  free(v1);
}

uint64_t (*sub_24484C470(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  *a1 = WeakArray.subscript.getter(a2, a3, a3, a4);
  return sub_24484C4A8;
}

uint64_t sub_24484C4A8()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_24484C4B0(uint64_t a1)
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for WeakArray<A>, a1);
  return sub_2448EB1CC();
}

void sub_24484C4FC(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = 0;
}

uint64_t sub_24484C508(uint64_t a1)
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for WeakArray<A>, a1);
  return sub_2448EB22C();
}

uint64_t sub_24484C53C(uint64_t a1)
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for WeakArray<A>, a1);
  return sub_2448EB238();
}

uint64_t sub_24484C570@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  type metadata accessor for Weak(0, *(_QWORD *)(v3 + 16), a1, a2);
  result = sub_2448D173C();
  *a3 = result;
  return result;
}

uint64_t sub_24484C5C0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1 + 16;
  swift_beginAccess();
  result = MEMORY[0x24951AE5C](v3);
  *a2 = result;
  return result;
}

uint64_t sub_24484C61C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for Weak(0, *(_QWORD *)(a3 + 16), a3, a4);
  v6 = sub_2448D173C();
  v7 = sub_2448EAEE4();
  sub_2448EAE48();
  v8 = *v4;
  sub_2448736CC(a2, v8);
  *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 8 * a2 + 0x20) = v6;
  swift_release();
  return nullsub_1(v7);
}

void sub_24484C6B4()
{
  JUMPOUT(0x24951AC70);
}

uint64_t sub_24484C6C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24484C7DC(a1, a2, a3, MEMORY[0x24BEE1BD0]);
}

unint64_t sub_24484C6D0()
{
  unint64_t result;

  result = qword_25738DF70[0];
  if (!qword_25738DF70[0])
  {
    result = MEMORY[0x24951AC70](MEMORY[0x24BEE1790], MEMORY[0x24BEE1768]);
    atomic_store(result, qword_25738DF70);
  }
  return result;
}

uint64_t sub_24484C714(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x24951AC70](&protocol conformance descriptor for WeakArray<A>);
  return MEMORY[0x24951AC70](MEMORY[0x24BEE4230], a1, &v3);
}

void sub_24484C75C()
{
  JUMPOUT(0x24951AC70);
}

uint64_t sub_24484C76C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24484C7DC(a1, a2, a3, MEMORY[0x24BEE1BA8]);
}

uint64_t sub_24484C778(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x24951AC70](&protocol conformance descriptor for WeakArray<A>);
  return MEMORY[0x24951AC70](MEMORY[0x24BEE4218], a1, &v3);
}

void sub_24484C7C0()
{
  JUMPOUT(0x24951AC70);
}

uint64_t sub_24484C7D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24484C7DC(a1, a2, a3, MEMORY[0x24BEE1BD8]);
}

uint64_t sub_24484C7DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  _QWORD v8[2];

  v6 = sub_24484C6D0();
  v8[0] = MEMORY[0x24BEE17A8];
  v8[1] = v6;
  return MEMORY[0x24951AC70](a4, a1, v8);
}

uint64_t sub_24484C824@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v5 = *a1;
  v6 = type metadata accessor for WeakArray(0, *(uint64_t *)((char *)a1 + a2 - 8), a2, a3);
  result = WeakArray.subscript.getter(v5, v6, v7, v8);
  *a4 = result;
  return result;
}

uint64_t sub_24484C888()
{
  return 8;
}

_QWORD *sub_24484C894(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata accessor for WeakArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakArray);
}

uint64_t sub_24484C8B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static MergeOperation.perform<A>(for:in:)(a1, a2, a5, a3, a6, a4);
}

uint64_t static MergeOperation.perform<A>(for:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void (*v8)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v12 = QueryManager.allValues<A>(for:)(a1, a4, a6);
  v8 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 24);
  swift_getAssociatedTypeWitness();
  v9 = sub_2448EAEE4();
  v10 = MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v9);
  v8(&v12, v9, v10, a3, a5);
  return swift_bridgeObjectRelease();
}

uint64_t static FirstValueMerge.perform<A>(values:)()
{
  return sub_2448EAD28();
}

uint64_t static FirstValueMerge.perform<A>(for:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return QueryManager.firstValue<A>(for:)(a1, a2, a3);
}

uint64_t sub_24484CA08()
{
  return static FirstValueMerge.perform<A>(values:)();
}

uint64_t sub_24484CA1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return static FirstValueMerge.perform<A>(for:in:)(a1, a2, a3);
}

uint64_t static ConcatenationMerge.perform<A>(values:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2448EB844();
  MEMORY[0x24BDAC7A8](v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a3);
  swift_getAssociatedTypeWitness();
  v11[1] = sub_2448EAE54();
  v9 = sub_2448EAEE4();
  MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v9);
  sub_2448EB838();
  MEMORY[0x24951AC70](MEMORY[0x24BEE2860], v8);
  return sub_2448EAEFC();
}

uint64_t sub_24484CB94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result;

  result = static ConcatenationMerge.perform<A>(values:)(a1, *(_QWORD *)(a3 + 16), a2);
  *a4 = result;
  return result;
}

uint64_t static UnionMerge.perform<A>(values:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = &v13[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_2448EB6B8();
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  sub_2448EAD4C();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v11, a2);
}

uint64_t sub_24484CCA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *);
  uint64_t v10;
  uint64_t v12;

  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = *(void (**)(char *))(v8 + 16);
  v9((char *)&v12 - v10);
  ((void (*)(char *, uint64_t, uint64_t))v9)(v7, a2, a3);
  return sub_2448EB6A0();
}

uint64_t sub_24484CD6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static UnionMerge.perform<A>(values:)(a1, *(_QWORD *)(a4 + 16), a2, *(_QWORD *)(a4 + 24), a3);
}

uint64_t static OrderedUnionMerge.perform<A>(values:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[3];

  v14 = a6;
  v19 = a5;
  v20 = 0;
  v15 = a1;
  v16 = a2;
  v17 = a3;
  v18 = a4;
  sub_2448EAD4C();
  v7 = v22[0];
  if (v22[0] < 1)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v12 = sub_2448EAE54();
    return OrderedSet.init(arrayLiteral:)(v12, AssociatedTypeWitness, a5, v14);
  }
  else
  {
    v8 = swift_getAssociatedTypeWitness();
    OrderedSet.init()(v22);
    type metadata accessor for OrderedSet(0, v8, a5, v9);
    OrderedSet.reserveCapacity(_:)(v7);
    v13 = (uint64_t)&v13;
    v20 = v22[0];
    v21 = v22[1];
    MEMORY[0x24BDAC7A8](v22[0]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_2448EAD40();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_24484CF2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for OrderedSet(0, AssociatedTypeWitness, a7, v11);
  return OrderedSet.append<A>(contentsOf:)(a2, v12, a3);
}

uint64_t sub_24484CFB4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X8>)
{
  return static OrderedUnionMerge.perform<A>(values:)(a3[2], a1, a3[3], a2, a3[4], a4);
}

uint64_t static KeyValueMerge.perform<A>(values:)()
{
  uint64_t v1;

  swift_getTupleTypeMetadata2();
  sub_2448EAE54();
  sub_2448EA848();
  sub_2448EA8B4();
  sub_2448EAD40();
  return v1;
}

uint64_t sub_24484D094()
{
  sub_2448EA8B4();
  swift_bridgeObjectRetain();
  return sub_2448EA878();
}

uint64_t sub_24484D10C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static KeyValueMerge.perform<A>(values:)();
  *a1 = result;
  return result;
}

uint64_t static SumMerge.perform<A>(values:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedTypeWitness;
  _QWORD v15[10];

  v15[0] = a6;
  v15[1] = a1;
  v10 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  sub_2448EBC4C();
  sub_2448EBBC8();
  v15[4] = a2;
  v15[5] = a3;
  v15[6] = a4;
  v15[7] = a5;
  sub_2448EAD4C();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a2);
}

uint64_t sub_24484D2AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static SumMerge.perform<A>(values:)(a1, *(_QWORD *)(a4 + 16), a2, *(_QWORD *)(a4 + 24), a3, a5);
}

uint64_t static LogicalOrMerge.perform<A>(values:)()
{
  unsigned __int8 v1;

  sub_2448EAD4C();
  return v1;
}

_BYTE *sub_24484D31C@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _BYTE *a3@<X8>)
{
  *a3 = (*result | *a2) & 1;
  return result;
}

uint64_t sub_24484D334@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = static LogicalOrMerge.perform<A>(values:)();
  *a1 = result & 1;
  return result;
}

void static NilMerge.perform<A>(values:)()
{
  sub_2448EB9A0();
  __break(1u);
}

void sub_24484D3B4()
{
  static NilMerge.perform<A>(values:)();
}

uint64_t static FutureMerge.perform<A>(values:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_244817D08((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ValueCombiner.swift", 125, 2, 130, 30, (uint64_t)"perform(values:)", 16, 2, 0, a3, AssociatedTypeWitness, a5);
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  sub_2448EAEE4();
  v11 = swift_getAssociatedTypeWitness();
  v14 = 0uLL;
  v12 = sub_24487B270((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ValueCombiner.swift", 125, 2, 131, 25, (uint64_t)"perform(values:)", 16, 2, &v14, (uint64_t)sub_24484D6EC, (uint64_t)v10, v11);
  swift_release();
  swift_release();
  sub_24481241C(0);
  return v12;
}

uint64_t sub_24484D520(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v6)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v10 = *a1;
  v6 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 24);
  swift_getAssociatedTypeWitness();
  v7 = sub_2448EAEE4();
  v8 = MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v7);
  return v6(&v10, v7, v8, a2, a4);
}

uint64_t sub_24484D5C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result;

  result = static FutureMerge.perform<A>(values:)(a1, *(_QWORD *)(a4 + 16), a2, *(_QWORD *)(a4 + 24), a3);
  *a5 = result;
  return result;
}

uint64_t sub_24484D5F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_24484CCA0(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_24484D610@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = sub_2448EACBC();
  if (__OFADD__(v3, result))
    __break(1u);
  else
    *a2 = v3 + result;
  return result;
}

uint64_t sub_24484D668(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_24484CF2C(a1, a2, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t sub_24484D688()
{
  return sub_24484D094();
}

uint64_t sub_24484D6A8()
{
  return sub_2448EB9B8();
}

uint64_t sub_24484D6DC()
{
  return swift_deallocObject();
}

uint64_t sub_24484D6EC(uint64_t *a1)
{
  uint64_t *v1;

  return sub_24484D520(a1, v1[2], v1[3], v1[4]);
}

uint64_t dispatch thunk of static MergeOperation.perform<A>(values:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of static MergeOperation.perform<A>(for:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t type metadata accessor for FirstValueMerge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FirstValueMerge);
}

uint64_t type metadata accessor for ConcatenationMerge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConcatenationMerge);
}

uint64_t type metadata accessor for UnionMerge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnionMerge);
}

uint64_t type metadata accessor for OrderedUnionMerge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrderedUnionMerge);
}

uint64_t type metadata accessor for KeyValueMerge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyValueMerge);
}

uint64_t type metadata accessor for SumMerge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SumMerge);
}

ValueMetadata *type metadata accessor for LogicalOrMerge()
{
  return &type metadata for LogicalOrMerge;
}

uint64_t type metadata accessor for NilMerge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NilMerge);
}

uint64_t type metadata accessor for FutureMerge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FutureMerge);
}

uint64_t sub_24484D778@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 24) - 8) + 16))(a1);
}

uint64_t AnyComparable.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t result;

  type metadata accessor for AnyComparableBoxImpl(0, a2, a3, a4);
  v7 = swift_allocObject();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 112) - 8) + 32))(v7 + *(_QWORD *)(*(_QWORD *)v7 + 128), a1);
  *a5 = v7;
  return result;
}

uint64_t type metadata accessor for AnyComparableBoxImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyComparableBoxImpl);
}

uint64_t sub_24484D81C(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 112) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 128), a1);
  return v2;
}

uint64_t AnyComparable.base.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 96))();
}

uint64_t static AnyComparable.< infix(_:_:)(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 80))(*a2) & 1;
}

uint64_t static AnyComparable.== infix(_:_:)(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 88))(*a2) & 1;
}

unint64_t sub_24484D8FC()
{
  unint64_t result;

  result = qword_25738E560;
  if (!qword_25738E560)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for AnyComparable, &type metadata for AnyComparable);
    atomic_store(result, (unint64_t *)&qword_25738E560);
  }
  return result;
}

uint64_t sub_24484D940(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 80))(*a2) & 1;
}

BOOL sub_24484D970(_QWORD *a1, uint64_t a2)
{
  return ((*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 80))(*a1) & 1) == 0;
}

BOOL sub_24484D9A4(uint64_t a1, _QWORD *a2)
{
  return ((*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 80))(*a2) & 1) == 0;
}

uint64_t sub_24484D9D8(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 80))(*a1) & 1;
}

uint64_t sub_24484DA08(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 88))(*a2) & 1;
}

ValueMetadata *type metadata accessor for AnyComparable()
{
  return &type metadata for AnyComparable;
}

void sub_24484DA48()
{
  sub_2448EB9A0();
  __break(1u);
}

void sub_24484DA9C()
{
  sub_2448EB9A0();
  __break(1u);
}

void sub_24484DAF0()
{
  sub_2448EB9A0();
  __break(1u);
}

uint64_t type metadata accessor for AnyComparableBox()
{
  return objc_opt_self();
}

uint64_t sub_24484DB64()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_24484DBE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v6;

  type metadata accessor for AnyComparableBoxImpl(0, *(_QWORD *)(*(_QWORD *)v4 + 112), *(_QWORD *)(*(_QWORD *)v4 + 120), a4);
  result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    v6 = sub_2448EA9BC();
    swift_release();
    return v6 & 1;
  }
  return result;
}

uint64_t sub_24484DC78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v6;

  type metadata accessor for AnyComparableBoxImpl(0, *(_QWORD *)(*(_QWORD *)v4 + 112), *(_QWORD *)(*(_QWORD *)v4 + 120), a4);
  result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    v6 = sub_2448EAA64();
    swift_release();
    return v6 & 1;
  }
  return result;
}

uint64_t sub_24484DD14@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *boxed_opaque_existential_1;

  v2 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 128);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  a1[3] = v3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(boxed_opaque_existential_1, v2, v3);
}

uint64_t sub_24484DD58()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 112) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128));
}

uint64_t sub_24484DD74()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 112) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128));
  return swift_deallocClassInstance();
}

unint64_t sub_24484DDB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25738E698[0];
  if (!qword_25738E698[0])
  {
    v1 = type metadata accessor for AnyComparableBox();
    result = MEMORY[0x24951AC70](&unk_2448F3190, v1);
    atomic_store(result, qword_25738E698);
  }
  return result;
}

uint64_t GeneratingSequence.init(from:advancingBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;

  v10 = sub_2448EB508();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a5, a1, v10);
  result = type metadata accessor for GeneratingSequence(0, a4, v11, v12);
  v14 = (_QWORD *)(a5 + *(int *)(result + 28));
  *v14 = a2;
  v14[1] = a3;
  return result;
}

uint64_t type metadata accessor for GeneratingSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GeneratingSequence);
}

uint64_t sub_24484DE80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[16];
  uint64_t v18;

  v8 = type metadata accessor for GeneratingSequence.Iterator.State(255, a2, a3, a4);
  v9 = sub_2448EB508();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = &v17[-v11];
  v18 = a2;
  v13 = sub_2448EB508();
  sub_244818D58((void (*)(char *, char *))sub_24484F474, (uint64_t)v17, MEMORY[0x24BEE4078], v8, v14, (uint64_t)v12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
  v15 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v8) != 1)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v15 + 32))(a5, v12, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a5, 1, 1, a2);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_24484DFCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = a3;
  v9 = sub_2448EB508();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v26 - v11;
  v15 = type metadata accessor for GeneratingSequence.Iterator.State(0, a4, v13, v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v26 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  sub_24484DE80((uint64_t)v12, a4, v19, v20, (uint64_t)v18);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a5, v18, v15);
  result = type metadata accessor for GeneratingSequence.Iterator(0, a4, v21, v22);
  v24 = (_QWORD *)(a5 + *(int *)(result + 28));
  v25 = v27;
  *v24 = a2;
  v24[1] = v25;
  return result;
}

uint64_t GeneratingSequence.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = sub_2448EB508();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - v7;
  (*(void (**)(char *, uint64_t))(v9 + 16))((char *)&v14 - v7, v2);
  v10 = (uint64_t *)(v2 + *(int *)(a1 + 28));
  v11 = *v10;
  v12 = v10[1];
  swift_retain();
  return sub_24484DFCC((uint64_t)v8, v11, v12, v5, a2);
}

uint64_t sub_24484E1A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  GeneratingSequence.makeIterator()(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
}

uint64_t GeneratingSequence.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v3 = v2;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = sub_2448EB508();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v24 - v8;
  v12 = type metadata accessor for GeneratingSequence.Iterator.State(0, v6, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v24 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v24 - v17, v3, v12);
  v19 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    v20 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(a2, v18, v6);
    (*(void (**)(uint64_t))(v3 + *(int *)(a1 + 28)))(a2);
    sub_24484DE80((uint64_t)v9, v6, v21, v22, (uint64_t)v16);
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 40))(v3, v16, v12);
    v20 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(a2, v20, 1, v6);
}

uint64_t type metadata accessor for GeneratingSequence.Iterator.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GeneratingSequence.Iterator.State);
}

void sub_24484E368()
{
  JUMPOUT(0x24951AC70);
}

uint64_t sub_24484E37C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24484E3B4(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD))MEMORY[0x24BEE1C68]);
}

uint64_t sub_24484E3A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24484E3B4(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD))type metadata accessor for GeneratingSequence.Iterator.State);
}

uint64_t sub_24484E3B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319, *(_QWORD *)(a1 + 16));
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_24484E42C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if ((v7 & 0x1000F8) != 0 || ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    v11 = (_QWORD *)(((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    v12 = v11[1];
    v13 = (_QWORD *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v13 = *v11;
    v13[1] = v12;
  }
  swift_retain();
  return a1;
}

uint64_t sub_24484E534(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return swift_release();
}

char *sub_24484E5A4(char *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
    if (v7)
      v9 = v8;
    else
      v9 = v8 + 1;
    memcpy(a1, a2, v9);
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
  }
  if (v7)
    v10 = v8;
  else
    v10 = v8 + 1;
  v11 = v10 + 7;
  v12 = (unint64_t)&a1[v11];
  v13 = (uint64_t *)(((unint64_t)a2 + v11) & 0xFFFFFFFFFFFFFFF8);
  v15 = *v13;
  v14 = v13[1];
  v16 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
  *v16 = v15;
  v16[1] = v14;
  swift_retain();
  return a1;
}

void *sub_24484E66C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
LABEL_10:
  if (*(_DWORD *)(v6 + 84))
    v11 = *(_QWORD *)(v6 + 64);
  else
    v11 = *(_QWORD *)(v6 + 64) + 1;
  v12 = v11 + 7;
  v13 = (_QWORD *)(((unint64_t)a1 + v12) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)a2 + v12) & 0xFFFFFFFFFFFFFFF8);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  swift_retain();
  swift_release();
  return a1;
}

void *sub_24484E788(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  size_t v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
    if (v7)
      v9 = v8;
    else
      v9 = v8 + 1;
    memcpy(a1, a2, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
  }
  if (v7)
    v10 = v8;
  else
    v10 = v8 + 1;
  *(_OWORD *)(((unint64_t)a1 + v10 + 7) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)a2 + v10 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

void *sub_24484E84C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
LABEL_10:
  if (*(_DWORD *)(v6 + 84))
    v11 = *(_QWORD *)(v6 + 64);
  else
    v11 = *(_QWORD *)(v6 + 64) + 1;
  *(_OWORD *)(((unint64_t)a1 + v11 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_24484E960(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v13;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  v8 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v8;
  if (!a2)
    return 0;
  if (v7 < a2)
  {
    if (((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v7 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    __asm { BR              X16 }
  }
  if (v6 < 0x7FFFFFFF)
  {
    v14 = *(_QWORD *)((a1 + v8 + 7) & 0xFFFFFFFFFFFFF8);
    if (v14 >= 0xFFFFFFFF)
      LODWORD(v14) = -1;
    return (v14 + 1);
  }
  else
  {
    v13 = (*(uint64_t (**)(void))(v4 + 48))();
    if (v13 >= 2)
      return v13 - 1;
    else
      return 0;
  }
}

void sub_24484EA98(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  if (v10 < a3)
  {
    v12 = a3 - v10;
    if ((((_DWORD)v11 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v13 = v12 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v6 = v14;
    else
      v6 = 0;
  }
  if (a2 > v10)
  {
    if ((((_DWORD)v11 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      v15 = ~v10 + a2;
      bzero(a1, ((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_24484EB90@<X0>(unsigned int a1@<W1>, size_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t result;

  v12[v13] = 0;
  if (a1)
  {
    if (v10 < 0x7FFFFFFF)
    {
      v15 = (_QWORD *)((unint64_t)&v12[a2 + 7] & 0xFFFFFFFFFFFFFFF8);
      if ((a1 & 0x80000000) != 0)
      {
        *v15 = a1 ^ 0x80000000;
        v15[1] = 0;
      }
      else
      {
        *v15 = a1 - 1;
      }
    }
    else if (v10 >= a1)
    {
      return (*(uint64_t (**)(_BYTE *, _QWORD))(v11 + 56))(v12, a1 + 1);
    }
    else if ((_DWORD)a2)
    {
      if (a2 <= 3)
        v14 = a2;
      else
        v14 = 4;
      bzero(v12, a2);
      __asm { BR              X10 }
    }
  }
  return result;
}

void sub_24484EC8C()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_24484EC9C()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_24484ECA4()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t type metadata accessor for GeneratingSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GeneratingSequence.Iterator);
}

uint64_t sub_24484ECBC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_24484ED14(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (*(_DWORD *)(v6 + 80) > 7u || (v7 & 0x100000) != 0 || v8 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
  {
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_24484EDEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *sub_24484EE48(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_24484EEE0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

void *sub_24484EFC0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_24484F058(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

uint64_t sub_24484F138(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void sub_24484F278(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_24484F420()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_24484F428()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t sub_24484F44C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 48))(a1, 1);
}

uint64_t sub_24484F460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 56))(a1, a2, 1);
}

uint64_t sub_24484F474@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, a1, v4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
}

uint64_t StructuredStringConvertible.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = MEMORY[0x24BEE4AF8];
  (*(void (**)(uint64_t *, uint64_t))(a2 + 16))(&v4, a1);
  v2 = Array<A>.builtDescription.getter(v4);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t Array<A>.builtDescription.getter(uint64_t a1)
{
  unint64_t v1;
  char v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unint64_t v6;
  int v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    swift_bridgeObjectRetain();
    v3 = 1;
    swift_beginAccess();
    swift_beginAccess();
    v4 = 0;
    v5 = (unsigned __int8 *)(a1 + 72);
    do
    {
      v6 = v4 + 1;
      v7 = *(v5 - 24);
      if ((v3 & 1) != 0 || v4)
      {
        if (v6 < v1)
          sub_24484FC8C(*((_QWORD *)v5 - 2), *((_QWORD *)v5 - 1), *v5);
        __asm { BR              X9 }
      }
      v3 = 0;
      v5 += 24;
      v4 = 1;
    }
    while (v1 != v6);
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  return 0;
}

uint64_t sub_24484FC8C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 0xBFu)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_24484FCA4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 0xBFu)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_24484FCBC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 0xFDu)
    return sub_24484FCA4(a1, a2, a3);
  return a1;
}

uint64_t Array<A>.describe<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t))(a3 + 16))(v3);
}

uint64_t Array<A>.describe<A>(_:)()
{
  _QWORD **v0;
  _QWORD **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v1 = v0;
  v2 = sub_2448EBB5C();
  v4 = v3;
  v5 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_2447BD730(0, v5[2] + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v8 = v5[2];
  v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    result = (uint64_t)sub_2447BD730((_QWORD *)(v7 > 1), v8 + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v5[2] = v8 + 1;
  v9 = &v5[3 * v8];
  v9[4] = v2;
  v9[5] = v4;
  *((_BYTE *)v9 + 48) = 0;
  *v1 = v5;
  return result;
}

double Array<A>.withMap(_:skipEmpty:handler:)(uint64_t a1, uint64_t a2, char a3, void (*a4)(_QWORD **))
{
  _QWORD **v4;
  _QWORD *v5;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  double result;

  v5 = v4;
  v10 = *v4;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v10 = sub_2447BD730(0, v10[2] + 1, 1, v10);
  v12 = v10[2];
  v11 = v10[3];
  if (v12 >= v11 >> 1)
    v10 = sub_2447BD730((_QWORD *)(v11 > 1), v12 + 1, 1, v10);
  v10[2] = v12 + 1;
  v13 = &v10[3 * v12];
  v13[4] = a1;
  v13[5] = a2;
  *((_BYTE *)v13 + 48) = a3 & 1 | 0x40;
  *v4 = v10;
  a4(v4);
  v14 = *v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v14 = sub_2447BD730(0, v14[2] + 1, 1, v14);
  v16 = v14[2];
  v15 = v14[3];
  if (v16 >= v15 >> 1)
    v14 = sub_2447BD730((_QWORD *)(v15 > 1), v16 + 1, 1, v14);
  v14[2] = v16 + 1;
  v17 = &v14[3 * v16];
  *(_QWORD *)&result = 2;
  *((_OWORD *)v17 + 2) = xmmword_2448F3340;
  *((_BYTE *)v17 + 48) = -64;
  *v5 = v14;
  return result;
}

double Array<A>.withCollection(_:skipEmpty:handler:)(uint64_t a1, uint64_t a2, char a3, void (*a4)(_QWORD **))
{
  _QWORD **v4;
  _QWORD *v5;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  double result;

  v5 = v4;
  v10 = *v4;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v10 = sub_2447BD730(0, v10[2] + 1, 1, v10);
  v12 = v10[2];
  v11 = v10[3];
  if (v12 >= v11 >> 1)
    v10 = sub_2447BD730((_QWORD *)(v11 > 1), v12 + 1, 1, v10);
  v10[2] = v12 + 1;
  v13 = &v10[3 * v12];
  v13[4] = a1;
  v13[5] = a2;
  *((_BYTE *)v13 + 48) = a3 & 1 | 0x80;
  *v4 = v10;
  a4(v4);
  v14 = *v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v14 = sub_2447BD730(0, v14[2] + 1, 1, v14);
  v16 = v14[2];
  v15 = v14[3];
  if (v16 >= v15 >> 1)
    v14 = sub_2447BD730((_QWORD *)(v15 > 1), v16 + 1, 1, v14);
  v14[2] = v16 + 1;
  v17 = &v14[3 * v16];
  *(_QWORD *)&result = 3;
  *((_OWORD *)v17 + 2) = xmmword_2448F3350;
  *((_BYTE *)v17 + 48) = -64;
  *v5 = v14;
  return result;
}

uint64_t Array<A>.print<A>(key:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD **v25;
  uint64_t v26;
  uint64_t v27;

  v8 = sub_2448EB508();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v24 - v11;
  v13 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a3, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, a4) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, a4);
  v26 = a1;
  v27 = a2;
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  sub_2448EBB5C();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  v17 = v26;
  v18 = v27;
  v19 = v25;
  v20 = *v25;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v20 = sub_2447BD730(0, v20[2] + 1, 1, v20);
  v22 = v20[2];
  v21 = v20[3];
  if (v22 >= v21 >> 1)
    v20 = sub_2447BD730((_QWORD *)(v21 > 1), v22 + 1, 1, v20);
  v20[2] = v22 + 1;
  v23 = &v20[3 * v22];
  v23[4] = v17;
  v23[5] = v18;
  *((_BYTE *)v23 + 48) = 0;
  *v19 = v20;
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, a4);
}

uint64_t Array<A>.print<A>(key:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD **v5;
  _QWORD **v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = v5;
  v27 = a5;
  v11 = sub_2448EB508();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v26 - v14;
  v16 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a3, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, a4) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v15, a4);
  v28 = a1;
  v29 = a2;
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  v20 = v28;
  v21 = v29;
  v22 = *v6;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v22 = sub_2447BD730(0, v22[2] + 1, 1, v22);
  v24 = v22[2];
  v23 = v22[3];
  if (v24 >= v23 >> 1)
    v22 = sub_2447BD730((_QWORD *)(v23 > 1), v24 + 1, 1, v22);
  v22[2] = v24 + 1;
  v25 = &v22[3 * v24];
  v25[4] = v20;
  v25[5] = v21;
  *((_BYTE *)v25 + 48) = 0;
  *v6 = v22;
  (*(void (**)(_QWORD **, uint64_t))(v27 + 16))(v6, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, a4);
}

uint64_t dispatch thunk of StructuredStringConvertible.describe(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t destroy for StructuredDescriptionBuildAction(uint64_t a1)
{
  return sub_24484FCA4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s20PreviewsFoundationOS32StructuredDescriptionBuildActionOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_24484FC8C(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for StructuredDescriptionBuildAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_24484FC8C(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_24484FCA4(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for StructuredDescriptionBuildAction(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_24484FCA4(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for StructuredDescriptionBuildAction(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7D && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 125);
  v3 = ((*(unsigned __int8 *)(a1 + 16) >> 6) & 0xFFFFFF83 | (4 * ((*(unsigned __int8 *)(a1 + 16) >> 1) & 0x1F))) ^ 0x7F;
  if (v3 >= 0x7C)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for StructuredDescriptionBuildAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 125;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_BYTE *)(result + 16) = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t sub_2448505D4(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 16) >> 6;
  if (v1 == 3)
    return (*(_DWORD *)a1 + 3);
  else
    return v1;
}

uint64_t sub_2448505F0(uint64_t result)
{
  *(_BYTE *)(result + 16) &= 0x3Fu;
  return result;
}

uint64_t sub_244850600(uint64_t result, unsigned int a2)
{
  if (a2 < 3)
  {
    *(_BYTE *)(result + 16) = *(_BYTE *)(result + 16) & 1 | ((_BYTE)a2 << 6);
  }
  else
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = -64;
  }
  return result;
}

ValueMetadata *type metadata accessor for StructuredDescriptionBuildAction()
{
  return &type metadata for StructuredDescriptionBuildAction;
}

uint64_t static Bool.^ infix(_:_:)(int a1, int a2)
{
  return (a1 ^ a2) & 1;
}

uint64_t static ActorTunnel.create()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = sub_2448EAFA4();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v11 - v4;
  v6 = sub_2448EAFD4();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v11 - v8;
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE6A10], v2);
  sub_2448EAF80();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v9, v6);
}

uint64_t ActorTunnel.send(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 16);
  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v5, v2);
  sub_2448EAFD4();
  return sub_2448EAFBC();
}

Swift::Void __swiftcall ActorTunnel.invalidate()()
{
  sub_2448EAFD4();
  sub_2448EAFC8();
}

uint64_t sub_244850800()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2448EAFD4();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_24485086C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2448EAFD4();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_2448508AC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2448EAFD4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_2448508E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2448EAFD4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_24485092C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2448EAFD4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_244850974(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2448EAFD4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_2448509BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2448EAFD4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_244850A04()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_244850A10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2448EAFD4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_244850A50()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_244850A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2448EAFD4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ActorTunnel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ActorTunnel);
}

uint64_t sub_244850AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_244807760(a1, a2, a3, a4, (uint64_t)&type metadata for SwiftEntrySectionPayload.CouldNotConvertJSONPayloadToString);
}

uint64_t sub_244850AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_244807760(a1, a2, a3, a4, (uint64_t)&type metadata for UnhandledUnknownCaseError);
}

uint64_t sub_244850AD4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  ValueMetadata *v19;
  uint64_t v20;
  unint64_t v21;

  v19 = &type metadata for TimeoutError;
  v8 = swift_allocObject();
  v16 = v8;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 32) = a3;
  v9 = a4 & 1;
  *(_BYTE *)(v8 + 40) = a4 & 1;
  __swift_project_boxed_opaque_existential_1(&v16, (uint64_t)&type metadata for TimeoutError);
  swift_getDynamicType();
  sub_244811220(a1, a2, a3, a4 & 1);
  v10 = sub_2448EBDB4();
  v12 = v11;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
  v20 = v10;
  v21 = v12;
  v16 = a1;
  v17 = a2;
  v18 = a3;
  LOBYTE(v19) = v9;
  TimeoutError.highValueTitle.getter();
  if (v13)
  {
    v16 = 8250;
    v17 = 0xE200000000000000;
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    v10 = v20;
    v12 = v21;
  }
  v16 = v10;
  v17 = v12;
  sub_2447D0980();
  v14 = sub_2448EB5E0();
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_244850C58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  ValueMetadata *v9;

  v9 = &type metadata for InvalidUUID;
  v7 = a1;
  v8 = a2;
  __swift_project_boxed_opaque_existential_1(&v7, (uint64_t)&type metadata for InvalidUUID);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  v2 = sub_2448EBDB4();
  v4 = v3;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v7);
  v7 = v2;
  v8 = v4;
  sub_2448EB79C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2447D0980();
  v5 = sub_2448EB5E0();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t PropertyListRepresentable<>.propertyListValue.getter()
{
  return sub_2448EAD94();
}

uint64_t sub_244850DE4@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  return sub_244850E00(*a1, a1[1], a2);
}

uint64_t sub_244850E00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  char v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  swift_bridgeObjectRetain();
  v6 = sub_2448EBA84();
  swift_bridgeObjectRelease();
  if (!v6)
  {
    v7 = 0;
    goto LABEL_5;
  }
  if (v6 == 1)
  {
    v7 = 1;
LABEL_5:
    result = swift_bridgeObjectRelease();
    *a3 = v7;
    return result;
  }
  sub_244811360();
  swift_allocError();
  v10 = v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738ECD0);
  *(_QWORD *)v10 = &type metadata for HumanReadableErrorSeverity;
  *(_QWORD *)(v10 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v10 + 24) = v11;
  *(_QWORD *)(v10 + 32) = a1;
  *(_QWORD *)(v10 + 40) = a2;
  *(_BYTE *)(v10 + 112) = 3;
  return swift_willThrow();
}

uint64_t PropertyListRepresentable<>.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(uint64_t *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v19;
  uint64_t v21;
  void (*v22)(uint64_t *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;

  v23 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)&v21 - v7;
  v9 = sub_2448EB508();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v21 - v11;
  v13 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 16);
  v24 = a1;
  v22 = v13;
  v13((uint64_t *)v8, a1, AssociatedTypeWitness);
  sub_2448EADA0();
  v14 = *(_QWORD *)(a2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    sub_244811360();
    swift_allocError();
    v16 = v15;
    v17 = (uint64_t *)(v15 + 32);
    *(_QWORD *)(v15 + 24) = swift_getMetatypeMetadata();
    *(_QWORD *)v16 = a2;
    *(_QWORD *)(v16 + 56) = AssociatedTypeWitness;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
    v19 = v24;
    v22(boxed_opaque_existential_1, v24, AssociatedTypeWitness);
    *(_BYTE *)(v16 + 112) = 3;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v19, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v24, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(v23, v12, a2);
  }
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t PropertyListRepresentable.propertyList.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v16 - v11;
  (*(void (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, AssociatedTypeWitness);
  v13 = swift_dynamicCast();
  if ((_DWORD)v13)
  {
    v14 = v16[1];
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, AssociatedTypeWitness);
    *a3 = v14;
  }
  else
  {
    MEMORY[0x24BDAC7A8](v13);
    v16[-4] = a1;
    v16[-3] = a2;
    v16[-2] = v12;
    sub_244853E44((void (*)(_QWORD *, _BYTE *))sub_244853E38, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, AssociatedTypeWitness);
  }
  return result;
}

uint64_t sub_244851220@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *a1;
  v4 = a1[1];
  swift_bridgeObjectRetain();
  v6 = sub_2448EBA84();
  swift_bridgeObjectRelease();
  if (!v6)
  {
    v7 = 0;
    goto LABEL_5;
  }
  if (v6 == 1)
  {
    v7 = 1;
LABEL_5:
    result = swift_bridgeObjectRelease();
    *a2 = v7;
    return result;
  }
  sub_244811360();
  swift_allocError();
  v10 = v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738C5B8);
  *(_QWORD *)v10 = v2;
  *(_QWORD *)(v10 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v10 + 24) = v11;
  *(_QWORD *)(v10 + 32) = v5;
  *(_QWORD *)(v10 + 40) = v4;
  *(_BYTE *)(v10 + 112) = 3;
  return swift_willThrow();
}

uint64_t static PropertyListBuilder.buildBlock<A, B, C, D, E, F>(_:_:_:)(char *a1, uint64_t a2, char *a3, char *a4, char *a5, char *a6, uint64_t a7, uint64_t a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  void (*v47)(char *, char *, void (*)(_QWORD, _QWORD));
  char *v48;
  void (*v49)(char *, char *, uint64_t);
  void (*v50)(char *, char *, uint64_t);
  uint64_t inited;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  void (*v65)(_QWORD, _QWORD);
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t);
  unint64_t v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t, uint64_t);
  void (*v88)(char *, char *, uint64_t);
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  void (*v95)(char *, char *, void (*)(_QWORD, _QWORD));
  void (*v96)(char *, char *, uint64_t);
  char *v97;
  uint64_t v98;
  void (*v99)(char *, char *, uint64_t);
  void (*v100)(char *, char *, uint64_t);
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  void (*v118)(_QWORD, _QWORD);
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t TupleTypeMetadata2;

  v94 = a8;
  v107 = a6;
  v101 = a5;
  v123 = a4;
  v116 = a3;
  v122 = a2;
  v119 = a1;
  v108 = a17;
  v103 = a15;
  v124 = a11;
  v111 = a13;
  v115 = a12;
  v19 = sub_2448EB508();
  v120 = *(_QWORD *)(v19 - 8);
  v121 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v114 = (char *)&v85 - v20;
  v106 = a10;
  v21 = sub_2448EB508();
  v117 = *(_QWORD *)(v21 - 8);
  v118 = (void (*)(_QWORD, _QWORD))v21;
  MEMORY[0x24BDAC7A8](v21);
  v105 = (char *)&v85 - v22;
  v23 = sub_2448EB508();
  v90 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v91 = (char *)&v85 - v24;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v113 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v25 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v110 = (char *)&v85 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v85 - v27;
  v29 = swift_getTupleTypeMetadata2();
  v112 = *(_QWORD *)(v29 - 8);
  v30 = MEMORY[0x24BDAC7A8](v29);
  v102 = (char *)&v85 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v33 = (char *)&v85 - v32;
  v34 = swift_getTupleTypeMetadata2();
  v109 = *(_QWORD *)(v34 - 8);
  v35 = MEMORY[0x24BDAC7A8](v34);
  v37 = (char *)&v85 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = MEMORY[0x24BDAC7A8](v35);
  v40 = (char *)&v85 - v39;
  v89 = (char *)&v85 + *(int *)(v38 + 48) - v39;
  v41 = v89;
  v86 = a7;
  v92 = *(_QWORD *)(a7 - 8);
  v88 = *(void (**)(char *, char *, uint64_t))(v92 + 16);
  v88((char *)&v85 - v39, v119, a7);
  v42 = v90;
  v87 = *(void (**)(char *, uint64_t, uint64_t))(v90 + 16);
  v87(v41, v122, v23);
  v122 = v29;
  v43 = v91;
  v44 = &v33[*(int *)(v29 + 48)];
  v98 = *((_QWORD *)a9 - 1);
  v45 = *(void (**)(char *, char *, uint64_t))(v98 + 16);
  v119 = v33;
  v46 = v116;
  v116 = a9;
  v96 = v45;
  v45(v33, v46, (uint64_t)a9);
  v47 = *(void (**)(char *, char *, void (*)(_QWORD, _QWORD)))(v117 + 16);
  v97 = v44;
  v95 = v47;
  v47(v44, v123, v118);
  v48 = &v28[*(int *)(TupleTypeMetadata2 + 48)];
  v104 = *(_QWORD *)(v124 - 8);
  v49 = *(void (**)(char *, char *, uint64_t))(v104 + 16);
  v123 = v28;
  v100 = v49;
  ((void (*)(char *, char *))v49)(v28, v101);
  v50 = *(void (**)(char *, char *, uint64_t))(v120 + 16);
  v101 = v48;
  v99 = v50;
  v50(v48, v107, v121);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738C570);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2448ECFF0;
  v52 = (uint64_t *)(inited + 48);
  v53 = v86;
  *(_QWORD *)(inited + 32) = (*(uint64_t (**)(uint64_t))(v111 + 8))(v86);
  *(_QWORD *)(inited + 40) = v54;
  v111 = v34;
  v55 = &v37[*(int *)(v34 + 48)];
  v93 = v37;
  v107 = v40;
  v56 = v40;
  v57 = v94;
  v88(v37, v56, v53);
  v87(v55, (uint64_t)v89, v23);
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v43, v55, v23);
  v58 = *(_QWORD *)(v57 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v43, 1, v57) == 1)
  {
    (*(void (**)(char *, uint64_t))(v92 + 8))(v93, v53);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v23);
    *(_QWORD *)(inited + 80) = 0;
    *(_OWORD *)v52 = 0u;
    *(_OWORD *)(inited + 64) = 0u;
  }
  else
  {
    v59 = *(void (**)(uint64_t, uint64_t))(a14 + 24);
    *(_QWORD *)(inited + 72) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 80) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v52);
    v59(v57, a14);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v43, v57);
    (*(void (**)(char *, uint64_t))(v92 + 8))(v93, v53);
  }
  v60 = v119;
  v61 = v116;
  *(_QWORD *)(inited + 88) = (*(uint64_t (**)(char *))(v103 + 8))(v116);
  *(_QWORD *)(inited + 96) = v62;
  v63 = v102;
  v64 = &v102[*(int *)(v122 + 48)];
  v96(v102, v60, (uint64_t)v61);
  v65 = v118;
  v95(v64, v97, v118);
  v66 = v117;
  v67 = v105;
  (*(void (**)(char *, char *, void (*)(_QWORD, _QWORD)))(v117 + 32))(v105, v64, v65);
  v68 = v106;
  v69 = *(_QWORD *)(v106 - 8);
  v70 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v106);
  v71 = v115;
  v72 = v114;
  if (v70 == 1)
  {
    (*(void (**)(char *, char *))(v98 + 8))(v63, v116);
    (*(void (**)(char *, _QWORD))(v66 + 8))(v67, v65);
    *(_QWORD *)(inited + 136) = 0;
    *(_OWORD *)(inited + 104) = 0u;
    *(_OWORD *)(inited + 120) = 0u;
  }
  else
  {
    v118 = *(void (**)(_QWORD, _QWORD))(a16 + 24);
    *(_QWORD *)(inited + 128) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 136) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 104));
    v118(v68, a16);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v67, v68);
    (*(void (**)(char *, char *))(v98 + 8))(v63, v116);
  }
  v73 = v120;
  v74 = v123;
  v75 = v124;
  *(_QWORD *)(inited + 144) = (*(uint64_t (**)(uint64_t))(v108 + 8))(v124);
  *(_QWORD *)(inited + 152) = v76;
  v77 = v110;
  v78 = &v110[*(int *)(TupleTypeMetadata2 + 48)];
  v100(v110, v74, v75);
  v79 = v121;
  v99(v78, v101, v121);
  (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v72, v78, v79);
  v80 = *(_QWORD *)(v71 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v72, 1, v71) == 1)
  {
    (*(void (**)(char *, uint64_t))(v104 + 8))(v77, v75);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v72, v79);
    *(_QWORD *)(inited + 192) = 0;
    *(_OWORD *)(inited + 160) = 0u;
    *(_OWORD *)(inited + 176) = 0u;
  }
  else
  {
    v81 = *(void (**)(uint64_t, uint64_t))(a18 + 24);
    *(_QWORD *)(inited + 184) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 192) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 160));
    v81(v71, a18);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v72, v71);
    (*(void (**)(char *, uint64_t))(v104 + 8))(v77, v75);
  }
  v82 = sub_2447C8898(inited);
  v83 = sub_2448546EC(v82);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v113 + 8))(v123, TupleTypeMetadata2);
  (*(void (**)(char *, uint64_t))(v112 + 8))(v119, v122);
  (*(void (**)(char *, uint64_t))(v109 + 8))(v107, v111);
  return v83;
}

uint64_t PropertyList.init(content:)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = a1();
  v4 = sub_24480FC04(v3);
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t PropertyList.unarchiveValue<A>(for:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  _QWORD *v17;
  _QWORD *v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[2];

  v9 = *v4;
  v10 = a1[3];
  v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
  if (*(_QWORD *)(v9 + 16) && (v14 = sub_244828D0C(v12, v13), (v15 & 1) != 0))
  {
    sub_2447C92C4(*(_QWORD *)(v9 + 56) + 32 * v14, (uint64_t)&v19);
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v20 + 1))
    {
      sub_2447C91FC(&v19, v21);
      *(_QWORD *)&v19 = v9;
      sub_2448556FC((uint64_t)v21, (uint64_t)a1, a2, a3, a4);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    }
  }
  else
  {
    v19 = 0u;
    v20 = 0u;
    swift_bridgeObjectRelease();
  }
  sub_2447BD180((uint64_t)&v19, &qword_25738B658);
  sub_244811360();
  swift_allocError();
  v18 = v17;
  *v17 = v9;
  sub_2447CE01C((uint64_t)a1, (uint64_t)(v17 + 1));
  *((_BYTE *)v18 + 112) = 0;
  swift_bridgeObjectRetain();
  return swift_willThrow();
}

uint64_t static PropertyListBuilder.buildBlock<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T>(_:_:_:_:_:_:_:_:_:_:)(char *a1, uint64_t a2, char *a3, uint64_t a4, char *a5, uint64_t a6, char *a7, uint64_t a8, void (*a9)(char *, char *, uint64_t), void (*a10)(void), void (*a11)(char *, char *, uint64_t), void (*a12)(void), void (*a13)(char *, char *, uint64_t), void (*a14)(void), char *a15, uint64_t a16, void (*a17)(void), uint64_t a18, char *a19, void (*a20)(_QWORD, _QWORD, _QWORD),uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,_QWORD *a37,uint64_t a38,uint64_t a39,uint64_t a40,char *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  void (*v124)(char *, char *, uint64_t);
  void (*v125)(char *, char *, void (*)(_QWORD, _QWORD));
  uint64_t v126;
  char *v127;
  void (*v128)(char *, char *, uint64_t);
  uint64_t v129;
  void (*v130)(char *, char *, uint64_t);
  uint64_t v131;
  char *v132;
  void (*v133)(char *, char *, uint64_t);
  char *v134;
  void (*v135)(char *, char *, uint64_t);
  uint64_t v136;
  char *v137;
  void (*v138)(char *, char *, uint64_t);
  char *v139;
  void (*v140)(char *, char *, uint64_t);
  char *v141;
  void (*v142)(char *, char *, uint64_t);
  char *v143;
  void (*v144)(char *, char *, uint64_t);
  char *v145;
  void (*v146)(_QWORD, _QWORD, _QWORD);
  void (*v147)(_QWORD, _QWORD, _QWORD);
  uint64_t inited;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  void (*v159)(uint64_t, uint64_t);
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  void (*v167)(_QWORD, _QWORD);
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  void (*v192)(uint64_t, uint64_t);
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  void (*v213)(uint64_t, uint64_t);
  uint64_t v214;
  char *v215;
  uint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void (*v225)(uint64_t, uint64_t);
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  void (*v236)(uint64_t, uint64_t);
  char *v237;
  _QWORD *v238;
  uint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  void (*v247)(uint64_t, uint64_t);
  uint64_t v248;
  char *v249;
  char *v250;
  char *v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v261;
  void (*v262)(char *, uint64_t, uint64_t);
  void (*v263)(void);
  char *v264;
  uint64_t v265;
  uint64_t v266;
  void (*v267)(char *, char *, void (*)(_QWORD, _QWORD));
  void (*v268)(char *, char *, uint64_t);
  char *v269;
  uint64_t v270;
  void (*v271)(char *, char *, uint64_t);
  void (*v272)(char *, char *, uint64_t);
  char *v273;
  char *v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  void (*v278)(char *, char *, uint64_t);
  void (*v279)(void);
  char *v280;
  char *v281;
  uint64_t v282;
  void (*v283)(char *, char *, uint64_t);
  void (*v284)(void);
  char *v285;
  char *v286;
  uint64_t v287;
  void (*v288)(char *, char *, uint64_t);
  void (*v289)(void);
  char *v290;
  uint64_t v291;
  uint64_t v292;
  char *v293;
  uint64_t v294;
  void (*v295)(char *, char *, uint64_t);
  void (*v296)(void);
  char *v297;
  char *v298;
  uint64_t v299;
  uint64_t v300;
  void (*v301)(char *, char *, uint64_t);
  void (*v302)(void);
  char *v303;
  uint64_t v304;
  char *v305;
  uint64_t v306;
  char *v307;
  void (*v308)(char *, char *, uint64_t);
  void (*v309)(void);
  char *v310;
  uint64_t v311;
  char *v312;
  uint64_t v313;
  void (*v314)(_QWORD, _QWORD, _QWORD);
  void (*v315)(void);
  char *v316;
  uint64_t v317;
  uint64_t v318;
  char *v319;
  char *v320;
  uint64_t v321;
  char *v322;
  uint64_t v323;
  char *v324;
  char *v325;
  uint64_t v326;
  uint64_t v327;
  char *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  char *v335;
  uint64_t v336;
  uint64_t v337;
  char *v338;
  uint64_t v339;
  uint64_t v340;
  char *v341;
  uint64_t v342;
  char *v343;
  char *v344;
  char *v345;
  uint64_t v346;
  uint64_t v347;
  void (*v348)(_QWORD, _QWORD);
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  char *v362;
  uint64_t v363;
  char *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  char *v374;
  uint64_t v375;
  char *v376;
  uint64_t v377;
  char *v378;
  uint64_t v379;
  char *v380;
  uint64_t v381;
  char *v382;
  uint64_t v383;
  char *v384;
  uint64_t v385;
  char *v386;
  uint64_t TupleTypeMetadata2;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  _QWORD *v392;

  v306 = a8;
  v303 = a7;
  v300 = a6;
  v297 = a5;
  v365 = a4;
  v364 = a3;
  v363 = a2;
  v362 = a1;
  v299 = a45;
  v291 = a43;
  v389 = a39;
  v392 = a37;
  v391 = a35;
  v373 = a33;
  v390 = a31;
  v372 = a29;
  v371 = a27;
  v370 = a25;
  v369 = a23;
  v277 = a22;
  v346 = a21;
  v324 = a41;
  v314 = a20;
  v316 = a19;
  v318 = a18;
  v315 = a17;
  v313 = a16;
  v310 = a15;
  v309 = a14;
  v308 = a13;
  v302 = a12;
  v301 = a11;
  v296 = a10;
  v295 = a9;
  v342 = a40;
  v388 = sub_2448EB508();
  v368 = *(_QWORD *)(v388 - 8);
  MEMORY[0x24BDAC7A8](v388);
  v341 = (char *)&v261 - v60;
  v340 = a38;
  v61 = sub_2448EB508();
  v366 = *(_QWORD *)(v61 - 8);
  v367 = v61;
  MEMORY[0x24BDAC7A8](v61);
  v338 = (char *)&v261 - v62;
  v332 = a36;
  v63 = sub_2448EB508();
  v359 = *(_QWORD *)(v63 - 8);
  v360 = v63;
  MEMORY[0x24BDAC7A8](v63);
  v328 = (char *)&v261 - v64;
  v323 = a34;
  v65 = sub_2448EB508();
  v357 = *(_QWORD *)(v65 - 8);
  v358 = v65;
  MEMORY[0x24BDAC7A8](v65);
  v321 = a32;
  v322 = (char *)&v261 - v66;
  v67 = sub_2448EB508();
  v355 = *(_QWORD *)(v67 - 8);
  v356 = v67;
  MEMORY[0x24BDAC7A8](v67);
  v319 = (char *)&v261 - v68;
  v317 = a30;
  v69 = sub_2448EB508();
  v353 = *(_QWORD *)(v69 - 8);
  v354 = v69;
  MEMORY[0x24BDAC7A8](v69);
  v311 = a28;
  v312 = (char *)&v261 - v70;
  v71 = sub_2448EB508();
  v351 = *(_QWORD *)(v71 - 8);
  v352 = v71;
  MEMORY[0x24BDAC7A8](v71);
  v304 = a26;
  v305 = (char *)&v261 - v72;
  v73 = sub_2448EB508();
  v349 = *(_QWORD *)(v73 - 8);
  v350 = v73;
  MEMORY[0x24BDAC7A8](v73);
  v293 = (char *)&v261 - v74;
  v294 = a24;
  v75 = sub_2448EB508();
  v347 = *(_QWORD *)(v75 - 8);
  v348 = (void (*)(_QWORD, _QWORD))v75;
  MEMORY[0x24BDAC7A8](v75);
  v286 = (char *)&v261 - v76;
  v77 = sub_2448EB508();
  v266 = *(_QWORD *)(v77 - 8);
  v78 = v77;
  MEMORY[0x24BDAC7A8](v77);
  v275 = (char *)&v261 - v79;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v339 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v80 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v335 = (char *)&v261 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v80);
  v386 = (char *)&v261 - v82;
  v385 = swift_getTupleTypeMetadata2();
  v337 = *(_QWORD *)(v385 - 8);
  v83 = MEMORY[0x24BDAC7A8](v385);
  v325 = (char *)&v261 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v83);
  v384 = (char *)&v261 - v85;
  v383 = swift_getTupleTypeMetadata2();
  v336 = *(_QWORD *)(v383 - 8);
  v86 = MEMORY[0x24BDAC7A8](v383);
  v320 = (char *)&v261 - ((v87 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v86);
  v382 = (char *)&v261 - v88;
  v381 = swift_getTupleTypeMetadata2();
  v334 = *(_QWORD *)(v381 - 8);
  v89 = MEMORY[0x24BDAC7A8](v381);
  v344 = (char *)&v261 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v89);
  v380 = (char *)&v261 - v91;
  v379 = swift_getTupleTypeMetadata2();
  v333 = *(_QWORD *)(v379 - 8);
  v92 = MEMORY[0x24BDAC7A8](v379);
  v307 = (char *)&v261 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v92);
  v378 = (char *)&v261 - v94;
  v377 = swift_getTupleTypeMetadata2();
  v331 = *(_QWORD *)(v377 - 8);
  v95 = MEMORY[0x24BDAC7A8](v377);
  v298 = (char *)&v261 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v95);
  v376 = (char *)&v261 - v97;
  v375 = swift_getTupleTypeMetadata2();
  v330 = *(_QWORD *)(v375 - 8);
  v98 = MEMORY[0x24BDAC7A8](v375);
  v343 = (char *)&v261 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v98);
  v374 = (char *)&v261 - v100;
  v101 = swift_getTupleTypeMetadata2();
  v329 = *(_QWORD *)(v101 - 8);
  v102 = MEMORY[0x24BDAC7A8](v101);
  v281 = (char *)&v261 - ((v103 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v102);
  v105 = (char *)&v261 - v104;
  v106 = swift_getTupleTypeMetadata2();
  v327 = *(_QWORD *)(v106 - 8);
  v107 = MEMORY[0x24BDAC7A8](v106);
  v274 = (char *)&v261 - ((v108 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v107);
  v110 = (char *)&v261 - v109;
  v111 = v346;
  v112 = v78;
  v113 = swift_getTupleTypeMetadata2();
  v114 = *(_QWORD *)(v113 - 8);
  v361 = v113;
  v326 = v114;
  v115 = MEMORY[0x24BDAC7A8](v113);
  v345 = (char *)&v261 - ((v116 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = MEMORY[0x24BDAC7A8](v115);
  v119 = (char *)&v261 - v118;
  v121 = *(_QWORD *)(v111 - 8);
  v264 = (char *)&v261 + *(int *)(v117 + 48) - v118;
  v120 = v264;
  v265 = v121;
  v263 = *(void (**)(void))(v121 + 16);
  ((void (*)(char *, char *, uint64_t))v263)((char *)&v261 - v118, v362, v111);
  v122 = v266;
  v262 = *(void (**)(char *, uint64_t, uint64_t))(v266 + 16);
  v262(v120, v363, v112);
  v363 = v106;
  v123 = &v110[*(int *)(v106 + 48)];
  v270 = *(_QWORD *)(v369 - 8);
  v124 = *(void (**)(char *, char *, uint64_t))(v270 + 16);
  v362 = v110;
  v268 = v124;
  ((void (*)(char *, char *))v124)(v110, v364);
  v125 = *(void (**)(char *, char *, void (*)(_QWORD, _QWORD)))(v347 + 16);
  v269 = v123;
  v267 = v125;
  v125(v123, (char *)v365, v348);
  v365 = v101;
  v126 = v357;
  v127 = &v105[*(int *)(v101 + 48)];
  v276 = *(_QWORD *)(v370 - 8);
  v128 = *(void (**)(char *, char *, uint64_t))(v276 + 16);
  v364 = v105;
  v129 = v122;
  v272 = v128;
  ((void (*)(char *, char *))v128)(v105, v297);
  v130 = *(void (**)(char *, char *, uint64_t))(v349 + 16);
  v273 = v127;
  v271 = v130;
  v130(v127, (char *)v300, v350);
  v131 = v112;
  v132 = &v374[*(int *)(v375 + 48)];
  v282 = *(_QWORD *)(v371 - 8);
  v279 = *(void (**)(void))(v282 + 16);
  v279();
  v133 = *(void (**)(char *, char *, uint64_t))(v351 + 16);
  v280 = v132;
  v278 = v133;
  v133(v132, (char *)v306, v352);
  v134 = &v376[*(int *)(v377 + 48)];
  v287 = *(_QWORD *)(v372 - 8);
  v284 = *(void (**)(void))(v287 + 16);
  v284();
  v135 = *(void (**)(char *, char *, uint64_t))(v353 + 16);
  v285 = v134;
  v283 = v135;
  v135(v134, (char *)v296, v354);
  v136 = v391;
  v137 = &v378[*(int *)(v379 + 48)];
  v292 = *(_QWORD *)(v390 - 8);
  v289 = *(void (**)(void))(v292 + 16);
  v289();
  v138 = *(void (**)(char *, char *, uint64_t))(v355 + 16);
  v290 = v137;
  v288 = v138;
  v138(v137, (char *)v302, v356);
  v139 = &v380[*(int *)(v381 + 48)];
  v300 = *(_QWORD *)(v373 - 8);
  v296 = *(void (**)(void))(v300 + 16);
  v296();
  v140 = *(void (**)(char *, char *, uint64_t))(v126 + 16);
  v297 = v139;
  v295 = v140;
  v140(v139, (char *)v309, v358);
  v141 = &v382[*(int *)(v383 + 48)];
  v306 = *(_QWORD *)(v136 - 8);
  v302 = *(void (**)(void))(v306 + 16);
  v302();
  v142 = *(void (**)(char *, char *, uint64_t))(v359 + 16);
  v303 = v141;
  v301 = v142;
  v142(v141, (char *)v313, v360);
  v143 = &v384[*(int *)(v385 + 48)];
  v313 = *(v392 - 1);
  v309 = *(void (**)(void))(v313 + 16);
  v309();
  v144 = *(void (**)(char *, char *, uint64_t))(v366 + 16);
  v310 = v143;
  v308 = v144;
  v144(v143, (char *)v318, v367);
  v145 = &v386[*(int *)(TupleTypeMetadata2 + 48)];
  v318 = *(_QWORD *)(v389 - 8);
  v315 = *(void (**)(void))(v318 + 16);
  v315();
  v146 = *(void (**)(_QWORD, _QWORD, _QWORD))(v368 + 16);
  v316 = v145;
  v147 = v314;
  v314 = v146;
  v146(v145, v147, v388);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738C570);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2448EFE60;
  v149 = (uint64_t *)(inited + 48);
  v150 = v346;
  *(_QWORD *)(inited + 32) = (*((uint64_t (**)(uint64_t))v324 + 1))(v346);
  *(_QWORD *)(inited + 40) = v151;
  v152 = &v345[*(int *)(v361 + 48)];
  v324 = v119;
  v153 = v150;
  v263();
  v262(v152, (uint64_t)v264, v131);
  v154 = v275;
  (*(void (**)(char *, char *, uint64_t))(v129 + 32))(v275, v152, v131);
  v155 = *(_QWORD *)(v277 - 8);
  v156 = v154;
  v157 = v154;
  v158 = v277;
  if ((*(unsigned int (**)(char *, uint64_t))(v155 + 48))(v157, 1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v265 + 8))(v345, v153);
    (*(void (**)(char *, uint64_t))(v129 + 8))(v156, v131);
    *(_QWORD *)(inited + 80) = 0;
    *(_OWORD *)v149 = 0u;
    *(_OWORD *)(inited + 64) = 0u;
  }
  else
  {
    v159 = *(void (**)(uint64_t, uint64_t))(a42 + 24);
    *(_QWORD *)(inited + 72) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 80) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v149);
    v159(v158, a42);
    (*(void (**)(char *, uint64_t))(v155 + 8))(v156, v158);
    (*(void (**)(char *, uint64_t))(v265 + 8))(v345, v153);
  }
  v346 = a47;
  v160 = v362;
  v161 = v369;
  *(_QWORD *)(inited + 88) = (*(uint64_t (**)(uint64_t))(v291 + 8))(v369);
  *(_QWORD *)(inited + 96) = v162;
  v163 = v274;
  v164 = &v274[*(int *)(v363 + 48)];
  v165 = v160;
  v166 = v161;
  v268(v274, v165, v161);
  v167 = v348;
  v267(v164, v269, v348);
  v168 = v347;
  v169 = v286;
  (*(void (**)(char *, char *, void (*)(_QWORD, _QWORD)))(v347 + 32))(v286, v164, v167);
  v170 = v294;
  v171 = *(_QWORD *)(v294 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v171 + 48))(v169, 1, v294) == 1)
  {
    (*(void (**)(char *, uint64_t))(v270 + 8))(v163, v166);
    (*(void (**)(char *, _QWORD))(v168 + 8))(v169, v167);
    *(_QWORD *)(inited + 136) = 0;
    *(_OWORD *)(inited + 104) = 0u;
    *(_OWORD *)(inited + 120) = 0u;
  }
  else
  {
    v348 = *(void (**)(_QWORD, _QWORD))(a44 + 24);
    *(_QWORD *)(inited + 128) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 136) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 104));
    v348(v170, a44);
    (*(void (**)(char *, uint64_t))(v171 + 8))(v169, v170);
    (*(void (**)(char *, uint64_t))(v270 + 8))(v163, v166);
  }
  v172 = v370;
  v173 = v293;
  v174 = v349;
  v370 = a49;
  v175 = v364;
  *(_QWORD *)(inited + 144) = (*(uint64_t (**)(uint64_t))(v299 + 8))(v172);
  *(_QWORD *)(inited + 152) = v176;
  v177 = v281;
  v178 = &v281[*(int *)(v365 + 48)];
  v272(v281, v175, v172);
  v179 = v350;
  v271(v178, v273, v350);
  (*(void (**)(char *, char *, uint64_t))(v174 + 32))(v173, v178, v179);
  v180 = v304;
  v181 = *(_QWORD *)(v304 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v181 + 48))(v173, 1, v304) == 1)
  {
    (*(void (**)(char *, uint64_t))(v276 + 8))(v177, v172);
    (*(void (**)(char *, uint64_t))(v174 + 8))(v173, v179);
    *(_QWORD *)(inited + 192) = 0;
    *(_OWORD *)(inited + 160) = 0u;
    *(_OWORD *)(inited + 176) = 0u;
  }
  else
  {
    v369 = *(_QWORD *)(a46 + 24);
    *(_QWORD *)(inited + 184) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 192) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 160));
    ((void (*)(uint64_t, uint64_t))v369)(v180, a46);
    (*(void (**)(char *, uint64_t))(v181 + 8))(v173, v180);
    (*(void (**)(char *, uint64_t))(v276 + 8))(v177, v172);
  }
  v369 = a51;
  v182 = v374;
  v183 = v371;
  *(_QWORD *)(inited + 200) = (*(uint64_t (**)(uint64_t))(v346 + 8))(v371);
  *(_QWORD *)(inited + 208) = v184;
  v185 = v343;
  v186 = &v343[*(int *)(v375 + 48)];
  ((void (*)(char *, char *, uint64_t))v279)(v343, v182, v183);
  v187 = v352;
  v278(v186, v280, v352);
  v188 = v351;
  v189 = v305;
  (*(void (**)(char *, char *, uint64_t))(v351 + 32))(v305, v186, v187);
  v190 = v311;
  v191 = *(_QWORD *)(v311 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v191 + 48))(v189, 1, v311) == 1)
  {
    (*(void (**)(char *, uint64_t))(v282 + 8))(v185, v183);
    (*(void (**)(char *, uint64_t))(v188 + 8))(v189, v187);
    *(_QWORD *)(inited + 248) = 0;
    *(_OWORD *)(inited + 216) = 0u;
    *(_OWORD *)(inited + 232) = 0u;
  }
  else
  {
    v192 = *(void (**)(uint64_t, uint64_t))(a48 + 24);
    *(_QWORD *)(inited + 240) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 248) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 216));
    v192(v190, a48);
    (*(void (**)(char *, uint64_t))(v191 + 8))(v189, v190);
    (*(void (**)(char *, uint64_t))(v282 + 8))(v343, v183);
  }
  v193 = v372;
  v194 = v353;
  v372 = a53;
  v195 = v376;
  *(_QWORD *)(inited + 256) = (*(uint64_t (**)(uint64_t))(v370 + 8))(v193);
  *(_QWORD *)(inited + 264) = v196;
  v197 = v298;
  v198 = &v298[*(int *)(v377 + 48)];
  ((void (*)(char *, char *, uint64_t))v284)(v298, v195, v193);
  v199 = v354;
  v283(v198, v285, v354);
  v200 = v312;
  (*(void (**)(char *, char *, uint64_t))(v194 + 32))(v312, v198, v199);
  v201 = v317;
  v202 = *(_QWORD *)(v317 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v202 + 48))(v200, 1, v317) == 1)
  {
    (*(void (**)(char *, uint64_t))(v287 + 8))(v197, v193);
    (*(void (**)(char *, uint64_t))(v194 + 8))(v200, v199);
    *(_QWORD *)(inited + 304) = 0;
    *(_OWORD *)(inited + 272) = 0u;
    *(_OWORD *)(inited + 288) = 0u;
  }
  else
  {
    v371 = *(_QWORD *)(a50 + 24);
    *(_QWORD *)(inited + 296) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 304) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 272));
    ((void (*)(uint64_t, uint64_t))v371)(v201, a50);
    (*(void (**)(char *, uint64_t))(v202 + 8))(v200, v201);
    (*(void (**)(char *, uint64_t))(v287 + 8))(v197, v193);
  }
  v203 = v390;
  v371 = a55;
  v204 = v378;
  *(_QWORD *)(inited + 312) = (*(uint64_t (**)(uint64_t))(v369 + 8))(v390);
  *(_QWORD *)(inited + 320) = v205;
  v206 = v307;
  v207 = &v307[*(int *)(v379 + 48)];
  ((void (*)(char *, char *, uint64_t))v289)(v307, v204, v203);
  v208 = v356;
  v288(v207, v290, v356);
  v209 = v355;
  v210 = v319;
  (*(void (**)(char *, char *, uint64_t))(v355 + 32))(v319, v207, v208);
  v211 = v321;
  v212 = *(_QWORD *)(v321 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v212 + 48))(v210, 1, v321) == 1)
  {
    (*(void (**)(char *, uint64_t))(v292 + 8))(v206, v203);
    (*(void (**)(char *, uint64_t))(v209 + 8))(v210, v208);
    *(_QWORD *)(inited + 360) = 0;
    *(_OWORD *)(inited + 328) = 0u;
    *(_OWORD *)(inited + 344) = 0u;
  }
  else
  {
    v213 = *(void (**)(uint64_t, uint64_t))(a52 + 24);
    *(_QWORD *)(inited + 352) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 360) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 328));
    v213(v211, a52);
    (*(void (**)(char *, uint64_t))(v212 + 8))(v210, v211);
    (*(void (**)(char *, uint64_t))(v292 + 8))(v206, v390);
  }
  v214 = v373;
  v390 = a57;
  v215 = v380;
  *(_QWORD *)(inited + 368) = (*(uint64_t (**)(uint64_t))(v372 + 8))(v373);
  *(_QWORD *)(inited + 376) = v216;
  v217 = v344;
  v218 = &v344[*(int *)(v381 + 48)];
  ((void (*)(char *, char *, uint64_t))v296)(v344, v215, v214);
  v219 = v358;
  v295(v218, v297, v358);
  v220 = v357;
  v221 = v322;
  (*(void (**)(char *, char *, uint64_t))(v357 + 32))(v322, v218, v219);
  v222 = v323;
  v223 = *(_QWORD *)(v323 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v223 + 48))(v221, 1, v323) == 1)
  {
    (*(void (**)(char *, uint64_t))(v300 + 8))(v217, v214);
    (*(void (**)(char *, uint64_t))(v220 + 8))(v221, v219);
    *(_QWORD *)(inited + 416) = 0;
    *(_OWORD *)(inited + 384) = 0u;
    *(_OWORD *)(inited + 400) = 0u;
  }
  else
  {
    v224 = v214;
    v225 = *(void (**)(uint64_t, uint64_t))(a54 + 24);
    *(_QWORD *)(inited + 408) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 416) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 384));
    v225(v222, a54);
    (*(void (**)(char *, uint64_t))(v223 + 8))(v221, v222);
    (*(void (**)(char *, uint64_t))(v300 + 8))(v344, v224);
  }
  v226 = v391;
  v227 = v320;
  v373 = a59;
  v228 = v382;
  *(_QWORD *)(inited + 424) = (*(uint64_t (**)(uint64_t))(v371 + 8))(v391);
  *(_QWORD *)(inited + 432) = v229;
  v230 = &v227[*(int *)(v383 + 48)];
  ((void (*)(char *, char *, uint64_t))v302)(v227, v228, v226);
  v231 = v360;
  v301(v230, v303, v360);
  v232 = v359;
  v233 = v328;
  (*(void (**)(char *, char *, uint64_t))(v359 + 32))(v328, v230, v231);
  v234 = v332;
  v235 = *(_QWORD *)(v332 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v235 + 48))(v233, 1, v332) == 1)
  {
    (*(void (**)(char *, uint64_t))(v306 + 8))(v227, v226);
    (*(void (**)(char *, uint64_t))(v232 + 8))(v233, v231);
    *(_QWORD *)(inited + 472) = 0;
    *(_OWORD *)(inited + 440) = 0u;
    *(_OWORD *)(inited + 456) = 0u;
  }
  else
  {
    v236 = *(void (**)(uint64_t, uint64_t))(a56 + 24);
    *(_QWORD *)(inited + 464) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 472) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 440));
    v236(v234, a56);
    (*(void (**)(char *, uint64_t))(v235 + 8))(v233, v234);
    (*(void (**)(char *, uint64_t))(v306 + 8))(v227, v391);
  }
  v237 = v384;
  v238 = v392;
  *(_QWORD *)(inited + 480) = (*(uint64_t (**)(_QWORD *))(v390 + 8))(v392);
  *(_QWORD *)(inited + 488) = v239;
  v240 = v325;
  v241 = &v325[*(int *)(v385 + 48)];
  ((void (*)(char *, char *, _QWORD *))v309)(v325, v237, v238);
  v242 = v367;
  v308(v241, v310, v367);
  v243 = v366;
  v244 = v338;
  (*(void (**)(char *, char *, uint64_t))(v366 + 32))(v338, v241, v242);
  v245 = v340;
  v246 = *(_QWORD *)(v340 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v246 + 48))(v244, 1, v340) == 1)
  {
    (*(void (**)(char *, _QWORD *))(v313 + 8))(v240, v238);
    (*(void (**)(char *, uint64_t))(v243 + 8))(v244, v242);
    *(_QWORD *)(inited + 528) = 0;
    *(_OWORD *)(inited + 496) = 0u;
    *(_OWORD *)(inited + 512) = 0u;
  }
  else
  {
    v247 = *(void (**)(uint64_t, uint64_t))(a58 + 24);
    *(_QWORD *)(inited + 520) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 528) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 496));
    v247(v245, a58);
    (*(void (**)(char *, uint64_t))(v246 + 8))(v244, v245);
    (*(void (**)(char *, _QWORD *))(v313 + 8))(v240, v392);
  }
  v248 = v389;
  v249 = v341;
  v250 = v335;
  v251 = v386;
  *(_QWORD *)(inited + 536) = (*(uint64_t (**)(uint64_t))(v373 + 8))(v389);
  *(_QWORD *)(inited + 544) = v252;
  v253 = &v250[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v315)(v250, v251, v248);
  v254 = v388;
  v314(v253, v316, v388);
  v255 = v368;
  (*(void (**)(char *, char *, uint64_t))(v368 + 32))(v249, v253, v254);
  v256 = v342;
  v257 = *(_QWORD *)(v342 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v257 + 48))(v249, 1, v342) == 1)
  {
    (*(void (**)(char *, uint64_t))(v318 + 8))(v250, v248);
    (*(void (**)(char *, uint64_t))(v255 + 8))(v249, v254);
    *(_QWORD *)(inited + 584) = 0;
    *(_OWORD *)(inited + 552) = 0u;
    *(_OWORD *)(inited + 568) = 0u;
  }
  else
  {
    v392 = *(_QWORD **)(a60 + 24);
    *(_QWORD *)(inited + 576) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 584) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 552));
    ((void (*)(uint64_t, uint64_t))v392)(v256, a60);
    (*(void (**)(char *, uint64_t))(v257 + 8))(v249, v256);
    (*(void (**)(char *, uint64_t))(v318 + 8))(v250, v248);
  }
  v258 = sub_2447C8898(inited);
  v259 = sub_2448546EC(v258);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v339 + 8))(v386, TupleTypeMetadata2);
  (*(void (**)(char *, uint64_t))(v337 + 8))(v384, v385);
  (*(void (**)(char *, uint64_t))(v336 + 8))(v382, v383);
  (*(void (**)(char *, uint64_t))(v334 + 8))(v380, v381);
  (*(void (**)(char *, uint64_t))(v333 + 8))(v378, v379);
  (*(void (**)(char *, uint64_t))(v331 + 8))(v376, v377);
  (*(void (**)(char *, uint64_t))(v330 + 8))(v374, v375);
  (*(void (**)(char *, uint64_t))(v329 + 8))(v364, v365);
  (*(void (**)(char *, uint64_t))(v327 + 8))(v362, v363);
  (*(void (**)(char *, uint64_t))(v326 + 8))(v324, v361);
  return v259;
}

uint64_t PropertyList.unarchiveOptionalValue<A>(for:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  __int128 v18;
  __int128 v19;
  _OWORD v20[2];

  v10 = *v4;
  v11 = a1[3];
  v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  if (!*(_QWORD *)(v10 + 16) || (v15 = sub_244828D0C(v13, v14), (v16 & 1) == 0))
  {
    v18 = 0u;
    v19 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_2447C92C4(*(_QWORD *)(v10 + 56) + 32 * v15, (uint64_t)&v18);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v19 + 1))
  {
LABEL_7:
    sub_2447BD180((uint64_t)&v18, &qword_25738B658);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a4, 1, 1, a2);
  }
  sub_2447C91FC(&v18, v20);
  *(_QWORD *)&v18 = v10;
  sub_2448556FC((uint64_t)v20, (uint64_t)a1, a2, a3, a4);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  if (!v5)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a4, 0, 1, a2);
  return result;
}

PreviewsFoundationOS::PropertyList __swiftcall PropertyList.init(serializableDictionary:)(PreviewsFoundationOS::PropertyList serializableDictionary)
{
  PreviewsFoundationOS::PropertyList *v1;

  v1->serializableDictionary._rawValue = serializableDictionary.serializableDictionary._rawValue;
  return serializableDictionary;
}

uint64_t PropertyListRepresentable.init(propertyList:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[7];

  v31 = a3;
  v30 = *(_QWORD *)(a2 - 8);
  v4 = MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v32 = (uint64_t)&v30 - v7;
  v33 = v8;
  v35 = v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = sub_2448EB508();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v30 - v14;
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = MEMORY[0x24BDAC7A8](v13);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v30 - v20;
  v22 = *a1;
  v36[0] = v22;
  swift_bridgeObjectRetain();
  v23 = swift_dynamicCast();
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  if ((v23 & 1) != 0)
  {
    v24(v15, 0, 1, AssociatedTypeWitness);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v21, v15, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v21, AssociatedTypeWitness);
    v25 = v34;
    v26 = (uint64_t)v6;
    v27 = v35;
    (*(void (**)(char *, uint64_t))(v33 + 32))(v19, v35);
    if (v25)
      return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v21, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, AssociatedTypeWitness);
  }
  else
  {
    v24(v15, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    v36[6] = v22;
    v36[3] = MEMORY[0x24BEE0D00];
    v36[4] = &protocol witness table for String;
    v36[0] = 0x65756C6176;
    v36[1] = 0xE500000000000000;
    v26 = v32;
    v29 = v34;
    v27 = v35;
    PropertyList.unarchiveValue<A>(for:)(v36, v35, v33, v32);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    result = swift_bridgeObjectRelease();
    if (v29)
      return result;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v31, v26, v27);
}

uint64_t PropertyListRepresentable<>.propertyListValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t sub_244853D88(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t *boxed_opaque_existential_1;

  *a1 = 0x65756C6176;
  a1[1] = 0xE500000000000000;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  a2[3] = AssociatedTypeWitness;
  a2[4] = swift_getAssociatedConformanceWitness();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(boxed_opaque_existential_1, a3, AssociatedTypeWitness);
}

uint64_t sub_244853E38(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_244853D88(a1, a2, *(_QWORD *)(v2 + 32));
}

uint64_t sub_244853E44@<X0>(void (*a1)(_QWORD *, _BYTE *)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t inited;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[40];
  _QWORD v10[2];
  _BYTE v11[40];

  a1(v10, v11);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738C570);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2448ECF10;
  v4 = v10[1];
  *(_QWORD *)(inited + 32) = v10[0];
  *(_QWORD *)(inited + 40) = v4;
  sub_24486362C((uint64_t)v11, (uint64_t)v9);
  sub_2447C920C((uint64_t)v9, inited + 48);
  swift_bridgeObjectRetain();
  v5 = sub_2447C8898(inited);
  v6 = sub_2448546EC(v5);
  swift_bridgeObjectRelease();
  v7 = sub_24480FC04(v6);
  swift_bridgeObjectRelease();
  result = sub_2447BD180((uint64_t)v10, &qword_25738A380);
  *a2 = v7;
  return result;
}

uint64_t PropertyList.init<A>(content:)@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t *v25;

  v25 = a4;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A388);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v9 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v24 - v13;
  v15 = (char *)&v24 + *(int *)(v12 + 48) - v13;
  a1((char *)&v24 - v13, v15);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738C570);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2448ECF10;
  *(_QWORD *)(inited + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  *(_QWORD *)(inited + 40) = v17;
  v18 = (uint64_t)&v11[*(int *)(TupleTypeMetadata2 + 48)];
  v19 = *(_QWORD *)(a2 - 8);
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v11, v14, a2);
  sub_24486362C((uint64_t)v15, v18);
  sub_2447C920C(v18, inited + 48);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v11, a2);
  v20 = sub_2447C8898(inited);
  v21 = sub_2448546EC(v20);
  swift_bridgeObjectRelease();
  v22 = sub_24480FC04(v21);
  swift_bridgeObjectRelease();
  result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v14, TupleTypeMetadata2);
  *v25 = v22;
  return result;
}

uint64_t PropertyListRepresentable.serializableDictionary.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  PropertyListRepresentable.propertyList.getter(a1, a2, &v3);
  return v3;
}

uint64_t PropertyListRepresentable.init(serializableDictionary:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = a1;
  return PropertyListRepresentable.init(propertyList:)(&v4, a2, a3);
}

void sub_244854130(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t sub_24485413C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

_QWORD *sub_244854148@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t sub_244854154@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return sub_2447C9274(v2, v3);
}

__n128 sub_244854160@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

float sub_24485416C@<S0>(_DWORD *a1@<X8>)
{
  float *v1;
  float result;

  result = *v1;
  *a1 = *(_DWORD *)v1;
  return result;
}

float sub_244854178@<S0>(float *a1@<X0>, _DWORD *a2@<X8>)
{
  float result;

  result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

double sub_244854184@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

void sub_244854190(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

_DWORD *sub_24485419C@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2448541A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t sub_2448541C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

id sub_2448541F8@<X0>(void **a1@<X8>)
{
  void **v1;
  void *v2;

  v2 = *v1;
  *a1 = *v1;
  return v2;
}

uint64_t String.rawValue.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t PropertyList.serializableDictionary.getter()
{
  return swift_bridgeObjectRetain();
}

PreviewsFoundationOS::PropertyList __swiftcall PropertyList.init()()
{
  PreviewsFoundationOS::PropertyList *v0;
  PreviewsFoundationOS::PropertyList *v1;
  PreviewsFoundationOS::PropertyList result;

  v1 = v0;
  result.serializableDictionary._rawValue = (void *)sub_2447C8C10(MEMORY[0x24BEE4AF8]);
  v1->serializableDictionary._rawValue = result.serializableDictionary._rawValue;
  return result;
}

unint64_t static PropertyList.empty.getter@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;

  result = sub_2447C8C10(MEMORY[0x24BEE4AF8]);
  *a1 = result;
  return result;
}

uint64_t PropertyList.description.getter()
{
  uint64_t v0;

  swift_bridgeObjectRetain();
  v0 = sub_2448EA80C();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PropertyList.init<A, B>(content:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t AssociatedTypeWitness;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *);
  uint64_t *v47;
  uint64_t v48;

  v47 = a6;
  v48 = a4;
  v46 = a1;
  v37 = a3;
  v8 = sub_2448EB508();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v36 - v10;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v45 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v13 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v36 - v17;
  v39 = (char *)&v36 + *(int *)(v16 + 48) - v17;
  v46((char *)&v36 - v17);
  v44 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v42 = sub_2448EB508();
  v19 = swift_getTupleTypeMetadata2();
  sub_2448EBB68();
  swift_allocObject();
  v40 = sub_2448EAE0C();
  v21 = v20;
  v38 = (char *)v20 + *(int *)(v19 + 48);
  *v20 = (*(uint64_t (**)(uint64_t))(v48 + 8))(a2);
  v21[1] = v22;
  v46 = (void (*)(char *))TupleTypeMetadata2;
  v23 = *(int *)(TupleTypeMetadata2 + 48);
  v24 = v37;
  v25 = &v15[v23];
  v26 = *(_QWORD *)(a2 - 8);
  v27 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
  v41 = v18;
  v27(v15, v18, a2);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v25, v39, v8);
  v28 = v9;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v25, v8);
  v29 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v11, 1, v24) == 1)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v15, a2);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v38, 1, 1, AssociatedTypeWitness);
    v30 = v44;
  }
  else
  {
    v30 = v44;
    v31 = v38;
    (*(void (**)(uint64_t, uint64_t))(v44 + 24))(v24, v44);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v31, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v15, a2);
  }
  sub_244805474();
  v32 = sub_2448EA848();
  MEMORY[0x24BDAC7A8](v32);
  *(&v36 - 4) = a2;
  *(&v36 - 3) = v24;
  *(&v36 - 2) = v48;
  *(&v36 - 1) = v30;
  sub_2448EA83C();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738C5C0);
  v33 = sub_2448EB9AC();
  swift_bridgeObjectRelease();
  v34 = sub_24480FC04(v33);
  swift_bridgeObjectRelease();
  result = (*(uint64_t (**)(char *, void (*)(char *)))(v45 + 8))(v41, v46);
  *v47 = v34;
  return result;
}

uint64_t sub_2448546D8(uint64_t a1)
{
  return sub_2448546EC(a1);
}

uint64_t sub_2448546EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t v8;
  __int128 *v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  _QWORD v35[7];
  _BYTE v36[40];
  __int128 v37[2];
  __int128 v38;
  _OWORD v39[2];
  uint64_t v40;
  __int128 v41;
  _OWORD v42[2];
  uint64_t v43;
  uint64_t v44;

  v2 = MEMORY[0x24BEE4B00];
  v3 = *(_QWORD *)(a1 + 64);
  v32 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  v44 = MEMORY[0x24BEE4B00];
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & v3;
  v31 = (unint64_t)(63 - v4) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v8 << 6);
      goto LABEL_25;
    }
    v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v12 >= v31)
      goto LABEL_40;
    v13 = *(_QWORD *)(v32 + 8 * v12);
    v14 = v8 + 1;
    if (!v13)
    {
      v14 = v8 + 2;
      if (v8 + 2 >= v31)
        goto LABEL_40;
      v13 = *(_QWORD *)(v32 + 8 * v14);
      if (!v13)
      {
        v14 = v8 + 3;
        if (v8 + 3 >= v31)
          goto LABEL_40;
        v13 = *(_QWORD *)(v32 + 8 * v14);
        if (!v13)
        {
          v14 = v8 + 4;
          if (v8 + 4 >= v31)
            goto LABEL_40;
          v13 = *(_QWORD *)(v32 + 8 * v14);
          if (!v13)
            break;
        }
      }
    }
LABEL_24:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
    v8 = v14;
LABEL_25:
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v18 = *v16;
    v17 = v16[1];
    sub_24486362C(*(_QWORD *)(a1 + 56) + 40 * v11, (uint64_t)v42);
    *(_QWORD *)&v41 = v18;
    *((_QWORD *)&v41 + 1) = v17;
    v38 = v41;
    v39[0] = v42[0];
    v39[1] = v42[1];
    v40 = v43;
    sub_24486362C((uint64_t)v39, (uint64_t)&v33);
    if (v34)
    {
      sub_2447F3530(&v33, (uint64_t)v37);
      v19 = v38;
      *(_OWORD *)&v35[5] = v38;
      sub_2447C920C((uint64_t)v39, (uint64_t)v36);
      sub_2447F3530(v37, (uint64_t)v35);
      v20 = *(_QWORD *)(v2 + 16);
      if (*(_QWORD *)(v2 + 24) <= v20)
      {
        v21 = v20 + 1;
        swift_bridgeObjectRetain();
        sub_244829E38(v21, 1);
        v2 = v44;
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      sub_2448EBD00();
      sub_2448EAB60();
      result = sub_2448EBD3C();
      v22 = v2 + 64;
      v23 = -1 << *(_BYTE *)(v2 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v2 + 64 + 8 * (v24 >> 6))) != 0)
      {
        v26 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v2 + 64 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v25 == v28;
          if (v25 == v28)
            v25 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v22 + 8 * v25);
        }
        while (v30 == -1);
        v26 = __clz(__rbit64(~v30)) + (v25 << 6);
      }
      *(_QWORD *)(v22 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
      *(_OWORD *)(*(_QWORD *)(v2 + 48) + 16 * v26) = v19;
      sub_2447F3530((__int128 *)v35, *(_QWORD *)(v2 + 56) + 40 * v26);
      ++*(_QWORD *)(v2 + 16);
      v9 = (__int128 *)v36;
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_2447BD180((uint64_t)&v38, &qword_25738ECD8);
      v9 = &v33;
    }
    result = sub_2447BD180((uint64_t)v9, &qword_25738A388);
  }
  v15 = v8 + 5;
  if (v8 + 5 >= v31)
  {
LABEL_40:
    sub_2447D1030();
    return v2;
  }
  v13 = *(_QWORD *)(v32 + 8 * v15);
  if (v13)
  {
    v14 = v8 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v31)
      goto LABEL_40;
    v13 = *(_QWORD *)(v32 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_24;
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_244854AA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  v2 = MEMORY[0x24BEE4B00];
  v3 = a1 + 64;
  v32 = MEMORY[0x24BEE4B00];
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(63 - v4) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  if (!v6)
    goto LABEL_8;
LABEL_5:
  v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v11 = v10 | (v9 << 6);
  while (1)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v11);
    if (v12)
    {
      v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
      v18 = v17[1];
      v31 = *v17;
      v19 = *(_QWORD *)(v2 + 16);
      if (*(_QWORD *)(v2 + 24) <= v19)
      {
        v20 = v19 + 1;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        sub_24482A15C(v20, 1);
        v2 = v32;
      }
      else
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
      }
      sub_2448EBD00();
      sub_2448EAB60();
      result = sub_2448EBD3C();
      v21 = v2 + 64;
      v22 = -1 << *(_BYTE *)(v2 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v2 + 64 + 8 * (v23 >> 6))) == 0)
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          v28 = v24 == v27;
          if (v24 == v27)
            v24 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v21 + 8 * v24);
          if (v29 != -1)
          {
            v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_37;
          }
        }
        goto LABEL_41;
      }
      v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v2 + 64 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_37:
      *(_QWORD *)(v21 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
      v30 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v25);
      *v30 = v31;
      v30[1] = v18;
      *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v25) = v12;
      ++*(_QWORD *)(v2 + 16);
      result = swift_bridgeObjectRelease();
      if (v6)
        goto LABEL_5;
    }
    else if (v6)
    {
      goto LABEL_5;
    }
LABEL_8:
    v13 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v13 >= v7)
      goto LABEL_39;
    v14 = *(_QWORD *)(v3 + 8 * v13);
    v15 = v9 + 1;
    if (!v14)
    {
      v15 = v9 + 2;
      if (v9 + 2 >= v7)
        goto LABEL_39;
      v14 = *(_QWORD *)(v3 + 8 * v15);
      if (!v14)
      {
        v15 = v9 + 3;
        if (v9 + 3 >= v7)
          goto LABEL_39;
        v14 = *(_QWORD *)(v3 + 8 * v15);
        if (!v14)
        {
          v15 = v9 + 4;
          if (v9 + 4 >= v7)
            goto LABEL_39;
          v14 = *(_QWORD *)(v3 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v14 - 1) & v14;
    v11 = __clz(__rbit64(v14)) + (v15 << 6);
    v9 = v15;
  }
  v16 = v9 + 5;
  if (v9 + 5 >= v7)
  {
LABEL_39:
    sub_2447D1030();
    return v2;
  }
  v14 = *(_QWORD *)(v3 + 8 * v16);
  if (v14)
  {
    v15 = v9 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v7)
      goto LABEL_39;
    v14 = *(_QWORD *)(v3 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_23;
  }
LABEL_42:
  __break(1u);
  return result;
}

unint64_t sub_244854DA4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __int128 *v6;
  unint64_t result;
  int64_t i;
  __int128 *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  _QWORD v30[5];
  __int128 v31;
  __int128 v32[2];
  __int128 v33[3];

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738CF98);
    v2 = (_QWORD *)sub_2448EBA3C();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v29 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v3) >> 6;
  v6 = (__int128 *)v30;
  result = swift_bridgeObjectRetain();
  i = 0;
  if (v5)
    goto LABEL_10;
LABEL_11:
  v14 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v14 >= v28)
    goto LABEL_32;
  v15 = *(_QWORD *)(v29 + 8 * v14);
  v16 = i + 1;
  if (!v15)
  {
    v16 = i + 2;
    if (i + 2 >= v28)
      goto LABEL_32;
    v15 = *(_QWORD *)(v29 + 8 * v16);
    if (!v15)
    {
      v16 = i + 3;
      if (i + 3 >= v28)
        goto LABEL_32;
      v15 = *(_QWORD *)(v29 + 8 * v16);
      if (!v15)
      {
        v16 = i + 4;
        if (i + 4 >= v28)
          goto LABEL_32;
        v15 = *(_QWORD *)(v29 + 8 * v16);
        if (!v15)
        {
          v17 = i + 5;
          if (i + 5 < v28)
          {
            v15 = *(_QWORD *)(v29 + 8 * v17);
            if (v15)
            {
              v16 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v16 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_36;
              if (v16 >= v28)
                break;
              v15 = *(_QWORD *)(v29 + 8 * v16);
              ++v17;
              if (v15)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_2447D1030();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  v5 = (v15 - 1) & v15;
  v13 = __clz(__rbit64(v15)) + (v16 << 6);
  for (i = v16; ; v13 = v12 | (i << 6))
  {
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v20 = *v18;
    v19 = v18[1];
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v13);
    v30[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_25738C590);
    v30[4] = sub_244864E38();
    v30[0] = v21;
    sub_2447F3530(v6, (uint64_t)v32);
    sub_2447F3530(v32, (uint64_t)v33);
    sub_2447F3530(v33, (uint64_t)&v31);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_244828D0C(v20, v19);
    v22 = result;
    if ((v23 & 1) != 0)
    {
      v9 = v6;
      v10 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v10 = v20;
      v10[1] = v19;
      v6 = v9;
      v11 = v2[7] + 40 * v22;
      __swift_destroy_boxed_opaque_existential_1(v11);
      result = sub_2447F3530(&v31, v11);
      if (!v5)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v24 = (uint64_t *)(v2[6] + 16 * result);
    *v24 = v20;
    v24[1] = v19;
    result = sub_2447F3530(&v31, v2[7] + 40 * result);
    v25 = v2[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
      goto LABEL_34;
    v2[2] = v27;
    if (!v5)
      goto LABEL_11;
LABEL_10:
    v12 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t PropertyList.archiveValue<A>(_:for:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v48 = a2;
  v7 = sub_2448EB508();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v46 - v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = sub_2448EB508();
  v13 = *(_QWORD *)(v12 - 8);
  v49 = v12;
  v50 = v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v47 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v46 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v46 - v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  v21 = *(_QWORD *)(a3 - 8);
  v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v10, 1, a3) == 1)
  {
    a3 = v7;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
    v22 = 0;
    v8 = v21;
  }
  v23 = v50;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a3);
  v24 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v20, v22, 1, AssociatedTypeWitness);
  v25 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  v26 = v49;
  v25(v18, v20, v49);
  v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
  if (v27(v18, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v18, v26);
LABEL_9:
    v53 = 0;
    v51 = 0u;
    v52 = 0u;
    v28 = v48;
    goto LABEL_10;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738C598);
  if (!swift_dynamicCast())
    goto LABEL_9;
  v28 = v48;
  if (*((_QWORD *)&v52 + 1))
  {
    sub_2447F3530(&v51, (uint64_t)&v54);
    v29 = v28[3];
    v30 = v28[4];
    __swift_project_boxed_opaque_existential_1(v28, v29);
    v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(v29, v30);
    v33 = v32;
    v34 = v26;
    v35 = *((_QWORD *)&v55 + 1);
    v36 = v56;
    __swift_project_boxed_opaque_existential_1(&v54, *((uint64_t *)&v55 + 1));
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v36 + 8))(&v51, v35, v36);
    sub_244896210((uint64_t)&v51, v31, v33);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v20, v34);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
  }
LABEL_10:
  sub_2447BD180((uint64_t)&v51, &qword_25738C5C8);
  v38 = v28[3];
  v39 = v28[4];
  __swift_project_boxed_opaque_existential_1(v28, v38);
  v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v38, v39);
  v42 = v41;
  v43 = v47;
  v25(v47, v20, v26);
  if (v27(v43, 1, AssociatedTypeWitness) == 1)
  {
    v44 = v50;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v43, v26);
    v54 = 0u;
    v55 = 0u;
  }
  else
  {
    *((_QWORD *)&v55 + 1) = AssociatedTypeWitness;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v54);
    (*(void (**)(uint64_t *, char *, uint64_t))(v24 + 32))(boxed_opaque_existential_1, v43, AssociatedTypeWitness);
    v44 = v50;
  }
  sub_244896210((uint64_t)&v54, v40, v42);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v20, v26);
}

uint64_t PropertyList.merging(_:uniquingKeysWith:)@<X0>(void (*a1)(_OWORD *__return_ptr, id *, _OWORD *)@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v8 = *v3;
  swift_bridgeObjectRetain();
  v9 = swift_bridgeObjectRetain();
  result = sub_2448554C0(v9, a1, a2, v8);
  if (!v4)
    *a3 = result;
  return result;
}

uint64_t sub_2448554C0(uint64_t a1, void (*a2)(_OWORD *__return_ptr, id *, _OWORD *), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_244863288(a1, (uint64_t)sub_244863248, 0, isUniquelyReferenced_nonNull_native, a2, a3);
  swift_bridgeObjectRelease();
  if (v4)
    swift_bridgeObjectRelease();
  return a4;
}

PreviewsFoundationOS::PropertyList __swiftcall PropertyList.confidentlyMerging(_:)(PreviewsFoundationOS::PropertyList a1)
{
  PreviewsFoundationOS::PropertyList *v1;
  uint64_t *v2;
  PreviewsFoundationOS::PropertyList *v3;
  uint64_t v4;
  uint64_t v5;
  PreviewsFoundationOS::PropertyList result;

  v3 = v1;
  v4 = *v2;
  swift_bridgeObjectRetain();
  v5 = swift_bridgeObjectRetain();
  result.serializableDictionary._rawValue = (void *)sub_24486397C(v5, v4);
  v3->serializableDictionary._rawValue = result.serializableDictionary._rawValue;
  return result;
}

uint64_t PropertyList.merge(_:uniquingKeysWith:)(uint64_t *a1, void (*a2)(_OWORD *__return_ptr, id *, _OWORD *), uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;

  v6 = *a1;
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  *v3 = 0x8000000000000000;
  sub_244863288(v6, (uint64_t)sub_244863248, 0, isUniquelyReferenced_nonNull_native, a2, a3);
  *v3 = v9;
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall PropertyList.confidentlyMerge(_:)(PreviewsFoundationOS::PropertyList a1)
{
  uint64_t *v1;
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;

  v2 = *(_QWORD *)a1.serializableDictionary._rawValue;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4 = *v1;
  *v1 = 0x8000000000000000;
  sub_244863EDC(v2, (uint64_t)sub_244863248, 0, isUniquelyReferenced_nonNull_native, &v4);
  *v1 = v4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_2448556FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_BYTE *, uint64_t (*)(uint64_t, uint64_t), uint64_t *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _BYTE v39[32];
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v35 = a5;
  v36 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v38 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v34 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v32 - v13;
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v32 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v37 = (char *)&v32 - v18;
  v19 = *v5;
  v20 = swift_conformsToProtocol2();
  if (v20)
    v21 = v20;
  else
    v21 = 0;
  if (v20)
    v22 = AssociatedTypeWitness;
  else
    v22 = 0;
  if (v22)
  {
    v33 = a4;
    sub_2447CE01C(a2, (uint64_t)&v40);
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = v19;
    sub_2447F3530(&v40, v23 + 24);
    v24 = sub_2447C92C4(a1, (uint64_t)v39);
    MEMORY[0x24BDAC7A8](v24);
    *(&v32 - 2) = (uint64_t)sub_2448113A8;
    *(&v32 - 1) = v23;
    v25 = *(void (**)(_BYTE *, uint64_t (*)(uint64_t, uint64_t), uint64_t *, uint64_t, uint64_t))(v21 + 16);
    v41 = v22;
    v42 = v21;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v40);
    swift_bridgeObjectRetain();
    v26 = v43;
    v25(v39, sub_2448113B4, &v32 - 4, v22, v21);
    swift_release();
    if (v26)
      return __swift_deallocate_boxed_opaque_existential_1((uint64_t)&v40);
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738C598);
    swift_dynamicCast();
    v30 = v37;
    v29 = v38;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v37, v17, AssociatedTypeWitness);
    a4 = v33;
  }
  else
  {
    *(_QWORD *)&v40 = v19;
    v28 = v43;
    result = sub_244855A30(a1, a2, AssociatedTypeWitness, (uint64_t)v14);
    if (v28)
      return result;
    v30 = v37;
    v29 = v38;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v37, v14, AssociatedTypeWitness);
  }
  v31 = v34;
  (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v34, v30, AssociatedTypeWitness);
  (*(void (**)(char *))(a4 + 32))(v31);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v30, AssociatedTypeWitness);
}

uint64_t sub_2448559BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  v8 = a5 + 48;
  v9 = a5 + 80;
  *(_QWORD *)a5 = a3;
  sub_2447CE01C(a4, a5 + 8);
  sub_2447C92C4(a1, v8);
  sub_2447C92C4(a2, v9);
  *(_BYTE *)(a5 + 112) = 2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_244855A30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void (*v15)(_BYTE *, uint64_t, uint64_t, uint64_t);
  _QWORD *v17;
  _QWORD *v18;
  _BYTE v19[32];
  uint64_t v20;

  v20 = a2;
  v8 = sub_2448EB508();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = &v19[-v10];
  v12 = *v4;
  sub_2447C92C4(a1, (uint64_t)v19);
  v13 = swift_dynamicCast();
  v14 = *(_QWORD *)(a3 - 8);
  v15 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if ((v13 & 1) != 0)
  {
    v15(v11, 0, 1, a3);
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v14 + 32))(a4, v11, a3);
  }
  else
  {
    v15(v11, 1, 1, a3);
    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
    sub_244811360();
    swift_allocError();
    v18 = v17;
    *v17 = v12;
    sub_2447CE01C(v20, (uint64_t)(v17 + 1));
    sub_2447C92C4(a1, (uint64_t)(v18 + 6));
    v18[13] = swift_getMetatypeMetadata();
    v18[10] = a3;
    *((_BYTE *)v18 + 112) = 1;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
}

uint64_t sub_244855BB8@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_244855BC4()
{
  uint64_t v0;

  swift_bridgeObjectRetain();
  v0 = sub_2448EA80C();
  swift_bridgeObjectRelease();
  return v0;
}

void sub_244855C28()
{
  uint64_t v0;
  _BYTE v1[120];

  sub_244864CC0(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_244855C6C()
{
  uint64_t v0;
  _BYTE v2[40];
  uint64_t v3;
  unint64_t v4;
  __int128 v5;

  sub_2447F3530(&v5, (uint64_t)v2);
  v3 = 0;
  v4 = 0xE000000000000000;
  sub_2448EB79C();
  sub_2448EABC0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738ECB0);
  sub_2448EB91C();
  sub_2448EABC0();
  sub_2448EA80C();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v0 = v3;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  return v0;
}

uint64_t sub_244856148@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, _QWORD *)@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  _QWORD v8[6];

  sub_2447C92C4(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738C400);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v6 = v8[5];
    result = __swift_destroy_boxed_opaque_existential_1(a1);
    *a3 = v6;
  }
  else
  {
    v8[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_25738ECC8);
    v8[0] = &type metadata for PropertyList;
    a2(a1, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    swift_willThrow();
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return result;
}

uint64_t sub_244856224@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  a1[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_25738C400);
  *a1 = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_24485625C@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, _QWORD *)@<X1>, _QWORD *a3@<X8>)
{
  return sub_244856148(a1, a2, a3);
}

uint64_t sub_244856270@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[6];

  v10[5] = a1;
  v10[2] = a2;
  v10[3] = a3;
  v5 = sub_2448EAEE4();
  v6 = MEMORY[0x24951AC70](MEMORY[0x24BEE12E0], v5);
  v8 = sub_2447D31DC((void (*)(char *, char *))sub_244864DA8, (uint64_t)v10, v5, (char *)(MEMORY[0x24BEE4AD8] + 8), MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
  result = __swift_instantiateConcreteTypeFromMangledName(&qword_25738ECB8);
  a4[3] = result;
  *a4 = v8;
  return result;
}

uint64_t sub_244856314@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t *boxed_opaque_existential_1;
  __int128 v13[2];
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  MEMORY[0x24BDAC7A8](a1);
  v8 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v8((char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738C598);
  if ((swift_dynamicCast() & 1) != 0)
  {
    sub_2447F3530(v13, (uint64_t)v15);
    v9 = v16;
    v10 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    v14 = 0;
    memset(v13, 0, sizeof(v13));
    sub_2447BD180((uint64_t)v13, &qword_25738C5C8);
    a3[3] = a2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
    return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))v8)(boxed_opaque_existential_1, a1, a2);
  }
}

uint64_t sub_244856434(uint64_t a1, void (*a2)(uint64_t, _QWORD *), uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v16[6];
  _QWORD v17[2];
  _QWORD v18[4];
  uint64_t v19;

  sub_2447C92C4(a1, (uint64_t)v18);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738ECB8);
  v11 = swift_dynamicCast();
  if ((v11 & 1) != 0)
  {
    v17[1] = v17;
    v18[0] = v19;
    MEMORY[0x24BDAC7A8](v11);
    v16[2] = a4;
    v16[3] = a5;
    v16[4] = a2;
    v16[5] = a3;
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0A8);
    v13 = sub_244864D5C();
    v14 = sub_2447D31DC((void (*)(char *, char *))sub_244864D3C, (uint64_t)v16, v10, a4, v12, v13, MEMORY[0x24BEE3F20], (uint64_t)&v19);
    __swift_destroy_boxed_opaque_existential_1(a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = sub_2448EAEE4();
    v18[3] = swift_getMetatypeMetadata();
    v18[0] = v14;
    a2(a1, v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return v14;
}

uint64_t sub_2448565C4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_BYTE *, uint64_t (*)(_QWORD, _QWORD), uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t (*v22)(uint64_t, uint64_t *);
  char v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t (*v29)(uint64_t, uint64_t *);
  uint64_t v30;
  _BYTE v31[32];
  uint64_t v32[3];
  uint64_t MetatypeMetadata;
  uint64_t v34;
  uint64_t v35;

  v28 = a5;
  v29 = a2;
  v7 = v6;
  v30 = a3;
  v35 = a1;
  v27 = a6;
  v9 = sub_2448EB508();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v26 - v12;
  v14 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_conformsToProtocol2();
  if (v17)
    v18 = v17;
  else
    v18 = 0;
  if (v17)
    v19 = a4;
  else
    v19 = 0;
  if (v19)
  {
    sub_2447C92C4(v35, (uint64_t)v31);
    v20 = *(void (**)(_BYTE *, uint64_t (*)(_QWORD, _QWORD), uint64_t, uint64_t, uint64_t))(v18 + 16);
    MetatypeMetadata = v19;
    v34 = v18;
    __swift_allocate_boxed_opaque_existential_1(v32);
    v20(v31, (uint64_t (*)(_QWORD, _QWORD))v29, v30, v19, v18);
    if (!v6)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738C598);
      return swift_dynamicCast();
    }
    result = __swift_deallocate_boxed_opaque_existential_1((uint64_t)v32);
  }
  else
  {
    v22 = v29;
    sub_2447C92C4(v35, (uint64_t)v32);
    v23 = swift_dynamicCast();
    v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    if ((v23 & 1) != 0)
    {
      v24(v13, 0, 1, a4);
      v25 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
      v25(v16, v13, a4);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v25)(v27, v16, a4);
    }
    v24(v13, 1, 1, a4);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    MetatypeMetadata = swift_getMetatypeMetadata();
    v32[0] = a4;
    v7 = v22(v35, v32);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
    result = swift_willThrow();
  }
  *v28 = v7;
  return result;
}

uint64_t sub_2448567EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;

  return sub_244856270(*v3, *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8), a3);
}

uint64_t sub_244856800@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, _QWORD *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t result;

  result = sub_244856434(a1, a2, a3, *(char **)(a4 + 16), *(_QWORD *)(a5 - 8));
  if (!v6)
    *a6 = result;
  return result;
}

uint64_t sub_244856830@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_2448EA89C();
  result = sub_2448EA8B4();
  a1[3] = result;
  *a1 = v2;
  return result;
}

uint64_t sub_2448568CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t *boxed_opaque_existential_1;
  __int128 v13[2];
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  MEMORY[0x24BDAC7A8](a1);
  v8 = *(void (**)(char *, uint64_t))(v7 + 16);
  v8((char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738C598);
  if ((swift_dynamicCast() & 1) != 0)
  {
    sub_2447F3530(v13, (uint64_t)v15);
    v9 = v16;
    v10 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    v14 = 0;
    memset(v13, 0, sizeof(v13));
    sub_2447BD180((uint64_t)v13, &qword_25738C5C8);
    a3[3] = a2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
    return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))v8)(boxed_opaque_existential_1, a1, a2);
  }
}

void (*sub_2448569E8(uint64_t a1, void (*a2)(uint64_t, _QWORD *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))(uint64_t, _QWORD *)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  _QWORD v14[4];

  v13[1] = a8;
  sub_2447C92C4(a1, (uint64_t)v14);
  sub_2448EA8B4();
  v10 = swift_dynamicCast();
  if ((v10 & 1) != 0)
  {
    v13[0] = v13;
    MEMORY[0x24BDAC7A8](v10);
    a2 = (void (*)(uint64_t, _QWORD *))sub_2448EA89C();
    __swift_destroy_boxed_opaque_existential_1(a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = sub_2448EA8B4();
    v14[3] = swift_getMetatypeMetadata();
    v14[0] = v11;
    a2(a1, v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a2;
}

uint64_t sub_244856B6C@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_BYTE *, void (*)(_QWORD, _QWORD), uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  char v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[32];
  uint64_t v28[3];
  uint64_t MetatypeMetadata;
  uint64_t v30;
  uint64_t v31;

  v25 = a3;
  v31 = a1;
  v24 = a5;
  v7 = sub_2448EB508();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v24 - v10;
  v12 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_conformsToProtocol2();
  if (v15)
    v16 = v15;
  else
    v16 = 0;
  if (v15)
    v17 = a4;
  else
    v17 = 0;
  if (v17)
  {
    sub_2447C92C4(v31, (uint64_t)v27);
    v18 = *(void (**)(_BYTE *, void (*)(_QWORD, _QWORD), uint64_t, uint64_t, uint64_t))(v16 + 16);
    MetatypeMetadata = v17;
    v30 = v16;
    __swift_allocate_boxed_opaque_existential_1(v28);
    v19 = v26;
    v18(v27, (void (*)(_QWORD, _QWORD))a2, v25, v17, v16);
    if (v19)
    {
      return __swift_deallocate_boxed_opaque_existential_1((uint64_t)v28);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738C598);
      return swift_dynamicCast();
    }
  }
  else
  {
    sub_2447C92C4(v31, (uint64_t)v28);
    v21 = swift_dynamicCast();
    v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
    if ((v21 & 1) != 0)
    {
      v22(v11, 0, 1, a4);
      v23 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
      v23(v14, v11, a4);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v23)(v24, v14, a4);
    }
    else
    {
      v22(v11, 1, 1, a4);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      MetatypeMetadata = swift_getMetatypeMetadata();
      v28[0] = a4;
      a2(v31, v28);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
      return swift_willThrow();
    }
  }
}

uint64_t sub_244856D88@<X0>(uint64_t *a1@<X8>)
{
  return sub_244856830(a1);
}

void (*sub_244856DA0@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, _QWORD *)@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>))(uint64_t, _QWORD *)
{
  uint64_t v6;
  void (*result)(uint64_t, _QWORD *);

  result = sub_2448569E8(a1, a2, a3, a4[2], a4[3], *(_QWORD *)(a5 - 8), a4[4], *(_QWORD *)(a5 - 16));
  if (!v6)
    *a6 = result;
  return result;
}

uint64_t sub_244856DD8(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  int *v4;
  unint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    sub_2447CEE34(0, v2, 0);
    result = v9;
    v4 = (int *)(a1 + 32);
    v5 = *(_QWORD *)(v9 + 16);
    do
    {
      v7 = *v4++;
      v6 = v7;
      v10 = result;
      v8 = *(_QWORD *)(result + 24);
      if (v5 >= v8 >> 1)
      {
        sub_2447CEE34(v8 > 1, v5 + 1, 1);
        result = v10;
      }
      *(_QWORD *)(result + 16) = v5 + 1;
      *(_DWORD *)(result + 4 * v5++ + 32) = v6;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t Array<A>.propertyListValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char *AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];

  v8[5] = a1;
  v8[2] = a2;
  v8[3] = a3;
  v3 = sub_2448EAEE4();
  AssociatedTypeWitness = (char *)swift_getAssociatedTypeWitness();
  v5 = MEMORY[0x24951AC70](MEMORY[0x24BEE12E0], v3);
  return sub_2447D31DC((void (*)(char *, char *))sub_244864170, (uint64_t)v8, v3, AssociatedTypeWitness, MEMORY[0x24BEE4078], v5, MEMORY[0x24BEE40A8], v6);
}

uint64_t Array<A>.init(propertyListValue:)(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3;

  v3 = sub_244863B2C(a1, a2, a3);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_244856F7C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)v14 - v10;
  (*(void (**)(char *, uint64_t))(v12 + 16))((char *)v14 - v10, a1);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 32))(v11, a2, a3);
  if (v4)
    *a4 = v4;
  return result;
}

uint64_t sub_24485704C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t result;

  result = Array<A>.propertyListValue.getter(*v3, *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_244857080@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t result;

  v6 = sub_244863B2C(*a1, *(char **)(a2 + 16), *(_QWORD *)(a3 - 8));
  result = swift_bridgeObjectRelease();
  if (!v4)
    *a4 = v6;
  return result;
}

uint64_t Set<>.propertyListValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char *AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[8];

  v9[7] = a1;
  v9[2] = a2;
  v9[3] = a3;
  v9[4] = a4;
  v4 = sub_2448EB160();
  AssociatedTypeWitness = (char *)swift_getAssociatedTypeWitness();
  v6 = MEMORY[0x24951AC70](MEMORY[0x24BEE1728], v4);
  return sub_2447D31DC((void (*)(char *, char *))sub_244865278, (uint64_t)v9, v4, AssociatedTypeWitness, MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
}

uint64_t Set<>.init(propertyListValue:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _QWORD v12[5];
  uint64_t v13;
  uint64_t v14;

  v14 = a1;
  v12[2] = a2;
  v12[3] = a3;
  v12[4] = a4;
  swift_getAssociatedTypeWitness();
  v6 = sub_2448EAEE4();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0A8);
  v8 = MEMORY[0x24951AC70](MEMORY[0x24BEE12E0], v6);
  v9 = sub_2447D31DC((void (*)(char *, char *))sub_2448641A4, (uint64_t)v12, v6, a2, v7, v8, MEMORY[0x24BEE3F20], (uint64_t)&v13);
  result = swift_bridgeObjectRelease();
  if (!v4)
  {
    v14 = v9;
    v11 = sub_2448EAEE4();
    MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v11);
    return sub_2448EB16C();
  }
  return result;
}

uint64_t sub_2448572B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  _QWORD v15[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v12 = (char *)v15 - v11;
  (*(void (**)(char *, uint64_t))(v13 + 16))((char *)v15 - v11, a1);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 32))(v12, a2, a3);
  if (v5)
    *a5 = v5;
  return result;
}

uint64_t sub_244857380@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t result;

  result = Set<>.propertyListValue.getter(*v3, *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8), *(_QWORD *)(a1 + 24));
  *a3 = result;
  return result;
}

uint64_t sub_2448573B4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;

  result = Set<>.init(propertyListValue:)(*a1, *(char **)(a2 + 16), *(_QWORD *)(a3 - 8), *(_QWORD *)(a2 + 24));
  if (!v4)
    *a4 = result;
  return result;
}

uint64_t Dictionary<>.propertyListValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[10];
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = a1;
  v15 = a2;
  v16 = a3;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  v20 = a7;
  v13[2] = a2;
  v13[3] = a3;
  v13[4] = a4;
  v13[5] = a5;
  v13[6] = a6;
  v13[7] = a7;
  v13[8] = sub_2448641C4;
  v13[9] = &v14;
  v8 = sub_2448EA8B4();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = swift_getAssociatedTypeWitness();
  v11 = MEMORY[0x24951AC70](MEMORY[0x24BEE04D8], v8);
  return Sequence.keyedMap<A, B>(_:)((uint64_t)sub_24486422C, (uint64_t)v13, v8, AssociatedTypeWitness, v10, v11, a7);
}

uint64_t Dictionary<>.init(propertyListValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  v7 = sub_244863A10(a1, a2, a3, a4, a5, a6, a7);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_244857534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v22[0] = a4;
  v22[1] = a2;
  v23 = a9;
  v24 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v15 = (char *)v22 - v14;
  v16 = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v22 - v17;
  (*(void (**)(char *, uint64_t))(v19 + 16))((char *)v22 - v17, a3);
  v20 = v25;
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a7 + 32))(v18, a5, a7);
  if (!v20)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v13 + 16))(v15, v22[0], AssociatedTypeWitness);
    return (*(uint64_t (**)(char *))(v23 + 32))(v15);
  }
  return result;
}

uint64_t sub_2448576B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t TupleTypeMetadata2;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return a4(a1, a2, a3, a3 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t sub_244857790@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t result;

  result = Dictionary<>.propertyListValue.getter(*v3, a1[2], a1[3], *(_QWORD *)(a2 - 8), a1[4], *(_QWORD *)(a2 - 16), *(_QWORD *)(a2 - 24));
  *a3 = result;
  return result;
}

uint64_t sub_2448577CC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t result;

  v6 = sub_244863A10(*a1, a2[2], a2[3], *(_QWORD *)(a3 - 8), a2[4], *(_QWORD *)(a3 - 16), *(_QWORD *)(a3 - 24));
  result = swift_bridgeObjectRelease();
  if (!v4)
    *a4 = v6;
  return result;
}

uint64_t sub_24485782C(char *a1, char *a2)
{
  return sub_2448BDF48(*a1, *a2);
}

uint64_t sub_244857838()
{
  sub_2448EBD00();
  sub_2448EAB60();
  swift_bridgeObjectRelease();
  return sub_2448EBD3C();
}

uint64_t sub_244857890()
{
  sub_2448EAB60();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2448578BC()
{
  sub_2448EBD00();
  sub_2448EAB60();
  swift_bridgeObjectRelease();
  return sub_2448EBD3C();
}

uint64_t sub_244857910@<X0>(char *a1@<X8>)
{
  return sub_24480AE18(a1);
}

void sub_24485791C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 120;
  if (*v1)
    v2 = 121;
  *a1 = v2;
  a1[1] = 0xE100000000000000;
}

uint64_t sub_244857938()
{
  _BYTE *v0;

  if (*v0)
    return 121;
  else
    return 120;
}

uint64_t CGPoint.propertyListValue.getter@<X0>(uint64_t *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t inited;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_25738C570);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2448ECFE0;
  v7 = MEMORY[0x24BEE50B0];
  *(_QWORD *)(inited + 32) = 120;
  *(_QWORD *)(inited + 40) = 0xE100000000000000;
  *(_QWORD *)(inited + 72) = v7;
  *(_QWORD *)(inited + 80) = &protocol witness table for CGFloat;
  *(double *)(inited + 48) = a2;
  *(_QWORD *)(inited + 88) = 121;
  *(_QWORD *)(inited + 96) = 0xE100000000000000;
  *(_QWORD *)(inited + 128) = v7;
  *(_QWORD *)(inited + 136) = &protocol witness table for CGFloat;
  *(double *)(inited + 104) = a3;
  v8 = sub_2447C8898(inited);
  v9 = sub_2448546EC(v8);
  swift_bridgeObjectRelease();
  v10 = sub_24480FC04(v9);
  result = swift_bridgeObjectRelease();
  *a1 = v10;
  return result;
}

uint64_t static PropertyListBuilder.buildBlock<A, B, C, D>(_:_:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t TupleTypeMetadata2;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, char *, uint64_t);
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t inited;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  unint64_t v66;
  uint64_t v67;
  uint64_t v69;
  char *v70;
  void (*v71)(char *, uint64_t, uint64_t);
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  void (*v76)(char *, char *, uint64_t);
  void (*v77)(char *, char *, uint64_t);
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;

  v92 = a7;
  v73 = a6;
  v83 = a4;
  v82 = a3;
  v91 = a2;
  v80 = a11;
  v85 = a9;
  v88 = a8;
  v14 = sub_2448EB508();
  v89 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v86 = (char *)&v69 - v15;
  v16 = sub_2448EB508();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v74 = (char *)&v69 - v18;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v87 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v20 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v81 = (char *)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v69 - v22;
  v24 = swift_getTupleTypeMetadata2();
  v84 = *(_QWORD *)(v24 - 8);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v72 = (char *)&v69 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v69 - v28;
  v70 = (char *)&v69 + *(int *)(v27 + 48) - v28;
  v30 = v70;
  v75 = *(_QWORD *)(a5 - 8);
  v71 = *(void (**)(char *, uint64_t, uint64_t))(v75 + 16);
  v31 = a1;
  v32 = a5;
  v71((char *)&v69 - v28, v31, a5);
  v33 = v17;
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v35 = v30;
  v36 = v16;
  v34(v35, v91, v16);
  v91 = TupleTypeMetadata2;
  v37 = &v23[*(int *)(TupleTypeMetadata2 + 48)];
  v79 = *(_QWORD *)(v92 - 8);
  v38 = *(void (**)(char *, char *, uint64_t))(v79 + 16);
  v90 = v23;
  v77 = v38;
  ((void (*)(char *, char *))v38)(v23, v82);
  v39 = *(void (**)(char *, char *, uint64_t))(v89 + 16);
  v78 = v37;
  v40 = v83;
  v83 = v14;
  v41 = v14;
  v42 = v73;
  v76 = v39;
  v39(v37, (char *)v40, v41);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738C570);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2448ECFE0;
  v44 = (uint64_t *)(inited + 48);
  *(_QWORD *)(inited + 32) = (*(uint64_t (**)(uint64_t))(v85 + 8))(v32);
  *(_QWORD *)(inited + 40) = v45;
  v85 = v24;
  v46 = *(int *)(v24 + 48);
  v47 = v72;
  v48 = &v72[v46];
  v82 = v29;
  v49 = v29;
  v50 = v32;
  v51 = v36;
  v71(v72, (uint64_t)v49, v50);
  v52 = v74;
  v34(v48, (uint64_t)v70, v51);
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v52, v48, v51);
  v53 = *(_QWORD *)(v42 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v52, 1, v42) == 1)
  {
    (*(void (**)(char *, uint64_t))(v75 + 8))(v47, v50);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v52, v51);
    *(_QWORD *)(inited + 80) = 0;
    *(_OWORD *)v44 = 0u;
    *(_OWORD *)(inited + 64) = 0u;
  }
  else
  {
    v54 = *(void (**)(uint64_t, uint64_t))(a10 + 24);
    *(_QWORD *)(inited + 72) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 80) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v44);
    v54(v42, a10);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v52, v42);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v47, v50);
  }
  v55 = v90;
  v56 = v92;
  *(_QWORD *)(inited + 88) = (*(uint64_t (**)(uint64_t))(v80 + 8))(v92);
  *(_QWORD *)(inited + 96) = v57;
  v58 = v81;
  v59 = &v81[*(int *)(v91 + 48)];
  v77(v81, v55, v56);
  v60 = v83;
  v76(v59, v78, v83);
  v61 = v89;
  v62 = v86;
  (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v86, v59, v60);
  v63 = v88;
  v64 = *(_QWORD *)(v88 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v88) == 1)
  {
    (*(void (**)(char *, uint64_t))(v79 + 8))(v58, v56);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v60);
    *(_QWORD *)(inited + 136) = 0;
    *(_OWORD *)(inited + 104) = 0u;
    *(_OWORD *)(inited + 120) = 0u;
  }
  else
  {
    v65 = *(void (**)(uint64_t, uint64_t))(a12 + 24);
    *(_QWORD *)(inited + 128) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 136) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 104));
    v65(v63, a12);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v62, v63);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v58, v56);
  }
  v66 = sub_2447C8898(inited);
  v67 = sub_2448546EC(v66);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v87 + 8))(v90, v91);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v82, v85);
  return v67;
}

CGPoint __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CGPoint.init(propertyListValue:)(PreviewsFoundationOS::PropertyList propertyListValue)
{
  double v1;
  double v2;
  CGPoint result;

  v1 = sub_244863E28((uint64_t *)propertyListValue.serializableDictionary._rawValue, (uint64_t)&_s3KeyON_0, (uint64_t)&off_2515868A8);
  result.y = v2;
  result.x = v1;
  return result;
}

uint64_t sub_244858090@<X0>(uint64_t *a1@<X8>)
{
  return sub_2448583F0(120, 0xE100000000000000, 121, 0xE100000000000000, a1);
}

void sub_2448580A4(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_244858474(a1, (uint64_t)&_s3KeyON_0, (uint64_t)&off_2515868A8, a2);
}

uint64_t sub_2448580C8(char *a1, char *a2)
{
  return sub_2448BDFA8(*a1, *a2);
}

uint64_t sub_2448580D4()
{
  sub_2448EBD00();
  sub_2448EAB60();
  swift_bridgeObjectRelease();
  return sub_2448EBD3C();
}

uint64_t sub_24485814C()
{
  sub_2448EAB60();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2448581A0()
{
  sub_2448EBD00();
  sub_2448EAB60();
  swift_bridgeObjectRelease();
  return sub_2448EBD3C();
}

uint64_t sub_244858214@<X0>(char *a1@<X8>)
{
  return sub_24480AE18(a1);
}

void sub_244858220(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x6874646977;
  if (*v1)
    v2 = 0x746867696568;
  v3 = 0xE500000000000000;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_244858258()
{
  _BYTE *v0;

  if (*v0)
    return 0x746867696568;
  else
    return 0x6874646977;
}

uint64_t CGSize.propertyListValue.getter@<X0>(uint64_t *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = sub_2448582F8(0x6874646977, 0xE500000000000000, 0x746867696568, 0xE600000000000000, a2, a3);
  v5 = sub_24480FC04(v4);
  result = swift_bridgeObjectRelease();
  *a1 = v5;
  return result;
}

uint64_t sub_2448582F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  uint64_t inited;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  __swift_instantiateConcreteTypeFromMangledName(&qword_25738C570);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2448ECFE0;
  *(_QWORD *)(inited + 32) = a1;
  *(_QWORD *)(inited + 40) = a2;
  v13 = MEMORY[0x24BEE50B0];
  *(_QWORD *)(inited + 72) = MEMORY[0x24BEE50B0];
  *(_QWORD *)(inited + 80) = &protocol witness table for CGFloat;
  *(double *)(inited + 48) = a5;
  *(_QWORD *)(inited + 88) = a3;
  *(_QWORD *)(inited + 96) = a4;
  *(_QWORD *)(inited + 128) = v13;
  *(_QWORD *)(inited + 136) = &protocol witness table for CGFloat;
  *(double *)(inited + 104) = a6;
  v14 = sub_2447C8898(inited);
  v15 = sub_2448546EC(v14);
  swift_bridgeObjectRelease();
  return v15;
}

CGSize __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CGSize.init(propertyListValue:)(PreviewsFoundationOS::PropertyList propertyListValue)
{
  double v1;
  double v2;
  CGSize result;

  v1 = sub_244863E28((uint64_t *)propertyListValue.serializableDictionary._rawValue, (uint64_t)&_s3KeyON, (uint64_t)&off_251586898);
  result.height = v2;
  result.width = v1;
  return result;
}

uint64_t sub_2448583CC@<X0>(uint64_t *a1@<X8>)
{
  return sub_2448583F0(0x6874646977, 0xE500000000000000, 0x746867696568, 0xE600000000000000, a1);
}

uint64_t sub_2448583F0@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  double *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v7 = sub_2448582F8(a1, a2, a3, a4, *v5, v5[1]);
  v8 = sub_24480FC04(v7);
  result = swift_bridgeObjectRelease();
  *a5 = v8;
  return result;
}

void sub_244858450(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_244858474(a1, (uint64_t)&_s3KeyON, (uint64_t)&off_251586898, a2);
}

void sub_244858474(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v4;
  double v6;
  uint64_t v7;

  v6 = sub_244863E28(a1, a2, a3);
  if (!v4)
  {
    *(double *)a4 = v6;
    *(_QWORD *)(a4 + 8) = v7;
  }
}

uint64_t CGRect.propertyListValue.getter@<X0>(uint64_t *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  uint64_t inited;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_25738C570);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2448ECFE0;
  v11 = MEMORY[0x24BEE50B0];
  *(_QWORD *)(inited + 32) = 120;
  *(_QWORD *)(inited + 40) = 0xE100000000000000;
  *(_QWORD *)(inited + 72) = v11;
  *(_QWORD *)(inited + 80) = &protocol witness table for CGFloat;
  *(double *)(inited + 48) = a2;
  *(_QWORD *)(inited + 88) = 121;
  *(_QWORD *)(inited + 96) = 0xE100000000000000;
  *(_QWORD *)(inited + 128) = v11;
  *(_QWORD *)(inited + 136) = &protocol witness table for CGFloat;
  *(double *)(inited + 104) = a3;
  v12 = sub_2447C8898(inited);
  v13 = sub_2448546EC(v12);
  swift_bridgeObjectRelease();
  v14 = sub_24480FC04(v13);
  swift_bridgeObjectRelease();
  v15 = sub_2448582F8(0x6874646977, 0xE500000000000000, 0x746867696568, 0xE600000000000000, a4, a5);
  sub_24480FC04(v15);
  swift_bridgeObjectRelease();
  swift_retain();
  v16 = swift_retain();
  v17 = sub_24486397C(v16, v14);
  swift_release();
  result = swift_release();
  *a1 = v17;
  return result;
}

__C::CGRect __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CGRect.init(propertyListValue:)(PreviewsFoundationOS::PropertyList propertyListValue)
{
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  double v5;
  __C::CGRect result;

  v2 = sub_244863CC8((uint64_t *)propertyListValue.serializableDictionary._rawValue);
  if (v1)
  {
    v3 = v2;
    v4 = v2;
    v5 = v2;
  }
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

uint64_t sub_24485861C@<X0>(uint64_t *a1@<X8>)
{
  double *v1;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v3 = v1[2];
  v4 = v1[3];
  v5 = sub_2448582F8(120, 0xE100000000000000, 121, 0xE100000000000000, *v1, v1[1]);
  v6 = sub_24480FC04(v5);
  swift_bridgeObjectRelease();
  v7 = sub_2448582F8(0x6874646977, 0xE500000000000000, 0x746867696568, 0xE600000000000000, v3, v4);
  sub_24480FC04(v7);
  swift_bridgeObjectRelease();
  swift_retain();
  v8 = swift_retain();
  v9 = sub_24486397C(v8, v6);
  swift_release();
  result = swift_release();
  *a1 = v9;
  return result;
}

void sub_244858704(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_244863CC8(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_QWORD *)(a2 + 24) = v7;
  }
}

uint64_t sub_244858730()
{
  sub_2448EBD00();
  sub_2448EAB60();
  return sub_2448EBD3C();
}

uint64_t sub_244858778()
{
  return sub_2448EAB60();
}

uint64_t sub_244858788()
{
  sub_2448EBD00();
  sub_2448EAB60();
  return sub_2448EBD3C();
}

uint64_t sub_2448587CC@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_2448EBA84();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_24485881C(_QWORD *a1@<X8>)
{
  *a1 = 7102838;
  a1[1] = 0xE300000000000000;
}

uint64_t sub_244858830()
{
  return 7102838;
}

uint64_t audit_token_t.propertyListValue.getter@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  int v5;
  int v6;
  int v7;
  int v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;

  v5 = a4;
  v6 = a3;
  v7 = a2;
  v8 = a1;
  v10 = HIDWORD(a1);
  v11 = HIDWORD(a2);
  v12 = HIDWORD(a3);
  v13 = HIDWORD(a4);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A4B8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2448F3430;
  *(_DWORD *)(inited + 32) = v8;
  *(_DWORD *)(inited + 36) = v10;
  *(_DWORD *)(inited + 40) = v7;
  *(_DWORD *)(inited + 44) = v11;
  *(_DWORD *)(inited + 48) = v6;
  *(_DWORD *)(inited + 52) = v12;
  *(_DWORD *)(inited + 56) = v5;
  *(_DWORD *)(inited + 60) = v13;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738E8A0);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_2448ECF10;
  *(_QWORD *)(v15 + 32) = 7102838;
  *(_QWORD *)(v15 + 40) = 0xE300000000000000;
  *(_QWORD *)(v15 + 48) = sub_244856DD8(inited);
  v16 = sub_2447C89D8(v15);
  v17 = sub_244854AA8(v16);
  swift_bridgeObjectRelease();
  v18 = sub_244854DA4(v17);
  swift_bridgeObjectRelease();
  v19 = sub_24480FC04(v18);
  swift_bridgeObjectRelease();
  result = swift_setDeallocating();
  *a5 = v19;
  return result;
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> audit_token_t.init(propertyListValue:)(audit_token_t *__return_ptr retstr, PreviewsFoundationOS::PropertyList propertyListValue)
{
  sub_244863BF8((uint64_t *)propertyListValue.serializableDictionary._rawValue);
}

uint64_t sub_244858994@<X0>(uint64_t *a1@<X8>)
{
  unint64_t *v1;

  return audit_token_t.propertyListValue.getter(*v1, v1[1], v1[2], v1[3], a1);
}

uint64_t sub_2448589A0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_244863BF8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

unint64_t sub_2448589E4()
{
  uint64_t v0;

  sub_2448EB79C();
  swift_bridgeObjectRelease();
  v0 = swift_bridgeObjectRetain();
  MEMORY[0x2495195D8](v0, MEMORY[0x24BEE44F0]);
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000027;
}

unint64_t sub_244858A7C()
{
  return sub_2448589E4();
}

uint64_t UUID.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738E8A8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2448EA50C();
  v9 = sub_2448EA548();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_2447BD180((uint64_t)v8, &qword_25738E8A8);
    sub_24486429C();
    swift_allocError();
    *v11 = a1;
    v11[1] = a2;
    return swift_willThrow();
  }
  else
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v8, v9);
  }
}

uint64_t sub_244858BA0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = _s10Foundation4UUIDV08PreviewsA2OSE17propertyListValueSSvg_0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_244858BC4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738E8A8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v9 = a1[1];
  sub_2448EA50C();
  v11 = *(_QWORD *)(a2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, a2) == 1)
  {
    sub_2447BD180((uint64_t)v8, &qword_25738E8A8);
    sub_24486429C();
    swift_allocError();
    *v12 = v10;
    v12[1] = v9;
    return swift_willThrow();
  }
  else
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a3, v8, a2);
  }
}

unint64_t sub_244858CD4()
{
  sub_2448EB79C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  return 0xD000000000000015;
}

unint64_t sub_244858D60()
{
  return sub_244858CD4();
}

uint64_t sub_244858D68()
{
  uint64_t *v0;

  return sub_244850C58(*v0, v0[1]);
}

uint64_t static PropertyListBuilder.buildBlock<A, B, C, D, E, F, G, H>(_:_:_:_:)(char *a1, uint64_t a2, void (*a3)(char *, char *, uint64_t), char *a4, void (*a5)(void), uint64_t a6, char *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t *v55;
  char *v56;
  char *v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  void (*v60)(char *, char *, uint64_t *);
  void (*v61)(char *, char *, uint64_t);
  char *v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t inited;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  void (*v75)(uint64_t, uint64_t);
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t);
  uint64_t v89;
  char *v90;
  uint64_t *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t);
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  void (*v110)(uint64_t, uint64_t);
  unint64_t v111;
  uint64_t v112;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  void (*v118)(char *, uint64_t, uint64_t);
  void (*v119)(char *, char *, uint64_t);
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  void (*v125)(char *, char *, uint64_t);
  void (*v126)(char *, void (*)(char *, char *, uint64_t));
  char *v127;
  uint64_t v128;
  void (*v129)(char *, char *, uint64_t);
  void (*v130)(char *, char *, uint64_t *);
  char *v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(char *, char *, uint64_t);
  void (*v135)(void);
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  char *v168;
  uint64_t TupleTypeMetadata2;

  v146 = a8;
  v135 = a5;
  v136 = a7;
  v139 = a6;
  v160 = a2;
  v161 = a4;
  v134 = a3;
  v159 = a1;
  v141 = a21;
  v133 = a19;
  v164 = a15;
  v166 = a13;
  v165 = a11;
  v123 = a10;
  v143 = a17;
  v152 = a16;
  v24 = sub_2448EB508();
  v162 = *(_QWORD *)(v24 - 8);
  v163 = v24;
  MEMORY[0x24BDAC7A8](v24);
  v151 = (char *)&v114 - v25;
  v144 = a14;
  v26 = sub_2448EB508();
  v157 = *(_QWORD *)(v26 - 8);
  v158 = v26;
  MEMORY[0x24BDAC7A8](v26);
  v142 = (char *)&v114 - v27;
  v138 = a12;
  v28 = sub_2448EB508();
  v155 = *(_QWORD *)(v28 - 8);
  v156 = v28;
  MEMORY[0x24BDAC7A8](v28);
  v137 = (char *)&v114 - v29;
  v30 = sub_2448EB508();
  v154 = *(_QWORD *)(v30 - 8);
  v31 = v30;
  MEMORY[0x24BDAC7A8](v30);
  v121 = (char *)&v114 - v32;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v150 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v33 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v147 = (char *)&v114 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v33);
  v168 = (char *)&v114 - v35;
  v167 = swift_getTupleTypeMetadata2();
  v149 = *(_QWORD *)(v167 - 8);
  v36 = MEMORY[0x24BDAC7A8](v167);
  v140 = (char *)&v114 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v36);
  v39 = (char *)&v114 - v38;
  v40 = swift_getTupleTypeMetadata2();
  v148 = *(_QWORD *)(v40 - 8);
  v41 = MEMORY[0x24BDAC7A8](v40);
  v153 = (char *)&v114 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v41);
  v44 = (char *)&v114 - v43;
  v45 = v31;
  v116 = v31;
  v46 = swift_getTupleTypeMetadata2();
  v145 = *(_QWORD *)(v46 - 8);
  v47 = MEMORY[0x24BDAC7A8](v46);
  v49 = (char *)&v114 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = MEMORY[0x24BDAC7A8](v47);
  v52 = (char *)&v114 - v51;
  v53 = (char *)&v114 + *(int *)(v50 + 48) - v51;
  v115 = a9;
  v122 = *(_QWORD *)(a9 - 8);
  v119 = *(void (**)(char *, char *, uint64_t))(v122 + 16);
  v120 = v53;
  v119((char *)&v114 - v51, v159, a9);
  v118 = *(void (**)(char *, uint64_t, uint64_t))(v154 + 16);
  v118(v53, v160, v45);
  v159 = v44;
  v160 = v40;
  v54 = &v44[*(int *)(v40 + 48)];
  v55 = v166;
  v128 = *(_QWORD *)(v165 - 8);
  v56 = v44;
  v57 = v121;
  v126 = *(void (**)(char *, void (*)(char *, char *, uint64_t)))(v128 + 16);
  v126(v56, v134);
  v58 = *(void (**)(char *, char *, uint64_t))(v155 + 16);
  v127 = v54;
  v125 = v58;
  v58(v54, v161, v156);
  v59 = &v39[*(int *)(v167 + 48)];
  v132 = *(v55 - 1);
  v60 = *(void (**)(char *, char *, uint64_t *))(v132 + 16);
  v161 = v39;
  v130 = v60;
  v60(v39, (char *)v135, v55);
  v61 = *(void (**)(char *, char *, uint64_t))(v157 + 16);
  v131 = v59;
  v129 = v61;
  v61(v59, (char *)v139, v158);
  v62 = &v168[*(int *)(TupleTypeMetadata2 + 48)];
  v139 = *(_QWORD *)(v164 - 8);
  v63 = v123;
  v135 = *(void (**)(void))(v139 + 16);
  v135();
  v64 = *(void (**)(char *, char *, uint64_t))(v162 + 16);
  v136 = v62;
  v134 = v64;
  v64(v62, (char *)v146, v163);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738C570);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2448EFC00;
  v117 = (uint64_t *)(inited + 48);
  v66 = v115;
  *(_QWORD *)(inited + 32) = (*((uint64_t (**)(uint64_t))v143 + 1))(v115);
  *(_QWORD *)(inited + 40) = v67;
  v146 = v46;
  v68 = *(int *)(v46 + 48);
  v69 = v154;
  v70 = &v49[v68];
  v124 = v49;
  v143 = v52;
  v71 = v52;
  v72 = v116;
  v119(v49, v71, v66);
  v118(v70, (uint64_t)v120, v72);
  (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v57, v70, v72);
  v73 = *(_QWORD *)(v63 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v57, 1, v63) == 1)
  {
    (*(void (**)(char *, uint64_t))(v122 + 8))(v124, v66);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v57, v72);
    v74 = v117;
    v117[4] = 0;
    *(_OWORD *)v74 = 0u;
    *((_OWORD *)v74 + 1) = 0u;
  }
  else
  {
    v75 = *(void (**)(uint64_t, uint64_t))(a18 + 24);
    *(_QWORD *)(inited + 72) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 80) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v117);
    v75(v63, a18);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v57, v63);
    (*(void (**)(char *, uint64_t))(v122 + 8))(v124, v66);
  }
  v154 = a23;
  v76 = v159;
  v77 = v165;
  *(_QWORD *)(inited + 88) = (*(uint64_t (**)(uint64_t))(v133 + 8))(v165);
  *(_QWORD *)(inited + 96) = v78;
  v79 = v153;
  v80 = &v153[*(int *)(v160 + 48)];
  ((void (*)(char *, char *, uint64_t))v126)(v153, v76, v77);
  v81 = v156;
  v125(v80, v127, v156);
  v82 = v155;
  v83 = v137;
  (*(void (**)(char *, char *, uint64_t))(v155 + 32))(v137, v80, v81);
  v84 = v138;
  v85 = *(_QWORD *)(v138 - 8);
  v86 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v85 + 48))(v83, 1, v138);
  v87 = v158;
  if (v86 == 1)
  {
    (*(void (**)(char *, uint64_t))(v128 + 8))(v79, v165);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v83, v81);
    *(_QWORD *)(inited + 136) = 0;
    *(_OWORD *)(inited + 104) = 0u;
    *(_OWORD *)(inited + 120) = 0u;
  }
  else
  {
    v88 = *(void (**)(uint64_t, uint64_t))(a20 + 24);
    *(_QWORD *)(inited + 128) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 136) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 104));
    v88(v84, a20);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v83, v84);
    (*(void (**)(char *, uint64_t))(v128 + 8))(v153, v165);
  }
  v89 = v157;
  v90 = v161;
  v91 = v166;
  *(_QWORD *)(inited + 144) = (*(uint64_t (**)(uint64_t *))(v141 + 8))(v166);
  *(_QWORD *)(inited + 152) = v92;
  v93 = v140;
  v94 = &v140[*(int *)(v167 + 48)];
  v130(v140, v90, v91);
  v129(v94, v131, v87);
  v95 = v142;
  (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v142, v94, v87);
  v96 = v144;
  v97 = *(_QWORD *)(v144 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v144) == 1)
  {
    (*(void (**)(char *, uint64_t *))(v132 + 8))(v93, v166);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v95, v87);
    *(_QWORD *)(inited + 192) = 0;
    *(_OWORD *)(inited + 160) = 0u;
    *(_OWORD *)(inited + 176) = 0u;
  }
  else
  {
    v99 = *(void (**)(uint64_t, uint64_t))(a22 + 24);
    *(_QWORD *)(inited + 184) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 192) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 160));
    v99(v96, a22);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v95, v96);
    (*(void (**)(char *, uint64_t *))(v132 + 8))(v93, v166);
  }
  v98 = v164;
  v166 = (uint64_t *)(inited + 216);
  v100 = v168;
  *(_QWORD *)(inited + 200) = (*(uint64_t (**)(uint64_t))(v154 + 8))(v164);
  *(_QWORD *)(inited + 208) = v101;
  v102 = v147;
  v103 = &v147[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v135)(v147, v100, v98);
  v104 = v163;
  v134(v103, v136, v163);
  v105 = v162;
  v106 = v151;
  (*(void (**)(void))(v162 + 32))();
  v107 = v152;
  v108 = *(_QWORD *)(v152 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48))(v106, 1, v152) == 1)
  {
    (*(void (**)(char *, uint64_t))(v139 + 8))(v102, v98);
    (*(void (**)(char *, uint64_t))(v105 + 8))(v106, v104);
    v109 = v166;
    v166[4] = 0;
    *(_OWORD *)v109 = 0u;
    *((_OWORD *)v109 + 1) = 0u;
  }
  else
  {
    v110 = *(void (**)(uint64_t, uint64_t))(a24 + 24);
    *(_QWORD *)(inited + 240) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 248) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v166);
    v110(v107, a24);
    (*(void (**)(char *, uint64_t))(v108 + 8))(v106, v107);
    (*(void (**)(char *, uint64_t))(v139 + 8))(v102, v98);
  }
  v111 = sub_2447C8898(inited);
  v112 = sub_2448546EC(v111);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v150 + 8))(v168, TupleTypeMetadata2);
  (*(void (**)(char *, uint64_t))(v149 + 8))(v161, v167);
  (*(void (**)(char *, uint64_t))(v148 + 8))(v159, v160);
  (*(void (**)(char *, uint64_t))(v145 + 8))(v143, v146);
  return v112;
}

uint64_t static PropertyListBuilder.buildBlock<A, B, C, D, E, F, G, H, I, J>(_:_:_:_:_:)(char *a1, uint64_t a2, uint64_t a3, char *a4, void (*a5)(void), char *a6, uint64_t a7, char *a8, char *a9, void (*a10)(_QWORD, _QWORD, _QWORD), uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  void (*v69)(char *, char *, uint64_t);
  char *v70;
  void (*v71)(char *, char *, _QWORD *);
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  uint64_t v74;
  char *v75;
  void (*v76)(char *, char *, uint64_t);
  void (*v77)(char *, char *, uint64_t);
  char *v78;
  void (*v79)(_QWORD, _QWORD, _QWORD);
  void (*v80)(_QWORD, _QWORD, _QWORD);
  uint64_t inited;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t);
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, uint64_t);
  char *v103;
  _QWORD *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v136;
  void (*v137)(char *, uint64_t, uint64_t);
  void (*v138)(void);
  char *v139;
  uint64_t v140;
  uint64_t v141;
  void (*v142)(char *, char *, uint64_t);
  void (*v143)(char *, uint64_t);
  char *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  void (*v148)(char *, char *, uint64_t);
  void (*v149)(char *, char *, _QWORD *);
  char *v150;
  char *v151;
  uint64_t v152;
  void (*v153)(char *, char *, uint64_t);
  void (*v154)(char *, char *, uint64_t);
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  void (*v161)(_QWORD, _QWORD, _QWORD);
  void (*v162)(void);
  char *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t TupleTypeMetadata2;

  v169 = a8;
  v165 = a7;
  v193 = a6;
  v162 = a5;
  v190 = a2;
  v191 = a4;
  v159 = a3;
  v189 = a1;
  v164 = a25;
  v156 = a23;
  v196 = a19;
  v192 = a17;
  v198 = a15;
  v197 = a13;
  v145 = a12;
  v141 = a11;
  v172 = a21;
  v161 = a10;
  v163 = a9;
  v180 = a20;
  v30 = sub_2448EB508();
  v194 = *(_QWORD *)(v30 - 8);
  v195 = v30;
  MEMORY[0x24BDAC7A8](v30);
  v179 = (char *)&v136 - v31;
  v174 = a18;
  v32 = sub_2448EB508();
  v33 = *(_QWORD *)(v32 - 8);
  v187 = v32;
  v188 = v33;
  MEMORY[0x24BDAC7A8](v32);
  v170 = (char *)&v136 - v34;
  v168 = a16;
  v35 = sub_2448EB508();
  v36 = *(_QWORD *)(v35 - 8);
  v185 = v35;
  v186 = v36;
  MEMORY[0x24BDAC7A8](v35);
  v166 = (char *)&v136 - v37;
  v160 = a14;
  v38 = sub_2448EB508();
  v183 = *(_QWORD *)(v38 - 8);
  v184 = v38;
  MEMORY[0x24BDAC7A8](v38);
  v157 = (char *)&v136 - v39;
  v40 = sub_2448EB508();
  v182 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v146 = (char *)&v136 - v41;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v178 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v42 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v175 = (char *)&v136 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v42);
  v201 = (char *)&v136 - v44;
  v200 = swift_getTupleTypeMetadata2();
  v177 = *(_QWORD *)(v200 - 8);
  v45 = MEMORY[0x24BDAC7A8](v200);
  v167 = (char *)&v136 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v45);
  v48 = (char *)&v136 - v47;
  v199 = swift_getTupleTypeMetadata2();
  v176 = *(_QWORD *)(v199 - 8);
  v49 = MEMORY[0x24BDAC7A8](v199);
  v158 = (char *)&v136 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v49);
  v52 = (char *)&v136 - v51;
  v53 = swift_getTupleTypeMetadata2();
  v173 = *(_QWORD *)(v53 - 8);
  v54 = MEMORY[0x24BDAC7A8](v53);
  v151 = (char *)&v136 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v54);
  v57 = (char *)&v136 - v56;
  v58 = v141;
  v59 = v40;
  v136 = v40;
  v60 = swift_getTupleTypeMetadata2();
  v171 = *(_QWORD *)(v60 - 8);
  v61 = MEMORY[0x24BDAC7A8](v60);
  v181 = (char *)&v136 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = MEMORY[0x24BDAC7A8](v61);
  v65 = (char *)&v136 - v64;
  v67 = *(_QWORD *)(v58 - 8);
  v139 = (char *)&v136 + *(int *)(v63 + 48) - v64;
  v66 = v139;
  v140 = v67;
  v138 = *(void (**)(void))(v67 + 16);
  ((void (*)(char *, char *, uint64_t))v138)((char *)&v136 - v64, v189, v58);
  v137 = *(void (**)(char *, uint64_t, uint64_t))(v182 + 16);
  v137(v66, v190, v59);
  v189 = v57;
  v190 = v53;
  v68 = &v57[*(int *)(v53 + 48)];
  v147 = *(_QWORD *)(v197 - 8);
  v143 = *(void (**)(char *, uint64_t))(v147 + 16);
  v143(v57, v159);
  v69 = *(void (**)(char *, char *, uint64_t))(v183 + 16);
  v144 = v68;
  v142 = v69;
  v69(v68, v191, v184);
  v70 = &v52[*(int *)(v199 + 48)];
  v152 = *(v198 - 1);
  v71 = *(void (**)(char *, char *, _QWORD *))(v152 + 16);
  v191 = v52;
  v72 = v186;
  v149 = v71;
  ((void (*)(char *, void (*)(void)))v71)(v52, v162);
  v73 = *(void (**)(char *, char *, uint64_t))(v72 + 16);
  v150 = v70;
  v148 = v73;
  v73(v70, v193, v185);
  v74 = v58;
  v75 = &v48[*(int *)(v200 + 48)];
  v159 = *(_QWORD *)(v192 - 8);
  v76 = *(void (**)(char *, char *, uint64_t))(v159 + 16);
  v193 = v48;
  v154 = v76;
  ((void (*)(char *, uint64_t))v76)(v48, v165);
  v77 = *(void (**)(char *, char *, uint64_t))(v188 + 16);
  v155 = v75;
  v153 = v77;
  v77(v75, v169, v187);
  v78 = &v201[*(int *)(TupleTypeMetadata2 + 48)];
  v165 = *(_QWORD *)(v196 - 8);
  v162 = *(void (**)(void))(v165 + 16);
  v162();
  v79 = *(void (**)(_QWORD, _QWORD, _QWORD))(v194 + 16);
  v163 = v78;
  v80 = v161;
  v161 = v79;
  v79(v78, v80, v195);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738C570);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2448F3440;
  v82 = (uint64_t *)(inited + 48);
  *(_QWORD *)(inited + 32) = (*(uint64_t (**)(uint64_t))(v172 + 8))(v74);
  *(_QWORD *)(inited + 40) = v83;
  v172 = v60;
  v84 = *(int *)(v60 + 48);
  v85 = v145;
  v86 = &v181[v84];
  v169 = v65;
  v87 = v136;
  v138();
  v137(v86, (uint64_t)v139, v87);
  v88 = v182;
  v89 = v146;
  (*(void (**)(char *, char *, uint64_t))(v182 + 32))(v146, v86, v87);
  v90 = *(_QWORD *)(v85 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v89, 1, v85) == 1)
  {
    (*(void (**)(char *, uint64_t))(v140 + 8))(v181, v74);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v89, v87);
    *(_QWORD *)(inited + 80) = 0;
    *(_OWORD *)v82 = 0u;
    *(_OWORD *)(inited + 64) = 0u;
  }
  else
  {
    v91 = *(void (**)(uint64_t, uint64_t))(a22 + 24);
    *(_QWORD *)(inited + 72) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 80) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v82);
    v91(v85, a22);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v89, v85);
    (*(void (**)(char *, uint64_t))(v140 + 8))(v181, v74);
  }
  v182 = a27;
  v92 = v189;
  v93 = v197;
  *(_QWORD *)(inited + 88) = (*(uint64_t (**)(uint64_t))(v156 + 8))(v197);
  *(_QWORD *)(inited + 96) = v94;
  v95 = v151;
  v96 = &v151[*(int *)(v190 + 48)];
  ((void (*)(char *, char *, uint64_t))v143)(v151, v92, v93);
  v97 = v184;
  v142(v96, v144, v184);
  v98 = v183;
  v99 = v157;
  (*(void (**)(char *, char *, uint64_t))(v183 + 32))(v157, v96, v97);
  v100 = v160;
  v101 = *(_QWORD *)(v160 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v101 + 48))(v99, 1, v160) == 1)
  {
    (*(void (**)(char *, uint64_t))(v147 + 8))(v95, v93);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v99, v97);
    *(_QWORD *)(inited + 136) = 0;
    *(_OWORD *)(inited + 104) = 0u;
    *(_OWORD *)(inited + 120) = 0u;
  }
  else
  {
    v102 = *(void (**)(uint64_t, uint64_t))(a24 + 24);
    *(_QWORD *)(inited + 128) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 136) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 104));
    v102(v100, a24);
    (*(void (**)(char *, uint64_t))(v101 + 8))(v99, v100);
    (*(void (**)(char *, uint64_t))(v147 + 8))(v95, v197);
  }
  v197 = a29;
  v103 = v191;
  v104 = v198;
  *(_QWORD *)(inited + 144) = (*(uint64_t (**)(_QWORD *))(v164 + 8))(v198);
  *(_QWORD *)(inited + 152) = v105;
  v106 = v158;
  v107 = &v158[*(int *)(v199 + 48)];
  v149(v158, v103, v104);
  v108 = v185;
  v148(v107, v150, v185);
  v109 = v186;
  v110 = v166;
  (*(void (**)(char *, char *, uint64_t))(v186 + 32))(v166, v107, v108);
  v111 = v168;
  v112 = *(_QWORD *)(v168 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v110, 1, v168) == 1)
  {
    (*(void (**)(char *, _QWORD *))(v152 + 8))(v106, v104);
    (*(void (**)(char *, uint64_t))(v109 + 8))(v110, v108);
    *(_QWORD *)(inited + 192) = 0;
    *(_OWORD *)(inited + 160) = 0u;
    *(_OWORD *)(inited + 176) = 0u;
    v113 = v167;
    v114 = v187;
  }
  else
  {
    v186 = *(_QWORD *)(a26 + 24);
    *(_QWORD *)(inited + 184) = swift_getAssociatedTypeWitness();
    v114 = v187;
    *(_QWORD *)(inited + 192) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 160));
    ((void (*)(uint64_t, uint64_t))v186)(v111, a26);
    (*(void (**)(char *, uint64_t))(v112 + 8))(v110, v111);
    (*(void (**)(char *, _QWORD *))(v152 + 8))(v106, v198);
    v113 = v167;
  }
  v115 = v192;
  v116 = v193;
  *(_QWORD *)(inited + 200) = (*(uint64_t (**)(uint64_t))(v182 + 8))(v192);
  *(_QWORD *)(inited + 208) = v117;
  v118 = &v113[*(int *)(v200 + 48)];
  v154(v113, v116, v115);
  v153(v118, v155, v114);
  v119 = v188;
  v120 = v170;
  (*(void (**)(char *, char *, uint64_t))(v188 + 32))(v170, v118, v114);
  v121 = v174;
  v122 = *(_QWORD *)(v174 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v122 + 48))(v120, 1, v174) == 1)
  {
    (*(void (**)(char *, uint64_t))(v159 + 8))(v113, v115);
    (*(void (**)(char *, uint64_t))(v119 + 8))(v120, v114);
    *(_QWORD *)(inited + 248) = 0;
    *(_OWORD *)(inited + 216) = 0u;
    *(_OWORD *)(inited + 232) = 0u;
  }
  else
  {
    v198 = *(_QWORD **)(a28 + 24);
    *(_QWORD *)(inited + 240) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 248) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 216));
    ((void (*)(uint64_t, uint64_t))v198)(v121, a28);
    (*(void (**)(char *, uint64_t))(v122 + 8))(v120, v121);
    (*(void (**)(char *, uint64_t))(v159 + 8))(v113, v115);
  }
  v123 = v196;
  v124 = v201;
  *(_QWORD *)(inited + 256) = (*(uint64_t (**)(uint64_t))(v197 + 8))(v196);
  *(_QWORD *)(inited + 264) = v125;
  v126 = v175;
  v127 = &v175[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v162)(v175, v124, v123);
  v128 = v195;
  v161(v127, v163, v195);
  v129 = v194;
  v130 = v179;
  (*(void (**)(void))(v194 + 32))();
  v131 = v180;
  v132 = *(_QWORD *)(v180 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v132 + 48))(v130, 1, v180) == 1)
  {
    (*(void (**)(char *, uint64_t))(v165 + 8))(v126, v123);
    (*(void (**)(char *, uint64_t))(v129 + 8))(v130, v128);
    *(_QWORD *)(inited + 304) = 0;
    *(_OWORD *)(inited + 272) = 0u;
    *(_OWORD *)(inited + 288) = 0u;
  }
  else
  {
    v198 = *(_QWORD **)(a30 + 24);
    *(_QWORD *)(inited + 296) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 304) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 272));
    ((void (*)(uint64_t, uint64_t))v198)(v131, a30);
    (*(void (**)(char *, uint64_t))(v132 + 8))(v130, v131);
    (*(void (**)(char *, uint64_t))(v165 + 8))(v126, v123);
  }
  v133 = sub_2447C8898(inited);
  v134 = sub_2448546EC(v133);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v178 + 8))(v201, TupleTypeMetadata2);
  (*(void (**)(char *, uint64_t))(v177 + 8))(v193, v200);
  (*(void (**)(char *, uint64_t))(v176 + 8))(v191, v199);
  (*(void (**)(char *, uint64_t))(v173 + 8))(v189, v190);
  (*(void (**)(char *, uint64_t))(v171 + 8))(v169, v172);
  return v134;
}

uint64_t static PropertyListBuilder.buildBlock<A, B, C, D, E, F, G, H, I, J, K, L>(_:_:_:_:_:_:)(char *a1, uint64_t a2, char *a3, uint64_t a4, void (*a5)(void), uint64_t a6, void (*a7)(void), uint64_t a8, char *a9, void (*a10)(_QWORD, _QWORD, _QWORD), char *a11, void (*a12)(_QWORD, _QWORD, _QWORD), uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t);
  char *v84;
  void (*v85)(char *, char *, uint64_t);
  char *v86;
  char *v87;
  void (*v88)(char *, char *, uint64_t);
  char *v89;
  void (*v90)(_QWORD, _QWORD, _QWORD);
  void (*v91)(_QWORD, _QWORD, _QWORD);
  char *v92;
  void (*v93)(_QWORD, _QWORD, _QWORD);
  void (*v94)(_QWORD, _QWORD, _QWORD);
  uint64_t inited;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  void (*v103)(uint64_t, uint64_t);
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t);
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  void (*v127)(uint64_t, uint64_t);
  _QWORD *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  void (*v137)(uint64_t, uint64_t);
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  void (*v149)(uint64_t, uint64_t);
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t *v162;
  void (*v163)(char *, uint64_t, uint64_t);
  void (*v164)(void);
  char *v165;
  uint64_t v166;
  char *v167;
  void (*v168)(char *, char *, uint64_t);
  void (*v169)(char *, char *, uint64_t);
  char *v170;
  uint64_t v171;
  uint64_t v172;
  void (*v173)(char *, char *, uint64_t);
  void (*v174)(char *, void (*)(void));
  char *v175;
  char *v176;
  uint64_t v177;
  void (*v178)(char *, char *, uint64_t);
  void (*v179)(void);
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  void (*v184)(_QWORD, _QWORD, _QWORD);
  void (*v185)(void);
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  void (*v191)(_QWORD, _QWORD, _QWORD);
  void (*v192)(void);
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  char *v211;
  char *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  char *v238;
  uint64_t TupleTypeMetadata2;
  uint64_t v240;
  _QWORD *v241;

  v196 = a8;
  v192 = a7;
  v188 = a6;
  v185 = a5;
  v225 = a3;
  v226 = a4;
  v223 = a1;
  v224 = a2;
  v189 = a29;
  v182 = a27;
  v229 = a23;
  v233 = a21;
  v241 = a19;
  v240 = a17;
  v231 = a15;
  v171 = a14;
  v214 = a13;
  v199 = a25;
  v191 = a12;
  v193 = a11;
  v184 = a10;
  v186 = a9;
  v210 = a24;
  v36 = sub_2448EB508();
  v227 = *(_QWORD *)(v36 - 8);
  v228 = v36;
  MEMORY[0x24BDAC7A8](v36);
  v209 = (char *)&v162 - v37;
  v206 = a22;
  v38 = sub_2448EB508();
  v39 = *(_QWORD *)(v38 - 8);
  v232 = v38;
  v221 = v39;
  MEMORY[0x24BDAC7A8](v38);
  v202 = (char *)&v162 - v40;
  v198 = a20;
  v41 = sub_2448EB508();
  v42 = *(_QWORD *)(v41 - 8);
  v219 = v41;
  v220 = v42;
  MEMORY[0x24BDAC7A8](v41);
  v197 = (char *)&v162 - v43;
  v195 = a18;
  v44 = sub_2448EB508();
  v218 = *(_QWORD *)(v44 - 8);
  v230 = v44;
  MEMORY[0x24BDAC7A8](v44);
  v190 = (char *)&v162 - v45;
  v187 = a16;
  v46 = sub_2448EB508();
  v216 = *(_QWORD *)(v46 - 8);
  v217 = v46;
  MEMORY[0x24BDAC7A8](v46);
  v181 = (char *)&v162 - v47;
  v48 = sub_2448EB508();
  v215 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v167 = (char *)&v162 - v49;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v208 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v50 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v204 = (char *)&v162 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v50);
  v238 = (char *)&v162 - v52;
  v237 = swift_getTupleTypeMetadata2();
  v207 = *(_QWORD *)(v237 - 8);
  v53 = MEMORY[0x24BDAC7A8](v237);
  v212 = (char *)&v162 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v53);
  v236 = (char *)&v162 - v55;
  v235 = swift_getTupleTypeMetadata2();
  v205 = *(_QWORD *)(v235 - 8);
  v56 = MEMORY[0x24BDAC7A8](v235);
  v194 = (char *)&v162 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v56);
  v234 = (char *)&v162 - v58;
  v59 = swift_getTupleTypeMetadata2();
  v203 = *(_QWORD *)(v59 - 8);
  v60 = MEMORY[0x24BDAC7A8](v59);
  v211 = (char *)&v162 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v60);
  v63 = (char *)&v162 - v62;
  v64 = v231;
  v65 = swift_getTupleTypeMetadata2();
  v201 = *(_QWORD *)(v65 - 8);
  v66 = MEMORY[0x24BDAC7A8](v65);
  v176 = (char *)&v162 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v66);
  v69 = (char *)&v162 - v68;
  v70 = v214;
  v71 = swift_getTupleTypeMetadata2();
  v72 = *(_QWORD *)(v71 - 8);
  v222 = v71;
  v200 = v72;
  v73 = MEMORY[0x24BDAC7A8](v71);
  v213 = (char *)&v162 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = MEMORY[0x24BDAC7A8](v73);
  v77 = (char *)&v162 - v76;
  v79 = *(_QWORD *)(v70 - 8);
  v165 = (char *)&v162 + *(int *)(v75 + 48) - v76;
  v78 = v165;
  v166 = v79;
  v164 = *(void (**)(void))(v79 + 16);
  ((void (*)(char *, char *, uint64_t))v164)((char *)&v162 - v76, v223, v70);
  v163 = *(void (**)(char *, uint64_t, uint64_t))(v215 + 16);
  v80 = v48;
  v163(v78, v224, v48);
  v223 = v69;
  v224 = v65;
  v81 = &v69[*(int *)(v65 + 48)];
  v172 = *(_QWORD *)(v64 - 8);
  v82 = v218;
  v169 = *(void (**)(char *, char *, uint64_t))(v172 + 16);
  v169(v69, v225, v64);
  v83 = *(void (**)(char *, char *, uint64_t))(v216 + 16);
  v170 = v81;
  v168 = v83;
  v83(v81, (char *)v226, v217);
  v225 = v63;
  v226 = v59;
  v84 = &v63[*(int *)(v59 + 48)];
  v177 = *(_QWORD *)(v240 - 8);
  v174 = *(void (**)(char *, void (*)(void)))(v177 + 16);
  v174(v63, v185);
  v85 = *(void (**)(char *, char *, uint64_t))(v82 + 16);
  v175 = v84;
  v173 = v85;
  v85(v84, (char *)v188, v230);
  v86 = &v234[*(int *)(v235 + 48)];
  v183 = *(v241 - 1);
  v87 = v167;
  v179 = *(void (**)(void))(v183 + 16);
  v179();
  v88 = *(void (**)(char *, char *, uint64_t))(v220 + 16);
  v180 = v86;
  v178 = v88;
  v88(v86, (char *)v196, v219);
  v89 = &v236[*(int *)(v237 + 48)];
  v188 = *(_QWORD *)(v233 - 8);
  v185 = *(void (**)(void))(v188 + 16);
  v185();
  v90 = *(void (**)(_QWORD, _QWORD, _QWORD))(v221 + 16);
  v186 = v89;
  v91 = v184;
  v184 = v90;
  v90(v89, v91, v232);
  v92 = &v238[*(int *)(TupleTypeMetadata2 + 48)];
  v196 = *(_QWORD *)(v229 - 8);
  v192 = *(void (**)(void))(v196 + 16);
  v192();
  v93 = *(void (**)(_QWORD, _QWORD, _QWORD))(v227 + 16);
  v193 = v92;
  v94 = v191;
  v191 = v93;
  v93(v92, v94, v228);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738C570);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2448F3450;
  v162 = (uint64_t *)(inited + 48);
  v96 = v214;
  *(_QWORD *)(inited + 32) = (*((uint64_t (**)(uint64_t))v199 + 1))(v214);
  *(_QWORD *)(inited + 40) = v97;
  v98 = &v213[*(int *)(v222 + 48)];
  v199 = v77;
  v99 = v171;
  v164();
  v163(v98, (uint64_t)v165, v80);
  v100 = v215;
  (*(void (**)(char *, char *, uint64_t))(v215 + 32))(v87, v98, v80);
  v101 = *(_QWORD *)(v99 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v101 + 48))(v87, 1, v99) == 1)
  {
    (*(void (**)(char *, uint64_t))(v166 + 8))(v213, v96);
    (*(void (**)(char *, uint64_t))(v100 + 8))(v87, v80);
    v102 = v162;
    v162[4] = 0;
    *(_OWORD *)v102 = 0u;
    *((_OWORD *)v102 + 1) = 0u;
  }
  else
  {
    v103 = *(void (**)(uint64_t, uint64_t))(a26 + 24);
    *(_QWORD *)(inited + 72) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 80) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v162);
    v103(v99, a26);
    (*(void (**)(char *, uint64_t))(v101 + 8))(v87, v99);
    (*(void (**)(char *, uint64_t))(v166 + 8))(v213, v96);
  }
  v215 = a31;
  v104 = v223;
  v105 = v231;
  *(_QWORD *)(inited + 88) = (*(uint64_t (**)(uint64_t))(v182 + 8))(v231);
  *(_QWORD *)(inited + 96) = v106;
  v107 = v176;
  v108 = &v176[*(int *)(v224 + 48)];
  v169(v176, v104, v105);
  v109 = v217;
  v168(v108, v170, v217);
  v110 = v216;
  v111 = v181;
  (*(void (**)(char *, char *, uint64_t))(v216 + 32))(v181, v108, v109);
  v112 = v187;
  v113 = *(_QWORD *)(v187 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v111, 1, v187) == 1)
  {
    (*(void (**)(char *, uint64_t))(v172 + 8))(v107, v105);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v111, v109);
    *(_QWORD *)(inited + 136) = 0;
    *(_OWORD *)(inited + 104) = 0u;
    *(_OWORD *)(inited + 120) = 0u;
  }
  else
  {
    v114 = *(void (**)(uint64_t, uint64_t))(a28 + 24);
    *(_QWORD *)(inited + 128) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 136) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 104));
    v114(v112, a28);
    (*(void (**)(char *, uint64_t))(v113 + 8))(v111, v112);
    (*(void (**)(char *, uint64_t))(v172 + 8))(v107, v231);
  }
  v115 = v218;
  v116 = v211;
  v231 = a33;
  v117 = v225;
  v118 = v240;
  *(_QWORD *)(inited + 144) = (*(uint64_t (**)(uint64_t))(v189 + 8))(v240);
  *(_QWORD *)(inited + 152) = v119;
  v120 = &v116[*(int *)(v226 + 48)];
  ((void (*)(char *, char *, uint64_t))v174)(v116, v117, v118);
  v121 = v230;
  v173(v120, v175, v230);
  v122 = v190;
  (*(void (**)(char *, char *, uint64_t))(v115 + 32))(v190, v120, v121);
  v123 = v195;
  v124 = *(_QWORD *)(v195 - 8);
  v125 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v124 + 48))(v122, 1, v195);
  v126 = v219;
  if (v125 == 1)
  {
    (*(void (**)(char *, uint64_t))(v177 + 8))(v116, v118);
    (*(void (**)(char *, uint64_t))(v115 + 8))(v122, v230);
    *(_QWORD *)(inited + 192) = 0;
    *(_OWORD *)(inited + 160) = 0u;
    *(_OWORD *)(inited + 176) = 0u;
  }
  else
  {
    v127 = *(void (**)(uint64_t, uint64_t))(a30 + 24);
    *(_QWORD *)(inited + 184) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 192) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 160));
    v127(v123, a30);
    (*(void (**)(char *, uint64_t))(v124 + 8))(v122, v123);
    (*(void (**)(char *, uint64_t))(v177 + 8))(v211, v240);
  }
  v128 = v241;
  v129 = v220;
  v240 = a35;
  v130 = v234;
  *(_QWORD *)(inited + 200) = (*(uint64_t (**)(_QWORD *))(v215 + 8))(v241);
  *(_QWORD *)(inited + 208) = v131;
  v132 = v194;
  v133 = &v194[*(int *)(v235 + 48)];
  ((void (*)(char *, char *, _QWORD *))v179)(v194, v130, v128);
  v178(v133, v180, v126);
  v134 = v197;
  (*(void (**)(char *, char *, uint64_t))(v129 + 32))(v197, v133, v126);
  v135 = v198;
  v136 = *(_QWORD *)(v198 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v198) == 1)
  {
    (*(void (**)(char *, _QWORD *))(v183 + 8))(v132, v128);
    (*(void (**)(char *, uint64_t))(v129 + 8))(v134, v126);
    *(_QWORD *)(inited + 248) = 0;
    *(_OWORD *)(inited + 216) = 0u;
    *(_OWORD *)(inited + 232) = 0u;
  }
  else
  {
    v137 = *(void (**)(uint64_t, uint64_t))(a32 + 24);
    *(_QWORD *)(inited + 240) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 248) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 216));
    v137(v135, a32);
    (*(void (**)(char *, uint64_t))(v136 + 8))(v134, v135);
    (*(void (**)(char *, _QWORD *))(v183 + 8))(v132, v241);
  }
  v138 = v210;
  v139 = v212;
  v140 = v236;
  v141 = v233;
  *(_QWORD *)(inited + 256) = (*(uint64_t (**)(uint64_t))(v231 + 8))(v233);
  *(_QWORD *)(inited + 264) = v142;
  v143 = &v139[*(int *)(v237 + 48)];
  ((void (*)(char *, char *, uint64_t))v185)(v139, v140, v141);
  v144 = v232;
  v184(v143, v186, v232);
  v145 = v221;
  v146 = v202;
  (*(void (**)(char *, char *, uint64_t))(v221 + 32))(v202, v143, v144);
  v147 = v206;
  v148 = *(_QWORD *)(v206 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 48))(v146, 1, v206) == 1)
  {
    (*(void (**)(char *, uint64_t))(v188 + 8))(v139, v141);
    (*(void (**)(char *, uint64_t))(v145 + 8))(v146, v232);
    *(_QWORD *)(inited + 304) = 0;
    *(_OWORD *)(inited + 272) = 0u;
    *(_OWORD *)(inited + 288) = 0u;
  }
  else
  {
    v149 = *(void (**)(uint64_t, uint64_t))(a34 + 24);
    *(_QWORD *)(inited + 296) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 304) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 272));
    v149(v147, a34);
    (*(void (**)(char *, uint64_t))(v148 + 8))(v146, v147);
    (*(void (**)(char *, uint64_t))(v188 + 8))(v212, v233);
  }
  v150 = v229;
  v151 = v204;
  v152 = v238;
  *(_QWORD *)(inited + 312) = (*(uint64_t (**)(uint64_t))(v240 + 8))(v229);
  *(_QWORD *)(inited + 320) = v153;
  v154 = &v151[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v192)(v151, v152, v150);
  v155 = v228;
  v191(v154, v193, v228);
  v156 = v227;
  v157 = v209;
  (*(void (**)(void))(v227 + 32))();
  v158 = *(_QWORD *)(v138 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v158 + 48))(v157, 1, v138) == 1)
  {
    (*(void (**)(char *, uint64_t))(v196 + 8))(v151, v150);
    (*(void (**)(char *, uint64_t))(v156 + 8))(v157, v155);
    *(_QWORD *)(inited + 360) = 0;
    *(_OWORD *)(inited + 328) = 0u;
    *(_OWORD *)(inited + 344) = 0u;
  }
  else
  {
    v241 = *(_QWORD **)(a36 + 24);
    *(_QWORD *)(inited + 352) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 360) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 328));
    ((void (*)(uint64_t, uint64_t))v241)(v138, a36);
    (*(void (**)(char *, uint64_t))(v158 + 8))(v157, v138);
    (*(void (**)(char *, uint64_t))(v196 + 8))(v151, v150);
  }
  v159 = sub_2447C8898(inited);
  v160 = sub_2448546EC(v159);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v208 + 8))(v238, TupleTypeMetadata2);
  (*(void (**)(char *, uint64_t))(v207 + 8))(v236, v237);
  (*(void (**)(char *, uint64_t))(v205 + 8))(v234, v235);
  (*(void (**)(char *, uint64_t))(v203 + 8))(v225, v226);
  (*(void (**)(char *, uint64_t))(v201 + 8))(v223, v224);
  (*(void (**)(char *, uint64_t))(v200 + 8))(v199, v222);
  return v160;
}

uint64_t static PropertyListBuilder.buildBlock<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(_:_:_:_:_:_:_:)(char *a1, uint64_t a2, char *a3, char *a4, uint64_t a5, char *a6, uint64_t a7, void (*a8)(void), void (*a9)(char *, char *, uint64_t), void (*a10)(void), char *a11, uint64_t a12, char *a13, void (*a14)(_QWORD, _QWORD, _QWORD), uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t, uint64_t);
  void (*v89)(char *, char *, uint64_t);
  char *v90;
  void (*v91)(char *, char *, uint64_t);
  void (*v92)(char *, char *, uint64_t);
  char *v93;
  void (*v94)(char *, char *, uint64_t);
  void (*v95)(char *, char *, uint64_t);
  char *v96;
  void (*v97)(char *, char *, uint64_t);
  uint64_t v98;
  void (*v99)(char *, char *, uint64_t);
  char *v100;
  void (*v101)(char *, char *, uint64_t);
  char *v102;
  void (*v103)(char *, char *, uint64_t);
  char *v104;
  void (*v105)(_QWORD, _QWORD, _QWORD);
  void (*v106)(_QWORD, _QWORD, _QWORD);
  uint64_t inited;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t);
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(uint64_t, uint64_t);
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  void (*v152)(uint64_t, uint64_t);
  _QWORD *v153;
  char *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(uint64_t, uint64_t);
  char *v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void (*v174)(uint64_t, uint64_t);
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v188;
  void (*v189)(void);
  char *v190;
  uint64_t v191;
  void (*v192)(char *, char *, uint64_t);
  void (*v193)(char *, char *, uint64_t);
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  void (*v198)(char *, char *, uint64_t);
  void (*v199)(char *, char *, uint64_t);
  char *v200;
  char *v201;
  uint64_t v202;
  void (*v203)(char *, char *, uint64_t);
  void (*v204)(char *, char *, uint64_t);
  char *v205;
  char *v206;
  uint64_t v207;
  char *v208;
  void (*v209)(char *, char *, uint64_t);
  void (*v210)(void);
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  void (*v215)(char *, char *, uint64_t);
  void (*v216)(void);
  char *v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void (*v223)(_QWORD, _QWORD, _QWORD);
  void (*v224)(void);
  char *v225;
  char *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  char *v274;
  uint64_t v275;
  char *v276;
  uint64_t TupleTypeMetadata2;
  uint64_t v278;
  uint64_t v279;
  _QWORD *v280;

  v224 = a8;
  v221 = a7;
  v264 = a6;
  v213 = a5;
  v262 = a4;
  v211 = a3;
  v261 = a2;
  v260 = a1;
  v220 = a33;
  v212 = a31;
  v267 = a27;
  v268 = a25;
  v280 = a23;
  v279 = a21;
  v278 = a19;
  v253 = a17;
  v196 = a16;
  v248 = a15;
  v233 = a29;
  v223 = a14;
  v225 = a13;
  v228 = a12;
  v218 = a11;
  v216 = a10;
  v215 = a9;
  v245 = a28;
  v42 = sub_2448EB508();
  v265 = *(_QWORD *)(v42 - 8);
  v266 = v42;
  MEMORY[0x24BDAC7A8](v42);
  v244 = (char *)&v188 - v43;
  v242 = a26;
  v44 = sub_2448EB508();
  v251 = *(_QWORD *)(v44 - 8);
  v263 = v44;
  MEMORY[0x24BDAC7A8](v44);
  v237 = (char *)&v188 - v45;
  v232 = a24;
  v46 = sub_2448EB508();
  v257 = *(_QWORD *)(v46 - 8);
  v258 = v46;
  MEMORY[0x24BDAC7A8](v46);
  v229 = a22;
  v230 = (char *)&v188 - v47;
  v48 = sub_2448EB508();
  v255 = *(_QWORD *)(v48 - 8);
  v256 = v48;
  MEMORY[0x24BDAC7A8](v48);
  v226 = (char *)&v188 - v49;
  v222 = a20;
  v50 = sub_2448EB508();
  v252 = *(_QWORD *)(v50 - 8);
  v254 = v50;
  MEMORY[0x24BDAC7A8](v50);
  v219 = (char *)&v188 - v51;
  v214 = a18;
  v269 = sub_2448EB508();
  v250 = *(_QWORD *)(v269 - 8);
  MEMORY[0x24BDAC7A8](v269);
  v208 = (char *)&v188 - v52;
  v246 = sub_2448EB508();
  v249 = *(_QWORD *)(v246 - 8);
  MEMORY[0x24BDAC7A8](v246);
  v197 = (char *)&v188 - v53;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v243 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v54 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v239 = (char *)&v188 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v54);
  v276 = (char *)&v188 - v56;
  v275 = swift_getTupleTypeMetadata2();
  v241 = *(_QWORD *)(v275 - 8);
  v57 = MEMORY[0x24BDAC7A8](v275);
  v231 = (char *)&v188 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v57);
  v274 = (char *)&v188 - v59;
  v273 = swift_getTupleTypeMetadata2();
  v240 = *(_QWORD *)(v273 - 8);
  v60 = MEMORY[0x24BDAC7A8](v273);
  v227 = (char *)&v188 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v60);
  v272 = (char *)&v188 - v62;
  v271 = swift_getTupleTypeMetadata2();
  v238 = *(_QWORD *)(v271 - 8);
  v63 = MEMORY[0x24BDAC7A8](v271);
  v217 = (char *)&v188 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v63);
  v66 = (char *)&v188 - v65;
  v270 = swift_getTupleTypeMetadata2();
  v236 = *(_QWORD *)(v270 - 8);
  v67 = MEMORY[0x24BDAC7A8](v270);
  v206 = (char *)&v188 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v67);
  v70 = (char *)&v188 - v69;
  v71 = v253;
  v72 = swift_getTupleTypeMetadata2();
  v235 = *(_QWORD *)(v72 - 8);
  v73 = MEMORY[0x24BDAC7A8](v72);
  v201 = (char *)&v188 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v73);
  v76 = (char *)&v188 - v75;
  v77 = v248;
  v78 = v246;
  v79 = swift_getTupleTypeMetadata2();
  v80 = *(_QWORD *)(v79 - 8);
  v259 = v79;
  v234 = v80;
  v81 = MEMORY[0x24BDAC7A8](v79);
  v247 = (char *)&v188 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = MEMORY[0x24BDAC7A8](v81);
  v85 = (char *)&v188 - v84;
  v87 = *(_QWORD *)(v77 - 8);
  v190 = (char *)&v188 + *(int *)(v83 + 48) - v84;
  v86 = v190;
  v191 = v87;
  v189 = *(void (**)(void))(v87 + 16);
  ((void (*)(char *, char *, uint64_t))v189)((char *)&v188 - v84, v260, v77);
  v88 = *(void (**)(char *, uint64_t, uint64_t))(v249 + 16);
  v88(v86, v261, v78);
  v89 = (void (*)(char *, char *, uint64_t))v88;
  v261 = v72;
  v90 = &v76[*(int *)(v72 + 48)];
  v195 = *(_QWORD *)(v71 - 8);
  v91 = *(void (**)(char *, char *, uint64_t))(v195 + 16);
  v260 = v76;
  v193 = v91;
  v91(v76, v211, v71);
  v92 = *(void (**)(char *, char *, uint64_t))(v250 + 16);
  v194 = v90;
  v192 = v92;
  v92(v90, v262, v269);
  v93 = &v70[*(int *)(v270 + 48)];
  v202 = *(_QWORD *)(v278 - 8);
  v94 = *(void (**)(char *, char *, uint64_t))(v202 + 16);
  v262 = v70;
  v199 = v94;
  ((void (*)(char *, uint64_t))v94)(v70, v213);
  v95 = *(void (**)(char *, char *, uint64_t))(v252 + 16);
  v200 = v93;
  v198 = v95;
  v95(v93, v264, v254);
  v96 = &v66[*(int *)(v271 + 48)];
  v207 = *(_QWORD *)(v279 - 8);
  v97 = *(void (**)(char *, char *, uint64_t))(v207 + 16);
  v264 = v66;
  v98 = v255;
  v204 = v97;
  ((void (*)(char *, uint64_t))v97)(v66, v221);
  v99 = *(void (**)(char *, char *, uint64_t))(v98 + 16);
  v205 = v96;
  v203 = v99;
  v99(v96, (char *)v224, v256);
  v100 = &v272[*(int *)(v273 + 48)];
  v213 = *(v280 - 1);
  v210 = *(void (**)(void))(v213 + 16);
  v210();
  v101 = *(void (**)(char *, char *, uint64_t))(v257 + 16);
  v211 = v100;
  v209 = v101;
  v101(v100, (char *)v216, v258);
  v102 = &v274[*(int *)(v275 + 48)];
  v221 = *(_QWORD *)(v268 - 8);
  v216 = *(void (**)(void))(v221 + 16);
  v216();
  v103 = *(void (**)(char *, char *, uint64_t))(v251 + 16);
  v218 = v102;
  v215 = v103;
  v103(v102, (char *)v228, v263);
  v104 = &v276[*(int *)(TupleTypeMetadata2 + 48)];
  v228 = *(_QWORD *)(v267 - 8);
  v224 = *(void (**)(void))(v228 + 16);
  v224();
  v105 = *(void (**)(_QWORD, _QWORD, _QWORD))(v265 + 16);
  v225 = v104;
  v106 = v223;
  v223 = v105;
  v105(v104, v106, v266);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738C570);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2448F3460;
  v108 = (uint64_t *)(inited + 48);
  v109 = v248;
  *(_QWORD *)(inited + 32) = (*((uint64_t (**)(uint64_t))v233 + 1))(v248);
  *(_QWORD *)(inited + 40) = v110;
  v111 = v196;
  v112 = &v247[*(int *)(v259 + 48)];
  v233 = v85;
  v113 = v109;
  v189();
  v114 = v246;
  v89(v112, v190, v246);
  v115 = v249;
  v116 = v197;
  v117 = v114;
  (*(void (**)(char *, char *, uint64_t))(v249 + 32))(v197, v112, v114);
  v118 = *(_QWORD *)(v111 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v118 + 48))(v116, 1, v111) == 1)
  {
    (*(void (**)(char *, uint64_t))(v191 + 8))(v247, v113);
    (*(void (**)(char *, uint64_t))(v115 + 8))(v116, v117);
    *(_QWORD *)(inited + 80) = 0;
    *(_OWORD *)v108 = 0u;
    *(_OWORD *)(inited + 64) = 0u;
    v119 = v250;
  }
  else
  {
    v120 = *(void (**)(uint64_t, uint64_t))(a30 + 24);
    *(_QWORD *)(inited + 72) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 80) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v108);
    v121 = v116;
    v120(v111, a30);
    v119 = v250;
    (*(void (**)(char *, uint64_t))(v118 + 8))(v121, v111);
    (*(void (**)(char *, uint64_t))(v191 + 8))(v247, v113);
  }
  v249 = a35;
  v122 = v260;
  v123 = v253;
  *(_QWORD *)(inited + 88) = (*(uint64_t (**)(uint64_t))(v212 + 8))(v253);
  *(_QWORD *)(inited + 96) = v124;
  v125 = v201;
  v126 = &v201[*(int *)(v261 + 48)];
  v193(v201, v122, v123);
  v127 = v269;
  v192(v126, v194, v269);
  v128 = v208;
  (*(void (**)(char *, char *, uint64_t))(v119 + 32))(v208, v126, v127);
  v129 = v214;
  v130 = *(_QWORD *)(v214 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v130 + 48))(v128, 1, v214) == 1)
  {
    (*(void (**)(char *, uint64_t))(v195 + 8))(v125, v123);
    (*(void (**)(char *, uint64_t))(v119 + 8))(v128, v127);
    *(_QWORD *)(inited + 136) = 0;
    *(_OWORD *)(inited + 104) = 0u;
    *(_OWORD *)(inited + 120) = 0u;
  }
  else
  {
    v269 = *(_QWORD *)(a32 + 24);
    *(_QWORD *)(inited + 128) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 136) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 104));
    ((void (*)(uint64_t, uint64_t))v269)(v129, a32);
    (*(void (**)(char *, uint64_t))(v130 + 8))(v128, v129);
    (*(void (**)(char *, uint64_t))(v195 + 8))(v125, v123);
  }
  v131 = v206;
  v269 = a37;
  v132 = v262;
  v133 = v278;
  *(_QWORD *)(inited + 144) = (*(uint64_t (**)(uint64_t))(v220 + 8))(v278);
  *(_QWORD *)(inited + 152) = v134;
  v135 = &v131[*(int *)(v270 + 48)];
  v199(v131, v132, v133);
  v136 = v254;
  v198(v135, v200, v254);
  v137 = v252;
  v138 = v219;
  (*(void (**)(char *, char *, uint64_t))(v252 + 32))(v219, v135, v136);
  v139 = v222;
  v140 = *(_QWORD *)(v222 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v140 + 48))(v138, 1, v222) == 1)
  {
    (*(void (**)(char *, uint64_t))(v202 + 8))(v131, v133);
    (*(void (**)(char *, uint64_t))(v137 + 8))(v138, v136);
    *(_QWORD *)(inited + 192) = 0;
    *(_OWORD *)(inited + 160) = 0u;
    *(_OWORD *)(inited + 176) = 0u;
  }
  else
  {
    v141 = *(void (**)(uint64_t, uint64_t))(a34 + 24);
    *(_QWORD *)(inited + 184) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 192) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 160));
    v141(v139, a34);
    (*(void (**)(char *, uint64_t))(v140 + 8))(v138, v139);
    (*(void (**)(char *, uint64_t))(v202 + 8))(v131, v278);
  }
  v142 = v279;
  v143 = v256;
  v278 = a39;
  v144 = v264;
  *(_QWORD *)(inited + 200) = (*(uint64_t (**)(uint64_t))(v249 + 8))(v279);
  *(_QWORD *)(inited + 208) = v145;
  v146 = v217;
  v147 = &v217[*(int *)(v271 + 48)];
  v204(v217, v144, v142);
  v203(v147, v205, v143);
  v148 = v255;
  v149 = v226;
  (*(void (**)(char *, char *, uint64_t))(v255 + 32))(v226, v147, v143);
  v150 = v229;
  v151 = *(_QWORD *)(v229 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v151 + 48))(v149, 1, v229) == 1)
  {
    (*(void (**)(char *, uint64_t))(v207 + 8))(v146, v142);
    (*(void (**)(char *, uint64_t))(v148 + 8))(v149, v143);
    *(_QWORD *)(inited + 248) = 0;
    *(_OWORD *)(inited + 216) = 0u;
    *(_OWORD *)(inited + 232) = 0u;
  }
  else
  {
    v152 = *(void (**)(uint64_t, uint64_t))(a36 + 24);
    *(_QWORD *)(inited + 240) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 248) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 216));
    v152(v150, a36);
    (*(void (**)(char *, uint64_t))(v151 + 8))(v149, v150);
    (*(void (**)(char *, uint64_t))(v207 + 8))(v146, v279);
  }
  v153 = v280;
  v154 = v230;
  v155 = v227;
  v279 = a41;
  v156 = v272;
  *(_QWORD *)(inited + 256) = (*(uint64_t (**)(_QWORD *))(v269 + 8))(v280);
  *(_QWORD *)(inited + 264) = v157;
  v158 = &v155[*(int *)(v273 + 48)];
  ((void (*)(char *, char *, _QWORD *))v210)(v155, v156, v153);
  v159 = v258;
  v209(v158, v211, v258);
  v160 = v257;
  (*(void (**)(char *, char *, uint64_t))(v257 + 32))(v154, v158, v159);
  v161 = v232;
  v162 = *(_QWORD *)(v232 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v162 + 48))(v154, 1, v232) == 1)
  {
    (*(void (**)(char *, _QWORD *))(v213 + 8))(v155, v153);
    (*(void (**)(char *, uint64_t))(v160 + 8))(v154, v159);
    *(_QWORD *)(inited + 304) = 0;
    *(_OWORD *)(inited + 272) = 0u;
    *(_OWORD *)(inited + 288) = 0u;
  }
  else
  {
    v163 = *(void (**)(uint64_t, uint64_t))(a38 + 24);
    *(_QWORD *)(inited + 296) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 304) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 272));
    v163(v161, a38);
    (*(void (**)(char *, uint64_t))(v162 + 8))(v154, v161);
    (*(void (**)(char *, _QWORD *))(v213 + 8))(v155, v280);
  }
  v164 = v237;
  v165 = v231;
  v166 = v274;
  v167 = v268;
  *(_QWORD *)(inited + 312) = (*(uint64_t (**)(uint64_t))(v278 + 8))(v268);
  *(_QWORD *)(inited + 320) = v168;
  v169 = &v165[*(int *)(v275 + 48)];
  ((void (*)(char *, char *, uint64_t))v216)(v165, v166, v167);
  v170 = v263;
  v215(v169, v218, v263);
  v171 = v251;
  (*(void (**)(char *, char *, uint64_t))(v251 + 32))(v164, v169, v170);
  v172 = v242;
  v173 = *(_QWORD *)(v242 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v173 + 48))(v164, 1, v242) == 1)
  {
    (*(void (**)(char *, uint64_t))(v221 + 8))(v165, v167);
    (*(void (**)(char *, uint64_t))(v171 + 8))(v164, v170);
    *(_QWORD *)(inited + 360) = 0;
    *(_OWORD *)(inited + 328) = 0u;
    *(_OWORD *)(inited + 344) = 0u;
  }
  else
  {
    v174 = *(void (**)(uint64_t, uint64_t))(a40 + 24);
    *(_QWORD *)(inited + 352) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 360) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 328));
    v174(v172, a40);
    (*(void (**)(char *, uint64_t))(v173 + 8))(v164, v172);
    (*(void (**)(char *, uint64_t))(v221 + 8))(v165, v268);
  }
  v175 = v267;
  v176 = v266;
  v177 = v276;
  *(_QWORD *)(inited + 368) = (*(uint64_t (**)(uint64_t))(v279 + 8))(v267);
  *(_QWORD *)(inited + 376) = v178;
  v179 = v239;
  v180 = &v239[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v224)(v239, v177, v175);
  v223(v180, v225, v176);
  v181 = v265;
  v182 = v244;
  (*(void (**)(void))(v265 + 32))();
  v183 = v245;
  v184 = *(_QWORD *)(v245 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v184 + 48))(v182, 1, v245) == 1)
  {
    (*(void (**)(char *, uint64_t))(v228 + 8))(v179, v175);
    (*(void (**)(char *, uint64_t))(v181 + 8))(v182, v176);
    *(_QWORD *)(inited + 416) = 0;
    *(_OWORD *)(inited + 384) = 0u;
    *(_OWORD *)(inited + 400) = 0u;
  }
  else
  {
    v280 = *(_QWORD **)(a42 + 24);
    *(_QWORD *)(inited + 408) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 416) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 384));
    ((void (*)(uint64_t, uint64_t))v280)(v183, a42);
    (*(void (**)(char *, uint64_t))(v184 + 8))(v182, v183);
    (*(void (**)(char *, uint64_t))(v228 + 8))(v179, v175);
  }
  v185 = sub_2447C8898(inited);
  v186 = sub_2448546EC(v185);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v243 + 8))(v276, TupleTypeMetadata2);
  (*(void (**)(char *, uint64_t))(v241 + 8))(v274, v275);
  (*(void (**)(char *, uint64_t))(v240 + 8))(v272, v273);
  (*(void (**)(char *, uint64_t))(v238 + 8))(v264, v271);
  (*(void (**)(char *, uint64_t))(v236 + 8))(v262, v270);
  (*(void (**)(char *, uint64_t))(v235 + 8))(v260, v261);
  (*(void (**)(char *, uint64_t))(v234 + 8))(v233, v259);
  return v186;
}

uint64_t static PropertyListBuilder.buildBlock<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(_:_:_:_:_:_:_:_:)(char *a1, uint64_t a2, void (*a3)(char *, char *, uint64_t), char *a4, char *a5, char *a6, void (*a7)(void), uint64_t a8, void (*a9)(void), uint64_t a10, void (*a11)(char *, char *, uint64_t), char *a12, void (*a13)(void), uint64_t a14, char *a15, void (*a16)(_QWORD, _QWORD, _QWORD), uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  void (*v101)(char *, char *, uint64_t);
  void (*v102)(char *, char *, uint64_t);
  char *v103;
  void (*v104)(char *, char *, uint64_t);
  char *v105;
  uint64_t v106;
  void (*v107)(char *, char *, uint64_t);
  char *v108;
  void (*v109)(char *, char *, uint64_t);
  void (*v110)(char *, char *, uint64_t);
  char *v111;
  void (*v112)(char *, char *, uint64_t);
  char *v113;
  void (*v114)(char *, char *, uint64_t);
  char *v115;
  void (*v116)(char *, char *, uint64_t);
  char *v117;
  void (*v118)(_QWORD, _QWORD, _QWORD);
  void (*v119)(_QWORD, _QWORD, _QWORD);
  uint64_t inited;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  void (*v134)(uint64_t, uint64_t);
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(uint64_t, uint64_t);
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(uint64_t, uint64_t);
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  void (*v168)(uint64_t, uint64_t);
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  void (*v179)(uint64_t, uint64_t);
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  void (*v192)(uint64_t, uint64_t);
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void (*v204)(uint64_t, uint64_t);
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  void (*v219)(char *, uint64_t, uint64_t);
  void (*v220)(void);
  char *v221;
  uint64_t v222;
  void (*v223)(char *, char *, uint64_t);
  void (*v224)(char *, char *, uint64_t);
  char *v225;
  uint64_t v226;
  void (*v227)(char *, char *, uint64_t);
  void (*v228)(char *, char *, uint64_t);
  char *v229;
  char *v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  void (*v234)(char *, char *, uint64_t);
  void (*v235)(char *, char *, uint64_t);
  char *v236;
  uint64_t v237;
  void (*v238)(char *, char *, uint64_t);
  void (*v239)(void);
  char *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  void (*v244)(char *, char *, uint64_t);
  void (*v245)(void);
  char *v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  void (*v251)(char *, char *, uint64_t);
  void (*v252)(void);
  char *v253;
  uint64_t v254;
  char *v255;
  char *v256;
  uint64_t v257;
  void (*v258)(_QWORD, _QWORD, _QWORD);
  void (*v259)(void);
  char *v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  uint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  uint64_t v280;
  char *v281;
  char *v282;
  char *v283;
  char *v284;
  uint64_t v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  uint64_t v300;
  char *v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  char *v314;
  uint64_t v315;
  char *v316;
  uint64_t v317;
  char *v318;
  uint64_t v319;
  char *v320;
  uint64_t TupleTypeMetadata2;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;

  v257 = a8;
  v252 = a7;
  v302 = a6;
  v246 = a5;
  v301 = a4;
  v244 = a3;
  v300 = a2;
  v299 = a1;
  v249 = a37;
  v242 = a35;
  v323 = a31;
  v322 = a29;
  v311 = a27;
  v324 = a25;
  v309 = a23;
  v310 = a21;
  v307 = a19;
  v231 = a18;
  v287 = a17;
  v266 = a33;
  v258 = a16;
  v260 = a15;
  v262 = a14;
  v259 = a13;
  v253 = a12;
  v251 = a11;
  v250 = a10;
  v245 = a9;
  v280 = a32;
  v48 = sub_2448EB508();
  v304 = *(_QWORD *)(v48 - 8);
  v305 = v48;
  MEMORY[0x24BDAC7A8](v48);
  v278 = a30;
  v279 = (char *)&v219 - v49;
  v50 = sub_2448EB508();
  v290 = *(_QWORD *)(v50 - 8);
  v303 = v50;
  MEMORY[0x24BDAC7A8](v50);
  v273 = (char *)&v219 - v51;
  v268 = a28;
  v52 = sub_2448EB508();
  v53 = *(_QWORD *)(v52 - 8);
  v306 = v52;
  v297 = v53;
  MEMORY[0x24BDAC7A8](v52);
  v264 = a26;
  v265 = (char *)&v219 - v54;
  v55 = sub_2448EB508();
  v296 = *(_QWORD *)(v55 - 8);
  v295 = v55;
  MEMORY[0x24BDAC7A8](v55);
  v263 = (char *)&v219 - v56;
  v261 = a24;
  v57 = sub_2448EB508();
  v293 = *(_QWORD *)(v57 - 8);
  v294 = v57;
  MEMORY[0x24BDAC7A8](v57);
  v256 = (char *)&v219 - v58;
  v254 = a22;
  v59 = sub_2448EB508();
  v291 = *(_QWORD *)(v59 - 8);
  v292 = v59;
  MEMORY[0x24BDAC7A8](v59);
  v247 = a20;
  v248 = (char *)&v219 - v60;
  v308 = sub_2448EB508();
  v289 = *(_QWORD *)(v308 - 8);
  MEMORY[0x24BDAC7A8](v308);
  v240 = (char *)&v219 - v61;
  v285 = sub_2448EB508();
  v288 = *(_QWORD *)(v285 - 8);
  MEMORY[0x24BDAC7A8](v285);
  v229 = (char *)&v219 - v62;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v277 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v63 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v274 = (char *)&v219 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v63);
  v320 = (char *)&v219 - v65;
  v319 = swift_getTupleTypeMetadata2();
  v276 = *(_QWORD *)(v319 - 8);
  v66 = MEMORY[0x24BDAC7A8](v319);
  v284 = (char *)&v219 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v66);
  v318 = (char *)&v219 - v68;
  v317 = swift_getTupleTypeMetadata2();
  v275 = *(_QWORD *)(v317 - 8);
  v69 = MEMORY[0x24BDAC7A8](v317);
  v283 = (char *)&v219 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v69);
  v316 = (char *)&v219 - v71;
  v315 = swift_getTupleTypeMetadata2();
  v272 = *(_QWORD *)(v315 - 8);
  v72 = MEMORY[0x24BDAC7A8](v315);
  v255 = (char *)&v219 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v72);
  v314 = (char *)&v219 - v74;
  v313 = swift_getTupleTypeMetadata2();
  v271 = *(_QWORD *)(v313 - 8);
  v75 = MEMORY[0x24BDAC7A8](v313);
  v282 = (char *)&v219 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v75);
  v78 = (char *)&v219 - v77;
  v312 = swift_getTupleTypeMetadata2();
  v270 = *(_QWORD *)(v312 - 8);
  v79 = MEMORY[0x24BDAC7A8](v312);
  v281 = (char *)&v219 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v79);
  v82 = (char *)&v219 - v81;
  v83 = v307;
  v84 = swift_getTupleTypeMetadata2();
  v269 = *(_QWORD *)(v84 - 8);
  v85 = MEMORY[0x24BDAC7A8](v84);
  v232 = (char *)&v219 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v85);
  v88 = (char *)&v219 - v87;
  v89 = v287;
  v90 = v285;
  v91 = swift_getTupleTypeMetadata2();
  v92 = *(_QWORD *)(v91 - 8);
  v298 = v91;
  v267 = v92;
  v93 = MEMORY[0x24BDAC7A8](v91);
  v286 = (char *)&v219 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = MEMORY[0x24BDAC7A8](v93);
  v97 = (char *)&v219 - v96;
  v99 = *(_QWORD *)(v89 - 8);
  v221 = (char *)&v219 + *(int *)(v95 + 48) - v96;
  v98 = v221;
  v222 = v99;
  v220 = *(void (**)(void))(v99 + 16);
  ((void (*)(char *, char *, uint64_t))v220)((char *)&v219 - v96, v299, v89);
  v219 = *(void (**)(char *, uint64_t, uint64_t))(v288 + 16);
  v219(v98, v300, v90);
  v300 = v84;
  v100 = &v88[*(int *)(v84 + 48)];
  v226 = *(_QWORD *)(v83 - 8);
  v101 = *(void (**)(char *, char *, uint64_t))(v226 + 16);
  v299 = v88;
  v224 = v101;
  v101(v88, (char *)v244, v83);
  v102 = *(void (**)(char *, char *, uint64_t))(v289 + 16);
  v225 = v100;
  v223 = v102;
  v102(v100, v301, v308);
  v103 = &v82[*(int *)(v312 + 48)];
  v233 = *(_QWORD *)(v310 - 8);
  v104 = *(void (**)(char *, char *, uint64_t))(v233 + 16);
  v301 = v82;
  v105 = v82;
  v106 = v311;
  v228 = v104;
  ((void (*)(char *, char *))v104)(v105, v246);
  v107 = *(void (**)(char *, char *, uint64_t))(v291 + 16);
  v230 = v103;
  v227 = v107;
  v107(v103, v302, v292);
  v108 = &v78[*(int *)(v313 + 48)];
  v237 = *(_QWORD *)(v309 - 8);
  v109 = *(void (**)(char *, char *, uint64_t))(v237 + 16);
  v302 = v78;
  v235 = v109;
  ((void (*)(char *, void (*)(void)))v109)(v78, v252);
  v110 = *(void (**)(char *, char *, uint64_t))(v293 + 16);
  v236 = v108;
  v234 = v110;
  v110(v108, (char *)v257, v294);
  v111 = &v314[*(int *)(v315 + 48)];
  v243 = *(_QWORD *)(v324 - 8);
  v239 = *(void (**)(void))(v243 + 16);
  v239();
  v112 = *(void (**)(char *, char *, uint64_t))(v296 + 16);
  v241 = v111;
  v238 = v112;
  v112(v111, (char *)v250, v295);
  v113 = &v316[*(int *)(v317 + 48)];
  v250 = *(_QWORD *)(v106 - 8);
  v245 = *(void (**)(void))(v250 + 16);
  v245();
  v114 = *(void (**)(char *, char *, uint64_t))(v297 + 16);
  v246 = v113;
  v244 = v114;
  v114(v113, v253, v306);
  v115 = &v318[*(int *)(v319 + 48)];
  v257 = *(_QWORD *)(v322 - 8);
  v252 = *(void (**)(void))(v257 + 16);
  v252();
  v116 = *(void (**)(char *, char *, uint64_t))(v290 + 16);
  v253 = v115;
  v251 = v116;
  v116(v115, (char *)v262, v303);
  v117 = &v320[*(int *)(TupleTypeMetadata2 + 48)];
  v262 = *(_QWORD *)(v323 - 8);
  v259 = *(void (**)(void))(v262 + 16);
  v259();
  v118 = *(void (**)(_QWORD, _QWORD, _QWORD))(v304 + 16);
  v260 = v117;
  v119 = v258;
  v258 = v118;
  v118(v117, v119, v305);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738C570);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2448F3430;
  v121 = (uint64_t *)(inited + 48);
  v122 = v287;
  *(_QWORD *)(inited + 32) = (*((uint64_t (**)(uint64_t))v266 + 1))(v287);
  *(_QWORD *)(inited + 40) = v123;
  v124 = &v286[*(int *)(v298 + 48)];
  v266 = v97;
  v125 = v122;
  v220();
  v126 = v285;
  v219(v124, (uint64_t)v221, v285);
  v127 = v288;
  v128 = v229;
  v129 = v126;
  (*(void (**)(char *, char *, uint64_t))(v288 + 32))(v229, v124, v126);
  v130 = *(_QWORD *)(v231 - 8);
  v131 = v128;
  v132 = v128;
  v133 = v231;
  if ((*(unsigned int (**)(char *, uint64_t))(v130 + 48))(v132, 1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v222 + 8))(v286, v125);
    (*(void (**)(char *, uint64_t))(v127 + 8))(v131, v129);
    *(_QWORD *)(inited + 80) = 0;
    *(_OWORD *)v121 = 0u;
    *(_OWORD *)(inited + 64) = 0u;
  }
  else
  {
    v134 = *(void (**)(uint64_t, uint64_t))(a34 + 24);
    *(_QWORD *)(inited + 72) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 80) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v121);
    v134(v133, a34);
    (*(void (**)(char *, uint64_t))(v130 + 8))(v131, v133);
    (*(void (**)(char *, uint64_t))(v222 + 8))(v286, v125);
  }
  v288 = a39;
  v135 = v299;
  v136 = v307;
  *(_QWORD *)(inited + 88) = (*(uint64_t (**)(uint64_t))(v242 + 8))(v307);
  *(_QWORD *)(inited + 96) = v137;
  v138 = v232;
  v139 = &v232[*(int *)(v300 + 48)];
  v224(v232, v135, v136);
  v140 = v308;
  v223(v139, v225, v308);
  v141 = v289;
  v142 = v240;
  (*(void (**)(char *, char *, uint64_t))(v289 + 32))(v240, v139, v140);
  v143 = v247;
  v144 = *(_QWORD *)(v247 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v144 + 48))(v142, 1, v247) == 1)
  {
    (*(void (**)(char *, uint64_t))(v226 + 8))(v138, v307);
    (*(void (**)(char *, uint64_t))(v141 + 8))(v142, v140);
    *(_QWORD *)(inited + 136) = 0;
    *(_OWORD *)(inited + 104) = 0u;
    *(_OWORD *)(inited + 120) = 0u;
  }
  else
  {
    v145 = *(void (**)(uint64_t, uint64_t))(a36 + 24);
    *(_QWORD *)(inited + 128) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 136) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 104));
    v145(v143, a36);
    (*(void (**)(char *, uint64_t))(v144 + 8))(v142, v143);
    (*(void (**)(char *, uint64_t))(v226 + 8))(v138, v307);
  }
  v146 = v291;
  v308 = a41;
  v147 = v301;
  v148 = v310;
  *(_QWORD *)(inited + 144) = (*(uint64_t (**)(uint64_t))(v249 + 8))(v310);
  *(_QWORD *)(inited + 152) = v149;
  v150 = v281;
  v151 = &v281[*(int *)(v312 + 48)];
  v228(v281, v147, v148);
  v152 = v292;
  v227(v151, v230, v292);
  v153 = v248;
  (*(void (**)(char *, char *, uint64_t))(v146 + 32))(v248, v151, v152);
  v154 = v254;
  v155 = *(_QWORD *)(v254 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v155 + 48))(v153, 1, v254) == 1)
  {
    (*(void (**)(char *, uint64_t))(v233 + 8))(v150, v148);
    (*(void (**)(char *, uint64_t))(v146 + 8))(v153, v152);
    *(_QWORD *)(inited + 192) = 0;
    *(_OWORD *)(inited + 160) = 0u;
    *(_OWORD *)(inited + 176) = 0u;
  }
  else
  {
    v156 = *(void (**)(uint64_t, uint64_t))(a38 + 24);
    *(_QWORD *)(inited + 184) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 192) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 160));
    v156(v154, a38);
    (*(void (**)(char *, uint64_t))(v155 + 8))(v153, v154);
    (*(void (**)(char *, uint64_t))(v233 + 8))(v281, v148);
  }
  v157 = v293;
  v158 = v282;
  v310 = a43;
  v159 = v302;
  v160 = v309;
  *(_QWORD *)(inited + 200) = (*(uint64_t (**)(uint64_t))(v288 + 8))(v309);
  *(_QWORD *)(inited + 208) = v161;
  v162 = &v158[*(int *)(v313 + 48)];
  v235(v158, v159, v160);
  v163 = v294;
  v234(v162, v236, v294);
  v164 = v256;
  (*(void (**)(char *, char *, uint64_t))(v157 + 32))(v256, v162, v163);
  v165 = v158;
  v166 = v261;
  v167 = *(_QWORD *)(v261 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v167 + 48))(v164, 1, v261) == 1)
  {
    (*(void (**)(char *, uint64_t))(v237 + 8))(v165, v160);
    (*(void (**)(char *, uint64_t))(v157 + 8))(v164, v163);
    *(_QWORD *)(inited + 248) = 0;
    *(_OWORD *)(inited + 216) = 0u;
    *(_OWORD *)(inited + 232) = 0u;
  }
  else
  {
    v168 = *(void (**)(uint64_t, uint64_t))(a40 + 24);
    *(_QWORD *)(inited + 240) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 248) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 216));
    v168(v166, a40);
    (*(void (**)(char *, uint64_t))(v167 + 8))(v164, v166);
    (*(void (**)(char *, uint64_t))(v237 + 8))(v282, v160);
  }
  v169 = v324;
  v170 = v295;
  v309 = a45;
  v171 = v314;
  *(_QWORD *)(inited + 256) = (*(uint64_t (**)(uint64_t))(v308 + 8))(v324);
  *(_QWORD *)(inited + 264) = v172;
  v173 = v255;
  v174 = &v255[*(int *)(v315 + 48)];
  ((void (*)(char *, char *, uint64_t))v239)(v255, v171, v169);
  v238(v174, v241, v170);
  v175 = v296;
  v176 = v263;
  (*(void (**)(char *, char *, uint64_t))(v296 + 32))(v263, v174, v170);
  v177 = v264;
  v178 = *(_QWORD *)(v264 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v178 + 48))(v176, 1, v264) == 1)
  {
    (*(void (**)(char *, uint64_t))(v243 + 8))(v173, v169);
    (*(void (**)(char *, uint64_t))(v175 + 8))(v176, v170);
    *(_QWORD *)(inited + 304) = 0;
    *(_OWORD *)(inited + 272) = 0u;
    *(_OWORD *)(inited + 288) = 0u;
  }
  else
  {
    v179 = *(void (**)(uint64_t, uint64_t))(a42 + 24);
    *(_QWORD *)(inited + 296) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 304) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 272));
    v179(v177, a42);
    (*(void (**)(char *, uint64_t))(v178 + 8))(v176, v177);
    (*(void (**)(char *, uint64_t))(v243 + 8))(v173, v324);
  }
  v180 = v297;
  v181 = v283;
  v324 = a47;
  v182 = v316;
  v183 = v311;
  *(_QWORD *)(inited + 312) = (*(uint64_t (**)(uint64_t))(v310 + 8))(v311);
  *(_QWORD *)(inited + 320) = v184;
  v185 = &v181[*(int *)(v317 + 48)];
  v186 = v182;
  v187 = v183;
  ((void (*)(char *, char *, uint64_t))v245)(v181, v186, v183);
  v188 = v306;
  v244(v185, v246, v306);
  v189 = v265;
  (*(void (**)(char *, char *, uint64_t))(v180 + 32))(v265, v185, v188);
  v190 = v268;
  v191 = *(_QWORD *)(v268 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v191 + 48))(v189, 1, v268) == 1)
  {
    (*(void (**)(char *, uint64_t))(v250 + 8))(v181, v187);
    (*(void (**)(char *, uint64_t))(v180 + 8))(v189, v306);
    *(_QWORD *)(inited + 360) = 0;
    *(_OWORD *)(inited + 328) = 0u;
    *(_OWORD *)(inited + 344) = 0u;
  }
  else
  {
    v192 = *(void (**)(uint64_t, uint64_t))(a44 + 24);
    *(_QWORD *)(inited + 352) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 360) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 328));
    v192(v190, a44);
    (*(void (**)(char *, uint64_t))(v191 + 8))(v189, v190);
    (*(void (**)(char *, uint64_t))(v250 + 8))(v283, v187);
  }
  v193 = v303;
  v194 = v284;
  v195 = v318;
  v196 = v322;
  *(_QWORD *)(inited + 368) = (*(uint64_t (**)(uint64_t))(v309 + 8))(v322);
  *(_QWORD *)(inited + 376) = v197;
  v198 = &v194[*(int *)(v319 + 48)];
  ((void (*)(char *, char *, uint64_t))v252)(v194, v195, v196);
  v251(v198, v253, v193);
  v199 = v290;
  v200 = v273;
  (*(void (**)(char *, char *, uint64_t))(v290 + 32))(v273, v198, v193);
  v201 = v278;
  v202 = *(_QWORD *)(v278 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v202 + 48))(v200, 1, v278) == 1)
  {
    (*(void (**)(char *, uint64_t))(v257 + 8))(v194, v196);
    (*(void (**)(char *, uint64_t))(v199 + 8))(v200, v193);
    *(_QWORD *)(inited + 416) = 0;
    *(_OWORD *)(inited + 384) = 0u;
    *(_OWORD *)(inited + 400) = 0u;
  }
  else
  {
    v203 = v196;
    v204 = *(void (**)(uint64_t, uint64_t))(a46 + 24);
    *(_QWORD *)(inited + 408) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 416) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 384));
    v204(v201, a46);
    (*(void (**)(char *, uint64_t))(v202 + 8))(v200, v201);
    (*(void (**)(char *, uint64_t))(v257 + 8))(v284, v203);
  }
  v205 = v323;
  v206 = TupleTypeMetadata2;
  v207 = v320;
  *(_QWORD *)(inited + 424) = (*(uint64_t (**)(uint64_t))(v324 + 8))(v323);
  *(_QWORD *)(inited + 432) = v208;
  v209 = v274;
  v210 = &v274[*(int *)(v206 + 48)];
  ((void (*)(char *, char *, uint64_t))v259)(v274, v207, v205);
  v211 = v305;
  v258(v210, v260, v305);
  v212 = v304;
  v213 = v279;
  (*(void (**)(void))(v304 + 32))();
  v214 = v280;
  v215 = *(_QWORD *)(v280 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v215 + 48))(v213, 1, v280) == 1)
  {
    (*(void (**)(char *, uint64_t))(v262 + 8))(v209, v205);
    (*(void (**)(char *, uint64_t))(v212 + 8))(v213, v211);
    *(_QWORD *)(inited + 472) = 0;
    *(_OWORD *)(inited + 440) = 0u;
    *(_OWORD *)(inited + 456) = 0u;
  }
  else
  {
    v324 = *(_QWORD *)(a48 + 24);
    *(_QWORD *)(inited + 464) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 472) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 440));
    ((void (*)(uint64_t, uint64_t))v324)(v214, a48);
    (*(void (**)(char *, uint64_t))(v215 + 8))(v213, v214);
    (*(void (**)(char *, uint64_t))(v262 + 8))(v209, v205);
  }
  v216 = sub_2447C8898(inited);
  v217 = sub_2448546EC(v216);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v277 + 8))(v320, TupleTypeMetadata2);
  (*(void (**)(char *, uint64_t))(v276 + 8))(v318, v319);
  (*(void (**)(char *, uint64_t))(v275 + 8))(v316, v317);
  (*(void (**)(char *, uint64_t))(v272 + 8))(v314, v315);
  (*(void (**)(char *, uint64_t))(v271 + 8))(v302, v313);
  (*(void (**)(char *, uint64_t))(v270 + 8))(v301, v312);
  (*(void (**)(char *, uint64_t))(v269 + 8))(v299, v300);
  (*(void (**)(char *, uint64_t))(v267 + 8))(v266, v298);
  return v217;
}

uint64_t static PropertyListBuilder.buildBlock<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R>(_:_:_:_:_:_:_:_:_:)(char *a1, uint64_t a2, char *a3, char *a4, void (*a5)(char *, char *, uint64_t), char *a6, uint64_t a7, void (*a8)(void), uint64_t a9, void (*a10)(void), char *a11, void (*a12)(char *, char *, uint64_t), char *a13, uint64_t a14, void (*a15)(void), uint64_t a16, char *a17, void (*a18)(_QWORD, _QWORD, _QWORD), uint64_t *a19, uint64_t a20,uint64_t *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_QWORD *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t (**a37)(uint64_t *),uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t (**v109)(uint64_t *);
  char *v110;
  uint64_t v111;
  void (*v112)(char *, uint64_t, uint64_t);
  void (*v113)(char *, char *, uint64_t);
  char *v114;
  void (*v115)(char *, char *, uint64_t *);
  void (*v116)(char *, char *, uint64_t);
  char *v117;
  void (*v118)(char *, char *, uint64_t);
  char *v119;
  void (*v120)(char *, char *, uint64_t);
  char *v121;
  void (*v122)(char *, char *, uint64_t);
  void (*v123)(char *, char *, uint64_t);
  char *v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(char *, char *, uint64_t);
  char *v128;
  void (*v129)(char *, char *, uint64_t);
  char *v130;
  void (*v131)(char *, char *, uint64_t);
  char *v132;
  void (*v133)(char *, char *, uint64_t);
  char *v134;
  void (*v135)(_QWORD, _QWORD, _QWORD);
  void (*v136)(_QWORD, _QWORD, _QWORD);
  uint64_t inited;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t v140;
  char *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  void (*v150)(uint64_t, uint64_t);
  char *v151;
  uint64_t *v152;
  uint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  void (*v164)(uint64_t, uint64_t);
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  void (*v176)(uint64_t, uint64_t);
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  void (*v188)(uint64_t, uint64_t);
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  void (*v199)(uint64_t, uint64_t);
  char *v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  void (*v211)(uint64_t, uint64_t);
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  void (*v224)(uint64_t, uint64_t);
  uint64_t v225;
  char *v226;
  char *v227;
  _QWORD *v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  void (*v236)(uint64_t, uint64_t);
  uint64_t v237;
  uint64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v250;
  uint64_t v251;
  void (*v252)(void);
  char *v253;
  uint64_t v254;
  char *v255;
  void (*v256)(char *, char *, uint64_t);
  void (*v257)(char *, char *, uint64_t *);
  char *v258;
  uint64_t v259;
  void (*v260)(char *, char *, uint64_t);
  void (*v261)(char *, char *, uint64_t);
  char *v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  void (*v266)(char *, char *, uint64_t);
  void (*v267)(char *, char *, uint64_t);
  char *v268;
  char *v269;
  uint64_t v270;
  void (*v271)(char *, char *, uint64_t);
  void (*v272)(void);
  char *v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  void (*v277)(char *, char *, uint64_t);
  void (*v278)(void);
  char *v279;
  char *v280;
  uint64_t v281;
  char *v282;
  uint64_t v283;
  void (*v284)(char *, char *, uint64_t);
  void (*v285)(void);
  char *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  void (*v291)(char *, char *, uint64_t);
  void (*v292)(void);
  char *v293;
  uint64_t v294;
  char *v295;
  uint64_t v296;
  void (*v297)(_QWORD, _QWORD, _QWORD);
  void (*v298)(void);
  char *v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  char *v303;
  uint64_t v304;
  uint64_t (**v305)(uint64_t *);
  char *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  char *v314;
  uint64_t v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  char *v320;
  uint64_t v321;
  char *v322;
  char *v323;
  char *v324;
  char *v325;
  uint64_t *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  char *v340;
  uint64_t v341;
  char *v342;
  char *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  char *v356;
  uint64_t v357;
  char *v358;
  uint64_t v359;
  char *v360;
  uint64_t v361;
  char *v362;
  uint64_t v363;
  char *v364;
  uint64_t TupleTypeMetadata2;
  uint64_t v366;
  uint64_t v367;
  _QWORD *v368;

  v292 = a8;
  v288 = a7;
  v343 = a6;
  v284 = a5;
  v342 = a4;
  v280 = a3;
  v341 = a2;
  v340 = a1;
  v287 = a41;
  v276 = a39;
  v366 = a35;
  v368 = a33;
  v354 = a31;
  v367 = a29;
  v352 = a27;
  v351 = a25;
  v349 = a23;
  v331 = a21;
  v264 = a20;
  v326 = a19;
  v305 = a37;
  v297 = a18;
  v299 = a17;
  v301 = a16;
  v298 = a15;
  v294 = a14;
  v293 = a13;
  v291 = a12;
  v286 = a11;
  v285 = a10;
  v283 = a9;
  v321 = a36;
  v54 = sub_2448EB508();
  v345 = *(_QWORD *)(v54 - 8);
  v346 = v54;
  MEMORY[0x24BDAC7A8](v54);
  v320 = (char *)&v250 - v55;
  v319 = a34;
  v56 = sub_2448EB508();
  v57 = *(_QWORD *)(v56 - 8);
  v348 = v56;
  v344 = v57;
  MEMORY[0x24BDAC7A8](v56);
  v316 = (char *)&v250 - v58;
  v310 = a32;
  v59 = sub_2448EB508();
  v60 = *(_QWORD *)(v59 - 8);
  v347 = v59;
  v338 = v60;
  MEMORY[0x24BDAC7A8](v59);
  v306 = (char *)&v250 - v61;
  v304 = a30;
  v62 = sub_2448EB508();
  v336 = *(_QWORD *)(v62 - 8);
  v337 = v62;
  MEMORY[0x24BDAC7A8](v62);
  v302 = a28;
  v303 = (char *)&v250 - v63;
  v64 = sub_2448EB508();
  v334 = *(_QWORD *)(v64 - 8);
  v335 = v64;
  MEMORY[0x24BDAC7A8](v64);
  v300 = (char *)&v250 - v65;
  v296 = a26;
  v66 = sub_2448EB508();
  v332 = *(_QWORD *)(v66 - 8);
  v333 = v66;
  MEMORY[0x24BDAC7A8](v66);
  v289 = a24;
  v290 = (char *)&v250 - v67;
  v350 = sub_2448EB508();
  v330 = *(_QWORD *)(v350 - 8);
  MEMORY[0x24BDAC7A8](v350);
  v281 = a22;
  v282 = (char *)&v250 - v68;
  v69 = sub_2448EB508();
  v328 = *(_QWORD *)(v69 - 8);
  v329 = v69;
  MEMORY[0x24BDAC7A8](v69);
  v274 = (char *)&v250 - v70;
  v71 = sub_2448EB508();
  v327 = *(_QWORD *)(v71 - 8);
  MEMORY[0x24BDAC7A8](v71);
  v255 = (char *)&v250 - v72;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v318 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v73 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v314 = (char *)&v250 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v73);
  v364 = (char *)&v250 - v75;
  v363 = swift_getTupleTypeMetadata2();
  v317 = *(_QWORD *)(v363 - 8);
  v76 = MEMORY[0x24BDAC7A8](v363);
  v324 = (char *)&v250 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v76);
  v362 = (char *)&v250 - v78;
  v361 = swift_getTupleTypeMetadata2();
  v315 = *(_QWORD *)(v361 - 8);
  v79 = MEMORY[0x24BDAC7A8](v361);
  v323 = (char *)&v250 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v79);
  v360 = (char *)&v250 - v81;
  v359 = swift_getTupleTypeMetadata2();
  v313 = *(_QWORD *)(v359 - 8);
  v82 = MEMORY[0x24BDAC7A8](v359);
  v295 = (char *)&v250 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v82);
  v358 = (char *)&v250 - v84;
  v357 = swift_getTupleTypeMetadata2();
  v312 = *(_QWORD *)(v357 - 8);
  v85 = MEMORY[0x24BDAC7A8](v357);
  v322 = (char *)&v250 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v85);
  v356 = (char *)&v250 - v87;
  v355 = swift_getTupleTypeMetadata2();
  v311 = *(_QWORD *)(v355 - 8);
  v88 = MEMORY[0x24BDAC7A8](v355);
  v279 = (char *)&v250 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v88);
  v91 = (char *)&v250 - v90;
  v353 = swift_getTupleTypeMetadata2();
  v309 = *(_QWORD *)(v353 - 8);
  v92 = MEMORY[0x24BDAC7A8](v353);
  v269 = (char *)&v250 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v92);
  v95 = (char *)&v250 - v94;
  v96 = v331;
  v97 = swift_getTupleTypeMetadata2();
  v308 = *(_QWORD *)(v97 - 8);
  v98 = MEMORY[0x24BDAC7A8](v97);
  v263 = (char *)&v250 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v98);
  v101 = (char *)&v250 - v100;
  v102 = v326;
  v251 = v71;
  v103 = swift_getTupleTypeMetadata2();
  v104 = *(_QWORD *)(v103 - 8);
  v339 = v103;
  v307 = v104;
  v105 = MEMORY[0x24BDAC7A8](v103);
  v325 = (char *)&v250 - ((v106 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = MEMORY[0x24BDAC7A8](v105);
  v109 = (uint64_t (**)(uint64_t *))((char *)&v250 - v108);
  v111 = *(v102 - 1);
  v253 = (char *)&v250 + *(int *)(v107 + 48) - v108;
  v110 = v253;
  v254 = v111;
  v252 = *(void (**)(void))(v111 + 16);
  ((void (*)(char *, char *, uint64_t *))v252)((char *)&v250 - v108, v340, v102);
  v112 = *(void (**)(char *, uint64_t, uint64_t))(v327 + 16);
  v112(v110, v341, v71);
  v113 = (void (*)(char *, char *, uint64_t))v112;
  v341 = v97;
  v114 = &v101[*(int *)(v97 + 48)];
  v259 = *(v96 - 1);
  v115 = *(void (**)(char *, char *, uint64_t *))(v259 + 16);
  v340 = v101;
  v257 = v115;
  v115(v101, v280, v96);
  v116 = *(void (**)(char *, char *, uint64_t))(v328 + 16);
  v258 = v114;
  v256 = v116;
  v116(v114, v342, v329);
  v117 = &v95[*(int *)(v353 + 48)];
  v265 = *(_QWORD *)(v349 - 8);
  v118 = *(void (**)(char *, char *, uint64_t))(v265 + 16);
  v342 = v95;
  v119 = v255;
  v261 = v118;
  ((void (*)(char *, void (*)(char *, char *, uint64_t)))v118)(v95, v284);
  v120 = *(void (**)(char *, char *, uint64_t))(v330 + 16);
  v262 = v117;
  v260 = v120;
  v120(v117, v343, v350);
  v121 = &v91[*(int *)(v355 + 48)];
  v270 = *(_QWORD *)(v351 - 8);
  v122 = *(void (**)(char *, char *, uint64_t))(v270 + 16);
  v343 = v91;
  v267 = v122;
  ((void (*)(char *, uint64_t))v122)(v91, v288);
  v123 = *(void (**)(char *, char *, uint64_t))(v332 + 16);
  v268 = v121;
  v266 = v123;
  v123(v121, (char *)v292, v333);
  v124 = &v356[*(int *)(v357 + 48)];
  v275 = *(_QWORD *)(v352 - 8);
  v125 = v334;
  v126 = v338;
  v272 = *(void (**)(void))(v275 + 16);
  v272();
  v127 = *(void (**)(char *, char *, uint64_t))(v125 + 16);
  v273 = v124;
  v271 = v127;
  v127(v124, (char *)v285, v335);
  v128 = &v358[*(int *)(v359 + 48)];
  v283 = *(_QWORD *)(v367 - 8);
  v278 = *(void (**)(void))(v283 + 16);
  v278();
  v129 = *(void (**)(char *, char *, uint64_t))(v336 + 16);
  v280 = v128;
  v277 = v129;
  v129(v128, (char *)v291, v337);
  v130 = &v360[*(int *)(v361 + 48)];
  v288 = *(_QWORD *)(v354 - 8);
  v285 = *(void (**)(void))(v288 + 16);
  v285();
  v131 = *(void (**)(char *, char *, uint64_t))(v126 + 16);
  v286 = v130;
  v284 = v131;
  v131(v130, (char *)v294, v347);
  v132 = &v362[*(int *)(v363 + 48)];
  v294 = *(v368 - 1);
  v292 = *(void (**)(void))(v294 + 16);
  v292();
  v133 = *(void (**)(char *, char *, uint64_t))(v344 + 16);
  v293 = v132;
  v291 = v133;
  v133(v132, (char *)v301, v348);
  v134 = &v364[*(int *)(TupleTypeMetadata2 + 48)];
  v301 = *(_QWORD *)(v366 - 8);
  v298 = *(void (**)(void))(v301 + 16);
  v298();
  v135 = *(void (**)(_QWORD, _QWORD, _QWORD))(v345 + 16);
  v299 = v134;
  v136 = v297;
  v297 = v135;
  v135(v134, v136, v346);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738C570);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2448F3470;
  v138 = (uint64_t *)(inited + 48);
  v139 = v326;
  *(_QWORD *)(inited + 32) = v305[1](v326);
  *(_QWORD *)(inited + 40) = v140;
  v141 = &v325[*(int *)(v339 + 48)];
  v305 = v109;
  v142 = v139;
  v252();
  v143 = v251;
  v113(v141, v253, v251);
  v144 = v327;
  v145 = v143;
  (*(void (**)(char *, char *, uint64_t))(v327 + 32))(v119, v141, v143);
  v146 = *(_QWORD *)(v264 - 8);
  v147 = v119;
  v148 = v119;
  v149 = v264;
  if ((*(unsigned int (**)(char *, uint64_t))(v146 + 48))(v148, 1) == 1)
  {
    (*(void (**)(char *, uint64_t *))(v254 + 8))(v325, v142);
    (*(void (**)(char *, uint64_t))(v144 + 8))(v147, v145);
    *(_QWORD *)(inited + 80) = 0;
    *(_OWORD *)v138 = 0u;
    *(_OWORD *)(inited + 64) = 0u;
  }
  else
  {
    v150 = *(void (**)(uint64_t, uint64_t))(a38 + 24);
    *(_QWORD *)(inited + 72) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 80) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v138);
    v150(v149, a38);
    (*(void (**)(char *, uint64_t))(v146 + 8))(v147, v149);
    (*(void (**)(char *, uint64_t *))(v254 + 8))(v325, v142);
  }
  v327 = a43;
  v326 = (uint64_t *)(inited + 104);
  v151 = v340;
  v152 = v331;
  *(_QWORD *)(inited + 88) = (*(uint64_t (**)(uint64_t *))(v276 + 8))(v331);
  *(_QWORD *)(inited + 96) = v153;
  v154 = v263;
  v155 = &v263[*(int *)(v341 + 48)];
  v156 = v151;
  v157 = v152;
  v257(v263, v156, v152);
  v158 = v329;
  v256(v155, v258, v329);
  v159 = v328;
  v160 = v274;
  (*(void (**)(char *, char *, uint64_t))(v328 + 32))(v274, v155, v158);
  v161 = v281;
  v162 = *(_QWORD *)(v281 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v162 + 48))(v160, 1, v281) == 1)
  {
    (*(void (**)(char *, uint64_t *))(v259 + 8))(v154, v157);
    (*(void (**)(char *, uint64_t))(v159 + 8))(v160, v158);
    v163 = v326;
    v326[4] = 0;
    *(_OWORD *)v163 = 0u;
    *((_OWORD *)v163 + 1) = 0u;
  }
  else
  {
    v164 = *(void (**)(uint64_t, uint64_t))(a40 + 24);
    *(_QWORD *)(inited + 128) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 136) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v326);
    v164(v161, a40);
    (*(void (**)(char *, uint64_t))(v162 + 8))(v160, v161);
    (*(void (**)(char *, uint64_t *))(v259 + 8))(v154, v157);
  }
  v165 = v349;
  v166 = v330;
  v349 = a45;
  v331 = (uint64_t *)(inited + 160);
  v167 = v342;
  *(_QWORD *)(inited + 144) = (*(uint64_t (**)(uint64_t))(v287 + 8))(v165);
  *(_QWORD *)(inited + 152) = v168;
  v169 = v269;
  v170 = &v269[*(int *)(v353 + 48)];
  v261(v269, v167, v165);
  v171 = v350;
  v260(v170, v262, v350);
  v172 = v282;
  (*(void (**)(char *, char *, uint64_t))(v166 + 32))(v282, v170, v171);
  v173 = v289;
  v174 = *(_QWORD *)(v289 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v174 + 48))(v172, 1, v289) == 1)
  {
    (*(void (**)(char *, uint64_t))(v265 + 8))(v169, v165);
    (*(void (**)(char *, uint64_t))(v166 + 8))(v172, v171);
    v175 = v331;
    v331[4] = 0;
    *(_OWORD *)v175 = 0u;
    *((_OWORD *)v175 + 1) = 0u;
  }
  else
  {
    v176 = *(void (**)(uint64_t, uint64_t))(a42 + 24);
    *(_QWORD *)(inited + 184) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 192) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v331);
    v176(v173, a42);
    (*(void (**)(char *, uint64_t))(v174 + 8))(v172, v173);
    (*(void (**)(char *, uint64_t))(v265 + 8))(v169, v165);
  }
  v177 = v332;
  v350 = a47;
  v331 = (uint64_t *)(inited + 216);
  v178 = v343;
  v179 = v351;
  *(_QWORD *)(inited + 200) = (*(uint64_t (**)(uint64_t))(v327 + 8))(v351);
  *(_QWORD *)(inited + 208) = v180;
  v181 = v279;
  v182 = &v279[*(int *)(v355 + 48)];
  v267(v279, v178, v179);
  v183 = v333;
  v266(v182, v268, v333);
  v184 = v290;
  (*(void (**)(char *, char *, uint64_t))(v177 + 32))(v290, v182, v183);
  v185 = v296;
  v186 = *(_QWORD *)(v296 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v186 + 48))(v184, 1, v296) == 1)
  {
    (*(void (**)(char *, uint64_t))(v270 + 8))(v181, v179);
    (*(void (**)(char *, uint64_t))(v177 + 8))(v184, v183);
    v187 = v331;
    v331[4] = 0;
    *(_OWORD *)v187 = 0u;
    *((_OWORD *)v187 + 1) = 0u;
  }
  else
  {
    v188 = *(void (**)(uint64_t, uint64_t))(a44 + 24);
    *(_QWORD *)(inited + 240) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 248) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v331);
    v188(v185, a44);
    (*(void (**)(char *, uint64_t))(v186 + 8))(v184, v185);
    (*(void (**)(char *, uint64_t))(v270 + 8))(v181, v179);
  }
  v189 = v352;
  v190 = v334;
  v352 = a49;
  v191 = v356;
  *(_QWORD *)(inited + 256) = (*(uint64_t (**)(uint64_t))(v349 + 8))(v189);
  *(_QWORD *)(inited + 264) = v192;
  v193 = v322;
  v194 = &v322[*(int *)(v357 + 48)];
  ((void (*)(char *, char *, uint64_t))v272)(v322, v191, v189);
  v195 = v335;
  v271(v194, v273, v335);
  v196 = v300;
  (*(void (**)(char *, char *, uint64_t))(v190 + 32))(v300, v194, v195);
  v197 = v302;
  v198 = *(_QWORD *)(v302 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v198 + 48))(v196, 1, v302) == 1)
  {
    (*(void (**)(char *, uint64_t))(v275 + 8))(v193, v189);
    (*(void (**)(char *, uint64_t))(v190 + 8))(v196, v195);
    *(_QWORD *)(inited + 304) = 0;
    *(_OWORD *)(inited + 272) = 0u;
    *(_OWORD *)(inited + 288) = 0u;
  }
  else
  {
    v199 = *(void (**)(uint64_t, uint64_t))(a46 + 24);
    *(_QWORD *)(inited + 296) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 304) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 272));
    v199(v197, a46);
    (*(void (**)(char *, uint64_t))(v198 + 8))(v196, v197);
    (*(void (**)(char *, uint64_t))(v275 + 8))(v322, v189);
  }
  v200 = v303;
  v201 = v337;
  v351 = a51;
  v202 = v358;
  v203 = v367;
  *(_QWORD *)(inited + 312) = (*(uint64_t (**)(uint64_t))(v350 + 8))(v367);
  *(_QWORD *)(inited + 320) = v204;
  v205 = v295;
  v206 = &v295[*(int *)(v359 + 48)];
  ((void (*)(char *, char *, uint64_t))v278)(v295, v202, v203);
  v277(v206, v280, v201);
  v207 = v336;
  (*(void (**)(char *, char *, uint64_t))(v336 + 32))(v200, v206, v201);
  v208 = v304;
  v209 = *(_QWORD *)(v304 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v200, 1, v304) == 1)
  {
    (*(void (**)(char *, uint64_t))(v283 + 8))(v205, v203);
    (*(void (**)(char *, uint64_t))(v207 + 8))(v200, v201);
    *(_QWORD *)(inited + 360) = 0;
    *(_OWORD *)(inited + 328) = 0u;
    *(_OWORD *)(inited + 344) = 0u;
  }
  else
  {
    v210 = v205;
    v211 = *(void (**)(uint64_t, uint64_t))(a48 + 24);
    *(_QWORD *)(inited + 352) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 360) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 328));
    v211(v208, a48);
    (*(void (**)(char *, uint64_t))(v209 + 8))(v200, v208);
    (*(void (**)(char *, uint64_t))(v283 + 8))(v210, v367);
  }
  v212 = v338;
  v213 = v323;
  v367 = a53;
  v214 = v360;
  v215 = v354;
  *(_QWORD *)(inited + 368) = (*(uint64_t (**)(uint64_t))(v352 + 8))(v354);
  *(_QWORD *)(inited + 376) = v216;
  v217 = &v213[*(int *)(v361 + 48)];
  v218 = v214;
  v219 = v215;
  ((void (*)(char *, char *, uint64_t))v285)(v213, v218, v215);
  v220 = v347;
  v284(v217, v286, v347);
  v221 = v306;
  (*(void (**)(char *, char *, uint64_t))(v212 + 32))(v306, v217, v220);
  v222 = v310;
  v223 = *(_QWORD *)(v310 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v223 + 48))(v221, 1, v310) == 1)
  {
    (*(void (**)(char *, uint64_t))(v288 + 8))(v213, v219);
    (*(void (**)(char *, uint64_t))(v212 + 8))(v221, v347);
    *(_QWORD *)(inited + 416) = 0;
    *(_OWORD *)(inited + 384) = 0u;
    *(_OWORD *)(inited + 400) = 0u;
  }
  else
  {
    v224 = *(void (**)(uint64_t, uint64_t))(a50 + 24);
    *(_QWORD *)(inited + 408) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 416) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 384));
    v224(v222, a50);
    (*(void (**)(char *, uint64_t))(v223 + 8))(v221, v222);
    (*(void (**)(char *, uint64_t))(v288 + 8))(v323, v219);
  }
  v225 = v321;
  v226 = v324;
  v227 = v362;
  v228 = v368;
  *(_QWORD *)(inited + 424) = (*(uint64_t (**)(_QWORD *))(v351 + 8))(v368);
  *(_QWORD *)(inited + 432) = v229;
  v230 = &v226[*(int *)(v363 + 48)];
  ((void (*)(char *, char *, _QWORD *))v292)(v226, v227, v228);
  v231 = v348;
  v291(v230, v293, v348);
  v232 = v344;
  v233 = v316;
  (*(void (**)(char *, char *, uint64_t))(v344 + 32))(v316, v230, v231);
  v234 = v319;
  v235 = *(_QWORD *)(v319 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v235 + 48))(v233, 1, v319) == 1)
  {
    (*(void (**)(char *, _QWORD *))(v294 + 8))(v226, v228);
    (*(void (**)(char *, uint64_t))(v232 + 8))(v233, v348);
    *(_QWORD *)(inited + 472) = 0;
    *(_OWORD *)(inited + 440) = 0u;
    *(_OWORD *)(inited + 456) = 0u;
  }
  else
  {
    v236 = *(void (**)(uint64_t, uint64_t))(a52 + 24);
    *(_QWORD *)(inited + 464) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 472) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 440));
    v236(v234, a52);
    (*(void (**)(char *, uint64_t))(v235 + 8))(v233, v234);
    (*(void (**)(char *, _QWORD *))(v294 + 8))(v324, v368);
  }
  v237 = v366;
  v238 = TupleTypeMetadata2;
  v239 = v314;
  v240 = v364;
  *(_QWORD *)(inited + 480) = (*(uint64_t (**)(uint64_t))(v367 + 8))(v366);
  *(_QWORD *)(inited + 488) = v241;
  v242 = &v239[*(int *)(v238 + 48)];
  ((void (*)(char *, char *, uint64_t))v298)(v239, v240, v237);
  v243 = v346;
  v297(v242, v299, v346);
  v244 = v345;
  v245 = v320;
  (*(void (**)(void))(v345 + 32))();
  v246 = *(_QWORD *)(v225 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v246 + 48))(v245, 1, v225) == 1)
  {
    (*(void (**)(char *, uint64_t))(v301 + 8))(v239, v237);
    (*(void (**)(char *, uint64_t))(v244 + 8))(v245, v243);
    *(_QWORD *)(inited + 528) = 0;
    *(_OWORD *)(inited + 496) = 0u;
    *(_OWORD *)(inited + 512) = 0u;
  }
  else
  {
    v368 = *(_QWORD **)(a54 + 24);
    *(_QWORD *)(inited + 520) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 528) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 496));
    ((void (*)(uint64_t, uint64_t))v368)(v225, a54);
    (*(void (**)(char *, uint64_t))(v246 + 8))(v245, v225);
    (*(void (**)(char *, uint64_t))(v301 + 8))(v239, v237);
  }
  v247 = sub_2447C8898(inited);
  v248 = sub_2448546EC(v247);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v318 + 8))(v364, TupleTypeMetadata2);
  (*(void (**)(char *, uint64_t))(v317 + 8))(v362, v363);
  (*(void (**)(char *, uint64_t))(v315 + 8))(v360, v361);
  (*(void (**)(char *, uint64_t))(v313 + 8))(v358, v359);
  (*(void (**)(char *, uint64_t))(v312 + 8))(v356, v357);
  (*(void (**)(char *, uint64_t))(v311 + 8))(v343, v355);
  (*(void (**)(char *, uint64_t))(v309 + 8))(v342, v353);
  (*(void (**)(char *, uint64_t))(v308 + 8))(v340, v341);
  (*(void (**)(uint64_t (**)(uint64_t *), uint64_t))(v307 + 8))(v305, v339);
  return v248;
}

uint64_t static PropertyListBuilder.buildBlock<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V>(_:_:_:_:_:_:_:_:_:_:_:)(char *a1, uint64_t a2, char *a3, char *a4, void (*a5)(void), uint64_t a6, void (*a7)(char *, char *, uint64_t), char *a8, uint64_t a9, void (*a10)(char *, char *, uint64_t), char *a11, uint64_t a12, void (*a13)(void), uint64_t a14, void (*a15)(char *, char *, uint64_t), void (*a16)(void), char *a17, uint64_t a18, void (*a19)(void), uint64_t a20,char *a21,void (*a22)(_QWORD, _QWORD, _QWORD),uint64_t a23,uint64_t a24,_QWORD *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,_QWORD *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t *a63)
{
  uint64_t a64;
  uint64_t a65;
  uint64_t a66;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  void (*v132)(char *, char *, void (*)(_QWORD, _QWORD));
  void (*v133)(char *, char *, uint64_t);
  char *v134;
  void (*v135)(char *, char *, uint64_t);
  uint64_t v136;
  void (*v137)(char *, char *, uint64_t);
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(char *, char *, uint64_t);
  char *v144;
  void (*v145)(char *, char *, uint64_t);
  char *v146;
  uint64_t v147;
  void (*v148)(char *, char *, uint64_t);
  char *v149;
  void (*v150)(char *, char *, uint64_t);
  char *v151;
  void (*v152)(char *, char *, uint64_t);
  char *v153;
  void (*v154)(char *, char *, uint64_t);
  char *v155;
  void (*v156)(char *, char *, uint64_t);
  char *v157;
  void (*v158)(_QWORD, _QWORD, _QWORD);
  void (*v159)(_QWORD, _QWORD, _QWORD);
  uint64_t inited;
  uint64_t *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void (*v172)(uint64_t, uint64_t);
  char *v173;
  void (*v174)(_QWORD, _QWORD);
  uint64_t v175;
  char *v176;
  char *v177;
  char *v178;
  void (*v179)(_QWORD, _QWORD);
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  void (*v209)(uint64_t, uint64_t);
  char *v210;
  uint64_t v211;
  char *v212;
  uint64_t *v213;
  uint64_t v214;
  char *v215;
  char *v216;
  char *v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void (*v222)(uint64_t, uint64_t);
  uint64_t v223;
  char *v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  char *v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  void (*v234)(uint64_t, uint64_t);
  uint64_t v235;
  char *v236;
  uint64_t v237;
  char *v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t *v245;
  void (*v246)(uint64_t, uint64_t);
  uint64_t v247;
  char *v248;
  uint64_t v249;
  char *v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  void (*v257)(uint64_t, uint64_t);
  char *v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  char *v269;
  uint64_t v270;
  char *v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  void (*v278)(uint64_t, uint64_t);
  uint64_t v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  char *v283;
  char *v284;
  uint64_t v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v293;
  void (*v294)(char *, uint64_t, uint64_t);
  void (*v295)(void);
  char *v296;
  uint64_t v297;
  uint64_t v298;
  void (*v299)(char *, char *, uint64_t);
  void (*v300)(char *, char *, void (*)(_QWORD, _QWORD));
  char *v301;
  uint64_t v302;
  void (*v303)(char *, char *, uint64_t);
  void (*v304)(char *, char *, uint64_t);
  char *v305;
  char *v306;
  uint64_t v307;
  uint64_t v308;
  char *v309;
  void (*v310)(char *, char *, uint64_t);
  void (*v311)(void);
  char *v312;
  char *v313;
  uint64_t v314;
  void (*v315)(char *, char *, uint64_t);
  void (*v316)(void);
  char *v317;
  uint64_t v318;
  uint64_t v319;
  char *v320;
  void (*v321)(char *, char *, uint64_t);
  void (*v322)(void);
  char *v323;
  uint64_t v324;
  uint64_t v325;
  void (*v326)(char *, char *, uint64_t);
  void (*v327)(void);
  char *v328;
  char *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  void (*v333)(char *, char *, uint64_t);
  void (*v334)(void);
  char *v335;
  char *v336;
  uint64_t v337;
  uint64_t v338;
  void (*v339)(char *, char *, uint64_t);
  void (*v340)(void);
  char *v341;
  char *v342;
  uint64_t v343;
  uint64_t v344;
  void (*v345)(char *, char *, uint64_t);
  void (*v346)(void);
  char *v347;
  char *v348;
  uint64_t v349;
  uint64_t v350;
  char *v351;
  void (*v352)(_QWORD, _QWORD, _QWORD);
  void (*v353)(void);
  char *v354;
  char *v355;
  uint64_t v356;
  uint64_t v357;
  char *v358;
  char *v359;
  uint64_t v360;
  char *v361;
  uint64_t v362;
  uint64_t v363;
  char *v364;
  uint64_t v365;
  uint64_t v366;
  char *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  char *v374;
  uint64_t v375;
  uint64_t v376;
  char *v377;
  uint64_t v378;
  uint64_t v379;
  char *v380;
  uint64_t v381;
  char *v382;
  char *v383;
  char *v384;
  uint64_t v385;
  char *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  _QWORD *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  char *v402;
  uint64_t v403;
  char *v404;
  uint64_t v405;
  uint64_t v406;
  char *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  char *v420;
  char *v421;
  uint64_t v422;
  char *v423;
  uint64_t v424;
  char *v425;
  uint64_t v426;
  char *v427;
  uint64_t v428;
  uint64_t v429;
  char *v430;
  uint64_t v431;
  char *v432;
  uint64_t v433;
  char *v434;
  uint64_t TupleTypeMetadata2;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  _QWORD *v439;

  v341 = a8;
  v339 = a7;
  v409 = a6;
  v334 = a5;
  v407 = a4;
  v329 = a3;
  v405 = a2;
  v404 = a1;
  v332 = a49;
  v325 = a47;
  v437 = a43;
  v439 = a41;
  v428 = a39;
  v438 = a37;
  v418 = a35;
  v417 = a33;
  v416 = a31;
  v415 = a29;
  v414 = a27;
  v391 = a25;
  v388 = a24;
  v307 = a23;
  v318 = a45;
  v352 = a22;
  v354 = a21;
  v356 = a20;
  v353 = a19;
  v349 = a18;
  v347 = a17;
  v346 = a16;
  v345 = a15;
  v344 = a14;
  v340 = a13;
  v338 = a12;
  v335 = a11;
  v333 = a10;
  v331 = a9;
  v381 = a44;
  v436 = sub_2448EB508();
  v412 = *(_QWORD *)(v436 - 8);
  MEMORY[0x24BDAC7A8](v436);
  v380 = (char *)&v293 - v66;
  v379 = a42;
  v67 = sub_2448EB508();
  v410 = *(_QWORD *)(v67 - 8);
  v411 = v67;
  MEMORY[0x24BDAC7A8](v67);
  v377 = (char *)&v293 - v68;
  v372 = a40;
  v69 = sub_2448EB508();
  v406 = *(_QWORD *)(v69 - 8);
  v408 = v69;
  MEMORY[0x24BDAC7A8](v69);
  v367 = (char *)&v293 - v70;
  v363 = a38;
  v71 = sub_2448EB508();
  v400 = *(_QWORD *)(v71 - 8);
  v401 = v71;
  MEMORY[0x24BDAC7A8](v71);
  v361 = (char *)&v293 - v72;
  v360 = a36;
  v73 = sub_2448EB508();
  v398 = *(_QWORD *)(v73 - 8);
  v399 = v73;
  MEMORY[0x24BDAC7A8](v73);
  v358 = (char *)&v293 - v74;
  v357 = a34;
  v75 = sub_2448EB508();
  v396 = *(_QWORD *)(v75 - 8);
  v397 = v75;
  MEMORY[0x24BDAC7A8](v75);
  v350 = a32;
  v351 = (char *)&v293 - v76;
  v77 = sub_2448EB508();
  v394 = *(_QWORD *)(v77 - 8);
  v395 = v77;
  MEMORY[0x24BDAC7A8](v77);
  v342 = (char *)&v293 - v78;
  v343 = a30;
  v79 = sub_2448EB508();
  v392 = *(_QWORD *)(v79 - 8);
  v393 = v79;
  MEMORY[0x24BDAC7A8](v79);
  v336 = (char *)&v293 - v80;
  v337 = a28;
  v81 = sub_2448EB508();
  v389 = *(_QWORD *)(v81 - 8);
  v390 = v81;
  MEMORY[0x24BDAC7A8](v81);
  v328 = (char *)&v293 - v82;
  v330 = a26;
  v413 = sub_2448EB508();
  v387 = *(_QWORD *)(v413 - 8);
  MEMORY[0x24BDAC7A8](v413);
  v320 = (char *)&v293 - v83;
  v385 = sub_2448EB508();
  v298 = *(_QWORD *)(v385 - 8);
  MEMORY[0x24BDAC7A8](v385);
  v309 = (char *)&v293 - v84;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v378 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v85 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v374 = (char *)&v293 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v85);
  v434 = (char *)&v293 - v87;
  v433 = swift_getTupleTypeMetadata2();
  v376 = *(_QWORD *)(v433 - 8);
  v88 = MEMORY[0x24BDAC7A8](v433);
  v364 = (char *)&v293 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v88);
  v432 = (char *)&v293 - v90;
  v431 = swift_getTupleTypeMetadata2();
  v375 = *(_QWORD *)(v431 - 8);
  v91 = MEMORY[0x24BDAC7A8](v431);
  v359 = (char *)&v293 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v91);
  v430 = (char *)&v293 - v93;
  v429 = swift_getTupleTypeMetadata2();
  v373 = *(_QWORD *)(v429 - 8);
  v94 = MEMORY[0x24BDAC7A8](v429);
  v355 = (char *)&v293 - ((v95 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v94);
  v427 = (char *)&v293 - v96;
  v426 = swift_getTupleTypeMetadata2();
  v371 = *(_QWORD *)(v426 - 8);
  v97 = MEMORY[0x24BDAC7A8](v426);
  v348 = (char *)&v293 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v97);
  v425 = (char *)&v293 - v99;
  v424 = swift_getTupleTypeMetadata2();
  v370 = *(_QWORD *)(v424 - 8);
  v100 = MEMORY[0x24BDAC7A8](v424);
  v384 = (char *)&v293 - ((v101 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v100);
  v423 = (char *)&v293 - v102;
  v422 = swift_getTupleTypeMetadata2();
  v369 = *(_QWORD *)(v422 - 8);
  v103 = MEMORY[0x24BDAC7A8](v422);
  v383 = (char *)&v293 - ((v104 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v103);
  v421 = (char *)&v293 - v105;
  v106 = swift_getTupleTypeMetadata2();
  v368 = *(_QWORD *)(v106 - 8);
  v107 = MEMORY[0x24BDAC7A8](v106);
  v382 = (char *)&v293 - ((v108 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v107);
  v420 = (char *)&v293 - v109;
  v419 = swift_getTupleTypeMetadata2();
  v366 = *(_QWORD *)(v419 - 8);
  v110 = MEMORY[0x24BDAC7A8](v419);
  v313 = (char *)&v293 - ((v111 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v110);
  v113 = (char *)&v293 - v112;
  v114 = v391;
  v115 = swift_getTupleTypeMetadata2();
  v365 = *(_QWORD *)(v115 - 8);
  v116 = MEMORY[0x24BDAC7A8](v115);
  v306 = (char *)&v293 - ((v117 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v116);
  v119 = (char *)&v293 - v118;
  v120 = v307;
  v121 = v385;
  v122 = swift_getTupleTypeMetadata2();
  v123 = *(_QWORD *)(v122 - 8);
  v403 = v122;
  v362 = v123;
  v124 = MEMORY[0x24BDAC7A8](v122);
  v386 = (char *)&v293 - ((v125 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = MEMORY[0x24BDAC7A8](v124);
  v402 = (char *)&v293 - v127;
  v129 = *(_QWORD *)(v120 - 8);
  v296 = (char *)&v293 + *(int *)(v126 + 48) - v127;
  v128 = v296;
  v297 = v129;
  v295 = *(void (**)(void))(v129 + 16);
  ((void (*)(char *, char *, uint64_t))v295)((char *)&v293 - v127, v404, v120);
  v130 = v298;
  v294 = *(void (**)(char *, uint64_t, uint64_t))(v298 + 16);
  v294(v128, v405, v121);
  v405 = v115;
  v131 = &v119[*(int *)(v115 + 48)];
  v302 = *(v114 - 1);
  v132 = *(void (**)(char *, char *, void (*)(_QWORD, _QWORD)))(v302 + 16);
  v404 = v119;
  v300 = v132;
  v132(v119, v329, (void (*)(_QWORD, _QWORD))v114);
  v133 = *(void (**)(char *, char *, uint64_t))(v387 + 16);
  v301 = v131;
  v299 = v133;
  v133(v131, v407, v413);
  v134 = &v113[*(int *)(v419 + 48)];
  v308 = *(_QWORD *)(v414 - 8);
  v135 = *(void (**)(char *, char *, uint64_t))(v308 + 16);
  v407 = v113;
  v136 = v130;
  v304 = v135;
  ((void (*)(char *, void (*)(void)))v135)(v113, v334);
  v137 = *(void (**)(char *, char *, uint64_t))(v389 + 16);
  v305 = v134;
  v303 = v137;
  v137(v134, (char *)v409, v390);
  v409 = v106;
  v138 = v400;
  v139 = v418;
  v140 = &v420[*(int *)(v106 + 48)];
  v314 = *(_QWORD *)(v415 - 8);
  v141 = v120;
  v142 = v406;
  v311 = *(void (**)(void))(v314 + 16);
  v311();
  v143 = *(void (**)(char *, char *, uint64_t))(v392 + 16);
  v312 = v140;
  v310 = v143;
  v143(v140, v341, v393);
  v144 = &v421[*(int *)(v422 + 48)];
  v319 = *(v416 - 1);
  v316 = *(void (**)(void))(v319 + 16);
  v316();
  v145 = *(void (**)(char *, char *, uint64_t))(v394 + 16);
  v317 = v144;
  v315 = v145;
  v145(v144, (char *)v333, v395);
  v146 = &v423[*(int *)(v424 + 48)];
  v324 = *(_QWORD *)(v417 - 8);
  v147 = v398;
  v322 = *(void (**)(void))(v324 + 16);
  v322();
  v148 = *(void (**)(char *, char *, uint64_t))(v396 + 16);
  v323 = v146;
  v321 = v148;
  v148(v146, (char *)v338, v397);
  v149 = &v425[*(int *)(v426 + 48)];
  v331 = *(_QWORD *)(v139 - 8);
  v327 = *(void (**)(void))(v331 + 16);
  v327();
  v150 = *(void (**)(char *, char *, uint64_t))(v147 + 16);
  v329 = v149;
  v326 = v150;
  v150(v149, (char *)v344, v399);
  v151 = &v427[*(int *)(v429 + 48)];
  v338 = *(_QWORD *)(v438 - 8);
  v334 = *(void (**)(void))(v338 + 16);
  v334();
  v152 = *(void (**)(char *, char *, uint64_t))(v138 + 16);
  v335 = v151;
  v333 = v152;
  v152(v151, (char *)v346, v401);
  v153 = &v430[*(int *)(v431 + 48)];
  v344 = *(_QWORD *)(v428 - 8);
  v340 = *(void (**)(void))(v344 + 16);
  v340();
  v154 = *(void (**)(char *, char *, uint64_t))(v142 + 16);
  v341 = v153;
  v339 = v154;
  v154(v153, (char *)v349, v408);
  v155 = &v432[*(int *)(v433 + 48)];
  v349 = *(v439 - 1);
  v346 = *(void (**)(void))(v349 + 16);
  v346();
  v156 = *(void (**)(char *, char *, uint64_t))(v410 + 16);
  v347 = v155;
  v345 = v156;
  v156(v155, (char *)v356, v411);
  v157 = &v434[*(int *)(TupleTypeMetadata2 + 48)];
  v356 = *(_QWORD *)(v437 - 8);
  v353 = *(void (**)(void))(v356 + 16);
  v353();
  v158 = *(void (**)(_QWORD, _QWORD, _QWORD))(v412 + 16);
  v354 = v157;
  v159 = v352;
  v352 = v158;
  v158(v157, v159, v436);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738C570);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2448F3480;
  v161 = (uint64_t *)(inited + 48);
  *(_QWORD *)(inited + 32) = (*(uint64_t (**)(uint64_t))(v318 + 8))(v141);
  *(_QWORD *)(inited + 40) = v162;
  v163 = &v386[*(int *)(v403 + 48)];
  v164 = v141;
  v295();
  v165 = v385;
  v294(v163, (uint64_t)v296, v385);
  v166 = v136;
  v167 = v309;
  v168 = v163;
  v169 = v165;
  (*(void (**)(char *, char *, uint64_t))(v136 + 32))(v309, v168, v165);
  v170 = *(_QWORD *)(v388 - 8);
  v171 = v388;
  if ((*(unsigned int (**)(char *, uint64_t))(v170 + 48))(v167, 1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v297 + 8))(v386, v164);
    (*(void (**)(char *, uint64_t))(v166 + 8))(v167, v169);
    *(_QWORD *)(inited + 80) = 0;
    *(_OWORD *)v161 = 0u;
    *(_OWORD *)(inited + 64) = 0u;
  }
  else
  {
    v172 = *(void (**)(uint64_t, uint64_t))(a46 + 24);
    *(_QWORD *)(inited + 72) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 80) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v161);
    v172(v171, a46);
    (*(void (**)(char *, uint64_t))(v170 + 8))(v167, v171);
    (*(void (**)(char *, uint64_t))(v297 + 8))(v386, v164);
  }
  v388 = a51;
  v173 = v404;
  v174 = (void (*)(_QWORD, _QWORD))v391;
  *(_QWORD *)(inited + 88) = (*(uint64_t (**)(_QWORD *))(v325 + 8))(v391);
  *(_QWORD *)(inited + 96) = v175;
  v176 = v306;
  v177 = &v306[*(int *)(v405 + 48)];
  v178 = v173;
  v179 = v174;
  v300(v306, v178, v174);
  v180 = v413;
  v299(v177, v301, v413);
  v181 = v387;
  v182 = v320;
  (*(void (**)(char *, char *, uint64_t))(v387 + 32))(v320, v177, v180);
  v183 = v330;
  v184 = *(_QWORD *)(v330 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v184 + 48))(v182, 1, v330) == 1)
  {
    (*(void (**)(char *, _QWORD))(v302 + 8))(v176, v179);
    (*(void (**)(char *, uint64_t))(v181 + 8))(v182, v180);
    *(_QWORD *)(inited + 136) = 0;
    *(_OWORD *)(inited + 104) = 0u;
    *(_OWORD *)(inited + 120) = 0u;
  }
  else
  {
    v413 = *(_QWORD *)(a48 + 24);
    *(_QWORD *)(inited + 128) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 136) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 104));
    ((void (*)(uint64_t, uint64_t))v413)(v183, a48);
    (*(void (**)(char *, uint64_t))(v184 + 8))(v182, v183);
    (*(void (**)(char *, _QWORD))(v302 + 8))(v176, v179);
  }
  v185 = v389;
  v413 = a53;
  v186 = v407;
  v187 = v414;
  *(_QWORD *)(inited + 144) = (*(uint64_t (**)(uint64_t))(v332 + 8))(v414);
  *(_QWORD *)(inited + 152) = v188;
  v189 = v313;
  v190 = &v313[*(int *)(v419 + 48)];
  v304(v313, v186, v187);
  v191 = v390;
  v303(v190, v305, v390);
  v192 = v328;
  v193 = v190;
  v194 = v191;
  (*(void (**)(char *, char *, uint64_t))(v185 + 32))(v328, v193, v191);
  v195 = v337;
  v196 = *(_QWORD *)(v337 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v196 + 48))(v192, 1, v337) == 1)
  {
    (*(void (**)(char *, uint64_t))(v308 + 8))(v189, v187);
    (*(void (**)(char *, uint64_t))(v185 + 8))(v192, v194);
    *(_QWORD *)(inited + 192) = 0;
    *(_OWORD *)(inited + 160) = 0u;
    *(_OWORD *)(inited + 176) = 0u;
  }
  else
  {
    v391 = *(_QWORD **)(a50 + 24);
    *(_QWORD *)(inited + 184) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 192) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 160));
    ((void (*)(uint64_t, uint64_t))v391)(v195, a50);
    (*(void (**)(char *, uint64_t))(v196 + 8))(v192, v195);
    (*(void (**)(char *, uint64_t))(v308 + 8))(v189, v187);
  }
  v414 = a55;
  v197 = v420;
  v198 = v415;
  *(_QWORD *)(inited + 200) = (*(uint64_t (**)(uint64_t))(v388 + 8))(v415);
  *(_QWORD *)(inited + 208) = v199;
  v200 = v382;
  v201 = &v382[*(int *)(v409 + 48)];
  v202 = v197;
  v203 = v198;
  ((void (*)(char *, char *, uint64_t))v311)(v382, v202, v198);
  v204 = v393;
  v310(v201, v312, v393);
  v205 = v392;
  v206 = v336;
  (*(void (**)(char *, char *, uint64_t))(v392 + 32))(v336, v201, v204);
  v207 = v343;
  v208 = *(_QWORD *)(v343 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v208 + 48))(v206, 1, v343) == 1)
  {
    (*(void (**)(char *, uint64_t))(v314 + 8))(v200, v203);
    (*(void (**)(char *, uint64_t))(v205 + 8))(v206, v204);
    *(_QWORD *)(inited + 248) = 0;
    *(_OWORD *)(inited + 216) = 0u;
    *(_OWORD *)(inited + 232) = 0u;
  }
  else
  {
    v209 = *(void (**)(uint64_t, uint64_t))(a52 + 24);
    *(_QWORD *)(inited + 240) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 248) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 216));
    v209(v207, a52);
    (*(void (**)(char *, uint64_t))(v208 + 8))(v206, v207);
    (*(void (**)(char *, uint64_t))(v314 + 8))(v382, v203);
  }
  v210 = v342;
  v211 = v395;
  v415 = a57;
  v212 = v421;
  v213 = v416;
  *(_QWORD *)(inited + 256) = (*(uint64_t (**)(uint64_t *))(v413 + 8))(v416);
  *(_QWORD *)(inited + 264) = v214;
  v215 = v383;
  v216 = &v383[*(int *)(v422 + 48)];
  v217 = v212;
  v218 = v213;
  ((void (*)(char *, char *, uint64_t *))v316)(v383, v217, v213);
  v315(v216, v317, v211);
  v219 = v394;
  (*(void (**)(char *, char *, uint64_t))(v394 + 32))(v210, v216, v211);
  v220 = v350;
  v221 = *(_QWORD *)(v350 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v221 + 48))(v210, 1, v350) == 1)
  {
    (*(void (**)(char *, uint64_t *))(v319 + 8))(v215, v218);
    (*(void (**)(char *, uint64_t))(v219 + 8))(v210, v211);
    *(_QWORD *)(inited + 304) = 0;
    *(_OWORD *)(inited + 272) = 0u;
    *(_OWORD *)(inited + 288) = 0u;
  }
  else
  {
    v222 = *(void (**)(uint64_t, uint64_t))(a54 + 24);
    *(_QWORD *)(inited + 296) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 304) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 272));
    v222(v220, a54);
    (*(void (**)(char *, uint64_t))(v221 + 8))(v210, v220);
    (*(void (**)(char *, uint64_t *))(v319 + 8))(v383, v218);
  }
  v223 = v417;
  v224 = v351;
  v225 = v396;
  v417 = a59;
  v226 = v423;
  *(_QWORD *)(inited + 312) = (*(uint64_t (**)(uint64_t))(v414 + 8))(v223);
  *(_QWORD *)(inited + 320) = v227;
  v228 = v384;
  v229 = &v384[*(int *)(v424 + 48)];
  ((void (*)(char *, char *, uint64_t))v322)(v384, v226, v223);
  v230 = v397;
  v321(v229, v323, v397);
  (*(void (**)(char *, char *, uint64_t))(v225 + 32))(v224, v229, v230);
  v231 = v357;
  v232 = *(_QWORD *)(v357 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v232 + 48))(v224, 1, v357) == 1)
  {
    (*(void (**)(char *, uint64_t))(v324 + 8))(v228, v223);
    (*(void (**)(char *, uint64_t))(v225 + 8))(v224, v230);
    *(_QWORD *)(inited + 360) = 0;
    *(_OWORD *)(inited + 328) = 0u;
    *(_OWORD *)(inited + 344) = 0u;
  }
  else
  {
    v233 = v223;
    v234 = *(void (**)(uint64_t, uint64_t))(a56 + 24);
    *(_QWORD *)(inited + 352) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 360) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 328));
    v234(v231, a56);
    (*(void (**)(char *, uint64_t))(v232 + 8))(v224, v231);
    (*(void (**)(char *, uint64_t))(v324 + 8))(v384, v233);
  }
  v235 = v418;
  v418 = a61;
  v416 = (uint64_t *)(inited + 384);
  v236 = v425;
  *(_QWORD *)(inited + 368) = (*(uint64_t (**)(uint64_t))(v415 + 8))(v235);
  *(_QWORD *)(inited + 376) = v237;
  v238 = v348;
  v239 = &v348[*(int *)(v426 + 48)];
  ((void (*)(char *, char *, uint64_t))v327)(v348, v236, v235);
  v240 = v399;
  v326(v239, v329, v399);
  v241 = v398;
  v242 = v358;
  (*(void (**)(char *, char *, uint64_t))(v398 + 32))(v358, v239, v240);
  v243 = v360;
  v244 = *(_QWORD *)(v360 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v244 + 48))(v242, 1, v360) == 1)
  {
    (*(void (**)(char *, uint64_t))(v331 + 8))(v238, v235);
    (*(void (**)(char *, uint64_t))(v241 + 8))(v242, v240);
    v245 = v416;
    v416[4] = 0;
    *(_OWORD *)v245 = 0u;
    *((_OWORD *)v245 + 1) = 0u;
  }
  else
  {
    v246 = *(void (**)(uint64_t, uint64_t))(a58 + 24);
    *(_QWORD *)(inited + 408) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 416) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v416);
    v246(v243, a58);
    (*(void (**)(char *, uint64_t))(v244 + 8))(v242, v243);
    (*(void (**)(char *, uint64_t))(v331 + 8))(v238, v235);
  }
  v247 = v438;
  v416 = a63;
  v248 = v427;
  *(_QWORD *)(inited + 424) = (*(uint64_t (**)(uint64_t))(v417 + 8))(v438);
  *(_QWORD *)(inited + 432) = v249;
  v250 = v355;
  v251 = &v355[*(int *)(v429 + 48)];
  ((void (*)(char *, char *, uint64_t))v334)(v355, v248, v247);
  v252 = v401;
  v333(v251, v335, v401);
  v253 = v400;
  v254 = v361;
  (*(void (**)(char *, char *, uint64_t))(v400 + 32))(v361, v251, v252);
  v255 = v363;
  v256 = *(_QWORD *)(v363 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v256 + 48))(v254, 1, v363) == 1)
  {
    (*(void (**)(char *, uint64_t))(v338 + 8))(v250, v247);
    (*(void (**)(char *, uint64_t))(v253 + 8))(v254, v252);
    *(_QWORD *)(inited + 472) = 0;
    *(_OWORD *)(inited + 440) = 0u;
    *(_OWORD *)(inited + 456) = 0u;
  }
  else
  {
    v257 = *(void (**)(uint64_t, uint64_t))(a60 + 24);
    *(_QWORD *)(inited + 464) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 472) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 440));
    v257(v255, a60);
    (*(void (**)(char *, uint64_t))(v256 + 8))(v254, v255);
    (*(void (**)(char *, uint64_t))(v338 + 8))(v250, v438);
  }
  v258 = v367;
  v259 = v406;
  v438 = a65;
  v260 = v430;
  v261 = v428;
  *(_QWORD *)(inited + 480) = (*(uint64_t (**)(uint64_t))(v418 + 8))(v428);
  *(_QWORD *)(inited + 488) = v262;
  v263 = v359;
  v264 = &v359[*(int *)(v431 + 48)];
  ((void (*)(char *, char *, uint64_t))v340)(v359, v260, v261);
  v265 = v408;
  v339(v264, v341, v408);
  (*(void (**)(char *, char *, uint64_t))(v259 + 32))(v258, v264, v265);
  v266 = v372;
  v267 = *(_QWORD *)(v372 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v267 + 48))(v258, 1, v372) == 1)
  {
    (*(void (**)(char *, uint64_t))(v344 + 8))(v263, v261);
    (*(void (**)(char *, uint64_t))(v259 + 8))(v258, v265);
    *(_QWORD *)(inited + 528) = 0;
    *(_OWORD *)(inited + 496) = 0u;
    *(_OWORD *)(inited + 512) = 0u;
  }
  else
  {
    v418 = *(_QWORD *)(a62 + 24);
    *(_QWORD *)(inited + 520) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 528) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 496));
    ((void (*)(uint64_t, uint64_t))v418)(v266, a62);
    (*(void (**)(char *, uint64_t))(v267 + 8))(v258, v266);
    (*(void (**)(char *, uint64_t))(v344 + 8))(v263, v261);
  }
  v268 = v439;
  v269 = v432;
  *(_QWORD *)(inited + 536) = ((uint64_t (*)(_QWORD *))v416[1])(v439);
  *(_QWORD *)(inited + 544) = v270;
  v271 = v364;
  v272 = &v364[*(int *)(v433 + 48)];
  ((void (*)(char *, char *, _QWORD *))v346)(v364, v269, v268);
  v273 = v411;
  v345(v272, v347, v411);
  v274 = v410;
  v275 = v377;
  (*(void (**)(char *, char *, uint64_t))(v410 + 32))(v377, v272, v273);
  v276 = v379;
  v277 = *(_QWORD *)(v379 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v277 + 48))(v275, 1, v379) == 1)
  {
    (*(void (**)(char *, _QWORD *))(v349 + 8))(v271, v268);
    (*(void (**)(char *, uint64_t))(v274 + 8))(v275, v273);
    *(_QWORD *)(inited + 584) = 0;
    *(_OWORD *)(inited + 552) = 0u;
    *(_OWORD *)(inited + 568) = 0u;
  }
  else
  {
    v278 = *(void (**)(uint64_t, uint64_t))(a64 + 24);
    *(_QWORD *)(inited + 576) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 584) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 552));
    v278(v276, a64);
    (*(void (**)(char *, uint64_t))(v277 + 8))(v275, v276);
    (*(void (**)(char *, _QWORD *))(v349 + 8))(v271, v439);
  }
  v279 = v437;
  v280 = v412;
  v281 = v434;
  *(_QWORD *)(inited + 592) = (*(uint64_t (**)(uint64_t))(v438 + 8))(v437);
  *(_QWORD *)(inited + 600) = v282;
  v283 = v374;
  v284 = &v374[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v353)(v374, v281, v279);
  v285 = v436;
  v352(v284, v354, v436);
  v286 = v380;
  (*(void (**)(char *, char *, uint64_t))(v280 + 32))(v380, v284, v285);
  v287 = v280;
  v288 = v381;
  v289 = *(_QWORD *)(v381 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v289 + 48))(v286, 1, v381) == 1)
  {
    (*(void (**)(char *, uint64_t))(v356 + 8))(v283, v279);
    (*(void (**)(char *, uint64_t))(v287 + 8))(v286, v285);
    *(_QWORD *)(inited + 640) = 0;
    *(_OWORD *)(inited + 608) = 0u;
    *(_OWORD *)(inited + 624) = 0u;
  }
  else
  {
    v439 = *(_QWORD **)(a66 + 24);
    *(_QWORD *)(inited + 632) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 640) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 608));
    ((void (*)(uint64_t, uint64_t))v439)(v288, a66);
    (*(void (**)(char *, uint64_t))(v289 + 8))(v286, v288);
    (*(void (**)(char *, uint64_t))(v356 + 8))(v283, v279);
  }
  v290 = sub_2447C8898(inited);
  v291 = sub_2448546EC(v290);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v378 + 8))(v434, TupleTypeMetadata2);
  (*(void (**)(char *, uint64_t))(v376 + 8))(v432, v433);
  (*(void (**)(char *, uint64_t))(v375 + 8))(v430, v431);
  (*(void (**)(char *, uint64_t))(v373 + 8))(v427, v429);
  (*(void (**)(char *, uint64_t))(v371 + 8))(v425, v426);
  (*(void (**)(char *, uint64_t))(v370 + 8))(v423, v424);
  (*(void (**)(char *, uint64_t))(v369 + 8))(v421, v422);
  (*(void (**)(char *, uint64_t))(v368 + 8))(v420, v409);
  (*(void (**)(char *, uint64_t))(v366 + 8))(v407, v419);
  (*(void (**)(char *, uint64_t))(v365 + 8))(v404, v405);
  (*(void (**)(char *, uint64_t))(v362 + 8))(v402, v403);
  return v291;
}

uint64_t static PropertyListBuilder.buildBlock<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X>(_:_:_:_:_:_:_:_:_:_:_:_:)(char *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, char *a6, char *a7, void (*a8)(char *, char *, uint64_t), void (*a9)(void), char *a10, void (*a11)(char *, char *, uint64_t), void (*a12)(void), uint64_t a13, void (*a14)(void), char *a15, uint64_t a16, void (*a17)(char *, char *, uint64_t), void (*a18)(void), char *a19, uint64_t a20,void (*a21)(void),uint64_t a22,char *a23,void (*a24)(_QWORD, _QWORD, _QWORD),uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,_QWORD *a43,uint64_t a44,_QWORD *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a65;
  uint64_t a66;
  uint64_t a67;
  uint64_t a68;
  uint64_t a69;
  uint64_t a70;
  uint64_t a71;
  uint64_t a72;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  void (*v144)(char *, char *, uint64_t);
  void (*v145)(char *, char *, uint64_t);
  char *v146;
  void (*v147)(char *, char *, uint64_t);
  uint64_t v148;
  uint64_t v149;
  void (*v150)(char *, char *, uint64_t);
  char *v151;
  void (*v152)(char *, char *, uint64_t);
  uint64_t v153;
  void (*v154)(char *, char *, uint64_t);
  char *v155;
  void (*v156)(char *, char *, uint64_t);
  char *v157;
  void (*v158)(char *, char *, uint64_t);
  char *v159;
  uint64_t v160;
  void (*v161)(char *, char *, uint64_t);
  char *v162;
  void (*v163)(char *, char *, uint64_t);
  char *v164;
  void (*v165)(char *, char *, uint64_t);
  char *v166;
  void (*v167)(char *, char *, uint64_t);
  char *v168;
  void (*v169)(char *, char *, uint64_t);
  char *v170;
  void (*v171)(_QWORD, _QWORD, _QWORD);
  void (*v172)(_QWORD, _QWORD, _QWORD);
  uint64_t inited;
  uint64_t *v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t *v178;
  char *v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  void (*v184)(uint64_t, uint64_t);
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  void (*v198)(uint64_t, uint64_t);
  uint64_t v199;
  char *v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  void (*v209)(uint64_t, uint64_t);
  char *v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  void (*v220)(uint64_t, uint64_t);
  uint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  char *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  char *v236;
  uint64_t *v237;
  uint64_t v238;
  char *v239;
  char *v240;
  char *v241;
  uint64_t *v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  char *v253;
  char *v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  void (*v259)(uint64_t, uint64_t);
  uint64_t v260;
  uint64_t v261;
  char *v262;
  char *v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  char *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void (*v272)(uint64_t, uint64_t);
  uint64_t v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  char *v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t *v285;
  void (*v286)(uint64_t, uint64_t);
  _QWORD *v287;
  char *v288;
  char *v289;
  uint64_t v290;
  char *v291;
  char *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  _QWORD *v297;
  char *v298;
  uint64_t v299;
  char *v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  uint64_t v305;
  uint64_t v306;
  void (*v307)(uint64_t, uint64_t);
  uint64_t v308;
  uint64_t v309;
  char *v310;
  uint64_t v311;
  char *v312;
  char *v313;
  uint64_t v314;
  char *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v322;
  void (*v323)(char *, uint64_t, uint64_t);
  void (*v324)(void);
  char *v325;
  uint64_t v326;
  uint64_t v327;
  void (*v328)(char *, char *, uint64_t);
  void (*v329)(char *, char *, uint64_t);
  char *v330;
  uint64_t v331;
  void (*v332)(char *, char *, uint64_t);
  void (*v333)(char *, char *, uint64_t);
  char *v334;
  char *v335;
  uint64_t v336;
  char *v337;
  void (*v338)(char *, char *, uint64_t);
  void (*v339)(char *, char *, uint64_t);
  char *v340;
  char *v341;
  uint64_t v342;
  void (*v343)(char *, char *, uint64_t);
  void (*v344)(void);
  char *v345;
  uint64_t v346;
  uint64_t v347;
  char *v348;
  void (*v349)(char *, char *, uint64_t);
  void (*v350)(void);
  char *v351;
  uint64_t v352;
  void (*v353)(char *, char *, uint64_t);
  void (*v354)(void);
  char *v355;
  uint64_t v356;
  char *v357;
  char *v358;
  uint64_t v359;
  void (*v360)(char *, char *, uint64_t);
  void (*v361)(void);
  char *v362;
  uint64_t v363;
  char *v364;
  uint64_t v365;
  char *v366;
  uint64_t v367;
  void (*v368)(char *, char *, uint64_t);
  void (*v369)(void);
  char *v370;
  uint64_t v371;
  char *v372;
  void (*v373)(char *, char *, uint64_t);
  void (*v374)(void);
  uint64_t v375;
  char *v376;
  uint64_t v377;
  void (*v378)(char *, char *, uint64_t);
  void (*v379)(void);
  char *v380;
  char *v381;
  uint64_t v382;
  uint64_t v383;
  void (*v384)(_QWORD, _QWORD, _QWORD);
  void (*v385)(void);
  char *v386;
  uint64_t v387;
  char *v388;
  uint64_t v389;
  char *v390;
  uint64_t v391;
  char *v392;
  char *v393;
  uint64_t v394;
  char *v395;
  uint64_t v396;
  uint64_t v397;
  char *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  char *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  char *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  char *v413;
  uint64_t v414;
  char *v415;
  uint64_t v416;
  char *v417;
  char *v418;
  char *v419;
  char *v420;
  uint64_t v421;
  uint64_t *v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  char *v441;
  uint64_t v442;
  char *v443;
  uint64_t v444;
  char *v445;
  uint64_t v446;
  char *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  char *v461;
  uint64_t v462;
  char *v463;
  uint64_t v464;
  char *v465;
  uint64_t v466;
  char *v467;
  uint64_t v468;
  char *v469;
  uint64_t v470;
  char *v471;
  _QWORD *v472;
  uint64_t v473;
  char *v474;
  uint64_t v475;
  char *v476;
  uint64_t TupleTypeMetadata2;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  _QWORD *v481;

  v373 = a8;
  v370 = a7;
  v447 = a6;
  v365 = a5;
  v446 = a4;
  v445 = a3;
  v444 = a2;
  v443 = a1;
  v363 = a53;
  v356 = a51;
  v479 = a47;
  v481 = a45;
  v472 = a43;
  v459 = a41;
  v458 = a39;
  v457 = a37;
  v456 = a35;
  v455 = a33;
  v454 = a31;
  v480 = a29;
  v428 = a28;
  v425 = a27;
  v424 = a26;
  v421 = a25;
  v347 = a49;
  v384 = a24;
  v386 = a23;
  v389 = a22;
  v385 = a21;
  v383 = a20;
  v380 = a19;
  v379 = a18;
  v378 = a17;
  v377 = a16;
  v376 = a15;
  v374 = a14;
  v371 = a13;
  v369 = a12;
  v368 = a11;
  v362 = a10;
  v361 = a9;
  v416 = a48;
  v478 = sub_2448EB508();
  v452 = *(_QWORD *)(v478 - 8);
  MEMORY[0x24BDAC7A8](v478);
  v415 = (char *)&v322 - v72;
  v414 = a46;
  v73 = sub_2448EB508();
  v450 = *(_QWORD *)(v73 - 8);
  v451 = v73;
  MEMORY[0x24BDAC7A8](v73);
  v413 = (char *)&v322 - v74;
  v408 = a44;
  v75 = sub_2448EB508();
  v448 = *(_QWORD *)(v75 - 8);
  v449 = v75;
  MEMORY[0x24BDAC7A8](v75);
  v403 = (char *)&v322 - v76;
  v400 = a42;
  v77 = sub_2448EB508();
  v439 = *(_QWORD *)(v77 - 8);
  v440 = v77;
  MEMORY[0x24BDAC7A8](v77);
  v395 = (char *)&v322 - v78;
  v394 = a40;
  v79 = sub_2448EB508();
  v437 = *(_QWORD *)(v79 - 8);
  v438 = v79;
  MEMORY[0x24BDAC7A8](v79);
  v392 = (char *)&v322 - v80;
  v391 = a38;
  v81 = sub_2448EB508();
  v435 = *(_QWORD *)(v81 - 8);
  v436 = v81;
  MEMORY[0x24BDAC7A8](v81);
  v388 = (char *)&v322 - v82;
  v387 = a36;
  v83 = sub_2448EB508();
  v433 = *(_QWORD *)(v83 - 8);
  v434 = v83;
  MEMORY[0x24BDAC7A8](v83);
  v381 = (char *)&v322 - v84;
  v382 = a34;
  v85 = sub_2448EB508();
  v431 = *(_QWORD *)(v85 - 8);
  v432 = v85;
  MEMORY[0x24BDAC7A8](v85);
  v372 = (char *)&v322 - v86;
  v375 = a32;
  v87 = sub_2448EB508();
  v429 = *(_QWORD *)(v87 - 8);
  v430 = v87;
  MEMORY[0x24BDAC7A8](v87);
  v364 = (char *)&v322 - v88;
  v367 = a30;
  v89 = sub_2448EB508();
  v426 = *(_QWORD *)(v89 - 8);
  v427 = v89;
  MEMORY[0x24BDAC7A8](v89);
  v357 = (char *)&v322 - v90;
  v453 = sub_2448EB508();
  v423 = *(_QWORD *)(v453 - 8);
  MEMORY[0x24BDAC7A8](v453);
  v348 = (char *)&v322 - v91;
  v326 = sub_2448EB508();
  v422 = *(uint64_t **)(v326 - 8);
  MEMORY[0x24BDAC7A8](v326);
  v337 = (char *)&v322 - v92;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v412 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v93 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v409 = (char *)&v322 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v93);
  v476 = (char *)&v322 - v95;
  v475 = swift_getTupleTypeMetadata2();
  v411 = *(_QWORD *)(v475 - 8);
  v96 = MEMORY[0x24BDAC7A8](v475);
  v398 = (char *)&v322 - ((v97 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v96);
  v474 = (char *)&v322 - v98;
  v473 = swift_getTupleTypeMetadata2();
  v410 = *(_QWORD *)(v473 - 8);
  v99 = MEMORY[0x24BDAC7A8](v473);
  v393 = (char *)&v322 - ((v100 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v99);
  v471 = (char *)&v322 - v101;
  v470 = swift_getTupleTypeMetadata2();
  v407 = *(_QWORD *)(v470 - 8);
  v102 = MEMORY[0x24BDAC7A8](v470);
  v390 = (char *)&v322 - ((v103 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v102);
  v469 = (char *)&v322 - v104;
  v468 = swift_getTupleTypeMetadata2();
  v406 = *(_QWORD *)(v468 - 8);
  v105 = MEMORY[0x24BDAC7A8](v468);
  v419 = (char *)&v322 - ((v106 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v105);
  v467 = (char *)&v322 - v107;
  v466 = swift_getTupleTypeMetadata2();
  v405 = *(_QWORD *)(v466 - 8);
  v108 = MEMORY[0x24BDAC7A8](v466);
  v418 = (char *)&v322 - ((v109 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v108);
  v465 = (char *)&v322 - v110;
  v464 = swift_getTupleTypeMetadata2();
  v404 = *(_QWORD *)(v464 - 8);
  v111 = MEMORY[0x24BDAC7A8](v464);
  v366 = (char *)&v322 - ((v112 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v111);
  v463 = (char *)&v322 - v113;
  v462 = swift_getTupleTypeMetadata2();
  v402 = *(_QWORD *)(v462 - 8);
  v114 = MEMORY[0x24BDAC7A8](v462);
  v358 = (char *)&v322 - ((v115 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v114);
  v461 = (char *)&v322 - v116;
  v460 = swift_getTupleTypeMetadata2();
  v401 = *(_QWORD *)(v460 - 8);
  v117 = MEMORY[0x24BDAC7A8](v460);
  v417 = (char *)&v322 - ((v118 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v117);
  v120 = (char *)&v322 - v119;
  v121 = swift_getTupleTypeMetadata2();
  v399 = *(_QWORD *)(v121 - 8);
  v122 = MEMORY[0x24BDAC7A8](v121);
  v341 = (char *)&v322 - ((v123 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v122);
  v125 = (char *)&v322 - v124;
  v126 = v425;
  v127 = swift_getTupleTypeMetadata2();
  v397 = *(_QWORD *)(v127 - 8);
  v128 = MEMORY[0x24BDAC7A8](v127);
  v335 = (char *)&v322 - ((v129 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v128);
  v131 = (char *)&v322 - v130;
  v132 = v421;
  v133 = v326;
  v134 = swift_getTupleTypeMetadata2();
  v135 = *(_QWORD *)(v134 - 8);
  v442 = v134;
  v396 = v135;
  v136 = MEMORY[0x24BDAC7A8](v134);
  v420 = (char *)&v322 - ((v137 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = MEMORY[0x24BDAC7A8](v136);
  v441 = (char *)&v322 - v139;
  v140 = (char *)&v322 + *(int *)(v138 + 48) - v139;
  v327 = *(_QWORD *)(v132 - 8);
  v324 = *(void (**)(void))(v327 + 16);
  v325 = v140;
  ((void (*)(char *, char *, uint64_t))v324)((char *)&v322 - v139, v443, v132);
  v323 = (void (*)(char *, uint64_t, uint64_t))v422[2];
  v141 = v140;
  v142 = v133;
  v323(v141, v444, v133);
  v444 = v127;
  v143 = &v131[*(int *)(v127 + 48)];
  v331 = *(_QWORD *)(v126 - 8);
  v144 = *(void (**)(char *, char *, uint64_t))(v331 + 16);
  v443 = v131;
  v329 = v144;
  v144(v131, v445, v126);
  v145 = *(void (**)(char *, char *, uint64_t))(v423 + 16);
  v330 = v143;
  v328 = v145;
  v145(v143, (char *)v446, v453);
  v446 = v121;
  v146 = &v125[*(int *)(v121 + 48)];
  v336 = *(_QWORD *)(v480 - 8);
  v147 = *(void (**)(char *, char *, uint64_t))(v336 + 16);
  v445 = v125;
  v148 = v437;
  v149 = v439;
  v333 = v147;
  ((void (*)(char *, uint64_t))v147)(v125, v365);
  v150 = *(void (**)(char *, char *, uint64_t))(v426 + 16);
  v334 = v146;
  v332 = v150;
  v150(v146, v447, v427);
  v151 = &v120[*(int *)(v460 + 48)];
  v342 = *(_QWORD *)(v454 - 8);
  v152 = *(void (**)(char *, char *, uint64_t))(v342 + 16);
  v447 = v120;
  v153 = v421;
  v339 = v152;
  ((void (*)(char *, char *))v152)(v120, v370);
  v154 = *(void (**)(char *, char *, uint64_t))(v429 + 16);
  v340 = v151;
  v338 = v154;
  v154(v151, (char *)v373, v430);
  v155 = &v461[*(int *)(v462 + 48)];
  v346 = *(_QWORD *)(v455 - 8);
  v344 = *(void (**)(void))(v346 + 16);
  v344();
  v156 = *(void (**)(char *, char *, uint64_t))(v431 + 16);
  v345 = v155;
  v343 = v156;
  v156(v155, v362, v432);
  v157 = &v463[*(int *)(v464 + 48)];
  v352 = *(v456 - 1);
  v350 = *(void (**)(void))(v352 + 16);
  v350();
  v158 = *(void (**)(char *, char *, uint64_t))(v433 + 16);
  v351 = v157;
  v349 = v158;
  v158(v157, (char *)v369, v434);
  v159 = &v465[*(int *)(v466 + 48)];
  v359 = *(_QWORD *)(v457 - 8);
  v160 = v459;
  v354 = *(void (**)(void))(v359 + 16);
  v354();
  v161 = *(void (**)(char *, char *, uint64_t))(v435 + 16);
  v355 = v159;
  v353 = v161;
  v161(v159, (char *)v374, v436);
  v162 = &v467[*(int *)(v468 + 48)];
  v365 = *(_QWORD *)(v458 - 8);
  v361 = *(void (**)(void))(v365 + 16);
  v361();
  v163 = *(void (**)(char *, char *, uint64_t))(v148 + 16);
  v362 = v162;
  v360 = v163;
  v163(v162, (char *)v377, v438);
  v164 = &v469[*(int *)(v470 + 48)];
  v371 = *(_QWORD *)(v160 - 8);
  v369 = *(void (**)(void))(v371 + 16);
  v369();
  v165 = *(void (**)(char *, char *, uint64_t))(v149 + 16);
  v370 = v164;
  v368 = v165;
  v165(v164, (char *)v379, v440);
  v166 = &v471[*(int *)(v473 + 48)];
  v377 = *(v472 - 1);
  v374 = *(void (**)(void))(v377 + 16);
  v374();
  v167 = *(void (**)(char *, char *, uint64_t))(v448 + 16);
  v376 = v166;
  v373 = v167;
  v167(v166, (char *)v383, v449);
  v168 = &v474[*(int *)(v475 + 48)];
  v383 = *(v481 - 1);
  v379 = *(void (**)(void))(v383 + 16);
  v379();
  v169 = *(void (**)(char *, char *, uint64_t))(v450 + 16);
  v380 = v168;
  v378 = v169;
  v169(v168, (char *)v389, v451);
  v170 = &v476[*(int *)(TupleTypeMetadata2 + 48)];
  v389 = *(_QWORD *)(v479 - 8);
  v385 = *(void (**)(void))(v389 + 16);
  v385();
  v171 = *(void (**)(_QWORD, _QWORD, _QWORD))(v452 + 16);
  v386 = v170;
  v172 = v384;
  v384 = v171;
  v171(v170, v172, v478);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738C570);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2448F3490;
  v174 = (uint64_t *)(inited + 48);
  *(_QWORD *)(inited + 32) = (*(uint64_t (**)(uint64_t))(v347 + 8))(v153);
  *(_QWORD *)(inited + 40) = v175;
  v176 = &v420[*(int *)(v442 + 48)];
  v177 = v153;
  v324();
  v323(v176, (uint64_t)v325, v142);
  v178 = v422;
  v179 = v337;
  ((void (*)(char *, char *, uint64_t))v422[4])(v337, v176, v142);
  v180 = *(_QWORD *)(v424 - 8);
  v181 = v179;
  v182 = v179;
  v183 = v424;
  if ((*(unsigned int (**)(char *, uint64_t))(v180 + 48))(v182, 1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v327 + 8))(v420, v177);
    ((void (*)(char *, uint64_t))v178[1])(v181, v142);
    *(_QWORD *)(inited + 80) = 0;
    *(_OWORD *)v174 = 0u;
    *(_OWORD *)(inited + 64) = 0u;
  }
  else
  {
    v184 = *(void (**)(uint64_t, uint64_t))(a50 + 24);
    *(_QWORD *)(inited + 72) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 80) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v174);
    v184(v183, a50);
    (*(void (**)(char *, uint64_t))(v180 + 8))(v181, v183);
    (*(void (**)(char *, uint64_t))(v327 + 8))(v420, v177);
  }
  v424 = a55;
  v422 = (uint64_t *)(inited + 104);
  v185 = v443;
  v186 = v425;
  *(_QWORD *)(inited + 88) = (*(uint64_t (**)(uint64_t))(v356 + 8))(v425);
  *(_QWORD *)(inited + 96) = v187;
  v188 = v335;
  v189 = &v335[*(int *)(v444 + 48)];
  v190 = v185;
  v191 = v186;
  v329(v335, v190, v186);
  v192 = v453;
  v328(v189, v330, v453);
  v193 = v423;
  v194 = v348;
  (*(void (**)(char *, char *, uint64_t))(v423 + 32))(v348, v189, v192);
  v195 = v428;
  v196 = *(_QWORD *)(v428 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v196 + 48))(v194, 1, v428) == 1)
  {
    (*(void (**)(char *, uint64_t))(v331 + 8))(v188, v191);
    (*(void (**)(char *, uint64_t))(v193 + 8))(v194, v192);
    v197 = v422;
    v422[4] = 0;
    *(_OWORD *)v197 = 0u;
    *((_OWORD *)v197 + 1) = 0u;
  }
  else
  {
    v198 = *(void (**)(uint64_t, uint64_t))(a52 + 24);
    *(_QWORD *)(inited + 128) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 136) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v422);
    v198(v195, a52);
    (*(void (**)(char *, uint64_t))(v196 + 8))(v194, v195);
    (*(void (**)(char *, uint64_t))(v331 + 8))(v188, v191);
  }
  v199 = v480;
  v453 = a57;
  v200 = v445;
  *(_QWORD *)(inited + 144) = (*(uint64_t (**)(uint64_t))(v363 + 8))(v480);
  *(_QWORD *)(inited + 152) = v201;
  v202 = v341;
  v203 = &v341[*(int *)(v446 + 48)];
  v333(v341, v200, v199);
  v204 = v427;
  v332(v203, v334, v427);
  v205 = v426;
  v206 = v357;
  (*(void (**)(char *, char *, uint64_t))(v426 + 32))(v357, v203, v204);
  v207 = v367;
  v208 = *(_QWORD *)(v367 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v208 + 48))(v206, 1, v367) == 1)
  {
    (*(void (**)(char *, uint64_t))(v336 + 8))(v202, v199);
    (*(void (**)(char *, uint64_t))(v205 + 8))(v206, v204);
    *(_QWORD *)(inited + 192) = 0;
    *(_OWORD *)(inited + 160) = 0u;
    *(_OWORD *)(inited + 176) = 0u;
  }
  else
  {
    v209 = *(void (**)(uint64_t, uint64_t))(a54 + 24);
    *(_QWORD *)(inited + 184) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 192) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 160));
    v209(v207, a54);
    (*(void (**)(char *, uint64_t))(v208 + 8))(v206, v207);
    (*(void (**)(char *, uint64_t))(v336 + 8))(v202, v480);
  }
  v210 = v364;
  v211 = v430;
  v480 = a59;
  v212 = v447;
  v213 = v454;
  *(_QWORD *)(inited + 200) = (*(uint64_t (**)(uint64_t))(v424 + 8))(v454);
  *(_QWORD *)(inited + 208) = v214;
  v215 = v417;
  v216 = &v417[*(int *)(v460 + 48)];
  v339(v417, v212, v213);
  v338(v216, v340, v211);
  v217 = v429;
  (*(void (**)(char *, char *, uint64_t))(v429 + 32))(v210, v216, v211);
  v218 = v375;
  v219 = *(_QWORD *)(v375 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v219 + 48))(v210, 1, v375) == 1)
  {
    (*(void (**)(char *, uint64_t))(v342 + 8))(v215, v213);
    (*(void (**)(char *, uint64_t))(v217 + 8))(v210, v211);
    *(_QWORD *)(inited + 248) = 0;
    *(_OWORD *)(inited + 216) = 0u;
    *(_OWORD *)(inited + 232) = 0u;
  }
  else
  {
    v220 = *(void (**)(uint64_t, uint64_t))(a56 + 24);
    *(_QWORD *)(inited + 240) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 248) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 216));
    v220(v218, a56);
    (*(void (**)(char *, uint64_t))(v219 + 8))(v210, v218);
    (*(void (**)(char *, uint64_t))(v342 + 8))(v417, v213);
  }
  v221 = v431;
  v454 = a61;
  v222 = v461;
  v223 = v455;
  *(_QWORD *)(inited + 256) = (*(uint64_t (**)(uint64_t))(v453 + 8))(v455);
  *(_QWORD *)(inited + 264) = v224;
  v225 = v358;
  v226 = &v358[*(int *)(v462 + 48)];
  v227 = v222;
  v228 = v223;
  ((void (*)(char *, char *, uint64_t))v344)(v358, v227, v223);
  v229 = v432;
  v343(v226, v345, v432);
  v230 = v372;
  (*(void (**)(char *, char *, uint64_t))(v221 + 32))(v372, v226, v229);
  v231 = v382;
  v232 = *(_QWORD *)(v382 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v232 + 48))(v230, 1, v382) == 1)
  {
    (*(void (**)(char *, uint64_t))(v346 + 8))(v225, v228);
    (*(void (**)(char *, uint64_t))(v221 + 8))(v230, v229);
    *(_QWORD *)(inited + 304) = 0;
    *(_OWORD *)(inited + 272) = 0u;
    *(_OWORD *)(inited + 288) = 0u;
  }
  else
  {
    v453 = *(_QWORD *)(a58 + 24);
    *(_QWORD *)(inited + 296) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 304) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 272));
    ((void (*)(uint64_t, uint64_t))v453)(v231, a58);
    (*(void (**)(char *, uint64_t))(v232 + 8))(v230, v231);
    (*(void (**)(char *, uint64_t))(v346 + 8))(v225, v228);
  }
  v233 = v387;
  v234 = v381;
  v235 = v433;
  v455 = a63;
  v236 = v463;
  v237 = v456;
  *(_QWORD *)(inited + 312) = (*(uint64_t (**)(uint64_t *))(v480 + 8))(v456);
  *(_QWORD *)(inited + 320) = v238;
  v239 = v366;
  v240 = &v366[*(int *)(v464 + 48)];
  v241 = v236;
  v242 = v237;
  ((void (*)(char *, char *, uint64_t *))v350)(v366, v241, v237);
  v243 = v434;
  v349(v240, v351, v434);
  v244 = v240;
  v245 = v243;
  (*(void (**)(char *, char *, uint64_t))(v235 + 32))(v234, v244, v243);
  v246 = *(_QWORD *)(v233 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v246 + 48))(v234, 1, v233) == 1)
  {
    (*(void (**)(char *, uint64_t *))(v352 + 8))(v239, v242);
    (*(void (**)(char *, uint64_t))(v235 + 8))(v234, v245);
    *(_QWORD *)(inited + 360) = 0;
    *(_OWORD *)(inited + 328) = 0u;
    *(_OWORD *)(inited + 344) = 0u;
  }
  else
  {
    v480 = *(_QWORD *)(a60 + 24);
    *(_QWORD *)(inited + 352) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 360) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 328));
    ((void (*)(uint64_t, uint64_t))v480)(v233, a60);
    (*(void (**)(char *, uint64_t))(v246 + 8))(v234, v233);
    (*(void (**)(char *, uint64_t *))(v352 + 8))(v239, v242);
  }
  v247 = v436;
  v248 = v435;
  v480 = a65;
  v249 = v465;
  v250 = v457;
  *(_QWORD *)(inited + 368) = (*(uint64_t (**)(uint64_t))(v454 + 8))(v457);
  *(_QWORD *)(inited + 376) = v251;
  v252 = v418;
  v253 = &v418[*(int *)(v466 + 48)];
  v254 = v249;
  v255 = v250;
  ((void (*)(char *, char *, uint64_t))v354)(v418, v254, v250);
  v353(v253, v355, v247);
  v256 = v388;
  (*(void (**)(char *, char *, uint64_t))(v248 + 32))(v388, v253, v247);
  v257 = v391;
  v258 = *(_QWORD *)(v391 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v258 + 48))(v256, 1, v391) == 1)
  {
    (*(void (**)(char *, uint64_t))(v359 + 8))(v252, v255);
    (*(void (**)(char *, uint64_t))(v248 + 8))(v256, v247);
    *(_QWORD *)(inited + 416) = 0;
    *(_OWORD *)(inited + 384) = 0u;
    *(_OWORD *)(inited + 400) = 0u;
  }
  else
  {
    v259 = *(void (**)(uint64_t, uint64_t))(a62 + 24);
    *(_QWORD *)(inited + 408) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 416) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 384));
    v259(v257, a62);
    (*(void (**)(char *, uint64_t))(v258 + 8))(v256, v257);
    (*(void (**)(char *, uint64_t))(v359 + 8))(v418, v255);
  }
  v260 = v458;
  v261 = v437;
  v262 = v419;
  v458 = a67;
  v263 = v467;
  *(_QWORD *)(inited + 424) = (*(uint64_t (**)(uint64_t))(v455 + 8))(v260);
  *(_QWORD *)(inited + 432) = v264;
  v265 = &v262[*(int *)(v468 + 48)];
  ((void (*)(char *, char *, uint64_t))v361)(v262, v263, v260);
  v266 = v438;
  v360(v265, v362, v438);
  v267 = v392;
  v268 = v265;
  v269 = v266;
  (*(void (**)(char *, char *, uint64_t))(v261 + 32))(v392, v268, v266);
  v270 = v394;
  v271 = *(_QWORD *)(v394 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v271 + 48))(v267, 1, v394) == 1)
  {
    (*(void (**)(char *, uint64_t))(v365 + 8))(v262, v260);
    (*(void (**)(char *, uint64_t))(v261 + 8))(v267, v269);
    *(_QWORD *)(inited + 472) = 0;
    *(_OWORD *)(inited + 440) = 0u;
    *(_OWORD *)(inited + 456) = 0u;
  }
  else
  {
    v272 = *(void (**)(uint64_t, uint64_t))(a64 + 24);
    *(_QWORD *)(inited + 464) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 472) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 440));
    v272(v270, a64);
    (*(void (**)(char *, uint64_t))(v271 + 8))(v267, v270);
    (*(void (**)(char *, uint64_t))(v365 + 8))(v419, v260);
  }
  v273 = v439;
  v457 = a69;
  v456 = (uint64_t *)(inited + 496);
  v274 = v469;
  v275 = v459;
  *(_QWORD *)(inited + 480) = (*(uint64_t (**)(uint64_t))(v480 + 8))(v459);
  *(_QWORD *)(inited + 488) = v276;
  v277 = v390;
  v278 = &v390[*(int *)(v470 + 48)];
  v279 = v274;
  v280 = v275;
  ((void (*)(char *, char *, uint64_t))v369)(v390, v279, v275);
  v281 = v440;
  v368(v278, v370, v440);
  v282 = v395;
  (*(void (**)(char *, char *, uint64_t))(v273 + 32))(v395, v278, v281);
  v283 = v400;
  v284 = *(_QWORD *)(v400 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v284 + 48))(v282, 1, v400) == 1)
  {
    (*(void (**)(char *, uint64_t))(v371 + 8))(v277, v275);
    (*(void (**)(char *, uint64_t))(v273 + 8))(v282, v281);
    v285 = v456;
    v456[4] = 0;
    *(_OWORD *)v285 = 0u;
    *((_OWORD *)v285 + 1) = 0u;
  }
  else
  {
    v286 = *(void (**)(uint64_t, uint64_t))(a66 + 24);
    *(_QWORD *)(inited + 520) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 528) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v456);
    v286(v283, a66);
    (*(void (**)(char *, uint64_t))(v284 + 8))(v282, v283);
    (*(void (**)(char *, uint64_t))(v371 + 8))(v277, v280);
  }
  v287 = v472;
  v288 = v403;
  v480 = a71;
  v289 = v471;
  *(_QWORD *)(inited + 536) = (*(uint64_t (**)(_QWORD *))(v458 + 8))(v472);
  *(_QWORD *)(inited + 544) = v290;
  v291 = v393;
  v292 = &v393[*(int *)(v473 + 48)];
  ((void (*)(char *, char *, _QWORD *))v374)(v393, v289, v287);
  v293 = v449;
  v373(v292, v376, v449);
  v294 = v448;
  (*(void (**)(char *, char *, uint64_t))(v448 + 32))(v288, v292, v293);
  v295 = v408;
  v296 = *(_QWORD *)(v408 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v296 + 48))(v288, 1, v408) == 1)
  {
    (*(void (**)(char *, _QWORD *))(v377 + 8))(v291, v287);
    (*(void (**)(char *, uint64_t))(v294 + 8))(v288, v293);
    *(_QWORD *)(inited + 584) = 0;
    *(_OWORD *)(inited + 552) = 0u;
    *(_OWORD *)(inited + 568) = 0u;
  }
  else
  {
    v472 = *(_QWORD **)(a68 + 24);
    *(_QWORD *)(inited + 576) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 584) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 552));
    ((void (*)(uint64_t, uint64_t))v472)(v295, a68);
    (*(void (**)(char *, uint64_t))(v296 + 8))(v288, v295);
    (*(void (**)(char *, _QWORD *))(v377 + 8))(v291, v287);
  }
  v297 = v481;
  v298 = v474;
  *(_QWORD *)(inited + 592) = (*(uint64_t (**)(_QWORD *))(v457 + 8))(v481);
  *(_QWORD *)(inited + 600) = v299;
  v300 = v398;
  v301 = &v398[*(int *)(v475 + 48)];
  ((void (*)(char *, char *, _QWORD *))v379)(v398, v298, v297);
  v302 = v451;
  v378(v301, v380, v451);
  v303 = v450;
  v304 = v413;
  (*(void (**)(char *, char *, uint64_t))(v450 + 32))(v413, v301, v302);
  v305 = v414;
  v306 = *(_QWORD *)(v414 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v306 + 48))(v304, 1, v414) == 1)
  {
    (*(void (**)(char *, _QWORD *))(v383 + 8))(v300, v297);
    (*(void (**)(char *, uint64_t))(v303 + 8))(v304, v302);
    *(_QWORD *)(inited + 640) = 0;
    *(_OWORD *)(inited + 608) = 0u;
    *(_OWORD *)(inited + 624) = 0u;
  }
  else
  {
    v307 = *(void (**)(uint64_t, uint64_t))(a70 + 24);
    *(_QWORD *)(inited + 632) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 640) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 608));
    v307(v305, a70);
    (*(void (**)(char *, uint64_t))(v306 + 8))(v304, v305);
    (*(void (**)(char *, _QWORD *))(v383 + 8))(v300, v481);
  }
  v308 = v479;
  v309 = v452;
  v310 = v476;
  *(_QWORD *)(inited + 648) = (*(uint64_t (**)(uint64_t))(v480 + 8))(v479);
  *(_QWORD *)(inited + 656) = v311;
  v312 = v409;
  v313 = &v409[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v385)(v409, v310, v308);
  v314 = v478;
  v384(v313, v386, v478);
  v315 = v415;
  (*(void (**)(char *, char *, uint64_t))(v309 + 32))(v415, v313, v314);
  v316 = v309;
  v317 = v416;
  v318 = *(_QWORD *)(v416 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v318 + 48))(v315, 1, v416) == 1)
  {
    (*(void (**)(char *, uint64_t))(v389 + 8))(v312, v308);
    (*(void (**)(char *, uint64_t))(v316 + 8))(v315, v314);
    *(_QWORD *)(inited + 696) = 0;
    *(_OWORD *)(inited + 664) = 0u;
    *(_OWORD *)(inited + 680) = 0u;
  }
  else
  {
    v481 = *(_QWORD **)(a72 + 24);
    *(_QWORD *)(inited + 688) = swift_getAssociatedTypeWitness();
    *(_QWORD *)(inited + 696) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 664));
    ((void (*)(uint64_t, uint64_t))v481)(v317, a72);
    (*(void (**)(char *, uint64_t))(v318 + 8))(v315, v317);
    (*(void (**)(char *, uint64_t))(v389 + 8))(v312, v308);
  }
  v319 = sub_2447C8898(inited);
  v320 = sub_2448546EC(v319);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v412 + 8))(v476, TupleTypeMetadata2);
  (*(void (**)(char *, uint64_t))(v411 + 8))(v474, v475);
  (*(void (**)(char *, uint64_t))(v410 + 8))(v471, v473);
  (*(void (**)(char *, uint64_t))(v407 + 8))(v469, v470);
  (*(void (**)(char *, uint64_t))(v406 + 8))(v467, v468);
  (*(void (**)(char *, uint64_t))(v405 + 8))(v465, v466);
  (*(void (**)(char *, uint64_t))(v404 + 8))(v463, v464);
  (*(void (**)(char *, uint64_t))(v402 + 8))(v461, v462);
  (*(void (**)(char *, uint64_t))(v401 + 8))(v447, v460);
  (*(void (**)(char *, uint64_t))(v399 + 8))(v445, v446);
  (*(void (**)(char *, uint64_t))(v397 + 8))(v443, v444);
  (*(void (**)(char *, uint64_t))(v396 + 8))(v441, v442);
  return v320;
}

uint64_t sub_244863248@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *a1;
  v3 = a1[1];
  sub_2447C92C4((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

void sub_244863288(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(_OWORD *__return_ptr, id *, _OWORD *), uint64_t a6)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  _OWORD *v31;
  id v32;
  id v34[4];
  _OWORD v35[2];
  _OWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v8 = v6;
  v48 = a6;
  v10 = -1 << *(_BYTE *)(a1 + 32);
  v11 = ~v10;
  v12 = *(_QWORD *)(a1 + 64);
  v13 = -v10;
  v41 = a1;
  v42 = a1 + 64;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  else
    v14 = -1;
  v43 = v11;
  v44 = 0;
  v45 = v14 & v12;
  v46 = a2;
  v47 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_24482F834(&v39);
  v15 = *((_QWORD *)&v39 + 1);
  if (!*((_QWORD *)&v39 + 1))
  {
LABEL_20:
    swift_release();
    swift_bridgeObjectRelease();
    sub_2447D1030();
    swift_release();
    return;
  }
  while (1)
  {
    v21 = v39;
    v37 = v39;
    v38 = v15;
    sub_2447C91FC(&v40, v36);
    v22 = *(_QWORD **)v8;
    v24 = sub_244828D0C(v21, v15);
    v25 = v22[2];
    v26 = (v23 & 1) == 0;
    v27 = v25 + v26;
    if (__OFADD__(v25, v26))
    {
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      sub_2448EBC7C();
      __break(1u);
      goto LABEL_26;
    }
    v28 = v23;
    if (v22[3] < v27)
      break;
    if ((a4 & 1) != 0)
    {
      if ((v23 & 1) != 0)
        goto LABEL_16;
    }
    else
    {
      sub_24482D628();
      if ((v28 & 1) != 0)
        goto LABEL_16;
    }
LABEL_6:
    v16 = *(_QWORD **)v8;
    *(_QWORD *)(*(_QWORD *)v8 + 8 * (v24 >> 6) + 64) |= 1 << v24;
    v17 = (uint64_t *)(v16[6] + 16 * v24);
    *v17 = v21;
    v17[1] = v15;
    sub_2447C91FC(v36, (_OWORD *)(v16[7] + 32 * v24));
    v18 = v16[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_24;
    v16[2] = v20;
LABEL_8:
    sub_24482F834(&v39);
    v15 = *((_QWORD *)&v39 + 1);
    a4 = 1;
    if (!*((_QWORD *)&v39 + 1))
      goto LABEL_20;
  }
  sub_244829B3C(v27, a4 & 1);
  v29 = sub_244828D0C(v21, v15);
  if ((v28 & 1) != (v30 & 1))
    goto LABEL_25;
  v24 = v29;
  if ((v28 & 1) == 0)
    goto LABEL_6;
LABEL_16:
  sub_2447C92C4(*(_QWORD *)(*(_QWORD *)v8 + 56) + 32 * v24, (uint64_t)v34);
  a5(v35, v34, v36);
  if (!v7)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    swift_bridgeObjectRelease();
    v31 = (_OWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 56) + 32 * v24);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    sub_2447C91FC(v35, v31);
    goto LABEL_8;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  v34[0] = v7;
  v32 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0A8);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    swift_bridgeObjectRelease();
    sub_2447D1030();
    swift_release();

    return;
  }
LABEL_26:
  *(_QWORD *)&v35[0] = 0;
  *((_QWORD *)&v35[0] + 1) = 0xE000000000000000;
  sub_2448EB79C();
  sub_2448EABC0();
  sub_2448EB91C();
  sub_2448EABC0();
  sub_2448EB9A0();
  __break(1u);
}

uint64_t sub_24486362C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A388);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_244863674@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  swift_getAssociatedTypeWitness();
  v4 = sub_2448EB508();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t sub_2448636E8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t result;
  __int128 v31;
  char v32;
  __int128 v33;
  const char *v34;
  uint64_t v35;
  char v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v40 = a1;
  v41 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v42 = v8;
  v43 = 0;
  v44 = v11 & v9;
  v45 = a2;
  v46 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_24482F834(&v38);
  v12 = *((_QWORD *)&v38 + 1);
  if (!*((_QWORD *)&v38 + 1))
  {
LABEL_19:
    swift_release();
    swift_bridgeObjectRelease();
    sub_2447D1030();
    return swift_release();
  }
  while (1)
  {
    v15 = v38;
    sub_2447C91FC(&v39, v37);
    v16 = (_QWORD *)*a5;
    v18 = sub_244828D0C(v15, v12);
    v19 = v16[2];
    v20 = (v17 & 1) == 0;
    v21 = v19 + v20;
    if (__OFADD__(v19, v20))
      break;
    v22 = v17;
    if (v16[3] >= v21)
    {
      if ((a4 & 1) != 0)
      {
        if ((v17 & 1) != 0)
          goto LABEL_6;
      }
      else
      {
        sub_24482D628();
        if ((v22 & 1) != 0)
          goto LABEL_6;
      }
    }
    else
    {
      sub_244829B3C(v21, a4 & 1);
      v23 = sub_244828D0C(v15, v12);
      if ((v22 & 1) != (v24 & 1))
        goto LABEL_22;
      v18 = v23;
      if ((v22 & 1) != 0)
      {
LABEL_6:
        v13 = (_QWORD *)*a5;
        *(_QWORD *)&v31 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/Preview"
                          "sFoundation/PropertyList.swift";
        *((_QWORD *)&v31 + 1) = 124;
        v32 = 2;
        v33 = xmmword_2448F34A0;
        v34 = "confidentlyMerging(_:)";
        v35 = 22;
        v36 = 2;
        sub_244823F6C();
        sub_2447C91FC(v37, &v31);
        swift_bridgeObjectRelease();
        v14 = (_OWORD *)(v13[7] + 32 * v18);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
        sub_2447C91FC(&v31, v14);
        goto LABEL_7;
      }
    }
    v25 = (_QWORD *)*a5;
    *(_QWORD *)(*a5 + 8 * (v18 >> 6) + 64) |= 1 << v18;
    v26 = (uint64_t *)(v25[6] + 16 * v18);
    *v26 = v15;
    v26[1] = v12;
    sub_2447C91FC(v37, (_OWORD *)(v25[7] + 32 * v18));
    v27 = v25[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
      goto LABEL_21;
    v25[2] = v29;
LABEL_7:
    sub_24482F834(&v38);
    v12 = *((_QWORD *)&v38 + 1);
    a4 = 1;
    if (!*((_QWORD *)&v38 + 1))
      goto LABEL_19;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = sub_2448EBC7C();
  __break(1u);
  return result;
}

uint64_t sub_24486397C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = a2;
  sub_2448636E8(a1, (uint64_t)sub_244863248, 0, isUniquelyReferenced_nonNull_native, &v8);
  v6 = v8;
  swift_bridgeObjectRelease();
  if (v2)
    swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_244863A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[10];
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v20 = a7;
  v21 = a1;
  v15 = a2;
  v16 = a3;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  v13[2] = a2;
  v13[3] = a3;
  v13[4] = a4;
  v13[5] = a5;
  v13[6] = a6;
  v13[7] = a7;
  v13[8] = sub_244864E94;
  v13[9] = &v14;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  v10 = sub_2448EA8B4();
  v11 = MEMORY[0x24951AC70](MEMORY[0x24BEE04D8], v10);
  return Sequence.keyedMap<A, B>(_:)((uint64_t)sub_244864EC0, (uint64_t)v13, v10, a2, a3, v11, a5);
}

uint64_t sub_244863B2C(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  _QWORD v9[3];

  v9[2] = a1;
  v8[2] = a2;
  v8[3] = a3;
  swift_getAssociatedTypeWitness();
  v4 = sub_2448EAEE4();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0A8);
  v6 = MEMORY[0x24951AC70](MEMORY[0x24BEE12E0], v4);
  return sub_2447D31DC((void (*)(char *, char *))sub_244864EF8, (uint64_t)v8, v4, a2, v5, v6, MEMORY[0x24BEE3F20], (uint64_t)v9);
}

uint64_t sub_244863BF8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  _QWORD v6[5];

  v2 = *a1;
  v6[3] = &_s3KeyON_1;
  v6[4] = &off_2515868B8;
  v3 = sub_24480B438(v6, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  swift_bridgeObjectRelease();
  if (!v1)
  {
    if (*(_QWORD *)(v3 + 16) == 8)
    {
      v2 = *(_QWORD *)(v3 + 32);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_244864DF4();
      swift_allocError();
      *v4 = v3;
      swift_willThrow();
    }
  }
  return v2;
}

double sub_244863CC8(uint64_t *a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  double v4;
  _QWORD v6[3];
  ValueMetadata *v7;
  _UNKNOWN **v8;

  v3 = *a1;
  v7 = &_s3KeyON_0;
  v8 = &off_2515868A8;
  LOBYTE(v6[0]) = 0;
  swift_bridgeObjectRetain();
  v4 = sub_24480B2F0(v6, v3);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v2 = v4;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    v7 = &_s3KeyON_0;
    v8 = &off_2515868A8;
    LOBYTE(v6[0]) = 1;
    sub_24480B2F0(v6, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    swift_bridgeObjectRelease();
    v7 = &_s3KeyON;
    v8 = &off_251586898;
    LOBYTE(v6[0]) = 0;
    sub_24480B2F0(v6, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    v7 = &_s3KeyON;
    v8 = &off_251586898;
    LOBYTE(v6[0]) = 1;
    sub_24480B2F0(v6, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    swift_bridgeObjectRelease();
  }
  return v2;
}

double sub_244863E28(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  double v7;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v6 = *a1;
  v10 = a2;
  v11 = a3;
  LOBYTE(v9[0]) = 0;
  v7 = sub_24480B2F0(v9, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  if (!v3)
  {
    v10 = a2;
    v11 = a3;
    LOBYTE(v9[0]) = 1;
    sub_24480B2F0(v9, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_244863EDC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t result;
  __int128 v31;
  char v32;
  __int128 v33;
  const char *v34;
  uint64_t v35;
  char v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v40 = a1;
  v41 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v42 = v8;
  v43 = 0;
  v44 = v11 & v9;
  v45 = a2;
  v46 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_24482F834(&v38);
  v12 = *((_QWORD *)&v38 + 1);
  if (!*((_QWORD *)&v38 + 1))
  {
LABEL_19:
    swift_release();
    swift_bridgeObjectRelease();
    sub_2447D1030();
    return swift_release();
  }
  while (1)
  {
    v15 = v38;
    sub_2447C91FC(&v39, v37);
    v16 = (_QWORD *)*a5;
    v18 = sub_244828D0C(v15, v12);
    v19 = v16[2];
    v20 = (v17 & 1) == 0;
    v21 = v19 + v20;
    if (__OFADD__(v19, v20))
      break;
    v22 = v17;
    if (v16[3] >= v21)
    {
      if ((a4 & 1) != 0)
      {
        if ((v17 & 1) != 0)
          goto LABEL_6;
      }
      else
      {
        sub_24482D628();
        if ((v22 & 1) != 0)
          goto LABEL_6;
      }
    }
    else
    {
      sub_244829B3C(v21, a4 & 1);
      v23 = sub_244828D0C(v15, v12);
      if ((v22 & 1) != (v24 & 1))
        goto LABEL_22;
      v18 = v23;
      if ((v22 & 1) != 0)
      {
LABEL_6:
        v13 = (_QWORD *)*a5;
        *(_QWORD *)&v31 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/Preview"
                          "sFoundation/PropertyList.swift";
        *((_QWORD *)&v31 + 1) = 124;
        v32 = 2;
        v33 = xmmword_2448F34B0;
        v34 = "confidentlyMerge(_:)";
        v35 = 20;
        v36 = 2;
        sub_244823F6C();
        sub_2447C91FC(v37, &v31);
        swift_bridgeObjectRelease();
        v14 = (_OWORD *)(v13[7] + 32 * v18);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
        sub_2447C91FC(&v31, v14);
        goto LABEL_7;
      }
    }
    v25 = (_QWORD *)*a5;
    *(_QWORD *)(*a5 + 8 * (v18 >> 6) + 64) |= 1 << v18;
    v26 = (uint64_t *)(v25[6] + 16 * v18);
    *v26 = v15;
    v26[1] = v12;
    sub_2447C91FC(v37, (_OWORD *)(v25[7] + 32 * v18));
    v27 = v25[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
      goto LABEL_21;
    v25[2] = v29;
LABEL_7:
    sub_24482F834(&v38);
    v12 = *((_QWORD *)&v38 + 1);
    a4 = 1;
    if (!*((_QWORD *)&v38 + 1))
      goto LABEL_19;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = sub_2448EBC7C();
  __break(1u);
  return result;
}

uint64_t sub_244864170()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 24) + 24))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_2448641A4(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;

  return sub_2448572B0(a1, v2[2], v2[3], v2[4], a2);
}

uint64_t sub_2448641C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[6];
  (*(void (**)(_QWORD))(v0[4] + 24))(v0[2]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

uint64_t sub_24486422C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t TupleTypeMetadata2;

  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 64);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v7(a1, a2, a3, a3 + *(int *)(TupleTypeMetadata2 + 48));
}

unint64_t sub_24486429C()
{
  unint64_t result;

  result = qword_25738E8B0;
  if (!qword_25738E8B0)
  {
    result = MEMORY[0x24951AC70](&unk_2448F3AB8, &type metadata for InvalidUUID);
    atomic_store(result, (unint64_t *)&qword_25738E8B0);
  }
  return result;
}

_UNKNOWN **sub_2448642E0()
{
  return &protocol witness table for Int;
}

_UNKNOWN **sub_2448642EC()
{
  return &protocol witness table for UInt;
}

_UNKNOWN **sub_2448642F8()
{
  return &protocol witness table for UInt8;
}

_UNKNOWN **sub_244864304()
{
  return &protocol witness table for UInt32;
}

_UNKNOWN **sub_244864310()
{
  return &protocol witness table for UInt64;
}

_UNKNOWN **sub_24486431C()
{
  return &protocol witness table for String;
}

_UNKNOWN **sub_244864328()
{
  return &protocol witness table for Data;
}

_UNKNOWN **sub_244864334()
{
  return &protocol witness table for Bool;
}

_UNKNOWN **sub_244864340()
{
  return &protocol witness table for Float;
}

_UNKNOWN **sub_24486434C()
{
  return &protocol witness table for Double;
}

_UNKNOWN **sub_244864358()
{
  return &protocol witness table for CGFloat;
}

_UNKNOWN **sub_244864364()
{
  return &protocol witness table for Int32;
}

_UNKNOWN **sub_244864370()
{
  return &protocol witness table for Date;
}

_UNKNOWN **sub_24486437C()
{
  return &protocol witness table for NSString;
}

_UNKNOWN **sub_244864388()
{
  return &protocol witness table for NSNumber;
}

_UNKNOWN **sub_244864394()
{
  return &protocol witness table for NSData;
}

_UNKNOWN **sub_2448643A0()
{
  return &protocol witness table for PropertyList;
}

uint64_t sub_2448643B0(uint64_t a1)
{
  uint64_t AssociatedConformanceWitness;

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return MEMORY[0x24951AC70](&protocol conformance descriptor for <A> [A], a1, &AssociatedConformanceWitness);
}

uint64_t sub_244864408(uint64_t a1)
{
  _QWORD v3[2];

  v3[0] = swift_getAssociatedConformanceWitness();
  v3[1] = swift_getAssociatedConformanceWitness();
  return MEMORY[0x24951AC70](&protocol conformance descriptor for <> [A : B], a1, v3);
}

uint64_t dispatch thunk of PropertyListRepresentable.propertyListValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of PropertyListRepresentable.init(propertyListValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of PropertyListKey.rawValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for PropertyList()
{
  return &type metadata for PropertyList;
}

ValueMetadata *type metadata accessor for PropertyListBuilder()
{
  return &type metadata for PropertyListBuilder;
}

ValueMetadata *type metadata accessor for InvalidUUID()
{
  return &type metadata for InvalidUUID;
}

uint64_t destroy for PropertyListError(uint64_t a1)
{
  int v2;
  uint64_t v3;

  v2 = *(unsigned __int8 *)(a1 + 112);
  while (2)
  {
    switch(v2)
    {
      case 0:
        v3 = a1 + 8;
        swift_bridgeObjectRelease();
        break;
      case 1:
      case 2:
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1(a1 + 8);
        __swift_destroy_boxed_opaque_existential_1(a1 + 48);
        v3 = a1 + 80;
        break;
      case 3:
        __swift_destroy_boxed_opaque_existential_1(a1);
        v3 = a1 + 32;
        break;
      default:
        v2 = *(_DWORD *)a1 + 4;
        continue;
    }
    break;
  }
  return __swift_destroy_boxed_opaque_existential_1(v3);
}

uint64_t initializeWithCopy for PropertyListError(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  char v9;
  __int128 v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;

  v4 = *(unsigned __int8 *)(a2 + 112);
  while (2)
  {
    switch(v4)
    {
      case 0:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v5 = a2 + 8;
        v6 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 32) = v6;
        v7 = v6;
        v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
        swift_bridgeObjectRetain();
        v8(a1 + 8, v5, v7);
        v9 = 0;
        break;
      case 1:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v17 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 32) = v17;
        v18 = v17;
        v19 = **(void (***)(uint64_t, uint64_t, uint64_t))(v17 - 8);
        swift_bridgeObjectRetain();
        v19(a1 + 8, a2 + 8, v18);
        v20 = *(_QWORD *)(a2 + 72);
        *(_QWORD *)(a1 + 72) = v20;
        (**(void (***)(uint64_t, uint64_t))(v20 - 8))(a1 + 48, a2 + 48);
        v21 = *(_QWORD *)(a2 + 104);
        *(_QWORD *)(a1 + 104) = v21;
        (**(void (***)(uint64_t, uint64_t))(v21 - 8))(a1 + 80, a2 + 80);
        v9 = 1;
        break;
      case 2:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v10 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 32) = v10;
        v11 = v10;
        v12 = **(void (***)(uint64_t, uint64_t, uint64_t))(v10 - 8);
        swift_bridgeObjectRetain();
        v12(a1 + 8, a2 + 8, v11);
        v13 = *(_QWORD *)(a2 + 72);
        *(_QWORD *)(a1 + 72) = v13;
        (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 48, a2 + 48);
        v14 = *(_QWORD *)(a2 + 104);
        *(_QWORD *)(a1 + 104) = v14;
        (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 80, a2 + 80);
        v9 = 2;
        break;
      case 3:
        v15 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 24) = v15;
        (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1, a2);
        v16 = *(_QWORD *)(a2 + 56);
        *(_QWORD *)(a1 + 56) = v16;
        (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1 + 32, a2 + 32);
        v9 = 3;
        break;
      default:
        v4 = *(_DWORD *)a2 + 4;
        continue;
    }
    break;
  }
  *(_BYTE *)(a1 + 112) = v9;
  return a1;
}

uint64_t assignWithCopy for PropertyListError(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  char v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 112);
    while (2)
    {
      switch(v4)
      {
        case 0:
          v5 = a1 + 8;
          swift_bridgeObjectRelease();
          break;
        case 1:
        case 2:
          v5 = a1 + 80;
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1(a1 + 8);
          __swift_destroy_boxed_opaque_existential_1(a1 + 48);
          break;
        case 3:
          __swift_destroy_boxed_opaque_existential_1(a1);
          v5 = a1 + 32;
          break;
        default:
          v4 = *(_DWORD *)a1 + 4;
          continue;
      }
      break;
    }
    __swift_destroy_boxed_opaque_existential_1(v5);
    v6 = *(unsigned __int8 *)(a2 + 112);
    while (2)
    {
      switch(v6)
      {
        case 0:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v7 = a2 + 8;
          v8 = *(_QWORD *)(a2 + 32);
          *(_QWORD *)(a1 + 32) = v8;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
          v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
          swift_bridgeObjectRetain();
          v9(a1 + 8, v7, v8);
          v10 = 0;
          break;
        case 1:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v11 = *(_QWORD *)(a2 + 32);
          *(_QWORD *)(a1 + 32) = v11;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
          v12 = **(void (***)(uint64_t, uint64_t, uint64_t))(v11 - 8);
          swift_bridgeObjectRetain();
          v12(a1 + 8, a2 + 8, v11);
          v13 = *(_QWORD *)(a2 + 72);
          *(_QWORD *)(a1 + 72) = v13;
          (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 48, a2 + 48);
          v14 = *(_QWORD *)(a2 + 104);
          *(_QWORD *)(a1 + 104) = v14;
          (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 80, a2 + 80);
          v10 = 1;
          break;
        case 2:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v15 = *(_QWORD *)(a2 + 32);
          *(_QWORD *)(a1 + 32) = v15;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
          v16 = **(void (***)(uint64_t, uint64_t, uint64_t))(v15 - 8);
          swift_bridgeObjectRetain();
          v16(a1 + 8, a2 + 8, v15);
          v17 = *(_QWORD *)(a2 + 72);
          *(_QWORD *)(a1 + 72) = v17;
          (**(void (***)(uint64_t, uint64_t))(v17 - 8))(a1 + 48, a2 + 48);
          v18 = *(_QWORD *)(a2 + 104);
          *(_QWORD *)(a1 + 104) = v18;
          (**(void (***)(uint64_t, uint64_t))(v18 - 8))(a1 + 80, a2 + 80);
          v10 = 2;
          break;
        case 3:
          v19 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 24) = v19;
          (**(void (***)(uint64_t, uint64_t))(v19 - 8))(a1, a2);
          v20 = *(_QWORD *)(a2 + 56);
          *(_QWORD *)(a1 + 56) = v20;
          (**(void (***)(uint64_t, uint64_t))(v20 - 8))(a1 + 32, a2 + 32);
          v10 = 3;
          break;
        default:
          v6 = *(_DWORD *)a2 + 4;
          continue;
      }
      break;
    }
    *(_BYTE *)(a1 + 112) = v10;
  }
  return a1;
}

__n128 __swift_memcpy113_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for PropertyListError(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  char v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 112);
    while (2)
    {
      switch(v4)
      {
        case 0:
          v5 = a1 + 8;
          swift_bridgeObjectRelease();
          break;
        case 1:
        case 2:
          v5 = a1 + 80;
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1(a1 + 8);
          __swift_destroy_boxed_opaque_existential_1(a1 + 48);
          break;
        case 3:
          __swift_destroy_boxed_opaque_existential_1(a1);
          v5 = a1 + 32;
          break;
        default:
          v4 = *(_DWORD *)a1 + 4;
          continue;
      }
      break;
    }
    __swift_destroy_boxed_opaque_existential_1(v5);
    v6 = *(unsigned __int8 *)(a2 + 112);
    while (2)
    {
      switch(v6)
      {
        case 0:
          v7 = 0;
          v8 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v8;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          break;
        case 1:
          v9 = *(_OWORD *)(a2 + 80);
          *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
          *(_OWORD *)(a1 + 80) = v9;
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
          v10 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v10;
          v12 = *(_OWORD *)(a2 + 32);
          v11 = *(_OWORD *)(a2 + 48);
          v7 = 1;
          goto LABEL_14;
        case 2:
          v13 = *(_OWORD *)(a2 + 80);
          *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
          *(_OWORD *)(a1 + 80) = v13;
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
          v14 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v14;
          v12 = *(_OWORD *)(a2 + 32);
          v11 = *(_OWORD *)(a2 + 48);
          v7 = 2;
LABEL_14:
          *(_OWORD *)(a1 + 32) = v12;
          *(_OWORD *)(a1 + 48) = v11;
          break;
        case 3:
          v15 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v15;
          v16 = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 48) = v16;
          v7 = 3;
          break;
        default:
          v6 = *(_DWORD *)a2 + 4;
          continue;
      }
      break;
    }
    *(_BYTE *)(a1 + 112) = v7;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for PropertyListError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 113))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 112);
  if (v3 >= 4)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PropertyListError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 112) = 0;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 113) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 113) = 0;
    if (a2)
      *(_BYTE *)(result + 112) = -(char)a2;
  }
  return result;
}

uint64_t sub_244864BC4(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 112);
  if (result >= 4)
    return (*(_DWORD *)a1 + 4);
  return result;
}

uint64_t sub_244864BE0(uint64_t result, unsigned int a2)
{
  unsigned int v2;

  if (a2 > 3)
  {
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    v2 = a2 - 4;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    LOBYTE(a2) = 4;
    *(_DWORD *)result = v2;
  }
  *(_BYTE *)(result + 112) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PropertyListError()
{
  return &type metadata for PropertyListError;
}

uint64_t sub_244864C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_244810FF4(a1, a2, a3, (uint64_t (*)(void))sub_244864C38, (uint64_t (*)(void))sub_244864C7C);
}

unint64_t sub_244864C38()
{
  unint64_t result;

  result = qword_25738ECA0;
  if (!qword_25738ECA0)
  {
    result = MEMORY[0x24951AC70](&unk_2448F3A54, &type metadata for InvalidUUID);
    atomic_store(result, (unint64_t *)&qword_25738ECA0);
  }
  return result;
}

unint64_t sub_244864C7C()
{
  unint64_t result;

  result = qword_25738ECA8;
  if (!qword_25738ECA8)
  {
    result = MEMORY[0x24951AC70](&unk_2448F3A2C, &type metadata for InvalidUUID);
    atomic_store(result, (unint64_t *)&qword_25738ECA8);
  }
  return result;
}

uint64_t sub_244864CC0(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for PropertyListError(a2, a1);
  return a2;
}

uint64_t sub_244864CF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_244856B6C(a1, *(void (**)(uint64_t, uint64_t *))(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_244864D1C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_2448568CC(a1, *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_244864D3C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_2448565C4(a1, *(uint64_t (**)(uint64_t, uint64_t *))(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 16), a2, a3);
}

unint64_t sub_244864D5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25738ECC0;
  if (!qword_25738ECC0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738ECB8);
    result = MEMORY[0x24951AC70](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_25738ECC0);
  }
  return result;
}

uint64_t sub_244864DA8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_244856314(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_244864DC4()
{
  uint64_t v0;

  sub_244811210(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocObject();
}

unint64_t sub_244864DF4()
{
  unint64_t result;

  result = qword_25738ECE0;
  if (!qword_25738ECE0)
  {
    result = MEMORY[0x24951AC70](&unk_2448F3DF0, &type metadata for InvalidAuditTokenDeserialization);
    atomic_store(result, (unint64_t *)&qword_25738ECE0);
  }
  return result;
}

unint64_t sub_244864E38()
{
  unint64_t result;
  uint64_t v1;
  _UNKNOWN **v2;

  result = qword_25738ECE8;
  if (!qword_25738ECE8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738C590);
    v2 = &protocol witness table for UInt32;
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_25738ECE8);
  }
  return result;
}

uint64_t sub_244864E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_244857534(a1, a2, a3, a4, v4[2], v4[3], v4[4], v4[5], v4[6]);
}

uint64_t sub_244864EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_2448576B0(a1, a2, a3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 64));
}

uint64_t sub_244864EF8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_244856F7C(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_244864F14()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  return swift_deallocObject();
}

ValueMetadata *_s3KeyOMa()
{
  return &_s3KeyON;
}

uint64_t _s3KeyOwst_1(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_244864FA0 + 4 * byte_2448F34E1[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_244864FD4 + 4 * byte_2448F34DC[v4]))();
}

uint64_t sub_244864FD4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_244864FDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x244864FE4);
  return result;
}

uint64_t sub_244864FF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x244864FF8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_244864FFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244865004(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s3KeyOMa_0()
{
  return &_s3KeyON_0;
}

ValueMetadata *type metadata accessor for InvalidAuditTokenDeserialization()
{
  return &type metadata for InvalidAuditTokenDeserialization;
}

uint64_t _s3KeyOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_244865070 + 4 * byte_2448F34E6[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_244865090 + 4 * byte_2448F34EB[v4]))();
}

_BYTE *sub_244865070(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_244865090(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_244865098(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2448650A0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2448650A8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2448650B0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s3KeyOMa_1()
{
  return &_s3KeyON_1;
}

unint64_t sub_2448650D0()
{
  unint64_t result;

  result = qword_25738ECF0;
  if (!qword_25738ECF0)
  {
    result = MEMORY[0x24951AC70](&unk_2448F3BDC, &_s3KeyON_1);
    atomic_store(result, (unint64_t *)&qword_25738ECF0);
  }
  return result;
}

uint64_t sub_244865118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_244810FF4(a1, a2, a3, (uint64_t (*)(void))sub_24486512C, (uint64_t (*)(void))sub_244865170);
}

unint64_t sub_24486512C()
{
  unint64_t result;

  result = qword_25738ECF8;
  if (!qword_25738ECF8)
  {
    result = MEMORY[0x24951AC70](&unk_2448F3C2C, &type metadata for InvalidAuditTokenDeserialization);
    atomic_store(result, (unint64_t *)&qword_25738ECF8);
  }
  return result;
}

unint64_t sub_244865170()
{
  unint64_t result;

  result = qword_25738ED00;
  if (!qword_25738ED00)
  {
    result = MEMORY[0x24951AC70](&unk_2448F3C04, &type metadata for InvalidAuditTokenDeserialization);
    atomic_store(result, (unint64_t *)&qword_25738ED00);
  }
  return result;
}

unint64_t sub_2448651B8()
{
  unint64_t result;

  result = qword_25738ED08;
  if (!qword_25738ED08)
  {
    result = MEMORY[0x24951AC70](&unk_2448F3D08, &_s3KeyON_0);
    atomic_store(result, (unint64_t *)&qword_25738ED08);
  }
  return result;
}

unint64_t sub_244865200()
{
  unint64_t result;

  result = qword_25738ED10;
  if (!qword_25738ED10)
  {
    result = MEMORY[0x24951AC70](&unk_2448F3DA8, &_s3KeyON);
    atomic_store(result, (unint64_t *)&qword_25738ED10);
  }
  return result;
}

_QWORD *sub_244865244@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_2447BD514(a1, a2);
}

_DWORD *sub_244865258@<X0>(_DWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_24485419C(a1, a2);
}

uint64_t sub_244865278()
{
  return sub_244864170();
}

uint64_t AsyncObservableEvent.init(file:line:column:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t *a9@<X8>, uint64_t a10)
{
  char v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  __int128 v24;
  uint64_t v25[2];
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _QWORD v32[3];
  _QWORD v33[4];

  v12 = a3;
  v15 = type metadata accessor for AsyncObservableEvent.Observer(255, a10, a3, a4);
  v16 = type metadata accessor for ObserverAndTokenStorage(255, v15, (uint64_t)&type metadata for ConcurrentTokenCallback, (uint64_t)&protocol witness table for ConcurrentTokenCallback);
  type metadata accessor for FulfillOnceState(0, v16, a10, v17);
  sub_2447F6A80(v15, (uint64_t)&type metadata for ConcurrentTokenCallback, (uint64_t)&protocol witness table for ConcurrentTokenCallback, (uint64_t)v33);
  v32[0] = v33[0];
  v32[1] = v33[1];
  v32[2] = v33[2];
  v25[0] = a1;
  v25[1] = a2;
  v26 = v12;
  v27 = a4;
  v28 = a5;
  v29 = a6;
  v30 = a7;
  v31 = a8;
  v24 = xmmword_2448ECE80;
  v18 = sub_2447E229C((uint64_t)v32, v25, 0, 0, (uint64_t *)&v24, 0xD000000000000016, 0x80000002448FB7D0, 0x6465726966, 0xE500000000000000);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a9 = v18;
  return result;
}

uint64_t type metadata accessor for AsyncObservableEvent.Observer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncObservableEvent.Observer);
}

uint64_t AsyncObservableEvent.fire(file:line:column:function:with:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v9 + 232) = a7;
  *(_QWORD *)(v9 + 240) = v20;
  *(_BYTE *)(v9 + 74) = a8;
  *(_QWORD *)(v9 + 216) = a5;
  *(_QWORD *)(v9 + 224) = a6;
  *(_QWORD *)(v9 + 200) = a2;
  *(_QWORD *)(v9 + 208) = a4;
  *(_BYTE *)(v9 + 73) = a3;
  *(_QWORD *)(v9 + 192) = a1;
  v10 = *(_QWORD *)(v21 + 16);
  *(_QWORD *)(v9 + 248) = v10;
  *(_QWORD *)(v9 + 256) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v9 + 264) = swift_task_alloc();
  v13 = type metadata accessor for AsyncObservableEvent.Observer(255, v10, v11, v12);
  *(_QWORD *)(v9 + 272) = v13;
  v14 = type metadata accessor for ObserverAndTokenStorage(255, v13, (uint64_t)&type metadata for ConcurrentTokenCallback, (uint64_t)&protocol witness table for ConcurrentTokenCallback);
  *(_QWORD *)(v9 + 280) = v14;
  v16 = type metadata accessor for FulfillOnceState.FulfillmentOutcome(0, v14, v10, v15);
  *(_QWORD *)(v9 + 288) = v16;
  *(_QWORD *)(v9 + 296) = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v9 + 304) = swift_task_alloc();
  v17 = swift_task_alloc();
  v18 = *v8;
  *(_QWORD *)(v9 + 312) = v17;
  *(_QWORD *)(v9 + 320) = v18;
  return swift_task_switch();
}

uint64_t sub_2448654EC()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  __int128 *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  void (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t);
  _QWORD *v35;
  uint64_t v36;
  __int128 v37;
  _BYTE v38[9];

  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 192);
  v2 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 104) = *(_OWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 304);
  v36 = *(_QWORD *)(v0 + 288);
  v6 = *(_QWORD *)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 248);
  v8 = *(_BYTE *)(v0 + 74);
  *(_BYTE *)(v0 + 96) = *(_BYTE *)(v0 + 73);
  *(_OWORD *)(v0 + 120) = v2;
  *(_BYTE *)(v0 + 136) = v8;
  v9 = swift_task_alloc();
  *(_QWORD *)(v9 + 16) = v7;
  *(_QWORD *)(v9 + 24) = v6;
  v10 = swift_task_alloc();
  *(_QWORD *)(v10 + 16) = v7;
  FulfillOnceState.fulfill(callsite:makeFulfilledState:ifAlreadyFulfilled:)((__int128 *)(v0 + 80), (uint64_t)sub_244866540, v9, (uint64_t)sub_244866554, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v3, v36);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v4, 1, TupleTypeMetadata2) != 1)
  {
    v16 = *(__int128 **)(v0 + 304);
    v37 = *v16;
    v17 = (_QWORD *)*((_QWORD *)v16 + 2);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 256) + 32))(*(_QWORD *)(v0 + 264), (uint64_t)v16 + *(int *)(TupleTypeMetadata2 + 48), *(_QWORD *)(v0 + 248));
    v18 = v17[2];
    if (v18)
    {
      *(_QWORD *)(v0 + 16) = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/Prev"
                             "iewsFoundation/AsyncObservableEvent.swift";
      *(_QWORD *)(v0 + 24) = 132;
      *(_BYTE *)(v0 + 32) = 2;
      *(_OWORD *)(v0 + 40) = xmmword_2448F3E40;
      *(_QWORD *)(v0 + 56) = "fire(file:line:column:function:with:)";
      *(_QWORD *)(v0 + 64) = 37;
      *(_BYTE *)(v0 + 72) = 2;
      v33 = v0;
      v34 = (void (*)(uint64_t))v17[4];
      v19 = v17[6];
      swift_bridgeObjectRetain_n();
      v20 = *(_QWORD *)(v19 + 144);
      v35 = v17;
      v21 = swift_task_alloc();
      *(_QWORD *)(v21 + 16) = nullsub_1;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = v0 + 16;
      *(_QWORD *)(v21 + 40) = v19;
      *(_QWORD *)(v21 + 48) = sub_2447E1AC8;
      *(_QWORD *)(v21 + 56) = 0;
      swift_retain();
      swift_retain();
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v20 + 76));
      sub_2447E5E3C((__int128 *)(v20 + 16), *(uint64_t (**)(void))(v21 + 16), *(uint64_t **)(v21 + 32), *(_QWORD *)(v21 + 40), *(void (**)(uint64_t, _QWORD *))(v21 + 48), v38);
      v1 = v0 + 80;
      os_unfair_lock_unlock((os_unfair_lock_t)(v20 + 76));
      swift_release();
      v22 = swift_task_dealloc();
      if ((v38[0] & 1) == 0)
        v34(v22);
      swift_release();
      swift_release();
      v23 = v18 - 1;
      v24 = v0 + 16;
      if (v18 != 1)
      {
        v27 = v35 + 9;
        do
        {
          v28 = (void (*)(uint64_t))*(v27 - 2);
          v29 = *v27;
          v30 = *(_QWORD *)(*v27 + 144);
          v31 = swift_task_alloc();
          *(_QWORD *)(v31 + 16) = nullsub_1;
          *(_QWORD *)(v31 + 24) = 0;
          *(_QWORD *)(v31 + 32) = v24;
          *(_QWORD *)(v31 + 40) = v29;
          *(_QWORD *)(v31 + 48) = sub_2447E1AC8;
          *(_QWORD *)(v31 + 56) = 0;
          swift_retain();
          swift_retain();
          swift_retain();
          os_unfair_lock_lock((os_unfair_lock_t)(v30 + 76));
          sub_2447E5E3C((__int128 *)(v30 + 16), *(uint64_t (**)(void))(v31 + 16), *(uint64_t **)(v31 + 32), *(_QWORD *)(v31 + 40), *(void (**)(uint64_t, _QWORD *))(v31 + 48), v38);
          os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 76));
          swift_release();
          v32 = swift_task_dealloc();
          if ((v38[0] & 1) == 0)
            v28(v32);
          swift_release();
          swift_release();
          v27 += 3;
          --v23;
          v24 = v1 - 64;
        }
        while (v23);
      }
      swift_bridgeObjectRelease_n();
      v0 = v33;
    }
    v25 = *(_QWORD *)(v0 + 272);
    swift_bridgeObjectRelease();
    *(_OWORD *)(v0 + 144) = v37;
    *(_QWORD *)(v0 + 160) = 0;
    v26 = sub_2447F8114();
    *(_QWORD *)(v0 + 328) = type metadata accessor for OrderedDictionary(0, (uint64_t)&type metadata for Identifier, v25, v26);
    OrderedDictionary.endIndex.getter();
  }
  v12 = *(_QWORD *)(v0 + 304);
  v13 = *(_QWORD *)(v0 + 288);
  v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 296) + 8);
  v14(*(_QWORD *)(v0 + 312), v13);
  v14(v12, v13);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2448659D4()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

void sub_244865A34()
{
  swift_release();
  OrderedDictionary.endIndex.getter();
}

uint64_t AsyncObservableEvent.observe(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v8;
  _QWORD *v9;

  v8 = *v3;
  v4[6] = a3;
  v4[7] = v8;
  v4[5] = v8;
  v9 = (_QWORD *)swift_task_alloc();
  v4[8] = v9;
  *v9 = v4;
  v9[1] = sub_244865C08;
  return AsyncObservableEvent.addCancelableObserver(_:)((uint64_t)(v4 + 2), a1, a2, a3);
}

uint64_t sub_244865C08()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_244865C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];

  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(v4 + 48);
    v8 = *(_QWORD *)(v4 + 24);
    v7 = *(_QWORD *)(v4 + 32);
    v10[0] = *(_QWORD *)(v4 + 16);
    v10[1] = v8;
    v10[2] = v7;
    sub_2448660D8((uint64_t)v10, v6, a3, a4);
    sub_2447C6AE8(v5);
  }
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t AsyncObservableEvent.addCancelableObserver(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t updated;
  uint64_t v12;
  uint64_t v13;

  v5[11] = a2;
  v5[12] = a3;
  v5[10] = a1;
  v6 = *(_QWORD *)(a4 + 16);
  v5[13] = v6;
  v5[14] = *(_QWORD *)(v6 - 8);
  v5[15] = swift_task_alloc();
  v9 = type metadata accessor for AsyncObservableEvent.Observer(255, v6, v7, v8);
  v10 = type metadata accessor for ObserverAndTokenStorage(255, v9, (uint64_t)&type metadata for ConcurrentTokenCallback, (uint64_t)&protocol witness table for ConcurrentTokenCallback);
  updated = type metadata accessor for FulfillOnceState.WaitingStateUpdateResult(0, v10, v6, (uint64_t)&type metadata for Identifier);
  v5[16] = updated;
  v5[17] = *(_QWORD *)(updated - 8);
  v5[18] = swift_task_alloc();
  v12 = swift_task_alloc();
  v13 = *v4;
  v5[19] = v12;
  v5[20] = v13;
  return swift_task_switch();
}

uint64_t sub_244865DA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  int *v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t (**v21)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v22)(_QWORD);

  v1 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 104);
  v6 = swift_task_alloc();
  v7 = *(_OWORD *)(v0 + 88);
  *(_QWORD *)(v6 + 16) = v5;
  *(_OWORD *)(v6 + 24) = v7;
  FulfillOnceState.updateWaitingState<A>(update:)((uint64_t)sub_24486656C, v6, (uint64_t)&type metadata for Identifier, v8);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v10 = *(_QWORD *)(v0 + 104);
  if (EnumCaseMultiPayload == 1)
  {
    v11 = *(int **)(v0 + 88);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 32))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 104));
    v22 = (uint64_t (*)(_QWORD))((char *)v11 + *v11);
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v12;
    *v12 = v0;
    v12[1] = sub_244866004;
    return v22(*(_QWORD *)(v0 + 120));
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 152);
    v15 = *(_QWORD *)(v0 + 136);
    v16 = *(_QWORD *)(v0 + 128);
    v17 = **(_QWORD **)(v0 + 144);
    v18 = swift_allocObject();
    swift_weakInit();
    v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))swift_allocObject();
    *((_QWORD *)v19 + 2) = v10;
    *((_QWORD *)v19 + 3) = v18;
    *((_QWORD *)v19 + 4) = v17;
    *(_QWORD *)(v0 + 16) = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/Previe"
                           "wsFoundation/AsyncObservableEvent.swift";
    *(_QWORD *)(v0 + 24) = 132;
    *(_BYTE *)(v0 + 32) = 2;
    *(_OWORD *)(v0 + 40) = xmmword_2448F3E50;
    *(_QWORD *)(v0 + 56) = "addCancelableObserver(_:)";
    *(_QWORD *)(v0 + 64) = 25;
    *(_BYTE *)(v0 + 72) = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738AF78);
    swift_allocObject();
    v20 = sub_2447E5D90((_OWORD *)(v0 + 16), 0, 0, 1, 0, 0xD000000000000011, 0x80000002448F9A50, 0x64656C65636E6163, 0xE800000000000000);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    v21 = *(uint64_t (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 80);
    *v21 = sub_2448665C0;
    v21[1] = v19;
    v21[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v20;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_244866004()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_244866058()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 136);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD **)(v0 + 80);
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2448660D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t updated;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(_QWORD);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  _QWORD v24[2];
  _BYTE v25[16];
  uint64_t v26;
  void (*v27)(_QWORD);
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31[2];
  char v32;
  __int128 v33;
  const char *v34;
  uint64_t v35;
  char v36;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = type metadata accessor for AsyncObservableEvent.Observer(255, v5, a3, a4);
  v7 = type metadata accessor for ObserverAndTokenStorage(255, v6, (uint64_t)&type metadata for ConcurrentTokenCallback, (uint64_t)&protocol witness table for ConcurrentTokenCallback);
  v8 = MEMORY[0x24BEE4AE0] + 8;
  updated = type metadata accessor for FulfillOnceState.WaitingStateUpdateResult(0, v7, v5, MEMORY[0x24BEE4AE0] + 8);
  v10 = *(_QWORD *)(updated - 8);
  v11 = MEMORY[0x24BDAC7A8](updated);
  v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v24 - v14;
  v17 = *(void (**)(_QWORD))a1;
  v16 = *(_QWORD *)(a1 + 8);
  v18 = *(_QWORD *)(a1 + 16);
  v26 = v5;
  v27 = v17;
  v28 = v16;
  v29 = v18;
  FulfillOnceState.updateWaitingState<A>(update:)((uint64_t)sub_2448665E0, (uint64_t)v25, v8, v19);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, updated);
  if (swift_getEnumCaseMultiPayload() != 1)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, updated);
  v24[1] = v24;
  v31[0] = (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFound"
                    "ation/AsyncObservableEvent.swift";
  v31[1] = 132;
  v32 = 2;
  v33 = xmmword_2448F3E60;
  v34 = "manage(_:)";
  v35 = 10;
  v36 = 2;
  v20 = *(_QWORD *)(v18 + 144);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v20 + 76));
  sub_2447E5E3C((__int128 *)(v20 + 16), (uint64_t (*)(void))nullsub_1, v31, v18, (void (*)(uint64_t, _QWORD *))sub_2447E1AC8, &v30);
  os_unfair_lock_unlock((os_unfair_lock_t)(v20 + 76));
  v21 = swift_release();
  if ((v30 & 1) == 0)
    v17(v21);
  v22 = *(void (**)(char *, uint64_t))(v10 + 8);
  v22(v15, updated);
  return ((uint64_t (*)(char *, uint64_t))v22)(v13, updated);
}

uint64_t sub_2448662EC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v8[0] = a1;
  v8[1] = a2;
  v5 = type metadata accessor for AsyncObservableEvent.Observer(255, a3, a2, a3);
  v6 = type metadata accessor for ObserverAndTokenStorage(0, v5, (uint64_t)&type metadata for ConcurrentTokenCallback, (uint64_t)&protocol witness table for ConcurrentTokenCallback);
  swift_retain();
  sub_2447F6870((uint64_t)v8, v6, a4);
  return swift_release();
}

uint64_t sub_244866370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t updated;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t Strong;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v6 = type metadata accessor for AsyncObservableEvent.Observer(255, a3, a3, a4);
  v7 = type metadata accessor for ObserverAndTokenStorage(255, v6, (uint64_t)&type metadata for ConcurrentTokenCallback, (uint64_t)&protocol witness table for ConcurrentTokenCallback);
  v8 = MEMORY[0x24BEE4AE0] + 8;
  updated = type metadata accessor for FulfillOnceState.WaitingStateUpdateResult(255, v7, a3, MEMORY[0x24BEE4AE0] + 8);
  v10 = sub_2448EB508();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v18 - v12;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    MEMORY[0x24BDAC7A8](Strong);
    *(&v18 - 2) = a3;
    *(&v18 - 1) = a2;
    FulfillOnceState.updateWaitingState<A>(update:)((uint64_t)sub_2448665D8, (uint64_t)(&v18 - 4), v8, v15);
    swift_release();
    v16 = 0;
  }
  else
  {
    v16 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 56))(v13, v16, 1, updated);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_2448664E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = a2;
  v4 = type metadata accessor for AsyncObservableEvent.Observer(255, a3, a3, a4);
  v5 = type metadata accessor for ObserverAndTokenStorage(0, v4, (uint64_t)&type metadata for ConcurrentTokenCallback, (uint64_t)&protocol witness table for ConcurrentTokenCallback);
  return sub_2447F69CC(&v7, v5);
}

uint64_t sub_244866540@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v1 + 16) - 8) + 16))(a1, *(_QWORD *)(v1 + 24));
}

unint64_t sub_244866554(uint64_t a1, __int128 *a2)
{
  return sub_2447E1ADC(a1, a2);
}

uint64_t sub_24486656C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return sub_2448662EC(v1[3], v1[4], v1[2], a1);
}

uint64_t sub_244866578()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_24486659C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2448665C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_244866370(v4[3], v4[4], v4[2], a4);
}

uint64_t type metadata accessor for AsyncObservableEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncObservableEvent);
}

uint64_t sub_2448665D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_2448664E4(a1, *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 16), a4);
}

uint64_t sub_2448665E0(uint64_t a1)
{
  uint64_t *v1;

  return sub_2447F6EB8(a1, v1[3], v1[4], v1[5]);
}

uint64_t Inhabited<>.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>);
  PredicatedWrapper.value.getter(a2, v7, (uint64_t)v6);
  sub_2448EA908();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_2448666AC(uint64_t a1, uint64_t a2)
{
  return Inhabited<>.encode(to:)(a1, a2);
}

uint64_t KeyedEncodingContainer.encodeIfNotEmpty<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD v21[2];
  uint64_t v22;

  v21[0] = a2;
  v21[1] = a3;
  v9 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Inhabited(255, v13, *(_QWORD *)(v12 + 8), v13);
  v15 = sub_2448EB508();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)v21 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a4);
  v19 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, v14);
  PredicatedWrapper.init(_:)((uint64_t)v11, v14, v19, (uint64_t)v18);
  v22 = a6;
  MEMORY[0x24951AC70](&protocol conformance descriptor for <> Inhabited<A>, v14, &v22);
  sub_2448EBAFC();
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t KeyedEncodingContainer.encodeIf<A>(_:forKey:predicate:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[4];

  v19[0] = a5;
  v19[1] = a8;
  v19[3] = a2;
  v11 = sub_2448EB508();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v19 - v13;
  v15 = a3(a1);
  v16 = *(_QWORD *)(a6 - 8);
  if ((v15 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v14, a1, a6);
    v17 = 0;
  }
  else
  {
    v17 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, v17, 1, a6);
  sub_2448EBAFC();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t KeyValueMap.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t TupleTypeMetadata2;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(uint64_t);
  uint64_t AssociatedConformanceWitness;
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  void (*v32)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v42 = a5;
  v43 = a6;
  v44 = a4;
  v36 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = sub_2448EB508();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v34 - v10;
  v12 = swift_getAssociatedTypeWitness();
  v39 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v34 - v14;
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v34 - v17;
  v40 = v19;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v21 = sub_2448EB508();
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v34 - v23;
  v37 = a3;
  v25 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v38 = (char *)&v34 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = swift_getAssociatedTypeWitness();
  v34 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v28 = (char *)&v34 - v27;
  v29 = *(void (**)(uint64_t))(v44 + 24);
  v41 = a2;
  v29(a2);
  v35 = v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v38, v36, v37);
  sub_2448EACB0();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v42 = v28;
  v38 = (char *)AssociatedConformanceWitness;
  sub_2448EB58C();
  v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48);
  if (v31(v24, 1, TupleTypeMetadata2) != 1)
  {
    v32 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    do
    {
      v32(v18, &v24[*(int *)(TupleTypeMetadata2 + 48)], AssociatedTypeWitness);
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v15, v24, v40);
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v11, v18, AssociatedTypeWitness);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v11, 0, 1, AssociatedTypeWitness);
      (*(void (**)(char *, char *, uint64_t))(v44 + 40))(v11, v15, v41);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
      sub_2448EB58C();
    }
    while (v31(v24, 1, TupleTypeMetadata2) != 1);
  }
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v37);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v42, v45);
}

uint64_t KeyValueMap.guaranteedValue(for:creatingIfNecessaryWith:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t result;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a6;
  v32 = a3;
  v33 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v28 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v29 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v31 = (char *)&v27 - v10;
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v34 = (char *)&v27 - v13;
  v14 = sub_2448EB508();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v27 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v27 - v18;
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(a5 + 32);
  v30 = a1;
  v20(a1, a4, a5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v19, 1, v11) == 1)
  {
    v21 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
    v22 = v34;
    v23 = v36;
    result = v33(v21);
    if (v23)
      return result;
    v25 = v31;
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v31, v30, v29);
    v26 = v27;
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v27, v22, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v26, 0, 1, v11);
    (*(void (**)(char *, char *, uint64_t, uint64_t))(a5 + 40))(v26, v25, a4, a5);
  }
  else
  {
    v22 = v19;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(v35, v22, v11);
}

uint64_t KeyValueMap.setting(value:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v6 = v5;
  v22 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = sub_2448EB508();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v21 - v13;
  v15 = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v21 - v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a5, v6, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a2, v15);
  v19 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v14, v22, AssociatedTypeWitness);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v14, 0, 1, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(a4 + 40))(v14, v18, a3, a4);
}

uint64_t KeyValueMap<>.appending(contentsOf:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t TupleTypeMetadata2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;

  v45 = a4;
  v46 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = sub_2448EB508();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v33 - v8;
  v10 = swift_getAssociatedTypeWitness();
  v40 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v39 = (char *)&v33 - v12;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v33 - v14;
  v41 = v16;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v18 = sub_2448EB508();
  v43 = *(_QWORD *)(v18 - 8);
  v44 = v18;
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v33 - v23;
  v25 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v35 = (char *)&v33 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = a3;
  v36 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8);
  v34 = swift_getAssociatedTypeWitness();
  v37 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v28 = (char *)&v33 - v27;
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16);
  v29(v45, v38, a2);
  v29((uint64_t)v35, (uint64_t)v46, a2);
  v46 = v28;
  sub_2448EACB0();
  v38 = a2;
  v30 = v34;
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    sub_2448EB58C();
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v24, v21, v44);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v24, 1, TupleTypeMetadata2) == 1)break;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, &v24[*(int *)(TupleTypeMetadata2 + 48)], AssociatedTypeWitness);
    v31 = v39;
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v39, v24, v41);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v9, v15, AssociatedTypeWitness);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v42 + 40))(v9, v31, v38);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v46, v30);
}

void sub_2448673D4()
{
  JUMPOUT(0x2495190C8);
}

void (*sub_2448673EC(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_2448EA8D8();
  return sub_2447DD19C;
}

uint64_t sub_244867448(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x24951AC70](MEMORY[0x24BEE04E8]);
  result = MEMORY[0x24951AC70](MEMORY[0x24BEE04F8], a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t dispatch thunk of KeyValueMap.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of KeyValueMap.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of KeyValueMap.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of KeyValueMap.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t ExecutionExclusivity.hash(into:)()
{
  return sub_2448EBD0C();
}

BOOL static ExecutionExclusivity.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t ExecutionExclusivity.hashValue.getter()
{
  sub_2448EBD00();
  sub_2448EBD0C();
  return sub_2448EBD3C();
}

BOOL static ExecutionExclusivity.< infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 < a2;
}

unint64_t sub_244867538()
{
  unint64_t result;

  result = qword_25738EE30;
  if (!qword_25738EE30)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for ExecutionExclusivity, &type metadata for ExecutionExclusivity);
    atomic_store(result, (unint64_t *)&qword_25738EE30);
  }
  return result;
}

BOOL sub_24486757C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_244867590(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_2448675A4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_2448675B8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

uint64_t dispatch thunk of ExecutionExclusivityTracking.currentExecutionExclusivity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t storeEnumTagSinglePayload for ExecutionExclusivity(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_244867620 + 4 * byte_2448F3F95[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_244867654 + 4 * asc_2448F3F90[v4]))();
}

uint64_t sub_244867654(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24486765C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x244867664);
  return result;
}

uint64_t sub_244867670(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x244867678);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_24486767C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244867684(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExecutionExclusivity()
{
  return &type metadata for ExecutionExclusivity;
}

uint64_t withTimeout<A>(_:perform:makeTimeoutError:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  *(_QWORD *)(v7 + 48) = a6;
  *(_QWORD *)(v7 + 56) = a7;
  *(_QWORD *)(v7 + 32) = a4;
  *(_QWORD *)(v7 + 40) = a5;
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a3;
  *(_QWORD *)(v7 + 64) = *(_QWORD *)a2;
  *(_BYTE *)(v7 + 96) = *(_BYTE *)(a2 + 8);
  return swift_task_switch();
}

uint64_t sub_2448676D0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;

  v1 = *(_BYTE *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  sub_2448EB508();
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v4;
  v5 = *(_OWORD *)(v0 + 24);
  v6 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v3;
  *(_BYTE *)(v4 + 32) = v1;
  *(_OWORD *)(v4 + 40) = v5;
  *(_OWORD *)(v4 + 56) = v6;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v7;
  *v7 = v0;
  v7[1] = sub_244867794;
  return sub_2448EBA90();
}

uint64_t sub_244867794()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_244867808()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24486783C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  *(_QWORD *)(v8 + 64) = a8;
  *(_QWORD *)(v8 + 72) = v12;
  *(_QWORD *)(v8 + 48) = a6;
  *(_QWORD *)(v8 + 56) = a7;
  *(_BYTE *)(v8 + 184) = a4;
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 40) = a5;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v9 = sub_2448EB508();
  *(_QWORD *)(v8 + 80) = v9;
  v10 = sub_2448EB508();
  *(_QWORD *)(v8 + 88) = v10;
  *(_QWORD *)(v8 + 96) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 104) = swift_task_alloc();
  *(_QWORD *)(v8 + 112) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 120) = swift_task_alloc();
  *(_QWORD *)(v8 + 128) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A208);
  *(_QWORD *)(v8 + 136) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_244867918()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  v1 = *(unsigned __int8 *)(v0 + 184);
  if (v1 != 2)
  {
    v2 = *(_QWORD *)(v0 + 136);
    v3 = *(_QWORD *)(v0 + 72);
    v4 = v1 & 1;
    v5 = *(_QWORD *)(v0 + 32);
    v6 = sub_2448EAF74();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v2, 1, 1, v6);
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 32) = v3;
    *(_QWORD *)(v7 + 40) = v5;
    *(_BYTE *)(v7 + 48) = v4;
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
    sub_2448EB094();
    sub_2448825D0(v2, (uint64_t)&unk_25738EE80, v7);
    sub_2447C7D14(v2);
  }
  v8 = *(_QWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 72);
  v11 = *(_QWORD *)(v0 + 40);
  v10 = *(_QWORD *)(v0 + 48);
  v12 = sub_2448EAF74();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v8, 1, 1, v12);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = v9;
  v13[5] = v11;
  v13[6] = v10;
  swift_retain();
  *(_QWORD *)(v0 + 144) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  sub_2448EB094();
  sub_2448825D0(v8, (uint64_t)&unk_25738EE70, (uint64_t)v13);
  sub_2447C7D14(v8);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 152) = v14;
  *v14 = v0;
  v14[1] = sub_244867AE4;
  return sub_2448EB07C();
}

uint64_t sub_244867AE4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_244867B48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  int v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t (*v18)(double);

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 80);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(v1, *(_QWORD *)(v0 + 88));
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 120);
    v4 = *(_QWORD *)(v0 + 128);
    v6 = *(_QWORD *)(v0 + 72);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v4, v1, v3);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v5, v4, v3);
    v7 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    {
      v13 = *(_QWORD *)(v0 + 128);
      v14 = *(_QWORD *)(v0 + 112);
      v15 = *(_QWORD *)(v0 + 80);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 32))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 72));
      sub_2448EB088();
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v8 = *(_QWORD *)(v0 + 120);
    v9 = *(_QWORD *)(v0 + 80);
    v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 112) + 8);
    v10(*(_QWORD *)(v0 + 128), v9);
    v10(v8, v9);
  }
  v11 = *(unsigned __int8 *)(v0 + 184);
  sub_2448EB088();
  v12 = 0.0;
  if (v11 != 2)
  {
    v12 = *(double *)(v0 + 32);
    if ((*(_BYTE *)(v0 + 184) & 1) != 0)
    {
      if (qword_257389CB8 != -1)
        swift_once();
      if ((byte_25738F688 & 1) != 0)
      {
        if (qword_257389CC0 != -1)
          swift_once();
        if (byte_25738F689)
          v12 = v12 * 20.0;
      }
      else
      {
        v12 = *(double *)&qword_25738F680;
      }
    }
  }
  v18 = (uint64_t (*)(double))(**(int **)(v0 + 56) + *(_QWORD *)(v0 + 56));
  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v17;
  *v17 = v0;
  v17[1] = sub_244867DC4;
  return v18(v12);
}

uint64_t sub_244867DC4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_244867E20()
{
  uint64_t v0;

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_244867E8C()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_244867EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;

  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(v2 + 40);
  v8 = *(_QWORD *)(v2 + 48);
  v9 = *(_QWORD *)(v2 + 56);
  v10 = *(_QWORD *)(v2 + 64);
  v11 = *(_BYTE *)(v2 + 32);
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v12;
  *v12 = v3;
  v12[1] = sub_2447C81F0;
  return sub_24486783C(a1, a2, v6, v11, v7, v8, v9, v10);
}

uint64_t sub_244867F8C(uint64_t a1, double a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v6 + 32) = a6;
  *(_BYTE *)(v6 + 80) = a5;
  *(double *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 16) = a1;
  v7 = sub_2448EB8EC();
  *(_QWORD *)(v6 + 40) = v7;
  *(_QWORD *)(v6 + 48) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 56) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_244867FF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  if ((*(_BYTE *)(v0 + 80) & 1) != 0)
  {
    if (qword_257389CB8 != -1)
      swift_once();
    if ((byte_25738F688 & 1) != 0 && qword_257389CC0 != -1)
      swift_once();
  }
  v1 = sub_2448EBD90();
  v3 = v2;
  sub_2448EB8E0();
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_25738EE88 + dword_25738EE88);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v4;
  *v4 = v0;
  v4[1] = sub_24486811C;
  return v6(v1, v3, 0, 0, 1);
}

uint64_t sub_24486811C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return swift_task_switch();
}

uint64_t sub_24486819C()
{
  uint64_t v0;

  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 56))(*(_QWORD *)(v0 + 16), 1, 1);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2448681F0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t);

  v6[2] = a1;
  v6[3] = a6;
  v10 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  v8 = (_QWORD *)swift_task_alloc();
  v6[4] = v8;
  *v8 = v6;
  v8[1] = sub_244868258;
  return v10(a1);
}

uint64_t sub_244868258()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    return (*(uint64_t (**)(void))(v2 + 8))();
  else
    return swift_task_switch();
}

uint64_t sub_2448682C4()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 56))(*(_QWORD *)(v0 + 16), 0, 1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t withTimeout<A>(_:perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char v10;
  uint64_t v11;

  v10 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(v5 + 16) = *(_QWORD *)a2;
  *(_BYTE *)(v5 + 24) = v10;
  v11 = swift_task_alloc();
  *(_QWORD *)(v5 + 32) = v11;
  *(_QWORD *)v11 = v5;
  *(_QWORD *)(v11 + 8) = sub_2448683AC;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 56) = a5;
  *(_QWORD *)(v11 + 32) = a4;
  *(_QWORD *)(v11 + 40) = &unk_25738EE58;
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a3;
  *(_QWORD *)(v11 + 64) = *(_QWORD *)(v5 + 16);
  *(_BYTE *)(v11 + 96) = *(_BYTE *)(v5 + 24);
  return swift_task_switch();
}

uint64_t sub_2448683AC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 40) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_244868418()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_244868424()
{
  return swift_task_switch();
}

uint64_t sub_244868438()
{
  uint64_t v0;
  uint64_t v1;

  sub_24486847C();
  v1 = swift_allocError();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

unint64_t sub_24486847C()
{
  unint64_t result;

  result = qword_25738EE60;
  if (!qword_25738EE60)
  {
    result = MEMORY[0x24951AC70](&unk_2448F40E4, &type metadata for TaskTimeoutError);
    atomic_store(result, &qword_25738EE60);
  }
  return result;
}

uint64_t sub_2448684C0()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2448684EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t);

  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(int **)(v1 + 40);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_2447C62E8;
  v6[2] = a1;
  v6[3] = v4;
  v9 = (uint64_t (*)(uint64_t))((char *)v5 + *v5);
  v7 = (_QWORD *)swift_task_alloc();
  v6[4] = v7;
  *v7 = v6;
  v7[1] = sub_244868258;
  return v9(a1);
}

uint64_t sub_244868580()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2448685A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  char v8;
  _QWORD *v9;

  v5 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(double *)(v1 + 40);
  v8 = *(_BYTE *)(v1 + 48);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_2447C81F0;
  return sub_244867F8C(a1, v7, v6, v5, v8, v4);
}

uint64_t sub_244868628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = sub_2448EB8D4();
  *(_QWORD *)(v6 + 64) = v12;
  *(_QWORD *)(v6 + 72) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 80) = swift_task_alloc();
  *(_QWORD *)(v6 + 88) = swift_task_alloc();
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch();
}

uint64_t sub_2448686CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  _QWORD *v5;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  sub_2448EB8EC();
  sub_2447BD7A0(&qword_25738EE90, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6E10], MEMORY[0x24BEE6E20]);
  sub_2448EBC88();
  sub_2447BD7A0(&qword_25738EE98, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6DC8], MEMORY[0x24BEE6E00]);
  sub_2448EB8F8();
  v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v4;
  v4(v1, v2);
  v5 = (_QWORD *)swift_task_alloc();
  v0[13] = v5;
  *v5 = v0;
  v5[1] = sub_2448687E4;
  return sub_2448EBC94();
}

uint64_t sub_2448687E4()
{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v3 = *(_QWORD *)(*v1 + 88);
  v4 = *(_QWORD *)(*v1 + 64);
  v5 = *v1;
  *(_QWORD *)(v5 + 112) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_244868890()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

ValueMetadata *type metadata accessor for TaskTimeoutError()
{
  return &type metadata for TaskTimeoutError;
}

uint64_t sub_2448688DC(_OWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738F030);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (uint64_t *)((char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A590);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)((char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2447C9300(a2, (uint64_t)v6, &qword_25738F030);
  if (swift_getEnumCaseMultiPayload() == 1)
    *v9 = *v6;
  else
    sub_244819704((uint64_t)v6, (uint64_t)v9);
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738F038);
  swift_allocObject();
  v10 = sub_2447D1BAC(a1);
  swift_retain();
  sub_2447D2178((uint64_t)v9);
  swift_release();
  sub_2447BD180((uint64_t)v9, &qword_25738A590);
  return v10;
}

uint64_t sub_244868A34(_OWORD *a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v3;
  __int128 v6;
  _OWORD v8[2];
  _OWORD v9[2];
  uint64_t v10;

  v6 = a1[1];
  v8[0] = *a1;
  v8[1] = v6;
  v9[0] = a1[2];
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)((char *)a1 + 41);
  type metadata accessor for CrashReport(0);
  sub_2447E991C((uint64_t)v8, a2, a3, v3, (uint64_t)&v10);
  return v10;
}

uint64_t sub_244868AAC(_OWORD *a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v3;
  __int128 v6;
  _OWORD v8[2];
  _OWORD v9[2];
  uint64_t v10;

  v6 = a1[1];
  v8[0] = *a1;
  v8[1] = v6;
  v9[0] = a1[2];
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)((char *)a1 + 41);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0E8);
  sub_2447E991C((uint64_t)v8, a2, a3, v3, (uint64_t)&v10);
  return v10;
}

uint64_t CrashLogSymbolicator.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  CrashLogSymbolicator.init()();
  return v0;
}

uint64_t CrashLogSymbolicator.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = sub_2448EB3D0();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  v13 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_2448EA734();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2448EA728();
  v15 = MEMORY[0x24BEE4AF8];
  sub_2447BD7A0(&qword_25738D608, v2, MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738D610);
  sub_24486F760(&qword_25738D618, &qword_25738D610);
  sub_2448EB6C4();
  static ExecutionLane.queue(label:qos:attributes:target:)(0xD000000000000020, 0x80000002448FB8E0, (uint64_t)v8, (uint64_t)v4, 0, (uint64_t *)(v0 + 16));
  (*(void (**)(char *, uint64_t))(v13 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738EEA0);
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 16) = MEMORY[0x24BEE4B00];
  v10 = v14;
  *(_QWORD *)(v14 + 32) = v9;
  return v10;
}

uint64_t CrashLogSymbolicator.symbolicate(_:with:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  __int128 aBlock;
  uint64_t (*v104)(uint64_t);
  __int128 v105;
  const char *v106;
  uint64_t v107;
  char v108;

  v5 = sub_2448EA704();
  v89 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v88 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_2448EA734();
  v87 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v86 = (char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for CrashReport(0);
  v97 = *(_QWORD *)(v91 - 8);
  v9 = MEMORY[0x24BDAC7A8](v91);
  v92 = (uint64_t)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v83 - v12;
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v83 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14);
  v96 = (uint64_t)&v83 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v83 - v20;
  v100 = v22;
  MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v83 - v23;
  v25 = *a2;
  v98 = v2;
  v99 = v25;
  v26 = *(_QWORD *)(v2 + 32);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v26 + 24));
  v101 = (const char *)a1;
  sub_244869954((uint64_t *)(v26 + 16), a1, (uint64_t *)&aBlock);
  os_unfair_lock_unlock((os_unfair_lock_t)(v26 + 24));
  v28 = *((_QWORD *)&aBlock + 1);
  v27 = aBlock;
  swift_release();
  if (v28)
  {
    v84 = v7;
    v90 = v27;
    v29 = qword_257389D60;
    swift_retain();
    if (v29 != -1)
      swift_once();
    v94 = v28;
    v30 = sub_2448EA5FC();
    __swift_project_value_buffer(v30, (uint64_t)qword_25738F918);
    v31 = (uint64_t)v101;
    sub_2447BD13C((uint64_t)v101, (uint64_t)v24, type metadata accessor for CrashReport);
    sub_2447BD13C(v31, (uint64_t)v21, type metadata accessor for CrashReport);
    v32 = sub_2448EA5E4();
    v33 = sub_2448EB388();
    v34 = os_log_type_enabled(v32, v33);
    v95 = v16;
    v93 = v13;
    v85 = v5;
    if (v34)
    {
      v35 = swift_slowAlloc();
      v36 = swift_slowAlloc();
      *(_QWORD *)&aBlock = v36;
      *(_DWORD *)v35 = 136446466;
      v37 = _s10Foundation4UUIDV08PreviewsA2OSE17propertyListValueSSvg_0();
      v102 = sub_2447D6798(v37, v38, (uint64_t *)&aBlock);
      sub_2448EB598();
      swift_bridgeObjectRelease();
      sub_2447BF330((uint64_t)v24, type metadata accessor for CrashReport);
      *(_WORD *)(v35 + 12) = 2080;
      v39 = (uint64_t *)&v21[*(int *)(v91 + 20)];
      v41 = *v39;
      v40 = v39[1];
      swift_bridgeObjectRetain();
      v102 = sub_2447D6798(v41, v40, (uint64_t *)&aBlock);
      v13 = v93;
      sub_2448EB598();
      swift_bridgeObjectRelease();
      sub_2447BF330((uint64_t)v21, type metadata accessor for CrashReport);
      _os_log_impl(&dword_2447B9000, v32, v33, "Starting symbolication of report %{public}s for %s", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24951AD84](v36, -1, -1);
      v42 = v35;
      v16 = v95;
      MEMORY[0x24951AD84](v42, -1, -1);
    }
    else
    {
      sub_2447BF330((uint64_t)v24, type metadata accessor for CrashReport);
      sub_2447BF330((uint64_t)v21, type metadata accessor for CrashReport);
    }

    v44 = *(void **)(v98 + 16);
    v43 = *(_QWORD *)(v98 + 24);
    v45 = v96;
    sub_2447BD13C((uint64_t)v101, v96, type metadata accessor for CrashReport);
    sub_2447BD13C(v45, (uint64_t)v16, type metadata accessor for CrashReport);
    sub_2447BD13C(v45, (uint64_t)v13, type metadata accessor for CrashReport);
    v46 = *(unsigned __int8 *)(v97 + 80);
    v98 = ~v46;
    v47 = (v46 + 16) & ~v46;
    v48 = (v100 + v47 + 7) & 0xFFFFFFFFFFFFFFF8;
    v49 = (v48 + 15) & 0xFFFFFFFFFFFFFFF8;
    v50 = swift_allocObject();
    sub_244819704(v45, v50 + v47);
    *(_QWORD *)(v50 + v48) = v99;
    v51 = (_QWORD *)(v50 + v49);
    *v51 = v44;
    v51[1] = v43;
    v52 = v94;
    v101 = (const char *)v50;
    *(_QWORD *)(v50 + ((v49 + 23) & 0xFFFFFFFFFFFFFFF8)) = v94;
    *(_QWORD *)&aBlock = v44;
    *((_QWORD *)&aBlock + 1) = v43;
    swift_retain();
    swift_bridgeObjectRetain();
    sub_24481240C(v44);
    swift_retain();
    swift_bridgeObjectRetain();
    sub_24481240C(v44);
    swift_retain();
    swift_bridgeObjectRetain();
    sub_24481240C(v44);
    if ((ExecutionLane.isCurrentLane.getter() & 1) != 0)
    {
      v53 = (uint64_t)v95;
      v54 = sub_244869EA0();
      v55 = v92;
      sub_2447BD13C(v53, v92, type metadata accessor for CrashReport);
      v56 = (v46 + 32) & v98;
      v57 = swift_allocObject();
      *(_QWORD *)(v57 + 16) = v44;
      *(_QWORD *)(v57 + 24) = v43;
      sub_244819704(v55, v57 + v56);
      *(_QWORD *)&aBlock = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/Previe"
                           "wsFoundation/CrashLogSymbolicator.swift";
      *((_QWORD *)&aBlock + 1) = 132;
      LOBYTE(v104) = 2;
      v105 = xmmword_2448F4130;
      v106 = "symbolicate(with:on:)";
      v107 = 21;
      v108 = 2;
      v58 = swift_allocObject();
      *(_QWORD *)(v58 + 16) = sub_24486DE60;
      *(_QWORD *)(v58 + 24) = v57;
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738EEA8);
      swift_allocObject();
      sub_24481240C(v44);
      sub_24486E428(&aBlock, v54, 0, 0, 0, 0, (uint64_t)sub_24486F1F0, v58);
      v60 = v59;
      v61 = *(_QWORD *)(v52 + 16);
      v62 = v53;
      if (v61 == v59)
      {
        swift_release();
        swift_release_n();
        swift_release();
      }
      else
      {
        swift_retain();
        sub_2448B7EC8(0, 0, v60, v52);
        sub_2448B85BC(0, 0, v60, v52);
        swift_release();
        swift_retain();
        sub_2448B8CD8(0, 0, v61, v60);
        swift_release();
        swift_release_n();
        swift_release_n();
      }
      v69 = (uint64_t)v93;
      v27 = v90;
    }
    else
    {
      v63 = v98;
      if (v44)
      {
        if (v44 == (void *)1)
        {
          sub_244803860();
          v100 = sub_2448EB418();
          *((_QWORD *)&v105 + 1) = sub_24486DE00;
          v106 = v101;
          *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
          *((_QWORD *)&aBlock + 1) = 1107296256;
          v104 = sub_2447EB164;
          *(_QWORD *)&v105 = &block_descriptor_9;
          v64 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          v65 = v86;
          sub_2448EA71C();
          *(_QWORD *)&aBlock = MEMORY[0x24BEE4AF8];
          sub_2447BD7A0((unint64_t *)&qword_25738B1E0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
          __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
          sub_24486F760(qword_25738B1F0, &qword_25738B1E8);
          v66 = v88;
          v67 = v85;
          sub_2448EB6C4();
          v68 = (void *)v100;
          MEMORY[0x249519C08](0, v65, v66, v64);
          _Block_release(v64);

          (*(void (**)(char *, uint64_t))(v89 + 8))(v66, v67);
          (*(void (**)(char *, uint64_t))(v87 + 8))(v65, v84);
          swift_release();
          swift_release_n();
        }
        else
        {
          *((_QWORD *)&v105 + 1) = sub_24486DE00;
          v106 = v101;
          *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
          *((_QWORD *)&aBlock + 1) = 1107296256;
          v104 = sub_2447EB164;
          *(_QWORD *)&v105 = &block_descriptor_7;
          v78 = _Block_copy(&aBlock);
          sub_24481240C(v44);
          swift_retain();
          v79 = v86;
          sub_2448EA71C();
          v102 = MEMORY[0x24BEE4AF8];
          sub_2447BD7A0((unint64_t *)&qword_25738B1E0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
          __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
          sub_24486F760(qword_25738B1F0, &qword_25738B1E8);
          v80 = v88;
          v81 = v85;
          sub_2448EB6C4();
          MEMORY[0x249519C08](0, v79, v80, v78);
          _Block_release(v78);
          sub_24481241C(v44);
          (*(void (**)(char *, uint64_t))(v89 + 8))(v80, v81);
          (*(void (**)(char *, uint64_t))(v87 + 8))(v79, v84);
          swift_release();
          swift_release_n();
          swift_release();
        }
        v62 = (uint64_t)v95;
        v27 = v90;
        v69 = (uint64_t)v93;
      }
      else
      {
        v69 = (uint64_t)v93;
        v70 = sub_244869EA0();
        v71 = v92;
        sub_2447BD13C(v69, v92, type metadata accessor for CrashReport);
        v72 = swift_allocObject();
        *(_QWORD *)(v72 + 16) = 0;
        *(_QWORD *)(v72 + 24) = v43;
        sub_244819704(v71, v72 + ((v46 + 32) & v63));
        *(_QWORD *)&aBlock = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/Prev"
                             "iewsFoundation/CrashLogSymbolicator.swift";
        *((_QWORD *)&aBlock + 1) = 132;
        LOBYTE(v104) = 2;
        v105 = xmmword_2448F4130;
        v106 = "symbolicate(with:on:)";
        v107 = 21;
        v108 = 2;
        v73 = swift_allocObject();
        *(_QWORD *)(v73 + 16) = sub_24486DE60;
        *(_QWORD *)(v73 + 24) = v72;
        __swift_instantiateConcreteTypeFromMangledName(&qword_25738EEA8);
        swift_allocObject();
        sub_24481240C(0);
        sub_24486E428(&aBlock, v70, 0, v43, 0, v43, (uint64_t)sub_24486F1F0, v73);
        v75 = v74;
        v76 = v94;
        v62 = (uint64_t)v95;
        v77 = *(_QWORD *)(v94 + 16);
        if (v77 != v74)
        {
          swift_retain();
          sub_2448B7EC8(0, v43, v75, v76);
          sub_2448B85BC(0, v43, v75, v76);
          swift_release();
          swift_retain();
          sub_2448B8CD8(0, v43, v77, v75);
          swift_release();
        }
        swift_release();
        sub_24481241C(0);
        swift_release();
        swift_release_n();
        v27 = v90;
      }
    }
    sub_2447BF330(v69, type metadata accessor for CrashReport);
    swift_bridgeObjectRelease();
    sub_24481241C(v44);
    swift_release();
    sub_2447BF330(v62, type metadata accessor for CrashReport);
    swift_bridgeObjectRelease();
    sub_24481241C(v44);
    swift_release();
  }
  return v27;
}

uint64_t sub_244869954@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  __int128 v22;
  char v23;
  __int128 v24;
  const char *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v6 = type metadata accessor for CrashReport.ID(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738F010);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  if (*(_QWORD *)(*a1 + 16) && (v13 = sub_244828EE4(a2), (v14 & 1) != 0))
  {
    *a3 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v13);
    a3[1] = 0;
    return swift_retain();
  }
  else
  {
    *(_QWORD *)&v22 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFou"
                      "ndation/CrashLogSymbolicator.swift";
    *((_QWORD *)&v22 + 1) = 132;
    v23 = 2;
    v24 = xmmword_2448F4140;
    v25 = "symbolicate(_:with:)";
    v26 = 20;
    v27 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738F018);
    v16 = swift_allocObject();
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A590);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v11, 1, 1, v17);
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738F020);
    v18 = swift_allocObject();
    *(_DWORD *)(v18 + ((*(unsigned int *)(*(_QWORD *)v18 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
    sub_2447C9300((uint64_t)v11, v18 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v18 + 16), &qword_25738F010);
    swift_retain();
    sub_2447BD180((uint64_t)v11, &qword_25738F010);
    *(_QWORD *)(v16 + 104) = v18;
    swift_release();
    v19 = sub_2447D1BAC(&v22);
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738F028);
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = v19;
    sub_2447BD13C(a2, (uint64_t)v8, type metadata accessor for CrashReport.ID);
    swift_retain_n();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v28 = *a1;
    *a1 = 0x8000000000000000;
    sub_24481FFC4(v19, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
    *a1 = v28;
    swift_bridgeObjectRelease();
    result = sub_2447BF330((uint64_t)v8, type metadata accessor for CrashReport.ID);
    *a3 = v19;
    a3[1] = v20;
  }
  return result;
}

uint64_t sub_244869BE8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  char v21;
  __int128 v22;
  const char *v23;
  uint64_t v24;
  char v25;

  v9 = type metadata accessor for CrashReport(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = sub_244869EA0();
  sub_2447BD13C(a1, (uint64_t)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CrashReport);
  v13 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a3;
  *(_QWORD *)(v14 + 24) = a4;
  sub_244819704((uint64_t)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13);
  *(_QWORD *)&v20 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFound"
                    "ation/CrashLogSymbolicator.swift";
  *((_QWORD *)&v20 + 1) = 132;
  v21 = 2;
  v22 = xmmword_2448F4130;
  v23 = "symbolicate(with:on:)";
  v24 = 21;
  v25 = 2;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = sub_24486DE60;
  *(_QWORD *)(v15 + 24) = v14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738EEA8);
  swift_allocObject();
  sub_24481240C(a3);
  sub_24486E428(&v20, v12, 0, 0, 0, 0, (uint64_t)sub_24486F1F0, v15);
  v17 = v16;
  v18 = *(_QWORD *)(a5 + 16);
  if (v18 != v16)
  {
    swift_retain();
    sub_2448B7EC8(0, 0, v17, a5);
    sub_2448B85BC(0, 0, v17, a5);
    swift_release();
    swift_retain();
    sub_2448B8CD8(0, 0, v18, v17);
    swift_release();
  }
  return swift_release();
}

uint64_t CrashLogSymbolicator.deinit()
{
  uint64_t v0;

  sub_24481241C(*(id *)(v0 + 16));
  swift_release();
  return v0;
}

uint64_t CrashLogSymbolicator.__deallocating_deinit()
{
  uint64_t v0;

  sub_24481241C(*(id *)(v0 + 16));
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_244869E40()
{
  CSRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_244869EA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  char v27;
  __int128 v28;
  const char *v29;
  uint64_t v30;
  char v31;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CrashReport(0) + 40));
  v25 = *(_QWORD *)(v1 + 16);
  if (v25)
  {
    v2 = 0;
    v3 = swift_bridgeObjectRetain() + 48;
    v20 = MEMORY[0x24BEE4AF8];
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      if (v4)
      {
        v24 = *(_OWORD *)(v3 + 32);
        v5 = *(_QWORD *)(v3 - 8);
        v21 = *(_QWORD *)v3;
        v22 = *(_QWORD *)(v3 - 16);
        v6 = *(_OWORD *)(v3 + 8);
        v7 = *(_QWORD *)(v3 + 24);
        v8 = *(_QWORD *)(v3 + 48);
        *(_QWORD *)&v26 = v7;
        *((_QWORD *)&v26 + 1) = v4;
        v23 = v6;
        sub_2447D0980();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        if ((sub_2448EB604() & 1) != 0)
        {
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        else
        {
          *(_QWORD *)&v26 = v7;
          *((_QWORD *)&v26 + 1) = v4;
          v9 = sub_2448EB604();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v9 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            v10 = v20;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_2447CEF24(0, *(_QWORD *)(v20 + 16) + 1, 1);
              v10 = v20;
            }
            v11 = v24;
            v13 = *(_QWORD *)(v10 + 16);
            v12 = *(_QWORD *)(v10 + 24);
            if (v13 >= v12 >> 1)
            {
              sub_2447CEF24(v12 > 1, v13 + 1, 1);
              v11 = v24;
              v10 = v20;
            }
            *(_QWORD *)(v10 + 16) = v13 + 1;
            v20 = v10;
            v14 = v10 + 80 * v13;
            *(_QWORD *)(v14 + 32) = v2;
            *(_QWORD *)(v14 + 40) = v22;
            *(_QWORD *)(v14 + 48) = v5;
            *(_QWORD *)(v14 + 56) = v21;
            *(_OWORD *)(v14 + 64) = v23;
            *(_QWORD *)(v14 + 80) = v7;
            *(_OWORD *)(v14 + 88) = v11;
            *(_QWORD *)(v14 + 104) = v8;
          }
        }
      }
      ++v2;
      v3 += 72;
    }
    while (v25 != v2);
    v1 = swift_bridgeObjectRelease();
    v15 = v20;
  }
  else
  {
    v15 = MEMORY[0x24BEE4AF8];
  }
  MEMORY[0x24BDAC7A8](v1);
  v16 = sub_24486F364(v15, (void (*)(_QWORD, _QWORD))sub_24486FBB8);
  swift_release();
  *(_QWORD *)&v26 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFound"
                    "ation/CrashLogSymbolicator.swift";
  *((_QWORD *)&v26 + 1) = 132;
  v27 = 2;
  v28 = xmmword_2448F4150;
  v29 = "resolveObfuscatedImagePaths(using:)";
  v30 = 35;
  v31 = 2;
  sub_244814974(&v26, 0, v16);
  v18 = v17;
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t sub_24486A244(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[6];
  __int128 v7;
  char v8;
  __int128 v9;
  const char *v10;
  uint64_t v11;
  char v12;

  v4 = *a1;
  v6[2] = a2;
  v6[3] = a3;
  v6[4] = a4;
  v6[5] = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738F040);
  *(_QWORD *)&v7 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFounda"
                   "tion/CrashLogSymbolicator.swift";
  *((_QWORD *)&v7 + 1) = 132;
  v8 = 2;
  v9 = xmmword_2448F4160;
  v10 = "symbolicate(with:on:)";
  v11 = 21;
  v12 = 2;
  return sub_244868A34(&v7, (void (*)(uint64_t))sub_24486F974, (uint64_t)v6);
}

uint64_t sub_24486A2CC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void *v38;
  char *v39;
  uint64_t v40;
  const void *v41;
  uint64_t v43;
  void *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  void *aBlock;
  uint64_t v59;
  uint64_t (*v60)(uint64_t);
  void *v61;
  uint64_t (*v62)();
  uint64_t v63;

  v54 = a5;
  v55 = a2;
  v56 = a3;
  v53 = a1;
  v51 = sub_2448EA704();
  v49 = *(_QWORD *)(v51 - 8);
  MEMORY[0x24BDAC7A8](v51);
  v48 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_2448EA734();
  v47 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v46 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738F030);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CrashReport(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v43 - v17;
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)&v43 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v43 - v22;
  sub_2447BD13C(a4, (uint64_t)&v43 - v22, type metadata accessor for CrashReport);
  sub_2447BD13C((uint64_t)v23, (uint64_t)v21, type metadata accessor for CrashReport);
  v52 = v18;
  sub_2447BD13C((uint64_t)v23, (uint64_t)v18, type metadata accessor for CrashReport);
  v24 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v25 = (v13 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = swift_allocObject();
  v27 = v26 + v24;
  v29 = v53;
  v28 = v54;
  sub_244819704((uint64_t)v23, v27);
  *(_QWORD *)(v26 + v25) = v28;
  *(_QWORD *)(v26 + ((v25 + 15) & 0xFFFFFFFFFFFFFFF8)) = v29;
  v30 = v55;
  aBlock = v55;
  v59 = v56;
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  if ((ExecutionLane.isCurrentLane.getter() & 1) != 0)
  {
    sub_24486A9F8(v28, (uint64_t)v15);
    sub_2447BD13C((uint64_t)v15, (uint64_t)v10, type metadata accessor for CrashReport);
    swift_storeEnumTagMultiPayload();
    sub_2448B1610((uint64_t)v10);
    sub_2447BD180((uint64_t)v10, &qword_25738F030);
    sub_2447BF330((uint64_t)v15, type metadata accessor for CrashReport);
    swift_release();
LABEL_9:
    v36 = (uint64_t)v52;
    goto LABEL_10;
  }
  v45 = v21;
  if (v30)
  {
    if (v30 == (void *)1)
    {
      sub_244803860();
      v31 = (void *)sub_2448EB418();
      v62 = sub_24486FAA0;
      v63 = v26;
      aBlock = (void *)MEMORY[0x24BDAC760];
      v59 = 1107296256;
      v60 = sub_2447EB164;
      v61 = &block_descriptor_42;
      v32 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      v33 = v46;
      sub_2448EA71C();
      aBlock = (void *)MEMORY[0x24BEE4AF8];
      sub_2447BD7A0((unint64_t *)&qword_25738B1E0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
      sub_24486F760(qword_25738B1F0, &qword_25738B1E8);
      v34 = v48;
      v35 = v51;
      sub_2448EB6C4();
      MEMORY[0x249519C08](0, v33, v34, v32);
      _Block_release(v32);

      (*(void (**)(char *, uint64_t))(v49 + 8))(v34, v35);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v33, v50);
    }
    else
    {
      v62 = sub_24486FAA0;
      v63 = v26;
      aBlock = (void *)MEMORY[0x24BDAC760];
      v59 = 1107296256;
      v60 = sub_2447EB164;
      v61 = &block_descriptor_39;
      v44 = _Block_copy(&aBlock);
      swift_retain();
      sub_24481240C(v30);
      v37 = v46;
      sub_2448EA71C();
      v57 = MEMORY[0x24BEE4AF8];
      sub_2447BD7A0((unint64_t *)&qword_25738B1E0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
      v38 = v30;
      sub_24486F760(qword_25738B1F0, &qword_25738B1E8);
      v39 = v48;
      v40 = v51;
      sub_2448EB6C4();
      v41 = v44;
      MEMORY[0x249519C08](0, v37, v39, v44);
      _Block_release(v41);
      sub_24481241C(v38);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v39, v40);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v37, v50);
      swift_release();
    }
    swift_release();
    v21 = v45;
    goto LABEL_9;
  }
  v36 = (uint64_t)v52;
  sub_24486A9F8(v28, (uint64_t)v15);
  sub_2447BD13C((uint64_t)v15, (uint64_t)v10, type metadata accessor for CrashReport);
  swift_storeEnumTagMultiPayload();
  sub_2448B1610((uint64_t)v10);
  sub_2447BD180((uint64_t)v10, &qword_25738F030);
  sub_2447BF330((uint64_t)v15, type metadata accessor for CrashReport);
  swift_release();
  v21 = v45;
LABEL_10:
  sub_2447BF330(v36, type metadata accessor for CrashReport);
  swift_release();
  swift_bridgeObjectRelease();
  sub_2447BF330((uint64_t)v21, type metadata accessor for CrashReport);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24486A8E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738F030);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CrashReport(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24486A9F8(a2, (uint64_t)v8);
  sub_2447BD13C((uint64_t)v8, (uint64_t)v5, type metadata accessor for CrashReport);
  swift_storeEnumTagMultiPayload();
  sub_2448B1610((uint64_t)v5);
  sub_2447BD180((uint64_t)v5, &qword_25738F030);
  return sub_2447BF330((uint64_t)v8, type metadata accessor for CrashReport);
}

uint64_t sub_24486A9F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD v88[2];
  int *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t ArchitectureForName;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  unint64_t v113;
  uint64_t v114;

  v90 = a2;
  v91 = 0;
  v4 = type metadata accessor for CrashReport(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v114 = MEMORY[0x24BEE4B00];
  v89 = (int *)v5;
  v7 = *(int *)(v5 + 40);
  v102 = v2;
  v8 = *(_QWORD **)(v2 + v7);
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
    v65 = swift_bridgeObjectRetain();
LABEL_49:
    v96 = v8;
    v107 = MEMORY[0x24BEE4B00];
    v66 = v89;
    v67 = v102;
    v68 = *(_QWORD *)(v102 + v89[11]);
    MEMORY[0x24BDAC7A8](v65);
    v88[-4] = &v107;
    v88[-3] = &v114;
    v88[-2] = v67;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v101 = sub_2448C8974((void (*)(__int128 *__return_ptr, __int128 *))sub_24486FAEC, (uint64_t)&v88[-6], v68);
    swift_bridgeObjectRelease();
    v69 = v90;
    sub_2447BD13C(v67, v90, type metadata accessor for CrashReport.ID);
    v70 = (uint64_t *)(v67 + v66[5]);
    v72 = *v70;
    v71 = v70[1];
    v73 = (uint64_t *)(v67 + v66[6]);
    v74 = *v73;
    v75 = v73[1];
    v76 = v66[8];
    v77 = *(_DWORD *)(v67 + v66[7]);
    v78 = v67 + v76;
    v79 = v69 + v76;
    v80 = sub_2448EA500();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 16))(v79, v78, v80);
    v81 = *(_QWORD *)(v67 + v66[9]);
    v82 = (uint64_t *)(v67 + v66[12]);
    v83 = (_QWORD *)(v69 + v66[5]);
    *v83 = v72;
    v83[1] = v71;
    v84 = (_QWORD *)(v69 + v66[6]);
    *v84 = v74;
    v84[1] = v75;
    *(_DWORD *)(v69 + v66[7]) = v77;
    *(_QWORD *)(v69 + v66[9]) = v81;
    *(_QWORD *)(v69 + v66[10]) = v96;
    *(_QWORD *)(v69 + v66[11]) = v101;
    v86 = *v82;
    v85 = v82[1];
    v87 = (_QWORD *)(v69 + v66[12]);
    *v87 = v86;
    v87[1] = v85;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v94 = (uint64_t)v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
  v88[1] = a1;
  v11 = (_QWORD *)(a1 + 48);
  *(_QWORD *)&v12 = 136446466;
  v93 = v12;
  v92 = MEMORY[0x24BEE4AD8] + 8;
  v97 = v7;
  while (1)
  {
    v15 = *(v11 - 2);
    v16 = *(_QWORD *)(v102 + v7);
    if (v15 >= *(_QWORD *)(v16 + 16))
      goto LABEL_4;
    if (v15 < 0)
      break;
    v99 = v9;
    v17 = *(v11 - 1);
    v18 = *v11;
    v98 = v11;
    v19 = v16 + 72 * v15;
    v20 = *(_QWORD *)(v19 + 40);
    v21 = *(_QWORD *)(v19 + 48);
    v22 = *(_QWORD *)(v19 + 72);
    v23 = *(_QWORD *)(v19 + 96);
    v24 = *(_OWORD *)(v19 + 56);
    v25 = *(_OWORD *)(v19 + 80);
    v107 = *(_QWORD *)(v19 + 32);
    v108 = v20;
    v109 = v21;
    v101 = v24;
    v110 = v24;
    v111 = v22;
    v112 = v25;
    v113 = v23;
    v26 = v25;
    v100 = v15;
    if (v18)
    {
      v27 = v18;
    }
    else
    {
      swift_bridgeObjectRetain();
      v17 = v22;
      v27 = v26;
    }
    swift_beginAccess();
    v111 = v17;
    *(_QWORD *)&v112 = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (!v27 || !(_QWORD)v110)
    {
      if (qword_257389D60 != -1)
        swift_once();
      v29 = sub_2448EA5FC();
      __swift_project_value_buffer(v29, (uint64_t)qword_25738F918);
      v30 = v94;
      sub_2447BD13C(v102, v94, type metadata accessor for CrashReport);
      v31 = sub_2448EA5E4();
      v32 = sub_2448EB394();
      if (os_log_type_enabled(v31, v32))
      {
        v33 = swift_slowAlloc();
        v34 = swift_slowAlloc();
        v105 = v34;
        *(_DWORD *)v33 = v93;
        v35 = _s10Foundation4UUIDV08PreviewsA2OSE17propertyListValueSSvg_0();
        *(_QWORD *)(v33 + 4) = sub_2447D6798(v35, v36, &v105);
        swift_bridgeObjectRelease();
        sub_2447BF330(v30, type metadata accessor for CrashReport);
        *(_WORD *)(v33 + 12) = 2080;
        if (v113)
          v37 = *((_QWORD *)&v112 + 1);
        else
          v37 = 0x6E776F6E6B6E753CLL;
        if (v113)
          v38 = v113;
        else
          v38 = 0xE90000000000003ELL;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v33 + 14) = sub_2447D6798(v37, v38, &v105);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2447B9000, v31, v32, "[%{public}s] Ignoring image without path or arch: %s", (uint8_t *)v33, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x24951AD84](v34, -1, -1);
        MEMORY[0x24951AD84](v33, -1, -1);
      }
      else
      {
        sub_2447BF330(v30, type metadata accessor for CrashReport);
      }

      v39 = v100;
      goto LABEL_41;
    }
    if ((v110 & 0x1000000000000000) != 0 || !(v110 & 0x2000000000000000 | v109 & 0x1000000000000000))
    {
      type metadata accessor for _CSArchitecture(0);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v63 = v91;
      sub_2448EB778();
      v91 = v63;
    }
    else
    {
      if ((v110 & 0x2000000000000000) != 0)
      {
        v105 = v109;
        v106 = v110 & 0xFFFFFFFFFFFFFFLL;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        ArchitectureForName = CSArchitectureGetArchitectureForName();
        v28 = swift_bridgeObjectRelease();
        goto LABEL_32;
      }
      if ((v109 & 0x1000000000000000) == 0)
        sub_2448EB820();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      ArchitectureForName = CSArchitectureGetArchitectureForName();
    }
    v28 = swift_bridgeObjectRelease();
LABEL_32:
    v40 = ArchitectureForName;
    v41 = HIDWORD(ArchitectureForName);
    MEMORY[0x24BDAC7A8](v28);
    LODWORD(v88[-2]) = v40;
    HIDWORD(v88[-2]) = v41;
    v96 = v8;
    if ((v27 & 0x1000000000000000) != 0 || !(v27 & 0x2000000000000000 | v17 & 0x1000000000000000))
    {
      type metadata accessor for _CSTypeRef(0);
      v64 = v91;
      sub_2448EB778();
      v91 = v64;
    }
    else
    {
      if ((v27 & 0x2000000000000000) != 0)
      {
        ArchitectureForName = v17;
        v104 = v27 & 0xFFFFFFFFFFFFFFLL;
        v105 = CSSymbolicatorCreateWithPathAndArchitecture();
        v106 = v43;
        swift_bridgeObjectRelease();
        goto LABEL_40;
      }
      if ((v17 & 0x1000000000000000) == 0)
        sub_2448EB820();
      v105 = CSSymbolicatorCreateWithPathAndArchitecture();
      v106 = v42;
    }
    swift_bridgeObjectRelease();
LABEL_40:
    *(_QWORD *)&v101 = v105;
    v95 = v106;
    v45 = v107;
    v44 = v108;
    v46 = v109;
    v49 = *((_QWORD *)&v110 + 1);
    v47 = v110;
    v48 = v111;
    v50 = v112;
    v51 = v113;
    type metadata accessor for ImageEntry();
    v52 = swift_allocObject();
    *(_QWORD *)(v52 + 16) = v45;
    *(_QWORD *)(v52 + 24) = v44;
    *(_QWORD *)(v52 + 32) = v46;
    *(_QWORD *)(v52 + 40) = v47;
    *(_QWORD *)(v52 + 48) = v49;
    *(_QWORD *)(v52 + 56) = v48;
    *(_OWORD *)(v52 + 64) = v50;
    v53 = v101;
    *(_QWORD *)(v52 + 80) = v51;
    *(_QWORD *)(v52 + 88) = v53;
    *(_QWORD *)(v52 + 96) = v95;
    swift_bridgeObjectRetain();
    v54 = v114;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v105 = v54;
    v39 = v100;
    sub_244820118(v52, v100, isUniquelyReferenced_nonNull_native);
    v114 = v105;
    swift_bridgeObjectRelease();
    v8 = v96;
LABEL_41:
    v57 = v107;
    v56 = v108;
    v58 = v109;
    v60 = v110;
    v59 = v111;
    *(_QWORD *)&v101 = *((_QWORD *)&v112 + 1);
    v61 = v112;
    v62 = v113;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_2447F2BAC(v8);
      v8 = (_QWORD *)result;
    }
    if (v39 >= v8[2])
      goto LABEL_51;
    v13 = &v8[9 * v39];
    v13[4] = v57;
    v13[5] = v56;
    v13[6] = v58;
    *(_OWORD *)(v13 + 7) = v60;
    v13[9] = v59;
    v14 = v101;
    v13[10] = v61;
    v13[11] = v14;
    v13[12] = v62;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v7 = v97;
    v9 = v99;
    v11 = v98;
LABEL_4:
    v11 += 3;
    if (!--v9)
    {
      v65 = swift_bridgeObjectRelease();
      goto LABEL_49;
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

void sub_24486B318(uint64_t a1, __int128 *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  char v30;
  __int128 v31;
  const char *v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  const char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int16 v44;
  __int128 v45;
  char v46;
  __int128 v47;
  const char *v48;
  uint64_t v49;
  char v50;

  v8 = type metadata accessor for CrashReport(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](v8);
  v11 = a2[3];
  v37 = a2[2];
  v38 = v11;
  v39 = *((_QWORD *)a2 + 8);
  v12 = a2[1];
  v35 = *a2;
  v36 = v12;
  v13 = *((_QWORD *)&v37 + 1);
  v14 = v11;
  if ((_QWORD)v11)
  {
    swift_bridgeObjectRetain();
    v15 = sub_24486F4BC(a3, v13, v14);
    swift_bridgeObjectRelease();
    v40 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Cras"
          "hLogSymbolicator.swift";
    *(_QWORD *)&v41 = 132;
    BYTE8(v41) = 2;
    v42 = xmmword_2448F4170;
    *(_QWORD *)&v43 = "resolvePath(with:)";
    *((_QWORD *)&v43 + 1) = 18;
    LOBYTE(v44) = 2;
    sub_244814ACC(&v40, 0, v15);
    v28 = v16;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v45 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFou"
                      "ndation/CrashLogSymbolicator.swift";
    *((_QWORD *)&v45 + 1) = 132;
    v46 = 2;
    v47 = xmmword_2448F4180;
    v48 = "resolvePath(with:)";
    v49 = 18;
    v50 = 2;
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = sub_24486C45C;
    *(_QWORD *)(v17 + 24) = 0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738F058);
    swift_allocObject();
    sub_24486C6E8(&v45, v28, 0, 0, 0, 0, (uint64_t)sub_24486FDBC, v17);
    v19 = v18;
  }
  else
  {
    *(_QWORD *)&v45 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFou"
                      "ndation/CrashLogSymbolicator.swift";
    *((_QWORD *)&v45 + 1) = 132;
    v46 = 2;
    v47 = xmmword_2448F4190;
    v48 = "resolvePath(with:)";
    v49 = 18;
    v50 = 2;
    v40 = (const char *)*((_QWORD *)&v37 + 1);
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v44 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738F048);
    swift_allocObject();
    v19 = sub_2447D1DA0(&v45);
    swift_retain();
    sub_2447D2338((uint64_t)&v40);
    swift_release();
  }
  sub_2447BD13C(a4, (uint64_t)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CrashReport);
  v20 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v21 = (v10 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject();
  sub_244819704((uint64_t)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v22 + v20);
  v23 = v22 + v21;
  v24 = v38;
  *(_OWORD *)(v23 + 32) = v37;
  *(_OWORD *)(v23 + 48) = v24;
  *(_QWORD *)(v23 + 64) = v39;
  v25 = v36;
  *(_OWORD *)v23 = v35;
  *(_OWORD *)(v23 + 16) = v25;
  *(_QWORD *)(v22 + ((v21 + 79) & 0xFFFFFFFFFFFFFFF8)) = a1;
  *(_QWORD *)&v29 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFound"
                    "ation/CrashLogSymbolicator.swift";
  *((_QWORD *)&v29 + 1) = 132;
  v30 = 2;
  v31 = xmmword_2448F41A0;
  v32 = "resolveObfuscatedImagePaths(using:)";
  v33 = 35;
  v34 = 2;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = sub_24486FCF4;
  *(_QWORD *)(v26 + 24) = v22;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738F050);
  swift_allocObject();
  sub_24486FD68((uint64_t)&v35);
  sub_24486CACC(&v29, v19, 0, 0, 0, 0, (uint64_t)sub_24486FD60, v26);
}

uint64_t sub_24486B6A0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v10 = type metadata accessor for CrashReport(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  v13 = a1[1];
  if (qword_257389D60 != -1)
    swift_once();
  v15 = sub_2448EA5FC();
  __swift_project_value_buffer(v15, (uint64_t)qword_25738F918);
  sub_2447BD13C(a2, (uint64_t)v12, type metadata accessor for CrashReport);
  sub_24486FD68(a3);
  swift_bridgeObjectRetain();
  sub_24486FD68(a3);
  swift_bridgeObjectRetain();
  v16 = sub_2448EA5E4();
  v17 = sub_2448EB394();
  if (os_log_type_enabled(v16, v17))
  {
    v31 = v14;
    v32 = a4;
    v18 = swift_slowAlloc();
    v19 = swift_slowAlloc();
    v34 = v19;
    *(_DWORD *)v18 = 136446722;
    v20 = _s10Foundation4UUIDV08PreviewsA2OSE17propertyListValueSSvg_0();
    v33 = sub_2447D6798(v20, v21, &v34);
    sub_2448EB598();
    swift_bridgeObjectRelease();
    sub_2447BF330((uint64_t)v12, type metadata accessor for CrashReport);
    *(_WORD *)(v18 + 12) = 2080;
    v22 = *(_QWORD *)(a3 + 48);
    v30 = v19;
    if (v22)
    {
      v23 = *(_QWORD *)(a3 + 40);
      v24 = v22;
    }
    else
    {
      v24 = 0xE300000000000000;
      v23 = 7104878;
    }
    swift_bridgeObjectRetain();
    v33 = sub_2447D6798(v23, v24, &v34);
    sub_2448EB598();
    swift_bridgeObjectRelease();
    sub_244870134(a3);
    sub_244870134(a3);
    *(_WORD *)(v18 + 22) = 2080;
    v14 = v31;
    if (v13)
      v25 = v31;
    else
      v25 = 7104878;
    if (v13)
      v26 = v13;
    else
      v26 = 0xE300000000000000;
    swift_bridgeObjectRetain();
    v33 = sub_2447D6798(v25, v26, &v34);
    sub_2448EB598();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2447B9000, v16, v17, "[%{public}s] Resolved %s to %s", (uint8_t *)v18, 0x20u);
    v27 = v30;
    swift_arrayDestroy();
    MEMORY[0x24951AD84](v27, -1, -1);
    MEMORY[0x24951AD84](v18, -1, -1);

    a4 = v32;
  }
  else
  {
    sub_2447BF330((uint64_t)v12, type metadata accessor for CrashReport);
    sub_244870134(a3);
    sub_244870134(a3);

    swift_bridgeObjectRelease_n();
  }
  *a5 = a4;
  a5[1] = v14;
  a5[2] = v13;
  return swift_bridgeObjectRetain();
}

uint64_t sub_24486B9D8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CSArchitectureGetArchitectureForName();
  *a1 = result;
  return result;
}

uint64_t sub_24486BA04@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  NSObject *v47;
  unint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  char v65;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  __int128 v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  __int128 v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;

  v10 = type metadata accessor for CrashReport(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 24);
  v79 = *(_QWORD *)(a1 + 16);
  v80 = v15;
  v78 = *(_QWORD *)(a1 + 32);
  v16 = *(unsigned __int8 *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  v18 = *(_QWORD *)(a1 + 56);
  v77 = *(_QWORD *)(a1 + 64);
  v75 = *(unsigned __int8 *)(a1 + 72);
  v76 = v16;
  v73 = a2;
  v19 = *a2;
  if (*(_QWORD *)(*a2 + 16))
  {
    v20 = v13;
    v21 = v18;
    v22 = v17;
    v23 = v14;
    v24 = sub_244828F54(v14, v13);
    v14 = v23;
    v17 = v22;
    v18 = v21;
    v13 = v20;
    if ((v25 & 1) != 0)
    {
      v26 = *(_QWORD *)(v19 + 56) + 80 * v24;
      v27 = *(_QWORD *)(v26 + 16);
      v28 = *(_BYTE *)(v26 + 40);
      v29 = *(_QWORD *)(v26 + 48);
      v30 = *(_BYTE *)(v26 + 72);
      *(_OWORD *)a5 = *(_OWORD *)v26;
      *(_QWORD *)(a5 + 16) = v27;
      *(_OWORD *)(a5 + 24) = *(_OWORD *)(v26 + 24);
      *(_BYTE *)(a5 + 40) = v28;
      *(_QWORD *)(a5 + 48) = v29;
      *(_OWORD *)(a5 + 56) = *(_OWORD *)(v26 + 56);
      *(_BYTE *)(a5 + 72) = v30;
LABEL_18:
      swift_bridgeObjectRetain();
      return swift_bridgeObjectRetain();
    }
  }
  v31 = *a3;
  if (!*(_QWORD *)(*a3 + 16)
    || (*(_QWORD *)&v74 = v14,
        *((_QWORD *)&v74 + 1) = v13,
        v32 = sub_244828DC8(v14),
        v13 = *((_QWORD *)&v74 + 1),
        v14 = v74,
        (v33 & 1) == 0))
  {
    *(_QWORD *)a5 = v14;
    *(_QWORD *)(a5 + 8) = v13;
    v48 = v80;
    *(_QWORD *)(a5 + 16) = v79;
    *(_QWORD *)(a5 + 24) = v48;
    *(_QWORD *)(a5 + 32) = v78;
    *(_BYTE *)(a5 + 40) = v76;
    *(_QWORD *)(a5 + 48) = v17;
    *(_QWORD *)(a5 + 56) = v18;
    *(_QWORD *)(a5 + 64) = v77;
    *(_BYTE *)(a5 + 72) = v75;
    goto LABEL_18;
  }
  v34 = *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v32);
  v35 = qword_257389D60;
  swift_retain();
  if (v35 != -1)
    swift_once();
  v36 = sub_2448EA5FC();
  __swift_project_value_buffer(v36, (uint64_t)qword_25738F918);
  sub_2447BD13C(a4, (uint64_t)v12, type metadata accessor for CrashReport);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v37 = sub_2448EA5E4();
  v38 = sub_2448EB394();
  if (os_log_type_enabled(v37, (os_log_type_t)v38))
  {
    LODWORD(v72) = v38;
    v70 = v37;
    v39 = swift_slowAlloc();
    v71 = swift_slowAlloc();
    *(_QWORD *)&v81 = v71;
    *(_DWORD *)v39 = 136446722;
    v40 = _s10Foundation4UUIDV08PreviewsA2OSE17propertyListValueSSvg_0();
    v90 = sub_2447D6798(v40, v41, (uint64_t *)&v81);
    sub_2448EB598();
    swift_bridgeObjectRelease();
    sub_2447BF330((uint64_t)v12, type metadata accessor for CrashReport);
    *(_WORD *)(v39 + 12) = 2080;
    if (v80)
      v42 = v79;
    else
      v42 = 0x6E776F6E6B6E753CLL;
    if (v80)
      v43 = v80;
    else
      v43 = 0xE90000000000003ELL;
    swift_bridgeObjectRetain();
    v90 = sub_2447D6798(v42, v43, (uint64_t *)&v81);
    sub_2448EB598();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v39 + 22) = 2080;
    if (*(_QWORD *)(v34 + 80))
    {
      v44 = *(_QWORD *)(v34 + 72);
      v45 = *(_QWORD *)(v34 + 80);
      v46 = v75;
      v47 = v70;
    }
    else
    {
      v46 = v75;
      v47 = v70;
      v45 = 0xE90000000000003ELL;
      v44 = 0x6E776F6E6B6E753CLL;
    }
    swift_bridgeObjectRetain();
    v90 = sub_2447D6798(v44, v45, (uint64_t *)&v81);
    sub_2448EB598();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2447B9000, v47, (os_log_type_t)v72, "[%{public}s] Attempting to symbolicate %s in %s", (uint8_t *)v39, 0x20u);
    v50 = v71;
    swift_arrayDestroy();
    MEMORY[0x24951AD84](v50, -1, -1);
    MEMORY[0x24951AD84](v39, -1, -1);

  }
  else
  {
    sub_2447BF330((uint64_t)v12, type metadata accessor for CrashReport);

    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    v46 = v75;
  }
  v81 = v74;
  v82 = v79;
  v83 = v80;
  v84 = v78;
  v85 = v76;
  v86 = v17;
  v87 = v18;
  v88 = v77;
  v89 = v46;
  v72 = v34;
  v51 = sub_24486C0A4();
  v53 = v52;
  v55 = v54;
  v57 = v56;
  if (v52 == 1)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
LABEL_27:
    v58 = v18;
    goto LABEL_28;
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  if (!v53)
  {
    swift_bridgeObjectRetain();
    sub_24486FB3C(v51, 0);
    goto LABEL_27;
  }
  sub_2447CE060(v51, v53);
  v17 = v51;
  v58 = v53;
LABEL_28:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v53 == 1)
  {
    v59 = v17;
    v60 = v73;
    swift_bridgeObjectRelease();
    v61 = v75;
    v62 = v77;
  }
  else
  {
    v63 = v51;
    v59 = v17;
    v60 = v73;
    sub_24486FB3C(v63, v53);
    swift_bridgeObjectRelease();
    v62 = v77;
    if ((v57 & 1) == 0)
      v62 = v55;
    v61 = v57 & v75;
  }
  v64 = v74;
  v81 = v74;
  v82 = v79;
  v83 = v80;
  v84 = v78;
  v65 = v76;
  v85 = v76;
  v71 = v59;
  v86 = v59;
  v87 = v58;
  v88 = v62;
  v89 = v61;
  v77 = v58;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v90 = *v60;
  *v60 = 0x8000000000000000;
  sub_244820250(&v81, v64, *((uint64_t *)&v64 + 1), isUniquelyReferenced_nonNull_native);
  *v60 = v90;
  swift_release();
  result = swift_bridgeObjectRelease();
  *(_OWORD *)a5 = v64;
  v67 = v80;
  *(_QWORD *)(a5 + 16) = v79;
  *(_QWORD *)(a5 + 24) = v67;
  *(_QWORD *)(a5 + 32) = v78;
  *(_BYTE *)(a5 + 40) = v65;
  v68 = v77;
  *(_QWORD *)(a5 + 48) = v71;
  *(_QWORD *)(a5 + 56) = v68;
  *(_QWORD *)(a5 + 64) = v62;
  *(_BYTE *)(a5 + 72) = v61;
  return result;
}

uint64_t sub_24486C0A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t BaseAddress;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  _QWORD aBlock[6];

  v1 = *(_QWORD *)(v0 + 8);
  CSSymbolicatorGetSymbolOwner();
  if ((CSIsNull() & 1) != 0)
    return 0;
  BaseAddress = CSSymbolOwnerGetBaseAddress();
  if ((v1 & 0x8000000000000000) == 0)
  {
    if (__CFADD__(BaseAddress, v1))
    {
      __break(1u);
    }
    else if (BaseAddress + v1)
    {
      CSSymbolOwnerGetSymbolWithAddress();
      if ((CSIsNull() & 1) != 0)
        return 0;
      v4 = swift_allocObject();
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      v5 = swift_allocObject();
      *(_QWORD *)(v5 + 16) = 0;
      *(_BYTE *)(v5 + 24) = 1;
      v6 = swift_allocObject();
      *(_QWORD *)(v6 + 16) = v4;
      *(_QWORD *)(v6 + 24) = v5;
      aBlock[4] = sub_24486FBB0;
      aBlock[5] = v6;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_24486C688;
      aBlock[3] = &block_descriptor_54;
      v7 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      CSSymbolOwnerForEachStackFrameAtAddress();
      _Block_release(v7);
      swift_beginAccess();
      v2 = *(_QWORD *)(v4 + 16);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      return v2;
    }
    __break(1u);
  }
  result = sub_2448EB994();
  __break(1u);
  return result;
}

uint64_t sub_24486C2F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[6] = a3;
  v4[7] = a4;
  v4[4] = a1;
  v4[5] = a2;
  return swift_task_switch();
}

uint64_t sub_24486C308()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 64) = sub_244847900();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v1;
  *v1 = v0;
  v1[1] = sub_24486C378;
  return sub_2448EB058();
}

uint64_t sub_24486C378()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_24486C3D8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = sub_244847F74(v0[6], v0[7], v0[2], v0[3]);
  v3 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v0[10] = v1;
  v0[11] = v3;
  return swift_task_switch();
}

uint64_t sub_24486C444()
{
  uint64_t v0;

  *(_OWORD *)*(_QWORD *)(v0 + 32) = *(_OWORD *)(v0 + 80);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24486C45C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = sub_2448C908C(*a1);
  if (v3[2])
  {
    v5 = v3[4];
    v4 = v3[5];
    swift_bridgeObjectRetain();
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v5;
  a2[1] = v4;
  return result;
}

uint64_t sub_24486C4B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t LineNumber;

  result = CSIsNull();
  if ((result & 1) != 0)
    return result;
  if (CSSourceInfoGetPath())
  {
    v10 = sub_2448EABCC();
    v11 = v9;
    if (v10 == 0xD000000000000014 && v9 == 0x80000002448FBB70)
    {
      v12 = 1;
    }
    else if ((sub_2448EBBEC() & 1) != 0)
    {
      v12 = 1;
    }
    else
    {
      v12 = 2;
    }
    swift_beginAccess();
    v13 = *(_QWORD *)(a5 + 24);
    if (v13)
    {
      if (*(_QWORD *)(a5 + 16) == 0xD000000000000014 && v13 == 0x80000002448FBB70)
      {
        if (v12 < 2)
          goto LABEL_17;
      }
      else if ((sub_2448EBBEC() & 1) == 0 || v12 <= 1)
      {
        goto LABEL_17;
      }
    }
    swift_beginAccess();
    *(_QWORD *)(a5 + 16) = v10;
    *(_QWORD *)(a5 + 24) = v11;
LABEL_17:
    swift_bridgeObjectRelease();
  }
  LineNumber = CSSourceInfoGetLineNumber();
  result = swift_beginAccess();
  if ((*(_BYTE *)(a6 + 24) & 1) != 0 || *(uint64_t *)(a6 + 16) <= 0 && (_DWORD)LineNumber)
  {
    result = swift_beginAccess();
    *(_QWORD *)(a6 + 16) = LineNumber;
    *(_BYTE *)(a6 + 24) = 0;
  }
  return result;
}

uint64_t sub_24486C688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v9(a2, a3, a4, a5);
  return swift_release();
}

void sub_24486C6E8(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  unsigned int v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  unsigned __int8 v30;
  _QWORD *v31;
  os_unfair_lock_s *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 v50;
  uint64_t v51[2];
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;

  __swift_instantiateConcreteTypeFromMangledName(&qword_25738F060);
  v17 = swift_allocObject();
  *(_DWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 16) = a2;
  v8[13] = v17;
  v8[14] = a7;
  v8[15] = a8;
  v8[16] = a3;
  v8[17] = a4;
  v8[18] = a5;
  v8[19] = a6;
  swift_retain();
  swift_retain();
  v18 = sub_2447D1DA0(a1);
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = 0;
  v19[3] = 0;
  v19[4] = sub_24486FDC4;
  v19[5] = v18;
  v20 = *(os_unfair_lock_s **)(a2 + 88);
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock(v20 + 25);
  sub_2448E20AC((uint64_t)&v20[4], (uint64_t)sub_24486FDD8, (uint64_t)v19, (uint64_t)&v43);
  os_unfair_lock_unlock(v20 + 25);
  swift_release();
  v21 = v50;
  v22 = HIBYTE(v50);
  v42 = a2;
  if (v22 <= 0xFE)
  {
    v23 = v43;
    v24 = v45;
    v25 = v46;
    v26 = v47;
    v27 = v48;
    v28 = v49;
    v41 = v44;
    if (v22)
    {
      if (v22 != 1)
      {
LABEL_8:
        sub_24486FE44(v23, v41, v24, v25, v26, v27, v28, v21);
        sub_24486FE44(v23, v41, v24, v25, v26, v27, v28, v21);
        a2 = v42;
        goto LABEL_9;
      }
      LOBYTE(v51[0]) = 1;
      sub_2447D3128(v43, v44, v45, v46, v47, v48, v49, v50, 1);
      v29 = v23;
    }
    else
    {
      LOBYTE(v51[0]) = 0;
      sub_2447D3128(v43, v44, v45, v46, v47, v48, v49, v50, 0);
      swift_bridgeObjectRetain();
    }
    v30 = v51[0];
    if (LOBYTE(v51[0]) != 255)
    {
      swift_retain();
      sub_24486FE74(v23, v30);
      sub_24486CEC8(v23, v30 & 1);
      sub_24486FE98(v23, v30);
      swift_release();
      sub_24486FE98(v23, v30);
    }
    goto LABEL_8;
  }
LABEL_9:
  swift_release();
  swift_release_n();
  v31 = (_QWORD *)swift_allocObject();
  v31[2] = 0;
  v31[3] = 0;
  v31[4] = sub_24486FDEC;
  v31[5] = v18;
  v32 = *(os_unfair_lock_s **)(a2 + 88);
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock(v32 + 25);
  sub_2448E20AC((uint64_t)&v32[4], (uint64_t)sub_24486FE30, (uint64_t)v31, (uint64_t)&v43);
  os_unfair_lock_unlock(v32 + 25);
  swift_release();
  v33 = v50;
  if (HIBYTE(v50) <= 0xFEu)
  {
    v34 = v43;
    v35 = v44;
    v36 = v45;
    v37 = v46;
    v38 = v47;
    v39 = v48;
    v40 = v49;
    if (v50 >= 0x200u)
    {
      v51[0] = (uint64_t)v43;
      v51[1] = v44;
      v52 = v45;
      v53 = v46;
      v54 = v47;
      v55 = v48;
      v56 = v49;
      v57 = v50;
      swift_retain();
      sub_24486D9AC(v51, (void (*)(_QWORD *))sub_2447D2338);
      swift_release();
    }
    sub_24486FE44(v34, v35, v36, v37, v38, v39, v40, v33);
  }
  swift_release();
  swift_release_n();
  swift_release();
  swift_release();
}

void sub_24486CACC(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  os_unfair_lock_s *v20;
  __int16 v21;
  unsigned int v22;
  id v23;
  id v24;
  int v25;
  int v26;
  int v27;
  id v28;
  uint64_t v29;
  unsigned __int8 v30;
  _QWORD *v31;
  os_unfair_lock_s *v32;
  __int16 v33;
  id v34;
  id v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50[2];
  int v51;
  uint64_t v52[2];
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;

  __swift_instantiateConcreteTypeFromMangledName(&qword_25738F098);
  v17 = swift_allocObject();
  *(_DWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 16) = a2;
  v8[13] = v17;
  v8[14] = a7;
  v8[15] = a8;
  v8[16] = a3;
  v8[17] = a4;
  v8[18] = a5;
  v8[19] = a6;
  swift_retain();
  swift_retain();
  v18 = sub_2447D1F24(a1);
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = 0;
  v19[3] = 0;
  v19[4] = sub_244870070;
  v19[5] = v18;
  v20 = *(os_unfair_lock_s **)(a2 + 88);
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock(v20 + 25);
  sub_2448E20D8((uint64_t)&v20[4], (uint64_t)sub_244870084, (uint64_t)v19, (uint64_t)&v44);
  os_unfair_lock_unlock(v20 + 25);
  swift_release();
  v21 = v51;
  v22 = BYTE1(v51);
  v43 = a2;
  if (v22 <= 0xFE)
  {
    v24 = v44;
    v23 = v45;
    v25 = v49;
    v26 = v50[0];
    v41 = v47;
    v42 = v46;
    if (v22)
    {
      if (v22 != 1)
      {
        v27 = v48;
LABEL_9:
        sub_24481824C(v24, v23, v42, v41, v27, v25, v26, v21);
        sub_24481824C(v24, v23, v42, v41, v27, v25, v26, v21);
        a2 = v43;
        goto LABEL_10;
      }
      LOBYTE(v52[0]) = 1;
      v27 = v48;
      sub_2447D3164(v44, v45, v46, v47, v48, v49, v50[0], (unsigned __int16)v51, 1);
      v28 = v24;
      v29 = 0;
    }
    else
    {
      LOBYTE(v52[0]) = 0;
      v27 = v48;
      sub_2447D3164(v44, v45, v46, v47, v48, v49, v50[0], (unsigned __int16)v51, 0);
      swift_bridgeObjectRetain();
      v29 = (uint64_t)v23;
    }
    v30 = v52[0];
    if (LOBYTE(v52[0]) != 255)
    {
      swift_retain();
      sub_244818178(v24, v29, v30);
      sub_24486D404(v24, v29, v30 & 1);
      sub_244818224(v24, v29, v30);
      swift_release();
      sub_244818224(v24, v29, v30);
    }
    goto LABEL_9;
  }
LABEL_10:
  swift_release();
  swift_release_n();
  v31 = (_QWORD *)swift_allocObject();
  v31[2] = 0;
  v31[3] = 0;
  v31[4] = sub_244870090;
  v31[5] = v18;
  v32 = *(os_unfair_lock_s **)(a2 + 88);
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock(v32 + 25);
  sub_2448E20D8((uint64_t)&v32[4], (uint64_t)sub_244870308, (uint64_t)v31, (uint64_t)&v44);
  os_unfair_lock_unlock(v32 + 25);
  swift_release();
  v33 = v51;
  if (BYTE1(v51) <= 0xFEu)
  {
    v34 = v44;
    v35 = v45;
    v36 = v46;
    v37 = v47;
    v38 = v48;
    v39 = v49;
    v40 = v50[0];
    if ((unsigned __int16)v51 >= 0x200u)
    {
      v52[0] = (uint64_t)v44;
      v52[1] = (uint64_t)v45;
      v53 = v46;
      v54 = v47;
      v55 = v48;
      v56 = v49;
      v57 = *(_QWORD *)v50;
      v58 = v51;
      swift_retain();
      sub_24486D9AC(v52, (void (*)(_QWORD *))sub_2447D258C);
      swift_release();
    }
    sub_24481824C(v34, v35, v36, v37, v38, v39, v40, v33);
  }
  swift_release();
  swift_release_n();
  swift_release();
  swift_release();
}

void sub_24486CEC8(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *aBlock;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  void *v36;
  void (*v37)();
  uint64_t v38;
  void *v39;
  BOOL v40;

  v3 = v2;
  v6 = sub_2448EA704();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_2448EA734();
  v31 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v3 + 104);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v13 + 24));
  v14 = *(_QWORD *)(v13 + 16);
  if (v14 < 2)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 24));
    swift_release();
    return;
  }
  v29 = v7;
  v30 = v10;
  v15 = a2 & 1;
  sub_244870114(v14);
  *(_QWORD *)(v13 + 16) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 24));
  swift_release();
  v16 = 128;
  v17 = 136;
  if ((a2 & 1) != 0)
    v17 = 152;
  v18 = *(_QWORD *)(v3 + v17);
  if ((a2 & 1) != 0)
    v16 = 144;
  v19 = *(void **)(v3 + v16);
  v39 = a1;
  v40 = v15 != 0;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v3;
  sub_2447D3184((uint64_t)&v39, v20 + 24, &qword_25738F068);
  aBlock = v19;
  v34 = v18;
  swift_retain();
  sub_2447D7828(a1, a2 & 1);
  swift_retain();
  sub_2447D7828(a1, a2 & 1);
  swift_retain();
  sub_2447D7828(a1, a2 & 1);
  sub_24481240C(v19);
  if ((ExecutionLane.isCurrentLane.getter() & 1) != 0)
  {
    sub_24486DAC4(v3, (uint64_t)a1, v15);
    swift_release();
LABEL_14:
    swift_release();
    sub_2447D7854(a1, v15);
    swift_release();
    sub_2447D7854(a1, v15);
    v23 = (uint64_t)v19;
    goto LABEL_15;
  }
  v28 = v18;
  if (v19)
  {
    if (v19 != (void *)1)
    {
      v37 = sub_24486FEEC;
      v38 = v20;
      aBlock = (void *)MEMORY[0x24BDAC760];
      v34 = 1107296256;
      v35 = sub_2447EB164;
      v36 = &block_descriptor_76;
      v26 = (uint64_t)_Block_copy(&aBlock);
      sub_24481240C(v19);
      swift_retain();
      sub_2448EA71C();
      v32 = MEMORY[0x24BEE4AF8];
      v27 = sub_2447BD7A0((unint64_t *)&qword_25738B1E0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
      sub_24486F760(qword_25738B1F0, &qword_25738B1E8);
      sub_2448EB6C4();
      v24 = (const void *)v26;
      MEMORY[0x249519C08](0, v12, v9, v26);
      _Block_release(v24);
      sub_24481241C(v19);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v6);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v30);
      swift_release();
      swift_release();
      goto LABEL_14;
    }
    sub_244803860();
    v21 = (void *)sub_2448EB418();
    v37 = sub_24486FEEC;
    v38 = v20;
    aBlock = (void *)MEMORY[0x24BDAC760];
    v34 = 1107296256;
    v35 = sub_2447EB164;
    v36 = &block_descriptor_79;
    v27 = (uint64_t)_Block_copy(&aBlock);
    swift_retain();
    swift_release();
    sub_2448EA71C();
    aBlock = (void *)MEMORY[0x24BEE4AF8];
    v26 = sub_2447BD7A0((unint64_t *)&qword_25738B1E0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
    sub_24486F760(qword_25738B1F0, &qword_25738B1E8);
    sub_2448EB6C4();
    v22 = (const void *)v27;
    MEMORY[0x249519C08](0, v12, v9, v27);
    _Block_release(v22);

    (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v30);
    swift_release();
    swift_release();
    sub_2447D7854(a1, v15);
    swift_release();
    sub_2447D7854(a1, v15);
    v23 = 1;
  }
  else
  {
    sub_24486DAC4(v3, (uint64_t)a1, v15);
    swift_release();
    swift_release();
    sub_2447D7854(a1, v15);
    swift_release();
    sub_2447D7854(a1, v15);
    v23 = 0;
  }
LABEL_15:
  sub_24481241C((id)v23);
}

void sub_24486D404(void *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  const void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *aBlock;
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  void *v39;
  void (*v40)();
  uint64_t v41;
  _QWORD v42[2];
  BOOL v43;

  v4 = v3;
  v8 = sub_2448EA704();
  v34 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_2448EA734();
  v33 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v4 + 104);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 24));
  v15 = *(_QWORD *)(v14 + 16);
  if (v15 < 2)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 24));
    swift_release();
  }
  else
  {
    v30 = v11;
    v32 = v8;
    v16 = a3 & 1;
    sub_244870114(v15);
    *(_QWORD *)(v14 + 16) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 24));
    swift_release();
    v17 = 128;
    if ((a3 & 1) != 0)
      v17 = 144;
    v18 = 136;
    if ((a3 & 1) != 0)
      v18 = 152;
    v19 = *(_QWORD *)(v4 + v18);
    v20 = *(void **)(v4 + v17);
    v42[0] = a1;
    v42[1] = a2;
    v43 = v16 != 0;
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = v4;
    sub_2447D3184((uint64_t)v42, v21 + 24, &qword_25738A0F8);
    aBlock = v20;
    v37 = v19;
    swift_retain();
    sub_244818190(a1, a2, a3 & 1);
    swift_retain();
    sub_244818190(a1, a2, a3 & 1);
    swift_retain();
    sub_244818190(a1, a2, a3 & 1);
    sub_24481240C(v20);
    if ((ExecutionLane.isCurrentLane.getter() & 1) != 0)
    {
      sub_24486DBB8(v4, (uint64_t)a1, a2, v16);
      swift_release();
      swift_release();
      sub_24481823C(a1, a2, v16);
      swift_release();
      sub_24481823C(a1, a2, v16);
      v22 = (uint64_t)v20;
    }
    else
    {
      v31 = v19;
      if (v20)
      {
        if (v20 == (void *)1)
        {
          sub_244803860();
          v29 = sub_2448EB418();
          v40 = sub_244870104;
          v41 = v21;
          aBlock = (void *)MEMORY[0x24BDAC760];
          v37 = 1107296256;
          v38 = sub_2447EB164;
          v39 = &block_descriptor_110;
          v28 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          sub_2448EA71C();
          aBlock = (void *)MEMORY[0x24BEE4AF8];
          v27 = sub_2447BD7A0((unint64_t *)&qword_25738B1E0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
          __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
          sub_24486F760(qword_25738B1F0, &qword_25738B1E8);
          v23 = v32;
          sub_2448EB6C4();
          v25 = v28;
          v24 = (void *)v29;
          MEMORY[0x249519C08](0, v13, v10, v28);
          _Block_release(v25);

          (*(void (**)(char *, uint64_t))(v34 + 8))(v10, v23);
          (*(void (**)(char *, uint64_t))(v33 + 8))(v13, v30);
          swift_release();
          swift_release();
          sub_24481823C(a1, a2, v16);
          swift_release();
          sub_24481823C(a1, a2, v16);
          v22 = 1;
        }
        else
        {
          v40 = sub_244870104;
          v41 = v21;
          aBlock = (void *)MEMORY[0x24BDAC760];
          v37 = 1107296256;
          v38 = sub_2447EB164;
          v39 = &block_descriptor_107;
          v28 = _Block_copy(&aBlock);
          sub_24481240C(v20);
          swift_retain();
          sub_2448EA71C();
          v35 = MEMORY[0x24BEE4AF8];
          v29 = sub_2447BD7A0((unint64_t *)&qword_25738B1E0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
          __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
          sub_24486F760(qword_25738B1F0, &qword_25738B1E8);
          sub_2448EB6C4();
          v26 = v28;
          MEMORY[0x249519C08](0, v13, v10, v28);
          _Block_release(v26);
          sub_24481241C(v20);
          (*(void (**)(char *, uint64_t))(v34 + 8))(v10, v32);
          (*(void (**)(char *, uint64_t))(v33 + 8))(v13, v30);
          swift_release();
          swift_release();
          swift_release();
          sub_24481823C(a1, a2, v16);
          swift_release();
          sub_24481823C(a1, a2, v16);
          v22 = (uint64_t)v20;
        }
      }
      else
      {
        sub_24486DBB8(v4, (uint64_t)a1, a2, v16);
        swift_release();
        swift_release();
        sub_24481823C(a1, a2, v16);
        swift_release();
        sub_24481823C(a1, a2, v16);
        v22 = 0;
      }
    }
    sub_24481241C((id)v22);
  }
}

uint64_t sub_24486D9AC(uint64_t *a1, void (*a2)(_QWORD *))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  __int128 v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v17[2];
  _OWORD v18[2];
  _QWORD v19[7];
  char v20;
  char v21;

  v4 = *a1;
  v5 = a1[1];
  v6 = *((unsigned __int8 *)a1 + 16);
  v8 = a1[3];
  v7 = a1[4];
  v15 = a1[5];
  v14 = a1[6];
  v13 = *((_BYTE *)a1 + 56);
  v9 = *(_QWORD *)(v2 + 104);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 24));
  v10 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v9 + 16) = 1;
  os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 24));
  result = swift_release();
  if (v10 >= 2)
  {
    v19[0] = v4;
    v19[1] = v5;
    v19[2] = v6;
    v19[3] = v8;
    v19[4] = v7;
    v19[5] = v15;
    v19[6] = v14;
    v20 = v13;
    v21 = 2;
    swift_retain();
    a2(v19);
    v12 = *((_OWORD *)a1 + 1);
    v17[0] = *(_OWORD *)a1;
    v17[1] = v12;
    v18[0] = *((_OWORD *)a1 + 2);
    *(_OWORD *)((char *)v18 + 9) = *(_OWORD *)((char *)a1 + 41);
    (*(void (**)(_OWORD *))(*(_QWORD *)v10 + 192))(v17);
    return swift_release_n();
  }
  return result;
}

void sub_24486DAC4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  _QWORD v15[2];
  __int128 v16;
  _BYTE v17[32];

  v13 = a2;
  v14 = a3 & 1;
  v4 = *(_QWORD *)(a1 + 104);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 24));
  v5 = *(_QWORD *)(v4 + 16);
  sub_244870124(v5);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 24));
  swift_release();
  sub_244870114(v5);
  if (v5 != 1)
  {
    (*(void (**)(void **__return_ptr, uint64_t *))(a1 + 112))(&v10, &v13);
    v6 = v10;
    v7 = v11;
    v8 = v12;
    if (v12)
      v9 = 0;
    else
      v9 = v11;
    v15[0] = v10;
    v15[1] = v9;
    v16 = 0u;
    memset(v17, 0, 25);
    v17[25] = v12;
    sub_244818190(v10, v11, v12);
    sub_2447D2338((uint64_t)v15);
    sub_24481823C(v6, v7, v8);
    sub_24481823C(v6, v7, v8);
  }
}

void sub_24486DBB8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD v17[2];
  char v18;
  _QWORD v19[3];
  __int128 v20;
  __int128 v21;
  char v22;
  char v23;

  v17[0] = a2;
  v17[1] = a3;
  v18 = a4 & 1;
  v5 = *(_QWORD *)(a1 + 104);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 24));
  v6 = *(_QWORD *)(v5 + 16);
  sub_244870124(v6);
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 24));
  swift_release();
  sub_244870114(v6);
  if (v6 != 1)
  {
    (*(void (**)(void **__return_ptr, _QWORD *))(a1 + 112))(&v13, v17);
    v7 = v13;
    v8 = v14;
    v9 = v15;
    v10 = v16;
    if (v16)
      v11 = 0;
    else
      v11 = v14;
    if (v16)
      v12 = 0;
    else
      v12 = v15;
    v19[0] = v13;
    v19[1] = v11;
    v19[2] = v12;
    v20 = 0u;
    v21 = 0u;
    v22 = 0;
    v23 = v16;
    sub_244817F58(v13, v14, v15, v16);
    sub_2447D258C((uint64_t)v19);
    sub_244818030(v7, v8, v9, v10);
    sub_244818030(v7, v8, v9, v10);
  }
}

uint64_t sub_24486DCC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v1 = type metadata accessor for CrashReport(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v5 = v0 + v3;
  v6 = sub_2448EA548();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = v5 + *(int *)(v1 + 32);
  v8 = sub_2448EA500();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = *(void **)(v0 + v4);
  if ((unint64_t)v9 >= 2)

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24486DE00()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for CrashReport(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_244869BE8(v0 + v2, *(_QWORD *)(v0 + v3), *(void **)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_24486DE64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  os_unfair_lock_s *v15;
  __int16 v16;
  void *v17;
  void *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 v32;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A208);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2447C9300(a2, (uint64_t)v10, &qword_25738A208);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = a3;
  v11[5] = a4;
  v11[6] = a1;
  swift_retain();
  swift_retain();
  v12 = sub_2447C5CB8((uint64_t)v10, (uint64_t)&unk_25738F090, (uint64_t)v11);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = sub_244870058;
  v14[5] = v12;
  v15 = *(os_unfair_lock_s **)(v13 + 88);
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock(v15 + 25);
  sub_2448E20D8((uint64_t)&v15[4], (uint64_t)sub_244870064, (uint64_t)v14, (uint64_t)v26);
  os_unfair_lock_unlock(v15 + 25);
  swift_release();
  v16 = v32;
  if (HIBYTE(v32) <= 0xFEu)
  {
    v17 = (void *)v26[0];
    v18 = (void *)v26[1];
    v19 = v27;
    v20 = v28;
    v21 = v29;
    v22 = v30;
    v23 = v31;
    if (v32 >= 0x200u)
    {
      swift_retain();
      sub_2448EB034();
      swift_release();
    }
    sub_24481824C(v17, v18, v19, v20, v21, v22, v23, v16);
  }
  swift_release();
  return swift_release_n();
}

uint64_t sub_24486E078(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(_QWORD *);

  v6[29] = a6;
  v8 = sub_2448EAF50();
  v6[30] = v8;
  v6[31] = *(_QWORD *)(v8 - 8);
  v6[32] = swift_task_alloc();
  v11 = (uint64_t (*)(_QWORD *))((char *)a4 + *a4);
  v9 = (_QWORD *)swift_task_alloc();
  v6[33] = v9;
  *v9 = v6;
  v9[1] = sub_24486E110;
  return v11(v6 + 26);
}

uint64_t sub_24486E110()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 272) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24486E174()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 216);
  *(_QWORD *)(v0 + 80) = *(_QWORD *)(v0 + 208);
  *(_QWORD *)(v0 + 88) = v1;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 122) = 0u;
  swift_bridgeObjectRetain();
  sub_2447E9F0C(v0 + 80);
  swift_bridgeObjectRelease_n();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24486E1EC()
{
  uint64_t v0;
  void *v1;
  id v2;
  char v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 272);
  *(_QWORD *)(v0 + 224) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0A8);
  v3 = swift_dynamicCast();
  v4 = *(void **)(v0 + 272);
  if ((v3 & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 248) + 8))(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 240));
    *(_QWORD *)(v0 + 144) = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/Previ"
                            "ewsFoundation/Future.swift";
    *(_QWORD *)(v0 + 152) = 118;
    *(_BYTE *)(v0 + 160) = 2;
    *(_OWORD *)(v0 + 168) = xmmword_2448F41B0;
    *(_QWORD *)(v0 + 184) = "init(dsoHandle:file:line:column:function:priority:operation:)";
    *(_QWORD *)(v0 + 192) = 61;
    *(_BYTE *)(v0 + 200) = 2;
    sub_2448E05C8((__int128 *)(v0 + 144));
  }
  else
  {
    *(_QWORD *)(v0 + 16) = v4;
    *(_OWORD *)(v0 + 24) = 0u;
    *(_OWORD *)(v0 + 40) = 0u;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_WORD *)(v0 + 72) = 256;
    v5 = v4;
    sub_2447E9F0C(v0 + 16);

  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24486E308(void *a1, char a2, uint64_t (*a3)(__int128 *))
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  __int128 v12;
  char v13;
  __int128 v14;
  const char *v15;
  uint64_t v16;
  char v17;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738F030);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (_QWORD *)((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((a2 & 1) != 0)
  {
    *(_QWORD *)&v12 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFou"
                      "ndation/FlatMapFuture.swift";
    *((_QWORD *)&v12 + 1) = 125;
    v13 = 2;
    v14 = xmmword_2448F41C0;
    v15 = "then(callsite:on:transform:)";
    v16 = 28;
    v17 = 2;
    *v8 = a1;
    swift_storeEnumTagMultiPayload();
    v10 = a1;
    v9 = sub_2448688DC(&v12, (uint64_t)v8);
    sub_2447BD180((uint64_t)v8, &qword_25738F030);
  }
  else
  {
    *(_QWORD *)&v12 = a1;
    swift_bridgeObjectRetain();
    v9 = a3(&v12);
    sub_2447D7854(a1, 0);
  }
  return v9;
}

void sub_24486E428(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  unsigned __int8 v24;
  _QWORD *v25;
  os_unfair_lock_s *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int16 v42;
  __int128 v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;

  v8[13] = a7;
  v8[14] = a8;
  v8[15] = a3;
  v8[16] = a4;
  v8[17] = a5;
  v8[18] = a6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738F000);
  v11 = swift_allocObject();
  *(_DWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 16) = a2;
  v8[19] = v11;
  swift_retain();
  swift_retain();
  v12 = sub_2447D1BAC(a1);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = sub_24486F808;
  v13[5] = v12;
  v14 = *(os_unfair_lock_s **)(a2 + 88);
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock(v14 + 25);
  sub_2448E1D80((uint64_t)&v14[4], (uint64_t)sub_24486F81C, (uint64_t)v13, (uint64_t)&v36);
  os_unfair_lock_unlock(v14 + 25);
  swift_release();
  v15 = v42;
  v16 = HIBYTE(v42);
  v35 = a2;
  if (v16 <= 0xFE)
  {
    v17 = (void *)v36;
    v18 = v37;
    v19 = v38;
    v20 = v39;
    v21 = v40;
    v22 = v41;
    v34 = *((_QWORD *)&v36 + 1);
    if (v16)
    {
      if (v16 != 1)
      {
LABEL_8:
        sub_24486FE44(v17, v34, v18, v19, v20, v21, v22, v15);
        sub_24486FE44(v17, v34, v18, v19, v20, v21, v22, v15);
        a2 = v35;
        goto LABEL_9;
      }
      LOBYTE(v43) = 1;
      sub_2447D3128((id)v36, *((uint64_t *)&v36 + 1), v37, v38, v39, v40, v41, v42, 1);
      v23 = v17;
    }
    else
    {
      LOBYTE(v43) = 0;
      sub_2447D3128((id)v36, *((uint64_t *)&v36 + 1), v37, v38, v39, v40, v41, v42, 0);
      swift_bridgeObjectRetain();
    }
    v24 = v43;
    if (v43 != 255)
    {
      swift_retain();
      sub_24486FE74(v17, v24);
      sub_24486E7F0(v17, v24 & 1);
      sub_24486FE98(v17, v24);
      swift_release();
      sub_24486FE98(v17, v24);
    }
    goto LABEL_8;
  }
LABEL_9:
  swift_release();
  swift_release_n();
  v25 = (_QWORD *)swift_allocObject();
  v25[2] = 0;
  v25[3] = 0;
  v25[4] = sub_24486F830;
  v25[5] = v12;
  v26 = *(os_unfair_lock_s **)(a2 + 88);
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock(v26 + 25);
  sub_2448E1D80((uint64_t)&v26[4], (uint64_t)sub_24486F86C, (uint64_t)v25, (uint64_t)&v36);
  os_unfair_lock_unlock(v26 + 25);
  swift_release();
  v27 = v42;
  if (HIBYTE(v42) <= 0xFEu)
  {
    v28 = v36;
    v29 = v37;
    v30 = v38;
    v31 = v39;
    v32 = v40;
    v33 = v41;
    if (v42 >= 0x200u)
    {
      v43 = v36;
      v44 = v37;
      v45 = v38;
      v46 = v39;
      v47 = v40;
      v48 = v41;
      v49 = v42;
      swift_retain();
      sub_24486ED10(&v43);
      swift_release();
    }
    sub_24486FE44((void *)v28, *((uint64_t *)&v28 + 1), v29, v30, v31, v32, v33, v27);
  }
  swift_release();
  swift_release_n();
  swift_release();
  swift_release();
}

void sub_24486E7F0(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  void *aBlock;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  void *v43;
  unint64_t (*v44)();
  uint64_t v45;
  void *v46;
  BOOL v47;

  v3 = v2;
  v5 = a2 & 1;
  v6 = sub_2448EA704();
  v34 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_2448EA734();
  v33 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v2 + 152);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 24));
  v12 = sub_24486EE9C((unint64_t *)(v11 + 16), a1, v5);
  v14 = v13;
  v16 = v15;
  os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 24));
  swift_release();
  if (v16)
  {
    v32 = v6;
    v17 = v14 & 1;
    v18 = 120;
    v19 = 128;
    if ((v14 & 1) != 0)
      v19 = 144;
    v20 = *(_QWORD *)(v3 + v19);
    if ((v14 & 1) != 0)
      v18 = 136;
    v21 = *(void **)(v3 + v18);
    v46 = v12;
    v47 = (v14 & 1) != 0;
    v22 = v14;
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = v3;
    sub_2447D3184((uint64_t)&v46, v23 + 24, &qword_25738F008);
    *(_QWORD *)(v23 + 40) = v16;
    aBlock = v21;
    v41 = v20;
    swift_retain();
    sub_2447D7828(v12, v17);
    swift_retain();
    swift_retain();
    sub_2447D7828(v12, v17);
    swift_retain();
    swift_retain();
    sub_2447D7828(v12, v17);
    swift_retain();
    v36 = v22;
    sub_24486F8C8(v12, v22, v16);
    v37 = v20;
    v38 = v21;
    sub_24481240C(v21);
    if ((ExecutionLane.isCurrentLane.getter() & 1) != 0 || !v38)
    {
      sub_24486F0A8(v3, (uint64_t)v12, v17, v16);
    }
    else
    {
      if (v38 != (id)1)
      {
        v44 = sub_24486F8B8;
        v45 = v23;
        aBlock = (void *)MEMORY[0x24BDAC760];
        v41 = 1107296256;
        v42 = sub_2447EB164;
        v43 = &block_descriptor_30;
        v28 = _Block_copy(&aBlock);
        sub_24481240C(v38);
        swift_retain();
        sub_2448EA71C();
        v39 = MEMORY[0x24BEE4AF8];
        v31 = sub_2447BD7A0((unint64_t *)&qword_25738B1E0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
        __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
        sub_24486F760(qword_25738B1F0, &qword_25738B1E8);
        v29 = v32;
        sub_2448EB6C4();
        MEMORY[0x249519C08](0, v10, v8, v28);
        _Block_release(v28);
        sub_24481241C(v38);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v29);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v35);
        swift_release();
        swift_release();
        goto LABEL_12;
      }
      sub_244803860();
      v31 = sub_2448EB418();
      v44 = sub_24486F8B8;
      v45 = v23;
      aBlock = (void *)MEMORY[0x24BDAC760];
      v41 = 1107296256;
      v42 = sub_2447EB164;
      v43 = &block_descriptor_33;
      v24 = v8;
      v25 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      sub_2448EA71C();
      aBlock = (void *)MEMORY[0x24BEE4AF8];
      v30 = sub_2447BD7A0((unint64_t *)&qword_25738B1E0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
      sub_24486F760(qword_25738B1F0, &qword_25738B1E8);
      v26 = v32;
      sub_2448EB6C4();
      v27 = (void *)v31;
      MEMORY[0x249519C08](0, v10, v24, v25);
      _Block_release(v25);

      (*(void (**)(char *, uint64_t))(v34 + 8))(v24, v26);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v35);
    }
    swift_release();
LABEL_12:
    swift_release();
    sub_2447D7854(v12, v17);
    swift_release();
    swift_release();
    sub_2447D7854(v12, v17);
    swift_release();
    swift_release();
    sub_2447D7854(v12, v17);
    sub_24486F8F8(v12, v36, v16);
    sub_24481241C(v38);
  }
}

uint64_t sub_24486ED10(_OWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  void (*v10)(_OWORD *);
  __int128 v11;
  _OWORD v13[2];
  _OWORD v14[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A590);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (_OWORD *)((char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(v1 + 152);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 24));
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 >> 62;
  if (!(v7 >> 62))
    goto LABEL_4;
  if ((_DWORD)v8 == 1)
  {
    v7 &= 0x3FFFFFFFFFFFFFFFuLL;
LABEL_4:
    *(_QWORD *)(v6 + 16) = 0x8000000000000008;
    os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 24));
    swift_release();
    v9 = a1[1];
    v13[0] = *a1;
    v13[1] = v9;
    v14[0] = a1[2];
    *(_OWORD *)((char *)v14 + 9) = *(_OWORD *)((char *)a1 + 41);
    v10 = *(void (**)(_OWORD *))(*(_QWORD *)v7 + 192);
    swift_retain();
    v10(v13);
    v11 = a1[1];
    *v5 = *a1;
    v5[1] = v11;
    v5[2] = a1[2];
    *(_OWORD *)((char *)v5 + 41) = *(_OWORD *)((char *)a1 + 41);
    swift_storeEnumTagMultiPayload();
    sub_2447D2178((uint64_t)v5);
    sub_24486F960(v7, v8);
    sub_24486F960(v7, v8);
    return sub_2447BD180((uint64_t)v5, &qword_25738A590);
  }
  *(_QWORD *)(v6 + 16) = 0x8000000000000008;
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 24));
  return swift_release();
}

void *sub_24486EE9C(unint64_t *a1, void *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  char v15;
  __int128 v16;
  const char *v17;
  uint64_t v18;
  char v19;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738F010);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1 >> 62)
    return 0;
  sub_24486F928(*a1);
  *(_QWORD *)&v14 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFound"
                    "ation/FlatMapFuture.swift";
  *((_QWORD *)&v14 + 1) = 125;
  v15 = 2;
  v16 = xmmword_2448F41D0;
  v17 = "firstCompleted(_:)";
  v18 = 18;
  v19 = 2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738F018);
  v9 = swift_allocObject();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A590);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 1, 1, v10);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738F020);
  v11 = swift_allocObject();
  *(_DWORD *)(v11 + ((*(unsigned int *)(*(_QWORD *)v11 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_2447C9300((uint64_t)v8, v11 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v11 + 16), &qword_25738F010);
  swift_retain();
  sub_2447BD180((uint64_t)v8, &qword_25738F010);
  *(_QWORD *)(v9 + 104) = v11;
  swift_release();
  v12 = sub_2447D1BAC(&v14);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738F028);
  *(_QWORD *)(swift_allocObject() + 16) = v12;
  *a1 = v12 | 0x4000000000000000;
  swift_retain();
  sub_2447D7828(a2, a3 & 1);
  return a2;
}

unint64_t sub_24486F0A8(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v11 = a2;
  v12 = a3 & 1;
  v6 = *(_QWORD *)(a1 + 152);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 24));
  v7 = *(_QWORD *)(v6 + 16);
  sub_24486F944(v7);
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 24));
  swift_release();
  result = sub_24486F928(v7);
  if (v7 != 0x8000000000000008)
  {
    v9 = (*(uint64_t (**)(uint64_t *))(a1 + 104))(&v11);
    v10 = *(_QWORD *)(a4 + 16);
    if (v10 != v9)
    {
      swift_retain();
      sub_2448B7EC8(0, 0, v9, a4);
      sub_2448B85BC(0, 0, v9, a4);
      swift_release();
      swift_retain();
      sub_2448B8CD8(0, 0, v10, v9);
      swift_release();
    }
    swift_retain();
    sub_2448B969C(0, 0, v9, a1);
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_24486F1F8(uint64_t a1@<X0>, void (*a2)(__int128 *__return_ptr, void **)@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  char v5;
  id v6;
  __int128 v7;
  __int128 v9;
  void *v10;

  v4 = *(void **)a1;
  v5 = *(_BYTE *)(a1 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v4;
    v7 = (unint64_t)v4;
  }
  else
  {
    v10 = *(void **)a1;
    swift_bridgeObjectRetain();
    a2(&v9, &v10);
    sub_2447D7854(v4, 0);
    v7 = v9;
  }
  *(_OWORD *)a3 = v7;
  *(_BYTE *)(a3 + 16) = v5;
}

uint64_t sub_24486F284(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t *a3)
{
  char v3;
  uint64_t v5;
  char v6;

  v3 = *((_BYTE *)a3 + 8);
  v5 = *a3;
  v6 = v3;
  return a1(&v5);
}

void sub_24486F2C4(uint64_t a1@<X0>, void (*a2)(__int128 *__return_ptr, _QWORD *)@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  char v5;
  id v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v13[2];

  v4 = *(void **)a1;
  v5 = *(_BYTE *)(a1 + 16);
  if ((v5 & 1) != 0)
  {
    v6 = v4;
    v7 = 0;
    v8 = (unint64_t)v4;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 8);
    v13[0] = *(_QWORD *)a1;
    v13[1] = v10;
    swift_bridgeObjectRetain();
    a2(&v11, v13);
    sub_24481823C(v4, v10, 0);
    v8 = v11;
    v7 = v12;
  }
  *(_OWORD *)a3 = v8;
  *(_QWORD *)(a3 + 16) = v7;
  *(_BYTE *)(a3 + 24) = v5;
}

uint64_t sub_24486F364(uint64_t a1, void (*a2)(_QWORD, _QWORD))
{
  uint64_t v3;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_QWORD, _QWORD);
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v19 = MEMORY[0x24BEE4AF8];
    sub_2448EB88C();
    v11 = a2;
    v6 = (uint64_t *)(a1 + 56);
    do
    {
      v8 = *(v6 - 1);
      v7 = *v6;
      v9 = v6[3];
      v10 = v6[6];
      v12 = *(_OWORD *)(v6 - 3);
      v13 = v8;
      v14 = v7;
      v15 = *(_OWORD *)(v6 + 1);
      v16 = v9;
      v17 = *((_OWORD *)v6 + 2);
      v18 = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a2(v12, (char *)&v12 + 8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_2448EB868();
      sub_2448EB898();
      a2 = v11;
      sub_2448EB8A4();
      sub_2448EB874();
      v6 += 10;
      --v3;
    }
    while (v3);
    return v19;
  }
  return result;
}

uint64_t sub_24486F4BC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  char v23;
  __int128 v24;
  const char *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v4 = v3;
  v21 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A208);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
    goto LABEL_14;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = MEMORY[0x24BEE4AF8];
    if (!v10)
      break;
    v28 = MEMORY[0x24BEE4AF8];
    result = sub_2448EB88C();
    if (v10 < 0)
    {
      __break(1u);
      return result;
    }
    v18[1] = v4;
    v19 = a1 & 0xC000000000000001;
    v18[2] = __swift_instantiateConcreteTypeFromMangledName(&qword_25738F078);
    v12 = 0;
    *(_QWORD *)&v22 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFou"
                      "ndation/CrashLogSymbolicator.swift";
    *((_QWORD *)&v22 + 1) = 132;
    v23 = 2;
    v24 = xmmword_2448F41E0;
    v25 = "resolvePath(with:)";
    v26 = 18;
    v27 = 2;
    v20 = a1;
    while (v10 != v12)
    {
      if (v19)
      {
        v13 = MEMORY[0x249519FE0](v12, a1);
      }
      else
      {
        v13 = *(_QWORD *)(a1 + 8 * v12 + 32);
        swift_retain();
      }
      ++v12;
      v14 = sub_2448EAF74();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 1, 1, v14);
      v15 = (_QWORD *)swift_allocObject();
      v16 = v21;
      v15[2] = v13;
      v15[3] = v16;
      v15[4] = a3;
      v17 = MEMORY[0x24BDAC7A8](v15);
      v18[-4] = v9;
      v18[-3] = &unk_25738F080;
      v18[-2] = v17;
      swift_retain();
      swift_bridgeObjectRetain();
      sub_244868AAC(&v22, (void (*)(uint64_t))sub_24486FF98, (uint64_t)&v18[-6]);
      swift_release();
      sub_2447BD180((uint64_t)v9, &qword_25738A208);
      swift_release();
      sub_2448EB868();
      v4 = *(_QWORD *)(v28 + 16);
      sub_2448EB898();
      sub_2448EB8A4();
      sub_2448EB874();
      a1 = v20;
      if (v10 == v12)
        return v28;
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    v10 = sub_2448EBA18();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t sub_24486F760(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for CrashLogSymbolicator()
{
  return objc_opt_self();
}

uint64_t method lookup function for CrashLogSymbolicator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CrashLogSymbolicator.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t type metadata accessor for ImageEntry()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for CrashLogSymbolicator.State()
{
  return &type metadata for CrashLogSymbolicator.State;
}

void sub_24486F808(uint64_t a1)
{
  sub_24486E7F0(*(void **)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_24486F81C(uint64_t a1)
{
  return sub_244817FB8(a1, &qword_25738A5A8, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_2448B2564);
}

uint64_t sub_24486F830(_OWORD *a1)
{
  __int128 v1;
  _OWORD v3[2];
  _OWORD v4[2];

  v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  v4[0] = a1[2];
  *(_OWORD *)((char *)v4 + 9) = *(_OWORD *)((char *)a1 + 41);
  return sub_24486ED10(v3);
}

uint64_t sub_24486F86C(uint64_t a1)
{
  return sub_244817FB8(a1, &qword_25738A5A8, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_2448B50D0);
}

uint64_t sub_24486F880()
{
  uint64_t v0;

  swift_release();
  sub_2447D7854(*(id *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_release();
  return swift_deallocObject();
}

unint64_t sub_24486F8B8()
{
  uint64_t v0;

  return sub_24486F0A8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

void *sub_24486F8C8(void *result, char a2, uint64_t a3)
{
  if (a3)
  {
    sub_2447D7828(result, a2 & 1);
    return (void *)swift_retain();
  }
  return result;
}

void *sub_24486F8F8(void *result, char a2, uint64_t a3)
{
  if (a3)
  {
    sub_2447D7854(result, a2 & 1);
    return (void *)swift_release();
  }
  return result;
}

unint64_t sub_24486F928(unint64_t result)
{
  if ((result >> 62) <= 1)
    return swift_release();
  return result;
}

unint64_t sub_24486F944(unint64_t result)
{
  if ((result >> 62) <= 1)
    return swift_retain();
  return result;
}

uint64_t sub_24486F960(uint64_t a1, char a2)
{
  uint64_t result;

  if (a2 != -1)
    return swift_release();
  return result;
}

uint64_t sub_24486F974(uint64_t a1)
{
  uint64_t v1;

  return sub_24486A2CC(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_24486F980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for CrashReport(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = sub_2448EA548();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = v3 + *(int *)(v1 + 32);
  v6 = sub_2448EA500();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24486FAA0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for CrashReport(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_24486A8E8(v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_24486FAEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_24486BA04(a1, *(uint64_t **)(v2 + 16), *(uint64_t **)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_24486FB0C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CSSymbolicatorCreateWithPathAndArchitecture();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_24486FB3C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_24486FB50()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24486FB74()
{
  return swift_deallocObject();
}

uint64_t sub_24486FB84()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24486FBB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_24486C4B8(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
}

void sub_24486FBB8(uint64_t a1, __int128 *a2)
{
  uint64_t v2;

  sub_24486B318(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_24486FBC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for CrashReport(0);
  v2 = v0
     + ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80));
  v3 = sub_2448EA548();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = v2 + *(int *)(v1 + 32);
  v5 = sub_2448EA500();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24486FCF4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for CrashReport(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_24486B6A0(a1, v2 + v6, v2 + v7, *(_QWORD *)(v2 + ((v7 + 79) & 0xFFFFFFFFFFFFF8)), a2);
}

void sub_24486FD60(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_24486F2C4(a1, *(void (**)(__int128 *__return_ptr, _QWORD *))(v2 + 16), a2);
}

uint64_t sub_24486FD68(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void sub_24486FDBC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_24486F1F8(a1, *(void (**)(__int128 *__return_ptr, void **))(v2 + 16), a2);
}

void sub_24486FDC4(uint64_t a1)
{
  sub_24486CEC8(*(void **)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_24486FDD8(uint64_t a1)
{
  return sub_244817FB8(a1, &qword_25738A5C8, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_2448B30DC);
}

uint64_t sub_24486FDEC(_OWORD *a1)
{
  __int128 v1;
  _OWORD v3[2];
  _OWORD v4[2];

  v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  v4[0] = a1[2];
  *(_OWORD *)((char *)v4 + 9) = *(_OWORD *)((char *)a1 + 41);
  return sub_24486D9AC((uint64_t *)v3, (void (*)(_QWORD *))sub_2447D2338);
}

uint64_t sub_24486FE30(uint64_t a1)
{
  return sub_244817FB8(a1, &qword_25738A5C8, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_2448B5BD8);
}

void sub_24486FE44(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (BYTE1(a8) != 255)
    sub_2448180F4(a1, a2, a3, a4, a5, a6, a7, a8, SBYTE1(a8));
}

id sub_24486FE74(id result, unsigned __int8 a2)
{
  if (a2 != 255)
    return sub_2447D7828(result, a2 & 1);
  return result;
}

void sub_24486FE98(void *a1, unsigned __int8 a2)
{
  if (a2 != 255)
    sub_2447D7854(a1, a2 & 1);
}

uint64_t sub_24486FEBC()
{
  uint64_t v0;

  swift_release();
  sub_2447D7854(*(id *)(v0 + 24), *(_BYTE *)(v0 + 32));
  return swift_deallocObject();
}

void sub_24486FEEC()
{
  uint64_t v0;

  sub_24486DAC4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t sub_24486FEF8()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24486FF24(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_2447C62E8;
  v7[6] = v5;
  v7[7] = v6;
  v7[4] = a1;
  v7[5] = v4;
  return swift_task_switch();
}

uint64_t sub_24486FF98(uint64_t a1)
{
  uint64_t *v1;

  return sub_24486DE64(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_24486FFA4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24486FFD8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_2447C62E8;
  return sub_24486E078(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_244870058()
{
  return sub_2448D4278();
}

uint64_t sub_244870064(uint64_t a1)
{
  uint64_t v1;

  return sub_244817754(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(void **))(v1 + 32), *(_QWORD *)(v1 + 40));
}

void sub_244870070(uint64_t a1)
{
  sub_24486D404(*(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

void sub_244870084(uint64_t a1)
{
  uint64_t v1;

  sub_2448177B4(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(void **))(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_244870090(_OWORD *a1)
{
  __int128 v1;
  _OWORD v3[2];
  _OWORD v4[2];

  v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  v4[0] = a1[2];
  *(_OWORD *)((char *)v4 + 9) = *(_OWORD *)((char *)a1 + 41);
  return sub_24486D9AC((uint64_t *)v3, (void (*)(_QWORD *))sub_2447D258C);
}

uint64_t sub_2448700D4()
{
  uint64_t v0;

  swift_release();
  sub_24481823C(*(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocObject();
}

void sub_244870104()
{
  uint64_t v0;

  sub_24486DBB8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
}

unint64_t sub_244870114(unint64_t result)
{
  if (result >= 2)
    return swift_release();
  return result;
}

unint64_t sub_244870124(unint64_t result)
{
  if (result >= 2)
    return swift_retain();
  return result;
}

uint64_t sub_244870134(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t objectdestroy_2Tm_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for CrashReport(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = *(void **)(v0 + 16);
  if ((unint64_t)v3 >= 2)

  v4 = v0 + ((v2 + 32) & ~v2);
  v5 = sub_2448EA548();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = v4 + *(int *)(v1 + 32);
  v7 = sub_2448EA500();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_244870290(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CrashReport(0) - 8) + 80);
  return sub_24486A244(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + ((v3 + 32) & ~v3));
}

uint64_t sub_2448702D0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2448702F4(uint64_t a1)
{
  uint64_t v1;

  return sub_24486E308(*(void **)a1, *(_BYTE *)(a1 + 8), *(uint64_t (**)(__int128 *))(v1 + 16));
}

uint64_t SimpleTimeoutTimer.init(timeInterval:qos:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  sub_244803860();
  v6 = sub_2448EB43C();
  type metadata accessor for DelayedInvocation();
  v7 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CDF0);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CDF8);
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 44) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = nullsub_1;
  *(_BYTE *)(v9 + 40) = 1;
  *(_QWORD *)(v8 + 24) = v9;
  *(_QWORD *)(v7 + 16) = v8;
  v10 = sub_2448EA710();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
  *(_QWORD *)a2 = v7;
  *(double *)(a2 + 8) = a3;
  return result;
}

double SimpleTimeoutTimer.timeoutInterval.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

uint64_t SimpleTimeoutTimer.init<A>(scheduler:timeoutInterval:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10;
  uint64_t result;

  type metadata accessor for DelayedInvocation();
  v10 = sub_24483A164(a1, (uint64_t)nullsub_1, 0, a2, a3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  *(_QWORD *)a4 = v10;
  *(double *)(a4 + 8) = a5;
  return result;
}

uint64_t SimpleTimeoutTimer.operationStarted(timeoutCallback:)(uint64_t a1, uint64_t a2)
{
  double *v2;
  double v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;

  v5 = v2[1];
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 88);
  swift_retain();
  v8 = v7(a1, a2);
  return (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v6 + 104))(v8, v5);
}

Swift::Void __swiftcall SimpleTimeoutTimer.operationCanceled()()
{
  uint64_t v0;

  (*(void (**)(void))(**(_QWORD **)(*(_QWORD *)v0 + 16) + 112))();
}

double sub_244870580()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

uint64_t sub_244870588(uint64_t a1, uint64_t a2)
{
  double *v2;
  double v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;

  v5 = v2[1];
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 88);
  swift_retain();
  v8 = v7(a1, a2);
  return (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v6 + 104))(v8, v5);
}

uint64_t sub_2448705F0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)v0 + 16) + 112))();
}

uint64_t dispatch thunk of TimeoutTimer.timeoutInterval.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of TimeoutTimer.operationStarted(timeoutCallback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of TimeoutTimer.operationFinished()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of TimeoutTimer.operationCanceled()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

_QWORD *initializeBufferWithCopyOfBuffer for SimpleTimeoutTimer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for SimpleTimeoutTimer()
{
  return swift_release();
}

_QWORD *assignWithCopy for SimpleTimeoutTimer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

_QWORD *assignWithTake for SimpleTimeoutTimer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for SimpleTimeoutTimer()
{
  return &type metadata for SimpleTimeoutTimer;
}

uint64_t CrashReportError.IndexOutOfRangeError.crashReport.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2447F1688(v1, a1);
}

unint64_t CrashReportError.IndexOutOfRangeError.highValueTitle.getter()
{
  return 0xD000000000000012;
}

uint64_t CrashReportError.IndexOutOfRangeError.additionalInfo.getter()
{
  uint64_t v0;
  uint64_t v1;

  sub_2448EB79C();
  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CrashReport(0) + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  return v1;
}

id sub_2448707CC()
{
  id v0;
  id result;

  v0 = objc_allocWithZone(MEMORY[0x24BDD1798]);
  result = sub_2448A3104(0xD00000000000001FLL, 0x80000002448FBD50, 0);
  qword_25738F0A0 = (uint64_t)result;
  return result;
}

uint64_t static CrashReportError.IndexOutOfRangeError.asiRegularExpression.getter()
{
  uint64_t v0;
  id v1;

  if (qword_257389CB0 != -1)
    swift_once();
  swift_beginAccess();
  v0 = qword_25738F0A0;
  v1 = (id)qword_25738F0A0;
  return v0;
}

void static CrashReportError.IndexOutOfRangeError.asiRegularExpression.setter(uint64_t a1)
{
  void *v2;

  if (qword_257389CB0 != -1)
    swift_once();
  swift_beginAccess();
  v2 = (void *)qword_25738F0A0;
  qword_25738F0A0 = a1;

}

uint64_t (*static CrashReportError.IndexOutOfRangeError.asiRegularExpression.modify())()
{
  if (qword_257389CB0 != -1)
    swift_once();
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t CrashReportError.IndexOutOfRangeError.init(report:asi:match:)@<X0>(uint64_t a1@<X0>, void *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;

  swift_bridgeObjectRelease();

  sub_244819704(a1, a3);
  v6 = type metadata accessor for CrashReportError.IndexOutOfRangeError();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a3, 0, 1, v6);
}

uint64_t type metadata accessor for CrashReportError.IndexOutOfRangeError()
{
  uint64_t result;

  result = qword_25738F100;
  if (!qword_25738F100)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_244870A70()
{
  return 0xD000000000000012;
}

uint64_t _s20IndexOutOfRangeErrorVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_244870A9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CrashReport(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t _s20IndexOutOfRangeErrorVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_244870AE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CrashReport(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t Array.popFirst()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  MEMORY[0x24951AC70](MEMORY[0x24BEE12E0], a1);
  if ((sub_2448EB28C() & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1);
  MEMORY[0x24951AC70](MEMORY[0x24BEE12E8], a1);
  sub_2448EB328();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 0, 1);
}

uint64_t Array.appending(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  MEMORY[0x24BDAC7A8](a1);
  v7 = a2;
  (*(void (**)(char *))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2448EAEE4();
  swift_bridgeObjectRetain();
  sub_2448EAE9C();
  return v7;
}

uint64_t Array.inserting(_:at:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  MEMORY[0x24BDAC7A8](a1);
  v6 = v2;
  (*(void (**)(char *))(v3 + 16))((char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2448EAEE4();
  swift_bridgeObjectRetain();
  sub_2448EAEA8();
  return v6;
}

uint64_t Array.interleaving(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v22[0] = a1;
  v5 = *(_QWORD *)(a3 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v22 - v9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v12 = sub_2448EB508();
  v23 = *(_QWORD *)(v12 - 8);
  v24 = v12;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (_QWORD *)((char *)v22 - v16);
  v28 = sub_2448EA7D0();
  v27 = a2;
  v18 = sub_2448EAEE4();
  MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v18);
  sub_2448EACEC();
  v25 = v26;
  sub_2448EB9F4();
  sub_2448EB9D0();
  v22[1] = sub_2448EB9E8();
  while (1)
  {
    sub_2448EB9DC();
    (*(void (**)(uint64_t *, char *, uint64_t))(v23 + 32))(v17, v15, v24);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v17, 1, TupleTypeMetadata2) == 1)break;
    v19 = *v17;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, (char *)v17 + *(int *)(TupleTypeMetadata2 + 48), a3);
    v20 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    if (v19 >= 1)
    {
      v20(v8, (char *)v22[0], a3);
      sub_2448EAE9C();
    }
    v20(v8, v10, a3);
    sub_2448EAE9C();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, a3);
  }
  swift_bridgeObjectRelease();
  return v28;
}

uint64_t Array.invert<A>()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = *(_QWORD *)(a2 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v27 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v26 = (char *)&v23 - v7;
  v8 = sub_2448EB508();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = v11;
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v23 - v13;
  v30 = sub_2448EAE54();
  MEMORY[0x249519668](a1, v8);
  v25 = sub_2448EAEE4();
  sub_2448EAE24();
  v15 = swift_bridgeObjectRetain();
  if (!MEMORY[0x2495196A4](v15, v8))
  {
LABEL_12:
    swift_bridgeObjectRelease();
    return v30;
  }
  v16 = 0;
  v24 = v14;
  while (1)
  {
    v17 = sub_2448EAE6C();
    sub_2448EAE18();
    if ((v17 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v14, a1+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v16, v8);
      v18 = v16 + 1;
      if (__OFADD__(v16, 1))
        goto LABEL_11;
      goto LABEL_5;
    }
    result = sub_2448EB7F0();
    if (v23 != 8)
      break;
    v29 = result;
    (*(void (**)(char *, uint64_t *, uint64_t))(v9 + 16))(v14, &v29, v8);
    swift_unknownObjectRelease();
    v18 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_11:
      __break(1u);
      goto LABEL_12;
    }
LABEL_5:
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v14, v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, a2) == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      return 0;
    }
    v19 = v26;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v26, v12, a2);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v27, v19, a2);
    v28 = v18;
    sub_2448EAE9C();
    v20 = v19;
    v14 = v24;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v20, a2);
    v21 = MEMORY[0x2495196A4](a1, v8);
    ++v16;
    if (v28 == v21)
      goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t Array<A>.disambiguate<A>(keyPaths:basePath:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, _QWORD, _QWORD), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  sub_2448EAEE4();
  v17 = sub_2448EA7C4();
  v16 = sub_2448EA7D0();
  v14 = sub_2448EAE54();
  sub_244871324(a3, a1, a2, v14, (uint64_t)&v17, (uint64_t)&v16, (uint64_t)a3, a4, a5, a6, a7);
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t sub_244871324(void (*a1)(_QWORD, _QWORD, _QWORD), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)();
  uint64_t v44;
  uint64_t (*v45)@<X0>(uint64_t *@<X8>);
  char *v46;
  void (*v47)(_QWORD, _QWORD, _QWORD);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char v70;
  char v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t result;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void (*v82)(_QWORD, _QWORD, _QWORD);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void (*v92)(char *, unint64_t, uint64_t);
  char *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  void (*v105)(_QWORD, _QWORD, _QWORD);
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t (*v118)@<X0>(uint64_t *@<X8>);
  uint64_t (*v119)();
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  void (*v135)(_QWORD, _QWORD, _QWORD);
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t TupleTypeMetadata2;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  _QWORD *v147;
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  __int128 v159;
  __int128 v160;
  _OWORD v161[2];
  uint64_t v162;

  v128 = a7;
  v131 = a5;
  v130 = a3;
  v126 = sub_2448EB508();
  v125 = *(_QWORD *)(v126 - 8);
  MEMORY[0x24BDAC7A8](v126);
  v129 = (char *)&v117 - v16;
  v17 = sub_2448EAEE4();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v140 = sub_2448EB508();
  v139 = *(_QWORD *)(v140 - 8);
  v18 = MEMORY[0x24BDAC7A8](v140);
  v20 = (char *)&v117 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v18);
  v138 = (char *)&v117 - v22;
  v153 = *(_QWORD *)(a9 - 8);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v155 = (char *)&v117 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v23);
  v134 = (char *)&v117 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v136 = (uint64_t)&v117 - v28;
  v152 = *(_QWORD *)(a8 - 8);
  v29 = *(_QWORD *)(v152 + 64);
  v30 = MEMORY[0x24BDAC7A8](v27);
  v124 = (char *)&v117 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x24BDAC7A8](v30);
  v123 = (char *)&v117 - v32;
  v33 = MEMORY[0x24BDAC7A8](v31);
  v149 = (char *)&v117 - v34;
  v35 = MEMORY[0x24BDAC7A8](v33);
  v148 = (char *)&v117 - v36;
  MEMORY[0x24BDAC7A8](v35);
  v150 = (char *)&v117 - v37;
  v127 = a2;
  *(_QWORD *)&v159 = a2;
  v133 = sub_2448EBD78();
  v38 = sub_2448EAEE4();
  v39 = MEMORY[0x24951AC70](MEMORY[0x24BEE12E0], v38);
  v122 = v38;
  v121 = v39;
  sub_2448EB250();
  if (*(_QWORD *)&v161[0])
  {
    v143 = *(_QWORD *)&v161[0];
    v137 = v20;
    v132 = a4;
    v120 = a6;
    v142 = a10;
    v157 = a11;
    v158 = a9;
    v151 = v17;
    v154 = sub_2448EA7C4();
    v40 = swift_bridgeObjectRetain();
    v135 = a1;
    v41 = MEMORY[0x2495196A4](v40, a8);
    v156 = a8;
    if (v41)
    {
      v117 = v29;
      v42 = 0;
      v43 = 0;
      v44 = 0;
      v45 = 0;
      v46 = 0;
      v119 = sub_2448723CC;
      v118 = sub_2448723E8;
      v47 = v135;
      v48 = v136;
      while (1)
      {
        v147 = (_QWORD *)v44;
        v54 = sub_2448EAE6C();
        sub_2448EAE18();
        if ((v54 & 1) != 0)
        {
          v55 = (uint64_t)v47
              + ((*(unsigned __int8 *)(v152 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v152 + 80));
          v56 = v152;
          a1 = *(void (**)(_QWORD, _QWORD, _QWORD))(v152 + 16);
          a1(v150, v55 + *(_QWORD *)(v152 + 72) * v42, a8);
          v57 = v42 + 1;
          if (__OFADD__(v42, 1))
            goto LABEL_16;
        }
        else
        {
          v75 = sub_2448EB7F0();
          if (v117 != 8)
            goto LABEL_60;
          v17 = v75;
          *(_QWORD *)&v161[0] = v75;
          v56 = v152;
          a1 = *(void (**)(_QWORD, _QWORD, _QWORD))(v152 + 16);
          a1(v150, v161, a8);
          swift_unknownObjectRelease();
          v57 = v42 + 1;
          if (__OFADD__(v42, 1))
          {
LABEL_16:
            __break(1u);
            goto LABEL_17;
          }
        }
        v144 = v42;
        v145 = v57;
        v58 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
        v146 = v46;
        v59 = v148;
        v58(v148, v150, a8);
        swift_getAtKeyPath();
        v60 = (_QWORD *)swift_allocObject();
        v61 = v158;
        v60[2] = a8;
        v60[3] = v61;
        v62 = v142;
        v60[4] = v142;
        v63 = (uint64_t)v43;
        v64 = v48;
        v65 = v154;
        v66 = a8;
        v67 = v157;
        v60[5] = v157;
        sub_2447C8F84(v63);
        a1(v149, v59, v66);
        v68 = (char *)swift_allocObject();
        *((_QWORD *)v68 + 2) = v66;
        *((_QWORD *)v68 + 3) = v61;
        *((_QWORD *)v68 + 4) = v62;
        *((_QWORD *)v68 + 5) = v67;
        v17 = (uint64_t)v60;
        *((_QWORD *)v68 + 6) = sub_2448723CC;
        *((_QWORD *)v68 + 7) = v60;
        v69 = v61;
        sub_2447C8F84((uint64_t)v45);
        swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v161[0] = v65;
        sub_244877170(v64, v61, v67);
        if (__OFADD__(*(_QWORD *)(v65 + 16), (v70 & 1) == 0))
          break;
        v71 = v70;
        sub_2448EB970();
        v72 = sub_2448EB958();
        v73 = *(_QWORD *)&v161[0];
        a8 = v156;
        if ((v72 & 1) != 0)
        {
          sub_244877170(v136, v69, v157);
          if ((v71 & 1) != (v74 & 1))
            goto LABEL_61;
        }
        swift_bridgeObjectRelease();
        if ((v71 & 1) != 0)
        {
          swift_bridgeObjectRetain();
          v50 = v153;
          v51 = v68;
          v52 = v136;
        }
        else
        {
          v49 = swift_bridgeObjectRetain();
          *(_QWORD *)&v161[0] = (*((uint64_t (**)(uint64_t))v68 + 6))(v49);
          v50 = v153;
          v51 = v68;
          v52 = v136;
          (*(void (**)(char *, uint64_t, uint64_t))(v153 + 16))(v134, v136, v69);
          sub_2448EB964();
        }
        v154 = v73;
        swift_bridgeObjectRelease();
        sub_2448EAE9C();
        (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v52, v69);
        (*(void (**)(char *, uint64_t))(v152 + 8))(v148, a8);
        v47 = v135;
        v53 = MEMORY[0x2495196A4](v135, a8);
        v42 = v144 + 1;
        v43 = sub_2448723CC;
        v44 = v17;
        v45 = sub_2448723E8;
        v46 = v51;
        v48 = v52;
        if (v145 == v53)
          goto LABEL_19;
      }
      __break(1u);
LABEL_58:
      __break(1u);
    }
    else
    {
      v119 = 0;
      v17 = 0;
      v118 = 0;
      v51 = 0;
      v47 = v135;
LABEL_19:
      v147 = v51;
      v148 = (char *)v17;
      swift_bridgeObjectRelease();
      v77 = *(_QWORD *)(v154 + 64);
      v149 = (char *)(v154 + 64);
      v78 = 0;
      v79 = 1 << *(_BYTE *)(v154 + 32);
      v80 = -1;
      if (v79 < 64)
        v80 = ~(-1 << v79);
      v81 = v80 & v77;
      v150 = (char *)((unint64_t)(v79 + 63) >> 6);
      v146 = v150 - 1;
      v82 = v47;
      v83 = v132;
      v84 = v151;
      v85 = TupleTypeMetadata2;
      v86 = v153;
      v87 = v157;
      if ((v80 & v77) == 0)
        goto LABEL_27;
LABEL_25:
      v88 = __clz(__rbit64(v81));
      v81 &= v81 - 1;
      v89 = v88 | (v78 << 6);
LABEL_26:
      v90 = v154;
      v91 = *(_QWORD *)(v154 + 48) + *(_QWORD *)(v86 + 72) * v89;
      v92 = *(void (**)(char *, unint64_t, uint64_t))(v86 + 16);
      v93 = v137;
      v92(v137, v91, v158);
      *(_QWORD *)&v93[*(int *)(v85 + 48)] = *(_QWORD *)(*(_QWORD *)(v90 + 56) + 8 * v89);
      v94 = *(_QWORD *)(v85 - 8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v93, 0, 1, v85);
      swift_bridgeObjectRetain();
      while (1)
      {
        v99 = v138;
        (*(void (**)(char *, char *, uint64_t))(v139 + 32))(v138, v93, v140);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v99, 1, v85) == 1)
        {
          swift_release();
          swift_release();
          sub_2447C8F84((uint64_t)v119);
          return sub_2447C8F84((uint64_t)v118);
        }
        v100 = *(_QWORD *)&v99[*(int *)(v85 + 48)];
        v86 = v153;
        (*(void (**)(char *, char *, uint64_t))(v153 + 32))(v155, v99, v158);
        v162 = v83;
        swift_bridgeObjectRetain();
        v101 = v156;
        v102 = MEMORY[0x249519668](v100, v156);
        if (v102 != MEMORY[0x249519668](v82, v101))
        {
          *(_QWORD *)&v161[0] = v143;
          if (!v130)
            goto LABEL_47;
          *(_QWORD *)&v159 = v130;
          swift_retain_n();
          v103 = sub_2448EAA64();
          swift_release();
          v86 = v153;
          v82 = v135;
          swift_release();
          v87 = v157;
          if ((v103 & 1) == 0)
          {
LABEL_47:
            (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v134, v155, v158);
            sub_2448EAEE4();
            v87 = v157;
            sub_2448EAE9C();
          }
        }
        if (v102 == 1)
        {
          v104 = v78;
          v105 = v82;
          *(_QWORD *)&v161[0] = v100;
          MEMORY[0x24951AC70](MEMORY[0x24BEE12E0], v84);
          v106 = v129;
          sub_2448EB250();
          swift_bridgeObjectRelease();
          v107 = v152;
          v108 = v156;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v152 + 48))(v106, 1, v156) == 1)
          {
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v86 + 8))(v155, v158);
            (*(void (**)(char *, uint64_t))(v125 + 8))(v106, v126);
          }
          else
          {
            v109 = v123;
            (*(void (**)(char *, char *, uint64_t))(v107 + 32))(v123, v106, v108);
            (*(void (**)(char *, char *, uint64_t))(v107 + 16))(v124, v109, v108);
            *(_QWORD *)&v161[0] = v162;
            v110 = v158;
            sub_2448EAEE4();
            sub_2448EA8B4();
            sub_2448EA8F0();
            v111 = v109;
            v87 = v157;
            (*(void (**)(char *, uint64_t))(v107 + 8))(v111, v108);
            (*(void (**)(char *, uint64_t))(v86 + 8))(v155, v110);
          }
          v85 = TupleTypeMetadata2;
          v82 = v105;
          v78 = v104;
          v83 = v132;
          if (v81)
            goto LABEL_25;
        }
        else
        {
          if (v102 < 2)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v86 + 8))(v155, v158);
          }
          else
          {
            *(_QWORD *)&v159 = v127;
            swift_bridgeObjectRetain();
            sub_2448EB2A4();
            v159 = v161[0];
            v160 = v161[1];
            v112 = sub_2448EB694();
            MEMORY[0x24951AC70](MEMORY[0x24BEE2180], v112);
            v113 = sub_2448EAEFC();
            v116 = v87;
            v114 = v158;
            sub_244871324(v100, v113, 0, v162, v131, v120, v128, v156, v158, v142, v116);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v115 = v114;
            v87 = v157;
            v84 = v151;
            (*(void (**)(char *, uint64_t))(v86 + 8))(v155, v115);
          }
          v85 = TupleTypeMetadata2;
          if (v81)
            goto LABEL_25;
        }
LABEL_27:
        v95 = v78 + 1;
        if (__OFADD__(v78, 1))
          goto LABEL_58;
        if (v95 < (uint64_t)v150)
        {
          v96 = *(_QWORD *)&v149[8 * v95];
          if (v96)
            goto LABEL_30;
          v97 = v78 + 2;
          ++v78;
          if (v95 + 1 < (uint64_t)v150)
          {
            v96 = *(_QWORD *)&v149[8 * v97];
            if (v96)
            {
              ++v95;
LABEL_30:
              v81 = (v96 - 1) & v96;
              v89 = __clz(__rbit64(v96)) + (v95 << 6);
              v78 = v95;
              goto LABEL_26;
            }
            v98 = v95 + 2;
            v78 = v95 + 1;
            if (v95 + 2 < (uint64_t)v150)
              break;
          }
        }
LABEL_42:
        v94 = *(_QWORD *)(v85 - 8);
        v93 = v137;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v94 + 56))(v137, 1, 1, v85);
        v81 = 0;
      }
      v96 = *(_QWORD *)&v149[8 * v98];
      if (v96)
      {
        v95 += 2;
        goto LABEL_30;
      }
      while (1)
      {
        v95 = v98 + 1;
        if (__OFADD__(v98, 1))
          break;
        if (v95 >= (uint64_t)v150)
        {
          v78 = (uint64_t)v146;
          goto LABEL_42;
        }
        v96 = *(_QWORD *)&v149[8 * v95];
        ++v98;
        if (v96)
          goto LABEL_30;
      }
    }
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    result = sub_2448EBC7C();
    __break(1u);
  }
  else
  {
LABEL_17:
    *(_QWORD *)&v161[0] = a1;
    swift_bridgeObjectRetain();
    MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v17);
    return sub_2448EAE90();
  }
  return result;
}

uint64_t Array.transformElements(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v6;

  v6 = sub_2448EAE54();
  swift_bridgeObjectRetain();
  MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], a3);
  sub_2448EAD70();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *v3 = v6;
  return result;
}

uint64_t sub_244872148(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *);
  _QWORD v15[2];

  v7 = *(_QWORD *)(a5 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v15 - v11;
  v13 = *(void (**)(char *))(v7 + 16);
  v13((char *)v15 - v11);
  a2(v12);
  ((void (*)(char *, char *, uint64_t))v13)(v10, v12, a5);
  sub_2448EAEE4();
  sub_2448EAE9C();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, a5);
}

uint64_t Array.transformElement<A>(id:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[8];

  v6[2] = *(_QWORD *)(a4 + 16);
  v6[3] = a5;
  v6[4] = a1;
  v6[5] = a2;
  v6[6] = a3;
  return Array.transformElements(_:)((uint64_t)sub_2448723AC, (uint64_t)v6, a4);
}

uint64_t sub_244872278(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);

  v11 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)&v10 - v6;
  sub_2448EAD94();
  swift_getAssociatedConformanceWitness();
  v8 = sub_2448EAA64();
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  if ((v8 & 1) != 0)
    return v11(a1);
  return result;
}

uint64_t sub_244872390(uint64_t a1)
{
  uint64_t v1;

  return sub_244872148(a1, *(void (**)(char *))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16));
}

uint64_t sub_2448723AC(uint64_t a1)
{
  uint64_t v1;

  return sub_244872278(a1, *(_QWORD *)(v1 + 32), *(uint64_t (**)(uint64_t))(v1 + 40));
}

uint64_t sub_2448723BC()
{
  return swift_deallocObject();
}

uint64_t sub_2448723CC()
{
  return sub_2448EAE54();
}

uint64_t sub_2448723D8()
{
  return swift_deallocObject();
}

uint64_t sub_2448723E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 48))();
  *a1 = result;
  return result;
}

double Double.microseconds.getter(double a1)
{
  return a1 * 1000000.0;
}

uint64_t EventStreamObservable.wrappedValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_2448EA5D8();
  v1 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v0);
  return SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/EventStreamObservable.swift", 133, 2, 35, 25, (uint64_t)"wrappedValue", 12, 2, v0, v1);
}

void EventStreamObservable.wrappedValue.setter(uint64_t a1)
{
  sub_244872860(a1);
}

uint64_t sub_2448724C8()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))(v0);
}

void (*EventStreamObservable.wrappedValue.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  EventStreamObservable.wrappedValue.getter();
  return sub_244872568;
}

void sub_244872568(uint64_t a1, char a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), *(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(*(_QWORD *)a1 + 8));
    sub_244872860(v2);
  }
  sub_244872860(*(_QWORD *)(*(_QWORD *)a1 + 32));
}

uint64_t EventStreamObservable.__allocating_init(wrappedValue:emitsInitialValue:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = v2;
  v6 = swift_allocObject();
  v8 = sub_244872960(a1, a2, v6, v7);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(a1);
  return v8;
}

uint64_t EventStreamObservable.init(wrappedValue:emitsInitialValue:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;

  v6 = *v4;
  v7 = sub_244872960(a1, a2, a3, a4);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v6 + 80) - 8) + 8))(a1);
  return v7;
}

uint64_t EventStreamObservable.projectedValue.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_2448A9DB4((uint64_t)sub_2448729CC, v1, a1);
  return swift_retain();
}

uint64_t sub_2448726E0@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *);
  uint64_t v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t (*v33)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X2>, uint64_t (**)()@<X8>);
  uint64_t (*v34)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X2>, uint64_t (**)()@<X8>);
  uint64_t (*v35[2])@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X2>, uint64_t (**)()@<X8>);

  v24 = a2;
  v25 = a3;
  v23 = a5;
  v5 = *(_QWORD *)(*(_QWORD *)a4 + 80);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)v7;
  v11 = *(_QWORD *)(v7 + 8);
  v12 = *(_BYTE *)(v7 + 16);
  v14 = *(_QWORD *)(v7 + 24);
  v13 = *(_QWORD *)(v7 + 32);
  v15 = *(_QWORD *)(v7 + 40);
  v21 = *(_QWORD *)(v7 + 48);
  v22 = v13;
  HIDWORD(v20) = *(unsigned __int8 *)(v7 + 56);
  if (*(_BYTE *)(v16 + 32) == 1)
  {
    EventStreamObservable.wrappedValue.getter();
    v24(v9);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  EventStream.Sink.eventStream.getter(v35);
  v33 = v35[0];
  v34 = v35[1];
  *(_QWORD *)&v26 = v10;
  *((_QWORD *)&v26 + 1) = v11;
  v27 = v12;
  v28 = v14;
  v29 = v22;
  v30 = v15;
  v31 = v21;
  v32 = BYTE4(v20);
  type metadata accessor for EventStream(0, v5, v17, v18);
  sub_2448A9D60(&v26);
  return swift_release();
}

uint64_t EventStreamObservable.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return v0;
}

uint64_t EventStreamObservable.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

void sub_244872860(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t *KeyPath;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v3 = *(_QWORD *)(*v1 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[3];
  v11[0] = v3;
  v11[1] = v7;
  KeyPath = (uint64_t *)swift_getKeyPath();
  v9 = sub_2448EA5D8();
  swift_retain();
  v10 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v9);
  SynchronousAccessProviding.syncSetValue<A>(at:to:)(KeyPath, a1, v9, v10);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  EventStream.Sink.send(_:)(a1);
}

uint64_t sub_244872960(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;

  v7 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  type metadata accessor for EventStream.Sink(0, v7, a3, a4);
  *(_QWORD *)(v4 + 16) = EventStream.Sink.__allocating_init()();
  *(_BYTE *)(v4 + 32) = a2;
  *(_QWORD *)(v4 + 24) = sub_24481320C(a1, v7);
  return v4;
}

uint64_t sub_2448729CC@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;

  return sub_2448726E0(a1, a2, a3, v4, a4);
}

uint64_t sub_2448729D4()
{
  return EventStreamObservable.wrappedValue.getter();
}

void sub_2448729F4(uint64_t a1)
{
  sub_244872860(a1);
}

uint64_t sub_244872A14()
{
  return 8;
}

_QWORD *sub_244872A20(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_244872A2C()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for EventStreamObservable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EventStreamObservable);
}

uint64_t method lookup function for EventStreamObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of EventStreamObservable.__allocating_init(wrappedValue:emitsInitialValue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t ChunkStack.init(size:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t result;

  type metadata accessor for FixedStack(0, a2, a3, a4);
  result = sub_2448EAE54();
  *a5 = a1;
  a5[1] = result;
  return result;
}

uint64_t ChunkStack.push(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = (uint64_t *)(v4 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = type metadata accessor for FixedStack(255, v7, a3, a4);
  v9 = sub_2448EAEE4();
  MEMORY[0x24951AC70](MEMORY[0x24BEE12B0], v9);
  sub_2448EA968();
  if (v19)
  {
    if ((FixedStack.push(_:)(a1, v8, v10, v11) & 1) != 0)
    {
      v12 = swift_bridgeObjectRetain();
      v13 = MEMORY[0x2495196A4](v12, v8);
      result = swift_bridgeObjectRelease();
      v15 = v13 - 1;
      if (__OFSUB__(v13, 1))
      {
        __break(1u);
      }
      else
      {
        swift_retain();
        sub_2448EAE48();
        v16 = *v6;
        sub_2448736CC(v15, v16);
        *(_QWORD *)(v16 + 8 * v15 + 32) = v19;
        swift_release();
        return swift_release();
      }
      return result;
    }
    swift_release();
  }
  FixedStack.init(capacity:)(v7, v10, v11, &v19);
  if ((FixedStack.push(_:)(a1, v8, v17, v18) & 1) == 0)
    sub_244823F6C();
  return sub_2448EAE9C();
}

uint64_t ChunkStack.pop()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v29 = a1;
  v4 = *(_QWORD *)(a1 + 16);
  v28 = sub_2448EB508();
  v5 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v7 = (char *)&v28 - v6;
  v8 = (uint64_t *)(v2 + 8);
  v9 = *(_QWORD *)(v2 + 8);
  v30 = v2;
  v31 = v9;
  v12 = type metadata accessor for FixedStack(255, v4, v10, v11);
  v13 = sub_2448EAEE4();
  v14 = MEMORY[0x24951AC70](MEMORY[0x24BEE12B0], v13);
  sub_2448EA968();
  if (!v32)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a2, 1, 1, v4);
  v33 = v32;
  FixedStack.pop()(v12, v15, v16, v17, (uint64_t)v7);
  v18 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v7, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v28);
    v19 = MEMORY[0x24951AC70](MEMORY[0x24BEE12E8], v13);
    MEMORY[0x249519B24](&v32, v13, v14, v19);
    swift_release();
    ChunkStack.pop()(v29);
    return swift_release();
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(a2, v7, v4);
    v21 = swift_bridgeObjectRetain();
    v22 = MEMORY[0x249519668](v21, v12);
    result = swift_bridgeObjectRelease();
    v23 = __OFSUB__(v22, 1);
    v24 = v22 - 1;
    if (v23)
    {
      __break(1u);
    }
    else
    {
      v25 = v33;
      swift_retain();
      v26 = v18;
      sub_2448EAE48();
      v27 = *v8;
      sub_2448736CC(v24, *v8);
      *(_QWORD *)(v27 + 8 * v24 + 32) = v25;
      swift_release();
      swift_release();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v26 + 56))(a2, 0, 1, v4);
    }
  }
  return result;
}

uint64_t ChunkStack.startIndex.getter()
{
  return 0;
}

Swift::Int __swiftcall ChunkStack.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

uint64_t ChunkStack.endIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *v4;
  v5 = v4[1];
  v7 = type metadata accessor for FixedStack(255, *(_QWORD *)(a1 + 16), a3, a4);
  v8 = sub_2448EAEE4();
  MEMORY[0x24951AC70](MEMORY[0x24BEE12B0], v8);
  sub_2448EA968();
  if (!v13)
    return 0;
  result = MEMORY[0x249519668](v5, v7);
  v10 = result - 1;
  if (__OFSUB__(result, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  v11 = v10 * v6;
  if ((unsigned __int128)(v10 * (__int128)v6) >> 64 != (v10 * v6) >> 63)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v12 = FixedStack.endIndex.getter();
  swift_release();
  result = v11 + v12;
  if (!__OFADD__(v11, v12))
    return result;
  __break(1u);
  return 0;
}

uint64_t ChunkStack.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;

  v7 = *v5;
  if (*v5)
  {
    if (result != 0x8000000000000000 || v7 != -1)
    {
      v8 = result % v7;
      type metadata accessor for FixedStack(0, *(_QWORD *)(a2 + 16), a3, a4);
      sub_2448EAF08();
      FixedStack.subscript.getter(v8, a5);
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Int __swiftcall ChunkStack.index(before:)(Swift::Int before)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFSUB__(before, 1);
  result = before - 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Int __swiftcall ChunkStack.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFADD__(_, offsetBy);
  result = _ + offsetBy;
  if (v2)
    __break(1u);
  return result;
}

Swift::Int __swiftcall ChunkStack.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFSUB__(to, from);
  result = to - from;
  if (v2)
    __break(1u);
  return result;
}

uint64_t sub_244873074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for ChunkStack<A>, a4);
  return sub_2448EB19C();
}

uint64_t sub_2448730D8(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;
  uint64_t result;

  v2 = __OFSUB__(*a2, *a1);
  result = *a2 - *a1;
  if (v2)
    __break(1u);
  return result;
}

uint64_t sub_2448730F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result;

  result = ChunkStack.endIndex.getter(a1, a2, a3, a4);
  *a5 = result;
  return result;
}

void (*sub_244873114(_QWORD *a1, uint64_t *a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_244873170(v6, *a2, a3);
  return sub_2447DD19C;
}

void (*sub_244873170(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  *a1 = v6;
  a1[1] = v7;
  v8 = malloc(*(_QWORD *)(v7 + 64));
  a1[2] = v8;
  ChunkStack.subscript.getter(a2, a3, v9, v10, (uint64_t)v8);
  return sub_2447DD234;
}

uint64_t sub_2448731DC(uint64_t a1)
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for ChunkStack<A>, a1);
  return sub_2448EB1CC();
}

_QWORD *sub_244873228@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  if (__OFADD__(*result, a2))
    __break(1u);
  else
    *a3 = *result + a2;
  return result;
}

void sub_244873240(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = 0;
}

uint64_t sub_244873250(uint64_t a1)
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for ChunkStack<A>, a1);
  return sub_2448EB22C();
}

uint64_t sub_244873284(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x24951AC70](&protocol conformance descriptor for ChunkStack<A>, a1);
  v1 = sub_2448738A4();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t static ChunkStack<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = type metadata accessor for ChunkStack(0, a3, a3, a4);
  MEMORY[0x24951AC70](&protocol conformance descriptor for ChunkStack<A>, v4);
  v5 = sub_2448EB244();
  if (v5 == sub_2448EB244())
  {
    MEMORY[0x24951AC70](&protocol conformance descriptor for ChunkStack<A>, v4);
    v6 = sub_2448EBC64();
    v7 = MEMORY[0x24BDAC7A8](v6);
    MEMORY[0x24BDAC7A8](v7);
    v8 = sub_2448EB7E4();
    MEMORY[0x24951AC70](MEMORY[0x24BEE2620], v8);
    v9 = sub_2448EACD4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = 0;
  }
  return v9 & 1;
}

uint64_t sub_244873488(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t TupleTypeMetadata2;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return a2(a1, a1 + *(int *)(TupleTypeMetadata2 + 48)) & 1;
}

uint64_t sub_2448734E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static ChunkStack<A>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t ChunkStack<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  v8 = v2[1];
  sub_2448EBD0C();
  v21[1] = v9;
  v21[2] = v8;
  v22 = 0;
  swift_bridgeObjectRetain();
  if (!ChunkStack.endIndex.getter(a2, v10, v11, v12))
    return swift_bridgeObjectRelease();
  for (i = 0; ; ++i)
  {
    result = ChunkStack.subscript.getter(i, a2, v13, v14, (uint64_t)v7);
    v17 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v22 = i + 1;
    sub_2448EA920();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if (v17 == ChunkStack.endIndex.getter(a2, v18, v19, v20))
      return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t ChunkStack<A>.hashValue.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  _BYTE v5[72];
  uint64_t v6;
  uint64_t v7;

  v3 = v1[1];
  v6 = *v1;
  v7 = v3;
  sub_2448EBD00();
  ChunkStack<A>.hash(into:)((uint64_t)v5, a1);
  return sub_2448EBD3C();
}

uint64_t sub_24487366C(uint64_t a1)
{
  return ChunkStack<A>.hashValue.getter(a1);
}

uint64_t sub_244873674(uint64_t a1, uint64_t a2)
{
  return ChunkStack<A>.hash(into:)(a1, a2);
}

uint64_t sub_24487367C(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];

  sub_2448EBD00();
  ChunkStack<A>.hash(into:)((uint64_t)v4, a2);
  return sub_2448EBD3C();
}

uint64_t sub_2448736CC(unint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = _swift_isClassOrObjCExistentialType();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  v5 = a2 & 0xFFFFFFFFFFFFF8;
  if ((result & 1) == 0)
    v5 = a2;
  if (*(_QWORD *)(v5 + 16) <= a1)
    goto LABEL_7;
  return result;
}

uint64_t type metadata accessor for ChunkStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChunkStack);
}

uint64_t sub_244873728()
{
  return sub_2448EAA64() & 1;
}

uint64_t sub_244873750(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t TupleTypeMetadata2;

  v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 32);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v3(a1, a1 + *(int *)(TupleTypeMetadata2 + 48)) & 1;
}

void sub_2448737AC()
{
  JUMPOUT(0x24951AC70);
}

uint64_t sub_2448737BC(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x24951AC70](&protocol conformance descriptor for ChunkStack<A>);
  return MEMORY[0x24951AC70](MEMORY[0x24BEE4230], a1, &v3);
}

void sub_244873804()
{
  JUMPOUT(0x24951AC70);
}

uint64_t sub_244873814(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x24951AC70](&protocol conformance descriptor for ChunkStack<A>);
  return MEMORY[0x24951AC70](MEMORY[0x24BEE4218], a1, &v3);
}

void sub_24487385C()
{
  JUMPOUT(0x24951AC70);
}

uint64_t sub_24487386C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x24951AC70](&protocol conformance descriptor for <A> ChunkStack<A>, a1, &v4);
}

uint64_t AsyncThrowingCache.clearOnFailure.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 112);
}

uint64_t AsyncThrowingCache.__allocating_init(clearOnFailure:)(char a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  AsyncThrowingCache.init(clearOnFailure:)(a1);
  return v2;
}

uint64_t AsyncThrowingCache.init(clearOnFailure:)(char a1)
{
  uint64_t v1;

  swift_defaultActor_initialize();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  sub_2448EB04C();
  swift_getTupleTypeMetadata2();
  sub_2448EAE54();
  *(_QWORD *)(v1 + 120) = sub_2448EA848();
  *(_BYTE *)(v1 + 112) = a1;
  return v1;
}

uint64_t sub_244873998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[17] = a4;
  v5[18] = v4;
  v5[15] = a2;
  v5[16] = a3;
  v5[14] = a1;
  v6 = *v4;
  v5[19] = *v4;
  v7 = *(_QWORD *)(v6 + 80);
  v5[20] = v7;
  v5[21] = *(_QWORD *)(v7 - 8);
  v5[22] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A208);
  v5[23] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_244873A28()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = v0[19];
  v2 = v0[20];
  v3 = v0[15];
  v4 = (uint64_t *)(v0[18] + 120);
  swift_beginAccess();
  v5 = *v4;
  v6 = *(_QWORD *)(v1 + 88);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v7 = sub_2448EB04C();
  v8 = *(_QWORD *)(v1 + 96);
  MEMORY[0x2495190C8](v3, v5, v2, v7, v8);
  swift_bridgeObjectRelease();
  v9 = v0[11];
  v0[24] = v9;
  if (v9)
  {
    v10 = (_QWORD *)swift_task_alloc();
    v0[25] = v10;
    *v10 = v0;
    v10[1] = sub_244873C94;
  }
  else
  {
    v11 = v0[22];
    v12 = v0[23];
    v13 = v0[20];
    v14 = v0[17];
    v21 = v0[16];
    v22 = v0[15];
    v23 = v0[21];
    v15 = sub_2448EAF74();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v12, 1, 1, v15);
    v16 = (_QWORD *)swift_allocObject();
    v16[2] = 0;
    v16[3] = 0;
    v16[4] = v13;
    v16[5] = v6;
    v16[6] = v8;
    v16[7] = v21;
    v16[8] = v14;
    swift_retain();
    v17 = sub_2447C6624(v12, (uint64_t)&unk_25738F248, (uint64_t)v16);
    v0[27] = v17;
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16);
    v0[28] = v18;
    v18(v11, v22, v13);
    v0[12] = v17;
    swift_beginAccess();
    v0[29] = sub_2448EA8B4();
    swift_retain();
    sub_2448EA8F0();
    swift_endAccess();
    v19 = (_QWORD *)swift_task_alloc();
    v0[30] = v19;
    *v19 = v0;
    v19[1] = sub_244873D3C;
  }
  return sub_2448EB028();
}

uint64_t sub_244873C94()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_244873CF8()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_244873D3C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_244873DA0()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_244873DE4()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_244873E28()
{
  uint64_t v0;

  if (*(_BYTE *)(*(_QWORD *)(v0 + 144) + 112) == 1)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 224))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 160));
    *(_QWORD *)(v0 + 104) = 0;
    swift_beginAccess();
    sub_2448EA8F0();
    swift_endAccess();
  }
  swift_willThrow();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_244873EF0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v8 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = sub_2447C62E8;
  return v8(a1);
}

uint64_t sub_244873F54(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v13[4];

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v13[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v8 & 1) != 0)
  {
    swift_beginAccess();
    v9 = v1[15];
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
    v10 = sub_2448EB04C();
    MEMORY[0x2495190C8](v13, a1, v9, v4, v10, *(_QWORD *)(v3 + 96));
    swift_bridgeObjectRelease();
    if (v13[0])
    {
      sub_2448EB034();
      swift_release();
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v13[3] = 0;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  sub_2448EB04C();
  sub_2448EA8B4();
  sub_2448EA8F0();
  return swift_endAccess();
}

uint64_t AsyncThrowingCache.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t AsyncThrowingCache.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t AsyncThrowingCache.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_244874140()
{
  return AsyncThrowingCache.unownedExecutor.getter();
}

uint64_t sub_244874158()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_244874184(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v4 = *(int **)(v1 + 56);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_2447C81F0;
  v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v6 = (_QWORD *)swift_task_alloc();
  v5[2] = v6;
  *v6 = v5;
  v6[1] = sub_2447C62E8;
  return v8(a1);
}

uint64_t sub_24487420C()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AsyncThrowingCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncThrowingCache);
}

uint64_t method lookup function for AsyncThrowingCache()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AsyncThrowingCache.__allocating_init(clearOnFailure:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of AsyncThrowingCache.value(for:makeValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v4 + 160)
                                                                   + *(_QWORD *)(*(_QWORD *)v4 + 160));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_2447C62E8;
  return v12(a1, a2, a3, a4);
}

uint64_t dispatch thunk of AsyncThrowingCache.invalidate(key:cancelingTask:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t AssociatedObjectCache.__allocating_init(logAspect:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = swift_allocObject();
  AssociatedObjectCache.init(logAspect:)(a1, v3, v4, v5);
  return v2;
}

_QWORD *AssociatedObjectCache.init(logAspect:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v6 = type metadata accessor for Ref(0, *(_QWORD *)(*v4 + 80), a3, a4);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738F2D8);
  swift_getTupleTypeMetadata3();
  MEMORY[0x24951AC70](&protocol conformance descriptor for Ref<A>, v6);
  v4[2] = sub_2448EA7C4();
  v7 = (char *)v4 + qword_25738F2E0;
  v8 = sub_2448EA5FC();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, a1, v8);
  return v4;
}

void AssociatedObjectCache.retainedAssociatedObject(to:createAssociatedObject:)(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata3;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t);
  _QWORD *v63;
  void (*v64)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73[3];
  uint64_t v74;

  v61 = a3;
  v62 = a2;
  v69 = a4;
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 88);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738F2D8);
  v71 = v7;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v66 = sub_2448EB508();
  v9 = *(_QWORD *)(v66 - 8);
  v10 = MEMORY[0x24BDAC7A8](v66);
  v67 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v61 - v13;
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v61 - v16;
  v18 = *(_QWORD *)(TupleTypeMetadata3 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v61 - v19;
  v21 = *(_QWORD *)(v6 + 80);
  Ref.init(_:)(a1, &v74);
  v22 = v74;
  v65 = v4 + 2;
  swift_beginAccess();
  v63 = v4;
  v25 = v4[2];
  v72 = v22;
  v26 = *(_QWORD *)(v25 + 16);
  v70 = a1;
  v68 = v21;
  if (v26)
  {
    v27 = type metadata accessor for Ref(0, v21, v23, v24);
    swift_unknownObjectRetain();
    v28 = MEMORY[0x24951AC70](&protocol conformance descriptor for Ref<A>, v27);
    v29 = sub_244877170((uint64_t)&v72, v27, v28);
    if ((v30 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v17, *(_QWORD *)(v25 + 56) + *(_QWORD *)(v18 + 72) * v29, TupleTypeMetadata3);
      v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
      v32 = v17;
      v33 = 0;
    }
    else
    {
      v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
      v32 = v17;
      v33 = 1;
    }
    v64 = v31;
    v31(v32, v33, 1, TupleTypeMetadata3);
  }
  else
  {
    v64 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
    v64(v17, 1, 1, TupleTypeMetadata3);
    swift_unknownObjectRetain();
  }
  v34 = v66;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v17, v66);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v14, 1, TupleTypeMetadata3) == 1)
  {
    v35 = *(int *)(TupleTypeMetadata3 + 48);
    v36 = *(int *)(TupleTypeMetadata3 + 64);
    v62(v70);
    *(_QWORD *)&v20[v35] = 0;
    *(_QWORD *)&v20[v36] = 0;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v34);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v14, TupleTypeMetadata3);
  }
  swift_unknownObjectRelease();
  v66 = *(_QWORD *)&v20[*(int *)(TupleTypeMetadata3 + 48)];
  v37 = *(void **)&v20[*(int *)(TupleTypeMetadata3 + 64)];
  swift_endAccess();
  v38 = *(_QWORD *)(v71 - 8);
  v39 = v69;
  v40 = v20;
  v41 = v37;
  (*(void (**)(uint64_t, char *))(v38 + 32))(v69, v40);
  v42 = v70;
  if (v37)
  {
    swift_unknownObjectRetain_n();
    v43 = v37;
    v44 = sub_2448EA5E4();
    v45 = sub_2448EB394();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = swift_slowAlloc();
      v62 = (void (*)(uint64_t))swift_slowAlloc();
      v73[0] = (uint64_t)v62;
      *(_DWORD *)v46 = 136446466;
      v74 = v71;
      swift_getMetatypeMetadata();
      v47 = sub_2448EAAE8();
      v63 = v43;
      v74 = sub_2447D6798(v47, v48, v73);
      sub_2448EB598();
      swift_bridgeObjectRelease();
      *(_WORD *)(v46 + 12) = 2082;
      v49 = static Logging.describe<A>(ref:)(v42);
      v74 = sub_2447D6798(v49, v50, v73);
      sub_2448EB598();
      swift_unknownObjectRelease_n();
      v43 = v63;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2447B9000, v44, v45, "%{public}s: Retain requested for previous purged, canceling purging: %{public}s", (uint8_t *)v46, 0x16u);
      v51 = v62;
      swift_arrayDestroy();
      MEMORY[0x24951AD84](v51, -1, -1);
      v52 = v46;
      v39 = v69;
      MEMORY[0x24951AD84](v52, -1, -1);
    }
    else
    {
      swift_unknownObjectRelease_n();
    }

    objc_msgSend(v43, sel_invalidate, v61);
  }
  v53 = v68;
  Ref.init(_:)(v42, &v74);
  v54 = v74;
  v55 = *(int *)(TupleTypeMetadata3 + 48);
  v56 = *(int *)(TupleTypeMetadata3 + 64);
  v57 = v67;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v67, v39, v71);
  if (__OFADD__(v66, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)&v57[v55] = v66 + 1;
    *(_QWORD *)&v57[v56] = 0;
    v64(v57, 0, 1, TupleTypeMetadata3);
    v72 = v54;
    swift_beginAccess();
    v60 = type metadata accessor for Ref(255, v53, v58, v59);
    swift_unknownObjectRetain();
    MEMORY[0x24951AC70](&protocol conformance descriptor for Ref<A>, v60);
    sub_2448EA8B4();
    sub_2448EA8F0();
    swift_endAccess();

  }
}

uint64_t AssociatedObjectCache.retainedAssociatedObject(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  void *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  id v39;
  NSObject *v40;
  os_log_type_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  int v55;
  uint64_t v56;
  void (*v57)(uint64_t, char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t TupleTypeMetadata3;
  uint64_t v70;
  uint64_t v71[3];
  _QWORD v72[2];

  v68 = a2;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 88);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738F2D8);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v6 = sub_2448EB508();
  v63 = *(_QWORD *)(v6 - 8);
  v64 = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v67 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v54 - v9;
  v11 = swift_getTupleTypeMetadata3();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v54 - v13;
  v15 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v62 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v4 + 80);
  Ref.init(_:)(a1, v72);
  v18 = v72[0];
  v61 = v2 + 2;
  swift_beginAccess();
  v59 = (uint64_t)v2;
  v19 = v2[2];
  v70 = v18;
  v66 = v17;
  v22 = type metadata accessor for Ref(0, v17, v20, v21);
  v65 = a1;
  v23 = TupleTypeMetadata3;
  swift_unknownObjectRetain();
  v24 = MEMORY[0x24951AC70](&protocol conformance descriptor for Ref<A>, v22);
  v60 = v22;
  MEMORY[0x2495190C8](&v70, v19, v22, v23, v24);
  swift_unknownObjectRelease();
  swift_endAccess();
  v25 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v10, 1, v23) == 1)
  {
    (*(void (**)(char *, uint64_t))(v63 + 8))(v10, v64);
    v26 = 1;
    v27 = v5;
    v28 = v68;
    v29 = v15;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v28, v26, 1, v27);
  }
  v56 = v25;
  v58 = v24;
  v30 = *(_QWORD *)&v10[*(int *)(v23 + 48)];
  v31 = *(_QWORD *)&v10[*(int *)(v23 + 64)];
  v32 = *(int *)(v11 + 48);
  v33 = *(int *)(v11 + 64);
  v64 = v15;
  v34 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v34(v14, v10, v5);
  *(_QWORD *)&v14[v32] = v30;
  *(_QWORD *)&v14[v33] = v31;
  v63 = *(_QWORD *)&v14[*(int *)(v11 + 48)];
  v35 = *(void **)&v14[*(int *)(v11 + 64)];
  v36 = v62;
  v57 = (void (*)(uint64_t, char *, uint64_t))v34;
  v34(v62, v14, v5);
  v27 = v5;
  v37 = v65;
  v38 = v67;
  if (v35)
  {
    swift_unknownObjectRetain_n();
    v39 = v35;
    v40 = sub_2448EA5E4();
    v41 = sub_2448EB394();
    v42 = v41;
    if (os_log_type_enabled(v40, v41))
    {
      v43 = swift_slowAlloc();
      v59 = swift_slowAlloc();
      v71[0] = v59;
      *(_DWORD *)v43 = 136446466;
      v54 = v43 + 4;
      v72[0] = v27;
      swift_getMetatypeMetadata();
      v44 = sub_2448EAAE8();
      v72[0] = sub_2447D6798(v44, v45, v71);
      v55 = v42;
      sub_2448EB598();
      swift_bridgeObjectRelease();
      *(_WORD *)(v43 + 12) = 2082;
      v46 = static Logging.describe<A>(ref:)(v37);
      v72[0] = sub_2447D6798(v46, v47, v71);
      v38 = v67;
      sub_2448EB598();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2447B9000, v40, (os_log_type_t)v55, "%{public}s: Retain requested for previous purged, canceling purging: %{public}s", (uint8_t *)v43, 0x16u);
      v48 = v59;
      swift_arrayDestroy();
      MEMORY[0x24951AD84](v48, -1, -1);
      MEMORY[0x24951AD84](v43, -1, -1);
    }
    else
    {
      swift_unknownObjectRelease_n();
    }

    objc_msgSend(v39, sel_invalidate);
  }
  Ref.init(_:)(v37, v72);
  v49 = v72[0];
  v50 = TupleTypeMetadata3;
  v51 = *(int *)(TupleTypeMetadata3 + 48);
  v52 = *(int *)(TupleTypeMetadata3 + 64);
  v29 = v64;
  result = (*(uint64_t (**)(char *, char *, uint64_t))(v64 + 16))(v38, v36, v27);
  if (!__OFADD__(v63, 1))
  {
    *(_QWORD *)&v38[v51] = v63 + 1;
    *(_QWORD *)&v38[v52] = 0;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v38, 0, 1, v50);
    v70 = v49;
    swift_beginAccess();
    sub_2448EA8B4();
    swift_unknownObjectRetain();
    sub_2448EA8F0();
    swift_endAccess();

    v28 = v68;
    v57(v68, v36, v27);
    v26 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v28, v26, 1, v27);
  }
  __break(1u);
  return result;
}

uint64_t AssociatedObjectCache.withAssociatedObject(to:during:)(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD v19[2];
  void (*v20)(char *);
  uint64_t v21;

  v5 = v4;
  v19[1] = a3;
  v20 = a2;
  v7 = *(_QWORD *)(*(_QWORD *)v5 + 88);
  v21 = type metadata accessor for AssociatedObjectCache.DecrementResult(0, *(_QWORD *)(*(_QWORD *)v5 + 80), v7, a4);
  v19[0] = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v9 = (char *)v19 - v8;
  v10 = sub_2448EB508();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v19 - v13;
  v15 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedObjectCache.retainedAssociatedObject(to:)(a1, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v7) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v14, v7);
  v20(v17);
  AssociatedObjectCache.decrementReferenceCount(to:after:)(a1, 0, 0, 0, (uint64_t)v9);
  (*(void (**)(char *, uint64_t))(v19[0] + 8))(v9, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v7);
}

const char *AssociatedObjectCache.decrementReferenceCount(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return AssociatedObjectCache.decrementReferenceCount(to:after:)(a1, 0, 0, 0, a2);
}

const char *AssociatedObjectCache.decrementReferenceCount(to:after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  char *v68;
  void (*v69)(_QWORD, _QWORD);
  NSObject *v70;
  uint64_t v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  void (*v81)(char *, char *, uint64_t);
  void (*v82)(char *, char *, uint64_t);
  NSObject *v83;
  os_log_type_t v84;
  _BOOL4 v85;
  uint64_t v86;
  const char *result;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  const char *v103;
  NSObject *v104;
  os_log_type_t v105;
  uint8_t *v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(_QWORD, _QWORD);
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  void (*v151)(char *, char *, uint64_t);
  char *v152;
  char *v153;
  char *v154;
  double v155;
  uint64_t v156;
  void (*v157)(_QWORD, _QWORD);
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t TupleTypeMetadata3;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  const char *aBlock;
  uint64_t v170;
  void (*v171)(uint64_t, void *);
  __int128 v172;
  const char *v173;
  uint64_t v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  char v178;

  v6 = v5;
  v156 = a4;
  v158 = a3;
  v155 = *(double *)&a2;
  v9 = *v5;
  v149 = sub_2448EA5FC();
  v148 = *(_QWORD *)(v149 - 8);
  MEMORY[0x24BDAC7A8](v149);
  v147 = v10;
  v153 = (char *)&v140 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = v9;
  v11 = *(_QWORD *)(v9 + 88);
  v143 = (char *)sub_2448EB508();
  v142 = *((_QWORD *)v143 - 1);
  MEMORY[0x24BDAC7A8](v143);
  v141 = (uint64_t)&v140 - v12;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738F2D8);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v13 = sub_2448EB508();
  v160 = *(_QWORD **)(v13 - 8);
  v161 = v13;
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v140 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v140 - v17;
  v159 = swift_getTupleTypeMetadata3();
  v19 = MEMORY[0x24BDAC7A8](v159);
  v21 = (char *)&v140 - v20;
  v167 = *(_QWORD *)(v11 - 8);
  v22 = MEMORY[0x24BDAC7A8](v19);
  v151 = (void (*)(char *, char *, uint64_t))((char *)&v140 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = MEMORY[0x24BDAC7A8](v22);
  v152 = (char *)&v140 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v150 = (char *)&v140 - v27;
  v28 = MEMORY[0x24BDAC7A8](v26);
  v145 = (char *)&v140 - v29;
  v146 = v30;
  MEMORY[0x24BDAC7A8](v28);
  v162 = (char *)&v140 - v31;
  v32 = (char *)v5 + qword_25738F2E0;
  swift_unknownObjectRetain_n();
  v157 = (void (*)(_QWORD, _QWORD))v32;
  v33 = sub_2448EA5E4();
  v34 = sub_2448EB394();
  v35 = os_log_type_enabled(v33, v34);
  v166 = a5;
  v164 = v11;
  v168 = a1;
  v154 = v16;
  if (v35)
  {
    v36 = swift_slowAlloc();
    v37 = (const char *)swift_slowAlloc();
    aBlock = v37;
    *(_DWORD *)v36 = 136446466;
    v144 = (uint64_t)v6;
    v177 = v11;
    swift_getMetatypeMetadata();
    v38 = sub_2448EAAE8();
    v177 = sub_2447D6798(v38, v39, (uint64_t *)&aBlock);
    sub_2448EB598();
    swift_bridgeObjectRelease();
    *(_WORD *)(v36 + 12) = 2082;
    v40 = *(_QWORD *)(v163 + 80);
    v41 = static Logging.describe<A>(ref:)(v168);
    v177 = sub_2447D6798(v41, v42, (uint64_t *)&aBlock);
    sub_2448EB598();
    swift_unknownObjectRelease_n();
    v6 = (_QWORD *)v144;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2447B9000, v33, v34, "%{public}s: Release requested for: %{public}s", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24951AD84](v37, -1, -1);
    v43 = v36;
    a1 = v168;
    MEMORY[0x24951AD84](v43, -1, -1);

  }
  else
  {
    swift_unknownObjectRelease_n();

    v40 = *(_QWORD *)(v163 + 80);
  }
  Ref.init(_:)(a1, &v177);
  v44 = v177;
  swift_beginAccess();
  v45 = v6[2];
  v176 = v44;
  v48 = type metadata accessor for Ref(0, v40, v46, v47);
  swift_unknownObjectRetain();
  v49 = MEMORY[0x24951AC70](&protocol conformance descriptor for Ref<A>, v48);
  v50 = v45;
  v51 = TupleTypeMetadata3;
  v163 = v49;
  MEMORY[0x2495190C8](&v176, v50, v48, TupleTypeMetadata3);
  swift_unknownObjectRelease();
  swift_endAccess();
  v52 = *(_QWORD *)(v51 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v18, 1, v51) == 1)
  {
    ((void (*)(char *, uint64_t))v160[1])(v18, v161);
    aBlock = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/A"
             "ssociatedObjectCache.swift";
    v170 = 133;
    v53 = 2;
    LOBYTE(v171) = 2;
    v172 = xmmword_2448F4790;
    v173 = "decrementReferenceCount(to:after:)";
    v174 = 34;
    v175 = 2;
    sub_244823F6C();
    v54 = v164;
    v55 = v167;
    goto LABEL_24;
  }
  v140 = v52;
  v144 = v48;
  v160 = v6 + 2;
  v161 = v40;
  v56 = *(_QWORD *)&v18[*(int *)(v51 + 48)];
  v57 = *(_QWORD *)&v18[*(int *)(v51 + 64)];
  v58 = v159;
  v59 = *(int *)(v159 + 48);
  v60 = *(int *)(v159 + 64);
  v61 = *(void (**)(char *, char *, uint64_t))(v167 + 32);
  v62 = v164;
  v61(v21, v18, v164);
  *(_QWORD *)&v21[v59] = v56;
  *(_QWORD *)&v21[v60] = v57;
  v54 = v62;
  v63 = *(_QWORD *)&v21[*(int *)(v58 + 48)];

  v64 = v162;
  v61(v162, v21, v62);
  if (!v63)
  {
    aBlock = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/A"
             "ssociatedObjectCache.swift";
    v170 = 133;
    v53 = 2;
    LOBYTE(v171) = 2;
    v172 = xmmword_2448F4780;
    v173 = "decrementReferenceCount(to:after:)";
    v174 = 34;
    v175 = 2;
    sub_244823F6C();
    v55 = v167;
    (*(void (**)(char *, uint64_t))(v167 + 8))(v64, v62);
    goto LABEL_24;
  }
  v159 = (uint64_t)v61;
  v65 = v166;
  if (v63 == 1)
  {
    v55 = v167;
    if (!v158)
    {
      v103 = v145;
      (*(void (**)(const char *, char *, uint64_t))(v167 + 16))(v145, v64, v62);
      v104 = sub_2448EA5E4();
      v105 = sub_2448EB394();
      if (os_log_type_enabled(v104, v105))
      {
        v106 = (uint8_t *)swift_slowAlloc();
        v107 = (const char *)swift_slowAlloc();
        aBlock = v107;
        *(_DWORD *)v106 = 136446210;
        TupleTypeMetadata3 = (uint64_t)(v106 + 4);
        sub_2448EBBD4();
        v144 = (uint64_t)v6;
        __swift_instantiateConcreteTypeFromMangledName(&qword_25738C210);
        v108 = swift_allocObject();
        *(_OWORD *)(v108 + 16) = xmmword_2448ECFE0;
        *(_QWORD *)(v108 + 56) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v108 + 64) = sub_24480514C();
        *(_QWORD *)(v108 + 32) = 0x63656A624F796E41;
        *(_QWORD *)(v108 + 40) = 0xE900000000000074;
        v109 = sub_2448EAA58();
        v110 = MEMORY[0x24BEE17F0];
        *(_QWORD *)(v108 + 96) = MEMORY[0x24BEE1768];
        *(_QWORD *)(v108 + 104) = v110;
        *(_QWORD *)(v108 + 72) = v109;
        v111 = sub_2448EAAB8();
        v112 = v54;
        v114 = v113;
        v65 = v166;
        swift_unknownObjectRelease();
        v177 = sub_2447D6798(v111, v114, (uint64_t *)&aBlock);
        v64 = v162;
        sub_2448EB598();
        v54 = v112;
        v55 = v167;
        swift_bridgeObjectRelease();
        (*(void (**)(const char *, uint64_t))(v55 + 8))(v145, v54);
        _os_log_impl(&dword_2447B9000, v104, v105, "Ref count is 1, invalidating: %{public}s", v106, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24951AD84](v107, -1, -1);
        MEMORY[0x24951AD84](v106, -1, -1);

      }
      else
      {

        (*(void (**)(const char *, uint64_t))(v55 + 8))(v103, v62);
      }
      v139 = v141;
      AssociatedObjectCache.purgeAssociatedObject(to:)(v168, v141);
      (*(void (**)(uint64_t, char *))(v142 + 8))(v139, v143);
      ((void (*)(uint64_t, char *, uint64_t))v159)(v65, v64, v54);
      v53 = 0;
      return (const char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56))(v65, v53, 2, v54);
    }
    v66 = *(_QWORD *)&v155;
    v67 = v155;
    v68 = v150;
    v151 = *(void (**)(char *, char *, uint64_t))(v167 + 16);
    v151(v150, v64, v62);
    swift_retain();
    v69 = v157;
    v70 = sub_2448EA5E4();
    v71 = v55;
    v72 = sub_2448EB394();
    if (os_log_type_enabled(v70, v72))
    {
      v73 = swift_slowAlloc();
      v145 = (const char *)swift_slowAlloc();
      aBlock = v145;
      *(_DWORD *)v73 = 134218242;
      v177 = v66;
      v143 = &v178;
      sub_2448EB598();
      *(_WORD *)(v73 + 12) = 2082;
      v142 = v73 + 14;
      sub_2448EBBD4();
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738C210);
      v74 = swift_allocObject();
      *(_OWORD *)(v74 + 16) = xmmword_2448ECFE0;
      *(_QWORD *)(v74 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v74 + 64) = sub_24480514C();
      *(_QWORD *)(v74 + 32) = 0x63656A624F796E41;
      *(_QWORD *)(v74 + 40) = 0xE900000000000074;
      v75 = sub_2448EAA58();
      v76 = MEMORY[0x24BEE17F0];
      *(_QWORD *)(v74 + 96) = MEMORY[0x24BEE1768];
      *(_QWORD *)(v74 + 104) = v76;
      *(_QWORD *)(v74 + 72) = v75;
      v77 = sub_2448EAAB8();
      v79 = v78;
      swift_unknownObjectRelease();
      v177 = sub_2447D6798(v77, v79, (uint64_t *)&aBlock);
      sub_2448EB598();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v71 + 8))(v150, v62);
      _os_log_impl(&dword_2447B9000, v70, v72, "Ref count is 1, but delaying purging for %f seconds: %{public}s", (uint8_t *)v73, 0x16u);
      v80 = v145;
      swift_arrayDestroy();
      MEMORY[0x24951AD84](v80, -1, -1);
      MEMORY[0x24951AD84](v73, -1, -1);

    }
    else
    {

      (*(void (**)(char *, uint64_t))(v71 + 8))(v68, v62);
    }
    v54 = v62;
    v115 = v71;
    v150 = (char *)objc_opt_self();
    v116 = swift_allocObject();
    swift_weakInit();
    v117 = v148;
    v118 = v69;
    v119 = v149;
    (*(void (**)(char *, void (*)(_QWORD, _QWORD), uint64_t))(v148 + 16))(v153, v118, v149);
    v151(v152, v162, v62);
    v120 = (*(unsigned __int8 *)(v117 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80);
    v121 = (v147 + v120 + *(unsigned __int8 *)(v115 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v115 + 80);
    v122 = (v146 + v121 + 7) & 0xFFFFFFFFFFFFFFF8;
    v123 = (v122 + 15) & 0xFFFFFFFFFFFFFFF8;
    v124 = swift_allocObject();
    *(_QWORD *)(v124 + 16) = v161;
    *(_QWORD *)(v124 + 24) = v54;
    (*(void (**)(unint64_t, char *, uint64_t))(v117 + 32))(v124 + v120, v153, v119);
    v125 = v124 + v121;
    v55 = v167;
    ((void (*)(unint64_t, char *, uint64_t))v159)(v125, v152, v54);
    *(_QWORD *)(v124 + v122) = v116;
    v126 = v168;
    *(_QWORD *)(v124 + v123) = v168;
    v127 = (_QWORD *)(v124 + ((v123 + 15) & 0xFFFFFFFFFFFFFFF8));
    v128 = v158;
    v129 = v156;
    *v127 = v158;
    v127[1] = v129;
    *((_QWORD *)&v172 + 1) = sub_2448773E0;
    v173 = (const char *)v124;
    aBlock = (const char *)MEMORY[0x24BDAC760];
    v170 = 1107296256;
    v171 = sub_2447F4BB8;
    *(_QWORD *)&v172 = &block_descriptor_8;
    v130 = _Block_copy(&aBlock);
    swift_unknownObjectRetain();
    sub_24483D714(*(uint64_t *)&v155, v128);
    swift_release();
    v131 = objc_msgSend(v150, sel_scheduledTimerWithTimeInterval_repeats_block_, 0, v130, v67);
    _Block_release(v130);
    Ref.init(_:)(v126, &v177);
    v132 = v177;
    v133 = TupleTypeMetadata3;
    v134 = *(int *)(TupleTypeMetadata3 + 48);
    v135 = *(int *)(TupleTypeMetadata3 + 64);
    v136 = v154;
    v137 = v162;
    v151(v154, v162, v54);
    *(_QWORD *)&v136[v134] = 0;
    *(_QWORD *)&v136[v135] = v131;
    v53 = 1;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v140 + 56))(v136, 0, 1, v133);
    v176 = v132;
    swift_beginAccess();
    sub_2448EA8B4();
    swift_unknownObjectRetain();
    v138 = v131;
    sub_2448EA8F0();
    swift_endAccess();

    sub_24483D734(*(uint64_t *)&v155, v158);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v137, v54);
LABEL_24:
    v65 = v166;
    return (const char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56))(v65, v53, 2, v54);
  }
  v55 = v167;
  v81 = *(void (**)(char *, char *, uint64_t))(v167 + 16);
  v82 = v151;
  v81((char *)v151, v64, v62);
  v83 = sub_2448EA5E4();
  v84 = sub_2448EB394();
  v85 = os_log_type_enabled(v83, v84);
  v159 = (uint64_t)v81;
  if (v85)
  {
    v86 = swift_slowAlloc();
    result = (const char *)swift_slowAlloc();
    aBlock = result;
    *(_DWORD *)v86 = 134218242;
    if (__OFSUB__(v63, 1))
      goto LABEL_29;
    v88 = result;
    v158 = v63 - 1;
    v177 = v63 - 1;
    sub_2448EB598();
    *(_WORD *)(v86 + 12) = 2082;
    v157 = (void (*)(_QWORD, _QWORD))(v86 + 14);
    sub_2448EBBD4();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738C210);
    v89 = swift_allocObject();
    *(_OWORD *)(v89 + 16) = xmmword_2448ECFE0;
    *(_QWORD *)(v89 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v89 + 64) = sub_24480514C();
    *(_QWORD *)(v89 + 32) = 0x63656A624F796E41;
    *(_QWORD *)(v89 + 40) = 0xE900000000000074;
    v90 = sub_2448EAA58();
    v91 = MEMORY[0x24BEE17F0];
    *(_QWORD *)(v89 + 96) = MEMORY[0x24BEE1768];
    *(_QWORD *)(v89 + 104) = v91;
    *(_QWORD *)(v89 + 72) = v90;
    v92 = sub_2448EAAB8();
    v93 = v54;
    v95 = v94;
    swift_unknownObjectRelease();
    v177 = sub_2447D6798(v92, v95, (uint64_t *)&aBlock);
    sub_2448EB598();
    v54 = v93;
    swift_bridgeObjectRelease();
    v55 = v167;
    v157 = *(void (**)(_QWORD, _QWORD))(v167 + 8);
    v157(v82, v54);
    _os_log_impl(&dword_2447B9000, v83, v84, "Decrementing ref count to %ld for %{public}s", (uint8_t *)v86, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24951AD84](v88, -1, -1);
    MEMORY[0x24951AD84](v86, -1, -1);

    v96 = 0;
  }
  else
  {

    v157 = *(void (**)(_QWORD, _QWORD))(v55 + 8);
    v157(v82, v62);
    v158 = v63 - 1;
    v96 = __OFSUB__(v63, 1);
  }
  Ref.init(_:)(v168, &v177);
  v97 = v177;
  v98 = TupleTypeMetadata3;
  v99 = *(int *)(TupleTypeMetadata3 + 48);
  v100 = *(int *)(TupleTypeMetadata3 + 64);
  v101 = v154;
  v102 = v162;
  result = (const char *)((uint64_t (*)(char *, char *, uint64_t))v159)(v154, v162, v54);
  if (!v96)
  {
    *(_QWORD *)&v101[v99] = v158;
    *(_QWORD *)&v101[v100] = 0;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v140 + 56))(v101, 0, 1, v98);
    v176 = v97;
    swift_beginAccess();
    sub_2448EA8B4();
    swift_unknownObjectRetain();
    sub_2448EA8F0();
    swift_endAccess();
    v157(v102, v54);
    v53 = 2;
    goto LABEL_24;
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t AssociatedObjectCache.purgeAssociatedObject(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t TupleTypeMetadata3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v43 = a2;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 88);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738F2D8);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v7 = sub_2448EB508();
  v40 = *(_QWORD *)(v7 - 8);
  v41 = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v33 - v11;
  v35 = swift_getTupleTypeMetadata3();
  MEMORY[0x24BDAC7A8](v35);
  v14 = (char *)&v33 - v13;
  v15 = *(_QWORD *)(v4 + 80);
  Ref.init(_:)(a1, &v45);
  v16 = v45;
  v39 = v2 + 2;
  swift_beginAccess();
  v17 = v2[2];
  v44 = v16;
  v38 = v15;
  v20 = type metadata accessor for Ref(0, v15, v18, v19);
  v42 = a1;
  swift_unknownObjectRetain();
  v36 = MEMORY[0x24951AC70](&protocol conformance descriptor for Ref<A>, v20);
  MEMORY[0x2495190C8](&v44, v17, v20, TupleTypeMetadata3);
  swift_unknownObjectRelease();
  swift_endAccess();
  v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata3 - 8) + 48);
  if (v37(v12, 1, TupleTypeMetadata3) == 1)
  {
    v22 = v40;
    v21 = v41;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v41);
  }
  else
  {
    v23 = *(_QWORD *)&v12[*(int *)(TupleTypeMetadata3 + 48)];
    v33 = *(_QWORD *)&v12[*(int *)(TupleTypeMetadata3 + 64)];
    v34 = v23;
    v24 = v10;
    v25 = v35;
    v26 = *(int *)(v35 + 48);
    v27 = *(int *)(v35 + 64);
    v28 = *(_QWORD *)(v5 - 8);
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v14, v12, v5);
    *(_QWORD *)&v14[v26] = v34;
    v10 = v24;
    *(_QWORD *)&v14[v27] = v33;
    v29 = *(void **)&v14[*(int *)(v25 + 64)];
    (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v5);
    objc_msgSend(v29, sel_invalidate);

    v22 = v40;
    v21 = v41;
  }
  Ref.init(_:)(v42, &v45);
  v44 = v45;
  swift_beginAccess();
  sub_2448EA8B4();
  swift_unknownObjectRetain();
  sub_2448EA818();
  swift_endAccess();
  swift_unknownObjectRelease();
  if (v37(v10, 1, TupleTypeMetadata3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v21);
    v30 = *(_QWORD *)(v5 - 8);
    v31 = 1;
  }
  else
  {

    v30 = *(_QWORD *)(v5 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v43, v10, v5);
    v31 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v43, v31, 1, v5);
}

id sub_244876604(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD), uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id result;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(_QWORD);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47[3];

  v45 = a5;
  v14 = sub_2448EB508();
  v43 = *(_QWORD *)(v14 - 8);
  v44 = v14;
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v37 - v16;
  v18 = *(_QWORD *)(a9 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(a1, sel_isValid);
  if ((_DWORD)result)
  {
    v42 = a4 + 16;
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a3, a9);
    v22 = sub_2448EA5E4();
    v23 = sub_2448EB394();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v39 = swift_slowAlloc();
      v47[0] = v39;
      v40 = a7;
      *(_DWORD *)v24 = 136446210;
      v37[1] = v24 + 4;
      v38 = v24;
      sub_2448EBBD4();
      v41 = a6;
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738C210);
      v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_2448ECFE0;
      *(_QWORD *)(v25 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v25 + 64) = sub_24480514C();
      *(_QWORD *)(v25 + 32) = 0x63656A624F796E41;
      *(_QWORD *)(v25 + 40) = 0xE900000000000074;
      v26 = sub_2448EAA58();
      v27 = MEMORY[0x24BEE17F0];
      *(_QWORD *)(v25 + 96) = MEMORY[0x24BEE1768];
      *(_QWORD *)(v25 + 104) = v27;
      *(_QWORD *)(v25 + 72) = v26;
      v28 = sub_2448EAAB8();
      v30 = v29;
      a6 = v41;
      swift_unknownObjectRelease();
      v46 = sub_2447D6798(v28, v30, v47);
      sub_2448EB598();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, a9);
      v31 = v23;
      v32 = v38;
      _os_log_impl(&dword_2447B9000, v22, v31, "Purging pending associated object %{public}s", v38, 0xCu);
      v33 = v39;
      swift_arrayDestroy();
      MEMORY[0x24951AD84](v33, -1, -1);
      MEMORY[0x24951AD84](v32, -1, -1);

    }
    else
    {

      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, a9);
    }
    v35 = v44;
    v34 = v45;
    v36 = v43;
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      AssociatedObjectCache.purgeAssociatedObject(to:)(v34, (uint64_t)v17);
      swift_release();
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v17, 1, 1, a9);
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v17, v35);
    return (id)a6(v34);
  }
  return result;
}

Swift::Void __swiftcall AssociatedObjectCache.purgeAllAssociatedObjects()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t TupleTypeMetadata3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  int64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  _QWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  _QWORD *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t TupleTypeMetadata2;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 88);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738F2D8);
  v58 = v2;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v64 = *(_QWORD *)(TupleTypeMetadata3 - 8);
  v4 = MEMORY[0x24BDAC7A8](TupleTypeMetadata3);
  v57 = (char *)v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v56 = (char *)v49 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v55 = (char *)v49 - v8;
  v50 = type metadata accessor for Ref(255, *(_QWORD *)(v1 + 80), v9, v10);
  v65 = TupleTypeMetadata3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v11 = sub_2448EB508();
  v59 = *(_QWORD *)(v11 - 8);
  v60 = v11;
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (_QWORD *)((char *)v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v12);
  v61 = (char *)v49 - v15;
  v49[1] = v0 + 2;
  swift_beginAccess();
  v16 = v0[2];
  v17 = *(_QWORD *)(v16 + 64);
  v51 = v16 + 64;
  v18 = 1 << *(_BYTE *)(v16 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v52 = (unint64_t)(v18 + 63) >> 6;
  v49[0] = v52 - 1;
  v53 = v16;
  swift_bridgeObjectRetain();
  v63 = 0;
  v54 = v14;
  v21 = v65;
  v22 = v56;
  if (!v20)
    goto LABEL_6;
LABEL_4:
  v23 = __clz(__rbit64(v20));
  v24 = (v20 - 1) & v20;
  v25 = TupleTypeMetadata2;
  v26 = v23 | (v63 << 6);
  v27 = v61;
LABEL_5:
  v28 = *(_QWORD *)(v53 + 56);
  *v14 = *(_QWORD *)(*(_QWORD *)(v53 + 48) + 8 * v26);
  (*(void (**)(char *, unint64_t, uint64_t))(v64 + 16))((char *)v14 + *(int *)(v25 + 48), v28 + *(_QWORD *)(v64 + 72) * v26, v65);
  v29 = *(_QWORD *)(v25 - 8);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v14, 0, 1, v25);
  swift_unknownObjectRetain();
  while (1)
  {
    (*(void (**)(char *, _QWORD *, uint64_t))(v59 + 32))(v27, v14, v60);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v25) == 1)
    {
      swift_release();
      swift_beginAccess();
      MEMORY[0x24951AC70](&protocol conformance descriptor for Ref<A>, v50);
      sub_2448EA8B4();
      sub_2448EA8A8();
      swift_endAccess();
      return;
    }
    swift_unknownObjectRelease();
    v34 = &v27[*(int *)(v25 + 48)];
    v35 = *(int *)(v21 + 48);
    v36 = *(_QWORD *)&v34[v35];
    v37 = *(int *)(v21 + 64);
    v38 = *(void **)&v34[v37];
    v66 = v24;
    v39 = v58;
    v40 = *(_QWORD *)(v58 - 8);
    v41 = *(void (**)(char *))(v40 + 32);
    v41(v22);
    *(_QWORD *)&v22[v35] = v36;
    *(_QWORD *)&v22[v37] = v38;
    v42 = *(int *)(v21 + 48);
    v43 = *(int *)(v21 + 64);
    v44 = v55;
    ((void (*)(char *, char *, uint64_t))v41)(v55, v22, v39);
    *(_QWORD *)&v44[v42] = v36;
    *(_QWORD *)&v44[v43] = v38;
    v45 = *(int *)(v21 + 48);
    v46 = *(int *)(v21 + 64);
    v47 = v57;
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v57, v44, v39);
    *(_QWORD *)&v47[v45] = v36;
    *(_QWORD *)&v47[v46] = v38;
    v14 = v54;
    objc_msgSend(v38, sel_invalidate);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v44, v21);
    v48 = v39;
    v20 = v66;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v47, v48);
    if (v20)
      goto LABEL_4;
LABEL_6:
    v25 = TupleTypeMetadata2;
    v30 = v63 + 1;
    v27 = v61;
    if (__OFADD__(v63, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v30 < v52)
    {
      v31 = *(_QWORD *)(v51 + 8 * v30);
      if (v31)
        goto LABEL_9;
      v32 = v63 + 2;
      ++v63;
      if (v30 + 1 < v52)
      {
        v31 = *(_QWORD *)(v51 + 8 * v32);
        if (v31)
        {
          ++v30;
LABEL_9:
          v24 = (v31 - 1) & v31;
          v26 = __clz(__rbit64(v31)) + (v30 << 6);
          v63 = v30;
          goto LABEL_5;
        }
        v33 = v30 + 2;
        v63 = v30 + 1;
        if (v30 + 2 < v52)
          break;
      }
    }
LABEL_21:
    v29 = *(_QWORD *)(TupleTypeMetadata2 - 8);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v29 + 56))(v14, 1, 1, TupleTypeMetadata2);
    v24 = 0;
  }
  v31 = *(_QWORD *)(v51 + 8 * v33);
  if (v31)
  {
    v30 += 2;
    goto LABEL_9;
  }
  while (1)
  {
    v30 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v30 >= v52)
    {
      v63 = v49[0];
      goto LABEL_21;
    }
    v31 = *(_QWORD *)(v51 + 8 * v30);
    ++v33;
    if (v31)
      goto LABEL_9;
  }
LABEL_27:
  __break(1u);
}

uint64_t AssociatedObjectCache.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + qword_25738F2E0;
  v2 = sub_2448EA5FC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t AssociatedObjectCache.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + qword_25738F2E0;
  v2 = sub_2448EA5FC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

BOOL static AssociatedObjectCache.DecrementResult.Discriminant.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t AssociatedObjectCache.DecrementResult.Discriminant.hash(into:)()
{
  return sub_2448EBD0C();
}

uint64_t AssociatedObjectCache.DecrementResult.Discriminant.hashValue.getter()
{
  sub_2448EBD00();
  sub_2448EBD0C();
  return sub_2448EBD3C();
}

BOOL sub_244876F64(char *a1, char *a2)
{
  return static AssociatedObjectCache.DecrementResult.Discriminant.== infix(_:_:)(*a1, *a2);
}

uint64_t sub_244876F70()
{
  return AssociatedObjectCache.DecrementResult.Discriminant.hashValue.getter();
}

uint64_t sub_244876F78()
{
  return AssociatedObjectCache.DecrementResult.Discriminant.hash(into:)();
}

uint64_t sub_244876F80()
{
  sub_2448EBD00();
  AssociatedObjectCache.DecrementResult.Discriminant.hash(into:)();
  return sub_2448EBD3C();
}

uint64_t AssociatedObjectCache.DecrementResult.discriminant.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  result = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 48))(v4, 2);
  if ((_DWORD)result)
  {
    if ((_DWORD)result != 1)
      return 2;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
    return 0;
  }
  return result;
}

void *sub_244877064(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  uint64_t v4;

  if (__src)
    v4 = a2 - (_QWORD)__src;
  else
    v4 = 0;
  if (!__dst)
  {
    if (v4 <= 0)
      return __src;
LABEL_10:
    __src = (void *)sub_2448EBA48();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v4)
    goto LABEL_10;
  if (__src)
    return memmove(__dst, __src, a2 - (_QWORD)__src);
  return __src;
}

uint64_t sub_2448770F8@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_244877120(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v5;
  uint64_t result;

  a4();
  v5 = *a1 + 8;
  result = sub_2448EB598();
  *a1 = v5;
  return result;
}

unint64_t sub_244877170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_2448EA914();
  return sub_2448771C4(a1, v6, a2, a3);
}

uint64_t type metadata accessor for AssociatedObjectCache.DecrementResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AssociatedObjectCache.DecrementResult);
}

unint64_t sub_2448771C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, unint64_t, uint64_t);
  char v16;
  _QWORD v18[2];

  v5 = v4;
  v18[0] = a1;
  v18[1] = a4;
  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = -1 << *(_BYTE *)(v5 + 32);
  v12 = v11 & ~v10;
  if (((*(_QWORD *)(v5 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v13 = ~v10;
    v14 = *(_QWORD *)(v7 + 72);
    v15 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v15(v9, *(_QWORD *)(v5 + 48) + v14 * v12, a3);
      v16 = sub_2448EAA64();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a3);
      if ((v16 & 1) != 0)
        break;
      v12 = (v12 + 1) & v13;
    }
    while (((*(_QWORD *)(v5 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
  }
  return v12;
}

uint64_t sub_2448772DC()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_244877300()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = sub_2448EA5FC();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v1 - 8);
  v6 = (v4 + *(_QWORD *)(v3 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, v2);
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v6, v1);
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

id sub_2448773E0(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(sub_2448EA5FC() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v4 - 8);
  v8 = (v6 + *(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_244876604(a1, v1 + v6, v1 + v8, *(_QWORD *)(v1 + v9), *(_QWORD *)(v1 + ((v9 + 15) & 0xFFFFFFFFFFFFFFF8)), *(uint64_t (**)(_QWORD))(v1 + ((((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8), v3, v4);
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

void sub_2448774A0()
{
  JUMPOUT(0x24951AC70);
}

uint64_t sub_2448774B0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2448EA5FC();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for AssociatedObjectCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AssociatedObjectCache);
}

uint64_t method lookup function for AssociatedObjectCache()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AssociatedObjectCache.__allocating_init(logAspect:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_24487754C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_2448775A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _BOOL8 v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _BOOL8 v20;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = v8;
  if (v7 <= 1)
  {
    if (v8 <= 3)
    {
      v11 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
      if (v11 > 0xFFFE)
      {
        v10 = 4;
      }
      else
      {
        v12 = v11 != 0;
        v13 = v11 >= 0xFF;
        v10 = 2;
        if (!v13)
          v10 = v12;
      }
    }
    else
    {
      v10 = 1;
    }
    v9 = v10 + v8;
  }
  v14 = *(_DWORD *)(v6 + 80);
  if (v14 <= 7 && v9 <= 0x18 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0)
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 2, *(_QWORD *)(a3 + 24)))
    {
      if (v7 <= 1)
      {
        if (v8 <= 3)
        {
          v19 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
          if (v19 > 0xFFFE)
          {
            v18 = 4;
          }
          else
          {
            v20 = v19 != 0;
            v13 = v19 >= 0xFF;
            v18 = 2;
            if (!v13)
              v18 = v20;
          }
        }
        else
        {
          v18 = 1;
        }
        v8 += v18;
      }
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
    }
  }
  else
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain();
  }
  return a1;
}

uint64_t sub_24487773C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 2, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *sub_244877798(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL8 v11;
  BOOL v12;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
  {
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          v9 = 4;
        }
        else
        {
          v11 = v10 != 0;
          v12 = v10 >= 0xFF;
          v9 = 2;
          if (!v12)
            v9 = v11;
        }
      }
      else
      {
        v9 = 1;
      }
      v8 += v9;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *sub_244877888(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  unsigned int v10;
  size_t v11;
  uint64_t v12;
  unsigned int v13;
  _BOOL8 v14;
  BOOL v15;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 2, v5);
  v9 = v7(a2, 2, v5);
  if (v8)
  {
    if (v9)
    {
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          v12 = 1;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }
LABEL_9:
        v13 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v13 > 0xFFFE)
        {
          v12 = 4;
        }
        else
        {
          v14 = v13 != 0;
          v15 = v13 >= 0xFF;
          v12 = 2;
          if (!v15)
            v12 = v14;
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  else
  {
    if (v9)
    {
      (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
          goto LABEL_5;
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v11);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
  }
  return a1;
}

void *sub_2448779D8(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL8 v11;
  BOOL v12;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
  {
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          v9 = 4;
        }
        else
        {
          v11 = v10 != 0;
          v12 = v10 >= 0xFF;
          v9 = 2;
          if (!v12)
            v9 = v11;
        }
      }
      else
      {
        v9 = 1;
      }
      v8 += v9;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *sub_244877AC8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  unsigned int v10;
  size_t v11;
  uint64_t v12;
  unsigned int v13;
  _BOOL8 v14;
  BOOL v15;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 2, v5);
  v9 = v7(a2, 2, v5);
  if (v8)
  {
    if (v9)
    {
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          v12 = 1;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }
LABEL_9:
        v13 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v13 > 0xFFFE)
        {
          v12 = 4;
        }
        else
        {
          v14 = v13 != 0;
          v15 = v13 >= 0xFF;
          v12 = 2;
          if (!v15)
            v12 = v14;
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  else
  {
    if (v9)
    {
      (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
          goto LABEL_5;
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v11);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
  }
  return a1;
}

uint64_t sub_244877C18(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _BOOL8 v10;
  BOOL v11;
  int v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 64);
  if (v5 <= 1)
  {
    v6 = 0;
    if (v7 <= 3)
    {
      v9 = (~(-1 << (8 * v7)) - v5 + 2) >> (8 * v7);
      if (v9 > 0xFFFE)
      {
        v8 = 4;
      }
      else
      {
        v10 = v9 != 0;
        v11 = v9 >= 0xFF;
        v8 = 2;
        if (!v11)
          v8 = v10;
      }
    }
    else
    {
      v8 = 1;
    }
    v7 += v8;
  }
  if (!a2)
    return 0;
  v12 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_29;
  v13 = 8 * v7;
  if (v7 <= 3)
  {
    v15 = ((v12 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v7);
      if (!v14)
        goto LABEL_29;
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_29;
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_29:
      if (v6)
      {
        v18 = (*(uint64_t (**)(void))(v4 + 48))();
        if (v18 >= 3)
          return v18 - 2;
        else
          return 0;
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_29;
LABEL_20:
  v16 = (v14 - 1) << v13;
  if (v7 > 3)
    v16 = 0;
  if ((_DWORD)v7)
  {
    if (v7 <= 3)
      v17 = v7;
    else
      v17 = 4;
    __asm { BR              X12 }
  }
  return v6 + v16 + 1;
}

void sub_244877DAC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  uint64_t v10;
  unsigned int v11;
  _BOOL8 v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = v7 - 2;
  v9 = *(_QWORD *)(v6 + 64);
  if (v7 <= 1)
  {
    v8 = 0;
    if (v9 <= 3)
    {
      v11 = (~(-1 << (8 * v9)) - v7 + 2) >> (8 * v9);
      if (v11 > 0xFFFE)
      {
        v10 = 4;
      }
      else
      {
        v12 = v11 != 0;
        v13 = v11 >= 0xFF;
        v10 = 2;
        if (!v13)
          v10 = v12;
      }
    }
    else
    {
      v10 = 1;
    }
    v9 += v10;
  }
  v13 = a3 >= v8;
  v14 = a3 - v8;
  if (v14 != 0 && v13)
  {
    if (v9 <= 3)
    {
      v17 = ((v14 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v17))
      {
        v15 = 4u;
      }
      else if (v17 >= 0x100)
      {
        v15 = 2;
      }
      else
      {
        v15 = v17 > 1;
      }
    }
    else
    {
      v15 = 1u;
    }
  }
  else
  {
    v15 = 0;
  }
  if (v8 < a2)
  {
    v16 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v18 = v16 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v18;
          *((_BYTE *)a1 + 2) = BYTE2(v18);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v18;
        }
        else
        {
          *(_BYTE *)a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_244877FC8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 48))(a1, 2);
}

uint64_t sub_244877FDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 56))(a1, a2, 2);
}

uint64_t sub_244877FF4(uint64_t result)
{
  if (*(_QWORD *)(result + 8) >= 0xFFFFFFFFuLL)
    return swift_release();
  return result;
}

uint64_t sub_244878010(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    swift_retain();
  }
  return a1;
}

_QWORD *sub_244878068(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      v6 = a2[2];
      a1[1] = a2[1];
      a1[2] = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    v7 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v7;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  *a1 = *a2;
  v5 = a2[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_24487810C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  swift_release();
  return a1;
}

uint64_t sub_244878184(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t sub_2448781D4(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_24487822C(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_244878244(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    result[1] = 0;
    result[2] = 0;
    *result = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for AssociatedObjectCache.PurgeDelay(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AssociatedObjectCache.PurgeDelay);
}

uint64_t sub_244878274(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2448782C0 + 4 * byte_2448F47B3[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2448782F4 + 4 * byte_2448F47AE[v4]))();
}

uint64_t sub_2448782F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2448782FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x244878304);
  return result;
}

uint64_t sub_244878310(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x244878318);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_24487831C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244878324(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for AssociatedObjectCache.DecrementResult.Discriminant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AssociatedObjectCache.DecrementResult.Discriminant);
}

uint64_t CommandLineTool.description.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommandLineTool.commands.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CommandLineTool.usageExamples.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CommandLineTool.printer.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2447CE01C(v1 + 32, a1);
}

uint64_t CommandLineTool.init(description:commands:usageExamples:printer:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X4>, _QWORD *a6@<X8>)
{
  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  return sub_2447F3530(a5, (uint64_t)(a6 + 4));
}

Swift::Void __swiftcall CommandLineTool.run()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = sub_2448EB73C();
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
  {
    __break(1u);

    v3 = v0[7];
    v4 = v0[8];
    __swift_project_boxed_opaque_existential_1(v0 + 4, v3);
    sub_2448EB91C();
    (*(void (**)(_QWORD, unint64_t, uint64_t, uint64_t, uint64_t))(v4 + 24))(0, 0xE000000000000000, 1, v3, v4);
    swift_bridgeObjectRelease();
    exit(1);
  }
  sub_244878550(v1, v1 + 32, 1, (2 * v2) | 1);
  swift_bridgeObjectRelease();
}

uint64_t sub_244878550(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;

  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if ((uint64_t)((a4 >> 1) - a3) <= 0)
  {
    v18 = v4[7];
    v19 = v4[8];
    __swift_project_boxed_opaque_existential_1(v4 + 4, v18);
    v20 = CommandLineTool.usage.getter();
    AnyCommandLinePrinter.print(_:_:)(v20, v21, MEMORY[0x24BEE4AF8], v18, v19);
    swift_bridgeObjectRelease();
    sub_24487990C();
    swift_allocError();
    return swift_willThrow();
  }
  if ((uint64_t)(a4 >> 1) <= a3)
    goto LABEL_39;
  v9 = (uint64_t *)(a2 + 16 * a3);
  v11 = *v9;
  v10 = v9[1];
  v12 = v4[2];
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v36 = a4 >> 1;
    v37 = a2;
    v39 = a4;
    v40 = v4;
    v38 = a3 + 1;
    swift_bridgeObjectRetain();
    v41 = a1;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v14 = (_QWORD *)(v12 + 40);
    while (1)
    {
      v4 = (_QWORD *)*(v14 - 1);
      v7 = *v14;
      if ((*(uint64_t (**)(_QWORD *, _QWORD))(*v14 + 8))(v4, *v14) == v11 && v15 == v10)
        break;
      v17 = sub_2448EBBEC();
      swift_bridgeObjectRelease();
      if ((v17 & 1) != 0)
        goto LABEL_22;
      v14 += 2;
      if (!--v13)
      {
        swift_bridgeObjectRelease();
        v4 = v40;
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRelease();
LABEL_22:
    swift_bridgeObjectRelease();
    v5 = v41;
    v6 = v38;
    v23 = v39;
    if ((v39 & 1) == 0)
    {
      swift_unknownObjectRetain();
LABEL_24:
      v24 = sub_2447CE158(v5, v37, v6, v23);
LABEL_31:
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, uint64_t))(v7 + 40))(v24, v40 + 4, v4, v7);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      return swift_release();
    }
    sub_2448EBC10();
    swift_unknownObjectRetain_n();
    v25 = swift_dynamicCastClass();
    if (!v25)
    {
      swift_unknownObjectRelease();
      v25 = MEMORY[0x24BEE4AF8];
    }
    v26 = *(_QWORD *)(v25 + 16);
    swift_release();
    if (!__OFSUB__(v36, v38))
    {
      if (v26 == v36 - v38)
      {
        v24 = swift_dynamicCastClass();
        if (!v24)
        {
          swift_unknownObjectRelease();
          v24 = MEMORY[0x24BEE4AF8];
        }
        goto LABEL_31;
      }
      goto LABEL_41;
    }
LABEL_40:
    __break(1u);
LABEL_41:
    swift_unknownObjectRelease();
    v23 = v39;
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
LABEL_15:
  if (v11 == 26669 && v10 == 0xE200000000000000
    || (sub_2448EBBEC() & 1) != 0
    || v11 == 0x706C65682D2DLL && v10 == 0xE600000000000000
    || (sub_2448EBBEC() & 1) != 0
    || v11 == 0x706C65682DLL && v10 == 0xE500000000000000
    || (sub_2448EBBEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v27 = v4[7];
    v28 = v4[8];
    __swift_project_boxed_opaque_existential_1(v4 + 4, v27);
    v29 = CommandLineTool.usage.getter();
    AnyCommandLinePrinter.print(_:_:)(v29, v30, MEMORY[0x24BEE4AF8], v27, v28);
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v31 = v4[7];
    v32 = v4[8];
    __swift_project_boxed_opaque_existential_1(v4 + 4, v31);
    v33 = CommandLineTool.usage.getter();
    AnyCommandLinePrinter.print(_:_:)(v33, v34, MEMORY[0x24BEE4AF8], v31, v32);
    swift_bridgeObjectRelease();
    sub_2448798C8();
    swift_allocError();
    *v35 = v11;
    v35[1] = v10;
    swift_willThrow();
    return swift_unknownObjectRelease();
  }
}

uint64_t CommandLineTool.run<A>(arguments:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, _QWORD);
  uint64_t *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char v59[32];
  _QWORD *v60;

  v57 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v56 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v53 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v58 = (char *)&v51 - v11;
  v12 = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v51 - v17;
  if (sub_2448EB1F0() < 1)
  {
    v31 = v60[7];
    v32 = v60[8];
    __swift_project_boxed_opaque_existential_1(v60 + 4, v31);
    v33 = CommandLineTool.usage.getter();
    AnyCommandLinePrinter.print(_:_:)(v33, v34, MEMORY[0x24BEE4AF8], v31, v32);
    swift_bridgeObjectRelease();
    sub_24487990C();
    swift_allocError();
    return swift_willThrow();
  }
  v54 = v8;
  v51 = AssociatedTypeWitness;
  sub_2448EB1E4();
  v19 = (void (*)(char *, _QWORD))sub_2448EB2E0();
  v21 = *v20;
  v52 = v20[1];
  swift_bridgeObjectRetain();
  v19(v59, 0);
  v22 = *(void (**)(char *, uint64_t))(v13 + 8);
  v22(v18, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v56, a1, a2);
  sub_2448EB1E4();
  sub_2448EB1FC();
  v22(v16, v12);
  v57 = v6;
  sub_2448EB280();
  v23 = v52;
  v22(v18, v12);
  v24 = v60;
  v25 = *(_QWORD *)(v60[2] + 16);
  if (v25)
  {
    v56 = (char *)swift_bridgeObjectRetain();
    v26 = v56 + 40;
    while (1)
    {
      v27 = *v26;
      if ((*(uint64_t (**)(_QWORD, _QWORD))(*v26 + 8))(*(v26 - 1), *v26) == v21 && v28 == v23)
        break;
      v30 = sub_2448EBBEC();
      swift_bridgeObjectRelease();
      if ((v30 & 1) != 0)
        goto LABEL_18;
      v26 += 2;
      if (!--v25)
      {
        swift_bridgeObjectRelease();
        v24 = v60;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
LABEL_18:
    swift_bridgeObjectRelease();
    v36 = v51;
    v37 = v58;
    v38 = v54;
    (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v53, v58, v51);
    swift_getAssociatedConformanceWitness();
    sub_2448EAEFC();
    v39 = v55;
    (*(void (**)(void))(v27 + 40))();
    if (v39)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v40 = *(uint64_t (**)(char *, uint64_t))(v38 + 8);
      return v40(v37, v36);
    }
    swift_bridgeObjectRelease();
LABEL_25:
    swift_bridgeObjectRelease();
    v40 = *(uint64_t (**)(char *, uint64_t))(v54 + 8);
    return v40(v37, v36);
  }
LABEL_11:
  if (v21 == 26669 && v23 == 0xE200000000000000
    || (sub_2448EBBEC() & 1) != 0
    || v21 == 0x706C65682D2DLL && v23 == 0xE600000000000000
    || (sub_2448EBBEC() & 1) != 0
    || v21 == 0x706C65682DLL && v23 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    v36 = v51;
    v37 = v58;
LABEL_24:
    v41 = v24[7];
    v42 = v24[8];
    __swift_project_boxed_opaque_existential_1(v24 + 4, v41);
    v43 = CommandLineTool.usage.getter();
    AnyCommandLinePrinter.print(_:_:)(v43, v44, MEMORY[0x24BEE4AF8], v41, v42);
    goto LABEL_25;
  }
  v45 = sub_2448EBBEC();
  v37 = v58;
  if ((v45 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v36 = v51;
    goto LABEL_24;
  }
  v46 = v24[7];
  v47 = v24[8];
  __swift_project_boxed_opaque_existential_1(v24 + 4, v46);
  v48 = CommandLineTool.usage.getter();
  AnyCommandLinePrinter.print(_:_:)(v48, v49, MEMORY[0x24BEE4AF8], v46, v47);
  swift_bridgeObjectRelease();
  sub_2448798C8();
  swift_allocError();
  *v50 = v21;
  v50[1] = v23;
  swift_willThrow();
  return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v37, v51);
}

Swift::Void __swiftcall CommandLineTool.printUsage()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[7];
  v2 = v0[8];
  __swift_project_boxed_opaque_existential_1(v0 + 4, v1);
  v3 = CommandLineTool.usage.getter();
  AnyCommandLinePrinter.print(_:_:)(v3, v4, MEMORY[0x24BEE4AF8], v1, v2);
  swift_bridgeObjectRelease();
}

uint64_t CommandLineTool.usage.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t countAndFlagsBits;
  void *object;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __int128 v34;
  uint64_t v35;
  Swift::String v36;
  uint64_t v37;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2448ECF10;
  v3 = *(_QWORD *)(v0 + 24);
  if (*(_QWORD *)(v3 + 16))
  {
    v4 = *(_QWORD *)(v3 + 32);
    v5 = swift_bridgeObjectRetain();
  }
  else
  {
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  *(_QWORD *)(inited + 32) = v4;
  *(_QWORD *)(inited + 40) = v5;
  v37 = inited;
  v6 = *(_QWORD *)(v3 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  if (v6 < 2)
  {
    v10 = 1;
  }
  else
  {
    v8 = (2 * v6) | 1;
    v9 = swift_bridgeObjectRetain();
    sub_2447D10CC(v9, v3 + 32, 1, v8);
    swift_bridgeObjectRelease();
    inited = v37;
    v10 = *(_QWORD *)(v37 + 16);
    if (!v10)
    {
      v11 = MEMORY[0x24BEE4AF8];
      goto LABEL_13;
    }
  }
  swift_bridgeObjectRetain();
  sub_2447CEE18(0, v10, 0);
  v11 = v7;
  v12 = inited + 40;
  do
  {
    v13 = objc_allocWithZone(MEMORY[0x24BDD1760]);
    swift_bridgeObjectRetain();
    v14 = objc_msgSend(v13, sel_init);
    v15 = objc_msgSend(v14, sel_processName);

    v16 = sub_2448EAA94();
    v18 = v17;

    v36._countAndFlagsBits = v16;
    v36._object = v18;
    swift_bridgeObjectRetain();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v19 = v18;
    *(_QWORD *)&v34 = v11;
    v21 = *(_QWORD *)(v11 + 16);
    v20 = *(_QWORD *)(v11 + 24);
    if (v21 >= v20 >> 1)
    {
      sub_2447CEE18(v20 > 1, v21 + 1, 1);
      v11 = v34;
    }
    v12 += 16;
    *(_QWORD *)(v11 + 16) = v21 + 1;
    v22 = v11 + 16 * v21;
    *(_QWORD *)(v22 + 32) = v16;
    *(_QWORD *)(v22 + 40) = v19;
    --v10;
  }
  while (v10);
  swift_bridgeObjectRelease();
  v7 = MEMORY[0x24BEE4AF8];
LABEL_13:
  v36._countAndFlagsBits = v11;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A630);
  sub_2447D48B0();
  sub_2448EA9A4();
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 0x20202020202020;
  v23._object = (void *)0xE700000000000000;
  String.prefixingEachLine(with:startingOnLine:)(v23, 1uLL);
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(v1 + 16);
  v25 = *(_QWORD *)(v24 + 16);
  if (v25)
  {
    v35 = v7;
    swift_bridgeObjectRetain();
    sub_2447CEE18(0, v25, 0);
    v26 = 0;
    v27 = v7;
    do
    {
      v34 = *(_OWORD *)(v24 + 16 * v26 + 32);
      sub_244879440(&v34, &v36);
      countAndFlagsBits = v36._countAndFlagsBits;
      object = v36._object;
      v35 = v27;
      v31 = *(_QWORD *)(v27 + 16);
      v30 = *(_QWORD *)(v27 + 24);
      if (v31 >= v30 >> 1)
      {
        sub_2447CEE18(v30 > 1, v31 + 1, 1);
        v27 = v35;
      }
      ++v26;
      *(_QWORD *)(v27 + 16) = v31 + 1;
      v32 = v27 + 16 * v31;
      *(_QWORD *)(v32 + 32) = countAndFlagsBits;
      *(_QWORD *)(v32 + 40) = object;
    }
    while (v25 != v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v27 = MEMORY[0x24BEE4AF8];
  }
  v36._countAndFlagsBits = v27;
  sub_2448EA9A4();
  swift_bridgeObjectRelease();
  v36._countAndFlagsBits = 0;
  v36._object = (void *)0xE000000000000000;
  sub_2448EB79C();
  swift_bridgeObjectRelease();
  v36._countAndFlagsBits = 0x203A6567617355;
  v36._object = (void *)0xE700000000000000;
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  return v36._countAndFlagsBits;
}

uint64_t sub_244879440@<X0>(_QWORD *a1@<X0>, Swift::String *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[2];
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v3 = *a1;
  v31 = a1[1];
  v4 = (*(uint64_t (**)(_QWORD))(v31 + 32))(*a1);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v30 = v3;
    v37 = MEMORY[0x24BEE4AF8];
    sub_2447CEE18(0, v5, 0);
    v6 = v37;
    v7 = 32;
    v32 = v4;
    do
    {
      v8 = *(_OWORD *)(v4 + v7);
      v9 = *(_OWORD *)(v4 + v7 + 16);
      v10 = *(_OWORD *)(v4 + v7 + 32);
      v36 = *(_QWORD *)(v4 + v7 + 48);
      v34[1] = v9;
      v35 = v10;
      v34[0] = v8;
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A058);
      v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_2448ECF10;
      sub_2447D4810((uint64_t)v34);
      v12 = sub_2448EAB78();
      v13 = 11565;
      if (v12 == 1)
      {
        v13 = 45;
        v14 = 0xE100000000000000;
      }
      else
      {
        v14 = 0xE200000000000000;
      }
      v33 = v13;
      swift_bridgeObjectRetain();
      sub_2448EABC0();
      swift_bridgeObjectRelease();
      if ((_QWORD)v35)
      {
        sub_2448EA944();
        sub_2448EABC0();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRetain();
      sub_2448EABC0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v11 + 32) = v33;
      *(_QWORD *)(v11 + 40) = v14;
      sub_2447D4810((uint64_t)v34);
      v15 = swift_bridgeObjectRetain();
      v16 = sub_2447D4658(v15, (uint64_t)v34);
      sub_2447D4860((uint64_t)v34);
      swift_bridgeObjectRelease();
      sub_2447CC13C(v16);
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A630);
      sub_2447D48B0();
      v17 = sub_2448EA9A4();
      v19 = v18;
      swift_bridgeObjectRelease();
      sub_2447D4860((uint64_t)v34);
      sub_2448EABC0();
      v20._countAndFlagsBits = 538976288;
      v20._object = (void *)0xE400000000000000;
      String.prefixingEachLine(with:startingOnLine:)(v20, 0);
      sub_2448EABC0();
      swift_bridgeObjectRelease();
      v37 = v6;
      v22 = *(_QWORD *)(v6 + 16);
      v21 = *(_QWORD *)(v6 + 24);
      if (v22 >= v21 >> 1)
      {
        sub_2447CEE18(v21 > 1, v22 + 1, 1);
        v6 = v37;
      }
      *(_QWORD *)(v6 + 16) = v22 + 1;
      v23 = v6 + 16 * v22;
      *(_QWORD *)(v23 + 32) = v17;
      *(_QWORD *)(v23 + 40) = v19;
      v7 += 56;
      --v5;
      v4 = v32;
    }
    while (v5);
    swift_bridgeObjectRelease();
    v3 = v30;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A630);
  sub_2447D48B0();
  sub_2448EA9A4();
  swift_bridgeObjectRelease();
  v24 = v31;
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v3, v31);
  sub_2448EABC0();
  (*(void (**)(uint64_t, uint64_t))(v24 + 16))(v3, v24);
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  (*(void (**)(uint64_t, uint64_t))(v24 + 24))(v3, v24);
  v25._countAndFlagsBits = 538976288;
  v25._object = (void *)0xE400000000000000;
  String.prefixingEachLine(with:startingOnLine:)(v25, 0);
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  v26._countAndFlagsBits = 538976288;
  v26._object = (void *)0xE400000000000000;
  String.prefixingEachLine(with:startingOnLine:)(v26, 0);
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 538976288;
  v27._object = (void *)0xE400000000000000;
  v28 = String.prefixingEachLine(with:startingOnLine:)(v27, 0);
  result = swift_bridgeObjectRelease();
  *a2 = v28;
  return result;
}

unint64_t sub_2448798C8()
{
  unint64_t result;

  result = qword_25738F4E8;
  if (!qword_25738F4E8)
  {
    result = MEMORY[0x24951AC70](&unk_2448F49F4, &type metadata for UnknownCommandError);
    atomic_store(result, (unint64_t *)&qword_25738F4E8);
  }
  return result;
}

unint64_t sub_24487990C()
{
  unint64_t result;

  result = qword_25738F4F0[0];
  if (!qword_25738F4F0[0])
  {
    result = MEMORY[0x24951AC70](&unk_2448F49B4, &type metadata for MissingCommandError);
    atomic_store(result, qword_25738F4F0);
  }
  return result;
}

unint64_t sub_244879950()
{
  return 0xD000000000000011;
}

unint64_t sub_24487996C()
{
  sub_2448EB79C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  return 0xD000000000000011;
}

unint64_t sub_244879A08()
{
  return sub_24487996C();
}

uint64_t destroy for CommandLineTool(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1(a1 + 32);
}

uint64_t initializeWithCopy for CommandLineTool(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = a2 + 32;
  v6 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8(a1 + 32, v5, v7);
  return a1;
}

_QWORD *assignWithCopy for CommandLineTool(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1(a1 + 4, a2 + 4);
  return a1;
}

uint64_t assignWithTake for CommandLineTool(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

ValueMetadata *type metadata accessor for CommandLineTool()
{
  return &type metadata for CommandLineTool;
}

ValueMetadata *type metadata accessor for MissingCommandError()
{
  return &type metadata for MissingCommandError;
}

ValueMetadata *type metadata accessor for UnknownCommandError()
{
  return &type metadata for UnknownCommandError;
}

uint64_t sub_244879BF4@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v10, v3, v7);
    a1(v10);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 32))(a3, v3, *(_QWORD *)(a2 + 16));
  }
  sub_2448EBD48();
  return swift_storeEnumTagMultiPayload();
}

uint64_t Future.map<A>(dsoHandle:file:line:column:function:on:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return sub_24487B214(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t Future.mapSuccess<A>(dsoHandle:file:line:column:function:on:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, __int128 *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return sub_24487B270(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_244879DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char v17;
  __int128 v18;
  uint64_t v21[2];
  uint64_t v22[2];
  uint64_t v23[2];
  char v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  v18 = *(_OWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v17 = *(_BYTE *)(a1 + 56);
  v12 = *(void **)a2;
  v13 = *(_QWORD *)(a2 + 8);
  v14 = *(void **)a3;
  v15 = *(_QWORD *)(a3 + 8);
  type metadata accessor for MapFuture(0, *(_QWORD *)(*(_QWORD *)v6 + 80), a6, a4);
  v23[0] = v7;
  v23[1] = v8;
  v24 = v9;
  v25 = v18;
  v26 = v10;
  v27 = v11;
  v28 = v17;
  v22[0] = (uint64_t)v12;
  v22[1] = v13;
  v21[0] = (uint64_t)v14;
  v21[1] = v15;
  swift_retain();
  sub_24481240C(v12);
  sub_24481240C(v14);
  swift_allocObject();
  swift_retain();
  return sub_24487A5C4(v23, v6, v22, v21, a4, a5);
}

uint64_t sub_244879EB4(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  swift_allocObject();
  return sub_24487A5C4(a1, a2, a3, a4, a5, a6);
}

uint64_t Future.tryMapSuccess<A>(dsoHandle:file:line:column:function:on:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, __int128 *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return sub_24487A334(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (uint64_t)&unk_251587C00, (uint64_t)sub_24487B358);
}

uint64_t sub_244879F74@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v2 = sub_2448EBD48();
  return sub_244879FF8((void (*)(char *))sub_24487B820, v2, a1);
}

uint64_t sub_244879FF8@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v12, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t, char *, _QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 32))(a3, v12, *(_QWORD *)(a2 + 24));
    sub_2448EBD48();
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
    a1(v10);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

uint64_t Future.mapFailure(dsoHandle:file:line:column:function:on:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, __int128 *a10, uint64_t a11, uint64_t a12)
{
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  __int128 v19;
  _QWORD v20[2];
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v13 = *v12;
  v20[0] = a2;
  v20[1] = a3;
  v21 = a4;
  v22 = a5;
  v23 = a6;
  v24 = a7;
  v25 = a8;
  v26 = a9;
  v19 = *a10;
  v14 = (_QWORD *)swift_allocObject();
  v15 = *(_QWORD *)(v13 + 80);
  v14[2] = v15;
  v14[3] = a11;
  v14[4] = a12;
  v18[0] = 0;
  v18[1] = 0;
  swift_retain();
  v16 = sub_244879DB0((uint64_t)v20, (uint64_t)v18, (uint64_t)&v19, (uint64_t)sub_24487B388, (uint64_t)v14, v15);
  swift_release();
  sub_24481241C(0);
  return v16;
}

uint64_t sub_24487A20C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v8 = sub_2448EBD48();
  MEMORY[0x24BDAC7A8](v8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(&v12[-v10], a1, v8);
  v13 = a2;
  v14 = a3;
  return sub_244879BF4((void (*)(char *))sub_24487B7F4, v8, a4);
}

uint64_t Future.mapSuccessToResult<A>(dsoHandle:file:line:column:function:on:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, __int128 *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return sub_24487A334(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (uint64_t)&unk_251587C50, (uint64_t)sub_24487B394);
}

uint64_t sub_24487A334(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, __int128 *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v20[2];
  __int128 v21;
  _QWORD v22[2];
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v16 = *v15;
  v22[0] = a2;
  v22[1] = a3;
  v23 = a4;
  v24 = a5;
  v25 = a6;
  v26 = a7;
  v27 = a8;
  v28 = a9;
  v21 = *a10;
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = *(_QWORD *)(v16 + 80);
  v17[3] = a13;
  v17[4] = a11;
  v17[5] = a12;
  v20[0] = 0;
  v20[1] = 0;
  swift_retain();
  v18 = sub_244879DB0((uint64_t)v22, (uint64_t)&v21, (uint64_t)v20, a15, (uint64_t)v17, a13);
  swift_release();
  sub_24481241C(0);
  return v18;
}

uint64_t sub_24487A3FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v10 = sub_2448EBD48();
  return a6(a2, a3, v10, a5);
}

uint64_t Future.ignoringValue(dsoHandle:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  _QWORD v15[2];
  _QWORD v16[2];
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v10 = *v9;
  v16[0] = a2;
  v16[1] = a3;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  v20 = a7;
  v21 = a8;
  v22 = a9;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v10 + 80);
  v15[0] = 0;
  v15[1] = 0;
  v14[0] = 0;
  v14[1] = 0;
  v12 = sub_244879DB0((uint64_t)v16, (uint64_t)v15, (uint64_t)v14, (uint64_t)sub_24487B3C8, v11, MEMORY[0x24BEE4AE0] + 8);
  swift_release();
  sub_24481241C(0);
  sub_24481241C(0);
  return v12;
}

uint64_t sub_24487A544@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v2 = sub_2448EBD48();
  return sub_2448A6CDC((void (*)(char *))nullsub_1, v2, a1);
}

uint64_t sub_24487A5C4(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  char v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  v9 = *v6;
  v25 = a1[1];
  v26 = *a1;
  v24 = *((_BYTE *)a1 + 16);
  v23 = *(_OWORD *)(a1 + 3);
  v10 = a1[6];
  v22 = a1[5];
  v21 = *((_BYTE *)a1 + 56);
  v11 = *a3;
  v12 = a3[1];
  v13 = *a4;
  v14 = a4[1];
  v27[0] = a2;
  v15 = type metadata accessor for MapFuture.Activity(0, *(_QWORD *)(v9 + 200), *(_QWORD *)(v9 + 208), (uint64_t)a4);
  swift_retain();
  v6[13] = sub_24481320C(v27, v15);
  v6[14] = a5;
  v6[15] = a6;
  v6[16] = v11;
  v6[17] = v12;
  v6[18] = v13;
  v6[19] = v14;
  swift_retain();
  swift_release();
  v27[0] = v26;
  v27[1] = v25;
  v28 = v24;
  v29 = v23;
  v30 = v22;
  v31 = v10;
  v32 = v21;
  v19 = sub_2448D24B4((uint64_t)v27, v16, v17, v18);
  swift_retain_n();
  Future.observeCompletion(_:)((uint64_t)sub_24487B658, v19);
  swift_release();
  swift_retain();
  Future.observeCancelation(_:)((uint64_t)sub_24487B650, v19);
  swift_release_n();
  swift_release();
  swift_release();
  return v19;
}

void sub_24487A724(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  unint64_t v21;
  char *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  const void *v33;
  void *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  const void *v39;
  void (*v40)(uint64_t, uint64_t);
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char v53[16];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *aBlock;
  uint64_t v58;
  uint64_t (*v59)(uint64_t);
  void *v60;
  unint64_t (*v61)();
  char *v62;

  v2 = v1;
  v51 = (char *)a1;
  v3 = *v1;
  v49 = sub_2448EA704();
  v47 = *(_QWORD *)(v49 - 8);
  MEMORY[0x24BDAC7A8](v49);
  v46 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_2448EA734();
  v45 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v50 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v3 + 200);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v7 = sub_2448EBD48();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v52 = (char *)&v41 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v41 - v13;
  aBlock = (void *)v1[13];
  v15 = *(_QWORD *)(v3 + 208);
  v54 = v6;
  v55 = v15;
  type metadata accessor for MapFuture.Activity(255, v6, v15, v16);
  v17 = sub_2448EA5D8();
  swift_retain();
  v18 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v17);
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_2447B9000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/MapFuture.swift", 121, 2, 181, 47, (uint64_t)"receiveUnderlyingCompletion(_:)", 31, 2, (uint64_t)sub_24487B65C, (uint64_t)v53, v17, MEMORY[0x24BEE1328], v18);
  swift_release();
  if (v56 == 1)
  {
    v19 = (uint64_t)v51;
    Result.analyze<A>(success:failure:)((void (*)(char *))sub_24487B6B0, (uint64_t)v1, (void (*)(char *))sub_24487B6BC, (uint64_t)v1, v7);
    v43 = aBlock;
    v44 = v58;
    v20 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v20(v14, v19, v7);
    v20(v52, (uint64_t)v14, v7);
    v51 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    v20(v51, (uint64_t)v14, v7);
    v21 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v22 = (char *)swift_allocObject();
    *((_QWORD *)v22 + 2) = v6;
    *((_QWORD *)v22 + 3) = v15;
    v23 = v44;
    v24 = v43;
    *((_QWORD *)v22 + 4) = v2;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v22[v21], v14, v7);
    aBlock = v24;
    v58 = v23;
    swift_retain_n();
    if ((ExecutionLane.isCurrentLane.getter() & 1) != 0)
    {
      v27 = v2;
      v28 = (uint64_t)v52;
      sub_24487AFD8(v27, (uint64_t)v52, v25, v26);
      swift_release();
      swift_release();
      v29 = (uint64_t)v51;
    }
    else if (v24)
    {
      if (v24 == (void *)1)
      {
        sub_244803860();
        v42 = sub_2448EB418();
        v61 = sub_24487B784;
        v62 = v22;
        aBlock = (void *)MEMORY[0x24BDAC760];
        v58 = 1107296256;
        v59 = sub_2447EB164;
        v60 = &block_descriptor_15_0;
        v41 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        v30 = v50;
        sub_2448EA71C();
        aBlock = (void *)MEMORY[0x24BEE4AF8];
        sub_2447EB5DC();
        __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
        sub_2448039A4();
        v31 = v46;
        v32 = v49;
        sub_2448EB6C4();
        v33 = v41;
        v34 = (void *)v42;
        MEMORY[0x249519C08](0, v30, v31, v41);
        _Block_release(v33);

        (*(void (**)(char *, uint64_t))(v47 + 8))(v31, v32);
        (*(void (**)(char *, uint64_t))(v45 + 8))(v30, v48);
      }
      else
      {
        v61 = sub_24487B784;
        v62 = v22;
        aBlock = (void *)MEMORY[0x24BDAC760];
        v58 = 1107296256;
        v59 = sub_2447EB164;
        v60 = &block_descriptor_9;
        v42 = (uint64_t)_Block_copy(&aBlock);
        swift_retain();
        sub_24481240C(v24);
        v35 = v50;
        sub_2448EA71C();
        v56 = MEMORY[0x24BEE4AF8];
        sub_2447EB5DC();
        __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
        sub_2448039A4();
        v36 = v46;
        v37 = v49;
        sub_2448EB6C4();
        v38 = v35;
        v39 = (const void *)v42;
        MEMORY[0x249519C08](0, v38, v36, v42);
        _Block_release(v39);
        sub_24481241C(v24);
        (*(void (**)(char *, uint64_t))(v47 + 8))(v36, v37);
        (*(void (**)(char *, uint64_t))(v45 + 8))(v50, v48);
        swift_release();
      }
      swift_release();
      swift_release();
      v29 = (uint64_t)v51;
      v28 = (uint64_t)v52;
    }
    else
    {
      v29 = (uint64_t)v51;
      sub_24487AFD8(v2, (uint64_t)v51, v25, v26);
      swift_release();
      swift_release();
      v28 = (uint64_t)v52;
    }
    v40 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v40(v29, v7);
    swift_release();
    v40(v28, v7);
    sub_24481241C(v24);
  }
}

uint64_t sub_24487AD50(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  char v5;
  __int128 v7;
  char v8;
  __int128 v9;
  __int128 v10;
  char v11;

  v4 = *((_BYTE *)a1 + 16);
  v5 = *((_BYTE *)a1 + 56);
  v7 = *a1;
  v8 = v4;
  v9 = *(__int128 *)((char *)a1 + 24);
  v10 = *(__int128 *)((char *)a1 + 40);
  v11 = v5;
  return sub_24487ADA4((uint64_t *)&v7, a2, a3, a4);
}

uint64_t sub_24487ADA4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[16];
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;

  v5 = v4;
  v7 = *v5;
  v8 = *(_QWORD *)(*v5 + 208);
  v9 = type metadata accessor for FutureTermination(0, v8, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v32 - v11;
  v13 = *a1;
  v14 = a1[1];
  v15 = *((unsigned __int8 *)a1 + 16);
  v16 = a1[3];
  v39 = a1[4];
  v40 = v16;
  v17 = a1[5];
  v37 = a1[6];
  v38 = v17;
  v36 = *((unsigned __int8 *)a1 + 56);
  v51 = v5[13];
  v18 = *(_QWORD *)(v7 + 200);
  v42 = v18;
  v43 = v8;
  type metadata accessor for MapFuture.Activity(255, v18, v8, v19);
  v20 = sub_2448EA5D8();
  type metadata accessor for Future(255, v18, v21, v22);
  v23 = sub_2448EB508();
  swift_retain();
  v24 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v20);
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_2447B9000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/MapFuture.swift", 121, 2, 205, 42, (uint64_t)"cancel(callsite:)", 17, 2, (uint64_t)sub_24487B634, (uint64_t)v41, v20, v23, v24);
  result = swift_release();
  v26 = v44[0];
  if (v44[0])
  {
    *(_QWORD *)v12 = v13;
    *((_QWORD *)v12 + 1) = v14;
    v12[16] = v15;
    v27 = v40;
    v35 = v15;
    v34 = v14;
    v33 = v13;
    v28 = v38;
    v29 = v39;
    *((_QWORD *)v12 + 3) = v40;
    *((_QWORD *)v12 + 4) = v29;
    v30 = v37;
    *((_QWORD *)v12 + 5) = v28;
    *((_QWORD *)v12 + 6) = v30;
    v31 = v36;
    v12[56] = v36;
    swift_storeEnumTagMultiPayload();
    swift_retain();
    sub_2448D2CA4((uint64_t)v12);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v44[0] = v33;
    v44[1] = v34;
    v45 = v35;
    v46 = v27;
    v47 = v29;
    v48 = v28;
    v49 = v30;
    v50 = v31;
    (*(void (**)(_QWORD *))(*(_QWORD *)v26 + 192))(v44);
    return swift_release_n();
  }
  return result;
}

unint64_t sub_24487AFD8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t result;
  uint64_t v21;
  unint64_t v22;

  v6 = *a1;
  v7 = *(_QWORD *)(*a1 + 208);
  v8 = type metadata accessor for FutureTermination(0, v7, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (uint64_t *)((char *)&v21 - v10);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v12 = sub_2448EBD48();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v21 - v14;
  v21 = a1[13];
  type metadata accessor for MapFuture.Activity(255, *(_QWORD *)(v6 + 200), v7, v16);
  v17 = sub_2448EA5D8();
  v18 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v17);
  SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/MapFuture.swift", 121, 2, 196, 42, (uint64_t)"receiveUnderlyingCompletion(_:)", 31, 2, v17, v18);
  v19 = v22;
  result = sub_244870114(v22);
  if (v19 != 1)
  {
    ((void (*)(uint64_t))a1[14])(a2);
    static FutureTermination.completed(_:)((uint64_t)v15, v7, v11);
    sub_2448D2CA4((uint64_t)v11);
    (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  return result;
}

void sub_24487B188()
{
  uint64_t v0;

  swift_release();
  swift_release();
  sub_24481241C(*(id *)(v0 + 128));
  sub_24481241C(*(id *)(v0 + 144));
}

uint64_t sub_24487B1B4()
{
  uint64_t v0;

  v0 = Future.deinit();
  swift_release();
  swift_release();
  sub_24481241C(*(id *)(v0 + 128));
  sub_24481241C(*(id *)(v0 + 144));
  return v0;
}

uint64_t sub_24487B1F8()
{
  sub_24487B1B4();
  return swift_deallocClassInstance();
}

uint64_t sub_24487B214(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  _QWORD v16[2];
  _QWORD v17[2];
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v13 = *a9;
  v12 = a9[1];
  v17[0] = a1;
  v17[1] = a2;
  v18 = a3;
  v19 = a4;
  v20 = a5;
  v21 = a6;
  v22 = a7;
  v23 = a8;
  v16[0] = v13;
  v16[1] = v12;
  v15[0] = v13;
  v15[1] = v12;
  return sub_244879DB0((uint64_t)v17, (uint64_t)v16, (uint64_t)v15, a10, a11, a12);
}

uint64_t sub_24487B270(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, __int128 *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v17[2];
  __int128 v18;
  _QWORD v19[2];
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v13 = *v12;
  v19[0] = a1;
  v19[1] = a2;
  v20 = a3;
  v21 = a4;
  v22 = a5;
  v23 = a6;
  v24 = a7;
  v25 = a8;
  v18 = *a9;
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = *(_QWORD *)(v13 + 80);
  v14[3] = a12;
  v14[4] = a10;
  v14[5] = a11;
  v17[0] = 0;
  v17[1] = 0;
  swift_retain();
  v15 = sub_244879DB0((uint64_t)v19, (uint64_t)&v18, (uint64_t)v17, (uint64_t)sub_24487B8CC, (uint64_t)v14, a12);
  swift_release();
  sub_24481241C(0);
  return v15;
}

uint64_t sub_24487B334()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24487B358@<X0>(uint64_t a1@<X8>)
{
  return sub_244879F74(a1);
}

uint64_t sub_24487B364()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24487B388@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_24487A20C(a1, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_24487B394(uint64_t a1)
{
  uint64_t *v1;

  return sub_24487A3FC(a1, v1[4], v1[5], v1[2], v1[3], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_244879FF8);
}

uint64_t sub_24487B3B8()
{
  return swift_deallocObject();
}

uint64_t sub_24487B3C8@<X0>(uint64_t a1@<X8>)
{
  return sub_24487A544(a1);
}

uint64_t sub_24487B3D0()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for MapFuture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MapFuture);
}

uint64_t *sub_24487B438(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v3 = swift_retain();
  *a1 = v3;
  return a1;
}

unint64_t sub_24487B470(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_release();
  return result;
}

unint64_t *sub_24487B488(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF)
      swift_retain();
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_retain();
    swift_release();
  }
  return a1;
}

unint64_t *sub_24487B518(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  if (*a1 < 0xFFFFFFFF)
    goto LABEL_6;
  if (v3 < 0xFFFFFFFF)
  {
    swift_release();
LABEL_6:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_release();
  return a1;
}

uint64_t sub_24487B578(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t sub_24487B5CC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

uint64_t type metadata accessor for MapFuture.Activity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MapFuture.Activity);
}

uint64_t *sub_24487B634@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if ((unint64_t)*result < 2)
    v2 = 0;
  *result = 1;
  *a2 = v2;
  return result;
}

uint64_t sub_24487B650(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_24487AD50(a1, v4, a3, a4);
}

unint64_t sub_24487B65C@<X0>(unint64_t *a1@<X0>, char *a2@<X8>)
{
  unint64_t result;
  char v5;

  result = *a1;
  if (result >= 2)
  {
    result = sub_244870114(result);
    *a1 = 0;
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  *a2 = v5;
  return result;
}

id sub_24487B6B0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v2 = *(void **)(v1 + 128);
  v3 = *(_QWORD *)(v1 + 136);
  *a1 = v2;
  a1[1] = v3;
  return sub_24481240C(v2);
}

id sub_24487B6BC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v2 = *(void **)(v1 + 144);
  v3 = *(_QWORD *)(v1 + 152);
  *a1 = v2;
  a1[1] = v3;
  return sub_24481240C(v2);
}

uint64_t sub_24487B6C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_2448EBD48() - 8) + 80);
  v3 = (v2 + 40) & ~v2;
  swift_release();
  if (swift_getEnumCaseMultiPayload() == 1)

  else
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

unint64_t sub_24487B784()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_2448EBD48() - 8) + 80);
  return sub_24487AFD8(*(uint64_t **)(v0 + 32), v0 + ((v1 + 40) & ~v1), v2, v3);
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t sub_24487B7F4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_24487B820@<X0>(uint64_t a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0A8);
  return sub_2447D18BC((void (*)(_BYTE *))sub_24487B894, a1);
}

uint64_t sub_24487B894(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v1 + 32))(*(_QWORD *)(v1 + 48));
  if (v2)
    *a1 = v2;
  return result;
}

uint64_t sub_24487B8CC(uint64_t a1)
{
  uint64_t *v1;

  return sub_24487A3FC(a1, v1[4], v1[5], v1[2], v1[3], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2448A6CDC);
}

uint64_t static EventStream.merge(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a1;
  sub_2448A9DB4((uint64_t)sub_24487BAD4, v6, a3);
  return swift_bridgeObjectRetain();
}

uint64_t sub_24487B968@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (**a6)()@<X8>)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[2];
  _OWORD v20[2];

  v7 = a1[1];
  v19[0] = *a1;
  v19[1] = v7;
  v20[0] = a1[2];
  *(_OWORD *)((char *)v20 + 9) = *(_OWORD *)((char *)a1 + 41);
  v18 = a4;
  v15 = a5;
  v16 = a2;
  v17 = a3;
  type metadata accessor for EventStream(255, a5, a3, a4);
  v8 = sub_2448EAEE4();
  v9 = MEMORY[0x24951AC70](MEMORY[0x24BEE12E0], v8);
  v11 = sub_2447D31DC((void (*)(char *, char *))sub_24487DD8C, (uint64_t)v14, v8, (char *)&type metadata for CancellationToken, MEMORY[0x24BEE4078], v9, MEMORY[0x24BEE40A8], v10);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v11;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738AF78);
  swift_allocObject();
  result = sub_2447E5D90(v19, 0, 0, 1, 0, 0xD000000000000011, 0x80000002448F9A50, 0x64656C65636E6163, 0xE800000000000000);
  *a6 = sub_24487DDD0;
  a6[1] = (uint64_t (*)())v12;
  a6[2] = (uint64_t (*)())result;
  return result;
}

uint64_t sub_24487BAB0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24487BAD4@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v4;

  return sub_24487B968(a1, a2, a3, *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 16), a4);
}

uint64_t sub_24487BADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for EventStream(0, a4, a3, a4);
  return EventStream.observe(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_2447B9000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/EventStream+Operators.swift", 133, 2, 20, 50, (uint64_t)"merge(_:)", 9, 2, a2, a3);
}

uint64_t sub_24487BB74(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8[2];
  char v9;
  __int128 v10;
  const char *v11;
  uint64_t v12;
  char v13;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v8[0] = (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoun"
                     "dation/EventStream+Operators.swift";
    v8[1] = 133;
    v9 = 2;
    v10 = xmmword_2448F4AE0;
    v11 = "merge(_:)";
    v12 = 9;
    v13 = 2;
    v2 = swift_bridgeObjectRetain() + 48;
    do
    {
      v3 = *(void (**)(uint64_t))(v2 - 16);
      v4 = *(_QWORD *)v2;
      v5 = *(_QWORD *)(*(_QWORD *)v2 + 144);
      swift_retain();
      swift_retain();
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v5 + 76));
      sub_2447E5E3C((__int128 *)(v5 + 16), (uint64_t (*)(void))nullsub_1, v8, v4, (void (*)(uint64_t, _QWORD *))sub_2447E1AC8, &v7);
      os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 76));
      v6 = swift_release();
      if ((v7 & 1) == 0)
        v3(v6);
      swift_release();
      swift_release();
      v2 += 24;
      --v1;
    }
    while (v1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t EventStreamProtocol.compactMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  return sub_24487BF78(a1, a2, a3, a4, a5, (uint64_t)sub_24487BE30, a6);
}

uint64_t sub_24487BCE4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  __int128 v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  __int128 v34;

  v12 = *a1;
  v11 = a1[1];
  v13 = *((_BYTE *)a1 + 16);
  v22 = *(_OWORD *)(a1 + 3);
  v14 = a1[5];
  v15 = a1[6];
  v16 = *((_BYTE *)a1 + 56);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a9 + 16))(&v34, a7, a9);
  v33 = v34;
  *(_QWORD *)&v27 = v12;
  *((_QWORD *)&v27 + 1) = v11;
  v28 = v13;
  v29 = v22;
  v30 = v14;
  v31 = v15;
  v32 = v16;
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a7;
  v17[3] = a8;
  v17[4] = a9;
  v17[5] = a5;
  v17[6] = a6;
  v17[7] = a2;
  v17[8] = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for EventStream(0, AssociatedTypeWitness, v19, v20);
  swift_retain();
  swift_retain();
  sub_2448A9D60(&v27);
  swift_release();
  return swift_release();
}

uint64_t sub_24487BE30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24487C244(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, _QWORD, _QWORD))sub_24487BCE4);
}

uint64_t sub_24487BE3C(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, void (*a4)(char *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  void (*v20)(char *);

  v20 = a4;
  v10 = sub_2448EB508();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v19 - v13;
  v15 = *(_QWORD *)(a7 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2(a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, a7) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v14, a7);
  v20(v17);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, a7);
}

uint64_t EventStreamProtocol.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  return sub_24487BF78(a1, a2, a3, a4, a5, (uint64_t)sub_24487C238, a6);
}

uint64_t sub_24487BF78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, _QWORD *a7@<X8>)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v20 = a7;
  v21 = a6;
  v19 = a1;
  v12 = *(_QWORD *)(a3 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t))(v12 + 16))((char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  v14 = (*(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v15 = (char *)swift_allocObject();
  *((_QWORD *)v15 + 2) = a3;
  *((_QWORD *)v15 + 3) = a4;
  *((_QWORD *)v15 + 4) = a5;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v15[v14], (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  v16 = &v15[(v13 + v14 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(_QWORD *)v16 = v19;
  *((_QWORD *)v16 + 1) = a2;
  sub_2448A9DB4(v21, (uint64_t)v15, v20);
  return swift_retain();
}

uint64_t sub_24487C07C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  __int128 v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  __int128 v34;

  v12 = *a1;
  v11 = a1[1];
  v13 = *((_BYTE *)a1 + 16);
  v22 = *(_OWORD *)(a1 + 3);
  v14 = a1[5];
  v15 = a1[6];
  v16 = *((_BYTE *)a1 + 56);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a9 + 16))(&v34, a7, a9);
  v33 = v34;
  *(_QWORD *)&v27 = v12;
  *((_QWORD *)&v27 + 1) = v11;
  v28 = v13;
  v29 = v22;
  v30 = v14;
  v31 = v15;
  v32 = v16;
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a7;
  v17[3] = a8;
  v17[4] = a9;
  v17[5] = a2;
  v17[6] = a3;
  v17[7] = a5;
  v17[8] = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for EventStream(0, AssociatedTypeWitness, v19, v20);
  swift_retain();
  swift_retain();
  sub_2448A9D60(&v27);
  swift_release();
  return swift_release();
}

uint64_t objectdestroy_2Tm_2()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24487C238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24487C244(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, _QWORD, _QWORD))sub_24487C07C);
}

uint64_t sub_24487C244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, unint64_t, _QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;

  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 16) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (_QWORD *)(v4 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  return a4(a1, a2, a3, v4 + v6, *v7, v7[1]);
}

uint64_t sub_24487C29C(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(uint64_t);
  uint64_t v15;

  v9 = *(_QWORD *)(a7 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13(v10);
  a2(v12);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, a7);
}

uint64_t EventStreamProtocol.merged<A>(with:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for EventStream(255, AssociatedTypeWitness, v10, v11);
  sub_2448EBB68();
  swift_allocObject();
  v12 = sub_2448EAE0C();
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a1, a3);
  (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a2, a4);
  sub_244805474();
  static EventStream.merge(_:)(v12, AssociatedTypeWitness, a5);
  return swift_bridgeObjectRelease();
}

uint64_t EventStreamProtocol.filter(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;

  v10 = *(_QWORD *)(a3 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v10 + 16))(v12, v13);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = (v11 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a3;
  *(_QWORD *)(v16 + 24) = a4;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v16 + v14, v12, a3);
  v17 = (_QWORD *)(v16 + v15);
  *v17 = a1;
  v17[1] = a2;
  swift_getAssociatedTypeWitness();
  sub_2448A9DB4((uint64_t)sub_24487DA44, v16, a5);
  return swift_retain();
}

uint64_t sub_24487C548(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  __int128 v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  __int128 v33;

  v11 = *a1;
  v12 = a1[1];
  v13 = *((_BYTE *)a1 + 16);
  v22 = *(_OWORD *)(a1 + 3);
  v14 = a1[5];
  v15 = a1[6];
  v16 = *((_BYTE *)a1 + 56);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a8 + 16))(&v33, a7, a8);
  v32 = v33;
  *(_QWORD *)&v26 = v11;
  *((_QWORD *)&v26 + 1) = v12;
  v27 = v13;
  v28 = v22;
  v29 = v14;
  v30 = v15;
  v31 = v16;
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a7;
  v17[3] = a8;
  v17[4] = a5;
  v17[5] = a6;
  v17[6] = a2;
  v17[7] = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for EventStream(0, AssociatedTypeWitness, v19, v20);
  swift_retain();
  swift_retain();
  sub_2448A9D60(&v26);
  swift_release();
  return swift_release();
}

uint64_t EventStreamProtocol.replacingNil<A>(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  uint64_t v15;

  v9 = *(_QWORD *)(a3 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v11);
  v12 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v13 = (char *)swift_allocObject();
  *((_QWORD *)v13 + 2) = a2;
  *((_QWORD *)v13 + 3) = a3;
  *((_QWORD *)v13 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v13[v12], v11, a3);
  EventStreamProtocol.map<A>(_:)((uint64_t)sub_24487DAD0, (uint64_t)v13, a2, a3, a4, a5);
  return swift_release();
}

uint64_t sub_24487C778@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_2448EB508();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v16 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v16 - v13, a1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, a3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v14, 1, a3) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a4, v10, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a3);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a4, v14, a3);
  }
}

uint64_t EventStreamProtocol<>.switchToLatest()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v15;

  v8 = *(_QWORD *)(a1 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, a1);
  v12 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v13 = (char *)swift_allocObject();
  *((_QWORD *)v13 + 2) = a1;
  *((_QWORD *)v13 + 3) = a2;
  *((_QWORD *)v13 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v13[v12], v10, a1);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  return sub_2448A9DB4((uint64_t)sub_24487DAF4, (uint64_t)v13, a4);
}

uint64_t sub_24487C9D8@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t (**a7)()@<X8>)
{
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  __int128 v25;
  __int128 v26[2];
  _OWORD v27[3];
  _OWORD v28[2];
  uint64_t v29;
  _OWORD v30[2];
  _OWORD v31[3];

  v14 = a1[1];
  v30[0] = *a1;
  v30[1] = v14;
  v31[0] = a1[2];
  *(_OWORD *)((char *)v31 + 9) = *(_OWORD *)((char *)a1 + 41);
  __swift_instantiateConcreteTypeFromMangledName(qword_25738F5F8);
  v15 = swift_allocObject();
  *(_DWORD *)(v15 + 44) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  *(_BYTE *)(v15 + 40) = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(a5 + 16))(v28, a4, a5);
  v27[2] = v28[0];
  v16 = a1[1];
  v26[0] = *a1;
  v26[1] = v16;
  v27[0] = a1[2];
  *(_OWORD *)((char *)v27 + 9) = *(_OWORD *)((char *)a1 + 41);
  v17 = swift_allocObject();
  v18 = a1[1];
  *(_OWORD *)(v17 + 40) = *a1;
  *(_QWORD *)(v17 + 16) = a4;
  *(_QWORD *)(v17 + 24) = a5;
  *(_QWORD *)(v17 + 32) = a6;
  *(_OWORD *)(v17 + 56) = v18;
  *(_OWORD *)(v17 + 72) = a1[2];
  *(_OWORD *)(v17 + 81) = *(_OWORD *)((char *)a1 + 41);
  *(_QWORD *)(v17 + 104) = a2;
  *(_QWORD *)(v17 + 112) = a3;
  *(_QWORD *)(v17 + 120) = v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for EventStream(0, AssociatedTypeWitness, v20, v21);
  swift_retain();
  swift_retain();
  sub_2448A9D60(v26);
  swift_release();
  swift_release();
  v22 = v29;
  v25 = v28[1];
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = v15;
  *(_OWORD *)(v23 + 24) = v25;
  *(_QWORD *)(v23 + 40) = v22;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738AF78);
  swift_allocObject();
  result = sub_2447E5D90(v30, 0, 0, 1, 0, 0xD000000000000011, 0x80000002448F9A50, 0x64656C65636E6163, 0xE800000000000000);
  *a7 = sub_24487DC78;
  a7[1] = (uint64_t (*)())v23;
  a7[2] = (uint64_t (*)())result;
  return result;
}

uint64_t sub_24487CC0C(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v10)(uint64_t *__return_ptr);
  __int128 v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _QWORD v24[3];
  __int128 v25;
  _BYTE v26[41];

  v10 = *(void (**)(uint64_t *__return_ptr))(a8 + 16);
  swift_getAssociatedTypeWitness();
  v10(&v23);
  v11 = a2[1];
  v25 = *a2;
  *(_OWORD *)v26 = v11;
  *(_OWORD *)&v26[16] = a2[2];
  *(_OWORD *)&v26[25] = *(__int128 *)((char *)a2 + 41);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for EventStream(0, AssociatedTypeWitness, v13, v14);
  sub_2448A9D60(&v25);
  swift_release();
  v16 = v24[0];
  v15 = v24[1];
  v17 = v24[2];
  os_unfair_lock_lock((os_unfair_lock_t)(a5 + 44));
  v18 = 0;
  v19 = 0;
  if ((*(_BYTE *)(a5 + 40) & 1) == 0)
  {
    v18 = *(void (**)(uint64_t))(a5 + 16);
    v19 = *(_QWORD *)(a5 + 32);
    *(_QWORD *)(a5 + 16) = v16;
    *(_QWORD *)(a5 + 24) = v15;
    *(_QWORD *)(a5 + 32) = v17;
    swift_retain();
    swift_retain();
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a5 + 44));
  if (v18)
  {
    *(_QWORD *)&v25 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFou"
                      "ndation/EventStream+Operators.swift";
    *((_QWORD *)&v25 + 1) = 133;
    v26[0] = 2;
    *(_OWORD *)&v26[8] = xmmword_2448F4AF0;
    *(_QWORD *)&v26[24] = "switchToLatest()";
    *(_QWORD *)&v26[32] = 16;
    v26[40] = 2;
    v20 = *(_QWORD *)(v19 + 144);
    sub_24487DC84((uint64_t)v18);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v20 + 76));
    sub_2447E5E3C((__int128 *)(v20 + 16), (uint64_t (*)(void))nullsub_1, (uint64_t *)&v25, v19, (void (*)(uint64_t, _QWORD *))sub_2447E1AC8, v24);
    os_unfair_lock_unlock((os_unfair_lock_t)(v20 + 76));
    v21 = swift_release();
    if ((v24[0] & 1) == 0)
      v18(v21);
    swift_release();
    swift_release();
    sub_2447C6AE8((uint64_t)v18);
    return sub_2447C6AE8((uint64_t)v18);
  }
  else
  {
    swift_release();
    return swift_release();
  }
}

uint64_t sub_24487CE6C(os_unfair_lock_s *a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[9];
  uint64_t v11[2];
  char v12;
  __int128 v13;
  const char *v14;
  uint64_t v15;
  char v16;

  v6 = (uint64_t)&a1[4];
  v7 = a1 + 11;
  os_unfair_lock_lock(a1 + 11);
  sub_24487CF80(v6);
  os_unfair_lock_unlock(v7);
  v11[0] = (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFound"
                    "ation/EventStream+Operators.swift";
  v11[1] = 133;
  v12 = 2;
  v13 = xmmword_2448F4B00;
  v14 = "switchToLatest()";
  v15 = 16;
  v16 = 2;
  v8 = *(_QWORD *)(a4 + 144);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 76));
  sub_2447E5E3C((__int128 *)(v8 + 16), (uint64_t (*)(void))nullsub_1, v11, a4, (void (*)(uint64_t, _QWORD *))sub_2447E1AC8, v10);
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 76));
  result = swift_release();
  if ((v10[0] & 1) == 0)
    return a2(result);
  return result;
}

uint64_t sub_24487CF80(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  char v8;
  __int128 v9;
  const char *v10;
  uint64_t v11;
  char v12;
  char v13;

  v2 = result;
  v3 = *(void (**)(uint64_t))result;
  if (!*(_QWORD *)result)
  {
LABEL_6:
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  v4 = *(_QWORD *)(result + 16);
  v7[0] = (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFounda"
                   "tion/EventStream+Operators.swift";
  v7[1] = 133;
  v8 = 2;
  v9 = xmmword_2448F4B10;
  v10 = "switchToLatest()";
  v11 = 16;
  v12 = 2;
  v5 = *(_QWORD *)(v4 + 144);
  sub_24487DC84((uint64_t)v3);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 76));
  sub_2447E5E3C((__int128 *)(v5 + 16), (uint64_t (*)(void))nullsub_1, v7, v4, (void (*)(uint64_t, _QWORD *))sub_2447E1AC8, &v13);
  if (!v1)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 76));
    v6 = swift_release();
    if ((v13 & 1) == 0)
      v3(v6);
    result = sub_2447C6AE8((uint64_t)v3);
    goto LABEL_6;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 76));
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t EventStreamProtocol<>.filterDuplicateEvents()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v14;

  v9 = *(_QWORD *)(a1 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v4, a1);
  v11 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v12 = (char *)swift_allocObject();
  *((_QWORD *)v12 + 2) = a1;
  *((_QWORD *)v12 + 3) = a2;
  *((_QWORD *)v12 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v12[v11], (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  swift_getAssociatedTypeWitness();
  return sub_2448A9DB4((uint64_t)sub_24487DB5C, (uint64_t)v12, a4);
}

uint64_t sub_24487D1C8@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t (**a7)()@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31[2];
  _OWORD v32[3];
  _OWORD v33[2];
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[3];

  v29 = a6;
  *(_QWORD *)&v30 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = type metadata accessor for FilterDuplicateEventsState(0, AssociatedTypeWitness, v13, v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v28 - v17;
  v19 = a1[1];
  v35 = *a1;
  v36 = v19;
  v37[0] = a1[2];
  *(_OWORD *)((char *)v37 + 9) = *(__int128 *)((char *)a1 + 41);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))((char *)&v28 - v17, 1, 1, AssociatedTypeWitness);
  v20 = sub_24481320C(v18, v15);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(a5 + 16))(v33, a4, a5);
  v32[2] = v33[0];
  v31[0] = v35;
  v31[1] = v36;
  v32[0] = v37[0];
  *(_OWORD *)((char *)v32 + 9) = *(_OWORD *)((char *)v37 + 9);
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = a4;
  v21[3] = a5;
  v21[4] = v29;
  v21[5] = v20;
  v21[6] = v30;
  v21[7] = a3;
  type metadata accessor for EventStream(0, AssociatedTypeWitness, v22, v23);
  swift_retain();
  swift_retain();
  sub_2448A9D60(v31);
  swift_release();
  swift_release();
  v24 = v34;
  v30 = v33[1];
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = v30;
  *(_QWORD *)(v25 + 32) = v24;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738AF78);
  swift_allocObject();
  v26 = sub_2447E5D90(&v35, 0, 0, 1, 0, 0xD000000000000011, 0x80000002448F9A50, 0x64656C65636E6163, 0xE800000000000000);
  result = swift_release();
  *a7 = sub_24487DBD8;
  a7[1] = (uint64_t (*)())v25;
  a7[2] = (uint64_t (*)())v26;
  return result;
}

uint64_t sub_24487D468(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v20 = a2;
  v16 = a5;
  v17 = a6;
  v18 = a7;
  v19 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for FilterDuplicateEventsState(255, AssociatedTypeWitness, v10, v11);
  v12 = sub_2448EA5D8();
  v13 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v12);
  result = SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_2447B9000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/EventStream+Operators.swift", 133, 2, 135, 52, (uint64_t)"filterDuplicateEvents()", 23, 2, (uint64_t)sub_24487DBE4, (uint64_t)v15, v12, MEMORY[0x24BEE1328], v13);
  if (v21 == 1)
    return a3(a1);
  return result;
}

uint64_t sub_24487D57C@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, _BYTE *a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  char *v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  char *v23;
  void (*v24)(char *, uint64_t);
  char v25;
  _QWORD *v26;
  char *v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  uint64_t result;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  void (*v39)(char *, uint64_t, uint64_t);
  void (*v40)(char *, _QWORD, uint64_t, uint64_t);
  _BYTE *v41;
  uint64_t v42;
  char *v43;

  v42 = a2;
  v34 = a3;
  v43 = a1;
  v41 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD **)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v33 = (char *)&v32 - v6;
  v7 = sub_2448EB508();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v35 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v9 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v11 = (char *)&v32 - v10;
  v12 = *(_QWORD *)(v7 - 8);
  v13 = MEMORY[0x24BDAC7A8](v9);
  v38 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v32 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v32 - v18;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v20((char *)&v32 - v18, (uint64_t)v43, v7);
  v39 = (void (*)(char *, uint64_t, uint64_t))v5[2];
  v39(v17, v42, AssociatedTypeWitness);
  v40 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v5[7];
  v40(v17, 0, 1, AssociatedTypeWitness);
  v36 = TupleTypeMetadata2;
  v21 = &v11[*(int *)(TupleTypeMetadata2 + 48)];
  v20(v11, (uint64_t)v19, v7);
  v20(v21, (uint64_t)v17, v7);
  v37 = v5;
  v22 = (unsigned int (*)(char *, uint64_t, uint64_t))v5[6];
  if (v22(v11, 1, AssociatedTypeWitness) != 1)
  {
    v32 = v19;
    v20(v38, (uint64_t)v11, v7);
    if (v22(v21, 1, AssociatedTypeWitness) != 1)
    {
      v26 = v37;
      v27 = v33;
      ((void (*)(char *, char *, uint64_t))v37[4])(v33, v21, AssociatedTypeWitness);
      v28 = v38;
      LODWORD(v36) = sub_2448EAA64();
      v29 = (void (*)(char *, uint64_t))v26[1];
      v29(v27, AssociatedTypeWitness);
      v24 = *(void (**)(char *, uint64_t))(v12 + 8);
      v24(v17, v7);
      v24(v32, v7);
      v29(v28, AssociatedTypeWitness);
      v24(v11, v7);
      v25 = v36 ^ 1;
      goto LABEL_8;
    }
    v24 = *(void (**)(char *, uint64_t))(v12 + 8);
    v24(v17, v7);
    v24(v32, v7);
    ((void (*)(char *, uint64_t))v37[1])(v38, AssociatedTypeWitness);
    goto LABEL_6;
  }
  v23 = v19;
  v24 = *(void (**)(char *, uint64_t))(v12 + 8);
  v24(v17, v7);
  v24(v23, v7);
  if (v22(v21, 1, AssociatedTypeWitness) != 1)
  {
LABEL_6:
    (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v36);
    v25 = 1;
    goto LABEL_8;
  }
  v24(v11, v7);
  v25 = 0;
LABEL_8:
  v30 = v43;
  v24(v43, v7);
  v39(v30, v42, AssociatedTypeWitness);
  result = ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v40)(v30, 0, 1, AssociatedTypeWitness);
  *v41 = v25 & 1;
  return result;
}

uint64_t sub_24487D8F8(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  char v7;
  uint64_t v8[2];
  char v9;
  __int128 v10;
  const char *v11;
  uint64_t v12;
  char v13;

  v8[0] = (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFounda"
                   "tion/EventStream+Operators.swift";
  v8[1] = 133;
  v9 = 2;
  v10 = xmmword_2448F4B20;
  v11 = "filterDuplicateEvents()";
  v12 = 23;
  v13 = 2;
  v5 = *(_QWORD *)(a3 + 144);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 76));
  sub_2447E5E3C((__int128 *)(v5 + 16), (uint64_t (*)(void))nullsub_1, v8, a3, (void (*)(uint64_t, _QWORD *))sub_2447E1AC8, &v7);
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 76));
  result = swift_release();
  if ((v7 & 1) == 0)
    return a1(result);
  return result;
}

uint64_t sub_24487D9D4()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24487DA44(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;

  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (uint64_t *)(v3 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_24487C548(a1, a2, a3, v3 + v6, *v7, v7[1], v4, *(_QWORD *)(v3 + 24));
}

uint64_t sub_24487DA78()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t sub_24487DAD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 24);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  return sub_24487C778(a1, v2 + ((v4 + 40) & ~v4), v3, a2);
}

uint64_t sub_24487DAF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24487DB68(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24487C9D8);
}

uint64_t objectdestroy_14Tm()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t sub_24487DB5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24487DB68(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24487D1C8);
}

uint64_t sub_24487DB68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) - 8) + 80);
  return a4(a1, a2, a3, v4 + ((v5 + 40) & ~v5));
}

uint64_t type metadata accessor for FilterDuplicateEventsState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FilterDuplicateEventsState);
}

uint64_t sub_24487DB9C(uint64_t a1)
{
  uint64_t v1;

  return sub_24487D468(a1, *(_QWORD *)(v1 + 40), *(uint64_t (**)(uint64_t))(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_24487DBAC()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24487DBD8()
{
  uint64_t v0;

  return sub_24487D8F8(*(uint64_t (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_24487DBE4@<X0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_24487D57C(a1, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_24487DC00()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24487DC2C(uint64_t a1)
{
  uint64_t v1;

  return sub_24487CC0C(a1, (__int128 *)(v1 + 40), *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_24487DC44()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24487DC78()
{
  uint64_t v0;

  return sub_24487CE6C(*(os_unfair_lock_s **)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_24487DC84(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t objectdestroy_20Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24487DCE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t);
  uint64_t result;

  v3 = *(uint64_t (**)(uint64_t))(v1 + 48);
  result = (*(uint64_t (**)(void))(v1 + 32))();
  if ((result & 1) != 0)
    return v3(a1);
  return result;
}

uint64_t sub_24487DD2C(uint64_t a1)
{
  return sub_24487DD74(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_24487C29C);
}

uint64_t objectdestroy_38Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24487DD68(uint64_t a1)
{
  return sub_24487DD74(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_24487BE3C);
}

uint64_t sub_24487DD74(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[5], v2[6], v2[7], v2[8], v2[2], v2[3], v2[4]);
}

uint64_t sub_24487DD8C(uint64_t a1)
{
  uint64_t *v1;

  return sub_24487BADC(a1, v1[3], v1[4], v1[2]);
}

uint64_t sub_24487DDAC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24487DDD0()
{
  uint64_t v0;

  return sub_24487BB74(*(_QWORD *)(v0 + 16));
}

_QWORD *destroy for SwitchToLatestState(_QWORD *result)
{
  if (*result)
  {
    swift_release();
    return (_QWORD *)swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for SwitchToLatestState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for SwitchToLatestState(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v4 = *a2;
  if (*(_QWORD *)a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = v5;
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 16) = a2[2];
      swift_retain();
      swift_release();
    }
    else
    {
      sub_24487DF44(a1);
      v7 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = v7;
    }
  }
  else if (v4)
  {
    v6 = a2[1];
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = a2[2];
    swift_retain();
    swift_retain();
  }
  else
  {
    v8 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_OWORD *)a1 = v8;
  }
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  return a1;
}

uint64_t sub_24487DF44(uint64_t a1)
{
  destroy for CancellationToken();
  return a1;
}

uint64_t assignWithTake for SwitchToLatestState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (!*(_QWORD *)a1)
    goto LABEL_5;
  if (!*(_QWORD *)a2)
  {
    sub_24487DF44(a1);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    goto LABEL_6;
  }
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
LABEL_6:
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for SwitchToLatestState(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 25))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SwitchToLatestState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SwitchToLatestState()
{
  return &type metadata for SwitchToLatestState;
}

uint64_t sub_24487E0B4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2448EB508();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_24487E120(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void sub_24487E260(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_24487E408()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_24487E410()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

double Timeout.effectiveSeconds.getter()
{
  uint64_t v0;
  double v1;

  v1 = *(double *)v0;
  if (*(_BYTE *)(v0 + 8) == 1)
  {
    if (qword_257389CB8 != -1)
      swift_once();
    if ((byte_25738F688 & 1) != 0)
    {
      if (qword_257389CC0 != -1)
        swift_once();
      if (byte_25738F689)
        return v1 * 20.0;
    }
    else
    {
      return *(double *)&qword_25738F680;
    }
  }
  return v1;
}

Swift::Double __swiftcall effectiveTimeout(_:)(Swift::Double a1)
{
  Swift::Double result;

  if (qword_257389CB8 != -1)
    swift_once();
  if ((byte_25738F688 & 1) == 0)
    return *(double *)&qword_25738F680;
  if (qword_257389CC0 != -1)
    swift_once();
  result = a1 * 20.0;
  if (!byte_25738F689)
    return a1;
  return result;
}

void static Timeout.seconds(_:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 1;
}

double static Timeout.minutes(_:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  double result;

  result = a2 * 60.0;
  *(double *)a1 = result;
  *(_BYTE *)(a1 + 8) = 1;
  return result;
}

void static Timeout.unadjustableSeconds(_:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t sub_24487E5B4()
{
  uint64_t result;
  char v1;

  result = sub_24487E5DC();
  qword_25738F680 = result;
  byte_25738F688 = v1 & 1;
  return result;
}

uint64_t sub_24487E5DC()
{
  id v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  unsigned __int8 *v19;
  int v20;
  char v21;

  v0 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v1 = objc_msgSend(v0, sel_environment);

  v2 = sub_2448EA800();
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_14;
  v3 = sub_244828D0C(0x4F454D49545F5655, 0xEA00000000005455);
  if ((v4 & 1) == 0)
    goto LABEL_14;
  v5 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v3);
  v7 = *v5;
  v6 = v5[1];
  swift_bridgeObjectRetain();
  v8 = swift_bridgeObjectRelease();
  v9 = MEMORY[0x24BDAC7A8](v8);
  if ((v6 & 0x1000000000000000) == 0 && v6 & 0x2000000000000000 | v7 & 0x1000000000000000)
  {
    MEMORY[0x24BDAC7A8](v9);
    if ((v6 & 0x2000000000000000) == 0)
    {
      if ((v7 & 0x1000000000000000) != 0)
      {
        v10 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v11 = v7 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v10 = sub_2448EB820();
      }
      v12 = sub_244812DD8(v10, v11, (void (*)(uint64_t *__return_ptr))sub_24487EB64);
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
        return 0;
      goto LABEL_9;
    }
    if (v7 > 0x20u || ((1 << v7) & 0x100003E01) == 0)
    {
      v19 = (unsigned __int8 *)_swift_stdlib_strtod_clocale();
      if (v19)
      {
        v20 = *v19;
        swift_bridgeObjectRelease();
        if (v20)
          return 0;
        goto LABEL_9;
      }
    }
LABEL_14:
    swift_bridgeObjectRelease();
    return 0;
  }
  sub_2448EB778();
  swift_bridgeObjectRelease();
  if ((v21 & 1) == 0)
    return 0;
LABEL_9:
  if (qword_257389D58 != -1)
    swift_once();
  v13 = sub_2448EA5FC();
  __swift_project_value_buffer(v13, (uint64_t)qword_25738F900);
  v14 = sub_2448EA5E4();
  v15 = sub_2448EB3AC();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v16 = 134217984;
    sub_2448EB598();
    _os_log_impl(&dword_2447B9000, v14, v15, "Using explicit timeout %f", v16, 0xCu);
    MEMORY[0x24951AD84](v16, -1, -1);
  }

  return 0;
}

void sub_24487E924()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  char v4;

  if (qword_257389C58 != -1)
    swift_once();
  if ((byte_25738BC68 & 1) != 0)
    goto LABEL_7;
  if (qword_257389C60 != -1)
    swift_once();
  if (byte_25738BC69 == 1)
  {
LABEL_7:
    if (qword_257389D58 != -1)
      swift_once();
    v0 = sub_2448EA5FC();
    __swift_project_value_buffer(v0, (uint64_t)qword_25738F900);
    v1 = sub_2448EA5E4();
    v2 = sub_2448EB3AC();
    if (os_log_type_enabled(v1, v2))
    {
      v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_2447B9000, v1, v2, "Using CI timeout", v3, 2u);
      MEMORY[0x24951AD84](v3, -1, -1);
    }

  }
  if ((byte_25738BC68 & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    if (qword_257389C60 != -1)
      swift_once();
    v4 = byte_25738BC69;
  }
  byte_25738F689 = v4;
}

uint64_t getEnumTagSinglePayload for Timeout(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Timeout(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for Timeout()
{
  return &type metadata for Timeout;
}

_BYTE *sub_24487EB4C@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_244812D70(a1, a2);
}

_QWORD *sub_24487EB64@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_244812E2C(*(_QWORD *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

uint64_t CrashReportError.MissingEnvironmentObjectError.type.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CrashReportError.MissingEnvironmentObjectError.crashReport.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for CrashReportError.MissingEnvironmentObjectError() + 24);
  return sub_2447F1688(v3, a1);
}

uint64_t type metadata accessor for CrashReportError.MissingEnvironmentObjectError()
{
  uint64_t result;

  result = qword_25738F6F0;
  if (!qword_25738F6F0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t CrashReportError.MissingEnvironmentObjectError.highValueTitle.getter()
{
  sub_2448EB79C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  return 0x1000000000000029;
}

uint64_t CrashReportError.MissingEnvironmentObjectError.additionalInfo.getter()
{
  sub_2448EB79C();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  return 0;
}

id sub_24487EDC8()
{
  id v0;
  id result;

  v0 = objc_allocWithZone(MEMORY[0x24BDD1798]);
  result = sub_2448A3104(0xD000000000000048, 0x80000002448FC3C0, 0);
  qword_25738F690 = (uint64_t)result;
  return result;
}

uint64_t static CrashReportError.MissingEnvironmentObjectError.asiRegularExpression.getter()
{
  uint64_t v0;
  id v1;

  if (qword_257389CC8 != -1)
    swift_once();
  swift_beginAccess();
  v0 = qword_25738F690;
  v1 = (id)qword_25738F690;
  return v0;
}

void static CrashReportError.MissingEnvironmentObjectError.asiRegularExpression.setter(uint64_t a1)
{
  void *v2;

  if (qword_257389CC8 != -1)
    swift_once();
  swift_beginAccess();
  v2 = (void *)qword_25738F690;
  qword_25738F690 = a1;

}

uint64_t (*static CrashReportError.MissingEnvironmentObjectError.asiRegularExpression.modify())()
{
  if (qword_257389CC8 != -1)
    swift_once();
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t CrashReportError.MissingEnvironmentObjectError.init(report:asi:match:)@<X0>(uint64_t a1@<X0>, void *a2@<X3>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (_QWORD *)(a1 + *(int *)(type metadata accessor for CrashReport(0) + 20));
  v7 = v6[1];
  *a3 = *v6;
  a3[1] = v7;
  swift_bridgeObjectRetain();
  v8 = (void *)sub_2448EAA70();
  swift_bridgeObjectRelease();
  v9 = (void *)sub_2448EAA70();
  v10 = objc_msgSend(a2, sel_rangeWithName_, v9);
  v12 = v11;

  v13 = objc_msgSend(v8, sel_substringWithRange_, v10, v12);
  sub_2448EAA94();

  v14 = sub_2448EAC98();
  v16 = v15;

  a3[2] = v14;
  a3[3] = v16;
  v17 = type metadata accessor for CrashReportError.MissingEnvironmentObjectError();
  sub_244819704(a1, (uint64_t)a3 + *(int *)(v17 + 24));
  return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a3, 0, 1, v17);
}

uint64_t _s29MissingEnvironmentObjectErrorVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24487F13C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for CrashReport(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t _s29MissingEnvironmentObjectErrorVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24487F1C4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for CrashReport(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_24487F238()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CrashReport(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ConcurrentInvalidatable.observeInvalidation(_:)@<X0>(void (*a1)(__int128 *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (**a5)()@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  swift_retain();
  sub_24487F43C(a1, a2, a5);
  swift_release();
  return swift_release();
}

uint64_t sub_24487F310@<X0>(uint64_t a1@<X0>, void (*a2)(__int128 *)@<X1>, uint64_t a3@<X8>)
{
  return sub_24487F324(a1, a2, a3);
}

uint64_t sub_24487F324@<X0>(uint64_t a1@<X0>, void (*a2)(__int128 *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_QWORD *)a1;
  v5 = *(_BYTE *)(a1 + 65);
  if ((v5 & 1) != 0)
  {
    *(_QWORD *)a3 = v4;
    result = swift_bridgeObjectRetain();
  }
  else
  {
    v13 = *(_BYTE *)(a1 + 64);
    v19 = *(_QWORD *)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 40);
    v16 = *(_QWORD *)(a1 + 48);
    v9 = *(_QWORD *)(a1 + 24);
    v14 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)&v17 = v4;
    *((_QWORD *)&v17 + 1) = v11;
    v18 = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a2(&v17);
    result = sub_244881494(v4, v11, v10, v9, v14, v15, v16, v19, v13, 0);
    v12 = v18;
    *(_OWORD *)a1 = v17;
    *(_QWORD *)(a1 + 16) = v12;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 50) = 0u;
  }
  *(_BYTE *)(a3 + 8) = v5;
  return result;
}

uint64_t sub_24487F43C@<X0>(void (*a1)(__int128 *)@<X0>, uint64_t a2@<X1>, uint64_t (**a3)()@<X8>)
{
  uint64_t v3;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void (*v12)(__int128 *);
  uint64_t v13;
  __int128 v14;
  char v15;
  __int128 v16;
  const char *v17;
  uint64_t v18;
  char v19;

  v12 = a1;
  v13 = a2;
  v5 = *(os_unfair_lock_s **)(*(_QWORD *)(v3 + 32) + 144);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v5 + 21);
  sub_24487F324((uint64_t)&v5[4], (void (*)(__int128 *))sub_244881970, (uint64_t)&v10);
  os_unfair_lock_unlock(v5 + 21);
  swift_release();
  swift_release();
  v6 = v10;
  if (v11 == 1)
  {
    *(_QWORD *)&v14 = v10;
    v12(&v14);
    result = sub_2447F819C(v6, 1);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    v8 = swift_allocObject();
    swift_weakInit();
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = v8;
    *(_QWORD *)(v9 + 24) = v6;
    *(_QWORD *)&v14 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFou"
                      "ndation/InvalidationHandle.swift";
    *((_QWORD *)&v14 + 1) = 130;
    v15 = 2;
    v16 = xmmword_2448F4C70;
    v17 = "makeCancelationToken(for:)";
    v18 = 26;
    v19 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738AF78);
    swift_allocObject();
    result = sub_2447E5D90(&v14, 0, 0, 1, 0, 0xD000000000000011, 0x80000002448F9A50, 0x64656C65636E6163, 0xE800000000000000);
    *a3 = sub_24488197C;
    a3[1] = (uint64_t (*)())v9;
    a3[2] = (uint64_t (*)())result;
  }
  return result;
}

uint64_t sub_24487F5FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  os_unfair_lock_s *v5;
  uint64_t v6;
  void (*v7)(__int128 *);
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  char v16;
  __int128 v17;
  const char *v18;
  uint64_t v19;
  char v20;

  v5 = *(os_unfair_lock_s **)(*(_QWORD *)(v2 + 32) + 144);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v5 + 21);
  sub_24487F324((uint64_t)&v5[4], (void (*)(__int128 *))sub_24488158C, (uint64_t)&v13);
  os_unfair_lock_unlock(v5 + 21);
  swift_release();
  swift_release();
  v6 = v13;
  if (v14 == 1)
  {
    if (MEMORY[0x24951AE5C](a1))
    {
      swift_getObjectType();
      Actor.verifyIsolated(_:file:line:)();
      swift_unknownObjectRelease();
    }
    v7 = *(void (**)(__int128 *))(a1 + 16);
    *(_QWORD *)&v15 = v6;
    v7(&v15);
    result = sub_2447F819C(v6, 1);
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    swift_beginAccess();
    v9 = MEMORY[0x24951AE5C](v2 + 40);
    v10 = *(_QWORD *)(v2 + 48);
    v11 = swift_allocObject();
    swift_weakInit();
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v11;
    *(_QWORD *)(v12 + 24) = v6;
    *(_QWORD *)&v15 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFou"
                      "ndation/InvalidationHandle.swift";
    *((_QWORD *)&v15 + 1) = 130;
    v16 = 2;
    v17 = xmmword_2448F4C80;
    v18 = "makeCancelationToken(for:)";
    v19 = 26;
    v20 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738AF78);
    swift_allocObject();
    result = sub_2447E5D90(&v15, 0, 0, 1, 0, 0xD000000000000011, 0x80000002448F9A50, 0x64656C65636E6163, 0xE800000000000000);
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v10;
    *(_QWORD *)(a2 + 16) = sub_2448815B8;
    *(_QWORD *)(a2 + 24) = v12;
    *(_QWORD *)(a2 + 32) = result;
  }
  return result;
}

uint64_t sub_24487F83C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  if (qword_257389CA0 != -1)
    swift_once();
  v6 = (_QWORD *)((char *)off_25738DB00 + 16);
  v7 = (os_unfair_lock_s *)((char *)off_25738DB00 + 24);
  swift_retain();
  os_unfair_lock_lock(v7);
  sub_24483B130(v6, &v11);
  os_unfair_lock_unlock(v7);
  v8 = v11;
  swift_release();
  swift_retain();
  v9 = sub_2447F6384(a1, a2, v8);
  sub_2447C8F84(v9);
  result = swift_release();
  *a3 = v8;
  return result;
}

uint64_t sub_24487F920@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  _QWORD *v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[5];

  if (qword_257389CA0 != -1)
    swift_once();
  v4 = (_QWORD *)((char *)off_25738DB00 + 16);
  v5 = (os_unfair_lock_s *)((char *)off_25738DB00 + 24);
  swift_retain();
  os_unfair_lock_lock(v5);
  sub_24483B130(v4, v8);
  os_unfair_lock_unlock(v5);
  v6 = v8[0];
  swift_release();
  sub_2447F8254(a1, (uint64_t)v8);
  result = sub_2447F5E10((uint64_t)v8, v6);
  *a2 = v6;
  return result;
}

uint64_t sub_24487F9F4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  _BYTE v16[9];
  _QWORD v17[4];
  uint64_t v18[2];
  char v19;
  __int128 v20;
  const char *v21;
  uint64_t v22;
  char v23;

  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(os_unfair_lock_s **)(v3 + 144);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v4 + 21);
  sub_2447E6008((uint64_t)&v4[4], (void (*)(uint64_t))sub_24488166C, a1, v3, (void (*)(uint64_t *, _QWORD *))nullsub_1, (uint64_t)v17);
  os_unfair_lock_unlock(v4 + 21);
  swift_release();
  result = swift_release();
  v6 = v17[0];
  if (v17[0])
  {
    v8 = v17[2];
    v7 = v17[3];
    v9 = v17[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_244881670(v6, v9, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v10 = *(_QWORD *)(v8 + 16);
    if (v10)
    {
      v18[0] = (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsF"
                        "oundation/InvalidationHandle.swift";
      v18[1] = 130;
      v19 = 2;
      v20 = xmmword_2448F4C90;
      v21 = "_invalidate(callsite:trace:)";
      v22 = 28;
      v23 = 2;
      swift_bridgeObjectRetain_n();
      v11 = (uint64_t *)(v8 + 64);
      do
      {
        v12 = *v11;
        v13 = *(v11 - 4);
        v15 = (void (*)(void))*(v11 - 2);
        v14 = *(_QWORD *)(*v11 + 144);
        swift_unknownObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        os_unfair_lock_lock((os_unfair_lock_t)(v14 + 76));
        sub_2447E5E3C((__int128 *)(v14 + 16), (uint64_t (*)(void))nullsub_1, v18, v12, (void (*)(uint64_t, _QWORD *))sub_2447E1AC8, v16);
        os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 76));
        swift_release();
        if ((v16[0] & 1) == 0)
        {
          if (v13)
          {
            swift_getObjectType();
            Actor.verifyIsolated(_:file:line:)();
          }
          v15();
        }
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        v11 += 5;
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24487FCB8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[9];
  _QWORD v17[4];
  uint64_t v18[2];
  char v19;
  __int128 v20;
  const char *v21;
  uint64_t v22;
  char v23;

  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(os_unfair_lock_s **)(v3 + 144);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v4 + 21);
  sub_2447E623C((uint64_t)&v4[4], (void (*)(uint64_t))sub_24488166C, a1, v3, (void (*)(uint64_t *, _QWORD *))nullsub_1, (uint64_t)v17);
  os_unfair_lock_unlock(v4 + 21);
  swift_release();
  result = swift_release();
  v6 = v17[0];
  if (v17[0])
  {
    v8 = v17[2];
    v7 = v17[3];
    v9 = v17[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_2448817F8(v6, v9, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v10 = *(_QWORD *)(v8 + 16);
    if (v10)
    {
      v18[0] = (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsF"
                        "oundation/InvalidationHandle.swift";
      v18[1] = 130;
      v19 = 2;
      v20 = xmmword_2448F4C90;
      v21 = "_invalidate(callsite:trace:)";
      v22 = 28;
      v23 = 2;
      swift_bridgeObjectRetain_n();
      v11 = (uint64_t *)(v8 + 48);
      do
      {
        v12 = (void (*)(uint64_t))*(v11 - 2);
        v13 = *v11;
        v14 = *(_QWORD *)(*v11 + 144);
        swift_retain();
        swift_retain();
        swift_retain();
        os_unfair_lock_lock((os_unfair_lock_t)(v14 + 76));
        sub_2447E5E3C((__int128 *)(v14 + 16), (uint64_t (*)(void))nullsub_1, v18, v13, (void (*)(uint64_t, _QWORD *))sub_2447E1AC8, v16);
        os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 76));
        v15 = swift_release();
        if ((v16[0] & 1) == 0)
          v12(v15);
        swift_release();
        swift_release();
        v11 += 3;
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24487FF20@<X0>(_QWORD *a1@<X3>, _QWORD *a2@<X4>, __int128 *a3@<X5>, _QWORD *a4@<X8>)
{
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  __int128 v15;
  __int128 v16;
  _BYTE v17[48];
  __int128 v18;
  _BYTE v19[41];
  _OWORD v20[7];
  _OWORD v21[2];

  v6 = *((_BYTE *)a3 + 16);
  v7 = *((_BYTE *)a3 + 56);
  v8 = a2[3];
  v9 = a2[4];
  v10 = *(_BYTE *)(v9 + 32);
  v11 = *(_BYTE *)(v9 + 72);
  *(_QWORD *)&v15 = a2[2];
  *((_QWORD *)&v15 + 1) = v8;
  v16 = *(_OWORD *)(v9 + 16);
  v17[0] = v10;
  *(_OWORD *)&v17[8] = *(_OWORD *)(v9 + 40);
  *(_OWORD *)&v17[24] = *(_OWORD *)(v9 + 56);
  v17[40] = v11;
  v18 = *a3;
  v19[0] = v6;
  *(_OWORD *)&v19[8] = *(__int128 *)((char *)a3 + 24);
  *(_OWORD *)&v19[24] = *(__int128 *)((char *)a3 + 40);
  v19[40] = v7;
  v20[2] = *(_OWORD *)v17;
  v20[3] = *(_OWORD *)&v17[16];
  v20[4] = *(_OWORD *)&v17[32];
  v20[5] = v18;
  v20[0] = v15;
  v20[1] = v16;
  v20[6] = *(_OWORD *)v19;
  v21[0] = *(_OWORD *)&v19[16];
  *(_OWORD *)((char *)v21 + 9) = *(_OWORD *)&v19[25];
  sub_2447F0FD4((uint64_t)v20);
  swift_bridgeObjectRetain();
  sub_2447F9B64((uint64_t)&v15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    a1 = sub_2447C245C(0, a1[2] + 1, 1, a1);
  v13 = a1[2];
  v12 = a1[3];
  if (v13 >= v12 >> 1)
    a1 = sub_2447C245C((_QWORD *)(v12 > 1), v13 + 1, 1, a1);
  a1[2] = v13 + 1;
  sub_2447F0FEC((uint64_t)v20, (uint64_t)&a1[18 * v13 + 4]);
  result = swift_bridgeObjectRelease_n();
  *a4 = a1;
  return result;
}

uint64_t sub_244880088(_OWORD *a1)
{
  _QWORD *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t ObjectType;
  _OWORD v6[2];
  _OWORD v7[2];

  v2 = a1[1];
  v6[0] = *a1;
  v6[1] = v2;
  v7[0] = a1[2];
  *(_OWORD *)((char *)v7 + 9) = *(_OWORD *)((char *)a1 + 41);
  v3 = *v1 + 40;
  swift_beginAccess();
  if (MEMORY[0x24951AE5C](v3))
  {
    ObjectType = swift_getObjectType();
    MEMORY[0x24BDAC7A8](ObjectType);
    Actor.verifyIsolated(_:file:line:)();
    swift_unknownObjectRelease();
  }
  swift_retain();
  sub_24487F9F4((uint64_t *)v6);
  return swift_release();
}

uint64_t IsolatedInvalidatable.invalidate(callsite:trace:)(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t ObjectType;
  _OWORD v11[2];
  _OWORD v12[2];

  v6 = a1[1];
  v11[0] = *a1;
  v11[1] = v6;
  v12[0] = a1[2];
  *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)((char *)a1 + 41);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 16);
  v8 = v7(a3, a4) + 40;
  swift_beginAccess();
  if (MEMORY[0x24951AE5C](v8))
  {
    swift_release();
    ObjectType = swift_getObjectType();
    MEMORY[0x24BDAC7A8](ObjectType);
    Actor.verifyIsolated(_:file:line:)();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  v7(a3, a4);
  sub_24487F9F4((uint64_t *)v11);
  return swift_release();
}

uint64_t sub_2448802C4(_OWORD *a1)
{
  __int128 v1;
  _OWORD v3[2];
  _OWORD v4[2];

  v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  v4[0] = a1[2];
  *(_OWORD *)((char *)v4 + 9) = *(_OWORD *)((char *)a1 + 41);
  swift_retain();
  sub_24487FCB8((uint64_t *)v3);
  return swift_release();
}

uint64_t ConcurrentInvalidatable.invalidate(callsite:trace:)(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  _OWORD v6[2];
  _OWORD v7[2];

  v4 = a1[1];
  v6[0] = *a1;
  v6[1] = v4;
  v7[0] = a1[2];
  *(_OWORD *)((char *)v7 + 9) = *(_OWORD *)((char *)a1 + 41);
  (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  sub_24487FCB8((uint64_t *)v6);
  return swift_release();
}

uint64_t sub_24488037C(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return IsolatedInvalidatable.invalidate(callsite:trace:)(a1, a2, a3, (uint64_t)&off_2515847C0);
}

uint64_t AnyInvalidatable.invalidate(file:line:column:function:trace:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[2];
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v11 = *a9;
  v14[0] = a1;
  v14[1] = a2;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  v19 = a7;
  v20 = a8;
  v13 = v11;
  return (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t, uint64_t))(a11 + 8))(v14, &v13, a10, a11);
}

uint64_t IsolatedInvalidatable.onInvalidation(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  uint64_t v12;

  result = IsolatedInvalidatable.observeInvalidation(_:)(a1, a2, a3, a4, (uint64_t)v11);
  v8 = v12;
  if (v12)
  {
    v10 = v11[0];
    v9 = v11[1];
    CancelationToken<>.cancel<A>(onInvalidationOf:)(v4, a3, a4);
    return sub_244880734(v10, v9, v8);
  }
  return result;
}

uint64_t ConcurrentInvalidatable.invalidationTrace.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t sub_244880494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v2 + 32) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v3;
  *v3 = v0;
  v3[1] = sub_244880538;
  return sub_2448EBB74();
}

uint64_t sub_244880538()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_244880588()
{
  sub_2448EB79C();
  sub_2448EABC0();
  Callsite.description.getter();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  InvalidationTrace.description.getter();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  return 0;
}

uint64_t sub_244880674()
{
  return sub_244880588();
}

uint64_t IsolatedInvalidatable.observeInvalidation(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  _BYTE v10[8];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  swift_beginAccess();
  MEMORY[0x24951AE5C](v8 + 40);
  v11 = *(_QWORD *)(v8 + 48);
  swift_unknownObjectWeakInit();
  swift_retain();
  swift_unknownObjectRelease();
  v12 = a1;
  v13 = a2;
  sub_24487F5FC((uint64_t)v10, a5);
  sub_2447F8228((uint64_t)v10);
  return swift_release();
}

uint64_t sub_244880734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_release();
    swift_release();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t IsolatedInvalidatable.invalidationTrace(on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  swift_getObjectType();
  sub_2448EAF14();
  return swift_task_switch();
}

uint64_t sub_2448807DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v4;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v4 + 32) = v2;
  *(_QWORD *)(v4 + 40) = v3;
  *(_QWORD *)(v4 + 48) = v1;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v5;
  *v5 = v0;
  v5[1] = sub_244880890;
  return sub_2448EBB74();
}

uint64_t sub_244880890()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_2448808E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738F750);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  swift_getObjectType();
  Actor.verifyIsolated(_:file:line:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v13 + v12, (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  IsolatedInvalidatable.onInvalidation(_:)((uint64_t)sub_244881588, v13, a5, a6);
  return swift_release();
}

uint64_t IsolatedInvalidatable.invalidation(on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v9;

  v4[3] = a1;
  v4[4] = a2;
  v9 = (_QWORD *)swift_task_alloc();
  v4[5] = v9;
  *v9 = v4;
  v9[1] = sub_244880A9C;
  return IsolatedInvalidatable.invalidationTrace(on:)((uint64_t)(v4 + 2), a1, a2, a3, a4);
}

uint64_t sub_244880A9C()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_getObjectType();
  sub_2448EAF14();
  return swift_task_switch();
}

uint64_t sub_244880B18()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t IsolatedInvalidatable.trackInvalidation<A>(file:line:column:function:of:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return sub_244880FE8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))sub_244880B54);
}

uint64_t sub_244880B54(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD v19[2];
  uint64_t v20;

  (*(void (**)(uint64_t, uint64_t))(a5 + 16))(a3, a5);
  v11 = swift_allocObject();
  swift_weakInit();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v11;
  v13 = a2[1];
  *(_OWORD *)(v12 + 24) = *a2;
  *(_OWORD *)(v12 + 40) = v13;
  *(_OWORD *)(v12 + 56) = a2[2];
  *(_OWORD *)(v12 + 65) = *(_OWORD *)((char *)a2 + 41);
  swift_retain();
  IsolatedInvalidatable.observeInvalidation(_:)((uint64_t)sub_244881560, v12, a4, a6, (uint64_t)v19);
  swift_release();
  swift_release();
  v14 = v20;
  if (!v20)
    return swift_release();
  v15 = v19[0];
  v16 = v19[1];
  CancelationToken<>.cancel<A>(onInvalidationOf:)(v18, a3, a5);
  swift_release();
  return sub_244880734(v15, v16, v14);
}

uint64_t IsolatedInvalidatable.bindInvalidation(file:line:column:function:of:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_2448811D4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (void (*)(_QWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))sub_244880B54);
}

uint64_t IsolatedInvalidatable.isInvalidated.getter(uint64_t a1, uint64_t a2)
{
  return sub_2448813C8(a1, a2, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_244813010);
}

uint64_t ConcurrentInvalidatable.onInvalidation(_:)(void (*a1)(__int128 *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t (*v8)();
  uint64_t (*v9)();

  result = ConcurrentInvalidatable.observeInvalidation(_:)(a1, a2, a3, a4, &v9);
  v8 = v9;
  if (v9)
  {
    CancelationToken<>.cancel<A>(onInvalidationOf:)(v4, a3, a4);
    return sub_2447C6AE8((uint64_t)v8);
  }
  return result;
}

uint64_t sub_244880D8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738F750);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  v10 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v11 + v10, (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  ConcurrentInvalidatable.onInvalidation(_:)((void (*)(__int128 *))sub_244881588, v11, a3, a4);
  return swift_release();
}

uint64_t sub_244880E84(uint64_t a1)
{
  uint64_t *v1;

  return sub_244880D8C(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_244880E90(uint64_t a1)
{
  uint64_t *v1;

  return sub_2448808E0(a1, v1[4], v1[5], v1[6], v1[2], v1[3]);
}

uint64_t sub_244880EA0()
{
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738F750);
  return sub_2448EAF38();
}

uint64_t ConcurrentInvalidatable.invalidation.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v6;
  *v6 = v3;
  v6[1] = sub_244880F5C;
  v6[4] = a2;
  v6[5] = v2;
  v6[2] = v3 + 16;
  v6[3] = a1;
  return swift_task_switch();
}

uint64_t sub_244880F5C()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t ConcurrentInvalidatable.trackInvalidation<A>(file:line:column:function:of:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return sub_244880FE8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))sub_24488103C);
}

uint64_t sub_244880FE8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t (*a14)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  _QWORD v15[2];
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v15[0] = a1;
  v15[1] = a2;
  v16 = a3;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  v20 = a7;
  v21 = a8;
  return a14(a9, v15, a10, a11, a12, a13);
}

uint64_t sub_24488103C(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t (*v14)();
  uint64_t v16;
  uint64_t (*v17)();

  (*(void (**)(uint64_t, uint64_t))(a5 + 16))(a3, a5);
  v11 = swift_allocObject();
  swift_weakInit();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v11;
  v13 = a2[1];
  *(_OWORD *)(v12 + 24) = *a2;
  *(_OWORD *)(v12 + 40) = v13;
  *(_OWORD *)(v12 + 56) = a2[2];
  *(_OWORD *)(v12 + 65) = *(_OWORD *)((char *)a2 + 41);
  swift_retain();
  ConcurrentInvalidatable.observeInvalidation(_:)((void (*)(__int128 *))sub_244881518, v12, a4, a6, &v17);
  swift_release();
  swift_release();
  v14 = v17;
  if (!v17)
    return swift_release();
  CancelationToken<>.cancel<A>(onInvalidationOf:)(v16, a3, a5);
  swift_release();
  return sub_2447C6AE8((uint64_t)v14);
}

uint64_t ConcurrentInvalidatable.bindInvalidation(file:line:column:function:of:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_2448811D4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (void (*)(_QWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))sub_24488103C);
}

uint64_t sub_2448811D4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, void (*a12)(_QWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  _QWORD *v12;
  uint64_t result;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;

  result = a9;
  v15 = *(_QWORD *)(a9 + 16);
  if (v15)
  {
    v16 = (_QWORD *)(a9 + 32);
    v30 = a1;
    swift_bridgeObjectRetain();
    v21 = v12;
    do
    {
      v29 = v15;
      v17 = v16[3];
      v18 = v16[4];
      v19 = __swift_project_boxed_opaque_existential_1(v16, v17);
      v32 = v30;
      v33 = a2;
      v34 = a3;
      v35 = a4;
      v36 = a5;
      v37 = a6;
      v38 = a7;
      v39 = a8;
      a12(v19, &v32, a10, v17, a11, v18);
      v20 = v16[3];
      v28 = v16[4];
      __swift_project_boxed_opaque_existential_1(v16, v20);
      v32 = v30;
      v33 = a2;
      v34 = a3;
      v35 = a4;
      v36 = a5;
      v37 = a6;
      v38 = a7;
      v39 = a8;
      a12(v21, &v32, v20, a10, v28, a11);
      v16 += 5;
      v15 = v29 - 1;
    }
    while (v29 != 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_244881348(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t result;

  v6 = *a1;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    a4(a3, v6);
    return swift_release();
  }
  return result;
}

Swift::Bool __swiftcall ConcurrentInvalidatable.peekIsInvalidated()()
{
  uint64_t v0;
  uint64_t v1;

  return sub_2448813C8(v0, v1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_244813010);
}

uint64_t sub_2448813C8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, os_unfair_lock_s *))
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v7[8];
  char v8;
  unsigned __int8 v9;

  v4 = *(os_unfair_lock_s **)(*(_QWORD *)((*(uint64_t (**)(void))(a2 + 16))() + 32) + 144);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v4 + 21);
  a3(v7, v4 + 4);
  os_unfair_lock_unlock(v4 + 21);
  swift_release();
  swift_release();
  v5 = v9;
  sub_244881494(v7[0], v7[1], v7[2], v7[3], v7[4], v7[5], v7[6], v7[7], v8, v9);
  swift_release();
  return v5;
}

uint64_t sub_244881494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  if ((a10 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t dispatch thunk of AnyInvalidatable.invalidate(callsite:trace:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of IsolatedInvalidatable.invalidationHandle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_2448814F4()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_244881518(uint64_t *a1)
{
  uint64_t v1;

  return sub_244881348(a1, *(_QWORD *)(v1 + 16), v1 + 24, (void (*)(uint64_t, uint64_t))sub_24487FCB8);
}

uint64_t sub_24488153C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_244881560(uint64_t *a1)
{
  uint64_t v1;

  return sub_244881348(a1, *(_QWORD *)(v1 + 16), v1 + 24, (void (*)(uint64_t, uint64_t))sub_24487F9F4);
}

uint64_t sub_24488158C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_24487F920(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_244881594()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2448815B8()
{
  uint64_t v0;

  return sub_2447F723C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t objectdestroy_16Tm()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738F750);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_244881628()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738F750);
  return sub_244880EA0();
}

uint64_t sub_244881670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v7 = a2 + 32;
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v9 = 0;
    while (v9 < v5)
    {
      v10 = *(_QWORD *)(v7 + 8 * v9);
      v12 = v10;
      if (!*(_QWORD *)(a1 + 16))
        goto LABEL_12;
      result = sub_244828D70(v10);
      if ((v11 & 1) == 0)
        goto LABEL_13;
      sub_2447F8254(*(_QWORD *)(a1 + 56) + 32 * result, (uint64_t)v13);
      v14 = v10;
      sub_2447F8254((uint64_t)v13, (uint64_t)&v15);
      sub_2448818E8((uint64_t)&v12);
      sub_244881928((uint64_t)&v14, (uint64_t)&v12);
      if (MEMORY[0x24951AE5C](v13))
      {
        swift_getObjectType();
        Actor.verifyIsolated(_:file:line:)();
        swift_unknownObjectRelease();
      }
      ++v9;
      v16 = a3;
      ((void (*)(uint64_t *))v13[2])(&v16);
      result = sub_2448818E8((uint64_t)&v12);
      v5 = *(_QWORD *)(a2 + 16);
      if (v9 == v5)
        goto LABEL_10;
    }
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_10:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_2448817F8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void (*v9)(uint64_t *);
  uint64_t v10;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    v6 = result;
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v7 = 0;
    while (*(_QWORD *)(v6 + 16))
    {
      result = sub_244828D70(*(_QWORD *)(a2 + 8 * v7 + 32));
      if ((v8 & 1) == 0)
        goto LABEL_9;
      ++v7;
      v9 = *(void (**)(uint64_t *))(*(_QWORD *)(v6 + 56) + 16 * result);
      v10 = a3;
      swift_retain();
      v9(&v10);
      result = swift_release();
      if (v3 == v7)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
LABEL_9:
    __break(1u);
  }
  return result;
}

uint64_t sub_2448818BC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_24487FF20(*(_QWORD **)(v1 + 16), **(_QWORD ***)(v1 + 24), *(__int128 **)(v1 + 32), a1);
}

uint64_t sub_2448818E8(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738F758);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_244881928(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738F758);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_244881970@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_24487F83C(**(_QWORD **)(v1 + 16), *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8), a1);
}

uint64_t sub_24488197C()
{
  uint64_t v0;

  return sub_2447F73E0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t static AsyncStream.empty.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];
  uint64_t v7;

  v2 = sub_2448EAFA4();
  MEMORY[0x24BDAC7A8](v2);
  v7 = a1;
  (*(void (**)(_BYTE *, _QWORD))(v3 + 104))(&v6[-v4], *MEMORY[0x24BEE6A10]);
  return sub_2448EB01C();
}

uint64_t sub_244881A3C()
{
  sub_2448EAFD4();
  return sub_2448EAFC8();
}

uint64_t AsyncStream.filterAndMap<A>(transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = v5;
  v21 = a1;
  v22 = a5;
  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24951AC70](MEMORY[0x24BEE6AA8], v13);
  v14 = sub_2448EBB50();
  MEMORY[0x24BDAC7A8](v14);
  sub_2448EBB44();
  v20 = swift_allocBox();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v6, a3);
  v15 = (_QWORD *)swift_allocObject();
  v16 = *(_QWORD *)(a3 + 16);
  v15[2] = v16;
  v15[3] = a4;
  v15[4] = v21;
  v15[5] = a2;
  swift_retain();
  sub_2448EB0AC();
  swift_release();
  sub_2448EBB2C();
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = v16;
  v17[3] = a4;
  v17[4] = v20;
  return sub_2448EB004();
}

uint64_t sub_244881C20(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v3;

  a3(a2);
  return sub_244881EEC(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_244881C5C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_244881C80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v6)(uint64_t);
  _QWORD *v7;

  v6 = *(void (**)(uint64_t))(v2 + 32);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_2447C81F0;
  return ((uint64_t (*)(uint64_t, uint64_t, void (*)(uint64_t)))((char *)&dword_25738F760
                                                                                 + dword_25738F760))(a1, a2, v6);
}

uint64_t sub_244881D14(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[5] = a1;
  v2 = sub_2448EB010();
  MEMORY[0x24951AC70](MEMORY[0x24BEE6AA8], v2);
  v1[6] = sub_2448EBB44();
  v1[7] = swift_projectBox();
  return swift_task_switch();
}

uint64_t sub_244881DA0()
{
  uint64_t v0;
  _QWORD *v1;

  swift_beginAccess();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v1;
  *v1 = v0;
  v1[1] = sub_244881E08;
  return sub_2448EBB38();
}

uint64_t sub_244881E08()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_endAccess();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_244881E5C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_244881E80(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_2447C62E8;
  return sub_244881D14(a1);
}

uint64_t sub_244881EEC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t Sequence<>.identified()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;

  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v10, v4, a1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return IdentifiedSet.init<A>(_:)((uint64_t)v10, AssociatedTypeWitness, a1, a3, a2, a4);
}

uint64_t RandomAccessCollection<>.binarySearchForFirstElementIndexLessThanOrEqual(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[5];
  uint64_t v18;

  v16 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)&v13 - v6;
  if ((sub_2448EB208() & 1) != 0)
    return 0;
  sub_2448EB1E4();
  result = sub_2448EB214();
  v9 = v17[0] - 1;
  if (__OFSUB__(v17[0], 1))
    goto LABEL_19;
  v10 = v18;
  if (v9 >= v18)
  {
    v15 = 0;
    v14 = 1;
    while (!__OFSUB__(v9, v10))
    {
      v11 = v10 + (v9 - v10) / 2;
      if (__OFADD__(v10, (v9 - v10) / 2))
        goto LABEL_16;
      v17[4] = v10 + (v9 - v10) / 2;
      v12 = sub_2448EB2E0();
      (*(void (**)(char *))(v5 + 16))(v7);
      ((void (*)(_QWORD *, _QWORD))v12)(v17, 0);
      LOBYTE(v12) = sub_2448EA9B0();
      result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
      if ((v12 & 1) != 0)
      {
        v9 = v11 - 1;
        if (__OFSUB__(v11, 1))
          goto LABEL_18;
        v10 = v18;
        if (v9 < v18)
          return v15;
      }
      else
      {
        v10 = v11 + 1;
        if (__OFADD__(v11, 1))
          goto LABEL_17;
        v14 = 0;
        v18 = v11 + 1;
        v15 = v11;
        if (v9 < v10)
          return v15;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    return result;
  }
  v15 = 0;
  v14 = 1;
  return v15;
}

uint64_t Collection.compacted<A>(type:)()
{
  return sub_2448EACE0();
}

uint64_t RandomAccessCollection.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  char v6;
  void (*v7)(_BYTE *, _QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[32];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v5 = &v14[-v4];
  sub_2448EB214();
  swift_getAssociatedConformanceWitness();
  v6 = sub_2448EA9BC();
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
  if ((v6 & 1) != 0)
  {
    v7 = (void (*)(_BYTE *, _QWORD))sub_2448EB2E0();
    v9 = v8;
    v10 = swift_getAssociatedTypeWitness();
    v11 = *(_QWORD *)(v10 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a1, v9, v10);
    v7(v14, 0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
  }
  else
  {
    v13 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
}

uint64_t Collection<>.uniqued()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  swift_getAssociatedTypeWitness();
  return sub_2448EB16C();
}

double Collection<>.orderedUniqued()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;

  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v8, v3, a1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return OrderedSet.init<A>(_:)((uint64_t)v8, AssociatedTypeWitness, a1, a2, a3);
}

double Sequence<>.orderedIdentified()@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;

  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v6, v2, a1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return OrderedIdentifiedSet.init<A>(_:)((uint64_t)v6, AssociatedTypeWitness, a1, a2);
}

uint64_t sub_2448825D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[4];
  _QWORD v19[4];

  v4 = v3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A208);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_244883CDC(a1, (uint64_t)v9);
  v10 = sub_2448EAF74();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_2447C7D14((uint64_t)v9);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v12 = sub_2448EAF14();
      v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_2448EAF68();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v15 = *v4;
  v16 = (_QWORD *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v16 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  v18[1] = 1;
  v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t sub_244882754@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_2448EB508();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t Collection.only.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;

  if (sub_2448EB1F0() == 1)
    return sub_2448EB250();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t LazySequence<>.compacted<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;

  v7 = (_QWORD *)swift_allocObject();
  v7[2] = *(_QWORD *)(a2 + 16);
  v7[3] = a3;
  v7[4] = a4;
  MEMORY[0x24951AC70](MEMORY[0x24BEE25B0], a2);
  sub_2448EBA60();
  return swift_release();
}

uint64_t Collection<>.hasPrefix<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v25 = a6;
  v10 = *(_QWORD *)(a4 + 8);
  v11 = *(_QWORD *)(a5 + 8);
  v28 = a2;
  v29 = a3;
  v30 = v10;
  v31 = v11;
  v12 = sub_2448EB7E4();
  v26 = *(_QWORD *)(v12 - 8);
  v27 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v24 = (char *)&v23 - v13;
  v14 = sub_2448EB1F0();
  if (sub_2448EB1F0() >= v14)
  {
    v16 = v24;
    v17 = sub_2448EBC64();
    v18 = MEMORY[0x24BDAC7A8](v17);
    *(&v23 - 6) = a2;
    *(&v23 - 5) = a3;
    *(&v23 - 4) = a4;
    *(&v23 - 3) = a5;
    *(&v23 - 2) = v25;
    MEMORY[0x24BDAC7A8](v18);
    *(&v23 - 8) = a2;
    *(&v23 - 7) = a3;
    *(&v23 - 6) = a4;
    *(&v23 - 5) = a5;
    *(&v23 - 4) = v19;
    *(&v23 - 3) = (uint64_t)sub_244882AD8;
    *(&v23 - 2) = v20;
    v21 = v27;
    MEMORY[0x24951AC70](MEMORY[0x24BEE2620], v27);
    v15 = sub_2448EACD4();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v16, v21);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_244882A80()
{
  return swift_deallocObject();
}

uint64_t sub_244882A90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_2448EB508();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t sub_244882AD8()
{
  swift_getAssociatedTypeWitness();
  return sub_2448EAA64() & 1;
}

uint64_t sub_244882B44(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t TupleTypeMetadata2;

  v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 56);
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v3(a1, a1 + *(int *)(TupleTypeMetadata2 + 48)) & 1;
}

uint64_t Collection.asyncChildTaskMap<A>(width:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;

  v7[10] = a6;
  v7[11] = v6;
  v7[8] = a4;
  v7[9] = a5;
  v7[6] = a2;
  v7[7] = a3;
  v7[5] = a1;
  return swift_task_switch();
}

uint64_t sub_244882BE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  __int128 v8;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 40);
  v8 = *(_OWORD *)(v0 + 72);
  swift_getTupleTypeMetadata2();
  *(_QWORD *)(v0 + 96) = sub_2448EAEE4();
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v4;
  v5 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v4 + 16) = v2;
  *(_OWORD *)(v4 + 24) = v8;
  *(_QWORD *)(v4 + 40) = v1;
  *(_OWORD *)(v4 + 48) = v5;
  *(_QWORD *)(v4 + 64) = v3;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v6;
  *v6 = v0;
  v6[1] = sub_244882CEC;
  return sub_2448EBA90();
}

uint64_t sub_244882CEC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_244882D58()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t KeyPath;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(char **)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v0 + 24) = *(_QWORD *)(v0 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  v5[2] = v4;
  v5[3] = v2;
  v5[4] = v3;
  MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v1);
  v6 = sub_2448EAD58();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  *(_QWORD *)(v0 + 32) = v6;
  v7 = (_QWORD *)swift_task_alloc();
  *v7 = v4;
  v7[1] = v2;
  v7[2] = v3;
  KeyPath = swift_getKeyPath();
  swift_task_dealloc();
  v9 = (_QWORD *)swift_task_alloc();
  v9[2] = v4;
  v9[3] = v3;
  v9[4] = KeyPath;
  v10 = MEMORY[0x24951AC70](MEMORY[0x24BEE12E0], v1);
  v12 = sub_2447D31DC((void (*)(char *, char *))sub_244883B5C, (uint64_t)v9, v1, v2, MEMORY[0x24BEE4078], v10, MEMORY[0x24BEE40A8], v11);
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v12);
}

uint64_t sub_244882EB8()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_244882EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v14;

  v8[10] = a8;
  v8[11] = v14;
  v8[8] = a6;
  v8[9] = a7;
  v8[6] = a4;
  v8[7] = a5;
  v8[4] = a2;
  v8[5] = a3;
  v8[3] = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8[12] = TupleTypeMetadata2;
  v8[13] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v8[14] = swift_task_alloc();
  v12 = sub_2448EB508();
  v8[15] = v12;
  v8[16] = *(_QWORD *)(v12 - 8);
  v8[17] = swift_task_alloc();
  v8[18] = *(_QWORD *)(a8 - 8);
  v8[19] = swift_task_alloc();
  v8[20] = *(_QWORD *)(a7 - 8);
  v8[21] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_244882FEC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;

  v2 = v0[20];
  v1 = v0[21];
  v4 = v0[8];
  v3 = v0[9];
  v5 = v0[5];
  v6 = swift_allocObject();
  v0[22] = v6;
  *(_QWORD *)(v6 + 16) = 0;
  swift_getAssociatedTypeWitness();
  v7 = swift_allocBox();
  v0[23] = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v3);
  result = sub_2448EACB0();
  if (v4 < 0)
  {
    __break(1u);
  }
  else
  {
    if (v0[8] && (sub_24488357C(v7, (char *)v6, v0[4], v0[6], v0[7], v0[9], v0[10], v0[11]) & 1) != 0)
    {
      v9 = 0;
      do
        ++v9;
      while (v9 != v0[8] && (sub_24488357C(v7, (char *)v6, v0[4], v0[6], v0[7], v0[9], v0[10], v0[11]) & 1) != 0);
    }
    v0[2] = sub_2448EAE54();
    v10 = (_QWORD *)swift_task_alloc();
    v0[24] = v10;
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
    sub_2448EB094();
    *v10 = v0;
    v10[1] = sub_244883190;
    return sub_2448EB07C();
  }
  return result;
}

uint64_t sub_244883190()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2448831F4()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v1 = *(char **)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 96);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v0 + 104) + 48))(v1, 1, v2) == 1)
  {
    v3 = *(_QWORD **)(v0 + 24);
    (*(void (**)(char *, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(v1, *(_QWORD *)(v0 + 120));
    swift_release();
    swift_release();
    *v3 = *(_QWORD *)(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  v5 = *(_QWORD *)(v0 + 200);
  v7 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 152);
  v8 = *(_QWORD **)(v0 + 112);
  v9 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)v1;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v6, &v1[*(int *)(v2 + 48)], v9);
  v11 = (char *)v8 + *(int *)(v2 + 48);
  *v8 = v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v11, v6, v9);
  sub_2448EAEE4();
  sub_2448EAE9C();
  sub_2448EB070();
  if (v5)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 80));
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  v14 = *(_QWORD *)(v0 + 144);
  v13 = *(_QWORD *)(v0 + 152);
  v15 = *(_QWORD *)(v0 + 80);
  sub_24488357C(*(_QWORD *)(v0 + 184), *(char **)(v0 + 176), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 72), v15, *(_QWORD *)(v0 + 88));
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 192) = v16;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  sub_2448EB094();
  *v16 = v0;
  v16[1] = sub_244883190;
  return sub_2448EB07C();
}

uint64_t sub_244883448()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2448834D8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[5];
  v9 = v2[6];
  v10 = v2[7];
  v11 = v2[8];
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v12;
  *v12 = v3;
  v12[1] = sub_2447C81F0;
  return sub_244882EEC(a1, a2, v8, v9, v10, v11, v6, v7);
}

uint64_t sub_24488357C(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;

  v40 = a5;
  v41 = a7;
  v39 = a4;
  v43 = a3;
  v35 = a2;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A208);
  MEMORY[0x24BDAC7A8](v10);
  v42 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v34 = sub_2448EB508();
  v13 = *(_QWORD *)(v34 - 8);
  v14 = MEMORY[0x24BDAC7A8](v34);
  v16 = (char *)&v33 - v15;
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v18 = *(_QWORD *)(v17 + 64);
  v19 = MEMORY[0x24BDAC7A8](v14);
  v36 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v44 = (char *)&v33 - v20;
  swift_getAssociatedTypeWitness();
  swift_projectBox();
  swift_beginAccess();
  v37 = a6;
  swift_getAssociatedConformanceWitness();
  sub_2448EB58C();
  swift_endAccess();
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, AssociatedTypeWitness);
  if (v21 == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v34);
    return v21 != 1;
  }
  v22 = v35 + 16;
  v35 = *(char **)(v17 + 32);
  v23 = v44;
  ((void (*)(char *, char *, uint64_t))v35)(v44, v16, AssociatedTypeWitness);
  v24 = sub_2448EAF74();
  v25 = (uint64_t)v42;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v42, 1, 1, v24);
  swift_beginAccess();
  v26 = *v22;
  v27 = v36;
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v36, v23, AssociatedTypeWitness);
  v28 = (*(unsigned __int8 *)(v17 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v29 = (_QWORD *)swift_allocObject();
  v29[2] = 0;
  v29[3] = 0;
  v30 = v41;
  v29[4] = v37;
  v29[5] = v30;
  v29[6] = v38;
  v29[7] = v26;
  v31 = v40;
  v29[8] = v39;
  v29[9] = v31;
  ((void (*)(char *, char *, uint64_t))v35)((char *)v29 + v28, v27, AssociatedTypeWitness);
  swift_retain();
  swift_getTupleTypeMetadata2();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  sub_2448EB094();
  sub_2448825D0(v25, (uint64_t)&unk_25738F7A0, (uint64_t)v29);
  sub_2447C7D14(v25);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v44, AssociatedTypeWitness);
  result = swift_beginAccess();
  if (!__OFADD__(*v22, 1))
  {
    ++*v22;
    return v21 != 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_2448838FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;

  v7[6] = a7;
  v7[7] = v9;
  v7[4] = a5;
  v7[5] = a6;
  v7[2] = a1;
  v7[3] = a4;
  return swift_task_switch();
}

uint64_t sub_244883924()
{
  _QWORD *v0;
  int *v1;
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  _QWORD *v5;
  int *v7;

  sub_2448EB070();
  v2 = v0[3];
  v1 = (int *)v0[4];
  v3 = (_QWORD *)v0[2];
  v4 = (char *)v3 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  *v3 = v2;
  v7 = (int *)((char *)v1 + *v1);
  v5 = (_QWORD *)swift_task_alloc();
  v0[8] = v5;
  *v5 = v0;
  v5[1] = sub_2448839EC;
  return ((uint64_t (*)(char *, _QWORD))v7)(v4, v0[6]);
}

uint64_t sub_2448839EC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

BOOL sub_244883A34(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

uint64_t sub_244883A48(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;

  v2 = (uint64_t *)(*a2 + *MEMORY[0x24BEE46A8]);
  v3 = *v2;
  v4 = *(_QWORD *)(*v2 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (uint64_t *)((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = (char *)MEMORY[0x24BDAC7A8](v5);
  v10 = *(int *)(v3 + 48);
  v11 = (char *)&v18 + v10 - v9;
  v12 = *(_QWORD *)v8;
  *(uint64_t *)((char *)&v18 - v9) = *(_QWORD *)v8;
  v14 = *(_QWORD *)(v13 + 8);
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v11, &v8[v10], v14);
  v16 = (char *)v7 + *(int *)(v3 + 48);
  *v7 = v12;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v16, v11, v14);
  swift_getAtKeyPath();
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_244883B5C(uint64_t a1)
{
  uint64_t v1;

  return sub_244883A48(a1, *(_QWORD **)(v1 + 32));
}

uint64_t sub_244883B7C()
{
  return swift_deallocObject();
}

uint64_t sub_244883B8C()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t sub_244883C24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 80);
  v6 = *(_QWORD *)(v1 + 56);
  v7 = v1 + ((v5 + 80) & ~v5);
  v8 = swift_task_alloc();
  v9 = *(_OWORD *)(v1 + 64);
  *(_QWORD *)(v2 + 16) = v8;
  *(_QWORD *)v8 = v2;
  *(_QWORD *)(v8 + 8) = sub_2447C62E8;
  *(_QWORD *)(v8 + 48) = v7;
  *(_QWORD *)(v8 + 56) = v4;
  *(_OWORD *)(v8 + 32) = v9;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = v6;
  return swift_task_switch();
}

uint64_t sub_244883CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t OS_os_log.logLargeString(_:publicPreamble:linePrefix:type:)(uint64_t (*a1)(void), uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, os_log_type_t a7)
{
  uint64_t v7;
  NSObject *v8;
  uint64_t result;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL4 v39;
  int64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;

  result = os_log_type_enabled(v8, a7);
  if ((_DWORD)result)
  {
    v69 = a1();
    v16 = v15;
    if ((a4 & 0x1000000000000000) != 0)
      goto LABEL_101;
    if ((a4 & 0x2000000000000000) != 0)
      v17 = HIBYTE(a4) & 0xF;
    else
      v17 = a3 & 0xFFFFFFFFFFFFLL;
    v18 = v17 + 2;
    if (__OFADD__(v17, 2))
      goto LABEL_103;
LABEL_7:
    v7 = HIBYTE(v16) & 0xF;
    if ((v16 & 0x1000000000000000) != 0)
    {
LABEL_104:
      result = sub_2448EABE4();
      v19 = __OFADD__(v18, result);
      v20 = v18 + result;
      if (!v19)
        goto LABEL_12;
    }
    else
    {
      if ((v16 & 0x2000000000000000) != 0)
        result = HIBYTE(v16) & 0xF;
      else
        result = v69 & 0xFFFFFFFFFFFFLL;
      v19 = __OFADD__(v18, result);
      v20 = v18 + result;
      if (!v19)
      {
LABEL_12:
        __swift_instantiateConcreteTypeFromMangledName(&qword_25738C210);
        if (v20 < 1021)
        {
          v24 = swift_allocObject();
          *(_OWORD *)(v24 + 16) = xmmword_2448ECFF0;
          v25 = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v24 + 56) = MEMORY[0x24BEE0D00];
          v26 = sub_24480514C();
          *(_QWORD *)(v24 + 32) = a3;
          *(_QWORD *)(v24 + 40) = a4;
          *(_QWORD *)(v24 + 96) = v25;
          *(_QWORD *)(v24 + 104) = v26;
          *(_QWORD *)(v24 + 64) = v26;
          *(_QWORD *)(v24 + 72) = 2618;
          *(_QWORD *)(v24 + 80) = 0xE200000000000000;
          *(_QWORD *)(v24 + 136) = v25;
          *(_QWORD *)(v24 + 144) = v26;
          *(_QWORD *)(v24 + 112) = v69;
          *(_QWORD *)(v24 + 120) = v16;
          swift_bridgeObjectRetain();
          sub_2448EA5A8();
          return swift_bridgeObjectRelease();
        }
        v21 = swift_allocObject();
        *(_OWORD *)(v21 + 16) = xmmword_2448ECF10;
        *(_QWORD *)(v21 + 56) = MEMORY[0x24BEE0D00];
        v64 = sub_24480514C();
        *(_QWORD *)(v21 + 64) = v64;
        *(_QWORD *)(v21 + 32) = a3;
        *(_QWORD *)(v21 + 40) = a4;
        swift_bridgeObjectRetain();
        sub_2448EA5A8();
        swift_bridgeObjectRelease();
        if (a6)
        {
          swift_bridgeObjectRetain();
          sub_2448EABC0();
          v23 = a5;
          v22 = a6;
        }
        else
        {
          v23 = 0;
          v22 = 0xE000000000000000;
        }
        a3 = v69;
        v65 = v22;
        result = sub_2448EAB78();
        v27 = 1020 - result;
        if (!__OFSUB__(1020, result))
        {
          v28 = 990 - result;
          if (!__OFSUB__(v27, 30))
          {
            if ((v16 & 0x1000000000000000) != 0)
            {
              result = sub_2448EABE4();
              if (!v28)
                goto LABEL_34;
            }
            else
            {
              if ((v16 & 0x2000000000000000) == 0)
              {
                result = v69 & 0xFFFFFFFFFFFFLL;
                if (v27 == 30)
                  goto LABEL_34;
                goto LABEL_25;
              }
              result = v7;
              if (v27 == 30)
              {
LABEL_34:
                __break(1u);
                goto LABEL_35;
              }
            }
LABEL_25:
            if (result == 0x8000000000000000 && v28 == -1)
              goto LABEL_110;
            v29 = result / v28;
            if (!(result % v28) || (v19 = __OFADD__(v29, 1), ++v29, !v19))
            {
              v62 = v29;
              v63 = v23;
              if ((v16 & 0x1000000000000000) != 0)
              {
                v30 = sub_2448EABE4();
              }
              else
              {
                if ((v16 & 0x2000000000000000) != 0)
                {
LABEL_35:
                  v30 = v7;
                  goto LABEL_36;
                }
                v30 = v69 & 0xFFFFFFFFFFFFLL;
              }
LABEL_36:
              v31 = v30 >= 0;
              if (v28 > 0)
                v31 = v30 < 1;
              if (v31)
              {
LABEL_39:
                swift_bridgeObjectRelease();
                return swift_bridgeObjectRelease();
              }
              a5 = 0;
              v32 = 0;
              if ((v16 & 0x2000000000000000) != 0)
                v33 = v7;
              else
                v33 = v69 & 0xFFFFFFFFFFFFLL;
              v34 = 7;
              v35 = 11;
              if ((v69 & 0x800000000000000) != 0)
                v35 = 7;
              if ((v16 & 0x1000000000000000) != 0)
                v34 = v35;
              v68 = v34 | (v33 << 16);
              v66 = v34 & 0xC;
              v67 = v33;
              v61 = v30;
              while (1)
              {
                if (__OFADD__(v32, v28))
                  v40 = ((uint64_t)(v32 + v28) >> 63) ^ 0x8000000000000000;
                else
                  v40 = v32 + v28;
                v7 = a5 + 1;
                if (__OFADD__(a5, 1))
                {
LABEL_95:
                  __break(1u);
LABEL_96:
                  __break(1u);
LABEL_97:
                  __break(1u);
LABEL_98:
                  __break(1u);
LABEL_99:
                  __break(1u);
LABEL_100:
                  __break(1u);
LABEL_101:
                  v60 = sub_2448EABE4();
                  v18 = v60 + 2;
                  if (!__OFADD__(v60, 2))
                    goto LABEL_7;
LABEL_103:
                  __break(1u);
                  goto LABEL_104;
                }
                if ((v16 & 0x1000000000000000) != 0)
                {
                  v41 = sub_2448EABFC();
                  if ((v42 & 1) != 0)
                    goto LABEL_39;
                  a4 = v41;
                }
                else
                {
                  if ((v32 & 0x8000000000000000) != 0)
                    goto LABEL_93;
                  if (v33 < v32)
                    goto LABEL_39;
                  a4 = (v32 << 16) | 4;
                }
                a6 = a4 & 0xC;
                a3 = a4;
                v43 = 4 << (((v16 & 0x1000000000000000) == 0) | ((v69 & 0x800000000000000uLL) >> 59));
                if (a6 == v43)
                {
                  v46 = sub_2448852EC(a4, v69, v16);
                  v43 = 4 << (((v16 & 0x1000000000000000) == 0) | ((v69 & 0x800000000000000uLL) >> 59));
                  a3 = v46;
                }
                v44 = v68;
                if (v66 == v43)
                {
                  v47 = sub_2448852EC(v68, v69, v16);
                  v43 = 4 << (((v16 & 0x1000000000000000) == 0) | ((v69 & 0x800000000000000uLL) >> 59));
                  v44 = v47;
                  if ((v16 & 0x1000000000000000) == 0)
                  {
LABEL_67:
                    v45 = (v44 >> 16) - (a3 >> 16);
                    a3 = v69;
                    goto LABEL_72;
                  }
                }
                else if ((v16 & 0x1000000000000000) == 0)
                {
                  goto LABEL_67;
                }
                if (v33 < a3 >> 16)
                  goto LABEL_96;
                if (v33 < v44 >> 16)
                  goto LABEL_97;
                a3 = v69;
                v45 = sub_2448EAC14();
                v43 = 4 << (((v16 & 0x1000000000000000) == 0) | ((v69 & 0x800000000000000uLL) >> 59));
LABEL_72:
                if (v45 >= v28)
                  v48 = v28;
                else
                  v48 = v45;
                v49 = a4;
                if (a6 == v43)
                {
                  v49 = sub_2448852EC(a4, a3, v16);
                  if ((v16 & 0x1000000000000000) != 0)
                  {
LABEL_88:
                    sub_2448EABFC();
                    if ((v53 & 1) != 0)
                      goto LABEL_39;
                    goto LABEL_89;
                  }
                }
                else if ((v16 & 0x1000000000000000) != 0)
                {
                  goto LABEL_88;
                }
                v50 = v49 >> 16;
                v51 = (v49 >> 16) + v48;
                if (__OFADD__(v49 >> 16, v48))
                  goto LABEL_98;
                if (v48 < 0)
                {
                  v52 = v67;
                  if (v50 >= v67 && v51 < (uint64_t)v67)
                    goto LABEL_39;
                }
                else
                {
                  v52 = v67;
                  if (v67 >= v50 && (uint64_t)v67 < v51)
                    goto LABEL_39;
                }
                if (v51 < 0)
                  goto LABEL_99;
                if (v52 < v51)
                  goto LABEL_100;
LABEL_89:
                v54 = sub_2448EAB6C();
                if ((v55 & 1) == 0)
                {
                  a4 = v54;
                  v56 = sub_2448EAB6C();
                  if ((v57 & 1) == 0)
                  {
                    v33 = v56;
                    a3 = swift_allocObject();
                    *(_OWORD *)(a3 + 16) = xmmword_2448EFC00;
                    *(_QWORD *)(a3 + 56) = MEMORY[0x24BEE0D00];
                    *(_QWORD *)(a3 + 64) = v64;
                    *(_QWORD *)(a3 + 32) = v63;
                    *(_QWORD *)(a3 + 40) = v65;
                    v58 = MEMORY[0x24BEE1768];
                    *(_QWORD *)(a3 + 96) = MEMORY[0x24BEE1768];
                    v59 = MEMORY[0x24BEE17F0];
                    *(_QWORD *)(a3 + 72) = v7;
                    *(_QWORD *)(a3 + 136) = v58;
                    *(_QWORD *)(a3 + 144) = v59;
                    *(_QWORD *)(a3 + 104) = v59;
                    *(_QWORD *)(a3 + 112) = v62;
                    if (v33 >> 14 < a4 >> 14)
                    {
                      __break(1u);
LABEL_93:
                      if (!v33)
                        goto LABEL_39;
                      __break(1u);
                      goto LABEL_95;
                    }
                    swift_bridgeObjectRetain();
                    a6 = v69;
                    v36 = sub_2448EACA4();
                    a4 = MEMORY[0x2495192FC](v36);
                    v38 = v37;
                    swift_bridgeObjectRelease();
                    *(_QWORD *)(a3 + 176) = MEMORY[0x24BEE0D00];
                    *(_QWORD *)(a3 + 184) = v64;
                    v30 = v61;
                    *(_QWORD *)(a3 + 152) = a4;
                    *(_QWORD *)(a3 + 160) = v38;
                    sub_2448EA5A8();
                    a3 = v69;
                    swift_bridgeObjectRelease();
                  }
                }
                v39 = v30 >= v40;
                if (v28 > 0)
                  v39 = v40 >= v30;
                ++a5;
                v32 = v40;
                v33 = v67;
                if (v39)
                  goto LABEL_39;
              }
            }
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
            return result;
          }
LABEL_108:
          __break(1u);
          goto LABEL_109;
        }
LABEL_107:
        __break(1u);
        goto LABEL_108;
      }
    }
    __break(1u);
    goto LABEL_107;
  }
  return result;
}

uint64_t Optional.log.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
    return 7104878;
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, v7, v1);
  v11[0] = 0;
  v11[1] = 0xE000000000000000;
  sub_2448EBBA4();
  v9 = v11[0];
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v9;
}

uint64_t static Logging.describe<A>(ref:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738C210);
    v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = xmmword_2448ECFE0;
    swift_unknownObjectRetain();
    v2 = sub_2448EBDB4();
    v4 = v3;
    *(_QWORD *)(v1 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v1 + 64) = sub_24480514C();
    *(_QWORD *)(v1 + 32) = v2;
    *(_QWORD *)(v1 + 40) = v4;
    v5 = sub_2448EAA58();
    v6 = MEMORY[0x24BEE17F0];
    *(_QWORD *)(v1 + 96) = MEMORY[0x24BEE1768];
    *(_QWORD *)(v1 + 104) = v6;
    *(_QWORD *)(v1 + 72) = v5;
    v7 = sub_2448EAAB8();
    swift_unknownObjectRelease();
    return v7;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738C210);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_2448ECF10;
    v10 = sub_2448EBDB4();
    v12 = v11;
    *(_QWORD *)(v9 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v9 + 64) = sub_24480514C();
    *(_QWORD *)(v9 + 32) = v10;
    *(_QWORD *)(v9 + 40) = v12;
    return sub_2448EAAB8();
  }
}

uint64_t static Logging.describe<A>(sequence:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  Swift::String v18;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v23 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v6 = (char *)&v20 - v5;
  v7 = sub_2448EB508();
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v20 - v9;
  v11 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_getAssociatedTypeWitness();
  v21 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v20 - v15;
  v26 = 91;
  v27 = 0xE100000000000000;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v23, a2);
  sub_2448EACB0();
  swift_getAssociatedConformanceWitness();
  sub_2448EB58C();
  v23 = v4;
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  if (v17(v10, 1, AssociatedTypeWitness) != 1)
  {
    v22 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    do
    {
      v22(v6, v10, AssociatedTypeWitness);
      v24 = 0;
      v25 = 0xE000000000000000;
      sub_2448EBBA4();
      v18._countAndFlagsBits = 538976288;
      v18._object = (void *)0xE400000000000000;
      String.prefixingEachLine(with:startingOnLine:)(v18, 0);
      swift_bridgeObjectRelease();
      v24 = 10;
      v25 = 0xE100000000000000;
      sub_2448EABC0();
      swift_bridgeObjectRelease();
      sub_2448EABC0();
      sub_2448EABC0();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v6, AssociatedTypeWitness);
      sub_2448EB58C();
    }
    while (v17(v10, 1, AssociatedTypeWitness) != 1);
  }
  (*(void (**)(char *, uint64_t))(v21 + 8))(v16, v14);
  v24 = v26;
  v25 = v27;
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  return v24;
}

unint64_t static OS_os_log.Constants.ultravioletLogSubsystem.getter()
{
  return 0xD000000000000015;
}

uint64_t static OS_os_log.Constants.messageSizeLimit.getter()
{
  return 1020;
}

uint64_t static OS_os_log.Constants.Categories.uv.getter()
{
  return 30325;
}

uint64_t static OS_os_log.Constants.Categories.parsing.getter()
{
  return 0x676E6973726150;
}

uint64_t static OS_os_log.Constants.Categories.metadata.getter()
{
  return 0x617461646174654DLL;
}

uint64_t static OS_os_log.Constants.Categories.previews.getter()
{
  return 0x7377656976657250;
}

uint64_t static OS_os_log.Constants.Categories.devices.getter()
{
  return 0x73656369766544;
}

uint64_t static OS_os_log.Constants.Categories.editorContext.getter()
{
  return 0x4320726F74696445;
}

uint64_t static OS_os_log.Constants.Categories.documentManagement.getter()
{
  return 0x746E656D75636F44;
}

uint64_t static OS_os_log.Constants.Categories.editors.getter()
{
  return 0x73726F74696445;
}

uint64_t static OS_os_log.Constants.Categories.connectivity.getter()
{
  return 0x697463656E6E6F43;
}

uint64_t static OS_os_log.Constants.Categories.canvas.getter()
{
  return 0x7361766E6143;
}

uint64_t static OS_os_log.Constants.Categories.analytics.getter()
{
  return 0x636974796C616E41;
}

uint64_t static OS_os_log.Constants.Categories.tests.getter()
{
  return 0x7374736554;
}

uint64_t static OS_os_log.Constants.Categories.symbolication.getter()
{
  return 0x63696C6F626D7953;
}

uint64_t static OS_os_log.Constants.Categories.stressTests.getter()
{
  return 0x5420737365727453;
}

uint64_t static OS_os_log.Constants.Categories.jit.getter()
{
  return 5523786;
}

uint64_t static OS_os_log.Constants.Categories.ipc.getter()
{
  return 4411465;
}

uint64_t static OS_os_log.Constants.Categories.canvasControls.getter()
{
  return 0x43207361766E6143;
}

uint64_t static OS_os_log.Constants.Categories.signposts.getter()
{
  return 0x74736F706E676953;
}

uint64_t static OS_os_log.Constants.Categories.llm.getter()
{
  return 5065804;
}

unint64_t static OS_os_log.Constants.Categories.registryDetection.getter()
{
  return 0xD000000000000012;
}

uint64_t sub_244884B64()
{
  uint64_t result;

  sub_244885394();
  result = sub_2448EB4E4();
  qword_25738F7A8 = result;
  return result;
}

id static OS_os_log.previews.getter()
{
  return sub_244884D54(&qword_257389CD0, (id *)&qword_25738F7A8);
}

uint64_t sub_244884BDC()
{
  uint64_t result;

  sub_244885394();
  result = sub_2448EB4E4();
  qword_25738F7B0 = result;
  return result;
}

id static OS_os_log.editorContext.getter()
{
  return sub_244884D54(&qword_257389CD8, (id *)&qword_25738F7B0);
}

uint64_t sub_244884C60()
{
  uint64_t result;

  sub_244885394();
  result = sub_2448EB4E4();
  qword_25738F7B8 = result;
  return result;
}

id static OS_os_log.tests.getter()
{
  return sub_244884D54(&qword_257389CE0, (id *)&qword_25738F7B8);
}

uint64_t sub_244884CD4()
{
  uint64_t result;

  sub_244885394();
  result = sub_2448EB4E4();
  qword_25738F7C0 = result;
  return result;
}

id static OS_os_log.connectivity.getter()
{
  return sub_244884D54(&qword_257389CE8, (id *)&qword_25738F7C0);
}

id sub_244884D54(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

uint64_t sub_244884D8C(uint64_t a1)
{
  return sub_24488525C(a1, qword_25738F7C8);
}

uint64_t static Logger.uv.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_244884DF8(&qword_257389CF0, (uint64_t)qword_25738F7C8, a1);
}

uint64_t sub_244884DBC(uint64_t a1)
{
  return sub_24488525C(a1, qword_25738F7E0);
}

uint64_t static Logger.parsing.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_244884DF8(&qword_257389CF8, (uint64_t)qword_25738F7E0, a1);
}

uint64_t sub_244884DF8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = sub_2448EA5FC();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t sub_244884E60(uint64_t a1)
{
  return sub_24488525C(a1, qword_25738F7F8);
}

uint64_t static Logger.metadata.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_244884DF8(&qword_257389D00, (uint64_t)qword_25738F7F8, a1);
}

uint64_t sub_244884E9C(uint64_t a1)
{
  return sub_24488525C(a1, qword_25738F810);
}

uint64_t static Logger.previews.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_244884DF8(&qword_257389D08, (uint64_t)qword_25738F810, a1);
}

uint64_t sub_244884ED8(uint64_t a1)
{
  return sub_24488525C(a1, qword_25738F828);
}

uint64_t static Logger.devices.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_244884DF8(&qword_257389D10, (uint64_t)qword_25738F828, a1);
}

uint64_t sub_244884F14(uint64_t a1)
{
  return sub_24488525C(a1, qword_25738F840);
}

uint64_t static Logger.editorContext.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_244884DF8(&qword_257389D18, (uint64_t)qword_25738F840, a1);
}

uint64_t sub_244884F5C(uint64_t a1)
{
  return sub_24488525C(a1, qword_25738F858);
}

uint64_t static Logger.canvasControls.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_244884DF8(&qword_257389D20, (uint64_t)qword_25738F858, a1);
}

uint64_t sub_244884FA4(uint64_t a1)
{
  return sub_24488525C(a1, qword_25738F870);
}

uint64_t static Logger.documentManagement.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_244884DF8(&qword_257389D28, (uint64_t)qword_25738F870, a1);
}

uint64_t sub_244884FE0(uint64_t a1)
{
  return sub_24488525C(a1, qword_25738F888);
}

uint64_t static Logger.editors.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_244884DF8(&qword_257389D30, (uint64_t)qword_25738F888, a1);
}

uint64_t sub_24488501C(uint64_t a1)
{
  return sub_24488525C(a1, qword_25738F8A0);
}

uint64_t static Logger.stressTests.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_244884DF8(&qword_257389D38, (uint64_t)qword_25738F8A0, a1);
}

uint64_t sub_244885060(uint64_t a1)
{
  return sub_24488525C(a1, qword_25738F8B8);
}

uint64_t static Logger.connectivity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_244884DF8(&qword_257389D40, (uint64_t)qword_25738F8B8, a1);
}

uint64_t sub_2448850A4(uint64_t a1)
{
  return sub_24488525C(a1, qword_25738F8D0);
}

uint64_t static Logger.canvas.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_244884DF8(&qword_257389D48, (uint64_t)qword_25738F8D0, a1);
}

uint64_t sub_2448850DC(uint64_t a1)
{
  return sub_24488525C(a1, qword_25738F8E8);
}

uint64_t static Logger.analytics.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_244884DF8(&qword_257389D50, (uint64_t)qword_25738F8E8, a1);
}

uint64_t sub_24488511C(uint64_t a1)
{
  return sub_24488525C(a1, qword_25738F900);
}

uint64_t static Logger.tests.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_244884DF8(&qword_257389D58, (uint64_t)qword_25738F900, a1);
}

uint64_t sub_244885154(uint64_t a1)
{
  return sub_24488525C(a1, qword_25738F918);
}

uint64_t static Logger.symbolication.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_244884DF8(&qword_257389D60, (uint64_t)qword_25738F918, a1);
}

uint64_t sub_24488519C(uint64_t a1)
{
  return sub_24488525C(a1, qword_25738F930);
}

uint64_t static Logger.jit.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_244884DF8(&qword_257389D68, (uint64_t)qword_25738F930, a1);
}

uint64_t sub_2448851D0(uint64_t a1)
{
  return sub_24488525C(a1, qword_25738F948);
}

uint64_t static Logger.llm.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_244884DF8(&qword_257389D70, (uint64_t)qword_25738F948, a1);
}

uint64_t sub_244885204(uint64_t a1)
{
  return sub_24488525C(a1, qword_25738F960);
}

uint64_t static Logger.ipc.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_244884DF8(&qword_257389D78, (uint64_t)qword_25738F960, a1);
}

uint64_t sub_244885238(uint64_t a1)
{
  return sub_24488525C(a1, qword_25738F978);
}

uint64_t sub_24488525C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_2448EA5FC();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return sub_2448EA5F0();
}

uint64_t static Logger.registryDetection.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_244884DF8(&qword_257389D80, (uint64_t)qword_25738F978, a1);
}

uint64_t sub_2448852EC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = sub_2448EAC5C();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x2495193EC](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

ValueMetadata *type metadata accessor for Logging()
{
  return &type metadata for Logging;
}

ValueMetadata *type metadata accessor for OS_os_log.Constants()
{
  return &type metadata for OS_os_log.Constants;
}

ValueMetadata *type metadata accessor for OS_os_log.Constants.Categories()
{
  return &type metadata for OS_os_log.Constants.Categories;
}

unint64_t sub_244885394()
{
  unint64_t result;

  result = qword_25738F990[0];
  if (!qword_25738F990[0])
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, qword_25738F990);
  }
  return result;
}

uint64_t sub_2448853D0(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, os_log_type_t a5, os_log_t oslog)
{
  uint64_t v6;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;

  result = os_log_type_enabled(oslog, a5);
  if ((_DWORD)result)
  {
    v66 = CommandLineToolInvocation.commandLineDescription.getter();
    v13 = v12;
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_101;
    if ((a2 & 0x2000000000000000) != 0)
      v14 = HIBYTE(a2) & 0xF;
    else
      v14 = a1 & 0xFFFFFFFFFFFFLL;
    v15 = v14 + 2;
    if (__OFADD__(v14, 2))
      goto LABEL_103;
LABEL_7:
    v6 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x1000000000000000) != 0)
    {
LABEL_104:
      result = sub_2448EABE4();
      v16 = __OFADD__(v15, result);
      v17 = v15 + result;
      if (!v16)
        goto LABEL_12;
    }
    else
    {
      if ((v13 & 0x2000000000000000) != 0)
        result = HIBYTE(v13) & 0xF;
      else
        result = v66 & 0xFFFFFFFFFFFFLL;
      v16 = __OFADD__(v15, result);
      v17 = v15 + result;
      if (!v16)
      {
LABEL_12:
        __swift_instantiateConcreteTypeFromMangledName(&qword_25738C210);
        if (v17 < 1021)
        {
          v21 = swift_allocObject();
          *(_OWORD *)(v21 + 16) = xmmword_2448ECFF0;
          v22 = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v21 + 56) = MEMORY[0x24BEE0D00];
          v23 = sub_24480514C();
          *(_QWORD *)(v21 + 32) = a1;
          *(_QWORD *)(v21 + 40) = a2;
          *(_QWORD *)(v21 + 96) = v22;
          *(_QWORD *)(v21 + 104) = v23;
          *(_QWORD *)(v21 + 64) = v23;
          *(_QWORD *)(v21 + 72) = 2618;
          *(_QWORD *)(v21 + 80) = 0xE200000000000000;
          *(_QWORD *)(v21 + 136) = v22;
          *(_QWORD *)(v21 + 144) = v23;
          *(_QWORD *)(v21 + 112) = v66;
          *(_QWORD *)(v21 + 120) = v13;
          swift_bridgeObjectRetain();
          sub_2448EA5A8();
          return swift_bridgeObjectRelease();
        }
        v18 = swift_allocObject();
        *(_OWORD *)(v18 + 16) = xmmword_2448ECF10;
        *(_QWORD *)(v18 + 56) = MEMORY[0x24BEE0D00];
        v61 = sub_24480514C();
        *(_QWORD *)(v18 + 64) = v61;
        *(_QWORD *)(v18 + 32) = a1;
        *(_QWORD *)(v18 + 40) = a2;
        swift_bridgeObjectRetain();
        sub_2448EA5A8();
        swift_bridgeObjectRelease();
        if (a4)
        {
          swift_bridgeObjectRetain();
          sub_2448EABC0();
          v19 = a4;
          v20 = a3;
        }
        else
        {
          v20 = 0;
          v19 = 0xE000000000000000;
        }
        a1 = v66;
        v62 = v19;
        result = sub_2448EAB78();
        v24 = 1020 - result;
        if (!__OFSUB__(1020, result))
        {
          v25 = 990 - result;
          if (!__OFSUB__(v24, 30))
          {
            if ((v13 & 0x1000000000000000) != 0)
            {
              result = sub_2448EABE4();
              if (!v25)
                goto LABEL_34;
            }
            else
            {
              if ((v13 & 0x2000000000000000) == 0)
              {
                result = v66 & 0xFFFFFFFFFFFFLL;
                if (v24 == 30)
                  goto LABEL_34;
                goto LABEL_25;
              }
              result = v6;
              if (v24 == 30)
              {
LABEL_34:
                __break(1u);
                goto LABEL_35;
              }
            }
LABEL_25:
            if (result == 0x8000000000000000 && v25 == -1)
              goto LABEL_110;
            v26 = result / v25;
            if (!(result % v25) || (v16 = __OFADD__(v26, 1), ++v26, !v16))
            {
              v59 = v26;
              v60 = v20;
              if ((v13 & 0x1000000000000000) != 0)
              {
                v27 = sub_2448EABE4();
              }
              else
              {
                if ((v13 & 0x2000000000000000) != 0)
                {
LABEL_35:
                  v27 = v6;
                  goto LABEL_36;
                }
                v27 = v66 & 0xFFFFFFFFFFFFLL;
              }
LABEL_36:
              v28 = v27 >= 0;
              if (v25 > 0)
                v28 = v27 < 1;
              if (v28)
              {
LABEL_39:
                swift_bridgeObjectRelease();
                return swift_bridgeObjectRelease();
              }
              a3 = 0;
              v29 = 0;
              if ((v13 & 0x2000000000000000) != 0)
                v30 = v6;
              else
                v30 = v66 & 0xFFFFFFFFFFFFLL;
              v31 = 7;
              v32 = 11;
              if ((v66 & 0x800000000000000) != 0)
                v32 = 7;
              if ((v13 & 0x1000000000000000) != 0)
                v31 = v32;
              v65 = v31 | (v30 << 16);
              v63 = v31 & 0xC;
              v64 = v30;
              v58 = v27;
              while (1)
              {
                if (__OFADD__(v29, v25))
                  v37 = ((uint64_t)(v29 + v25) >> 63) ^ 0x8000000000000000;
                else
                  v37 = v29 + v25;
                v6 = a3 + 1;
                if (__OFADD__(a3, 1))
                {
LABEL_95:
                  __break(1u);
LABEL_96:
                  __break(1u);
LABEL_97:
                  __break(1u);
LABEL_98:
                  __break(1u);
LABEL_99:
                  __break(1u);
LABEL_100:
                  __break(1u);
LABEL_101:
                  v57 = sub_2448EABE4();
                  v15 = v57 + 2;
                  if (!__OFADD__(v57, 2))
                    goto LABEL_7;
LABEL_103:
                  __break(1u);
                  goto LABEL_104;
                }
                if ((v13 & 0x1000000000000000) != 0)
                {
                  v38 = sub_2448EABFC();
                  if ((v39 & 1) != 0)
                    goto LABEL_39;
                  a2 = v38;
                }
                else
                {
                  if ((v29 & 0x8000000000000000) != 0)
                    goto LABEL_93;
                  if (v30 < v29)
                    goto LABEL_39;
                  a2 = (v29 << 16) | 4;
                }
                a4 = a2 & 0xC;
                a1 = a2;
                v40 = 4 << (((v13 & 0x1000000000000000) == 0) | ((v66 & 0x800000000000000uLL) >> 59));
                if (a4 == v40)
                {
                  v43 = sub_2448852EC(a2, v66, v13);
                  v40 = 4 << (((v13 & 0x1000000000000000) == 0) | ((v66 & 0x800000000000000uLL) >> 59));
                  a1 = v43;
                }
                v41 = v65;
                if (v63 == v40)
                {
                  v44 = sub_2448852EC(v65, v66, v13);
                  v40 = 4 << (((v13 & 0x1000000000000000) == 0) | ((v66 & 0x800000000000000uLL) >> 59));
                  v41 = v44;
                  if ((v13 & 0x1000000000000000) == 0)
                  {
LABEL_67:
                    v42 = (v41 >> 16) - (a1 >> 16);
                    a1 = v66;
                    goto LABEL_72;
                  }
                }
                else if ((v13 & 0x1000000000000000) == 0)
                {
                  goto LABEL_67;
                }
                if (v30 < a1 >> 16)
                  goto LABEL_96;
                if (v30 < v41 >> 16)
                  goto LABEL_97;
                a1 = v66;
                v42 = sub_2448EAC14();
                v40 = 4 << (((v13 & 0x1000000000000000) == 0) | ((v66 & 0x800000000000000uLL) >> 59));
LABEL_72:
                if (v42 >= v25)
                  v45 = v25;
                else
                  v45 = v42;
                v46 = a2;
                if (a4 == v40)
                {
                  v46 = sub_2448852EC(a2, a1, v13);
                  if ((v13 & 0x1000000000000000) != 0)
                  {
LABEL_88:
                    sub_2448EABFC();
                    if ((v50 & 1) != 0)
                      goto LABEL_39;
                    goto LABEL_89;
                  }
                }
                else if ((v13 & 0x1000000000000000) != 0)
                {
                  goto LABEL_88;
                }
                v47 = v46 >> 16;
                v48 = (v46 >> 16) + v45;
                if (__OFADD__(v46 >> 16, v45))
                  goto LABEL_98;
                if (v45 < 0)
                {
                  v49 = v64;
                  if (v47 >= v64 && v48 < (uint64_t)v64)
                    goto LABEL_39;
                }
                else
                {
                  v49 = v64;
                  if (v64 >= v47 && (uint64_t)v64 < v48)
                    goto LABEL_39;
                }
                if (v48 < 0)
                  goto LABEL_99;
                if (v49 < v48)
                  goto LABEL_100;
LABEL_89:
                v51 = sub_2448EAB6C();
                if ((v52 & 1) == 0)
                {
                  a2 = v51;
                  v53 = sub_2448EAB6C();
                  if ((v54 & 1) == 0)
                  {
                    v30 = v53;
                    a1 = swift_allocObject();
                    *(_OWORD *)(a1 + 16) = xmmword_2448EFC00;
                    *(_QWORD *)(a1 + 56) = MEMORY[0x24BEE0D00];
                    *(_QWORD *)(a1 + 64) = v61;
                    *(_QWORD *)(a1 + 32) = v60;
                    *(_QWORD *)(a1 + 40) = v62;
                    v55 = MEMORY[0x24BEE1768];
                    *(_QWORD *)(a1 + 96) = MEMORY[0x24BEE1768];
                    v56 = MEMORY[0x24BEE17F0];
                    *(_QWORD *)(a1 + 72) = v6;
                    *(_QWORD *)(a1 + 136) = v55;
                    *(_QWORD *)(a1 + 144) = v56;
                    *(_QWORD *)(a1 + 104) = v56;
                    *(_QWORD *)(a1 + 112) = v59;
                    if (v30 >> 14 < a2 >> 14)
                    {
                      __break(1u);
LABEL_93:
                      if (!v30)
                        goto LABEL_39;
                      __break(1u);
                      goto LABEL_95;
                    }
                    swift_bridgeObjectRetain();
                    a4 = v66;
                    v33 = sub_2448EACA4();
                    a2 = MEMORY[0x2495192FC](v33);
                    v35 = v34;
                    swift_bridgeObjectRelease();
                    *(_QWORD *)(a1 + 176) = MEMORY[0x24BEE0D00];
                    *(_QWORD *)(a1 + 184) = v61;
                    v27 = v58;
                    *(_QWORD *)(a1 + 152) = a2;
                    *(_QWORD *)(a1 + 160) = v35;
                    sub_2448EA5A8();
                    a1 = v66;
                    swift_bridgeObjectRelease();
                  }
                }
                v36 = v27 >= v37;
                if (v25 > 0)
                  v36 = v37 >= v27;
                ++a3;
                v29 = v37;
                v30 = v64;
                if (v36)
                  goto LABEL_39;
              }
            }
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
            return result;
          }
LABEL_108:
          __break(1u);
          goto LABEL_109;
        }
LABEL_107:
        __break(1u);
        goto LABEL_108;
      }
    }
    __break(1u);
    goto LABEL_107;
  }
  return result;
}

uint64_t sub_244885A84(uint64_t a1, unint64_t a2, unint64_t a3, int64_t a4, os_log_type_t a5, os_log_t oslog, uint64_t a7, unint64_t a8)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v67;

  result = os_log_type_enabled(oslog, a5);
  if ((_DWORD)result)
  {
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_101;
    if ((a2 & 0x2000000000000000) != 0)
      v15 = HIBYTE(a2) & 0xF;
    else
      v15 = a1 & 0xFFFFFFFFFFFFLL;
    v16 = v15 + 2;
    if (__OFADD__(v15, 2))
      goto LABEL_103;
LABEL_7:
    v8 = HIBYTE(a8) & 0xF;
    if ((a8 & 0x1000000000000000) != 0)
    {
LABEL_104:
      result = sub_2448EABE4();
      v17 = __OFADD__(v16, result);
      v18 = v16 + result;
      if (!v17)
        goto LABEL_12;
    }
    else
    {
      if ((a8 & 0x2000000000000000) != 0)
        result = HIBYTE(a8) & 0xF;
      else
        result = a7 & 0xFFFFFFFFFFFFLL;
      v17 = __OFADD__(v16, result);
      v18 = v16 + result;
      if (!v17)
      {
LABEL_12:
        __swift_instantiateConcreteTypeFromMangledName(&qword_25738C210);
        if (v18 < 1021)
        {
          v21 = swift_allocObject();
          *(_OWORD *)(v21 + 16) = xmmword_2448ECFF0;
          v22 = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v21 + 56) = MEMORY[0x24BEE0D00];
          v23 = sub_24480514C();
          *(_QWORD *)(v21 + 32) = a1;
          *(_QWORD *)(v21 + 40) = a2;
          *(_QWORD *)(v21 + 96) = v22;
          *(_QWORD *)(v21 + 104) = v23;
          *(_QWORD *)(v21 + 64) = v23;
          *(_QWORD *)(v21 + 72) = 2618;
          *(_QWORD *)(v21 + 80) = 0xE200000000000000;
          *(_QWORD *)(v21 + 136) = v22;
          *(_QWORD *)(v21 + 144) = v23;
          *(_QWORD *)(v21 + 112) = a7;
          *(_QWORD *)(v21 + 120) = a8;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_2448EA5A8();
          return swift_bridgeObjectRelease();
        }
        v19 = swift_allocObject();
        *(_OWORD *)(v19 + 16) = xmmword_2448ECF10;
        *(_QWORD *)(v19 + 56) = MEMORY[0x24BEE0D00];
        v60 = sub_24480514C();
        *(_QWORD *)(v19 + 64) = v60;
        *(_QWORD *)(v19 + 32) = a1;
        *(_QWORD *)(v19 + 40) = a2;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_2448EA5A8();
        swift_bridgeObjectRelease();
        if (a4)
        {
          v67 = a4;
          swift_bridgeObjectRetain();
          sub_2448EABC0();
          a4 = a3;
          v20 = v67;
        }
        else
        {
          v20 = 0xE000000000000000;
        }
        v61 = v20;
        result = sub_2448EAB78();
        v24 = 1020 - result;
        if (!__OFSUB__(1020, result))
        {
          v25 = 990 - result;
          if (!__OFSUB__(v24, 30))
          {
            if ((a8 & 0x1000000000000000) != 0)
            {
              result = sub_2448EABE4();
              if (!v25)
                goto LABEL_34;
            }
            else
            {
              if ((a8 & 0x2000000000000000) == 0)
              {
                result = a7 & 0xFFFFFFFFFFFFLL;
                if (!v25)
                  goto LABEL_34;
                goto LABEL_25;
              }
              result = v8;
              if (v24 == 30)
              {
LABEL_34:
                __break(1u);
                goto LABEL_35;
              }
            }
LABEL_25:
            if (result == 0x8000000000000000 && v25 == -1)
              goto LABEL_110;
            v26 = result / v25;
            if (!(result % v25) || (v17 = __OFADD__(v26, 1), ++v26, !v17))
            {
              v58 = v26;
              v59 = a4;
              if ((a8 & 0x1000000000000000) != 0)
              {
                v27 = sub_2448EABE4();
              }
              else
              {
                if ((a8 & 0x2000000000000000) != 0)
                {
LABEL_35:
                  v27 = v8;
                  goto LABEL_36;
                }
                v27 = a7 & 0xFFFFFFFFFFFFLL;
              }
LABEL_36:
              v28 = v27 >= 0;
              if (v25 > 0)
                v28 = v27 < 1;
              if (v28)
              {
LABEL_39:
                swift_bridgeObjectRelease();
                return swift_bridgeObjectRelease();
              }
              a1 = 0;
              v29 = 0;
              if ((a8 & 0x2000000000000000) != 0)
                v30 = v8;
              else
                v30 = a7 & 0xFFFFFFFFFFFFLL;
              v31 = 7;
              v32 = 11;
              if ((a7 & 0x800000000000000) != 0)
                v32 = 7;
              if ((a8 & 0x1000000000000000) != 0)
                v31 = v32;
              v65 = v31 | (v30 << 16);
              v33 = 4 << (((a8 & 0x1000000000000000) == 0) | ((a7 & 0x800000000000000uLL) >> 59));
              v63 = v31 & 0xC;
              v62 = v27;
              v64 = v30;
              while (1)
              {
                if (__OFADD__(v29, v25))
                  a4 = ((uint64_t)(v29 + v25) >> 63) ^ 0x8000000000000000;
                else
                  a4 = v29 + v25;
                v8 = a1 + 1;
                if (__OFADD__(a1, 1))
                {
LABEL_95:
                  __break(1u);
LABEL_96:
                  __break(1u);
LABEL_97:
                  __break(1u);
LABEL_98:
                  __break(1u);
LABEL_99:
                  __break(1u);
LABEL_100:
                  __break(1u);
LABEL_101:
                  v57 = sub_2448EABE4();
                  v16 = v57 + 2;
                  if (!__OFADD__(v57, 2))
                    goto LABEL_7;
LABEL_103:
                  __break(1u);
                  goto LABEL_104;
                }
                if ((a8 & 0x1000000000000000) != 0)
                {
                  v39 = sub_2448EABFC();
                  if ((v40 & 1) != 0)
                    goto LABEL_39;
                  a2 = v39;
                }
                else
                {
                  if ((v29 & 0x8000000000000000) != 0)
                    goto LABEL_93;
                  if (v30 < v29)
                    goto LABEL_39;
                  a2 = (v29 << 16) | 4;
                }
                a3 = a2 & 0xC;
                v41 = a2;
                if (a3 == v33)
                  v41 = sub_2448852EC(a2, a7, a8);
                v42 = v65;
                if (v63 == v33)
                {
                  v42 = sub_2448852EC(v65, a7, a8);
                  if ((a8 & 0x1000000000000000) == 0)
                  {
LABEL_67:
                    v43 = (v42 >> 16) - (v41 >> 16);
                    goto LABEL_72;
                  }
                }
                else if ((a8 & 0x1000000000000000) == 0)
                {
                  goto LABEL_67;
                }
                if (v30 < v41 >> 16)
                  goto LABEL_96;
                if (v30 < v42 >> 16)
                  goto LABEL_97;
                v43 = sub_2448EAC14();
LABEL_72:
                if (v43 >= v25)
                  v44 = v25;
                else
                  v44 = v43;
                v45 = a2;
                if (a3 == v33)
                {
                  v45 = sub_2448852EC(a2, a7, a8);
                  if ((a8 & 0x1000000000000000) != 0)
                  {
LABEL_88:
                    sub_2448EABFC();
                    if ((v49 & 1) != 0)
                      goto LABEL_39;
                    goto LABEL_89;
                  }
                }
                else if ((a8 & 0x1000000000000000) != 0)
                {
                  goto LABEL_88;
                }
                v46 = v45 >> 16;
                v47 = (v45 >> 16) + v44;
                if (__OFADD__(v45 >> 16, v44))
                  goto LABEL_98;
                if (v44 < 0)
                {
                  v48 = v64;
                  if (v46 >= v64 && v47 < (uint64_t)v64)
                    goto LABEL_39;
                }
                else
                {
                  v48 = v64;
                  if (v64 >= v46 && (uint64_t)v64 < v47)
                    goto LABEL_39;
                }
                if (v47 < 0)
                  goto LABEL_99;
                if (v48 < v47)
                  goto LABEL_100;
LABEL_89:
                v50 = sub_2448EAB6C();
                if ((v51 & 1) == 0)
                {
                  v52 = v50;
                  v53 = sub_2448EAB6C();
                  if ((v54 & 1) == 0)
                  {
                    v30 = v53;
                    a2 = swift_allocObject();
                    *(_OWORD *)(a2 + 16) = xmmword_2448EFC00;
                    a3 = v60;
                    *(_QWORD *)(a2 + 56) = MEMORY[0x24BEE0D00];
                    *(_QWORD *)(a2 + 64) = v60;
                    *(_QWORD *)(a2 + 32) = v59;
                    *(_QWORD *)(a2 + 40) = v61;
                    v55 = MEMORY[0x24BEE1768];
                    *(_QWORD *)(a2 + 96) = MEMORY[0x24BEE1768];
                    v56 = MEMORY[0x24BEE17F0];
                    *(_QWORD *)(a2 + 72) = v8;
                    *(_QWORD *)(a2 + 136) = v55;
                    *(_QWORD *)(a2 + 144) = v56;
                    *(_QWORD *)(a2 + 104) = v56;
                    *(_QWORD *)(a2 + 112) = v58;
                    if (v30 >> 14 < v52 >> 14)
                    {
                      __break(1u);
LABEL_93:
                      if (!v30)
                        goto LABEL_39;
                      __break(1u);
                      goto LABEL_95;
                    }
                    swift_bridgeObjectRetain();
                    v34 = sub_2448EACA4();
                    v35 = MEMORY[0x2495192FC](v34);
                    v37 = v36;
                    swift_bridgeObjectRelease();
                    *(_QWORD *)(a2 + 176) = MEMORY[0x24BEE0D00];
                    *(_QWORD *)(a2 + 184) = v60;
                    *(_QWORD *)(a2 + 152) = v35;
                    *(_QWORD *)(a2 + 160) = v37;
                    sub_2448EA5A8();
                    swift_bridgeObjectRelease();
                  }
                }
                v38 = v62 >= a4;
                if (v25 > 0)
                  v38 = a4 >= v62;
                ++a1;
                v29 = a4;
                v30 = v64;
                if (v38)
                  goto LABEL_39;
              }
            }
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
            return result;
          }
LABEL_108:
          __break(1u);
          goto LABEL_109;
        }
LABEL_107:
        __break(1u);
        goto LABEL_108;
      }
    }
    __break(1u);
    goto LABEL_107;
  }
  return result;
}

uint64_t InvalidatableCache.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = swift_allocObject();
  InvalidatableCache.init()(v0, v1, v2, v3);
  return v0;
}

uint64_t InvalidatableCache.snapshot.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  type metadata accessor for Future(255, *(_QWORD *)(*(_QWORD *)v4 + 88), a3, a4);
  sub_2448EA8B4();
  v5 = sub_2448EA5D8();
  v6 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v5);
  SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/InvalidatableCache.swift", 130, 2, 62, 19, (uint64_t)"snapshot", 8, 2, v5, v6);
  return v8;
}

uint64_t InvalidatableCache.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v6 = (_QWORD *)*v4;
  v13[0] = v4[2];
  v7 = v6[10];
  v8 = type metadata accessor for Future(255, v6[11], a3, a4);
  v9 = v6[12];
  sub_2448EA8B4();
  v10 = sub_2448EA5D8();
  v11 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v10);
  SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/InvalidatableCache.swift", 130, 2, 20, 19, (uint64_t)"subscript(_:)", 13, 2, v10, v11);
  MEMORY[0x2495190C8](v13, a1, v13[1], v7, v8, v9);
  swift_bridgeObjectRelease();
  return v13[0];
}

uint64_t InvalidatableCache.futureResource(for:create:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23[2];
  _QWORD v24[6];

  v6 = *v4;
  v24[3] = v4[2];
  v7 = *(_QWORD *)(v6 + 88);
  v19 = *(_QWORD *)(v6 + 80);
  v20 = v7;
  v21 = *(_OWORD *)(v6 + 96);
  v22 = a1;
  type metadata accessor for Future(255, v7, a3, a4);
  sub_2448EA8B4();
  v8 = sub_2448EA5D8();
  type metadata accessor for Promise(255, v7, v9, v10);
  sub_2448EB508();
  swift_retain();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v12 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v8);
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_2447B9000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/InvalidatableCache.swift", 130, 2, 24, 49, (uint64_t)"futureResource(for:create:)", 27, 2, (uint64_t)sub_244886A1C, (uint64_t)v18, v8, TupleTypeMetadata2, v12);
  swift_release();
  v13 = v24[4];
  if (v24[5])
  {
    swift_retain();
    v14 = sub_244886A3C(v13);
    v15 = a2(v14);
    sub_244836CF8(v24);
    v16 = (void *)v24[0];
    v23[0] = v24[0];
    v23[1] = v24[1];
    Promise.track(future:on:)(v15, v23);
    swift_release_n();
    swift_release();
    sub_24481241C(v16);
  }
  return v13;
}

Swift::Void __swiftcall InvalidatableCache.invalidate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 80);
  v5 = *(_QWORD *)(*v2 + 88);
  type metadata accessor for Future(255, v5, v0, v1);
  v6 = *(_QWORD *)(v3 + 96);
  sub_2448EA8B4();
  v7 = sub_2448EA5D8();
  v8 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v7);
  SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/InvalidatableCache.swift", 130, 2, 54, 35, (uint64_t)"invalidate()", 12, 2, v7, v8);
  v9 = j_nullsub_1();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if ((v9 & 0xC000000000000001) != 0)
  {
    v10 = sub_2448EB97C();
    v26 = 0;
    v11 = 0;
    v12 = 0;
    v9 = v10 | 0x8000000000000000;
  }
  else
  {
    v13 = -1 << *(_BYTE *)(v9 + 32);
    v26 = v9 + 64;
    v11 = ~v13;
    v14 = -v13;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v12 = v15 & *(_QWORD *)(v9 + 64);
  }
  v16 = 0;
  v25 = (unint64_t)(v11 + 64) >> 6;
  if ((v9 & 0x8000000000000000) != 0)
    goto LABEL_10;
  while (1)
  {
    if (v12)
    {
      v17 = (v12 - 1) & v12;
      v18 = __clz(__rbit64(v12)) | (v16 << 6);
      v19 = v16;
      goto LABEL_27;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v20 >= v25)
      goto LABEL_30;
    v21 = *(_QWORD *)(v26 + 8 * v20);
    v19 = v16 + 1;
    if (!v21)
    {
      v19 = v16 + 2;
      if (v16 + 2 >= v25)
        goto LABEL_30;
      v21 = *(_QWORD *)(v26 + 8 * v19);
      if (!v21)
      {
        v19 = v16 + 3;
        if (v16 + 3 >= v25)
          goto LABEL_30;
        v21 = *(_QWORD *)(v26 + 8 * v19);
        if (!v21)
        {
          v19 = v16 + 4;
          if (v16 + 4 >= v25)
            goto LABEL_30;
          v21 = *(_QWORD *)(v26 + 8 * v19);
          if (!v21)
          {
            v22 = v16 + 5;
            while (v25 != v22)
            {
              v21 = *(_QWORD *)(v26 + 8 * v22++);
              if (v21)
              {
                v19 = v22 - 1;
                goto LABEL_26;
              }
            }
LABEL_30:
            sub_2447D1030();
            return;
          }
        }
      }
    }
LABEL_26:
    v17 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v19 << 6);
LABEL_27:
    v23 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v18);
    swift_retain();
    if (!v23)
      goto LABEL_30;
    while (1)
    {
      v24 = (_QWORD *)swift_allocObject();
      v24[2] = v4;
      v24[3] = v5;
      v24[4] = v6;
      v24[5] = *(_QWORD *)(v3 + 104);
      Future.observeSuccess(_:)((uint64_t)sub_244887190, (uint64_t)v24);
      swift_release();
      sub_2448D429C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/InvalidatableCache.swift", 130, 2, 56, 28, (uint64_t)"invalidate()", 12, 2);
      swift_release();
      v16 = v19;
      v12 = v17;
      if ((v9 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      if (sub_2448EB988())
      {
        swift_unknownObjectRelease();
        sub_2448EBBBC();
        swift_unknownObjectRelease();
        v19 = v16;
        v17 = v12;
        if (v27)
          continue;
      }
      goto LABEL_30;
    }
  }
  __break(1u);
}

_QWORD *InvalidatableCache.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  type metadata accessor for Future(0, *(_QWORD *)(*v4 + 88), a3, a4);
  v8 = sub_2448EA7C4();
  v5 = sub_2448EA8B4();
  v6 = sub_24481320C(&v8, v5);
  swift_bridgeObjectRelease();
  v4[2] = v6;
  return v4;
}

_QWORD *sub_244886888@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[4];
  uint64_t v23;

  v10 = *(_QWORD *)(a3 - 8);
  v11 = (uint64_t *)MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[3] = v11;
  v14 = *v11;
  v17 = type metadata accessor for Future(0, v16, v15, v16);
  v22[2] = a4;
  result = MEMORY[0x2495190C8](&v23, a2, v14, a3, v17, a4);
  v19 = v23;
  if (v23)
  {
    v20 = 0;
  }
  else
  {
    v22[1] = v5;
    v22[0] = sub_2447EB4A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/InvalidatableCache.swift", 130, 2, 29, 60, (uint64_t)"futureResource(for:create:)", 27, 2);
    v20 = v21;
    v19 = sub_24489A538((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/InvalidatableCache.swift", 130, 2, 32, 51, (uint64_t)"futureResource(for:create:)", 27, 2);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a2, a3);
    v23 = v19;
    sub_2448EA8B4();
    swift_retain();
    sub_2448EA8F0();
    result = (_QWORD *)swift_release();
  }
  *a5 = v19;
  a5[1] = v20;
  return result;
}

_QWORD *sub_244886A1C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return sub_244886888(a1, v2[6], v2[2], v2[4], a2);
}

uint64_t sub_244886A3C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  v7 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v3;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(v2 + 88);
  *(_QWORD *)(v8 + 40) = *(_QWORD *)(v2 + 104);
  *(_QWORD *)(v8 + 48) = v1;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v8 + v7, v6, v3);
  swift_retain();
  Future.observeFinish(_:)((uint64_t)sub_244887284, v8);
  return swift_release();
}

uint64_t sub_244886B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int EnumCaseMultiPayload;
  uint64_t v19;
  char *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v29 = a3;
  v5 = *(_QWORD **)a2;
  v6 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = MEMORY[0x24BDAC7A8](a1);
  v26 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v5[11];
  v28 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v27 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FutureTermination(0, v10, v12, v13);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v26 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)&v26 - v16, a1, v14);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    v19 = v29;
    if (EnumCaseMultiPayload == 1)
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    return sub_244886D28(v19);
  }
  else
  {
    v21 = v27;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v27, v17, v10);
    v22 = v26;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v26, v29, v6);
    v23 = (*(unsigned __int8 *)(v7 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v24 = (char *)swift_allocObject();
    *((_QWORD *)v24 + 2) = v6;
    *((_QWORD *)v24 + 3) = v10;
    *((_QWORD *)v24 + 4) = v5[12];
    v25 = v5[13];
    *((_QWORD *)v24 + 5) = v25;
    *((_QWORD *)v24 + 6) = a2;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v24[v23], v22, v6);
    swift_retain();
    Invalidatable.onInvalidation(_:)((void (*)(uint64_t))sub_244887314, (uint64_t)v24, v10, v25);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v21, v10);
  }
}

uint64_t sub_244886D28(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  _QWORD v17[2];

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v17[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[1] = v1[2];
  v7 = (*(uint64_t (**)(char *))(v4 + 16))(v6);
  MEMORY[0x24BDAC7A8](v7);
  v8 = (char *)&v17[-1] - ((v5 + 47) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v2 + 88);
  *(_QWORD *)v8 = v3;
  *((_QWORD *)v8 + 1) = v9;
  v16 = *(_OWORD *)(v2 + 96);
  *((_OWORD *)v8 + 1) = v16;
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v8 + 32, v6, v3);
  KeyPath = (uint64_t *)swift_getKeyPath();
  v17[0] = 0;
  type metadata accessor for Future(255, v9, v11, v12);
  sub_2448EA8B4();
  v13 = sub_2448EA5D8();
  swift_retain();
  v14 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v13);
  SynchronousAccessProviding.syncSetValue<A>(at:to:)(KeyPath, (uint64_t)v17, v13, v14);
  swift_release();
  swift_release();
  return swift_release();
}

_QWORD *sub_244886E94@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;

  v7 = *(_QWORD *)(a3 + a2 - 32);
  v8 = *(_QWORD *)(a3 + a2 - 16);
  v9 = *a1;
  v10 = type metadata accessor for Future(0, *(_QWORD *)(a3 + a2 - 24), a3, a4);
  result = MEMORY[0x2495190C8](&v12, a2, v9, v7, v10, v8);
  *a5 = v12;
  return result;
}

uint64_t sub_244886F08(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v5 = *(_QWORD *)(a4 + a3 - 32);
  v6 = *(_QWORD *)(a4 + a3 - 24);
  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v13 - v8, v9, v5);
  v13[1] = *a1;
  type metadata accessor for Future(255, v6, v10, v11);
  sub_2448EA8B4();
  swift_retain();
  return sub_2448EA8F0();
}

uint64_t InvalidatableCache.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t InvalidatableCache.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

void OnDemand.__allocating_init(create:)()
{
  swift_allocObject();
  OnDemand.init(create:)();
}

uint64_t sub_244887044()
{
  uint64_t v0;

  return v0;
}

void OnDemand.init(create:)()
{
  type metadata accessor for InvalidatableCache();
}

_QWORD *sub_2448870A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = swift_allocObject();
  InvalidatableCache.init()(v3, v4, v5, v6);
  v0[2] = v3;
  v0[3] = v2;
  v0[4] = v1;
  return v0;
}

uint64_t OnDemand.get()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  return InvalidatableCache.futureResource(for:create:)((uint64_t)&v6, *(uint64_t (**)(uint64_t))(v4 + 24), *(_QWORD *)(v4 + 32), a4);
}

Swift::Void __swiftcall OnDemand.invalidate()()
{
  InvalidatableCache.invalidate()();
}

uint64_t OnDemand.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return v0;
}

uint64_t OnDemand.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_244887180()
{
  return swift_deallocObject();
}

uint64_t sub_244887190()
{
  uint64_t v0;

  return sub_2448B06EC((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/InvalidatableCache.swift", 130, 2, 55, 52, (uint64_t)"invalidate()", 12, 2, *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 40));
}

void type metadata accessor for InvalidatableCache()
{
  JUMPOUT(0x24951ABD4);
}

uint64_t method lookup function for InvalidatableCache()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of InvalidatableCache.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_244887210()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for OnDemand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OnDemand);
}

uint64_t method lookup function for OnDemand()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of OnDemand.__allocating_init(create:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_244887284(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 16) - 8) + 80);
  return sub_244886B28(a1, *(_QWORD *)(v1 + 48), v1 + ((v2 + 56) & ~v2));
}

uint64_t objectdestroy_2Tm_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_244887314()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80);
  return sub_244886D28(v0 + ((v1 + 56) & ~v1));
}

uint64_t sub_244887350(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

unint64_t sub_244887360(_QWORD *a1)
{
  return ((*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
}

uint64_t sub_244887388(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + a1 - 32) - 8) + 8))();
}

__n128 sub_24488739C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + a1 - 32) - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  v6 = (*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = a1 + v6;
  v8 = a2 + v6;
  result = *(__n128 *)(v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v7;
  *(__n128 *)(v8 + 16) = result;
  return result;
}

uint64_t sub_2448873FC()
{
  return sub_2448EAA64() & 1;
}

uint64_t sub_24488743C()
{
  return sub_2448EA92C();
}

__n128 sub_24488746C(__n128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 result;

  v4 = *(_QWORD *)(a1->n128_u64[0] - 8);
  v5 = *(_QWORD *)(v4 + 64);
  (*(void (**)(uint64_t, unint64_t))(v4 + 32))(a2, (unint64_t)a1->n128_u64+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
  v6 = (__n128 *)(a2 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  result = a1[1];
  *v6 = *a1;
  v6[1] = result;
  return result;
}

void ResourceHub.__allocating_init(serviceName:resourceName:bootstrapResource:)()
{
  swift_allocObject();
  ResourceHub.init(serviceName:resourceName:bootstrapResource:)();
}

uint64_t sub_244887530()
{
  uint64_t v0;

  return v0;
}

void ResourceHub.init(serviceName:resourceName:bootstrapResource:)()
{
  swift_defaultActor_initialize();
  type metadata accessor for ResourceHub.ResourceState();
}

_QWORD *sub_2448875B8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_getTupleTypeMetadata2();
  sub_2448EAE54();
  v1[14] = sub_2448EA848();
  v1[15] = v6;
  v1[16] = v5;
  v1[17] = v4;
  v1[18] = v3;
  v1[19] = v2;
  v1[20] = v0;
  return v1;
}

uint64_t sub_24488762C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4[8] = a3;
  v4[9] = v3;
  v4[6] = a1;
  v4[7] = a2;
  v4[10] = *v3;
  return swift_task_switch();
}

void sub_244887650()
{
  _QWORD *v0;
  _QWORD *v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9[3];

  if (qword_257389CA0 != -1)
    swift_once();
  v1 = (_QWORD *)((char *)off_25738DB00 + 16);
  v2 = (os_unfair_lock_s *)((char *)off_25738DB00 + 24);
  swift_retain();
  os_unfair_lock_lock(v2);
  sub_24483B130(v1, v9);
  os_unfair_lock_unlock(v2);
  v3 = v0[10];
  v4 = v0[7];
  v5 = v9[0];
  v8 = v0[8];
  swift_release();
  v6 = static Task.create<>(file:line:column:function:)(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ResourceHub.swift", 123, 2, 59, 59, (uint64_t)"requestResource(for:with:)", 26, 2, *(_QWORD *)(v3 + 80));
  v7 = v9[0];
  v0[11] = v6;
  v0[12] = v7;
  v9[0] = v5;
  v9[1] = v7;
  swift_retain();
  sub_244888878((uint64_t)v9, v4, v8);
}

uint64_t sub_244887850()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t sub_2448878CC()
{
  uint64_t v0;

  swift_release_n();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24488790C()
{
  uint64_t v0;

  swift_release_n();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_244887968()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0A8);
  *v1 = v0;
  v1[1] = sub_2447C81F0;
  return sub_2448EB028();
}

uint64_t sub_2448879EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v19;
  uint64_t v20;

  v20 = a3;
  v6 = *(_QWORD **)a2;
  v7 = *(_QWORD *)(*(_QWORD *)a2 + 88);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A208);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v6[10];
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0A8);
  sub_2448EB034();
  v15 = sub_2448EAF74();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v13, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a4, v7);
  v16 = (*(unsigned __int8 *)(v8 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v17 = (char *)swift_allocObject();
  *((_QWORD *)v17 + 2) = 0;
  *((_QWORD *)v17 + 3) = 0;
  *((_QWORD *)v17 + 4) = v14;
  *((_QWORD *)v17 + 5) = v7;
  *((_QWORD *)v17 + 6) = v6[12];
  *((_QWORD *)v17 + 7) = v6[13];
  *((_QWORD *)v17 + 8) = a2;
  *((_QWORD *)v17 + 9) = v20;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v17[v16], v10, v7);
  swift_retain();
  sub_2447C5CB8((uint64_t)v13, (uint64_t)&unk_25738FCA0, (uint64_t)v17);
  return swift_release();
}

uint64_t sub_244887B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a4;
  v6[4] = a6;
  v6[2] = a5;
  return swift_task_switch();
}

void sub_244887B9C()
{
  uint64_t v0;

  sub_244888F6C(v0 + 16);
}

uint64_t sub_244887BBC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_244887BD0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v6;

  *(_QWORD *)(v3 + 16) = v2;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v6;
  *v6 = v3;
  v6[1] = sub_244887C4C;
  v6[9] = v2;
  v6[6] = a1;
  v6[7] = a2;
  v6[10] = *v2;
  return swift_task_switch();
}

uint64_t sub_244887C4C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 32) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_244887CB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[21];

  v9[13] = a1;
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v9[15] = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x24BDAC7A8](a1);
  v9[5] = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v9[16] = (char *)v9 - v5;
  v7 = v6[12];
  v8 = v6[13];
  v9[17] = v6[10];
  v9[18] = v2;
  v9[11] = v7;
  v9[19] = v7;
  v9[20] = v8;
  type metadata accessor for ResourceHub.ResourceState();
}

void sub_244888480(uint64_t a1)
{
  MEMORY[0x24BDAC7A8](a1);
  sub_2448EAD94();
  sub_244887CB8(a1);
}

void sub_244888524(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v10 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v4[12];
  v6 = v4[13];
  v8 = v4[10];
  v9 = v5;
  v12 = v8;
  v13 = v2;
  v14 = v5;
  v15 = v6;
  type metadata accessor for ResourceHub.ResourceState();
}

uint64_t sub_2448885A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t EnumCaseMultiPayload;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[96];

  v7 = sub_2448EB508();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v9);
  v13 = &v20[-v12];
  swift_beginAccess();
  v14 = *(_QWORD *)(v2 + 112);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v5 - 168) = v4;
  MEMORY[0x2495190C8](v4, v14, v1, a1, v3);
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(a1 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, a1) == 1)
  {
    (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v13, v7);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (!(_DWORD)EnumCaseMultiPayload)
    {
      *(_QWORD *)(v5 - 200) = v20;
      *(_QWORD *)(v5 - 144) = *v13;
      MEMORY[0x24BDAC7A8](EnumCaseMultiPayload);
      v18 = *(_QWORD *)(v5 - 192);
      v17 = *(_QWORD *)(v5 - 184);
      *(_QWORD *)&v20[-32] = v18;
      *(_QWORD *)&v20[-24] = v1;
      *(_QWORD *)&v20[-16] = v17;
      *(_QWORD *)&v20[-8] = v3;
      *(_QWORD *)(v5 - 136) = v18;
      *(_QWORD *)(v5 - 128) = v1;
      *(_QWORD *)(v5 - 120) = v17;
      *(_QWORD *)(v5 - 112) = v3;
      type metadata accessor for ResourceHub.Request();
    }
    (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v13, a1);
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v5 - 176) + 16))(*(_QWORD *)(v5 - 160), *(_QWORD *)(v5 - 168), v1);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v11, 1, 1, a1);
  swift_beginAccess();
  sub_2448EA8B4();
  sub_2448EA8F0();
  return swift_endAccess();
}

void sub_2448887D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v4 = type metadata accessor for Task.Promise(0, a2, v3, MEMORY[0x24BEE3F20]);
  v5 = MEMORY[0x24951AC70](&protocol conformance descriptor for Task<A, B>.Promise, v4);
  PromiseProtocol.cancel<>(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ResourceHub.swift", 123, 2, 117, 49, (uint64_t)"purgeResource(for:)", 19, 2, v4, v5);
}

void sub_244888878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[22];

  v4 = *(_QWORD *)(*(_QWORD *)v3 + 80);
  v13[3] = *(_QWORD *)(v4 - 8);
  v13[4] = a3;
  v5 = MEMORY[0x24BDAC7A8](a1);
  v13[2] = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v7 + 88);
  v13[6] = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v13[10] = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 + 96);
  v12 = *(_QWORD *)(v10 + 104);
  v13[12] = v4;
  v13[13] = v8;
  v13[9] = v11;
  v13[14] = v11;
  v13[15] = v12;
  type metadata accessor for ResourceHub.ResourceState();
}

uint64_t sub_244888930(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int EnumCaseMultiPayload;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[64];

  v9 = sub_2448EB508();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = &v48[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v10);
  v14 = &v48[-v13];
  *(_QWORD *)(v7 - 216) = *v3;
  v15 = v3[1];
  *(_QWORD *)(v7 - 200) = v2 + 112;
  *(_QWORD *)(v7 - 192) = v15;
  swift_beginAccess();
  *(_QWORD *)(v7 - 168) = v2;
  v16 = *(_QWORD *)(v2 + 112);
  swift_bridgeObjectRetain();
  v17 = v6;
  v18 = v6;
  v19 = v4;
  MEMORY[0x2495190C8](v18, v16, v5, a1, v4);
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(a1 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v20 + 48))(v14, 1, a1) == 1)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 208) + 16))(*(_QWORD *)(v7 - 176), v17, v5);
    *(_QWORD *)(v7 - 160) = v1;
    *(_QWORD *)(v7 - 152) = v5;
    *(_QWORD *)(v7 - 144) = *(_QWORD *)(v7 - 184);
    *(_QWORD *)(v7 - 136) = v4;
    type metadata accessor for ResourceHub.Request();
  }
  *(_QWORD *)(v7 - 224) = v17;
  *(_QWORD *)(v7 - 256) = v12;
  *(_QWORD *)(v7 - 248) = v5;
  v21 = *(_QWORD *)(v7 - 184);
  v22 = *(_QWORD *)(v7 - 176);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    *(_QWORD *)(v7 - 168) = v20;
    v33 = *(_QWORD *)(v7 - 248);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 - 208) + 16))(v22, *(_QWORD *)(v7 - 224), v33);
    *(_QWORD *)(v7 - 160) = v1;
    *(_QWORD *)(v7 - 152) = v33;
    *(_QWORD *)(v7 - 144) = v21;
    *(_QWORD *)(v7 - 136) = v19;
    type metadata accessor for ResourceHub.Request();
  }
  *(_QWORD *)(v7 - 184) = a1;
  if (EnumCaseMultiPayload == 1)
  {
    v24 = *(_QWORD *)(v7 - 240);
    v25 = *(_QWORD *)(v7 - 232);
    v26 = v1;
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v25 + 32))(v24, v14, v1);
    *(_QWORD *)(v7 - 160) = *(_QWORD *)(v7 - 192);
    v27 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
    v28 = type metadata accessor for Task.Promise(0, v1, v27, MEMORY[0x24BEE3F20]);
    v29 = MEMORY[0x24951AC70](&protocol conformance descriptor for Task<A, B>.Promise, v28);
    if ((PromiseProtocol.fulfill(file:line:column:function:returning:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ResourceHub.swift", 123, 2, 135, 39, (uint64_t)"storeOrResumeRequest(_:for:with:)", 33, 2, v24, v28, v29) & 1) != 0)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v7 - 208) + 16))(v22, *(_QWORD *)(v7 - 224), *(_QWORD *)(v7 - 248));
      v30 = *(_QWORD *)(v7 - 256);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v30, v24, v1);
      v31 = *(_QWORD *)(v7 - 184);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(v30, 0, 1, v31);
      swift_beginAccess();
      sub_2448EA8B4();
      sub_2448EA8F0();
      swift_endAccess();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v24, v1);
    }
  }
  else
  {
    v34 = v20;
    *(_QWORD *)(v7 - 120) = *(_QWORD *)(v7 - 192);
    swift_retain();
    sub_244889E8C((uint64_t *)(v7 - 160));
    v35 = *(_QWORD *)(v7 - 136);
    v36 = __swift_project_boxed_opaque_existential_1((_QWORD *)(v7 - 160), v35);
    v37 = *(_QWORD *)(v35 - 8);
    MEMORY[0x24BDAC7A8](v36);
    v39 = &v48[-((v38 + 15) & 0xFFFFFFFFFFFFFFF0)];
    (*(void (**)(_BYTE *))(v37 + 16))(v39);
    v40 = sub_2448EBB80();
    if (v40)
    {
      v41 = (void *)v40;
      (*(void (**)(_BYTE *, uint64_t))(v37 + 8))(v39, v35);
    }
    else
    {
      v41 = (void *)swift_allocError();
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v37 + 32))(v42, v39, v35);
    }
    v43 = v1;
    v44 = *(_QWORD *)(v7 - 184);
    v45 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
    v46 = type metadata accessor for Task.Promise(0, v43, v45, MEMORY[0x24BEE3F20]);
    v47 = MEMORY[0x24951AC70](&protocol conformance descriptor for Task<A, B>.Promise, v46);
    PromiseProtocol.fulfill<>(file:line:column:function:throwing:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ResourceHub.swift", 123, 2, 140, 36, (uint64_t)"storeOrResumeRequest(_:for:with:)", 33, 2, (uint64_t)v41, v46, v47);

    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v7 - 160);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v34 + 8))(v14, v44);
  }
}

void sub_244888F6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[16];

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v7[3] = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7[6] = (char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v4[12];
  v6 = v4[13];
  v7[9] = v4[10];
  v7[10] = v2;
  v7[1] = v5;
  v7[11] = v5;
  v7[12] = v6;
  type metadata accessor for ResourceHub.ResourceState();
}

uint64_t sub_244888FF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[96];

  v9 = sub_2448EB508();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  *(_QWORD *)(v7 - 176) = &v21[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v11);
  v14 = &v21[-v13];
  *(_QWORD *)(v7 - 208) = *v6;
  *(_QWORD *)(v7 - 192) = v2 + 112;
  swift_beginAccess();
  v15 = *(_QWORD *)(v2 + 112);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v7 - 168) = v5;
  MEMORY[0x2495190C8](v5, v15, v1, a1, v4);
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(a1 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, a1) == 1)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v10 + 8))(v14, v9);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!(_DWORD)EnumCaseMultiPayload)
  {
    *(_QWORD *)(v7 - 144) = *v14;
    MEMORY[0x24BDAC7A8](EnumCaseMultiPayload);
    *(_QWORD *)&v21[-48] = v3;
    *(_QWORD *)&v21[-40] = v1;
    v20 = *(_QWORD *)(v7 - 208);
    v19 = *(_QWORD *)(v7 - 200);
    *(_QWORD *)&v21[-32] = v19;
    *(_QWORD *)&v21[-24] = v4;
    *(_QWORD *)&v21[-16] = v20;
    *(_QWORD *)(v7 - 136) = v3;
    *(_QWORD *)(v7 - 128) = v1;
    *(_QWORD *)(v7 - 120) = v19;
    *(_QWORD *)(v7 - 112) = v4;
    type metadata accessor for ResourceHub.Request();
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v16 + 8))(v14, a1);
}

uint64_t sub_244889258(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = a2;
  v23 = a1;
  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 96);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v22 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v3[11];
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A208);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_2448EAF74();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v23, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v24, v4);
  v16 = (*(unsigned __int8 *)(v9 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v17 = (v10 + *(unsigned __int8 *)(v5 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v18 = (char *)swift_allocObject();
  *((_QWORD *)v18 + 2) = 0;
  *((_QWORD *)v18 + 3) = 0;
  *((_QWORD *)v18 + 4) = v3[10];
  *((_QWORD *)v18 + 5) = v8;
  *((_QWORD *)v18 + 6) = v4;
  v19 = v3[13];
  v20 = v25;
  *((_QWORD *)v18 + 7) = v19;
  *((_QWORD *)v18 + 8) = v20;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v18[v16], v11, v8);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v18[v17], v22, v4);
  swift_retain();
  sub_2448899A4((uint64_t)v14, (uint64_t)&unk_25738FC80, (uint64_t)v18);
  swift_release();
  return sub_2447C7D14((uint64_t)v14);
}

uint64_t sub_244889430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;

  v6[7] = a5;
  v6[8] = a6;
  v6[6] = a4;
  v7 = *(_QWORD *)(*(_QWORD *)a4 + 88);
  v6[9] = v7;
  v6[10] = *(_QWORD *)(v7 - 8);
  v6[11] = swift_task_alloc();
  v6[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_2448894A4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD, _QWORD);

  v3 = (uint64_t (*)(_QWORD, _QWORD))(**(int **)(v0[6] + 152) + *(_QWORD *)(v0[6] + 152));
  v1 = (_QWORD *)swift_task_alloc();
  v0[13] = v1;
  *v1 = v0;
  v1[1] = sub_244889504;
  return v3(v0[7], v0[8]);
}

uint64_t sub_244889504()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 112) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_244889580()
{
  uint64_t v0;

  sub_244889B2C(*(_QWORD *)(v0 + 112));
}

uint64_t sub_2448895A0()
{
  return swift_task_switch();
}

uint64_t sub_2448895C0()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_244889600()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t type;
  NSObject *log;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;

  if (qword_257389CF0 != -1)
    swift_once();
  v1 = (void *)v0[14];
  v3 = v0[10];
  v2 = v0[11];
  v4 = v0[9];
  v5 = v0[7];
  v6 = sub_2448EA5FC();
  __swift_project_value_buffer(v6, (uint64_t)qword_25738F7C8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v7(v2, v5, v4);
  v8 = v1;
  swift_retain();
  v9 = v1;
  v10 = sub_2448EA5E4();
  v11 = sub_2448EB3A0();
  v12 = os_log_type_enabled(v10, v11);
  v13 = (void *)v0[14];
  if (v12)
  {
    v30 = v0[11];
    v31 = v0[10];
    v28 = v0[9];
    v29 = v0[12];
    v14 = (_QWORD *)v0[6];
    v15 = swift_slowAlloc();
    v34 = (_QWORD *)swift_slowAlloc();
    v35 = swift_slowAlloc();
    v36 = v35;
    *(_DWORD *)v15 = 136446978;
    log = v10;
    type = v11;
    v17 = v14[15];
    v16 = v14[16];
    swift_bridgeObjectRetain();
    v0[2] = sub_2447D6798(v17, v16, &v36);
    sub_2448EB598();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    v18 = v14[17];
    v19 = v14[18];
    swift_bridgeObjectRetain();
    v0[3] = sub_2447D6798(v18, v19, &v36);
    sub_2448EB598();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    v7(v29, v30, v28);
    v20 = sub_2448EAAE8();
    v0[4] = sub_2447D6798(v20, v21, &v36);
    sub_2448EB598();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v28);
    *(_WORD *)(v15 + 32) = 2114;
    v22 = v13;
    v23 = _swift_stdlib_bridgeErrorToNSError();
    v0[5] = v23;
    sub_2448EB598();
    *v34 = v23;

    _os_log_impl(&dword_2447B9000, log, type, "%{public}s was unable to bootstrap %{public}s for '%{public}s': %{public}@", (uint8_t *)v15, 0x2Au);
    __swift_instantiateConcreteTypeFromMangledName(qword_25738AEF0);
    swift_arrayDestroy();
    MEMORY[0x24951AD84](v34, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24951AD84](v35, -1, -1);
    MEMORY[0x24951AD84](v15, -1, -1);

  }
  else
  {
    v25 = v0[10];
    v24 = v0[11];
    v26 = v0[9];
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);

  }
  return swift_task_switch();
}

uint64_t sub_2448899A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A208);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_244883CDC(a1, (uint64_t)v8);
  v9 = sub_2448EAF74();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_2447C7D14((uint64_t)v8);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v11 = sub_2448EAF14();
      v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_2448EAF68();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v11 = 0;
  v13 = 0;
LABEL_6:
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

void sub_244889B2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[16];

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v3 = *(_QWORD *)(v2 - 8);
  v8[3] = a1;
  v8[4] = v3;
  MEMORY[0x24BDAC7A8](a1);
  v8[6] = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v5[12];
  v6 = v5[13];
  v8[9] = v5[10];
  v8[10] = v2;
  v8[11] = v7;
  v8[12] = v6;
  type metadata accessor for ResourceHub.ResourceState();
}

uint64_t sub_244889BA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t EnumCaseMultiPayload;
  uint64_t v17;
  _BYTE v18[96];

  v9 = sub_2448EB508();
  v10 = MEMORY[0x24BDAC7A8](v9);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (uint64_t *)&v18[-v11];
  swift_beginAccess();
  v13 = *(_QWORD *)(v2 + 112);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v7 - 168) = v3;
  MEMORY[0x2495190C8](v3, v13, v1, a1, v4);
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a1 - 8);
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v14 + 48))(v12, 1, a1);
  if ((_DWORD)result != 1)
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (!(_DWORD)EnumCaseMultiPayload)
    {
      *(_QWORD *)(v7 - 192) = v18;
      v17 = *v12;
      *(_QWORD *)(v7 - 200) = *v12;
      *(_QWORD *)(v7 - 144) = v17;
      MEMORY[0x24BDAC7A8](EnumCaseMultiPayload);
      *(_QWORD *)&v18[-48] = v5;
      *(_QWORD *)&v18[-40] = v1;
      *(_QWORD *)&v18[-32] = v6;
      *(_QWORD *)&v18[-24] = v4;
      *(_QWORD *)&v18[-16] = *(_QWORD *)(v7 - 184);
      *(_QWORD *)(v7 - 136) = v5;
      *(_QWORD *)(v7 - 128) = v1;
      *(_QWORD *)(v7 - 120) = v6;
      *(_QWORD *)(v7 - 112) = v4;
      type metadata accessor for ResourceHub.Request();
    }
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v14 + 8))(v12, a1);
  }
  return result;
}

uint64_t sub_244889DCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_retain();
  v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v6 = type metadata accessor for Task.Promise(0, a3, v5, MEMORY[0x24BEE3F20]);
  v7 = MEMORY[0x24951AC70](&protocol conformance descriptor for Task<A, B>.Promise, v6);
  PromiseProtocol.fulfill<>(file:line:column:function:throwing:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ResourceHub.swift", 123, 2, 172, 50, (uint64_t)"handleBootstrapError(_:for:)", 28, 2, a2, v6, v7);
  return swift_release();
}

double sub_244889E8C@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  sub_2448EB79C();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  sub_2448EBBA4();
  sub_2448EABC0();
  a1[3] = (uint64_t)&type metadata for LowValueError;
  a1[4] = sub_24488BDF4();
  v2 = swift_allocObject();
  *a1 = v2;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0xE000000000000000;
  result = 0.0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_BYTE *)(v2 + 64) = 0;
  return result;
}

uint64_t sub_244889FDC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  sub_2448EB79C();
  sub_2448EABC0();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  sub_2448EBBA4();
  sub_2448EABC0();
  sub_2448EB79C();
  sub_2448EABC0();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  sub_2448EBBA4();
  sub_2448EABC0();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  sub_2448EBBA4();
  a1[3] = (uint64_t)&type metadata for LowValueError;
  a1[4] = sub_24488BDF4();
  result = swift_allocObject();
  *a1 = result;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0xE000000000000000;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0xE000000000000000;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_BYTE *)(result + 64) = 0;
  return result;
}

uint64_t ResourceHub.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t ResourceHub.__deallocating_deinit()
{
  ResourceHub.deinit();
  return swift_defaultActor_deallocate();
}

uint64_t ResourceHub.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_24488A250()
{
  return ResourceHub.unownedExecutor.getter();
}

uint64_t ResourceHub.requestResource(for:with:withTimeout:makeTimeoutError:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v7 + 64) = a6;
  *(_QWORD *)(v7 + 72) = v6;
  *(_QWORD *)(v7 + 48) = a3;
  *(_QWORD *)(v7 + 56) = a5;
  *(_QWORD *)(v7 + 32) = a1;
  *(_QWORD *)(v7 + 40) = a2;
  v9 = *v6;
  *(_QWORD *)(v7 + 80) = *v6;
  v10 = *(_QWORD *)(v9 + 96);
  *(_QWORD *)(v7 + 88) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v7 + 96) = v11;
  *(_QWORD *)(v7 + 104) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v7 + 112) = swift_task_alloc();
  v12 = *(_QWORD *)(v9 + 88);
  *(_QWORD *)(v7 + 120) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v7 + 128) = v13;
  *(_QWORD *)(v7 + 136) = *(_QWORD *)(v13 + 64);
  *(_QWORD *)(v7 + 144) = swift_task_alloc();
  v14 = swift_task_alloc();
  v15 = *a4;
  *(_QWORD *)(v7 + 152) = v14;
  *(_QWORD *)(v7 + 160) = v15;
  *(_BYTE *)(v7 + 25) = *((_BYTE *)a4 + 8);
  return swift_task_switch();
}

uint64_t sub_24488A328()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_BYTE *)(v0 + 25);
  v2 = *(_QWORD *)(v0 + 136);
  v27 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 112);
  v23 = *(_QWORD *)(v0 + 152);
  v24 = v5;
  v6 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 96);
  v22 = v7;
  v8 = *(_QWORD *)(v0 + 80);
  v30 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 48);
  v28 = *(_QWORD *)(v0 + 56);
  v29 = *(_QWORD *)(v0 + 64);
  v10 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 160);
  *(_BYTE *)(v0 + 24) = v1;
  v25 = *(void (**)(void))(v3 + 16);
  v26 = v10;
  v25();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v9, v6);
  v11 = *(unsigned __int8 *)(v3 + 80);
  v12 = (v11 + 56) & ~v11;
  v13 = (v2 + *(unsigned __int8 *)(v7 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v14 = (char *)swift_allocObject();
  *(_QWORD *)(v0 + 168) = v14;
  v15 = *(_QWORD *)(v8 + 80);
  *((_QWORD *)v14 + 2) = v15;
  *((_QWORD *)v14 + 3) = v4;
  *((_QWORD *)v14 + 4) = v6;
  v16 = *(_QWORD *)(v8 + 104);
  *((_QWORD *)v14 + 5) = v16;
  *((_QWORD *)v14 + 6) = v30;
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
  v17(&v14[v12], v23, v4);
  v18 = v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))(&v14[v13], v24, v6);
  ((void (*)(uint64_t, uint64_t, uint64_t))v25)(v27, v26, v4);
  v19 = (char *)swift_allocObject();
  *(_QWORD *)(v0 + 176) = v19;
  *((_QWORD *)v19 + 2) = v15;
  *((_QWORD *)v19 + 3) = v4;
  *((_QWORD *)v19 + 4) = v18;
  *((_QWORD *)v19 + 5) = v16;
  *((_QWORD *)v19 + 6) = v28;
  *((_QWORD *)v19 + 7) = v29;
  *((_QWORD *)v19 + 8) = v30;
  v17(&v19[(v11 + 72) & ~v11], v27, v4);
  swift_retain_n();
  sub_2447F0EAC(v28);
  v20 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 184) = v20;
  *v20 = v0;
  v20[1] = sub_24488A52C;
  return withTimeout<A>(_:perform:makeTimeoutError:)(*(_QWORD *)(v0 + 32), v0 + 16, (uint64_t)&unk_25738FAC8, (uint64_t)v14, (uint64_t)&unk_25738FAD8, (uint64_t)v19, v15);
}

uint64_t sub_24488A52C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 192) = v0;
  swift_task_dealloc();
  swift_release();
  swift_release();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_24488A5EC()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24488A634(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_2447C62E8;
  v9[8] = a4;
  v9[9] = a2;
  v9[6] = a1;
  v9[7] = a3;
  v9[10] = *a2;
  return swift_task_switch();
}

uint64_t sub_24488A6B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v5 + 80) = a3;
  *(_QWORD *)(v5 + 88) = a4;
  *(_QWORD *)(v5 + 64) = a1;
  *(_QWORD *)(v5 + 72) = a2;
  *(double *)(v5 + 56) = a5;
  v6 = *(_QWORD *)(*(_QWORD *)a3 + 88);
  *(_QWORD *)(v5 + 96) = v6;
  *(_QWORD *)(v5 + 104) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 112) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24488A71C()
{
  uint64_t v0;
  uint64_t (*v1)(double);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(uint64_t (**)(double))(v0 + 64);
  v3 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 96);
  if (v1)
  {
    v6 = v1(*(double *)(v0 + 56));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
    if (v6)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 96));
      goto LABEL_9;
    }
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v3 + 16))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
  }
  sub_24488A894((uint64_t *)(v0 + 16));
  v7 = *(_QWORD *)(v0 + 40);
  v8 = __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v7);
  v9 = *(_QWORD *)(v7 - 8);
  v10 = swift_task_alloc();
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v9 + 16))(v10, v8, v7);
  v11 = sub_2448EBB80();
  if (v11)
  {
    v6 = v11;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v7);
  }
  else
  {
    v6 = swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v12, v10, v7);
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 96));
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
LABEL_9:
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
}

double sub_24488A894@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  sub_2448EB79C();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  sub_2448EB0B8();
  sub_2448EABC0();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  sub_2448EBBA4();
  sub_2448EABC0();
  a1[3] = (uint64_t)&type metadata for LowValueError;
  a1[4] = sub_24488BDF4();
  v2 = swift_allocObject();
  *a1 = v2;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0xE000000000000000;
  result = 0.0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_BYTE *)(v2 + 64) = 2;
  return result;
}

uint64_t ResourceHub.requestResource<>(for:withTimeout:makeTimeoutError:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char v11;
  _QWORD *v12;
  uint64_t v13;

  *(_QWORD *)(v6 + 32) = v5;
  v11 = *(_BYTE *)(a3 + 8);
  *(_QWORD *)(v6 + 16) = *(_QWORD *)a3;
  *(_BYTE *)(v6 + 24) = v11;
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 40) = v12;
  *v12 = v6;
  v12[1] = sub_24488AAC0;
  return ResourceHub.requestResource(for:with:withTimeout:makeTimeoutError:)(a1, a2, v13, (uint64_t *)(v6 + 16), a4, a5);
}

uint64_t sub_24488AAC0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_24488AB2C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void type metadata accessor for ResourceHub.ResourceState()
{
  JUMPOUT(0x24951ABD4);
}

uint64_t sub_24488AB44()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_2447C81F0;
  return sub_244887968();
}

uint64_t sub_24488ABC4()
{
  uint64_t *v0;

  return sub_2448879EC(v0[2], v0[3], v0[4], v0[5]);
}

void type metadata accessor for ResourceHub()
{
  JUMPOUT(0x24951ABD4);
}

void type metadata accessor for ResourceHub.Request()
{
  JUMPOUT(0x24951ABD4);
}

void sub_24488ABE8(uint64_t a1)
{
  uint64_t v1;

  sub_2448887D4(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_24488AC04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v1 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v2 - 8);
  v6 = (v4 + *(_QWORD *)(v3 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, v1);
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v6, v2);
  return swift_deallocObject();
}

uint64_t sub_24488ACAC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(v1[3] - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v1[4] - 8) + 80);
  v7 = (_QWORD *)v1[6];
  v8 = (uint64_t)v1 + v5;
  v9 = (uint64_t)v1 + ((v5 + *(_QWORD *)(v4 + 64) + v6) & ~v6);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_2447C62E8;
  return sub_24488A634(a1, v7, v8, v9);
}

uint64_t sub_24488AD48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  if (*(_QWORD *)(v0 + 48))
    swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + ((v3 + 72) & ~v3), v1);
  return swift_deallocObject();
}

uint64_t sub_24488ADCC(double a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(v1[3] - 8) + 80);
  v5 = v1[6];
  v6 = v1[7];
  v7 = v1[8];
  v8 = (uint64_t)v1 + ((v4 + 72) & ~v4);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_2447FB2A0;
  return sub_24488A6B4(v5, v6, v7, v8, a1);
}

uint64_t sub_24488AE58()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for ResourceHub()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ResourceHub.__allocating_init(serviceName:resourceName:bootstrapResource:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of ResourceHub.requestResource(for:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 184)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 184));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_2447C81F0;
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of ResourceHub.requestResource<>(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 192) + *(_QWORD *)(*(_QWORD *)v2 + 192));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_2447C81F0;
  return v8(a1, a2);
}

uint64_t dispatch thunk of ResourceHub.deliverResource(_:for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of ResourceHub.deliverResource<>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of ResourceHub.purgeResource(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

_QWORD *sub_24488B00C(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *sub_24488B04C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

uint64_t sub_24488B07C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *sub_24488B0F4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 >= 3)
    {
      if (v5 <= 3)
        v10 = v5;
      else
        v10 = 4;
      __asm { BR              X13 }
    }
    if (v9 == 2)
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v5) = 2;
    }
    else if (v9 == 1)
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v5) = 1;
    }
    else
    {
      *a1 = *a2;
      *((_BYTE *)a1 + v5) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return v3;
}

uint64_t sub_24488B22C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 8)
    v3 = 8;
  v4 = *(unsigned __int8 *)(a1 + v3);
  if (v4 < 3)
  {
    if (v4 == 2 || v4 == 1)
      return (*(uint64_t (**)(void))(v2 + 8))();
    else
      return swift_bridgeObjectRelease();
  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    return ((uint64_t (*)(void))((char *)&loc_24488B274 + 4 * byte_2448F4E85[v5]))();
  }
}

_QWORD *sub_24488B2D4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 3)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 2)
  {
    (*(void (**)(_QWORD *))(v4 + 16))(a1);
    v8 = 2;
  }
  else
  {
    if (v6 != 1)
    {
      *a1 = *a2;
      *((_BYTE *)a1 + v5) = 0;
      swift_bridgeObjectRetain();
      return a1;
    }
    (*(void (**)(_QWORD *))(v4 + 16))(a1);
    v8 = 1;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

_QWORD *sub_24488B3C8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 3)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 2 || v8 == 1)
      (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    else
      swift_bridgeObjectRelease();
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 3)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 2)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
      v12 = 2;
    }
    else
    {
      if (v10 != 1)
      {
        *a1 = *a2;
        *((_BYTE *)a1 + v7) = 0;
        swift_bridgeObjectRetain();
        return a1;
      }
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
      v12 = 1;
    }
    *((_BYTE *)a1 + v7) = v12;
  }
  return a1;
}

_QWORD *sub_24488B584(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 3)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 2)
  {
    (*(void (**)(_QWORD *))(v4 + 32))(a1);
    v8 = 2;
  }
  else if (v6 == 1)
  {
    (*(void (**)(_QWORD *))(v4 + 32))(a1);
    v8 = 1;
  }
  else
  {
    v8 = 0;
    *a1 = *a2;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

_QWORD *sub_24488B674(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 3)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 2 || v8 == 1)
      (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    else
      swift_bridgeObjectRelease();
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 3)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 2)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 2;
    }
    else if (v10 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 1;
    }
    else
    {
      v12 = 0;
      *a1 = *a2;
    }
    *((_BYTE *)a1 + v7) = v12;
  }
  return a1;
}

uint64_t sub_24488B82C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 8uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 253) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 3)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 254);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_24488B8F0 + 4 * byte_2448F4EA8[(v4 - 1)]))();
}

void sub_24488B93C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 8)
    v5 = 8;
  v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v8 = a2 - 254;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_24488BAE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) > 8uLL)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 3u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_24488BB2C + 4 * byte_2448F4EB6[v3]))();
}

void sub_24488BB74(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) <= 8uLL)
    v4 = 8;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 2)
  {
    v5 = a2 - 3;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 3;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 3;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t sub_24488BC3C(uint64_t a1)
{
  uint64_t v1;

  return sub_244889DCC(a1, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 16));
}

uint64_t sub_24488BC5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v1 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v2 - 8);
  v6 = (v4 + *(_QWORD *)(v3 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, v1);
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v6, v2);
  return swift_deallocObject();
}

uint64_t sub_24488BD0C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(v1[5] - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v1[6] - 8) + 80);
  v7 = v1[2];
  v8 = v1[3];
  v9 = v1[8];
  v10 = (uint64_t)v1 + v5;
  v11 = (uint64_t)v1 + ((v5 + *(_QWORD *)(v4 + 64) + v6) & ~v6);
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_2447C81F0;
  return sub_244889430(a1, v7, v8, v9, v10, v11);
}

uint64_t sub_24488BDBC()
{
  swift_release();
  return swift_deallocObject();
}

BOOL sub_24488BDE0(_QWORD *a1)
{
  uint64_t v1;

  return *a1 == *(_QWORD *)(v1 + 48);
}

unint64_t sub_24488BDF4()
{
  unint64_t result;

  result = qword_25738FC90;
  if (!qword_25738FC90)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for LowValueError, &type metadata for LowValueError);
    atomic_store(result, &qword_25738FC90);
  }
  return result;
}

uint64_t sub_24488BE38()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24488BE6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_24488BEE0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(v0[5] - 8) + 80);
  v3 = v0[8];
  v4 = v0[9];
  v5 = (char *)v0 + ((v2 + 80) & ~v2);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_2447C62E8;
  v6[3] = v3;
  v6[4] = v5;
  v6[2] = v4;
  return swift_task_switch();
}

uint64_t CodableBox.description.getter()
{
  uint64_t v0;

  v0 = sub_24488C788();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t CodableBox.init(wrapping:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;

  sub_2448EA374();
  swift_allocObject();
  sub_2448EA368();
  v6 = sub_2448EA35C();
  v8 = v7;
  swift_release();
  v10 = 0;
  v11 = 0xE000000000000000;
  sub_2448EBBA4();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  *a3 = 0;
  a3[1] = 0xE000000000000000;
  a3[2] = v6;
  a3[3] = v8;
  return result;
}

uint64_t CodableBox.value.getter()
{
  sub_2448EA350();
  swift_allocObject();
  sub_2448EA344();
  sub_2448EA338();
  return swift_release();
}

uint64_t sub_24488C2A0()
{
  uint64_t v0;
  unsigned int v1;

  v0 = sub_2448EBA84();
  swift_bridgeObjectRelease();
  if (v0 == 1)
    v1 = 1;
  else
    v1 = 2;
  if (v0)
    return v1;
  else
    return 0;
}

uint64_t sub_24488C2F0(char a1)
{
  if ((a1 & 1) != 0)
    return 1635017060;
  else
    return 0x7470697263736564;
}

uint64_t sub_24488C328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x24951AC70](&unk_2448F5070, a3);
  return sub_2448EBC1C();
}

uint64_t sub_24488C37C(uint64_t a1)
{
  MEMORY[0x24951AC70](&unk_2448F5070, a1);
  return sub_2448EADAC();
}

uint64_t sub_24488C3C8()
{
  MEMORY[0x24951AC70](&unk_2448F5070);
  return sub_2448EADC4();
}

uint64_t sub_24488C418()
{
  MEMORY[0x24951AC70](&unk_2448F5070);
  return sub_2448EADB8();
}

uint64_t sub_24488C468@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_24488C2A0();
  *a1 = result;
  return result;
}

uint64_t sub_24488C4A0@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24488C2F0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24488C4D4()
{
  char *v0;

  return sub_24488C2F0(*v0);
}

uint64_t CodableBox.propertyListValue.getter@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = sub_24488C548(*v2, v2[1], v2[2], v2[3], a1[2], a1[3], a1[4]);
  v5 = sub_24480FC04(v4);
  result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

uint64_t sub_24488C548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD v9[2];
  char v10;
  _QWORD v11[2];
  char v12;

  v12 = 0;
  v11[0] = a1;
  v11[1] = a2;
  v10 = 1;
  v9[0] = a3;
  v9[1] = a4;
  v7 = type metadata accessor for CodableBox.Key(0, a5, a6, a7);
  return static PropertyListBuilder.buildBlock<A, B, C, D>(_:_:)((uint64_t)&v12, (uint64_t)v11, &v10, (uint64_t)v9, v7, MEMORY[0x24BEE0D00], v7, MEMORY[0x24BDCDDE8], (uint64_t)&off_251588AD0, (uint64_t)&protocol witness table for String, (uint64_t)&off_251588AD0, (uint64_t)&protocol witness table for Data);
}

uint64_t CodableBox.init(propertyListValue:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  _QWORD v15[3];
  uint64_t v16;
  _UNKNOWN **v17;

  v7 = *a1;
  v8 = type metadata accessor for CodableBox.Key(0, a2, a3, a4);
  v16 = v8;
  v17 = &off_251588AD0;
  LOBYTE(v15[0]) = 0;
  v9 = sub_24480B6BC(v15, v7);
  v11 = v10;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if (v5)
    return swift_bridgeObjectRelease();
  v16 = v8;
  v17 = &off_251588AD0;
  LOBYTE(v15[0]) = 1;
  swift_bridgeObjectRetain();
  sub_24480B804(v15, v7, &v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  swift_bridgeObjectRelease();
  v13 = v14;
  swift_bridgeObjectRetain();
  sub_2447C9274(v13, *((unint64_t *)&v13 + 1));
  swift_bridgeObjectRelease();
  *(_QWORD *)a5 = v9;
  *(_QWORD *)(a5 + 8) = v11;
  *(_OWORD *)(a5 + 16) = v13;
  swift_bridgeObjectRelease();
  return sub_2447E74B0(v13, *((unint64_t *)&v13 + 1));
}

uint64_t sub_24488C710@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return CodableBox.init(propertyListValue:)(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t sub_24488C730()
{
  uint64_t v0;

  v0 = sub_24488C788();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_24488C764(void (*a1)(void))
{
  a1();
  return sub_2448EBDB4();
}

uint64_t sub_24488C788()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t type metadata accessor for CodableBox.Key(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CodableBox.Key);
}

uint64_t sub_24488C79C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return sub_2447E74B0(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

_QWORD *sub_24488C7C4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  v5 = a2[3];
  swift_bridgeObjectRetain();
  sub_2447C9274(v4, v5);
  a1[2] = v4;
  a1[3] = v5;
  return a1;
}

_QWORD *sub_24488C80C(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = a2[2];
  v4 = a2[3];
  sub_2447C9274(v5, v4);
  v6 = a1[2];
  v7 = a1[3];
  a1[2] = v5;
  a1[3] = v4;
  sub_2447E74B0(v6, v7);
  return a1;
}

_QWORD *sub_24488C874(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a1[2];
  v6 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_2447E74B0(v5, v6);
  return a1;
}

uint64_t type metadata accessor for CodableBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CodableBox);
}

uint64_t sub_24488C8C4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24488C910 + 4 * byte_2448F4FC5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24488C944 + 4 * byte_2448F4FC0[v4]))();
}

uint64_t sub_24488C944(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24488C94C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24488C954);
  return result;
}

uint64_t sub_24488C960(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24488C968);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24488C96C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24488C974(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_24488C980()
{
  JUMPOUT(0x24951AC70);
}

uint64_t sub_24488C990(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 24);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_2448EBD48();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v18 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v18 - v14, a1, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
    return sub_2448EAF2C();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v15, v3);
    return sub_2448EAF38();
  }
}

uint64_t sub_24488CAF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  if (a2)
  {
    swift_getObjectType();
    Actor.verifyIsolated(_:file:line:)();
  }
  return a4(a1);
}

uint64_t sub_24488CB70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  char v11[8];
  _QWORD v12[2];

  v6 = type metadata accessor for IsolatedTask(0, *(_QWORD *)(a3 + a2 - 24), *(_QWORD *)(a3 + a2 - 16), *(_QWORD *)(a3 + a2 - 8));
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v11, a1, v6);
  v8 = MEMORY[0x24951AE5C](v12);
  v9 = v12[1];
  result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  *a4 = v8;
  a4[1] = v9;
  return result;
}

uint64_t IsolatedTask.executor.getter()
{
  uint64_t v0;

  return MEMORY[0x24951AE5C](v0 + 8);
}

uint64_t IsolatedTask.executor.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*IsolatedTask.executor.modify(uint64_t *a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  v3 = MEMORY[0x24951AE5C](v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  *a1 = v3;
  a1[1] = v4;
  return sub_24488CC88;
}

uint64_t sub_24488CC88(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) = *(_QWORD *)(a1 + 8);
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t IsolatedTask.init(file:line:column:function:on:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD v15[2];
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v15[0] = a1;
  v15[1] = a2;
  v16 = a3;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  v20 = a7;
  v21 = a8;
  return sub_24488CD14((uint64_t)v15, a11, a12, a13, a14, a9);
}

uint64_t sub_24488CD14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  char v22;
  uint64_t v24[2];
  __int128 v25;
  uint64_t v26[2];
  char v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _QWORD v32[3];
  _QWORD v33[4];

  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v22 = *(_BYTE *)(a1 + 16);
  v21 = *(_OWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 48);
  v20 = *(_QWORD *)(a1 + 40);
  v18 = *(_BYTE *)(a1 + 56);
  a6[2] = 0;
  swift_unknownObjectWeakInit();
  v12 = type metadata accessor for IsolatedTask.ObserverBox(255, a3, a4, a5);
  v13 = type metadata accessor for ObserverAndTokenStorage(255, v12, (uint64_t)&type metadata for IsolatedTokenCallback, (uint64_t)&protocol witness table for IsolatedTokenCallback);
  v14 = type metadata accessor for PromiseFulfillment(255, a3, a4, a5);
  type metadata accessor for FulfillOnceState(0, v13, v14, v15);
  sub_2447F6A80(v12, (uint64_t)&type metadata for IsolatedTokenCallback, (uint64_t)&protocol witness table for IsolatedTokenCallback, (uint64_t)v33);
  v32[0] = v33[0];
  v32[1] = v33[1];
  v32[2] = v33[2];
  v26[0] = v10;
  v26[1] = v11;
  v27 = v22;
  v28 = v21;
  v29 = v20;
  v30 = v19;
  v31 = v18;
  v25 = xmmword_2448ECE80;
  sub_2448EB79C();
  swift_bridgeObjectRelease();
  strcpy((char *)v24, "IsolatedTask<");
  HIWORD(v24[1]) = -4864;
  sub_2448EBDB4();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  sub_2448EBDB4();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  v16 = sub_2447E229C((uint64_t)v32, v26, 0, 0, (uint64_t *)&v25, v24[0], v24[1], 0x656C6C69666C7566, 0xE900000000000064);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *a6 = v16;
  a6[2] = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t static IsolatedTask.create(file:line:column:function:on:)(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  _QWORD v17[2];
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v17[0] = a2;
  v17[1] = a3;
  v18 = a4;
  v19 = a5;
  v20 = a6;
  v21 = a7;
  v22 = a8;
  v23 = a9;
  swift_unknownObjectRetain();
  sub_24488CD14((uint64_t)v17, a11, a12, a13, a14, a1);
  type metadata accessor for IsolatedTask.Promise(0, a12, a13, a14);
  v15 = type metadata accessor for IsolatedTask(0, a12, a13, a14);
  (*(void (**)(_QWORD *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v17, a1, v15);
  return sub_24488D064((uint64_t)v17);
}

uint64_t type metadata accessor for IsolatedTask.Promise(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IsolatedTask.Promise);
}

uint64_t type metadata accessor for IsolatedTask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IsolatedTask);
}

uint64_t sub_24488D064(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = swift_allocObject();
  v3 = type metadata accessor for IsolatedTask(0, *(_QWORD *)(*(_QWORD *)v2 + 80), *(_QWORD *)(*(_QWORD *)v2 + 88), *(_QWORD *)(*(_QWORD *)v2 + 96));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(v2 + 16, a1, v3);
  return v2;
}

uint64_t IsolatedTask.description.getter()
{
  _QWORD v1[2];

  sub_2448EB79C();
  swift_bridgeObjectRelease();
  strcpy((char *)v1, "IsolatedTask<");
  sub_2448EBDB4();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  sub_2448EBDB4();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  Callsite.description.getter();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  return v1[0];
}

uint64_t sub_24488D1E4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, _QWORD *a6)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t **v35;
  uint64_t v36;
  uint64_t TupleTypeMetadata2;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  void (*v51)(void);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  os_unfair_lock_s *v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t result;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  char *v76;
  uint64_t v77;
  void (*v78)(void);
  uint64_t v79;
  __int128 v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87[2];
  char v88;
  __int128 v89;
  const char *v90;
  uint64_t v91;
  char v92;
  char v93;

  v74 = a5;
  v73 = a4;
  v72 = a3;
  v71 = a2;
  v8 = a6[2];
  v9 = a6[3];
  v10 = a6[4];
  v11 = type metadata accessor for PromiseFulfillment(0, v8, v9, v10);
  v65 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v64 = (char *)&v61 - v12;
  v77 = v9;
  v78 = (void (*)(void))v8;
  v79 = v10;
  v61 = type metadata accessor for IsolatedTask.ObserverBox(255, v8, v9, v10);
  v62 = type metadata accessor for ObserverAndTokenStorage(255, v61, (uint64_t)&type metadata for IsolatedTokenCallback, (uint64_t)&protocol witness table for IsolatedTokenCallback);
  v68 = v11;
  v67 = type metadata accessor for FulfillOnceState.FulfillmentOutcome(0, v62, v11, v13);
  v66 = *(_QWORD *)(v67 - 8);
  v14 = MEMORY[0x24BDAC7A8](v67);
  v63 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v76 = (char *)&v61 - v16;
  v70 = *a1;
  v69 = a1[1];
  v17 = *((_BYTE *)a1 + 16);
  v18 = a1[3];
  v19 = a1[4];
  v21 = a1[5];
  v20 = a1[6];
  v22 = *((_BYTE *)a1 + 56);
  v23 = MEMORY[0x24951AE5C](v6 + 1);
  if (v23)
  {
    swift_getObjectType();
    Actor.verifyIsolated(_:file:line:)();
    v23 = swift_unknownObjectRelease();
  }
  v24 = *v6;
  *(_QWORD *)&v80 = v70;
  *((_QWORD *)&v80 + 1) = v69;
  v81 = v17;
  v82 = v18;
  v83 = v19;
  v84 = v21;
  v85 = v20;
  v86 = v22;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v27 = v77;
  v26 = (uint64_t)v78;
  *(&v61 - 6) = (uint64_t)v78;
  *(&v61 - 5) = v27;
  v28 = v71;
  *(&v61 - 4) = v79;
  *(&v61 - 3) = v28;
  *(&v61 - 2) = v72;
  MEMORY[0x24BDAC7A8](v25);
  *(&v61 - 6) = v26;
  *(&v61 - 5) = v27;
  v29 = (uint64_t)v73;
  *(&v61 - 4) = v30;
  *(&v61 - 3) = v29;
  *(&v61 - 2) = v74;
  v31 = v75;
  v32 = v76;
  FulfillOnceState.fulfill(callsite:makeFulfilledState:ifAlreadyFulfilled:)(&v80, (uint64_t)sub_2447C7CD4, v33, (uint64_t)sub_2447C7CF4, (uint64_t)(&v61 - 8));
  if (v31)
    return v24 & 1;
  v34 = v66;
  v35 = (uint64_t **)v63;
  v36 = v67;
  (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v63, v32, v67);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v38 = (*(uint64_t (**)(uint64_t **, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v35, 1, TupleTypeMetadata2);
  LOBYTE(v24) = v38 != 1;
  if (v38 == 1)
  {
    v57 = *(void (**)(char *, uint64_t))(v34 + 8);
    v57(v32, v36);
    v57((char *)v35, v36);
    return v24 & 1;
  }
  LODWORD(v74) = 1;
  v39 = v27;
  v41 = *v35;
  v40 = (uint64_t)v35[1];
  v75 = v35[2];
  v42 = (char *)v35 + *(int *)(TupleTypeMetadata2 + 48);
  v43 = (uint64_t)v64;
  v44 = v68;
  v45 = (*(uint64_t (**)(char *, char *, uint64_t))(v65 + 32))(v64, v42, v68);
  v73 = &v61;
  *(_QWORD *)&v80 = v41;
  *((_QWORD *)&v80 + 1) = v40;
  MEMORY[0x24BDAC7A8](v45);
  *(&v61 - 4) = v26;
  *(&v61 - 3) = v39;
  *(&v61 - 2) = v79;
  *(&v61 - 1) = v43;
  v46 = sub_2447F8114();
  v47 = type metadata accessor for OrderedDictionary(0, (uint64_t)&type metadata for Identifier, v61, v46);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedDictionary<A, B>, v47);
  sub_2448EAD70();
  v48 = v75;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v49 = v48[2];
  if (!v49)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v59 = v66;
    v58 = v67;
LABEL_16:
    (*(void (**)(char *, uint64_t))(v59 + 8))(v32, v58);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v64, v44);
    LOBYTE(v24) = v74;
    return v24 & 1;
  }
  v72 = v40;
  v73 = v41;
  v79 = 0;
  v87[0] = (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFound"
                    "ation/IsolatedTask.swift";
  v87[1] = 124;
  v88 = 2;
  v89 = xmmword_2448F5120;
  v90 = "fulfill(callsite:makeFulfillment:ifAlreadyCompleted:)";
  v91 = 53;
  v92 = 2;
  swift_bridgeObjectRetain_n();
  v50 = v48 + 8;
  while (1)
  {
    v51 = (void (*)(void))*(v50 - 2);
    v52 = *v50;
    v53 = *(v50 - 4);
    v77 = *(v50 - 3);
    v78 = v51;
    v54 = *(_QWORD *)(v52 + 144);
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v54 + 76));
    v55 = v79;
    sub_2447E5E3C((__int128 *)(v54 + 16), (uint64_t (*)(void))nullsub_1, v87, v52, (void (*)(uint64_t, _QWORD *))sub_2447E1AC8, &v93);
    v79 = v55;
    v56 = (os_unfair_lock_s *)(v54 + 76);
    if (v55)
      break;
    os_unfair_lock_unlock(v56);
    swift_release();
    if ((v93 & 1) == 0)
    {
      if (v53)
      {
        swift_getObjectType();
        Actor.verifyIsolated(_:file:line:)();
      }
      v78();
    }
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    v50 += 5;
    if (!--v49)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v44 = v68;
      v58 = v67;
      v59 = v66;
      v32 = v76;
      goto LABEL_16;
    }
  }
  os_unfair_lock_unlock(v56);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_24488D87C@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t updated;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  void (*v24)(uint64_t *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t (*v29)();
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t (*v41)(uint64_t);
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char v48[16];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);
  uint64_t v55;
  _BYTE v56[24];
  __int128 v57;
  char v58;
  __int128 v59;
  const char *v60;
  uint64_t v61;
  char v62;

  v41 = a1;
  v47 = a4;
  v7 = a3[2];
  v6 = a3[3];
  v40 = a3;
  v8 = a3[4];
  v9 = type metadata accessor for PromiseFulfillment(0, v7, v6, v8);
  v38 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v36 = (char *)&v36 - v10;
  v11 = type metadata accessor for IsolatedTask.ObserverBox(255, v7, v6, v8);
  v12 = type metadata accessor for ObserverAndTokenStorage(255, v11, (uint64_t)&type metadata for IsolatedTokenCallback, (uint64_t)&protocol witness table for IsolatedTokenCallback);
  v39 = v9;
  updated = type metadata accessor for FulfillOnceState.WaitingStateUpdateResult(0, v12, v9, (uint64_t)&type metadata for Identifier);
  v14 = *(_QWORD *)(updated - 8);
  v15 = MEMORY[0x24BDAC7A8](updated);
  v17 = (uint64_t *)((char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v36 - v18;
  v20 = MEMORY[0x24951AE5C](v4 + 8);
  v21 = *(_QWORD *)(v4 + 16);
  v37 = v4;
  v43 = v7;
  v49 = v7;
  v50 = v6;
  v22 = v41;
  v51 = v8;
  v52 = v20;
  v44 = v20;
  v53 = v21;
  v54 = v41;
  v55 = a2;
  v46 = a2;
  swift_retain();
  FulfillOnceState.updateWaitingState<A>(update:)((uint64_t)sub_2448908F0, (uint64_t)v48, (uint64_t)&type metadata for Identifier, v23);
  v45 = v14;
  v24 = *(void (**)(uint64_t *, char *, uint64_t))(v14 + 16);
  v42 = v19;
  v24(v17, v19, updated);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v25 = v38;
    v26 = (uint64_t)v36;
    v27 = v39;
    (*(void (**)(char *, uint64_t *, uint64_t))(v38 + 32))(v36, v17, v39);
    sub_24488CAF0(v26, v44, v21, v22);
    swift_release();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v27);
    result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v42, updated);
    v29 = 0;
    v30 = 0;
    v31 = 0;
  }
  else
  {
    v32 = *v17;
    v33 = v40;
    v34 = *(v40 - 1);
    (*(void (**)(_BYTE *, uint64_t, _QWORD *))(v34 + 16))(v56, v37, v40);
    v30 = (_QWORD *)swift_allocObject();
    v30[2] = v43;
    v30[3] = v6;
    v30[4] = v8;
    (*(void (**)(_QWORD *, _BYTE *, _QWORD *))(v34 + 32))(v30 + 5, v56, v33);
    v30[8] = v32;
    *(_QWORD *)&v57 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFou"
                      "ndation/IsolatedTask.swift";
    *((_QWORD *)&v57 + 1) = 124;
    v58 = 2;
    v59 = xmmword_2448F5130;
    v60 = "observeFulfillment(observer:)";
    v61 = 29;
    v62 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738AF78);
    swift_allocObject();
    v31 = sub_2447E5D90(&v57, 0, 0, 1, 0, 0xD000000000000011, 0x80000002448F9A50, 0x64656C65636E6163, 0xE800000000000000);
    swift_release();
    swift_unknownObjectRelease();
    result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v42, updated);
    v29 = sub_244890930;
  }
  v35 = v47;
  *v47 = 0;
  v35[1] = 0;
  v35[2] = v29;
  v35[3] = v30;
  v35[4] = v31;
  return result;
}

uint64_t sub_24488DC7C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];

  v12[0] = a1;
  v12[1] = a2;
  v12[2] = a3;
  v12[3] = a4;
  v9 = type metadata accessor for IsolatedTask.ObserverBox(255, a5, a6, a7);
  v10 = type metadata accessor for ObserverAndTokenStorage(0, v9, (uint64_t)&type metadata for IsolatedTokenCallback, (uint64_t)&protocol witness table for IsolatedTokenCallback);
  return sub_2447F6870((uint64_t)v12, v10, a8);
}

uint64_t sub_24488DCEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t updated;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v9 = type metadata accessor for IsolatedTask.ObserverBox(255, a3, a4, a5);
  v10 = type metadata accessor for ObserverAndTokenStorage(255, v9, (uint64_t)&type metadata for IsolatedTokenCallback, (uint64_t)&protocol witness table for IsolatedTokenCallback);
  v11 = type metadata accessor for PromiseFulfillment(255, a3, a4, a5);
  v12 = MEMORY[0x24BEE4AE0] + 8;
  updated = type metadata accessor for FulfillOnceState.WaitingStateUpdateResult(0, v10, v11, MEMORY[0x24BEE4AE0] + 8);
  v14 = *(_QWORD *)(updated - 8);
  MEMORY[0x24BDAC7A8](updated);
  v16 = &v19[-v15];
  v20 = a3;
  v21 = a4;
  v22 = a5;
  v23 = a2;
  FulfillOnceState.updateWaitingState<A>(update:)((uint64_t)sub_244890944, (uint64_t)v19, v12, v17);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v14 + 8))(v16, updated);
}

uint64_t sub_24488DE08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = a2;
  v5 = type metadata accessor for IsolatedTask.ObserverBox(255, a3, a4, a5);
  v6 = type metadata accessor for ObserverAndTokenStorage(0, v5, (uint64_t)&type metadata for IsolatedTokenCallback, (uint64_t)&protocol witness table for IsolatedTokenCallback);
  return sub_2447F69CC(&v8, v6);
}

uint64_t IsolatedTask.observe<>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_24488E068(a1, a2, a3, sub_24488DF80, a4);
}

{
  return sub_24488E068(a1, a2, a3, sub_24488E048, a4);
}

uint64_t sub_24488DE80(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v7 = MEMORY[0x24BEE3F20];
  v8 = sub_2448EBD48();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v14 - v10;
  v12 = type metadata accessor for PromiseFulfillment(0, a4, v6, v7);
  sub_2448356AC(v12, v11);
  a2(v11);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_24488DF5C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24488DF80(uint64_t a1)
{
  uint64_t v1;

  return sub_24488DE80(a1, *(void (**)(char *))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16));
}

uint64_t sub_24488DFA0(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v6 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PromiseFulfillment(0, a4, MEMORY[0x24BEE4078], MEMORY[0x24BEE40A8]);
  sub_244833E4C(v9, (uint64_t)v8);
  a2(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a4);
}

uint64_t sub_24488E048(uint64_t a1)
{
  uint64_t v1;

  return sub_24488DFA0(a1, *(void (**)(char *))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16));
}

uint64_t IsolatedTask.observeSuccess<>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_24488E068(a1, a2, a3, sub_24488E218, a4);
}

uint64_t sub_24488E068@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t (*a4)(uint64_t)@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a3[2];
  v10[3] = a1;
  v10[4] = a2;
  swift_retain();
  sub_24488D87C(a4, (uint64_t)v10, a3, a5);
  return swift_release();
}

uint64_t sub_24488E0EC(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;

  v7 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v11 = type metadata accessor for PromiseFulfillment(0, a4, v10, MEMORY[0x24BEE3F20]);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v16 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v16 - v13, a1, v11);
  if (swift_getEnumCaseMultiPayload())
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v14, a4);
  a2(v9);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, a4);
}

uint64_t sub_24488E218(uint64_t a1)
{
  uint64_t v1;

  return sub_24488E0EC(a1, *(void (**)(char *))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16));
}

_QWORD *IsolatedTask.onFulfillment<>(observer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24488E340(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr))IsolatedTask.observe<>(_:));
}

uint64_t CancelationToken<>.cancel<A, B>(onFulfillmentOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _QWORD *v7;
  _OWORD v9[2];
  uint64_t v10;

  v5 = *(_QWORD *)(v4 + 32);
  v6 = *(_OWORD *)(v4 + 16);
  v9[0] = *(_OWORD *)v4;
  v9[1] = v6;
  v10 = v5;
  v7 = (_QWORD *)type metadata accessor for IsolatedTask(0, a2, a3, a4);
  return sub_24488E5BC((uint64_t)v9, v7);
}

uint64_t IsolatedTask.onFulfillment<>(observer:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  result = IsolatedTask.observe<>(_:)(a1, a2, a3, &v10);
  v5 = v12;
  if (v12)
  {
    v7 = v10;
    v6 = v11;
    v8 = a3[2];
    v15[0] = v10;
    v15[1] = v11;
    v15[2] = v12;
    v15[3] = v13;
    v15[4] = v14;
    v9 = (_QWORD *)type metadata accessor for IsolatedTask(0, v8, MEMORY[0x24BEE4078], MEMORY[0x24BEE40A8]);
    sub_24488E5BC((uint64_t)v15, v9);
    return sub_244880734(v7, v6, v5);
  }
  return result;
}

_QWORD *IsolatedTask.onSuccess<>(observer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24488E340(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr))IsolatedTask.observeSuccess<>(_:));
}

_QWORD *sub_24488E340(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr))
{
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[5];

  result = a4(&v12);
  v6 = v14;
  if (v14)
  {
    v8 = v12;
    v7 = v13;
    v9 = *(_QWORD *)(a3 + 16);
    v10 = *(_QWORD *)(a3 + 24);
    v17[0] = v12;
    v17[1] = v13;
    v17[2] = v14;
    v17[3] = v15;
    v17[4] = v16;
    v11 = (_QWORD *)type metadata accessor for IsolatedTask(0, v9, v10, MEMORY[0x24BEE3F20]);
    sub_24488E5BC((uint64_t)v17, v11);
    return (_QWORD *)sub_244880734(v8, v7, v6);
  }
  return result;
}

uint64_t sub_24488E3F0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD v13[2];
  uint64_t v14;

  v6 = (_QWORD *)swift_allocObject();
  v7 = a3[2];
  v6[2] = v7;
  v6[3] = a1;
  v6[4] = a2;
  swift_retain();
  sub_24488D87C(sub_244890894, (uint64_t)v6, a3, v13);
  result = swift_release();
  v9 = v14;
  if (v14)
  {
    v10 = v13[0];
    v11 = v13[1];
    v12 = (_QWORD *)type metadata accessor for IsolatedTask(0, v7, a3[3], MEMORY[0x24BEE3F20]);
    sub_24488E5BC((uint64_t)v13, v12);
    return sub_244880734(v10, v11, v9);
  }
  return result;
}

uint64_t sub_24488E4F0(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;

  v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v8 = type metadata accessor for PromiseFulfillment(0, a4, v7, MEMORY[0x24BEE3F20]);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v13 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v13 - v10, a1, v8);
  LODWORD(a1) = swift_getEnumCaseMultiPayload();
  result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if ((_DWORD)a1 == 2)
    return a2(result);
  return result;
}

uint64_t sub_24488E5BC(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t updated;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  __int128 v17;
  uint64_t v18;
  void (*v19)(_BYTE *, uint64_t);
  _BYTE v21[16];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD v26[2];
  uint64_t v27;

  v3 = a2[2];
  v4 = a2[3];
  v5 = a2[4];
  v6 = type metadata accessor for IsolatedTask.ObserverBox(255, v3, v4, v5);
  v7 = type metadata accessor for ObserverAndTokenStorage(255, v6, (uint64_t)&type metadata for IsolatedTokenCallback, (uint64_t)&protocol witness table for IsolatedTokenCallback);
  v8 = type metadata accessor for PromiseFulfillment(255, v3, v4, v5);
  v9 = MEMORY[0x24BEE4AE0] + 8;
  updated = type metadata accessor for FulfillOnceState.WaitingStateUpdateResult(0, v7, v8, MEMORY[0x24BEE4AE0] + 8);
  v11 = *(_QWORD *)(updated - 8);
  v12 = MEMORY[0x24BDAC7A8](updated);
  v14 = &v21[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v12);
  v16 = &v21[-v15];
  v17 = *(_OWORD *)(a1 + 16);
  v26[0] = *(_OWORD *)a1;
  v26[1] = v17;
  v27 = *(_QWORD *)(a1 + 32);
  v22 = v3;
  v23 = v4;
  v24 = v5;
  v25 = v26;
  FulfillOnceState.updateWaitingState<A>(update:)((uint64_t)sub_2448908A0, (uint64_t)v21, v9, v18);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 16))(v14, v16, updated);
  if (swift_getEnumCaseMultiPayload() != 1)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v16, updated);
  sub_2448E490C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/IsolatedTask.swift", 124, 2, 171, 45, (uint64_t)"manage(token:)", 14, 2);
  v19 = *(void (**)(_BYTE *, uint64_t))(v11 + 8);
  v19(v16, updated);
  return ((uint64_t (*)(_BYTE *, uint64_t))v19)(v14, updated);
}

__n128 sub_24488E77C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 *v7;
  __n128 result;
  __n128 v9;

  v4 = *(_QWORD **)(a1 + 16);
  sub_2448908AC(a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = sub_2447C2580(0, v4[2] + 1, 1, v4);
  v6 = v4[2];
  v5 = v4[3];
  if (v6 >= v5 >> 1)
    v4 = sub_2447C2580((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
  v4[2] = v6 + 1;
  v7 = (__n128 *)&v4[5 * v6];
  result = *(__n128 *)a2;
  v9 = *(__n128 *)(a2 + 16);
  v7[4].n128_u64[0] = *(_QWORD *)(a2 + 32);
  v7[2] = result;
  v7[3] = v9;
  *(_QWORD *)(a1 + 16) = v4;
  return result;
}

BOOL IsolatedTask.isFulfilled.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int EnumCaseMultiPayload;
  uint64_t v17;
  uint64_t v19;

  v1 = a1[2];
  v2 = a1[3];
  v3 = a1[4];
  v4 = type metadata accessor for IsolatedTask.ObserverBox(255, v1, v2, v3);
  v5 = type metadata accessor for ObserverAndTokenStorage(255, v4, (uint64_t)&type metadata for IsolatedTokenCallback, (uint64_t)&protocol witness table for IsolatedTokenCallback);
  v6 = type metadata accessor for PromiseFulfillment(255, v1, v2, v3);
  v8 = type metadata accessor for FulfillOnceState.State(0, v5, v6, v7);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v19 - v11;
  FulfillOnceState.snapshot.getter(v10, v13, v14, v15);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v17 = swift_checkMetadataState();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v12, v17);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  return EnumCaseMultiPayload == 1;
}

uint64_t type metadata accessor for IsolatedTask.ObserverBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IsolatedTask.ObserverBox);
}

uint64_t IsolatedTask.result.getter@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  char *v25;

  v25 = a2;
  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = type metadata accessor for PromiseFulfillment(0, v2, v3, v4);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v24 - v7;
  v9 = type metadata accessor for IsolatedTask.ObserverBox(255, v2, v3, v4);
  v10 = type metadata accessor for ObserverAndTokenStorage(255, v9, (uint64_t)&type metadata for IsolatedTokenCallback, (uint64_t)&protocol witness table for IsolatedTokenCallback);
  v12 = type metadata accessor for FulfillOnceState.State(0, v10, v5, v11);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v24 - v15;
  FulfillOnceState.snapshot.getter(v14, v17, v18, v19);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v16, v5);
    v20 = v25;
    sub_2448356AC(v5, v25);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v21 = sub_2448EBD48();
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 0, 1, v21);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    v23 = sub_2448EBD48();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v25, 1, 1, v23);
  }
}

uint64_t IsolatedTask<>.value(on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  swift_getObjectType();
  sub_2448EAF14();
  return swift_task_switch();
}

{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  swift_getObjectType();
  v5[7] = sub_2448EAF14();
  v5[8] = v6;
  return swift_task_switch();
}

uint64_t sub_24488EB84()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = v0[5];
  v2 = v0[6];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  v0[7] = v5;
  v5[2] = *(_QWORD *)(v1 + 16);
  v5[3] = v3;
  v5[4] = v4;
  v5[5] = v2;
  v6 = (_QWORD *)swift_task_alloc();
  v0[8] = v6;
  *v6 = v0;
  v6[1] = sub_24488EC38;
  return sub_2448EBB74();
}

uint64_t sub_24488EC38()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_24488EC88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;

  swift_getObjectType();
  Actor.verifyIsolated(_:file:line:)();
  v5 = (_QWORD *)sub_2448EAF44();
  return CheckedContinuation.track(task:)(a4, v5);
}

uint64_t sub_24488ED28(uint64_t a1)
{
  uint64_t *v1;

  return sub_24488EC88(a1, v1[3], v1[4], v1[5]);
}

uint64_t CheckedContinuation.track(task:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19;

  v3 = *(a2 - 1);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v18[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, _QWORD *))(v3 + 16))(v5, v6, a2);
  v7 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v8 = (char *)swift_allocObject();
  v9 = a2[2];
  v10 = a2[3];
  *((_QWORD *)v8 + 2) = v9;
  *((_QWORD *)v8 + 3) = v10;
  v11 = a2[4];
  *((_QWORD *)v8 + 4) = v11;
  (*(void (**)(char *, char *, _QWORD *))(v3 + 32))(&v8[v7], v5, a2);
  v12 = (_QWORD *)type metadata accessor for IsolatedTask(0, v9, v10, v11);
  sub_24488D87C(sub_24488FF88, (uint64_t)v8, v12, v18);
  result = swift_release();
  v14 = v19;
  if (v19)
  {
    v15 = v18[0];
    v16 = v18[1];
    sub_24488E5BC((uint64_t)v18, v12);
    return sub_244880734(v15, v16, v14);
  }
  return result;
}

uint64_t IsolatedTask<>.currentValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4078];
  v5 = MEMORY[0x24BEE40A8];
  v6 = type metadata accessor for PromiseFulfillment(0, v3, MEMORY[0x24BEE4078], MEMORY[0x24BEE40A8]);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v23 - v8;
  v10 = type metadata accessor for IsolatedTask.ObserverBox(255, v3, v4, v5);
  v11 = type metadata accessor for ObserverAndTokenStorage(255, v10, (uint64_t)&type metadata for IsolatedTokenCallback, (uint64_t)&protocol witness table for IsolatedTokenCallback);
  v13 = type metadata accessor for FulfillOnceState.State(0, v11, v6, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v23 - v16;
  FulfillOnceState.snapshot.getter(v15, v18, v19, v20);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v17, v6);
    sub_244833E4C(v6, a2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v21 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    v21 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, v21, 1, v3);
}

uint64_t sub_24488F074()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = v0[5];
  v2 = v0[6];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  v0[9] = v5;
  v5[2] = *(_QWORD *)(v1 + 16);
  v5[3] = v3;
  v5[4] = v4;
  v5[5] = v2;
  v6 = (_QWORD *)swift_task_alloc();
  v0[10] = v6;
  *v6 = v0;
  v6[1] = sub_24488F128;
  return sub_2448EBC34();
}

uint64_t sub_24488F128()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_24488F198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;

  swift_getObjectType();
  Actor.verifyIsolated(_:file:line:)();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v5 = (_QWORD *)sub_2448EAF44();
  return CheckedContinuation.track(task:)(a4, v5);
}

uint64_t IsolatedTask.Promise.cancel<A>(file:line:column:function:onInvalidationOf:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v18;

  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a10;
  *(_QWORD *)(v18 + 24) = a11;
  *(_QWORD *)(v18 + 32) = v11;
  *(_QWORD *)(v18 + 40) = a1;
  *(_QWORD *)(v18 + 48) = a2;
  *(_BYTE *)(v18 + 56) = a3;
  *(_QWORD *)(v18 + 64) = a4;
  *(_QWORD *)(v18 + 72) = a5;
  *(_QWORD *)(v18 + 80) = a6;
  *(_QWORD *)(v18 + 88) = a7;
  *(_BYTE *)(v18 + 96) = a8;
  swift_retain();
  IsolatedInvalidatable.onInvalidation(_:)((uint64_t)sub_244890024, v18, a10, a11);
  return swift_release();
}

void sub_24488F314(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  uint64_t v3;
  __int128 v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v9[2];
  _OWORD v10[2];
  _QWORD *v11;

  v3 = *a2;
  v11 = a2;
  v4 = a3[1];
  v9[0] = *a3;
  v9[1] = v4;
  v10[0] = a3[2];
  *(_OWORD *)((char *)v10 + 9) = *(__int128 *)((char *)a3 + 41);
  sub_2448EAF50();
  sub_2447C8004();
  v5 = (void *)swift_allocError();
  sub_2448EA7DC();
  v8 = v5;
  v6 = type metadata accessor for IsolatedTask.Promise(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), MEMORY[0x24BEE3F20]);
  v7 = MEMORY[0x24951AC70](&unk_2448F5184, v6);
  sub_24483402C(v9, (uint64_t)&v8, v6, v7);

}

uint64_t IsolatedTask.Promise.deinit()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for IsolatedTask(0, *(_QWORD *)(*(_QWORD *)v0 + 80), *(_QWORD *)(*(_QWORD *)v0 + 88), *(_QWORD *)(*(_QWORD *)v0 + 96));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0 + 16, v1);
  return v0;
}

uint64_t IsolatedTask.Promise.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for IsolatedTask(0, *(_QWORD *)(*(_QWORD *)v0 + 80), *(_QWORD *)(*(_QWORD *)v0 + 88), *(_QWORD *)(*(_QWORD *)v0 + 96));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0 + 16, v1);
  return swift_deallocClassInstance();
}

uint64_t sub_24488F470(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t **v5;
  uint64_t *v10;
  char v11;
  char v12;
  _QWORD *v13;
  __int128 v15;
  char v16;
  __int128 v17;
  __int128 v18;
  char v19;

  v10 = *v5;
  v11 = *((_BYTE *)a1 + 16);
  v12 = *((_BYTE *)a1 + 56);
  v15 = *a1;
  v16 = v11;
  v17 = *(__int128 *)((char *)a1 + 24);
  v18 = *(__int128 *)((char *)a1 + 40);
  v19 = v12;
  v13 = (_QWORD *)type metadata accessor for IsolatedTask(0, v10[10], v10[11], v10[12]);
  return sub_24488D1E4((uint64_t *)&v15, a2, a3, a4, a5, v13) & 1;
}

uint64_t sub_24488F514(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  return sub_24488F470(a1, a2, a3, a4, a5) & 1;
}

uint64_t IsolatedTask.init<>(file:line:column:function:on:work:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void (*v18)(_QWORD *, uint64_t *, _QWORD *);
  uint64_t v19;
  uint64_t ObjectType;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;
  _QWORD v26[2];
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  v26[0] = a1;
  v26[1] = a2;
  v27 = a3;
  v28 = a4;
  v29 = a5;
  v30 = a6;
  v31 = a7;
  v32 = a8;
  swift_unknownObjectRetain();
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0A8);
  v16 = MEMORY[0x24BEE3F20];
  sub_24488CD14((uint64_t)v26, a11, a14, v15, MEMORY[0x24BEE3F20], a9);
  type metadata accessor for IsolatedTask.Promise(0, a14, v15, v16);
  v17 = (_QWORD *)type metadata accessor for IsolatedTask(0, a14, v15, v16);
  v25 = *(v17 - 1);
  v18 = *(void (**)(_QWORD *, uint64_t *, _QWORD *))(v25 + 16);
  v18(v26, a9, v17);
  v19 = sub_24488D064((uint64_t)v26);
  ObjectType = swift_getObjectType();
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = a10;
  v21[3] = a11;
  v21[4] = a12;
  v21[5] = a13;
  v21[6] = v19;
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = ObjectType;
  v22[3] = a11;
  v22[4] = &unk_25738FDE8;
  v22[5] = v21;
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  v23 = Actor.makeIsolatedTask(_:)((uint64_t)&unk_25738FDF8, (uint64_t)v22, ObjectType, a11);
  swift_release();
  v18(v26, a9, v17);
  swift_retain();
  sub_24488E3F0((uint64_t)sub_244890168, v23, v17);
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release_n();
  return (*(uint64_t (**)(_QWORD *, _QWORD *))(v25 + 8))(v26, v17);
}

{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD v23[2];
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v23[0] = a1;
  v23[1] = a2;
  v24 = a3;
  v25 = a4;
  v26 = a5;
  v27 = a6;
  v28 = a7;
  v29 = a8;
  swift_unknownObjectRetain();
  v15 = MEMORY[0x24BEE4078];
  v16 = MEMORY[0x24BEE40A8];
  sub_24488CD14((uint64_t)v23, a11, a14, MEMORY[0x24BEE4078], MEMORY[0x24BEE40A8], a9);
  type metadata accessor for IsolatedTask.Promise(0, a14, v15, v16);
  v17 = type metadata accessor for IsolatedTask(0, a14, v15, v16);
  (*(void (**)(_QWORD *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v23, a9, v17);
  v18 = sub_24488D064((uint64_t)v23);
  ObjectType = swift_getObjectType();
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = a10;
  v20[3] = a11;
  v20[4] = a12;
  v20[5] = a13;
  v20[6] = v18;
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = ObjectType;
  v21[3] = a11;
  v21[4] = &unk_25738FE08;
  v21[5] = v20;
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  Actor.makeIsolatedTask(_:)((uint64_t)&unk_25738FE10, (uint64_t)v21, ObjectType, a11);
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t sub_24488F738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v7[4] = a3;
  v7[9] = *(_QWORD *)a7;
  v8 = *(_QWORD *)(*(_QWORD *)a7 + 80);
  v7[10] = v8;
  v7[11] = *(_QWORD *)(v8 - 8);
  v7[12] = swift_task_alloc();
  swift_getObjectType();
  v7[13] = sub_2448EAF14();
  v7[14] = v9;
  return swift_task_switch();
}

uint64_t sub_24488F7C8()
{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD);

  v1 = (int *)v0[6];
  swift_getObjectType();
  Actor.verifyIsolated(_:file:line:)();
  v4 = (uint64_t (*)(_QWORD))((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc();
  v0[15] = v2;
  *v2 = v0;
  v2[1] = sub_24488F86C;
  return v4(v0[12]);
}

uint64_t sub_24488F86C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24488F8CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 24) = *(_QWORD *)(v0 + 64);
  v5 = MEMORY[0x24951AC70](&protocol conformance descriptor for IsolatedTask<A, B>.Promise, v4);
  PromiseProtocol.fulfill(file:line:column:function:returning:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/IsolatedTask.swift", 124, 2, 292, 32, (uint64_t)"init(file:line:column:function:on:work:)", 40, 2, v1, v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24488F974()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 64);
  v3 = MEMORY[0x24951AC70](&protocol conformance descriptor for IsolatedTask<A, B>.Promise, v2);
  PromiseProtocol.fulfill<>(file:line:column:function:throwing:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/IsolatedTask.swift", 124, 2, 294, 32, (uint64_t)"init(file:line:column:function:on:work:)", 40, 2, (uint64_t)v1, v2, v3);

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24488FA08(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)a2 + *a2);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v8;
  *v8 = v5;
  v8[1] = sub_2447C81F0;
  return v10(a1, a5);
}

uint64_t sub_24488FC20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7[6] = a6;
  v7[7] = a7;
  v7[4] = a4;
  v7[5] = a5;
  v7[3] = a3;
  v7[8] = *(_QWORD *)a7;
  v8 = *(_QWORD *)(*(_QWORD *)a7 + 80);
  v7[9] = v8;
  v7[10] = *(_QWORD *)(v8 - 8);
  v7[11] = swift_task_alloc();
  swift_getObjectType();
  v7[12] = sub_2448EAF14();
  v7[13] = v9;
  return swift_task_switch();
}

uint64_t sub_24488FCB0()
{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD);

  v1 = (int *)v0[5];
  swift_getObjectType();
  Actor.verifyIsolated(_:file:line:)();
  v4 = (uint64_t (*)(_QWORD))((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc();
  v0[14] = v2;
  *v2 = v0;
  v2[1] = sub_24488FD54;
  return v4(v0[11]);
}

uint64_t sub_24488FD54()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24488FDA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 56);
  v5 = MEMORY[0x24951AC70](&protocol conformance descriptor for IsolatedTask<A, B>.Promise, v4);
  PromiseProtocol.fulfill(file:line:column:function:returning:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/IsolatedTask.swift", 124, 2, 319, 28, (uint64_t)"init(file:line:column:function:on:work:)", 40, 2, v1, v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24488FE48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v8 = sub_2448EBD48();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v15 - v10;
  v12 = type metadata accessor for PromiseFulfillment(0, a3, a4, a5);
  sub_2448356AC(v12, v11);
  v13 = sub_2448EAF44();
  sub_24488C990((uint64_t)v11, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_24488FF20()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_2448EAF44();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_24488FF88(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  v6 = *(unsigned __int8 *)(*(_QWORD *)(sub_2448EAF44() - 8) + 80);
  return sub_24488FE48(a1, (uint64_t)v1 + ((v6 + 40) & ~v6), v3, v4, v5);
}

uint64_t sub_24488FFF4(uint64_t a1)
{
  uint64_t *v1;

  return sub_24488F198(a1, v1[3], v1[4], v1[5]);
}

uint64_t sub_244890000()
{
  swift_release();
  return swift_deallocObject();
}

void sub_244890024(uint64_t a1)
{
  uint64_t v1;

  sub_24488F314(a1, *(_QWORD **)(v1 + 32), (__int128 *)(v1 + 40));
}

uint64_t sub_244890038(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v10 = v2[6];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v11;
  *v11 = v3;
  v11[1] = sub_2447C62E8;
  return sub_24488F738(a1, a2, v6, v7, v8, v9, v10);
}

uint64_t sub_2448900C4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2448900E8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = (int *)v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_2447C81F0;
  return ((uint64_t (*)(uint64_t, int *, uint64_t, uint64_t, uint64_t))((char *)&dword_25738FDF0 + dword_25738FDF0))(a1, v7, v6, v4, v5);
}

uint64_t sub_244890168()
{
  return sub_2448EB034();
}

uint64_t objectdestroy_17Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2448901C4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v10 = v2[6];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v11;
  *v11 = v3;
  v11[1] = sub_2447C81F0;
  return sub_24488FC20(a1, a2, v6, v7, v8, v9, v10);
}

uint64_t Continuation.track(task:)(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  uint64_t v17;

  v5 = *v2;
  v4 = v2[1];
  v6 = v2[2];
  v7 = (_QWORD *)swift_allocObject();
  v8 = a2[2];
  v9 = a2[3];
  v7[2] = v8;
  v7[3] = v9;
  v10 = a2[4];
  v7[4] = v10;
  v7[5] = v5;
  v7[6] = v4;
  v7[7] = v6;
  v11 = (_QWORD *)type metadata accessor for IsolatedTask(0, v8, v9, v10);
  swift_retain();
  swift_retain();
  sub_24488D87C(sub_2448904B4, (uint64_t)v7, v11, v16);
  result = swift_release();
  v13 = v17;
  if (v17)
  {
    v14 = v16[0];
    v15 = v16[1];
    sub_24488E5BC((uint64_t)v16, v11);
    return sub_244880734(v14, v15, v13);
  }
  return result;
}

uint64_t sub_24489035C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD v19[4];

  v13 = sub_2448EBD48();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v19 - v15;
  v19[1] = a2;
  v19[2] = a3;
  v19[3] = a4;
  v17 = type metadata accessor for PromiseFulfillment(0, a5, a6, a7);
  sub_2448356AC(v17, v16);
  type metadata accessor for Continuation(0, a5, a6, a7);
  Continuation.resume(with:file:line:column:function:)((uint64_t)v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/IsolatedTask.swift", 124, 2, 349, 24, (uint64_t)"track(task:)", 12, 2);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t sub_244890488()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2448904B4(uint64_t a1)
{
  uint64_t *v1;

  return sub_24489035C(a1, v1[5], v1[6], v1[7], v1[2], v1[3], v1[4]);
}

uint64_t sub_2448904C4(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 96);
}

uint64_t sub_2448904CC(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x24951AC70](&protocol conformance descriptor for IsolatedTask<A, B>.Promise);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2448904FC(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 8);
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_244890510()
{
  return 24;
}

__n128 sub_24489051C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_244890530()
{
  swift_release();
  return swift_unknownObjectWeakDestroy();
}

_QWORD *sub_244890558(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_unknownObjectWeakCopyInit();
  a1[2] = a2[2];
  return a1;
}

_QWORD *sub_2448905AC(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  swift_unknownObjectWeakCopyAssign();
  a1[2] = a2[2];
  return a1;
}

_QWORD *sub_244890604(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectWeakTakeInit();
  a1[2] = a2[2];
  return a1;
}

_QWORD *sub_24489063C(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  swift_unknownObjectWeakTakeAssign();
  a1[2] = a2[2];
  return a1;
}

uint64_t sub_244890684()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for IsolatedTask.Promise()
{
  return swift_lookUpClassMethod();
}

uint64_t destroy for IsolatedTokenCallback()
{
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for IsolatedTokenCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for IsolatedTokenCallback(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for IsolatedTokenCallback(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;

  swift_unknownObjectRelease();
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for IsolatedTokenCallback(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IsolatedTokenCallback(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_24489085C(uint64_t a1)
{
  uint64_t v1;

  return sub_24488CAF0(*(_QWORD *)(v1 + 40), *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(uint64_t (**)(uint64_t))(a1 + 24));
}

uint64_t sub_244890894(uint64_t a1)
{
  uint64_t v1;

  return sub_24488E4F0(a1, *(uint64_t (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16));
}

double sub_2448908A0(uint64_t a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_24488E77C(a1, *(_QWORD *)(v1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_2448908AC(uint64_t a1)
{
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_2448908F0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return sub_24488DC7C(v1[5], v1[6], v1[7], v1[8], v1[2], v1[3], v1[4], a1);
}

uint64_t sub_244890904()
{
  swift_release();
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_244890930()
{
  uint64_t *v0;

  return sub_24488DCEC((uint64_t)(v0 + 5), v0[8], v0[2], v0[3], v0[4]);
}

uint64_t sub_244890944(uint64_t a1)
{
  uint64_t *v1;

  return sub_24488DE08(a1, v1[5], v1[2], v1[3], v1[4]);
}

uint64_t AnyCommandLinePrinter.print(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t CommandLinePrintingAttribute.rawValue.getter(char a1)
{
  return qword_2448F53E8[a1];
}

BOOL sub_244890984(char *a1, char *a2)
{
  return qword_2448F53E8[*a1] == qword_2448F53E8[*a2];
}

uint64_t sub_2448909A8()
{
  sub_2448EBD00();
  sub_2448EBD0C();
  return sub_2448EBD3C();
}

uint64_t sub_2448909F4()
{
  return sub_2448EBD0C();
}

uint64_t sub_244890A28()
{
  sub_2448EBD00();
  sub_2448EBD0C();
  return sub_2448EBD3C();
}

uint64_t sub_244890A70@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s20PreviewsFoundationOS28CommandLinePrintingAttributeO8rawValueACSgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_244890A98(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_2448F53E8[*v1];
}

uint64_t AnyCommandLinePrinter.printInColumns<A, B, C>(headers:rows:attributes:separator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t AssociatedConformanceWitness;
  char *v44;
  char *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t (*v68)(char *, uint64_t, uint64_t);
  char *v69;
  char *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t (*v90)(char *, uint64_t, uint64_t);
  void (*v91)(char *, uint64_t, uint64_t);
  void (*v92)(char *, uint64_t, uint64_t);
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v115;
  uint64_t v116;
  uint64_t (*v117)(char *, uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  v116 = a6;
  v100 = a5;
  v111 = a3;
  v112 = a4;
  v103 = a2;
  v107 = a13;
  v121 = a11;
  v115 = a10;
  v105 = *(_QWORD *)(a9 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v104 = (char *)&v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_2448EB508();
  v18 = MEMORY[0x24BDAC7A8](v17);
  v110 = (char *)&v87 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v109 = (char *)&v87 - v21;
  v118 = *(_QWORD *)(a8 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v102 = (char *)&v87 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = *(_QWORD *)(a12 + 8);
  v108 = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v94 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v23 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v98 = (char *)&v87 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v113 = (void (*)(uint64_t, char *, uint64_t))((char *)&v87 - v25);
  v26 = sub_2448EB508();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = MEMORY[0x24BDAC7A8](v26);
  v93 = (char *)&v87 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x24BDAC7A8](v28);
  v32 = (char *)&v87 - v31;
  v33 = *(_QWORD *)(a7 - 8);
  v34 = MEMORY[0x24BDAC7A8](v30);
  v89 = (char *)&v87 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v34);
  v37 = (char *)&v87 - v36;
  v38 = swift_allocObject();
  *(_QWORD *)(v38 + 16) = MEMORY[0x24BEE4B00];
  v39 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  v97 = a1;
  v91 = v39;
  v39(v32, a1, v26);
  v90 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
  v40 = v90(v32, 1, a7);
  v119 = a12;
  v120 = a7;
  v106 = v38;
  v96 = v33;
  v95 = v26;
  v88 = v27;
  if (v40 == 1)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v32, v26);
    v41 = v108;
  }
  else
  {
    v42 = a7;
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v37, v32, a7);
    v41 = v108;
    sub_2448912E0((uint64_t)v37, v38);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v37, v42);
  }
  v92 = *(void (**)(char *, uint64_t, uint64_t))(v118 + 16);
  v92(v102, v103, v41);
  sub_2448EACB0();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v44 = v109;
  v118 = AssociatedConformanceWitness;
  sub_2448EB58C();
  v45 = v44;
  v46 = v105;
  v117 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v105 + 48);
  v47 = v117(v45, 1, a9);
  v48 = v106;
  v49 = (uint64_t)v104;
  if (v47 != 1)
  {
    v50 = *(void (**)(uint64_t, char *, uint64_t))(v46 + 32);
    do
    {
      v50(v49, v45, a9);
      sub_2448912E0(v49, v48);
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v49, a9);
      sub_2448EB58C();
      v45 = v109;
    }
    while (v117(v109, 1, a9) != 1);
  }
  v51 = v41;
  v52 = AssociatedTypeWitness;
  v109 = *(char **)(v94 + 8);
  ((void (*)(void (*)(uint64_t, char *, uint64_t), uint64_t))v109)(v113, AssociatedTypeWitness);
  v53 = v93;
  v54 = v95;
  v91(v93, v97, v95);
  v55 = v120;
  v56 = v90(v53, 1, v120);
  v57 = v119;
  v58 = v121;
  if (v56 == 1)
  {
    (*(void (**)(char *, uint64_t))(v88 + 8))(v53, v54);
    v59 = v99;
  }
  else
  {
    v60 = (uint64_t)v89;
    (*(void (**)(char *, char *, uint64_t))(v96 + 32))(v89, v53, v55);
    *((_QWORD *)&v84 + 1) = v57;
    *(_QWORD *)&v84 = v58;
    *((_QWORD *)&v80 + 1) = v41;
    *(_QWORD *)&v80 = v55;
    v61 = v55;
    v62 = v99;
    v63 = v100;
    sub_2448915BC(v60, 0, v111, v106, v99, v112, v100, v116, v80, a9, v55, v115, v84, v107, v58);
    v122 = sub_2447D31DC((void (*)(char *, char *))sub_244891998, 0, v55, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4078], v58, MEMORY[0x24BEE40A8], v64);
    v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A630);
    v66 = sub_244892590(&qword_25738FFF0, MEMORY[0x24BEE12E0]);
    *((_QWORD *)&v85 + 1) = v57;
    *(_QWORD *)&v85 = v58;
    v83 = v65;
    v52 = AssociatedTypeWitness;
    *((_QWORD *)&v81 + 1) = v51;
    *(_QWORD *)&v81 = v55;
    v59 = v62;
    sub_2448915BC((uint64_t)&v122, 0, v111, v106, v62, v112, v63, v116, v81, a9, v83, v115, v85, v107, v66);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v60, v61);
  }
  v67 = v98;
  v68 = v117;
  v92(v102, v103, v51);
  sub_2448EACB0();
  v69 = v110;
  sub_2448EB58C();
  v70 = v69;
  v71 = v68(v69, 1, a9);
  v72 = v106;
  v73 = v107;
  v74 = v67;
  v75 = v52;
  v76 = (uint64_t)v104;
  v77 = v105;
  v78 = v100;
  if (v71 != 1)
  {
    v113 = *(void (**)(uint64_t, char *, uint64_t))(v105 + 32);
    do
    {
      v113(v76, v70, a9);
      *((_QWORD *)&v86 + 1) = v119;
      *(_QWORD *)&v86 = v121;
      *((_QWORD *)&v82 + 1) = v108;
      *(_QWORD *)&v82 = v120;
      sub_2448915BC(v76, 1, v111, v72, v59, v112, v78, v116, v82, a9, a9, v115, v86, v73, v73);
      (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v76, a9);
      sub_2448EB58C();
      v70 = v110;
    }
    while (v117(v110, 1, a9) != 1);
  }
  ((void (*)(char *, uint64_t))v109)(v74, v75);
  return swift_release();
}

uint64_t sub_2448912E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;

  v3 = sub_2448EB9F4();
  MEMORY[0x24BDAC7A8](v3);
  v4 = sub_2448EB9E8();
  v32 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v31 - v5;
  sub_2448EACEC();
  sub_2448EB9D0();
  sub_2448EB9DC();
  if (!v35)
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v6, v4);
  v7 = (uint64_t *)(a2 + 16);
  v8 = v34;
  while (1)
  {
    swift_beginAccess();
    v9 = *v7;
    if (*(_QWORD *)(*v7 + 16) && (v10 = sub_244828DC8(v8), (v11 & 1) != 0))
      v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v10);
    else
      v12 = 0;
    swift_endAccess();
    v13 = sub_2448EAB78();
    swift_bridgeObjectRelease();
    v14 = v13 <= v12 ? v12 : v13;
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v33 = (_QWORD *)*v7;
    v16 = v33;
    *v7 = 0x8000000000000000;
    v18 = sub_244828DC8(v8);
    v19 = v16[2];
    v20 = (v17 & 1) == 0;
    v21 = v19 + v20;
    if (__OFADD__(v19, v20))
      break;
    v22 = v17;
    if (v16[3] >= v21)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v25 = v33;
        if ((v17 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        sub_24482EE58();
        v25 = v33;
        if ((v22 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      sub_24482C91C(v21, isUniquelyReferenced_nonNull_native);
      v23 = sub_244828DC8(v8);
      if ((v22 & 1) != (v24 & 1))
        goto LABEL_26;
      v18 = v23;
      v25 = v33;
      if ((v22 & 1) != 0)
      {
LABEL_3:
        *(_QWORD *)(v25[7] + 8 * v18) = v14;
        goto LABEL_4;
      }
    }
    v25[(v18 >> 6) + 8] |= 1 << v18;
    v26 = 8 * v18;
    *(_QWORD *)(v25[6] + v26) = v8;
    *(_QWORD *)(v25[7] + v26) = v14;
    v27 = v25[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
      goto LABEL_25;
    v25[2] = v29;
LABEL_4:
    *v7 = (uint64_t)v25;
    swift_bridgeObjectRelease();
    swift_endAccess();
    sub_2448EB9DC();
    v8 = v34;
    if (!v35)
      return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v6, v4);
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  result = sub_2448EBC7C();
  __break(1u);
  return result;
}

uint64_t sub_2448915BC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[16];
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  char *v40;
  char v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;

  v32 = a8;
  v37 = a7;
  v36 = a6;
  v35 = a5;
  v33 = a3;
  v34 = a2;
  v31 = a13;
  v28 = a9;
  v29 = a10;
  v30 = a14;
  v16 = sub_2448EB9F4();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v28 - v18;
  sub_2448EACEC();
  v20 = v32;
  v42 = v32;
  v43 = v28;
  v44 = v29;
  v45 = a11;
  v46 = a12;
  v47 = v31;
  v48 = v30;
  v49 = a15;
  v50 = v33;
  v51 = a4 + 16;
  v52 = v35;
  v53 = v34;
  v39 = sub_2448925D4;
  v40 = &v41;
  v21 = MEMORY[0x24951AC70](MEMORY[0x24BEE2FC0], v16);
  v23 = sub_2448CDDF0((void (*)(char *, char *))sub_24489261C, (uint64_t)v38, v16, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4078], v21, MEMORY[0x24BEE40A8], v22);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  v54 = v23;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A630);
  sub_244892590(qword_25738A638, MEMORY[0x24BEE12B0]);
  v24 = sub_2448EA9A4();
  v26 = v25;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(a12 + 8))(v24, v26, MEMORY[0x24BEE4AF8], v20, a12);
  return swift_bridgeObjectRelease();
}

uint64_t sub_24489181C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  v18 = result;
  if (*(_QWORD *)(a4 + 16) <= result)
  {
    v19 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    if (result < 0)
    {
LABEL_14:
      __break(1u);
      return result;
    }
    v19 = *(_QWORD *)(a4 + 8 * result + 32);
    swift_bridgeObjectRetain();
  }
  swift_beginAccess();
  v20 = *a5;
  if (*(_QWORD *)(*a5 + 16) && (v21 = sub_244828DC8(v18), (v22 & 1) != 0))
    v23 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v21);
  else
    v23 = 0;
  swift_endAccess();
  result = sub_2448EAB78();
  v24 = __OFSUB__(v23, result);
  v25 = v23 - result;
  if (v24)
  {
    __break(1u);
    goto LABEL_14;
  }
  if ((a7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v19 = MEMORY[0x24BEE4AF8];
  }
  v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a13 + 32))(a2, a3, v19, a8, a13);
  swift_bridgeObjectRelease();
  MEMORY[0x249519458](32, 0xE100000000000000, v25 & ~(v25 >> 63));
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v26;
}

uint64_t sub_244891998@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = sub_2448EAB78();
  result = MEMORY[0x249519458](61, 0xE100000000000000, v2);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2448919DC()
{
  FILE *v0;
  int v1;
  uint64_t result;
  id v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;

  v0 = (FILE *)sub_2448EA620();
  v1 = fileno(v0);
  result = isatty(v1);
  if ((_DWORD)result != 1)
    goto LABEL_8;
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1760]), sel_init);
  v4 = objc_msgSend(v3, sel_environment);

  v5 = sub_2448EA800();
  if (!*(_QWORD *)(v5 + 16) || (v6 = sub_244828D0C(0x53524F4C4F43534CLL, 0xE800000000000000), (v7 & 1) == 0))
  {
    result = swift_bridgeObjectRelease();
LABEL_8:
    v12 = 0;
    goto LABEL_9;
  }
  v8 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v6);
  v9 = *v8;
  v10 = v8[1];
  result = swift_bridgeObjectRelease();
  v11 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0)
    v11 = v9 & 0xFFFFFFFFFFFFLL;
  v12 = v11 != 0;
LABEL_9:
  byte_25738FFE8 = v12;
  return result;
}

uint64_t static CommandLinePrinter.allowsColor.getter()
{
  if (qword_257389D88 != -1)
    swift_once();
  return byte_25738FFE8;
}

uint64_t static CommandLinePrinter.format(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;

  if (qword_257389D88 != -1)
    swift_once();
  if (byte_25738FFE8 == 1)
  {
    sub_2448920CC(a3);
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    sub_2448EABC0();
    v4 = 993024795;
  }
  else
  {
    v4 = 0;
  }
  v6 = v4;
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

{
  uint64_t v4;
  uint64_t v6;

  if (qword_257389D88 != -1)
    swift_once();
  if (byte_25738FFE8 == 1)
  {
    sub_2448920CC(a3);
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    sub_2448EABC0();
    v4 = 993024795;
  }
  else
  {
    v4 = 0;
  }
  v6 = v4;
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

Swift::String __swiftcall CommandLinePrinter.format(_:_:)(Swift::String a1, Swift::OpaquePointer a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  Swift::String result;
  uint64_t v8;

  if (qword_257389D88 != -1)
    swift_once();
  if (byte_25738FFE8 == 1)
  {
    sub_2448920CC((uint64_t)a2._rawValue);
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    sub_2448EABC0();
    v3 = 993024795;
    v4 = 0xE400000000000000;
  }
  else
  {
    v3 = 0;
    v4 = 0xE000000000000000;
  }
  v8 = v3;
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = v8;
  v6 = (void *)v4;
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

uint64_t static CommandLinePrinter.printError(_:)()
{
  sub_2448EABC0();
  _s20PreviewsFoundationOS18CommandLinePrinterV5printyySS_AA0dE17PrintingAttributeOdtFZ_0(539634218, 0xE400000000000000, (uint64_t)&unk_25157DE10);
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall CommandLinePrinter.printError(_:)(Swift::String a1)
{
  sub_2448EABC0();
  _s20PreviewsFoundationOS18CommandLinePrinterV5printyySS_AA0dE17PrintingAttributeOdtFZ_0(539634218, 0xE400000000000000, (uint64_t)&unk_25157DE38);
  swift_bridgeObjectRelease();
}

void static CommandLinePrinter.printError(_:exitCode:)(uint64_t a1, uint64_t a2, int a3)
{
  sub_2448EABC0();
  _s20PreviewsFoundationOS18CommandLinePrinterV5printyySS_AA0dE17PrintingAttributeOdtFZ_0(539634218, 0xE400000000000000, (uint64_t)&unk_25157DE60);
  swift_bridgeObjectRelease();
  exit(a3);
}

Swift::Void __swiftcall CommandLinePrinter.printError(_:exitCode:)(Swift::String _, Swift::Int32 exitCode)
{
  sub_2448EABC0();
  _s20PreviewsFoundationOS18CommandLinePrinterV5printyySS_AA0dE17PrintingAttributeOdtFZ_0(539634218, 0xE400000000000000, (uint64_t)&unk_25157DDE8);
  swift_bridgeObjectRelease();
  exit(exitCode);
}

uint64_t sub_244892018()
{
  sub_2448EABC0();
  _s20PreviewsFoundationOS18CommandLinePrinterV5printyySS_AA0dE17PrintingAttributeOdtFZ_0(539634218, 0xE400000000000000, (uint64_t)&unk_25157DE38);
  return swift_bridgeObjectRelease();
}

void sub_244892068(uint64_t a1, uint64_t a2, int a3)
{
  sub_2448EABC0();
  _s20PreviewsFoundationOS18CommandLinePrinterV5printyySS_AA0dE17PrintingAttributeOdtFZ_0(539634218, 0xE400000000000000, (uint64_t)&unk_25157DDE8);
  swift_bridgeObjectRelease();
  exit(a3);
}

uint64_t sub_2448920B8(uint64_t a1, uint64_t a2, Swift::OpaquePointer a3)
{
  return CommandLinePrinter.format(_:_:)(*(Swift::String *)&a1, a3)._countAndFlagsBits;
}

uint64_t sub_2448920CC(uint64_t a1)
{
  int64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v12 = MEMORY[0x24BEE4AF8];
    sub_2447CEE18(0, v1, 0);
    v3 = a1 + 32;
    do
    {
      ++v3;
      v4 = sub_2448EBB5C();
      v6 = v5;
      v8 = *(_QWORD *)(v12 + 16);
      v7 = *(_QWORD *)(v12 + 24);
      if (v8 >= v7 >> 1)
        sub_2447CEE18(v7 > 1, v8 + 1, 1);
      *(_QWORD *)(v12 + 16) = v8 + 1;
      v9 = v12 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v4;
      *(_QWORD *)(v9 + 40) = v6;
      --v1;
    }
    while (v1);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A630);
  sub_244892590(qword_25738A638, MEMORY[0x24BEE12B0]);
  v10 = sub_2448EA9A4();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t _s20PreviewsFoundationOS28CommandLinePrintingAttributeO8rawValueACSgSi_tcfC_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 - 1;
  result = 1;
  switch(v1)
  {
    case 0:
      result = 0;
      break;
    case 29:
      return result;
    case 30:
      result = 5;
      break;
    case 31:
      result = 3;
      break;
    case 32:
      result = 7;
      break;
    case 33:
      result = 2;
      break;
    case 34:
      result = 6;
      break;
    case 35:
      result = 4;
      break;
    case 36:
      result = 8;
      break;
    default:
      result = 9;
      break;
  }
  return result;
}

uint64_t sub_244892290()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t _s20PreviewsFoundationOS18CommandLinePrinterV5printyySS_AA0dE17PrintingAttributeOdtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;

  __swift_instantiateConcreteTypeFromMangledName(&qword_25738C220);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2448ECF10;
  if (qword_257389D88 != -1)
    swift_once();
  if (byte_25738FFE8 == 1)
  {
    sub_2448920CC(a3);
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    sub_2448EABC0();
    v5 = 993024795;
    v6 = 0xE400000000000000;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  v8 = v5;
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v4 + 32) = v8;
  *(_QWORD *)(v4 + 40) = v6;
  sub_2448EBCDC();
  return swift_bridgeObjectRelease();
}

unint64_t sub_244892450()
{
  unint64_t result;

  result = qword_25738FFF8;
  if (!qword_25738FFF8)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for CommandLinePrintingAttribute, &type metadata for CommandLinePrintingAttribute);
    atomic_store(result, (unint64_t *)&qword_25738FFF8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CommandLinePrintingAttribute(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_2448924E0 + 4 * byte_2448F52AA[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_244892514 + 4 * byte_2448F52A5[v4]))();
}

uint64_t sub_244892514(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24489251C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x244892524);
  return result;
}

uint64_t sub_244892530(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x244892538);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_24489253C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244892544(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CommandLinePrintingAttribute()
{
  return &type metadata for CommandLinePrintingAttribute;
}

uint64_t dispatch thunk of AnyCommandLinePrinter.print(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of AnyCommandLinePrinter.printError(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of AnyCommandLinePrinter.printError(_:exitCode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of AnyCommandLinePrinter.format(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

ValueMetadata *type metadata accessor for CommandLinePrinter()
{
  return &type metadata for CommandLinePrinter;
}

uint64_t sub_244892590(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A630);
    result = MEMORY[0x24951AC70](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2448925D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_24489181C(a1, a2, a3, *(_QWORD *)(v3 + 96), *(uint64_t **)(v3 + 104), *(_QWORD *)(v3 + 112), *(_BYTE *)(v3 + 120), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56));
}

uint64_t sub_24489261C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v2 + 16))(*a1, a1[1], a1[2]);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_244892660(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24489268C + 4 * byte_2448F5430[a1]))(1667329385, 0xE400000000000000);
}

uint64_t sub_24489268C()
{
  return 0x656E6F687069;
}

uint64_t sub_2448926A0()
{
  return 1684107369;
}

uint64_t sub_2448926AC()
{
  return 0x64756F6C6369;
}

uint64_t sub_2448926C0()
{
  return 1685024873;
}

uint64_t sub_2448926D0()
{
  return 0x6567617373656D69;
}

uint64_t sub_2448926E8()
{
  return 7565161;
}

uint64_t sub_2448926F8()
{
  return 0x73656E757469;
}

uint64_t sub_24489270C()
{
  return 6578537;
}

uint64_t sub_24489271C()
{
  return 0x6F746F687069;
}

uint64_t sub_244892730()
{
  return 0x6566696C69;
}

uint64_t sub_244892744()
{
  return 0x6569766F6D69;
}

uint64_t sub_244892758()
{
  return 0x736B6F6F6269;
}

uint64_t sub_24489276C()
{
  return 0x6B726F7769;
}

void sub_244892780()
{
  void *v0;

  sub_24489279C();
  off_257390000 = v0;
}

void sub_24489279C()
{
  sub_2447CEE18(0, 14, 0);
  JUMPOUT(0x244892910);
}

uint64_t sub_244892BCC()
{
  uint64_t result;
  uint64_t v1;

  result = sub_244892BEC();
  qword_257390008 = result;
  unk_257390010 = v1;
  return result;
}

uint64_t sub_244892BEC()
{
  char *v0;
  int64_t v1;
  void *v2;
  char *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  if (qword_257389D90 != -1)
    swift_once();
  v0 = (char *)off_257390000;
  v1 = *((_QWORD *)off_257390000 + 2);
  if (v1)
  {
    v14 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_2447CEE18(0, v1, 0);
    v2 = (void *)objc_opt_self();
    v3 = v0 + 40;
    do
    {
      swift_bridgeObjectRetain();
      v4 = (void *)sub_2448EAA70();
      v5 = objc_msgSend(v2, sel_escapedPatternForString_, v4);

      v6 = sub_2448EAA94();
      v8 = v7;
      swift_bridgeObjectRelease();

      v10 = *(_QWORD *)(v14 + 16);
      v9 = *(_QWORD *)(v14 + 24);
      if (v10 >= v9 >> 1)
        sub_2447CEE18(v9 > 1, v10 + 1, 1);
      v3 += 16;
      *(_QWORD *)(v14 + 16) = v10 + 1;
      v11 = v14 + 16 * v10;
      *(_QWORD *)(v11 + 32) = v6;
      *(_QWORD *)(v11 + 40) = v8;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A630);
  sub_2447D48B0();
  v12 = sub_2448EA9A4();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_244892DA4()
{
  uint64_t result;
  uint64_t v1;

  result = sub_244892DC4();
  qword_257390018 = result;
  unk_257390020 = v1;
  return result;
}

uint64_t sub_244892DC4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v20 = MEMORY[0x24BEE4AF8];
  sub_2447CEE18(0, 2, 0);
  v0 = v20;
  v1 = (void *)objc_opt_self();
  v2 = (void *)sub_2448EAA70();
  v3 = objc_msgSend(v1, sel_escapedPatternForString_, v2);

  v4 = sub_2448EAA94();
  v6 = v5;

  v8 = *(_QWORD *)(v20 + 16);
  v7 = *(_QWORD *)(v20 + 24);
  if (v8 >= v7 >> 1)
  {
    sub_2447CEE18(v7 > 1, v8 + 1, 1);
    v0 = v20;
  }
  *(_QWORD *)(v0 + 16) = v8 + 1;
  v9 = v0 + 16 * v8;
  *(_QWORD *)(v9 + 32) = v4;
  *(_QWORD *)(v9 + 40) = v6;
  v10 = (void *)sub_2448EAA70();
  v11 = objc_msgSend(v1, sel_escapedPatternForString_, v10);

  v12 = sub_2448EAA94();
  v14 = v13;

  v16 = *(_QWORD *)(v0 + 16);
  v15 = *(_QWORD *)(v0 + 24);
  if (v16 >= v15 >> 1)
  {
    sub_2447CEE18(v15 > 1, v16 + 1, 1);
    v0 = v20;
  }
  *(_QWORD *)(v0 + 16) = v16 + 1;
  v17 = v0 + 16 * v16;
  *(_QWORD *)(v17 + 32) = v12;
  *(_QWORD *)(v17 + 40) = v14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A630);
  sub_2447D48B0();
  v18 = sub_2448EA9A4();
  swift_release();
  return v18;
}

id sub_244892F84()
{
  id result;

  result = sub_244892FA0();
  qword_257390028 = (uint64_t)result;
  return result;
}

id sub_244892FA0()
{
  id v0;

  if (qword_257389D98 != -1)
    swift_once();
  sub_2448EABC0();
  sub_2448EABC0();
  sub_2448EABC0();
  sub_2448EABC0();
  sub_2448EB79C();
  sub_2448EABC0();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  if (qword_257389DA0 != -1)
    swift_once();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  sub_2448EABC0();
  sub_2448EABC0();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  v0 = objc_allocWithZone(MEMORY[0x24BDD1798]);
  return sub_2448A3104(0, 0xE000000000000000, 0);
}

id sub_244893250()
{
  id v0;
  id result;

  v0 = objc_allocWithZone(MEMORY[0x24BDD1798]);
  result = sub_2448A3104(0x292B2E282A5FLL, 0xE600000000000000, 0);
  qword_257390030 = (uint64_t)result;
  return result;
}

Swift::String __swiftcall String.englishName(strippingClassPrefix:)(Swift::Bool strippingClassPrefix)
{
  uint64_t v1;
  void *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t object;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  unint64_t v18;
  uint64_t countAndFlagsBits;
  uint64_t v20;
  uint64_t v21;
  id v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  _QWORD *v65;
  Swift::String v66;
  uint64_t v67;
  int64_t v68;
  char *v69;
  void *v70;
  uint64_t v71;
  void *v72;
  Swift::String result;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  _BOOL4 v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  id v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v4 = v2;
  v5 = v1;
  v77 = strippingClassPrefix;
  v6 = sub_2448EA26C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = v5;
  v84 = (uint64_t)v4;
  sub_2448EA230();
  sub_2447D0980();
  object = sub_2448EB5D4();
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0)
    v13 = object & 0xFFFFFFFFFFFFLL;
  if (!v13)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_59;
  }
  if (qword_257389DA8 != -1)
    swift_once();
  v14 = (id)qword_257390028;
  v15 = (void *)sub_2448EAA70();
  swift_bridgeObjectRetain();
  v16 = sub_2448EAC50();
  swift_bridgeObjectRelease();
  v17 = objc_msgSend(v14, sel_matchesInString_options_range_, v15, 0, 0, v16);

  sub_244894054();
  v18 = sub_2448EADE8();

  v81 = (id)sub_2448EAA70();
  swift_bridgeObjectRelease();
  v75 = v5;
  v76 = v4;
  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    countAndFlagsBits = sub_2448EBA18();
    swift_bridgeObjectRelease();
    if (countAndFlagsBits)
      goto LABEL_8;
  }
  else
  {
    countAndFlagsBits = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (countAndFlagsBits)
    {
LABEL_8:
      if (countAndFlagsBits >= 1)
      {
        v20 = 0;
        v80 = v18 & 0xC000000000000001;
        v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
        v78 = countAndFlagsBits;
        v79 = v18;
        while (1)
        {
          if (v80)
          {
            v22 = (id)MEMORY[0x249519FE0](v20, v18);
            if (v20)
              goto LABEL_15;
          }
          else
          {
            v22 = *(id *)(v18 + 8 * v20 + 32);
            if (v20)
            {
LABEL_15:
              v23 = v3;
              v24 = 0;
              v25 = 0;
              goto LABEL_20;
            }
          }
          v26 = objc_msgSend(v22, sel_range);
          v24 = 0;
          v23 = v3;
          v25 = 0;
          if (v26 && !v77)
          {
            v27 = objc_msgSend(v81, sel_substringToIndex_, v26);
            v24 = sub_2448EAA94();
            v25 = v28;

          }
LABEL_20:
          v82 = (_QWORD *)v24;
          v29 = objc_msgSend(v22, sel_range);
          v31 = objc_msgSend(v81, sel_substringWithRange_, v29, v30);
          v32 = v31;
          v33 = v31;
          if (!v31)
          {
            sub_2448EAA94();
            v33 = (void *)sub_2448EAA70();
            swift_bridgeObjectRelease();
            sub_2448EAA94();
            v32 = (void *)sub_2448EAA70();
            swift_bridgeObjectRelease();
          }
          sub_2448EAA94();
          v35 = v34;
          v36 = qword_257389DB0;
          v37 = v31;
          if (v36 != -1)
            swift_once();
          v38 = (void *)qword_257390030;
          if ((v35 & 0x1000000000000000) != 0)
            v39 = sub_2448EAC38();
          else
            v39 = sub_2448EAC44();
          v40 = v39;
          v41 = v38;
          swift_bridgeObjectRelease();
          v42 = objc_msgSend(v41, sel_firstMatchInString_options_range_, v33, 0, 0, v40);

          if (v42)
          {
            v43 = objc_msgSend(v42, sel_rangeAtIndex_, 1);
            v45 = v44;
            v46 = objc_msgSend(v32, sel_substringWithRange_, v43, v44);

            v47 = sub_2448EAA94();
            v49 = v48;

            if (!v25)
            {
              v3 = v23;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v3 = sub_2447C1B70(0, v23[2] + 1, 1, v23);
              v21 = v78;
              v57 = v3[2];
              v56 = v3[3];
              if (v57 >= v56 >> 1)
                v3 = sub_2447C1B70((_QWORD *)(v56 > 1), v57 + 1, 1, v3);
              v3[2] = v57 + 1;
              v58 = &v3[2 * v57];
              v58[4] = v47;
              v58[5] = v49;

              v18 = v79;
              goto LABEL_12;
            }
            if (v43 != objc_msgSend(v42, sel_range) || v45 != v50)
            {
              v3 = v23;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v3 = sub_2447C1B70(0, v23[2] + 1, 1, v23);
              v21 = v78;
              v60 = v3[2];
              v59 = v3[3];
              v61 = v59 >> 1;
              v62 = v60 + 1;
              if (v59 >> 1 <= v60)
              {
                v3 = sub_2447C1B70((_QWORD *)(v59 > 1), v60 + 1, 1, v3);
                v59 = v3[3];
                v61 = v59 >> 1;
              }
              v3[2] = v62;
              v63 = &v3[2 * v60];
              v63[4] = v82;
              v63[5] = v25;
              v64 = v60 + 2;
              if (v61 < (uint64_t)(v60 + 2))
                v3 = sub_2447C1B70((_QWORD *)(v59 > 1), v60 + 2, 1, v3);
              v18 = v79;
              v3[2] = v64;
              v65 = &v3[2 * v62];
              v65[4] = v47;
              v65[5] = v49;

              goto LABEL_12;
            }
            v83 = (uint64_t)v82;
            v84 = v25;
            sub_2448EABC0();
            swift_bridgeObjectRelease();
            v51 = v83;
            v52 = v84;
            v3 = v23;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v3 = sub_2447C1B70(0, v23[2] + 1, 1, v23);
            v54 = v3[2];
            v53 = v3[3];
            if (v54 >= v53 >> 1)
              v3 = sub_2447C1B70((_QWORD *)(v53 > 1), v54 + 1, 1, v3);
            v3[2] = v54 + 1;
            v55 = &v3[2 * v54];
            v55[4] = v51;
            v55[5] = v52;

          }
          else
          {

            swift_bridgeObjectRelease();
            v3 = v23;
          }
          v21 = v78;
          v18 = v79;
LABEL_12:
          if (v21 == ++v20)
            goto LABEL_51;
        }
      }
      __break(1u);
      goto LABEL_61;
    }
  }
  v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_51:
  swift_bridgeObjectRelease();
  if (!v3[2])
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A058);
    v67 = swift_allocObject();
    *(_OWORD *)(v67 + 16) = xmmword_2448ECF10;
    *(_QWORD *)(v67 + 32) = v75;
    *(_QWORD *)(v67 + 40) = v76;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v3 = (_QWORD *)v67;
    goto LABEL_56;
  }
  swift_bridgeObjectRetain();
  v66 = String.uppercasingFirstLetter()();
  countAndFlagsBits = v66._countAndFlagsBits;
  object = (uint64_t)v66._object;
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    if (!v3[2])
    {
LABEL_62:
      __break(1u);
      JUMPOUT(0x244893E64);
    }
    goto LABEL_54;
  }
LABEL_61:
  v3 = sub_2447F2BD4(v3);
  if (!v3[2])
    goto LABEL_62;
LABEL_54:
  v3[4] = countAndFlagsBits;
  v3[5] = object;
  swift_bridgeObjectRelease();
LABEL_56:
  v68 = v3[2];
  if (v68)
  {
    v85 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_2447CEE18(0, v68, 0);
    v82 = v3;
    sub_2448EA938();
    swift_bridgeObjectRetain();
    v69 = (char *)&loc_244893A64 + dword_244893E64[sub_244894090()];
    __asm { BR              X9 }
  }
  v83 = MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A630);
  sub_2447D48B0();
  v5 = sub_2448EA9A4();
  v4 = v70;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_59:
  v71 = v5;
  v72 = v4;
  result._object = v72;
  result._countAndFlagsBits = v71;
  return result;
}

uint64_t String.firstEnglishNameLetter.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char v4;
  char v5;
  uint64_t v6;
  Swift::String v8;

  v0 = sub_2448EA26C();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = String.englishName(strippingClassPrefix:)(1);
  sub_2448EA248();
  sub_2447D0980();
  sub_2448EB5C8();
  v5 = v4;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    sub_2448EACA4();
    swift_bridgeObjectRelease();
    sub_2448EB544();
    swift_bridgeObjectRelease();
    v6 = sub_2448EAC80();
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_24489404C(Swift::Bool strippingClassPrefix)
{
  return String.englishName(strippingClassPrefix:)(strippingClassPrefix)._countAndFlagsBits;
}

unint64_t sub_244894054()
{
  unint64_t result;

  result = qword_257390038;
  if (!qword_257390038)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_257390038);
  }
  return result;
}

uint64_t sub_244894090()
{
  unint64_t v0;

  v0 = sub_2448EBA84();
  swift_bridgeObjectRelease();
  if (v0 >= 0xE)
    return 14;
  else
    return v0;
}

unint64_t sub_2448940D8()
{
  unint64_t result;

  result = qword_257390040;
  if (!qword_257390040)
  {
    result = MEMORY[0x24951AC70](MEMORY[0x24BEE1E38], MEMORY[0x24BEE1E08]);
    atomic_store(result, (unint64_t *)&qword_257390040);
  }
  return result;
}

uint64_t dispatch thunk of EnglishNameConvertible.englishName(strippingClassPrefix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t AsyncSequence.collect()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[6] = AssociatedTypeWitness;
  v6 = sub_2448EB508();
  v3[7] = v6;
  v3[8] = *(_QWORD *)(v6 - 8);
  v3[9] = swift_task_alloc();
  v3[10] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  v3[13] = *(_QWORD *)(a1 - 8);
  v3[14] = swift_task_alloc();
  v7 = swift_getAssociatedTypeWitness();
  v3[15] = v7;
  v3[16] = *(_QWORD *)(v7 - 8);
  v3[17] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_244894248()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[13];
  v1 = v0[14];
  v3 = v0[5];
  v4 = v0[3];
  v0[2] = sub_2448EA7D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v3, v4);
  sub_2448EB0A0();
  swift_getAssociatedConformanceWitness();
  v5 = (_QWORD *)swift_task_alloc();
  v0[18] = v5;
  *v5 = v0;
  v5[1] = sub_244894314;
  return sub_2448EAF5C();
}

uint64_t sub_244894314()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_244894380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 48);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    v4 = *(_QWORD *)(v0 + 56);
    v5 = *(_QWORD *)(v0 + 64);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v4);
    v6 = *(_QWORD *)(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 88);
    v8 = *(_QWORD *)(v0 + 96);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v8, v1, v3);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v9, v8, v3);
    sub_2448EAEE4();
    sub_2448EAE9C();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v8, v3);
    swift_getAssociatedConformanceWitness();
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 144) = v10;
    *v10 = v0;
    v10[1] = sub_244894314;
    return sub_2448EAF5C();
  }
}

uint64_t sub_244894510()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t OrderedSet.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = *(_QWORD *)(a2 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v10 = sub_2448EAE54();
  v11 = sub_2448EA7E8();
  v20 = v10;
  v21 = v11;
  if (MEMORY[0x2495196A4](a1, a2))
  {
    v12 = 0;
    while (1)
    {
      v13 = sub_2448EAE6C();
      sub_2448EAE18();
      if ((v13 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))((char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v12, a2);
        v15 = v12 + 1;
        if (__OFADD__(v12, 1))
          goto LABEL_10;
      }
      else
      {
        result = sub_2448EB7F0();
        if (v9 != 8)
        {
          __break(1u);
          return result;
        }
        v19 = result;
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(&v18 - 2, &v19, a2);
        swift_unknownObjectRelease();
        v15 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_10:
          __break(1u);
LABEL_11:
          result = swift_bridgeObjectRelease();
          v10 = v20;
          v11 = v21;
          goto LABEL_13;
        }
      }
      v16 = type metadata accessor for OrderedSet(0, a2, a3, v14);
      OrderedSet.append(_:)((uint64_t)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v16);
      (*(void (**)(char *, uint64_t))(v8 + 8))((char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
      ++v12;
      if (v15 == MEMORY[0x2495196A4](a1, a2))
        goto LABEL_11;
    }
  }
  result = swift_bridgeObjectRelease();
LABEL_13:
  *a4 = v10;
  a4[1] = v11;
  return result;
}

uint64_t OrderedSet.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  char *v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = a2;
  v21 = a1;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2448EB508();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v21 - v10;
  v12 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v17 = (char *)&v21 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v21, a3);
  sub_2448EACB0();
  swift_getAssociatedConformanceWitness();
  sub_2448EB58C();
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v18(v11, 1, v4) != 1)
  {
    v19 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    do
    {
      v19(v7, v11, v4);
      OrderedSet.append(_:)((uint64_t)v7, v23);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      sub_2448EB58C();
    }
    while (v18(v11, 1, v4) != 1);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v17, AssociatedTypeWitness);
}

BOOL OrderedSet.append(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v13;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v13 - v8;
  v10 = sub_2448EB130();
  if ((v10 & 1) == 0)
  {
    v11 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v11(v7, a1, v3);
    sub_2448EB160();
    sub_2448EB10C();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    v11(v9, a1, v3);
    sub_2448EAEE4();
    sub_2448EAE9C();
  }
  return (v10 & 1) == 0;
}

uint64_t OrderedSet.startIndex.getter()
{
  return 0;
}

uint64_t OrderedSet.subscript.getter()
{
  return sub_2448EAF08();
}

uint64_t OrderedSet.appending<A>(contentsOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return sub_2447DCE48(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))OrderedSet.append<A>(contentsOf:), a5);
}

uint64_t OrderedSet.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_2448EAE54();
  result = sub_2448EA7E8();
  *a1 = v2;
  a1[1] = result;
  return result;
}

Swift::Void __swiftcall OrderedSet.reserveCapacity(_:)(Swift::Int a1)
{
  sub_2448EAEE4();
  sub_2448EAE24();
  sub_2448EB160();
  sub_2448EB0DC();
}

double OrderedSet.init<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  double result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;

  v34 = a1;
  v35 = a4;
  v33 = a5;
  v29 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_2448EB508();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v28 - v11;
  v13 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v18 = (char *)&v28 - v17;
  v19 = sub_2448EAE54();
  v20 = sub_2448EA7E8();
  *(_QWORD *)&v36 = v19;
  *((_QWORD *)&v36 + 1) = v20;
  v31 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v34, a3);
  sub_2448EACB0();
  v32 = a3;
  swift_getAssociatedConformanceWitness();
  v21 = AssociatedTypeWitness;
  sub_2448EB58C();
  v22 = v29;
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  if (v23(v12, 1, a2) != 1)
  {
    v24 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    do
    {
      v24(v8, v12, a2);
      v26 = type metadata accessor for OrderedSet(0, a2, v35, v25);
      OrderedSet.append(_:)((uint64_t)v8, v26);
      (*(void (**)(char *, uint64_t))(v22 + 8))(v8, a2);
      sub_2448EB58C();
    }
    while (v23(v12, 1, a2) != 1);
  }
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v34, v32);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v18, v21);
  result = *(double *)&v36;
  *v33 = v36;
  return result;
}

uint64_t static OrderedSet.== infix<A>(_:_:)()
{
  return sub_2448EAEF0();
}

void OrderedSet.count.getter()
{
  JUMPOUT(0x249519668);
}

uint64_t OrderedSet.isEmpty.getter()
{
  uint64_t v0;

  v0 = sub_2448EAEE4();
  MEMORY[0x24951AC70](MEMORY[0x24BEE12E0], v0);
  return sub_2448EB28C() & 1;
}

uint64_t OrderedSet.arrayForm.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t OrderedSet.contains(_:)()
{
  return sub_2448EB130();
}

uint64_t OrderedSet.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 16);
  if (MEMORY[0x249519668](*v2, v4) < 1)
  {
    v5 = 1;
  }
  else
  {
    sub_2448EAF08();
    v5 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a2, v5, 1, v4);
}

uint64_t OrderedSet.last.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t result;
  uint64_t v9;

  v4 = *v2;
  v5 = *(_QWORD *)(a1 + 16);
  if (MEMORY[0x249519668](*v2, v5) < 1)
  {
    v9 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a2, v9, 1, v5);
  }
  v6 = MEMORY[0x249519668](v4, v5);
  v7 = __OFSUB__(v6, 1);
  result = v6 - 1;
  if (!v7)
  {
    sub_2448EAF08();
    v9 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a2, v9, 1, v5);
  }
  __break(1u);
  return result;
}

uint64_t OrderedSet.indexOf(_:)()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_2448EAEE4();
  MEMORY[0x24951AC70](MEMORY[0x24BEE12E0], v0);
  sub_2448EB2BC();
  return v2;
}

BOOL OrderedSet.appending(_:)@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;

  v6 = *v3;
  v7 = v3[1];
  *a3 = v6;
  a3[1] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return OrderedSet.append(_:)(a1, a2);
}

uint64_t OrderedSet.removeLast()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = sub_2448EB508();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v6 - v2;
  v4 = sub_2448EAEE4();
  MEMORY[0x24951AC70](MEMORY[0x24BEE12B0], v4);
  MEMORY[0x24951AC70](MEMORY[0x24BEE12E8], v4);
  sub_2448EB334();
  sub_2448EB160();
  sub_2448EB118();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t OrderedSet.insert(_:atIndex:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  void (*v15)(char *, uint64_t, uint64_t);
  _QWORD v16[3];
  char v17;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v16 - v11;
  if ((sub_2448EB130() & 1) == 0)
  {
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v15(v10, a1, v6);
    sub_2448EB160();
    sub_2448EB10C();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    v15(v12, a1, v6);
    sub_2448EAEE4();
    return sub_2448EAEA8();
  }
  v16[1] = *v3;
  v13 = sub_2448EAEE4();
  MEMORY[0x24951AC70](MEMORY[0x24BEE12E0], v13);
  result = sub_2448EB2BC();
  if ((v17 & 1) != 0)
  {
    __break(1u);
    return result;
  }
  if (v16[2] != a2)
  {
    sub_2448EAEB4();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v12, a1, v6);
    return sub_2448EAEA8();
  }
  return result;
}

uint64_t OrderedSet.remove(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  char v11;
  __int128 v12;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = sub_2448EB508();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12 - v7;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
  v9(a2, 1, 1, v4);
  v12 = *v2;
  result = OrderedSet.indexOf(_:)();
  if ((v11 & 1) == 0)
  {
    OrderedSet.remove(at:)();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v5);
    v9((uint64_t)v8, 0, 1, v4);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v8, v5);
  }
  return result;
}

uint64_t OrderedSet.remove(at:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = sub_2448EB508();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v5 - v2;
  sub_2448EAEE4();
  sub_2448EAEB4();
  sub_2448EB160();
  sub_2448EB118();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t OrderedSet.subtract<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t AssociatedConformanceWitness;
  unsigned int (*v23)(_QWORD, _QWORD, _QWORD);
  void (*v25)(char *, char *, uint64_t);
  __int128 *v26;
  char *v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  unsigned int (*v30)(_QWORD, _QWORD, _QWORD);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  __int128 *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;

  v39 = a1;
  v6 = *(_QWORD *)(a2 + 16);
  v45 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v42 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v38 - v9;
  v11 = sub_2448EB508();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v38 - v13;
  v38 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v40 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v19 = (char *)&v38 - v18;
  v43 = v3;
  v44 = a2;
  sub_2448EB160();
  v20 = v39;
  sub_2448EB13C();
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v16, v20, a3);
  sub_2448EACB0();
  v21 = v19;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_2448EB58C();
  v23 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v45 + 48);
  if (v23(v14, 1, v6) != 1)
  {
    v25 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
    v41 = v6;
    v26 = v43;
    v25(v10, v14, v6);
    while (1)
    {
      v46 = *v26;
      OrderedSet.indexOf(_:)();
      if ((v37 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t))(v45 + 8))(v10, v6);
      }
      else
      {
        sub_2448EAEE4();
        v27 = v14;
        v28 = v10;
        v29 = v25;
        v30 = v23;
        v31 = AssociatedConformanceWitness;
        v32 = v21;
        v33 = AssociatedTypeWitness;
        v34 = v42;
        sub_2448EAEB4();
        v35 = *(void (**)(char *, uint64_t))(v45 + 8);
        v36 = v34;
        AssociatedTypeWitness = v33;
        v21 = v32;
        AssociatedConformanceWitness = v31;
        v23 = v30;
        v25 = v29;
        v10 = v28;
        v14 = v27;
        v6 = v41;
        v35(v36, v41);
        v35(v10, v6);
      }
      sub_2448EB58C();
      if (v23(v14, 1, v6) == 1)
        break;
      v25(v10, v14, v6);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v21, AssociatedTypeWitness);
}

uint64_t OrderedSet.subtracting<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return sub_2447DCE48(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))OrderedSet.subtract<A>(_:), a5);
}

uint64_t OrderedSet.formIntersection<A>(_:)()
{
  uint64_t v0;

  sub_2448EB160();
  sub_2448EB0E8();
  v0 = sub_2448EAEE4();
  MEMORY[0x24951AC70](MEMORY[0x24BEE12B8], v0);
  MEMORY[0x24951AC70](MEMORY[0x24BEE12E8], v0);
  return sub_2448EB34C();
}

uint64_t OrderedSet.intersection<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return sub_2447DCE48(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))OrderedSet.formIntersection<A>(_:), a5);
}

Swift::Void __swiftcall OrderedSet.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  sub_2448EAEE4();
  sub_2448EAED8();
  sub_2448EB160();
  sub_2448EB154();
}

void OrderedSet.endIndex.getter()
{
  JUMPOUT(0x2495196A4);
}

uint64_t OrderedSet.makeIterator()()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_2448EAEE4();
  swift_bridgeObjectRetain();
  MEMORY[0x24951AC70](MEMORY[0x24BEE12E0], v0);
  v1 = sub_2448EB928();
  MEMORY[0x24951AC70](MEMORY[0x24BEE2C18], v1);
  return sub_2448EB724();
}

uint64_t sub_244895A00()
{
  return static OrderedSet.== infix<A>(_:_:)();
}

uint64_t sub_244895A08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return OrderedSet.init(arrayLiteral:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t sub_244895A14@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = OrderedSet.makeIterator()();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_244895A54(uint64_t a1)
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedSet<A>, a1);
  return sub_2448EB22C();
}

uint64_t sub_244895A88(uint64_t a1)
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedSet<A>, a1);
  return sub_2448EB238();
}

uint64_t sub_244895ABC()
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedSet<A>);
  return sub_2448EB1B4();
}

_QWORD *sub_244895B0C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_244895DD0(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE1880]);
}

uint64_t sub_244895B18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedSet<A>, a3);
  return sub_2448EB1C0();
}

uint64_t sub_244895B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedSet<A>, a4);
  return sub_2448EB19C();
}

uint64_t sub_244895BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedSet<A>, a3);
  return sub_2448EB1D8();
}

void sub_244895C34()
{
  OrderedSet.endIndex.getter();
}

uint64_t sub_244895C48(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

void (*sub_244895C58(_QWORD *a1, uint64_t *a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_244895CB4(v6, *a2, a3);
  return sub_2447DD19C;
}

void (*sub_244895CB4(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = malloc(*(_QWORD *)(v4 + 64));
  sub_2448EAF08();
  return sub_2447DD234;
}

uint64_t sub_244895D20(uint64_t a1)
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedSet<A>, a1);
  return sub_2448EB1CC();
}

uint64_t sub_244895D74()
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedSet<A>);
  return sub_2448EB1A8();
}

_QWORD *sub_244895DC4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_244895DD0(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE1878]);
}

_QWORD *sub_244895DD0(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;

  v7 = MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedSet<A>);
  result = a4(&v9, a1, a2, v7, MEMORY[0x24BEE17A8]);
  *a1 = v9;
  return result;
}

uint64_t type metadata accessor for OrderedSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrderedSet);
}

BOOL sub_244895E40()
{
  char v0;

  swift_bridgeObjectRetain();
  v0 = sub_2448EB130();
  swift_bridgeObjectRelease();
  return (v0 & 1) == 0;
}

void sub_244895EAC()
{
  JUMPOUT(0x24951AC70);
}

uint64_t sub_244895EBC(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedSet<A>);
  return MEMORY[0x24951AC70](MEMORY[0x24BEE4230], a1, &v3);
}

void sub_244895F04()
{
  JUMPOUT(0x24951AC70);
}

void sub_244895F14()
{
  JUMPOUT(0x24951AC70);
}

uint64_t sub_244895F24(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedSet<A>);
  return MEMORY[0x24951AC70](MEMORY[0x24BEE4218], a1, &v3);
}

void sub_244895F6C()
{
  JUMPOUT(0x24951AC70);
}

uint64_t sub_244895F88(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13[2];
  char v14;

  if (a3 == -1)
  {
    sub_24489789C(a4, a5, (uint64_t)v13);
    swift_bridgeObjectRelease();
    return sub_244897DEC(v13[0], v13[1], v14);
  }
  else
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13[0] = *v5;
    *v5 = 0x8000000000000000;
    sub_24481F71C(a1, a2, a3, a4, a5, isUniquelyReferenced_nonNull_native);
    *v5 = v13[0];
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_244896064(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];

  v3 = v2;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_2447C91FC((_OWORD *)a1, v14);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v2;
    *v2 = 0x8000000000000000;
    sub_24481F8A4(v14, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_2447F3E44(a1);
    v7 = sub_244828DC8(a2);
    if ((v8 & 1) != 0)
    {
      v9 = v7;
      v10 = swift_isUniquelyReferenced_nonNull_native();
      v11 = *v2;
      v13 = *v3;
      *v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        sub_24482D9B4();
        v11 = v13;
      }
      sub_2447C91FC((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v9), v14);
      sub_2447CCF64(v9, v11);
      *v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v14, 0, sizeof(v14));
    }
    return sub_2447F3E44((uint64_t)v14);
  }
}

uint64_t sub_244896164(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  _OWORD v7[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_2447C91FC((_OWORD *)a1, v7);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v6 = *v2;
    *v2 = 0x8000000000000000;
    sub_24481FAF0(v7, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v6;
    swift_bridgeObjectRelease();
    return sub_2447D12A8(a2);
  }
  else
  {
    sub_2447F3E44(a1);
    sub_24489798C(a2, v7);
    sub_2447D12A8(a2);
    return sub_2447F3E44((uint64_t)v7);
  }
}

uint64_t sub_244896210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _OWORD v9[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_2447C91FC((_OWORD *)a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v3;
    *v3 = 0x8000000000000000;
    sub_24481FE94(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_2447F3E44(a1);
    sub_244897A74(a2, a3, v9);
    swift_bridgeObjectRelease();
    return sub_2447F3E44((uint64_t)v9);
  }
}

uint64_t sub_2448962CC(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;

  v2 = *(_QWORD *)(a1 + 16);
  v22 = MEMORY[0x24BEE4AF8];
  sub_2447CEFA4(0, v2, 0);
  v20 = a1 + 64;
  v3 = -1;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(a1 + 64);
  v21 = (unint64_t)(63 - v4) >> 6;
  if (v2)
  {
    swift_bridgeObjectRetain();
    if (v5)
    {
      v6 = __clz(__rbit64(v5));
      goto LABEL_21;
    }
    if (v21 <= 1)
      goto LABEL_44;
    v7 = *(_QWORD *)(a1 + 72);
    v8 = 1;
    if (v7)
      goto LABEL_20;
    v8 = 2;
    if (v21 <= 2)
      goto LABEL_44;
    v7 = *(_QWORD *)(a1 + 80);
    if (v7)
      goto LABEL_20;
    v8 = 3;
    if (v21 <= 3)
      goto LABEL_44;
    v7 = *(_QWORD *)(a1 + 88);
    if (v7)
      goto LABEL_20;
    v8 = 4;
    if (v21 <= 4)
      goto LABEL_44;
    v7 = *(_QWORD *)(a1 + 96);
    if (v7)
    {
LABEL_20:
      v6 = __clz(__rbit64(v7)) + (v8 << 6);
LABEL_21:
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v6 + 8);
      v11 = *(_QWORD *)(a1 + 56) + 24 * v6;
      v13 = *(_QWORD *)v11;
      v12 = *(_QWORD *)(v11 + 8);
      v14 = *(unsigned __int8 *)(v11 + 16);
      swift_bridgeObjectRetain();
      sub_2447C9254(v13, v12, v14);
      if (v10)
        __asm { BR              X8 }
LABEL_44:
      __break(1u);
      JUMPOUT(0x2448969C4);
    }
    v9 = 5;
    if (v21 <= 5)
      goto LABEL_44;
    v7 = *(_QWORD *)(a1 + 104);
    if (v7)
    {
      v8 = 5;
      goto LABEL_20;
    }
    while (1)
    {
      v8 = v9 + 1;
      if (__OFADD__(v9, 1))
        break;
      if (v8 >= v21)
        goto LABEL_44;
      v7 = *(_QWORD *)(v20 + 8 * v8);
      ++v9;
      if (v7)
        goto LABEL_20;
    }
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  swift_bridgeObjectRetain();
  if (v5)
  {
    v15 = __clz(__rbit64(v5));
    goto LABEL_40;
  }
  if (v21 > 1)
  {
    v16 = *(_QWORD *)(a1 + 72);
    v17 = 1;
    if (v16)
      goto LABEL_39;
    v17 = 2;
    if (v21 <= 2)
      goto LABEL_41;
    v16 = *(_QWORD *)(a1 + 80);
    if (v16)
      goto LABEL_39;
    v17 = 3;
    if (v21 <= 3)
      goto LABEL_41;
    v16 = *(_QWORD *)(a1 + 88);
    if (v16)
      goto LABEL_39;
    v17 = 4;
    if (v21 <= 4)
      goto LABEL_41;
    v16 = *(_QWORD *)(a1 + 96);
    if (v16)
    {
LABEL_39:
      v15 = __clz(__rbit64(v16)) + (v17 << 6);
LABEL_40:
      __asm { BR              X8 }
    }
    v18 = 5;
    if (v21 > 5)
    {
      v16 = *(_QWORD *)(a1 + 104);
      if (!v16)
      {
        while (1)
        {
          v17 = v18 + 1;
          if (__OFADD__(v18, 1))
            break;
          if (v17 >= v21)
            goto LABEL_41;
          v16 = *(_QWORD *)(v20 + 8 * v17);
          ++v18;
          if (v16)
            goto LABEL_39;
        }
        __break(1u);
        goto LABEL_43;
      }
      v17 = 5;
      goto LABEL_39;
    }
  }
LABEL_41:
  swift_release();
  return v22;
}

uint64_t CoreAnalyticsLogger.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(qword_25738CCE8);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 20) = 0;
  *(_BYTE *)(v1 + 16) = 2;
  *(_QWORD *)(v0 + 16) = v1;
  return v0;
}

Swift::Void __swiftcall CoreAnalyticsLogger.logEvent(identifierSuffix:fields:)(Swift::String identifierSuffix, Swift::OpaquePointer fields)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void (*v8)(unint64_t *__return_ptr, uint64_t);
  id v9;
  id v10;
  char v11;
  id v12;
  uint64_t v13;
  char v14;
  Swift::OpaquePointer *v15;
  Swift::OpaquePointer *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  unint64_t rawValue;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  void *v36;
  void *v37;
  unint64_t aBlock;
  unint64_t v39;
  id (*v40)(uint64_t);
  void *v41;
  uint64_t (*v42)();
  Swift::OpaquePointer *v43;

  v3 = v2;
  if (qword_257389DC0 != -1)
    swift_once();
  if (byte_2573900F9 == 2)
  {
    v6 = qword_2573900E0;
    v5 = *(_QWORD *)algn_2573900E8;
    v7 = (void *)qword_2573900F0;
    v8 = (void (*)(unint64_t *__return_ptr, uint64_t))qword_257390100;
    swift_bridgeObjectRetain_n();
    v9 = v7;
    swift_retain_n();
    swift_retain_n();
    v10 = v9;
    v11 = _sSb20PreviewsFoundationOSE15userDefaultsKey0dE0SbSgSS_So06NSUserE0CtcfC_0(v6, v5, v10);
    if (v11 == 2)
    {
      swift_bridgeObjectRetain();
      v12 = v10;
      swift_retain();
      v13 = swift_retain();
      v8(&aBlock, v13);
      swift_release_n();
      swift_release_n();

      swift_bridgeObjectRelease_n();
      if ((aBlock & 1) == 0)
        return;
    }
    else
    {
      v14 = v11;
      swift_release_n();
      swift_release_n();

      swift_bridgeObjectRelease_n();
      if ((v14 & 1) == 0)
        return;
    }
  }
  else if ((byte_2573900F9 & 1) == 0)
  {
    return;
  }
  v15 = (Swift::OpaquePointer *)swift_allocObject();
  v15[2]._rawValue = fields._rawValue;
  v16 = v15 + 2;
  v17 = objc_allocWithZone(MEMORY[0x24BDD1760]);
  swift_bridgeObjectRetain();
  v18 = objc_msgSend(v17, sel_init);
  v19 = objc_msgSend(v18, sel_processName);

  v20 = sub_2448EAA94();
  v22 = v21;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  aBlock = (unint64_t)fields._rawValue;
  v15[2]._rawValue = (void *)0x8000000000000000;
  sub_24481F71C(v20, v22, 0, 0xD000000000000012, 0x80000002448FCA70, isUniquelyReferenced_nonNull_native);
  v15[2]._rawValue = (void *)aBlock;
  swift_bridgeObjectRelease();
  if (qword_257389DB8 != -1)
    swift_once();
  v25 = qword_2573900D0;
  v24 = *(_QWORD *)algn_2573900D8;
  swift_bridgeObjectRetain();
  if (v24)
    v26 = v25;
  else
    v26 = 0;
  if (v24)
    v27 = 0;
  else
    v27 = 5;
  sub_244895F88(v26, v24, v27, 0x72655665646F6378, 0xEC0000006E6F6973);
  v28 = *(_QWORD *)(v3 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v28 + 20));
  sub_244813004((_BYTE *)(v28 + 16), &aBlock);
  os_unfair_lock_unlock((os_unfair_lock_t)(v28 + 20));
  swift_release();
  v29 = aBlock;
  if (aBlock != 2)
  {
    rawValue = (unint64_t)v16->_rawValue;
    if (*((_QWORD *)v16->_rawValue + 2)
      && (v31 = sub_244828D0C(0xD000000000000015, 0x80000002448FCAD0), (v32 & 1) != 0)
      && (v33 = *(_QWORD *)(rawValue + 56) + 24 * v31, *(_BYTE *)(v33 + 16) == 1)
      && (*(_QWORD *)v33 & 1) != 0)
    {
      v34 = 1;
    }
    else
    {
      v34 = v29 & 1;
    }
    v35 = swift_isUniquelyReferenced_nonNull_native();
    aBlock = rawValue;
    v16->_rawValue = (void *)0x8000000000000000;
    sub_24481F71C(v34, 0, 1, 0xD000000000000015, 0x80000002448FCAD0, v35);
    v16->_rawValue = (void *)aBlock;
    swift_bridgeObjectRelease();
  }
  aBlock = 0;
  v39 = 0xE000000000000000;
  sub_2448EB79C();
  swift_bridgeObjectRelease();
  aBlock = 0xD000000000000011;
  v39 = 0x80000002448FCA90;
  sub_2448EABC0();
  v36 = (void *)sub_2448EAA70();
  swift_bridgeObjectRelease();
  v42 = sub_244897B88;
  v43 = v15;
  aBlock = MEMORY[0x24BDAC760];
  v39 = 1107296256;
  v40 = sub_244897694;
  v41 = &block_descriptor_10;
  v37 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v37);
  swift_release();

}

unint64_t static CoreAnalyticsLogger.sampleProjectKey.getter()
{
  return 0xD000000000000015;
}

uint64_t CoreAnalyticsLogger.hints.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 20));
  sub_244813004((_BYTE *)(v3 + 16), a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 20));
  return swift_release();
}

uint64_t sub_244896F78@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 20));
  sub_244813004((_BYTE *)(v3 + 16), &v5);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 20));
  result = swift_release();
  *a2 = v5;
  return result;
}

uint64_t sub_244896FF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 20));
  sub_244897BE4((_BYTE *)(v2 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 20));
  return swift_release();
}

uint64_t CoreAnalyticsLogger.hints.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 20));
  *(_BYTE *)(v3 + 16) = v2;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 20));
  return swift_release();
}

uint64_t (*CoreAnalyticsLogger.hints.modify(_QWORD *a1))(os_unfair_lock_s **a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;

  v2 = *(_QWORD *)(v1 + 16);
  *a1 = v2;
  v3 = a1 + 1;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 20));
  sub_244813004((_BYTE *)(v2 + 16), v3);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 20));
  swift_release();
  return sub_244897130;
}

uint64_t sub_244897130(os_unfair_lock_s **a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  char v3;

  v1 = *a1;
  v2 = *a1 + 5;
  v3 = *((_BYTE *)a1 + 8);
  swift_retain();
  os_unfair_lock_lock(v2);
  LOBYTE(v1[4]._os_unfair_lock_opaque) = v3;
  os_unfair_lock_unlock(v2);
  return swift_release();
}

uint64_t CoreAnalyticsLogger.init()()
{
  uint64_t v0;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(qword_25738CCE8);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 20) = 0;
  *(_BYTE *)(v1 + 16) = 2;
  *(_QWORD *)(v0 + 16) = v1;
  return v0;
}

Swift::Int sub_2448971B8()
{
  Swift::Int result;
  uint64_t v1;

  result = sub_2448971D8();
  qword_2573900D0 = result;
  *(_QWORD *)algn_2573900D8 = v1;
  return result;
}

Swift::Int sub_2448971D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  void *v7;
  id v8;
  id v9;
  void (*v10)(_BYTE *, uint64_t);
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  Swift::Int result;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  Swift::Int majorRelease;
  Swift::Int v25;
  _BYTE v26[16];
  PreviewsFoundationOS::BuildNumber v27;
  Swift::String v28;
  _OWORD v29[2];

  v0 = sub_2448EA434();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x24BDAC7A8](v0);
  v4 = &v26[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v2);
  v6 = &v26[-v5];
  v7 = (void *)objc_opt_self();
  v8 = objc_msgSend(v7, sel_mainBundle);
  v9 = objc_msgSend(v8, sel_bundleURL);
  sub_2448EA404();

  sub_2448EA3EC();
  v10 = *(void (**)(_BYTE *, uint64_t))(v1 + 8);
  v10(v4, v0);
  v11 = objc_allocWithZone(MEMORY[0x24BDBCE70]);
  v12 = (void *)sub_2448EA3E0();
  v13 = objc_msgSend(v11, sel_initWithContentsOfURL_, v12);

  if (v13)
  {
    *(_QWORD *)&v29[0] = 0xD000000000000013;
    *((_QWORD *)&v29[0] + 1) = 0x80000002448FCB50;
    v14 = objc_msgSend(v13, sel___swift_objectForKeyedSubscript_, sub_2448EBC58());
    swift_unknownObjectRelease();
    if (v14)
    {
      sub_2448EB664();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v29, 0, sizeof(v29));
    }
    sub_2447F3DFC((uint64_t)v29, (uint64_t)&v27);
    if (v27.rawMinorRelease._object)
    {
      if ((swift_dynamicCast() & 1) != 0)
      {
        BuildNumber.init(_:)(&v27, v28);
        if (!v15)
        {
          *(_QWORD *)&v29[0] = v27.majorRelease;
          v27.majorRelease = sub_2448EBB5C();
          v27.majorBuild = v25;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_2448EA944();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_2448EABC0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          majorRelease = v27.majorRelease;
          v10(v6, v0);
          return majorRelease;
        }

      }
      else
      {

      }
    }
    else
    {

      sub_2447F3E44((uint64_t)&v27);
    }
  }
  v16 = objc_msgSend(v7, sel_mainBundle);
  v17 = objc_msgSend(v16, sel_infoDictionary);

  if (!v17)
  {

    v10(v6, v0);
    memset(&v27, 0, 32);
LABEL_22:
    sub_2447F3E44((uint64_t)&v27);
    return 0;
  }
  v18 = sub_2448EA800();

  result = *MEMORY[0x24BDBD2A0];
  if (*MEMORY[0x24BDBD2A0])
  {
    v20 = sub_2448EAA94();
    if (*(_QWORD *)(v18 + 16) && (v22 = sub_244828D0C(v20, v21), (v23 & 1) != 0))
      sub_2447C92C4(*(_QWORD *)(v18 + 56) + 32 * v22, (uint64_t)&v27);
    else
      memset(&v27, 0, 32);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    v10(v6, v0);
    if (v27.rawMinorRelease._object)
    {
      if (swift_dynamicCast())
        return *(_QWORD *)&v29[0];
      else
        return 0;
    }
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t sub_2448975F0()
{
  return sub_2448B9E64(0xD000000000000012, 0x80000002448FCB70, 0, 0, 1, (uint64_t)&qword_2573900E0);
}

uint64_t sub_244897620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  v0 = swift_bridgeObjectRetain();
  v1 = sub_2448962CC(v0);
  v2 = sub_244897BF0(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

id sub_244897694(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v3 = v1(v2);
  swift_release();
  if (v3)
  {
    sub_244897DB4(0, (unint64_t *)&qword_25738DF68);
    v4 = (void *)sub_2448EA7F4();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = 0;
  }
  return v4;
}

uint64_t CoreAnalyticsLogger.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t CoreAnalyticsLogger.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

void sub_244897758(uint64_t a1, uint64_t a2, Swift::OpaquePointer a3)
{
  CoreAnalyticsLogger.logEvent(identifierSuffix:fields:)(*(Swift::String *)&a1, a3);
}

uint64_t sub_244897778@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 20));
  sub_244813004((_BYTE *)(v3 + 16), a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 20));
  return swift_release();
}

uint64_t sub_2448977EC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 20));
  sub_244897BE4((_BYTE *)(v1 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 20));
  return swift_release();
}

void (*sub_244897854(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CoreAnalyticsLogger.hints.modify(v2);
  return sub_2447DD19C;
}

uint64_t sub_24489789C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  uint64_t result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_244828D0C(a1, a2);
  LOBYTE(a2) = v9;
  result = swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v4;
    v15 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_24482D450();
      v12 = v15;
    }
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(v12 + 56) + 24 * v8;
    v14 = *(_BYTE *)(v13 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v13;
    *(_BYTE *)(a3 + 16) = v14;
    sub_2447CCBB8(v8, v12);
    *v4 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = -1;
  }
  return result;
}

double sub_24489798C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  double result;
  uint64_t v11;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_244828E5C(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v11 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_24482E08C();
      v9 = v11;
    }
    sub_2447D12A8(*(_QWORD *)(v9 + 48) + 40 * v6);
    sub_2447C91FC((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v6), a2);
    sub_2447CD668(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

double sub_244897A74@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_244828D0C(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_24482D628();
      v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_2447C91FC((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v8), a3);
    sub_2447CDBE4(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_244897B64()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_244897B88()
{
  return sub_244897620();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t type metadata accessor for CoreAnalyticsLogger()
{
  return objc_opt_self();
}

uint64_t method lookup function for CoreAnalyticsLogger()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CoreAnalyticsLogger.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

_BYTE *sub_244897BE4(_BYTE *result)
{
  uint64_t v1;

  *result = *(_BYTE *)(v1 + 16);
  return result;
}

uint64_t sub_244897BF0(uint64_t a1)
{
  uint64_t v1;
  void **v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  char isUniquelyReferenced_nonNull_native;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  v2 = (void **)(swift_bridgeObjectRetain() + 48);
  v3 = (_QWORD *)MEMORY[0x24BEE4B00];
  while (1)
  {
    v7 = (uint64_t)*(v2 - 2);
    v6 = (uint64_t)*(v2 - 1);
    v8 = *v2;
    swift_bridgeObjectRetain();
    v9 = v8;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = sub_244828D0C(v7, v6);
    v13 = v3[2];
    v14 = (v11 & 1) == 0;
    v15 = v13 + v14;
    if (__OFADD__(v13, v14))
      break;
    v16 = v11;
    if (v3[3] >= v15)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v11 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        sub_24482EFE4();
        if ((v16 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      sub_24482CBC0(v15, isUniquelyReferenced_nonNull_native);
      v17 = sub_244828D0C(v7, v6);
      if ((v16 & 1) != (v18 & 1))
        goto LABEL_21;
      v12 = v17;
      if ((v16 & 1) != 0)
      {
LABEL_3:
        v4 = v3[7];
        v5 = 8 * v12;

        *(_QWORD *)(v4 + v5) = v9;
        goto LABEL_4;
      }
    }
    v3[(v12 >> 6) + 8] |= 1 << v12;
    v19 = (uint64_t *)(v3[6] + 16 * v12);
    *v19 = v7;
    v19[1] = v6;
    *(_QWORD *)(v3[7] + 8 * v12) = v9;
    v20 = v3[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_20;
    v3[2] = v22;
    swift_bridgeObjectRetain();
LABEL_4:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v2 += 3;
    if (!--v1)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v3;
    }
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  result = sub_2448EBC7C();
  __break(1u);
  return result;
}

uint64_t sub_244897DB4(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_244897DEC(uint64_t result, unint64_t a2, char a3)
{
  if (a3 != -1)
    return sub_2447E7490(result, a2, a3);
  return result;
}

uint64_t AsyncStream.Sink.init(_:bufferingPolicy:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v20 = a1;
  v5 = sub_2448EAFD4();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v20 - v7;
  v9 = sub_2448EB010();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v20 - v11;
  nullsub_1(a2);
  sub_2448EAF80();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(a3, v8, v5);
  swift_getTupleTypeMetadata2();
  v21 = sub_2448EAE54();
  v13 = sub_2448EAEE4();
  v14 = sub_24481320C(&v21, v13);
  swift_bridgeObjectRelease();
  v17 = type metadata accessor for AsyncStream.Sink(0, a2, v15, v16);
  *(_QWORD *)(a3 + *(int *)(v17 + 28)) = v14;
  sub_244897FB0((uint64_t)v12, v17);
  v18 = sub_2448EAFA4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v20, v18);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_244897FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v22;
  uint64_t v23;

  v3 = v2;
  v22 = a1;
  v5 = *(_QWORD *)(a2 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(v8 + 16);
  v9 = sub_2448EB010();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v22 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A208);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_2448EAF74();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v22, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v3, a2);
  v18 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v19 = (v11 + *(unsigned __int8 *)(v5 + 80) + v18) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v20 = (char *)swift_allocObject();
  *((_QWORD *)v20 + 2) = 0;
  *((_QWORD *)v20 + 3) = 0;
  *((_QWORD *)v20 + 4) = v23;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v20[v18], v13, v9);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v20[v19], v7, a2);
  sub_2447C5CB8((uint64_t)v16, (uint64_t)&unk_2573902C8, (uint64_t)v20);
  return swift_release();
}

uint64_t sub_244898170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;

  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  v8 = sub_2448EAF8C();
  v6[8] = v8;
  v6[9] = *(_QWORD *)(v8 - 8);
  v6[10] = swift_task_alloc();
  v6[11] = sub_2448EAFD4();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v6[12] = TupleTypeMetadata2;
  v10 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v6[13] = v10;
  v6[14] = *(_QWORD *)(v10 + 64);
  v6[15] = swift_task_alloc();
  v6[16] = swift_task_alloc();
  v6[17] = *(_QWORD *)(a6 - 8);
  v6[18] = swift_task_alloc();
  v6[19] = swift_task_alloc();
  sub_2448EB508();
  v6[20] = swift_task_alloc();
  v11 = sub_2448EAFF8();
  v6[21] = v11;
  v6[22] = *(_QWORD *)(v11 - 8);
  v6[23] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_2448982BC()
{
  uint64_t v0;
  _QWORD *v1;

  sub_2448EB010();
  sub_2448EAFE0();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 192) = v1;
  *v1 = v0;
  v1[1] = sub_244898334;
  return sub_2448EAFEC();
}

uint64_t sub_244898334()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_244898388()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 56);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v5 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 48);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 152), v1, v3);
  *(_QWORD *)(v0 + 24) = *(_QWORD *)(v6 + *(int *)(type metadata accessor for AsyncStream.Sink(0, v3, v7, v8) + 28));
  sub_2448EAEE4();
  v9 = sub_2448EA5D8();
  v10 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v9);
  SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/AsyncStream+Sink.swift", 128, 2, 27, 61, (uint64_t)"consumeStream(_:)", 17, 2, v9, v10);
  v11 = *(_QWORD *)(v0 + 16);
  if (!MEMORY[0x2495196A4](v11, v5))
  {
LABEL_13:
    v28 = *(_QWORD *)(v0 + 152);
    v29 = *(_QWORD *)(v0 + 136);
    v30 = *(_QWORD *)(v0 + 56);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
    v31 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 192) = v31;
    *v31 = v0;
    v31[1] = sub_244898334;
    return sub_2448EAFEC();
  }
  v12 = 0;
  v32 = *(_QWORD *)(v0 + 128) + *(int *)(*(_QWORD *)(v0 + 96) + 48);
  v33 = v11;
  while (1)
  {
    v13 = sub_2448EAE6C();
    sub_2448EAE18();
    if ((v13 & 1) != 0)
    {
      (*(void (**)(_QWORD, unint64_t, _QWORD))(*(_QWORD *)(v0 + 104) + 16))(*(_QWORD *)(v0 + 128), v11+ ((*(unsigned __int8 *)(*(_QWORD *)(v0 + 104) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v0 + 104) + 80))+ *(_QWORD *)(*(_QWORD *)(v0 + 104) + 72) * v12, *(_QWORD *)(v0 + 96));
      v14 = v12 + 1;
      if (__OFADD__(v12, 1))
        goto LABEL_12;
      goto LABEL_7;
    }
    v23 = *(_QWORD *)(v0 + 112);
    result = sub_2448EB7F0();
    if (v23 != 8)
      break;
    v24 = result;
    v25 = *(_QWORD *)(v0 + 128);
    v26 = *(_QWORD *)(v0 + 96);
    v27 = *(_QWORD *)(v0 + 104);
    *(_QWORD *)(v0 + 32) = v24;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v25, v0 + 32, v26);
    swift_unknownObjectRelease();
    v14 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
LABEL_7:
    v15 = *(_QWORD *)(v0 + 144);
    v34 = *(_QWORD *)(v0 + 136);
    v35 = *(_QWORD *)(v0 + 152);
    v16 = *(_QWORD **)(v0 + 120);
    v17 = *(_QWORD *)(v0 + 96);
    v18 = *(_QWORD *)(v0 + 80);
    v19 = *(_QWORD *)(v0 + 88);
    v36 = *(_QWORD *)(v0 + 72);
    v20 = *(_QWORD *)(v0 + 56);
    v37 = *(_QWORD *)(v0 + 64);
    v38 = *(_QWORD *)(v0 + 104);
    v21 = (char *)v16 + *(int *)(v17 + 48);
    *v16 = **(_QWORD **)(v0 + 128);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v21, v32, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v15, v35, v20);
    sub_2448EAFBC();
    v22 = v18;
    v11 = v33;
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v22, v37);
    (*(void (**)(_QWORD *, uint64_t))(v38 + 8))(v16, v17);
    ++v12;
    if (v14 == MEMORY[0x2495196A4](v33, v17))
      goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_244898700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  os_unfair_lock_s *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v36[8];
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v44 = a2;
  v51 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v49 = v3;
  v50 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = v4;
  v5 = *(_QWORD *)(v4 + 16);
  v6 = sub_2448EAF8C();
  v41 = *(_QWORD *)(v6 - 8);
  v42 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v40 = (char *)&v37 - v7;
  v8 = sub_2448EB508();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v37 - v11;
  v13 = *(_QWORD *)(v5 - 8);
  v14 = MEMORY[0x24BDAC7A8](v10);
  v38 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v39 = (char *)&v37 - v16;
  v17 = sub_2448EAFD4();
  v46 = *(_QWORD *)(v17 - 8);
  v47 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v37 - v18;
  nullsub_1(v5);
  sub_2448EAF80();
  if (qword_257389CA0 != -1)
    swift_once();
  v20 = (_QWORD *)((char *)off_25738DB00 + 16);
  v21 = (os_unfair_lock_s *)((char *)off_25738DB00 + 24);
  swift_retain();
  os_unfair_lock_lock(v21);
  sub_24483B130(v20, &v53);
  v45 = 0;
  os_unfair_lock_unlock(v21);
  v22 = v53;
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v44, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    v23 = v47;
  }
  else
  {
    v24 = v39;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v39, v12, v5);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v38, v24, v5);
    v25 = v40;
    v23 = v47;
    sub_2448EAFBC();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v25, v42);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v24, v5);
  }
  v26 = v52;
  v27 = v48;
  v53 = *(_QWORD *)(v48 + *(int *)(v52 + 28));
  MEMORY[0x24BDAC7A8](v53);
  v43 = v22;
  swift_retain();
  swift_getTupleTypeMetadata2();
  sub_2448EAEE4();
  v28 = sub_2448EA5D8();
  v29 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v28);
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_2447B9000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/AsyncStream+Sink.swift", 128, 2, 45, 43, (uint64_t)"asyncStream(bufferingPolicy:emitInitialValue:)", 46, 2, (uint64_t)sub_24489A130, (uint64_t)v36, v28, MEMORY[0x24BEE4AE0] + 8, v29);
  swift_release();
  v31 = v50;
  v30 = v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v50, v27, v26);
  v32 = (*(unsigned __int8 *)(v30 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  v33 = (v49 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 16) = v5;
  (*(void (**)(unint64_t, char *, uint64_t))(v30 + 32))(v34 + v32, v31, v26);
  *(_QWORD *)(v34 + v33) = v43;
  sub_2448EAF98();
  return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v19, v23);
}

uint64_t sub_244898B6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];

  v5 = sub_2448EAFD4();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v7 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v9 = (char *)v11 + *(int *)(v7 + 48) - v8;
  *(_QWORD *)((char *)v11 - v8) = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v9, a3, v5);
  sub_2448EAEE4();
  return sub_2448EAE9C();
}

uint64_t sub_244898C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[16];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for AsyncStream.Sink(0, a4, a3, a4) + 28));
  v10 = a4;
  v11 = a3;
  sub_2448EAFD4();
  swift_retain();
  swift_getTupleTypeMetadata2();
  sub_2448EAEE4();
  v6 = sub_2448EA5D8();
  v7 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v6);
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_2447B9000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/AsyncStream+Sink.swift", 128, 2, 51, 52, (uint64_t)"asyncStream(bufferingPolicy:emitInitialValue:)", 46, 2, (uint64_t)sub_24489A250, (uint64_t)v9, v6, MEMORY[0x24BEE4AE0] + 8, v7);
  return swift_release();
}

uint64_t sub_244898D6C()
{
  uint64_t v0;

  sub_2448EAFD4();
  swift_getTupleTypeMetadata2();
  v0 = sub_2448EAEE4();
  MEMORY[0x24951AC70](MEMORY[0x24BEE12B8], v0);
  MEMORY[0x24951AC70](MEMORY[0x24BEE12E8], v0);
  return sub_2448EB34C();
}

uint64_t AsyncStream.Sink.asyncStream(bufferingPolicy:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = sub_2448EB508();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))((char *)&v10 - v7, 1, 1, v4);
  sub_244898700(a1, (uint64_t)v8, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t AsyncStream.Sink.yield(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 16);
  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v5, v2);
  sub_2448EAFD4();
  return sub_2448EAFBC();
}

Swift::Void __swiftcall AsyncStream.Sink.finish()()
{
  sub_2448EAFD4();
  sub_2448EAFC8();
}

uint64_t AsyncStreamObservable.wrappedValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_2448EA5D8();
  v1 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v0);
  return SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/AsyncStream+Sink.swift", 128, 2, 101, 25, (uint64_t)"wrappedValue", 12, 2, v0, v1);
}

uint64_t AsyncStreamObservable.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  sub_24489943C(a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(a1);
}

void (*AsyncStreamObservable.wrappedValue.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v5[5] = malloc(v8);
  AsyncStreamObservable.wrappedValue.getter();
  return sub_2448990D0;
}

void sub_2448990D0(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, uint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[4];
  v4 = (void *)(*a1)[5];
  v5 = (*a1)[2];
  v6 = (*a1)[3];
  v7 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    sub_24489943C((uint64_t)v3, v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
  }
  else
  {
    sub_24489943C((*a1)[5], v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v8(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t AsyncStreamObservable.init(wrappedValue:emitsInitialValue:bufferingPolicy:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v19;

  v10 = sub_2448EAFA4();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v19 - v12;
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))((char *)&v19 - v12, *MEMORY[0x24BEE6A10], v10);
  AsyncStream.Sink.init(_:bufferingPolicy:)((uint64_t)v13, a4, a5);
  v16 = (int *)type metadata accessor for AsyncStreamObservable(0, a4, v14, v15);
  *(_BYTE *)(a5 + v16[8]) = a2;
  v17 = sub_24481320C(a1, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a1, a4);
  *(_QWORD *)(a5 + v16[7]) = v17;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(a5 + v16[9], a3, v10);
}

uint64_t AsyncStreamObservable.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v21 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  v22 = sub_2448EB508();
  v20 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v6 = (char *)&v19 - v5;
  v7 = sub_2448EAFA4();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v19 - v9;
  v13 = type metadata accessor for AsyncStream.Sink(0, v4, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v19 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v19 - v15, v2, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v2 + *(int *)(a1 + 36), v7);
  if (*(_BYTE *)(v2 + *(int *)(a1 + 32)) == 1)
  {
    AsyncStreamObservable.wrappedValue.getter();
    v17 = 0;
  }
  else
  {
    v17 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v6, v17, 1, v4);
  sub_244898700((uint64_t)v10, (uint64_t)v6, v13);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v22);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t type metadata accessor for AsyncStream.Sink(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncStream.Sink);
}

uint64_t sub_24489943C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v23 = a1;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = sub_2448EAF8C();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v22 - v8;
  v10 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v2 + *(int *)(a2 + 28));
  v24 = v4;
  v25 = v13;
  KeyPath = (uint64_t *)swift_getKeyPath();
  v15 = sub_2448EA5D8();
  swift_retain();
  v16 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v15);
  v17 = v23;
  SynchronousAccessProviding.syncSetValue<A>(at:to:)(KeyPath, v23, v15, v16);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v4);
  v20 = type metadata accessor for AsyncStream.Sink(0, v4, v18, v19);
  AsyncStream.Sink.yield(_:)(v17, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t type metadata accessor for AsyncStreamObservable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncStreamObservable);
}

uint64_t sub_2448995B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for AsyncStreamObservable(0, *(_QWORD *)(a3 + a2 - 8), a3, a4);
  return AsyncStreamObservable.wrappedValue.getter();
}

uint64_t sub_2448995E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for AsyncStreamObservable(0, *(_QWORD *)(a4 + a3 - 8), a3, a4);
  return sub_24489943C(a1, v5);
}

uint64_t sub_244899624()
{
  return 8;
}

_QWORD *sub_244899630(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_24489963C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2448EAFD4();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_2448996B4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_2448EAFD4();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 28));
  }
  swift_retain();
  return a1;
}

uint64_t sub_244899740(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2448EAFD4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t sub_244899788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_2448EAFD4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 28)) = *(_QWORD *)(a2 + *(int *)(a3 + 28));
  swift_retain();
  return a1;
}

uint64_t sub_2448997EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_2448EAFD4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 28)) = *(_QWORD *)(a2 + *(int *)(a3 + 28));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_24489985C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_2448EAFD4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 28)) = *(_QWORD *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_2448998BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_2448EAFD4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 28)) = *(_QWORD *)(a2 + *(int *)(a3 + 28));
  swift_release();
  return a1;
}

uint64_t sub_244899924()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_244899930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_2448EAFD4();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_2448999B0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2448999BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_2448EAFD4();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

uint64_t sub_244899A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;

  result = type metadata accessor for AsyncStream.Sink(319, *(_QWORD *)(a1 + 16), a3, a4);
  if (v5 <= 0x3F)
  {
    result = sub_2448EAFA4();
    if (v6 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

_QWORD *sub_244899AE0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)(a3 + 16);
    v8 = sub_2448EAFD4();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    v11 = type metadata accessor for AsyncStream.Sink(0, v7, v9, v10);
    *(_QWORD *)((char *)a1 + *(int *)(v11 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(v11 + 28));
    v12 = *(int *)(a3 + 32);
    *(_QWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 28));
    *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
    v13 = *(int *)(a3 + 36);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = sub_2448EAFA4();
    v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    swift_retain();
    swift_retain();
    v17(v14, v15, v16);
  }
  return a1;
}

uint64_t sub_244899BE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = sub_2448EAFD4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  type metadata accessor for AsyncStream.Sink(0, v4, v6, v7);
  swift_release();
  swift_release();
  v8 = a1 + *(int *)(a2 + 36);
  v9 = sub_2448EAFA4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
}

uint64_t sub_244899C78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);

  v6 = *(_QWORD *)(a3 + 16);
  v7 = sub_2448EAFD4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
  v10 = type metadata accessor for AsyncStream.Sink(0, v6, v8, v9);
  *(_QWORD *)(a1 + *(int *)(v10 + 28)) = *(_QWORD *)(a2 + *(int *)(v10 + 28));
  v11 = *(int *)(a3 + 32);
  *(_QWORD *)(a1 + *(int *)(a3 + 28)) = *(_QWORD *)(a2 + *(int *)(a3 + 28));
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v12 = *(int *)(a3 + 36);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_2448EAFA4();
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  swift_retain();
  swift_retain();
  v16(v13, v14, v15);
  return a1;
}

uint64_t sub_244899D50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = sub_2448EAFD4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(a1, a2, v7);
  v10 = type metadata accessor for AsyncStream.Sink(0, v6, v8, v9);
  *(_QWORD *)(a1 + *(int *)(v10 + 28)) = *(_QWORD *)(a2 + *(int *)(v10 + 28));
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + *(int *)(a3 + 28)) = *(_QWORD *)(a2 + *(int *)(a3 + 28));
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + *(int *)(a3 + 32)) = *(_BYTE *)(a2 + *(int *)(a3 + 32));
  v11 = *(int *)(a3 + 36);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_2448EAFA4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t sub_244899E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = sub_2448EAFD4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
  v10 = type metadata accessor for AsyncStream.Sink(0, v6, v8, v9);
  *(_QWORD *)(a1 + *(int *)(v10 + 28)) = *(_QWORD *)(a2 + *(int *)(v10 + 28));
  v11 = *(int *)(a3 + 32);
  *(_QWORD *)(a1 + *(int *)(a3 + 28)) = *(_QWORD *)(a2 + *(int *)(a3 + 28));
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v12 = *(int *)(a3 + 36);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_2448EAFA4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  return a1;
}

uint64_t sub_244899EE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = sub_2448EAFD4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(a1, a2, v7);
  v10 = type metadata accessor for AsyncStream.Sink(0, v6, v8, v9);
  *(_QWORD *)(a1 + *(int *)(v10 + 28)) = *(_QWORD *)(a2 + *(int *)(v10 + 28));
  swift_release();
  *(_QWORD *)(a1 + *(int *)(a3 + 28)) = *(_QWORD *)(a2 + *(int *)(a3 + 28));
  swift_release();
  v11 = *(int *)(a3 + 36);
  *(_BYTE *)(a1 + *(int *)(a3 + 32)) = *(_BYTE *)(a2 + *(int *)(a3 + 32));
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_2448EAFA4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t sub_244899FA8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_244899FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  unint64_t v12;

  v7 = type metadata accessor for AsyncStream.Sink(0, *(_QWORD *)(a3 + 16), a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == (_DWORD)a2)
  {
    v9 = v7;
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    v11 = a1;
    return v10(v11, a2, v9);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v9 = sub_2448EAFA4();
    v11 = a1 + *(int *)(a3 + 36);
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48);
    return v10(v11, a2, v9);
  }
  v12 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t sub_24489A068()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24489A074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v5 = a3;
  result = type metadata accessor for AsyncStream.Sink(0, *(_QWORD *)(a4 + 16), a3, a4);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == v5)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (v5 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
      return result;
    }
    v10 = sub_2448EAFA4();
    v12 = a1 + *(int *)(a4 + 36);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_24489A130(uint64_t a1)
{
  uint64_t v1;

  return sub_244898B6C(a1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_24489A14C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AsyncStream.Sink(0, *(_QWORD *)(v4 + 16), a3, a4)
                                      - 8)
                          + 80);
  v6 = v4 + ((v5 + 24) & ~v5);
  v7 = sub_2448EAFD4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24489A1EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(type metadata accessor for AsyncStream.Sink(0, v6, a3, a4) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  return sub_244898C4C(a1, v4 + v8, *(_QWORD *)(v4 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFF8)), v6);
}

uint64_t sub_24489A250()
{
  return sub_244898D6C();
}

BOOL sub_24489A268(_QWORD *a1)
{
  uint64_t v1;

  return *a1 == *(_QWORD *)(v1 + 24);
}

uint64_t sub_24489A27C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = sub_2448EB010();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AsyncStream.Sink(0, v1, v6, v7) - 8) + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, v2);
  v10 = sub_2448EAFD4();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v0 + v9, v10);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24489A364(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v4 = v1[4];
  v5 = *(_QWORD *)(sub_2448EB010() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AsyncStream.Sink(0, v4, v8, v9) - 8) + 80);
  v11 = v6 + v7 + v10;
  v12 = v1[2];
  v13 = v1[3];
  v14 = (uint64_t)v1 + v6;
  v15 = (uint64_t)v1 + (v11 & ~v10);
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v16;
  *v16 = v2;
  v16[1] = sub_2447C62E8;
  return sub_244898170(a1, v12, v13, v14, v15, v4);
}

double CGPoint.distance(from:)(double a1, double a2, double a3, double a4)
{
  return hypot(a3 - a1, a4 - a2);
}

uint64_t Future.uncancelable(dsoHandle:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_24489A538(a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_24489A45C(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_allocObject();
  return sub_24489A4A4(a1, a2, v4, v5);
}

uint64_t sub_24489A4A4(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  char v5;
  uint64_t v6;
  __int128 v8;
  char v9;
  __int128 v10;
  __int128 v11;
  char v12;

  v4 = *((_BYTE *)a1 + 16);
  v5 = *((_BYTE *)a1 + 56);
  v8 = *a1;
  v9 = v4;
  v10 = *(__int128 *)((char *)a1 + 24);
  v11 = *(__int128 *)((char *)a1 + 40);
  v12 = v5;
  v6 = sub_2448D24B4((uint64_t)&v8, a2, a3, a4);
  swift_retain_n();
  Future.observeFinish(_:)((uint64_t)sub_24489A5F0, v6);
  swift_release_n();
  swift_release();
  return v6;
}

uint64_t sub_24489A538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  char v14;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v14 = a3;
  type metadata accessor for UncancelableFuture(0, *(_QWORD *)(*(_QWORD *)v8 + 80), a3, a4);
  *(_QWORD *)&v20 = a1;
  *((_QWORD *)&v20 + 1) = a2;
  v21 = v14;
  v22 = a4;
  v23 = a5;
  v24 = a6;
  v25 = a7;
  v26 = a8;
  swift_allocObject();
  swift_retain();
  return sub_24489A4A4(&v20, v8, v17, v18);
}

uint64_t type metadata accessor for UncancelableFuture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UncancelableFuture);
}

uint64_t static CommandLineCommand.shortUsage.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  (*(void (**)(uint64_t *__return_ptr))(a2 + 32))(&v11);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for CommandLineOptions(0, AssociatedTypeWitness, v3, v4);
  v9 = CommandLineOptions.shortUsage.getter(v5, v6, v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t static CommandLineCommand.optionDescriptions.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[6];
  uint64_t v14;

  (*(void (**)(uint64_t *__return_ptr))(a2 + 32))(&v14);
  v4 = v14;
  swift_bridgeObjectRelease();
  v13[5] = v4;
  v13[2] = a1;
  v13[3] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for CommandLineOption(255, AssociatedTypeWitness, v6, v7);
  v8 = sub_2448EAEE4();
  v9 = MEMORY[0x24951AC70](MEMORY[0x24BEE12E0], v8);
  v11 = sub_2447D31DC((void (*)(char *, char *))sub_24489A7CC, (uint64_t)v13, v8, (char *)&type metadata for CommandLineOptionDescription, MEMORY[0x24BEE4078], v9, MEMORY[0x24BEE40A8], v10);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_24489A76C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24489A7CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24489A76C(a1, a2);
}

uint64_t static CommandLineCommand.run(with:printer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v25 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v24 - v13;
  v15 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a4 + 32);
  v26 = v4;
  v15(&v29, a3, a4);
  v28 = v29;
  v30 = a1;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(AssociatedTypeWitness, AssociatedConformanceWitness);
  v19 = type metadata accessor for CommandLineOptions(0, AssociatedTypeWitness, v17, v18);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A630);
  v21 = sub_24489A9C8();
  CommandLineOptions.parse<A>(_:into:)((uint64_t)&v30, v19, v20, v21, (uint64_t)v14);
  if (v5)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v12, AssociatedTypeWitness);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v23 = *(void (**)(char *, uint64_t))(v27 + 8);
    v23(v12, AssociatedTypeWitness);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(a4 + 40))(v14, v25, a3, a4);
    return ((uint64_t (*)(char *, uint64_t))v23)(v14, AssociatedTypeWitness);
  }
}

unint64_t sub_24489A9C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_257390350;
  if (!qword_257390350)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A630);
    result = MEMORY[0x24951AC70](MEMORY[0x24BEE12D8], v1);
    atomic_store(result, (unint64_t *)&qword_257390350);
  }
  return result;
}

uint64_t dispatch thunk of static CommandLineCommandProtocol.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static CommandLineCommandProtocol.shortUsage.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static CommandLineCommandProtocol.description.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static CommandLineCommandProtocol.optionDescriptions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static CommandLineCommandProtocol.run(with:printer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of static CommandLineCommand.options.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static CommandLineCommand.run(_:printer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t sub_24489AA6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int EnumCaseMultiPayload;
  uint64_t (*v7)(char *, uint64_t);
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v7 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
  if (EnumCaseMultiPayload == 1)
    return v7(v5, a1);
  v7((char *)v1, a1);
  v9 = *((_QWORD *)v5 + 6);
  sub_2447F3530((__int128 *)v5, v1);
  *(_BYTE *)(v1 + 40) = 1;
  *(_QWORD *)(v1 + 48) = v9;
  return swift_storeEnumTagMultiPayload();
}

_QWORD *static TaskRef.running(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = a1;
  v1 = sub_2448EB04C();
  v2 = MEMORY[0x24951AC70](&unk_2448F5990, v1);
  return sub_24489CC58((uint64_t)&v4, v1, v2);
}

_QWORD *static TaskRef.succeeded(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v10;

  v3 = *(_QWORD *)(v1 + 80);
  v4 = sub_2448EBD48();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - v6;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))((char *)&v10 - v6, a1, v3);
  swift_storeEnumTagMultiPayload();
  v8 = _s20PreviewsFoundationOS7TaskRefC9completedyACyxq_Gs6ResultOyxq_GFZ_0((uint64_t)v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

_QWORD *static TaskRef.failed(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v10;

  v3 = *(_QWORD *)(v1 + 88);
  v4 = sub_2448EBD48();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - v6;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))((char *)&v10 - v6, a1, v3);
  swift_storeEnumTagMultiPayload();
  v8 = _s20PreviewsFoundationOS7TaskRefC9completedyACyxq_Gs6ResultOyxq_GFZ_0((uint64_t)v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t TaskRef.result.getter(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2[9] = a1;
  v2[10] = v1;
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 88);
  v2[11] = v4;
  v2[12] = *(_QWORD *)(v4 - 8);
  v2[13] = swift_task_alloc();
  v5 = *(_QWORD *)(v3 + 80);
  v2[14] = v5;
  v6 = sub_2448EB508();
  v2[15] = v6;
  v2[16] = *(_QWORD *)(v6 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = *(_QWORD *)(v5 - 8);
  v2[19] = swift_task_alloc();
  v7 = *(_QWORD *)(v3 + 96);
  v2[20] = v7;
  v8 = sub_2448EBD48();
  v2[21] = v8;
  v2[22] = *(_QWORD *)(v8 - 8);
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  v9 = type metadata accessor for TaskRef.State(0, v5, v4, v7);
  v2[25] = v9;
  v2[26] = *(_QWORD *)(v9 - 8);
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  v2[31] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24489AE70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD, uint64_t, uint64_t);

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + 16);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 200);
  v21 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 256) = v1;
  v8 = (_QWORD *)swift_task_alloc();
  v8[2] = v6;
  v8[3] = v7;
  v8[4] = v5;
  v9 = sub_2448EA5D8();
  *(_QWORD *)(v0 + 264) = v9;
  swift_retain();
  v10 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v9);
  *(_QWORD *)(v0 + 272) = v10;
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_2447B9000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/TaskRef.swift", 119, 2, 81, 49, (uint64_t)"result", 6, 2, (uint64_t)sub_24489CE68, (uint64_t)v8, v9, v4, v10);
  *(_QWORD *)(v0 + 280) = 0;
  swift_task_dealloc();
  swift_release();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
  *(_QWORD *)(v0 + 288) = v11;
  v11(v2, v3, v4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v13 = *(_QWORD *)(v0 + 240);
  if (EnumCaseMultiPayload == 1)
  {
    v14 = *(_QWORD *)(v0 + 168);
    v15 = *(_QWORD *)(v0 + 176);
    v16 = *(_QWORD *)(v0 + 72);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 208) + 8))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 200));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v16, v13, v14);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_BYTE *)(v0 + 304) = *(_BYTE *)(v13 + 40);
    swift_bridgeObjectRelease();
    sub_2447F3530((__int128 *)v13, v0 + 16);
    v18 = *(_QWORD *)(v0 + 40);
    v19 = *(_QWORD *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v18);
    v22 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v19 + 40) + *(_QWORD *)(v19 + 40));
    v20 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 296) = v20;
    *v20 = v0;
    v20[1] = sub_24489B0EC;
    return v22(*(_QWORD *)(v0 + 192), v18, v19);
  }
}

uint64_t sub_24489B0EC()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24489B140()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *KeyPath;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t FunctionTypeMetadata1;
  uint64_t v35;
  uint64_t v36;
  char v37;
  void (*v38)(_QWORD);
  uint64_t v39;
  BOOL v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;

  if ((*(_BYTE *)(v0 + 304) & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 208) + 8))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 200));
LABEL_18:
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 32))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 168));
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(_QWORD *)(v0 + 64) = *(_QWORD *)(v0 + 256);
  v47 = *(_QWORD *)(v0 + 264);
  v48 = *(_QWORD *)(v0 + 272);
  v1 = *(_QWORD *)(v0 + 224);
  v50 = *(_QWORD *)(v0 + 216);
  v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 288);
  v2 = *(_QWORD *)(v0 + 200);
  v49 = *(_QWORD *)(v0 + 208);
  v45 = *(_QWORD *)(v0 + 192);
  v46 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 176);
  v44 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 88);
  v7 = (_QWORD *)swift_task_alloc();
  *v7 = v5;
  v7[1] = v6;
  v7[2] = v4;
  KeyPath = (uint64_t *)swift_getKeyPath();
  swift_task_dealloc();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v9(v1, v45, v44);
  swift_storeEnumTagMultiPayload();
  swift_retain();
  SynchronousAccessProviding.syncSetValue<A>(at:to:)(KeyPath, v1, v47, v48);
  swift_release();
  v10 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
  v10(v1, v2);
  swift_release();
  v51(v50, v46, v2);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = *(_QWORD *)(v0 + 248);
    v12 = *(_QWORD *)(v0 + 216);
    v13 = *(_QWORD *)(v0 + 200);
    v10(*(_QWORD *)(v0 + 232), v13);
    v10(v11, v13);
    v14 = v12;
LABEL_17:
    v10(v14, v13);
    goto LABEL_18;
  }
  v15 = *(_QWORD *)(v0 + 280);
  v16 = *(_QWORD *)(v0 + 216);
  v18 = *(_QWORD *)(v0 + 184);
  v17 = *(_QWORD *)(v0 + 192);
  v19 = *(_QWORD *)(v0 + 168);
  v20 = *(_QWORD *)(v0 + 136);
  v21 = *(_QWORD *)(v0 + 104);
  v22 = *(_QWORD *)(v16 + 48);
  __swift_destroy_boxed_opaque_existential_1(v16);
  v9(v18, v17, v19);
  sub_244828820(v19, v21, v20);
  if (v15)
  {
    v23 = *(_QWORD *)(v0 + 248);
    v24 = *(_QWORD *)(v0 + 232);
    v25 = *(_QWORD *)(v0 + 200);
    v26 = *(_QWORD *)(v0 + 136);
    v27 = *(_QWORD *)(v0 + 144);
    v28 = *(_QWORD *)(v0 + 128);
    v52 = *(_QWORD *)(v0 + 120);
    v29 = *(_QWORD *)(v0 + 112);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v26, 1, 1, v29);
    swift_bridgeObjectRelease();
    v10(v24, v25);
    v10(v23, v25);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v52);
    goto LABEL_18;
  }
  v31 = *(_QWORD *)(v0 + 144);
  v30 = *(_QWORD *)(v0 + 152);
  v32 = *(_QWORD *)(v0 + 136);
  v33 = *(_QWORD *)(v0 + 112);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v31 + 56))(v32, 0, 1, v33);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32))(v30, v32, v33);
  FunctionTypeMetadata1 = swift_getFunctionTypeMetadata1();
  if (!MEMORY[0x2495196A4](v22, FunctionTypeMetadata1))
  {
LABEL_16:
    swift_bridgeObjectRelease();
    v42 = *(_QWORD *)(v0 + 248);
    v43 = *(_QWORD *)(v0 + 232);
    v13 = *(_QWORD *)(v0 + 200);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 112));
    v10(v43, v13);
    v14 = v42;
    goto LABEL_17;
  }
  v35 = 0;
  v36 = v22 + 40;
  while (1)
  {
    v37 = sub_2448EAE6C();
    sub_2448EAE18();
    if ((v37 & 1) == 0)
      break;
    v38 = *(void (**)(_QWORD))(v36 - 8);
    v39 = v35 + 1;
    v40 = __OFADD__(v35, 1);
    result = swift_retain();
    if (v40)
      goto LABEL_20;
    v38(*(_QWORD *)(v0 + 152));
    swift_release();
    ++v35;
    v36 += 16;
    if (v39 == MEMORY[0x2495196A4](v22, FunctionTypeMetadata1))
      goto LABEL_16;
  }
  result = sub_2448EB7F0();
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t TaskRef.value.getter(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2[2] = a1;
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 88);
  v2[3] = v4;
  v2[4] = *(_QWORD *)(v4 - 8);
  v2[5] = swift_task_alloc();
  v2[6] = swift_task_alloc();
  v2[7] = *(_QWORD *)(v3 + 96);
  v2[8] = sub_2448EBD48();
  v5 = swift_task_alloc();
  v2[9] = v5;
  v6 = (_QWORD *)swift_task_alloc();
  v2[10] = v6;
  *v6 = v2;
  v6[1] = sub_24489B610;
  return TaskRef.result.getter(v5);
}

uint64_t sub_24489B610()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24489B664()
{
  uint64_t v0;

  sub_244828820(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 16));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TaskRef.cancel(andCleanUpSuccessfulValue:)(void (*a1)(_QWORD), uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  char *v22;
  char *v23;
  void (*v24)(char *);
  char v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_QWORD);
  uint64_t v30;
  uint64_t v31;

  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 80);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v23 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_2448EB508();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v23 - v14;
  v31 = v2[2];
  v16 = *(_QWORD *)(v5 + 88);
  v17 = *(_QWORD *)(v5 + 96);
  v26 = v6;
  v27 = v16;
  v28 = v17;
  v29 = a1;
  v24 = (void (*)(char *))a1;
  v30 = a2;
  type metadata accessor for TaskRef.State(255, v6, v16, v17);
  v18 = sub_2448EA5D8();
  swift_retain();
  v19 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v18);
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_2447B9000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/TaskRef.swift", 119, 2, 127, 37, (uint64_t)"cancel(andCleanUpSuccessfulValue:)", 34, 2, (uint64_t)sub_24489CED0, (uint64_t)v25, v18, v9, v19);
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v6) == 1)
  {
    v20 = *(void (**)(char *, uint64_t))(v10 + 8);
    v20(v15, v9);
    return ((uint64_t (*)(char *, uint64_t))v20)(v13, v9);
  }
  else
  {
    v22 = v23;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v23, v13, v6);
    v24(v22);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v22, v6);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  }
}

uint64_t sub_24489B99C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v32)(uint64_t, uint64_t);
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (**v38)();
  uint64_t (**v39)();
  uint64_t (*v40)();
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[3];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v52 = a3;
  v50 = a2;
  v59 = a7;
  v47 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v48 = (uint64_t)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_2448EBD48();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v45 - v17;
  v53 = a5;
  v54 = a4;
  v51 = a6;
  v19 = type metadata accessor for TaskRef.State(0, a4, a5, a6);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v49 = (uint64_t)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v45 - v22;
  v25 = v24;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))((char *)&v45 - v22, a1, v19);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v27 = v53;
    v26 = v54;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v23, v12);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v12);
    v28 = v59;
    v29 = v55;
    v30 = v48;
    sub_244828820(v12, v48, v59);
    if (v29)
    {
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v30, v27);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v28, 1, 1, v26);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v28, 0, 1, v26);
    }
  }
  else
  {
    v32 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v46 = a1;
    v32(a1, v19);
    v33 = v23[40];
    v48 = *((_QWORD *)v23 + 6);
    sub_2447F3530((__int128 *)v23, (uint64_t)v56);
    v34 = v57;
    v35 = v58;
    __swift_project_boxed_opaque_existential_1(v56, v57);
    (*(void (**)(uint64_t, uint64_t))(v35 + 32))(v34, v35);
    v36 = v49;
    sub_2447CE01C((uint64_t)v56, v49);
    *(_BYTE *)(v36 + 40) = v33;
    v37 = v54;
    swift_getFunctionTypeMetadata1();
    sub_2448EBB68();
    swift_allocObject();
    sub_2448EAE0C();
    v39 = v38;
    v40 = (uint64_t (*)())swift_allocObject();
    v42 = v52;
    v41 = v53;
    *((_QWORD *)v40 + 2) = v37;
    *((_QWORD *)v40 + 3) = v41;
    v43 = v50;
    *((_QWORD *)v40 + 4) = v51;
    *((_QWORD *)v40 + 5) = v43;
    *((_QWORD *)v40 + 6) = v42;
    *v39 = sub_24481D0F0;
    v39[1] = v40;
    sub_244805474();
    swift_retain();
    v44 = sub_2448EAE3C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v36 + 48) = v44;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v46, v36, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v59, 1, 1, v37);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
  }
}

Swift::Void __swiftcall TaskRef.cancel()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v1 + 80);
  *(_QWORD *)(v2 + 32) = *(_QWORD *)(v1 + 96);
  TaskRef.cancel(andCleanUpSuccessfulValue:)((void (*)(_QWORD))nullsub_1, v2);
  swift_release();
}

uint64_t TaskRef.peek()@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD v12[2];

  v3 = type metadata accessor for TaskRef.State(0, *(_QWORD *)(*v1 + 80), *(_QWORD *)(*v1 + 88), *(_QWORD *)(*v1 + 96));
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v12 - v4;
  v12[1] = v1[2];
  v6 = sub_2448EA5D8();
  v7 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v6);
  SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/TaskRef.swift", 119, 2, 149, 26, (uint64_t)"peek()", 6, 2, v6, v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = sub_2448EBD48();
    v9 = *(_QWORD *)(v8 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v5, v8);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
  }
  else
  {
    swift_bridgeObjectRelease();
    v11 = sub_2448EBD48();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a1, 1, 1, v11);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
}

uint64_t TaskRef.peekValue()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v4 = sub_2448EBD48();
  v5 = sub_2448EB508();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - v7;
  TaskRef.peek()((uint64_t)&v13 - v7);
  v9 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v4) == 1)
  {
    v9 = v6;
    v4 = v5;
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    v10 = *(_QWORD *)(v3 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v8, v3);
    v11 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1, v11, 1, v3);
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v4);
  v10 = *(_QWORD *)(v3 - 8);
  v11 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1, v11, 1, v3);
}

uint64_t TaskRef.peekError()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v4 = sub_2448EBD48();
  v5 = sub_2448EB508();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - v7;
  TaskRef.peek()((uint64_t)&v13 - v7);
  v9 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v4) == 1)
  {
    v9 = v6;
    v4 = v5;
LABEL_5:
    (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v4);
    v10 = *(_QWORD *)(v3 - 8);
    v11 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1, v11, 1, v3);
  }
  if (swift_getEnumCaseMultiPayload() != 1)
    goto LABEL_5;
  v10 = *(_QWORD *)(v3 - 8);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v8, v3);
  v11 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1, v11, 1, v3);
}

void TaskRef.map<A>(transform:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v3;
  v8 = *v4;
  v9 = *(_QWORD *)(*v4 + 88);
  v10 = *(_QWORD *)(*v4 + 96);
  type metadata accessor for TaskRef(0, a3, v9, v10);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = *(_QWORD *)(v8 + 80);
  v11[3] = v9;
  v11[4] = a3;
  v11[5] = v10;
  v11[6] = a1;
  v11[7] = a2;
  swift_retain();
  swift_retain();
  type metadata accessor for MapTaskRef();
}

{
  _QWORD *v3;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v7 = (_QWORD *)*v3;
  v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  type metadata accessor for TaskRef(0, a3, v8, MEMORY[0x24BEE3F20]);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = v7[10];
  v9[3] = v7[11];
  v9[4] = a3;
  v9[5] = v7[12];
  v9[6] = a1;
  v9[7] = a2;
  swift_retain();
  swift_retain();
  type metadata accessor for MapTaskRef();
}

_QWORD *sub_24489C24C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;

  v2 = MEMORY[0x24951AC70](&unk_2448F5AA4, a1);
  v3 = sub_24489CC58((uint64_t)&v5, a1, v2);
  swift_release();
  swift_release();
  return v3;
}

uint64_t sub_24489C2AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD v18[2];

  v18[0] = a2;
  v18[1] = a5;
  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_2448EBD48();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v18 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)v18 - v14, a1, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a6, v15, a4);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, a3);
    ((void (*)(char *))v18[0])(v12);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a3);
  }
  sub_2448EBD48();
  return swift_storeEnumTagMultiPayload();
}

_QWORD *sub_24489C4EC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;

  v2 = MEMORY[0x24951AC70](&unk_2448F5AA4, a1);
  v3 = sub_24489CC58((uint64_t)&v5, a1, v2);
  swift_release();
  swift_release();
  return v3;
}

uint64_t sub_24489C548@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;

  v39 = (uint64_t *)a7;
  v40 = a6;
  v37 = a2;
  v38 = a3;
  v10 = *(_QWORD *)(a5 - 8);
  v11 = MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v36 - v15;
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = v21;
  v22 = sub_2448EBD48();
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v36 - v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))((char *)&v36 - v23, a1, v22);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v26 = v39;
    v27 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v27(v16, v24, a5);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v16, a5);
    v28 = sub_2448EBB80();
    if (v28)
    {
      v29 = v28;
      v30 = *(void (**)(char *, uint64_t))(v10 + 8);
      v30(v13, a5);
    }
    else
    {
      v29 = swift_allocError();
      v27(v35, v13, a5);
      v30 = *(void (**)(char *, uint64_t))(v10 + 8);
    }
    v30(v16, a5);
    *v26 = v29;
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
    sub_2448EBD48();
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    v31 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(v20, v24, a4);
    MEMORY[0x24BDAC7A8](v31);
    *(&v36 - 8) = a4;
    *(&v36 - 7) = a5;
    v32 = v41;
    *(&v36 - 6) = v40;
    *(&v36 - 5) = v32;
    v33 = v38;
    *(&v36 - 4) = v37;
    *(&v36 - 3) = v33;
    *(&v36 - 2) = (uint64_t)v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0A8);
    sub_2447D18BC((void (*)(_BYTE *))sub_24489E118, (uint64_t)v39);
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, a4);
  }
}

uint64_t TaskRef.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t TaskRef.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t TaskRef<>.value.getter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  v2[2] = a1;
  v2[3] = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v2[4] = sub_2448EBD48();
  v3 = swift_task_alloc();
  v2[5] = v3;
  v4 = (_QWORD *)swift_task_alloc();
  v2[6] = v4;
  *v4 = v2;
  v4[1] = sub_24489C8BC;
  return TaskRef.result.getter(v3);
}

uint64_t sub_24489C8BC()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24489C910()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  if (swift_getEnumCaseMultiPayload() == 1)
    return sub_2448EBBE0();
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 32))(*(_QWORD *)(v0 + 16), v1);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24489C984()
{
  return sub_2448EB034();
}

uint64_t sub_24489C998()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_2447C81F0;
  return sub_2448EB040();
}

void sub_24489CA08()
{
  TaskRef.cancel()();
}

uint64_t sub_24489CA28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4[3] = a3;
  v4[4] = a4;
  v4[2] = a1;
  v5 = sub_2448EBD48();
  v4[5] = v5;
  v4[6] = *(_QWORD *)(v5 - 8);
  v6 = swift_task_alloc();
  v4[7] = v6;
  v7 = (_QWORD *)swift_task_alloc();
  v4[8] = v7;
  *v7 = v4;
  v7[1] = sub_24489CAC0;
  return TaskRef.result.getter(v6);
}

uint64_t sub_24489CAC0()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24489CB14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t))(v0 + 24))(v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_24489CB70()
{
  sub_24489CA08();
}

uint64_t sub_24489CB90(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *v1;
  v5 = v1[1];
  v6 = v1[2];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_2447C62E8;
  return sub_24489CA28(a1, v4, v5, v6);
}

_QWORD *sub_24489CC14(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = type metadata accessor for TaskRef.State(0, *(_QWORD *)(*v1 + 80), *(_QWORD *)(*v1 + 88), *(_QWORD *)(*v1 + 96));
  v1[2] = sub_24481320C(a1, v3);
  return v1;
}

_QWORD *sub_24489CC58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v12;
  uint64_t v14;

  v7 = type metadata accessor for TaskRef.State(0, v3[10], v3[11], v3[12]);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v14 - v9;
  *((_QWORD *)v10 + 3) = a2;
  *((_QWORD *)v10 + 4) = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)((char *)&v14 - v9));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
  v10[40] = 0;
  swift_getFunctionTypeMetadata1();
  *((_QWORD *)v10 + 6) = sub_2448EAE54();
  swift_storeEnumTagMultiPayload();
  swift_allocObject();
  v12 = sub_24489CC14((uint64_t)v10);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v12;
}

_QWORD *_s20PreviewsFoundationOS7TaskRefC9completedyACyxq_Gs6ResultOyxq_GFZ_0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;

  v3 = type metadata accessor for TaskRef.State(0, v1[10], v1[11], v1[12]);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v10 - v5;
  v7 = sub_2448EBD48();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v6, a1, v7);
  swift_storeEnumTagMultiPayload();
  swift_allocObject();
  v8 = sub_24489CC14((uint64_t)v6);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v8;
}

uint64_t type metadata accessor for TaskRef.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TaskRef.State);
}

uint64_t sub_24489CE68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;

  v5 = type metadata accessor for TaskRef.State(0, v2[2], v2[3], v2[4]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return sub_24489AA6C(v5);
}

uint64_t sub_24489CED0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_24489B99C(a1, v2[5], v2[6], v2[2], v2[3], v2[4], a2);
}

uint64_t sub_24489CEF0()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for TaskRef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TaskRef);
}

uint64_t sub_24489CF0C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24489CF30(uint64_t a1)
{
  return sub_24489CF54(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_24489C2AC);
}

void type metadata accessor for MapTaskRef()
{
  JUMPOUT(0x24951ABD4);
}

uint64_t sub_24489CF48(uint64_t a1)
{
  return sub_24489CF54(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_24489C548);
}

uint64_t sub_24489CF54(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[6], v2[7], v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_24489CF68()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for TaskRef()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_24489CFB8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2448EBD48();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_24489D030(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  __int128 v16;
  BOOL v17;
  uint64_t v18;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v7 + 64) <= *(_QWORD *)(v6 + 64))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v7 + 64);
  if ((unint64_t)(v8 + 1) > 0x38)
    v9 = v8 + 1;
  else
    v9 = 56;
  v10 = *(_DWORD *)(v7 + 80) | *(_DWORD *)(v6 + 80);
  if ((v10 & 0x1000F8) != 0 || (unint64_t)(v9 + 1) > 0x18)
  {
    v12 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v12 + (((v10 & 0xF8 | 7u) + 16) & ~(unint64_t)(v10 & 0xF8 | 7u));
    swift_retain();
  }
  else
  {
    v13 = *((unsigned __int8 *)a2 + v9);
    if (v13 >= 2)
      v13 = *(_DWORD *)a2 + 2;
    if (v13 == 1)
    {
      v14 = *((unsigned __int8 *)a2 + v8);
      if (v14 >= 2)
      {
        if (v8 <= 3)
          v15 = v8;
        else
          v15 = 4;
        __asm { BR              X16 }
      }
      v17 = v14 == 1;
      if (v14 == 1)
      {
        v6 = *(_QWORD *)(v5 - 8);
        v18 = *(_QWORD *)(a3 + 24);
      }
      else
      {
        v18 = *(_QWORD *)(a3 + 16);
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v18);
      *(_BYTE *)(v4 + v8) = v17;
      *(_BYTE *)(v4 + v9) = 1;
    }
    else
    {
      v16 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v16;
      (**(void (***)(uint64_t, uint64_t *))(v16 - 8))(a1, a2);
      *(_BYTE *)(v4 + 40) = *((_BYTE *)a2 + 40);
      *(_QWORD *)(v4 + 48) = a2[6];
      *(_BYTE *)(v4 + v9) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return v4;
}

uint64_t sub_24489D1CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t (*v11)(void);

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  if (*(_QWORD *)(v4 + 64) > v3)
    v3 = *(_QWORD *)(v4 + 64);
  v5 = 56;
  if (v3 + 1 > 0x38)
    v5 = v3 + 1;
  v6 = *(unsigned __int8 *)(a1 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X17 }
  }
  if (v6 == 1)
  {
    v8 = *(unsigned __int8 *)(a1 + v3);
    if (v8 >= 2)
    {
      if (v3 <= 3)
        v9 = v3;
      else
        v9 = 4;
      __asm { BR              X16 }
    }
    if (v8 == 1)
      v11 = *(uint64_t (**)(void))(v4 + 8);
    else
      v11 = *(uint64_t (**)(void))(v2 + 8);
    return v11();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_24489D33C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  __int128 v14;
  BOOL v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v7 + 64) <= *(_QWORD *)(v6 + 64))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v7 + 64);
  if ((unint64_t)(v8 + 1) > 0x38)
    v9 = v8 + 1;
  else
    v9 = 56;
  v10 = *(unsigned __int8 *)(a2 + v9);
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X16 }
  }
  if (v10 == 1)
  {
    v12 = *(unsigned __int8 *)(a2 + v8);
    if (v12 >= 2)
    {
      if (v8 <= 3)
        v13 = v8;
      else
        v13 = 4;
      __asm { BR              X16 }
    }
    v15 = v12 == 1;
    if (v12 == 1)
    {
      v6 = *(_QWORD *)(v5 - 8);
      v16 = *(_QWORD *)(a3 + 24);
    }
    else
    {
      v16 = *(_QWORD *)(a3 + 16);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v16);
    *(_BYTE *)(a1 + v8) = v15;
    *(_BYTE *)(a1 + v9) = 1;
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v14;
    (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1, a2);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + v9) = 0;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_24489D4EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  void (*v15)(void);
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    if ((unint64_t)(v9 + 1) > 0x38)
      v10 = v9 + 1;
    else
      v10 = 56;
    v11 = *(unsigned __int8 *)(a1 + v10);
    if (v11 >= 2)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      v13 = *(unsigned __int8 *)(a1 + v9);
      if (v13 >= 2)
      {
        if (v9 <= 3)
          v14 = v9;
        else
          v14 = 4;
        __asm { BR              X12 }
      }
      if (v13 == 1)
        v15 = *(void (**)(void))(v8 + 8);
      else
        v15 = *(void (**)(void))(v7 + 8);
      v15();
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      swift_bridgeObjectRelease();
    }
    v16 = *(unsigned __int8 *)(a2 + v10);
    if (v16 >= 2)
    {
      if (v10 <= 3)
        v17 = v10;
      else
        v17 = 4;
      __asm { BR              X12 }
    }
    if (v16 == 1)
    {
      v18 = *(unsigned __int8 *)(a2 + v9);
      if (v18 >= 2)
      {
        if (v9 <= 3)
          v19 = v9;
        else
          v19 = 4;
        __asm { BR              X12 }
      }
      v21 = v18 == 1;
      if (v18 == 1)
        v22 = v8;
      else
        v22 = v7;
      if (v18 == 1)
        v23 = v6;
      else
        v23 = v5;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(a1, a2, v23);
      *(_BYTE *)(a1 + v9) = v21;
      *(_BYTE *)(a1 + v10) = 1;
    }
    else
    {
      v20 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v20;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v20 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_BYTE *)(a1 + v10) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t sub_24489D830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  BOOL v15;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  if ((unint64_t)(v7 + 1) > 0x38)
    v8 = v7 + 1;
  else
    v8 = 56;
  v9 = *(unsigned __int8 *)(a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X16 }
  }
  if (v9 == 1)
  {
    v11 = *(unsigned __int8 *)(a2 + v7);
    if (v11 >= 2)
    {
      if (v7 <= 3)
        v12 = v7;
      else
        v12 = 4;
      __asm { BR              X16 }
    }
    v15 = v11 == 1;
    if (v11 == 1)
      v5 = *(_QWORD *)(v4 - 8);
    (*(void (**)(uint64_t))(v5 + 32))(a1);
    *(_BYTE *)(a1 + v7) = v15;
    v13 = 1;
  }
  else
  {
    v13 = 0;
    v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  }
  *(_BYTE *)(a1 + v8) = v13;
  return a1;
}

uint64_t sub_24489D9B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  void (*v15)(void);
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    if ((unint64_t)(v9 + 1) > 0x38)
      v10 = v9 + 1;
    else
      v10 = 56;
    v11 = *(unsigned __int8 *)(a1 + v10);
    if (v11 >= 2)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      v13 = *(unsigned __int8 *)(a1 + v9);
      if (v13 >= 2)
      {
        if (v9 <= 3)
          v14 = v9;
        else
          v14 = 4;
        __asm { BR              X12 }
      }
      if (v13 == 1)
        v15 = *(void (**)(void))(v8 + 8);
      else
        v15 = *(void (**)(void))(v7 + 8);
      v15();
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      swift_bridgeObjectRelease();
    }
    v16 = *(unsigned __int8 *)(a2 + v10);
    if (v16 >= 2)
    {
      if (v10 <= 3)
        v17 = v10;
      else
        v17 = 4;
      __asm { BR              X12 }
    }
    if (v16 == 1)
    {
      v18 = *(unsigned __int8 *)(a2 + v9);
      if (v18 >= 2)
      {
        if (v9 <= 3)
          v19 = v9;
        else
          v19 = 4;
        __asm { BR              X12 }
      }
      v22 = v18 == 1;
      if (v18 == 1)
        v23 = v8;
      else
        v23 = v7;
      if (v18 == 1)
        v24 = v6;
      else
        v24 = v5;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(a1, a2, v24);
      *(_BYTE *)(a1 + v9) = v22;
      v20 = 1;
    }
    else
    {
      v20 = 0;
      v21 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v21;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    }
    *(_BYTE *)(a1 + v10) = v20;
  }
  return a1;
}

uint64_t sub_24489DC84(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  unsigned int v9;
  int v10;
  unsigned int v11;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  v4 = 56;
  if (v3 + 1 > 0x38)
    v4 = v3 + 1;
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_23;
  v5 = v4 + 1;
  v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    v9 = ((a2 + ~(-1 << v6) - 254) >> v6) + 1;
    if (HIWORD(v9))
    {
      v7 = *(_DWORD *)(a1 + v5);
      if (!v7)
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v9 > 0xFF)
    {
      v7 = *(unsigned __int16 *)(a1 + v5);
      if (!*(_WORD *)(a1 + v5))
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v9 < 2)
    {
LABEL_23:
      v11 = *(unsigned __int8 *)(a1 + v4);
      if (v11 >= 2)
        return (v11 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v7 = *(unsigned __int8 *)(a1 + v5);
  if (!*(_BYTE *)(a1 + v5))
    goto LABEL_23;
LABEL_16:
  v10 = (v7 - 1) << v6;
  if (v5 > 3)
    v10 = 0;
  if (!(_DWORD)v5)
    return (v10 + 255);
  if (v5 > 3)
    LODWORD(v5) = 4;
  return ((uint64_t (*)(void))((char *)&loc_24489DD5C + 4 * byte_2448F595B[(v5 - 1)]))();
}

void sub_24489DDA8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64);
  if (v5 + 1 > 0x38)
    v6 = v5 + 1;
  else
    v6 = 56;
  v7 = v6 + 1;
  if (a3 < 0xFF)
  {
    v8 = 0;
  }
  else if (v7 <= 3)
  {
    v10 = ((a3 + ~(-1 << (8 * v7)) - 254) >> (8 * v7)) + 1;
    if (HIWORD(v10))
    {
      v8 = 4u;
    }
    else if (v10 >= 0x100)
    {
      v8 = 2;
    }
    else
    {
      v8 = v10 > 1;
    }
  }
  else
  {
    v8 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v9 = a2 - 255;
  if (v7 < 4)
  {
    if ((_DWORD)v6 != -1)
    {
      v11 = v9 & ~(-1 << (8 * v7));
      bzero(a1, v7);
      if ((_DWORD)v7 == 3)
      {
        *a1 = v11;
        *((_BYTE *)a1 + 2) = BYTE2(v11);
      }
      else if ((_DWORD)v7 == 2)
      {
        *a1 = v11;
      }
      else
      {
        *(_BYTE *)a1 = v11;
      }
    }
  }
  else
  {
    bzero(a1, v6 + 1);
    *(_DWORD *)a1 = v9;
  }
  __asm { BR              X10 }
}

uint64_t sub_24489DF64(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64);
  v3 = 56;
  if (v2 + 1 > 0x38)
    v3 = v2 + 1;
  if (*(unsigned __int8 *)(a1 + v3) < 2u)
    return *(unsigned __int8 *)(a1 + v3);
  if (v3 <= 3)
    v4 = v3;
  else
    v4 = 4;
  return ((uint64_t (*)(void))((char *)&loc_24489DFC0 + 4 * byte_2448F5969[v4]))();
}

void sub_24489E008(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  if (a2 > 1)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) > v6)
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    if (v6 + 1 > 0x38)
      v7 = v6 + 1;
    else
      v7 = 56;
    v8 = a2 - 2;
    if (v7 < 4)
    {
      v9 = v8 >> (8 * v7);
      v10 = v8 & ~(-1 << (8 * v7));
      a1[v7] = v9 + 2;
      bzero(a1, v7);
      if ((_DWORD)v7 == 3)
      {
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
      }
      else if ((_DWORD)v7 == 2)
      {
        *(_WORD *)a1 = v10;
      }
      else
      {
        *a1 = v10;
      }
    }
    else
    {
      a1[v7] = 2;
      bzero(a1, v7);
      *(_DWORD *)a1 = v8;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    if (v4 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    if (v4 + 1 > 0x38)
      v5 = v4 + 1;
    else
      v5 = 56;
    a1[v5] = a2;
  }
}

uint64_t sub_24489E110(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 48);
}

uint64_t sub_24489E118(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v1 + 48))(*(_QWORD *)(v1 + 64));
  if (v2)
    *a1 = v2;
  return result;
}

uint64_t sub_24489E150()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t DepthFirstDAGIterator.init(root:identifierAccessor:childrenAccessor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v14 = sub_2448EA7E8();
  sub_2448464D4(a6, a6);
  v15 = *(_QWORD *)(a6 - 8);
  swift_allocObject();
  v16 = sub_2448EAE0C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v17, a1, a6);
  result = v16;
  sub_244805474();
  *a7 = v16;
  a7[1] = v14;
  a7[2] = a2;
  a7[3] = a3;
  a7[4] = a4;
  a7[5] = a5;
  return result;
}

double DepthFirstDAGIterator.init<>(root:childrenKeyPath:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _OWORD v12[3];

  v5 = *a2;
  v11 = a1;
  v6 = swift_allocObject();
  v7 = *(_QWORD *)(v5 + *MEMORY[0x24BEE46A8]);
  *(_QWORD *)(v6 + 16) = v7;
  DepthFirstDAGIterator.init(root:identifierAccessor:childrenAccessor:)((uint64_t)&v11, (uint64_t)sub_2447BD514, v6, (uint64_t)sub_24489F2B8, (uint64_t)a2, v7, (uint64_t *)v12);
  result = *(double *)v12;
  v9 = v12[1];
  v10 = v12[2];
  *a3 = v12[0];
  a3[1] = v9;
  a3[2] = v10;
  return result;
}

uint64_t sub_24489E2EC()
{
  uint64_t v1;

  swift_unknownObjectRetain();
  swift_getAtKeyPath();
  swift_unknownObjectRelease();
  return v1;
}

double DepthFirstDAGIterator.init<>(root:childrenKeyPath:)@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  double result;
  __int128 v17;
  __int128 v18;
  _OWORD v19[3];

  v10 = *(_QWORD *)(*a2 + *MEMORY[0x24BEE46A8]);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)v19 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v19 - v12, a1, v10);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = v10;
  v14[3] = a3;
  v14[4] = a4;
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a3;
  v15[3] = a4;
  v15[4] = a2;
  swift_getAssociatedConformanceWitness();
  DepthFirstDAGIterator.init(root:identifierAccessor:childrenAccessor:)((uint64_t)v13, (uint64_t)sub_24489F2D0, (uint64_t)v14, (uint64_t)sub_24489F320, (uint64_t)v15, v10, (uint64_t *)v19);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
  result = *(double *)v19;
  v17 = v19[1];
  v18 = v19[2];
  *a5 = v19[0];
  a5[1] = v17;
  a5[2] = v18;
  return result;
}

double DepthFirstDAGIterator.init<>(root:childrenAccessor:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  __int128 v18;
  __int128 v19;
  _OWORD v20[3];

  v12 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v15);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a4;
  *(_QWORD *)(v16 + 24) = a5;
  DepthFirstDAGIterator.init(root:identifierAccessor:childrenAccessor:)((uint64_t)v14, (uint64_t)sub_24489F358, v16, a2, a3, a4, (uint64_t *)v20);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, a4);
  result = *(double *)v20;
  v18 = v20[1];
  v19 = v20[2];
  *a6 = v20[0];
  a6[1] = v18;
  a6[2] = v19;
  return result;
}

uint64_t DepthFirstDAGIterator.next()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *);
  uint64_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  char *v25;
  void (*v26)(char *);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t (*v30)(char *);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v39 = a2;
  v44 = *(_QWORD *)(a1 + 24);
  v41 = *(_QWORD *)(v44 - 8);
  v3 = MEMORY[0x24BDAC7A8](a1);
  v38 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = MEMORY[0x24BDAC7A8](v3);
  v43 = (char *)v35 - v5;
  v6 = *(_QWORD *)(v42 + 16);
  v7 = sub_2448EB508();
  v36 = *(_QWORD *)(v7 - 8);
  v37 = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v35 - v9;
  v11 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_2448EAEE4();
  v35[1] = v2 + 8;
  v14 = v43;
  v15 = v44;
  while (1)
  {
    v16 = v45;
    v17 = MEMORY[0x24951AC70](MEMORY[0x24BEE12B0], v45);
    v18 = MEMORY[0x24951AC70](MEMORY[0x24BEE12E8], v16);
    MEMORY[0x249519B24](v16, v17, v18);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v6) == 1)
    {
      (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v37);
      v24 = 1;
      v25 = v39;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v25, v24, 1, v6);
    }
    v40 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v40(v13, v10, v6);
    v19 = *(void (**)(char *))(v2 + 16);
    v20 = v2;
    swift_bridgeObjectRetain();
    swift_retain();
    v19(v13);
    swift_release();
    v21 = *(_QWORD *)(v42 + 32);
    v22 = sub_2448EB130();
    swift_bridgeObjectRelease();
    v23 = *(void (**)(char *, uint64_t))(v41 + 8);
    v23(v14, v15);
    if ((v22 & 1) == 0)
      break;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v6);
    v2 = v20;
  }
  v26 = *(void (**)(char *))(v20 + 16);
  swift_retain();
  v26(v13);
  swift_release();
  v27 = v44;
  sub_2448EB160();
  v28 = v43;
  sub_2448EB10C();
  v29 = v27;
  v23(v28, v27);
  v30 = *(uint64_t (**)(char *))(v20 + 32);
  swift_retain();
  v31 = v30(v13);
  v32 = swift_release();
  v46 = v31;
  MEMORY[0x24BDAC7A8](v32);
  v35[-4] = v6;
  v35[-3] = v29;
  v35[-2] = v21;
  v35[-1] = v20;
  v33 = v45;
  MEMORY[0x24951AC70](MEMORY[0x24BEE12F0], v45);
  v46 = sub_2448EB85C();
  MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v33);
  sub_2448EAE90();
  v25 = v39;
  v40(v39, v13, v6);
  v24 = 0;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v25, v24, 1, v6);
}

BOOL sub_24489E8FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  char v11;
  uint64_t v13;

  v6 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void (**)(uint64_t))(v9 + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  v10(a1);
  swift_release();
  v11 = sub_2448EB130();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a4);
  return (v11 & 1) == 0;
}

uint64_t DepthFirstDAGIterator.postOrderReverseTopologicallySorted()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t TupleTypeMetadata2;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  _BYTE *v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  void (*v54)(char *, unsigned __int8 *, uint64_t);
  int v55;
  unsigned __int8 *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  void (*v66)(char *, char *, uint64_t);
  char *v67;
  uint64_t v68;
  char v69;
  char *v70;
  uint64_t v71;
  char v72;
  char *v73;
  uint64_t result;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  unsigned int (*v79)(char *, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  char *v83;
  _BYTE *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  unsigned __int8 *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(char *, char *, uint64_t);
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v2 = v1;
  v4 = a1[2];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v81 = sub_2448EB508();
  v80 = *(_QWORD *)(v81 - 8);
  MEMORY[0x24BDAC7A8](v81);
  v7 = (char *)&v75 - v6;
  v90 = swift_getTupleTypeMetadata2();
  v8 = MEMORY[0x24BDAC7A8](v90);
  v89 = (unsigned __int8 *)&v75 - v9;
  v92 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v95 = (char *)&v75 - v11;
  v12 = a1[3];
  v91 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v100 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v86 = (char *)&v75 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v85 = (char *)&v75 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v93 = (char *)&v75 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v83 = (char *)&v75 - v21;
  v77 = sub_2448EB508();
  v76 = *(_QWORD *)(v77 - 8);
  v22 = MEMORY[0x24BDAC7A8](v77);
  v24 = (char *)&v75 - v23;
  v25 = *(_QWORD *)(v4 - 8);
  v26 = MEMORY[0x24BDAC7A8](v22);
  v28 = (char *)&v75 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x24BDAC7A8](v26);
  v101 = (char *)&v75 - v30;
  v31 = MEMORY[0x24BDAC7A8](v29);
  v87 = (char *)&v75 - v32;
  v33 = MEMORY[0x24BDAC7A8](v31);
  v94 = (char *)&v75 - v34;
  v75 = v35;
  MEMORY[0x24BDAC7A8](v33);
  v37 = (char *)&v75 - v36;
  v38 = a1[4];
  v103 = v12;
  v98 = v38;
  v107 = sub_2448EA7E8();
  v96 = TupleTypeMetadata2;
  v106 = sub_2448EAE54();
  v105 = sub_2448EAE54();
  v82 = a1;
  DepthFirstDAGIterator.next()((uint64_t)a1, v24);
  v39 = v76;
  v40 = v77;
  v79 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v79(v24, 1, v4) == 1)
    goto LABEL_29;
  v102 = v25;
  v99 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
  v84 = v7;
  v78 = v24;
  v88 = v37;
  v99(v37, v24, v4);
LABEL_5:
  (*(void (**)(char *))(v2 + 16))(v37);
  swift_bridgeObjectRetain();
  v41 = sub_2448EB130();
  swift_bridgeObjectRelease();
  v42 = v102;
  if ((v41 & 1) == 0)
  {
    v43 = &v95[*(int *)(v96 + 48)];
    *v95 = 0;
    (*(void (**)(_BYTE *, char *, uint64_t))(v42 + 16))(v43, v37, v4);
    sub_2448EAEE4();
    sub_2448EAE9C();
  }
  v44 = v37;
  v45 = v96;
  v97 = sub_2448EAEE4();
  while (1)
  {
    v47 = v97;
    v48 = MEMORY[0x24951AC70](MEMORY[0x24BEE12B0], v97);
    v49 = MEMORY[0x24951AC70](MEMORY[0x24BEE12E8], v47);
    MEMORY[0x249519B24](v47, v48, v49);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v92 + 48))(v7, 1, v45) == 1)
    {
      (*(void (**)(_BYTE *, uint64_t))(v80 + 8))(v7, v81);
      (*(void (**)(char *, uint64_t))(v91 + 8))(v83, v103);
      v37 = v44;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v4);
      v24 = v78;
      DepthFirstDAGIterator.next()((uint64_t)v82, v78);
      if (v79(v24, 1, v4) == 1)
      {
LABEL_28:
        v40 = v77;
        v39 = v76;
LABEL_29:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v39 + 8))(v24, v40);
        return v105;
      }
      v99(v44, v24, v4);
      goto LABEL_5;
    }
    v50 = &v7[*(int *)(v45 + 48)];
    v52 = v89;
    v51 = v90;
    v53 = &v89[*(int *)(v90 + 48)];
    *v89 = *v7;
    v54 = (void (*)(char *, unsigned __int8 *, uint64_t))v99;
    v99((char *)v53, v50, v4);
    v55 = *v52;
    v56 = &v52[*(int *)(v51 + 48)];
    v57 = v94;
    v54(v94, v56, v4);
    v58 = v93;
    (*(void (**)(char *))(v2 + 16))(v57);
    if (v55 == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v87, v57, v4);
      sub_2448EAEE4();
      sub_2448EAE9C();
      v46 = *(void (**)(char *, uint64_t))(v91 + 8);
      goto LABEL_9;
    }
    swift_bridgeObjectRetain();
    v59 = v103;
    v60 = v58;
    v61 = sub_2448EB130();
    swift_bridgeObjectRelease();
    if ((v61 & 1) == 0)
      break;
    v46 = *(void (**)(char *, uint64_t))(v91 + 8);
    v58 = v60;
LABEL_26:
    v42 = v102;
    v57 = v94;
LABEL_9:
    v46(v58, v103);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v57, v4);
    v44 = v88;
    v45 = v96;
  }
  v62 = v91;
  (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v86, v60, v59);
  sub_2448EB160();
  v63 = v85;
  sub_2448EB10C();
  v64 = v59;
  v46 = *(void (**)(char *, uint64_t))(v62 + 8);
  v46(v63, v64);
  v65 = &v95[*(int *)(v96 + 48)];
  *v95 = 1;
  v66 = *(void (**)(char *, char *, uint64_t))(v102 + 16);
  v67 = v94;
  v66(v65, v94, v4);
  sub_2448EAE9C();
  v68 = (*(uint64_t (**)(char *))(v2 + 32))(v67);
  if (!MEMORY[0x2495196A4](v68, v4))
  {
LABEL_25:
    swift_bridgeObjectRelease();
    v7 = v84;
    v58 = v93;
    goto LABEL_26;
  }
  v24 = 0;
  while (2)
  {
    v69 = sub_2448EAE6C();
    sub_2448EAE18();
    if ((v69 & 1) != 0)
    {
      v66(v101, (char *)(v68+ ((*(unsigned __int8 *)(v102 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80))+ *(_QWORD *)(v102 + 72) * (_QWORD)v24), v4);
      v70 = v24 + 1;
      if (__OFADD__(v24, 1))
        goto LABEL_27;
LABEL_19:
      v99(v28, v101, v4);
      v71 = v2;
      (*(void (**)(char *))(v2 + 16))(v28);
      swift_bridgeObjectRetain();
      v72 = sub_2448EB130();
      swift_bridgeObjectRelease();
      if ((v72 & 1) == 0)
      {
        v73 = &v95[*(int *)(v96 + 48)];
        *v95 = 0;
        v66(v73, v28, v4);
        sub_2448EAE9C();
      }
      v46(v100, v103);
      (*(void (**)(char *, uint64_t))(v102 + 8))(v28, v4);
      ++v24;
      v2 = v71;
      if (v70 == (char *)MEMORY[0x2495196A4](v68, v4))
        goto LABEL_25;
      continue;
    }
    break;
  }
  result = sub_2448EB7F0();
  if (v75 == 8)
  {
    v104 = result;
    v66(v101, (char *)&v104, v4);
    swift_unknownObjectRelease();
    v70 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t sub_24489F2A8()
{
  return swift_deallocObject();
}

uint64_t sub_24489F2B8()
{
  return sub_24489E2EC();
}

uint64_t sub_24489F2C0()
{
  return swift_deallocObject();
}

uint64_t sub_24489F2D0()
{
  return sub_2448EAD94();
}

uint64_t sub_24489F2FC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24489F320()
{
  uint64_t v1;

  swift_getAtKeyPath();
  return v1;
}

uint64_t sub_24489F348()
{
  return swift_deallocObject();
}

uint64_t sub_24489F358@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 16) - 8) + 16))(a2, a1);
}

BOOL sub_24489F370(uint64_t a1)
{
  uint64_t *v1;

  return sub_24489E8FC(a1, v1[5], v1[2], v1[3]);
}

uint64_t sub_24489F390()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t sub_24489F3C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *sub_24489F43C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_24489F4C8(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_release();
  return a1;
}

uint64_t sub_24489F524(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_24489F56C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for DepthFirstDAGIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DepthFirstDAGIterator);
}

uint64_t sub_24489F5C8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t DiagnosticsCollector.__allocating_init(options:simulatorDiagnosticsDeviceSet:outputDirectory:prefix:suffix:)(uint64_t *a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;

  v16 = swift_allocObject();
  DiagnosticsCollector.init(options:simulatorDiagnosticsDeviceSet:outputDirectory:prefix:suffix:)(a1, a2, a3, a4, a5, a6, a7, a8);
  return v16;
}

uint64_t DiagnosticsCollector.summaryText.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_state);
  swift_retain();
  os_unfair_lock_lock(v1 + 8);
  sub_2448A0EBC((uint64_t)&v1[4], &v4);
  os_unfair_lock_unlock(v1 + 8);
  v2 = v4;
  swift_release();
  return v2;
}

Swift::Void __swiftcall DiagnosticsCollector.appendLogEntry(titled:_:at:)(Swift::String titled, Swift::String _, PreviewsFoundationOS::DiagnosticsLogPosition at)
{
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  void *v6;
  uint64_t v7;
  char v8;
  os_unfair_lock_s *v9;

  object = _._object;
  countAndFlagsBits = _._countAndFlagsBits;
  v6 = titled._object;
  v7 = titled._countAndFlagsBits;
  v8 = *(_BYTE *)at;
  v9 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_state);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  os_unfair_lock_lock(v9 + 8);
  sub_2448A05F4((uint64_t)&v9[4], v8, v7, (uint64_t)v6, countAndFlagsBits, (uint64_t)object);
  os_unfair_lock_unlock(v9 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
}

uint64_t static DiagnosticsCollector.numberOfDiagnosticsToKeep.getter()
{
  swift_beginAccess();
  return qword_2573905E8;
}

uint64_t static DiagnosticsCollector.numberOfDiagnosticsToKeep.setter(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  qword_2573905E8 = a1;
  return result;
}

uint64_t (*static DiagnosticsCollector.numberOfDiagnosticsToKeep.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

unint64_t static DiagnosticsCollector.archiveNamePrefix.getter()
{
  return 0xD000000000000014;
}

unint64_t static DiagnosticsCollector.logFileName.getter()
{
  return 0xD000000000000020;
}

uint64_t static DiagnosticsCollector.simulatorDiagnosticsDirectoryName.getter()
{
  return 0x645F6C74636D6973;
}

uint64_t DiagnosticsCollector.Options.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

PreviewsFoundationOS::DiagnosticsCollector::Options __swiftcall DiagnosticsCollector.Options.init(rawValue:)(PreviewsFoundationOS::DiagnosticsCollector::Options rawValue)
{
  PreviewsFoundationOS::DiagnosticsCollector::Options *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

uint64_t static DiagnosticsCollector.Options.all.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = swift_beginAccess();
  *a1 = qword_2573905F0;
  return result;
}

uint64_t static DiagnosticsCollector.Options.all.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  result = swift_beginAccess();
  qword_2573905F0 = v1;
  return result;
}

uint64_t (*static DiagnosticsCollector.Options.all.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t static DiagnosticsCollector.Options.crashLogs.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = swift_beginAccess();
  *a1 = qword_2573905F8;
  return result;
}

uint64_t static DiagnosticsCollector.Options.crashLogs.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  result = swift_beginAccess();
  qword_2573905F8 = v1;
  return result;
}

uint64_t (*static DiagnosticsCollector.Options.crashLogs.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t static DiagnosticsCollector.Options.osLog.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = swift_beginAccess();
  *a1 = qword_257390600;
  return result;
}

uint64_t static DiagnosticsCollector.Options.osLog.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  result = swift_beginAccess();
  qword_257390600 = v1;
  return result;
}

uint64_t (*static DiagnosticsCollector.Options.osLog.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t static DiagnosticsCollector.Options.simulator.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = swift_beginAccess();
  *a1 = qword_257390608;
  return result;
}

uint64_t static DiagnosticsCollector.Options.simulator.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  result = swift_beginAccess();
  qword_257390608 = v1;
  return result;
}

uint64_t (*static DiagnosticsCollector.Options.simulator.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24489FC54@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_24489F5C8(a1, a2);
}

BOOL static DiagnosticsCollector.SimulatorDiagnosticsDeviceSet.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t DiagnosticsCollector.SimulatorDiagnosticsDeviceSet.hash(into:)()
{
  return sub_2448EBD0C();
}

BOOL sub_24489FCAC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t DiagnosticsCollector.archive.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_archive;
  v4 = sub_2448EA434();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

void DiagnosticsCollector.options.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_options);
}

void DiagnosticsCollector.simulatorDiagnosticsDeviceSet.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_simulatorDiagnosticsDeviceSet);
}

uint64_t DiagnosticsCollector.zipArchive.getter()
{
  return sub_2448EA3F8();
}

uint64_t DiagnosticsCollector.init(options:simulatorDiagnosticsDeviceSet:outputDirectory:prefix:suffix:)(uint64_t *a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  char v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  SEL *v43;
  uint64_t v44;
  NSString *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  id v55;
  id v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  os_unfair_lock_s *v62;
  _QWORD v64[2];
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;

  v9 = v8;
  v64[1] = a3;
  v65 = a4;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_257390618);
  MEMORY[0x24BDAC7A8](v15);
  v71 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_2448EA56C();
  v69 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_2448EA434();
  v67 = *(_QWORD *)(v20 - 8);
  v68 = v20;
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v66 = (char *)v64 - v24;
  v25 = sub_2448EA500();
  v73 = *(_QWORD *)(v25 - 8);
  v74 = v25;
  MEMORY[0x24BDAC7A8](v25);
  v27 = *a1;
  LOBYTE(a2) = *a2;
  v75 = (char *)v64 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2448EA4F4();
  *(_QWORD *)(v9 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_options) = v27;
  *(_BYTE *)(v9 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_simulatorDiagnosticsDeviceSet) = (_BYTE)a2;
  if (!a6)
  {
    v28 = 0xE000000000000000;
    v70 = v17;
    if (!a8)
      goto LABEL_5;
    goto LABEL_3;
  }
  v76 = a5;
  v77 = a6;
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  a6 = v76;
  v28 = v77;
  v70 = v17;
  if (a8)
  {
LABEL_3:
    v76 = 45;
    v77 = 0xE100000000000000;
    sub_2448EABC0();
    swift_bridgeObjectRelease();
  }
LABEL_5:
  v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1500]), sel_init);
  v30 = (void *)sub_2448EAA70();
  objc_msgSend(v29, sel_setDateFormat_, v30);

  v76 = a6;
  v77 = v28;
  sub_2448EABC0();
  sub_2448EABC0();
  v31 = (void *)sub_2448EA4C4();
  v72 = v29;
  v32 = objc_msgSend(v29, sel_stringFromDate_, v31);

  sub_2448EAA94();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  v33 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v34 = objc_msgSend(v33, sel_environment);

  v35 = sub_2448EA800();
  if (*(_QWORD *)(v35 + 16) && (sub_244828D0C(0xD00000000000001ELL, 0x80000002448FCDA0), (v36 & 1) != 0))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v37 = v66;
    sub_2448EA3C8();
    swift_bridgeObjectRelease();
    v38 = v70;
    v39 = v71;
    v40 = v68;
    v41 = v69;
    v42 = 0x24BDD1000;
    v43 = (SEL *)&unk_251590000;
    v44 = v67;
  }
  else
  {
    v64[0] = v9;
    swift_bridgeObjectRelease();
    if (v65)
    {
      v38 = v70;
      v42 = 0x24BDD1000;
    }
    else
    {
      v45 = NSTemporaryDirectory();
      sub_2448EAA94();

      v38 = v70;
      v42 = 0x24BDD1000uLL;
    }
    v37 = v66;
    sub_2448EA3BC();
    swift_bridgeObjectRelease();
    sub_2448EA3EC();
    swift_bridgeObjectRelease();
    v44 = v67;
    v40 = v68;
    (*(void (**)(char *, uint64_t))(v67 + 8))(v23, v68);
    v39 = v71;
    v41 = v69;
    v43 = (SEL *)&unk_251590000;
    v9 = v64[0];
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v44 + 32))(v9 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_archive, v37, v40);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257390620);
  v46 = swift_allocObject();
  *(_DWORD *)(v46 + 32) = 0;
  v47 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v46 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v46 + 24) = v47;
  *(_QWORD *)(v9 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_state) = v46;
  v48 = objc_msgSend(objc_allocWithZone(*(Class *)(v42 + 1280)), v43[262]);
  sub_2448EA554();
  v49 = (void *)sub_2448EA560();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v19, v38);
  objc_msgSend(v48, sel_setLocale_, v49);

  v50 = (void *)sub_2448EAA70();
  objc_msgSend(v48, sel_setDateFormat_, v50);

  sub_2448EA578();
  v51 = sub_2448EA59C();
  v52 = *(_QWORD *)(v51 - 8);
  v53 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v39, 1, v51) != 1)
  {
    v53 = (void *)sub_2448EA584();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v39, v51);
  }
  objc_msgSend(v48, sel_setTimeZone_, v53);

  v54 = (void *)sub_2448EA4C4();
  v55 = objc_msgSend(v48, sel_stringFromDate_, v54);

  v71 = (char *)sub_2448EAA94();
  v56 = objc_msgSend(objc_allocWithZone(*(Class *)(v42 + 1280)), v43[262]);
  objc_msgSend(v56, sel_setTimeStyle_, 4);
  objc_msgSend(v56, sel_setDateStyle_, 4);
  v57 = (void *)sub_2448EA4C4();
  v58 = objc_msgSend(v56, sel_stringFromDate_, v57);

  v59 = sub_2448EAA94();
  v61 = v60;

  v62 = *(os_unfair_lock_s **)(v9 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_state);
  swift_retain();
  os_unfair_lock_lock(v62 + 8);
  sub_2448A04E0((uint64_t)&v62[4], v59, v61);
  os_unfair_lock_unlock(v62 + 8);
  swift_release();

  (*(void (**)(char *, uint64_t))(v73 + 8))(v75, v74);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_2448A04E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD **)(a1 + 8);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_2447C3328(0, v4[2] + 1, 1, v4);
    v4 = (_QWORD *)result;
  }
  v7 = v4[2];
  v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    result = (uint64_t)sub_2447C3328((_QWORD *)(v6 > 1), v7 + 1, 1, v4);
    v4 = (_QWORD *)result;
  }
  v4[2] = v7 + 1;
  v8 = &v4[4 * v7];
  v8[4] = 1702125892;
  v8[5] = 0xE400000000000000;
  v8[6] = a2;
  v8[7] = a3;
  *(_QWORD *)(a1 + 8) = v4;
  return result;
}

uint64_t sub_2448A05F4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD **v10;
  uint64_t result;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;

  v10 = (_QWORD **)(a1 + 8);
  if ((a2 & 1) != 0)
  {
    v12 = *v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_2447C3328(0, v12[2] + 1, 1, v12);
      v12 = (_QWORD *)result;
    }
    v14 = v12[2];
    v13 = v12[3];
    if (v14 >= v13 >> 1)
    {
      result = (uint64_t)sub_2447C3328((_QWORD *)(v13 > 1), v14 + 1, 1, v12);
      v12 = (_QWORD *)result;
    }
    v12[2] = v14 + 1;
    v15 = &v12[4 * v14];
    v15[4] = a3;
    v15[5] = a4;
    v15[6] = a5;
    v15[7] = a6;
    *v10 = v12;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (uint64_t)sub_24483CC80(0, 0, a3, a4, a5, a6);
  }
  return result;
}

Swift::Void __swiftcall DiagnosticsCollector.appendFileEntry(named:folderName:contents:)(Swift::String named, Swift::String_optional folderName, Swift::String contents)
{
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  object = contents._object;
  countAndFlagsBits = contents._countAndFlagsBits;
  v6 = folderName.value._object;
  v7 = folderName.value._countAndFlagsBits;
  v8 = named._object;
  v9 = named._countAndFlagsBits;
  v10 = *(_QWORD *)(v3 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_state);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v10 + 32));
  sub_2448A07AC((_QWORD **)(v10 + 16), v9, (uint64_t)v8, v7, (uint64_t)v6, countAndFlagsBits, (uint64_t)object);
  os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 32));
  swift_release();
}

uint64_t sub_2448A07AC(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t result;
  __int128 v19;
  ValueMetadata *v20;
  _UNKNOWN **v21;

  v13 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = sub_2447C3434(0, v13[2] + 1, 1, v13);
  v15 = v13[2];
  v14 = v13[3];
  if (v15 >= v14 >> 1)
    v13 = sub_2447C3434((_QWORD *)(v14 > 1), v15 + 1, 1, v13);
  v20 = &type metadata for DiagnosticsCollector.WriteFileAction;
  v21 = &off_251589C70;
  v16 = (_QWORD *)swift_allocObject();
  *(_QWORD *)&v19 = v16;
  v16[2] = a2;
  v16[3] = a3;
  v16[4] = a4;
  v16[5] = a5;
  v16[6] = a6;
  v16[7] = a7;
  v13[2] = v15 + 1;
  result = sub_2447F3530(&v19, (uint64_t)&v13[5 * v15 + 4]);
  *a1 = v13;
  return result;
}

uint64_t DiagnosticsCollector.copyNonUniqueDirectories(named:descendingFrom:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_state);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 32));
  sub_2448A095C((_QWORD **)(v7 + 16), a3, a1, a2);
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 32));
  return swift_release();
}

uint64_t sub_2448A095C(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  _UNKNOWN **v22;

  v8 = type metadata accessor for DiagnosticsCollector.CopyNonUniqueDirectoriesAction(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_2448EA434();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v10, a2, v11);
  v12 = &v10[*(int *)(v8 + 20)];
  *(_QWORD *)v12 = a3;
  *((_QWORD *)v12 + 1) = a4;
  v13 = *a1;
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v13 = sub_2447C3434(0, v13[2] + 1, 1, v13);
    *a1 = v13;
  }
  v16 = v13[2];
  v15 = v13[3];
  if (v16 >= v15 >> 1)
  {
    v13 = sub_2447C3434((_QWORD *)(v15 > 1), v16 + 1, 1, v13);
    *a1 = v13;
  }
  v21 = v8;
  v22 = &off_251589C80;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v20);
  sub_2447BD13C((uint64_t)v10, (uint64_t)boxed_opaque_existential_1, type metadata accessor for DiagnosticsCollector.CopyNonUniqueDirectoriesAction);
  v13[2] = v16 + 1;
  sub_2447F3530(&v20, (uint64_t)&v13[5 * v16 + 4]);
  return sub_2447BF330((uint64_t)v10, type metadata accessor for DiagnosticsCollector.CopyNonUniqueDirectoriesAction);
}

uint64_t DiagnosticsCollector.copyFiles(descendingFrom:intoFolderName:matching:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;

  v11 = *(_QWORD *)(v5 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_state);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 32));
  sub_2448A0B70((_QWORD **)(v11 + 16), a1, a2, a3, a4, a5);
  os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 32));
  return swift_release();
}

uint64_t sub_2448A0B70(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  _UNKNOWN **v27;

  v12 = type metadata accessor for DiagnosticsCollector.CopyFilesAction(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_2448EA434();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v14, a2, v15);
  v16 = &v14[*(int *)(v12 + 20)];
  *(_QWORD *)v16 = a3;
  *((_QWORD *)v16 + 1) = a4;
  v17 = &v14[*(int *)(v12 + 24)];
  *(_QWORD *)v17 = a5;
  *((_QWORD *)v17 + 1) = a6;
  v18 = *a1;
  swift_bridgeObjectRetain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v18;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v18 = sub_2447C3434(0, v18[2] + 1, 1, v18);
    *a1 = v18;
  }
  v21 = v18[2];
  v20 = v18[3];
  if (v21 >= v20 >> 1)
  {
    v18 = sub_2447C3434((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
    *a1 = v18;
  }
  v26 = v12;
  v27 = &off_251589C90;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v25);
  sub_2447BD13C((uint64_t)v14, (uint64_t)boxed_opaque_existential_1, type metadata accessor for DiagnosticsCollector.CopyFilesAction);
  v18[2] = v21 + 1;
  sub_2447F3530(&v25, (uint64_t)&v18[5 * v21 + 4]);
  return sub_2447BF330((uint64_t)v14, type metadata accessor for DiagnosticsCollector.CopyFilesAction);
}

uint64_t DiagnosticsCollector.writeFile(intoFolderName:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = *(_QWORD *)(v4 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_state);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 32));
  sub_2448A0DA0((_QWORD **)(v9 + 16), a1, a2, a3, a4);
  os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 32));
  return swift_release();
}

uint64_t sub_2448A0DA0(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t result;
  __int128 v15;
  ValueMetadata *v16;
  _UNKNOWN **v17;

  v10 = *a1;
  swift_bridgeObjectRetain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v10 = sub_2447C3434(0, v10[2] + 1, 1, v10);
  v12 = v10[2];
  v11 = v10[3];
  if (v12 >= v11 >> 1)
    v10 = sub_2447C3434((_QWORD *)(v11 > 1), v12 + 1, 1, v10);
  v16 = &type metadata for DiagnosticsCollector.DelayedFileWriteAction;
  v17 = &off_251589CA0;
  v13 = (_QWORD *)swift_allocObject();
  *(_QWORD *)&v15 = v13;
  v13[2] = a2;
  v13[3] = a3;
  v13[4] = a4;
  v13[5] = a5;
  v10[2] = v12 + 1;
  result = sub_2447F3530(&v15, (uint64_t)&v10[5 * v12 + 4]);
  *a1 = v10;
  return result;
}

uint64_t sub_2448A0EBC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  Swift::String v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v15;

  v2 = a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v15 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_2447CEE18(0, v4, 0);
    v5 = v3 + 56;
    do
    {
      sub_2448EA944();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_2448EABC0();
      swift_bridgeObjectRelease();
      sub_2448EABC0();
      v6._countAndFlagsBits = 538976288;
      v6._object = (void *)0xE400000000000000;
      String.prefixingEachLine(with:startingOnLine:)(v6, 0);
      sub_2448EABC0();
      swift_bridgeObjectRelease();
      sub_2448EABC0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v8 = *(_QWORD *)(v15 + 16);
      v7 = *(_QWORD *)(v15 + 24);
      if (v8 >= v7 >> 1)
        sub_2447CEE18(v7 > 1, v8 + 1, 1);
      v5 += 32;
      *(_QWORD *)(v15 + 16) = v8 + 1;
      v9 = v15 + 16 * v8;
      *(_QWORD *)(v9 + 32) = 2112829;
      *(_QWORD *)(v9 + 40) = 0xE300000000000000;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    v2 = a2;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A630);
  sub_2447D48B0();
  v10 = sub_2448EA9A4();
  v12 = v11;
  result = swift_bridgeObjectRelease();
  *v2 = v10;
  v2[1] = v12;
  return result;
}

uint64_t DiagnosticsCollector.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_archive;
  v2 = sub_2448EA434();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  return v0;
}

uint64_t DiagnosticsCollector.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_archive;
  v2 = sub_2448EA434();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  return swift_deallocClassInstance();
}

unint64_t sub_2448A1160()
{
  unint64_t result;

  result = qword_257390628;
  if (!qword_257390628)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for DiagnosticsLogPosition, &type metadata for DiagnosticsLogPosition);
    atomic_store(result, (unint64_t *)&qword_257390628);
  }
  return result;
}

unint64_t sub_2448A11A8()
{
  unint64_t result;

  result = qword_257390630;
  if (!qword_257390630)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for DiagnosticsCollector.Options, &type metadata for DiagnosticsCollector.Options);
    atomic_store(result, (unint64_t *)&qword_257390630);
  }
  return result;
}

unint64_t sub_2448A11F0()
{
  unint64_t result;

  result = qword_257390638;
  if (!qword_257390638)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for DiagnosticsCollector.Options, &type metadata for DiagnosticsCollector.Options);
    atomic_store(result, (unint64_t *)&qword_257390638);
  }
  return result;
}

unint64_t sub_2448A1238()
{
  unint64_t result;

  result = qword_257390640;
  if (!qword_257390640)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for DiagnosticsCollector.Options, &type metadata for DiagnosticsCollector.Options);
    atomic_store(result, (unint64_t *)&qword_257390640);
  }
  return result;
}

unint64_t sub_2448A1280()
{
  unint64_t result;

  result = qword_257390648;
  if (!qword_257390648)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for DiagnosticsCollector.Options, &type metadata for DiagnosticsCollector.Options);
    atomic_store(result, (unint64_t *)&qword_257390648);
  }
  return result;
}

unint64_t sub_2448A12C8()
{
  unint64_t result;

  result = qword_257390650;
  if (!qword_257390650)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for DiagnosticsCollector.SimulatorDiagnosticsDeviceSet, &type metadata for DiagnosticsCollector.SimulatorDiagnosticsDeviceSet);
    atomic_store(result, (unint64_t *)&qword_257390650);
  }
  return result;
}

ValueMetadata *type metadata accessor for DiagnosticsLogPosition()
{
  return &type metadata for DiagnosticsLogPosition;
}

uint64_t sub_2448A1320()
{
  return type metadata accessor for DiagnosticsCollector(0);
}

uint64_t type metadata accessor for DiagnosticsCollector(uint64_t a1)
{
  return sub_2447BD0C8(a1, qword_257390680);
}

uint64_t sub_2448A133C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2448EA434();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for DiagnosticsCollector()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DiagnosticsCollector.__allocating_init(options:simulatorDiagnosticsDeviceSet:outputDirectory:prefix:suffix:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

ValueMetadata *type metadata accessor for DiagnosticsCollector.Options()
{
  return &type metadata for DiagnosticsCollector.Options;
}

uint64_t _s20PreviewsFoundationOS20DiagnosticsCollectorC29SimulatorDiagnosticsDeviceSetOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2448A143C + 4 * byte_2448F5B55[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2448A1470 + 4 * byte_2448F5B50[v4]))();
}

uint64_t sub_2448A1470(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2448A1478(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2448A1480);
  return result;
}

uint64_t sub_2448A148C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2448A1494);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2448A1498(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2448A14A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DiagnosticsCollector.SimulatorDiagnosticsDeviceSet()
{
  return &type metadata for DiagnosticsCollector.SimulatorDiagnosticsDeviceSet;
}

ValueMetadata *type metadata accessor for DiagnosticsCollector.State()
{
  return &type metadata for DiagnosticsCollector.State;
}

uint64_t sub_2448A14CC()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for DiagnosticsCollector.CopyFilesAction(uint64_t a1)
{
  return sub_2447BD0C8(a1, qword_257390808);
}

uint64_t type metadata accessor for DiagnosticsCollector.CopyNonUniqueDirectoriesAction(uint64_t a1)
{
  return sub_2447BD0C8(a1, qword_257390778);
}

uint64_t sub_2448A1520()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

_QWORD *initializeWithCopy for DiagnosticsCollector.WriteFileAction(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for DiagnosticsCollector.WriteFileAction(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for DiagnosticsCollector.WriteFileAction(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for DiagnosticsCollector.WriteFileAction()
{
  return &type metadata for DiagnosticsCollector.WriteFileAction;
}

uint64_t *sub_2448A1698(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_2448EA434();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_2448A172C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2448EA434();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2448A1774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = sub_2448EA434();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_2448A17DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = sub_2448EA434();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_2448A1858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_2448EA434();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_2448A18B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_2448EA434();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_2448A1920()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2448A1930()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2448A1940()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2448EA434();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_2448A19B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_2448EA434();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)v4 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)v4 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_2448A1A58(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2448EA434();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_2448A1AB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = sub_2448EA434();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_2448A1B30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v6 = sub_2448EA434();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_2448A1BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_2448EA434();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_2448A1C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_2448EA434();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + *(int *)(a3 + 24)) = *(_OWORD *)(a2 + *(int *)(a3 + 24));
  swift_release();
  return a1;
}

uint64_t sub_2448A1CB8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_2448EA434();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_2448A1D48()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_2448EA434();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_2448A1DD4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2448EA434();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for DiagnosticsCollector.DelayedFileWriteAction(uint64_t a1, uint64_t a2)
{
  return sub_2448A1F7C(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t initializeWithCopy for DiagnosticsCollector.DelayedFileWriteAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for DiagnosticsCollector.DelayedFileWriteAction(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DiagnosticsCollector.DelayedFileWriteAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v4;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for DiagnosticsCollector.DelayedFileWriteAction()
{
  return &type metadata for DiagnosticsCollector.DelayedFileWriteAction;
}

uint64_t destroy for DiagnosticsCollector.LogAction(uint64_t a1, uint64_t a2)
{
  return sub_2448A1F7C(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t sub_2448A1F7C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  swift_bridgeObjectRelease();
  return a3(*(_QWORD *)(a1 + 24));
}

ValueMetadata *type metadata accessor for DiagnosticsCollector.LogAction()
{
  return &type metadata for DiagnosticsCollector.LogAction;
}

uint64_t Timestamp.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Timestamp.init(rawValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t static Timestamp.now()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = mach_absolute_time();
  *a1 = result;
  return result;
}

uint64_t *Timestamp.period(until:)@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *result;
  *a2 = *v2;
  a2[1] = v3;
  return result;
}

BOOL static Timestamp.< infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

unint64_t sub_2448A2034()
{
  unint64_t result;

  result = qword_257390848;
  if (!qword_257390848)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for Timestamp, &type metadata for Timestamp);
    atomic_store(result, (unint64_t *)&qword_257390848);
  }
  return result;
}

BOOL sub_2448A2078(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

BOOL sub_2448A208C(_QWORD *a1, _QWORD *a2)
{
  return *a2 >= *a1;
}

BOOL sub_2448A20A0(_QWORD *a1, _QWORD *a2)
{
  return *a1 >= *a2;
}

BOOL sub_2448A20B4(_QWORD *a1, _QWORD *a2)
{
  return *a2 < *a1;
}

ValueMetadata *type metadata accessor for Timestamp()
{
  return &type metadata for Timestamp;
}

uint64_t URL.appendingFile(_:)()
{
  return sub_2448EA3EC();
}

uint64_t URL.appendingDirectory(_:)()
{
  return sub_2448EA3EC();
}

uint64_t CrashReportError.UncaughtExceptionError.exception.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CrashReportError.UncaughtExceptionError.reason.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CrashReportError.UncaughtExceptionError.crashReport.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for CrashReportError.UncaughtExceptionError() + 28);
  return sub_2447F1688(v3, a1);
}

uint64_t type metadata accessor for CrashReportError.UncaughtExceptionError()
{
  uint64_t result;

  result = qword_2573908B0;
  if (!qword_2573908B0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t CrashReportError.UncaughtExceptionError.highValueTitle.getter()
{
  uint64_t *v0;
  uint64_t v1;

  sub_2448EB79C();
  v1 = *v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  return v1;
}

uint64_t CrashReportError.UncaughtExceptionError.additionalInfo.getter()
{
  sub_2448EB79C();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  return 0;
}

id sub_2448A2338()
{
  id v0;
  id result;

  v0 = objc_allocWithZone(MEMORY[0x24BDD1798]);
  result = sub_2448A3104(0xD000000000000045, 0x80000002448FCF40, 0);
  qword_257390850 = (uint64_t)result;
  return result;
}

uint64_t static CrashReportError.UncaughtExceptionError.asiRegularExpression.getter()
{
  uint64_t v0;
  id v1;

  if (qword_257389DC8 != -1)
    swift_once();
  swift_beginAccess();
  v0 = qword_257390850;
  v1 = (id)qword_257390850;
  return v0;
}

void static CrashReportError.UncaughtExceptionError.asiRegularExpression.setter(uint64_t a1)
{
  void *v2;

  if (qword_257389DC8 != -1)
    swift_once();
  swift_beginAccess();
  v2 = (void *)qword_257390850;
  qword_257390850 = a1;

}

uint64_t (*static CrashReportError.UncaughtExceptionError.asiRegularExpression.modify())()
{
  if (qword_257389DC8 != -1)
    swift_once();
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t CrashReportError.UncaughtExceptionError.init(report:asi:match:)@<X0>(uint64_t a1@<X0>, void *a2@<X3>, _QWORD *a3@<X8>)
{
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = (void *)sub_2448EAA70();
  swift_bridgeObjectRelease();
  v7 = (_QWORD *)(a1 + *(int *)(type metadata accessor for CrashReport(0) + 20));
  v8 = v7[1];
  *a3 = *v7;
  a3[1] = v8;
  swift_bridgeObjectRetain();
  v9 = (void *)sub_2448EAA70();
  v10 = objc_msgSend(a2, sel_rangeWithName_, v9);
  v12 = v11;

  v13 = objc_msgSend(v6, sel_substringWithRange_, v10, v12);
  sub_2448EAA94();

  a3[2] = sub_2448EAC98();
  a3[3] = v14;
  v15 = (void *)sub_2448EAA70();
  v16 = objc_msgSend(a2, sel_rangeWithName_, v15);
  v18 = v17;

  v19 = objc_msgSend(v6, sel_substringWithRange_, v16, v18);
  sub_2448EAA94();

  v20 = sub_2448EAC98();
  v22 = v21;

  a3[4] = v20;
  a3[5] = v22;
  v23 = type metadata accessor for CrashReportError.UncaughtExceptionError();
  sub_244819704(a1, (uint64_t)a3 + *(int *)(v23 + 28));
  return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a3, 0, 1, v23);
}

uint64_t sub_2448A2734@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2447F1688(v2 + *(int *)(a1 + 28), a2);
}

uint64_t *_s22UncaughtExceptionErrorVwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v31 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v31 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[5];
    v8 = *(int *)(a3 + 28);
    v9 = (char *)a2 + v8;
    v10 = (char *)a1 + v8;
    a1[4] = a2[4];
    a1[5] = v7;
    v11 = sub_2448EA548();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v10, v9, v11);
    v13 = (int *)type metadata accessor for CrashReport(0);
    v14 = v13[5];
    v15 = &v10[v14];
    v16 = &v9[v14];
    v17 = *((_QWORD *)v16 + 1);
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *((_QWORD *)v15 + 1) = v17;
    v18 = v13[6];
    v19 = &v10[v18];
    v20 = &v9[v18];
    v21 = *((_QWORD *)v20 + 1);
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *((_QWORD *)v19 + 1) = v21;
    *(_DWORD *)&v10[v13[7]] = *(_DWORD *)&v9[v13[7]];
    v22 = v13[8];
    v23 = &v10[v22];
    v24 = &v9[v22];
    v25 = sub_2448EA500();
    v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v26(v23, v24, v25);
    *(_QWORD *)&v10[v13[9]] = *(_QWORD *)&v9[v13[9]];
    *(_QWORD *)&v10[v13[10]] = *(_QWORD *)&v9[v13[10]];
    *(_QWORD *)&v10[v13[11]] = *(_QWORD *)&v9[v13[11]];
    v27 = v13[12];
    v28 = &v10[v27];
    v29 = &v9[v27];
    v30 = *((_QWORD *)v29 + 1);
    *(_QWORD *)v28 = *(_QWORD *)v29;
    *((_QWORD *)v28 + 1) = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v3;
}

uint64_t _s22UncaughtExceptionErrorVwxx(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_2448EA548();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = type metadata accessor for CrashReport(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = v4 + *(int *)(v6 + 32);
  v8 = sub_2448EA500();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s22UncaughtExceptionErrorVwcp(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  v7 = *(int *)(a3 + 28);
  v8 = (char *)a2 + v7;
  v9 = (char *)a1 + v7;
  a1[4] = a2[4];
  a1[5] = v6;
  v10 = sub_2448EA548();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v9, v8, v10);
  v12 = (int *)type metadata accessor for CrashReport(0);
  v13 = v12[5];
  v14 = &v9[v13];
  v15 = &v8[v13];
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v16;
  v17 = v12[6];
  v18 = &v9[v17];
  v19 = &v8[v17];
  v20 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *((_QWORD *)v18 + 1) = v20;
  *(_DWORD *)&v9[v12[7]] = *(_DWORD *)&v8[v12[7]];
  v21 = v12[8];
  v22 = &v9[v21];
  v23 = &v8[v21];
  v24 = sub_2448EA500();
  v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v25(v22, v23, v24);
  *(_QWORD *)&v9[v12[9]] = *(_QWORD *)&v8[v12[9]];
  *(_QWORD *)&v9[v12[10]] = *(_QWORD *)&v8[v12[10]];
  *(_QWORD *)&v9[v12[11]] = *(_QWORD *)&v8[v12[11]];
  v26 = v12[12];
  v27 = &v9[v26];
  v28 = &v8[v26];
  v29 = *((_QWORD *)v28 + 1);
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *((_QWORD *)v27 + 1) = v29;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s22UncaughtExceptionErrorVwca(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2448EA548();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = (int *)type metadata accessor for CrashReport(0);
  v11 = v10[5];
  v12 = &v7[v11];
  v13 = &v8[v11];
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = v10[6];
  v15 = &v7[v14];
  v16 = &v8[v14];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  v17 = v10[8];
  v18 = &v7[v17];
  v19 = &v8[v17];
  v20 = sub_2448EA500();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v18, v19, v20);
  *(_QWORD *)&v7[v10[9]] = *(_QWORD *)&v8[v10[9]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v7[v10[10]] = *(_QWORD *)&v8[v10[10]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v7[v10[11]] = *(_QWORD *)&v8[v10[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21 = v10[12];
  v22 = &v7[v21];
  v23 = &v8[v21];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *((_QWORD *)v22 + 1) = *((_QWORD *)v23 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *_s22UncaughtExceptionErrorVwtk(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 28);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_2448EA548();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  v9 = (int *)type metadata accessor for CrashReport(0);
  *(_OWORD *)&v6[v9[5]] = *(_OWORD *)&v7[v9[5]];
  *(_OWORD *)&v6[v9[6]] = *(_OWORD *)&v7[v9[6]];
  *(_DWORD *)&v6[v9[7]] = *(_DWORD *)&v7[v9[7]];
  v10 = v9[8];
  v11 = &v6[v10];
  v12 = &v7[v10];
  v13 = sub_2448EA500();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  *(_QWORD *)&v6[v9[9]] = *(_QWORD *)&v7[v9[9]];
  *(_QWORD *)&v6[v9[10]] = *(_QWORD *)&v7[v9[10]];
  *(_QWORD *)&v6[v9[11]] = *(_QWORD *)&v7[v9[11]];
  *(_OWORD *)&v6[v9[12]] = *(_OWORD *)&v7[v9[12]];
  return a1;
}

_QWORD *_s22UncaughtExceptionErrorVwta(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  v9 = *(int *)(a3 + 28);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = sub_2448EA548();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = (int *)type metadata accessor for CrashReport(0);
  v14 = v13[5];
  v15 = &v10[v14];
  v16 = &v11[v14];
  v18 = *(_QWORD *)v16;
  v17 = *((_QWORD *)v16 + 1);
  *(_QWORD *)v15 = v18;
  *((_QWORD *)v15 + 1) = v17;
  swift_bridgeObjectRelease();
  v19 = v13[6];
  v20 = &v10[v19];
  v21 = &v11[v19];
  v23 = *(_QWORD *)v21;
  v22 = *((_QWORD *)v21 + 1);
  *(_QWORD *)v20 = v23;
  *((_QWORD *)v20 + 1) = v22;
  swift_bridgeObjectRelease();
  *(_DWORD *)&v10[v13[7]] = *(_DWORD *)&v11[v13[7]];
  v24 = v13[8];
  v25 = &v10[v24];
  v26 = &v11[v24];
  v27 = sub_2448EA500();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 40))(v25, v26, v27);
  *(_QWORD *)&v10[v13[9]] = *(_QWORD *)&v11[v13[9]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v10[v13[10]] = *(_QWORD *)&v11[v13[10]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v10[v13[11]] = *(_QWORD *)&v11[v13[11]];
  swift_bridgeObjectRelease();
  v28 = v13[12];
  v29 = &v10[v28];
  v30 = &v11[v28];
  v32 = *(_QWORD *)v30;
  v31 = *((_QWORD *)v30 + 1);
  *(_QWORD *)v29 = v32;
  *((_QWORD *)v29 + 1) = v31;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s22UncaughtExceptionErrorVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2448A2F90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for CrashReport(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t _s22UncaughtExceptionErrorVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2448A3018(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for CrashReport(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_2448A308C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CrashReport(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

id sub_2448A3104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10[2];

  v10[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = (void *)sub_2448EAA70();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  v6 = objc_msgSend(v3, sel_initWithPattern_options_error_, v5, a3, v10);

  if (v6)
  {
    v7 = v10[0];
  }
  else
  {
    v8 = v10[0];
    sub_2448EA38C();

    swift_willThrow();
  }
  return v6;
}

uint64_t FutureState.map<A>(_:)@<X0>(void (*a1)(_QWORD *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = v5;
  v12 = type metadata accessor for FutureTermination(0, *(_QWORD *)(a3 + 16), a3, a4);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v27 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v18, v6, a3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v18, 1, v12) == 1)
  {
    v22 = type metadata accessor for FutureTermination(0, a4, v20, v21);
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a5, 1, 1, v22);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v18, v12);
    FutureTermination.map<A>(_:)(a1, a2, v12, a4, a5);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    v26 = type metadata accessor for FutureTermination(0, a4, v24, v25);
    return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(a5, 0, 1, v26);
  }
}

uint64_t FutureState.mapSuccess<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD v6[6];

  v6[2] = *(_QWORD *)(a3 + 16);
  v6[3] = a4;
  v6[4] = a1;
  v6[5] = a2;
  return FutureState.map<A>(_:)((void (*)(_QWORD *))sub_2448A3404, (uint64_t)v6, a3, a4, a5);
}

uint64_t sub_2448A3384@<X0>(void (*a1)(char *)@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v4 = sub_2448EBD48();
  return sub_2448A6CDC(a1, v4, a2);
}

uint64_t sub_2448A3404@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2448A3384(*(void (**)(char *))(v1 + 32), a1);
}

uint64_t FutureState.succeededValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v5 = v4;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = type metadata accessor for FutureTermination(0, v8, a2, a3);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v18 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v15, v5, a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a4, 1, 1, v8);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v15, v9);
  FutureTermination.succeededValue.getter(v9, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t FutureState.failedError.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v5 = v4;
  v7 = type metadata accessor for FutureTermination(0, *(_QWORD *)(a1 + 16), a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v17 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v13, v5, a1);
  v15 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v13, v7);
    v15 = FutureTermination.failedError.getter(v7);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
  return v15;
}

uint64_t FutureState.completedResult.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v7 = type metadata accessor for FutureTermination(0, *(_QWORD *)(a1 + 16), a2, a3);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v17 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v13, v4, a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7) == 1)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
    v15 = sub_2448EBD48();
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a4, 1, 1, v15);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v13, v7);
    FutureTermination.completedResult.getter(v7, a4);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
}

uint64_t FutureState.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v5 = v4;
  v7 = type metadata accessor for FutureTermination(0, *(_QWORD *)(a1 + 16), a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v17 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v13, v5, a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7) == 1)
    return 0x676E696E6E7572;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v13, v7);
  v15 = FutureTermination.description.getter(v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return v15;
}

BOOL FutureState.isRunning.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  v7 = type metadata accessor for FutureTermination(0, *(_QWORD *)(a1 + 16), v5, v6);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v4, 1, v7);
  if (v8 != 1)
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v8 == 1;
}

BOOL FutureState.isCanceled.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v17;

  v5 = v4;
  v7 = type metadata accessor for FutureTermination(0, *(_QWORD *)(a1 + 16), a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v17 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v13, v5, a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7) == 1)
  {
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v13, v7);
    v15 = FutureTermination.isCanceled.getter(v7);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
  return v15;
}

uint64_t sub_2448A3A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for FutureTermination(319, *(_QWORD *)(a1 + 16), a3, a4);
  if (v5 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

char *sub_2448A3AB8(char *__dst, _OWORD *a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  id v11;
  __int128 v12;

  v3 = __dst;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x39uLL)
    v5 = 57;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v8 = *(char **)a2;
    *(_QWORD *)v3 = *(_QWORD *)a2;
    v3 = &v8[(unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8];
    swift_retain();
  }
  else
  {
    v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 > 2)
    {
      memcpy(__dst, a2, v5 + 1);
    }
    else if (v9 == 2)
    {
      v12 = a2[1];
      *(_OWORD *)__dst = *a2;
      *((_OWORD *)__dst + 1) = v12;
      *((_OWORD *)__dst + 2) = a2[2];
      *(_OWORD *)(__dst + 41) = *(_OWORD *)((char *)a2 + 41);
      __dst[v5] = 2;
    }
    else if (v9 == 1)
    {
      v10 = *(_QWORD *)a2;
      v11 = *(id *)a2;
      *(_QWORD *)v3 = v10;
      v3[v5] = 1;
    }
    else
    {
      (*(void (**)(char *))(v4 + 16))(__dst);
      v3[v5] = 0;
    }
  }
  return v3;
}

void sub_2448A3BB0(id *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 0x39)
    v3 = 57;
  v4 = *((unsigned __int8 *)a1 + v3);
  if (v4 <= 2 && v4 != 2)
  {
    if (v4 == 1)

    else
      (*(void (**)(void))(v2 + 8))();
  }
}

char *sub_2448A3BF4(char *__dst, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  id v8;
  __int128 v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x39uLL)
    v5 = 57;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 > 2)
  {
    memcpy(__dst, a2, v5 + 1);
  }
  else if (v6 == 2)
  {
    v9 = a2[1];
    *(_OWORD *)__dst = *a2;
    *((_OWORD *)__dst + 1) = v9;
    *((_OWORD *)__dst + 2) = a2[2];
    *(_OWORD *)(__dst + 41) = *(_OWORD *)((char *)a2 + 41);
    __dst[v5] = 2;
  }
  else if (v6 == 1)
  {
    v7 = *(_QWORD *)a2;
    v8 = *(id *)a2;
    *(_QWORD *)__dst = v7;
    __dst[v5] = 1;
  }
  else
  {
    (*(void (**)(char *))(v4 + 16))(__dst);
    __dst[v5] = 0;
  }
  return __dst;
}

__int128 *sub_2448A3CAC(__int128 *__dst, __int128 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  void *v14;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) <= 0x39uLL)
    v7 = 57;
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *((unsigned __int8 *)__dst + v7);
  v9 = *((unsigned __int8 *)__src + v7);
  if (v8 > 2)
  {
    if (v9 <= 2)
    {
      if (v9 == 2)
      {
        v10 = *__src;
        v11 = __src[1];
        v12 = __src[2];
        *(__int128 *)((char *)__dst + 41) = *(__int128 *)((char *)__src + 41);
        __dst[1] = v11;
        __dst[2] = v12;
        *__dst = v10;
        LOBYTE(v9) = 2;
LABEL_29:
        *((_BYTE *)__dst + v7) = v9;
        return __dst;
      }
      goto LABEL_25;
    }
LABEL_17:
    memcpy(__dst, __src, v7 + 1);
    return __dst;
  }
  if (v9 > 2)
  {
    if (v8 != 2)
    {
      if (v8 == 1)

      else
        (*(void (**)(__int128 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    }
    goto LABEL_17;
  }
  if (__dst == __src)
    return __dst;
  if (*((_BYTE *)__dst + v7))
  {
    if (v8 != 1)
      goto LABEL_24;

  }
  else
  {
    (*(void (**)(__int128 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
  }
  v9 = *((unsigned __int8 *)__src + v7);
  if (v9 >= 3)
  {
    if (v7 <= 3)
      v13 = v7;
    else
      v13 = 4;
    __asm { BR              X12 }
  }
LABEL_24:
  if (v9 == 2)
  {
    v16 = *__src;
    v17 = __src[1];
    v18 = __src[2];
    *(__int128 *)((char *)__dst + 41) = *(__int128 *)((char *)__src + 41);
    __dst[1] = v17;
    __dst[2] = v18;
    *__dst = v16;
    goto LABEL_29;
  }
LABEL_25:
  if (v9 == 1)
  {
    v14 = *(void **)__src;
    v15 = v14;
    *(_QWORD *)__dst = v14;
    LOBYTE(v9) = 1;
    goto LABEL_29;
  }
  (*(void (**)(__int128 *, __int128 *, uint64_t))(v6 + 16))(__dst, __src, v5);
  *((_BYTE *)__dst + v7) = 0;
  return __dst;
}

char *sub_2448A3E80(char *__dst, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  __int128 v7;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x39uLL)
    v5 = 57;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 > 2)
  {
    memcpy(__dst, a2, v5 + 1);
  }
  else if (v6 == 2)
  {
    v7 = a2[1];
    *(_OWORD *)__dst = *a2;
    *((_OWORD *)__dst + 1) = v7;
    *((_OWORD *)__dst + 2) = a2[2];
    *(_OWORD *)(__dst + 41) = *(_OWORD *)((char *)a2 + 41);
    __dst[v5] = 2;
  }
  else if (v6 == 1)
  {
    *(_QWORD *)__dst = *(_QWORD *)a2;
    __dst[v5] = 1;
  }
  else
  {
    (*(void (**)(char *))(v4 + 32))(__dst);
    __dst[v5] = 0;
  }
  return __dst;
}

_OWORD *sub_2448A3F28(_OWORD *__dst, _OWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) <= 0x39uLL)
    v7 = 57;
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *((unsigned __int8 *)__dst + v7);
  v9 = *((unsigned __int8 *)__src + v7);
  if (v8 > 2)
  {
    if (v9 <= 2)
    {
      if (v9 == 2)
      {
        v10 = __src[1];
        *__dst = *__src;
        __dst[1] = v10;
        __dst[2] = __src[2];
        *(_OWORD *)((char *)__dst + 41) = *(_OWORD *)((char *)__src + 41);
        LOBYTE(v9) = 2;
LABEL_29:
        *((_BYTE *)__dst + v7) = v9;
        return __dst;
      }
      goto LABEL_25;
    }
LABEL_17:
    memcpy(__dst, __src, v7 + 1);
    return __dst;
  }
  if (v9 > 2)
  {
    if (v8 != 2)
    {
      if (v8 == 1)

      else
        (*(void (**)(_OWORD *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    }
    goto LABEL_17;
  }
  if (__dst == __src)
    return __dst;
  if (*((_BYTE *)__dst + v7))
  {
    if (v8 != 1)
      goto LABEL_24;

  }
  else
  {
    (*(void (**)(_OWORD *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
  }
  v9 = *((unsigned __int8 *)__src + v7);
  if (v9 >= 3)
  {
    if (v7 <= 3)
      v11 = v7;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
LABEL_24:
  if (v9 == 2)
  {
    v12 = __src[1];
    *__dst = *__src;
    __dst[1] = v12;
    __dst[2] = __src[2];
    *(_OWORD *)((char *)__dst + 41) = *(_OWORD *)((char *)__src + 41);
    goto LABEL_29;
  }
LABEL_25:
  if (v9 == 1)
  {
    *(_QWORD *)__dst = *(_QWORD *)__src;
    LOBYTE(v9) = 1;
    goto LABEL_29;
  }
  (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v6 + 32))(__dst, __src, v5);
  *((_BYTE *)__dst + v7) = 0;
  return __dst;
}

uint64_t sub_2448A40F4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;

  v3 = 57;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 0x39uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) > 3)
    goto LABEL_6;
  v8 = ((a2 + ~(-1 << v5) - 252) >> v5) + 1;
  if (HIWORD(v8))
  {
    v6 = *(_DWORD *)(a1 + v4);
    if (v6)
      goto LABEL_14;
LABEL_21:
    v10 = *(unsigned __int8 *)(a1 + v3);
    if (v10 >= 3)
      v11 = (v10 ^ 0xFF) + 1;
    else
      v11 = 0;
    if (v11 >= 2)
      return v11 - 1;
    else
      return 0;
  }
  if (v8 > 0xFF)
  {
    v6 = *(unsigned __int16 *)(a1 + v4);
    if (*(_WORD *)(a1 + v4))
      goto LABEL_14;
    goto LABEL_21;
  }
  if (v8 < 2)
    goto LABEL_21;
LABEL_6:
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 253);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2448A41B8 + 4 * byte_2448F60CA[(v4 - 1)]))();
}

void sub_2448A4210(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x39)
    v5 = 57;
  v6 = v5 + 1;
  if (a3 < 0xFD)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 252) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFC)
    __asm { BR              X11 }
  v8 = a2 - 253;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_2448A43B8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (v2 <= 0x39)
    v2 = 57;
  v3 = *(unsigned __int8 *)(a1 + v2);
  if (v3 >= 3)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

void *sub_2448A43E4(void *result, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  size_t v4;
  int v5;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (v3 <= 0x39)
    v3 = 57;
  if (a2 > 0xFD)
  {
    v4 = (v3 + 1);
    if ((_DWORD)v4)
    {
      if (v4 <= 3)
        v5 = v4;
      else
        v5 = 4;
      bzero(result, v4);
      __asm { BR              X10 }
    }
  }
  else if (a2)
  {
    *((_BYTE *)result + v3) = -(char)a2;
  }
  return result;
}

uint64_t type metadata accessor for FutureState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FutureState);
}

uint64_t Collection.pluralize(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (sub_2448EB1F0() == 1)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    if (a4)
      return a3;
    else
      sub_2448EABC0();
  }
  return a1;
}

uint64_t Int.pluralize(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a1;
  if (a5 == 1)
  {
    swift_bridgeObjectRetain();
  }
  else if (a4)
  {
    swift_bridgeObjectRetain();
    return a3;
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_2448EABC0();
    return a1;
  }
  return v5;
}

uint64_t Collection.countDescription(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2448EB1F0();
  return sub_2448A4634(a1, a2, v4);
}

uint64_t Int.countDescription(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_2448A4634(a1, a2, a5);
}

uint64_t sub_2448A4634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = sub_2448EBB5C();
  sub_2448EABC0();
  swift_bridgeObjectRetain();
  if (a3 != 1)
    sub_2448EABC0();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t getEnumTagSinglePayload for PluralizationStrategy(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PluralizationStrategy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

_QWORD *sub_2448A478C(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for PluralizationStrategy()
{
  return &type metadata for PluralizationStrategy;
}

uint64_t Issue.Identifier.rawValue.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Issue.Identifier.rawValue.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*Issue.Identifier.rawValue.modify())()
{
  return nullsub_1;
}

PreviewsFoundationOS::Issue::Identifier __swiftcall Issue.Identifier.init(rawValue:)(PreviewsFoundationOS::Issue::Identifier rawValue)
{
  PreviewsFoundationOS::Issue::Identifier *v1;

  *v1 = rawValue;
  return rawValue;
}

uint64_t sub_2448A4834()
{
  sub_2448EBD00();
  swift_bridgeObjectRetain();
  sub_2448EAB60();
  swift_bridgeObjectRelease();
  return sub_2448EBD3C();
}

uint64_t sub_2448A488C()
{
  swift_bridgeObjectRetain();
  sub_2448EAB60();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2448A48D0()
{
  sub_2448EBD00();
  swift_bridgeObjectRetain();
  sub_2448EAB60();
  swift_bridgeObjectRelease();
  return sub_2448EBD3C();
}

uint64_t sub_2448A4924(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_2448EBBEC();
}

BOOL static Issue.Severity.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t Issue.Severity.hash(into:)()
{
  return sub_2448EBD0C();
}

uint64_t Issue.Severity.hashValue.getter()
{
  sub_2448EBD00();
  sub_2448EBD0C();
  return sub_2448EBD3C();
}

uint64_t Issue.identifier.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t Issue.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Issue() + 20);
  v4 = sub_2448EA500();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for Issue()
{
  uint64_t result;

  result = qword_2573909D8;
  if (!qword_2573909D8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t Issue.location.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for Issue() + 24);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v3 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v3 + 24);
  return swift_bridgeObjectRetain();
}

uint64_t Issue.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Issue() + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Issue.severity.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Issue();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 32));
  return result;
}

uint64_t Issue.init(identifier:timestamp:location:severity:description:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  char v24;

  v11 = a1[1];
  v12 = *a3;
  v13 = a3[1];
  v15 = a3[2];
  v14 = a3[3];
  v23 = a3[4];
  v24 = *a4;
  if (v11)
  {
    v16 = *a1;
  }
  else
  {
    swift_bridgeObjectRetain();
    v16 = a5;
    v11 = a6;
  }
  *a7 = v16;
  a7[1] = v11;
  v17 = (int *)type metadata accessor for Issue();
  v18 = (char *)a7 + v17[5];
  v19 = sub_2448EA500();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18, a2, v19);
  v21 = (_QWORD *)((char *)a7 + v17[6]);
  *v21 = v12;
  v21[1] = v13;
  v21[2] = v15;
  v21[3] = v14;
  v21[4] = v23;
  v22 = (_QWORD *)((char *)a7 + v17[7]);
  *v22 = a5;
  v22[1] = a6;
  *((_BYTE *)a7 + v17[8]) = v24;
  return result;
}

unint64_t sub_2448A4C0C()
{
  unint64_t result;

  result = qword_257390970;
  if (!qword_257390970)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for Issue.Identifier, &type metadata for Issue.Identifier);
    atomic_store(result, (unint64_t *)&qword_257390970);
  }
  return result;
}

unint64_t sub_2448A4C54()
{
  unint64_t result;

  result = qword_257390978;
  if (!qword_257390978)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for Issue.Severity, &type metadata for Issue.Severity);
    atomic_store(result, (unint64_t *)&qword_257390978);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for Issue(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_2448EA500();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (char *)v4 + v13;
    v16 = (char *)a2 + v13;
    v17 = *((_QWORD *)v16 + 1);
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *((_QWORD *)v15 + 1) = v17;
    *((_OWORD *)v15 + 1) = *((_OWORD *)v16 + 1);
    *((_QWORD *)v15 + 4) = *((_QWORD *)v16 + 4);
    v18 = (_QWORD *)((char *)v4 + v14);
    v19 = (_QWORD *)((char *)a2 + v14);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    *((_BYTE *)v4 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for Issue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_2448EA500();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for Issue(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_2448EA500();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = a3[7];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v16;
  *((_OWORD *)v14 + 1) = *((_OWORD *)v15 + 1);
  *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
  v17 = (_QWORD *)((char *)a1 + v13);
  v18 = (_QWORD *)((char *)a2 + v13);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Issue(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2448EA500();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  *v11 = *(_QWORD *)((char *)a2 + v10);
  v11[1] = *(_QWORD *)((char *)a2 + v10 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11[2] = v12[2];
  v11[3] = v12[3];
  v11[4] = v12[4];
  v13 = a3[7];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

_OWORD *initializeWithTake for Issue(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2448EA500();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = (char *)a1 + v10;
  v13 = (char *)a2 + v10;
  v14 = *(_OWORD *)v13;
  v15 = *((_OWORD *)v13 + 1);
  *((_QWORD *)v12 + 4) = *((_QWORD *)v13 + 4);
  *(_OWORD *)v12 = v14;
  *((_OWORD *)v12 + 1) = v15;
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

_QWORD *assignWithTake for Issue(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_2448EA500();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = *(_QWORD *)((char *)a2 + v11 + 8);
  *(_QWORD *)v12 = *(_QWORD *)((char *)a2 + v11);
  *((_QWORD *)v12 + 1) = v14;
  swift_bridgeObjectRelease();
  *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
  *((_QWORD *)v12 + 4) = *((_QWORD *)v13 + 4);
  v15 = a3[7];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

uint64_t getEnumTagSinglePayload for Issue()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2448A513C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_2448EA500();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for Issue()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2448A51C4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_2448EA500();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_2448A5238()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2448EA500();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Issue.Identifier()
{
  return &type metadata for Issue.Identifier;
}

uint64_t initializeWithCopy for Issue.Location(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Issue.Location(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for Issue.Location(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for Issue.Location(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Issue.Location(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

double sub_2448A5460(uint64_t a1, int a2)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for Issue.Location()
{
  return &type metadata for Issue.Location;
}

uint64_t storeEnumTagSinglePayload for Issue.Severity(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2448A54E8 + 4 * byte_2448F6195[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2448A551C + 4 * asc_2448F6190[v4]))();
}

uint64_t sub_2448A551C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2448A5524(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2448A552CLL);
  return result;
}

uint64_t sub_2448A5538(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2448A5540);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2448A5544(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2448A554C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Issue.Severity()
{
  return &type metadata for Issue.Severity;
}

uint64_t FixedStack.push(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_2448A5D88(a2, a2, a3, a4);
  return sub_2448A57C8(a1) & 1;
}

_QWORD *FixedStack.init(capacity:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;

  type metadata accessor for FixedStack.Implementation(0, a1, a2, a3);
  v5 = sub_2448EB52C();
  v7 = v6;
  result = (_QWORD *)swift_allocObject();
  result[2] = v5;
  result[3] = v7;
  result[4] = 0;
  *a4 = result;
  return result;
}

uint64_t FixedStack.pop()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_2448A5D88(a1, a2, a3, a4);
  return sub_2448A58A8(a5);
}

uint64_t FixedStack.endIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 32);
}

uint64_t FixedStack.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2448A5988(a1, a2);
}

_QWORD *sub_2448A5658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  return result;
}

uint64_t sub_2448A569C()
{
  uint64_t v0;
  uint64_t result;

  result = sub_2448EB520();
  if (result)
  {
    sub_2448EB4F0();
    sub_2448EB514();
    return v0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_2448A5704()
{
  sub_2448A569C();
  return swift_deallocClassInstance();
}

_QWORD *sub_2448A5720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;

  v1 = sub_2448EB52C();
  v3 = v2;
  result = (_QWORD *)sub_2448EB520();
  if (result)
  {
    result = (_QWORD *)sub_2448EB520();
    if (result)
    {
      sub_2448EB4FC();
      v5 = *(_QWORD *)(v0 + 32);
      result = (_QWORD *)swift_allocObject();
      result[2] = v1;
      result[3] = v3;
      result[4] = v5;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_2448A57C8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(*v1 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[3];
  v8 = v1[4];
  if (v8 >= v7)
    return v8 < v7;
  result = sub_2448EB520();
  if (result)
  {
    v10 = result + *(_QWORD *)(v4 + 72) * v1[4];
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
    result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(v10, v6, v3);
    v11 = v1[4];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (!v12)
    {
      v1[4] = v13;
      return v8 < v7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_2448A58A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *v1;
  if (v1[4] < 1)
  {
    v15 = *(_QWORD *)(v3 + 80);
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
    v13 = a1;
    v14 = 1;
    return v12(v13, v14, 1, v15);
  }
  v4 = *(_QWORD *)(v3 + 80);
  result = sub_2448EB520();
  if (result)
  {
    v6 = v1[4];
    v7 = __OFSUB__(v6, 1);
    v8 = v6 - 1;
    if (v7)
    {
      __break(1u);
    }
    else
    {
      v9 = *(_QWORD *)(v4 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a1, result + *(_QWORD *)(v9 + 72) * v8, v4);
      result = sub_2448EB4F0();
      v10 = v1[4];
      v7 = __OFSUB__(v10, 1);
      v11 = v10 - 1;
      if (!v7)
      {
        v1[4] = v11;
        v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
        v13 = a1;
        v14 = 0;
        v15 = v4;
        return v12(v13, v14, 1, v15);
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_2448A5980()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t sub_2448A5988@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = v2;
  if (v3[4] > a1)
  {
    v6 = *(_QWORD *)(*v3 + 80);
    v7 = sub_2448EB520();
    if (v7)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, v7 + *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72) * a1, v6);
    __break(1u);
  }
  sub_2448EB79C();
  sub_2448EABC0();
  sub_2448EBB5C();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  sub_2448EBB5C();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  sub_2448EBB5C();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  result = sub_2448EB9A0();
  __break(1u);
  return result;
}

uint64_t sub_2448A5B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x24951AC70](&unk_2448F68C0, a4);
  return sub_2448EB19C();
}

uint64_t sub_2448A5BB4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_2448A5980();
  *a1 = result;
  return result;
}

uint64_t (*sub_2448A5BDC(_QWORD *a1, uint64_t *a2))()
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_2448A5C2C(v4, *a2);
  return sub_2447DB4C4;
}

uint64_t (*sub_2448A5C2C(_QWORD *a1, uint64_t a2))()
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v5 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  v6 = *(_QWORD *)(v5 - 8);
  *a1 = v5;
  a1[1] = v6;
  v7 = malloc(*(_QWORD *)(v6 + 64));
  a1[2] = v7;
  sub_2448A5988(a2, (uint64_t)v7);
  return sub_2447DB54C;
}

uint64_t sub_2448A5C8C(uint64_t a1)
{
  MEMORY[0x24951AC70](&unk_2448F68C0, a1);
  return sub_2448EB1CC();
}

uint64_t sub_2448A5CD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2448A6938(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07E0]);
}

uint64_t sub_2448A5CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2448A6938(a1, a2, a3, a4, MEMORY[0x24BEE08B8], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07F0]);
}

uint64_t sub_2448A5D20(uint64_t a1)
{
  MEMORY[0x24951AC70](&unk_2448F6780, a1);
  return sub_2448EB22C();
}

uint64_t sub_2448A5D54(uint64_t a1)
{
  MEMORY[0x24951AC70](&unk_2448F6780, a1);
  return sub_2448EB238();
}

uint64_t sub_2448A5D88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  type metadata accessor for FixedStack.Implementation(0, *(_QWORD *)(a1 + 16), a3, a4);
  result = sub_2448EBB98();
  if ((result & 1) == 0)
  {
    v6 = sub_2448A5720();
    result = swift_release();
    *v4 = v6;
  }
  return result;
}

uint64_t type metadata accessor for FixedStack.Implementation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FixedStack.Implementation);
}

uint64_t FixedStack.startIndex.getter()
{
  return 0;
}

Swift::Int __swiftcall FixedStack.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Int __swiftcall FixedStack.index(before:)(Swift::Int before)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFSUB__(before, 1);
  result = before - 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Int __swiftcall FixedStack.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFADD__(_, offsetBy);
  result = _ + offsetBy;
  if (v2)
    __break(1u);
  return result;
}

Swift::Int __swiftcall FixedStack.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFSUB__(to, from);
  result = to - from;
  if (v2)
    __break(1u);
  return result;
}

uint64_t sub_2448A5E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for FixedStack<A>, a4);
  return sub_2448EB19C();
}

uint64_t sub_2448A5E98@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = FixedStack.endIndex.getter();
  *a1 = result;
  return result;
}

uint64_t (*sub_2448A5EBC(_QWORD *a1, uint64_t *a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_2448A5F18(v6, *a2, a3);
  return sub_2447DB4C4;
}

uint64_t (*sub_2448A5F18(_QWORD *a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  *a1 = v5;
  a1[1] = v6;
  v7 = malloc(*(_QWORD *)(v6 + 64));
  a1[2] = v7;
  sub_2448A5988(a2, (uint64_t)v7);
  return sub_2447DB54C;
}

uint64_t sub_2448A5F78(uint64_t a1)
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for FixedStack<A>, a1);
  return sub_2448EB1CC();
}

uint64_t sub_2448A5FC4(uint64_t a1)
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for FixedStack<A>, a1);
  return sub_2448EB22C();
}

uint64_t sub_2448A5FF8(uint64_t a1)
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for FixedStack<A>, a1);
  return sub_2448EB238();
}

uint64_t sub_2448A602C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24) && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32))
  {
    v2 = sub_2448EB538();
    MEMORY[0x24951AC70](MEMORY[0x24BEE1D40], v2);
    sub_2448EB274();
    sub_2448EB274();
    v3 = sub_2448EBCD0();
    MEMORY[0x24951AC70](MEMORY[0x24BEE4228], v3);
    v4 = sub_2448EBC64();
    v5 = MEMORY[0x24BDAC7A8](v4);
    MEMORY[0x24BDAC7A8](v5);
    v6 = sub_2448EB7E4();
    MEMORY[0x24951AC70](MEMORY[0x24BEE2620], v6);
    v7 = sub_2448EACD4();
  }
  else
  {
    v7 = 0;
  }
  return v7 & 1;
}

uint64_t sub_2448A623C(uint64_t *a1, uint64_t *a2)
{
  return sub_2448A602C(*a1, *a2);
}

uint64_t sub_2448A624C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;

  v2 = *(_QWORD *)(*v1 + 80);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2448EBD0C();
  sub_2448EBD0C();
  result = sub_2448EB520();
  if (!result)
    goto LABEL_8;
  v7 = v1[4];
  if (v7 < 0)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (v7)
  {
    v8 = result;
    v9 = *(_QWORD *)(v3 + 72);
    v10 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v10(v5, v8, v2);
      sub_2448EA920();
      result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v8 += v9;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_2448A6354()
{
  _BYTE v1[72];

  sub_2448EBD00();
  sub_2448A624C((uint64_t)v1);
  return sub_2448EBD3C();
}

uint64_t sub_2448A6398()
{
  return sub_2448A6354();
}

uint64_t sub_2448A63BC(uint64_t a1)
{
  return sub_2448A624C(a1);
}

uint64_t sub_2448A63E0()
{
  _BYTE v1[72];

  sub_2448EBD00();
  sub_2448A624C((uint64_t)v1);
  return sub_2448EBD3C();
}

uint64_t static FixedStack<A>.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v5 = *a2;
  type metadata accessor for FixedStack.Implementation(0, a3, a3, a4);
  return sub_2448A602C(v4, v5) & 1;
}

uint64_t sub_2448A6478(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static FixedStack<A>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t FixedStack<A>.hash(into:)(uint64_t a1)
{
  return sub_2448A624C(a1);
}

uint64_t FixedStack<A>.hashValue.getter()
{
  _BYTE v1[72];

  sub_2448EBD00();
  sub_2448A624C((uint64_t)v1);
  return sub_2448EBD3C();
}

uint64_t sub_2448A64F0()
{
  return FixedStack<A>.hashValue.getter();
}

uint64_t sub_2448A64F8(uint64_t a1)
{
  return FixedStack<A>.hash(into:)(a1);
}

uint64_t sub_2448A6500()
{
  _BYTE v1[72];

  sub_2448EBD00();
  FixedStack<A>.hash(into:)((uint64_t)v1);
  return sub_2448EBD3C();
}

void sub_2448A6540()
{
  JUMPOUT(0x24951AC70);
}

uint64_t sub_2448A6550(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x24951AC70](&protocol conformance descriptor for FixedStack<A>);
  return MEMORY[0x24951AC70](MEMORY[0x24BEE4230], a1, &v3);
}

void sub_2448A6598()
{
  JUMPOUT(0x24951AC70);
}

uint64_t sub_2448A65A8(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x24951AC70](&protocol conformance descriptor for FixedStack<A>);
  return MEMORY[0x24951AC70](MEMORY[0x24BEE4218], a1, &v3);
}

void sub_2448A65F0()
{
  JUMPOUT(0x24951AC70);
}

uint64_t sub_2448A6600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x24951AC70](&protocol conformance descriptor for <A> FixedStack<A>, a1, &v4);
}

uint64_t type metadata accessor for FixedStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FixedStack);
}

uint64_t sub_2448A6644()
{
  return swift_initClassMetadata2();
}

uint64_t sub_2448A6690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x24951AC70](&unk_2448F66E4, a1, &v4);
}

void sub_2448A66C8()
{
  JUMPOUT(0x24951AC70);
}

void sub_2448A66D8()
{
  JUMPOUT(0x24951AC70);
}

uint64_t sub_2448A66E8(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x24951AC70](&unk_2448F6860);
  return MEMORY[0x24951AC70](MEMORY[0x24BEE4218], a1, &v3);
}

void sub_2448A6730()
{
  JUMPOUT(0x24951AC70);
}

uint64_t sub_2448A6740(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x24951AC70](&unk_2448F68C0);
  return MEMORY[0x24951AC70](MEMORY[0x24BEE4230], a1, &v3);
}

uint64_t sub_2448A6788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2448A6938(a1, a2, a3, a4, MEMORY[0x24BEE08B8], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07F0]);
}

uint64_t sub_2448A679C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  void (*v12)(char *, uint64_t, uint64_t);
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t result;
  void (*v16)(char *, uint64_t);
  uint64_t v17;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = sub_2448EB370();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - v9;
  v11 = sub_2448EA9D4();
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, a1, v4);
  v12(v8, a2, v4);
  if ((v11 & 1) == 0)
  {
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    result = ((uint64_t (*)(char *, uint64_t))v16)(v10, v4);
    goto LABEL_5;
  }
  v13 = sub_2448EA9D4();
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  result = ((uint64_t (*)(char *, uint64_t))v14)(v10, v4);
  if ((v13 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_2448A6924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2448A6938(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07E0]);
}

uint64_t sub_2448A6938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  char v20;
  uint64_t result;
  uint64_t v22;
  uint64_t (*v23)(char *, char *, uint64_t, uint64_t);

  v23 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v22 - v14;
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v22 - v17;
  v19 = sub_2448EA9D4();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }
  v20 = v23(v18, &v15[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_2448A6AE4(uint64_t a1)
{
  uint64_t v1;

  return sub_244873488(a1, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 32)) & 1;
}

uint64_t Result.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v9 + 56))(a2, 1, 1, *(_QWORD *)(a1 + 16));
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a1);
  }
  else
  {
    (*(void (**)(uint64_t, char *, _QWORD))(v9 + 32))(a2, v6, *(_QWORD *)(a1 + 16));
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, v8);
  }
}

uint64_t Sequence.invertAndAccumulateErrors<A, B>()(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  _QWORD v6[8];

  v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  v6[5] = a4;
  v6[6] = a5;
  return Sequence.traverseAndAccumulateErrors<A, B>(_:)((void (*)(char *))sub_2448A81F8, (uint64_t)v6, a1, a2, a3, a4, a5);
}

uint64_t Sequence.invert<A, B>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  _QWORD v7[8];

  v7[2] = a1;
  v7[3] = a2;
  v7[4] = a3;
  v7[5] = a4;
  v7[6] = a5;
  return Sequence.traverse<A, B>(_:)((void (*)(char *))sub_2448A81F8, (uint64_t)v7, a1, a2, a4, a6);
}

uint64_t static Result<>.success.getter()
{
  sub_2448EBD48();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_2448A6CDC@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v12, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t, char *, _QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 32))(a3, v12, *(_QWORD *)(a2 + 24));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
    a1(v10);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  sub_2448EBD48();
  return swift_storeEnumTagMultiPayload();
}

uint64_t Result.tryMap<A>(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  char *v28;
  uint64_t v30;
  void (*v31)(char *);
  uint64_t v32;

  v31 = a1;
  v32 = a4;
  v30 = a2;
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v30 - v12;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v11);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v22 + 16))(v21, v23);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v24 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v24(v13, v21, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v13, v6);
    v25 = sub_2448EBB80();
    if (v25)
    {
      v26 = v25;
      v27 = *(void (**)(char *, uint64_t))(v7 + 8);
      v27(v10, v6);
    }
    else
    {
      v26 = swift_allocError();
      v24(v28, v10, v6);
      v27 = *(void (**)(char *, uint64_t))(v7 + 8);
    }
    v27(v13, v6);
    *a5 = v26;
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
    sub_2448EBD48();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v21, v15);
    v31(v19);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
    sub_2448EBD48();
  }
  return swift_storeEnumTagMultiPayload();
}

uint64_t Result.analyze<A>(success:failure:)(void (*a1)(char *), uint64_t a2, void (*a3)(char *), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  void (*v23)(char *);
  uint64_t v24;
  void (*v25)(char *);

  v24 = a4;
  v25 = a3;
  v23 = a1;
  v5 = *(_QWORD *)(a5 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v7);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v17, v20, v19);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v17, v5);
    v25(v9);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v17, v11);
    v23(v15);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
}

uint64_t Result.failure.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(uint64_t, char *, _QWORD))(v9 + 32))(a2, v6, *(_QWORD *)(a1 + 24));
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, v8);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v9 + 56))(a2, 1, 1, *(_QWORD *)(a1 + 24));
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a1);
  }
}

BOOL Result.isSuccess.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _BOOL8 v7;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_2448EB508();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - v5;
  Result.value.getter(a1, (uint64_t)&v9 - v5);
  v7 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v6, 1, v2) != 1;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

BOOL Result.isFailure.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _BOOL8 v7;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = sub_2448EB508();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - v5;
  Result.failure.getter(a1, (uint64_t)&v9 - v5);
  v7 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v6, 1, v2) != 1;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

uint64_t Result.replace<A>(with:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_2448A6CDC((void (*)(char *))sub_2448A8248, a1, a2);
}

uint64_t Result.ignoringValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2448A6CDC((void (*)(char *))nullsub_1, a1, a2);
}

uint64_t Result.flattened<A>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v6 + 16))(v5);
  if (swift_getEnumCaseMultiPayload() != 1)
    return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 32))(a2, v5);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 32))(a2, v5);
  return swift_storeEnumTagMultiPayload();
}

BOOL static Result.Discriminant.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t Result.Discriminant.hash(into:)()
{
  return sub_2448EBD0C();
}

uint64_t Result.Discriminant.hashValue.getter()
{
  sub_2448EBD00();
  sub_2448EBD0C();
  return sub_2448EBD3C();
}

BOOL sub_2448A7620(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Result.Discriminant.== infix(_:_:)(*a1, *a2);
}

uint64_t sub_2448A762C()
{
  return Result.Discriminant.hashValue.getter();
}

uint64_t sub_2448A7634()
{
  return Result.Discriminant.hash(into:)();
}

uint64_t sub_2448A763C()
{
  sub_2448EBD00();
  Result.Discriminant.hash(into:)();
  return sub_2448EBD3C();
}

BOOL Result.discriminant.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BOOL8 v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  v5 = swift_getEnumCaseMultiPayload() == 1;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v5;
}

uint64_t Sequence.traverse<A, B>(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t AssociatedConformanceWitness;
  char *v38;
  uint64_t v39;
  void (*v40)(char *);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;

  v40 = a1;
  v41 = a2;
  v35 = a6;
  v9 = *(_QWORD *)(a4 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v38 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v31 - v12;
  v33 = v14;
  v34 = v15;
  v39 = sub_2448EBD48();
  MEMORY[0x24BDAC7A8](v39);
  v17 = (char *)v31 - v16;
  v31[1] = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v42 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v20 = (char *)v31 - v19;
  v21 = sub_2448EB508();
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)v31 - v23;
  v36 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)v31 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v43 = (char *)v31 - v27;
  v45 = sub_2448EAE54();
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v26, AssociatedConformanceWitness, a3);
  sub_2448EACB0();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_2448EB58C();
  v36 = *(_QWORD *)(v42 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v36)(v24, 1, AssociatedTypeWitness) == 1)
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v32 + 8))(v43, v44);
    *v35 = v45;
    sub_2448EAEE4();
    sub_2448EBD48();
  }
  else
  {
    v28 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
    v29 = v38;
    while (1)
    {
      v28(v20, v24, AssociatedTypeWitness);
      v40(v20);
      if (swift_getEnumCaseMultiPayload() == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v13, v17, a4);
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v29, v13, a4);
      sub_2448EAEE4();
      sub_2448EAE9C();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, a4);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v20, AssociatedTypeWitness);
      sub_2448EB58C();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v36)(v24, 1, AssociatedTypeWitness) == 1)
        goto LABEL_5;
    }
    (*(void (**)(char *, uint64_t))(v42 + 8))(v20, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v43, v44);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v35, v17, v33);
    sub_2448EAEE4();
    sub_2448EBD48();
  }
  return swift_storeEnumTagMultiPayload();
}

uint64_t Sequence.traverseAndAccumulateErrors<A, B>(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t AssociatedTypeWitness;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t AssociatedConformanceWitness;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  char *v64;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int (*v82)(char *, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  void (*v85)(char *);
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v79 = a4;
  v85 = a1;
  v86 = a2;
  v70 = sub_2448EB508();
  v69 = *(_QWORD *)(v70 - 8);
  v12 = MEMORY[0x24BDAC7A8](v70);
  v73 = (char *)&v66 - v13;
  v80 = *(_QWORD *)(a5 - 8);
  v81 = a5;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v67 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v71 = (char *)&v66 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v78 = (char *)&v66 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v77 = (char *)&v66 - v21;
  v76 = *(_QWORD *)(a4 - 8);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v75 = (char *)&v66 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v74 = (char *)&v66 - v24;
  v68 = a7;
  v84 = sub_2448EBD48();
  MEMORY[0x24BDAC7A8](v84);
  v26 = (char *)&v66 - v25;
  v88 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v28 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v30 = (char *)&v66 - v29;
  v31 = sub_2448EB508();
  v32 = MEMORY[0x24BDAC7A8](v31);
  v34 = (char *)&v66 - v33;
  v35 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v37 = (char *)&v66 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = swift_getAssociatedTypeWitness();
  v72 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v40 = (char *)&v66 - v39;
  v92 = sub_2448EAE54();
  v91 = sub_2448EAE54();
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v37, v89, a3);
  sub_2448EACB0();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v88 = v40;
  v89 = v38;
  v83 = AssociatedConformanceWitness;
  sub_2448EB58C();
  v87 = v28;
  v82 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
  if (v82(v34, 1, AssociatedTypeWitness) != 1)
  {
    v54 = *(void (**)(char *, char *, uint64_t))(v87 + 32);
    v54(v30, v34, AssociatedTypeWitness);
    while (1)
    {
      v85(v30);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v55 = v80;
        v56 = v81;
        v57 = v77;
        (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v77, v26, v81);
        (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v78, v57, v56);
        sub_2448EAEE4();
        sub_2448EAE9C();
        (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v56);
      }
      else
      {
        v58 = v76;
        v59 = v74;
        v60 = v79;
        (*(void (**)(char *, char *, uint64_t))(v76 + 32))(v74, v26, v79);
        (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v75, v59, v60);
        sub_2448EAEE4();
        sub_2448EAE9C();
        (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v60);
      }
      (*(void (**)(char *, uint64_t))(v87 + 8))(v30, AssociatedTypeWitness);
      sub_2448EB58C();
      if (v82(v34, 1, AssociatedTypeWitness) == 1)
        break;
      v54(v30, v34, AssociatedTypeWitness);
    }
  }
  (*(void (**)(char *, uint64_t))(v72 + 8))(v88, v89);
  v90 = v91;
  v42 = v81;
  v43 = sub_2448EAEE4();
  MEMORY[0x24951AC70](MEMORY[0x24BEE12E0], v43);
  v44 = v73;
  sub_2448EB250();
  v45 = v80;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v44, 1, v42) == 1)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v69 + 8))(v44, v70);
    return v92;
  }
  else
  {
    swift_bridgeObjectRelease();
    v46 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
    v47 = v71;
    v46(v71, v44, v42);
    v48 = swift_bridgeObjectRetain();
    v49 = MEMORY[0x249519668](v48, v42);
    swift_bridgeObjectRelease();
    if (v49 == 1)
    {
      swift_bridgeObjectRelease();
      v50 = v67;
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v67, v47, v42);
      v51 = sub_2448EBB80();
      if (v51)
      {
        v52 = v51;
        v53 = *(void (**)(char *, uint64_t))(v45 + 8);
        v53(v50, v42);
        v53(v47, v42);
      }
      else
      {
        v52 = swift_allocError();
        v46(v64, v50, v42);
        (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v42);
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0A8);
      v61 = sub_2448EB910();
      swift_bridgeObjectRelease();
      v62 = sub_2448A9738(v61);
      swift_bridgeObjectRelease();
      sub_244818090();
      v52 = swift_allocError();
      *v63 = v62;
      (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v42);
    }
  }
  return v52;
}

uint64_t sub_2448A81FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_2448EBD48();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t sub_2448A8248@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v1 + 32) - 8) + 16))(a1, *(_QWORD *)(v1 + 48));
}

unint64_t sub_2448A8260(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = a1 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_2447CE01C(v2, (uint64_t)&v13);
      v3 = v14;
      v4 = v15;
      __swift_project_boxed_opaque_existential_1(&v13, v14);
      (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
      v6 = v5;
      swift_bridgeObjectRelease();
      if (v6)
        break;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
      v2 += 40;
      if (!--v1)
        goto LABEL_7;
    }
    sub_2447F3530(&v13, (uint64_t)&v16);
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_7:
    v18 = 0;
    v16 = 0u;
    v17 = 0u;
  }
  swift_bridgeObjectRelease();
  v7 = *((_QWORD *)&v17 + 1);
  if (!*((_QWORD *)&v17 + 1))
  {
    sub_2448A9A08((uint64_t)&v16);
LABEL_13:
    swift_bridgeObjectRelease();
    return 0xD00000000000001BLL;
  }
  v8 = v18;
  __swift_project_boxed_opaque_existential_1(&v16, *((uint64_t *)&v17 + 1));
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
  v11 = v10;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
  if (!v11)
    goto LABEL_13;
  return v9;
}

uint64_t sub_2448A839C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = a1 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_2447CE01C(v2, (uint64_t)&v10);
      v3 = v11;
      v4 = v12;
      __swift_project_boxed_opaque_existential_1(&v10, v11);
      (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
      v6 = v5;
      swift_bridgeObjectRelease();
      if (v6)
        break;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
      v2 += 40;
      if (!--v1)
        goto LABEL_7;
    }
    sub_2447F3530(&v10, (uint64_t)&v13);
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_7:
    v15 = 0;
    v13 = 0u;
    v14 = 0u;
  }
  swift_bridgeObjectRelease();
  v7 = *((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v8 = v15;
    __swift_project_boxed_opaque_existential_1(&v13, *((uint64_t *)&v14 + 1));
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 24))(v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  }
  else
  {
    sub_2448A9A08((uint64_t)&v13);
  }
  return v7;
}

uint64_t sub_2448A84B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = a1 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_2447CE01C(v2, (uint64_t)&v10);
      v3 = v11;
      v4 = v12;
      __swift_project_boxed_opaque_existential_1(&v10, v11);
      (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v3, v4);
      v6 = v5;
      swift_bridgeObjectRelease();
      if (v6)
        break;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
      v2 += 40;
      if (!--v1)
        goto LABEL_7;
    }
    sub_2447F3530(&v10, (uint64_t)&v13);
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_7:
    v15 = 0;
    v13 = 0u;
    v14 = 0u;
  }
  swift_bridgeObjectRelease();
  v7 = *((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v8 = v15;
    __swift_project_boxed_opaque_existential_1(&v13, *((uint64_t *)&v14 + 1));
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 40))(v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  }
  else
  {
    sub_2448A9A08((uint64_t)&v13);
  }
  return v7;
}

uint64_t sub_2448A85D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = a1 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_2447CE01C(v2, (uint64_t)&v10);
      v3 = v11;
      v4 = v12;
      __swift_project_boxed_opaque_existential_1(&v10, v11);
      (*(void (**)(uint64_t, uint64_t))(v4 + 48))(v3, v4);
      v6 = v5;
      swift_bridgeObjectRelease();
      if (v6)
        break;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
      v2 += 40;
      if (!--v1)
        goto LABEL_7;
    }
    sub_2447F3530(&v10, (uint64_t)&v13);
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_7:
    v15 = 0;
    v13 = 0u;
    v14 = 0u;
  }
  swift_bridgeObjectRelease();
  v7 = *((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v8 = v15;
    __swift_project_boxed_opaque_existential_1(&v13, *((uint64_t *)&v14 + 1));
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 48))(v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  }
  else
  {
    sub_2448A9A08((uint64_t)&v13);
  }
  return v7;
}

uint64_t sub_2448A86F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = a1 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_2447CE01C(v2, (uint64_t)&v8);
      v3 = v9;
      v4 = v10;
      __swift_project_boxed_opaque_existential_1(&v8, v9);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v4 + 96))(v3, v4) & 1) != 0)
        break;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v8);
      v2 += 40;
      if (!--v1)
        goto LABEL_7;
    }
    sub_2447F3530(&v8, (uint64_t)&v11);
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_7:
    v13 = 0;
    v11 = 0u;
    v12 = 0u;
  }
  swift_bridgeObjectRelease();
  v5 = *((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v6 = v13;
    __swift_project_boxed_opaque_existential_1(&v11, *((uint64_t *)&v12 + 1));
    LOBYTE(v5) = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 96))(v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  }
  else
  {
    sub_2448A9A08((uint64_t)&v11);
  }
  return v5 & 1;
}

uint64_t sub_2448A87F8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v15 = a1 + 32;
  swift_bridgeObjectRetain();
  v2 = 0;
  v3 = 1;
  v14 = v1;
  do
  {
    v4 = (_QWORD *)(v15 + 40 * v2);
    sub_2448EBB5C();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    sub_2448EABC0();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    v5 = v4[3];
    v6 = v4[4];
    __swift_project_boxed_opaque_existential_1(v4, v5);
    (*(void (**)(uint64_t, uint64_t))(v6 + 104))(v5, v6);
    sub_2447D0980();
    v7 = sub_2448EB5B0();
    v18 = MEMORY[0x24BEE4AF8];
    sub_2447CEE18(0, 0, 0);
    v8 = *(_QWORD *)(v7 + 16);
    if (v8)
    {
      v16 = v3;
      v17 = v2;
      swift_bridgeObjectRetain();
      v9 = v7 + 40;
      do
      {
        swift_bridgeObjectRetain();
        sub_2448EABC0();
        swift_bridgeObjectRelease();
        v11 = *(_QWORD *)(v18 + 16);
        v10 = *(_QWORD *)(v18 + 24);
        if (v11 >= v10 >> 1)
          sub_2447CEE18(v10 > 1, v11 + 1, 1);
        v9 += 16;
        *(_QWORD *)(v18 + 16) = v11 + 1;
        v12 = v18 + 16 * v11;
        *(_QWORD *)(v12 + 32) = 2105376;
        *(_QWORD *)(v12 + 40) = 0xE300000000000000;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease();
      v1 = v14;
      v3 = v16;
      v2 = v17;
    }
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A630);
    sub_2447D48B0();
    sub_2448EA9A4();
    swift_bridgeObjectRelease();
    swift_release();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    if (v3 < v1)
      sub_2448EABC0();
    ++v2;
    ++v3;
  }
  while (v2 != v1);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_2448A8AE0()
{
  uint64_t *v0;

  return sub_2448A839C(*v0);
}

unint64_t sub_2448A8AE8()
{
  uint64_t *v0;

  return sub_2448A8260(*v0);
}

uint64_t sub_2448A8AF0()
{
  uint64_t *v0;

  return sub_2448A84B8(*v0);
}

uint64_t sub_2448A8AF8()
{
  uint64_t *v0;

  return sub_2448A85D4(*v0);
}

uint64_t sub_2448A8B00()
{
  uint64_t *v0;

  return sub_2448A86F0(*v0);
}

uint64_t sub_2448A8B08()
{
  uint64_t *v0;

  return sub_2448A87F8(*v0);
}

uint64_t Result.asyncMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v8 = *(_QWORD *)(a4 + 16);
  v6[8] = v8;
  v6[9] = *(_QWORD *)(v8 - 8);
  v6[10] = swift_task_alloc();
  v6[11] = *(_QWORD *)(a4 - 8);
  v6[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_2448A8B94()
{
  uint64_t v0;
  int EnumCaseMultiPayload;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  int *v6;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 16))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 40));
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v2 = *(_QWORD *)(v0 + 96);
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 40) + 24) - 8) + 32))(*(_QWORD *)(v0 + 16), v2, *(_QWORD *)(*(_QWORD *)(v0 + 40) + 24));
    sub_2448EBD48();
    swift_storeEnumTagMultiPayload();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v4 = *(int **)(v0 + 24);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 32))(*(_QWORD *)(v0 + 80), v2, *(_QWORD *)(v0 + 64));
    v6 = (int *)((char *)v4 + *v4);
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 104) = v5;
    *v5 = v0;
    v5[1] = sub_2448A8CC0;
    return ((uint64_t (*)(_QWORD, _QWORD))v6)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 80));
  }
}

uint64_t sub_2448A8CC0()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2448A8D14()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
  sub_2448EBD48();
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Result.asyncMapError<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  v9 = *(_QWORD *)(a4 + 24);
  v7[9] = v9;
  v7[10] = *(_QWORD *)(v9 - 8);
  v7[11] = swift_task_alloc();
  v7[12] = *(_QWORD *)(a4 - 8);
  v7[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_2448A8E20()
{
  uint64_t v0;
  int EnumCaseMultiPayload;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  int *v6;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 16))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 40));
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v2 = *(_QWORD *)(v0 + 104);
  if (EnumCaseMultiPayload == 1)
  {
    v3 = *(int **)(v0 + 24);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 80) + 32))(*(_QWORD *)(v0 + 88), v2, *(_QWORD *)(v0 + 72));
    v6 = (int *)((char *)v3 + *v3);
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 112) = v4;
    *v4 = v0;
    v4[1] = sub_2448A8F48;
    return ((uint64_t (*)(_QWORD, _QWORD))v6)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 88));
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 40) + 16) - 8) + 32))(*(_QWORD *)(v0 + 16), v2, *(_QWORD *)(*(_QWORD *)(v0 + 40) + 16));
    sub_2448EBD48();
    swift_storeEnumTagMultiPayload();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_2448A8F48()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2448A8F9C()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
  sub_2448EBD48();
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Result.asyncTryMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v8 = *(_QWORD *)(a4 + 24);
  v6[8] = v8;
  v6[9] = *(_QWORD *)(v8 - 8);
  v6[10] = swift_task_alloc();
  v6[11] = swift_task_alloc();
  v9 = *(_QWORD *)(a4 + 16);
  v6[12] = v9;
  v6[13] = *(_QWORD *)(v9 - 8);
  v6[14] = swift_task_alloc();
  v6[15] = *(_QWORD *)(a4 - 8);
  v6[16] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_2448A90D4()
{
  uint64_t v0;
  int EnumCaseMultiPayload;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD, _QWORD);
  int *v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t *v18;
  int *v19;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 16))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 40));
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v2 = *(_QWORD *)(v0 + 128);
  if (EnumCaseMultiPayload == 1)
  {
    v3 = *(_QWORD *)(v0 + 80);
    v4 = *(_QWORD *)(v0 + 88);
    v5 = *(_QWORD *)(v0 + 64);
    v6 = *(_QWORD *)(v0 + 72);
    v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
    v7(v4, v2, v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v4, v5);
    v8 = sub_2448EBB80();
    v10 = *(_QWORD *)(v0 + 72);
    v9 = *(_QWORD *)(v0 + 80);
    v11 = *(_QWORD *)(v0 + 64);
    if (v8)
    {
      v12 = v8;
      v13 = *(void (**)(_QWORD, _QWORD))(v10 + 8);
      v13(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
    }
    else
    {
      v12 = swift_allocError();
      v7(v17, v9, v11);
      v13 = *(void (**)(_QWORD, _QWORD))(v10 + 8);
    }
    v18 = *(uint64_t **)(v0 + 16);
    v13(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 64));
    *v18 = v12;
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
    sub_2448EBD48();
    swift_storeEnumTagMultiPayload();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v14 = *(int **)(v0 + 24);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 104) + 32))(*(_QWORD *)(v0 + 112), v2, *(_QWORD *)(v0 + 96));
    v19 = (int *)((char *)v14 + *v14);
    v15 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v15;
    *v15 = v0;
    v15[1] = sub_2448A92B8;
    return ((uint64_t (*)(_QWORD, _QWORD))v19)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 112));
  }
}

uint64_t sub_2448A92B8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2448A931C()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 96));
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  sub_2448EBD48();
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2448A93C0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD **)(v0 + 16);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 96));
  *v2 = v1;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  sub_2448EBD48();
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static Result.awaiting<>(_:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t);

  v4[2] = a1;
  v4[3] = a4;
  v4[4] = *(_QWORD *)(a4 - 8);
  v6 = swift_task_alloc();
  v4[5] = v6;
  v9 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v7 = (_QWORD *)swift_task_alloc();
  v4[6] = v7;
  *v7 = v4;
  v7[1] = sub_2448A94F8;
  return v9(v6);
}

uint64_t sub_2448A94F8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2448A955C()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 32) + 32))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 24));
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  sub_2448EBD48();
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2448A95D8()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 56);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  sub_2448EBD48();
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Result<>.init(_:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t);

  v4[2] = a1;
  v4[3] = a4;
  v4[4] = *(_QWORD *)(a4 - 8);
  v6 = swift_task_alloc();
  v4[5] = v6;
  v9 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v7 = (_QWORD *)swift_task_alloc();
  v4[6] = v7;
  *v7 = v4;
  v7[1] = sub_2448A96D4;
  return v9(v6);
}

uint64_t sub_2448A96D4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2448A9738(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  void **v4;
  void *v5;
  id v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  __int128 v12[2];
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v13 = MEMORY[0x24BEE4AF8];
    sub_2447CEE6C(0, v1, 0);
    v2 = v13;
    v4 = (void **)(a1 + 32);
    do
    {
      v5 = *v4;
      swift_getErrorValue();
      v6 = v5;
      Error.humanReadable.getter(v11, (uint64_t)v12);

      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v13 = v2;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_2447CEE6C(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v13;
      }
      v9 = *(_QWORD *)(v2 + 16);
      v8 = *(_QWORD *)(v2 + 24);
      if (v9 >= v8 >> 1)
      {
        sub_2447CEE6C(v8 > 1, v9 + 1, 1);
        v2 = v13;
      }
      *(_QWORD *)(v2 + 16) = v9 + 1;
      sub_2447F3530(v12, v2 + 40 * v9 + 32);
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void sub_2448A9868()
{
  JUMPOUT(0x24951AC70);
}

uint64_t sub_2448A9878(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2448A98C4 + 4 * byte_2448F6915[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2448A98F8 + 4 * byte_2448F6910[v4]))();
}

uint64_t sub_2448A98F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2448A9900(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2448A9908);
  return result;
}

uint64_t sub_2448A9914(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2448A991CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2448A9920(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2448A9928(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for Result.Discriminant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Result.Discriminant);
}

ValueMetadata *type metadata accessor for AccumulatedError()
{
  return &type metadata for AccumulatedError;
}

unint64_t sub_2448A9954(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_2448A9980();
  result = sub_2448A99C4();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_2448A9980()
{
  unint64_t result;

  result = qword_257390BC8;
  if (!qword_257390BC8)
  {
    result = MEMORY[0x24951AC70](&unk_2448F6A0C, &type metadata for AccumulatedError);
    atomic_store(result, (unint64_t *)&qword_257390BC8);
  }
  return result;
}

unint64_t sub_2448A99C4()
{
  unint64_t result;

  result = qword_257390BD0;
  if (!qword_257390BD0)
  {
    result = MEMORY[0x24951AC70](&unk_2448F69E4, &type metadata for AccumulatedError);
    atomic_store(result, (unint64_t *)&qword_257390BD0);
  }
  return result;
}

uint64_t sub_2448A9A08(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738C3D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2448A9A50(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void (*v7)(__int128 *);
  uint64_t v8;
  char v9;
  __int128 v10;

  v4 = *(_QWORD *)(a4 + 16);
  if (v4)
  {
    v7 = (void (*)(__int128 *))result;
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v8 = 0;
    while (*(_QWORD *)(a3 + 16))
    {
      result = sub_244828D70(*(_QWORD *)(a4 + 8 * v8 + 32));
      if ((v9 & 1) == 0)
        goto LABEL_9;
      ++v8;
      v10 = *(_OWORD *)(*(_QWORD *)(a3 + 56) + 16 * result);
      swift_retain();
      v7(&v10);
      result = swift_release();
      if (v4 == v8)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
LABEL_9:
    __break(1u);
  }
  return result;
}

uint64_t EventStream.Sink.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  EventStream.Sink.init()();
  return v0;
}

void sub_2448A9B6C()
{
  uint64_t FunctionTypeMetadata1;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  FunctionTypeMetadata1 = swift_getFunctionTypeMetadata1();
  v3 = type metadata accessor for SubscriberCollection(255, FunctionTypeMetadata1, v1, v2);
  v4 = sub_2448EA5D8();
  v5 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v4);
  SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/EventStream.swift", 123, 2, 110, 25, (uint64_t)"observerCount", 13, 2, v4, v5);
  SubscriberCollection.count.getter(v3);
}

uint64_t sub_2448A9C28(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void EventStream.Sink.send(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t FunctionTypeMetadata1;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v3 = *v1;
  *(_QWORD *)&v14 = v1[2];
  v4 = *(_QWORD *)(v3 + 80);
  FunctionTypeMetadata1 = swift_getFunctionTypeMetadata1();
  v8 = type metadata accessor for SubscriberCollection(255, FunctionTypeMetadata1, v6, v7);
  v9 = sub_2448EA5D8();
  v10 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v9);
  SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/EventStream.swift", 123, 2, 119, 25, (uint64_t)"send(_:)", 8, 2, v9, v10);
  v14 = v15;
  v12 = v4;
  v13 = a1;
  SubscriberCollection.notifyAll(closure:)((uint64_t)sub_2448AA37C, (uint64_t)v11, v8);
}

uint64_t sub_2448A9D28()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t EventStream.Sink.eventStream.getter@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)@<X8>)
{
  uint64_t (*v1)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X2>, uint64_t (**)()@<X8>);

  *a1 = sub_2448AA3F8;
  a1[1] = v1;
  return swift_retain();
}

uint64_t sub_2448A9D60(__int128 *a1)
{
  uint64_t (**v1)(__int128 *);
  char v2;
  char v3;
  uint64_t (*v4)(__int128 *);
  __int128 v6;
  char v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v2 = *((_BYTE *)a1 + 16);
  v3 = *((_BYTE *)a1 + 56);
  v4 = *v1;
  v6 = *a1;
  v7 = v2;
  v8 = *(__int128 *)((char *)a1 + 24);
  v9 = *(__int128 *)((char *)a1 + 40);
  v10 = v3;
  return v4(&v6);
}

uint64_t sub_2448A9DB4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t EventStream.observe(dsoHandle:file:line:column:function:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  uint64_t (**v11)(_QWORD *, uint64_t, uint64_t);
  uint64_t (*v12)(_QWORD *, uint64_t, uint64_t);
  _QWORD v14[2];
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v12 = *v11;
  v14[0] = a2;
  v14[1] = a3;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  v18 = a7;
  v19 = a8;
  v20 = a9;
  return v12(v14, a10, a11);
}

uint64_t static EventStream.empty.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *a2 = sub_2448AA410;
  a2[1] = result;
  return result;
}

uint64_t sub_2448A9E50@<X0>(_OWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 v3;
  uint64_t result;
  _OWORD v5[2];
  _OWORD v6[2];

  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v6[0] = a1[2];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)a1 + 41);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738AF78);
  swift_allocObject();
  result = sub_2447E5D90(v5, 0, 0, 1, 0, 0xD000000000000011, 0x80000002448F9A50, 0x64656C65636E6163, 0xE800000000000000);
  *a2 = nullsub_1;
  a2[1] = 0;
  a2[2] = result;
  return result;
}

uint64_t EventStream.init<A>(publisher:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (**a5)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t (**a3)()@<X8>)@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t result;

  v10 = *(_QWORD *)(a3 - 8);
  v11 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = (char *)swift_allocObject();
  *((_QWORD *)v12 + 2) = a2;
  *((_QWORD *)v12 + 3) = a3;
  *((_QWORD *)v12 + 4) = a4;
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 32))(&v12[v11], a1, a3);
  *a5 = sub_2448AA470;
  a5[1] = (uint64_t (*)@<X0>(uint64_t@<X1>, uint64_t@<X2>, uint64_t (**)()@<X8>))v12;
  return result;
}

uint64_t sub_2448A9F98@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t (**a6)()@<X8>)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;
  __int128 v15;
  char v16;
  __int128 v17;
  const char *v18;
  uint64_t v19;
  char v20;

  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a3;
  v12[3] = a4;
  v12[4] = a5;
  v12[5] = a1;
  v12[6] = a2;
  swift_retain();
  v13 = sub_2448EA6E0();
  swift_release();
  *(_QWORD *)&v15 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFound"
                    "ation/EventStream.swift";
  *((_QWORD *)&v15 + 1) = 123;
  v16 = 2;
  v17 = xmmword_2448F6AB0;
  v18 = "init(publisher:)";
  v19 = 16;
  v20 = 2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738AF78);
  swift_allocObject();
  result = sub_2447E5D90(&v15, 0, 0, 1, 0, 0xD000000000000011, 0x80000002448F9A50, 0x64656C65636E6163, 0xE800000000000000);
  *a6 = sub_2448AAD18;
  a6[1] = (uint64_t (*)())v13;
  a6[2] = (uint64_t (*)())result;
  return result;
}

uint64_t EventStream.Sink.init()()
{
  uint64_t v0;
  uint64_t FunctionTypeMetadata1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  uint64_t v8[2];

  FunctionTypeMetadata1 = swift_getFunctionTypeMetadata1();
  SubscriberCollection.init()(v8);
  v7[0] = v8[0];
  v7[1] = v8[1];
  v4 = type metadata accessor for SubscriberCollection(0, FunctionTypeMetadata1, v2, v3);
  v5 = sub_24481320C(v7, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 16) = v5;
  return v0;
}

uint64_t sub_2448AA17C@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t *v4;
  uint64_t v8;
  char v9;
  char v10;
  _QWORD *v11;
  uint64_t FunctionTypeMetadata1;
  _QWORD v14[2];
  __int128 v15;
  char v16;
  __int128 v17;
  __int128 v18;
  char v19;

  v8 = *v4;
  v9 = *((_BYTE *)a1 + 16);
  v10 = *((_BYTE *)a1 + 56);
  v15 = *a1;
  v16 = v9;
  v17 = *(__int128 *)((char *)a1 + 24);
  v18 = *(__int128 *)((char *)a1 + 40);
  v19 = v10;
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = *(_QWORD *)(v8 + 80);
  v11[3] = a2;
  v11[4] = a3;
  v14[0] = sub_24481E31C;
  v14[1] = v11;
  FunctionTypeMetadata1 = swift_getFunctionTypeMetadata1();
  swift_retain();
  swift_retain();
  static SubscriberCollection.add(callsite:_:modify:)(&v15, (uint64_t)v14, (void (*)(uint64_t (*)(uint64_t)))sub_2448AAD40, (uint64_t)v4, FunctionTypeMetadata1, a4);
  swift_release();
  return swift_release();
}

uint64_t sub_2448AA26C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t FunctionTypeMetadata1;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *a3;
  v15 = a3[2];
  v12 = *(_QWORD *)(v3 + 80);
  v13 = a1;
  v14 = a2;
  v4 = MEMORY[0x24BEE4AE0] + 8;
  FunctionTypeMetadata1 = swift_getFunctionTypeMetadata1();
  type metadata accessor for SubscriberCollection(255, FunctionTypeMetadata1, v6, v7);
  v8 = sub_2448EA5D8();
  swift_retain();
  v9 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v8);
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_2447B9000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/EventStream.swift", 123, 2, 105, 39, (uint64_t)"observe(callsite:_:)", 20, 2, (uint64_t)sub_2448AAD48, (uint64_t)v11, v8, v4, v9);
  return swift_release();
}

void EventStream.Sink.isObserved.getter()
{
  sub_2448A9B6C();
}

BOOL sub_2448AA36C(uint64_t a1)
{
  return a1 != 0;
}

uint64_t sub_2448AA37C(uint64_t (**a1)(_QWORD))
{
  uint64_t v1;

  return (*a1)(*(_QWORD *)(v1 + 24));
}

uint64_t sub_2448AA3A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  char v4;
  char v5;
  __int128 v7;
  char v8;
  __int128 v9;
  __int128 v10;
  char v11;

  v4 = *(_BYTE *)(a1 + 16);
  v5 = *(_BYTE *)(a1 + 56);
  v7 = *(_OWORD *)a1;
  v8 = v4;
  v9 = *(_OWORD *)(a1 + 24);
  v10 = *(_OWORD *)(a1 + 40);
  v11 = v5;
  return sub_2448AA17C(&v7, a2, a3, a4);
}

uint64_t sub_2448AA3F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  return sub_2448AA3A4(a1, a2, a3, a4);
}

uint64_t sub_2448AA400()
{
  return swift_deallocObject();
}

uint64_t sub_2448AA410@<X0>(_OWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_2448A9E50(a1, a2);
}

uint64_t sub_2448AA418()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t sub_2448AA470@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t (**a3)()@<X8>)
{
  uint64_t *v3;

  return sub_2448A9F98(a1, a2, v3[2], v3[3], v3[4], a3);
}

uint64_t EventStream.Sink.send<A>()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4[2];

  v1 = *(_QWORD *)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  sub_24481308C((_QWORD *)(v1 + 16), v4);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 32));
  swift_release();
  sub_2448A9A50((uint64_t)sub_2448AAB1C, (uint64_t)&v3, v4[0], v4[1]);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t EventStream.Sink.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t EventStream.Sink.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t EventStream.eventStream.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_retain();
}

uint64_t EventStreamProtocol.onObserve(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (**a5)(uint64_t *a1, uint64_t a2, uint64_t a3)@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v16;

  v11 = *(_QWORD *)(a3 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  v13 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v14 = (char *)swift_allocObject();
  *((_QWORD *)v14 + 2) = a3;
  *((_QWORD *)v14 + 3) = a4;
  *((_QWORD *)v14 + 4) = a1;
  *((_QWORD *)v14 + 5) = a2;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v14[v13], (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  *a5 = sub_2448AABA8;
  a5[1] = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))v14;
  return swift_retain();
}

uint64_t sub_2448AA65C(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  __int128 v18;
  void (*v20)(_QWORD *, uint64_t, uint64_t);
  _QWORD v21[2];
  char v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v11 = *a1;
  v12 = a1[1];
  v13 = *((_BYTE *)a1 + 16);
  v18 = *(_OWORD *)(a1 + 3);
  v15 = a1[5];
  v14 = a1[6];
  v17 = *((_BYTE *)a1 + 56);
  a4(a2, a3);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a8 + 16))(&v20, a7, a8);
  v21[0] = v11;
  v21[1] = v12;
  v22 = v13;
  v23 = v18;
  v24 = v15;
  v25 = v14;
  v26 = v17;
  v20(v21, a2, a3);
  return swift_release();
}

uint64_t EventStream.asyncStream.getter(uint64_t a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t);
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  __int128 v11;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_2448EAFA4();
  MEMORY[0x24BDAC7A8](v3);
  v4 = *MEMORY[0x24BEE6A10];
  v6 = *(void (**)(char *, uint64_t))(v5 + 104);
  v9 = *v1;
  v6((char *)&v9 - v7, v4);
  v10 = v2;
  v11 = v9;
  return sub_2448EB01C();
}

uint64_t sub_2448AA7E0(uint64_t a1, void (*a2)(__int128 *__return_ptr, _QWORD *, uint64_t (*)(uint64_t a1), uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[2];
  char v20;
  __int128 v21;
  const char *v22;
  uint64_t v23;
  char v24;

  v7 = sub_2448EAFD4();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v16 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v16 - v9, a1, v7);
  v11 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a4;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v12 + v11, v10, v7);
  v19[0] = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/EventStream.swift";
  v19[1] = 123;
  v20 = 2;
  v21 = xmmword_2448F6AC0;
  v22 = "asyncStream";
  v23 = 11;
  v24 = 2;
  a2(&v17, v19, sub_2448AAC6C, v12);
  swift_release();
  v13 = v18;
  v16 = v17;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a4;
  *(_OWORD *)(v14 + 24) = v16;
  *(_QWORD *)(v14 + 40) = v13;
  return sub_2448EAF98();
}

uint64_t sub_2448AA95C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2448EAF8C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v13 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a3);
  sub_2448EAFD4();
  sub_2448EAFBC();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_2448AAA40(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;
  char v8;
  uint64_t v9[2];
  char v10;
  __int128 v11;
  const char *v12;
  uint64_t v13;
  char v14;

  v9[0] = (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFounda"
                   "tion/EventStream.swift";
  v9[1] = 123;
  v10 = 2;
  v11 = xmmword_2448F6AD0;
  v12 = "asyncStream";
  v13 = 11;
  v14 = 2;
  v6 = *(_QWORD *)(a4 + 144);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 76));
  sub_2447E5E3C((__int128 *)(v6 + 16), (uint64_t (*)(void))nullsub_1, v9, a4, (void (*)(uint64_t, _QWORD *))sub_2447E1AC8, &v8);
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 76));
  result = swift_release();
  if ((v8 & 1) == 0)
    return a2(result);
  return result;
}

uint64_t sub_2448AAB1C(uint64_t (**a1)(void))
{
  return (*a1)();
}

uint64_t sub_2448AAB3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_2448AABA8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
  return sub_2448AA65C(a1, a2, a3, *(void (**)(uint64_t, uint64_t))(v3 + 32), *(_QWORD *)(v3 + 40), v3 + ((v5 + 48) & ~v5), v4, *(_QWORD *)(v3 + 24));
}

uint64_t sub_2448AABC8(uint64_t a1)
{
  uint64_t v1;

  return sub_2448AA7E0(a1, *(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t (*)(uint64_t), uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16));
}

uint64_t type metadata accessor for EventStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EventStream);
}

uint64_t type metadata accessor for EventStream.Sink(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EventStream.Sink);
}

uint64_t method lookup function for EventStream.Sink()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of EventStream.Sink.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of EventStreamProtocol.eventStream.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_2448AAC08()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_2448EAFD4();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_2448AAC6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_2448EAFD4() - 8) + 80);
  return sub_2448AA95C(a1, v1 + ((v4 + 24) & ~v4), v3);
}

uint64_t sub_2448AACBC()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2448AACE8(uint64_t a1)
{
  uint64_t v1;

  return sub_2448AAA40(a1, *(uint64_t (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_2448AACF4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2448AAD1C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2448AAD40(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_2448AA26C(a1, a2, v2);
}

uint64_t sub_2448AAD48()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t CancellationToken.cancel(dsoHandle:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char v14;
  uint64_t v15[2];
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v10 = *(uint64_t (**)(uint64_t))v9;
  v11 = *(_QWORD *)(v9 + 16);
  v15[0] = a2;
  v15[1] = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  v19 = a7;
  v20 = a8;
  v21 = a9;
  v12 = *(_QWORD *)(v11 + 144);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v12 + 76));
  sub_2447E5E3C((__int128 *)(v12 + 16), (uint64_t (*)(void))nullsub_1, v15, v11, (void (*)(uint64_t, _QWORD *))sub_2447E1AC8, &v14);
  os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 76));
  result = swift_release();
  if ((v14 & 1) == 0)
    return v10(result);
  return result;
}

uint64_t CancellationToken.init(dsoHandle:file:line:column:function:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>, char a9, uint64_t a10, uint64_t a11)
{
  uint64_t result;
  __int128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  *(_QWORD *)&v13 = a1;
  *((_QWORD *)&v13 + 1) = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  v18 = a7;
  v19 = a9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738AF78);
  swift_allocObject();
  result = sub_2447E5D90(&v13, 0, 0, 1, 0, 0xD000000000000011, 0x80000002448F9A50, 0x64656C65636E6163, 0xE800000000000000);
  *a8 = a10;
  a8[1] = a11;
  a8[2] = result;
  return result;
}

uint64_t CancellationToken.init(callsite:didCancel:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  __int128 v7;
  uint64_t result;
  _OWORD v9[2];
  _OWORD v10[2];

  v7 = a1[1];
  v9[0] = *a1;
  v9[1] = v7;
  v10[0] = a1[2];
  *(_OWORD *)((char *)v10 + 9) = *(_OWORD *)((char *)a1 + 41);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738AF78);
  swift_allocObject();
  result = sub_2447E5D90(v9, 0, 0, 1, 0, 0xD000000000000011, 0x80000002448F9A50, 0x64656C65636E6163, 0xE800000000000000);
  *a4 = a2;
  a4[1] = a3;
  a4[2] = result;
  return result;
}

Swift::Void __swiftcall CancellationToken.store(in:)(Swift::OpaquePointer *in)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *rawValue;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v4 = *v1;
  v3 = v1[1];
  v5 = v1[2];
  rawValue = in->_rawValue;
  swift_retain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    rawValue = sub_2447C2210(0, rawValue[2] + 1, 1, rawValue);
  v8 = rawValue[2];
  v7 = rawValue[3];
  if (v8 >= v7 >> 1)
    rawValue = sub_2447C2210((_QWORD *)(v7 > 1), v8 + 1, 1, rawValue);
  rawValue[2] = v8 + 1;
  v9 = &rawValue[3 * v8];
  v9[4] = v4;
  v9[5] = v3;
  v9[6] = v5;
  in->_rawValue = rawValue;
}

ValueMetadata *type metadata accessor for CancellationToken()
{
  return &type metadata for CancellationToken;
}

void Collection.concatenating<A>(contentsOf:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v21 = a5;
  v12 = *(_QWORD *)(a3 - 8);
  v13 = MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v19 = (char *)&v20 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v6, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a6, v19, a2);
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = v21;
  type metadata accessor for ConcatenateCollection();
}

uint64_t sub_2448AB148(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2 + *(int *)(a1 + 52), v3, v1);
}

void _s20PreviewsFoundationOS21ConcatenateCollectionV5IndexV1loiySbAEyxq__G_AGtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[14];

  v16[8] = a1;
  v16[9] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16[7] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v16[2] = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v16[1] = (char *)v16 - v13;
  v14 = swift_getAssociatedTypeWitness();
  v16[6] = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  MEMORY[0x24BDAC7A8](v15);
  v16[10] = a3;
  v16[11] = a4;
  v16[3] = a5;
  v16[4] = a4;
  v16[12] = a5;
  v16[13] = a6;
  v16[5] = a6;
  type metadata accessor for ConcatenateCollection.Index.Implementation();
}

uint64_t sub_2448AB2B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  void (*v13)(_BYTE *, _QWORD, uint64_t);
  int EnumCaseMultiPayload;
  uint64_t v15;
  void (*v16)(uint64_t, _BYTE *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  void (*v22)(uint64_t, _BYTE *, uint64_t);
  void (*v23)(uint64_t, uint64_t);
  _BYTE v25[96];

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v10 = &v25[-v9];
  v11 = &v25[*(int *)(v8 + 48) - v9];
  v12 = *(_QWORD *)(a1 - 8);
  v13 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v12 + 16);
  v13(&v25[-v9], *(_QWORD *)(v5 - 128), a1);
  v13(v11, *(_QWORD *)(v5 - 120), a1);
  LODWORD(v13) = swift_getEnumCaseMultiPayload();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((_DWORD)v13 == 1)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v15 = *(_QWORD *)(v5 - 136);
      v16 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v15 + 32);
      v17 = *(_QWORD *)(v5 - 184);
      v16(v17, v10, v1);
      v18 = *(_QWORD *)(v5 - 176);
      v16(v18, v11, v1);
      swift_getAssociatedConformanceWitness();
      v19 = sub_2448EA9BC();
      v20 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
      v20(v18, v1);
      v20(v17, v1);
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v11, a1);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v5 - 136) + 8))(v10, v1);
      v19 = 0;
    }
  }
  else if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v11, a1);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v5 - 144) + 8))(v10, v2);
    v19 = 1;
  }
  else
  {
    v21 = *(_QWORD *)(v5 - 144);
    v22 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v21 + 32);
    v22(v4, v10, v2);
    v22(v3, v11, v2);
    swift_getAssociatedConformanceWitness();
    v19 = sub_2448EA9BC();
    v23 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v23(v3, v2);
    v23(v4, v2);
  }
  return v19 & 1;
}

void _s20PreviewsFoundationOS21ConcatenateCollectionV5IndexV2eeoiySbAEyxq__G_AGtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[16];

  v14[10] = a1;
  v14[11] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14[8] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14[9] = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14[2] = (char *)v14 - v11;
  v12 = swift_getAssociatedTypeWitness();
  v14[7] = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14[1] = (char *)v14 - v13;
  v14[3] = a3;
  v14[4] = a5;
  v14[12] = a3;
  v14[13] = a4;
  v14[5] = a4;
  v14[6] = a6;
  v14[14] = a5;
  v14[15] = a6;
  type metadata accessor for ConcatenateCollection.Index.Implementation();
}

uint64_t sub_2448AB5D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  void (*v16)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  _BYTE v26[96];

  v3 = a1;
  v4 = *(_QWORD *)(a1 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = &v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v26[-v8];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v11 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v12 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v14 = &v26[-v13];
  v15 = &v26[*(int *)(v12 + 48) - v13];
  v16 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 16);
  v16(&v26[-v13], *(_BYTE **)(v2 - 128), v3);
  v16(v15, *(_BYTE **)(v2 - 120), v3);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v16(v7, v14, v3);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v18 = *(_QWORD *)(v2 - 144);
      v17 = *(_QWORD *)(v2 - 136);
      v19 = *(_QWORD *)(v2 - 192);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v18 + 32))(v19, v15, v17);
      swift_getAssociatedConformanceWitness();
      v20 = sub_2448EAA64();
      v21 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
      v21(v19, v17);
      v21((uint64_t)v7, v17);
      goto LABEL_10;
    }
    (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)(v2 - 144) + 8))(v7, *(_QWORD *)(v2 - 136));
LABEL_7:
    v20 = 0;
    v4 = v11;
    v3 = TupleTypeMetadata2;
    goto LABEL_10;
  }
  v16(v9, v14, v3);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v2 - 152) + 8))(v9, v1);
    goto LABEL_7;
  }
  v22 = *(_QWORD *)(v2 - 152);
  v23 = *(_QWORD *)(v2 - 200);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v22 + 32))(v23, v15, v1);
  swift_getAssociatedConformanceWitness();
  v20 = sub_2448EAA64();
  v24 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
  v24(v23, v1);
  v24((uint64_t)v9, v1);
LABEL_10:
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v14, v3);
  return v20 & 1;
}

void sub_2448AB834(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _s20PreviewsFoundationOS21ConcatenateCollectionV5IndexV1loiySbAEyxq__G_AGtFZ_0(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

void sub_2448AB850(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _s20PreviewsFoundationOS21ConcatenateCollectionV5IndexV2eeoiySbAEyxq__G_AGtFZ_0(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

void sub_2448AB860()
{
  type metadata accessor for ConcatenateCollection.Index.Implementation();
}

void sub_2448AB8A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedTypeWitness;

  MEMORY[0x24BDAC7A8](a1);
  v16 = (char *)&a9 - v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v16, v13, AssociatedTypeWitness);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v14 - 96) = v12;
  *(_QWORD *)(v14 - 88) = v11;
  *(_QWORD *)(v14 - 80) = v10;
  *(_QWORD *)(v14 - 72) = v9;
  type metadata accessor for ConcatenateCollection.Index.Implementation();
}

uint64_t sub_2448AB930(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v1, v2, a1);
}

void sub_2448AB964()
{
  type metadata accessor for ConcatenateCollection.Index.Implementation();
}

void sub_2448AB9AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedTypeWitness;

  MEMORY[0x24BDAC7A8](a1);
  v16 = (char *)&a9 - v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v16, v13, AssociatedTypeWitness);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v14 - 96) = v12;
  *(_QWORD *)(v14 - 88) = v11;
  *(_QWORD *)(v14 - 80) = v10;
  *(_QWORD *)(v14 - 72) = v9;
  type metadata accessor for ConcatenateCollection.Index.Implementation();
}

uint64_t sub_2448ABA34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v1, v2, a1);
}

void sub_2448ABA70(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  static ConcatenateCollection.Index.< infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

void sub_2448ABA80(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  static ConcatenateCollection.Index.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

void ConcatenateCollection.startIndex.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  void (*v12)(char *, uint64_t);
  _QWORD v13[6];

  v13[3] = a2;
  v2 = *(_QWORD *)(a1 + 40);
  v13[4] = *(_QWORD *)(a1 + 24);
  v13[5] = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13[1] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13[2] = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v4 = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v13 - v9;
  sub_2448EB1E4();
  sub_2448EB214();
  swift_getAssociatedConformanceWitness();
  v11 = sub_2448EAA64();
  v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  v12(v10, v4);
  if ((v11 & 1) != 0)
  {
    sub_2448EB1E4();
    sub_2448AB964();
  }
  sub_2448EB1E4();
  sub_2448AB860();
}

void sub_2448ABC78()
{
  void (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  v0(v2, v1);
  JUMPOUT(0x2448ABC84);
}

void ConcatenateCollection.index(after:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v20 = a3;
  v17 = a1;
  v4 = a2[5];
  v5 = a2[3];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v15[2] = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = a2[4];
  v9 = a2[2];
  v10 = swift_getAssociatedTypeWitness();
  v15[1] = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v19 = (char *)v15 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v18 = (char *)v15 - v14;
  v22 = v9;
  v23 = v5;
  v21 = v8;
  v24 = v8;
  v25 = v4;
  type metadata accessor for ConcatenateCollection.Index.Implementation();
}

void sub_2448ABDFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void (*v13)(uint64_t, uint64_t);
  _BYTE v14[96];

  MEMORY[0x24BDAC7A8](a1);
  v8 = &v14[-v7];
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v9 + 16))(&v14[-v7], *(_QWORD *)(v5 - 160), a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = *(_QWORD *)(v5 - 168);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v1 + 32))(v4, v8, v10);
    sub_2448EB1FC();
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v10);
    sub_2448AB964();
  }
  *(_QWORD *)(v5 - 176) = v4;
  *(_QWORD *)(v5 - 160) = v1;
  v11 = *(_QWORD *)(v5 - 184);
  (*(void (**)(_QWORD, _BYTE *, uint64_t))(v11 + 32))(*(_QWORD *)(v5 - 152), v8, v3);
  sub_2448EB1FC();
  sub_2448EB214();
  swift_getAssociatedConformanceWitness();
  v12 = sub_2448EAA64();
  v13 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v13(v2, v3);
  if ((v12 & 1) != 0)
  {
    sub_2448EB1E4();
    v13(*(_QWORD *)(v5 - 144), v3);
    v13(*(_QWORD *)(v5 - 152), v3);
    sub_2448AB964();
  }
  v13(*(_QWORD *)(v5 - 152), v3);
  sub_2448AB860();
}

void sub_2448AC000()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);

  v2(v0, v1);
  JUMPOUT(0x2448AC00CLL);
}

void type metadata accessor for ConcatenateCollection.Index.Implementation()
{
  JUMPOUT(0x24951ABD4);
}

void ConcatenateCollection.endIndex.getter()
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  sub_2448EB214();
  sub_2448AB964();
}

uint64_t sub_2448AC0E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void ConcatenateCollection.subscript.getter()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v1 = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](v1);
  type metadata accessor for ConcatenateCollection.Index.Implementation();
}

uint64_t sub_2448AC1F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  void (*v18)(uint64_t, _QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[96];

  MEMORY[0x24BDAC7A8](a1);
  v7 = &v22[-v6];
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v8 + 16))(&v22[-v6], *(_QWORD *)(v4 - 136), a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9 = *(_QWORD *)(v4 - 152);
    v10 = v7;
    v11 = *(_QWORD *)(v4 - 144);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v9 + 32))(v2, v10, v11);
    v12 = (void (*)(uint64_t, _QWORD))sub_2448EB2E0();
    v14 = v13;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(*(_QWORD *)(v4 - 120), v14, AssociatedTypeWitness);
    v12(v4 - 112, 0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v2, v11);
  }
  else
  {
    v17 = *(_QWORD *)(v4 - 160);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v3 + 32))(v1, v7, v17);
    v18 = (void (*)(uint64_t, _QWORD))sub_2448EB2E0();
    v20 = v19;
    v21 = swift_getAssociatedTypeWitness();
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(*(_QWORD *)(v4 - 120), v20, v21);
    v18(v4 - 112, 0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, v17);
  }
}

void sub_2448AC394(uint64_t **a1)
{
  uint64_t *v2;

  v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  sub_2448AC3F0(v2);
}

void (*sub_2448AC3D0(uint64_t a1))(_QWORD *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return sub_2447DD19C;
}

void sub_2448AC3F0(uint64_t *a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *a1 = AssociatedTypeWitness;
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  a1[1] = v3;
  a1[2] = (uint64_t)malloc(*(_QWORD *)(v3 + 64));
  ConcatenateCollection.subscript.getter();
}

void (*sub_2448AC460())(_QWORD *a1)
{
  return sub_2447DD234;
}

void sub_2448AC484()
{
  type metadata accessor for ConcatenateCollection.Index();
}

uint64_t sub_2448AC4AC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_2448EB508();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v0, 1, 1, v1);
}

void sub_2448AC4E8()
{
  type metadata accessor for ConcatenateCollection.Index();
}

void sub_2448AC51C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  MEMORY[0x24BDAC7A8](a1);
  ConcatenateCollection.index(after:)(v10, v9, (uint64_t)&a9 - v11);
}

uint64_t sub_2448AC558()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, v2, v1);
}

void sub_2448AC594()
{
  type metadata accessor for ConcatenateCollection.Index();
}

void sub_2448AC5CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v6 - v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v1, v2, v3);
  ConcatenateCollection.startIndex.getter(v3, (uint64_t)v5);
}

uint64_t sub_2448AC680(uint64_t a1)
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for ConcatenateCollection<A, B>, a1);
  return sub_2448EB22C();
}

uint64_t sub_2448AC6B4(uint64_t a1)
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for ConcatenateCollection<A, B>, a1);
  return sub_2448EB238();
}

void ConcatenateCollection<>.index(before:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[13];
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v18[11] = a5;
  v18[12] = a1;
  v18[6] = a4;
  v7 = *(_QWORD *)(a4 + 8);
  v8 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18[9] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v18[5] = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v18[8] = (char *)v18 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v18[7] = (char *)v18 - v13;
  v18[10] = a3;
  v14 = *(_QWORD *)(a3 + 8);
  v15 = *(_QWORD *)(a2 + 16);
  v16 = swift_getAssociatedTypeWitness();
  v17 = MEMORY[0x24BDAC7A8](v16);
  MEMORY[0x24BDAC7A8](v17);
  v22 = v15;
  v23 = v8;
  v20 = v8;
  v21 = v7;
  v24 = v14;
  v25 = v7;
  type metadata accessor for ConcatenateCollection.Index.Implementation();
}

void sub_2448AC84C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[96];

  MEMORY[0x24BDAC7A8](a1);
  v10 = &v21[-v9];
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v11 + 16))(&v21[-v9], *(_QWORD *)(v7 - 160), a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(_QWORD *)(v7 - 248) = v2;
    *(_QWORD *)(v7 - 240) = v1;
    *(_QWORD *)(v7 - 232) = v4;
    *(_QWORD *)(v7 - 224) = v5;
    *(_QWORD *)(v7 - 160) = v3;
    v12 = *(_QWORD *)(v7 - 184);
    v13 = *(_QWORD *)(v7 - 200);
    v14 = *(_QWORD *)(v7 - 152);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v12 + 16))(v13, v10, v14);
    v15 = *(_QWORD *)(v7 - 192);
    sub_2448EB1E4();
    swift_getAssociatedConformanceWitness();
    v16 = sub_2448EAA64();
    v17 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v17(v15, v14);
    v17(v13, v14);
    if ((v16 & 1) != 0)
    {
      v18 = *(_QWORD *)(v7 - 248);
      sub_2448EB214();
      sub_2448EA95C();
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 240) + 8))(v18, *(_QWORD *)(v7 - 232));
      sub_2448AB860();
    }
    v19 = *(_QWORD *)(v7 - 192);
    v20 = *(_QWORD *)(v7 - 152);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 184) + 32))(v19, v10, v20);
    sub_2448EA95C();
    v17(v19, v20);
    sub_2448AB964();
  }
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v1 + 32))(v6, v10, v4);
  sub_2448EA95C();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v6, v4);
  sub_2448AB860();
}

void sub_2448ACA94()
{
  JUMPOUT(0x2448ACA9CLL);
}

void sub_2448ACAC0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  ConcatenateCollection<>.index(before:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16), a4);
}

void sub_2448ACACC()
{
  type metadata accessor for ConcatenateCollection.Index();
}

void sub_2448ACB14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  MEMORY[0x24BDAC7A8](a1);
  ConcatenateCollection<>.index(before:)(v10, v9, v11, v12, (uint64_t)&a9 - v13);
}

uint64_t sub_2448ACB58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, v2, v1);
}

void ConcatenateCollection<>.index(_:offsetBy:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];
  uint64_t AssociatedTypeWitness;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v28 = a2;
  v25 = a1;
  v22 = a6;
  v20[4] = a5;
  v8 = *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8);
  v9 = *(_QWORD *)(a3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20[3] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v23 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v20[2] = (char *)v20 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v24 = a4;
  v14 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
  v26 = a3;
  v15 = *(_QWORD *)(a3 + 16);
  v16 = swift_getAssociatedTypeWitness();
  v17 = MEMORY[0x24BDAC7A8](v16);
  v20[1] = (char *)v20 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  MEMORY[0x24BDAC7A8](v19);
  v29 = v15;
  v30 = v9;
  v31 = v14;
  v32 = v8;
  v27 = v8;
  type metadata accessor for ConcatenateCollection.Index.Implementation();
}

void sub_2448ACD34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[96];

  MEMORY[0x24BDAC7A8](a1);
  v10 = &v21[-v9];
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v11 + 16))(&v21[-v9], *(_QWORD *)(v7 - 152), a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(_QWORD *)(v7 - 224) = v2;
    *(_QWORD *)(v7 - 152) = v4;
    *(_QWORD *)(v7 - 208) = v5;
    v12 = *(_QWORD *)(v7 - 200);
    v13 = *(_QWORD *)(v7 - 184);
    (*(void (**)(_QWORD, _BYTE *, uint64_t))(v12 + 32))(*(_QWORD *)(v7 - 168), v10, v13);
    sub_2448EB1E4();
    v14 = sub_2448EB190();
    v15 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v15(v3, v13);
    if (v14 <= *(_QWORD *)(v7 - 120))
    {
      v19 = *(_QWORD *)(v7 - 168);
      sub_2448EB184();
      v15(v19, v13);
      sub_2448AB964();
    }
    v16 = *(_QWORD *)(v7 - 216);
    sub_2448EB214();
    if (!__OFSUB__(*(_QWORD *)(v7 - 120), v14))
    {
      sub_2448EB184();
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 224) + 8))(v16, *(_QWORD *)(v7 - 208));
      v15(*(_QWORD *)(v7 - 168), v13);
      sub_2448AB860();
    }
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v7 - 152) = v3;
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v2 + 32))(v6, v10, v5);
    sub_2448EB214();
    v17 = sub_2448EB190();
    v18 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
    v18(v4, v5);
    if (v17 > *(_QWORD *)(v7 - 120))
    {
      sub_2448EB184();
      v18(v6, v5);
      sub_2448AB860();
    }
    *(_QWORD *)(v7 - 160) = v1;
    v20 = *(_QWORD *)(v7 - 208);
    sub_2448EB1E4();
    if (!__OFSUB__(*(_QWORD *)(v7 - 120), v17))
    {
      sub_2448EB184();
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 200) + 8))(v20, *(_QWORD *)(v7 - 184));
      v18(v6, v5);
      sub_2448AB964();
    }
  }
  __break(1u);
}

void ConcatenateCollection<>.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[16];

  v18[8] = a2;
  v18[6] = a5;
  v18[7] = a1;
  v7 = *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8);
  v8 = *(_QWORD *)(a3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18[10] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v18[4] = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v18[11] = (char *)v18 - v12;
  v18[5] = a4;
  v13 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
  v18[3] = a3;
  v14 = *(_QWORD *)(a3 + 16);
  v15 = swift_getAssociatedTypeWitness();
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18[2] = (char *)v18 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18[12] = v14;
  v18[13] = v8;
  v18[0] = v13;
  v18[1] = v7;
  v18[14] = v13;
  v18[15] = v7;
  type metadata accessor for ConcatenateCollection.Index.Implementation();
}

uint64_t sub_2448AD1AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  void (*v13)(_BYTE *, _QWORD, uint64_t);
  int EnumCaseMultiPayload;
  void (*v15)(uint64_t, _BYTE *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, _BYTE *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  _BYTE v39[96];

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v11 = &v39[-v10];
  v12 = &v39[*(int *)(v9 + 48) - v10];
  v13 = *(void (**)(_BYTE *, _QWORD, uint64_t))(*(_QWORD *)(a1 - 8) + 16);
  v13(&v39[-v10], *(_QWORD *)(v6 - 152), a1);
  v13(v12, *(_QWORD *)(v6 - 144), a1);
  LODWORD(v13) = swift_getEnumCaseMultiPayload();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((_DWORD)v13 == 1)
  {
    v15 = *(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 128) + 32);
    v15(*(_QWORD *)(v6 - 120), v11, v3);
    if (EnumCaseMultiPayload == 1)
    {
      v16 = *(_QWORD *)(v6 - 176);
      v15(v16, v12, v3);
      v17 = *(_QWORD *)(v6 - 120);
      v18 = sub_2448EB190();
      v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 128) + 8);
      v19(v16, v3);
      v19(v17, v3);
      return v18;
    }
    goto LABEL_8;
  }
  *(_QWORD *)(v6 - 152) = v4;
  v20 = v2;
  v21 = *(_QWORD *)(v6 - 128);
  v22 = *(_QWORD *)(v6 - 120);
  *(_QWORD *)(v6 - 144) = v20;
  v23 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v20 + 32);
  v23(v1, v11, v5);
  if (EnumCaseMultiPayload == 1)
  {
    v24 = v21;
    v25 = v22;
    v26 = v3;
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v21 + 32))(v22, v12, v3);
    v27 = *(_QWORD *)(v6 - 192);
    sub_2448EB214();
    v28 = sub_2448EB190();
    v29 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 144) + 8);
    v29(v27, v5);
    v3 = *(_QWORD *)(v6 - 176);
    sub_2448EB1E4();
    v12 = (_BYTE *)sub_2448EB190();
    v2 = *(_QWORD *)(v24 + 8);
    ((void (*)(uint64_t, uint64_t))v2)(v3, v26);
    ((void (*)(uint64_t, uint64_t))v2)(v25, v26);
    v29(v1, v5);
    v30 = __OFADD__(v28, v12);
    v18 = (uint64_t)&v12[v28];
    if (!v30)
      return v18;
    __break(1u);
LABEL_8:
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v2 + 32))(v1, v12, v5);
    v31 = *(_QWORD *)(v6 - 176);
    sub_2448EB1E4();
    *(_QWORD *)(v6 - 144) = v2;
    v32 = *(_QWORD *)(v6 - 120);
    v33 = sub_2448EB190();
    v34 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 128) + 8);
    v34(v31, v3);
    v23 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v6 - 192);
    sub_2448EB214();
    v35 = sub_2448EB190();
    v12 = *(_BYTE **)(*(_QWORD *)(v6 - 144) + 8);
    ((void (*)(void (*)(uint64_t, _BYTE *, uint64_t), uint64_t))v12)(v23, v5);
    ((void (*)(uint64_t, uint64_t))v12)(v1, v5);
    v34(v32, v3);
    v30 = __OFADD__(v33, v35);
    v18 = v33 + v35;
    if (!v30)
      return v18;
    __break(1u);
  }
  v36 = *(_QWORD *)(v6 - 192);
  v23(v36, v12, v5);
  v18 = sub_2448EB190();
  v37 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 144) + 8);
  v37(v36, v5);
  v37(v1, v5);
  return v18;
}

void sub_2448AD504()
{
  JUMPOUT(0x24951AC70);
}

void sub_2448AD514()
{
  JUMPOUT(0x24951AC70);
}

void sub_2448AD524()
{
  JUMPOUT(0x24951AC70);
}

void sub_2448AD534()
{
  JUMPOUT(0x24951AC70);
}

uint64_t sub_2448AD544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2448AD5D0(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> ConcatenateCollection<A, B>, MEMORY[0x24BEE0658]);
}

uint64_t sub_2448AD558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2448AD5D0(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> ConcatenateCollection<A, B>, MEMORY[0x24BEE4218]);
}

uint64_t sub_2448AD56C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[2];

  v3 = *(_QWORD *)(*(_QWORD *)(a3 - 16) + 8);
  v5[0] = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  v5[1] = v3;
  return MEMORY[0x24951AC70](&protocol conformance descriptor for <> ConcatenateCollection<A, B>, a1, v5);
}

uint64_t sub_2448AD5A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2448AD5D0(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> ConcatenateCollection<A, B>, MEMORY[0x24BEE0668]);
}

uint64_t sub_2448AD5BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2448AD5D0(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> ConcatenateCollection<A, B>, MEMORY[0x24BEE4230]);
}

uint64_t sub_2448AD5D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int8x16_t v9;

  v9 = vextq_s8(*(int8x16_t *)(a3 - 16), *(int8x16_t *)(a3 - 16), 8uLL);
  v8 = MEMORY[0x24951AC70](a4, a2, &v9);
  return MEMORY[0x24951AC70](a5, a1, &v8);
}

void sub_2448AD624(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  ConcatenateCollection<>.index(_:offsetBy:)(a1, a2, a3, *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16), a5);
}

void sub_2448AD630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ConcatenateCollection<>.distance(from:to:)(a1, a2, a3, *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

uint64_t sub_2448AD63C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_2448AD718 + 4 * byte_2448F6BD0[v17 - 1]))();
}

void sub_2448AD794(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void type metadata accessor for ConcatenateCollection()
{
  JUMPOUT(0x24951ABD4);
}

void sub_2448AD9A0()
{
  type metadata accessor for ConcatenateCollection.Index.Implementation();
}

void type metadata accessor for ConcatenateCollection.Index()
{
  JUMPOUT(0x24951ABD4);
}

uint64_t sub_2448ADA40()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_2448ADAF0(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = (*(_BYTE *)(v8 + 80) | *(_BYTE *)(v5 + 80));
  if (v10 <= 7 && v9 + 1 <= 0x18 && ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000) == 0)
  {
    v14 = *((unsigned __int8 *)a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X13 }
    }
    if (v14 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      *((_BYTE *)a1 + v9) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      *((_BYTE *)a1 + v9) = 0;
    }
  }
  else
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  return a1;
}

uint64_t sub_2448ADC80(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (v7 <= v4)
    v7 = v4;
  v8 = *(unsigned __int8 *)(a1 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X14 }
  }
  if (v8 == 1)
  {
    v10 = v5;
  }
  else
  {
    v6 = v3;
    v10 = AssociatedTypeWitness;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v10);
}

uint64_t sub_2448ADD98(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(unsigned __int8 *)(a2 + v9);
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X13 }
  }
  v12 = v10 == 1;
  if (v10 == 1)
  {
    v13 = v7;
  }
  else
  {
    v8 = v5;
    v13 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a1, a2, v13);
  *(_BYTE *)(a1 + v9) = v12;
  return a1;
}

uint64_t sub_2448ADEC8(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = swift_getAssociatedTypeWitness();
    v8 = v7;
    v9 = *(_QWORD *)(v7 - 8);
    if (*(_QWORD *)(v9 + 64) <= v6)
      v10 = v6;
    else
      v10 = *(_QWORD *)(v9 + 64);
    v11 = *(unsigned __int8 *)(a1 + v10);
    if (v11 >= 2)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
      v13 = *(_QWORD *)(v7 - 8);
    else
      v13 = v5;
    if (v11 == 1)
      v14 = v7;
    else
      v14 = AssociatedTypeWitness;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v14);
    v15 = *(unsigned __int8 *)(a2 + v10);
    if (v15 >= 2)
    {
      if (v10 <= 3)
        v16 = v10;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    v17 = v15 == 1;
    if (v15 == 1)
      v18 = v9;
    else
      v18 = v5;
    if (v15 == 1)
      v19 = v8;
    else
      v19 = AssociatedTypeWitness;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(a1, a2, v19);
    *(_BYTE *)(a1 + v10) = v17;
  }
  return a1;
}

uint64_t sub_2448AE08C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(unsigned __int8 *)(a2 + v9);
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X13 }
  }
  v12 = v10 == 1;
  if (v10 == 1)
  {
    v13 = v7;
  }
  else
  {
    v8 = v5;
    v13 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(a1, a2, v13);
  *(_BYTE *)(a1 + v9) = v12;
  return a1;
}

uint64_t sub_2448AE1BC(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = swift_getAssociatedTypeWitness();
    v8 = v7;
    v9 = *(_QWORD *)(v7 - 8);
    if (*(_QWORD *)(v9 + 64) <= v6)
      v10 = v6;
    else
      v10 = *(_QWORD *)(v9 + 64);
    v11 = *(unsigned __int8 *)(a1 + v10);
    if (v11 >= 2)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
      v13 = *(_QWORD *)(v7 - 8);
    else
      v13 = v5;
    if (v11 == 1)
      v14 = v7;
    else
      v14 = AssociatedTypeWitness;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v14);
    v15 = *(unsigned __int8 *)(a2 + v10);
    if (v15 >= 2)
    {
      if (v10 <= 3)
        v16 = v10;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    v17 = v15 == 1;
    if (v15 == 1)
      v18 = v9;
    else
      v18 = v5;
    if (v15 == 1)
      v19 = v8;
    else
      v19 = AssociatedTypeWitness;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(a1, a2, v19);
    *(_BYTE *)(a1 + v10) = v17;
  }
  return a1;
}

uint64_t sub_2448AE380(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v9;
  unsigned int v11;
  int v12;
  unsigned int v13;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) <= v4)
    v6 = v4;
  else
    v6 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_22;
  v7 = v6 + 1;
  v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    v11 = ((a2 + ~(-1 << v8) - 254) >> v8) + 1;
    if (HIWORD(v11))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v11 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v11 < 2)
    {
LABEL_22:
      v13 = *(unsigned __int8 *)(a1 + v6);
      if (v13 >= 2)
        return (v13 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_22;
LABEL_15:
  v12 = (v9 - 1) << v8;
  if (v7 > 3)
    v12 = 0;
  if ((_DWORD)v7)
  {
    if (v7 > 3)
      LODWORD(v7) = 4;
    __asm { BR              X11 }
  }
  return (v12 + 255);
}

void sub_2448AE500(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v7 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 <= v6)
    v7 = v6;
  v8 = v7 + 1;
  if (a3 < 0xFF)
  {
    v9 = 0;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 + ~(-1 << (8 * v8)) - 254) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v10 = a2 - 255;
  if (v8 < 4)
  {
    if ((_DWORD)v7 != -1)
    {
      v12 = v10 & ~(-1 << (8 * v8));
      bzero(a1, v8);
      if ((_DWORD)v8 == 3)
      {
        *(_WORD *)a1 = v12;
        a1[2] = BYTE2(v12);
      }
      else if ((_DWORD)v8 == 2)
      {
        *(_WORD *)a1 = v12;
      }
      else
      {
        *a1 = v12;
      }
    }
  }
  else
  {
    bzero(a1, v7 + 1);
    *(_DWORD *)a1 = v10;
  }
  __asm { BR              X10 }
}

uint64_t sub_2448AE6FC(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v3 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v3 <= v2)
    v3 = v2;
  result = *(unsigned __int8 *)(a1 + v3);
  if (result >= 2)
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void sub_2448AE7F4(_BYTE *a1, unsigned int a2)
{
  unint64_t v4;
  unint64_t v5;
  size_t v6;
  uint64_t AssociatedTypeWitness;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  if (a2 > 1)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) <= v6)
      v8 = v6;
    else
      v8 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
    v9 = a2 - 2;
    if (v8 < 4)
    {
      v10 = v9 >> (8 * v8);
      v11 = v9 & ~(-1 << (8 * v8));
      a1[v8] = v10 + 2;
      bzero(a1, v8);
      if ((_DWORD)v8 == 3)
      {
        *(_WORD *)a1 = v11;
        a1[2] = BYTE2(v11);
      }
      else if ((_DWORD)v8 == 2)
      {
        *(_WORD *)a1 = v11;
      }
      else
      {
        *a1 = v11;
      }
    }
    else
    {
      a1[v8] = 2;
      bzero(a1, v8);
      *(_DWORD *)a1 = v9;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    v5 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    if (v4 > v5)
      v5 = v4;
    a1[v5] = a2;
  }
}

void sub_2448AE964()
{
  JUMPOUT(0x24951AC70);
}

uint64_t Optional.flatten<A>(inner:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v6, v8, a2);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v9 + 16) - 8) + 56))(a3, 1, 1);
  else
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v6, v9);
}

uint64_t Optional.described.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
    return 7104878;
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, v7, v1);
  v11[0] = 0;
  v11[1] = 0xE000000000000000;
  sub_2448EBBA4();
  v9 = v11[0];
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v9;
}

uint64_t InvalidationHandle.__allocating_init(dsoHandle:file:line:column:function:name:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;

  v16 = swift_allocObject();
  type metadata accessor for SingleFireEvent();
  swift_allocObject();
  *(_QWORD *)(v16 + 96) = SingleFireEvent.init(description:)(0, 0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738B408);
  v17 = swift_allocObject();
  *(_DWORD *)(v17 + 28) = 0;
  *(_QWORD *)(v17 + 16) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v17 + 24) = 0;
  *(_QWORD *)(v16 + 104) = v17;
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  *(_BYTE *)(v16 + 32) = a4;
  *(_QWORD *)(v16 + 40) = a5;
  *(_QWORD *)(v16 + 48) = a6;
  *(_QWORD *)(v16 + 56) = a7;
  *(_QWORD *)(v16 + 64) = a8;
  *(_BYTE *)(v16 + 72) = a9;
  *(_QWORD *)(v16 + 80) = a10;
  *(_QWORD *)(v16 + 88) = a11;
  return v16;
}

uint64_t Invalidatable.invalidate(dsoHandle:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  return sub_2448B06EC(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t Invalidatable.onInvalidation(_:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char v11;

  v6 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4) + 96) + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 32));
  sub_2448E2998((_QWORD *)(v6 + 16), (uint64_t)a1, a2, (uint64_t)&v10);
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 32));
  v7 = swift_release();
  v8 = v10;
  if (v10)
  {
    sub_2448E1168((uint64_t)&v10);
    sub_2447C6AE8(v8);
  }
  else if (v11)
  {
    a1(v7);
  }
  return swift_release();
}

uint64_t sub_2448AED5C@<X0>(unint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD **v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = sub_2447F2650(v5);
  v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = &v5[a1];
    v10 = v8[4];
    v9 = v8 + 4;
    *a2 = v10;
    v11 = v6 - 1 - a1;
    if (v11 >= 0)
    {
      result = (uint64_t)memmove(v9, v9 + 1, 8 * v11);
      v5[2] = v7;
      *v2 = v5;
      return result;
    }
  }
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2448AEE38@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD **v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  _BYTE v9[144];

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = sub_2447F2BE8(v5);
  v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    sub_2447F0FEC((uint64_t)&v5[18 * a1 + 4], (uint64_t)v9);
    sub_2447F0FEC((uint64_t)v9, a2);
    if ((uint64_t)(v7 - a1) >= 0)
    {
      result = (uint64_t)memmove(&v5[18 * a1 + 4], &v5[18 * a1 + 22], 144 * (v7 - a1));
      v5[2] = v7;
      *v2 = v5;
      return result;
    }
  }
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t Invalidatable.observeInvalidation(_:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  SingleFireEvent.observe(_:)(a1, a2, a5);
  return swift_release();
}

uint64_t Invalidatable.observeInvalidation(on:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  void (*v14)(uint64_t, uint64_t);

  v11 = *(void **)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = v11;
  v13[3] = v12;
  v13[4] = a2;
  v13[5] = a3;
  sub_24481240C(v11);
  v14 = *(void (**)(uint64_t, uint64_t))(a5 + 8);
  swift_retain();
  v14(a4, a5);
  SingleFireEvent.observe(_:)((uint64_t (*)(uint64_t))sub_2448B0E04, (uint64_t)v13, a6);
  swift_release();
  return swift_release();
}

uint64_t Invalidatable.trackInvalidation(dsoHandle:file:line:column:function:of:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, _QWORD *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v26;

  v16 = (*(uint64_t (**)(uint64_t))(a12 + 8))(a11);
  v17 = a10[3];
  v18 = a10[4];
  __swift_project_boxed_opaque_existential_1(a10, v17);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v16;
  *(_QWORD *)(v19 + 24) = a2;
  *(_QWORD *)(v19 + 32) = a3;
  *(_BYTE *)(v19 + 40) = a4;
  *(_QWORD *)(v19 + 48) = a5;
  *(_QWORD *)(v19 + 56) = a6;
  *(_QWORD *)(v19 + 64) = a7;
  *(_QWORD *)(v19 + 72) = a8;
  *(_BYTE *)(v19 + 80) = a9;
  v20 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
  swift_retain();
  v20(v17, v18);
  SingleFireEvent.observe(_:)((uint64_t (*)(uint64_t))sub_2448B07DC, v19, (uint64_t)&v26);
  swift_release();
  swift_release();
  v21 = v26;
  if (v26)
  {
    swift_retain();
    swift_retain();
    sub_2448E1168((uint64_t)&v26);
    sub_2447C6AE8(v21);
    sub_2447C6AE8(v21);
  }
  return swift_release();
}

uint64_t Invalidatable._bindInvalidation(dsoHandle:file:line:column:function:to:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v13[0] = a2;
  v13[1] = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  v18 = a8;
  v19 = a9;
  return sub_2448AF1F4((uint64_t)v13, a10, a11, a12);
}

uint64_t sub_2448AF1F4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v6 = v4;
    v22 = *(_QWORD *)(result + 8);
    v23 = *(_QWORD *)result;
    v21 = *(_BYTE *)(result + 16);
    v20 = *(_QWORD *)(result + 24);
    v26 = *(_QWORD *)(result + 40);
    v27 = *(_QWORD *)(result + 32);
    v25 = *(_QWORD *)(result + 48);
    v24 = *(_BYTE *)(result + 56);
    v8 = (_QWORD *)(a2 + 32);
    v18 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 8);
    swift_bridgeObjectRetain();
    v19 = a3;
    do
    {
      v9 = v18(a3, a4);
      *(_QWORD *)&v29 = v23;
      *((_QWORD *)&v29 + 1) = v22;
      v30 = v21;
      v31 = v20;
      v32 = v27;
      v33 = v26;
      v34 = v25;
      v35 = v24;
      v10 = v6;
      v11 = v8[3];
      v12 = v8[4];
      v13 = __swift_project_boxed_opaque_existential_1(v8, v11);
      sub_2448B03B8((uint64_t)v13, &v29, v9, v11, v12);
      swift_release();
      v14 = v8[3];
      v15 = v8[4];
      __swift_project_boxed_opaque_existential_1(v8, v14);
      v16 = v14;
      v6 = v10;
      a3 = v19;
      v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v16, v15);
      *(_QWORD *)&v29 = v23;
      *((_QWORD *)&v29 + 1) = v22;
      v30 = v21;
      v31 = v20;
      v32 = v27;
      v33 = v26;
      v34 = v25;
      v35 = v24;
      sub_2448B03B8(v6, &v29, v17, v19, a4);
      swift_release();
      v8 += 5;
      --v5;
    }
    while (v5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t Invalidatable.onInvalidation(on:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v9;
  uint64_t v10;
  _QWORD *v11;

  v9 = *(void **)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v9;
  v11[3] = v10;
  v11[4] = a2;
  v11[5] = a3;
  sub_24481240C(v9);
  swift_retain();
  Invalidatable.onInvalidation(_:)((void (*)(uint64_t))sub_2448B07EC, (uint64_t)v11, a4, a5);
  return swift_release();
}

uint64_t sub_2448AF448(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v8;
  char v9;

  if (!a1)
    return a3();
  if (a1 != 1)
  {
    sub_244803860();
    if (qword_257389C70 != -1)
      swift_once();
    sub_2448EB3E8();
    if ((v9 & 1) != 0 || v8 != a2)
      return sub_244811C48((uint64_t (*)(uint64_t))a3, a4);
    return a3();
  }
  if (objc_msgSend((id)objc_opt_self(), sel_isMainThread))
    return a3();
  return sub_244811C48((uint64_t (*)(uint64_t))a3, a4);
}

BOOL Invalidatable.isInvalidated.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(void))(a2 + 8))() + 96) + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 32));
  v3 = *(_QWORD *)(v2 + 16);
  sub_2448B0DAC(v3);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 32));
  swift_release();
  sub_2448B0808(v3);
  swift_release();
  return v3 == 0;
}

uint64_t InvalidationHandle.init(dsoHandle:file:line:column:function:name:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v17;

  type metadata accessor for SingleFireEvent();
  swift_allocObject();
  *(_QWORD *)(v11 + 96) = SingleFireEvent.init(description:)(0, 0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738B408);
  v17 = swift_allocObject();
  *(_DWORD *)(v17 + 28) = 0;
  *(_QWORD *)(v17 + 16) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v17 + 24) = 0;
  *(_QWORD *)(v11 + 104) = v17;
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  *(_BYTE *)(v11 + 32) = a4;
  *(_QWORD *)(v11 + 40) = a5;
  *(_QWORD *)(v11 + 48) = a6;
  *(_QWORD *)(v11 + 56) = a7;
  *(_QWORD *)(v11 + 64) = a8;
  *(_BYTE *)(v11 + 72) = a9;
  *(_QWORD *)(v11 + 80) = a10;
  *(_QWORD *)(v11 + 88) = a11;
  return v11;
}

uint64_t InvalidationHandle.deinit()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 96) + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  v2 = *(_QWORD *)(v1 + 16);
  sub_2448B0DAC(v2);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 32));
  swift_release();
  sub_2448B0808(v2);
  if (v2)
    sub_244823F6C();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v0;
}

uint64_t InvalidationHandle.__deallocating_deinit()
{
  InvalidationHandle.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_2448AF794(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE v7[144];

  sub_2447F0FEC(a3, (uint64_t)v7);
  swift_retain();
  sub_2448B0AA0((uint64_t)v7, a4, a1);
  return swift_release();
}

uint64_t sub_2448AF7F8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int16 v20;
  _QWORD v21[9];

  v2 = *a1;
  v3 = *(_QWORD *)(v1 + 104);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 28));
  sub_2448AFB80((uint64_t *)(v3 + 16), v2, v21);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 28));
  v4 = v21[0];
  result = swift_release();
  if (v4)
  {
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      result = sub_2448EBA18();
      v6 = result;
      if (result)
        goto LABEL_4;
    }
    else
    {
      v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v6)
      {
LABEL_4:
        if (v6 < 1)
        {
          __break(1u);
          return result;
        }
        v7 = 0;
        v12 = v4 & 0xC000000000000001;
        v13 = v6;
        v14 = v4;
        do
        {
          if (v12)
          {
            v8 = MEMORY[0x249519FE0](v7, v4);
          }
          else
          {
            v8 = *(_QWORD *)(v4 + 8 * v7 + 32);
            swift_retain();
          }
          v9 = *(_QWORD *)(v8 + 16);
          v16 = v2;
          v17 = 0u;
          v18 = 0u;
          v19 = 0u;
          v20 = 0;
          v10 = *(_QWORD *)(v9 + 104);
          swift_bridgeObjectRetain();
          swift_retain();
          os_unfair_lock_lock((os_unfair_lock_t)(v10 + 76));
          sub_2448B0520((_QWORD *)(v10 + 16), (uint64_t)&v16, &v15);
          os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 76));
          v11 = v15;
          swift_release();
          if (v11)
          {
            sub_2447D3184((uint64_t)&v16, (uint64_t)v21, &qword_25738A578);
            sub_2447D27D4((uint64_t)v21);
          }
          swift_release();
          swift_bridgeObjectRelease();
          v4 = v14;
          ++v7;
        }
        while (v13 != v7);
      }
    }
    return swift_bridgeObjectRelease_n();
  }
  return result;
}

uint64_t sub_2448AFA48(uint64_t a1, __int128 *a2)
{
  char v2;
  char v3;
  char v4;
  char v5;
  __int128 v6;
  _BYTE v8[144];
  _OWORD v9[2];
  char v10;
  __int128 v11;
  __int128 v12;
  char v13;
  __int128 v14;
  char v15;
  __int128 v16;
  __int128 v17;
  char v18;

  v2 = *((_BYTE *)a2 + 16);
  v3 = *((_BYTE *)a2 + 56);
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 72);
  v6 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)(a1 + 80);
  v9[1] = v6;
  v10 = v4;
  v11 = *(_OWORD *)(a1 + 40);
  v12 = *(_OWORD *)(a1 + 56);
  v13 = v5;
  v14 = *a2;
  v15 = v2;
  v16 = *(__int128 *)((char *)a2 + 24);
  v17 = *(__int128 *)((char *)a2 + 40);
  v18 = v3;
  sub_2447F0FD4((uint64_t)v9);
  sub_2447F0FEC((uint64_t)v9, (uint64_t)v8);
  return sub_2448E0E98((void (*)(uint64_t (*)(), _QWORD *))sub_2448B0E0C);
}

uint64_t CancellationToken.manage(using:)()
{
  __int128 *v0;
  uint64_t v1;
  __int128 v3;
  uint64_t v4;

  v1 = *((_QWORD *)v0 + 2);
  v3 = *v0;
  v4 = v1;
  return sub_2448E1168((uint64_t)&v3);
}

{
  __int128 *v0;
  uint64_t v1;
  __int128 v3;
  uint64_t v4;

  v1 = *((_QWORD *)v0 + 2);
  v3 = *v0;
  v4 = v1;
  return sub_2448E1168((uint64_t)&v3);
}

void sub_2448AFB3C()
{
  off_257390E70 = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
}

id sub_2448AFB50()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1788]), sel_init);
  qword_257390E78 = (uint64_t)result;
  return result;
}

uint64_t sub_2448AFB80@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  if ((a1[1] & 1) != 0)
  {
    result = sub_244823F6C();
    v5 = 0;
  }
  else
  {
    v5 = *a1;
    *a1 = a2;
    *((_BYTE *)a1 + 8) = 1;
    result = swift_bridgeObjectRetain();
  }
  *a3 = v5;
  return result;
}

uint64_t CancellationToken.cancelOnInvalidation(of:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v2 = *((_QWORD *)v1 + 2);
  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  v6 = *v1;
  v7 = v2;
  sub_2448E1168((uint64_t)&v6);
  return swift_release();
}

uint64_t bindInvalidation(of:_:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char v7;
  __int128 v8;
  const char *v9;
  uint64_t v10;
  char v11;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  v6[0] = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Invalidatable.swift";
  v6[1] = 125;
  v7 = 2;
  v8 = xmmword_2448F6FE0;
  v9 = "bindInvalidation(of:_:)";
  v10 = 23;
  v11 = 2;
  return sub_2448AF1F4((uint64_t)v6, a2, v3, v4);
}

uint64_t Invalidatable.bindInvalidation(of:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12[5];

  v4 = v3;
  v8 = a1[3];
  v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  v12[3] = a2;
  v12[4] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(boxed_opaque_existential_1, v4, a2);
  ConcurrentInvalidatable.trackInvalidation(of:)((uint64_t)v12, v8, v9);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return Invalidatable.trackInvalidation(of:)((uint64_t)a1, a2, a3);
}

uint64_t ConcurrentInvalidatable.trackInvalidation(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v6 = *(_QWORD *)(a2 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = (_QWORD *)MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v8[3];
  v11 = v8[4];
  __swift_project_boxed_opaque_existential_1(v8, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v3, a2);
  v12 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a2;
  *(_QWORD *)(v13 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v13 + v12, v9, a2);
  Invalidatable.onInvalidation(_:)((void (*)(uint64_t))sub_2448B0890, v13, v10, v11);
  return swift_release();
}

uint64_t Invalidatable.trackInvalidation(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  __int128 v14[2];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A208);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  v10 = sub_2448EAF74();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 1, 1, v10);
  sub_2447CE01C(a1, (uint64_t)v14);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  sub_2447F3530(v14, (uint64_t)(v11 + 4));
  v11[9] = v9;
  sub_2447C5CB8((uint64_t)v8, (uint64_t)&unk_257390E88, (uint64_t)v11);
  return swift_release();
}

uint64_t sub_2448AFFB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 608) = a5;
  *(_QWORD *)(v5 + 600) = a4;
  return swift_task_switch();
}

uint64_t sub_2448AFFD0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD **)(v0 + 600);
  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 616) = v4;
  *v4 = v0;
  v4[1] = sub_2448B004C;
  return ConcurrentInvalidatable.invalidationTrace.getter(v0 + 592, v2, v3);
}

uint64_t sub_2448B004C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2448B00A0()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  char v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v1 = (_OWORD *)(v0 + 488);
  v2 = *(_QWORD *)(v0 + 592);
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    v16 = "trackInvalidation(of:)";
    v14 = 2;
    v11 = 22;
    v15 = 102;
    v9 = 295;
    v8 = 125;
    v12 = 2;
    v7 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Invalidatable.swift";
    goto LABEL_8;
  }
  sub_2447F0FEC(v2 + 144 * v3 - 112, v0 + 304);
  sub_2448227D0(v0 + 304, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_244822210);
  swift_bridgeObjectRelease();
  sub_2447F0FEC(v0 + 304, v0 + 160);
  v4 = sub_24482283C(v0 + 160);
  v5 = sub_244822848(v0 + 160);
  v6 = v5;
  if (v4 != 1)
  {
    sub_2448227D0(v0 + 304, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_244822834);
    v7 = *(const char **)(v6 + 80);
    v8 = *(_QWORD *)(v6 + 88);
    v14 = *(_BYTE *)(v6 + 96);
    v9 = *(_QWORD *)(v6 + 104);
    v15 = *(_QWORD *)(v6 + 112);
    v16 = *(const char **)(v6 + 120);
    v11 = *(_QWORD *)(v6 + 128);
    v12 = *(_BYTE *)(v6 + 136);
    v1 = (_OWORD *)(v0 + 488);
    goto LABEL_8;
  }
  v7 = *(const char **)(v5 + 16);
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v5 + 40);
  v10 = *(const char **)(v5 + 56);
  v25 = *(_QWORD *)(v5 + 48);
  v26 = *(_QWORD *)(v5 + 32);
  v11 = *(_QWORD *)(v5 + 64);
  v12 = *(_BYTE *)(v5 + 72);
  v13 = *(_BYTE *)(v5 + 73);
  sub_2448227D0(v0 + 304, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_244822834);
  v1 = (_OWORD *)(v0 + 488);
  if ((v13 & 1) != 0)
    goto LABEL_6;
  v15 = v25;
  v14 = v26;
  v16 = v10;
LABEL_8:
  v17 = *(_QWORD *)(v0 + 608);
  v18 = *(_BYTE *)(v17 + 32);
  v19 = *(_BYTE *)(v17 + 72);
  v20 = *(_OWORD *)(v17 + 16);
  v21 = *(_OWORD *)(v17 + 40);
  v22 = *(_OWORD *)(v17 + 56);
  *(_OWORD *)(v0 + 448) = *(_OWORD *)(v17 + 80);
  *(_OWORD *)(v0 + 464) = v20;
  *(_BYTE *)(v0 + 480) = v18;
  *v1 = v21;
  v1[1] = v22;
  *(_BYTE *)(v0 + 520) = v19;
  *(_QWORD *)(v0 + 528) = v7;
  *(_QWORD *)(v0 + 536) = v8;
  *(_BYTE *)(v0 + 544) = v14;
  *(_QWORD *)(v0 + 552) = v9;
  *(_QWORD *)(v0 + 560) = v15;
  *(_QWORD *)(v0 + 568) = v16;
  *(_QWORD *)(v0 + 576) = v11;
  *(_BYTE *)(v0 + 584) = v12;
  sub_2447F0FD4(v0 + 448);
  sub_2447F0FEC(v0 + 448, v0 + 16);
  v23 = swift_task_alloc();
  *(_QWORD *)(v23 + 16) = v0 + 16;
  *(_QWORD *)(v23 + 24) = v17;
  sub_2448E0E98((void (*)(uint64_t (*)(), _QWORD *))sub_2447F1028);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2448B028C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a3 + 8);
  v5 = MEMORY[0x24BEE4AF8];
  AnyInvalidatable.invalidate(file:line:column:function:trace:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Invalidatable.swift", 125, 2, 305, 28, (uint64_t)"trackInvalidation(of:)", 22, 2, &v5, a2, v4);
  return swift_bridgeObjectRelease();
}

unint64_t sub_2448B02F8@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;

  v3 = *a1;
  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return sub_2448B0DAC(v3);
}

uint64_t sub_2448B0328@<X0>(uint64_t a1@<X8>)
{
  _QWORD **v1;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[144];

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    v5 = v3[2];
    if (v5)
    {
LABEL_3:
      v6 = v5 - 1;
      sub_2447F0FEC((uint64_t)&v3[18 * v5 - 14], (uint64_t)v7);
      sub_2447F0FEC((uint64_t)v7, a1);
      v3[2] = v6;
      *v1 = v3;
      return nullsub_1(a1);
    }
  }
  else
  {
    result = (uint64_t)sub_2447F2BE8(v3);
    v3 = (_QWORD *)result;
    v5 = *(_QWORD *)(result + 16);
    if (v5)
      goto LABEL_3;
  }
  __break(1u);
  return result;
}

uint64_t sub_2448B03B8(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v9 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v11);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a3;
  v13 = a2[1];
  *(_OWORD *)(v12 + 24) = *a2;
  *(_OWORD *)(v12 + 40) = v13;
  *(_OWORD *)(v12 + 56) = a2[2];
  *(_OWORD *)(v12 + 65) = *(_OWORD *)((char *)a2 + 41);
  v14 = *(void (**)(uint64_t, uint64_t))(a5 + 8);
  swift_retain();
  v14(a4, a5);
  SingleFireEvent.observe(_:)((uint64_t (*)(uint64_t))sub_2448B0E10, v12, (uint64_t)&v18);
  swift_release();
  swift_release();
  v15 = v18;
  if (v18)
  {
    swift_retain();
    swift_retain();
    sub_2448E1168((uint64_t)&v18);
    sub_2447C6AE8(v15);
    sub_2447C6AE8(v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, a4);
}

_QWORD *sub_2448B0520@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v5 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(unsigned __int8 *)(a2 + 56);
  v12 = *(unsigned __int8 *)(a2 + 57);
  v13 = *((unsigned __int16 *)result + 28);
  v14 = v13 >> 8;
  if (v13 >> 8 < 0xFF)
  {
    if (v14 != 2 && v12 != 2)
    {
      v16 = (void *)*result;
      v25 = result[1];
      v23 = result[3];
      v24 = result[2];
      v21 = result[5];
      v22 = result[4];
      v20 = result[6];
      v19 = *(unsigned __int8 *)(a2 + 56);
      v17 = *(_QWORD *)(a2 + 40);
      v18 = *(_QWORD *)(a2 + 48);
      __swift_instantiateConcreteTypeFromMangledName(&qword_257390F50);
      sub_2448B0D30();
      swift_allocError();
      *(_QWORD *)v15 = v16;
      *(_QWORD *)(v15 + 8) = v25;
      *(_QWORD *)(v15 + 16) = v24;
      *(_QWORD *)(v15 + 24) = v23;
      *(_QWORD *)(v15 + 32) = v22;
      *(_QWORD *)(v15 + 40) = v21;
      *(_QWORD *)(v15 + 48) = v20;
      *(_WORD *)(v15 + 56) = v13;
      *(_QWORD *)(v15 + 64) = v5;
      *(_QWORD *)(v15 + 72) = v4;
      *(_QWORD *)(v15 + 80) = v7;
      *(_QWORD *)(v15 + 88) = v6;
      *(_QWORD *)(v15 + 96) = v9;
      *(_QWORD *)(v15 + 104) = v17;
      *(_QWORD *)(v15 + 112) = v18;
      *(_BYTE *)(v15 + 120) = v19;
      *(_BYTE *)(v15 + 121) = v12;
      sub_2447D3128(v5, v4, v7, v6, v9, v17, v18, v19, v12);
      sub_2448B0D7C(v16, v25, v24, v23, v22, v21, v20, v13);
      return (_QWORD *)swift_willThrow();
    }
  }
  else
  {
    *result = v5;
    result[1] = v4;
    result[2] = v7;
    result[3] = v6;
    result[4] = v9;
    result[5] = v8;
    result[6] = v10;
    *((_WORD *)result + 28) = v11 | ((_WORD)v12 << 8);
    result = sub_2447D3128(v5, v4, v7, v6, v9, v8, v10, v11, v12);
  }
  *a3 = v14 > 0xFE;
  return result;
}

uint64_t sub_2448B06EC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  uint64_t v18;
  char v19;
  char v20;
  __int128 v21;
  _BYTE v23[144];
  _OWORD v24[2];
  char v25;
  __int128 v26;
  __int128 v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;

  v18 = (*(uint64_t (**)(uint64_t))(a10 + 8))(a9);
  v19 = *(_BYTE *)(v18 + 32);
  v20 = *(_BYTE *)(v18 + 72);
  v21 = *(_OWORD *)(v18 + 16);
  v24[0] = *(_OWORD *)(v18 + 80);
  v24[1] = v21;
  v25 = v19;
  v26 = *(_OWORD *)(v18 + 40);
  v27 = *(_OWORD *)(v18 + 56);
  v28 = v20;
  v29 = a1;
  v30 = a2;
  v31 = a3;
  v32 = a4;
  v33 = a5;
  v34 = a6;
  v35 = a7;
  v36 = a8;
  sub_2447F0FD4((uint64_t)v24);
  sub_2447F0FEC((uint64_t)v24, (uint64_t)v23);
  sub_2448E0E98((void (*)(uint64_t (*)(), _QWORD *))sub_2448B0E0C);
  return swift_release();
}

uint64_t sub_2448B07DC()
{
  uint64_t v0;

  return sub_2448AFA48(*(_QWORD *)(v0 + 16), (__int128 *)(v0 + 24));
}

uint64_t sub_2448B07EC()
{
  uint64_t v0;

  return sub_2448AF448(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t (**)(void))(v0 + 32), *(_QWORD *)(v0 + 40));
}

unint64_t sub_2448B0808(unint64_t result)
{
  if (result >= 2)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_2448B0838()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t sub_2448B0890()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  return sub_2448B028C(v0 + ((v2 + 32) & ~v2), v1, *(_QWORD *)(v0 + 24));
}

uint64_t sub_2448B08AC()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2448B08E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0 + 32;
  v3 = *(_QWORD *)(v0 + 72);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_2447C62E8;
  v4[76] = v3;
  v4[75] = v2;
  return swift_task_switch();
}

uint64_t dispatch thunk of Invalidatable.invalidationHandle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t type metadata accessor for InvalidationHandle()
{
  return objc_opt_self();
}

uint64_t method lookup function for InvalidationHandle()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of InvalidationHandle.__allocating_init(dsoHandle:file:line:column:function:name:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t initializeBufferWithCopyOfBuffer for InvalidationHandle.TraceStatus(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 v4;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  j__swift_bridgeObjectRetain(*a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for InvalidationHandle.TraceStatus(uint64_t a1)
{
  return j__swift_bridgeObjectRelease(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t *assignWithCopy for InvalidationHandle.TraceStatus(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  j__swift_bridgeObjectRetain(*a2, v4);
  v5 = *a1;
  v6 = *((unsigned __int8 *)a1 + 8);
  *a1 = v3;
  *((_BYTE *)a1 + 8) = v4;
  j__swift_bridgeObjectRelease(v5, v6);
  return a1;
}

uint64_t *assignWithTake for InvalidationHandle.TraceStatus(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  v6 = *((unsigned __int8 *)a1 + 8);
  *a1 = v3;
  *((_BYTE *)a1 + 8) = v4;
  j__swift_bridgeObjectRelease(v5, v6);
  return a1;
}

uint64_t sub_2448B0A7C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_2448B0A84(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for InvalidationHandle.TraceStatus()
{
  return &type metadata for InvalidationHandle.TraceStatus;
}

id sub_2448B0AA0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  id result;
  _BYTE v11[144];
  _BYTE v12[144];
  _BYTE v13[144];
  _BYTE v14[144];
  uint64_t v15[18];
  _BYTE v16[144];

  sub_2447F0FEC(a1, (uint64_t)v16);
  if (qword_257389DD8 != -1)
    swift_once();
  objc_msgSend((id)qword_257390E78, sel_lock);
  if (qword_257389DD0 != -1)
    swift_once();
  swift_beginAccess();
  v4 = off_257390E70;
  sub_2448227D0((uint64_t)v16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_244822210);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  off_257390E70 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v4 = sub_2447C245C(0, v4[2] + 1, 1, v4);
    off_257390E70 = v4;
  }
  v7 = v4[2];
  v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    v4 = sub_2447C245C((_QWORD *)(v6 > 1), v7 + 1, 1, v4);
    off_257390E70 = v4;
  }
  v4[2] = v7 + 1;
  sub_2447F0FEC((uint64_t)v16, (uint64_t)&v4[18 * v7 + 4]);
  v8 = off_257390E70;
  swift_endAccess();
  v15[0] = (uint64_t)v8;
  swift_bridgeObjectRetain();
  v9 = sub_2448AF7F8(v15);
  a3(v9);
  swift_bridgeObjectRelease();
  result = (id)swift_beginAccess();
  if (*((_QWORD *)off_257390E70 + 2))
  {
    sub_2448B0328((uint64_t)v12);
    sub_2447D3184((uint64_t)v12, (uint64_t)v14, &qword_257390F48);
    sub_2447D3184((uint64_t)v14, (uint64_t)v15, &qword_257390F48);
    if (sub_2448B0D18((uint64_t)v15) == 1)
    {
      sub_2448AEE38(*((_QWORD *)off_257390E70 + 2) - 1, (uint64_t)v13);
    }
    else
    {
      sub_2447D3184((uint64_t)v14, (uint64_t)v11, &qword_257390F48);
      sub_2447F0FEC((uint64_t)v11, (uint64_t)v13);
    }
    swift_endAccess();
    sub_2447F0FEC((uint64_t)v13, (uint64_t)v12);
    sub_2448227D0((uint64_t)v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_244822834);
    return objc_msgSend((id)qword_257390E78, sel_unlock);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_2448B0D18(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 72) >> 9) > 0x80000000)
    return -(*(_QWORD *)(a1 + 72) >> 9);
  else
    return 0;
}

unint64_t sub_2448B0D30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_257390F58[0];
  if (!qword_257390F58[0])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_257390F50);
    result = MEMORY[0x24951AC70](&unk_2448EE5B8, v1);
    atomic_store(result, qword_257390F58);
  }
  return result;
}

id sub_2448B0D7C(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (BYTE1(a8) != 255)
    return sub_2447D3128(result, a2, a3, a4, a5, a6, a7, a8, SBYTE1(a8));
  return result;
}

unint64_t sub_2448B0DAC(unint64_t result)
{
  if (result >= 2)
  {
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_2448B0DDC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t ConcurrentFutureCache.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = swift_allocObject();
  ConcurrentFutureCache.init()(v0, v1, v2, v3);
  return v0;
}

_QWORD *ConcurrentFutureCache.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  type metadata accessor for Future(255, *(_QWORD *)(*v4 + 88), a3, a4);
  swift_getTupleTypeMetadata2();
  sub_2448EAE54();
  v8 = sub_2448EA848();
  v5 = sub_2448EA8B4();
  v6 = sub_24481320C(&v8, v5);
  swift_bridgeObjectRelease();
  v4[2] = v6;
  return v4;
}

uint64_t ConcurrentFutureCache.guaranteedValue(for:creatingIfNecessaryWith:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25[2];
  _QWORD v26[5];

  v7 = (_QWORD *)*v4;
  v26[2] = v4[2];
  v8 = v7[11];
  v21 = v7[10];
  v22 = v8;
  v23 = v7[12];
  v24 = a1;
  type metadata accessor for Future(255, v8, a3, a4);
  sub_2448EA8B4();
  v9 = sub_2448EA5D8();
  type metadata accessor for Promise(255, v8, v10, v11);
  sub_2448EB508();
  swift_retain();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v13 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v9);
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_2447B9000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ConcurrentFutureCache.swift", 133, 2, 21, 47, (uint64_t)"guaranteedValue(for:creatingIfNecessaryWith:)", 45, 2, (uint64_t)sub_2448B1254, (uint64_t)v20, v9, TupleTypeMetadata2, v13);
  swift_release();
  v14 = v26[3];
  if (v26[4])
  {
    v15 = swift_retain();
    v16 = a2(v15);
    if (v5)
    {
      swift_release();
      swift_release_n();
    }
    else
    {
      v17 = v16;
      sub_244836CF8(v26);
      v18 = (void *)v26[0];
      v25[0] = v26[0];
      v25[1] = v26[1];
      Promise.track(future:on:)(v17, v25);
      swift_release_n();
      swift_release();
      sub_24481241C(v18);
    }
  }
  return v14;
}

uint64_t sub_2448B10D8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _QWORD v11[6];
  uint64_t v12;
  uint64_t v13;

  v13 = 0;
  v11[2] = a2;
  v11[3] = a3;
  v11[4] = a4;
  v11[5] = &v13;
  type metadata accessor for Future(255, a3, a2, a3);
  v7 = sub_2448EA8B4();
  v8 = MEMORY[0x24951AC70](&protocol conformance descriptor for [A : B], v7);
  result = KeyValueMap.guaranteedValue(for:creatingIfNecessaryWith:)(a1, (uint64_t (*)(uint64_t))sub_2448B1290, (uint64_t)v11, v7, v8, (uint64_t)&v12);
  v10 = v13;
  *a5 = v12;
  a5[1] = v10;
  return result;
}

uint64_t sub_2448B1194@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  type metadata accessor for Future(0, a2, a2, a3);
  v6 = sub_2447EB4A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ConcurrentFutureCache.swift", 133, 2, 26, 65, (uint64_t)"guaranteedValue(for:creatingIfNecessaryWith:)", 45, 2);
  *a1 = v7;
  result = swift_release();
  *a4 = v6;
  return result;
}

uint64_t ConcurrentFutureCache.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t ConcurrentFutureCache.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_2448B1254@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return sub_2448B10D8(v1[5], v1[2], v1[3], v1[4], a1);
}

uint64_t type metadata accessor for ConcurrentFutureCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConcurrentFutureCache);
}

uint64_t method lookup function for ConcurrentFutureCache()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConcurrentFutureCache.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_2448B1290@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_2448B1194(*(_QWORD **)(v1 + 40), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

BOOL sub_2448B12AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v33[12];
  int v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;

  v38 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A590);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v35 = &v33[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = MEMORY[0x24BDAC7A8](v5);
  v36 = &v33[-v8];
  v9 = MEMORY[0x24BDAC7A8](v7);
  v37 = &v33[-v10];
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = &v33[-v12];
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = &v33[-v15];
  MEMORY[0x24BDAC7A8](v14);
  v18 = &v33[-v17];
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738F010);
  MEMORY[0x24BDAC7A8](v19);
  v21 = &v33[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_2447C9300(a1, (uint64_t)v21, &qword_25738F010);
  v22 = v3;
  v23 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v4 + 48))(v21, 1, v3);
  v24 = v23;
  if (v23 != 1)
  {
    v25 = (uint64_t)v37;
    v34 = v23;
    v26 = v38;
    sub_2447D3184((uint64_t)v21, (uint64_t)v18, &qword_25738A590);
    sub_2447C9300((uint64_t)v18, (uint64_t)v16, &qword_25738A590);
    if (swift_getEnumCaseMultiPayload() >= 2)
    {
      sub_2447C9300(v26, (uint64_t)v13, &qword_25738A590);
    }
    else
    {
      sub_2447BD180((uint64_t)v16, &qword_25738A590);
      sub_2447C9300(v26, (uint64_t)v13, &qword_25738A590);
      sub_2447C9300((uint64_t)v13, v25, &qword_25738A590);
      if (swift_getEnumCaseMultiPayload() < 2)
      {
        sub_2447BD180(v25, &qword_25738A590);
        sub_2447BD180((uint64_t)v13, &qword_25738A590);
        v27 = v36;
        sub_2447C9300((uint64_t)v18, (uint64_t)v36, &qword_25738A590);
        v28 = v35;
        sub_2447C9300(v26, (uint64_t)v35, &qword_25738A590);
        v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_257390FE8);
        sub_2447EB714(&qword_257390FF0, &qword_257390FE8, (uint64_t)&unk_2448EE5B8);
        swift_allocError();
        v31 = v30;
        sub_2447D3184((uint64_t)v27, v30, &qword_25738A590);
        sub_2447D3184((uint64_t)v28, v31 + *(int *)(v29 + 28), &qword_25738A590);
        swift_willThrow();
        sub_2447BD180((uint64_t)v18, &qword_25738A590);
LABEL_8:
        v24 = v34;
        return v24 == 1;
      }
    }
    sub_2447BD180((uint64_t)v13, &qword_25738A590);
    sub_2447BD180((uint64_t)v18, &qword_25738A590);
    goto LABEL_8;
  }
  sub_2447BD180(a1, &qword_25738F010);
  sub_2447C9300(v38, a1, &qword_25738A590);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(a1, 0, 1, v22);
  return v24 == 1;
}

uint64_t sub_2448B1610(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738F030);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (uint64_t *)((char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A590);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (uint64_t *)((char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2447C9300(a1, (uint64_t)v4, &qword_25738F030);
  if (swift_getEnumCaseMultiPayload() == 1)
    *v7 = *v4;
  else
    sub_244819704((uint64_t)v4, (uint64_t)v7);
  swift_storeEnumTagMultiPayload();
  sub_2447E9DF8((uint64_t)v7);
  return sub_2447BD180((uint64_t)v7, &qword_25738A590);
}

uint64_t Future.observeCompletion(on:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2448B18CC(a1, a2, a3, (uint64_t)&unk_25158AE68, (void (*)(_QWORD))sub_2448B420C);
}

uint64_t sub_2448B1744(_OWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  BOOL v12;
  uint64_t v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A590);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (_OWORD *)((char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(_QWORD *)(a2 + 16);
  v8 = a1[1];
  *v6 = *a1;
  v6[1] = v8;
  v6[2] = a1[2];
  *(_OWORD *)((char *)v6 + 41) = *(_OWORD *)((char *)a1 + 41);
  swift_storeEnumTagMultiPayload();
  v9 = *(_QWORD *)(v7 + 104);
  v10 = v9 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v9 + 16);
  v11 = (os_unfair_lock_s *)(v9 + ((*(unsigned int *)(*(_QWORD *)v9 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v11);
  v12 = sub_2448B12AC(v10, (uint64_t)v6);
  os_unfair_lock_unlock(v11);
  swift_release();
  if (v12)
    sub_2447D2178((uint64_t)v6);
  return sub_2447BD180((uint64_t)v6, &qword_25738A590);
}

uint64_t Future.observeCancelation(on:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2448B18CC(a1, a2, a3, (uint64_t)&unk_25158AE90, (void (*)(_QWORD))sub_2448B6B9C);
}

uint64_t sub_2448B18CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  uint64_t *v5;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v9 = *v5;
  v10 = *(void **)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = *(_QWORD *)(v9 + 80);
  v12[3] = v10;
  v12[4] = v11;
  v12[5] = a2;
  v12[6] = a3;
  sub_24481240C(v10);
  swift_retain();
  sub_2448D2A4C(a5, (uint64_t)v12, v13, v14);
  return swift_release();
}

uint64_t Future.observeFinish(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  return Future.observeFinish(on:_:)((uint64_t)v3, a1, a2);
}

uint64_t Future.observeCompletion(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  return Future.observeCompletion(on:_:)((uint64_t)v3, a1, a2);
}

uint64_t Future.observeCancelation(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  return Future.observeCancelation(on:_:)((uint64_t)v3, a1, a2);
}

uint64_t Future.observeSuccess(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  return Future.observeSuccess(on:_:)((uint64_t)v3, a1, a2);
}

uint64_t Future.observeFinish(on:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2448B18CC(a1, a2, a3, (uint64_t)&unk_25158AEB8, (void (*)(_QWORD))sub_2448B6BAC);
}

uint64_t sub_2448B1A1C(char *a1, void *a2, uint64_t a3, void (*a4)(char *), uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  void *v28;
  void *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  const void *v36;
  void (*v37)(char *, uint64_t);
  void *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *aBlock;
  uint64_t v52;
  uint64_t (*v53)(uint64_t);
  void *v54;
  uint64_t (*v55)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v56;

  v48 = a3;
  v49 = a5;
  v47 = a1;
  v46 = sub_2448EA704();
  v44 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  v43 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_2448EA734();
  v42 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v41 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for FutureTermination(0, a6, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v39 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v39 - v20;
  v22 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v22((char *)&v39 - v20, v47, v13);
  v22(v19, v21, v13);
  v47 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = v14;
  v22(v47, v21, v13);
  v24 = (*(unsigned __int8 *)(v14 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v25 = (char *)swift_allocObject();
  *((_QWORD *)v25 + 2) = a6;
  *((_QWORD *)v25 + 3) = a4;
  *((_QWORD *)v25 + 4) = v49;
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(&v25[v24], v21, v13);
  aBlock = a2;
  v52 = v48;
  swift_retain_n();
  if ((ExecutionLane.isCurrentLane.getter() & 1) != 0)
  {
    a4(v19);
    swift_release();
    swift_release();
    v26 = v19;
    v27 = v47;
  }
  else
  {
    v26 = v19;
    if (a2)
    {
      v40 = v13;
      if (a2 == (void *)1)
      {
        sub_244803860();
        v28 = (void *)sub_2448EB418();
        v55 = sub_2448B77A0;
        v56 = v25;
        aBlock = (void *)MEMORY[0x24BDAC760];
        v52 = 1107296256;
        v53 = sub_2447EB164;
        v54 = &block_descriptor_51;
        v29 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        v30 = v41;
        sub_2448EA71C();
        aBlock = (void *)MEMORY[0x24BEE4AF8];
        sub_2447EB5DC();
        __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
        sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
        v31 = v43;
        v32 = v46;
        sub_2448EB6C4();
        MEMORY[0x249519C08](0, v30, v31, v29);
        _Block_release(v29);

        (*(void (**)(char *, uint64_t))(v44 + 8))(v31, v32);
        (*(void (**)(char *, uint64_t))(v42 + 8))(v30, v45);
      }
      else
      {
        v55 = sub_2448B77A0;
        v56 = v25;
        aBlock = (void *)MEMORY[0x24BDAC760];
        v52 = 1107296256;
        v53 = sub_2447EB164;
        v54 = &block_descriptor_48;
        v39 = _Block_copy(&aBlock);
        swift_retain();
        sub_24481240C(a2);
        v33 = v41;
        sub_2448EA71C();
        v50 = MEMORY[0x24BEE4AF8];
        sub_2447EB5DC();
        __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
        sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
        v34 = v43;
        v35 = v46;
        sub_2448EB6C4();
        v36 = v39;
        MEMORY[0x249519C08](0, v33, v34, v39);
        _Block_release(v36);
        sub_24481241C(a2);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v34, v35);
        (*(void (**)(char *, uint64_t))(v42 + 8))(v33, v45);
        swift_release();
      }
      swift_release();
      swift_release();
      v27 = v47;
      v13 = v40;
    }
    else
    {
      v27 = v47;
      a4(v47);
      swift_release();
      swift_release();
    }
  }
  v37 = *(void (**)(char *, uint64_t))(v23 + 8);
  v37(v27, v13);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v37)(v26, v13);
}

uint64_t sub_2448B1F24(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_2448B1F4C(uint64_t a1, void *a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int EnumCaseMultiPayload;
  void (*v26)(uint64_t);
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void *v42;
  char *v43;
  char *v45;
  char *v46;
  uint64_t v47;
  const void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *aBlock;
  uint64_t v66;
  uint64_t (*v67)(uint64_t);
  void *v68;
  uint64_t (*v69)();
  uint64_t v70;

  v60 = a5;
  v61 = a2;
  v63 = a3;
  v57 = sub_2448EA704();
  v55 = *(_QWORD *)(v57 - 8);
  MEMORY[0x24BDAC7A8](v57);
  v54 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_2448EA734();
  v53 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v52 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A590);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (uint64_t *)((char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_257390FF8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (uint64_t *)((char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738F030);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v59 = (uint64_t)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v58 = (uint64_t)&v50 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v50 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v62 = (uint64_t)&v50 - v24;
  sub_2447C9300(a1, (uint64_t)v11, &qword_25738A590);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_244819704((uint64_t)v11, (uint64_t)v14);
    goto LABEL_5;
  }
  if (EnumCaseMultiPayload == 1)
  {
    *v14 = *v11;
LABEL_5:
    v26 = a4;
    swift_storeEnumTagMultiPayload();
    v27 = 0;
    goto LABEL_7;
  }
  v27 = 1;
  v26 = a4;
LABEL_7:
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, v27, 1, v15);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) != 1)
  {
    v30 = v62;
    sub_2447D3184((uint64_t)v14, v62, &qword_25738F030);
    sub_2447C9300(v30, (uint64_t)v23, &qword_25738F030);
    v31 = v58;
    sub_2447C9300((uint64_t)v23, v58, &qword_25738F030);
    v32 = v59;
    sub_2447C9300((uint64_t)v23, v59, &qword_25738F030);
    v33 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    v34 = swift_allocObject();
    v35 = v60;
    *(_QWORD *)(v34 + 16) = v26;
    *(_QWORD *)(v34 + 24) = v35;
    sub_2447D3184((uint64_t)v23, v34 + v33, &qword_25738F030);
    v36 = v61;
    aBlock = v61;
    v66 = v63;
    swift_retain_n();
    if ((ExecutionLane.isCurrentLane.getter() & 1) != 0)
    {
      v37 = v31;
    }
    else
    {
      if (v36)
      {
        if (v36 != (void *)1)
        {
          v69 = sub_2448B8FD8;
          v70 = v34;
          aBlock = (void *)MEMORY[0x24BDAC760];
          v66 = 1107296256;
          v67 = sub_2447EB164;
          v68 = &block_descriptor_111;
          v51 = _Block_copy(&aBlock);
          swift_retain();
          sub_24481240C(v36);
          v45 = v52;
          sub_2448EA71C();
          v64 = MEMORY[0x24BEE4AF8];
          sub_2447EB5DC();
          __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
          sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
          v46 = v54;
          v47 = v57;
          sub_2448EB6C4();
          v48 = v51;
          v49 = v61;
          MEMORY[0x249519C08](0, v45, v46, v51);
          _Block_release(v48);
          sub_24481241C(v49);
          (*(void (**)(char *, uint64_t))(v55 + 8))(v46, v47);
          (*(void (**)(char *, uint64_t))(v53 + 8))(v45, v56);
          swift_release();
          swift_release();
          goto LABEL_17;
        }
        sub_244803860();
        v63 = sub_2448EB418();
        v69 = sub_2448B8FD8;
        v70 = v34;
        aBlock = (void *)MEMORY[0x24BDAC760];
        v66 = 1107296256;
        v67 = sub_2447EB164;
        v68 = &block_descriptor_114;
        v38 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        v39 = v52;
        sub_2448EA71C();
        aBlock = (void *)MEMORY[0x24BEE4AF8];
        sub_2447EB5DC();
        __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
        sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
        v40 = v54;
        v41 = v57;
        sub_2448EB6C4();
        v42 = (void *)v63;
        MEMORY[0x249519C08](0, v39, v40, v38);
        _Block_release(v38);

        v43 = v40;
        v30 = v62;
        (*(void (**)(char *, uint64_t))(v55 + 8))(v43, v41);
        (*(void (**)(char *, uint64_t))(v53 + 8))(v39, v56);
LABEL_16:
        swift_release();
LABEL_17:
        swift_release();
        sub_2447BD180(v32, &qword_25738F030);
        swift_release();
        sub_2447BD180(v31, &qword_25738F030);
        v29 = v30;
        v28 = &qword_25738F030;
        return sub_2447BD180(v29, v28);
      }
      v37 = v32;
    }
    v26(v37);
    goto LABEL_16;
  }
  v28 = &qword_257390FF8;
  v29 = (uint64_t)v14;
  return sub_2447BD180(v29, v28);
}

void sub_2448B2564(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void **), uint64_t a5)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  unsigned __int8 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  void *v22;
  uint64_t v23;
  const void *v24;
  unint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *aBlock;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  void *v37;
  uint64_t (*v38)();
  uint64_t v39;
  void *v40;
  char v41;
  void *v42;
  char v43[56];
  char v44;

  v32 = a3;
  sub_2447D3184(a1, (uint64_t)&v42, &qword_25738A5A8);
  v9 = v42;
  v10 = sub_2448EA704();
  v31 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_2448EA734();
  v30 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2447D3184(a1, (uint64_t)v43, &qword_25738A5A8);
  if (v44)
  {
    if (v44 != 1)
      return;
    LOBYTE(aBlock) = 1;
    v16 = v9;
  }
  else
  {
    LOBYTE(aBlock) = 0;
    swift_bridgeObjectRetain();
  }
  v17 = aBlock;
  if (aBlock != 255)
  {
    v28 = v13;
    v29 = v10;
    v40 = v9;
    v18 = aBlock & 1;
    v41 = aBlock & 1;
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = a4;
    *(_QWORD *)(v19 + 24) = a5;
    sub_2447D3184((uint64_t)&v40, v19 + 32, &qword_25738F008);
    aBlock = a2;
    v35 = v32;
    swift_retain();
    sub_24486FE74(v9, v17);
    swift_retain();
    sub_24486FE74(v9, v17);
    swift_retain();
    sub_24486FE74(v9, v17);
    if ((ExecutionLane.isCurrentLane.getter() & 1) != 0)
    {
      aBlock = v9;
      LOBYTE(v35) = v18;
    }
    else
    {
      if (a2)
      {
        if (a2 == (void *)1)
        {
          sub_244803860();
          v32 = sub_2448EB418();
          v38 = sub_2448B9AE4;
          v39 = v19;
          aBlock = (void *)MEMORY[0x24BDAC760];
          v35 = 1107296256;
          v36 = sub_2447EB164;
          v37 = &block_descriptor_147;
          v27 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          sub_2448EA71C();
          aBlock = (void *)MEMORY[0x24BEE4AF8];
          sub_2447EB5DC();
          __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
          sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
          v20 = v29;
          sub_2448EB6C4();
          v21 = v27;
          v22 = (void *)v32;
          MEMORY[0x249519C08](0, v15, v12, v27);
          _Block_release(v21);

          (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v20);
          (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v28);
        }
        else
        {
          v38 = sub_2448B9AE4;
          v39 = v19;
          aBlock = (void *)MEMORY[0x24BDAC760];
          v35 = 1107296256;
          v36 = sub_2447EB164;
          v37 = &block_descriptor_144;
          v26 = _Block_copy(&aBlock);
          swift_retain();
          v27 = (void *)v19;
          sub_24481240C(a2);
          sub_2448EA71C();
          v33 = MEMORY[0x24BEE4AF8];
          v25 = sub_2447EB5DC();
          __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
          sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
          v23 = v29;
          sub_2448EB6C4();
          v24 = v26;
          MEMORY[0x249519C08](0, v15, v12, v26);
          _Block_release(v24);
          sub_24481241C(a2);
          (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v23);
          (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v28);
          swift_release();
        }
        sub_24486FE98(v9, v17);
        swift_release();
        goto LABEL_15;
      }
      aBlock = v9;
      LOBYTE(v35) = v17 & 1;
    }
    a4(&aBlock);
    sub_24486FE98(v9, v17);
    swift_release();
LABEL_15:
    swift_release();
    sub_24486FE98(v9, v17);
    swift_release();
    sub_24486FE98(v9, v17);
  }
}

void sub_2448B2AD4(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void **), uint64_t a5)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  unsigned __int8 v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  const void *v23;
  void *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  const void *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void *aBlock;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  void *v44;
  uint64_t (*v45)();
  uint64_t v46;
  _QWORD v47[3];
  char v48;
  _QWORD v49[8];
  char v50[24];
  char v51;

  v39 = a3;
  sub_2447D3184(a1, (uint64_t)v49, &qword_25738A5E8);
  v9 = (void *)v49[0];
  v10 = v49[1];
  v11 = v49[2];
  v12 = sub_2448EA704();
  v37 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v36 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_2448EA734();
  v35 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v38 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2447D3184(a1, (uint64_t)v50, &qword_25738A5E8);
  if (v51)
  {
    if (v51 != 1)
      return;
    LOBYTE(aBlock) = 1;
    v16 = v9;
    v11 = 0;
    v10 = 0;
  }
  else
  {
    LOBYTE(aBlock) = 0;
    swift_bridgeObjectRetain();
  }
  v17 = aBlock;
  if (aBlock != 255)
  {
    v33 = v14;
    v34 = v12;
    v47[0] = v9;
    v47[1] = v10;
    v47[2] = v11;
    v18 = aBlock & 1;
    v48 = aBlock & 1;
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = a4;
    *(_QWORD *)(v19 + 24) = a5;
    sub_2447D3184((uint64_t)v47, v19 + 32, &qword_25738A0B8);
    aBlock = a2;
    v42 = v39;
    swift_retain();
    sub_244817F40(v9, v10, v11, v17);
    swift_retain();
    sub_244817F40(v9, v10, v11, v17);
    swift_retain();
    sub_244817F40(v9, v10, v11, v17);
    if ((ExecutionLane.isCurrentLane.getter() & 1) != 0)
    {
      aBlock = v9;
      v42 = v10;
      v43 = (uint64_t (*)(uint64_t))v11;
      LOBYTE(v44) = v18;
    }
    else
    {
      if (a2)
      {
        v32 = v19;
        if (a2 == (void *)1)
        {
          sub_244803860();
          v39 = sub_2448EB418();
          v45 = sub_2448B9B24;
          v46 = v19;
          aBlock = (void *)MEMORY[0x24BDAC760];
          v42 = 1107296256;
          v43 = sub_2447EB164;
          v44 = &block_descriptor_166;
          v31 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          v20 = v38;
          sub_2448EA71C();
          aBlock = (void *)MEMORY[0x24BEE4AF8];
          sub_2447EB5DC();
          __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
          sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
          v21 = v36;
          v22 = v34;
          sub_2448EB6C4();
          v23 = v31;
          v24 = (void *)v39;
          MEMORY[0x249519C08](0, v20, v21, v31);
          _Block_release(v23);

          (*(void (**)(char *, uint64_t))(v37 + 8))(v21, v22);
          (*(void (**)(char *, uint64_t))(v35 + 8))(v20, v33);
        }
        else
        {
          v45 = sub_2448B9B24;
          v46 = v19;
          aBlock = (void *)MEMORY[0x24BDAC760];
          v42 = 1107296256;
          v43 = sub_2447EB164;
          v44 = &block_descriptor_163;
          v31 = _Block_copy(&aBlock);
          swift_retain();
          sub_24481240C(a2);
          v25 = v38;
          sub_2448EA71C();
          v40 = MEMORY[0x24BEE4AF8];
          v30 = sub_2447EB5DC();
          __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
          sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
          v26 = v36;
          v27 = v34;
          sub_2448EB6C4();
          v28 = v25;
          v29 = v31;
          MEMORY[0x249519C08](0, v28, v26, v31);
          _Block_release(v29);
          sub_24481241C(a2);
          (*(void (**)(char *, uint64_t))(v37 + 8))(v26, v27);
          (*(void (**)(char *, uint64_t))(v35 + 8))(v38, v33);
          swift_release();
        }
        sub_244818018(v9, v10, v11, v17);
        swift_release();
        goto LABEL_15;
      }
      aBlock = v9;
      v42 = v10;
      v43 = (uint64_t (*)(uint64_t))v11;
      LOBYTE(v44) = v17 & 1;
    }
    a4(&aBlock);
    sub_244818018(v9, v10, v11, v17);
    swift_release();
LABEL_15:
    swift_release();
    sub_244818018(v9, v10, v11, v17);
    swift_release();
    sub_244818018(v9, v10, v11, v17);
  }
}

void sub_2448B30DC(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void **), uint64_t a5)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  unsigned __int8 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  void *v22;
  uint64_t v23;
  const void *v24;
  unint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *aBlock;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  void *v37;
  uint64_t (*v38)();
  uint64_t v39;
  void *v40;
  char v41;
  void *v42;
  char v43[56];
  char v44;

  v32 = a3;
  sub_2447D3184(a1, (uint64_t)&v42, &qword_25738A5C8);
  v9 = v42;
  v10 = sub_2448EA704();
  v31 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_2448EA734();
  v30 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2447D3184(a1, (uint64_t)v43, &qword_25738A5C8);
  if (v44)
  {
    if (v44 != 1)
      return;
    LOBYTE(aBlock) = 1;
    v16 = v9;
  }
  else
  {
    LOBYTE(aBlock) = 0;
    swift_bridgeObjectRetain();
  }
  v17 = aBlock;
  if (aBlock != 255)
  {
    v28 = v13;
    v29 = v10;
    v40 = v9;
    v18 = aBlock & 1;
    v41 = aBlock & 1;
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = a4;
    *(_QWORD *)(v19 + 24) = a5;
    sub_2447D3184((uint64_t)&v40, v19 + 32, &qword_25738F068);
    aBlock = a2;
    v35 = v32;
    swift_retain();
    sub_24486FE74(v9, v17);
    swift_retain();
    sub_24486FE74(v9, v17);
    swift_retain();
    sub_24486FE74(v9, v17);
    if ((ExecutionLane.isCurrentLane.getter() & 1) != 0)
    {
      aBlock = v9;
      LOBYTE(v35) = v18;
    }
    else
    {
      if (a2)
      {
        if (a2 == (void *)1)
        {
          sub_244803860();
          v32 = sub_2448EB418();
          v38 = sub_2448B9AE4;
          v39 = v19;
          aBlock = (void *)MEMORY[0x24BDAC760];
          v35 = 1107296256;
          v36 = sub_2447EB164;
          v37 = &block_descriptor_185;
          v27 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          sub_2448EA71C();
          aBlock = (void *)MEMORY[0x24BEE4AF8];
          sub_2447EB5DC();
          __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
          sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
          v20 = v29;
          sub_2448EB6C4();
          v21 = v27;
          v22 = (void *)v32;
          MEMORY[0x249519C08](0, v15, v12, v27);
          _Block_release(v21);

          (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v20);
          (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v28);
        }
        else
        {
          v38 = sub_2448B9AE4;
          v39 = v19;
          aBlock = (void *)MEMORY[0x24BDAC760];
          v35 = 1107296256;
          v36 = sub_2447EB164;
          v37 = &block_descriptor_182;
          v26 = _Block_copy(&aBlock);
          swift_retain();
          v27 = (void *)v19;
          sub_24481240C(a2);
          sub_2448EA71C();
          v33 = MEMORY[0x24BEE4AF8];
          v25 = sub_2447EB5DC();
          __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
          sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
          v23 = v29;
          sub_2448EB6C4();
          v24 = v26;
          MEMORY[0x249519C08](0, v15, v12, v26);
          _Block_release(v24);
          sub_24481241C(a2);
          (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v23);
          (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v28);
          swift_release();
        }
        sub_24486FE98(v9, v17);
        swift_release();
        goto LABEL_15;
      }
      aBlock = v9;
      LOBYTE(v35) = v17 & 1;
    }
    a4(&aBlock);
    sub_24486FE98(v9, v17);
    swift_release();
LABEL_15:
    swift_release();
    sub_24486FE98(v9, v17);
    swift_release();
    sub_24486FE98(v9, v17);
  }
}

void sub_2448B364C(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void **), uint64_t a5)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  unsigned __int8 v17;
  char v18;
  uint64_t v19;
  void *v20;
  char *v21;
  uint64_t v22;
  const void *v23;
  void *v24;
  char *v25;
  uint64_t v26;
  const void *v27;
  unint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *aBlock;
  uint64_t v39;
  uint64_t (*v40)(uint64_t);
  void *v41;
  uint64_t (*v42)();
  uint64_t v43;
  _QWORD v44[2];
  char v45;
  _QWORD v46[8];
  _BYTE v47[40];
  char v48;
  char v49[8];

  v36 = a3;
  sub_2447D3184(a1, (uint64_t)v46, &qword_25738A600);
  v9 = (void *)v46[0];
  v10 = v46[1];
  v11 = sub_2448EA704();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v34 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_2448EA734();
  v33 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2447D3184(a1, (uint64_t)v47, &qword_25738A600);
  if (v48)
  {
    if (v48 != 1)
      return;
    LOBYTE(aBlock) = 1;
    v16 = v9;
    v10 = 0;
  }
  else
  {
    sub_2447D3184((uint64_t)v47, (uint64_t)v49, &qword_25738A0E8);
    LOBYTE(aBlock) = 0;
    swift_bridgeObjectRetain();
  }
  v17 = aBlock;
  if (aBlock != 255)
  {
    v31 = v12;
    v32 = v11;
    v44[0] = v9;
    v44[1] = v10;
    v18 = aBlock & 1;
    v45 = aBlock & 1;
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = a4;
    *(_QWORD *)(v19 + 24) = a5;
    sub_2447D3184((uint64_t)v44, v19 + 32, &qword_25738A0F8);
    aBlock = a2;
    v39 = v36;
    swift_retain();
    sub_244818178(v9, v10, v17);
    swift_retain();
    sub_244818178(v9, v10, v17);
    swift_retain();
    sub_244818178(v9, v10, v17);
    if ((ExecutionLane.isCurrentLane.getter() & 1) != 0)
    {
      aBlock = v9;
      v39 = v10;
      LOBYTE(v40) = v18;
    }
    else
    {
      if (a2)
      {
        v20 = (void *)v19;
        if (a2 == (void *)1)
        {
          sub_244803860();
          v36 = sub_2448EB418();
          v42 = sub_2448B9B94;
          v43 = v19;
          aBlock = (void *)MEMORY[0x24BDAC760];
          v39 = 1107296256;
          v40 = sub_2447EB164;
          v41 = &block_descriptor_204;
          v30 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          sub_2448EA71C();
          aBlock = (void *)MEMORY[0x24BEE4AF8];
          sub_2447EB5DC();
          __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
          sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
          v21 = v34;
          v22 = v32;
          sub_2448EB6C4();
          v23 = v30;
          v24 = (void *)v36;
          MEMORY[0x249519C08](0, v15, v21, v30);
          _Block_release(v23);

          (*(void (**)(char *, uint64_t))(v31 + 8))(v21, v22);
          (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v35);
        }
        else
        {
          v42 = sub_2448B9B94;
          v43 = v19;
          aBlock = (void *)MEMORY[0x24BDAC760];
          v39 = 1107296256;
          v40 = sub_2447EB164;
          v41 = &block_descriptor_201;
          v29 = _Block_copy(&aBlock);
          swift_retain();
          sub_24481240C(a2);
          sub_2448EA71C();
          v37 = MEMORY[0x24BEE4AF8];
          v28 = sub_2447EB5DC();
          __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
          sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
          v25 = v34;
          v30 = v20;
          v26 = v32;
          sub_2448EB6C4();
          v27 = v29;
          MEMORY[0x249519C08](0, v15, v25, v29);
          _Block_release(v27);
          sub_24481241C(a2);
          (*(void (**)(char *, uint64_t))(v31 + 8))(v25, v26);
          (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v35);
          swift_release();
        }
        sub_244818224(v9, v10, v17);
        swift_release();
        goto LABEL_15;
      }
      aBlock = v9;
      v39 = v10;
      LOBYTE(v40) = v17 & 1;
    }
    a4(&aBlock);
    sub_244818224(v9, v10, v17);
    swift_release();
LABEL_15:
    swift_release();
    sub_244818224(v9, v10, v17);
    swift_release();
    sub_244818224(v9, v10, v17);
  }
}

uint64_t sub_2448B3C44(uint64_t a1, void *a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(_QWORD);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v30)(char *, char *, uint64_t);
  void (*v31)(char *, char *, uint64_t);
  unint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(_QWORD);
  void *v36;
  char v37;
  char *v38;
  char *v39;
  void *v40;
  void *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void (*v63)(_QWORD);
  char *v64;
  uint64_t v65;
  void *aBlock;
  uint64_t v67;
  uint64_t (*v68)(uint64_t);
  void *v69;
  uint64_t (*v70)();
  char *v71;

  v59 = a5;
  v60 = a3;
  v62 = a1;
  v63 = a4;
  v61 = a2;
  v57 = sub_2448EA704();
  v55 = *(_QWORD *)(v57 - 8);
  MEMORY[0x24BDAC7A8](v57);
  v54 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_2448EA734();
  v53 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v52 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v9 = sub_2448EBD48();
  v10 = sub_2448EB508();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v51 - v13;
  v15 = *(void (**)(_QWORD))(v9 - 8);
  v16 = *((_QWORD *)v15 + 8);
  v17 = MEMORY[0x24BDAC7A8](v12);
  v64 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v51 - v19;
  v21 = MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)&v51 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v51 - v24;
  v58 = (char *)a6;
  v28 = type metadata accessor for FutureTermination(0, a6, v26, v27);
  FutureTermination.completedResult.getter(v28, v14);
  if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v15 + 6))(v14, 1, v9) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  v30 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v15 + 4);
  v30(v25, v14, v9);
  v31 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v15 + 2);
  v31(v23, v25, v9);
  v31(v20, v23, v9);
  v31(v64, v23, v9);
  v32 = (*((unsigned __int8 *)v15 + 80) + 40) & ~(unint64_t)*((unsigned __int8 *)v15 + 80);
  v33 = (char *)swift_allocObject();
  v34 = v59;
  v35 = v63;
  *((_QWORD *)v33 + 2) = v58;
  *((_QWORD *)v33 + 3) = v35;
  *((_QWORD *)v33 + 4) = v34;
  v30(&v33[v32], v23, v9);
  v36 = v61;
  aBlock = v61;
  v67 = v60;
  swift_retain_n();
  v37 = ExecutionLane.isCurrentLane.getter();
  v38 = v20;
  v39 = v64;
  if ((v37 & 1) != 0)
  {
    v63(v38);
  }
  else
  {
    if (v36)
    {
      v62 = v9;
      v63 = v15;
      v58 = v25;
      v51 = v38;
      if (v36 == (void *)1)
      {
        sub_244803860();
        v40 = (void *)sub_2448EB418();
        v70 = sub_2448B9CA4;
        v71 = v33;
        aBlock = (void *)MEMORY[0x24BDAC760];
        v67 = 1107296256;
        v68 = sub_2447EB164;
        v69 = &block_descriptor_223;
        v41 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        v42 = v52;
        sub_2448EA71C();
        aBlock = (void *)MEMORY[0x24BEE4AF8];
        sub_2447EB5DC();
        __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
        sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
        v43 = v54;
        v44 = v57;
        sub_2448EB6C4();
        MEMORY[0x249519C08](0, v42, v43, v41);
        _Block_release(v41);

        (*(void (**)(char *, uint64_t))(v55 + 8))(v43, v44);
        (*(void (**)(char *, uint64_t))(v53 + 8))(v42, v56);
      }
      else
      {
        v70 = sub_2448B9CA4;
        v71 = v33;
        aBlock = (void *)MEMORY[0x24BDAC760];
        v67 = 1107296256;
        v68 = sub_2447EB164;
        v69 = &block_descriptor_220;
        v45 = v36;
        v46 = _Block_copy(&aBlock);
        swift_retain();
        sub_24481240C(v45);
        v47 = v52;
        sub_2448EA71C();
        v65 = MEMORY[0x24BEE4AF8];
        sub_2447EB5DC();
        __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
        sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
        v48 = v54;
        v49 = v57;
        sub_2448EB6C4();
        MEMORY[0x249519C08](0, v47, v48, v46);
        _Block_release(v46);
        sub_24481241C(v45);
        (*(void (**)(char *, uint64_t))(v55 + 8))(v48, v49);
        (*(void (**)(char *, uint64_t))(v53 + 8))(v47, v56);
        swift_release();
      }
      swift_release();
      swift_release();
      v38 = v51;
      v15 = v63;
      v39 = v64;
      v25 = v58;
      v9 = v62;
      goto LABEL_12;
    }
    v63(v64);
  }
  swift_release();
  swift_release();
LABEL_12:
  v50 = (void (*)(char *, uint64_t))*((_QWORD *)v15 + 1);
  v50(v39, v9);
  swift_release();
  v50(v38, v9);
  return ((uint64_t (*)(char *, uint64_t))v50)(v25, v9);
}

uint64_t sub_2448B420C(uint64_t a1)
{
  return sub_2448B70DC(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2448B3C44);
}

uint64_t Future.observeSuccess(on:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2448B18CC(a1, a2, a3, (uint64_t)&unk_25158AEE0, (void (*)(_QWORD))sub_2448B6BBC);
}

void sub_2448B422C(char *a1, void *a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id *v26;
  uint64_t v27;
  int EnumCaseMultiPayload;
  uint64_t v29;
  void (*v30)(char *, id *, uint64_t);
  void (*v31)(char *, char *, uint64_t);
  unint64_t v32;
  char *v33;
  void (*v34)(_QWORD);
  void *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  void *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  void (*v48)(_QWORD);
  const void *v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  char *v65;
  void (*v66)(_QWORD);
  char *v67;
  uint64_t v68;
  void *aBlock;
  uint64_t v70;
  uint64_t (*v71)(uint64_t);
  void *v72;
  uint64_t (*v73)();
  char *v74;

  v62 = a5;
  v63 = a2;
  v66 = a4;
  v67 = a1;
  v64 = a3;
  v58 = sub_2448EA704();
  v60 = *(_QWORD *)(v58 - 8);
  MEMORY[0x24BDAC7A8](v58);
  v59 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2448EA734();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = *(_QWORD *)(a6 - 8);
  v13 = *(_QWORD *)(v61 + 64);
  v14 = MEMORY[0x24BDAC7A8](v10);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v65 = (char *)&v52 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v52 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v52 - v20;
  v24 = type metadata accessor for FutureTermination(0, a6, v22, v23);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (id *)((char *)&v52 - v25);
  (*(void (**)(char *, char *, uint64_t))(v27 + 16))((char *)&v52 - v25, v67, v24);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v54 = v12;
    v55 = v9;
    v56 = v8;
    v29 = v61;
    v30 = *(void (**)(char *, id *, uint64_t))(v61 + 32);
    v30(v21, v26, a6);
    v31 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
    v57 = v21;
    v31(v19, v21, a6);
    v31(v65, v19, a6);
    v67 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    v31(v67, v19, a6);
    v32 = (*(unsigned __int8 *)(v29 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
    v33 = (char *)swift_allocObject();
    v34 = v66;
    *((_QWORD *)v33 + 2) = a6;
    *((_QWORD *)v33 + 3) = v34;
    *((_QWORD *)v33 + 4) = v62;
    v30(&v33[v32], (id *)v19, a6);
    v35 = v63;
    aBlock = v63;
    v70 = v64;
    swift_retain_n();
    v36 = v29;
    v37 = a6;
    if ((ExecutionLane.isCurrentLane.getter() & 1) != 0)
    {
      v38 = v65;
      v66(v65);
      swift_release();
      swift_release();
    }
    else
    {
      if (!v35)
      {
        v44 = v67;
        v66(v67);
        swift_release();
        swift_release();
        v38 = v65;
LABEL_13:
        v50 = v57;
        v51 = *(void (**)(char *, uint64_t))(v36 + 8);
        v51(v44, v37);
        swift_release();
        v51(v38, v37);
        v51(v50, v37);
        return;
      }
      v53 = a6;
      if (v35 == (void *)1)
      {
        sub_244803860();
        v66 = (void (*)(_QWORD))sub_2448EB418();
        v73 = sub_2448B76BC;
        v74 = v33;
        aBlock = (void *)MEMORY[0x24BDAC760];
        v70 = 1107296256;
        v71 = sub_2447EB164;
        v72 = &block_descriptor_42_0;
        v39 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        v40 = v54;
        sub_2448EA71C();
        aBlock = (void *)MEMORY[0x24BEE4AF8];
        sub_2447EB5DC();
        __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
        sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
        v41 = v58;
        v42 = v59;
        sub_2448EB6C4();
        v43 = v66;
        MEMORY[0x249519C08](0, v40, v42, v39);
        _Block_release(v39);

        v37 = v53;
        (*(void (**)(char *, uint64_t))(v60 + 8))(v42, v41);
        (*(void (**)(char *, uint64_t))(v55 + 8))(v40, v56);
      }
      else
      {
        v73 = sub_2448B76BC;
        v74 = v33;
        aBlock = (void *)MEMORY[0x24BDAC760];
        v70 = 1107296256;
        v71 = sub_2447EB164;
        v72 = &block_descriptor_39_0;
        v66 = (void (*)(_QWORD))_Block_copy(&aBlock);
        swift_retain();
        sub_24481240C(v35);
        v45 = v54;
        sub_2448EA71C();
        v68 = MEMORY[0x24BEE4AF8];
        sub_2447EB5DC();
        __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
        sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
        v46 = v58;
        v47 = v59;
        sub_2448EB6C4();
        v48 = v66;
        MEMORY[0x249519C08](0, v45, v47, v66);
        v49 = v48;
        v37 = v53;
        _Block_release(v49);
        sub_24481241C(v35);
        (*(void (**)(char *, uint64_t))(v60 + 8))(v47, v46);
        (*(void (**)(char *, uint64_t))(v55 + 8))(v45, v56);
        swift_release();
      }
      swift_release();
      swift_release();
      v38 = v65;
    }
    v44 = v67;
    goto LABEL_13;
  }
  if (EnumCaseMultiPayload == 1)

}

uint64_t Future.observeFailure(on:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2448B18CC(a1, a2, a3, (uint64_t)&unk_25158AF08, (void (*)(_QWORD))sub_2448B6BCC);
}

void sub_2448B47F4(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void *), uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  int EnumCaseMultiPayload;
  void *v23;
  _QWORD *v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *aBlock;
  uint64_t v40;
  uint64_t (*v41)(uint64_t);
  void *v42;
  uint64_t (*v43)();
  _QWORD *v44;

  v34 = sub_2448EA704();
  v36 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_2448EA734();
  v35 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for FutureTermination(0, a6, v16, v17);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (void **)((char *)&v33 - v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)&v33 - v20, a1, v18);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v23 = *v21;
      v24 = (_QWORD *)swift_allocObject();
      v24[2] = a4;
      v24[3] = a5;
      v24[4] = v23;
      aBlock = a2;
      v40 = a3;
      swift_retain();
      v25 = v23;
      swift_retain();
      v26 = v23;
      swift_retain();
      v27 = v23;
      if ((ExecutionLane.isCurrentLane.getter() & 1) != 0 || !a2)
      {
        a4(v23);
      }
      else if (a2 == (void *)1)
      {
        sub_244803860();
        v33 = sub_2448EB418();
        v43 = sub_2448B75DC;
        v44 = v24;
        aBlock = (void *)MEMORY[0x24BDAC760];
        v40 = 1107296256;
        v41 = sub_2447EB164;
        v42 = &block_descriptor_33_0;
        v28 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        sub_2448EA71C();
        aBlock = (void *)MEMORY[0x24BEE4AF8];
        sub_2447EB5DC();
        __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
        sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
        v29 = v34;
        sub_2448EB6C4();
        v30 = (void *)v33;
        MEMORY[0x249519C08](0, v15, v13, v28);
        _Block_release(v28);

        (*(void (**)(char *, uint64_t))(v36 + 8))(v13, v29);
        (*(void (**)(char *, uint64_t))(v35 + 8))(v15, v37);
      }
      else
      {
        v43 = sub_2448B75DC;
        v44 = v24;
        aBlock = (void *)MEMORY[0x24BDAC760];
        v40 = 1107296256;
        v41 = sub_2447EB164;
        v42 = &block_descriptor_30_0;
        v33 = (uint64_t)_Block_copy(&aBlock);
        swift_retain();
        sub_24481240C(a2);
        sub_2448EA71C();
        v38 = MEMORY[0x24BEE4AF8];
        sub_2447EB5DC();
        __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
        sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
        v31 = v34;
        sub_2448EB6C4();
        v32 = (const void *)v33;
        MEMORY[0x249519C08](0, v15, v13, v33);
        _Block_release(v32);
        sub_24481241C(a2);
        (*(void (**)(char *, uint64_t))(v36 + 8))(v13, v31);
        (*(void (**)(char *, uint64_t))(v35 + 8))(v15, v37);
        swift_release();
      }

      swift_release();
      swift_release();

      swift_release();
    }
  }
  else
  {
    (*(void (**)(void **, uint64_t))(v19 + 8))(v21, v18);
  }
}

uint64_t Future.observeFailure(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  return Future.observeFailure(on:_:)((uint64_t)v3, a1, a2);
}

void sub_2448B4C64(uint64_t a1, void *a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int EnumCaseMultiPayload;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 aBlock;
  __int128 v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  _OWORD v36[3];

  v29 = a5;
  v9 = sub_2448EA704();
  v27 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_2448EA734();
  v26 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A590);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2447C9300(a1, (uint64_t)v16, &qword_25738A590);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_2447BD180((uint64_t)v16, &qword_25738A590);
    return;
  }
  if (EnumCaseMultiPayload == 1)
  {

    return;
  }
  v18 = *((_OWORD *)v16 + 1);
  v34 = *(_OWORD *)v16;
  v35 = v18;
  v36[0] = *((_OWORD *)v16 + 2);
  *(_OWORD *)((char *)v36 + 9) = *(_OWORD *)(v16 + 41);
  v19 = swift_allocObject();
  v20 = v29;
  *(_QWORD *)(v19 + 16) = a4;
  *(_QWORD *)(v19 + 24) = v20;
  v21 = *((_OWORD *)v16 + 1);
  *(_OWORD *)(v19 + 32) = *(_OWORD *)v16;
  *(_OWORD *)(v19 + 48) = v21;
  *(_OWORD *)(v19 + 64) = *((_OWORD *)v16 + 2);
  *(_OWORD *)(v19 + 73) = *(_OWORD *)(v16 + 41);
  *(_QWORD *)&aBlock = a2;
  *((_QWORD *)&aBlock + 1) = a3;
  swift_retain_n();
  if ((ExecutionLane.isCurrentLane.getter() & 1) != 0 || !a2)
  {
    aBlock = v34;
    v32 = v35;
    v33[0] = v36[0];
    *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)((char *)v36 + 9);
    a4(&aBlock);
  }
  else
  {
    if (a2 != (void *)1)
    {
      *(_QWORD *)&v33[0] = sub_2448B8F7C;
      *((_QWORD *)&v33[0] + 1) = v19;
      *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
      *((_QWORD *)&aBlock + 1) = 1107296256;
      *(_QWORD *)&v32 = sub_2447EB164;
      *((_QWORD *)&v32 + 1) = &block_descriptor_71;
      v24 = _Block_copy(&aBlock);
      swift_retain();
      sub_24481240C(a2);
      sub_2448EA71C();
      v30 = MEMORY[0x24BEE4AF8];
      sub_2447EB5DC();
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
      sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
      sub_2448EB6C4();
      MEMORY[0x249519C08](0, v13, v11, v24);
      _Block_release(v24);
      sub_24481241C(a2);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v9);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v28);
      swift_release_n();
      swift_release();
      goto LABEL_11;
    }
    sub_244803860();
    v22 = (void *)sub_2448EB418();
    *(_QWORD *)&v33[0] = sub_2448B8F7C;
    *((_QWORD *)&v33[0] + 1) = v19;
    *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v32 = sub_2447EB164;
    *((_QWORD *)&v32 + 1) = &block_descriptor_74;
    v23 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    sub_2448EA71C();
    *(_QWORD *)&aBlock = MEMORY[0x24BEE4AF8];
    sub_2447EB5DC();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
    sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
    sub_2448EB6C4();
    MEMORY[0x249519C08](0, v13, v11, v23);
    _Block_release(v23);

    (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v9);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v28);
  }
  swift_release_n();
LABEL_11:
  swift_release();
}

uint64_t sub_2448B50D0(uint64_t a1, void *a2, uint64_t a3, void (*a4)(id *), uint64_t a5)
{
  void *v8;
  void *v9;
  char v10;
  uint64_t (*v11)();
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void *v24;
  id v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _QWORD v29[2];
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(id *);
  id v39;
  uint64_t v40;
  id aBlock;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  void *v44;
  uint64_t (*v45)();
  uint64_t v46;
  uint64_t v47;
  char v48;
  _QWORD v49[2];
  uint64_t v50;
  void *v51;
  uint64_t (*v52)();
  uint64_t v53;
  uint64_t v54;
  char v55;
  _BYTE v56[64];

  v38 = a4;
  v39 = a2;
  sub_2447D3184(a1, (uint64_t)v49, &qword_25738A5A8);
  v8 = (void *)v49[0];
  v36 = v49[1];
  v10 = v50;
  v9 = v51;
  v11 = v52;
  v37 = v53;
  v12 = v54;
  v13 = v55;
  v35 = sub_2448EA704();
  v33 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v32 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_2448EA734();
  v31 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v30 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_2447D3184(a1, (uint64_t)v56, &qword_25738A5A8);
  if (v56[57] >= 2u)
  {
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v38;
    *(_QWORD *)(v17 + 24) = a5;
    v18 = v36;
    *(_QWORD *)(v17 + 32) = v8;
    *(_QWORD *)(v17 + 40) = v18;
    *(_BYTE *)(v17 + 48) = v10;
    *(_QWORD *)(v17 + 56) = v9;
    *(_QWORD *)(v17 + 64) = v11;
    *(_QWORD *)(v17 + 72) = v37;
    *(_QWORD *)(v17 + 80) = v12;
    *(_BYTE *)(v17 + 88) = v13;
    aBlock = v39;
    v29[1] = a3;
    v42 = a3;
    swift_retain_n();
    if ((ExecutionLane.isCurrentLane.getter() & 1) != 0 || (v29[0] = a5, !v39))
    {
      aBlock = v8;
      v42 = v36;
      LOBYTE(v43) = v10;
      v44 = v9;
      v45 = v11;
      v46 = v37;
      v47 = v12;
      v48 = v13;
      v38(&aBlock);
    }
    else
    {
      if (v39 != (id)1)
      {
        v45 = sub_2448B8F7C;
        v46 = v17;
        aBlock = (id)MEMORY[0x24BDAC760];
        v42 = 1107296256;
        v43 = sub_2447EB164;
        v44 = &block_descriptor_135;
        v24 = _Block_copy(&aBlock);
        swift_retain();
        v25 = v39;
        sub_24481240C(v39);
        v26 = v30;
        sub_2448EA71C();
        v40 = MEMORY[0x24BEE4AF8];
        sub_2447EB5DC();
        __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
        sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
        v27 = v32;
        v28 = v35;
        sub_2448EB6C4();
        MEMORY[0x249519C08](0, v26, v27, v24);
        _Block_release(v24);
        sub_24481241C(v25);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v27, v28);
        (*(void (**)(char *, uint64_t))(v31 + 8))(v26, v34);
        swift_release_n();
        swift_release();
        return swift_release();
      }
      sub_244803860();
      v19 = (void *)sub_2448EB418();
      v45 = sub_2448B8F7C;
      v46 = v17;
      aBlock = (id)MEMORY[0x24BDAC760];
      v42 = 1107296256;
      v43 = sub_2447EB164;
      v44 = &block_descriptor_138;
      v20 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      v21 = v30;
      sub_2448EA71C();
      aBlock = (id)MEMORY[0x24BEE4AF8];
      sub_2447EB5DC();
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
      sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
      v22 = v32;
      v23 = v35;
      sub_2448EB6C4();
      MEMORY[0x249519C08](0, v21, v22, v20);
      _Block_release(v20);

      (*(void (**)(char *, uint64_t))(v33 + 8))(v22, v23);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v21, v34);
    }
    swift_release_n();
    return swift_release();
  }
  return result;
}

uint64_t sub_2448B5654(uint64_t a1, void *a2, uint64_t a3, void (*a4)(id *), uint64_t a5)
{
  void *v8;
  void *v9;
  char v10;
  uint64_t (*v11)();
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void *v24;
  id v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _QWORD v29[2];
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(id *);
  id v39;
  uint64_t v40;
  id aBlock;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  void *v44;
  uint64_t (*v45)();
  uint64_t v46;
  uint64_t v47;
  char v48;
  _QWORD v49[2];
  uint64_t v50;
  void *v51;
  uint64_t (*v52)();
  uint64_t v53;
  uint64_t v54;
  char v55;
  _BYTE v56[64];

  v38 = a4;
  v39 = a2;
  sub_2447D3184(a1, (uint64_t)v49, &qword_25738A5E8);
  v8 = (void *)v49[0];
  v36 = v49[1];
  v10 = v50;
  v9 = v51;
  v11 = v52;
  v37 = v53;
  v12 = v54;
  v13 = v55;
  v35 = sub_2448EA704();
  v33 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v32 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_2448EA734();
  v31 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v30 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_2447D3184(a1, (uint64_t)v56, &qword_25738A5E8);
  if (v56[57] >= 2u)
  {
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v38;
    *(_QWORD *)(v17 + 24) = a5;
    v18 = v36;
    *(_QWORD *)(v17 + 32) = v8;
    *(_QWORD *)(v17 + 40) = v18;
    *(_BYTE *)(v17 + 48) = v10;
    *(_QWORD *)(v17 + 56) = v9;
    *(_QWORD *)(v17 + 64) = v11;
    *(_QWORD *)(v17 + 72) = v37;
    *(_QWORD *)(v17 + 80) = v12;
    *(_BYTE *)(v17 + 88) = v13;
    aBlock = v39;
    v29[1] = a3;
    v42 = a3;
    swift_retain_n();
    if ((ExecutionLane.isCurrentLane.getter() & 1) != 0 || (v29[0] = a5, !v39))
    {
      aBlock = v8;
      v42 = v36;
      LOBYTE(v43) = v10;
      v44 = v9;
      v45 = v11;
      v46 = v37;
      v47 = v12;
      v48 = v13;
      v38(&aBlock);
    }
    else
    {
      if (v39 != (id)1)
      {
        v45 = sub_2448B8F7C;
        v46 = v17;
        aBlock = (id)MEMORY[0x24BDAC760];
        v42 = 1107296256;
        v43 = sub_2447EB164;
        v44 = &block_descriptor_154;
        v24 = _Block_copy(&aBlock);
        swift_retain();
        v25 = v39;
        sub_24481240C(v39);
        v26 = v30;
        sub_2448EA71C();
        v40 = MEMORY[0x24BEE4AF8];
        sub_2447EB5DC();
        __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
        sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
        v27 = v32;
        v28 = v35;
        sub_2448EB6C4();
        MEMORY[0x249519C08](0, v26, v27, v24);
        _Block_release(v24);
        sub_24481241C(v25);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v27, v28);
        (*(void (**)(char *, uint64_t))(v31 + 8))(v26, v34);
        swift_release_n();
        swift_release();
        return swift_release();
      }
      sub_244803860();
      v19 = (void *)sub_2448EB418();
      v45 = sub_2448B8F7C;
      v46 = v17;
      aBlock = (id)MEMORY[0x24BDAC760];
      v42 = 1107296256;
      v43 = sub_2447EB164;
      v44 = &block_descriptor_157;
      v20 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      v21 = v30;
      sub_2448EA71C();
      aBlock = (id)MEMORY[0x24BEE4AF8];
      sub_2447EB5DC();
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
      sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
      v22 = v32;
      v23 = v35;
      sub_2448EB6C4();
      MEMORY[0x249519C08](0, v21, v22, v20);
      _Block_release(v20);

      (*(void (**)(char *, uint64_t))(v33 + 8))(v22, v23);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v21, v34);
    }
    swift_release_n();
    return swift_release();
  }
  return result;
}

uint64_t sub_2448B5BD8(uint64_t a1, void *a2, uint64_t a3, void (*a4)(id *), uint64_t a5)
{
  void *v8;
  void *v9;
  char v10;
  uint64_t (*v11)();
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void *v24;
  id v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _QWORD v29[2];
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(id *);
  id v39;
  uint64_t v40;
  id aBlock;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  void *v44;
  uint64_t (*v45)();
  uint64_t v46;
  uint64_t v47;
  char v48;
  _QWORD v49[2];
  uint64_t v50;
  void *v51;
  uint64_t (*v52)();
  uint64_t v53;
  uint64_t v54;
  char v55;
  _BYTE v56[64];

  v38 = a4;
  v39 = a2;
  sub_2447D3184(a1, (uint64_t)v49, &qword_25738A5C8);
  v8 = (void *)v49[0];
  v36 = v49[1];
  v10 = v50;
  v9 = v51;
  v11 = v52;
  v37 = v53;
  v12 = v54;
  v13 = v55;
  v35 = sub_2448EA704();
  v33 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v32 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_2448EA734();
  v31 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v30 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_2447D3184(a1, (uint64_t)v56, &qword_25738A5C8);
  if (v56[57] >= 2u)
  {
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v38;
    *(_QWORD *)(v17 + 24) = a5;
    v18 = v36;
    *(_QWORD *)(v17 + 32) = v8;
    *(_QWORD *)(v17 + 40) = v18;
    *(_BYTE *)(v17 + 48) = v10;
    *(_QWORD *)(v17 + 56) = v9;
    *(_QWORD *)(v17 + 64) = v11;
    *(_QWORD *)(v17 + 72) = v37;
    *(_QWORD *)(v17 + 80) = v12;
    *(_BYTE *)(v17 + 88) = v13;
    aBlock = v39;
    v29[1] = a3;
    v42 = a3;
    swift_retain_n();
    if ((ExecutionLane.isCurrentLane.getter() & 1) != 0 || (v29[0] = a5, !v39))
    {
      aBlock = v8;
      v42 = v36;
      LOBYTE(v43) = v10;
      v44 = v9;
      v45 = v11;
      v46 = v37;
      v47 = v12;
      v48 = v13;
      v38(&aBlock);
    }
    else
    {
      if (v39 != (id)1)
      {
        v45 = sub_2448B8F7C;
        v46 = v17;
        aBlock = (id)MEMORY[0x24BDAC760];
        v42 = 1107296256;
        v43 = sub_2447EB164;
        v44 = &block_descriptor_173;
        v24 = _Block_copy(&aBlock);
        swift_retain();
        v25 = v39;
        sub_24481240C(v39);
        v26 = v30;
        sub_2448EA71C();
        v40 = MEMORY[0x24BEE4AF8];
        sub_2447EB5DC();
        __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
        sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
        v27 = v32;
        v28 = v35;
        sub_2448EB6C4();
        MEMORY[0x249519C08](0, v26, v27, v24);
        _Block_release(v24);
        sub_24481241C(v25);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v27, v28);
        (*(void (**)(char *, uint64_t))(v31 + 8))(v26, v34);
        swift_release_n();
        swift_release();
        return swift_release();
      }
      sub_244803860();
      v19 = (void *)sub_2448EB418();
      v45 = sub_2448B8F7C;
      v46 = v17;
      aBlock = (id)MEMORY[0x24BDAC760];
      v42 = 1107296256;
      v43 = sub_2447EB164;
      v44 = &block_descriptor_176;
      v20 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      v21 = v30;
      sub_2448EA71C();
      aBlock = (id)MEMORY[0x24BEE4AF8];
      sub_2447EB5DC();
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
      sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
      v22 = v32;
      v23 = v35;
      sub_2448EB6C4();
      MEMORY[0x249519C08](0, v21, v22, v20);
      _Block_release(v20);

      (*(void (**)(char *, uint64_t))(v33 + 8))(v22, v23);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v21, v34);
    }
    swift_release_n();
    return swift_release();
  }
  return result;
}

uint64_t sub_2448B615C(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void **), uint64_t a5)
{
  void *v7;
  char v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  char *v26;
  char *v27;
  void *v28;
  char *v29;
  void *v30;
  char *v31;
  uint64_t v32;
  void *v33;
  int v34;
  void (*v35)(void **);
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *aBlock;
  uint64_t v48;
  uint64_t (*v49)(uint64_t);
  void *v50;
  uint64_t (*v51)();
  uint64_t v52;
  uint64_t v53;
  char v54;
  _QWORD v55[2];
  uint64_t v56;
  void *v57;
  uint64_t (*v58)();
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 v61;
  char v62[8];
  char v63;

  v45 = a5;
  v44 = a3;
  v41 = a2;
  sub_2447D3184(a1, (uint64_t)v55, &qword_25738A600);
  v7 = (void *)v55[0];
  v42 = v55[1];
  v8 = v56;
  v43 = v57;
  v10 = v58;
  v9 = v59;
  v11 = v60;
  v12 = v61;
  v13 = sub_2448EA704();
  v39 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v38 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_2448EA734();
  v37 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v36 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_2447D3184(a1, (uint64_t)v62, &qword_25738A600);
  if (!v63)
    return sub_2447D3184((uint64_t)v62, (uint64_t)&aBlock, &qword_25738A0E8);
  if (v63 == 1)
    return result;
  v32 = v13;
  v17 = swift_allocObject();
  v18 = v45;
  *(_QWORD *)(v17 + 16) = a4;
  *(_QWORD *)(v17 + 24) = v18;
  v35 = a4;
  v19 = v42;
  *(_QWORD *)(v17 + 32) = v7;
  *(_QWORD *)(v17 + 40) = v19;
  *(_BYTE *)(v17 + 48) = v8;
  v33 = v7;
  v20 = v43;
  *(_QWORD *)(v17 + 56) = v43;
  *(_QWORD *)(v17 + 64) = v10;
  *(_QWORD *)(v17 + 72) = v9;
  *(_QWORD *)(v17 + 80) = v11;
  *(_BYTE *)(v17 + 88) = v12;
  v34 = v12;
  v21 = v8;
  v22 = v41;
  aBlock = v41;
  v48 = v44;
  swift_retain_n();
  if ((ExecutionLane.isCurrentLane.getter() & 1) != 0)
  {
    aBlock = v33;
    v48 = v19;
    LOBYTE(v49) = v21;
    v50 = v20;
    v51 = v10;
    v52 = v9;
    v53 = v11;
    v54 = v34;
    v35(&aBlock);
  }
  else
  {
    v23 = v32;
    if (!v22)
    {
      aBlock = v33;
      v48 = v42;
      LOBYTE(v49) = v21;
      v50 = v43;
      v51 = v10;
      v52 = v9;
      v53 = v11;
      v54 = v34;
      v35(&aBlock);
      swift_release_n();
      return swift_release();
    }
    if (v22 != (void *)1)
    {
      v51 = sub_2448B8F7C;
      v52 = v17;
      aBlock = (void *)MEMORY[0x24BDAC760];
      v48 = 1107296256;
      v49 = sub_2447EB164;
      v50 = &block_descriptor_192;
      v28 = _Block_copy(&aBlock);
      swift_retain();
      sub_24481240C(v22);
      v29 = v36;
      sub_2448EA71C();
      v46 = MEMORY[0x24BEE4AF8];
      sub_2447EB5DC();
      v30 = v22;
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
      sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
      v31 = v38;
      sub_2448EB6C4();
      MEMORY[0x249519C08](0, v29, v31, v28);
      _Block_release(v28);
      sub_24481241C(v30);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v31, v23);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v29, v40);
      swift_release_n();
      swift_release();
      return swift_release();
    }
    sub_244803860();
    v24 = (void *)sub_2448EB418();
    v51 = sub_2448B8F7C;
    v52 = v17;
    aBlock = (void *)MEMORY[0x24BDAC760];
    v48 = 1107296256;
    v49 = sub_2447EB164;
    v50 = &block_descriptor_195;
    v25 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    v26 = v36;
    sub_2448EA71C();
    aBlock = (void *)MEMORY[0x24BEE4AF8];
    sub_2447EB5DC();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
    sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
    v27 = v38;
    sub_2448EB6C4();
    MEMORY[0x249519C08](0, v26, v27, v25);
    _Block_release(v25);

    (*(void (**)(char *, uint64_t))(v39 + 8))(v27, v23);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v26, v40);
  }
  swift_release_n();
  return swift_release();
}

void sub_2448B6724(uint64_t a1, void *a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int EnumCaseMultiPayload;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 aBlock;
  __int128 v38;
  _OWORD v39[2];
  __int128 v40;
  __int128 v41;
  _OWORD v42[3];

  v32 = sub_2448EA704();
  v34 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_2448EA734();
  v33 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for FutureTermination(0, a6, v16, v17);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v31 - v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)&v31 - v20, a1, v18);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    return;
  }
  if (EnumCaseMultiPayload == 1)
  {

    return;
  }
  v23 = *((_OWORD *)v21 + 1);
  v40 = *(_OWORD *)v21;
  v41 = v23;
  v42[0] = *((_OWORD *)v21 + 2);
  *(_OWORD *)((char *)v42 + 9) = *(_OWORD *)(v21 + 41);
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = a4;
  *(_QWORD *)(v24 + 24) = a5;
  v25 = *((_OWORD *)v21 + 1);
  *(_OWORD *)(v24 + 32) = *(_OWORD *)v21;
  *(_OWORD *)(v24 + 48) = v25;
  *(_OWORD *)(v24 + 64) = *((_OWORD *)v21 + 2);
  *(_OWORD *)(v24 + 73) = *(_OWORD *)(v21 + 41);
  *(_QWORD *)&aBlock = a2;
  *((_QWORD *)&aBlock + 1) = a3;
  swift_retain_n();
  if ((ExecutionLane.isCurrentLane.getter() & 1) != 0 || !a2)
  {
    aBlock = v40;
    v38 = v41;
    v39[0] = v42[0];
    *(_OWORD *)((char *)v39 + 9) = *(_OWORD *)((char *)v42 + 9);
    a4(&aBlock);
  }
  else
  {
    if (a2 != (void *)1)
    {
      *(_QWORD *)&v39[0] = sub_2448B8F7C;
      *((_QWORD *)&v39[0] + 1) = v24;
      *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
      *((_QWORD *)&aBlock + 1) = 1107296256;
      *(_QWORD *)&v38 = sub_2447EB164;
      *((_QWORD *)&v38 + 1) = &block_descriptor_211;
      v29 = _Block_copy(&aBlock);
      swift_retain();
      sub_24481240C(a2);
      sub_2448EA71C();
      v36 = MEMORY[0x24BEE4AF8];
      sub_2447EB5DC();
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
      sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
      v30 = v32;
      sub_2448EB6C4();
      MEMORY[0x249519C08](0, v15, v13, v29);
      _Block_release(v29);
      sub_24481241C(a2);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v30);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v35);
      swift_release_n();
      swift_release();
      goto LABEL_11;
    }
    sub_244803860();
    v26 = (void *)sub_2448EB418();
    *(_QWORD *)&v39[0] = sub_2448B8F7C;
    *((_QWORD *)&v39[0] + 1) = v24;
    *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v38 = sub_2447EB164;
    *((_QWORD *)&v38 + 1) = &block_descriptor_214;
    v27 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    sub_2448EA71C();
    *(_QWORD *)&aBlock = MEMORY[0x24BEE4AF8];
    sub_2447EB5DC();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
    sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
    v28 = v32;
    sub_2448EB6C4();
    MEMORY[0x249519C08](0, v15, v13, v27);
    _Block_release(v27);

    (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v28);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v35);
  }
  swift_release_n();
LABEL_11:
  swift_release();
}

uint64_t sub_2448B6B9C(uint64_t a1)
{
  return sub_2448B70DC(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2448B6724);
}

uint64_t sub_2448B6BAC(uint64_t a1)
{
  return sub_2448B70DC(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2448B1A1C);
}

uint64_t sub_2448B6BBC(uint64_t a1)
{
  return sub_2448B70DC(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2448B422C);
}

uint64_t sub_2448B6BCC(uint64_t a1)
{
  return sub_2448B70DC(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2448B47F4);
}

uint64_t sub_2448B6BD8(uint64_t (*a1)(_OWORD *), uint64_t a2, _OWORD *a3)
{
  __int128 v3;
  _OWORD v5[2];
  _OWORD v6[2];

  v3 = a3[1];
  v5[0] = *a3;
  v5[1] = v3;
  v6[0] = a3[2];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)a3 + 41);
  return a1(v5);
}

uint64_t Future.observeUnsuccessfulResult(on:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2448B18CC(a1, a2, a3, (uint64_t)&unk_25158AF30, (void (*)(_QWORD))sub_2448B70D0);
}

void sub_2448B6C34(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void *), uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  char *v27;
  uint64_t v28;
  void *v29;
  char *v30;
  uint64_t v31;
  const void *v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *aBlock;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  void *v44;
  uint64_t (*v45)();
  _QWORD *v46;

  v39 = sub_2448EA704();
  v37 = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v35 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_2448EA734();
  v36 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v14 = sub_2448EBD48();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (void **)((char *)&v33 - v16);
  v20 = type metadata accessor for FutureTermination(0, a6, v18, v19);
  FutureTermination.result.getter(v20, v17);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v21 = *v17;
    v22 = (_QWORD *)swift_allocObject();
    v22[2] = a4;
    v22[3] = a5;
    v22[4] = v21;
    aBlock = a2;
    v42 = a3;
    swift_retain();
    v23 = v21;
    swift_retain();
    v24 = v21;
    swift_retain();
    v25 = v21;
    if ((ExecutionLane.isCurrentLane.getter() & 1) != 0 || !a2)
    {
      a4(v21);
    }
    else if (a2 == (void *)1)
    {
      sub_244803860();
      v34 = sub_2448EB418();
      v45 = sub_2448B75DC;
      v46 = v22;
      aBlock = (void *)MEMORY[0x24BDAC760];
      v42 = 1107296256;
      v43 = sub_2447EB164;
      v44 = &block_descriptor_24;
      v26 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      sub_2448EA71C();
      aBlock = (void *)MEMORY[0x24BEE4AF8];
      sub_2447EB5DC();
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
      sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
      v27 = v35;
      v28 = v39;
      sub_2448EB6C4();
      v29 = (void *)v34;
      MEMORY[0x249519C08](0, v13, v27, v26);
      _Block_release(v26);

      (*(void (**)(char *, uint64_t))(v37 + 8))(v27, v28);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v13, v38);
    }
    else
    {
      v45 = sub_2448B75DC;
      v46 = v22;
      aBlock = (void *)MEMORY[0x24BDAC760];
      v42 = 1107296256;
      v43 = sub_2447EB164;
      v44 = &block_descriptor_11;
      v34 = (uint64_t)_Block_copy(&aBlock);
      swift_retain();
      sub_24481240C(a2);
      sub_2448EA71C();
      v40 = MEMORY[0x24BEE4AF8];
      v33 = sub_2447EB5DC();
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
      sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
      v30 = v35;
      v31 = v39;
      sub_2448EB6C4();
      v32 = (const void *)v34;
      MEMORY[0x249519C08](0, v13, v30, v34);
      _Block_release(v32);
      sub_24481241C(a2);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v30, v31);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v13, v38);
      swift_release();
    }

    swift_release();
    swift_release();

    swift_release();
  }
  else
  {
    (*(void (**)(void **, uint64_t))(v15 + 8))(v17, v14);
  }
}

uint64_t objectdestroyTm_2()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 24);
  if ((unint64_t)v1 >= 2)

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2448B70D0(uint64_t a1)
{
  return sub_2448B70DC(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2448B6C34);
}

uint64_t sub_2448B70DC(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[3], v2[4], v2[5], v2[6], v2[2]);
}

uint64_t Future.cancelOrObserveSuccess(dsoHandle:file:line:column:function:on:closure:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, __int128 *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  __int128 v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v21 = *a10;
  Future.observeSuccess(on:_:)((uint64_t)&v21, a11, a12);
  *(_QWORD *)&v21 = a2;
  *((_QWORD *)&v21 + 1) = a3;
  v22 = a4;
  v23 = a5;
  v24 = a6;
  v25 = a7;
  v26 = a8;
  v27 = a9;
  return (*(uint64_t (**)(__int128 *))(*(_QWORD *)v12 + 192))(&v21);
}

uint64_t Future.hasFinishedSuccessfully.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t v20;

  v5 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  v6 = type metadata accessor for FutureTermination(0, v5, a3, a4);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v20 - v8;
  v12 = type metadata accessor for FutureState(0, v5, v10, v11);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v20 - v13;
  sub_2448D26B0(v15, v16, (uint64_t)&v20 - v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v14, 1, v6) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v14, v6);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (!EnumCaseMultiPayload)
    {
      v18 = 1;
      goto LABEL_7;
    }
    if (EnumCaseMultiPayload == 1)
    {
      v18 = 0;
LABEL_7:
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      return v18;
    }
  }
  return 0;
}

uint64_t PromiseProtocol<>.track(future:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v6 = *(_QWORD *)(a2 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, a2);
  v9 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, v8, a2);
  v12[0] = 0;
  v12[1] = 0;
  Future.observeFinish(on:_:)((uint64_t)v12, (uint64_t)sub_2448B75BC, v10);
  return swift_release();
}

void sub_2448B7388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int EnumCaseMultiPayload;
  void *v18;
  uint64_t v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v19 - v9;
  v13 = type metadata accessor for FutureTermination(0, AssociatedTypeWitness, v11, v12);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (uint64_t *)((char *)&v19 - v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v19 - v14, a1, v13);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v18 = (void *)*v15;
      PromiseProtocol.fulfill<>(file:line:column:function:throwing:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Future+Observation.swift", 130, 2, 142, 29, (uint64_t)"track(future:)", 14, 2, *v15, a3, a4);

    }
    else
    {
      PromiseProtocol.cancel<>(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Future+Observation.swift", 130, 2, 144, 28, (uint64_t)"track(future:)", 14, 2, a3, a4);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v8 + 32))(v10, v15, AssociatedTypeWitness);
    PromiseProtocol.fulfill(file:line:column:function:returning:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Future+Observation.swift", 130, 2, 140, 29, (uint64_t)"track(future:)", 14, 2, (uint64_t)v10, a3, a4);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  }
}

uint64_t sub_2448B7564()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

void sub_2448B75BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  sub_2448B7388(a1, v1 + ((v3 + 32) & ~v3), v2, *(_QWORD *)(v1 + 24));
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t objectdestroy_20Tm_0()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_2448B7628()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32));
}

uint64_t sub_2448B7650()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_2448B76BC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80);
  return (*(uint64_t (**)(uint64_t))(v0 + 24))(v0 + ((v1 + 40) & ~v1));
}

uint64_t sub_2448B76F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FutureTermination(0, v5, a3, a4) - 8) + 80);
  v7 = (v6 + 40) & ~v6;
  swift_release();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {

  }
  else if (!EnumCaseMultiPayload)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + v7, v5);
  }
  return swift_deallocObject();
}

uint64_t sub_2448B77A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FutureTermination(0, *(_QWORD *)(v4 + 16), a3, a4)
                                      - 8)
                          + 80);
  return (*(uint64_t (**)(uint64_t))(v4 + 24))(v4 + ((v5 + 40) & ~v5));
}

uint64_t sub_2448B77E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(a2 + 152);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  v4 = *(_QWORD *)(v3 + 16);
  if (v4 >> 62 == 1)
  {
    sub_24486F928(v4);
    *(_QWORD *)(v3 + 16) = 0x8000000000000000;
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
    swift_release();
    return sub_2447D2178(a1);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
    return swift_release();
  }
}

BOOL sub_2448B7874@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  _BOOL8 result;

  result = sub_2448B12AC(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t sub_2448B78A0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int EnumCaseMultiPayload;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void *v39;
  char *v41;
  char *v42;
  uint64_t v43;
  const void *v44;
  void *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *aBlock;
  uint64_t v59;
  uint64_t (*v60)(uint64_t);
  void *v61;
  uint64_t (*v62)();
  uint64_t v63;

  v56 = a4;
  v54 = a3;
  v52 = a2;
  v51 = sub_2448EA704();
  v49 = *(_QWORD *)(v51 - 8);
  MEMORY[0x24BDAC7A8](v51);
  v48 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_2448EA734();
  v47 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v46 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A590);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (void **)((char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_257390FF8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (void **)((char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738F030);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v53 = (uint64_t)&v45 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v45 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v55 = (uint64_t)&v45 - v22;
  sub_2447C9300(a1, (uint64_t)v9, &qword_25738A590);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_244819704((uint64_t)v9, (uint64_t)v12);
    goto LABEL_5;
  }
  if (EnumCaseMultiPayload == 1)
  {
    *v12 = *v9;
LABEL_5:
    swift_storeEnumTagMultiPayload();
    v24 = 0;
    goto LABEL_7;
  }
  v24 = 1;
LABEL_7:
  v25 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, v24, 1, v13);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) != 1)
  {
    v28 = v55;
    sub_2447D3184((uint64_t)v12, v55, &qword_25738F030);
    sub_2447C9300(v28, (uint64_t)v21, &qword_25738F030);
    v29 = v53;
    sub_2447C9300((uint64_t)v21, v53, &qword_25738F030);
    sub_2447C9300((uint64_t)v21, (uint64_t)v25, &qword_25738F030);
    v30 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v31 = swift_allocObject();
    v32 = v56;
    *(_QWORD *)(v31 + 16) = sub_2448B9D04;
    *(_QWORD *)(v31 + 24) = v32;
    sub_2447D3184((uint64_t)v21, v31 + v30, &qword_25738F030);
    v33 = v52;
    aBlock = v52;
    v59 = v54;
    swift_retain_n();
    if ((ExecutionLane.isCurrentLane.getter() & 1) != 0)
    {
      v34 = (char *)v29;
    }
    else
    {
      if (v33)
      {
        if (v33 != (void *)1)
        {
          v62 = sub_2448B8FD8;
          v63 = v31;
          aBlock = (void *)MEMORY[0x24BDAC760];
          v59 = 1107296256;
          v60 = sub_2447EB164;
          v61 = &block_descriptor_101;
          v45 = _Block_copy(&aBlock);
          swift_retain();
          sub_24481240C(v33);
          v41 = v46;
          sub_2448EA71C();
          v57 = MEMORY[0x24BEE4AF8];
          sub_2447EB5DC();
          __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
          sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
          v42 = v48;
          v43 = v51;
          sub_2448EB6C4();
          v44 = v45;
          MEMORY[0x249519C08](0, v41, v42, v45);
          _Block_release(v44);
          sub_24481241C(v33);
          (*(void (**)(char *, uint64_t))(v49 + 8))(v42, v43);
          (*(void (**)(char *, uint64_t))(v47 + 8))(v41, v50);
          swift_release();
          swift_release();
          goto LABEL_17;
        }
        sub_244803860();
        v54 = sub_2448EB418();
        v62 = sub_2448B8FD8;
        v63 = v31;
        aBlock = (void *)MEMORY[0x24BDAC760];
        v59 = 1107296256;
        v60 = sub_2447EB164;
        v61 = &block_descriptor_104;
        v35 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        v36 = v46;
        sub_2448EA71C();
        aBlock = (void *)MEMORY[0x24BEE4AF8];
        sub_2447EB5DC();
        __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
        sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
        v37 = v48;
        v38 = v51;
        sub_2448EB6C4();
        v39 = (void *)v54;
        MEMORY[0x249519C08](0, v36, v37, v35);
        _Block_release(v35);

        (*(void (**)(char *, uint64_t))(v49 + 8))(v37, v38);
        (*(void (**)(char *, uint64_t))(v47 + 8))(v36, v50);
LABEL_16:
        swift_release();
LABEL_17:
        swift_release();
        sub_2447BD180((uint64_t)v25, &qword_25738F030);
        swift_release();
        sub_2447BD180(v29, &qword_25738F030);
        v27 = v55;
        v26 = &qword_25738F030;
        goto LABEL_18;
      }
      v34 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    }
    sub_2448B1610((uint64_t)v34);
    goto LABEL_16;
  }
  swift_retain();
  v26 = &qword_257390FF8;
  v27 = (uint64_t)v12;
LABEL_18:
  sub_2447BD180(v27, v26);
  return swift_release();
}

uint64_t sub_2448B7EC8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A590);
  v8 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v23 = (uint64_t)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_257390FE0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v22 - v14;
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a1;
  v16[3] = a2;
  v16[4] = sub_2448B8FC0;
  v16[5] = a4;
  v17 = *(_QWORD *)(a3 + 88);
  v18 = (_QWORD *)(v17 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v17 + 16));
  v19 = (os_unfair_lock_s *)(v17 + ((*(unsigned int *)(*(_QWORD *)v17 + 48) + 3) & 0x1FFFFFFFCLL));
  sub_24481240C(a1);
  swift_retain();
  sub_24481240C(a1);
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock(v19);
  sub_2448E1BB4(v18, (uint64_t)sub_2448B8FC8, (uint64_t)v16, (uint64_t)v15);
  os_unfair_lock_unlock(v19);
  swift_release();
  sub_2447C9300((uint64_t)v15, (uint64_t)v13, &qword_257390FE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v24) == 1)
  {
    sub_2447BD180((uint64_t)v15, &qword_257390FE0);
    v15 = v13;
  }
  else
  {
    v20 = v23;
    sub_2447D3184((uint64_t)v13, v23, &qword_25738A590);
    swift_retain();
    sub_2448B78A0(v20, a1, a2, a4);
    swift_release();
    sub_2447BD180(v20, &qword_25738A590);
  }
  sub_2447BD180((uint64_t)v15, &qword_257390FE0);
  swift_release();
  sub_24481241C(a1);
  return swift_release_n();
}

uint64_t sub_2448B8158(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int EnumCaseMultiPayload;
  void *v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  void *v21;
  void *v22;
  const void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *aBlock;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  void *v34;
  uint64_t (*v35)();
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[3];

  v8 = sub_2448EA704();
  v28 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_2448EA734();
  v27 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A590);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2447C9300(a1, (uint64_t)v15, &qword_25738A590);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v17 = *(void **)v15;
      swift_retain();

    }
    else
    {
      v18 = *((_OWORD *)v15 + 1);
      v37[0] = *(_OWORD *)v15;
      v37[1] = v18;
      v38[0] = *((_OWORD *)v15 + 2);
      *(_OWORD *)((char *)v38 + 9) = *(_OWORD *)(v15 + 41);
      v19 = swift_allocObject();
      *(_QWORD *)(v19 + 16) = sub_2448B9D08;
      *(_QWORD *)(v19 + 24) = a4;
      v20 = *((_OWORD *)v15 + 1);
      *(_OWORD *)(v19 + 32) = *(_OWORD *)v15;
      *(_OWORD *)(v19 + 48) = v20;
      *(_OWORD *)(v19 + 64) = *((_OWORD *)v15 + 2);
      *(_OWORD *)(v19 + 73) = *(_OWORD *)(v15 + 41);
      aBlock = a2;
      v32 = a3;
      swift_retain_n();
      if ((ExecutionLane.isCurrentLane.getter() & 1) != 0 || !a2)
      {
        sub_2448B1744(v37, a4);
      }
      else
      {
        if (a2 != (void *)1)
        {
          v35 = sub_2448B8F7C;
          v36 = v19;
          aBlock = (void *)MEMORY[0x24BDAC760];
          v32 = 1107296256;
          v33 = sub_2447EB164;
          v34 = &block_descriptor_87;
          v26 = _Block_copy(&aBlock);
          swift_retain();
          sub_24481240C(a2);
          sub_2448EA71C();
          v30 = MEMORY[0x24BEE4AF8];
          sub_2447EB5DC();
          __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
          sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
          sub_2448EB6C4();
          v24 = v26;
          MEMORY[0x249519C08](0, v12, v10, v26);
          _Block_release(v24);
          sub_24481241C(a2);
          (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v8);
          (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v29);
          swift_release_n();
          swift_release();
          return swift_release();
        }
        sub_244803860();
        v21 = (void *)sub_2448EB418();
        v35 = sub_2448B8F7C;
        v36 = v19;
        aBlock = (void *)MEMORY[0x24BDAC760];
        v32 = 1107296256;
        v33 = sub_2447EB164;
        v34 = &block_descriptor_90;
        v22 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        sub_2448EA71C();
        aBlock = (void *)MEMORY[0x24BEE4AF8];
        sub_2447EB5DC();
        __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
        sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
        sub_2448EB6C4();
        MEMORY[0x249519C08](0, v12, v10, v22);
        _Block_release(v22);

        (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v8);
        (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v29);
      }
      swift_release_n();
    }
  }
  else
  {
    swift_retain();
    sub_2447BD180((uint64_t)v15, &qword_25738A590);
  }
  return swift_release();
}

uint64_t sub_2448B85BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A590);
  v8 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v23 = (uint64_t)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_257390FE0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v22 - v14;
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a1;
  v16[3] = a2;
  v16[4] = sub_2448B8F80;
  v16[5] = a4;
  v17 = *(_QWORD *)(a3 + 88);
  v18 = (_QWORD *)(v17 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v17 + 16));
  v19 = (os_unfair_lock_s *)(v17 + ((*(unsigned int *)(*(_QWORD *)v17 + 48) + 3) & 0x1FFFFFFFCLL));
  sub_24481240C(a1);
  swift_retain();
  sub_24481240C(a1);
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock(v19);
  sub_2448E1BB4(v18, (uint64_t)sub_2448B9D0C, (uint64_t)v16, (uint64_t)v15);
  os_unfair_lock_unlock(v19);
  swift_release();
  sub_2447C9300((uint64_t)v15, (uint64_t)v13, &qword_257390FE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v24) == 1)
  {
    sub_2447BD180((uint64_t)v15, &qword_257390FE0);
    v15 = v13;
  }
  else
  {
    v20 = v23;
    sub_2447D3184((uint64_t)v13, v23, &qword_25738A590);
    swift_retain();
    sub_2448B8158(v20, a1, a2, a4);
    swift_release();
    sub_2447BD180(v20, &qword_25738A590);
  }
  sub_2447BD180((uint64_t)v15, &qword_257390FE0);
  swift_release();
  sub_24481241C(a1);
  return swift_release_n();
}

uint64_t sub_2448B884C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int EnumCaseMultiPayload;
  void *v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  void *v21;
  void *v22;
  const void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 aBlock;
  __int128 v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  _OWORD v36[3];

  v8 = sub_2448EA704();
  v28 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_2448EA734();
  v27 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A590);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2447C9300(a1, (uint64_t)v15, &qword_25738A590);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v17 = *(void **)v15;
      swift_retain();

    }
    else
    {
      v18 = *((_OWORD *)v15 + 1);
      v34 = *(_OWORD *)v15;
      v35 = v18;
      v36[0] = *((_OWORD *)v15 + 2);
      *(_OWORD *)((char *)v36 + 9) = *(_OWORD *)(v15 + 41);
      v19 = swift_allocObject();
      *(_QWORD *)(v19 + 16) = sub_2448B8F68;
      *(_QWORD *)(v19 + 24) = a4;
      v20 = *((_OWORD *)v15 + 1);
      *(_OWORD *)(v19 + 32) = *(_OWORD *)v15;
      *(_OWORD *)(v19 + 48) = v20;
      *(_OWORD *)(v19 + 64) = *((_OWORD *)v15 + 2);
      *(_OWORD *)(v19 + 73) = *(_OWORD *)(v15 + 41);
      *(_QWORD *)&aBlock = a2;
      *((_QWORD *)&aBlock + 1) = a3;
      swift_retain_n();
      if ((ExecutionLane.isCurrentLane.getter() & 1) != 0 || !a2)
      {
        aBlock = v34;
        v32 = v35;
        v33[0] = v36[0];
        *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)((char *)v36 + 9);
        (*(void (**)(__int128 *))(*(_QWORD *)a4 + 192))(&aBlock);
      }
      else
      {
        if (a2 != (void *)1)
        {
          *(_QWORD *)&v33[0] = sub_2448B8F7C;
          *((_QWORD *)&v33[0] + 1) = v19;
          *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
          *((_QWORD *)&aBlock + 1) = 1107296256;
          *(_QWORD *)&v32 = sub_2447EB164;
          *((_QWORD *)&v32 + 1) = &block_descriptor_61;
          v26 = _Block_copy(&aBlock);
          swift_retain();
          sub_24481240C(a2);
          sub_2448EA71C();
          v30 = MEMORY[0x24BEE4AF8];
          sub_2447EB5DC();
          __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
          sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
          sub_2448EB6C4();
          v24 = v26;
          MEMORY[0x249519C08](0, v12, v10, v26);
          _Block_release(v24);
          sub_24481241C(a2);
          (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v8);
          (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v29);
          swift_release_n();
          swift_release();
          return swift_release();
        }
        sub_244803860();
        v21 = (void *)sub_2448EB418();
        *(_QWORD *)&v33[0] = sub_2448B8F7C;
        *((_QWORD *)&v33[0] + 1) = v19;
        *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
        *((_QWORD *)&aBlock + 1) = 1107296256;
        *(_QWORD *)&v32 = sub_2447EB164;
        *((_QWORD *)&v32 + 1) = &block_descriptor_64;
        v22 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        sub_2448EA71C();
        *(_QWORD *)&aBlock = MEMORY[0x24BEE4AF8];
        sub_2447EB5DC();
        __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
        sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
        sub_2448EB6C4();
        MEMORY[0x249519C08](0, v12, v10, v22);
        _Block_release(v22);

        (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v8);
        (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v29);
      }
      swift_release_n();
    }
  }
  else
  {
    swift_retain();
    sub_2447BD180((uint64_t)v15, &qword_25738A590);
  }
  return swift_release();
}

uint64_t sub_2448B8CD8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A590);
  v8 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v23 = (uint64_t)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_257390FE0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v22 - v14;
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a1;
  v16[3] = a2;
  v16[4] = sub_2448B8F68;
  v16[5] = a4;
  v17 = *(_QWORD *)(a3 + 88);
  v18 = (_QWORD *)(v17 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v17 + 16));
  v19 = (os_unfair_lock_s *)(v17 + ((*(unsigned int *)(*(_QWORD *)v17 + 48) + 3) & 0x1FFFFFFFCLL));
  sub_24481240C(a1);
  swift_retain();
  sub_24481240C(a1);
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock(v19);
  sub_2448E1BB4(v18, (uint64_t)sub_2448B8F70, (uint64_t)v16, (uint64_t)v15);
  os_unfair_lock_unlock(v19);
  swift_release();
  sub_2447C9300((uint64_t)v15, (uint64_t)v13, &qword_257390FE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v24) == 1)
  {
    sub_2447BD180((uint64_t)v15, &qword_257390FE0);
    v15 = v13;
  }
  else
  {
    v20 = v23;
    sub_2447D3184((uint64_t)v13, v23, &qword_25738A590);
    swift_retain();
    sub_2448B884C(v20, a1, a2, a4);
    swift_release();
    sub_2447BD180(v20, &qword_25738A590);
  }
  sub_2447BD180((uint64_t)v15, &qword_257390FE0);
  swift_release();
  sub_24481241C(a1);
  return swift_release_n();
}

void sub_2448B8F70(uint64_t a1)
{
  uint64_t v1;

  sub_2448B4C64(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(__int128 *))(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_2448B8F80(_OWORD *a1)
{
  uint64_t v1;
  __int128 v2;
  _OWORD v4[2];
  _OWORD v5[2];

  v2 = a1[1];
  v4[0] = *a1;
  v4[1] = v2;
  v5[0] = a1[2];
  *(_OWORD *)((char *)v5 + 9) = *(_OWORD *)((char *)a1 + 41);
  return sub_2448B1744(v4, v1);
}

uint64_t sub_2448B8FC8(uint64_t a1)
{
  uint64_t v1;

  return sub_2448B1F4C(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(uint64_t))(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_2448B8FD8()
{
  return sub_2448B9A80(&qword_25738F030);
}

uint64_t objectdestroy_97Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_25738F030) - 8) + 80);
  v2 = (v1 + 32) & ~v1;
  swift_release();
  v3 = (id *)(v0 + v2);
  if (swift_getEnumCaseMultiPayload() == 1)
  {

  }
  else
  {
    v4 = sub_2448EA548();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v0 + v2, v4);
    v5 = type metadata accessor for CrashReport(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = (char *)v3 + *(int *)(v5 + 32);
    v7 = sub_2448EA500();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

uint64_t sub_2448B9114(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  const void *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void *aBlock;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  void *v49;
  uint64_t (*v50)();
  uint64_t v51;

  v44 = a4;
  v42 = sub_2448EA704();
  v39 = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v41 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_2448EA734();
  v38 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A590);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v36 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v36 - v17;
  sub_2447C9300(a1, (uint64_t)&v36 - v17, &qword_25738A590);
  v43 = v16;
  v19 = (uint64_t)v16;
  v20 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2447C9300((uint64_t)v18, v19, &qword_25738A590);
  sub_2447C9300((uint64_t)v18, (uint64_t)v20, &qword_25738A590);
  v21 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v22 = v44;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = sub_2448B992C;
  *(_QWORD *)(v23 + 24) = v22;
  sub_2447D3184((uint64_t)v18, v23 + v21, &qword_25738A590);
  aBlock = a2;
  v47 = a3;
  swift_retain_n();
  if ((ExecutionLane.isCurrentLane.getter() & 1) != 0)
  {
    v24 = *(_QWORD *)(v22 + 152);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v24 + 24));
    v25 = *(_QWORD *)(v24 + 16);
    if (v25 >> 62 == 1)
    {
      sub_24486F928(v25);
      *(_QWORD *)(v24 + 16) = 0x8000000000000000;
      os_unfair_lock_unlock((os_unfair_lock_t)(v24 + 24));
      swift_release();
      v26 = (uint64_t)v43;
      v27 = (uint64_t)v43;
      goto LABEL_11;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v24 + 24));
    swift_release();
  }
  else
  {
    v29 = v41;
    v28 = v42;
    if (!a2)
    {
      v32 = *(_QWORD *)(v22 + 152);
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v32 + 24));
      v33 = *(_QWORD *)(v32 + 16);
      v26 = (uint64_t)v43;
      if (v33 >> 62 != 1)
      {
        os_unfair_lock_unlock((os_unfair_lock_t)(v32 + 24));
        swift_release();
        goto LABEL_15;
      }
      sub_24486F928(v33);
      *(_QWORD *)(v32 + 16) = 0x8000000000000000;
      os_unfair_lock_unlock((os_unfair_lock_t)(v32 + 24));
      swift_release();
      v27 = (uint64_t)v20;
LABEL_11:
      sub_2447D2178(v27);
LABEL_15:
      swift_release();
      swift_release();
      goto LABEL_16;
    }
    if (a2 != (void *)1)
    {
      v50 = sub_2448B9A74;
      v51 = v23;
      aBlock = (void *)MEMORY[0x24BDAC760];
      v47 = 1107296256;
      v48 = sub_2447EB164;
      v49 = &block_descriptor_125;
      v37 = (uint64_t)_Block_copy(&aBlock);
      swift_retain();
      sub_24481240C(a2);
      sub_2448EA71C();
      v45 = MEMORY[0x24BEE4AF8];
      sub_2447EB5DC();
      v36 = a3;
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
      sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
      sub_2448EB6C4();
      v34 = (const void *)v37;
      MEMORY[0x249519C08](0, v9, v29, v37);
      _Block_release(v34);
      sub_24481241C(a2);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v29, v28);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v40);
      swift_release();
      swift_release();
      goto LABEL_13;
    }
    sub_244803860();
    v37 = sub_2448EB418();
    v50 = sub_2448B9A74;
    v51 = v23;
    aBlock = (void *)MEMORY[0x24BDAC760];
    v47 = 1107296256;
    v48 = sub_2447EB164;
    v49 = &block_descriptor_128;
    v30 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    sub_2448EA71C();
    aBlock = (void *)MEMORY[0x24BEE4AF8];
    sub_2447EB5DC();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
    sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
    sub_2448EB6C4();
    v31 = (void *)v37;
    MEMORY[0x249519C08](0, v9, v29, v30);
    _Block_release(v30);

    (*(void (**)(char *, uint64_t))(v39 + 8))(v29, v28);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v40);
  }
  swift_release();
LABEL_13:
  swift_release();
  v26 = (uint64_t)v43;
LABEL_16:
  sub_2447BD180((uint64_t)v20, &qword_25738A590);
  swift_release();
  sub_2447BD180(v26, &qword_25738A590);
  return swift_release_n();
}

uint64_t sub_2448B969C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A590);
  v8 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v23 = (uint64_t)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_257390FE0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v22 - v14;
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a1;
  v16[3] = a2;
  v16[4] = sub_2448B992C;
  v16[5] = a4;
  v17 = *(_QWORD *)(a3 + 88);
  v18 = (_QWORD *)(v17 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v17 + 16));
  v19 = (os_unfair_lock_s *)(v17 + ((*(unsigned int *)(*(_QWORD *)v17 + 48) + 3) & 0x1FFFFFFFCLL));
  sub_24481240C(a1);
  swift_retain();
  sub_24481240C(a1);
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock(v19);
  sub_2448E1BB4(v18, (uint64_t)sub_2448B9938, (uint64_t)v16, (uint64_t)v15);
  os_unfair_lock_unlock(v19);
  swift_release();
  sub_2447C9300((uint64_t)v15, (uint64_t)v13, &qword_257390FE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v24) == 1)
  {
    sub_2447BD180((uint64_t)v15, &qword_257390FE0);
    v15 = v13;
  }
  else
  {
    v20 = v23;
    sub_2447D3184((uint64_t)v13, v23, &qword_25738A590);
    swift_retain();
    sub_2448B9114(v20, a1, a2, a4);
    swift_release();
    sub_2447BD180(v20, &qword_25738A590);
  }
  sub_2447BD180((uint64_t)v15, &qword_257390FE0);
  swift_release();
  sub_24481241C(a1);
  return swift_release_n();
}

uint64_t sub_2448B992C(uint64_t a1)
{
  uint64_t v1;

  return sub_2448B77E4(a1, v1);
}

uint64_t sub_2448B9938(uint64_t a1)
{
  uint64_t v1;

  return sub_2448E16C8(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(char *))(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_2448B9944()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id *v3;
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_25738A590) - 8) + 80);
  v2 = (v1 + 32) & ~v1;
  swift_release();
  v3 = (id *)(v0 + v2);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {

  }
  else if (!EnumCaseMultiPayload)
  {
    v5 = sub_2448EA548();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v0 + v2, v5);
    v6 = type metadata accessor for CrashReport(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = (char *)v3 + *(int *)(v6 + 32);
    v8 = sub_2448EA500();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

uint64_t sub_2448B9A74()
{
  return sub_2448B9A80(&qword_25738A590);
}

uint64_t sub_2448B9A80(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a1) - 8) + 80);
  return (*(uint64_t (**)(uint64_t))(v1 + 16))(v1 + ((v2 + 32) & ~v2));
}

uint64_t sub_2448B9ABC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2448B9AE4()
{
  uint64_t v0;

  return sub_24486F1F4(*(uint64_t (**)(uint64_t *))(v0 + 16), *(_QWORD *)(v0 + 24), (uint64_t *)(v0 + 32));
}

uint64_t sub_2448B9AF0()
{
  uint64_t v0;

  swift_release();
  sub_244818030(*(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  return swift_deallocObject();
}

uint64_t sub_2448B9B24()
{
  uint64_t v0;

  return sub_24481770C(*(uint64_t (**)(__int128 *))(v0 + 16), *(_QWORD *)(v0 + 24), (__int128 *)(v0 + 32));
}

uint64_t objectdestroy_140Tm()
{
  uint64_t v0;

  swift_release();
  sub_2447D7854(*(id *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocObject();
}

uint64_t sub_2448B9B64()
{
  uint64_t v0;

  swift_release();
  sub_24481823C(*(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject();
}

uint64_t sub_2448B9B94()
{
  uint64_t v0;

  return sub_244817814(*(uint64_t (**)(__int128 *))(v0 + 16), *(_QWORD *)(v0 + 24), (__int128 *)(v0 + 32));
}

uint64_t sub_2448B9BA0()
{
  uint64_t v0;
  uint64_t (*v1)(_OWORD *);
  __int128 v2;
  _OWORD v4[2];
  _OWORD v5[2];

  v1 = *(uint64_t (**)(_OWORD *))(v0 + 16);
  v2 = *(_OWORD *)(v0 + 48);
  v4[0] = *(_OWORD *)(v0 + 32);
  v4[1] = v2;
  v5[0] = *(_OWORD *)(v0 + 64);
  *(_OWORD *)((char *)v5 + 9) = *(_OWORD *)(v0 + 73);
  return v1(v4);
}

uint64_t sub_2448B9BE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_2448EBD48() - 8) + 80);
  v3 = (v2 + 40) & ~v2;
  swift_release();
  if (swift_getEnumCaseMultiPayload() == 1)

  else
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_2448B9CA4()
{
  uint64_t v0;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_2448EBD48() - 8) + 80);
  return (*(uint64_t (**)(uint64_t))(v0 + 24))(v0 + ((v1 + 40) & ~v1));
}

uint64_t sub_2448B9E64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint8_t *v6;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  void *v21;
  id v22;
  uint64_t result;
  char v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[12];
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  unint64_t v44;
  char v45;
  __int128 v46;
  const char *v47;
  uint64_t v48;
  char v49;

  LODWORD(v6) = a5;
  sub_2448EA218();
  swift_allocObject();
  v12 = sub_2448EA20C();
  v13 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v14 = objc_msgSend(v13, sel_bundleIdentifier);

  if (v14)
  {
    v15 = sub_2448EAA94();
    v17 = v16;

    if (a4)
    {
      if (v15 != a3 || v17 != a4)
      {
        v39 = (int)v6;
        v6 = (uint8_t *)a2;
        v19 = v12;
        v20 = sub_2448EBBEC();
        swift_bridgeObjectRelease();
        if ((v20 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v21 = 0;
          a3 = 0;
          a4 = 0;
LABEL_12:
          v12 = v19;
          a2 = (uint64_t)v6;
          LODWORD(v6) = v39;
          goto LABEL_16;
        }
LABEL_11:
        swift_bridgeObjectRetain();
        v21 = (void *)sub_2448EAA70();
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v21 = 0;
      a3 = 0;
      a4 = 0;
    }
    else
    {
      swift_bridgeObjectRelease();
      v21 = 0;
    }
  }
  else
  {
    if (a4)
    {
      v39 = (int)v6;
      v6 = (uint8_t *)a2;
      v19 = v12;
      goto LABEL_11;
    }
    v21 = 0;
    a3 = 0;
  }
LABEL_16:
  v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCF50]), sel_initWithSuiteName_, v21);

  if (!v22)
  {
    v38 = a1;
    if (qword_257389CF0 != -1)
      swift_once();
    v25 = sub_2448EA5FC();
    __swift_project_value_buffer(v25, (uint64_t)qword_25738F7C8);
    swift_bridgeObjectRetain_n();
    v26 = sub_2448EA5E4();
    v27 = sub_2448EB3A0();
    if (os_log_type_enabled(v26, v27))
    {
      v39 = (int)v6;
      v6 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v42 = v28;
      *(_DWORD *)v6 = 136315138;
      v37 = v12;
      if (a4)
      {
        v43 = 0;
        v44 = 0xE000000000000000;
        v40 = a3;
        v41 = a4;
        sub_2448EB91C();
        v29 = 0;
        v30 = 0xE000000000000000;
      }
      else
      {
        v30 = 0xE300000000000000;
        v29 = 7104878;
      }
      v43 = (const char *)sub_2447D6798(v29, v30, &v42);
      sub_2448EB598();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2447B9000, v26, v27, "Failed to access defaults for %s; falling back to .standard", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24951AD84](v28, -1, -1);
      MEMORY[0x24951AD84](v6, -1, -1);

      LOBYTE(v6) = v39;
      v12 = v37;
    }
    else
    {

      v31 = swift_bridgeObjectRelease_n();
    }
    v32 = MEMORY[0x24BDAC7A8](v31);
    v36[10] = a3;
    v36[11] = a4;
    v33 = MEMORY[0x24BDAC7A8](v32);
    v36[6] = sub_2448BDF40;
    v36[7] = v34;
    MEMORY[0x24BDAC7A8](v33);
    v36[2] = sub_24481D21C;
    v36[3] = v35;
    v43 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/UserDefaults.swift";
    v44 = 124;
    v45 = 2;
    v46 = xmmword_2448F70F0;
    v47 = "init(_:suiteName:defaultValue:cached:)";
    v48 = 38;
    v49 = 2;
    sub_24482300C((uint64_t)sub_24481D21C, (uint64_t)v36, (uint64_t)&v43);
    swift_bridgeObjectRelease();
    result = (uint64_t)objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
    v22 = (id)result;
    a1 = v38;
    if ((v6 & 1) != 0)
      goto LABEL_18;
LABEL_30:
    v24 = 2;
    goto LABEL_31;
  }
  result = swift_bridgeObjectRelease();
  if ((v6 & 1) == 0)
    goto LABEL_30;
LABEL_18:
  swift_bridgeObjectRetain();
  result = _sSb20PreviewsFoundationOSE15userDefaultsKey0dE0SbSgSS_So06NSUserE0CtcfC_0(a1, a2, v22);
  if (result == 2)
    v24 = 1;
  else
    v24 = result & 1;
LABEL_31:
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = v22;
  *(_BYTE *)(a6 + 24) = v6 & 1;
  *(_BYTE *)(a6 + 25) = v24;
  *(_QWORD *)(a6 + 32) = sub_2447F221C;
  *(_QWORD *)(a6 + 40) = 0;
  *(_QWORD *)(a6 + 48) = v12;
  return result;
}

uint64_t UserDefault.init(_:suiteName:defaultValue:cached:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(void)@<X4>, void (*a6)(void)@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(void);
  uint64_t v27;
  void (**v28)(void);
  void *v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  char v37;
  id v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v55[2];
  void (*v56)(void);
  uint64_t v57;
  uint64_t v58;
  void (*v59)(void);
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  unint64_t v70;
  char v71;
  __int128 v72;
  const char *v73;
  uint64_t v74;
  char v75;

  v65 = a7;
  v18 = sub_2448EB508();
  v63 = *(_QWORD *)(v18 - 8);
  v64 = v18;
  v19 = MEMORY[0x24BDAC7A8](v18);
  v60 = (char *)v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v62 = (char *)v55 - v21;
  v23 = (int *)type metadata accessor for UserDefault(0, a8, a10, v22);
  v24 = a9 + v23[11];
  v25 = *(_QWORD *)(a8 - 8);
  v57 = a8;
  v58 = v25;
  v26 = *(void (**)(void))(v25 + 56);
  v61 = v24;
  v59 = v26;
  v26();
  v27 = v23[13];
  sub_2448EA218();
  swift_allocObject();
  *(_QWORD *)(a9 + v27) = sub_2448EA20C();
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  v28 = (void (**)(void))(a9 + v23[12]);
  v56 = a5;
  *v28 = a5;
  v28[1] = a6;
  v29 = (void *)objc_opt_self();
  swift_retain();
  v30 = objc_msgSend(v29, sel_mainBundle);
  v31 = objc_msgSend(v30, sel_bundleIdentifier);

  if (v31)
  {
    v32 = sub_2448EAA94();
    v34 = v33;

    if (!a4)
    {
      swift_bridgeObjectRelease();
      v36 = 0;
      v35 = a3;
      goto LABEL_13;
    }
    v35 = a3;
    if (v32 == a3 && v34 == a4)
    {
      swift_bridgeObjectRelease();
LABEL_10:
      swift_bridgeObjectRelease();
      v36 = 0;
      v35 = 0;
      a4 = 0;
      goto LABEL_13;
    }
    v37 = sub_2448EBBEC();
    swift_bridgeObjectRelease();
    if ((v37 & 1) != 0)
      goto LABEL_10;
    goto LABEL_11;
  }
  if (a4)
  {
    v35 = a3;
LABEL_11:
    swift_bridgeObjectRetain();
    v36 = (void *)sub_2448EAA70();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v36 = 0;
  v35 = 0;
LABEL_13:
  v38 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCF50]), sel_initWithSuiteName_, v36);

  if (v38)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_257389CF0 != -1)
      swift_once();
    v39 = sub_2448EA5FC();
    __swift_project_value_buffer(v39, (uint64_t)qword_25738F7C8);
    swift_bridgeObjectRetain_n();
    v40 = sub_2448EA5E4();
    v41 = sub_2448EB3A0();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      v43 = swift_slowAlloc();
      v68 = v43;
      *(_DWORD *)v42 = 136315138;
      v55[1] = a6;
      if (a4)
      {
        v69 = 0;
        v70 = 0xE000000000000000;
        v66 = v35;
        v67 = a4;
        sub_2448EB91C();
        v44 = (uint64_t)v69;
        v45 = v70;
      }
      else
      {
        v45 = 0xE300000000000000;
        v44 = 7104878;
      }
      v69 = (const char *)sub_2447D6798(v44, v45, &v68);
      sub_2448EB598();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2447B9000, v40, v41, "Failed to access defaults for %s; falling back to .standard", v42, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24951AD84](v43, -1, -1);
      MEMORY[0x24951AD84](v42, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v69 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/UserDefaults.swift";
    v70 = 124;
    v71 = 2;
    v72 = xmmword_2448F70F0;
    v73 = "init(_:suiteName:defaultValue:cached:)";
    v74 = 38;
    v75 = 2;
    sub_244823F6C();
    swift_bridgeObjectRelease();
    v38 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  }
  *(_QWORD *)(a9 + 16) = v38;
  v46 = v65;
  *(_BYTE *)(a9 + 24) = v65 & 1;
  if ((v46 & 1) == 0)
    return swift_release();
  v47 = (uint64_t)v23;
  v48 = v60;
  sub_2448BB0B0(v47);
  v49 = v57;
  v50 = v58;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v48, 1, v57) == 1)
  {
    v51 = v62;
    v56();
    swift_release();
    v53 = v63;
    v52 = v64;
    (*(void (**)(char *, uint64_t))(v63 + 8))(v48, v64);
  }
  else
  {
    swift_release();
    v51 = v62;
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v62, v48, v49);
    v53 = v63;
    v52 = v64;
  }
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v59)(v51, 0, 1, v49);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v53 + 40))(v61, v51, v52);
}

uint64_t sub_2448BA8B0@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return UserDefaultRepresentable.init(userDefaultsKey:userDefaults:)(a1, a2, a3);
}

uint64_t sub_2448BA8C4@<X0>(void *a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v16;
  __int128 v17;
  char v18;
  __int128 v19;
  const char *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  _OWORD v25[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738C6E8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (void *)sub_2448EAA70();
  v8 = objc_msgSend(a1, sel_objectForKey_, v7);

  if (v8)
  {
    sub_2448EB664();
    swift_unknownObjectRelease();
    sub_2447C91FC(&v17, v25);
    sub_2448EA1F4();
    swift_allocObject();
    sub_2448EA1E8();
    sub_2447C92C4((uint64_t)v25, (uint64_t)&v17);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v9 = v23;
      v10 = v24;
      v11 = sub_2448EA500();
      sub_2447BD7A0(&qword_257391000, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
      sub_2448EA1DC();
      sub_2447E74B0(v9, v10);
      v13 = *(_QWORD *)(v11 - 8);
      v14 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56);
      v14(v6, 0, 1, v11);

      swift_release();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
      (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a2, v6, v11);
      return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v14)(a2, 0, 1, v11);
    }
    *(_QWORD *)&v17 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFou"
                      "ndation/UserDefaults.swift";
    *((_QWORD *)&v17 + 1) = 124;
    v18 = 2;
    v19 = xmmword_2448F7100;
    v20 = "init(userDefaultsKey:userDefaults:)";
    v21 = 35;
    v22 = 2;
    sub_244823F6C();

    swift_bridgeObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  v12 = sub_2448EA500();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a2, 1, 1, v12);
}

uint64_t UserDefaultRepresentable.init(userDefaultsKey:userDefaults:)@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v17;
  __int128 v18;
  char v19;
  __int128 v20;
  const char *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  _OWORD v26[2];

  v6 = sub_2448EB508();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v17 - v7;
  v9 = (void *)sub_2448EAA70();
  v10 = objc_msgSend(a1, sel_objectForKey_, v9);

  if (v10)
  {
    sub_2448EB664();
    swift_unknownObjectRelease();
    sub_2447C91FC(&v18, v26);
    sub_2448EA1F4();
    swift_allocObject();
    sub_2448EA1E8();
    sub_2447C92C4((uint64_t)v26, (uint64_t)&v18);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v17 = a3;
      v11 = v24;
      v12 = v25;
      sub_2448EA1DC();
      sub_2447E74B0(v11, v12);
      v13 = *(_QWORD *)(a2 - 8);
      v14 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56);
      v14(v8, 0, 1, a2);

      swift_release();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
      v15 = v17;
      (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v17, v8, a2);
      return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v14)(v15, 0, 1, a2);
    }
    *(_QWORD *)&v18 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFou"
                      "ndation/UserDefaults.swift";
    *((_QWORD *)&v18 + 1) = 124;
    v19 = 2;
    v20 = xmmword_2448F7100;
    v21 = "init(userDefaultsKey:userDefaults:)";
    v22 = 35;
    v23 = 2;
    sub_244823F6C();

    swift_bridgeObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, 1, 1, a2);
}

uint64_t sub_2448BAE30@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t UserDefault.Projected.key.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UserDefault.Projected.key.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*UserDefault.Projected.key.modify())()
{
  return nullsub_1;
}

uint64_t UserDefault.Projected.defaultValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t UserDefault.Projected.defaultValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 36), a1);
}

uint64_t (*UserDefault.Projected.defaultValue.modify())()
{
  return nullsub_1;
}

uint64_t UserDefault.Projected.actualValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t UserDefault.Projected.actualValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 40), a1);
}

uint64_t (*UserDefault.Projected.actualValue.modify())()
{
  return nullsub_1;
}

uint64_t sub_2448BAF48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v11;
  void (*v13)(char *, uint64_t, uint64_t);

  *(_QWORD *)a7 = a1;
  *((_QWORD *)a7 + 1) = a2;
  v11 = type metadata accessor for UserDefault.Projected(0, a5, a6, a4);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32);
  v13(&a7[*(int *)(v11 + 36)], a3, a5);
  return ((uint64_t (*)(char *, uint64_t, uint64_t))v13)(&a7[*(int *)(v11 + 40)], a4, a5);
}

uint64_t sub_2448BAFD8(uint64_t a1, uint64_t a2)
{
  sub_2448EB79C();
  sub_2448EABC0();
  if (a2)
    sub_2448EB91C();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  return 0;
}

uint64_t sub_2448BB0B0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, id, uint64_t, uint64_t);
  id v8;

  v2 = *v1;
  v3 = v1[1];
  v4 = (void *)v1[2];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, id, uint64_t, uint64_t))(v6 + 24);
  v8 = v4;
  swift_bridgeObjectRetain();
  return v7(v2, v3, v8, v5, v6);
}

uint64_t UserDefault.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  char *v20;
  char *v21;
  int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;

  v33 = a2;
  v4 = *(_QWORD *)(a1 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v31 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v29 - v8;
  v10 = *(_QWORD *)(v7 + 16);
  v11 = sub_2448EB508();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v34 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v29 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v29 - v15, v2 + *(int *)(a1 + 44), v11);
  v32 = v4;
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v17(v9, v2, a1);
  v18 = *(_QWORD *)(v10 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (v19(v16, 1, v10) == 1)
  {
    v30 = v12;
    v20 = v34;
    sub_2448BB0B0(a1);
    v21 = v31;
    v17(v31, (uint64_t)v9, a1);
    v22 = v19(v20, 1, v10);
    v23 = v21;
    v24 = v32;
    v25 = v33;
    if (v22 == 1)
    {
      (*(void (**)(void))&v21[*(int *)(a1 + 48)])();
      v26 = *(void (**)(char *, uint64_t))(v24 + 8);
      v26(v9, a1);
      v27 = v30;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v34, v11);
    }
    else
    {
      v26 = *(void (**)(char *, uint64_t))(v32 + 8);
      v26(v9, a1);
      (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v25, v34, v10);
      v27 = v30;
    }
    v26(v23, a1);
    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v16, v11);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v9, a1);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(v33, v16, v10);
  }
}

uint64_t UserDefault.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  sub_2448BC570(a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(a1);
}

void (*UserDefault.wrappedValue.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v9 = malloc(v8);
  v5[5] = v9;
  UserDefault.wrappedValue.getter(a2, (uint64_t)v9);
  return sub_2448BB41C;
}

void sub_2448BB41C(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, uint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[4];
  v4 = (void *)(*a1)[5];
  v5 = (*a1)[2];
  v6 = (*a1)[3];
  v7 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    sub_2448BC570((uint64_t)v3, v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
  }
  else
  {
    sub_2448BC570((*a1)[5], v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v8(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t UserDefault.projectedValue.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t *, uint64_t);
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  char *v32;
  char *v33;
  int v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;

  v53 = a2;
  v54 = *(_QWORD *)(a1 - 8);
  v4 = MEMORY[0x24BDAC7A8](a1);
  v46 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v56 = (char *)&v45 - v7;
  v8 = *(_QWORD *)(v6 + 16);
  v9 = sub_2448EB508();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v55 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v45 - v14;
  v16 = *(_QWORD *)(v8 - 8);
  v17 = MEMORY[0x24BDAC7A8](v13);
  v49 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v45 - v19;
  v21 = v2[1];
  v50 = *v2;
  v51 = v21;
  v22 = *(void (**)(uint64_t))((char *)v2 + *(int *)(a1 + 48));
  v23 = swift_bridgeObjectRetain();
  v52 = v20;
  v24 = v9;
  v25 = v56;
  v22(v23);
  v26 = (char *)v2 + *(int *)(a1 + 44);
  v47 = v10;
  v48 = v24;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v15, v26, v24);
  v27 = v54;
  v28 = *(void (**)(char *, uint64_t *, uint64_t))(v54 + 16);
  v28(v25, v2, a1);
  v29 = v16;
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v31 = v8;
  if (v30(v15, 1, v8) == 1)
  {
    v32 = v55;
    sub_2448BB0B0(a1);
    v33 = v46;
    v28(v46, (uint64_t *)v25, a1);
    v34 = v30(v32, 1, v31);
    v35 = v49;
    if (v34 == 1)
    {
      (*(void (**)(void))&v33[*(int *)(a1 + 48)])();
      v36 = *(void (**)(char *, uint64_t))(v27 + 8);
      v36(v56, a1);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v55, v48);
    }
    else
    {
      v36 = *(void (**)(char *, uint64_t))(v27 + 8);
      v36(v56, a1);
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v35, v55, v31);
    }
    v36(v33, a1);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v15, v48);
    v37 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v25, a1);
    v37 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
    v35 = v49;
    v37(v49, v15, v8);
  }
  v40 = v52;
  v39 = v53;
  v41 = v51;
  v42 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v53 = v50;
  *((_QWORD *)v39 + 1) = v41;
  v43 = type metadata accessor for UserDefault.Projected(0, v31, v42, v38);
  v37(&v39[*(int *)(v43 + 36)], v40, v31);
  return ((uint64_t (*)(char *, char *, uint64_t))v37)(&v39[*(int *)(v43 + 40)], v35, v31);
}

uint64_t UserDefault.observe(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (**a4)()@<X8>)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  objc_class *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  void (*v22)();
  uint64_t result;
  __int128 v25;
  char v26;
  __int128 v27;
  const char *v28;
  uint64_t v29;
  char v30;

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = 0;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(a3 + 24);
  v12 = (objc_class *)type metadata accessor for UserDefaultObserver(0, v9, v10, v11);
  v13 = *v4;
  v16 = v4 + 1;
  v15 = v4[1];
  v14 = (void *)v16[1];
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = v9;
  v17[3] = v10;
  v17[4] = a1;
  v17[5] = a2;
  v18 = v14;
  swift_bridgeObjectRetain();
  swift_retain();
  v19 = objc_allocWithZone(v12);
  v20 = sub_2448BBE14(v18, v13, v15, (uint64_t)sub_2447DDEBC, (uint64_t)v17);
  v21 = *(void **)(v8 + 16);
  *(_QWORD *)(v8 + 16) = v20;

  v22 = (void (*)())swift_allocObject();
  *((_QWORD *)v22 + 2) = v9;
  *((_QWORD *)v22 + 3) = v10;
  *((_QWORD *)v22 + 4) = v8;
  *(_QWORD *)&v25 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFound"
                    "ation/UserDefaults.swift";
  *((_QWORD *)&v25 + 1) = 124;
  v26 = 2;
  v27 = xmmword_2448F7110;
  v28 = "observe(_:)";
  v29 = 11;
  v30 = 2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738AF78);
  swift_allocObject();
  result = sub_2447E5D90(&v25, 0, 0, 1, 0, 0xD000000000000011, 0x80000002448F9A50, 0x64656C65636E6163, 0xE800000000000000);
  *a4 = sub_2448BC7AC;
  a4[1] = v22;
  a4[2] = (void (*)())result;
  return result;
}

id sub_2448BB9A0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_class *v5;
  id v11;

  v11 = objc_allocWithZone(v5);
  return sub_2448BBE14(a1, a2, a3, a4, a5);
}

void sub_2448BBA00(uint64_t a1)
{
  void **v2;
  void *v3;
  id v4;
  void *v5;

  v2 = (void **)(a1 + 16);
  swift_beginAccess();
  v3 = *(void **)(a1 + 16);
  if (v3)
  {
    v4 = v3;
    sub_2448BC038();

  }
  swift_beginAccess();
  v5 = *v2;
  *v2 = 0;

}

BOOL UserDefault.Projected<>.isDifferentFromDefault.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  char v12;
  void (*v13)(char *, uint64_t);
  uint64_t v15;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v15 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v11((char *)&v15 - v9, v1 + *(int *)(v8 + 36), v3);
  v11(v7, v1 + *(int *)(a1 + 40), v3);
  v12 = sub_2448EAA64();
  v13 = *(void (**)(char *, uint64_t))(v4 + 8);
  v13(v7, v3);
  v13(v10, v3);
  return (v12 & 1) == 0;
}

Swift::Double_optional __swiftcall Double.init(userDefaultsKey:userDefaults:)(Swift::String userDefaultsKey, NSUserDefaults userDefaults)
{
  char v2;
  double v3;
  Swift::Double_optional result;

  v2 = sub_2448BC254(userDefaultsKey._countAndFlagsBits, (uint64_t)userDefaultsKey._object, userDefaults.super.isa);
  result.value = v3;
  result.is_nil = v2;
  return result;
}

uint64_t sub_2448BBB80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = sub_2448BC254(a1, a2, a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

Swift::Int_optional __swiftcall Int.init(userDefaultsKey:userDefaults:)(Swift::String userDefaultsKey, NSUserDefaults userDefaults)
{
  id v2;
  char v3;
  Swift::Bool v4;
  Swift::Int_optional result;

  v2 = sub_2448BC470(userDefaultsKey._countAndFlagsBits, (uint64_t)userDefaultsKey._object, userDefaults.super.isa);
  v4 = v3 & 1;
  result.value = (Swift::Int)v2;
  result.is_nil = v4;
  return result;
}

id sub_2448BBBC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  id result;
  char v6;

  result = sub_2448BC470(a1, a2, a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t sub_2448BBBF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t result;

  result = _sSb20PreviewsFoundationOSE15userDefaultsKey0dE0SbSgSS_So06NSUserE0CtcfC_0(a1, a2, a3);
  *a4 = result;
  return result;
}

void __swiftcall Float.init(userDefaultsKey:userDefaults:)(Swift::Float_optional *__return_ptr retstr, Swift::String userDefaultsKey, NSUserDefaults userDefaults)
{
  sub_2448BC35C(userDefaultsKey._countAndFlagsBits, (uint64_t)userDefaultsKey._object, userDefaults.super.isa);
}

unint64_t sub_2448BBC40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result;

  result = sub_2448BC35C(a1, a2, a3);
  *(_DWORD *)a4 = result;
  *(_BYTE *)(a4 + 4) = BYTE4(result) & 1;
  return result;
}

Swift::String_optional __swiftcall String.init(userDefaultsKey:userDefaults:)(Swift::String userDefaultsKey, NSUserDefaults userDefaults)
{
  Class isa;
  void *v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  Swift::String_optional result;
  _OWORD v13[2];

  isa = userDefaults.super.isa;
  v3 = (void *)sub_2448EAA70();
  v4 = -[objc_class objectForKey:](isa, sel_objectForKey_, v3);

  if (!v4)
  {
    memset(v13, 0, sizeof(v13));

    swift_bridgeObjectRelease();
    sub_2447BD180((uint64_t)v13, &qword_25738B658);
LABEL_6:
    v7 = 0;
    v9 = 0;
    goto LABEL_7;
  }
  sub_2448EB664();
  swift_unknownObjectRelease();
  sub_2447BD180((uint64_t)v13, &qword_25738B658);
  v5 = (void *)sub_2448EAA70();
  swift_bridgeObjectRelease();
  v6 = -[objc_class stringForKey:](isa, sel_stringForKey_, v5);

  if (!v6)
  {

    goto LABEL_6;
  }
  v7 = sub_2448EAA94();
  v9 = v8;

LABEL_7:
  v10 = v7;
  v11 = v9;
  result.value._object = v11;
  result.value._countAndFlagsBits = v10;
  return result;
}

uint64_t sub_2448BBD94@<X0>(uint64_t a1@<X0>, NSUserDefaults a2@<0:X2, 8:X3, 16:X4, 24:X5>, Swift::String_optional *a3@<X8>)
{
  uint64_t result;
  Swift::String_optional v6;

  v6 = String.init(userDefaultsKey:userDefaults:)(*(Swift::String *)&a1, a2);
  result = v6.value._countAndFlagsBits;
  *a3 = v6;
  return result;
}

uint64_t Optional<A>.init(userDefaultsKey:userDefaults:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  uint64_t v3;

  (*(void (**)(void))(a1 + 24))();
  v3 = sub_2448EB508();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 0, 1, v3);
}

uint64_t sub_2448BBE08@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  return Optional<A>.init(userDefaultsKey:userDefaults:)(*(_QWORD *)(a1 - 8), a2);
}

id sub_2448BBE14(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  objc_class *v10;
  id v11;
  id v12;
  void *v13;
  objc_super v15;

  v7 = *MEMORY[0x24BEE4EA0] & *v5;
  *(_QWORD *)((char *)v5 + qword_257391110) = a1;
  v8 = (_QWORD *)((char *)v5 + qword_257391118);
  *v8 = a2;
  v8[1] = a3;
  v9 = (_QWORD *)((char *)v5 + qword_257391120);
  *v9 = a4;
  v9[1] = a5;
  v10 = (objc_class *)type metadata accessor for UserDefaultObserver(0, *(_QWORD *)(v7 + 80), *(_QWORD *)(v7 + 88), a4);
  v15.receiver = v5;
  v15.super_class = v10;
  v11 = a1;
  swift_bridgeObjectRetain();
  swift_retain();
  v12 = objc_msgSendSuper2(&v15, sel_init);
  v13 = (void *)sub_2448EAA70();
  swift_bridgeObjectRelease();
  objc_msgSend(v11, sel_addObserver_forKeyPath_options_context_, v12, v13, 1, 0, v15.receiver, v15.super_class);

  swift_release();
  return v12;
}

uint64_t sub_2448BBF28(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  _OWORD v14[2];

  if (a3)
  {
    sub_2448EAA94();
    if (a4)
      goto LABEL_3;
LABEL_6:
    memset(v14, 0, sizeof(v14));
    v11 = a5;
    v12 = a1;
    if (a5)
      goto LABEL_4;
LABEL_7:
    v10 = 0;
    goto LABEL_8;
  }
  if (!a4)
    goto LABEL_6;
LABEL_3:
  swift_unknownObjectRetain();
  v8 = a5;
  v9 = a1;
  sub_2448EB664();
  swift_unknownObjectRelease();
  if (!a5)
    goto LABEL_7;
LABEL_4:
  type metadata accessor for NSKeyValueChangeKey(0);
  sub_2447BD7A0(&qword_25738A1F8, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_2448ECE30);
  v10 = sub_2448EA800();

LABEL_8:
  sub_2448BDD60((uint64_t)v14, v10);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_2447BD180((uint64_t)v14, &qword_25738B658);
}

void sub_2448BC038()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + qword_257391110);
  v2 = (id)sub_2448EAA70();
  objc_msgSend(v1, sel_removeObserver_forKeyPath_, v0, v2);

}

void sub_2448BC098()
{
  sub_2448BDF14();
}

id sub_2448BC0B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for UserDefaultObserver(0, *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v4) + 0x58), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

uint64_t sub_2448BC100(uint64_t a1)
{

  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t type metadata accessor for UserDefault(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UserDefault);
}

uint64_t _sSb20PreviewsFoundationOSE15userDefaultsKey0dE0SbSgSS_So06NSUserE0CtcfC_0(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;
  void *v6;
  id v7;
  _OWORD v9[2];

  v4 = (void *)sub_2448EAA70();
  v5 = objc_msgSend(a3, sel_objectForKey_, v4);

  if (v5)
  {
    sub_2448EB664();
    swift_unknownObjectRelease();
    sub_2447BD180((uint64_t)v9, &qword_25738B658);
    v6 = (void *)sub_2448EAA70();
    swift_bridgeObjectRelease();
    v7 = objc_msgSend(a3, sel_BOOLForKey_, v6);

  }
  else
  {
    memset(v9, 0, sizeof(v9));

    swift_bridgeObjectRelease();
    sub_2447BD180((uint64_t)v9, &qword_25738B658);
    return 2;
  }
  return (uint64_t)v7;
}

uint64_t sub_2448BC254(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v10[2];

  v4 = (void *)sub_2448EAA70();
  v5 = objc_msgSend(a3, sel_objectForKey_, v4);

  if (v5)
  {
    sub_2448EB664();
    swift_unknownObjectRelease();
    sub_2447BD180((uint64_t)v10, &qword_25738B658);
    v6 = (void *)sub_2448EAA70();
    swift_bridgeObjectRelease();
    objc_msgSend(a3, sel_doubleForKey_, v6);
    v8 = v7;

    return v8;
  }
  else
  {
    memset(v10, 0, sizeof(v10));

    swift_bridgeObjectRelease();
    sub_2447BD180((uint64_t)v10, &qword_25738B658);
    return 0;
  }
}

unint64_t sub_2448BC35C(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;
  void *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  _OWORD v11[2];

  v4 = (void *)sub_2448EAA70();
  v5 = objc_msgSend(a3, sel_objectForKey_, v4);

  if (v5)
  {
    sub_2448EB664();
    swift_unknownObjectRelease();
    sub_2447BD180((uint64_t)v11, &qword_25738B658);
    v6 = (void *)sub_2448EAA70();
    swift_bridgeObjectRelease();
    objc_msgSend(a3, sel_floatForKey_, v6);
    v8 = v7;

    v9 = v8;
  }
  else
  {
    memset(v11, 0, sizeof(v11));

    swift_bridgeObjectRelease();
    sub_2447BD180((uint64_t)v11, &qword_25738B658);
    v9 = 0;
  }
  return v9 | ((unint64_t)(v5 == 0) << 32);
}

id sub_2448BC470(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;
  void *v6;
  id v7;
  _OWORD v9[2];

  v4 = (void *)sub_2448EAA70();
  v5 = objc_msgSend(a3, sel_objectForKey_, v4);

  if (v5)
  {
    sub_2448EB664();
    swift_unknownObjectRelease();
    sub_2447BD180((uint64_t)v9, &qword_25738B658);
    v6 = (void *)sub_2448EAA70();
    swift_bridgeObjectRelease();
    v7 = objc_msgSend(a3, sel_integerForKey_, v6);

  }
  else
  {
    memset(v9, 0, sizeof(v9));

    swift_bridgeObjectRelease();
    sub_2447BD180((uint64_t)v9, &qword_25738B658);
    return 0;
  }
  return v7;
}

void sub_2448BC570(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  void *v13;
  id v14;

  v3 = v2;
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
  {
    v5 = v3 + *(int *)(a2 + 44);
    v6 = *(_QWORD *)(a2 + 16);
    v7 = sub_2448EB508();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
    v8 = *(_QWORD *)(v6 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v5, a1, v6);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v6);
  }
  swift_retain();
  v9 = sub_2448EA200();
  v11 = v10;
  swift_release();
  v12 = *(id *)(v3 + 16);
  v13 = (void *)sub_2448EA470();
  swift_bridgeObjectRetain();
  v14 = (id)sub_2448EAA70();
  swift_bridgeObjectRelease();
  objc_msgSend(v12, sel_setObject_forKey_, v13, v14);
  sub_2447E74B0(v9, v11);

}

uint64_t sub_2448BC734()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t type metadata accessor for UserDefaultObserver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UserDefaultObserver);
}

uint64_t sub_2448BC764()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2448BC788()
{
  swift_release();
  return swift_deallocObject();
}

void sub_2448BC7AC()
{
  uint64_t v0;

  sub_2448BBA00(*(_QWORD *)(v0 + 32));
}

uint64_t sub_2448BC7B8(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);
  uint64_t result;

  v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
  *(_QWORD *)(a1 + 8) = sub_2447BD7A0(&qword_257391000, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
  result = sub_2447BD7A0(qword_257391008, v2, MEMORY[0x24BDCE920]);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_2448BC814(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v5 = *a3;
  v8 = *(_QWORD *)(*a3 + 8);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24951AC70](MEMORY[0x24BEE4AC0], a2, &v8);
  v7 = *(_QWORD *)(v5 + 16);
  result = MEMORY[0x24951AC70](MEMORY[0x24BEE4AA8], a2, &v7);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_2448BC884@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for UserDefault(0, *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), a3);
  return UserDefault.wrappedValue.getter(v5, a4);
}

void sub_2448BC8BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for UserDefault(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), a4);
  sub_2448BC570(a1, v5);
}

uint64_t sub_2448BC8F8()
{
  return 16;
}

__n128 sub_2448BC904(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of UserDefaultRepresentable.init(userDefaultsKey:userDefaults:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t sub_2448BC918()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2448EB508();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_2448BC9C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  int v10;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  const void *v19;
  unsigned int (*v20)(const void *, uint64_t, uint64_t);
  id v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v8 + 7;
  v10 = v6 & 0x100000;
  if (v7 > 7
    || v10 != 0
    || ((((v8 + 7 + ((v7 + 25) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v13 = *a2;
    *a1 = *a2;
    v3 = (uint64_t *)(v13 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
  }
  else
  {
    v14 = a2[1];
    *v3 = *a2;
    v3[1] = v14;
    v15 = ((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF8;
    v16 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
    v17 = *(void **)v16;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
    v18 = (void *)((v15 + v7 + 9) & ~v7);
    v19 = (const void *)((v16 + v7 + 9) & ~v7);
    v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_bridgeObjectRetain();
    v21 = v17;
    if (v20(v19, 1, v4))
    {
      memcpy(v18, v19, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v18, v19, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v18, 0, 1, v4);
    }
    v22 = (_QWORD *)(((unint64_t)v18 + v9) & 0xFFFFFFFFFFFFFFF8);
    v23 = (_QWORD *)(((unint64_t)v19 + v9) & 0xFFFFFFFFFFFFFFF8);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    *(_QWORD *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFF8);
    swift_retain();
  }
  swift_retain();
  return v3;
}

uint64_t sub_2448BCB54(uint64_t a1, uint64_t a2)
{
  id *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  swift_bridgeObjectRelease();
  v4 = (id *)((a1 + 23) & 0xFFFFFFFFFFFFFFF8);

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = ((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5))
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v7, v5);
  swift_release();
  return swift_release();
}

_QWORD *sub_2448BCC04(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  id v14;
  int v15;
  size_t v16;
  size_t v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  v6 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(void **)v6;
  *(_QWORD *)v5 = *(_QWORD *)v6;
  *(_BYTE *)(v5 + 8) = *(_BYTE *)(v6 + 8);
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (void *)((v10 + 9 + v5) & ~v10);
  v12 = (const void *)((v10 + 9 + v6) & ~v10);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
  swift_bridgeObjectRetain();
  v14 = v7;
  if (v13(v12, 1, v8))
  {
    v15 = *(_DWORD *)(v9 + 84);
    v16 = *(_QWORD *)(v9 + 64);
    if (v15)
      v17 = v16;
    else
      v17 = v16 + 1;
    memcpy(v11, v12, v17);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v11, v12, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v8);
    v15 = *(_DWORD *)(v9 + 84);
    v16 = *(_QWORD *)(v9 + 64);
  }
  if (v15)
    v18 = v16;
  else
    v18 = v16 + 1;
  v19 = (_QWORD *)(((unint64_t)v11 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  v20 = (_QWORD *)(((unint64_t)v12 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  *(_QWORD *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *sub_2448BCD44(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(void **)v7;
  v9 = *(void **)v6;
  *(_QWORD *)v6 = *(_QWORD *)v7;
  v10 = v8;

  *(_BYTE *)(v6 + 8) = *(_BYTE *)(v7 + 8);
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (void *)((v13 + 9 + v6) & ~v13);
  v15 = (void *)((v13 + 9 + v7) & ~v13);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  LODWORD(v6) = v16(v14, 1, v11);
  v17 = v16(v15, 1, v11);
  if ((_DWORD)v6)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v14, v15, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 24))(v14, v15, v11);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  }
  if (*(_DWORD *)(v12 + 84))
    v18 = *(_QWORD *)(v12 + 64);
  else
    v18 = *(_QWORD *)(v12 + 64) + 1;
  memcpy(v14, v15, v18);
LABEL_10:
  if (*(_DWORD *)(v12 + 84))
    v19 = *(_QWORD *)(v12 + 64);
  else
    v19 = *(_QWORD *)(v12 + 64) + 1;
  v20 = (_QWORD *)(((unint64_t)v14 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_QWORD *)(((unint64_t)v15 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  swift_retain();
  swift_release();
  *(_QWORD *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_2448BCF00(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  int v11;
  size_t v12;
  size_t v13;
  size_t v14;
  _OWORD *v15;
  _OWORD *v16;

  *a1 = *a2;
  v4 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  v5 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v4 = *(_QWORD *)v5;
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(v5 + 8);
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)((v8 + 9 + v4) & ~v8);
  v10 = (const void *)((v8 + 9 + v5) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    v11 = *(_DWORD *)(v7 + 84);
    v12 = *(_QWORD *)(v7 + 64);
    if (v11)
      v13 = v12;
    else
      v13 = v12 + 1;
    memcpy(v9, v10, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
    v11 = *(_DWORD *)(v7 + 84);
    v12 = *(_QWORD *)(v7 + 64);
  }
  if (v11)
    v14 = v12;
  else
    v14 = v12 + 1;
  v15 = (_OWORD *)(((unint64_t)v9 + v14 + 7) & 0xFFFFFFFFFFFFF8);
  v16 = (_OWORD *)(((unint64_t)v10 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  *(_QWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *sub_2448BD01C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  size_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  unint64_t v21;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(void **)v7;
  *(_QWORD *)v7 = *(_QWORD *)v8;

  *(_BYTE *)(v7 + 8) = *(_BYTE *)(v8 + 8);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (void *)((v12 + 9 + v7) & ~v12);
  v14 = (void *)((v12 + 9 + v8) & ~v12);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  LODWORD(v7) = v15(v13, 1, v10);
  v16 = v15(v14, 1, v10);
  if ((_DWORD)v7)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v13, v14, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v13, v14, v10);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  }
  if (*(_DWORD *)(v11 + 84))
    v17 = *(_QWORD *)(v11 + 64);
  else
    v17 = *(_QWORD *)(v11 + 64) + 1;
  memcpy(v13, v14, v17);
LABEL_10:
  if (*(_DWORD *)(v11 + 84))
    v18 = *(_QWORD *)(v11 + 64);
  else
    v18 = *(_QWORD *)(v11 + 64) + 1;
  v19 = (_OWORD *)(((unint64_t)v13 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  v20 = (uint64_t)v14 + v18 + 7;
  v21 = (v20 & 0xFFFFFFFFFFFFFFF8) + 23;
  *v19 = *(_OWORD *)(v20 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  *(_QWORD *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v21 & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_2448BD1B0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v14;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (v5)
    v8 = 7;
  else
    v8 = 8;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  if (v7 < a2)
  {
    if (((((((v8 + *(_QWORD *)(v4 + 64) + ((v9 + 25) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v10 = 2;
    else
      v10 = a2 - v7 + 1;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    __asm { BR              X16 }
  }
  if ((v6 & 0x80000000) != 0)
  {
    v15 = (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v9 + 9) & ~v9);
    if (v15 >= 2)
      return v15 - 1;
    else
      return 0;
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 8);
    if (v14 >= 0xFFFFFFFF)
      LODWORD(v14) = -1;
    return (v14 + 1);
  }
}

void sub_2448BD308(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  if (v10 < a3)
  {
    v12 = a3 - v10;
    if ((((((_DWORD)v11 + ((*(unsigned __int8 *)(v7 + 80) + 25) & ~*(unsigned __int8 *)(v7 + 80)) + 7) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v13 = v12 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v6 = v14;
    else
      v6 = 0;
  }
  if (a2 > v10)
  {
    if ((((((_DWORD)v11 + ((*(unsigned __int8 *)(v7 + 80) + 25) & ~*(unsigned __int8 *)(v7 + 80)) + 7) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      v15 = ~v10 + a2;
      bzero(a1, ((((v11 + ((*(unsigned __int8 *)(v7 + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + 7) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 8);
      *a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X15 }
}

uint64_t sub_2448BD41C@<X0>(unsigned int a1@<W1>, size_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t result;

  *((_BYTE *)v14 + v15) = 0;
  if (a1)
  {
    if ((v11 & 0x80000000) != 0)
    {
      v16 = (void *)(((((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8) + v13 + 9) & v10);
      if (v11 >= a1)
      {
        return (*(uint64_t (**)(void *, _QWORD))(v12 + 56))(v16, a1 + 1);
      }
      else if ((_DWORD)a2)
      {
        if (a2 <= 3)
          v17 = a2;
        else
          v17 = 4;
        bzero(v16, a2);
        __asm { BR              X10 }
      }
    }
    else if ((a1 & 0x80000000) != 0)
    {
      *v14 = a1 ^ 0x80000000;
      v14[1] = 0;
    }
    else
    {
      v14[1] = a1 - 1;
    }
  }
  return result;
}

void sub_2448BD518()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_2448BD520()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_2448BD530()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t sub_2448BD53C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_2448BD5B4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + v6;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v7 + v6 + ((v6 + 16) & ~v6)) & (unint64_t)~v6) + v7 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v12 = ~v6;
    v13 = a2[1];
    *a1 = *a2;
    a1[1] = v13;
    v14 = ((unint64_t)a1 + v6 + 16) & ~v6;
    v15 = ((unint64_t)a2 + v6 + 16) & ~v6;
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v16(v14, v15, v4);
    v16((v8 + v14) & v12, (v8 + v15) & v12, v4);
  }
  return a1;
}

uint64_t sub_2448BD6A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (a1 + v6 + 16) & ~v6;
  v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v9(v7, v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v9)((*(_QWORD *)(v5 + 64) + v6 + v7) & ~v6, v4);
}

_QWORD *sub_2448BD720(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(unint64_t, uint64_t, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a2 + v7 + 16) & ~v7;
  v9 = *(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain();
  v9(((unint64_t)a1 + v7 + 16) & ~v7, v8, v5);
  v9((*(_QWORD *)(v6 + 64) + v7 + (((unint64_t)a1 + v7 + 16) & ~v7)) & ~v7, (*(_QWORD *)(v6 + 64) + v7 + v8) & ~v7, v5);
  return a1;
}

_QWORD *sub_2448BD7B8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(unint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)a2 + v8 + 16) & ~v8;
  v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 24);
  v10(((unint64_t)a1 + v8 + 16) & ~v8, v9, v6);
  v10((*(_QWORD *)(v7 + 64) + v8 + (((unint64_t)a1 + v8 + 16) & ~v8)) & ~v8, (*(_QWORD *)(v7 + 64) + v8 + v9) & ~v8, v6);
  return a1;
}

_OWORD *sub_2448BD86C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 16) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 16) & ~v6;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v9(v7, v8, v4);
  v9((*(_QWORD *)(v5 + 64) + v6 + v7) & ~v6, (*(_QWORD *)(v5 + 64) + v6 + v8) & ~v6, v4);
  return a1;
}

_QWORD *sub_2448BD900(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(unint64_t, uint64_t, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)a2 + v9 + 16) & ~v9;
  v11 = *(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 40);
  v11(((unint64_t)a1 + v9 + 16) & ~v9, v10, v7);
  v11((*(_QWORD *)(v8 + 64) + v9 + (((unint64_t)a1 + v9 + 16) & ~v9)) & ~v9, (*(_QWORD *)(v8 + 64) + v9 + v10) & ~v9, v7);
  return a1;
}

uint64_t sub_2448BD9A4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((*(_QWORD *)(v4 + 64) + v7 + ((v7 + 16) & ~v7)) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 16) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2448BDA84 + 4 * byte_2448F7143[(v9 - 1)]))();
}

void sub_2448BDAF4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64)
       + *(unsigned __int8 *)(v5 + 80)
       + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for UserDefault.Projected(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UserDefault.Projected);
}

uint64_t sub_2448BDD04()
{
  return swift_initClassMetadata2();
}

uint64_t sub_2448BDD60(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  unint64_t v15;
  char v16;
  int v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  __int128 v20;
  __int128 v21;

  v3 = v2;
  v5 = *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v3) + 0x50);
  v6 = sub_2448EB508();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v20 - v9;
  v11 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v20 - v12;
  if (a2 && *(_QWORD *)(a2 + 16))
  {
    v14 = (id)*MEMORY[0x24BDD0E70];
    v15 = sub_244828FC0((uint64_t)v14);
    if ((v16 & 1) != 0)
    {
      sub_2447C92C4(*(_QWORD *)(a2 + 56) + 32 * v15, (uint64_t)&v20);
    }
    else
    {
      v20 = 0u;
      v21 = 0u;
    }

  }
  else
  {
    v20 = 0u;
    v21 = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738B658);
  v17 = swift_dynamicCast();
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (v17)
  {
    v18(v10, 0, 1, v5);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, v5);
    (*(void (**)(char *))((char *)v3 + qword_257391120))(v13);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v5);
  }
  else
  {
    v18(v10, 1, 1, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

void sub_2448BDF14()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_2448BDF40()
{
  uint64_t v0;

  return sub_2448BAFD8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_2448BDF48(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 121;
  else
    v2 = 120;
  if ((a2 & 1) != 0)
    v3 = 121;
  else
    v3 = 120;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_2448EBBEC();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_2448BDFA8(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x746867696568;
  else
    v3 = 0x6874646977;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x746867696568;
  else
    v5 = 0x6874646977;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2448EBBEC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_2448BE044(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x72657070617277;
  else
    v3 = 1717658988;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x72657070617277;
  else
    v5 = 1717658988;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2448EBBEC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_2448BE0E0(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 1868983913;
  else
    v3 = 0x726F727265;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE400000000000000;
  if ((a2 & 1) != 0)
    v5 = 1868983913;
  else
    v5 = 0x726F727265;
  if ((a2 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2448EBBEC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_2448BE178(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_2448BE1C4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2448BE2CC + 4 * byte_2448F72F9[a2]))(0x756C615668676968);
}

uint64_t sub_2448BE2CC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x756C615668676968 && v1 == 0xEE00656C74695465)
    v2 = 1;
  else
    v2 = sub_2448EBBEC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_2448BE42C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x69796C7265646E75;
  else
    v3 = 1852399981;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xEA0000000000676ELL;
  if ((a2 & 1) != 0)
    v5 = 0x69796C7265646E75;
  else
    v5 = 1852399981;
  if ((a2 & 1) != 0)
    v6 = 0xEA0000000000676ELL;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2448EBBEC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_2448BE4CC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2448BE504(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2448BE5C8 + 4 * byte_2448F730B[a2]))(1701667182);
}

uint64_t sub_2448BE5C8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1701667182 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = sub_2448EBBEC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_2448BE6F0(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_2448BE738()
{
  sub_2448EAB60();
  return swift_bridgeObjectRelease();
}

void sub_2448BE834(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_2448BE868()
{
  sub_2448EAB60();
  return swift_bridgeObjectRelease();
}

__n128 CrashReport.Frame.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

uint64_t CrashReport.init(id:name:bugType:pid:time:asi:images:frames:logFilePath:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  _QWORD *v26;

  sub_244821FFC(a1, a9);
  v20 = (int *)type metadata accessor for CrashReport(0);
  v21 = (_QWORD *)(a9 + v20[5]);
  *v21 = a2;
  v21[1] = a3;
  v22 = (_QWORD *)(a9 + v20[6]);
  *v22 = a4;
  v22[1] = a5;
  *(_DWORD *)(a9 + v20[7]) = a6;
  v23 = a9 + v20[8];
  v24 = sub_2448EA500();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v23, a7, v24);
  *(_QWORD *)(a9 + v20[9]) = a8;
  *(_QWORD *)(a9 + v20[10]) = a10;
  *(_QWORD *)(a9 + v20[11]) = a11;
  v26 = (_QWORD *)(a9 + v20[12]);
  *v26 = a12;
  v26[1] = a13;
  return result;
}

uint64_t type metadata accessor for CrashReport.ID(uint64_t a1)
{
  return sub_2447BD0C8(a1, qword_257391390);
}

uint64_t type metadata accessor for CrashReport(uint64_t a1)
{
  return sub_2447BD0C8(a1, qword_2573912E0);
}

uint64_t CrashReport.ID.identifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_2448EA548();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t CrashReport.ID.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_2448EA548();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t CrashReport.ID.hash(into:)()
{
  sub_2448EA548();
  sub_2447BD7A0((unint64_t *)&qword_25738CF90, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  return sub_2448EA920();
}

uint64_t CrashReport.ID.hashValue.getter()
{
  sub_2448EBD00();
  sub_2448EA548();
  sub_2447BD7A0((unint64_t *)&qword_25738CF90, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  sub_2448EA920();
  return sub_2448EBD3C();
}

uint64_t sub_2448BEB98()
{
  sub_2448EBD00();
  sub_2448EA548();
  sub_2447BD7A0((unint64_t *)&qword_25738CF90, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  sub_2448EA920();
  return sub_2448EBD3C();
}

uint64_t sub_2448BEC04()
{
  sub_2448EA548();
  sub_2447BD7A0((unint64_t *)&qword_25738CF90, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  return sub_2448EA920();
}

uint64_t sub_2448BEC5C()
{
  sub_2448EBD00();
  sub_2448EA548();
  sub_2447BD7A0((unint64_t *)&qword_25738CF90, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  sub_2448EA920();
  return sub_2448EBD3C();
}

uint64_t CrashReport.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2447BD13C(v1, a1, type metadata accessor for CrashReport.ID);
}

uint64_t CrashReport.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CrashReport(0) + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CrashReport.bugType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CrashReport(0) + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CrashReport.pid.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for CrashReport(0) + 28));
}

uint64_t CrashReport.time.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CrashReport(0) + 32);
  v4 = sub_2448EA500();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t CrashReport.asi.getter()
{
  type metadata accessor for CrashReport(0);
  return swift_bridgeObjectRetain();
}

uint64_t CrashReport.images.getter()
{
  type metadata accessor for CrashReport(0);
  return swift_bridgeObjectRetain();
}

uint64_t CrashReport.frames.getter()
{
  type metadata accessor for CrashReport(0);
  return swift_bridgeObjectRetain();
}

uint64_t CrashReport.frames.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for CrashReport(0) + 44);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*CrashReport.frames.modify())(_QWORD)
{
  type metadata accessor for CrashReport(0);
  return nullsub_1;
}

uint64_t CrashReport.logFilePath.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CrashReport(0) + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CrashReport.Frame.ImageLocation.imageIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t CrashReport.Frame.ImageLocation.imageOffset.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t CrashReport.Frame.ImageLocation.hash(into:)()
{
  sub_2448EBD0C();
  return sub_2448EBD0C();
}

BOOL static CrashReport.Frame.ImageLocation.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t CrashReport.Frame.ImageLocation.hashValue.getter()
{
  sub_2448EBD00();
  sub_2448EBD0C();
  sub_2448EBD0C();
  return sub_2448EBD3C();
}

uint64_t sub_2448BEF84()
{
  sub_2448EBD00();
  sub_2448EBD0C();
  sub_2448EBD0C();
  return sub_2448EBD3C();
}

uint64_t sub_2448BEFDC()
{
  sub_2448EBD0C();
  return sub_2448EBD0C();
}

uint64_t sub_2448BF014()
{
  sub_2448EBD00();
  sub_2448EBD0C();
  sub_2448EBD0C();
  return sub_2448EBD3C();
}

BOOL sub_2448BF068(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL static CrashReport.Frame.CodingKeys.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t CrashReport.Frame.CodingKeys.hash(into:)()
{
  return sub_2448EBD0C();
}

PreviewsFoundationOS::CrashReport::Frame::CodingKeys_optional __swiftcall CrashReport.Frame.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  char *v1;
  char *v2;
  BOOL v3;
  void *object;
  uint64_t countAndFlagsBits;
  PreviewsFoundationOS::CrashReport::Frame::CodingKeys_optional result;
  char v7;
  char v8;

  v2 = v1;
  v3 = stringValue._countAndFlagsBits == 0x646E496567616D69 && stringValue._object == (void *)0xEA00000000007865;
  if (v3
    || (object = stringValue._object, countAndFlagsBits = stringValue._countAndFlagsBits, (sub_2448EBBEC() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else if (countAndFlagsBits == 0x66664F6567616D69 && object == (void *)0xEB00000000746573
         || (sub_2448EBBEC() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 1;
  }
  else if (countAndFlagsBits == 0x6C6F626D7973 && object == (void *)0xE600000000000000
         || (sub_2448EBBEC() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 2;
  }
  else if (countAndFlagsBits == 0x6F4C6C6F626D7973 && object == (void *)0xEE006E6F69746163
         || (sub_2448EBBEC() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 3;
  }
  else if (countAndFlagsBits == 0x6946656372756F73 && object == (void *)0xEA0000000000656CLL
         || (sub_2448EBBEC() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 4;
  }
  else if (countAndFlagsBits == 0x694C656372756F73 && object == (void *)0xEA0000000000656ELL)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 5;
  }
  else
  {
    v8 = sub_2448EBBEC();
    result.value = swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      v7 = 5;
    else
      v7 = 6;
  }
  *v2 = v7;
  return result;
}

PreviewsFoundationOS::CrashReport::Frame::CodingKeys_optional __swiftcall CrashReport.Frame.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  _BYTE *v1;

  *v1 = 6;
  return (PreviewsFoundationOS::CrashReport::Frame::CodingKeys_optional)intValue;
}

uint64_t CrashReport.Frame.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t CrashReport.Frame.CodingKeys.stringValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2448BF3E4 + 4 * byte_2448F7326[*v0]))(0x646E496567616D69, 0xEA00000000007865);
}

uint64_t sub_2448BF3E4()
{
  return 0x66664F6567616D69;
}

uint64_t sub_2448BF404()
{
  return 0x6C6F626D7973;
}

uint64_t sub_2448BF418()
{
  return 0x6F4C6C6F626D7973;
}

uint64_t sub_2448BF43C()
{
  return 0x6946656372756F73;
}

uint64_t sub_2448BF458()
{
  return 0x694C656372756F73;
}

uint64_t sub_2448BF478()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2448BF4AC + 4 * byte_2448F732C[*v0]))(0x646E496567616D69, 0xEA00000000007865);
}

uint64_t sub_2448BF4AC()
{
  return 0x66664F6567616D69;
}

uint64_t sub_2448BF4CC()
{
  return 0x6C6F626D7973;
}

uint64_t sub_2448BF4E0()
{
  return 0x6F4C6C6F626D7973;
}

uint64_t sub_2448BF504()
{
  return 0x6946656372756F73;
}

uint64_t sub_2448BF520()
{
  return 0x694C656372756F73;
}

void sub_2448BF544(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_2448BF550()
{
  sub_2448BF9B4();
  return sub_2448EBD9C();
}

uint64_t sub_2448BF578()
{
  sub_2448BF9B4();
  return sub_2448EBDA8();
}

uint64_t CrashReport.Frame.imageIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t CrashReport.Frame.imageOffset.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t CrashReport.Frame.symbol.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CrashReport.Frame.symbol.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*CrashReport.Frame.symbol.modify())()
{
  return nullsub_1;
}

uint64_t CrashReport.Frame.symbolLocation.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t CrashReport.Frame.symbolLocation.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = result;
  *(_BYTE *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*CrashReport.Frame.symbolLocation.modify())()
{
  return nullsub_1;
}

uint64_t CrashReport.Frame.sourceFile.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CrashReport.Frame.sourceFile.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t (*CrashReport.Frame.sourceFile.modify())()
{
  return nullsub_1;
}

uint64_t CrashReport.Frame.sourceLine.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t CrashReport.Frame.sourceLine.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 64) = result;
  *(_BYTE *)(v2 + 72) = a2 & 1;
  return result;
}

uint64_t (*CrashReport.Frame.sourceLine.modify())()
{
  return nullsub_1;
}

void __swiftcall CrashReport.Frame.init(imageIndex:imageOffset:symbol:symbolLocation:sourceFile:sourceLine:)(PreviewsFoundationOS::CrashReport::Frame *__return_ptr retstr, Swift::Int imageIndex, Swift::Int imageOffset, Swift::String_optional symbol, Swift::Int_optional symbolLocation, Swift::String_optional sourceFile, Swift::Int_optional sourceLine)
{
  retstr->imageIndex = imageIndex;
  retstr->imageOffset = imageOffset;
  retstr->symbol = symbol;
  retstr->symbolLocation.value = symbolLocation.value;
  retstr->symbolLocation.is_nil = symbolLocation.is_nil;
  retstr->sourceFile = sourceFile;
  retstr->sourceLine.value = sourceLine.value;
  retstr->sourceLine.is_nil = sourceLine.is_nil;
}

uint64_t CrashReport.Frame.init(decoder:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  char v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573911A8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2448BF9B4();
  sub_2448EBD60();
  if (!v2)
  {
    v36 = 0;
    v9 = sub_2448EBACC();
    v35 = 1;
    v30 = sub_2448EBACC();
    v34 = 2;
    v10 = sub_2448EBA9C();
    v13 = v12;
    v29 = v10;
    v33 = 3;
    swift_bridgeObjectRetain();
    v14 = sub_2448EBAA8();
    v26 = v15;
    v27 = v14;
    v28 = a2;
    v32 = 4;
    v16 = sub_2448EBA9C();
    v18 = v17;
    v25 = v16;
    v31 = 5;
    swift_bridgeObjectRetain();
    v19 = sub_2448EBAA8();
    v20 = *(void (**)(char *, uint64_t))(v6 + 8);
    v22 = v21;
    v20(v8, v5);
    v23 = v28;
    v24 = v30;
    *v28 = v9;
    v23[1] = v24;
    v23[2] = v29;
    v23[3] = v13;
    v23[4] = v27;
    *((_BYTE *)v23 + 40) = v26 & 1;
    v23[6] = v25;
    v23[7] = v18;
    v23[8] = v19;
    *((_BYTE *)v23 + 72) = v22 & 1;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t sub_2448BF9B4()
{
  unint64_t result;

  result = qword_2573911B0;
  if (!qword_2573911B0)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for CrashReport.Frame.CodingKeys, &type metadata for CrashReport.Frame.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2573911B0);
  }
  return result;
}

uint64_t CrashReport.Frame.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  char v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573911A8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2448BF9B4();
  sub_2448EBD60();
  if (!v2)
  {
    v36 = 0;
    v9 = sub_2448EBACC();
    v35 = 1;
    v30 = sub_2448EBACC();
    v34 = 2;
    v10 = sub_2448EBA9C();
    v13 = v12;
    v29 = v10;
    v33 = 3;
    swift_bridgeObjectRetain();
    v14 = sub_2448EBAA8();
    v26 = v15;
    v27 = v14;
    v28 = a2;
    v32 = 4;
    v16 = sub_2448EBA9C();
    v18 = v17;
    v25 = v16;
    v31 = 5;
    swift_bridgeObjectRetain();
    v19 = sub_2448EBAA8();
    v20 = *(void (**)(char *, uint64_t))(v6 + 8);
    v22 = v21;
    v20(v8, v5);
    v23 = v28;
    v24 = v30;
    *v28 = v9;
    v23[1] = v24;
    v23[2] = v29;
    v23[3] = v13;
    v23[4] = v27;
    *((_BYTE *)v23 + 40) = v26 & 1;
    v23[6] = v25;
    v23[7] = v18;
    v23[8] = v19;
    *((_BYTE *)v23 + 72) = v22 & 1;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2448BFC94@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return CrashReport.Frame.init(from:)(a1, a2);
}

uint64_t CrashReport.Image.uuid.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CrashReport.Image.uuid.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*CrashReport.Image.uuid.modify())()
{
  return nullsub_1;
}

uint64_t CrashReport.Image.arch.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CrashReport.Image.arch.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*CrashReport.Image.arch.modify())()
{
  return nullsub_1;
}

uint64_t CrashReport.Image.base.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t CrashReport.Image.base.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*CrashReport.Image.base.modify())()
{
  return nullsub_1;
}

uint64_t CrashReport.Image.path.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CrashReport.Image.path.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return result;
}

uint64_t (*CrashReport.Image.path.modify())()
{
  return nullsub_1;
}

uint64_t CrashReport.Image.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CrashReport.Image.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  return result;
}

uint64_t (*CrashReport.Image.name.modify())()
{
  return nullsub_1;
}

PreviewsFoundationOS::CrashReport::Image::CodingKeys_optional __swiftcall CrashReport.Image.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  char *v1;
  char *v2;
  BOOL v3;
  void *object;
  uint64_t countAndFlagsBits;
  PreviewsFoundationOS::CrashReport::Image::CodingKeys_optional result;
  char v7;
  char v8;

  v2 = v1;
  v3 = stringValue._countAndFlagsBits == 1684632949 && stringValue._object == (void *)0xE400000000000000;
  if (v3
    || (object = stringValue._object, countAndFlagsBits = stringValue._countAndFlagsBits, (sub_2448EBBEC() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else if (countAndFlagsBits == 1751347809 && object == (void *)0xE400000000000000 || (sub_2448EBBEC() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 1;
  }
  else if (countAndFlagsBits == 1702060386 && object == (void *)0xE400000000000000 || (sub_2448EBBEC() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 2;
  }
  else if (countAndFlagsBits == 1752457584 && object == (void *)0xE400000000000000 || (sub_2448EBBEC() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 3;
  }
  else if (countAndFlagsBits == 1701667182 && object == (void *)0xE400000000000000)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 4;
  }
  else
  {
    v8 = sub_2448EBBEC();
    result.value = swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      v7 = 4;
    else
      v7 = 5;
  }
  *v2 = v7;
  return result;
}

PreviewsFoundationOS::CrashReport::Image::CodingKeys_optional __swiftcall CrashReport.Image.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  _BYTE *v1;

  *v1 = 5;
  return (PreviewsFoundationOS::CrashReport::Image::CodingKeys_optional)intValue;
}

uint64_t CrashReport.Image.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t CrashReport.Image.CodingKeys.stringValue.getter()
{
  char *v0;

  return *(_QWORD *)&aUuid_0[8 * *v0];
}

uint64_t sub_2448C0098()
{
  char *v0;

  return *(_QWORD *)&aUuid_0[8 * *v0];
}

void sub_2448C00B4(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_2448C00C0()
{
  sub_2448C0418();
  return sub_2448EBD9C();
}

uint64_t sub_2448C00E8()
{
  sub_2448C0418();
  return sub_2448EBDA8();
}

void __swiftcall CrashReport.Image.init(uuid:arch:base:path:name:)(PreviewsFoundationOS::CrashReport::Image *__return_ptr retstr, Swift::String uuid, Swift::String_optional arch, Swift::Int base, Swift::String_optional path, Swift::String_optional name)
{
  retstr->uuid = uuid;
  retstr->arch = arch;
  retstr->base = base;
  retstr->path = path;
  retstr->name = name;
}

uint64_t CrashReport.Image.init(decoder:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573911B8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2448C0418();
  sub_2448EBD60();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v36 = 0;
    v9 = sub_2448EBAC0();
    v12 = v11;
    v31 = v9;
    v35 = 1;
    swift_bridgeObjectRetain();
    v13 = sub_2448EBA9C();
    v15 = v14;
    v30 = v13;
    v34 = 2;
    swift_bridgeObjectRetain();
    v28 = sub_2448EBACC();
    v29 = a2;
    v33 = 3;
    v16 = sub_2448EBA9C();
    v18 = v17;
    v27 = v16;
    v32 = 4;
    swift_bridgeObjectRetain();
    v19 = sub_2448EBA9C();
    v21 = v20;
    v22 = *(void (**)(char *, uint64_t))(v6 + 8);
    v23 = v19;
    v22(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v24 = v29;
    *v29 = v31;
    v24[1] = v12;
    v24[2] = v30;
    v24[3] = v15;
    v25 = v27;
    v24[4] = v28;
    v24[5] = v25;
    v24[6] = v18;
    v24[7] = v23;
    v24[8] = v21;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t sub_2448C0418()
{
  unint64_t result;

  result = qword_2573911C0;
  if (!qword_2573911C0)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for CrashReport.Image.CodingKeys, &type metadata for CrashReport.Image.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2573911C0);
  }
  return result;
}

uint64_t CrashReport.Image.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573911B8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2448C0418();
  sub_2448EBD60();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v36 = 0;
    v9 = sub_2448EBAC0();
    v12 = v11;
    v31 = v9;
    v35 = 1;
    swift_bridgeObjectRetain();
    v13 = sub_2448EBA9C();
    v15 = v14;
    v30 = v13;
    v34 = 2;
    swift_bridgeObjectRetain();
    v28 = sub_2448EBACC();
    v29 = a2;
    v33 = 3;
    v16 = sub_2448EBA9C();
    v18 = v17;
    v27 = v16;
    v32 = 4;
    swift_bridgeObjectRetain();
    v19 = sub_2448EBA9C();
    v21 = v20;
    v22 = *(void (**)(char *, uint64_t))(v6 + 8);
    v23 = v19;
    v22(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v24 = v29;
    *v29 = v31;
    v24[1] = v12;
    v24[2] = v30;
    v24[3] = v15;
    v25 = v27;
    v24[4] = v28;
    v24[5] = v25;
    v24[6] = v18;
    v24[7] = v23;
    v24[8] = v21;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2448C0748@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return CrashReport.Image.init(from:)(a1, a2);
}

uint64_t CrashReport.init(dictionary:)()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  id v9;
  id v10[2];

  v10[1] = *(id *)MEMORY[0x24BDAC8D0];
  sub_2448EA1F4();
  swift_allocObject();
  sub_2448EA1E8();
  v0 = (void *)objc_opt_self();
  v1 = (void *)sub_2448EA7F4();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  v2 = objc_msgSend(v0, sel_dataWithJSONObject_options_error_, v1, 0, v10);

  v3 = v10[0];
  if (v2)
  {
    type metadata accessor for CrashReport(0);
    v4 = v3;
    v5 = sub_2448EA47C();
    v7 = v6;

    sub_2447BD7A0(&qword_2573911C8, type metadata accessor for CrashReport, (uint64_t)&protocol conformance descriptor for CrashReport);
    sub_2448EA1DC();
    swift_release();
    return sub_2447E74B0(v5, v7);
  }
  else
  {
    v9 = v10[0];
    swift_release();
    sub_2448EA38C();

    return swift_willThrow();
  }
}

uint64_t CrashReport.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char *v24;
  int *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  char *v46;
  int *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char v59;
  uint64_t v60;

  v50 = a2;
  v3 = sub_2448EA500();
  v4 = *(_QWORD *)(v3 - 8);
  v52 = v3;
  v53 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v51 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738E8A8);
  MEMORY[0x24BDAC7A8](v6);
  v55 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_2448EA548();
  v8 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573911D0);
  v11 = *(_QWORD *)(v54 - 8);
  MEMORY[0x24BDAC7A8](v54);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CrashReport(0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[3];
  v57 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v17);
  sub_2448C24DC();
  v18 = v58;
  sub_2448EBD60();
  if (v18)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
  v48 = v10;
  v49 = v8;
  v58 = v11;
  v46 = v16;
  v47 = (int *)v14;
  LOBYTE(v60) = 0;
  sub_2447BD7A0(&qword_2573911E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
  v20 = (uint64_t)v55;
  v19 = v56;
  v21 = v54;
  sub_2448EBAB4();
  v23 = v49;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v20, 1, v19) == 1)
  {
    v24 = v48;
    _s20PreviewsFoundationOS11CrashReportV2IDVAEycfC_0();
    sub_2448C2520(v20);
  }
  else
  {
    v24 = v48;
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(v48, v20, v19);
  }
  v26 = v46;
  v25 = v47;
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v46, v24, v19);
  LOBYTE(v60) = 1;
  v27 = v21;
  v28 = sub_2448EBAC0();
  v29 = v25;
  v30 = (uint64_t *)&v26[v25[5]];
  *v30 = v28;
  v30[1] = v31;
  LOBYTE(v60) = 2;
  v32 = sub_2448EBAC0();
  v33 = (uint64_t *)&v26[v25[6]];
  *v33 = v32;
  v33[1] = v34;
  LOBYTE(v60) = 3;
  v35 = sub_2448EBAE4();
  v36 = v49;
  *(_DWORD *)&v26[v25[7]] = v35;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573911E8);
  v59 = 4;
  sub_2448C2560();
  sub_2448EBAB4();
  *(_QWORD *)&v26[v25[9]] = v60;
  LOBYTE(v60) = 5;
  sub_2447BD7A0(&qword_257391000, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
  v37 = v51;
  v38 = v13;
  v39 = v52;
  sub_2448EBAD8();
  (*(void (**)(char *, char *, uint64_t))(v53 + 32))(&v26[v29[8]], v37, v39);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257391200);
  v59 = 6;
  sub_2448C266C(&qword_257391208, &qword_257391200, (uint64_t (*)(void))sub_2448C2628);
  sub_2448EBAD8();
  v40 = v38;
  *(_QWORD *)&v26[v29[10]] = v60;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257391218);
  v59 = 7;
  sub_2448C266C(&qword_257391220, &qword_257391218, (uint64_t (*)(void))sub_2448C26D0);
  sub_2448EBAD8();
  *(_QWORD *)&v26[v29[11]] = v60;
  LOBYTE(v60) = 8;
  v41 = sub_2448EBA9C();
  v43 = v42;
  (*(void (**)(char *, uint64_t))(v36 + 8))(v48, v56);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v40, v27);
  v44 = (uint64_t)v46;
  v45 = (uint64_t *)&v46[v47[12]];
  *v45 = v41;
  v45[1] = v43;
  sub_2447BD13C(v44, v50, type metadata accessor for CrashReport);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
  return sub_2447BF330(v44, type metadata accessor for CrashReport);
}

uint64_t sub_2448C10D0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2448C10F8 + 4 * byte_2448F7332[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_2448C10F8()
{
  return 1701667182;
}

uint64_t sub_2448C1108()
{
  return 0x657079745F677562;
}

uint64_t sub_2448C1120()
{
  return 6580592;
}

uint64_t sub_2448C1130()
{
  return 6910817;
}

uint64_t sub_2448C1140()
{
  return 1701669236;
}

uint64_t sub_2448C1154()
{
  return 0x736567616D69;
}

uint64_t sub_2448C1168()
{
  return 0x73656D617266;
}

uint64_t sub_2448C117C()
{
  return 0x50656C6946676F6CLL;
}

uint64_t sub_2448C119C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2448C11C4 + 4 * byte_2448F733B[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_2448C11C4()
{
  return 1701667182;
}

uint64_t sub_2448C11D4()
{
  return 0x657079745F677562;
}

uint64_t sub_2448C11EC()
{
  return 6580592;
}

uint64_t sub_2448C11FC()
{
  return 6910817;
}

uint64_t sub_2448C120C()
{
  return 1701669236;
}

uint64_t sub_2448C1220()
{
  return 0x736567616D69;
}

uint64_t sub_2448C1234()
{
  return 0x73656D617266;
}

uint64_t sub_2448C1248()
{
  return 0x50656C6946676F6CLL;
}

void sub_2448C1268(char *a1)
{
  sub_2448BE4CC(*a1);
}

uint64_t sub_2448C1274()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_2448EBD00();
  sub_2448BE834((uint64_t)v3, v1);
  return sub_2448EBD3C();
}

void sub_2448C12B8(uint64_t a1)
{
  char *v1;

  sub_2448BE834(a1, *v1);
}

uint64_t sub_2448C12C0()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_2448EBD00();
  sub_2448BE834((uint64_t)v3, v1);
  return sub_2448EBD3C();
}

uint64_t sub_2448C1300@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2448C3CF4();
  *a1 = result;
  return result;
}

uint64_t sub_2448C132C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_2448C10D0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2448C1354()
{
  unsigned __int8 *v0;

  return sub_2448C119C(*v0);
}

uint64_t sub_2448C135C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2448C3CF4();
  *a1 = result;
  return result;
}

void sub_2448C1380(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_2448C138C()
{
  sub_2448C24DC();
  return sub_2448EBD9C();
}

uint64_t sub_2448C13B4()
{
  sub_2448C24DC();
  return sub_2448EBDA8();
}

uint64_t sub_2448C13DC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CrashReport.init(from:)(a1, a2);
}

uint64_t sub_2448C13F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2447BD13C(v1, a1, type metadata accessor for CrashReport.ID);
}

Swift::Void __swiftcall CrashReport.describe(with:)(Swift::OpaquePointer *with)
{
  Swift::String v2;
  _QWORD *rawValue;
  unint64_t v4;
  unint64_t v5;
  Swift::String *v6;

  v2 = CrashReport.formattedAsLegacyCrashReport()();
  rawValue = with->_rawValue;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    rawValue = sub_2447BD730(0, rawValue[2] + 1, 1, rawValue);
  v5 = rawValue[2];
  v4 = rawValue[3];
  if (v5 >= v4 >> 1)
    rawValue = sub_2447BD730((_QWORD *)(v4 > 1), v5 + 1, 1, rawValue);
  rawValue[2] = v5 + 1;
  v6 = (Swift::String *)&rawValue[3 * v5];
  v6[2] = v2;
  LOBYTE(v6[3]._countAndFlagsBits) = 0;
  with->_rawValue = rawValue;
}

Swift::String __swiftcall CrashReport.formattedAsLegacyCrashReport()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  int64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int64_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int64_t v56;
  unint64_t v57;
  _QWORD *v58;
  int64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  int64_t v70;
  unint64_t v71;
  _QWORD *v72;
  int64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  void *v79;
  Swift::String result;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  uint64_t v85;
  char v86;
  unint64_t v87;
  int64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int64_t v93;
  unint64_t v94;

  v1 = 0xD000000000000015;
  sub_2448EB79C();
  swift_bridgeObjectRelease();
  v2 = type metadata accessor for CrashReport(0);
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  v84 = (int *)v2;
  v85 = v0;
  sub_2448EBB5C();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  v3 = 0xD000000000000015;
  v4 = 0x80000002448FD590;
  v5 = sub_2447C1B70(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v7 = v5[2];
  v6 = v5[3];
  v8 = v7 + 1;
  if (v7 >= (unint64_t)v6 >> 1)
    goto LABEL_90;
  while (1)
  {
    v5[2] = v8;
    v9 = &v5[2 * v7];
    v9[4] = v3;
    v9[5] = v4;
    sub_2448EB79C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    v11 = v5[2];
    v10 = v5[3];
    v12 = v10 >> 1;
    v13 = v11 + 1;
    if (v10 >> 1 <= v11)
    {
      v5 = sub_2447C1B70((_QWORD *)(v10 > 1), v11 + 1, 1, v5);
      v10 = v5[3];
      v12 = v10 >> 1;
    }
    v5[2] = v13;
    v14 = &v5[2 * v11];
    v14[4] = v1;
    v14[5] = 0x80000002448FD5B0;
    if (v12 < (uint64_t)(v11 + 2))
      v5 = sub_2447C1B70((_QWORD *)(v10 > 1), v11 + 2, 1, v5);
    v5[2] = v11 + 2;
    v15 = &v5[2 * v13];
    v15[4] = 0;
    v15[5] = 0xE000000000000000;
    sub_2448EB79C();
    swift_bridgeObjectRelease();
    sub_2448EA500();
    sub_2447BD7A0(&qword_257391230, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE988]);
    sub_2448EBB5C();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    v17 = v5[2];
    v16 = v5[3];
    v18 = v16 >> 1;
    v19 = v17 + 1;
    if (v16 >> 1 <= v17)
    {
      v5 = sub_2447C1B70((_QWORD *)(v16 > 1), v17 + 1, 1, v5);
      v16 = v5[3];
      v18 = v16 >> 1;
    }
    v5[2] = v19;
    v20 = &v5[2 * v17];
    v20[4] = v1;
    v20[5] = 0x80000002448FD5D0;
    if (v18 < (uint64_t)(v17 + 2))
      v5 = sub_2447C1B70((_QWORD *)(v16 > 1), v17 + 2, 1, v5);
    v5[2] = v17 + 2;
    v21 = &v5[2 * v19];
    v21[4] = 0;
    v21[5] = 0xE000000000000000;
    v4 = *(_QWORD *)(v85 + v84[9]);
    if (v4)
    {
      v3 = v5[2];
      v22 = v5[3];
      v8 = v3 + 1;
      swift_bridgeObjectRetain();
      if (v3 >= v22 >> 1)
        v5 = sub_2447C1B70((_QWORD *)(v22 > 1), v3 + 1, 1, v5);
      v23 = 0;
      v5[2] = v8;
      v24 = &v5[2 * v3];
      v24[4] = v1 + 12;
      v24[5] = 0x80000002448FD610;
      v87 = v4 + 64;
      v25 = 1 << *(_BYTE *)(v4 + 32);
      v26 = -1;
      if (v25 < 64)
        v26 = ~(-1 << v25);
      v27 = v26 & *(_QWORD *)(v4 + 64);
      v88 = (unint64_t)(v25 + 63) >> 6;
      v89 = v4;
      while (1)
      {
        if (v27)
        {
          v91 = (v27 - 1) & v27;
          v93 = v23;
          v28 = __clz(__rbit64(v27)) | (v23 << 6);
        }
        else
        {
          v6 = v23 + 1;
          if (__OFADD__(v23, 1))
            goto LABEL_87;
          if (v6 >= v88)
          {
LABEL_41:
            swift_release();
            v1 = 0xD000000000000015;
            break;
          }
          v29 = *(_QWORD *)(v87 + 8 * v6);
          v30 = v23 + 1;
          if (!v29)
          {
            v30 = v23 + 2;
            if (v23 + 2 >= v88)
              goto LABEL_41;
            v29 = *(_QWORD *)(v87 + 8 * v30);
            if (!v29)
            {
              v30 = v23 + 3;
              if (v23 + 3 >= v88)
                goto LABEL_41;
              v29 = *(_QWORD *)(v87 + 8 * v30);
              if (!v29)
              {
                v6 = v23 + 4;
                if (v23 + 4 >= v88)
                  goto LABEL_41;
                v29 = *(_QWORD *)(v87 + 8 * v6);
                if (!v29)
                {
                  while (1)
                  {
                    v30 = v6 + 1;
                    if (__OFADD__(v6, 1))
                      goto LABEL_89;
                    if (v30 >= v88)
                      goto LABEL_41;
                    v29 = *(_QWORD *)(v87 + 8 * v30);
                    ++v6;
                    if (v29)
                      goto LABEL_32;
                  }
                }
                v30 = v23 + 4;
              }
            }
          }
LABEL_32:
          v91 = (v29 - 1) & v29;
          v93 = v30;
          v28 = __clz(__rbit64(v29)) + (v30 << 6);
        }
        v3 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v28);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_2448EABC0();
        swift_bridgeObjectRelease();
        sub_2448EABC0();
        v7 = v5[2];
        v31 = v5[3];
        v8 = v7 + 1;
        if (v7 >= v31 >> 1)
          v5 = sub_2447C1B70((_QWORD *)(v31 > 1), v7 + 1, 1, v5);
        v5[2] = v8;
        v32 = &v5[2 * v7];
        v32[4] = 538976288;
        v32[5] = 0xE400000000000000;
        v33 = *(_QWORD *)(v3 + 16);
        if (v33)
        {
          v1 = v3 + 40;
          do
          {
            swift_bridgeObjectRetain();
            sub_2448EABC0();
            swift_bridgeObjectRelease();
            v7 = 0xE800000000000000;
            v35 = v5[2];
            v34 = v5[3];
            v8 = v35 + 1;
            if (v35 >= v34 >> 1)
              v5 = sub_2447C1B70((_QWORD *)(v34 > 1), v35 + 1, 1, v5);
            v1 += 16;
            v5[2] = v8;
            v36 = &v5[2 * v35];
            v36[4] = 0x2020202020202020;
            v36[5] = 0xE800000000000000;
            --v33;
          }
          while (v33);
        }
        swift_bridgeObjectRelease();
        v4 = v89;
        v27 = v91;
        v23 = v93;
      }
    }
    v37 = *(_QWORD *)(v85 + v84[11]);
    if (!*(_QWORD *)(v37 + 16))
      break;
    v39 = v5[2];
    v38 = v5[3];
    v40 = v38 >> 1;
    v41 = v39 + 1;
    if (v38 >> 1 <= v39)
    {
      v5 = sub_2447C1B70((_QWORD *)(v38 > 1), v39 + 1, 1, v5);
      v38 = v5[3];
      v40 = v38 >> 1;
    }
    v5[2] = v41;
    v42 = &v5[2 * v39];
    v42[4] = 0;
    v42[5] = 0xE000000000000000;
    v3 = v39 + 2;
    if (v40 < v3)
      v5 = sub_2447C1B70((_QWORD *)(v38 > 1), v3, 1, v5);
    v5[2] = v3;
    v43 = &v5[2 * v41];
    v43[4] = v1 - 5;
    v43[5] = 0x80000002448FD5F0;
    v82 = sub_2448C23C8();
    sub_2448EBB5C();
    sub_2448EABC0();
    v83 = sub_2448EAB78();
    swift_bridgeObjectRelease();
    v8 = *(_QWORD *)(v37 + 16);
    swift_bridgeObjectRetain();
    if (!v8)
    {
LABEL_67:
      swift_bridgeObjectRelease();
      break;
    }
    v44 = 0;
    v45 = v37 + 56;
    v6 = (uint64_t)memmove;
    v81 = v37;
    while (v44 < v8)
    {
      v4 = *(_QWORD *)(v45 - 24);
      v92 = *(_QWORD *)(v45 - 16);
      v94 = v44;
      v3 = *(_QWORD *)(v45 - 8);
      v1 = *(_QWORD *)(v45 + 8);
      v7 = *(unsigned __int8 *)(v45 + 16);
      v46 = *(_QWORD *)(v45 + 32);
      v86 = *(_BYTE *)(v45 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v8 = sub_2448EBB5C();
      v48 = v47;
      v49 = sub_2448EAB78();
      v6 = v83;
      if (__OFSUB__(v83, v49))
        goto LABEL_85;
      v90 = v8;
      MEMORY[0x249519458](32, 0xE100000000000000, v83 - v49);
      v6 = *(_QWORD *)(v85 + v84[10]);
      if ((int64_t)v4 >= *(_QWORD *)(v6 + 16))
      {
        v4 = 0xE300000000000000;
        v8 = 0xE300000000000000;
      }
      else
      {
        v8 = 0xE300000000000000;
        if ((v4 & 0x8000000000000000) != 0)
          goto LABEL_88;
        v4 = *(_QWORD *)(v6 + 72 * v4 + 96);
        if (v4)
          swift_bridgeObjectRetain();
        else
          v4 = 0xE300000000000000;
      }
      v50 = sub_2448EAB78();
      v6 = v82;
      if (__OFSUB__(v82, v50))
        goto LABEL_86;
      MEMORY[0x249519458](32, 0xE100000000000000, v82 - v50);
      swift_bridgeObjectRetain();
      if (!(_DWORD)v7)
      {
        sub_2448EBB5C();
        sub_2448EABC0();
        swift_bridgeObjectRelease();
        v1 = 0xE300000000000000;
        sub_2448EABC0();
        swift_bridgeObjectRelease();
      }
      if (v46)
      {
        swift_bridgeObjectRetain();
        sub_2448EABC0();
        swift_bridgeObjectRelease();
        v7 = 0xE200000000000000;
        sub_2448EABC0();
        swift_bridgeObjectRelease();
        if ((v86 & 1) == 0)
        {
          sub_2448EBB5C();
          sub_2448EABC0();
          swift_bridgeObjectRelease();
          v7 = 0xE100000000000000;
          sub_2448EABC0();
          swift_bridgeObjectRelease();
        }
        sub_2448EABC0();
      }
      sub_2448EB79C();
      swift_bridgeObjectRelease();
      sub_2448EABC0();
      swift_bridgeObjectRelease();
      sub_2448EABC0();
      swift_bridgeObjectRelease();
      sub_2448EABC0();
      swift_bridgeObjectRelease();
      sub_2448EABC0();
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738C210);
      v51 = swift_allocObject();
      *(_OWORD *)(v51 + 16) = xmmword_2448ECF10;
      *(_QWORD *)(v51 + 56) = MEMORY[0x24BEE1768];
      *(_QWORD *)(v51 + 64) = MEMORY[0x24BEE17F0];
      *(_QWORD *)(v51 + 32) = v92;
      sub_2448EAAB8();
      sub_2448EABC0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_2448EABC0();
      sub_2448EABC0();
      swift_bridgeObjectRelease();
      sub_2448EABC0();
      swift_bridgeObjectRelease();
      v3 = v90;
      v4 = v5[2];
      v52 = v5[3];
      if (v4 >= v52 >> 1)
        v5 = sub_2447C1B70((_QWORD *)(v52 > 1), v4 + 1, 1, v5);
      v44 = v94 + 1;
      v5[2] = v4 + 1;
      v6 = (uint64_t)&v5[2 * v4];
      *(_QWORD *)(v6 + 32) = v90;
      *(_QWORD *)(v6 + 40) = v48;
      v8 = *(_QWORD *)(v81 + 16);
      v45 += 80;
      if (v94 + 1 == v8)
        goto LABEL_67;
    }
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    v5 = sub_2447C1B70((_QWORD *)((unint64_t)v6 > 1), v8, 1, v5);
  }
  v53 = *(_QWORD *)(v85 + v84[10]);
  if (*(_QWORD *)(v53 + 16))
  {
    v55 = v5[2];
    v54 = v5[3];
    v56 = v54 >> 1;
    v57 = v55 + 1;
    if (v54 >> 1 <= v55)
    {
      v5 = sub_2447C1B70((_QWORD *)(v54 > 1), v55 + 1, 1, v5);
      v54 = v5[3];
      v56 = v54 >> 1;
    }
    v5[2] = v57;
    v58 = &v5[2 * v55];
    v58[4] = 0;
    v58[5] = 0xE000000000000000;
    v59 = v55 + 2;
    if (v56 < v59)
      v5 = sub_2447C1B70((_QWORD *)(v54 > 1), v59, 1, v5);
    v5[2] = v59;
    v60 = (char *)&v5[2 * v57];
    strcpy(v60 + 32, "Binary Images:");
    v60[47] = -18;
    v61 = *(_QWORD *)(v53 + 16);
    if (v61)
    {
      swift_bridgeObjectRetain();
      v62 = v53 + 96;
      do
      {
        v63 = *(_QWORD *)(v62 - 32);
        __swift_instantiateConcreteTypeFromMangledName(&qword_25738C210);
        v64 = swift_allocObject();
        *(_OWORD *)(v64 + 16) = xmmword_2448ECF10;
        *(_QWORD *)(v64 + 56) = MEMORY[0x24BEE1768];
        *(_QWORD *)(v64 + 64) = MEMORY[0x24BEE17F0];
        *(_QWORD *)(v64 + 32) = v63;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        sub_2448EAAB8();
        sub_2448EABC0();
        swift_bridgeObjectRelease();
        sub_2448EABC0();
        sub_2448EABC0();
        swift_bridgeObjectRelease();
        sub_2448EABC0();
        swift_bridgeObjectRetain();
        sub_2448EABC0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        sub_2448EABC0();
        sub_2448EABC0();
        swift_bridgeObjectRelease();
        v66 = v5[2];
        v65 = v5[3];
        if (v66 >= v65 >> 1)
          v5 = sub_2447C1B70((_QWORD *)(v65 > 1), v66 + 1, 1, v5);
        v5[2] = v66 + 1;
        v67 = &v5[2 * v66];
        v67[4] = 0x20202020202020;
        v67[5] = 0xE700000000000000;
        v62 += 72;
        --v61;
      }
      while (v61);
      swift_bridgeObjectRelease();
    }
  }
  v69 = v5[2];
  v68 = v5[3];
  v70 = v68 >> 1;
  v71 = v69 + 1;
  if (v68 >> 1 <= v69)
  {
    v5 = sub_2447C1B70((_QWORD *)(v68 > 1), v69 + 1, 1, v5);
    v68 = v5[3];
    v70 = v68 >> 1;
  }
  v5[2] = v71;
  v72 = &v5[2 * v69];
  v72[4] = 0;
  v72[5] = 0xE000000000000000;
  v73 = v69 + 2;
  if (v70 < v73)
    v5 = sub_2447C1B70((_QWORD *)(v68 > 1), v73, 1, v5);
  v5[2] = v73;
  v74 = &v5[2 * v71];
  v74[4] = 4607813;
  v74[5] = 0xE300000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A630);
  sub_2447D48B0();
  v75 = sub_2448EA9A4();
  v77 = v76;
  swift_bridgeObjectRelease();
  v78 = v75;
  v79 = v77;
  result._object = v79;
  result._countAndFlagsBits = v78;
  return result;
}

uint64_t sub_2448C2398()
{
  Swift::String v0;

  v0 = CrashReport.formattedAsLegacyCrashReport()();
  return sub_2447BCD80(v0._countAndFlagsBits, (uint64_t)v0._object, 0);
}

uint64_t sub_2448C23C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CrashReport(0) + 40));
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  swift_bridgeObjectRetain();
  v3 = 0;
  v4 = 0;
  v5 = (uint64_t *)(v1 + 96);
  while (1)
  {
    v6 = *v5;
    v5 += 9;
    if (v6)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v7 = sub_2448EAB78();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v4 <= v7)
        v4 = v7;
    }
    if (v2 - 1 == v3)
      break;
    if ((unint64_t)++v3 >= *(_QWORD *)(v1 + 16))
    {
      __break(1u);
      break;
    }
  }
  swift_bridgeObjectRelease();
  return v4;
}

unint64_t sub_2448C24DC()
{
  unint64_t result;

  result = qword_2573911D8;
  if (!qword_2573911D8)
  {
    result = MEMORY[0x24951AC70](&unk_2448F79A8, &type metadata for CrashReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2573911D8);
  }
  return result;
}

uint64_t sub_2448C2520(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738E8A8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_2448C2560()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;
  _QWORD v3[2];

  result = qword_2573911F0;
  if (!qword_2573911F0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2573911E8);
    v2 = sub_2448C25CC();
    v3[0] = MEMORY[0x24BEE0D38];
    v3[1] = v2;
    result = MEMORY[0x24951AC70](MEMORY[0x24BEE04E0], v1, v3);
    atomic_store(result, (unint64_t *)&qword_2573911F0);
  }
  return result;
}

unint64_t sub_2448C25CC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_2573911F8;
  if (!qword_2573911F8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A630);
    v2 = MEMORY[0x24BEE0D38];
    result = MEMORY[0x24951AC70](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2573911F8);
  }
  return result;
}

unint64_t sub_2448C2628()
{
  unint64_t result;

  result = qword_257391210;
  if (!qword_257391210)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for CrashReport.Image, &type metadata for CrashReport.Image);
    atomic_store(result, (unint64_t *)&qword_257391210);
  }
  return result;
}

uint64_t sub_2448C266C(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7 = a3();
    result = MEMORY[0x24951AC70](MEMORY[0x24BEE12D0], v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_2448C26D0()
{
  unint64_t result;

  result = qword_257391228;
  if (!qword_257391228)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for CrashReport.Frame, &type metadata for CrashReport.Frame);
    atomic_store(result, (unint64_t *)&qword_257391228);
  }
  return result;
}

uint64_t sub_2448C2714()
{
  return sub_2447BD7A0(&qword_257391238, type metadata accessor for CrashReport.ID, (uint64_t)&protocol conformance descriptor for CrashReport.ID);
}

unint64_t sub_2448C2744()
{
  unint64_t result;

  result = qword_257391240;
  if (!qword_257391240)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for CrashReport.Frame.ImageLocation, &type metadata for CrashReport.Frame.ImageLocation);
    atomic_store(result, (unint64_t *)&qword_257391240);
  }
  return result;
}

unint64_t sub_2448C278C()
{
  unint64_t result;

  result = qword_257391248;
  if (!qword_257391248)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for CrashReport.Frame.CodingKeys, &type metadata for CrashReport.Frame.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257391248);
  }
  return result;
}

unint64_t sub_2448C27D4()
{
  unint64_t result;

  result = qword_257391250;
  if (!qword_257391250)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for CrashReport.Frame.CodingKeys, &type metadata for CrashReport.Frame.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257391250);
  }
  return result;
}

unint64_t sub_2448C281C()
{
  unint64_t result;

  result = qword_257391258;
  if (!qword_257391258)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for CrashReport.Frame.CodingKeys, &type metadata for CrashReport.Frame.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257391258);
  }
  return result;
}

unint64_t sub_2448C2864()
{
  unint64_t result;

  result = qword_257391260;
  if (!qword_257391260)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for CrashReport.Image.CodingKeys, &type metadata for CrashReport.Image.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257391260);
  }
  return result;
}

unint64_t sub_2448C28AC()
{
  unint64_t result;

  result = qword_257391268;
  if (!qword_257391268)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for CrashReport.Image.CodingKeys, &type metadata for CrashReport.Image.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257391268);
  }
  return result;
}

unint64_t sub_2448C28F4()
{
  unint64_t result;

  result = qword_257391270;
  if (!qword_257391270)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for CrashReport.Image.CodingKeys, &type metadata for CrashReport.Image.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257391270);
  }
  return result;
}

uint64_t sub_2448C2938()
{
  return sub_2447BD7A0(&qword_257391278, type metadata accessor for CrashReport.ID, (uint64_t)&protocol conformance descriptor for CrashReport.ID);
}

uint64_t sub_2448C2964(uint64_t a1)
{
  uint64_t result;

  result = sub_2447BD7A0(&qword_257391280, type metadata accessor for CrashReport, (uint64_t)&protocol conformance descriptor for CrashReport);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CrashReport(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v26 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_2448EA548();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = a3[8];
    *(_DWORD *)((char *)a1 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_2448EA500();
    v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20(v17, v18, v19);
    v21 = a3[10];
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(uint64_t *)((char *)a1 + v21) = *(uint64_t *)((char *)a2 + v21);
    v22 = a3[12];
    *(uint64_t *)((char *)a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    v23 = (uint64_t *)((char *)a1 + v22);
    v24 = (uint64_t *)((char *)a2 + v22);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for CrashReport(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_2448EA548();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = a1 + *(int *)(a2 + 32);
  v6 = sub_2448EA500();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CrashReport(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v6 = sub_2448EA548();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[8];
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_2448EA500();
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19(v16, v17, v18);
  v20 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v20) = *(_QWORD *)(a2 + v20);
  v21 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  v22 = (_QWORD *)(a1 + v21);
  v23 = (_QWORD *)(a2 + v21);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CrashReport(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;

  v6 = sub_2448EA548();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  v13 = a3[8];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_2448EA500();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = a3[12];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  *v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for CrashReport(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_2448EA548();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_2448EA500();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  v13 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  return a1;
}

uint64_t assignWithTake for CrashReport(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;

  v6 = sub_2448EA548();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  v17 = a3[8];
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = sub_2448EA500();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  swift_bridgeObjectRelease();
  v21 = a3[12];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (uint64_t *)(a2 + v21);
  v25 = *v23;
  v24 = v23[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CrashReport()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2448C301C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for CrashReport.ID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_2448EA500();
    v10 = a1 + *(int *)(a3 + 32);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for CrashReport()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2448C30D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for CrashReport.ID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
      return result;
    }
    v10 = sub_2448EA500();
    v12 = a1 + *(int *)(a4 + 32);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_2448C317C()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_2448EA548();
  if (v1 <= 0x3F)
  {
    result = sub_2448EA500();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CrashReport.ID(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2448EA548();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for CrashReport.ID(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2448EA548();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for CrashReport.ID(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2448EA548();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for CrashReport.ID(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2448EA548();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for CrashReport.ID(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2448EA548();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for CrashReport.ID(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2448EA548();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CrashReport.ID()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2448C33C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2448EA548();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for CrashReport.ID()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2448C3410(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2448EA548();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_2448C3450()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2448EA548();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for CrashReport.Frame()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CrashReport.Frame(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CrashReport.Frame(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v5;
  return a1;
}

__n128 __swift_memcpy73_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for CrashReport.Frame(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for CrashReport.Frame(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 73))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CrashReport.Frame(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 73) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CrashReport.Frame()
{
  return &type metadata for CrashReport.Frame;
}

ValueMetadata *type metadata accessor for CrashReport.Frame.ImageLocation()
{
  return &type metadata for CrashReport.Frame.ImageLocation;
}

uint64_t getEnumTagSinglePayload for CrashReport.Frame.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CrashReport.Frame.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_2448C3830 + 4 * byte_2448F7349[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_2448C3864 + 4 * byte_2448F7344[v4]))();
}

uint64_t sub_2448C3864(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2448C386C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2448C3874);
  return result;
}

uint64_t sub_2448C3880(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2448C3888);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_2448C388C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2448C3894(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CrashReport.Frame.CodingKeys()
{
  return &type metadata for CrashReport.Frame.CodingKeys;
}

uint64_t destroy for CrashReport.Image()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CrashReport.Image(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CrashReport.Image(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CrashReport.Image(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CrashReport.Image()
{
  return &type metadata for CrashReport.Image;
}

uint64_t storeEnumTagSinglePayload for CrashReport.Image.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_2448C3AD0 + 4 * byte_2448F7353[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_2448C3B04 + 4 * byte_2448F734E[v4]))();
}

uint64_t sub_2448C3B04(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2448C3B0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2448C3B14);
  return result;
}

uint64_t sub_2448C3B20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2448C3B28);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_2448C3B2C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2448C3B34(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CrashReport.Image.CodingKeys()
{
  return &type metadata for CrashReport.Image.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for CrashReport.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_2448C3B9C + 4 * byte_2448F735D[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_2448C3BD0 + 4 * byte_2448F7358[v4]))();
}

uint64_t sub_2448C3BD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2448C3BD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2448C3BE0);
  return result;
}

uint64_t sub_2448C3BEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2448C3BF4);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_2448C3BF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2448C3C00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CrashReport.CodingKeys()
{
  return &type metadata for CrashReport.CodingKeys;
}

unint64_t sub_2448C3C20()
{
  unint64_t result;

  result = qword_2573913C8;
  if (!qword_2573913C8)
  {
    result = MEMORY[0x24951AC70](&unk_2448F7980, &type metadata for CrashReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2573913C8);
  }
  return result;
}

unint64_t sub_2448C3C68()
{
  unint64_t result;

  result = qword_2573913D0;
  if (!qword_2573913D0)
  {
    result = MEMORY[0x24951AC70](&unk_2448F78B8, &type metadata for CrashReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2573913D0);
  }
  return result;
}

unint64_t sub_2448C3CB0()
{
  unint64_t result;

  result = qword_2573913D8;
  if (!qword_2573913D8)
  {
    result = MEMORY[0x24951AC70](&unk_2448F78E0, &type metadata for CrashReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2573913D8);
  }
  return result;
}

uint64_t sub_2448C3CF4()
{
  unint64_t v0;

  v0 = sub_2448EBA84();
  swift_bridgeObjectRelease();
  if (v0 >= 9)
    return 9;
  else
    return v0;
}

uint64_t sub_2448C3D4C(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (_QWORD *)sub_2448C5988(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = sub_2448C4E50(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_2448C3DB4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t result;

  type metadata accessor for AgentSymbolTableManager();
  v0 = swift_allocObject();
  v1 = sub_2447C90FC(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573913E8);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = v1;
  *(_QWORD *)(v0 + 16) = result;
  *(_QWORD *)(v0 + 24) = 0x403E000000000000;
  off_2573913E0 = (_UNKNOWN *)v0;
  return result;
}

uint64_t AgentSymbolTableManager.__allocating_init(invalidatedLinkerTimeout:)(double a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = swift_allocObject();
  v3 = sub_2447C90FC(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573913E8);
  v4 = swift_allocObject();
  *(_DWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v2 + 16) = v4;
  *(double *)(v2 + 24) = a1;
  return v2;
}

uint64_t static AgentSymbolTableManager.shared.getter()
{
  if (qword_257389DE0 != -1)
    swift_once();
  return swift_retain();
}

uint64_t AgentSymbolTableManager.init(invalidatedLinkerTimeout:)(double a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v3 = sub_2447C90FC(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573913E8);
  v4 = swift_allocObject();
  *(_DWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v1 + 16) = v4;
  *(double *)(v1 + 24) = a1;
  return v1;
}

uint64_t AgentSymbolTableManager.createSymbolTable(forPid:with:)(unsigned int a1, uint64_t a2)
{
  uint64_t v2;
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  uint64_t v9;

  v5 = *(os_unfair_lock_s **)(v2 + 16);
  v6 = v5 + 4;
  v7 = v5 + 6;
  os_unfair_lock_lock(v5 + 6);
  sub_2448C3F9C(v6, a2, a1, &v9);
  os_unfair_lock_unlock(v7);
  return v9;
}

uint64_t sub_2448C3F9C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  __int128 v10[2];

  sub_2447CE01C(a2, (uint64_t)v10);
  type metadata accessor for AgentSymbolTable();
  v7 = swift_allocObject();
  sub_2447F3530(v10, v7 + 16);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v10[0] = *a1;
  *a1 = 0x8000000000000000;
  sub_244820370(v7, a3, isUniquelyReferenced_nonNull_native);
  *a1 = *(_QWORD *)&v10[0];
  result = swift_bridgeObjectRelease();
  *a4 = v7;
  return result;
}

Swift::Void __swiftcall AgentSymbolTableManager.linkerInvalidated(forPid:)(Swift::Int32 forPid)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int32 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[6];

  v26 = forPid;
  v27 = sub_2448EA704();
  v30 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v2 = (char *)&v24 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_2448EA734();
  v28 = *(_QWORD *)(v3 - 8);
  v29 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_2448EA764();
  v6 = *(_QWORD *)(v24 - 8);
  v7 = MEMORY[0x24BDAC7A8](v24);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v24 - v10;
  v12 = sub_2448EA710();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_244803860();
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x24BEE5490], v12);
  v16 = (void *)sub_2448EB43C();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  _s20PreviewsFoundationOS17DispatchSchedulerV8DeadlineV3nowAEyFZ_0();
  v17 = v25;
  MEMORY[0x249518F54](v9, *(double *)(v25 + 24));
  v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v19 = v9;
  v20 = v24;
  v18(v19, v24);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v17;
  *(_DWORD *)(v21 + 24) = v26;
  aBlock[4] = sub_2448C59C0;
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2447EB164;
  aBlock[3] = &block_descriptor_12;
  v22 = _Block_copy(aBlock);
  swift_retain();
  sub_2448EA71C();
  v31 = MEMORY[0x24BEE4AF8];
  sub_2447EB5DC();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
  sub_2448039A4();
  v23 = v27;
  sub_2448EB6C4();
  MEMORY[0x249519BC0](v11, v5, v2, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v2, v23);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v5, v29);
  v18(v11, v20);
  swift_release();
}

void sub_2448C4334(int a1, Swift::Int32 pid)
{
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  NSObject *oslog;

  if (AgentSymbolTableManager.removeSymbolTable(pid:)(pid))
  {
    if (qword_257389D68 != -1)
      swift_once();
    v2 = sub_2448EA5FC();
    __swift_project_value_buffer(v2, (uint64_t)qword_25738F930);
    oslog = sub_2448EA5E4();
    v3 = sub_2448EB3A0();
    if (os_log_type_enabled(oslog, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v4 = 67240192;
      sub_2448EB598();
      _os_log_impl(&dword_2447B9000, oslog, v3, "Agent symbol table for pid %{public}d was orphaned.", v4, 8u);
      MEMORY[0x24951AD84](v4, -1, -1);

    }
    else
    {

    }
  }
}

Swift::Bool __swiftcall AgentSymbolTableManager.removeSymbolTable(pid:)(Swift::Int32 pid)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t *v4;
  os_unfair_lock_s *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = *(os_unfair_lock_s **)(v1 + 16);
  v4 = (uint64_t *)&v3[4];
  v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_2448C46F0(v4, pid, &v15);
  os_unfair_lock_unlock(v5);
  v6 = (_QWORD *)v15;
  if (v15)
  {
    v7 = qword_257389D68;
    swift_retain();
    if (v7 != -1)
      swift_once();
    v8 = sub_2448EA5FC();
    __swift_project_value_buffer(v8, (uint64_t)qword_25738F930);
    swift_retain();
    v9 = sub_2448EA5E4();
    v10 = sub_2448EB394();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = swift_slowAlloc();
      *(_DWORD *)v11 = 67240448;
      LODWORD(v15) = pid;
      sub_2448EB598();
      *(_WORD *)(v11 + 8) = 2050;
      v12 = v6[5];
      v13 = v6[6];
      __swift_project_boxed_opaque_existential_1(v6 + 2, v12);
      v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 32))(v12, v13);
      sub_2448EB598();
      swift_release();
      _os_log_impl(&dword_2447B9000, v9, v10, "Cleaned up agent symbol table for pid %{public}d, mapping size: %{public}ld", (uint8_t *)v11, 0x12u);
      MEMORY[0x24951AD84](v11, -1, -1);
      swift_release_n();

    }
    else
    {

      swift_release_n();
    }
  }
  return v6 != 0;
}

uint64_t AgentSymbolTableManager.symbolTable(forPid:)(unsigned int a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v7;

  v3 = *(os_unfair_lock_s **)(v1 + 16);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_2448C4694(v4, a1, &v7);
  os_unfair_lock_unlock(v5);
  return v7;
}

uint64_t sub_2448C4694@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  char v4;
  uint64_t result;

  if (*(_QWORD *)(*(_QWORD *)a1 + 16) && (sub_244829040(a2), (v4 & 1) != 0))
    result = swift_retain();
  else
    result = 0;
  *a3 = result;
  return result;
}

unint64_t sub_2448C46F0@<X0>(uint64_t *a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  unint64_t result;
  char v6;
  unint64_t v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_244829040(a2);
  if ((v6 & 1) != 0)
  {
    v7 = result;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *a1;
    v11 = *a1;
    *a1 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_24482F194();
      v9 = v11;
    }
    v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v7);
    sub_2447CDDB8(v7, v9);
    *a1 = v9;
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
  }
  *a3 = v10;
  return result;
}

void sub_2448C479C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  _QWORD *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  os_log_t osloga;
  NSObject *oslog;
  uint64_t v25;
  unint64_t v26;
  os_log_t v27[2];

  v1 = *(_QWORD *)(v0 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  v2 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  if (*(_QWORD *)(v2 + 16))
  {
    if (qword_257389D68 != -1)
      swift_once();
    v3 = sub_2448EA5FC();
    __swift_project_value_buffer(v3, (uint64_t)qword_25738F930);
    v4 = sub_2448EA5E4();
    v5 = sub_2448EB3AC();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_2447B9000, v4, v5, "Symbol Table Mapping Sizes:", v6, 2u);
      MEMORY[0x24951AD84](v6, -1, -1);
    }

    v7 = swift_bridgeObjectRetain();
    v8 = sub_2447CE2C8(v7);
    swift_bridgeObjectRelease();
    v25 = (uint64_t)v8;
    sub_2448C3D4C((_QWORD **)&v25);
    swift_bridgeObjectRelease();
    v9 = *(_QWORD *)(v25 + 16);
    if (v9)
    {
      v10 = (_QWORD *)(v25 + 40);
      do
      {
        v11 = *((_DWORD *)v10 - 2);
        v12 = (_QWORD *)*v10;
        swift_retain_n();
        v13 = sub_2448EA5E4();
        v14 = sub_2448EB3AC();
        if (os_log_type_enabled(v13, v14))
        {
          v15 = swift_slowAlloc();
          osloga = (os_log_t)swift_slowAlloc();
          *(_DWORD *)v15 = 67240450;
          *(_DWORD *)(v15 + 4) = v11;
          *(_WORD *)(v15 + 8) = 2082;
          v25 = 0;
          v26 = 0xE000000000000000;
          v27[0] = osloga;
          sub_2448EB79C();
          swift_bridgeObjectRelease();
          v25 = 0x3A736C6F626D7973;
          v26 = 0xE900000000000020;
          v16 = v12[5];
          v17 = v12[6];
          __swift_project_boxed_opaque_existential_1(v12 + 2, v16);
          (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17);
          sub_2448EBB5C();
          sub_2448EABC0();
          swift_bridgeObjectRelease();
          sub_2448EABC0();
          v18 = v12[5];
          v19 = v12[6];
          __swift_project_boxed_opaque_existential_1(v12 + 2, v18);
          (*(void (**)(uint64_t, uint64_t))(v19 + 32))(v18, v19);
          sub_2448EBB5C();
          sub_2448EABC0();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v15 + 10) = sub_2447D6798(v25, v26, (uint64_t *)v27);
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_2447B9000, v13, v14, "    Table: pid: %{public}d, %{public}s", (uint8_t *)v15, 0x12u);
          swift_arrayDestroy();
          MEMORY[0x24951AD84](osloga, -1, -1);
          MEMORY[0x24951AD84](v15, -1, -1);
          swift_release();

        }
        else
        {

          swift_release_n();
        }
        v10 += 2;
        --v9;
      }
      while (v9);
    }
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_257389D68 != -1)
      swift_once();
    v20 = sub_2448EA5FC();
    __swift_project_value_buffer(v20, (uint64_t)qword_25738F930);
    oslog = sub_2448EA5E4();
    v21 = sub_2448EB3AC();
    if (os_log_type_enabled(oslog, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_2447B9000, oslog, v21, "No symbol tables tracked", v22, 2u);
      MEMORY[0x24951AD84](v22, -1, -1);
    }

  }
}

uint64_t AgentSymbolTableManager.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t AgentSymbolTableManager.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

void __PrintAgentSymbolTableMappingSizes()
{
  if (qword_257389DE0 != -1)
    swift_once();
  sub_2448C479C();
}

Swift::Void __swiftcall _printAgentSymbolTableMappingSizes()()
{
  if (qword_257389DE0 != -1)
    swift_once();
  sub_2448C479C();
}

void *_symbolicateAgentAddress(_:_:)(unsigned int a1, Swift::UInt64 a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  void *object;
  uint64_t v8;
  uint64_t v10;

  if (qword_257389DE0 != -1)
    swift_once();
  v4 = (os_unfair_lock_s *)*((_QWORD *)off_2573913E0 + 2);
  v5 = (uint64_t)&v4[4];
  v6 = v4 + 6;
  os_unfair_lock_lock(v4 + 6);
  sub_2448C4694(v5, a1, &v10);
  os_unfair_lock_unlock(v6);
  if (!v10)
    return 0;
  object = AgentSymbolTable.symbolName(covering:)(a2).value._object;
  swift_release();
  if (object)
  {
    v8 = sub_2448EAB0C();
    swift_bridgeObjectRelease();
    object = strdup((const char *)(v8 + 32));
    swift_release();
  }
  return object;
}

uint64_t sub_2448C4E28@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_2448C4E50(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  char v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t i;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *__dst;

  v3 = a1[1];
  result = sub_2448EBB14();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_136;
    if ((unint64_t)v3 >= 2)
    {
      v85 = 0;
      v86 = *a1;
      for (i = 1; i != v3; ++i)
      {
        v88 = *(_DWORD *)(v86 + 16 * i);
        v89 = v85;
        do
        {
          if (v88 >= *(_DWORD *)(v86 + v89))
            break;
          if (!v86)
            goto LABEL_140;
          v90 = v86 + v89;
          v91 = *(_QWORD *)(v86 + v89 + 24);
          *(_OWORD *)(v86 + v89 + 16) = *(_OWORD *)(v86 + v89);
          *(_DWORD *)v90 = v88;
          *(_QWORD *)(v90 + 8) = v91;
          v89 -= 16;
        }
        while (v89 != -16);
        v85 += 16;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_145;
  v6 = result;
  v101 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v12 = (char *)MEMORY[0x24BEE4AF8];
LABEL_102:
      v92 = v12;
      v103 = v9;
      if (v13 >= 2)
      {
        v93 = *v101;
        do
        {
          v94 = v13 - 2;
          if (v13 < 2)
            goto LABEL_131;
          if (!v93)
            goto LABEL_144;
          v95 = v92;
          v96 = *(_QWORD *)&v92[16 * v94 + 32];
          v97 = *(_QWORD *)&v92[16 * v13 + 24];
          sub_2448C5534((char *)(v93 + 16 * v96), (char *)(v93 + 16 * *(_QWORD *)&v92[16 * v13 + 16]), v93 + 16 * v97, __dst);
          if (v1)
            break;
          if (v97 < v96)
            goto LABEL_132;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v95 = sub_2448C594C((uint64_t)v95);
          if (v94 >= *((_QWORD *)v95 + 2))
            goto LABEL_133;
          v98 = &v95[16 * v94 + 32];
          *(_QWORD *)v98 = v96;
          *((_QWORD *)v98 + 1) = v97;
          v99 = *((_QWORD *)v95 + 2);
          if (v13 > v99)
            goto LABEL_134;
          memmove(&v95[16 * v13 + 16], &v95[16 * v13 + 32], 16 * (v99 - v13));
          v92 = v95;
          *((_QWORD *)v95 + 2) = v99 - 1;
          v13 = v99 - 1;
        }
        while (v99 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v103 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v103 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A470);
    v8 = sub_2448EAE60();
    *(_QWORD *)(v8 + 16) = v7;
    v103 = v8;
    __dst = (char *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v102 = *a1 + 32;
  v100 = *a1 - 16;
  v12 = (char *)MEMORY[0x24BEE4AF8];
  v104 = v6;
  v105 = v3;
  v106 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(_DWORD *)(v11 + 16 * v10);
      v16 = 16 * v14;
      v17 = *(_DWORD *)(v11 + 16 * v14);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v18 = (int *)(v102 + 16 * v14);
        v19 = v15;
        while (1)
        {
          v21 = *v18;
          v18 += 4;
          v20 = v21;
          if (v15 < v17 == v21 >= v19)
            break;
          ++v10;
          v19 = v20;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v15 < v17)
      {
        if (v10 < v14)
          goto LABEL_137;
        if (v14 < v10)
        {
          v22 = 16 * v10;
          v23 = v10;
          v24 = v14;
          do
          {
            if (v24 != --v23)
            {
              if (!v11)
                goto LABEL_143;
              v25 = v11 + v22;
              v26 = *(_DWORD *)(v11 + v16);
              v27 = *(_QWORD *)(v11 + v16 + 8);
              *(_OWORD *)(v11 + v16) = *(_OWORD *)(v11 + v22 - 16);
              *(_DWORD *)(v25 - 16) = v26;
              *(_QWORD *)(v25 - 8) = v27;
            }
            ++v24;
            v22 -= 16;
            v16 += 16;
          }
          while (v24 < v23);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v10, v14))
      goto LABEL_135;
    if (v10 - v14 >= v6)
      goto LABEL_46;
    v28 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_138;
    if (v28 >= v3)
      v28 = v3;
    if (v28 < v14)
      break;
    if (v10 != v28)
    {
      v29 = v100 + 16 * v10;
      do
      {
        v30 = *(_DWORD *)(v11 + 16 * v10);
        v31 = v14;
        v32 = v29;
        do
        {
          if (v30 >= *(_DWORD *)v32)
            break;
          if (!v11)
            goto LABEL_141;
          v33 = *(_QWORD *)(v32 + 24);
          *(_OWORD *)(v32 + 16) = *(_OWORD *)v32;
          *(_DWORD *)v32 = v30;
          *(_QWORD *)(v32 + 8) = v33;
          v32 -= 16;
          ++v31;
        }
        while (v10 != v31);
        ++v10;
        v29 += 16;
      }
      while (v10 != v28);
      v10 = v28;
    }
LABEL_46:
    if (v10 < v14)
      goto LABEL_130;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = sub_2448C57AC(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v35 = *((_QWORD *)v12 + 2);
    v34 = *((_QWORD *)v12 + 3);
    v13 = v35 + 1;
    v11 = v106;
    if (v35 >= v34 >> 1)
    {
      v84 = sub_2448C57AC((char *)(v34 > 1), v35 + 1, 1, v12);
      v11 = v106;
      v12 = v84;
    }
    *((_QWORD *)v12 + 2) = v13;
    v36 = v12 + 32;
    v37 = &v12[16 * v35 + 32];
    *(_QWORD *)v37 = v14;
    *((_QWORD *)v37 + 1) = v10;
    if (v35)
    {
      while (1)
      {
        v38 = v13 - 1;
        if (v13 >= 4)
        {
          v43 = &v36[16 * v13];
          v44 = *((_QWORD *)v43 - 8);
          v45 = *((_QWORD *)v43 - 7);
          v49 = __OFSUB__(v45, v44);
          v46 = v45 - v44;
          if (v49)
            goto LABEL_119;
          v48 = *((_QWORD *)v43 - 6);
          v47 = *((_QWORD *)v43 - 5);
          v49 = __OFSUB__(v47, v48);
          v41 = v47 - v48;
          v42 = v49;
          if (v49)
            goto LABEL_120;
          v50 = v13 - 2;
          v51 = &v36[16 * v13 - 32];
          v53 = *(_QWORD *)v51;
          v52 = *((_QWORD *)v51 + 1);
          v49 = __OFSUB__(v52, v53);
          v54 = v52 - v53;
          if (v49)
            goto LABEL_122;
          v49 = __OFADD__(v41, v54);
          v55 = v41 + v54;
          if (v49)
            goto LABEL_125;
          if (v55 >= v46)
          {
            v73 = &v36[16 * v38];
            v75 = *(_QWORD *)v73;
            v74 = *((_QWORD *)v73 + 1);
            v49 = __OFSUB__(v74, v75);
            v76 = v74 - v75;
            if (v49)
              goto LABEL_129;
            v66 = v41 < v76;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v67 = *((_QWORD *)v12 + 4);
            v68 = *((_QWORD *)v12 + 5);
            v49 = __OFSUB__(v68, v67);
            v60 = v68 - v67;
            v61 = v49;
            goto LABEL_77;
          }
          v40 = *((_QWORD *)v12 + 4);
          v39 = *((_QWORD *)v12 + 5);
          v49 = __OFSUB__(v39, v40);
          v41 = v39 - v40;
          v42 = v49;
        }
        if ((v42 & 1) != 0)
          goto LABEL_121;
        v50 = v13 - 2;
        v56 = &v36[16 * v13 - 32];
        v58 = *(_QWORD *)v56;
        v57 = *((_QWORD *)v56 + 1);
        v59 = __OFSUB__(v57, v58);
        v60 = v57 - v58;
        v61 = v59;
        if (v59)
          goto LABEL_124;
        v62 = &v36[16 * v38];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v49 = __OFSUB__(v63, v64);
        v65 = v63 - v64;
        if (v49)
          goto LABEL_127;
        if (__OFADD__(v60, v65))
          goto LABEL_128;
        if (v60 + v65 >= v41)
        {
          v66 = v41 < v65;
LABEL_83:
          if (v66)
            v38 = v50;
          goto LABEL_85;
        }
LABEL_77:
        if ((v61 & 1) != 0)
          goto LABEL_123;
        v69 = &v36[16 * v38];
        v71 = *(_QWORD *)v69;
        v70 = *((_QWORD *)v69 + 1);
        v49 = __OFSUB__(v70, v71);
        v72 = v70 - v71;
        if (v49)
          goto LABEL_126;
        if (v72 < v60)
          goto LABEL_15;
LABEL_85:
        v77 = v38 - 1;
        if (v38 - 1 >= v13)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v11)
          goto LABEL_142;
        v78 = v12;
        v79 = &v36[16 * v77];
        v80 = *(_QWORD *)v79;
        v81 = &v36[16 * v38];
        v82 = *((_QWORD *)v81 + 1);
        sub_2448C5534((char *)(v11 + 16 * *(_QWORD *)v79), (char *)(v11 + 16 * *(_QWORD *)v81), v11 + 16 * v82, __dst);
        if (v1)
          goto LABEL_93;
        if (v82 < v80)
          goto LABEL_116;
        if (v38 > *((_QWORD *)v78 + 2))
          goto LABEL_117;
        *(_QWORD *)v79 = v80;
        *(_QWORD *)&v36[16 * v77 + 8] = v82;
        v83 = *((_QWORD *)v78 + 2);
        if (v38 >= v83)
          goto LABEL_118;
        v12 = v78;
        v13 = v83 - 1;
        memmove(&v36[16 * v38], v81 + 16, 16 * (v83 - 1 - v38));
        *((_QWORD *)v78 + 2) = v83 - 1;
        v11 = v106;
        if (v83 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v104;
    v3 = v105;
    if (v10 >= v105)
    {
      v9 = v103;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  result = sub_2448EB994();
  __break(1u);
  return result;
}

uint64_t sub_2448C5534(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t result;
  char *v22;
  char *v23;
  char *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v16 = &v4[16 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v17 = (char *)(a3 - 16);
        v18 = v6;
        while (1)
        {
          v19 = v17 + 16;
          v20 = *((_DWORD *)v18 - 4);
          v18 -= 16;
          if (*((_DWORD *)v16 - 4) >= v20)
          {
            v22 = v16 - 16;
            if (v19 < v16 || v17 >= v16 || v19 != v16)
              *(_OWORD *)v17 = *((_OWORD *)v16 - 1);
            v18 = v6;
            v16 -= 16;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v19 != v6 || v17 >= v6)
              *(_OWORD *)v17 = *(_OWORD *)v18;
            v24 = v18;
            if (v18 <= v7)
              goto LABEL_42;
          }
          v17 -= 16;
          v6 = v18;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        if (*(_DWORD *)v6 >= *(_DWORD *)v4)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v23 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 16;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    sub_2448C58A4((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

char *sub_2448C57AC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257391498);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_2448C58A4(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)sub_2448EBA48();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

char *sub_2448C594C(uint64_t a1)
{
  return sub_2448C57AC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_2448C5960(uint64_t a1)
{
  return sub_2447CEFF8(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_2448C5974(_QWORD *a1)
{
  return sub_2447CF5E4(0, a1[2], 0, a1);
}

uint64_t sub_2448C5988(_QWORD *a1)
{
  return sub_2447D03E4(0, a1[2], 0, a1);
}

uint64_t sub_2448C599C()
{
  swift_release();
  return swift_deallocObject();
}

void sub_2448C59C0()
{
  uint64_t v0;

  sub_2448C4334(*(_QWORD *)(v0 + 16), *(_DWORD *)(v0 + 24));
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t type metadata accessor for AgentSymbolTableManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for AgentSymbolTableManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AgentSymbolTableManager.__allocating_init(invalidatedLinkerTimeout:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

ValueMetadata *type metadata accessor for AgentSymbolTableManager.State()
{
  return &type metadata for AgentSymbolTableManager.State;
}

uint64_t ThreadGuard.__allocating_init(value:tracker:)(uint64_t a1, __int128 *a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  ThreadGuard.init(value:tracker:)(a1, a2);
  return v4;
}

uint64_t ThreadGuard.init(value:tracker:)(uint64_t a1, __int128 *a2)
{
  uint64_t v2;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 80) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 88), a1);
  *(_QWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 96)) = 0;
  *(_QWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 104)) = 0;
  sub_2447F3530(a2, v2 + *(_QWORD *)(*(_QWORD *)v2 + 112));
  return v2;
}

uint64_t ThreadGuard.__allocating_init(value:requiringAccessOnThread:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  _UNKNOWN **v14;

  v5 = *(_QWORD *)(v2 + 80);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  v13 = sub_2448C5BA4();
  v14 = &protocol witness table for NSThread;
  *(_QWORD *)&v12 = a2;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  v9 = swift_allocObject();
  ThreadGuard.init(value:tracker:)((uint64_t)v8, &v12);
  return v9;
}

unint64_t sub_2448C5BA4()
{
  unint64_t result;

  result = qword_2573914A0;
  if (!qword_2573914A0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2573914A0);
  }
  return result;
}

uint64_t ThreadGuard.deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88));
  __swift_destroy_boxed_opaque_existential_1(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112));
  return v0;
}

uint64_t ThreadGuard.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88));
  __swift_destroy_boxed_opaque_existential_1(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112));
  return swift_deallocClassInstance();
}

uint64_t ThreadGuard.syncRead<A>(callsite:_:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD v31[3];
  void (*v32)(char *);
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;

  v32 = a2;
  v5 = v4;
  v31[1] = a4;
  v31[2] = a3;
  v34 = *(_QWORD *)(*v4 + 80);
  v6 = *(_QWORD *)(v34 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)v7;
  v11 = *(_QWORD *)(v7 + 8);
  v12 = *(_BYTE *)(v7 + 16);
  v47 = *(_QWORD *)(v7 + 24);
  v13 = *(_QWORD *)(v7 + 32);
  v37 = *(_QWORD *)(v7 + 40);
  v38 = v13;
  v36 = *(_QWORD *)(v7 + 48);
  v35 = *(unsigned __int8 *)(v7 + 56);
  v15 = (uint64_t *)((char *)v4 + *(_QWORD *)(v14 + 112));
  v17 = v15[3];
  v16 = v15[4];
  __swift_project_boxed_opaque_existential_1(v15, v17);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v17, v16);
  if (!(_BYTE)result)
  {
    v39 = v10;
    v40 = v11;
    v41 = v12;
    v42 = v47;
    v43 = v38;
    v44 = v37;
    v45 = v36;
    v46 = v35;
    result = sub_244823F6C();
  }
  v19 = *v4;
  if (*(uint64_t *)((char *)v4 + *(_QWORD *)(*v4 + 104)))
  {
    v39 = v10;
    v40 = v11;
    v41 = v12;
    v42 = v47;
    v43 = v38;
    v44 = v37;
    v45 = v36;
    v46 = v35;
    result = sub_244823F6C();
    v19 = *v4;
  }
  v20 = *(_QWORD *)(v19 + 96);
  v21 = *(uint64_t *)((char *)v4 + v20);
  v22 = __OFADD__(v21, 1);
  v23 = v21 + 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(uint64_t *)((char *)v4 + v20) = v23;
    v24 = (uint64_t)v4 + *(_QWORD *)(*v4 + 88);
    swift_beginAccess();
    v25 = v34;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v24, v34);
    v26 = v33;
    v32(v9);
    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v25);
    v27 = *(_QWORD *)(*v5 + 96);
    v28 = *(uint64_t *)((char *)v5 + v27);
    v22 = __OFSUB__(v28, 1);
    v29 = v28 - 1;
    v30 = v22;
    if (v26)
    {
      if (!v30)
      {
LABEL_13:
        *(uint64_t *)((char *)v5 + v27) = v29;
        return result;
      }
      __break(1u);
    }
    if (!v30)
      goto LABEL_13;
  }
  __break(1u);
  return result;
}

