id UVDebug_NameOfCurrentQueue()
{
  NSObject *v0;
  void *v1;

  dispatch_get_current_queue();
  v0 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", dispatch_queue_get_label(v0));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id UVPreviewAgentLog()
{
  if (UVPreviewAgentLog_onceToken != -1)
    dispatch_once(&UVPreviewAgentLog_onceToken, &__block_literal_global);
  return (id)UVPreviewAgentLog___log;
}

id UVCurrentSystemBuildNumberString()
{
  if (UVCurrentSystemBuildNumberString_predicate != -1)
    dispatch_once(&UVCurrentSystemBuildNumberString_predicate, &__block_literal_global_0);
  return (id)UVCurrentSystemBuildNumberString_cachedValue;
}

uint64_t CrashReportError.kind.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2447BD13C(v1, a1, type metadata accessor for CrashReportError.Kind);
}

uint64_t CrashReportError.kind.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_2447BD070(a1, v1);
}

uint64_t (*CrashReportError.kind.modify())()
{
  return nullsub_1;
}

uint64_t CrashReportError.symbolicationParameters.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CrashReportError(0) + 20));
  return swift_bridgeObjectRetain();
}

uint64_t CrashReportError.symbolicationParameters.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *(int *)(type metadata accessor for CrashReportError(0) + 20);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = v2;
  return result;
}

uint64_t (*CrashReportError.symbolicationParameters.modify())()
{
  type metadata accessor for CrashReportError(0);
  return nullsub_1;
}

uint64_t CrashReportError.init(report:symbolicationParameters:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t CrashError;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;

  v67 = a2;
  v68 = a1;
  v69 = a3;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_257389E08);
  MEMORY[0x24BDAC7A8](v3);
  v54 = (uint64_t)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CrashReportError.UncaughtExceptionError();
  v55 = *(_QWORD *)(v5 - 8);
  v56 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v52 = (uint64_t)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_257389E10);
  MEMORY[0x24BDAC7A8](v7);
  v58 = (uint64_t)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  CrashError = type metadata accessor for CrashReportError.DyldLibraryLoadCrashError();
  v59 = *(_QWORD *)(CrashError - 8);
  v60 = CrashError;
  MEMORY[0x24BDAC7A8](CrashError);
  v53 = (uint64_t)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_257389E18);
  MEMORY[0x24BDAC7A8](v11);
  v64 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CrashReportError.ConditionInFileError();
  v62 = *(_QWORD *)(v13 - 8);
  v63 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v57 = (uint64_t)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CrashReportError(0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_257389E20);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for CrashReportError.IndexOutOfRangeError();
  v21 = *(_QWORD *)(v61 - 8);
  MEMORY[0x24BDAC7A8](v61);
  v23 = (char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for CrashReport(0);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v52 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_257389E28);
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v52 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for CrashReportError.MissingEnvironmentObjectError();
  v31 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v33 = (char *)&v52 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = *v67;
  v67 = (_QWORD *)v15;
  v35 = *(int *)(v15 + 20);
  v65 = v34;
  v66 = v35;
  v36 = v68;
  *(_QWORD *)(v69 + v35) = 0;
  sub_2447BD13C(v36, (uint64_t)v26, type metadata accessor for CrashReport);
  sub_2447BBB54((uint64_t)v26, (uint64_t)v29);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) != 1)
  {
    sub_2447BF330(v36, type metadata accessor for CrashReport);
    sub_2447BD1BC((uint64_t)v29, (uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for CrashReportError.MissingEnvironmentObjectError);
    sub_2447BD1BC((uint64_t)v33, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for CrashReportError.MissingEnvironmentObjectError);
LABEL_11:
    v44 = v69;
    v45 = v67;
    v46 = v65;
    goto LABEL_12;
  }
  v38 = v62;
  v37 = v63;
  v39 = (uint64_t)v64;
  sub_2447BD180((uint64_t)v29, &qword_257389E28);
  sub_2447BD13C(v36, (uint64_t)v26, type metadata accessor for CrashReport);
  sub_2447BBE90((uint64_t)v26, (uint64_t)v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1, v61) != 1)
  {
    sub_2447BF330(v36, type metadata accessor for CrashReport);
    sub_2447BD1BC((uint64_t)v20, (uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for CrashReportError.IndexOutOfRangeError);
    sub_2447BD1BC((uint64_t)v23, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for CrashReportError.IndexOutOfRangeError);
    goto LABEL_11;
  }
  sub_2447BD180((uint64_t)v20, &qword_257389E20);
  sub_2447BD13C(v36, (uint64_t)v26, type metadata accessor for CrashReport);
  CrashReportError.ConditionInFileError.init(report:)((uint64_t)v26, v39);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v39, 1, v37) != 1)
  {
    sub_2447BF330(v36, type metadata accessor for CrashReport);
    v47 = v57;
    sub_2447BD1BC(v39, v57, (uint64_t (*)(_QWORD))type metadata accessor for CrashReportError.ConditionInFileError);
    sub_2447BD1BC(v47, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for CrashReportError.ConditionInFileError);
    goto LABEL_11;
  }
  sub_2447BD180(v39, &qword_257389E18);
  sub_2447BD13C(v36, (uint64_t)v26, type metadata accessor for CrashReport);
  v40 = v58;
  sub_2447BC0F8((uint64_t)v26, v58);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v40, 1, v60) != 1)
  {
    sub_2447BF330(v36, type metadata accessor for CrashReport);
    v48 = v40;
    v49 = v53;
    sub_2447BD1BC(v48, v53, (uint64_t (*)(_QWORD))type metadata accessor for CrashReportError.DyldLibraryLoadCrashError);
    sub_2447BD1BC(v49, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for CrashReportError.DyldLibraryLoadCrashError);
    goto LABEL_11;
  }
  sub_2447BD180(v40, &qword_257389E10);
  v41 = v36;
  sub_2447BD13C(v36, (uint64_t)v26, type metadata accessor for CrashReport);
  v42 = v54;
  sub_2447BC43C((uint64_t)v26, v54);
  v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v42, 1, v56);
  v44 = v69;
  v45 = v67;
  v46 = v65;
  if (v43 == 1)
  {
    sub_2447BD180(v42, &qword_257389E08);
    sub_2447BD1BC(v41, (uint64_t)v17, type metadata accessor for CrashReport);
  }
  else
  {
    sub_2447BF330(v41, type metadata accessor for CrashReport);
    v51 = v52;
    sub_2447BD1BC(v42, v52, (uint64_t (*)(_QWORD))type metadata accessor for CrashReportError.UncaughtExceptionError);
    sub_2447BD1BC(v51, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for CrashReportError.UncaughtExceptionError);
  }
LABEL_12:
  type metadata accessor for CrashReportError.Kind(0);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)&v17[*((int *)v45 + 5)] = v46;
  swift_bridgeObjectRelease();
  return sub_2447BD1BC((uint64_t)v17, v44, type metadata accessor for CrashReportError);
}

uint64_t sub_2447BBB54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;

  v4 = type metadata accessor for CrashReport(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_257389E28);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)((char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_257389CC8 != -1)
    swift_once();
  swift_beginAccess();
  if (!qword_25738F690 || !*(_QWORD *)(a1 + *(int *)(v4 + 36)))
    goto LABEL_9;
  v10 = (id)qword_25738F690;
  v11 = swift_bridgeObjectRetain();
  v12 = sub_2447C39AC(v11, v10);
  if (!*(_QWORD *)(v12 + 16))
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_9:
    sub_2447BF330(a1, type metadata accessor for CrashReport);
    goto LABEL_10;
  }
  v35 = v10;
  v13 = *(void **)(v12 + 48);
  swift_bridgeObjectRetain();
  v14 = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2447BD13C(a1, (uint64_t)v6, type metadata accessor for CrashReport);
  v15 = &v6[*(int *)(v4 + 20)];
  v16 = *((_QWORD *)v15 + 1);
  *v9 = *(_QWORD *)v15;
  v9[1] = v16;
  swift_bridgeObjectRetain();
  v17 = (void *)sub_2448EAA70();
  swift_bridgeObjectRelease();
  v18 = (void *)sub_2448EAA70();
  v19 = objc_msgSend(v14, sel_rangeWithName_, v18);
  v21 = v20;

  v22 = objc_msgSend(v17, sel_substringWithRange_, v19, v21);
  v23 = sub_2448EAA94();
  v25 = v24;

  v36 = v23;
  v37 = v25;
  v26 = sub_2448EAC98();
  v28 = v27;

  v9[2] = v26;
  v9[3] = v28;
  v29 = type metadata accessor for CrashReportError.MissingEnvironmentObjectError();
  sub_2447BD1BC((uint64_t)v6, (uint64_t)v9 + *(int *)(v29 + 24), type metadata accessor for CrashReport);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56);
  v31((uint64_t)v9, 0, 1, v29);

  sub_2447BF330(a1, type metadata accessor for CrashReport);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v30 + 48))(v9, 1, v29))
  {
    sub_2447BD180((uint64_t)v9, &qword_257389E28);
LABEL_10:
    v32 = type metadata accessor for CrashReportError.MissingEnvironmentObjectError();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(a2, 1, 1, v32);
  }
  sub_2447BD1BC((uint64_t)v9, a2, (uint64_t (*)(_QWORD))type metadata accessor for CrashReportError.MissingEnvironmentObjectError);
  return v31(a2, 0, 1, v29);
}

uint64_t sub_2447BBE90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v20;

  v4 = type metadata accessor for CrashReport(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_257389E20);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_257389CB0 != -1)
    swift_once();
  swift_beginAccess();
  if (!qword_25738F0A0 || !*(_QWORD *)(a1 + *(int *)(v4 + 36)))
    goto LABEL_9;
  v10 = (id)qword_25738F0A0;
  v11 = swift_bridgeObjectRetain();
  v12 = sub_2447C39AC(v11, v10);
  if (!*(_QWORD *)(v12 + 16))
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_9:
    sub_2447BF330(a1, type metadata accessor for CrashReport);
    goto LABEL_10;
  }
  v13 = *(void **)(v12 + 48);
  swift_bridgeObjectRetain();
  v14 = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2447BD13C(a1, (uint64_t)v6, type metadata accessor for CrashReport);
  swift_bridgeObjectRelease();

  sub_2447BD1BC((uint64_t)v6, (uint64_t)v9, type metadata accessor for CrashReport);
  v15 = type metadata accessor for CrashReportError.IndexOutOfRangeError();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56);
  v17(v9, 0, 1, v15);

  sub_2447BF330(a1, type metadata accessor for CrashReport);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v9, 1, v15))
  {
    sub_2447BD180((uint64_t)v9, &qword_257389E20);
LABEL_10:
    v18 = type metadata accessor for CrashReportError.IndexOutOfRangeError();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a2, 1, 1, v18);
  }
  sub_2447BD1BC((uint64_t)v9, a2, (uint64_t (*)(_QWORD))type metadata accessor for CrashReportError.IndexOutOfRangeError);
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v17)(a2, 0, 1, v15);
}

uint64_t sub_2447BC0F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t CrashError;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;

  v4 = type metadata accessor for CrashReport(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_257389E10);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)((char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_257389C88 != -1)
    swift_once();
  swift_beginAccess();
  if (!qword_25738C938 || !*(_QWORD *)(a1 + *(int *)(v4 + 36)))
    goto LABEL_9;
  v10 = (id)qword_25738C938;
  v11 = swift_bridgeObjectRetain();
  v12 = sub_2447C39AC(v11, v10);
  if (!*(_QWORD *)(v12 + 16))
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_9:
    sub_2447BF330(a1, type metadata accessor for CrashReport);
    goto LABEL_10;
  }
  v35 = v10;
  v13 = *(void **)(v12 + 48);
  swift_bridgeObjectRetain();
  v14 = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2447BD13C(a1, (uint64_t)v6, type metadata accessor for CrashReport);
  v15 = &v6[*(int *)(v4 + 20)];
  v16 = *((_QWORD *)v15 + 1);
  *v9 = *(_QWORD *)v15;
  v9[1] = v16;
  swift_bridgeObjectRetain();
  v17 = (void *)sub_2448EAA70();
  swift_bridgeObjectRelease();
  v18 = (void *)sub_2448EAA70();
  v19 = objc_msgSend(v14, sel_rangeWithName_, v18);
  v21 = v20;

  v22 = objc_msgSend(v17, sel_substringWithRange_, v19, v21);
  v23 = sub_2448EAA94();
  v25 = v24;

  v36 = v23;
  v37 = v25;
  v26 = sub_2448EAC98();
  v28 = v27;

  v9[2] = v26;
  v9[3] = v28;
  CrashError = type metadata accessor for CrashReportError.DyldLibraryLoadCrashError();
  sub_2447BD1BC((uint64_t)v6, (uint64_t)v9 + *(int *)(CrashError + 24), type metadata accessor for CrashReport);
  v30 = *(_QWORD *)(CrashError - 8);
  v31 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56);
  v31((uint64_t)v9, 0, 1, CrashError);

  sub_2447BF330(a1, type metadata accessor for CrashReport);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v30 + 48))(v9, 1, CrashError))
  {
    sub_2447BD180((uint64_t)v9, &qword_257389E10);
LABEL_10:
    v32 = type metadata accessor for CrashReportError.DyldLibraryLoadCrashError();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(a2, 1, 1, v32);
  }
  sub_2447BD1BC((uint64_t)v9, a2, (uint64_t (*)(_QWORD))type metadata accessor for CrashReportError.DyldLibraryLoadCrashError);
  return v31(a2, 0, 1, CrashError);
}

uint64_t sub_2447BC43C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v4 = type metadata accessor for CrashReport(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_257389E08);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)((char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_257389DC8 != -1)
    swift_once();
  swift_beginAccess();
  if (!qword_257390850 || !*(_QWORD *)(a1 + *(int *)(v4 + 36)))
    goto LABEL_9;
  v10 = (id)qword_257390850;
  v11 = swift_bridgeObjectRetain();
  v12 = sub_2447C39AC(v11, v10);
  if (!*(_QWORD *)(v12 + 16))
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_9:
    sub_2447BF330(a1, type metadata accessor for CrashReport);
    goto LABEL_10;
  }
  v13 = *(void **)(v12 + 48);
  swift_bridgeObjectRetain();
  v14 = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2447BD13C(a1, (uint64_t)v6, type metadata accessor for CrashReport);
  CrashReportError.UncaughtExceptionError.init(report:asi:match:)((uint64_t)v6, v14, v9);

  sub_2447BF330(a1, type metadata accessor for CrashReport);
  v15 = type metadata accessor for CrashReportError.UncaughtExceptionError();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v9, 1, v15))
  {
    sub_2447BD180((uint64_t)v9, &qword_257389E08);
LABEL_10:
    v17 = type metadata accessor for CrashReportError.UncaughtExceptionError();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a2, 1, 1, v17);
  }
  sub_2447BD1BC((uint64_t)v9, a2, (uint64_t (*)(_QWORD))type metadata accessor for CrashReportError.UncaughtExceptionError);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(a2, 0, 1, v15);
}

void sub_2447BC68C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for CrashReportError.Kind(0);
  MEMORY[0x24BDAC7A8](v1);
  sub_2447BD13C(v0, (uint64_t)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v4 = (char *)sub_2447BC718 + 4 * byte_2448EC8B0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_2447BC718()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *boxed_opaque_existential_1;

  v0[3] = type metadata accessor for CrashReportError.MissingEnvironmentObjectError();
  v0[4] = (uint64_t)&off_251588240;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0);
  return sub_2447BD1BC(v1, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for CrashReportError.MissingEnvironmentObjectError);
}

uint64_t CrashReportError.crashReport.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[3];
  uint64_t v4;
  uint64_t v5;

  sub_2447BC68C();
  v0 = v4;
  v1 = v5;
  __swift_project_boxed_opaque_existential_1(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v1);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t CrashReportError.highValueTitle.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;

  sub_2447BC68C();
  v0 = v5;
  v1 = v6;
  __swift_project_boxed_opaque_existential_1(v4, v5);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(v0, v1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  return v2;
}

uint64_t CrashReportError.additionalInfo.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;

  sub_2447BC68C();
  v0 = v5;
  v1 = v6;
  __swift_project_boxed_opaque_existential_1(v4, v5);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 24))(v0, v1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  return v2;
}

uint64_t CrashReportError.additionalDiagnostics.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  Swift::String *v9;
  uint64_t v10;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v0 = type metadata accessor for CrashReport(0);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v13[-1] - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2447BC68C();
  v3 = v14;
  v4 = v15;
  __swift_project_boxed_opaque_existential_1(v13, v14);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  v5 = CrashReport.formattedAsLegacyCrashReport()();
  v6 = sub_2447C30D4(0, 1, 1, MEMORY[0x24BEE4AF8], &qword_25738A178, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_2447C3E64);
  v8 = v6[2];
  v7 = v6[3];
  if (v8 >= v7 >> 1)
    v6 = sub_2447C30D4((_QWORD *)(v7 > 1), v8 + 1, 1, v6, &qword_25738A178, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_2447C3E64);
  v6[2] = v8 + 1;
  v9 = (Swift::String *)&v6[3 * v8];
  v9[2] = v5;
  LOBYTE(v9[3]._countAndFlagsBits) = 0;
  v10 = Array<A>.builtDescription.getter((uint64_t)v6);
  swift_bridgeObjectRelease();
  sub_2447BF330((uint64_t)v2, type metadata accessor for CrashReport);
  return v10;
}

uint64_t sub_2447BCA84()
{
  Swift::String v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  Swift::String *v4;

  v0 = CrashReport.formattedAsLegacyCrashReport()();
  v1 = sub_2447C30D4(0, 1, 1, MEMORY[0x24BEE4AF8], &qword_25738A178, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_2447C3E64);
  v3 = v1[2];
  v2 = v1[3];
  if (v3 >= v2 >> 1)
    v1 = sub_2447C30D4((_QWORD *)(v2 > 1), v3 + 1, 1, v1, &qword_25738A178, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_2447C3E64);
  v1[2] = v3 + 1;
  v4 = (Swift::String *)&v1[3 * v3];
  v4[2] = v0;
  LOBYTE(v4[3]._countAndFlagsBits) = 0;
  Array<A>.builtDescription.getter((uint64_t)v1);
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  return swift_bridgeObjectRelease();
}

void CrashReportError.options.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 2;
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t CrashReportError.isPotentialCrash.getter()
{
  return 1;
}

uint64_t sub_2447BCB84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;

  sub_2447BC68C();
  v0 = v5;
  v1 = v6;
  __swift_project_boxed_opaque_existential_1(v4, v5);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(v0, v1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  return v2;
}

uint64_t sub_2447BCBF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;

  sub_2447BC68C();
  v0 = v5;
  v1 = v6;
  __swift_project_boxed_opaque_existential_1(v4, v5);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 24))(v0, v1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  return v2;
}

uint64_t sub_2447BCC5C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v0 = type metadata accessor for CrashReport(0);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v7[-1] - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = 0;
  v11 = 0xE000000000000000;
  sub_2448EABC0();
  sub_2447BC68C();
  v3 = v8;
  v4 = v9;
  __swift_project_boxed_opaque_existential_1(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  sub_2447BCA84();
  sub_2447BF330((uint64_t)v2, type metadata accessor for CrashReport);
  sub_2448EABC0();
  return v10;
}

void sub_2447BCD48(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 2;
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t sub_2447BCD58()
{
  return 1;
}

uint64_t sub_2447BCD80(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v7 = *v3;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_2447C30D4(0, v7[2] + 1, 1, v7, &qword_25738A178, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_2447C3E64);
    v7 = (_QWORD *)result;
  }
  v10 = v7[2];
  v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    result = (uint64_t)sub_2447C30D4((_QWORD *)(v9 > 1), v10 + 1, 1, v7, &qword_25738A178, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_2447C3E64);
    v7 = (_QWORD *)result;
  }
  v7[2] = v10 + 1;
  v11 = &v7[3 * v10];
  v11[4] = a1;
  v11[5] = a2;
  *((_BYTE *)v11 + 48) = a3;
  *v3 = v7;
  return result;
}

uint64_t sub_2447BCE54()
{
  Swift::String v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  Swift::String *v4;
  uint64_t v5;

  v0 = CrashReport.formattedAsLegacyCrashReport()();
  v1 = sub_2447C30D4(0, 1, 1, MEMORY[0x24BEE4AF8], &qword_25738A178, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_2447C3E64);
  v3 = v1[2];
  v2 = v1[3];
  if (v3 >= v2 >> 1)
    v1 = sub_2447C30D4((_QWORD *)(v2 > 1), v3 + 1, 1, v1, &qword_25738A178, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_2447C3E64);
  v1[2] = v3 + 1;
  v4 = (Swift::String *)&v1[3 * v3];
  v4[2] = v0;
  LOBYTE(v4[3]._countAndFlagsBits) = 0;
  v5 = Array<A>.builtDescription.getter((uint64_t)v1);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_2447BCF28@<X0>(uint64_t *a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_2448D8598(*a1, a1[1]);
  *a2 = result & 1;
  return result;
}

uint64_t sub_2447BCF54@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2448EAC68();
  *a1 = result & 1;
  return result;
}

uint64_t sub_2447BCF98@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2448EAC68();
  *a1 = result & 1;
  return result;
}

uint64_t sub_2447BCFDC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2448EAC68();
  *a1 = result & 1;
  return result;
}

void sub_2447BD024(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 3;
}

uint64_t sub_2447BD034@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2447BD04C(a1, 0, a2);
}

uint64_t sub_2447BD03C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2447BD04C(a1, 1, a2);
}

uint64_t sub_2447BD044@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2447BD04C(a1, 2, a2);
}

uint64_t sub_2447BD04C@<X0>(uint64_t *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_QWORD *)a3 = v3;
  *(_QWORD *)(a3 + 8) = v4;
  *(_BYTE *)(a3 + 16) = a2;
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for CrashReportError.Kind(uint64_t a1)
{
  return sub_2447BD0C8(a1, qword_257389F48);
}

uint64_t sub_2447BD070(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CrashReportError.Kind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for CrashReportError(uint64_t a1)
{
  return sub_2447BD0C8(a1, qword_257389EA0);
}

uint64_t sub_2447BD0C8(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x24951AC58]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_2447BD13C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_2447BD180(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_2447BD1BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_2447BD244(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL sub_2447BD24C(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

_QWORD *sub_2447BD260@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_2447BD274(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_2447BD288(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

uint64_t sub_2447BD29C(uint64_t a1, uint64_t a2)
{
  return sub_2447BD378(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF9E0]);
}

uint64_t sub_2447BD2B4(uint64_t a1, uint64_t a2)
{
  return sub_2447BD378(a1, a2, MEMORY[0x24BEE0CD8]);
}

uint64_t sub_2447BD2C8()
{
  sub_2448EAA94();
  sub_2448EAB60();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2447BD308()
{
  uint64_t v0;

  sub_2448EAA94();
  sub_2448EBD00();
  sub_2448EAB60();
  v0 = sub_2448EBD3C();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_2447BD378(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_2448EAA94();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_2447BD3B4(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_2448EAA7C();
  *a2 = 0;
  return result;
}

uint64_t sub_2447BD428(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_2448EAA88();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_2447BD4A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_2448EAA94();
  v2 = sub_2448EAA70();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

BOOL sub_2447BD4E4(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_2447BD514@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_2447BD520(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_2447BD530()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_2448EAA94();
  v2 = v1;
  if (v0 == sub_2448EAA94() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_2448EBBEC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_2447BD5BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_2448EAA94();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_2447BD5E4()
{
  sub_2447BD7A0(&qword_25738A1E8, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_2448ECDA0);
  sub_2447BD7A0(&qword_25738A1F0, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_2448ECD40);
  return sub_2448EBA78();
}

uint64_t sub_2447BD668@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_2448EAA70();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_2447BD6AC()
{
  sub_2447BD7A0(&qword_25738A1F8, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_2448ECE30);
  sub_2447BD7A0(&qword_25738A200, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_2448ECC2C);
  return sub_2448EBA78();
}

_QWORD *sub_2447BD730(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_2447C30D4(a1, a2, a3, a4, &qword_25738A178, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_2447C3E64);
}

uint64_t sub_2447BD744(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_2447BD7A0(&qword_257389E30, type metadata accessor for CrashReportError, (uint64_t)&protocol conformance descriptor for CrashReportError);
  result = sub_2447BD7A0(&qword_257389E38, type metadata accessor for CrashReportError, (uint64_t)&protocol conformance descriptor for CrashReportError);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_2447BD7A0(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x24951AC70](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2447BD7E0()
{
  return sub_2447BD7A0(&qword_257389E40, type metadata accessor for CrashReportError, (uint64_t)&protocol conformance descriptor for CrashReportError);
}

uint64_t initializeBufferWithCopyOfBuffer for CrashReportError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    type metadata accessor for CrashReportError.Kind(0);
    v5 = (char *)&loc_2447BD878 + 4 * word_2448EC8B6[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t sub_2447BE020(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for CrashReportError(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t CrashError;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  type metadata accessor for CrashReportError.Kind(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      CrashError = type metadata accessor for CrashReportError.MissingEnvironmentObjectError();
      goto LABEL_6;
    case 1u:
    case 5u:
      v2 = sub_2448EA548();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
      v3 = type metadata accessor for CrashReport(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 = a1 + *(int *)(v3 + 32);
      v5 = sub_2448EA500();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
      goto LABEL_9;
    case 2u:
      swift_bridgeObjectRelease();
      sub_2447BE24C(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
      swift_bridgeObjectRelease();
      v7 = *(int *)(type metadata accessor for CrashReportError.ConditionInFileError() + 32);
      goto LABEL_8;
    case 3u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      CrashError = type metadata accessor for CrashReportError.DyldLibraryLoadCrashError();
LABEL_6:
      v7 = *(int *)(CrashError + 24);
      goto LABEL_8;
    case 4u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 = *(int *)(type metadata accessor for CrashReportError.UncaughtExceptionError() + 28);
LABEL_8:
      v8 = a1 + v7;
      v9 = sub_2448EA548();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
      v10 = type metadata accessor for CrashReport(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v11 = v8 + *(int *)(v10 + 32);
      v12 = sub_2448EA500();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
LABEL_9:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    default:
      return swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_2447BE24C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRelease();
  return result;
}

void initializeWithCopy for CrashReportError()
{
  char *v0;

  type metadata accessor for CrashReportError.Kind(0);
  v0 = (char *)sub_2447BE2C4 + 4 * word_2448EC8C8[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_QWORD *sub_2447BE2C4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;

  v3 = v1[1];
  *v0 = *v1;
  v0[1] = v3;
  v4 = v1[3];
  v0[2] = v1[2];
  v0[3] = v4;
  v5 = *(int *)(type metadata accessor for CrashReportError.MissingEnvironmentObjectError() + 24);
  v6 = (char *)v0 + v5;
  v7 = (char *)v1 + v5;
  v8 = sub_2448EA548();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  v10 = (int *)type metadata accessor for CrashReport(0);
  v11 = v10[5];
  v12 = &v6[v11];
  v13 = &v7[v11];
  v14 = *((_QWORD *)v13 + 1);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *((_QWORD *)v12 + 1) = v14;
  v15 = v10[6];
  v16 = &v6[v15];
  v17 = &v7[v15];
  v18 = *((_QWORD *)v17 + 1);
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *((_QWORD *)v16 + 1) = v18;
  *(_DWORD *)&v6[v10[7]] = *(_DWORD *)&v7[v10[7]];
  v19 = v10[8];
  v29 = v2;
  v20 = &v6[v19];
  v28 = &v7[v19];
  v21 = sub_2448EA500();
  v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22(v20, v28, v21);
  *(_QWORD *)&v6[v10[9]] = *(_QWORD *)&v7[v10[9]];
  *(_QWORD *)&v6[v10[10]] = *(_QWORD *)&v7[v10[10]];
  *(_QWORD *)&v6[v10[11]] = *(_QWORD *)&v7[v10[11]];
  v23 = v10[12];
  v24 = &v6[v23];
  v25 = &v7[v23];
  v26 = *((_QWORD *)v25 + 1);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *((_QWORD *)v24 + 1) = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)((char *)v0 + *(int *)(v29 + 20)) = *(_QWORD *)((char *)v1 + *(int *)(v29 + 20));
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t assignWithCopy for CrashReportError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v4;

  if (a1 != a2)
  {
    sub_2447BF330(a1, type metadata accessor for CrashReportError.Kind);
    type metadata accessor for CrashReportError.Kind(0);
    v4 = (char *)&loc_2447BEAC4 + 4 * word_2448EC8D4[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_2447BF330(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void initializeWithTake for CrashReportError()
{
  char *v0;

  type metadata accessor for CrashReportError.Kind(0);
  v0 = (char *)sub_2447BF3CC + 4 * byte_2448EC8E0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_2447BF3CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = sub_2448EA548();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(v0, v1, v3);
  v4 = (int *)type metadata accessor for CrashReport(0);
  *(_OWORD *)(v0 + v4[5]) = *(_OWORD *)(v1 + v4[5]);
  *(_OWORD *)(v0 + v4[6]) = *(_OWORD *)(v1 + v4[6]);
  *(_DWORD *)(v0 + v4[7]) = *(_DWORD *)(v1 + v4[7]);
  v5 = v4[8];
  v6 = v0 + v5;
  v7 = v1 + v5;
  v8 = sub_2448EA500();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  *(_QWORD *)(v0 + v4[9]) = *(_QWORD *)(v1 + v4[9]);
  *(_QWORD *)(v0 + v4[10]) = *(_QWORD *)(v1 + v4[10]);
  *(_QWORD *)(v0 + v4[11]) = *(_QWORD *)(v1 + v4[11]);
  *(_OWORD *)(v0 + v4[12]) = *(_OWORD *)(v1 + v4[12]);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v0 + *(int *)(v2 + 20)) = *(_QWORD *)(v1 + *(int *)(v2 + 20));
  return v0;
}

uint64_t assignWithTake for CrashReportError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v4;

  if (a1 != a2)
  {
    sub_2447BF330(a1, type metadata accessor for CrashReportError.Kind);
    type metadata accessor for CrashReportError.Kind(0);
    v4 = (char *)&loc_2447BF664 + 4 * byte_2448EC8E6[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CrashReportError()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2447BF898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for CrashReportError.Kind(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for CrashReportError()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2447BF92C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for CrashReportError.Kind(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

uint64_t sub_2447BF9A4()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CrashReportError.Kind(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CrashReportError.Kind(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_2447BFA74 + 4 * word_2448EC8EC[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for CrashReportError.Kind(uint64_t a1)
{
  uint64_t result;
  uint64_t CrashError;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      CrashError = type metadata accessor for CrashReportError.MissingEnvironmentObjectError();
      goto LABEL_5;
    case 1:
    case 5:
      goto LABEL_8;
    case 2:
      swift_bridgeObjectRelease();
      sub_2447BE24C(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
      swift_bridgeObjectRelease();
      v4 = *(int *)(type metadata accessor for CrashReportError.ConditionInFileError() + 32);
      goto LABEL_7;
    case 3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      CrashError = type metadata accessor for CrashReportError.DyldLibraryLoadCrashError();
LABEL_5:
      v4 = *(int *)(CrashError + 24);
      goto LABEL_7;
    case 4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 = *(int *)(type metadata accessor for CrashReportError.UncaughtExceptionError() + 28);
LABEL_7:
      a1 += v4;
LABEL_8:
      v5 = sub_2448EA548();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      v6 = type metadata accessor for CrashReport(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 = a1 + *(int *)(v6 + 32);
      v8 = sub_2448EA500();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void initializeWithCopy for CrashReportError.Kind()
{
  char *v0;

  v0 = (char *)sub_2447C03D8 + 4 * word_2448EC8FE[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_QWORD *sub_2447C03D8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v2 = v1[1];
  *v0 = *v1;
  v0[1] = v2;
  v3 = v1[3];
  v0[2] = v1[2];
  v0[3] = v3;
  v4 = *(int *)(type metadata accessor for CrashReportError.MissingEnvironmentObjectError() + 24);
  v5 = (char *)v0 + v4;
  v6 = (char *)v1 + v4;
  v7 = sub_2448EA548();
  v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  v9 = (int *)type metadata accessor for CrashReport(0);
  v10 = v9[5];
  v11 = &v5[v10];
  v12 = &v6[v10];
  v13 = *((_QWORD *)v12 + 1);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_QWORD *)v11 + 1) = v13;
  v14 = v9[6];
  v15 = &v5[v14];
  v16 = &v6[v14];
  v17 = *((_QWORD *)v16 + 1);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *((_QWORD *)v15 + 1) = v17;
  *(_DWORD *)&v5[v9[7]] = *(_DWORD *)&v6[v9[7]];
  v18 = v9[8];
  v19 = &v5[v18];
  v20 = &v6[v18];
  v21 = sub_2448EA500();
  v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22(v19, v20, v21);
  *(_QWORD *)&v5[v9[9]] = *(_QWORD *)&v6[v9[9]];
  *(_QWORD *)&v5[v9[10]] = *(_QWORD *)&v6[v9[10]];
  *(_QWORD *)&v5[v9[11]] = *(_QWORD *)&v6[v9[11]];
  v23 = v9[12];
  v24 = &v5[v23];
  v25 = &v6[v23];
  v26 = *((_QWORD *)v25 + 1);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *((_QWORD *)v24 + 1) = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithCopy for CrashReportError.Kind(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    sub_2447BF330(result, type metadata accessor for CrashReportError.Kind);
    v2 = (char *)&loc_2447C0BAC + 4 * word_2448EC90A[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

void initializeWithTake for CrashReportError.Kind()
{
  char *v0;

  v0 = (char *)sub_2447C143C + 4 * byte_2448EC916[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_2447C143C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_2448EA548();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v0, v1, v2);
  v3 = (int *)type metadata accessor for CrashReport(0);
  *(_OWORD *)(v0 + v3[5]) = *(_OWORD *)(v1 + v3[5]);
  *(_OWORD *)(v0 + v3[6]) = *(_OWORD *)(v1 + v3[6]);
  *(_DWORD *)(v0 + v3[7]) = *(_DWORD *)(v1 + v3[7]);
  v4 = v3[8];
  v5 = v0 + v4;
  v6 = v1 + v4;
  v7 = sub_2448EA500();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  *(_QWORD *)(v0 + v3[9]) = *(_QWORD *)(v1 + v3[9]);
  *(_QWORD *)(v0 + v3[10]) = *(_QWORD *)(v1 + v3[10]);
  *(_QWORD *)(v0 + v3[11]) = *(_QWORD *)(v1 + v3[11]);
  *(_OWORD *)(v0 + v3[12]) = *(_OWORD *)(v1 + v3[12]);
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithTake for CrashReportError.Kind(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    sub_2447BF330(result, type metadata accessor for CrashReportError.Kind);
    v2 = (char *)&loc_2447C16B4 + 4 * byte_2448EC91C[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CrashReportError.Kind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for CrashReportError.Kind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_2447C18E0()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_2447C18F0()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  result = type metadata accessor for CrashReportError.MissingEnvironmentObjectError();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for CrashReport(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for CrashReportError.ConditionInFileError();
      if (v3 <= 0x3F)
      {
        result = type metadata accessor for CrashReportError.DyldLibraryLoadCrashError();
        if (v4 <= 0x3F)
        {
          result = type metadata accessor for CrashReportError.UncaughtExceptionError();
          if (v5 <= 0x3F)
          {
            swift_initEnumMetadataMultiPayload();
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2447C19C4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_2447C19CC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_2447C19D4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_2447C19DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

void type metadata accessor for CFRunLoopSource(uint64_t a1)
{
  sub_2447C5410(a1, &qword_257389FE0);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for TimePeriod(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TimePeriod(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for _CSTypeRef(uint64_t a1)
{
  sub_2447C5410(a1, &qword_257389FE8);
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_2447C1A70(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_2447C5410(a1, &qword_257389FF0);
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_2447C5410(a1, &qword_257389FF8);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_2447C5410(a1, &qword_25738A000);
}

uint64_t initializeBufferWithCopyOfBuffer for CrashReport.Frame(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy32_4(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_2447C1B14(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

void type metadata accessor for audit_token_t(uint64_t a1)
{
  sub_2447C5410(a1, &qword_25738A008);
}

void type metadata accessor for OSLogType(uint64_t a1)
{
  sub_2447C5410(a1, &qword_25738A010);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_2447C5410(a1, &qword_25738A018);
}

_QWORD *sub_2447C1B70(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A058);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2447C3D74(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2447C1C7C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A190);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_2447C3794(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2447C1DA0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A180);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_2447C38A0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2447C1EC0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A070);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2447C4048(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2447C1FCC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A118);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_2447C4224(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2447C20F0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A160);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2447C3F58(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2447C21FC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_2447C3448(a1, a2, a3, a4, &qword_25738A168, &qword_25738A170);
}

_QWORD *sub_2447C2210(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A038);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_2447C502C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2447C2334(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_2447C28B0(a1, a2, a3, a4, &qword_25738A020);
}

_QWORD *sub_2447C2340(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A158);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 80);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[10 * v8 + 4])
          memmove(v12, a4 + 4, 80 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_2447C4130(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2447C245C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A150);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 144);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[18 * v8 + 4])
          memmove(v12, a4 + 4, 144 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_2447C4330(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2447C2580(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A060);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_2447C4E18(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2447C26A0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A148);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2447C4048(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_2447C27AC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A140);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v12 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_2447C4514(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2447C28A4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_2447C28B0(a1, a2, a3, a4, &qword_25738A138);
}

_QWORD *sub_2447C28B0(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v14 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4])
          memmove(v14, a4 + 4, 16 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2447C5124(0, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_2447C29B8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_2447C3588(a1, a2, a3, a4, &qword_25738A128, (uint64_t (*)(_QWORD))MEMORY[0x24BDCDAC0]);
}

_QWORD *sub_2447C29CC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A130);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_2447C4C30(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2447C2AF0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_2447C28B0(a1, a2, a3, a4, &qword_25738A078);
}

_QWORD *sub_2447C2AFC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_2447C28B0(a1, a2, a3, a4, &qword_25738A080);
}

_QWORD *sub_2447C2B08(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_2447C28B0(a1, a2, a3, a4, &qword_25738A0D0);
}

_QWORD *sub_2447C2B14(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A090);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_2447C45F8(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2447C2C38(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0A0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2447C4704(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2447C2D44(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_2447C3210(a1, a2, a3, a4, &qword_25738A0B0, &qword_25738A0B8);
}

_QWORD *sub_2447C2D58(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0C0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_2447C4914(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2447C2E74(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A088);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4])
          memmove(v12, a4 + 4, 72 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_2447C4D24(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2447C2F9C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_2447C28B0(a1, a2, a3, a4, &qword_25738A0D8);
}

_QWORD *sub_2447C2FA8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_2447C28B0(a1, a2, a3, a4, &qword_25738A110);
}

_QWORD *sub_2447C2FB4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0E0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2447C480C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2447C30C0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_2447C30D4(a1, a2, a3, a4, &qword_25738A0F0, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_2447C4B24);
}

_QWORD *sub_2447C30D4(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, void (*a6)(_QWORD, int64_t, _QWORD *, _QWORD *))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 24);
      v15 = v13 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[3 * v11 + 4])
          memmove(v15, a4 + 4, 24 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v15 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    a6(0, v11, v15, a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2447C31FC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_2447C3210(a1, a2, a3, a4, &qword_25738A100, &qword_25738A108);
}

_QWORD *sub_2447C3210(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 1;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 5);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v16 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[4 * v11 + 4])
          memmove(v16, a4 + 4, 32 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2447C4A20(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2447C3328(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A050);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2447C4424(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2447C3434(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_2447C3448(a1, a2, a3, a4, &qword_25738A040, &qword_25738A048);
}

_QWORD *sub_2447C3448(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
      v15 = v13 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[5 * v11 + 4])
          memmove(v15, a4 + 4, 40 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v15 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_2447C4F24(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_2447C3574(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_2447C3588(a1, a2, a3, a4, &qword_25738A030, (uint64_t (*)(_QWORD))type metadata accessor for IOPowerSource.Observer);
}

uint64_t sub_2447C3588(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = sub_2448EB994();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_2447C522C(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t sub_2447C3794(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A198);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447C38A0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A188);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447C39AC(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  int64_t v6;
  unint64_t v7;
  unint64_t i;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  int64_t v36;
  unint64_t v38;
  int64_t v39;

  v34 = a1 + 64;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v36 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v6 = 0;
  v33 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v4)
    goto LABEL_7;
LABEL_8:
  v9 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v9 < v36)
    {
      v10 = *(_QWORD *)(v34 + 8 * v9);
      ++v6;
      if (v10)
        goto LABEL_22;
      v6 = v9 + 1;
      if (v9 + 1 >= v36)
        goto LABEL_40;
      v10 = *(_QWORD *)(v34 + 8 * v6);
      if (v10)
        goto LABEL_22;
      v6 = v9 + 2;
      if (v9 + 2 >= v36)
        goto LABEL_40;
      v10 = *(_QWORD *)(v34 + 8 * v6);
      if (v10)
        goto LABEL_22;
      v6 = v9 + 3;
      if (v9 + 3 >= v36)
        goto LABEL_40;
      v10 = *(_QWORD *)(v34 + 8 * v6);
      if (v10)
      {
LABEL_22:
        v4 = (v10 - 1) & v10;
        for (i = __clz(__rbit64(v10)) + (v6 << 6); ; i = v7 | (v6 << 6))
        {
          v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
          v13 = *(_QWORD *)(v12 + 16);
          if (v13)
          {
            v38 = v4;
            v39 = v6;
            swift_bridgeObjectRetain_n();
            v14 = a2;
            v15 = (uint64_t *)(v12 + 40);
            v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
            do
            {
              v18 = *(v15 - 1);
              v17 = *v15;
              swift_bridgeObjectRetain();
              v19 = (void *)sub_2448EAA70();
              v20 = objc_msgSend(v14, sel_firstMatchInString_options_range_, v19, 0, 0, sub_2448EAB78());

              if (v20)
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v16 = sub_2447C1C7C(0, v16[2] + 1, 1, v16);
                v22 = v16[2];
                v21 = v16[3];
                if (v22 >= v21 >> 1)
                  v16 = sub_2447C1C7C((_QWORD *)(v21 > 1), v22 + 1, 1, v16);
                v16[2] = v22 + 1;
                v23 = &v16[3 * v22];
                v23[4] = v18;
                v23[5] = v17;
                v23[6] = v20;
              }
              else
              {
                swift_bridgeObjectRelease();
              }
              v15 += 2;
              --v13;
            }
            while (v13);

            swift_bridgeObjectRelease_n();
            v6 = v39;
            v4 = v38;
            if (!v16[2])
            {
LABEL_6:
              swift_bridgeObjectRelease();
              result = swift_bridgeObjectRelease();
              if (!v4)
                goto LABEL_8;
              goto LABEL_7;
            }
          }
          else
          {
            swift_bridgeObjectRetain();
            v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
            if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
              goto LABEL_6;
          }
          v24 = v4;
          v25 = v6;
          v26 = v16[4];
          v27 = v16[5];
          v28 = (void *)v16[6];
          swift_bridgeObjectRetain();
          v29 = v28;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_2447C1C7C(0, v33[2] + 1, 1, v33);
            v33 = (_QWORD *)result;
          }
          v31 = v33[2];
          v30 = v33[3];
          if (v31 >= v30 >> 1)
          {
            result = (uint64_t)sub_2447C1C7C((_QWORD *)(v30 > 1), v31 + 1, 1, v33);
            v33 = (_QWORD *)result;
          }
          v33[2] = v31 + 1;
          v32 = &v33[3 * v31];
          v32[4] = v26;
          v32[5] = v27;
          v32[6] = v29;
          v6 = v25;
          v4 = v24;
          if (!v24)
            goto LABEL_8;
LABEL_7:
          v7 = __clz(__rbit64(v4));
          v4 &= v4 - 1;
        }
      }
      v11 = v9 + 4;
      if (v11 < v36)
      {
        v10 = *(_QWORD *)(v34 + 8 * v11);
        v6 = v11;
        if (!v10)
        {
          while (1)
          {
            v6 = v11 + 1;
            if (__OFADD__(v11, 1))
              goto LABEL_42;
            if (v6 >= v36)
              goto LABEL_40;
            v10 = *(_QWORD *)(v34 + 8 * v6);
            ++v11;
            if (v10)
              goto LABEL_22;
          }
        }
        goto LABEL_22;
      }
    }
LABEL_40:
    swift_release();
    return (uint64_t)v33;
  }
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_2447C3D74(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447C3E64(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447C3F58(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

char *sub_2447C4048(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447C4130(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 80 * a1 + 32;
    v6 = a3 + 80 * v4;
    if (v5 >= v6 || v5 + 80 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447C4224(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A120);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447C4330(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 144 * a1 + 32;
    v6 = a3 + 144 * v4;
    if (v5 >= v6 || v5 + 144 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447C4424(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

char *sub_2447C4514(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447C45F8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A098);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447C4704(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0A8);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447C480C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0E8);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447C4914(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0C8);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447C4A20(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 32 * a1 + 32;
    v7 = a3 + 32 * v5;
    if (v6 >= v7 || v6 + 32 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447C4B24(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0F8);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447C4C30(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447C4D24(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 72 * a1 + 32;
    v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447C4E18(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A068);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447C4F24(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 40 * a1 + 32;
    v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447C502C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447C5124(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A028);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447C522C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
  sub_2447C5410(a1, &qword_25738A1A0);
}

_QWORD *__swift_memcpy8_4(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_2447C53A0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2447C53C0(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

void type metadata accessor for _CSArchitecture(uint64_t a1)
{
  sub_2447C5410(a1, &qword_25738A1A8);
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
  sub_2447C5410(a1, &qword_25738A1B0);
}

void sub_2447C5410(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_2447C5454()
{
  return sub_2447BD7A0(&qword_25738A1B8, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_2448ECBF0);
}

uint64_t sub_2447C5480()
{
  return sub_2447BD7A0(&qword_25738A1C0, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_2448ECBC4);
}

uint64_t sub_2447C54AC()
{
  return sub_2447BD7A0(&qword_25738A1C8, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_2448ECD04);
}

uint64_t sub_2447C54D8()
{
  return sub_2447BD7A0(&qword_25738A1D0, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_2448ECCD8);
}

uint64_t sub_2447C5504()
{
  return sub_2447BD7A0(&qword_25738A1D8, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_2448ECD74);
}

uint64_t sub_2447C5530()
{
  return sub_2447BD7A0(&qword_25738A1E0, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_2448ECC60);
}

uint64_t static Task.create<>(file:line:column:function:)(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t result;
  uint64_t *v24;
  _QWORD v25[2];
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  v24 = a1;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A208);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v25[-1] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[0] = a2;
  v25[1] = a3;
  v26 = a4;
  v27 = a5;
  v28 = a6;
  v29 = a7;
  v30 = a8;
  v31 = a9;
  sub_2447C56CC((uint64_t)v25, a10, MEMORY[0x24BEE4078], MEMORY[0x24BEE40A8], &v32);
  v20 = v32;
  v21 = sub_2448EAF74();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v19, 1, 1, v21);
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = 0;
  v22[3] = 0;
  v22[4] = a10;
  v22[5] = v20;
  swift_retain();
  result = sub_2447C5E3C((uint64_t)v19, (uint64_t)&unk_25738A218, (uint64_t)v22, a10);
  *v24 = v20;
  return result;
}

{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t result;
  uint64_t *v25;
  _QWORD v26[2];
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;

  v25 = a1;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A208);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v26[-1] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[0] = a2;
  v26[1] = a3;
  v27 = a4;
  v28 = a5;
  v29 = a6;
  v30 = a7;
  v31 = a8;
  v32 = a9;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0A8);
  sub_2447C56CC((uint64_t)v26, a10, v20, MEMORY[0x24BEE3F20], &v33);
  v21 = v33;
  v22 = sub_2448EAF74();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v19, 1, 1, v22);
  v23 = (_QWORD *)swift_allocObject();
  v23[2] = 0;
  v23[3] = 0;
  v23[4] = a10;
  v23[5] = v21;
  swift_retain();
  result = sub_2447C6624((uint64_t)v19, (uint64_t)&unk_25738A228, (uint64_t)v23);
  *v25 = v21;
  return result;
}

uint64_t sub_2447C56CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  __int128 v19;
  uint64_t v20;
  uint64_t *v21;
  __int128 v22;
  uint64_t v23[2];
  char v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v21 = a5;
  v6 = type metadata accessor for PromiseFulfillment(255, a2, a3, a4);
  v7 = sub_2448EAF44();
  v8 = sub_2448EB508();
  v20 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_BYTE *)(a1 + 16);
  v19 = *(_OWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 48);
  LOBYTE(a1) = *(_BYTE *)(a1 + 56);
  type metadata accessor for FulfillOnceState(0, v8, v6, v16);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v10, 1, 1, v7);
  v23[0] = v11;
  v23[1] = v12;
  v24 = v13;
  v25 = v19;
  v26 = v14;
  v27 = v15;
  v28 = a1;
  v22 = xmmword_2448ECE80;
  v17 = sub_2447E229C((uint64_t)v10, v23, 0, 0, (uint64_t *)&v22, 0x6F7270206B736174, 0xEC0000006573696DLL, 0x656C6C69666C7566, 0xE900000000000064);
  result = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v10, v8);
  *v21 = v17;
  return result;
}

uint64_t sub_2447C5860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  v6 = type metadata accessor for PromiseFulfillment(0, a5, MEMORY[0x24BEE4078], MEMORY[0x24BEE40A8]);
  v5[5] = v6;
  v5[6] = *(_QWORD *)(v6 - 8);
  v5[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_2447C58D8()
{
  uint64_t v0;
  int8x16_t *v1;
  _QWORD *v2;

  v1 = (int8x16_t *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v1;
  v1[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v2;
  *v2 = v0;
  v2[1] = sub_2447C5974;
  return sub_2448EBB74();
}

uint64_t sub_2447C5974()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2447C59D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 40);
  sub_244833E4C(v3, *(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2447C5A30(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_2447C81F0;
  return sub_2447C5860(a1, v4, v5, v6, v7);
}

uint64_t sub_2447C5AA8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t updated;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD v22[2];
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27[16];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v26 = a1;
  v2 = a2[2];
  v3 = a2[3];
  v4 = a2[4];
  v5 = type metadata accessor for PromiseFulfillment(0, v2, v3, v4);
  v25 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v24 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v23 = (char *)v22 - v8;
  v22[1] = sub_2448EAF44();
  v9 = sub_2448EB508();
  v10 = MEMORY[0x24BEE4AE0] + 8;
  updated = type metadata accessor for FulfillOnceState.WaitingStateUpdateResult(0, v9, v5, MEMORY[0x24BEE4AE0] + 8);
  v12 = *(_QWORD *)(updated - 8);
  v13 = MEMORY[0x24BDAC7A8](updated);
  v15 = (char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v22 - v16;
  v28 = v2;
  v29 = v3;
  v30 = v4;
  v31 = v26;
  FulfillOnceState.updateWaitingState<A>(update:)((uint64_t)sub_2447C80C0, (uint64_t)v27, v10, v18);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, updated);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v19 = v25;
    v20 = v23;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v23, v15, v5);
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v24, v20, v5);
    swift_checkMetadataState();
    sub_2448EAF38();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v17, updated);
}

uint64_t sub_2447C5CB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2447C5CF4(a1, a2, a3);
}

uint64_t sub_2447C5CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2447C5CF4(a1, a2, a3);
}

uint64_t sub_2447C5CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_2448EAF74();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_2448EAF68();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_2447C7D14(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_2448EAF14();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_2447C5E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v8 = sub_2448EAF74();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, 1, v8) != 1)
  {
    sub_2448EAF68();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_2447C7D14(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_2448EAF14();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a4;
  v10[3] = a2;
  v10[4] = a3;
  return swift_task_create();
}

uint64_t sub_2447C60CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t sub_2447C60E8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[3];
  v1 = v0[4];
  v3 = swift_task_alloc();
  v0[5] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = swift_task_alloc();
  v0[6] = v4;
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v2;
  v5 = (_QWORD *)swift_task_alloc();
  v0[7] = v5;
  *v5 = v0;
  v5[1] = sub_2447C6190;
  return sub_2448EBBF8();
}

uint64_t sub_2447C6190()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_2447C6210()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t objectdestroyTm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2447C627C(uint64_t a1)
{
  int8x16_t *v1;
  uint64_t v2;
  uint64_t v4;
  int8x16_t v5;

  v4 = swift_task_alloc();
  v5 = v1[2];
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_2447C62E8;
  *(int8x16_t *)(v4 + 24) = vextq_s8(v5, v5, 8uLL);
  *(_QWORD *)(v4 + 16) = a1;
  return swift_task_switch();
}

uint64_t sub_2447C62E8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_2447C6330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v6 = type metadata accessor for PromiseFulfillment(0, a3, v5, MEMORY[0x24BEE3F20]);
  v3[5] = v6;
  v3[6] = *(_QWORD *)(v6 - 8);
  v3[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_2447C63B4()
{
  uint64_t v0;
  int8x16_t *v1;
  _QWORD *v2;

  v1 = (int8x16_t *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v1;
  v1[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v2;
  *v2 = v0;
  v2[1] = sub_2447C6450;
  return sub_2448EBB74();
}

uint64_t sub_2447C6450()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2447C64AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 40);
  sub_244833EF0(v3, *(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2447C6524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;

  v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v6 = (_QWORD *)type metadata accessor for Task.Promise(0, a3, v5, MEMORY[0x24BEE3F20]);
  return sub_2447C5AA8(a1, v6);
}

void sub_2447C658C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v4 = type metadata accessor for Task.Promise(0, a2, v3, MEMORY[0x24BEE3F20]);
  v5 = MEMORY[0x24951AC70](&protocol conformance descriptor for Task<A, B>.Promise, v4);
  PromiseProtocol.cancel<>(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Task+Promise.swift", 124, 2, 46, 31, (uint64_t)"create(file:line:column:function:)", 34, 2, v4, v5);
}

uint64_t sub_2447C6624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_2448EAF74();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_2448EAF68();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  sub_2447C7D14(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_2448EAF14();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_2447C674C(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  void (*v14)(char *, uint64_t);
  uint64_t result;
  uint64_t v16;

  type metadata accessor for PromiseFulfillment(255, a3, a4, a5);
  v7 = sub_2448EAF44();
  v8 = sub_2448EB508();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v16 - v10;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))((char *)&v16 - v10, a1, v8);
  v12 = *(_QWORD *)(v7 - 8);
  v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v7);
  v14 = *(void (**)(char *, uint64_t))(v9 + 8);
  v14(v11, v8);
  if (v13 == 1)
  {
    v14(a1, v8);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(a1, a2, v7);
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v7);
  }
  else
  {
    result = sub_2448EB9A0();
    __break(1u);
  }
  return result;
}

uint64_t Task.Promise.cancel<A>(file:line:column:function:onInvalidationOf:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t *v12;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t (*v20)();
  uint64_t (*v25)();

  v17 = *v12;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = *(_QWORD *)(a10 + 16);
  *(_QWORD *)(v18 + 24) = a11;
  *(_QWORD *)(v18 + 32) = a12;
  *(_QWORD *)(v18 + 40) = v17;
  *(_QWORD *)(v18 + 48) = a1;
  *(_QWORD *)(v18 + 56) = a2;
  *(_BYTE *)(v18 + 64) = a3;
  *(_QWORD *)(v18 + 72) = a4;
  *(_QWORD *)(v18 + 80) = a5;
  *(_QWORD *)(v18 + 88) = a6;
  *(_QWORD *)(v18 + 96) = a7;
  *(_BYTE *)(v18 + 104) = a8;
  swift_retain();
  ConcurrentInvalidatable.observeInvalidation(_:)((void (*)(__int128 *))sub_2447C6AD8, v18, a11, a12, &v25);
  result = swift_release();
  v20 = v25;
  if (v25)
  {
    CancelationToken<>.cancel<A>(onInvalidationOf:)(a9, a11, a12);
    return sub_2447C6AE8((uint64_t)v20);
  }
  return result;
}

void sub_2447C69E0(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  __int128 v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  __int128 v11[2];
  _OWORD v12[2];
  uint64_t v13;

  v13 = a2;
  v5 = a3[1];
  v11[0] = *a3;
  v11[1] = v5;
  v12[0] = a3[2];
  *(_OWORD *)((char *)v12 + 9) = *(__int128 *)((char *)a3 + 41);
  sub_2448EAF50();
  sub_2447C8004();
  v6 = (void *)swift_allocError();
  sub_2448EA7DC();
  v10 = v6;
  v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v8 = type metadata accessor for Task.Promise(0, a4, v7, MEMORY[0x24BEE3F20]);
  v9 = MEMORY[0x24951AC70](&unk_2448ECEAC, v8);
  sub_24483402C(v11, (uint64_t)&v10, v8, v9);

}

uint64_t sub_2447C6AB4()
{
  swift_release();
  return swift_deallocObject();
}

void sub_2447C6AD8(uint64_t a1)
{
  uint64_t v1;

  sub_2447C69E0(a1, *(_QWORD *)(v1 + 40), (__int128 *)(v1 + 48), *(_QWORD *)(v1 + 16));
}

uint64_t sub_2447C6AE8(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_2447C6B18(uint64_t a1, uint64_t a2, char *a3, char *a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t TupleTypeMetadata2;
  BOOL v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char v64[16];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char v70[16];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  __int128 v76;
  char v77;
  __int128 v78;
  __int128 v79;
  char v80;
  char *v81;

  v63 = a5;
  v62 = a4;
  v61 = a3;
  v60 = a2;
  v7 = a6[2];
  v8 = a6[3];
  v9 = a6[4];
  v10 = type metadata accessor for PromiseFulfillment(0, v7, v8, v9);
  v55 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v52 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v54 = (char *)&v52 - v13;
  v53 = sub_2448EAF44();
  v14 = sub_2448EB508();
  v57 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v52 - v18;
  v56 = v20;
  v58 = v10;
  v59 = type metadata accessor for FulfillOnceState.FulfillmentOutcome(0, v20, v10, v21);
  v22 = *(_QWORD *)(v59 - 8);
  v23 = MEMORY[0x24BDAC7A8](v59);
  v25 = (char *)&v52 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v26 = *(_BYTE *)(a1 + 16);
  v27 = *(_BYTE *)(a1 + 56);
  v76 = *(_OWORD *)a1;
  v77 = v26;
  v78 = *(_OWORD *)(a1 + 24);
  v28 = *(_OWORD *)(a1 + 40);
  v30 = (char *)&v52 - v29;
  v79 = v28;
  v80 = v27;
  v71 = v7;
  v72 = v8;
  v73 = v9;
  v74 = v60;
  v75 = v61;
  v65 = v7;
  v66 = v8;
  v67 = v9;
  v68 = v62;
  v69 = v63;
  v31 = v81;
  FulfillOnceState.fulfill(callsite:makeFulfilledState:ifAlreadyFulfilled:)(&v76, (uint64_t)sub_2447C7CD4, (uint64_t)v70, (uint64_t)sub_2447C7CF4, (uint64_t)v64);
  if (!v31)
  {
    v32 = v57;
    v81 = v17;
    v33 = v55;
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v25, v30, v59);
    v34 = v56;
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    v36 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v25, 1, TupleTypeMetadata2) == 1;
    v37 = v30;
    LOBYTE(v30) = !v36;
    if (v36)
    {
      v47 = *(void (**)(char *, uint64_t))(v22 + 8);
      v48 = v59;
      v47(v37, v59);
      v47(v25, v48);
    }
    else
    {
      v62 = v37;
      v63 = v22;
      v38 = &v25[*(int *)(TupleTypeMetadata2 + 48)];
      v39 = v32;
      (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v19, v25, v34);
      v40 = v33;
      v41 = v54;
      (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v54, v38, v58);
      v42 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
      v43 = v81;
      v61 = v19;
      v42(v81, v19, v34);
      v44 = v53;
      v45 = *(_QWORD *)(v53 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v53) == 1)
      {
        (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v58);
        v46 = *(void (**)(char *, uint64_t))(v39 + 8);
        v46(v61, v34);
        (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v59);
        v46(v43, v34);
      }
      else
      {
        v49 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
        v60 = v45;
        v50 = v58;
        v49(v52, v41, v58);
        sub_2448EAF38();
        (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v50);
        (*(void (**)(char *, uint64_t))(v57 + 8))(v61, v34);
        (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v59);
        (*(void (**)(char *, uint64_t))(v60 + 8))(v43, v44);
      }
    }
  }
  return v30 & 1;
}

uint64_t sub_2447C6FD8(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _QWORD v29[2];
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t (*v39)(_QWORD *);

  v28 = a4;
  v39 = a3;
  v9 = type metadata accessor for PromiseFulfillment(0, a5, a6, a7);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v19 - v11;
  v13 = *a2;
  v14 = a2[1];
  v15 = *((_BYTE *)a2 + 16);
  v16 = a2[3];
  v25 = a2[4];
  v26 = v16;
  v17 = a2[5];
  v23 = a2[6];
  v24 = v17;
  v22 = *((unsigned __int8 *)a2 + 56);
  v21 = a2[8];
  v20 = a2[9];
  v27 = *((_OWORD *)a2 + 5);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v19 - v11, a1, v9);
  LODWORD(a2) = swift_getEnumCaseMultiPayload();
  result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (a2 <= 1)
  {
    v29[0] = v13;
    v29[1] = v14;
    v30 = v15;
    v31 = v26;
    v32 = v25;
    v33 = v24;
    v34 = v23;
    v35 = v22;
    v36 = v21;
    v37 = v20;
    v38 = v27;
    return v39(v29);
  }
  return result;
}

uint64_t sub_2447C7148(uint64_t a1, uint64_t a2, char *a3, char *a4, uint64_t a5, _QWORD *a6)
{
  return sub_2447C6B18(a1, a2, a3, a4, a5, a6) & 1;
}

double Continuation.init(wrapping:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  double result;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v9 = *a1;
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a4;
  v10[5] = v9;
  v13 = xmmword_2448ECE80;
  Continuation.init(file:line:column:function:initializationInfo:failureMode:resume:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Task+Promise.swift", 124, 2, 139, 18, (uint64_t)"init(wrapping:)", 15, 2, (uint64_t)&v14, 0, 0, &v13, (uint64_t)sub_2447C72D8, (uint64_t)v10, a2, a3, a4);
  v11 = v15;
  result = *(double *)&v14;
  *(_OWORD *)a5 = v14;
  *(_QWORD *)(a5 + 16) = v11;
  return result;
}

uint64_t sub_2447C722C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Task.Promise(0, a3, a4, a5);
  v7 = MEMORY[0x24951AC70](&protocol conformance descriptor for Task<A, B>.Promise, v6);
  return PromiseProtocol.fulfill(file:line:column:function:with:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Task+Promise.swift", 124, 2, 140, 38, (uint64_t)"init(wrapping:)", 15, 2, a1, v6, v7);
}

uint64_t sub_2447C72B4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2447C72D8(uint64_t a1)
{
  uint64_t *v1;

  return sub_2447C722C(a1, v1[5], v1[2], v1[3], v1[4]);
}

double sub_2447C72E4@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 1;
  *a1 = xmmword_2448ECE80;
  return result;
}

uint64_t Continuation.track(task:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A208);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  v8 = v2[1];
  v10 = v2[2];
  v11 = sub_2448EAF74();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v7, 1, 1, v11);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = 0;
  *(_OWORD *)(v12 + 32) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(v12 + 48) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(v12 + 56) = v9;
  *(_QWORD *)(v12 + 64) = v8;
  *(_QWORD *)(v12 + 72) = v10;
  *(_QWORD *)(v12 + 80) = a1;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_2447C5CF4((uint64_t)v7, (uint64_t)&unk_25738A238, v12);
  return swift_release();
}

uint64_t sub_2447C7414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;

  v8[6] = v15;
  v8[7] = v16;
  v8[5] = a8;
  v12 = sub_2448EBD48();
  v8[8] = v12;
  v8[9] = *(_QWORD *)(v12 - 8);
  v8[10] = swift_task_alloc();
  v8[2] = a4;
  v8[3] = a5;
  v8[4] = a6;
  v13 = (_QWORD *)swift_task_alloc();
  v8[11] = v13;
  *v13 = v8;
  v13[1] = sub_2447C74F0;
  return sub_2448EB040();
}

uint64_t sub_2447C74F0()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2447C7544()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  type metadata accessor for Continuation(0, *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  Continuation.resume(with:file:line:column:function:)(v1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Task+Promise.swift", 124, 2, 146, 24, (uint64_t)"track(task:)", 12, 2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2447C75E4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2447C7620(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v12 = v1[4];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[7];
  v7 = v1[8];
  v8 = v1[9];
  v9 = v1[10];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_2447C62E8;
  return sub_2447C7414(a1, v4, v5, v6, v7, v8, v9, v12);
}

uint64_t Continuation.track<A>(task:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A208);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v4;
  v12 = v4[1];
  v14 = v4[2];
  v15 = sub_2448EAF74();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v11, 1, 1, v15);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = *(_QWORD *)(a2 + 16);
  v16[5] = a3;
  v16[6] = a4;
  v16[7] = a1;
  v16[8] = v13;
  v16[9] = v12;
  v16[10] = v14;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_2447C5CF4((uint64_t)v11, (uint64_t)&unk_25738A248, (uint64_t)v16);
  return swift_release();
}

uint64_t sub_2447C77F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;

  v8[7] = v12;
  v8[8] = v13;
  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[9] = *(_QWORD *)(v12 - 8);
  v8[10] = swift_task_alloc();
  v8[11] = swift_task_alloc();
  v8[12] = *(_QWORD *)(a8 - 8);
  v8[13] = swift_task_alloc();
  v8[14] = sub_2448EBD48();
  v8[15] = swift_task_alloc();
  v10 = (_QWORD *)swift_task_alloc();
  v8[16] = v10;
  *v10 = v8;
  v10[1] = sub_2447C78F8;
  return sub_2448EB040();
}

uint64_t sub_2447C78F8()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2447C794C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 120);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v3 = *(_QWORD *)(v0 + 80);
    v2 = *(_QWORD *)(v0 + 88);
    v4 = *(_QWORD *)(v0 + 72);
    v5 = *(_QWORD *)(v0 + 56);
    v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
    v6(v2, v1, v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
    v7 = sub_2448EBB80();
    v8 = *(_QWORD *)(v0 + 80);
    v9 = *(_QWORD *)(v0 + 56);
    if (v7)
    {
      v10 = (void *)v7;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 56));
    }
    else
    {
      v10 = (void *)swift_allocError();
      v6(v16, v8, v9);
    }
    v17 = *(_QWORD *)(v0 + 88);
    v18 = *(_QWORD *)(v0 + 72);
    v19 = *(_QWORD *)(v0 + 48);
    v20 = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v0 + 16) = v10;
    v21 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
    v22 = type metadata accessor for Continuation(0, v19, v21, MEMORY[0x24BEE3F20]);
    Continuation.resume(throwing:file:line:column:function:)(v0 + 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Task+Promise.swift", 124, 2, 154, 46, (uint64_t)"track(task:)", 12, 2, v22);

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v20);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 96);
    v11 = *(_QWORD *)(v0 + 104);
    v13 = *(_QWORD *)(v0 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v11, v1, v13);
    v14 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
    v15 = type metadata accessor for Continuation(0, v13, v14, MEMORY[0x24BEE3F20]);
    Continuation.resume(returning:file:line:column:function:)(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Task+Promise.swift", 124, 2, 153, 46, (uint64_t)"track(task:)", 12, 2, v15);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2447C7BA8()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2447C7BE4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v12 = v1[4];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[7];
  v7 = v1[8];
  v8 = v1[9];
  v9 = v1[10];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_2447C81F0;
  return sub_2447C77F4(a1, v4, v5, v6, v7, v8, v9, v12);
}

uint64_t sub_2447C7C8C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 32);
}

uint64_t sub_2447C7C94(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x24951AC70](&protocol conformance descriptor for Task<A, B>.Promise);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2447C7CC0()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for Task.Promise(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Task.Promise);
}

uint64_t sub_2447C7CD4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t sub_2447C7CF4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_2447C6FD8(a1, a2, *(uint64_t (**)(_QWORD *))(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_2447C7D14(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A208);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2447C7D54(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_2447C7DB8;
  return v6(a1);
}

uint64_t sub_2447C7DB8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_2447C7E04(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 32) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 40) = v3;
  *v3 = v2;
  v3[1] = sub_2447C7E6C;
  return v5(v2 + 16);
}

uint64_t sub_2447C7E6C()
{
  uint64_t *v0;
  uint64_t v1;
  _OWORD *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_OWORD **)(*v0 + 32);
  v4 = *v0;
  swift_task_dealloc();
  *v2 = *(_OWORD *)(v1 + 16);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_2447C7EBC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2447C7EE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_2447C81F0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_25738A308 + dword_25738A308))(a1, v4);
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x24951AC64](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_2447C7F94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_2447C81F0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_25738FC88 + dword_25738FC88))(a1, v4);
}

unint64_t sub_2447C8004()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25738A320;
  if (!qword_25738A320)
  {
    v1 = sub_2448EAF50();
    result = MEMORY[0x24951AC70](MEMORY[0x24BEE6848], v1);
    atomic_store(result, &qword_25738A320);
  }
  return result;
}

uint64_t sub_2447C804C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_2447C81F0;
  return sub_2447C6330(a1, v4, v5);
}

void sub_2447C80B0()
{
  uint64_t v0;

  sub_2447C658C(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 16));
}

uint64_t sub_2447C80B8(uint64_t a1)
{
  uint64_t v1;

  return sub_2447C6524(a1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 16));
}

uint64_t sub_2447C80C0(char *a1)
{
  uint64_t *v1;

  return sub_2447C674C(a1, v1[5], v1[2], v1[3], v1[4]);
}

uint64_t sub_2447C80CC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2447C80F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 24);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_2447C81F0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_25738A338 + dword_25738A338))(a1, v4);
}

uint64_t sub_2447C8170(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)type metadata accessor for Task.Promise(0, *(_QWORD *)(v1 + 16), MEMORY[0x24BEE4078], MEMORY[0x24BEE40A8]);
  return sub_2447C5AA8(a1, v3);
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x24951ABD4](a1, v6, a5);
}

uint64_t sub_2447C81F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v9;
  __int128 v10;

  if (a1)
  {
    *((_QWORD *)&v10 + 1) = type metadata accessor for QueryResolutions.Resolution(0, a4, a5, a4);
    *(_QWORD *)&v9 = a1;
    *((_QWORD *)&v9 + 1) = a2;
  }
  else
  {
    v9 = 0u;
    v10 = 0u;
  }
  return sub_244896064((uint64_t)&v9, a3);
}

_QWORD *QueryResolutions.init(_:)@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t)@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  sub_2447C8E84(MEMORY[0x24BEE4AF8]);
  v4 = swift_bridgeObjectRelease();
  result = a1(&v6, v4);
  *a2 = v6;
  return result;
}

uint64_t QueryResolutions.resolutions.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t inited;

  v3 = *v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A348);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2448ECF10;
  *(_QWORD *)(inited + 32) = v3;
  swift_bridgeObjectRetain();
  static QueryResolutionsBuilder.buildBlock(_:)(inited, a1);
  swift_setDeallocating();
  return swift_arrayDestroy();
}

uint64_t QueryResolutions.value<A>(for:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t AssociatedTypeWitness;

  v9 = (void (*)(uint64_t, uint64_t))sub_2447C8404(a3, *v5, a3, a4);
  if (v9)
  {
    v10 = (uint64_t)v9;
    v9(a1, a2);
    return sub_2447C8F84(v10);
  }
  else
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a5, 1, 1, AssociatedTypeWitness);
  }
}

uint64_t sub_2447C8404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v11;
  _BYTE v12[32];

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v7 = sub_244828DC8(a1);
  if ((v8 & 1) == 0)
    return 0;
  sub_2447C92C4(*(_QWORD *)(a2 + 56) + 32 * v7, (uint64_t)v12);
  type metadata accessor for QueryResolutions.Resolution(0, a3, a4, v9);
  if (swift_dynamicCast())
    return v11;
  else
    return 0;
}

unint64_t static QueryResolutions.empty.getter@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;

  result = sub_2447C8E84(MEMORY[0x24BEE4AF8]);
  *a1 = result;
  return result;
}

Swift::Void __swiftcall QueryResolutions.merge(with:)(PreviewsFoundationOS::QueryResolutions with)
{
  uint64_t *v1;
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;

  v2 = *(_QWORD *)with.storage.resolutions._rawValue;
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4 = *v1;
  *v1 = 0x8000000000000000;
  sub_24482F50C(v2, (uint64_t)sub_24482F4E0, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v4);
  *v1 = v4;
  swift_bridgeObjectRelease();
}

uint64_t sub_2447C8548@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t inited;

  v3 = *v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A348);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2448ECF10;
  *(_QWORD *)(inited + 32) = v3;
  swift_bridgeObjectRetain();
  static QueryResolutionsBuilder.buildBlock(_:)(inited, a1);
  swift_setDeallocating();
  return swift_arrayDestroy();
}

uint64_t static Query.resolve(using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  _QWORD *v10;

  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a3;
  v10[3] = a4;
  v10[4] = a1;
  v10[5] = a2;
  swift_retain();
  static Query.resolve(using:)((uint64_t)sub_2447C8FB8, (uint64_t)v10, a3, a4, a5);
  return swift_release();
}

{
  swift_retain();
  *a5 = sub_2447C8E84(MEMORY[0x24BEE4AF8]);
  return sub_2447C81F8(a1, a2, a3, a3, a4);
}

{
  _QWORD *v10;

  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a3;
  v10[3] = a4;
  v10[4] = a1;
  v10[5] = a2;
  swift_retain();
  static Query.resolve(using:)((uint64_t)sub_2447C8FB8, (uint64_t)v10, a3, a4, a5);
  return swift_release();
}

unint64_t sub_2447C8758(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A3A0);
  v2 = (_QWORD *)sub_2448EBA3C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (char *)(a1 + 64);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 4);
    v6 = *((_QWORD *)v4 - 3);
    v7 = *((_QWORD *)v4 - 2);
    v8 = *((_QWORD *)v4 - 1);
    v9 = *v4;
    swift_bridgeObjectRetain();
    sub_2447C9254(v7, v8, v9);
    result = sub_244828D0C(v5, v6);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v2[6] + 16 * result);
    *v12 = v5;
    v12[1] = v6;
    v13 = v2[7] + 24 * result;
    *(_QWORD *)v13 = v7;
    *(_QWORD *)(v13 + 8) = v8;
    *(_BYTE *)(v13 + 16) = v9;
    v14 = v2[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v4 += 40;
    v2[2] = v16;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2447C8898(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A378);
  v2 = sub_2448EBA3C();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_2447C9300(v6, (uint64_t)&v15, &qword_25738A380);
    v7 = v15;
    v8 = v16;
    result = sub_244828D0C(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = sub_2447C920C((uint64_t)&v17, v3[7] + 40 * result);
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 56;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2447C89D8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A360);
  v2 = (_QWORD *)sub_2448EBA3C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_244828D0C(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2447C8AF0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A3A8);
  v2 = (_QWORD *)sub_2448EBA3C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_244828D0C(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2447C8C10(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A390);
  v2 = sub_2448EBA3C();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_2447C9300(v6, (uint64_t)&v15, &qword_25738A398);
    v7 = v15;
    v8 = v16;
    result = sub_244828D0C(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_2447C91FC(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2447C8D44(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A368);
  v2 = sub_2448EBA3C();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_2447C9300(v6, (uint64_t)v15, &qword_25738A370);
    result = sub_244828E5C((uint64_t)v15);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v9 = v3[6] + 40 * result;
    v10 = v15[0];
    v11 = v15[1];
    *(_QWORD *)(v9 + 32) = v16;
    *(_OWORD *)v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    result = (unint64_t)sub_2447C91FC(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2447C8E84(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A3B0);
    v3 = (_QWORD *)sub_2448EBA3C();
    for (i = a1 + 32; ; i += 40)
    {
      sub_2447C9300(i, (uint64_t)&v11, qword_25738A3B8);
      v5 = v11;
      result = sub_244828DC8(v11);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      result = (unint64_t)sub_2447C91FC(&v12, (_OWORD *)(v3[7] + 32 * result));
      v8 = v3[2];
      v9 = __OFADD__(v8, 1);
      v10 = v8 + 1;
      if (v9)
        goto LABEL_10;
      v3[2] = v10;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

uint64_t sub_2447C8F84(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_2447C8F94()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2447C8FB8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 32))();
}

ValueMetadata *type metadata accessor for QueryResolutions()
{
  return &type metadata for QueryResolutions;
}

ValueMetadata *type metadata accessor for QueryResolutions.ResolutionStorage()
{
  return &type metadata for QueryResolutions.ResolutionStorage;
}

unint64_t sub_2447C8FF8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unint64_t result;
  char v6;
  _OWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _OWORD *v11;
  char v12;
  __int128 v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A350);
  v3 = (_QWORD *)sub_2448EBA3C();
  v4 = *(_QWORD *)(a1 + 32);
  v13 = *(_OWORD *)(a1 + 40);
  result = sub_244828D70(v4);
  if ((v6 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  v7 = (_OWORD *)(a1 + 64);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v4;
    *(_OWORD *)(v3[7] + 16 * result) = v13;
    v8 = v3[2];
    v9 = __OFADD__(v8, 1);
    v10 = v8 + 1;
    if (v9)
      break;
    v3[2] = v10;
    if (!--v1)
      goto LABEL_8;
    v11 = (_OWORD *)((char *)v7 + 24);
    v4 = *((_QWORD *)v7 - 1);
    v13 = *v7;
    swift_retain();
    result = sub_244828D70(v4);
    v7 = v11;
    if ((v12 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_2447C90FC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A358);
  v3 = (_QWORD *)sub_2448EBA3C();
  v4 = *(_DWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  result = sub_244829040(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  v8 = (_QWORD *)(a1 + 56);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v3[6] + 4 * result) = v4;
    *(_QWORD *)(v3[7] + 8 * result) = v5;
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    v3[2] = v11;
    if (!--v1)
      goto LABEL_8;
    v12 = v8 + 2;
    v4 = *((_DWORD *)v8 - 2);
    v13 = *v8;
    swift_retain();
    result = sub_244829040(v4);
    v8 = v12;
    v5 = v13;
    if ((v14 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

_OWORD *sub_2447C91FC(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_2447C920C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A388);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2447C9254(uint64_t result, unint64_t a2, char a3)
{
  if (a3 == 4)
    return sub_2447C9274(result, a2);
  if (!a3)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_2447C9274(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t type metadata accessor for QueryResolutions.Resolution(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for QueryResolutions.Resolution);
}

uint64_t sub_2447C92C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_2447C9300(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_2447C9344()
{
  return swift_allocateGenericValueMetadata();
}

_QWORD *initializeBufferWithCopyOfBuffer for ConcurrentInvalidationObserverBox(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for ConcurrentInvalidationObserverBox()
{
  return swift_release();
}

_QWORD *assignWithCopy for ConcurrentInvalidationObserverBox(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for ConcurrentInvalidationObserverBox(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for BuiltProductPathResolver.Cache(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BuiltProductPathResolver.Cache(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t compare<A, B, C>(_:_:of:_:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  char v25;
  void (*v26)(char *, uint64_t);
  void (*v27)(char *, uint64_t);
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v31 = a6;
  v33 = a5;
  v29[1] = a2;
  v6 = *(_QWORD *)(*a2 + *MEMORY[0x24BEE46A8] + 8);
  v30 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)v29 - v11;
  v15 = *(_QWORD *)(v13 + v14);
  v32 = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x24BDAC7A8](v10);
  v18 = (char *)v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)v29 - v19;
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  if ((sub_2448EAA64() & 1) != 0)
  {
    swift_getAtKeyPath();
    swift_getAtKeyPath();
    v21 = sub_2448EAA64();
    v22 = v32;
    v23 = v30;
    if ((v21 & 1) != 0)
    {
      v24 = *(void (**)(char *, uint64_t))(v30 + 8);
      v24(v9, v6);
      v24(v12, v6);
      v25 = 0;
    }
    else
    {
      v25 = sub_2448EA9BC();
      v26 = *(void (**)(char *, uint64_t))(v23 + 8);
      v26(v9, v6);
      v26(v12, v6);
    }
  }
  else
  {
    v25 = sub_2448EA9BC();
    v22 = v32;
  }
  v27 = *(void (**)(char *, uint64_t))(v22 + 8);
  v27(v18, v15);
  v27(v20, v15);
  return v25 & 1;
}

uint64_t compare<A, B, C, D>(_:_:_:of:_:)(uint64_t a1, char *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  char v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  void (*v48)(char *, uint64_t);
  void (*v50)(char *, uint64_t);
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v56 = a8;
  v59 = a2;
  v60 = a7;
  v64 = a6;
  v58 = a3;
  v55 = *(_QWORD *)(*a3 + *MEMORY[0x24BEE46A8] + 8);
  v57 = *(_QWORD *)(v55 - 8);
  v9 = MEMORY[0x24BDAC7A8](a1);
  v54 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v53 - v12;
  v16 = *(_QWORD *)(v14 + v15);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v11);
  v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)&v53 - v22;
  v26 = *(_QWORD *)(v24 + v25);
  v63 = *(_QWORD *)(v26 - 8);
  v27 = MEMORY[0x24BDAC7A8](v21);
  v29 = (char *)&v53 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)&v53 - v30;
  v61 = v32;
  swift_getAtKeyPath();
  v62 = a5;
  swift_getAtKeyPath();
  if ((sub_2448EAA64() & 1) == 0)
  {
    v44 = sub_2448EA9BC();
LABEL_7:
    v40 = v63;
    goto LABEL_8;
  }
  v64 = v17;
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  v33 = sub_2448EAA64();
  v34 = v23;
  v35 = v20;
  if ((v33 & 1) == 0)
  {
    v45 = v34;
    v44 = sub_2448EA9BC();
    v46 = v16;
    v47 = *(void (**)(char *, uint64_t))(v64 + 8);
    v47(v20, v46);
    v47(v45, v46);
    goto LABEL_7;
  }
  v59 = v34;
  v60 = v16;
  swift_getAtKeyPath();
  v36 = v54;
  swift_getAtKeyPath();
  v37 = v55;
  v38 = v13;
  v39 = sub_2448EAA64();
  v40 = v63;
  if ((v39 & 1) != 0)
  {
    v41 = *(void (**)(char *, uint64_t))(v57 + 8);
    v41(v36, v37);
    v41(v38, v37);
    v42 = *(void (**)(char *, uint64_t))(v64 + 8);
    v43 = v60;
    v42(v35, v60);
    v42(v59, v43);
    v44 = 0;
  }
  else
  {
    v44 = sub_2448EA9BC();
    v50 = *(void (**)(char *, uint64_t))(v57 + 8);
    v50(v36, v37);
    v50(v38, v37);
    v51 = *(void (**)(char *, uint64_t))(v64 + 8);
    v52 = v60;
    v51(v35, v60);
    v51(v59, v52);
  }
LABEL_8:
  v48 = *(void (**)(char *, uint64_t))(v40 + 8);
  v48(v29, v26);
  v48(v31, v26);
  return v44 & 1;
}

uint64_t compare<A, B, C, D, E>(_:_:_:_:of:_:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  void (*v57)(char *, uint64_t);
  char v58;
  void (*v59)(char *, uint64_t);
  char *v60;
  void (*v61)(char *, uint64_t);
  void (*v62)(char *, uint64_t);
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  void (*v66)(char *, uint64_t);
  char *v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v82 = a2;
  v83 = a8;
  v86 = a7;
  v87 = a6;
  v81 = a3;
  v74 = a4;
  v75 = *(_QWORD *)(*a4 + *MEMORY[0x24BEE46A8] + 8);
  v76 = *(_QWORD *)(v75 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  v77 = (char *)&v70 - v11;
  v12 = MEMORY[0x24BDAC7A8](v11);
  v78 = (char *)&v70 - v12;
  v80 = *(_QWORD *)(v13 + v14);
  v79 = *(_QWORD *)(v80 - 8);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v70 - v19;
  v23 = *(_QWORD *)(v21 + v22);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = MEMORY[0x24BDAC7A8](v18);
  v27 = (char *)&v70 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x24BDAC7A8](v25);
  v30 = (char *)&v70 - v29;
  v33 = *(_QWORD *)(v31 + v32);
  v85 = *(_QWORD *)(v33 - 8);
  v34 = MEMORY[0x24BDAC7A8](v28);
  v36 = (char *)&v70 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v34);
  v38 = (char *)&v70 - v37;
  v84 = v39;
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  if ((sub_2448EAA64() & 1) == 0)
  {
    v58 = sub_2448EA9BC();
    v50 = v85;
    v51 = v33;
    goto LABEL_10;
  }
  v71 = v17;
  v72 = v33;
  v73 = v36;
  v40 = v20;
  v86 = v24;
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  v41 = v30;
  if ((sub_2448EAA64() & 1) == 0)
  {
    v58 = sub_2448EA9BC();
    v59 = *(void (**)(char *, uint64_t))(v86 + 8);
    v59(v27, v23);
    v60 = v41;
LABEL_9:
    v59(v60, v23);
    v50 = v85;
    v51 = v72;
    v36 = v73;
    goto LABEL_10;
  }
  v83 = v30;
  v42 = v20;
  swift_getAtKeyPath();
  v43 = v71;
  swift_getAtKeyPath();
  v44 = v80;
  if ((sub_2448EAA64() & 1) == 0)
  {
    v58 = sub_2448EA9BC();
    v61 = *(void (**)(char *, uint64_t))(v79 + 8);
    v61(v43, v44);
    v61(v40, v44);
    v59 = *(void (**)(char *, uint64_t))(v86 + 8);
    v59(v27, v23);
    v60 = v83;
    goto LABEL_9;
  }
  v45 = v78;
  swift_getAtKeyPath();
  v46 = v77;
  swift_getAtKeyPath();
  v87 = a10;
  v47 = v75;
  v48 = sub_2448EAA64();
  v49 = v47;
  v50 = v85;
  v51 = v72;
  v36 = v73;
  if ((v48 & 1) != 0)
  {
    v52 = *(void (**)(char *, uint64_t))(v76 + 8);
    v53 = v46;
    v54 = v49;
    v52(v53, v49);
    v52(v45, v54);
    v55 = v80;
    v56 = *(void (**)(char *, uint64_t))(v79 + 8);
    v56(v71, v80);
    v56(v42, v55);
    v57 = *(void (**)(char *, uint64_t))(v86 + 8);
    v57(v27, v23);
    v57(v83, v23);
    v58 = 0;
  }
  else
  {
    v64 = v47;
    v58 = sub_2448EA9BC();
    v65 = *(void (**)(char *, uint64_t))(v76 + 8);
    v65(v77, v64);
    v65(v78, v64);
    v66 = *(void (**)(char *, uint64_t))(v79 + 8);
    v67 = v27;
    v68 = v80;
    v66(v71, v80);
    v66(v42, v68);
    v69 = *(void (**)(char *, uint64_t))(v86 + 8);
    v69(v67, v23);
    v69(v83, v23);
  }
LABEL_10:
  v62 = *(void (**)(char *, uint64_t))(v50 + 8);
  v62(v36, v51);
  v62(v38, v51);
  return v58 & 1;
}

void *mergeEnvironmentVariables(environments:defaultMergeHandlers:additionalMergeHandlers:)(uint64_t a1, Swift::OpaquePointer a2, Swift::OpaquePointer a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  Swift::OpaquePointer right;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return (void *)sub_2447C8AF0(MEMORY[0x24BEE4AF8]);
  right._rawValue = *(void **)(a1 + 8 * v3 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = v3 + 3;
  do
  {
    v7 = swift_bridgeObjectRetain();
    mergeEnvironmentVariables(left:right:defaultMergeHandlers:additionalMergeHandlers:)((Swift::OpaquePointer)v7, &right, a2, a3);
    swift_bridgeObjectRelease();
    --v6;
  }
  while (v6 != 3);
  swift_bridgeObjectRelease();
  return right._rawValue;
}

Swift::Void __swiftcall mergeEnvironmentVariables(left:right:defaultMergeHandlers:additionalMergeHandlers:)(Swift::OpaquePointer left, Swift::OpaquePointer *right, Swift::OpaquePointer defaultMergeHandlers, Swift::OpaquePointer additionalMergeHandlers)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;
  char v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  char v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  char v59;
  _QWORD *v60;
  char v61;
  unint64_t v62;
  uint64_t v63;
  _BOOL8 v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  char v70;
  char v71;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  void *rawValue;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  Swift::OpaquePointer *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98[3];
  uint64_t v99;
  uint64_t v100;

  v8 = swift_bridgeObjectRetain();
  v9 = sub_2447CA724(v8);
  v10 = swift_bridgeObjectRetain();
  sub_2447CA8B8(v10, v9);
  v11 = swift_bridgeObjectRetain();
  v12 = sub_2447CE2E4(v11, &qword_25738A058, (uint64_t (*)(_QWORD *, _QWORD *, uint64_t, uint64_t))sub_2448212F4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_2447D1310);
  swift_bridgeObjectRelease();
  v98[0] = (uint64_t)v12;
  sub_2447CC55C(v98);
  swift_bridgeObjectRelease();
  v13 = v98[0];
  v98[0] = (uint64_t)defaultMergeHandlers._rawValue;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2447CBFC8((uint64_t)additionalMergeHandlers._rawValue);
  v89 = *(_QWORD *)(v13 + 16);
  if (!v89)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return;
  }
  v14 = 0;
  v15 = *(_QWORD *)(v98[0] + 16);
  v87 = v15;
  v88 = v13 + 32;
  v85 = v98[0] + 32;
  v91 = right;
  v86 = v13;
  rawValue = left._rawValue;
  while (v14 < *(_QWORD *)(v13 + 16))
  {
    v16 = (uint64_t *)(v88 + 16 * v14);
    v18 = *v16;
    v17 = v16[1];
    v19 = *((_QWORD *)left._rawValue + 2);
    swift_bridgeObjectRetain();
    v94 = v17;
    if (v19)
    {
      swift_bridgeObjectRetain();
      v20 = sub_244828D0C(v18, v17);
      if ((v21 & 1) != 0)
      {
        v22 = (uint64_t *)(*((_QWORD *)left._rawValue + 7) + 16 * v20);
        v23 = v22[1];
        v93 = *v22;
        swift_bridgeObjectRetain();
      }
      else
      {
        v93 = 0;
        v23 = 0;
      }
      swift_bridgeObjectRelease();
      v92 = v18;
      if (v15)
      {
LABEL_23:
        v44 = v15;
        v90 = v14;
        swift_bridgeObjectRetain();
        v45 = 0;
        v46 = v85;
        v47 = v44;
        while (1)
        {
          sub_2447CE01C(v46, (uint64_t)v98);
          v48 = v99;
          v49 = v100;
          __swift_project_boxed_opaque_existential_1(v98, v99);
          v50 = v91->_rawValue;
          v51 = *((_QWORD *)v91->_rawValue + 2);
          swift_bridgeObjectRetain();
          if (v51)
          {
            swift_bridgeObjectRetain();
            v52 = sub_244828D0C(v18, v94);
            if ((v53 & 1) != 0)
            {
              v54 = (uint64_t *)(v50[7] + 16 * v52);
              v55 = *v54;
              v51 = v54[1];
              swift_bridgeObjectRetain();
            }
            else
            {
              v55 = 0;
              v51 = 0;
            }
            v56 = v94;
            swift_bridgeObjectRelease();
          }
          else
          {
            v55 = 0;
            v56 = v94;
          }
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 8))(&v96, v92, v56, v93, v23, v55, v51, v48, v49);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v57 = v97;
          if (v97 != 1)
            break;
          v18 = v92;
LABEL_25:
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
          v46 += 40;
          if (!--v47)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            left._rawValue = rawValue;
            v13 = v86;
            v14 = v90;
            if (!v45)
              goto LABEL_12;
            goto LABEL_4;
          }
        }
        v93 = v96;
        swift_bridgeObjectRelease();
        v58 = __OFADD__(v45++, 1);
        if (v58)
        {
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
          break;
        }
        if (!v57)
        {
          swift_bridgeObjectRetain();
          v18 = v92;
          v69 = sub_244828D0C(v92, v94);
          v71 = v70;
          swift_bridgeObjectRelease();
          if ((v71 & 1) != 0)
          {
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v73 = (uint64_t)v91->_rawValue;
            v95 = v91->_rawValue;
            v91->_rawValue = (void *)0x8000000000000000;
            if (!isUniquelyReferenced_nonNull_native)
            {
              sub_24482DB74();
              v73 = (uint64_t)v95;
            }
            swift_bridgeObjectRelease();
            sub_2447CD0F8(v69, v73);
            v91->_rawValue = (void *)v73;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v23 = 0;
          goto LABEL_25;
        }
        swift_bridgeObjectRetain();
        sub_2447CE060(v93, v57);
        v59 = swift_isUniquelyReferenced_nonNull_native();
        v60 = v91->_rawValue;
        v91->_rawValue = (void *)0x8000000000000000;
        v18 = v92;
        v62 = sub_244828D0C(v92, v94);
        v63 = v60[2];
        v64 = (v61 & 1) == 0;
        v65 = v63 + v64;
        if (__OFADD__(v63, v64))
          goto LABEL_63;
        v66 = v61;
        if (v60[3] >= v65)
        {
          if ((v59 & 1) != 0)
          {
            if ((v61 & 1) == 0)
              goto LABEL_49;
          }
          else
          {
            sub_24482DB74();
            if ((v66 & 1) == 0)
              goto LABEL_49;
          }
        }
        else
        {
          sub_24482AA04(v65, v59);
          v67 = sub_244828D0C(v92, v94);
          if ((v66 & 1) != (v68 & 1))
            goto LABEL_68;
          v62 = v67;
          if ((v66 & 1) == 0)
          {
LABEL_49:
            v60[(v62 >> 6) + 8] |= 1 << v62;
            v75 = (uint64_t *)(v60[6] + 16 * v62);
            *v75 = v92;
            v75[1] = v94;
            v76 = (uint64_t *)(v60[7] + 16 * v62);
            *v76 = v93;
            v76[1] = v57;
            v77 = v60[2];
            v58 = __OFADD__(v77, 1);
            v78 = v77 + 1;
            if (v58)
              goto LABEL_64;
            v60[2] = v78;
            swift_bridgeObjectRetain();
            goto LABEL_51;
          }
        }
        v74 = (uint64_t *)(v60[7] + 16 * v62);
        swift_bridgeObjectRelease();
        *v74 = v93;
        v74[1] = v57;
LABEL_51:
        v91->_rawValue = v60;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v23 = v57;
        goto LABEL_25;
      }
    }
    else
    {
      v93 = 0;
      v23 = 0;
      v92 = v18;
      if (v15)
        goto LABEL_23;
    }
    swift_bridgeObjectRelease();
LABEL_12:
    if (*((_QWORD *)v91->_rawValue + 2)
      && (swift_bridgeObjectRetain(), sub_244828D0C(v18, v94), v25 = v24, swift_bridgeObjectRelease(), (v25 & 1) != 0)
      || !*((_QWORD *)left._rawValue + 2))
    {
LABEL_4:
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      v26 = sub_244828D0C(v18, v94);
      if ((v27 & 1) != 0)
      {
        v28 = v18;
        v29 = v14;
        v30 = (uint64_t *)(*((_QWORD *)left._rawValue + 7) + 16 * v26);
        v32 = *v30;
        v31 = v30[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v33 = swift_isUniquelyReferenced_nonNull_native();
        v98[0] = (uint64_t)v91->_rawValue;
        v34 = v98[0];
        v91->_rawValue = (void *)0x8000000000000000;
        v36 = sub_244828D0C(v28, v94);
        v37 = *(_QWORD *)(v34 + 16);
        v38 = (v35 & 1) == 0;
        v39 = v37 + v38;
        if (__OFADD__(v37, v38))
          goto LABEL_66;
        v40 = v35;
        if (*(_QWORD *)(v34 + 24) >= v39)
        {
          if ((v33 & 1) != 0)
          {
            v43 = (_QWORD *)v98[0];
            if ((v35 & 1) == 0)
              goto LABEL_57;
          }
          else
          {
            sub_24482DB74();
            v43 = (_QWORD *)v98[0];
            if ((v40 & 1) == 0)
              goto LABEL_57;
          }
        }
        else
        {
          sub_24482AA04(v39, v33);
          v41 = sub_244828D0C(v92, v94);
          if ((v40 & 1) != (v42 & 1))
            goto LABEL_68;
          v36 = v41;
          v43 = (_QWORD *)v98[0];
          if ((v40 & 1) == 0)
          {
LABEL_57:
            v43[(v36 >> 6) + 8] |= 1 << v36;
            v80 = (uint64_t *)(v43[6] + 16 * v36);
            *v80 = v92;
            v80[1] = v94;
            v81 = (_QWORD *)(v43[7] + 16 * v36);
            *v81 = v32;
            v81[1] = v31;
            v82 = v43[2];
            v58 = __OFADD__(v82, 1);
            v83 = v82 + 1;
            if (v58)
              goto LABEL_67;
            v43[2] = v83;
            swift_bridgeObjectRetain();
            goto LABEL_59;
          }
        }
        v79 = (_QWORD *)(v43[7] + 16 * v36);
        swift_bridgeObjectRelease();
        *v79 = v32;
        v79[1] = v31;
LABEL_59:
        v91->_rawValue = v43;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v13 = v86;
        v14 = v29;
        goto LABEL_5;
      }
      swift_bridgeObjectRelease_n();
    }
LABEL_5:
    ++v14;
    v15 = v87;
    if (v14 == v89)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return;
    }
  }
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  sub_2448EBC7C();
  __break(1u);
  swift_release();
  __break(1u);
}

uint64_t sub_2447CA724(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = sub_2448EB0D0();
  v3 = 0;
  v18 = result;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_244848584(&v17, v12, v13);
    result = swift_bridgeObjectRelease();
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_2447CA8B8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = result;
  v3 = 0;
  v18 = a2;
  v4 = result + 64;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_244848584(&v17, v12, v13);
    result = swift_bridgeObjectRelease();
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t DYLDEnvironmentVariablePathMergeHandler.merge(key:left:right:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t result;
  uint64_t inited;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  if (qword_257389C40 != -1)
    swift_once();
  result = sub_2447CB520(a1, a2, qword_25738A440);
  if ((result & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0E0);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2448ECFE0;
    *(_QWORD *)(inited + 32) = a3;
    *(_QWORD *)(inited + 40) = a4;
    *(_QWORD *)(inited + 48) = a5;
    *(_QWORD *)(inited + 56) = a6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = splitAndDedupeDYLDPathEnvironmentValues(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0E8);
    swift_arrayDestroy();
    sub_2447CAEAC((uint64_t)v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A448);
    sub_2447D0934();
    sub_2447D0980();
    v17 = sub_2448EAD88();
    v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 0x2000000000000000) != 0)
      v20 = HIBYTE(v19) & 0xF;
    else
      v20 = v17 & 0xFFFFFFFFFFFFLL;
    result = swift_bridgeObjectRelease();
    if (v20)
    {
      *a7 = v17;
      a7[1] = v19;
    }
    else
    {
      result = swift_bridgeObjectRelease();
      *a7 = 0;
      a7[1] = 0;
    }
  }
  else
  {
    *(_OWORD *)a7 = xmmword_2448ECFD0;
  }
  return result;
}

Swift::Bool __swiftcall isDYLDParseablePathKey(_:)(Swift::String a1)
{
  void *object;
  uint64_t countAndFlagsBits;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  if (qword_257389C40 != -1)
    swift_once();
  return sub_2447CB520(countAndFlagsBits, (uint64_t)object, qword_25738A440);
}

_QWORD *splitAndDedupeDYLDPathEnvironmentValues(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD v24[5];
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  _QWORD *v30;

  sub_2447CB8C8(MEMORY[0x24BEE4AF8], &v30);
  v26 = *(_QWORD *)(a1 + 16);
  if (v26)
  {
    v24[4] = a1;
    v25 = a1 + 32;
    v2 = swift_bridgeObjectRetain();
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v25 + 16 * v3 + 8);
      if (v5)
        v6 = *(_QWORD *)(v25 + 16 * v3);
      else
        v6 = 0;
      if (v5)
        v7 = *(_QWORD *)(v25 + 16 * v3 + 8);
      else
        v7 = 0xE000000000000000;
      v29[0] = 58;
      v29[1] = 0xE100000000000000;
      MEMORY[0x24BDAC7A8](v2);
      v24[2] = v29;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v8 = sub_2447CC5C4(0x7FFFFFFFFFFFFFFFLL, 1, sub_2447D09C4, (uint64_t)v24, v6, v7);
      v9 = *(_QWORD *)(v8 + 16);
      if (v9)
      {
        v27 = v7;
        v28 = v4;
        v29[0] = MEMORY[0x24BEE4AF8];
        sub_2447CEE18(0, v9, 0);
        v10 = v29[0];
        v11 = (uint64_t *)(v8 + 56);
        do
        {
          v12 = *(v11 - 3);
          v13 = *(v11 - 2);
          v14 = *(v11 - 1);
          v15 = *v11;
          swift_bridgeObjectRetain();
          v16 = MEMORY[0x2495192FC](v12, v13, v14, v15);
          v18 = v17;
          swift_bridgeObjectRelease();
          v29[0] = v10;
          v20 = *(_QWORD *)(v10 + 16);
          v19 = *(_QWORD *)(v10 + 24);
          if (v20 >= v19 >> 1)
          {
            sub_2447CEE18(v19 > 1, v20 + 1, 1);
            v10 = v29[0];
          }
          *(_QWORD *)(v10 + 16) = v20 + 1;
          v21 = v10 + 16 * v20;
          *(_QWORD *)(v21 + 32) = v16;
          *(_QWORD *)(v21 + 40) = v18;
          v11 += 4;
          --v9;
        }
        while (v9);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v4 = v28;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v10 = MEMORY[0x24BEE4AF8];
      }
      ++v3;
      sub_2447CBB20(v10);
      v2 = swift_bridgeObjectRelease();
    }
    while (v3 != v26);
    swift_bridgeObjectRelease();
  }
  v22 = sub_2447CDF50(v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v22;
}

uint64_t sub_2447CAEAC(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_2447CEE50(0, v1, 0);
    v2 = v11;
    v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain_n();
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0E8);
      swift_dynamicCast();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2447CEE50(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v11;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_2447CEE50(v5 > 1, v6 + 1, 1);
        v2 = v11;
      }
      v4 += 16;
      *(_QWORD *)(v2 + 16) = v6 + 1;
      v7 = v2 + 16 * v6;
      *(_QWORD *)(v7 + 32) = v9;
      *(_QWORD *)(v7 + 40) = v10;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_2447CAFE8(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  id *v4;
  id v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v10 = MEMORY[0x24BEE4AF8];
    sub_2447CEEC0(0, v1, 0);
    v2 = v10;
    v4 = (id *)(a1 + 32);
    do
    {
      v5 = *v4;
      v6 = *v4;
      v8 = *(_QWORD *)(v10 + 16);
      v7 = *(_QWORD *)(v10 + 24);
      if (v8 >= v7 >> 1)
        sub_2447CEEC0(v7 > 1, v8 + 1, 1);
      *(_QWORD *)(v10 + 16) = v8 + 1;
      *(_QWORD *)(v10 + 8 * v8 + 32) = v5;
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t joinDYLDPathEnvironmentPaths<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v0 = sub_2448EB7CC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v15 - v2;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0E8);
  v4 = sub_2448EB904();
  MEMORY[0x24951AC70](MEMORY[0x24BEE2B40], v4);
  v5 = sub_2448EBA00();
  MEMORY[0x24951AC70](MEMORY[0x24BEE2FF8], v5);
  v6 = sub_2448EB904();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v15 - v8;
  sub_2448EACEC();
  MEMORY[0x24951AC70](MEMORY[0x24BEE25B0], v0);
  sub_2448EBA60();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  MEMORY[0x24951AC70](MEMORY[0x24BEE2B40], v6);
  sub_2447D0980();
  v10 = sub_2448EAD88();
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0)
    v13 = v10 & 0xFFFFFFFFFFFFLL;
  if (!v13)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v10;
}

uint64_t sub_2447CB298@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return DYLDEnvironmentVariablePathMergeHandler.merge(key:left:right:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t InjectLibraryFirstEnvironmentVariableMergeHandler.path.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InjectLibraryFirstEnvironmentVariableMergeHandler.path.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*InjectLibraryFirstEnvironmentVariableMergeHandler.path.modify())()
{
  return nullsub_1;
}

PreviewsFoundationOS::InjectLibraryFirstEnvironmentVariableMergeHandler __swiftcall InjectLibraryFirstEnvironmentVariableMergeHandler.init(path:)(PreviewsFoundationOS::InjectLibraryFirstEnvironmentVariableMergeHandler path)
{
  PreviewsFoundationOS::InjectLibraryFirstEnvironmentVariableMergeHandler *v1;

  *v1 = path;
  return path;
}

uint64_t InjectLibraryFirstEnvironmentVariableMergeHandler.merge(key:left:right:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t *v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t inited;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v14 = *v7;
  v13 = v7[1];
  if (a1 == 0xD000000000000015 && a2 == 0x80000002448F8F00 || (result = sub_2448EBBEC(), (result & 1) != 0))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0E0);
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 32) = v14;
    *(_OWORD *)(inited + 16) = xmmword_2448ECFF0;
    *(_QWORD *)(inited + 40) = v13;
    *(_QWORD *)(inited + 48) = a3;
    *(_QWORD *)(inited + 56) = a4;
    *(_QWORD *)(inited + 64) = a5;
    *(_QWORD *)(inited + 72) = a6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = splitAndDedupeDYLDPathEnvironmentValues(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0E8);
    swift_arrayDestroy();
    sub_2447CAEAC((uint64_t)v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A448);
    sub_2447D0934();
    sub_2447D0980();
    v18 = sub_2448EAD88();
    v20 = v19;
    swift_bridgeObjectRelease();
    if ((v20 & 0x2000000000000000) != 0)
      v21 = HIBYTE(v20) & 0xF;
    else
      v21 = v18 & 0xFFFFFFFFFFFFLL;
    result = swift_bridgeObjectRelease();
    if (v21)
    {
      *a7 = v18;
      a7[1] = v20;
    }
    else
    {
      result = swift_bridgeObjectRelease();
      *a7 = 0;
      a7[1] = 0;
    }
  }
  else
  {
    *(_OWORD *)a7 = xmmword_2448ECFD0;
  }
  return result;
}

uint64_t static EnvironmentVariableMergeHandler<>.injectLibraryFirst(path:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_2447CB520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_2448EBD00();
    sub_2448EAB60();
    v6 = sub_2448EBD3C();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_2448EBBEC() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_2448EBBEC() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

BOOL sub_2447CB654(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  sub_2448EBD00();
  sub_2448EBD30();
  v4 = sub_2448EBD3C();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(v8 + 8 * v6) == a1)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(_QWORD *)(v8 + 8 * v11);
    result = v12 == a1;
    if (v12 == a1)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t splitDYLDPathEnvironmentValue(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];
  _QWORD v8[2];

  v8[0] = 58;
  v8[1] = 0xE100000000000000;
  v7[2] = v8;
  swift_bridgeObjectRetain();
  v4 = sub_2447CC5C4(0x7FFFFFFFFFFFFFFFLL, 1, sub_2447D09C4, (uint64_t)v7, a1, a2);
  v5 = sub_2447CB7CC(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_2447CB7CC(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v16 = MEMORY[0x24BEE4AF8];
    sub_2447CEE18(0, v1, 0);
    v2 = v16;
    v4 = (uint64_t *)(a1 + 56);
    do
    {
      v5 = *(v4 - 3);
      v6 = *(v4 - 2);
      v7 = *(v4 - 1);
      v8 = *v4;
      swift_bridgeObjectRetain();
      v9 = MEMORY[0x2495192FC](v5, v6, v7, v8);
      v11 = v10;
      swift_bridgeObjectRelease();
      v13 = *(_QWORD *)(v16 + 16);
      v12 = *(_QWORD *)(v16 + 24);
      if (v13 >= v12 >> 1)
        sub_2447CEE18(v12 > 1, v13 + 1, 1);
      *(_QWORD *)(v16 + 16) = v13 + 1;
      v14 = v16 + 16 * v13;
      *(_QWORD *)(v14 + 32) = v9;
      *(_QWORD *)(v14 + 40) = v11;
      v4 += 4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_2447CB8C8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  v2 = a2;
  v26 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v27 = MEMORY[0x24BEE4B08];
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    result = swift_bridgeObjectRelease();
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v22 = MEMORY[0x24BEE4B08];
    goto LABEL_27;
  }
  v4 = 0;
  v24 = a1 + 32;
  v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    v6 = (uint64_t *)(v24 + 16 * v4);
    v8 = *v6;
    v7 = v6[1];
    v9 = v27;
    if (*(_QWORD *)(v27 + 16))
    {
      sub_2448EBD00();
      swift_bridgeObjectRetain();
      sub_2448EAB60();
      v10 = sub_2448EBD3C();
      v11 = -1 << *(_BYTE *)(v9 + 32);
      v12 = v10 & ~v11;
      if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
      {
        v13 = *(_QWORD *)(v9 + 48);
        v14 = (_QWORD *)(v13 + 16 * v12);
        v15 = *v14 == v8 && v14[1] == v7;
        if (v15 || (sub_2448EBBEC() & 1) != 0)
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        while (1)
        {
          v12 = (v12 + 1) & ~v11;
          if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
            break;
          v16 = (_QWORD *)(v13 + 16 * v12);
          v17 = *v16 == v8 && v16[1] == v7;
          if (v17 || (sub_2448EBBEC() & 1) != 0)
            goto LABEL_3;
        }
      }
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    sub_244848584(&v25, v8, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v5 = sub_2447C1B70(0, v5[2] + 1, 1, v5);
    v19 = v5[2];
    v18 = v5[3];
    if (v19 >= v18 >> 1)
      v5 = sub_2447C1B70((_QWORD *)(v18 > 1), v19 + 1, 1, v5);
    v5[2] = v19 + 1;
    v20 = &v5[2 * v19];
    v20[4] = v8;
    v20[5] = v7;
    swift_bridgeObjectRelease();
    v26 = v5;
LABEL_4:
    ++v4;
  }
  while (v4 != v3);
  result = swift_bridgeObjectRelease();
  v22 = v27;
  v2 = a2;
LABEL_27:
  *v2 = v5;
  v2[1] = v22;
  return result;
}

uint64_t sub_2447CBB20(uint64_t result)
{
  _QWORD **v1;
  _QWORD **v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  unint64_t i;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = *(_QWORD *)(result + 16);
  if (v26)
  {
    v2 = v1;
    v3 = (uint64_t *)(v1 + 1);
    v25 = result + 32;
    swift_bridgeObjectRetain();
    v4 = 0;
    while (1)
    {
      v5 = (uint64_t *)(v25 + 16 * v4);
      v7 = *v5;
      v6 = v5[1];
      v8 = *v3;
      if (!*(_QWORD *)(*v3 + 16))
        break;
      sub_2448EBD00();
      swift_bridgeObjectRetain();
      sub_2448EAB60();
      v9 = sub_2448EBD3C();
      v10 = -1 << *(_BYTE *)(v8 + 32);
      v11 = v9 & ~v10;
      v12 = v8 + 56;
      if (((*(_QWORD *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
        goto LABEL_21;
      v13 = *(_QWORD *)(v8 + 48);
      v14 = (_QWORD *)(v13 + 16 * v11);
      v15 = *v14 == v7 && v14[1] == v6;
      if (!v15 && (sub_2448EBBEC() & 1) == 0)
      {
        v16 = ~v10;
        for (i = v11 + 1; ; i = v18 + 1)
        {
          v18 = i & v16;
          if (((*(_QWORD *)(v12 + (((i & v16) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v16)) & 1) == 0)
            break;
          v19 = (_QWORD *)(v13 + 16 * v18);
          v20 = *v19 == v7 && v19[1] == v6;
          if (v20 || (sub_2448EBBEC() & 1) != 0)
            goto LABEL_3;
        }
        goto LABEL_21;
      }
LABEL_3:
      swift_bridgeObjectRelease();
LABEL_4:
      if (++v4 == v26)
        return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
LABEL_21:
    swift_bridgeObjectRetain();
    sub_244848584(&v27, v7, v6);
    swift_bridgeObjectRelease();
    v21 = *v2;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v21 = sub_2447C1B70(0, v21[2] + 1, 1, v21);
    v23 = v21[2];
    v22 = v21[3];
    if (v23 >= v22 >> 1)
      v21 = sub_2447C1B70((_QWORD *)(v22 > 1), v23 + 1, 1, v21);
    v21[2] = v23 + 1;
    v24 = &v21[2 * v23];
    v24[4] = v7;
    v24[5] = v6;
    swift_bridgeObjectRelease();
    *v2 = v21;
    goto LABEL_4;
  }
  return result;
}

uint64_t sub_2447CBD5C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_2447CBD68()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_244827E40((uint64_t)&unk_25157D820);
  result = swift_arrayDestroy();
  qword_25738A440 = v0;
  return result;
}

uint64_t RejectTestingLibTemporarily_127569585.merge(key:left:right:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t result;
  uint64_t inited;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  if (a1 == 0xD000000000000015 && a2 == 0x80000002448F8F00 || (result = sub_2448EBBEC(), (result & 1) != 0))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0E0);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2448ECFE0;
    *(_QWORD *)(inited + 32) = a3;
    *(_QWORD *)(inited + 40) = a4;
    *(_QWORD *)(inited + 48) = a5;
    *(_QWORD *)(inited + 56) = a6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14 = splitAndDedupeDYLDPathEnvironmentValues(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0E8);
    swift_arrayDestroy();
    v15 = sub_2447D0A8C((uint64_t)v14);
    swift_bridgeObjectRelease();
    sub_2447CAEAC(v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A448);
    sub_2447D0934();
    sub_2447D0980();
    v16 = sub_2448EAD88();
    v18 = v17;
    swift_bridgeObjectRelease();
    if ((v18 & 0x2000000000000000) != 0)
      v19 = HIBYTE(v18) & 0xF;
    else
      v19 = v16 & 0xFFFFFFFFFFFFLL;
    result = swift_bridgeObjectRelease();
    if (v19)
    {
      *a7 = v16;
      a7[1] = v18;
    }
    else
    {
      result = swift_bridgeObjectRelease();
      *a7 = 0;
      a7[1] = 0;
    }
  }
  else
  {
    *(_OWORD *)a7 = xmmword_2448ECFD0;
  }
  return result;
}

uint64_t sub_2447CBFB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return RejectTestingLibTemporarily_127569585.merge(key:left:right:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_2447CBFC8(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_2447C21FC(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8)
    goto LABEL_24;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A170);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447CC13C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_2447C1B70(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447CC28C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_2447C245C(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[18 * v9 + 4];
  if (a1 + 32 < v10 + 144 * v8 && v10 < a1 + 32 + 144 * v8)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447CC3E8(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v24 = v4 + v2;
  else
    v24 = v4;
  v3 = sub_2447C29B8(isUniquelyReferenced_nonNull_native, v24, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = *(_QWORD *)(v3 + 16);
  v10 = (*(_QWORD *)(v3 + 24) >> 1) - v9;
  v11 = sub_2448EA434();
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v3 + v13 + v14 * v9;
  v16 = a1 + v13;
  v17 = v14 * v8;
  v18 = v15 + v17;
  v19 = v16 + v17;
  if (v16 < v18 && v15 < v19)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v21 = *(_QWORD *)(v3 + 16);
  v22 = __OFADD__(v21, v8);
  v23 = v21 + v8;
  if (!v22)
  {
    *(_QWORD *)(v3 + 16) = v23;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447CC55C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_2448C5960(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_2447CE3CC(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_2447CC5C4(uint64_t a1, char a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  _QWORD v50[4];

  v50[3] = a4;
  if (a1 < 0)
    goto LABEL_42;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = MEMORY[0x24BEE4AF8];
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = 15;
  v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v12 = HIBYTE(a6) & 0xF) : (v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v11 = a5 & 0xFFFFFFFFFFFFLL;
    v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
      v30 = 11;
    sub_2447CCA60(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    v13 = *(_QWORD **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }
  v42 = a1;
  v43 = v10;
  v48 = 4 * v12;
  v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v14 = 15;
  v15 = 15;
  v16 = 15;
  while (1)
  {
    v50[0] = sub_2448EAC80();
    v50[1] = v17;
    v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
      break;
    v14 = sub_2448EAB84();
LABEL_9:
    if (v48 == v14 >> 14)
      goto LABEL_29;
  }
  if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
  {
    v14 = sub_2448EAB84();
    *(_QWORD *)(v47 + 16) = v14;
    v15 = v14;
    v16 = v14;
    goto LABEL_9;
  }
  if (v14 >> 14 < v15 >> 14)
    goto LABEL_41;
  v20 = sub_2448EACA4();
  v44 = v21;
  v45 = v20;
  v23 = v22;
  v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = sub_2447C20F0(0, v13[2] + 1, 1, v13);
  v27 = v13[2];
  v26 = v13[3];
  if (v27 >= v26 >> 1)
    v13 = sub_2447C20F0((_QWORD *)(v26 > 1), v27 + 1, 1, v13);
  v13[2] = v27 + 1;
  v28 = &v13[4 * v27];
  v28[4] = v45;
  v28[5] = v23;
  v28[6] = v25;
  v28[7] = v44;
  *(_QWORD *)(v43 + 16) = v13;
  v29 = sub_2448EAB84();
  v14 = v29;
  *(_QWORD *)(v47 + 16) = v29;
  if (v13[2] != v42)
  {
    v15 = v29;
    v16 = v29;
    goto LABEL_9;
  }
  v16 = v29;
  v15 = v29;
LABEL_29:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }
  if (v48 >= v16 >> 14)
  {
    v31 = sub_2448EACA4();
    v33 = v32;
    v35 = v34;
    v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = sub_2447C20F0(0, v13[2] + 1, 1, v13);
    v39 = v13[2];
    v38 = v13[3];
    if (v39 >= v38 >> 1)
      v13 = sub_2447C20F0((_QWORD *)(v38 > 1), v39 + 1, 1, v13);
    v13[2] = v39 + 1;
    v40 = &v13[4 * v39];
    v40[4] = v31;
    v40[5] = v33;
    v40[6] = v35;
    v40[7] = v37;
    *(_QWORD *)(v43 + 16) = v13;
    goto LABEL_38;
  }
LABEL_41:
  sub_2448EB994();
  __break(1u);
LABEL_42:
  result = sub_2448EB994();
  __break(1u);
  return result;
}

uint64_t sub_2447CCA60(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16) >> 14;
  v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1)
    return v5 ^ 1u;
  if (a1 >> 14 >= v4)
  {
    v7 = sub_2448EACA4();
    v9 = v8;
    v11 = v10;
    v13 = v12;
    v14 = *(_QWORD **)(a4 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v14 = sub_2447C20F0(0, v14[2] + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v17 = v14[2];
    v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      v14 = sub_2447C20F0((_QWORD *)(v16 > 1), v17 + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v14[2] = v17 + 1;
    v18 = &v14[4 * v17];
    v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  result = sub_2448EB994();
  __break(1u);
  return result;
}

unint64_t sub_2447CCBB8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t v16;
  __int128 *v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_2448EB6D0();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_2448EBD00();
        swift_bridgeObjectRetain();
        sub_2448EAB60();
        v10 = sub_2448EBD3C();
        result = swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_OWORD *)(v12 + 16 * v3);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = v15 + 24 * v3;
          v17 = (__int128 *)(v15 + 24 * v6);
          if (24 * v3 < (uint64_t)(24 * v6) || v16 >= (unint64_t)v17 + 24 || (v18 = v3 == v6, v3 = v6, !v18))
          {
            v9 = *v17;
            *(_QWORD *)(v16 + 16) = *((_QWORD *)v17 + 2);
            *(_OWORD *)v16 = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_2447CCDAC(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_2448EB6D0();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_2448EBD00();
        sub_2448EBD30();
        result = sub_2448EBD3C();
        v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 < v8)
            goto LABEL_5;
        }
        else if (v9 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v9)
        {
LABEL_11:
          v10 = *(_QWORD *)(a2 + 48);
          v11 = (_QWORD *)(v10 + 8 * v3);
          v12 = (_QWORD *)(v10 + 8 * v6);
          if (v3 != v6 || v11 >= v12 + 1)
            *v11 = *v12;
          v13 = *(_QWORD *)(a2 + 56);
          v14 = (_OWORD *)(v13 + 16 * v3);
          v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v14 >= v15 + 1))
          {
            *v14 = *v15;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v17 = *v16;
    v18 = (-1 << v3) - 1;
  }
  else
  {
    v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    v18 = *v16;
    v17 = (-1 << result) - 1;
  }
  *v16 = v18 & v17;
  v19 = *(_QWORD *)(a2 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_2447CCF64(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_2448EB6D0();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 48);
        v11 = (_QWORD *)(v10 + 8 * v6);
        result = sub_2448EBCF4();
        v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 >= v8 && v3 >= (uint64_t)v12)
          {
LABEL_16:
            v15 = (_QWORD *)(v10 + 8 * v3);
            if (v3 != v6 || v15 >= v11 + 1)
              *v15 = *v11;
            v16 = *(_QWORD *)(a2 + 56);
            v17 = (_OWORD *)(v16 + 32 * v3);
            v18 = (_OWORD *)(v16 + 32 * v6);
            if (v3 != v6 || (v3 = v6, v17 >= v18 + 2))
            {
              v9 = v18[1];
              *v17 = *v18;
              v17[1] = v9;
              v3 = v6;
            }
          }
        }
        else if (v12 >= v8 || v3 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_2447CD0F8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_2448EB6D0();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_2448EBD00();
        swift_bridgeObjectRetain();
        sub_2448EAB60();
        v9 = sub_2448EBD3C();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_2447CD2CC(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_2448EB6D0();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        sub_2448EBD00();
        sub_2448EBD30();
        result = sub_2448EBD3C();
        v9 = result & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v9 < v8)
          goto LABEL_11;
LABEL_12:
        v10 = *(_QWORD *)(a2 + 48);
        v11 = (_QWORD *)(v10 + 8 * v3);
        v12 = (_QWORD *)(v10 + 8 * v6);
        if (v3 != v6 || v11 >= v12 + 1)
          *v11 = *v12;
        v13 = *(_QWORD *)(a2 + 56);
        result = v13 + 32 * v3;
        if (v3 < (uint64_t)v6 || result >= v13 + 32 * v6 + 32)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v14 = v3 == v6;
          v3 = v6;
          if (v14)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_19;
      }
      if (v9 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v9)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_19:
    v15 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v16 = *v15;
    v17 = (-1 << v3) - 1;
  }
  else
  {
    v15 = (uint64_t *)(v4 + 8 * (result >> 6));
    v17 = *v15;
    v16 = (-1 << result) - 1;
  }
  *v15 = v17 & v16;
  v18 = *(_QWORD *)(a2 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v20;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_2447CD4AC(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_2448EB6D0();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_2448EBD00();
        sub_2448EBD30();
        result = sub_2448EBD3C();
        v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 < v8)
            goto LABEL_5;
        }
        else if (v9 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v9)
        {
LABEL_11:
          v10 = *(_QWORD *)(a2 + 48);
          v11 = (_QWORD *)(v10 + 8 * v3);
          v12 = (_QWORD *)(v10 + 8 * v6);
          if (v3 != v6 || v11 >= v12 + 1)
            *v11 = *v12;
          v13 = *(_QWORD *)(a2 + 56);
          v14 = (_QWORD *)(v13 + 8 * v3);
          v15 = (_QWORD *)(v13 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v14 >= v15 + 1))
          {
            *v14 = *v15;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v17 = *v16;
    v18 = (-1 << v3) - 1;
  }
  else
  {
    v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    v18 = *v16;
    v17 = (-1 << result) - 1;
  }
  *v16 = v18 & v17;
  v19 = *(_QWORD *)(a2 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_2447CD668(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v14;
  unint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _BYTE v28[40];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_2448EB6D0();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_2447D126C(*(_QWORD *)(a2 + 48) + 40 * v6, (uint64_t)v28);
        v10 = sub_2448EB6F4();
        result = sub_2447D12A8((uint64_t)v28);
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = *(_QWORD *)(a2 + 48);
            v15 = v14 + 40 * v3;
            v16 = (__int128 *)(v14 + 40 * v6);
            if (v3 != v6 || v15 >= (unint64_t)v16 + 40)
            {
              v17 = *v16;
              v18 = v16[1];
              *(_QWORD *)(v15 + 32) = *((_QWORD *)v16 + 4);
              *(_OWORD *)v15 = v17;
              *(_OWORD *)(v15 + 16) = v18;
            }
            v19 = *(_QWORD *)(a2 + 56);
            v20 = (_OWORD *)(v19 + 32 * v3);
            v21 = (_OWORD *)(v19 + 32 * v6);
            if (v3 != v6 || (v3 = v6, v20 >= v21 + 2))
            {
              v9 = v21[1];
              *v20 = *v21;
              v20[1] = v9;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_2447CD830(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_2448EB6D0();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_2448EBD00();
        sub_2448EBD0C();
        result = sub_2448EBD3C();
        v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 < v8)
            goto LABEL_5;
        }
        else if (v9 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v9)
        {
LABEL_11:
          v10 = *(_QWORD *)(a2 + 48);
          v11 = (_BYTE *)(v10 + v3);
          v12 = (_BYTE *)(v10 + v6);
          if (v3 != v6 || v11 >= v12 + 1)
            *v11 = *v12;
          v13 = *(_QWORD *)(a2 + 56);
          v14 = (_QWORD *)(v13 + 8 * v3);
          v15 = (_QWORD *)(v13 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v14 >= v15 + 1))
          {
            *v14 = *v15;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v17 = *v16;
    v18 = (-1 << v3) - 1;
  }
  else
  {
    v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    v18 = *v16;
    v17 = (-1 << result) - 1;
  }
  *v16 = v18 & v17;
  v19 = *(_QWORD *)(a2 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_2447CD9E8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_2448EB6D0();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        sub_2448EBD00();
        swift_bridgeObjectRetain();
        sub_2448EAB60();
        v9 = sub_2448EBD3C();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v10 < v8)
          goto LABEL_11;
LABEL_12:
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_OWORD *)(v11 + 16 * v3);
        v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1)
          *v12 = *v13;
        v14 = *(_QWORD *)(a2 + 56);
        v15 = *(_QWORD *)(*(_QWORD *)(sub_2448EA434() - 8) + 72);
        v16 = v15 * v3;
        result = v14 + v15 * v3;
        v17 = v15 * v6;
        v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v16 == v17)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v10 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v10)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_2447CDBE4(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_2448EB6D0();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_2448EBD00();
        swift_bridgeObjectRetain();
        sub_2448EAB60();
        v10 = sub_2448EBD3C();
        result = swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_OWORD *)(v12 + 16 * v3);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_OWORD *)(v15 + 32 * v3);
          v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 2))
          {
            v9 = v17[1];
            *v16 = *v17;
            v16[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_2447CDDB8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  _DWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_2448EB6D0();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_DWORD *)(v9 + 4 * v6);
        result = MEMORY[0x24951A4CC](*(_QWORD *)(a2 + 40), *v10, 4);
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_DWORD *)(v9 + 4 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            v16 = (_QWORD *)(v15 + 8 * v3);
            v17 = (_QWORD *)(v15 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

_QWORD *sub_2447CDF50(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = a1[2];
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A058);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = sub_2448211BC(&v8, v3 + 4, v1, a1);
  swift_release();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

uint64_t sub_2447CE01C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_2447CE060(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRetain();
  return result;
}

_QWORD *sub_2447CE074(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A4C0);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  v6 = sub_244821B84(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_2447D1030();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

uint64_t sub_2447CE158(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    v8 = 2 * v5;
    if (v5 <= 0)
    {
      v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = a2 + 16 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8)
          goto LABEL_19;
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A058);
      v9 = (_QWORD *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 17;
      v9[2] = v5;
      v9[3] = 2 * (v11 >> 4);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

_QWORD *sub_2447CE2C8(uint64_t a1)
{
  return sub_2447CE2E4(a1, &qword_25738A468, (uint64_t (*)(_QWORD *, _QWORD *, uint64_t, uint64_t))sub_244821D7C, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_2447D1030);
}

_QWORD *sub_2447CE2E4(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD *, _QWORD *, uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[5];

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v8 = (_QWORD *)swift_allocObject();
  v9 = _swift_stdlib_malloc_size(v8);
  v10 = v9 - 32;
  if (v9 < 32)
    v10 = v9 - 17;
  v8[2] = v4;
  v8[3] = 2 * (v10 >> 4);
  v11 = a3(v18, v8 + 4, v4, a1);
  v12 = v18[0];
  v13 = v18[1];
  v14 = v18[2];
  v15 = v18[3];
  v16 = v18[4];
  swift_bridgeObjectRetain();
  a4(v12, v13, v14, v15, v16);
  if (v11 != v4)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v8;
}

uint64_t sub_2447CE3CC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *__dst;

  v3 = a1[1];
  result = sub_2448EBB14();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return sub_2447CEAB4(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v105 = result;
  v102 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_118:
      v94 = v11;
      v104 = v8;
      if (v12 >= 2)
      {
        v95 = *v102;
        do
        {
          v96 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v95)
            goto LABEL_159;
          v97 = v94;
          v98 = *(_QWORD *)&v94[16 * v96 + 32];
          v99 = *(_QWORD *)&v94[16 * v12 + 24];
          sub_2447CEB80((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(_QWORD *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1)
            break;
          if (v99 < v98)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v97 = sub_2448C594C((uint64_t)v97);
          if (v96 >= *((_QWORD *)v97 + 2))
            goto LABEL_149;
          v100 = &v97[16 * v96 + 32];
          *(_QWORD *)v100 = v98;
          *((_QWORD *)v100 + 1) = v99;
          v101 = *((_QWORD *)v97 + 2);
          if (v12 > v101)
            goto LABEL_150;
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          v94 = v97;
          *((_QWORD *)v97 + 2) = v101 - 1;
          v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_2448EAE60();
    *(_QWORD *)(v7 + 16) = v6;
    v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v103 = v10 + 8;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v106 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v19 = 0;
    }
    else
    {
      v19 = sub_2448EBBEC();
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v21 = (_QWORD *)(v103 + 16 * v20);
    do
    {
      v23 = (_QWORD *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v19 ^ sub_2448EBBEC()) & 1) != 0)
      {
        goto LABEL_36;
      }
      v21 += 2;
      v22 = v20 + 1;
      v9 = v20;
      v20 = v22;
    }
    while (v22 < v3);
    v20 = v22;
LABEL_36:
    v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13)
        goto LABEL_155;
      if (v13 < v20)
      {
        v25 = 16 * v20;
        v26 = 16 * v13;
        v27 = v20;
        v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10)
              goto LABEL_158;
            v29 = v10 + v25;
            v30 = *(_QWORD *)(v10 + v26);
            v31 = *(_QWORD *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(_QWORD *)(v29 - 16) = v30;
            *(_QWORD *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v105)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_2448C57AC(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v41 = *((_QWORD *)v11 + 2);
    v40 = *((_QWORD *)v11 + 3);
    v12 = v41 + 1;
    if (v41 >= v40 >> 1)
      v11 = sub_2448C57AC((char *)(v40 > 1), v41 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v42 = v11 + 32;
    v43 = &v11[16 * v41 + 32];
    *(_QWORD *)v43 = v13;
    *((_QWORD *)v43 + 1) = v9;
    if (v41)
    {
      v107 = v9;
      while (1)
      {
        v44 = v12 - 1;
        if (v12 >= 4)
        {
          v49 = &v42[16 * v12];
          v50 = *((_QWORD *)v49 - 8);
          v51 = *((_QWORD *)v49 - 7);
          v55 = __OFSUB__(v51, v50);
          v52 = v51 - v50;
          if (v55)
            goto LABEL_135;
          v54 = *((_QWORD *)v49 - 6);
          v53 = *((_QWORD *)v49 - 5);
          v55 = __OFSUB__(v53, v54);
          v47 = v53 - v54;
          v48 = v55;
          if (v55)
            goto LABEL_136;
          v56 = v12 - 2;
          v57 = &v42[16 * v12 - 32];
          v59 = *(_QWORD *)v57;
          v58 = *((_QWORD *)v57 + 1);
          v55 = __OFSUB__(v58, v59);
          v60 = v58 - v59;
          if (v55)
            goto LABEL_138;
          v55 = __OFADD__(v47, v60);
          v61 = v47 + v60;
          if (v55)
            goto LABEL_141;
          if (v61 >= v52)
          {
            v79 = &v42[16 * v44];
            v81 = *(_QWORD *)v79;
            v80 = *((_QWORD *)v79 + 1);
            v55 = __OFSUB__(v80, v81);
            v82 = v80 - v81;
            if (v55)
              goto LABEL_145;
            v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v73 = *((_QWORD *)v11 + 4);
            v74 = *((_QWORD *)v11 + 5);
            v55 = __OFSUB__(v74, v73);
            v66 = v74 - v73;
            v67 = v55;
            goto LABEL_99;
          }
          v46 = *((_QWORD *)v11 + 4);
          v45 = *((_QWORD *)v11 + 5);
          v55 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          v48 = v55;
        }
        if ((v48 & 1) != 0)
          goto LABEL_137;
        v56 = v12 - 2;
        v62 = &v42[16 * v12 - 32];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v65 = __OFSUB__(v63, v64);
        v66 = v63 - v64;
        v67 = v65;
        if (v65)
          goto LABEL_140;
        v68 = &v42[16 * v44];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v55 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v55)
          goto LABEL_143;
        if (__OFADD__(v66, v71))
          goto LABEL_144;
        if (v66 + v71 >= v47)
        {
          v72 = v47 < v71;
LABEL_105:
          if (v72)
            v44 = v56;
          goto LABEL_107;
        }
LABEL_99:
        if ((v67 & 1) != 0)
          goto LABEL_139;
        v75 = &v42[16 * v44];
        v77 = *(_QWORD *)v75;
        v76 = *((_QWORD *)v75 + 1);
        v55 = __OFSUB__(v76, v77);
        v78 = v76 - v77;
        if (v55)
          goto LABEL_142;
        if (v78 < v66)
          goto LABEL_15;
LABEL_107:
        v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        v84 = v10;
        if (!v10)
          goto LABEL_157;
        v85 = v11;
        v86 = &v42[16 * v83];
        v87 = *(_QWORD *)v86;
        v88 = v42;
        v89 = v44;
        v90 = &v42[16 * v44];
        v91 = *((_QWORD *)v90 + 1);
        v92 = v84;
        sub_2447CEB80((char *)(v84 + 16 * *(_QWORD *)v86), (char *)(v84 + 16 * *(_QWORD *)v90), v84 + 16 * v91, __dst);
        if (v1)
          goto LABEL_115;
        if (v91 < v87)
          goto LABEL_132;
        if (v89 > *((_QWORD *)v85 + 2))
          goto LABEL_133;
        *(_QWORD *)v86 = v87;
        *(_QWORD *)&v88[16 * v83 + 8] = v91;
        v93 = *((_QWORD *)v85 + 2);
        if (v89 >= v93)
          goto LABEL_134;
        v11 = v85;
        v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        v42 = v88;
        *((_QWORD *)v85 + 2) = v93 - 1;
        v10 = v92;
        v9 = v107;
        if (v93 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v106;
    if (v9 >= v106)
    {
      v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105))
    goto LABEL_153;
  if (v13 + v105 >= v3)
    v32 = v3;
  else
    v32 = v13 + v105;
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      v33 = (_QWORD *)(v10 + 16 * v9);
      do
      {
        v34 = (uint64_t *)(v10 + 16 * v9);
        v35 = *v34;
        v36 = v34[1];
        v37 = v13;
        v38 = v33;
        do
        {
          v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (sub_2448EBBEC() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v35 = *v38;
          v36 = v38[1];
          *(_OWORD *)v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = sub_2448EB994();
  __break(1u);
  return result;
}

uint64_t sub_2447CEAB4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (result = sub_2448EBBEC(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_2447CEB80(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t result;
  char *v25;
  char *v26;
  char *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v27 = __src;
  v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v17 = &v4[16 * v13];
      v25 = v17;
      v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v18 = (char *)(a3 - 16);
        v19 = v6;
        while (1)
        {
          v20 = v18 + 16;
          v21 = *((_QWORD *)v19 - 2);
          v22 = *((_QWORD *)v19 - 1);
          v19 -= 16;
          v23 = *((_QWORD *)v17 - 2) == v21 && *((_QWORD *)v17 - 1) == v22;
          if (v23 || (sub_2448EBBEC() & 1) == 0)
          {
            v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17)
              *(_OWORD *)v18 = *((_OWORD *)v17 - 1);
            v19 = v6;
            v17 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v20 != v6 || v18 >= v6)
              *(_OWORD *)v18 = *(_OWORD *)v19;
            v27 = v19;
            if (v19 <= v7)
              goto LABEL_50;
          }
          v18 -= 16;
          v6 = v19;
          if (v17 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
        if (v15 || (sub_2448EBBEC() & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v26 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v27 = v7;
    }
LABEL_50:
    sub_2448C58A4((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447CEE18(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2447CEFF8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_2447CEE34(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2447CF160(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_2447CEE50(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2447CF2BC(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_2447CEE6C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2447CF444(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_2447CEE88(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2447CF5E4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_2447CEEA4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2447CF76C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_2447CEEC0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2447CF8F0(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_2447CEEDC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2447D00B8(a1, a2, a3, (_QWORD *)*v3, &qword_25738A498, &qword_25738A4A0);
  *v3 = result;
  return result;
}

uint64_t sub_2447CEF08(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2447CFA78(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_2447CEF24(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2447CFC0C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_2447CEF40(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2447CFDAC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_2447CEF5C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2447CFF20(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_2447CEF78(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2447D00B8(a1, a2, a3, (_QWORD *)*v3, &qword_25738A100, &qword_25738A108);
  *v3 = result;
  return result;
}

uint64_t sub_2447CEFA4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2447D0240(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_2447CEFC0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2447D056C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_2447CEFDC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2447D06D4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_2447CEFF8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A058);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447CF160(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A4B8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447CF2BC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0E0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0E8);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447CF444(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A478);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A480);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447CF5E4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A4D8);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A4E0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447CF76C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A130);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447CF8F0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0A0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8)
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0A8);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447CFA78(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0C0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 4;
  v13 = a4 + 4;
  v14 = 5 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v10 + 4, a4 + 4, v14 * 8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0C8);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447CFC0C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A488);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 80 * v8)
      memmove(v10 + 4, a4 + 4, 80 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 80 * v8 || v12 >= v13 + 80 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A490);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447CFDAC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A158);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 80 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447CFF20(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A4A8);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 4;
  v13 = a4 + 4;
  v14 = 3 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v10 + 4, a4 + 4, v14 * 8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A4B0);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447D00B8(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  size_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 1;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 5);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v16 = v13 + 4;
  v17 = a4 + 4;
  v18 = 4 * v11;
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v16 >= &v17[v18])
      memmove(v13 + 4, a4 + 4, v18 * 8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= &v16[v18] || v16 >= &v17[v18])
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447D0240(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A4C8);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A4D0);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447D03E4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A468);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A470);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447D056C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A460);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447D06D4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A030);
  v10 = *(_QWORD *)(type metadata accessor for IOPowerSource.Observer() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(type metadata accessor for IOPowerSource.Observer() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)v13 + v17;
  v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(_QWORD *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v16 + 72) * v8;
  v21 = &v18[v20];
  v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447D08B4(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_2448EBBEC() & 1;
}

BOOL sub_2447D0908(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) != 0;
}

uint64_t sub_2447D0918@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = a1[1];
  if (result)
  {
    *a2 = *a1;
    a2[1] = result;
    return swift_bridgeObjectRetain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_2447D0934()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25738A450;
  if (!qword_25738A450)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A448);
    result = MEMORY[0x24951AC70](MEMORY[0x24BEE2B40], v1);
    atomic_store(result, (unint64_t *)&qword_25738A450);
  }
  return result;
}

unint64_t sub_2447D0980()
{
  unint64_t result;

  result = qword_25738A458;
  if (!qword_25738A458)
  {
    result = MEMORY[0x24951AC70](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_25738A458);
  }
  return result;
}

uint64_t sub_2447D09C4(_QWORD *a1)
{
  return sub_2447D09DC(a1) & 1;
}

uint64_t sub_2447D09DC(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1])
    return 1;
  else
    return sub_2448EBBEC() & 1;
}

uint64_t (*sub_2447D0A30(uint64_t (*result)(), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6))()
{
  uint64_t (*v6)();
  _QWORD *v7;
  uint64_t v8;

  if (a2 < a5 || (uint64_t)(a6 >> 1) <= a2)
  {
    __break(1u);
  }
  else
  {
    v6 = result;
    v7 = (_QWORD *)(a4 + 16 * a2);
    v8 = v7[1];
    *(_QWORD *)v6 = *v7;
    *((_QWORD *)v6 + 1) = v8;
    swift_bridgeObjectRetain();
    return destroy for InjectLibraryFirstEnvironmentVariableMergeHandler;
  }
  return result;
}

uint64_t destroy for InjectLibraryFirstEnvironmentVariableMergeHandler()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_2447D0A8C(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  v2 = 0;
  v3 = result + 40;
  v4 = -(uint64_t)v1;
  v5 = MEMORY[0x24BEE4AF8];
  v14 = result + 40;
  v15 = *(_QWORD *)(result + 16);
  do
  {
    if (v2 <= v1)
      v6 = v1;
    else
      v6 = v2;
    v7 = -(uint64_t)v6;
    for (i = (uint64_t *)(v3 + 16 * v2++); ; i += 2)
    {
      if (v7 + v2 == 1)
      {
        __break(1u);
        return result;
      }
      v10 = *(i - 1);
      v9 = *i;
      sub_2447D0980();
      swift_bridgeObjectRetain();
      if ((sub_2448EB604() & 1) == 0)
        break;
      result = swift_bridgeObjectRelease();
      ++v2;
      if (v4 + v2 == 1)
        return v5;
    }
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
      result = sub_2447CEE18(0, *(_QWORD *)(v5 + 16) + 1, 1);
    v12 = *(_QWORD *)(v5 + 16);
    v11 = *(_QWORD *)(v5 + 24);
    if (v12 >= v11 >> 1)
      result = sub_2447CEE18(v11 > 1, v12 + 1, 1);
    *(_QWORD *)(v5 + 16) = v12 + 1;
    v13 = v5 + 16 * v12;
    *(_QWORD *)(v13 + 32) = v10;
    *(_QWORD *)(v13 + 40) = v9;
    v3 = v14;
    v1 = v15;
  }
  while (v4 + v2);
  return v5;
}

unint64_t destroy for EnvironmentVariableMergeResult(uint64_t a1)
{
  unint64_t result;
  int v2;

  result = *(_QWORD *)(a1 + 8);
  v2 = -1;
  if (result < 0xFFFFFFFF)
    v2 = result;
  if ((v2 + 1) <= 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s20PreviewsFoundationOS30EnvironmentVariableMergeResultOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF)
    v4 = *(_QWORD *)(a2 + 8);
  if ((v4 + 1) > 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for EnvironmentVariableMergeResult(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  LODWORD(v4) = -1;
  if (a1[1] >= 0xFFFFFFFFuLL)
    LODWORD(v5) = -1;
  else
    v5 = a1[1];
  v6 = v5 + 1;
  if (a2[1] < 0xFFFFFFFFuLL)
    v4 = a2[1];
  v7 = v4 + 1;
  if (v6 > 1)
  {
    if (v7 <= 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_12:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v7 > 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for EnvironmentVariableMergeResult(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = -1;
  if (v4 < 0xFFFFFFFF)
    v5 = v4;
  if ((v5 + 1) > 1)
    goto LABEL_9;
  v6 = *(_QWORD *)(a2 + 8);
  LODWORD(v7) = -1;
  if (v6 < 0xFFFFFFFF)
    v7 = *(_QWORD *)(a2 + 8);
  if ((v7 + 1) > 1)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EnvironmentVariableMergeResult(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) < 2)
    LODWORD(v3) = 0;
  if (v3 >= 2)
    return (v3 - 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for EnvironmentVariableMergeResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t sub_2447D0E78(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  if ((v1 + 1) >= 2)
    return v1;
  else
    return 0;
}

_QWORD *sub_2447D0E98(_QWORD *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *result = 0;
    result[1] = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
  }
  else if (a2)
  {
    result[1] = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentVariableMergeResult()
{
  return &type metadata for EnvironmentVariableMergeResult;
}

uint64_t dispatch thunk of EnvironmentVariableMergeHandler.merge(key:left:right:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8))();
}

ValueMetadata *type metadata accessor for DYLDEnvironmentVariablePathMergeHandler()
{
  return &type metadata for DYLDEnvironmentVariablePathMergeHandler;
}

_QWORD *initializeBufferWithCopyOfBuffer for InjectLibraryFirstEnvironmentVariableMergeHandler(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for InjectLibraryFirstEnvironmentVariableMergeHandler(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for InjectLibraryFirstEnvironmentVariableMergeHandler(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InjectLibraryFirstEnvironmentVariableMergeHandler(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InjectLibraryFirstEnvironmentVariableMergeHandler(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InjectLibraryFirstEnvironmentVariableMergeHandler()
{
  return &type metadata for InjectLibraryFirstEnvironmentVariableMergeHandler;
}

ValueMetadata *type metadata accessor for RejectTestingLibTemporarily_127569585()
{
  return &type metadata for RejectTestingLibTemporarily_127569585;
}

uint64_t sub_2447D1030()
{
  return swift_release();
}

uint64_t sub_2447D1038(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_2448EB0D0();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_244848584(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

_QWORD *sub_2447D10CC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int64_t v8;
  int64_t v9;
  _QWORD *result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v7 = *(_QWORD **)v4;
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v9 > v7[3] >> 1)
    goto LABEL_8;
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9)
        v13 = v8 + v6;
      else
        v13 = v8;
      result = sub_2447C1B70(result, v13, 1, v7);
      v7 = result;
      if (v5 != a3)
        goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_12:
  v14 = v7[2];
  if ((v7[3] >> 1) - v14 < v6)
    goto LABEL_25;
  if (v6 < 0)
    goto LABEL_27;
  v15 = (unint64_t)&v7[2 * v14 + 4];
  v16 = a2 + 16 * a3;
  if (v16 < v15 + 16 * v6 && v15 < v16 + 16 * v6)
    goto LABEL_27;
  result = (_QWORD *)swift_arrayInitWithCopy();
  if (!v6)
  {
LABEL_22:
    *(_QWORD *)v4 = v7;
    return result;
  }
  v18 = v7[2];
  v19 = __OFADD__(v18, v6);
  v20 = v18 + v6;
  if (!v19)
  {
    v7[2] = v20;
    goto LABEL_22;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  result = (_QWORD *)sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2447D126C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t sub_2447D12A8(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

uint64_t sub_2447D12DC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2447D1300()
{
  return swift_deallocObject();
}

uint64_t static Future.completed(dsoHandle:file:line:column:function:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  uint64_t v11[2];
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v11[0] = a2;
  v11[1] = a3;
  v12 = a4;
  v13 = a5;
  v14 = a6;
  v15 = a7;
  v16 = a8;
  v17 = a9;
  return sub_2447D1358(v11, a10, a3, a4);
}

uint64_t sub_2447D1358(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v23 = a2;
  v6 = *(_QWORD *)(v4 + 80);
  v24 = type metadata accessor for FutureTermination(0, v6, a3, a4);
  v7 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v9 = (_QWORD *)((char *)&v22 - v8);
  v10 = *a1;
  v11 = a1[1];
  v12 = *((_BYTE *)a1 + 16);
  v22 = *(_OWORD *)(a1 + 3);
  v14 = a1[5];
  v13 = a1[6];
  v15 = *((_BYTE *)a1 + 56);
  type metadata accessor for ConstantFuture(0, v6, v16, v17);
  *(_QWORD *)&v25 = v10;
  *((_QWORD *)&v25 + 1) = v11;
  v26 = v12;
  v27 = v22;
  v28 = v14;
  v29 = v13;
  v30 = v15;
  static FutureTermination.completed(_:)(v23, v6, v9);
  swift_allocObject();
  v20 = sub_2447D2D8C(&v25, (uint64_t)v9, v18, v19);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v24);
  return v20;
}

uint64_t static Future.succeeded(dsoHandle:file:line:column:function:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10)
{
  return sub_2447D2DFC(a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t static Future.failed(dsoHandle:file:line:column:function:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, void *a10)
{
  return sub_2447D2F1C(a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t static Future.canceled(dsoHandle:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  char v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v27 = a8;
  v13 = a4;
  v16 = *(_QWORD *)(v9 + 80);
  v17 = type metadata accessor for FutureTermination(0, v16, a3, a4);
  v28 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v27 - v18;
  type metadata accessor for ConstantFuture(0, v16, v20, v21);
  *(_QWORD *)&v29 = a2;
  *((_QWORD *)&v29 + 1) = a3;
  v30 = v13;
  v31 = a5;
  v32 = a6;
  v22 = v27;
  v33 = a7;
  v34 = v27;
  v35 = a9;
  *(_QWORD *)v19 = a2;
  *((_QWORD *)v19 + 1) = a3;
  v19[16] = v13;
  *((_QWORD *)v19 + 3) = a5;
  *((_QWORD *)v19 + 4) = a6;
  *((_QWORD *)v19 + 5) = a7;
  *((_QWORD *)v19 + 6) = v22;
  v19[56] = a9;
  swift_storeEnumTagMultiPayload();
  swift_allocObject();
  v25 = sub_2447D2D8C(&v29, (uint64_t)v19, v23, v24);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v19, v17);
  return v25;
}

uint64_t static Future.unreachable(dsoHandle:file:line:column:function:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t (*a10)(uint64_t))
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;

  v32 = a7;
  v33 = a8;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v15 = sub_2448EBD48();
  v34 = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (uint64_t *)((char *)&v30 - v17);
  v19 = a10(v16);
  v30 = v20;
  v31 = v19;
  v35 = a2;
  v36 = a3;
  v37 = a4;
  v38 = a5;
  v39 = a6;
  v21 = v32;
  v22 = v33;
  v40 = v32;
  v41 = v33;
  v42 = a9;
  sub_244823F6C();
  v35 = a2;
  v36 = a3;
  v37 = a4;
  v38 = a5;
  v39 = a6;
  v40 = v21;
  v41 = v22;
  v42 = a9;
  sub_2447D303C();
  v23 = swift_allocError();
  v24 = v30;
  *v25 = v31;
  v25[1] = v24;
  v25[2] = 0;
  v25[3] = 0;
  *v18 = v23;
  swift_storeEnumTagMultiPayload();
  v28 = sub_2447D1358(&v35, (uint64_t)v18, v26, v27);
  (*(void (**)(uint64_t *, uint64_t))(v34 + 8))(v18, v15);
  return v28;
}

uint64_t static Future.completed(dsoHandle:file:line:column:function:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[2];
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;

  v27 = a7;
  v28 = a8;
  v25 = a6;
  v26 = a11;
  v24[0] = a5;
  v24[1] = a10;
  v15 = *(_QWORD *)(v11 + 80);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v16 = sub_2448EBD48();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v24 - v18;
  v32[0] = a2;
  v32[1] = a3;
  v33 = a4;
  v34 = v24[0];
  v35 = v25;
  v36 = v27;
  v37 = v28;
  v38 = a9;
  v29 = v15;
  v30 = a10;
  v31 = a11;
  sub_2447D18BC((void (*)(_BYTE *))sub_2447D3080, (uint64_t)v24 - v18);
  v22 = sub_2447D1358(v32, (uint64_t)v19, v20, v21);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  return v22;
}

uint64_t sub_2447D188C(uint64_t (*a1)(void), uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t result;

  result = a1();
  if (v4)
    *a4 = v4;
  return result;
}

uint64_t sub_2447D18BC@<X0>(void (*a1)(_BYTE *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE v11[16];

  MEMORY[0x24BDAC7A8](a1);
  v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_2448EBD48();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = &v11[-v8];
  a1(v5);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v7 + 32))(a2, v9, v6);
}

uint64_t static Future<A>.succeeded(dsoHandle:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  _OWORD v11[4];
  __int128 v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  *(_QWORD *)&v12 = a2;
  *((_QWORD *)&v12 + 1) = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  v17 = a8;
  v18 = a9;
  memset(v11, 0, 58);
  __swift_instantiateConcreteTypeFromMangledName(qword_25738A4F0);
  swift_allocObject();
  v9 = sub_2447D1A60(&v12);
  swift_retain();
  sub_2447D1F5C((uint64_t)v11);
  swift_release();
  return v9;
}

uint64_t sub_2447D1A60(_OWORD *a1)
{
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[1];
  *(_OWORD *)(v1 + 16) = *a1;
  *(_OWORD *)(v1 + 32) = v2;
  *(_OWORD *)(v1 + 48) = a1[2];
  *(_OWORD *)(v1 + 57) = *(_OWORD *)((char *)a1 + 41);
  *(_QWORD *)(v1 + 80) = mach_absolute_time();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A620);
  v3 = swift_allocObject();
  *(_DWORD *)(v3 + 100) = 0;
  *(_QWORD *)(v3 + 16) = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 81) = 0u;
  *(_QWORD *)(v1 + 88) = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A628);
  v4 = swift_allocObject();
  *(_DWORD *)(v4 + 24) = 0;
  v5 = (os_unfair_lock_s *)(v4 + 24);
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v1 + 96) = v4;
  swift_getKeyPath();
  v8 = v1;
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v5);
  sub_2447D2CF8(&v8, &v7);
  os_unfair_lock_unlock(v5);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_2447D1BAC(_OWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A580);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (uint64_t *)((char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = a1[1];
  *(_OWORD *)(v1 + 16) = *a1;
  *(_OWORD *)(v1 + 32) = v6;
  *(_OWORD *)(v1 + 48) = a1[2];
  *(_OWORD *)(v1 + 57) = *(_OWORD *)((char *)a1 + 41);
  *(_QWORD *)(v1 + 80) = mach_absolute_time();
  *v5 = MEMORY[0x24BEE4AF8];
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A598);
  v7 = swift_allocObject();
  *(_DWORD *)(v7 + ((*(unsigned int *)(*(_QWORD *)v7 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_2447C9300((uint64_t)v5, v7 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v7 + 16), &qword_25738A580);
  sub_2447D30E8((uint64_t)v5);
  *(_QWORD *)(v1 + 88) = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A5A0);
  v8 = swift_allocObject();
  *(_DWORD *)(v8 + 24) = 0;
  v9 = (os_unfair_lock_s *)(v8 + 24);
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v1 + 96) = v8;
  v11 = type metadata accessor for CrashReport(0);
  swift_getKeyPath();
  v13 = v1;
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v9);
  sub_2447D2CF8(&v13, &v12);
  os_unfair_lock_unlock(v9);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_2447D1D84(_OWORD *a1)
{
  return sub_2447D1DBC(a1, &qword_25738A5B8, &qword_25738A5C0, &qword_25738A5B0);
}

uint64_t sub_2447D1DA0(_OWORD *a1)
{
  return sub_2447D1DBC(a1, &qword_25738A608, &qword_25738A610, &qword_25738A0E8);
}

uint64_t sub_2447D1DBC(_OWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v13;
  uint64_t v14;

  v8 = a1[1];
  *(_OWORD *)(v4 + 16) = *a1;
  *(_OWORD *)(v4 + 32) = v8;
  *(_OWORD *)(v4 + 48) = a1[2];
  *(_OWORD *)(v4 + 57) = *(_OWORD *)((char *)a1 + 41);
  *(_QWORD *)(v4 + 80) = mach_absolute_time();
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 100) = 0;
  *(_QWORD *)(v9 + 16) = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 81) = 0u;
  *(_QWORD *)(v4 + 88) = v9;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v10 = swift_allocObject();
  *(_DWORD *)(v10 + 24) = 0;
  v11 = (os_unfair_lock_s *)(v10 + 24);
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v4 + 96) = v10;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  swift_getKeyPath();
  v14 = v4;
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v11);
  sub_2447D2CF8(&v14, &v13);
  os_unfair_lock_unlock(v11);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v4;
}

uint64_t sub_2447D1F08(_OWORD *a1)
{
  return sub_2447D1DBC(a1, &qword_25738A5D8, &qword_25738A5E0, &qword_25738A5D0);
}

uint64_t sub_2447D1F24(_OWORD *a1)
{
  return sub_2447D1DBC(a1, &qword_25738A5F0, &qword_25738A5F8, &qword_25738A098);
}

uint64_t sub_2447D1F40()
{
  Future.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_2447D1F5C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  void (*v15)(uint64_t *);
  os_unfair_lock_s *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[7];
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25[7];
  char v26;
  char v27;

  sub_2447D3184(a1, (uint64_t)v25, &qword_25738A618);
  v2 = v1[10];
  v3 = mach_absolute_time();
  v4 = v1[11];
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 100));
  sub_2447D2C14((uint64_t *)(v4 + 16), v25, v2, v3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2447D31C8, v21);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 100));
  v5 = v21[0];
  v6 = swift_release();
  if (v5)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      v19 = v25[1];
      v20 = v25[0];
      v8 = v25[3];
      v18 = v25[2];
      v10 = v25[4];
      v9 = v25[5];
      v11 = v25[6];
      v12 = v26;
      v13 = v27;
      swift_bridgeObjectRetain();
      v14 = v5 + 40;
      do
      {
        v15 = *(void (**)(uint64_t *))(v14 - 8);
        v21[0] = v20;
        v21[1] = v19;
        v21[2] = v18;
        v21[3] = v8;
        v21[4] = v10;
        v21[5] = v9;
        v21[6] = v11;
        v22 = v12;
        v23 = v13;
        swift_retain();
        v15(v21);
        swift_release();
        v14 += 16;
        --v7;
      }
      while (v7);
      swift_bridgeObjectRelease();
    }
    v6 = swift_bridgeObjectRelease();
  }
  v16 = (os_unfair_lock_s *)v1[12];
  MEMORY[0x24BDAC7A8](v6);
  swift_getKeyPath();
  v21[0] = 0;
  swift_retain();
  os_unfair_lock_lock(v16 + 6);
  sub_2447D2CF8(v21, &v24);
  os_unfair_lock_unlock(v16 + 6);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_2447D2178(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  os_unfair_lock_s *v14;
  uint64_t v16;
  uint64_t v17;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 80);
  v5 = mach_absolute_time();
  v6 = *(_QWORD *)(v2 + 88);
  v7 = v6 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v6 + 16);
  v8 = (os_unfair_lock_s *)(v6 + ((*(unsigned int *)(*(_QWORD *)v6 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v8);
  v9 = sub_2447D29E4(v7, a1, v4, v5);
  os_unfair_lock_unlock(v8);
  v10 = swift_release();
  if (v9)
  {
    v11 = *(_QWORD *)(v9 + 16);
    if (v11)
    {
      swift_bridgeObjectRetain();
      v12 = v9 + 40;
      do
      {
        v13 = *(void (**)(uint64_t))(v12 - 8);
        swift_retain();
        v13(a1);
        swift_release();
        v12 += 16;
        --v11;
      }
      while (v11);
      swift_bridgeObjectRelease();
    }
    v10 = swift_bridgeObjectRelease();
  }
  v14 = *(os_unfair_lock_s **)(v2 + 96);
  MEMORY[0x24BDAC7A8](v10);
  type metadata accessor for CrashReport(0);
  swift_getKeyPath();
  v17 = 0;
  swift_retain();
  os_unfair_lock_lock(v14 + 6);
  sub_2447D2CF8(&v17, &v16);
  os_unfair_lock_unlock(v14 + 6);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_2447D2324(uint64_t a1)
{
  return sub_2447D2368(a1, &qword_25738A5A8, &qword_25738A5B0);
}

uint64_t sub_2447D2338(uint64_t a1)
{
  return sub_2447D25A8(a1, &qword_25738A600, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2447D3164, &qword_25738A0E8);
}

uint64_t sub_2447D2354(uint64_t a1)
{
  return sub_2447D2368(a1, &qword_25738A5C8, &qword_25738A5D0);
}

uint64_t sub_2447D2368(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v3;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  char v15;
  char v16;
  uint64_t v17;
  void (*v18)(uint64_t *);
  os_unfair_lock_s *v19;
  uint64_t *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25[7];
  char v26;
  char v27;
  uint64_t v28;
  void *v29[7];
  char v30;
  char v31;

  sub_2447D3184(a1, (uint64_t)v29, a2);
  v5 = (void *)v3[10];
  v6 = (void *)mach_absolute_time();
  v7 = v3[11];
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 100));
  sub_2447D2B34((void **)(v7 + 16), v29, v5, v6, v25);
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 100));
  v8 = v25[0];
  v9 = swift_release();
  if (v8)
  {
    v10 = *(_QWORD *)(v8 + 16);
    if (v10)
    {
      v21 = a3;
      v23 = v29[1];
      v24 = v29[0];
      v11 = v29[3];
      v22 = v29[2];
      v12 = v29[4];
      v13 = v29[5];
      v14 = v29[6];
      v15 = v30;
      v16 = v31;
      swift_bridgeObjectRetain();
      v17 = v8 + 40;
      do
      {
        v18 = *(void (**)(uint64_t *))(v17 - 8);
        v25[0] = (uint64_t)v24;
        v25[1] = (uint64_t)v23;
        v25[2] = (uint64_t)v22;
        v25[3] = (uint64_t)v11;
        v25[4] = (uint64_t)v12;
        v25[5] = (uint64_t)v13;
        v25[6] = (uint64_t)v14;
        v26 = v15;
        v27 = v16;
        swift_retain();
        v18(v25);
        swift_release();
        v17 += 16;
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease();
      a3 = v21;
    }
    v9 = swift_bridgeObjectRelease();
  }
  v19 = (os_unfair_lock_s *)v3[12];
  MEMORY[0x24BDAC7A8](v9);
  __swift_instantiateConcreteTypeFromMangledName(a3);
  swift_getKeyPath();
  v25[0] = 0;
  swift_retain();
  os_unfair_lock_lock(v19 + 6);
  sub_2447D2CF8(v25, &v28);
  os_unfair_lock_unlock(v19 + 6);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_2447D258C(uint64_t a1)
{
  return sub_2447D25A8(a1, &qword_25738A5E8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2447D3144, &qword_25738A098);
}

uint64_t sub_2447D25A8(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t *a4)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  void (*v20)(uint64_t *);
  os_unfair_lock_s *v21;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[7];
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31[7];
  char v32;
  char v33;

  sub_2447D3184(a1, (uint64_t)v31, a2);
  v7 = v4[10];
  v8 = mach_absolute_time();
  v9 = v4[11];
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 100));
  sub_2447D2C14((uint64_t *)(v9 + 16), v31, v7, v8, a3, v27);
  os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 100));
  v10 = v27[0];
  v11 = swift_release();
  if (v10)
  {
    v12 = *(_QWORD *)(v10 + 16);
    if (v12)
    {
      v23 = a4;
      v25 = v31[1];
      v26 = v31[0];
      v13 = v31[3];
      v24 = v31[2];
      v14 = v31[4];
      v15 = v31[5];
      v16 = v31[6];
      v17 = v32;
      v18 = v33;
      swift_bridgeObjectRetain();
      v19 = v10 + 40;
      do
      {
        v20 = *(void (**)(uint64_t *))(v19 - 8);
        v27[0] = v26;
        v27[1] = v25;
        v27[2] = v24;
        v27[3] = v13;
        v27[4] = v14;
        v27[5] = v15;
        v27[6] = v16;
        v28 = v17;
        v29 = v18;
        swift_retain();
        v20(v27);
        swift_release();
        v19 += 16;
        --v12;
      }
      while (v12);
      swift_bridgeObjectRelease();
      a4 = v23;
    }
    v11 = swift_bridgeObjectRelease();
  }
  v21 = (os_unfair_lock_s *)v4[12];
  MEMORY[0x24BDAC7A8](v11);
  __swift_instantiateConcreteTypeFromMangledName(a4);
  swift_getKeyPath();
  v27[0] = 0;
  swift_retain();
  os_unfair_lock_lock(v21 + 6);
  sub_2447D2CF8(v27, &v30);
  os_unfair_lock_unlock(v21 + 6);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_2447D27D4(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  char v13;
  uint64_t v14;
  void (*v15)(uint64_t *);
  os_unfair_lock_s *v16;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21[7];
  char v22;
  char v23;
  uint64_t v24;
  void *v25[7];
  char v26;
  char v27;

  sub_2447D3184(a1, (uint64_t)v25, &qword_25738A578);
  v2 = (void *)v1[10];
  v3 = (void *)mach_absolute_time();
  v4 = v1[11];
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 100));
  sub_2447D2B34((void **)(v4 + 16), v25, v2, v3, v21);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 100));
  v5 = v21[0];
  v6 = swift_release();
  if (v5)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      v19 = v25[1];
      v20 = v25[0];
      v8 = v25[3];
      v18 = v25[2];
      v10 = v25[4];
      v9 = v25[5];
      v11 = v25[6];
      v12 = v26;
      v13 = v27;
      swift_bridgeObjectRetain();
      v14 = v5 + 40;
      do
      {
        v15 = *(void (**)(uint64_t *))(v14 - 8);
        v21[0] = (uint64_t)v20;
        v21[1] = (uint64_t)v19;
        v21[2] = (uint64_t)v18;
        v21[3] = (uint64_t)v8;
        v21[4] = (uint64_t)v10;
        v21[5] = (uint64_t)v9;
        v21[6] = (uint64_t)v11;
        v22 = v12;
        v23 = v13;
        swift_retain();
        v15(v21);
        swift_release();
        v14 += 16;
        --v7;
      }
      while (v7);
      swift_bridgeObjectRelease();
    }
    v6 = swift_bridgeObjectRelease();
  }
  v16 = (os_unfair_lock_s *)v1[12];
  MEMORY[0x24BDAC7A8](v6);
  swift_getKeyPath();
  v21[0] = 0;
  swift_retain();
  os_unfair_lock_lock(v16 + 6);
  sub_2447D2CF8(v21, &v24);
  os_unfair_lock_unlock(v16 + 6);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_2447D29E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD v14[2];
  char v15;
  __int128 v16;
  const char *v17;
  uint64_t v18;
  char v19;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A580);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (_QWORD *)((char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2447C9300(a1, (uint64_t)v10, &qword_25738A580);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_2447D30E8((uint64_t)v10);
    v14[0] = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Future.swift";
    v14[1] = 118;
    v15 = 2;
    v16 = xmmword_2448ED150;
    v17 = "didFinish(_:)";
    v18 = 13;
    v19 = 2;
    sub_244823F6C();
    return 0;
  }
  else
  {
    sub_2447D30E8(a1);
    v11 = *v10;
    v12 = (_QWORD *)(a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_25738A588) + 48));
    sub_2447C9300(a2, a1, &qword_25738A590);
    *v12 = a3;
    v12[1] = a4;
    swift_storeEnumTagMultiPayload();
  }
  return v11;
}

uint64_t sub_2447D2B34@<X0>(void **a1@<X0>, void **a2@<X1>, void *a3@<X2>, void *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  if (((_BYTE)a1[10] & 1) != 0)
  {
    result = sub_244823F6C();
    v7 = 0;
  }
  else
  {
    v7 = *a1;
    v8 = *((unsigned __int8 *)a2 + 57);
    v9 = (uint64_t)a2[5];
    v10 = (uint64_t)a2[6];
    v12 = (uint64_t)a2[3];
    v11 = (uint64_t)a2[4];
    v14 = (uint64_t)a2[1];
    v13 = (uint64_t)a2[2];
    v15 = *a2;
    v16 = *((unsigned __int8 *)a2 + 56);
    *a1 = *a2;
    a1[1] = (void *)v14;
    a1[2] = (void *)v13;
    a1[3] = (void *)v12;
    a1[4] = (void *)v11;
    a1[5] = (void *)v9;
    a1[6] = (void *)v10;
    a1[7] = (void *)(v16 | (v8 << 8));
    a1[8] = a3;
    a1[9] = a4;
    *((_BYTE *)a1 + 80) = 1;
    result = (uint64_t)sub_2447D3128(v15, v14, v13, v12, v11, v9, v10, v16, v8);
  }
  *a5 = v7;
  return result;
}

uint64_t sub_2447D2C14@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, _QWORD *a6@<X8>)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  if ((a1[10] & 1) != 0)
  {
    result = sub_244823F6C();
    v8 = 0;
  }
  else
  {
    v8 = *a1;
    v10 = a2[5];
    v11 = a2[6];
    v13 = a2[3];
    v12 = a2[4];
    v15 = a2[1];
    v14 = a2[2];
    v16 = *a2;
    v17 = *((unsigned __int8 *)a2 + 56) | ((unint64_t)*((unsigned __int8 *)a2 + 57) << 8);
    *a1 = *a2;
    a1[1] = v15;
    a1[2] = v14;
    a1[3] = v13;
    a1[4] = v12;
    a1[5] = v10;
    a1[6] = v11;
    a1[7] = v17;
    a1[8] = a3;
    a1[9] = a4;
    *((_BYTE *)a1 + 80) = 1;
    result = a5(v16, v15, v14, v13);
  }
  *a6 = v8;
  return result;
}

uint64_t sub_2447D2CF8@<X0>(uint64_t *a1@<X2>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void (*v4)(_QWORD *, _QWORD);
  uint64_t *v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[4];

  v3 = *a1;
  v4 = (void (*)(_QWORD *, _QWORD))swift_readAtKeyPath();
  v6 = *v5;
  swift_retain();
  v4(v8, 0);
  v8[0] = v3;
  swift_retain();
  result = swift_setAtWritableKeyPath();
  *a2 = v6;
  return result;
}

uint64_t sub_2447D2D8C(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5;
  char v6;
  uint64_t v7;
  __int128 v9;
  char v10;
  __int128 v11;
  __int128 v12;
  char v13;

  v5 = *((_BYTE *)a1 + 16);
  v6 = *((_BYTE *)a1 + 56);
  v9 = *a1;
  v10 = v5;
  v11 = *(__int128 *)((char *)a1 + 24);
  v12 = *(__int128 *)((char *)a1 + 40);
  v13 = v6;
  v7 = sub_2448D24B4((uint64_t)&v9, a2, a3, a4);
  swift_retain();
  sub_2448D2CA4(a2);
  swift_release();
  return v7;
}

uint64_t sub_2447D2DFC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  int v26;
  uint64_t v27[2];
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  v26 = a8;
  v24[0] = a6;
  v24[1] = a9;
  v25 = a7;
  v15 = *(_QWORD *)(v9 + 80);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v16 = sub_2448EBD48();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v24 - v18;
  v27[0] = a1;
  v27[1] = a2;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v31 = v24[0];
  v32 = v25;
  v33 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))((char *)v24 - v18, a9, v15);
  swift_storeEnumTagMultiPayload();
  v22 = sub_2447D1358(v27, (uint64_t)v19, v20, v21);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  return v22;
}

uint64_t sub_2447D2F1C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, void *a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27[2];
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  v26 = a8;
  v24 = a6;
  v25 = a7;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v14 = sub_2448EBD48();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v23 - v16;
  v27[0] = a1;
  v27[1] = a2;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v31 = v24;
  v32 = v25;
  v33 = v26;
  *(uint64_t *)((char *)&v23 - v16) = (uint64_t)a9;
  swift_storeEnumTagMultiPayload();
  v18 = a9;
  v21 = sub_2447D1358(v27, (uint64_t)v17, v19, v20);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  return v21;
}

uint64_t type metadata accessor for ConstantFuture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConstantFuture);
}

unint64_t sub_2447D303C()
{
  unint64_t result;

  result = qword_25738A4E8;
  if (!qword_25738A4E8)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for Unreachable, &type metadata for Unreachable);
    atomic_store(result, (unint64_t *)&qword_25738A4E8);
  }
  return result;
}

uint64_t sub_2447D3080(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 24))();
  if (v2)
    *a1 = v2;
  return result;
}

uint64_t sub_2447D30B4()
{
  return swift_initClassMetadata2();
}

uint64_t sub_2447D30E8(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A580);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_2447D3128(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9 == 1)
    return result;
  if (!a9)
    return (id)swift_bridgeObjectRetain();
  return result;
}

id sub_2447D3144(id result, int a2, id a3, int a4, int a5, int a6, int a7, int a8, char a9)
{
  if (a9 == 1)
    return result;
  if (!a9)
    return (id)swift_bridgeObjectRetain();
  return result;
}

id sub_2447D3164(id result, id a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9)
{
  if (a9 == 1)
    return result;
  if (!a9)
    return (id)swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_2447D3184(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

id sub_2447D31C8(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9 == 1)
    return result;
  return result;
}

uint64_t sub_2447D31DC(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char *v21;
  void (*v22)(char *, _QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char v38[32];
  uint64_t v39;

  v27 = a5;
  v28 = a8;
  v33 = a1;
  v34 = a2;
  v26 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v35 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v31 = (char *)&v24 - v13;
  v36 = a4;
  MEMORY[0x24BDAC7A8](v12);
  v30 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v24 - v16;
  v18 = sub_2448EB1F0();
  if (!v18)
    return sub_2448EAE54();
  v19 = v18;
  v25 = v15;
  v39 = sub_2448EA7D0();
  v32 = sub_2448EB8C8();
  sub_2448EB880();
  v36 = v17;
  result = sub_2448EB1E4();
  if (v19 < 0)
  {
    __break(1u);
  }
  else
  {
    v21 = v31;
    while (1)
    {
      v22 = (void (*)(char *, _QWORD))sub_2448EB2E0();
      (*(void (**)(char *))(v11 + 16))(v21);
      v22(v38, 0);
      v23 = v37;
      v33(v21, v35);
      if (v23)
        break;
      v37 = 0;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
      sub_2448EB8B0();
      sub_2448EB220();
      if (!--v19)
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
        return v39;
      }
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v28, v35, v27);
  }
  return result;
}

uint64_t CommandLineOptionDescription.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommandLineOptionDescription.aliases.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CommandLineOptionDescription.parameterDescription.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommandLineOptionDescription.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommandLineOptionDescription.shortUsage.getter()
{
  uint64_t v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD v8[3];
  uint64_t v9;

  v1 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v1;
  v8[2] = *(_OWORD *)(v0 + 32);
  v9 = *(_QWORD *)(v0 + 48);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A058);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_2448ECF10;
  *(_QWORD *)(v2 + 32) = sub_2447D3650(*(uint64_t *)&v8[0], *((uint64_t *)&v8[0] + 1), (uint64_t)v8);
  *(_QWORD *)(v2 + 40) = v3;
  sub_2447D4810((uint64_t)v8);
  v4 = swift_bridgeObjectRetain();
  v5 = sub_2447D4658(v4, (uint64_t)v8);
  sub_2447D4860((uint64_t)v8);
  swift_bridgeObjectRelease();
  sub_2447CC13C(v5);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A630);
  sub_2447D48B0();
  v6 = sub_2448EA9A4();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_2447D3650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = sub_2448EAB78();
  v5 = 11565;
  if (v4 == 1)
    v5 = 45;
  v7 = v5;
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a3 + 32))
  {
    sub_2448EA944();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t CommandLineOption.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommandLineOption.aliases.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CommandLineOption.parameterDescription.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommandLineOption.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommandLineOption.apply.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_retain();
  return v1;
}

uint64_t CommandLineOption.init(_:_:parameter:description:apply:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  a9[8] = a10;
  return result;
}

uint64_t CommandLineOption.init(_:_:BOOLean:description:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = 0;
  a7[4] = 0;
  a7[5] = a5;
  a7[6] = a6;
  a7[7] = sub_2447D48FC;
  a7[8] = a4;
  return result;
}

uint64_t CommandLineOption.init(_:_:parameter:string:description:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v14;
  uint64_t v16;

  v14 = result;
  if (!a5)
  {
    result = sub_2448EA944();
    a4 = result;
    a5 = v16;
  }
  *a9 = v14;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a7;
  a9[6] = a8;
  a9[7] = (uint64_t)sub_2447D4930;
  a9[8] = a6;
  return result;
}

uint64_t CommandLineOption.init(_:_:parameter:int:description:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v12;
  uint64_t v18;
  _QWORD *v19;

  v12 = a5;
  if (!a5)
  {
    a4 = sub_2448EA944();
    v12 = v18;
  }
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = a1;
  v19[3] = a2;
  v19[4] = a6;
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = v12;
  a9[5] = a7;
  a9[6] = a8;
  a9[7] = sub_2447D49B4;
  a9[8] = v19;
  return swift_bridgeObjectRetain();
}

uint64_t sub_2447D3964(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  char v32;
  _QWORD *v33;
  _QWORD v34[2];

  result = a2();
  if (!v5)
  {
    v10 = result;
    v11 = v9;
    v12 = HIBYTE(v9) & 0xF;
    v13 = result & 0xFFFFFFFFFFFFLL;
    if ((v11 & 0x2000000000000000) != 0)
      v14 = v12;
    else
      v14 = result & 0xFFFFFFFFFFFFLL;
    if (v14)
    {
      if ((v11 & 0x1000000000000000) == 0)
      {
        if ((v11 & 0x2000000000000000) == 0)
        {
          if ((result & 0x1000000000000000) != 0)
            v15 = (unsigned __int8 *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
          else
            v15 = (unsigned __int8 *)sub_2448EB820();
          v16 = sub_2448D7348(v15, v13, 10);
          if ((v17 & 1) == 0)
          {
            v18 = (uint64_t)v16;
LABEL_37:
            swift_bridgeObjectRelease();
            v34[0] = v18;
            return swift_setAtWritableKeyPath();
          }
          goto LABEL_55;
        }
        v34[0] = result;
        v34[1] = v11 & 0xFFFFFFFFFFFFFFLL;
        if (result == 43)
        {
          if (!v12)
            goto LABEL_60;
          if (v12 == 1)
            goto LABEL_58;
          if ((BYTE1(result) - 48) > 9u)
            goto LABEL_33;
          v18 = (BYTE1(result) - 48);
          if (v12 != 2)
          {
            if ((BYTE2(result) - 48) > 9u)
              goto LABEL_33;
            v18 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
            v19 = v12 - 3;
            if (v12 != 3)
            {
              v20 = (unsigned __int8 *)v34 + 3;
              while (1)
              {
                v21 = *v20 - 48;
                if (v21 > 9)
                  goto LABEL_33;
                v22 = 10 * v18;
                if ((unsigned __int128)(v18 * (__int128)10) >> 64 != (10 * v18) >> 63)
                  goto LABEL_33;
                v18 = v22 + v21;
                if (__OFADD__(v22, v21))
                  goto LABEL_33;
                LOBYTE(v12) = 0;
                ++v20;
                if (!--v19)
                  goto LABEL_36;
              }
            }
          }
        }
        else
        {
          if (result == 45)
          {
            if (v12)
            {
              if (v12 != 1)
              {
                if ((BYTE1(result) - 48) > 9u)
                  goto LABEL_33;
                if (v12 == 2)
                {
                  LOBYTE(v12) = 0;
                  v18 = -(uint64_t)(BYTE1(result) - 48);
                  goto LABEL_36;
                }
                if ((BYTE2(result) - 48) > 9u)
                  goto LABEL_33;
                v18 = -10 * (BYTE1(result) - 48) - (BYTE2(result) - 48);
                v27 = v12 - 3;
                if (v12 != 3)
                {
                  v28 = (unsigned __int8 *)v34 + 3;
                  while (1)
                  {
                    v29 = *v28 - 48;
                    if (v29 > 9)
                      goto LABEL_33;
                    v30 = 10 * v18;
                    if ((unsigned __int128)(v18 * (__int128)10) >> 64 != (10 * v18) >> 63)
                      goto LABEL_33;
                    v18 = v30 - v29;
                    if (__OFSUB__(v30, v29))
                      goto LABEL_33;
                    LOBYTE(v12) = 0;
                    ++v28;
                    if (!--v27)
                      goto LABEL_36;
                  }
                }
                goto LABEL_35;
              }
LABEL_58:
              v18 = 0;
LABEL_36:
              if ((v12 & 1) == 0)
                goto LABEL_37;
              goto LABEL_55;
            }
            __break(1u);
LABEL_60:
            __break(1u);
            return result;
          }
          if (!v12 || (result - 48) > 9u)
          {
LABEL_33:
            v18 = 0;
            LOBYTE(v12) = 1;
            goto LABEL_36;
          }
          v18 = (result - 48);
          if (v12 != 1)
          {
            if ((BYTE1(result) - 48) > 9u)
              goto LABEL_33;
            v18 = 10 * (result - 48) + (BYTE1(result) - 48);
            v23 = v12 - 2;
            if (v12 != 2)
            {
              v24 = (unsigned __int8 *)v34 + 2;
              while (1)
              {
                v25 = *v24 - 48;
                if (v25 > 9)
                  goto LABEL_33;
                v26 = 10 * v18;
                if ((unsigned __int128)(v18 * (__int128)10) >> 64 != (10 * v18) >> 63)
                  goto LABEL_33;
                v18 = v26 + v25;
                if (__OFADD__(v26, v25))
                  goto LABEL_33;
                LOBYTE(v12) = 0;
                ++v24;
                if (!--v23)
                  goto LABEL_36;
              }
            }
          }
        }
LABEL_35:
        LOBYTE(v12) = 0;
        goto LABEL_36;
      }
      swift_bridgeObjectRetain();
      v18 = (uint64_t)sub_2448D7398(v10, v11, 10);
      v32 = v31;
      swift_bridgeObjectRelease();
      if ((v32 & 1) == 0)
        goto LABEL_37;
    }
LABEL_55:
    sub_2447D50E4();
    swift_allocError();
    *v33 = a4;
    v33[1] = a5;
    v33[2] = v10;
    v33[3] = v11;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  return result;
}

_QWORD *CommandLineOption.init<A>(_:_:parameter:optionalEnum:description:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v37 = a7;
  v38 = a8;
  v40 = a3;
  v41 = a4;
  v42 = a11;
  v39 = a6;
  v15 = *a6;
  v16 = *(_QWORD *)(*(_QWORD *)(*MEMORY[0x24BEE2B70] + *a6 + 8) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v20 = (char *)&v34 - v19;
  v35 = a1;
  v36 = a2;
  if (!a5)
  {
    v41 = sub_2448EA944();
    a5 = v21;
  }
  v22 = sub_2448EB358();
  MEMORY[0x24BDAC7A8](v22);
  *(&v34 - 4) = *(_QWORD *)(v15 + *MEMORY[0x24BEE2B70]);
  *(&v34 - 3) = v16;
  v23 = v42;
  *(&v34 - 2) = a10;
  *(&v34 - 1) = v23;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v26 = sub_2447D31DC((void (*)(char *, char *))sub_2447D49D0, (uint64_t)(&v34 - 6), AssociatedTypeWitness, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4078], AssociatedConformanceWitness, MEMORY[0x24BEE40A8], v25);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, AssociatedTypeWitness);
  v43 = v26;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A630);
  sub_2447D48B0();
  sub_2448EA9A4();
  swift_bridgeObjectRelease();
  v43 = 0;
  v44 = 0xE000000000000000;
  v27 = v36;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2448EB79C();
  swift_bridgeObjectRelease();
  v43 = 2570;
  v44 = 0xE200000000000000;
  v28 = v41;
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  v43 = v37;
  v44 = v38;
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v29 = v43;
  v30 = v44;
  result = (_QWORD *)swift_allocObject();
  v32 = v42;
  result[2] = a10;
  result[3] = v32;
  v33 = v35;
  result[4] = v35;
  result[5] = v27;
  result[6] = v39;
  *a9 = v33;
  a9[1] = v27;
  a9[2] = v40;
  a9[3] = v28;
  a9[4] = a5;
  a9[5] = v29;
  a9[6] = v30;
  a9[7] = sub_2447D4A30;
  a9[8] = result;
  return result;
}

uint64_t sub_2447D3FB0(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t AssociatedConformanceWitness;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v58 = a8;
  v59 = a2;
  v53 = a4;
  v54 = a5;
  v51 = a1;
  v52 = a6;
  v8 = *MEMORY[0x24BEE2B70];
  v50 = *a6;
  v9 = *(_QWORD *)(v8 + v50 + 8);
  v10 = *(_QWORD *)(v9 + 16);
  v55 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v15 = (uint64_t (*)(uint64_t))((char *)&v44 - v14);
  v16 = *(_QWORD *)(v9 - 8);
  v17 = MEMORY[0x24BDAC7A8](v13);
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v44 - v21;
  v23 = *(_QWORD *)(v10 - 8);
  v56 = v10;
  v57 = v23;
  v24 = MEMORY[0x24BDAC7A8](v20);
  v26 = (char *)&v44 - v25;
  v27 = v62;
  result = v59(v24);
  if (!v27)
  {
    v45 = v26;
    v46 = v9;
    v47 = v19;
    v48 = result;
    v59 = v15;
    v60 = result;
    v62 = 0;
    v30 = v55;
    v49 = v12;
    v61 = v29;
    v31 = v29;
    swift_bridgeObjectRetain();
    v32 = v56;
    sub_2448EADA0();
    v33 = v57;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v22, 1, v32) == 1)
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v46);
      v34 = v59;
      v35 = sub_2448EB358();
      MEMORY[0x24BDAC7A8](v35);
      *(&v44 - 4) = *(_QWORD *)(v50 + *MEMORY[0x24BEE2B70]);
      *(&v44 - 3) = v32;
      v36 = v58;
      *(&v44 - 2) = v30;
      *(&v44 - 1) = v36;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v39 = sub_2447D31DC((void (*)(char *, char *))sub_2447D550C, (uint64_t)(&v44 - 6), AssociatedTypeWitness, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4078], AssociatedConformanceWitness, MEMORY[0x24BEE40A8], v38);
      (*(void (**)(uint64_t (*)(uint64_t), uint64_t))(v49 + 8))(v34, AssociatedTypeWitness);
      sub_2447D50A0();
      swift_allocError();
      v40 = v54;
      *v41 = v53;
      v41[1] = v40;
      v41[2] = v48;
      v41[3] = v31;
      v41[4] = v39;
      swift_bridgeObjectRetain();
      return swift_willThrow();
    }
    else
    {
      swift_bridgeObjectRelease();
      v42 = v45;
      (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v45, v22, v32);
      v43 = v47;
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v47, v42, v32);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v43, 0, 1, v32);
      swift_setAtWritableKeyPath();
      return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v42, v32);
    }
  }
  return result;
}

__n128 CommandLineOption.init<A>(_:_:parameter:enum:description:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, unint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 result;
  __int128 v19;
  __int128 v20;
  uint64_t v24;
  __n128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  swift_getKeyPath();
  v15 = (_QWORD *)sub_2448EB850();
  swift_release();
  CommandLineOption.init<A>(_:_:parameter:optionalEnum:description:)(a1, a2, a3, a4, a5, v15, a6, a7, &v24, a9, a10);
  swift_release();
  v16 = v27;
  v17 = v29;
  result = v25;
  v19 = v28;
  v20 = v26;
  *(_QWORD *)a8 = v24;
  *(__n128 *)(a8 + 8) = result;
  *(_OWORD *)(a8 + 24) = v20;
  *(_QWORD *)(a8 + 40) = v16;
  *(_OWORD *)(a8 + 48) = v19;
  *(_QWORD *)(a8 + 64) = v17;
  return result;
}

uint64_t sub_2447D4404@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;

  v3 = v2;
  v6 = *(_QWORD *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, v3, a1);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(a2, 0, 1, a1);
}

uint64_t CommandLineOption.names.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = *v0;
  v1 = v0[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A058);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_2448ECF10;
  *(_QWORD *)(v3 + 32) = v2;
  *(_QWORD *)(v3 + 40) = v1;
  v6 = v3;
  swift_bridgeObjectRetain();
  v4 = swift_bridgeObjectRetain();
  sub_2447CC13C(v4);
  return v6;
}

uint64_t sub_2447D44D0()
{
  uint64_t v0;
  uint64_t v2;

  sub_2448EB79C();
  sub_2448EABC0();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  v2 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A630);
  sub_2447D48B0();
  sub_2448EA9A4();
  sub_2447D54E4((uint64_t)&v2);
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_2447D4620()
{
  return sub_2447D44D0();
}

uint64_t sub_2447D4658(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v17 = MEMORY[0x24BEE4AF8];
    sub_2447CEE18(0, v2, 0);
    v3 = v17;
    v6 = a1 + 40;
    v15 = *(_QWORD *)(a2 + 32);
    do
    {
      swift_bridgeObjectRetain();
      v7 = sub_2448EAB78();
      v8 = 11565;
      if (v7 == 1)
      {
        v8 = 45;
        v9 = 0xE100000000000000;
      }
      else
      {
        v9 = 0xE200000000000000;
      }
      v16 = v8;
      swift_bridgeObjectRetain();
      sub_2448EABC0();
      swift_bridgeObjectRelease();
      v10 = v9;
      if (v15)
      {
        sub_2448EA944();
        sub_2448EABC0();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRetain();
      sub_2448EABC0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v12 = *(_QWORD *)(v17 + 16);
      v11 = *(_QWORD *)(v17 + 24);
      if (v12 >= v11 >> 1)
        sub_2447CEE18(v11 > 1, v12 + 1, 1);
      v6 += 16;
      *(_QWORD *)(v17 + 16) = v12 + 1;
      v13 = v17 + 16 * v12;
      *(_QWORD *)(v13 + 32) = v16;
      *(_QWORD *)(v13 + 40) = v10;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_2447D4810(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_2447D4860(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_2447D48B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25738A638[0];
  if (!qword_25738A638[0])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A630);
    result = MEMORY[0x24951AC70](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, qword_25738A638);
  }
  return result;
}

uint64_t sub_2447D48FC()
{
  return swift_setAtWritableKeyPath();
}

uint64_t sub_2447D4930(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t result;

  result = a2();
  if (!v2)
    return swift_setAtWritableKeyPath();
  return result;
}

uint64_t sub_2447D4988()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2447D49B4(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v3;

  return sub_2447D3964(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_2447D49D0()
{
  return sub_2448EAD94();
}

uint64_t sub_2447D4A04()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2447D4A30(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v3;

  return sub_2447D3FB0(a1, a2, a3, *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD **)(v3 + 48), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_2447D4A50@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_2447D4404(*(_QWORD *)(a2 + a1 - 24), a3);
}

uint64_t sub_2447D4A7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2447D4FE8(a1, *(_QWORD *)(a4 + a3 - 24));
}

uint64_t sub_2447D4AA8()
{
  return 32;
}

__n128 sub_2447D4AB4(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t destroy for CommandLineOptionDescription()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for CommandLineOptionDescription(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CommandLineOptionDescription(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CommandLineOptionDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CommandLineOptionDescription(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CommandLineOptionDescription(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CommandLineOptionDescription()
{
  return &type metadata for CommandLineOptionDescription;
}

uint64_t sub_2447D4D24()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_2447D4D64(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *sub_2447D4DE8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[8];
  a1[7] = a2[7];
  a1[8] = v4;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_2447D4EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CrashReport.Image(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CrashReport.Image(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for CommandLineOption(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CommandLineOption);
}

uint64_t sub_2447D4FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v5 = sub_2448EB508();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v11 - v6;
  (*(void (**)(char *, uint64_t))(v8 + 16))((char *)&v11 - v6, a1);
  v9 = *(_QWORD *)(a2 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, a2);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v2, a2);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v2, v7, a2);
  }
  return result;
}

unint64_t sub_2447D50A0()
{
  unint64_t result;

  result = qword_25738A6C0;
  if (!qword_25738A6C0)
  {
    result = MEMORY[0x24951AC70](&unk_2448ED35C, &type metadata for UnknownEnumValue);
    atomic_store(result, (unint64_t *)&qword_25738A6C0);
  }
  return result;
}

unint64_t sub_2447D50E4()
{
  unint64_t result;

  result = qword_25738A6C8[0];
  if (!qword_25738A6C8[0])
  {
    result = MEMORY[0x24951AC70](&unk_2448ED31C, &type metadata for InvalidInteger);
    atomic_store(result, qword_25738A6C8);
  }
  return result;
}

uint64_t destroy for InvalidInteger()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for InvalidInteger(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for InvalidInteger(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for InvalidInteger(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InvalidInteger(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InvalidInteger(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InvalidInteger()
{
  return &type metadata for InvalidInteger;
}

uint64_t destroy for UnknownEnumValue()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for UnknownEnumValue(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for UnknownEnumValue(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for UnknownEnumValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UnknownEnumValue(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UnknownEnumValue(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UnknownEnumValue()
{
  return &type metadata for UnknownEnumValue;
}

uint64_t sub_2447D54E4(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_2447D550C()
{
  return sub_2447D49D0();
}

uint64_t SafeDecodable.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32[4];

  v29 = a4;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v27 = sub_2448EBD48();
  v8 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v10 = (char *)v25 - v9;
  v28 = type metadata accessor for SafeDecodable(0, a2, a3, v11);
  v26 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v13 = (_QWORD *)((char *)v25 - v12);
  v14 = a1[3];
  v30 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  sub_2448EBD54();
  if (v4)
  {
    if (qword_257389D00 != -1)
      swift_once();
    v15 = sub_2448EA5FC();
    __swift_project_value_buffer(v15, (uint64_t)qword_25738F7F8);
    v16 = v4;
    v17 = v4;
    v18 = sub_2448EA5E4();
    v19 = sub_2448EB3A0();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      v21 = swift_slowAlloc();
      v32[0] = v21;
      v25[1] = 0;
      *(_DWORD *)v20 = 136315138;
      swift_getErrorValue();
      v22 = Error.describe()();
      v31 = sub_2447D6798(v22._countAndFlagsBits, (unint64_t)v22._object, v32);
      sub_2448EB598();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_2447B9000, v18, v19, "Error decoding SafeDecodable value: %s", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24951AD84](v21, -1, -1);
      MEMORY[0x24951AD84](v20, -1, -1);
    }
    else
    {

    }
    *v13 = v4;
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v32, v32[3]);
    sub_2448EBC04();
    v24 = v27;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, char *, uint64_t))(v8 + 32))(v13, v10, v24);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
  }
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v26 + 32))(v29, v13, v28);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
}

uint64_t type metadata accessor for SafeDecodable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SafeDecodable);
}

uint64_t SafeDecodable.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  sub_2448EBD48();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_2447D58E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SafeDecodable.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t SafeDecodable<>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a3;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = sub_2448EB508();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v14 - v7;
  v9 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v12 = sub_2448EBD48();
  Result.value.getter(v12, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v3) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v8, v3);
  sub_2448EA908();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v3);
}

uint64_t sub_2447D5A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SafeDecodable<>.encode(to:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t SafeDecodable<>.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = sub_2448EB508();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v13 - v8;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v10 = sub_2448EBD48();
  Result.value.getter(v10, (uint64_t)v9);
  v11 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v5) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a3, v9, v5);
  (*(void (**)(uint64_t, uint64_t))(a2 + 8))(v5, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t SafeDecodable.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v2 = sub_2448EBD48();
  return Result.value.getter(v2, a1);
}

uint64_t sub_2447D5BB8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_2448EA7D0();
  *a1 = result;
  return result;
}

uint64_t sub_2447D5BE0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_2448EA7C4();
  *a1 = result;
  return result;
}

uint64_t SafeDecodableArray.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v5 = *((_BYTE *)v4 + 8);
  v14 = *v4;
  v15 = v5;
  v6 = type metadata accessor for SafeDecodable(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v7 = sub_2448EAEE4();
  v13 = MEMORY[0x24951AC70](&protocol conformance descriptor for SafeDecodable<A>, v6);
  v8 = MEMORY[0x24951AC70](MEMORY[0x24BEE12D0], v7, &v13);
  v10 = type metadata accessor for SafeDecodable(0, v7, v8, v9);
  SafeDecodable<>.value.getter(v10, (uint64_t)&protocol witness table for [A], (uint64_t)&v16);
  v14 = v16;
  MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v7);
  v11 = sub_2448EACE0();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t SafeDecodableArray.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  _QWORD v18[4];
  uint64_t v19;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2448EBD54();
  if (!v4)
  {
    __swift_project_boxed_opaque_existential_1(v18, v18[3]);
    v10 = type metadata accessor for SafeDecodable(255, a2, a3, v9);
    v11 = sub_2448EAEE4();
    v19 = MEMORY[0x24951AC70](&protocol conformance descriptor for SafeDecodable<A>, v10);
    v12 = MEMORY[0x24951AC70](MEMORY[0x24BEE12D0], v11, &v19);
    v14 = type metadata accessor for SafeDecodable(0, v11, v12, v13);
    MEMORY[0x24951AC70](&protocol conformance descriptor for SafeDecodable<A>, v14);
    sub_2448EBC04();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    *(_QWORD *)a4 = v16;
    *(_BYTE *)(a4 + 8) = v17;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t SafeDecodableArray.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  char v15;
  _QWORD v16[5];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v19 = a1;
  v16[2] = a2;
  v16[3] = a3;
  v7 = sub_2448EAEE4();
  v9 = (char *)type metadata accessor for SafeDecodable(0, a2, a3, v8);
  v10 = MEMORY[0x24951AC70](MEMORY[0x24BEE12E0], v7);
  v12 = sub_2447D31DC((void (*)(char *, char *))sub_2447D6DCC, (uint64_t)v16, v7, v9, MEMORY[0x24BEE4078], v10, MEMORY[0x24BEE40A8], v11);
  swift_bridgeObjectRelease();
  v18 = v12;
  v13 = sub_2448EAEE4();
  v17 = MEMORY[0x24951AC70](&protocol conformance descriptor for SafeDecodable<A>, v9);
  MEMORY[0x24951AC70](MEMORY[0x24BEE12D0], v13, &v17);
  result = SafeDecodable.init(_:)((uint64_t)&v18, v13, (uint64_t)&v19);
  v15 = v20;
  *(_QWORD *)a4 = v19;
  *(_BYTE *)(a4 + 8) = v15;
  return result;
}

uint64_t sub_2447D5F7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v6);
  return SafeDecodable.init(_:)((uint64_t)v6, a2, a3);
}

uint64_t sub_2447D6000@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SafeDecodableArray.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t SafeDecodableDictionary.value.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SafeDecodableDictionary.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X5>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  char v23;
  void *v24;
  _QWORD v26[2];
  void *v27;
  char v28;
  void *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;

  v32 = a3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2448EBD54();
  if (!v4)
  {
    __swift_project_boxed_opaque_existential_1(&v29, v31);
    v8 = type metadata accessor for SafeDecodable(255, a2, v32, v7);
    v9 = sub_2448EA8B4();
    v10 = MEMORY[0x24951AC70](&protocol conformance descriptor for SafeDecodable<A>, v8);
    v26[0] = MEMORY[0x24BEE0D38];
    v26[1] = v10;
    v11 = MEMORY[0x24951AC70](MEMORY[0x24BEE04E0], v9, v26);
    v13 = type metadata accessor for SafeDecodable(0, v9, v11, v12);
    MEMORY[0x24951AC70](&protocol conformance descriptor for SafeDecodable<A>, v13);
    sub_2448EBC04();
    v14 = v27;
    v24 = v27;
    v15 = v28;
    v23 = v28;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v29);
    v22 = sub_2448EA8B4();
    v29 = v14;
    v30 = v15;
    v16 = SafeDecodable<>.value.getter(v13, (uint64_t)&protocol witness table for [A : B], (uint64_t)&v27);
    v29 = v27;
    MEMORY[0x24BDAC7A8](v16);
    swift_getTupleTypeMetadata2();
    MEMORY[0x24951AC70](MEMORY[0x24BEE04D8], v9);
    v17 = sub_2448EACE0();
    swift_bridgeObjectRelease();
    v27 = (void *)v17;
    v18 = sub_2448EAEE4();
    v19 = MEMORY[0x24951AC70](&protocol conformance descriptor for [A : B], v22);
    v20 = (char *)MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v18);
    KeyValueMap.init<A>(_:)((uint64_t)&v27, v22, v18, v19, v20, (uint64_t)&v29);
    sub_2447D7854(v24, v23);
    *a4 = v29;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_2447D62FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, char *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t TupleTypeMetadata2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v37)(char *, uint64_t, uint64_t);
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;

  v50 = a4;
  v53 = a6;
  v45 = sub_2448EB508();
  v43 = *(_QWORD *)(v45 - 8);
  v10 = MEMORY[0x24BDAC7A8](v45);
  v49 = (uint64_t)&v42 - v11;
  v48 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v44 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_2448EB508();
  v46 = *(_QWORD *)(v13 - 8);
  v47 = v13;
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v42 - v15;
  v17 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v51 = a3;
  v52 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for SafeDecodable(255, a3, a5, v19);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v22 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v23 = *(_QWORD *)(v20 - 8);
  v24 = MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v42 - v25;
  v27 = *(int *)(v24 + 48);
  v29 = v28 + v27;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v28 + v27, a1 + v27, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(v26, v29, v20);
  swift_bridgeObjectRetain();
  sub_2448EBB8C();
  v30 = v17;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v20);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v16, v47);
LABEL_5:
    v35 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v53, 1, 1, v35);
  }
  v31 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v31(v52, v16, a2);
  v32 = v49;
  SafeDecodable.value.getter(v49);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v20);
  v33 = v48;
  v34 = v51;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v32, 1, v51) == 1)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v52, a2);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v32, v45);
    goto LABEL_5;
  }
  v37 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 32);
  v38 = v44;
  v37(v44, v32, v34);
  v39 = swift_getTupleTypeMetadata2();
  v40 = v53;
  v41 = &v53[*(int *)(v39 + 48)];
  v31(v53, v52, a2);
  v37(v41, (uint64_t)v38, v34);
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v40, 0, 1, v39);
}

uint64_t sub_2447D6688@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return SafeDecodableDictionary.init(from:)(a1, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 48), a3);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_2447D66C4(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_2447D66D4(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_2447D6708(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_2447D6728(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a4();
  sub_2447D6798(v6, v7, a3);
  v8 = *a1 + 8;
  sub_2448EB598();
  result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t sub_2447D6798(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_2447D6868(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_2447C92C4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_2447C92C4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_2447D6868(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_2448EB5A4();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_2447D6A20(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_2448EB820();
  if (!v8)
  {
    sub_2448EB994();
    __break(1u);
LABEL_17:
    result = sub_2448EBA48();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_2447D6A20(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_2447D6AB4(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_2447D6C28(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_2447D6C28(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_2447D6AB4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_2448CC130(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_2448EB7A8();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_2448EB994();
      __break(1u);
LABEL_10:
      v2 = sub_2448EABE4();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_2448EBA48();
    __break(1u);
LABEL_14:
    result = sub_2448EB994();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t sub_2447D6C28(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A140);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

_BYTE **sub_2447D6D74(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

uint64_t sub_2447D6D84@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;

  type metadata accessor for SafeDecodable(0, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1);
  return SafeDecodable.value.getter(a2);
}

uint64_t sub_2447D6DCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2447D5F7C(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_2447D6DE8@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t *v2;

  return sub_2447D62FC(a1, v2[2], v2[3], v2[5], v2[6], a2);
}

uint64_t sub_2447D6E08()
{
  uint64_t result;
  unint64_t v1;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  result = sub_2448EBD48();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

id *sub_2447D6E90(id *a1, id *a2, uint64_t a3)
{
  id *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  id v11;
  id v12;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v8 = (char *)*a2;
    *v3 = *a2;
    v3 = (id *)&v8[(unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8];
    swift_retain();
  }
  else
  {
    v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 >= 2)
    {
      if (v5 <= 3)
        v10 = v5;
      else
        v10 = 4;
      __asm { BR              X13 }
    }
    if (v9 == 1)
    {
      v11 = *a2;
      v12 = *a2;
      *v3 = v11;
      *((_BYTE *)v3 + v5) = 1;
    }
    else
    {
      (*(void (**)(id *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v5) = 0;
    }
  }
  return v3;
}

void sub_2447D6FB4(id *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 8)
    v3 = 8;
  v4 = *((unsigned __int8 *)a1 + v3);
  if (v4 < 2)
  {
    if (v4 == 1)

    else
      (*(void (**)(void))(v2 + 8))();
  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    ((void (*)(void))((char *)&loc_2447D6FFC + 4 * byte_2448ED3B5[v5]))();
  }
}

_QWORD *sub_2447D7054(_QWORD *a1, id *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  id v8;
  id v9;
  char v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    v8 = *a2;
    v9 = *a2;
    *a1 = v8;
    v10 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v4 + 16))(a1);
    v10 = 0;
  }
  *((_BYTE *)a1 + v5) = v10;
  return a1;
}

id *sub_2447D7138(id *a1, void **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  id v13;
  char v14;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)

    else
      (*(void (**)(id *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      v12 = *a2;
      v13 = v12;
      *a1 = v12;
      v14 = 1;
    }
    else
    {
      (*(void (**)(id *, void **, uint64_t))(v6 + 16))(a1, a2, v5);
      v14 = 0;
    }
    *((_BYTE *)a1 + v7) = v14;
  }
  return a1;
}

_QWORD *sub_2447D72CC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    *a1 = *a2;
    v8 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v4 + 32))(a1);
    v8 = 0;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

id *sub_2447D73A0(id *a1, id *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)

    else
      (*(void (**)(id *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      *a1 = *a2;
      v12 = 1;
    }
    else
    {
      (*(void (**)(id *, id *, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 0;
    }
    *((_BYTE *)a1 + v7) = v12;
  }
  return a1;
}

uint64_t sub_2447D752C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 8uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2447D75F0 + 4 * byte_2448ED3D8[(v4 - 1)]))();
}

void sub_2447D763C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 8)
    v5 = 8;
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_2447D77E4(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_2447D7828(*(id *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

id sub_2447D7828(id a1, char a2)
{
  if ((a2 & 1) != 0)
    return a1;
  else
    return (id)swift_bridgeObjectRetain();
}

void sub_2447D7834(uint64_t a1)
{
  sub_2447D7854(*(id *)a1, *(_BYTE *)(a1 + 8));
}

void sub_2447D7854(id a1, char a2)
{
  if ((a2 & 1) != 0)

  else
    swift_bridgeObjectRelease();
}

uint64_t sub_2447D7860(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;
  void *v5;
  char v6;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_2447D7828(*(id *)a2, v4);
  v5 = *(void **)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_2447D7854(v5, v6);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t sub_2447D78C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  void *v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(void **)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_2447D7854(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for InvalidationHandle.TraceStatus(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for InvalidationHandle.TraceStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t type metadata accessor for SafeDecodableArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SafeDecodableArray);
}

uint64_t sub_2447D7998()
{
  return swift_allocateGenericValueMetadata();
}

void type metadata accessor for SafeDecodableDictionary()
{
  JUMPOUT(0x24951ABD4);
}

uint64_t Either.left.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v9 + 56))(a2, 1, 1, *(_QWORD *)(a1 + 16));
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a1);
  }
  else
  {
    (*(void (**)(uint64_t, char *, _QWORD))(v9 + 32))(a2, v6, *(_QWORD *)(a1 + 16));
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, v8);
  }
}

uint64_t Either.right.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(uint64_t, char *, _QWORD))(v9 + 32))(a2, v6, *(_QWORD *)(a1 + 24));
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, v8);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v9 + 56))(a2, 1, 1, *(_QWORD *)(a1 + 24));
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a1);
  }
}

uint64_t Either.analyze<A>(left:right:)(void (*a1)(char *), uint64_t a2, void (*a3)(char *), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  void (*v23)(char *);
  uint64_t v24;
  void (*v25)(char *);

  v24 = a4;
  v25 = a3;
  v23 = a1;
  v5 = *(_QWORD *)(a5 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v7);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v17, v20, v19);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v17, v5);
    v25(v9);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v17, v11);
    v23(v15);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
}

uint64_t Either.mapLeft<A>(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v15 + 16))(v14, v16);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v17 = *(_QWORD *)(a2 + 24);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(a4, v14, v17);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v14, v8);
    a1(v12);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    v17 = *(_QWORD *)(a2 + 24);
  }
  type metadata accessor for Either(0, a3, v17, v18);
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for Either(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Either);
}

uint64_t Either.flatMapLeft<A>(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v15 + 16))(v14, v16);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v17 = *(_QWORD *)(a2 + 24);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(a4, v14, v17);
    type metadata accessor for Either(0, a3, v17, v18);
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v14, v8);
    a1(v12);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
}

uint64_t Either.flattenedLeft<A>(type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v6, v8, a2);
  if (swift_getEnumCaseMultiPayload() != 1)
    return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 32))(a3, v6);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 32))(a3, v6);
  return swift_storeEnumTagMultiPayload();
}

uint64_t Either.mapRight<A>(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v15 + 16))(v14, v16);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v14, v8);
    a1(v12);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    v18 = *(_QWORD *)(a2 + 16);
  }
  else
  {
    v18 = *(_QWORD *)(a2 + 16);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a4, v14, v18);
  }
  type metadata accessor for Either(0, v18, a3, v17);
  return swift_storeEnumTagMultiPayload();
}

uint64_t Either.flatMapRight<A>(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v15 + 16))(v14, v16);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v14, v8);
    a1(v12);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  else
  {
    v18 = *(_QWORD *)(a2 + 16);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a4, v14, v18);
    type metadata accessor for Either(0, v18, a3, v19);
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t Either.flattenedRight<A>(type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v6, v8, a2);
  if (swift_getEnumCaseMultiPayload() == 1)
    return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 32))(a3, v6);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 32))(a3, v6);
  return swift_storeEnumTagMultiPayload();
}

uint64_t Either.Discriminant.description.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x7468676972;
  else
    return 1952867692;
}

BOOL static Either.Discriminant.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t Either.Discriminant.hash(into:)()
{
  return sub_2448EBD0C();
}

uint64_t Either.Discriminant.hashValue.getter()
{
  sub_2448EBD00();
  sub_2448EBD0C();
  return sub_2448EBD3C();
}

BOOL sub_2447D8468(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Either.Discriminant.== infix(_:_:)(*a1, *a2);
}

uint64_t sub_2447D8474()
{
  return Either.Discriminant.hashValue.getter();
}

uint64_t sub_2447D847C()
{
  return Either.Discriminant.hash(into:)();
}

uint64_t sub_2447D8484()
{
  sub_2448EBD00();
  Either.Discriminant.hash(into:)();
  return sub_2448EBD3C();
}

uint64_t sub_2447D84C0()
{
  char *v0;

  return Either.Discriminant.description.getter(*v0);
}

BOOL Either.discriminant.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BOOL8 v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  v5 = swift_getEnumCaseMultiPayload() == 1;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v5;
}

uint64_t Either<>.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  MEMORY[0x24BDAC7A8]();
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v6 + 16))(v5);
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 32))(a2, v5);
}

uint64_t Either<>.init(left:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  sub_2448EBD48();
  if (swift_getEnumCaseMultiPayload() == 1)
    *a3 = *a1;
  else
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Either(0, a2, v6, v7);
  return swift_storeEnumTagMultiPayload();
}

uint64_t Either<>.init(right:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  sub_2448EBD48();
  if (swift_getEnumCaseMultiPayload() == 1)
    *a3 = *a1;
  else
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Either(0, v6, a2, v7);
  return swift_storeEnumTagMultiPayload();
}

void sub_2447D8764()
{
  JUMPOUT(0x24951AC70);
}

uint64_t sub_2447D8774()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_2447D87FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    v11 = *((unsigned __int8 *)a2 + v6);
    if (v11 >= 2)
    {
      if (v6 <= 3)
        v12 = v6;
      else
        v12 = 4;
      __asm { BR              X15 }
    }
    if (v11 == 1)
    {
      (*(void (**)(uint64_t *))(v5 + 16))(a1);
      *((_BYTE *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v6) = 0;
    }
  }
  else
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

uint64_t sub_2447D8928(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(v2 - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (v6 < 2)
  {
    if (v6 == 1)
      v3 = *(_QWORD *)(v2 - 8);
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  else
  {
    if (v4 <= 3)
      v7 = v4;
    else
      v7 = 4;
    return ((uint64_t (*)(void))((char *)&loc_2447D8974 + 4 * byte_2448ED575[v7]))();
  }
}

uint64_t sub_2447D89C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t sub_2447D8A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t sub_2447D8C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t sub_2447D8CEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t sub_2447D8E68(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  if (v3 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2447D8F30 + 4 * byte_2448ED598[(v4 - 1)]))();
}

void sub_2447D8F7C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64);
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_2447D9128(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64);
  if (v2 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64))
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_2447D9174 + 4 * byte_2448ED5A6[v3]))();
}

void sub_2447D91BC(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  if (a2 > 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16)
                                                                                              - 8)
                                                                                  + 64))
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    else
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    v6 = a2 - 2;
    if (v5 < 4)
    {
      v7 = v6 >> (8 * v5);
      v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 2;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 2;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    if (v4 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    a1[v4] = a2;
  }
}

uint64_t sub_2447D92A4()
{
  return swift_allocateGenericValueMetadata();
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t _s15PaddingPositionOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_2447D9348(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2447D9394 + 4 * byte_2448ED5B0[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2447D93C8 + 4 * byte_2448ED5AB[v4]))();
}

uint64_t sub_2447D93C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2447D93D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2447D93D8);
  return result;
}

uint64_t sub_2447D93E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2447D93ECLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2447D93F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2447D93F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2447D9404(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_2447D940C(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

uint64_t type metadata accessor for Either.Discriminant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Either.Discriminant);
}

uint64_t NSObjectBox.value.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  char *v4;

  v3 = *MEMORY[0x24BEE4EA0] & *v1;
  v4 = (char *)v1 + *(_QWORD *)(v3 + 0x58);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t NSObjectBox.value.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  char *v4;

  v3 = *MEMORY[0x24BEE4EA0] & *v1;
  v4 = (char *)v1 + *(_QWORD *)(v3 + 0x58);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 40))(v4, a1);
  return swift_endAccess();
}

uint64_t (*NSObjectBox.value.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

id NSObjectBox.__allocating_init(_:)(uint64_t a1)
{
  objc_class *v1;
  objc_class *v2;
  id v4;
  id v5;

  v2 = v1;
  v4 = objc_allocWithZone(v1);
  v5 = sub_2447D96D0(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)v2 + 10) - 8) + 8))(a1);
  return v5;
}

id NSObjectBox.init(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  id v4;

  v3 = *MEMORY[0x24BEE4EA0] & *v1;
  v4 = sub_2447D96D0(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(a1);
  return v4;
}

id NSObjectBox.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void NSObjectBox.init()()
{
  sub_2447D9748();
}

void sub_2447D9658()
{
  sub_2447D9748();
}

id NSObjectBox.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_2447D96A8(char *a1)
{
  return (*(uint64_t (**)(char *))(*(_QWORD *)(*(_QWORD *)((*MEMORY[0x24BEE4EA0] & *(_QWORD *)a1) + 0x50)
                                                       - 8)
                                           + 8))(&a1[*(_QWORD *)((*MEMORY[0x24BEE4EA0] & *(_QWORD *)a1) + 0x58)]);
}

id sub_2447D96D0(uint64_t a1)
{
  char *v1;
  objc_class *ObjectType;
  objc_super v5;

  ObjectType = (objc_class *)swift_getObjectType();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)((*MEMORY[0x24BEE4EA0] & *(_QWORD *)v1) + 0x50)
                                                      - 8)
                                          + 16))(&v1[*(_QWORD *)((*MEMORY[0x24BEE4EA0] & *(_QWORD *)v1) + 0x58)], a1);
  v5.receiver = v1;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

void sub_2447D9748()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_2447D9774()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for NSObjectBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NSObjectBox);
}

uint64_t method lookup function for NSObjectBox()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NSObjectBox.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

void IdentifiedSet.subscript.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  JUMPOUT(0x2495190C8);
}

void sub_2447D98A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for IdentifiedSet(0, *(_QWORD *)(a3 + a2 - 16), *(_QWORD *)(a3 + a2 - 8), a4);
  IdentifiedSet.subscript.getter();
}

uint64_t IdentifiedSet.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  sub_2447DD3E0(a1, a2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a2, AssociatedTypeWitness);
  v5 = sub_2448EB508();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
}

void IdentifiedSet.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;

  v6 = malloc(0x48uLL);
  *a1 = v6;
  *v6 = a3;
  v6[1] = v3;
  v7 = sub_2448EB508();
  v6[2] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[3] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v6[4] = malloc(v9);
  v6[5] = malloc(v9);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[6] = AssociatedTypeWitness;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[7] = v11;
  v6[8] = malloc(*(_QWORD *)(v11 + 64));
  (*(void (**)(void))(v11 + 16))();
  IdentifiedSet.subscript.getter();
}

void (*sub_2447D9A5C())(uint64_t a1, char a2)
{
  return sub_2447D9A84;
}

void sub_2447D9A84(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t);

  v2 = *(void **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v3 = *(void **)(*(_QWORD *)a1 + 64);
  v5 = *(void **)(*(_QWORD *)a1 + 40);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v7 = *(void **)(*(_QWORD *)a1 + 32);
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v8 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 32), v5, v9);
    sub_2447DD3E0((uint64_t)v7, (uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v6);
    v10 = *(void (**)(void *, uint64_t))(v8 + 8);
    v10(v7, v9);
  }
  else
  {
    sub_2447DD3E0(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v6);
    v10 = *(void (**)(void *, uint64_t))(v8 + 8);
  }
  v10(v5, v9);
  free(v3);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t IdentifiedSet.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  sub_2448EAE54();
  swift_getAssociatedConformanceWitness();
  result = sub_2448EA848();
  *a1 = result;
  return result;
}

uint64_t IdentifiedSet.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t result;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v12 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = &v16[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t))(v12 + 16))(v14, a1);
  v17 = a2;
  v18 = a3;
  v19 = a4;
  v20 = a5;
  IdentifiedSet.init<A>(_:uniquingElementsWith:)((uint64_t)v14, a3, &v21);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a1, a3);
  *a6 = v21;
  return result;
}

uint64_t IdentifiedSet.init<A>(_:uniquingElementsWith:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  sub_2448EAE54();
  swift_getAssociatedConformanceWitness();
  sub_2448EA848();
  sub_2448EA8B4();
  sub_2448EAD40();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  if (!v7)
    *a3 = v8;
  return result;
}

uint64_t IdentifiedSet.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v10 = a1;
  v7 = sub_2448EAEE4();
  v8 = MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v7);
  result = IdentifiedSet.init<A>(_:)((uint64_t)&v10, a2, v7, a3, v8, &v11);
  *a4 = v11;
  return result;
}

uint64_t sub_2447D9ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  uint64_t v9;

  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  sub_2448EBB68();
  swift_allocObject();
  sub_2448EAE0C();
  v9 = v8 + *(int *)(TupleTypeMetadata2 + 48);
  sub_2448EAD94();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(v9, a2, a5);
  sub_244805474();
  swift_getAssociatedConformanceWitness();
  sub_2448EA848();
  sub_2448EA8B4();
  return sub_2448EA878();
}

BOOL IdentifiedSet.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  _BOOL8 v13;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a2 + 16);
  v16 = sub_2448EB508();
  v4 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v6 = (char *)&v15 - v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v15 - v9;
  v11 = *v2;
  sub_2448EAD94();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x2495190C8](v10, v11, AssociatedTypeWitness, v3, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  v13 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v6, 1, v3) != 1;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v16);
  return v13;
}

uint64_t IdentifiedSet.insert(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)&v12 - v7;
  MEMORY[0x24BDAC7A8](v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  sub_2448EAD94();
  swift_getAssociatedConformanceWitness();
  sub_2448EA8B4();
  sub_2448EA824();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
}

uint64_t IdentifiedSet.remove(_:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v3 = (char *)&v5 - v2;
  sub_2448EAD94();
  swift_getAssociatedConformanceWitness();
  sub_2448EA8B4();
  sub_2448EA818();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
}

Swift::Void __swiftcall IdentifiedSet.removeAll()()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  sub_2448EA8B4();
  sub_2448EA8A8();
}

uint64_t IdentifiedSet.filter(_:)@<X0>(uint64_t a1@<X2>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *v2;
  v7 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v12 = v5;
  v8 = sub_2448EA884();
  swift_bridgeObjectRetain();
  MEMORY[0x24951AC70](MEMORY[0x24BEE03C0], v8);
  result = sub_2448EAD34();
  if (!v3)
  {
    v12 = result;
    v10 = sub_2448EAEE4();
    v11 = MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v10);
    return IdentifiedSet.init<A>(_:)((uint64_t)&v12, v7, v10, v6, v11, a2);
  }
  return result;
}

uint64_t IdentifiedSet.merge<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[8];

  v4 = *(_QWORD *)(a2 + 24);
  v6[2] = *(_QWORD *)(a2 + 16);
  v6[3] = a3;
  v6[4] = v4;
  v6[5] = a4;
  return IdentifiedSet.merge<A>(_:uniquingElementsWith:)(a1, (uint64_t)sub_2447DD52C, (uint64_t)v6, a2, a3);
}

uint64_t IdentifiedSet.merge<A>(_:uniquingElementsWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v8);
  result = IdentifiedSet.init<A>(_:uniquingElementsWith:)((uint64_t)v8, a5, &v12);
  if (!v5)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    sub_2448EA8B4();
    return sub_2448EA878();
  }
  return result;
}

uint64_t IdentifiedSet.merging<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[8];

  v8[7] = *v5;
  v6 = *(_QWORD *)(a2 + 24);
  v8[2] = *(_QWORD *)(a2 + 16);
  v8[3] = a3;
  v8[4] = v6;
  v8[5] = a4;
  return IdentifiedSet.merging<A>(_:uniquingElementsWith:)(a1, (uint64_t)sub_2447DD52C, (uint64_t)v8, a2, a3, a5);
}

uint64_t IdentifiedSet.merging<A>(_:uniquingElementsWith:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v15;

  v15 = *v6;
  swift_bridgeObjectRetain();
  IdentifiedSet.merge<A>(_:uniquingElementsWith:)(a1, a2, a3, a4, a5);
  result = v15;
  if (v7)
    return swift_bridgeObjectRelease();
  *a6 = v15;
  return result;
}

uint64_t IdentifiedSet.subtract<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  void (*v26)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;

  v34 = a4;
  v33 = a2;
  v6 = *(_QWORD *)(a2 + 16);
  v29 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_2448EB508();
  v31 = *(_QWORD *)(v9 - 8);
  v32 = v9;
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v28 - v14;
  v16 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v22 = (char *)&v28 - v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, v19);
  sub_2448EACB0();
  swift_getAssociatedConformanceWitness();
  v34 = v22;
  v23 = AssociatedTypeWitness;
  sub_2448EB58C();
  v24 = v29;
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  if (v25(v15, 1, v6) != 1)
  {
    v26 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
    do
    {
      v26(v8, v15, v6);
      IdentifiedSet.remove(_:)();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v32);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v6);
      sub_2448EB58C();
    }
    while (v25(v15, 1, v6) != 1);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v34, v23);
}

uint64_t IdentifiedSet.subtracting<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return sub_2447DAF9C(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))IdentifiedSet.subtract<A>(_:), a5);
}

uint64_t IdentifiedSet.formIntersection<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v5 = v4;
  Sequence<>.identified()(a3, a4, *(_QWORD *)(a2 + 24), &v9);
  swift_getAssociatedTypeWitness();
  swift_bridgeObjectRetain();
  swift_getTupleTypeMetadata2();
  sub_2448EAE54();
  swift_getAssociatedConformanceWitness();
  sub_2448EA848();
  v6 = sub_2448EA8B4();
  MEMORY[0x24951AC70](MEMORY[0x24BEE04D8], v6);
  sub_2448EAD40();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = v9;
  result = swift_bridgeObjectRelease();
  *v5 = v7;
  return result;
}

void sub_2447DAC54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  _QWORD v28[10];
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v30 = a3;
  v28[9] = a1;
  v9 = sub_2448EB508();
  v28[4] = *(_QWORD *)(v9 - 8);
  v28[5] = v9;
  v10 = MEMORY[0x24BDAC7A8](v9);
  v28[8] = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v14 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v28[6] = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)v28 - v17;
  v19 = *(_QWORD *)(a4 - 8);
  v20 = MEMORY[0x24BDAC7A8](v16);
  v31 = (char *)v28 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = v20;
  v22 = *(int *)(v20 + 48);
  v23 = &v18[v22];
  v24 = a2 + v22;
  v29 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  v28[7] = a2;
  v28[1] = v25;
  v25(v18, a2, AssociatedTypeWitness);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v28[2] = v24;
  v26(v23, v24, a4);
  v32 = v30;
  v30 = a6;
  type metadata accessor for IdentifiedSet(0, a4, a6, v27);
  IdentifiedSet.subscript.getter();
}

uint64_t sub_2447DAE20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 160) + 8))(v3, *(_QWORD *)(v7 - 152));
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 112) + 8))(v0, v5);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v7 - 96), v3, v1);
    v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
    v9(v6, v1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 112) + 8))(v0, v5);
    v10 = *(_QWORD *)(v7 - 144) + *(int *)(*(_QWORD *)(v7 - 168) + 48);
    (*(void (**)(_QWORD, _QWORD, uint64_t))(v7 - 184))(*(_QWORD *)(v7 - 144), *(_QWORD *)(v7 - 136), v5);
    v4(v10, *(_QWORD *)(v7 - 176), v1);
    v11 = *(_QWORD *)(v7 - 128);
    v12 = *(_QWORD *)(v7 - 96);
    v4(v11, v12, v1);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 56))(v11, 0, 1, v1);
    swift_getAssociatedConformanceWitness();
    sub_2448EA8B4();
    sub_2448EA8F0();
    v9(v12, v1);
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v10, v1);
  }
}

uint64_t IdentifiedSet.intersection<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return sub_2447DAF9C(a1, a2, a3, a4, IdentifiedSet.formIntersection<A>(_:), a5);
}

uint64_t sub_2447DAF9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, _QWORD *a6@<X8>)
{
  _QWORD *v6;

  *a6 = *v6;
  swift_bridgeObjectRetain();
  return a5(a1, a2, a3, a4);
}

uint64_t IdentifiedSet.values.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];

  v2 = *v1;
  v4 = *(char **)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v10[5] = v2;
  v10[2] = v4;
  v10[3] = v3;
  v5 = sub_2448EA884();
  swift_bridgeObjectRetain();
  v6 = MEMORY[0x24951AC70](MEMORY[0x24BEE03C8], v5);
  v8 = sub_2447D31DC((void (*)(char *, char *))sub_2447DD5B4, (uint64_t)v10, v5, v4, MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t IdentifiedSet.ids.getter()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v0 = sub_2448EA854();
  swift_bridgeObjectRetain();
  MEMORY[0x24951AC70](MEMORY[0x24BEE0310], v0);
  return sub_2448EB16C();
}

uint64_t IdentifiedSet.startIndex.getter(uint64_t a1)
{
  return sub_2447DB1E4(a1, MEMORY[0x24BEE0268]);
}

uint64_t IdentifiedSet.endIndex.getter(uint64_t a1)
{
  return sub_2447DB1E4(a1, MEMORY[0x24BEE0438]);
}

uint64_t sub_2447DB1E4(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  v4 = *v2;
  v5 = *(_QWORD *)(a1 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return a2(v4, AssociatedTypeWitness, v5, AssociatedConformanceWitness);
}

uint64_t IdentifiedSet.index(after:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return sub_2448EA86C();
}

uint64_t IdentifiedSet.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD v7[2];

  v7[1] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v5 = (char *)v7 - v4;
  swift_getAssociatedConformanceWitness();
  sub_2448EA8FC();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
}

uint64_t sub_2447DB420@<X0>(uint64_t a1@<X8>)
{
  return sub_2447DB438((uint64_t (*)(void))IdentifiedSet.startIndex.getter, a1);
}

uint64_t sub_2447DB42C@<X0>(uint64_t a1@<X8>)
{
  return sub_2447DB438((uint64_t (*)(void))IdentifiedSet.endIndex.getter, a1);
}

uint64_t sub_2447DB438@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  char v5;

  result = a1();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = v5 & 1;
  return result;
}

uint64_t (*sub_2447DB464(_QWORD *a1, uint64_t a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_2447DB4C8(v6, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned __int8 *)(a2 + 16), a3);
  return sub_2447DB4C4;
}

uint64_t (*sub_2447DB4C8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(a5 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  *a1 = v7;
  a1[1] = v8;
  a1[2] = malloc(*(_QWORD *)(v8 + 64));
  IdentifiedSet.subscript.getter(a2, a3);
  return sub_2447DB54C;
}

void sub_2447DB560(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = -2;
}

uint64_t sub_2447DB588@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  result = IdentifiedSet.index(after:)();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4 & 1;
  return result;
}

uint64_t sub_2447DB5C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  v5 = IdentifiedSet.index(after:)();
  v7 = v6;
  v9 = v8;
  result = sub_2447DDA3C(v2, v3, v4);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v9 & 1;
  return result;
}

uint64_t sub_2447DB63C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return IdentifiedSet.init(arrayLiteral:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t sub_2447DB648@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;

  v4 = *v2;
  result = IdentifiedSet.startIndex.getter(a1);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 24) = v7 & 1;
  return result;
}

uint64_t sub_2447DB684(uint64_t a1)
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for IdentifiedSet<A>, a1);
  return sub_2448EB22C();
}

uint64_t sub_2447DB6B8()
{
  return 2;
}

uint64_t sub_2447DB6C0(uint64_t a1)
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for IdentifiedSet<A>, a1);
  return sub_2448EB238();
}

uint64_t sub_2447DB6F8()
{
  return sub_2448EAD10();
}

uint64_t static IdentifiedSet<>.== infix(_:_:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return sub_2448EA8CC();
}

uint64_t sub_2447DB7B4()
{
  return static IdentifiedSet<>.== infix(_:_:)();
}

void OrderedIdentifiedSet.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;

  v7 = malloc(0x48uLL);
  *a1 = v7;
  *v7 = a3;
  v7[1] = v3;
  v8 = sub_2448EB508();
  v7[2] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[3] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[4] = malloc(v10);
  v7[5] = malloc(v10);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[6] = AssociatedTypeWitness;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7[7] = v12;
  v7[8] = malloc(*(_QWORD *)(v12 + 64));
  (*(void (**)(void))(v12 + 16))();
  OrderedIdentifiedSet.subscript.getter(a2, a3);
}

{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;

  v7 = malloc(0x48uLL);
  *a1 = v7;
  *v7 = a3;
  v7[1] = v3;
  v8 = sub_2448EB508();
  v7[2] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[3] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[4] = malloc(v10);
  v7[5] = malloc(v10);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[6] = AssociatedTypeWitness;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7[7] = v12;
  v7[8] = malloc(*(_QWORD *)(v12 + 64));
  (*(void (**)(void))(v12 + 16))();
  OrderedIdentifiedSet.subscript.getter(a2, a3);
}

uint64_t (*sub_2447DB8AC())()
{
  return sub_2447DB8D4;
}

void _s20PreviewsFoundationOS20OrderedIdentifiedSetVyxSg2IDQzcig_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  v2 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for OrderedDictionary(0, AssociatedTypeWitness, v2, AssociatedConformanceWitness);
  OrderedDictionary.subscript.getter();
}

uint64_t sub_2447DB98C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v6;

  v6 = type metadata accessor for OrderedIdentifiedSet(0, *(_QWORD *)(a3 + a2 - 16), *(_QWORD *)(a3 + a2 - 8), (uint64_t)a4);
  return a4(a2, v6);
}

uint64_t _s20PreviewsFoundationOS20OrderedIdentifiedSetVyxSg2IDQzcis_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;

  sub_2447DD5EC(a1, a2, a3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a2, AssociatedTypeWitness);
  v6 = sub_2448EB508();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
}

uint64_t (*sub_2447DBB50())()
{
  return sub_2447DB8D4;
}

void sub_2447DBB78(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void *, uint64_t);

  v2 = *a1;
  v4 = (*a1)[7];
  v3 = (void *)(*a1)[8];
  v5 = (void *)(*a1)[5];
  v6 = (*a1)[6];
  v8 = (*a1)[3];
  v7 = (void *)(*a1)[4];
  v9 = (*a1)[2];
  v10 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v8 + 16))((*a1)[4], v5, v9);
    sub_2447DD5EC((uint64_t)v7, (uint64_t)v3, v10);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v6);
    v11 = *(void (**)(void *, uint64_t))(v8 + 8);
    v11(v7, v9);
  }
  else
  {
    sub_2447DD5EC((*a1)[5], (uint64_t)v3, v10);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v6);
    v11 = *(void (**)(void *, uint64_t))(v8 + 8);
  }
  v11(v5, v9);
  free(v3);
  free(v5);
  free(v7);
  free(v2);
}

double OrderedIdentifiedSet.init()@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t AssociatedConformanceWitness;
  double result;
  __int128 v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  v5 = sub_2448EAE54();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  OrderedDictionary.init(dictionaryLiteral:)(v5, AssociatedTypeWitness, a1, AssociatedConformanceWitness, &v8);
  result = *(double *)&v8;
  *a2 = v8;
  return result;
}

double OrderedIdentifiedSet.init<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t AssociatedConformanceWitness;
  double result;
  __int128 v12;
  __int128 v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  v9 = sub_2448EAE54();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  OrderedDictionary.init(dictionaryLiteral:)(v9, AssociatedTypeWitness, a2, AssociatedConformanceWitness, &v12);
  type metadata accessor for OrderedDictionary(0, AssociatedTypeWitness, a2, AssociatedConformanceWitness);
  sub_2448EAD40();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  result = *(double *)&v13;
  *a4 = v13;
  return result;
}

uint64_t sub_2447DBE6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)v16 - v7;
  v9 = sub_2448EB508();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v16 - v11;
  sub_2448EAD94();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v14 = type metadata accessor for OrderedDictionary(0, AssociatedTypeWitness, a3, AssociatedConformanceWitness);
  OrderedDictionary.updateValue(_:forKey:)(a2, (uint64_t)v8, v14, (uint64_t)v12);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

double OrderedIdentifiedSet.init(arrayLiteral:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  double result;
  uint64_t v7;
  __int128 v8;

  v7 = a1;
  v5 = sub_2448EAEE4();
  MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v5);
  OrderedIdentifiedSet.init<A>(_:)((uint64_t)&v7, a2, v5, &v8);
  result = *(double *)&v8;
  *a3 = v8;
  return result;
}

void OrderedIdentifiedSet.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = sub_2448EB508();
  MEMORY[0x24BDAC7A8](v3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2448EAD94();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for OrderedDictionary(0, AssociatedTypeWitness, v2, AssociatedConformanceWitness);
  OrderedDictionary.subscript.getter();
}

BOOL sub_2447DC164()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v4, v3);
  v6 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 48))(v2, 1, v1) != 1;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 112) + 8))(v2, *(_QWORD *)(v5 - 104));
  return v6;
}

uint64_t OrderedIdentifiedSet.insert(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v13;

  v5 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)&v13 - v8;
  sub_2448EAD94();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = type metadata accessor for OrderedDictionary(0, AssociatedTypeWitness, v5, AssociatedConformanceWitness);
  OrderedDictionary.updateValue(_:forKey:)(a1, (uint64_t)v9, v11, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
}

uint64_t OrderedIdentifiedSet.remove(_:)@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)&v11 - v6;
  sub_2448EAD94();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = type metadata accessor for OrderedDictionary(0, AssociatedTypeWitness, v3, AssociatedConformanceWitness);
  OrderedDictionary.removeValue(forKey:)((uint64_t)v7, v9, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
}

Swift::Void __swiftcall OrderedIdentifiedSet.removeAll()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  v1 = *(_QWORD *)(v0 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for OrderedDictionary(0, AssociatedTypeWitness, v1, AssociatedConformanceWitness);
  OrderedDictionary.removeAll()();
}

double OrderedIdentifiedSet.filter(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v16;
  double result;
  _QWORD v18[8];
  __int128 v19;
  __int128 v20;

  v6 = v5;
  v11 = *v4;
  v10 = v4[1];
  v12 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(a3 + 24);
  OrderedIdentifiedSet.init()(v12, &v20);
  v18[6] = v11;
  v18[7] = v10;
  v18[2] = v12;
  v18[3] = v13;
  v18[4] = a1;
  v18[5] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v16 = (_QWORD *)type metadata accessor for OrderedDictionary(0, AssociatedTypeWitness, v12, AssociatedConformanceWitness);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  OrderedDictionary.filter(_:)((uint64_t (*)(char *, char *))sub_2447DD754, (uint64_t)v18, v16, &v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v6)
  {
    result = *(double *)&v19;
    *a4 = v19;
  }
  return result;
}

uint64_t OrderedIdentifiedSet.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v11;
  __int128 v13;

  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v6);
  v8 = *(_QWORD *)(a2 + 16);
  OrderedIdentifiedSet.init<A>(_:)((uint64_t)v6, v8, a3, &v13);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = (_QWORD *)type metadata accessor for OrderedDictionary(0, AssociatedTypeWitness, v8, AssociatedConformanceWitness);
  OrderedDictionary.append(contentsOf:)((uint64_t *)&v13, v11);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t OrderedIdentifiedSet.appending<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return sub_2447DCE48(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))OrderedIdentifiedSet.append<A>(contentsOf:), a5);
}

uint64_t OrderedIdentifiedSet.subtract<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  void (*v26)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;

  v34 = a4;
  v33 = a2;
  v6 = *(_QWORD *)(a2 + 16);
  v29 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_2448EB508();
  v31 = *(_QWORD *)(v9 - 8);
  v32 = v9;
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v28 - v14;
  v16 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v22 = (char *)&v28 - v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, v19);
  sub_2448EACB0();
  swift_getAssociatedConformanceWitness();
  v34 = v22;
  v23 = AssociatedTypeWitness;
  sub_2448EB58C();
  v24 = v29;
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  if (v25(v15, 1, v6) != 1)
  {
    v26 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
    do
    {
      v26(v8, v15, v6);
      OrderedIdentifiedSet.remove(_:)(v33, v12);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v32);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v6);
      sub_2448EB58C();
    }
    while (v25(v15, 1, v6) != 1);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v34, v23);
}

uint64_t OrderedIdentifiedSet.subtracting<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return sub_2447DCE48(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))OrderedIdentifiedSet.subtract<A>(_:), a5);
}

__n128 OrderedIdentifiedSet.formIntersection<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 *v4;
  __n128 *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  __n128 result;
  __n128 v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;

  v5 = v4;
  Sequence<>.identified()(a3, a4, *(_QWORD *)(a2 + 24), &v18);
  v7 = v4->n128_i64[1];
  v16 = v4->n128_u64[0];
  v17 = v7;
  v8 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_getTupleTypeMetadata2();
  v10 = sub_2448EAE54();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  OrderedDictionary.init(dictionaryLiteral:)(v10, AssociatedTypeWitness, v8, AssociatedConformanceWitness, &v15);
  v12 = type metadata accessor for OrderedDictionary(0, AssociatedTypeWitness, v8, AssociatedConformanceWitness);
  MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedDictionary<A, B>, v12);
  sub_2448EAD40();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v14;
  *v5 = v14;
  return result;
}

void sub_2447DCB00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  _QWORD v28[10];
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v30 = a3;
  v28[9] = a1;
  v9 = sub_2448EB508();
  v28[4] = *(_QWORD *)(v9 - 8);
  v28[5] = v9;
  v10 = MEMORY[0x24BDAC7A8](v9);
  v28[8] = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v14 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v28[6] = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)v28 - v17;
  v19 = *(_QWORD *)(a4 - 8);
  v20 = MEMORY[0x24BDAC7A8](v16);
  v31 = (char *)v28 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = v20;
  v22 = *(int *)(v20 + 48);
  v23 = &v18[v22];
  v24 = a2 + v22;
  v29 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  v28[7] = a2;
  v28[1] = v25;
  v25(v18, a2, AssociatedTypeWitness);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v28[2] = v24;
  v26(v23, v24, a4);
  v32 = v30;
  v30 = a6;
  type metadata accessor for IdentifiedSet(0, a4, a6, v27);
  IdentifiedSet.subscript.getter();
}

uint64_t sub_2447DCCCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 160) + 8))(v3, *(_QWORD *)(v7 - 152));
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 112) + 8))(v0, v5);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v7 - 96), v3, v1);
    v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
    v9(v6, v1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 112) + 8))(v0, v5);
    v10 = *(_QWORD *)(v7 - 144);
    v11 = v10 + *(int *)(*(_QWORD *)(v7 - 168) + 48);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 - 184))(v10, *(_QWORD *)(v7 - 136), v5);
    v4(v11, *(_QWORD *)(v7 - 176), v1);
    v12 = *(char **)(v7 - 128);
    v13 = *(_QWORD *)(v7 - 96);
    v4((uint64_t)v12, v13, v1);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v2 + 56))(v12, 0, 1, v1);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v15 = type metadata accessor for OrderedDictionary(0, v5, v1, AssociatedConformanceWitness);
    OrderedDictionary.subscript.setter(v12, v10, v15);
    v9(v13, v1);
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v11, v1);
  }
}

uint64_t OrderedIdentifiedSet.intersection<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return sub_2447DCE48(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))OrderedIdentifiedSet.formIntersection<A>(_:), a5);
}

uint64_t sub_2447DCE48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, _QWORD *a6@<X8>)
{
  uint64_t *v6;
  uint64_t v12;
  uint64_t v13;

  v12 = *v6;
  v13 = v6[1];
  *a6 = v12;
  a6[1] = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a5(a1, a2, a3, a4);
}

uint64_t OrderedIdentifiedSet.values.getter(uint64_t a1)
{
  return sub_2447DCF70(a1, (uint64_t (*)(uint64_t))OrderedDictionary.values.getter);
}

uint64_t OrderedIdentifiedSet.ids.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  v1 = *(_QWORD *)(a1 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for OrderedDictionary(0, AssociatedTypeWitness, v1, AssociatedConformanceWitness);
  sub_244801CE0();
  return swift_bridgeObjectRetain();
}

uint64_t OrderedIdentifiedSet.startIndex.getter()
{
  return 0;
}

uint64_t OrderedIdentifiedSet.endIndex.getter(uint64_t a1)
{
  return sub_2447DCF70(a1, (uint64_t (*)(uint64_t))OrderedDictionary.endIndex.getter);
}

uint64_t sub_2447DCF70(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v6 = type metadata accessor for OrderedDictionary(0, AssociatedTypeWitness, v3, AssociatedConformanceWitness);
  return a2(v6);
}

Swift::Int __swiftcall OrderedIdentifiedSet.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

uint64_t OrderedIdentifiedSet.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v3;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v12;
  __int128 v14;

  v6 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v14 - v9;
  v14 = *v3;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v12 = (_QWORD *)type metadata accessor for OrderedDictionary(0, AssociatedTypeWitness, v6, AssociatedConformanceWitness);
  OrderedDictionary.subscript.getter((uint64_t)v10, a3, a1, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
}

uint64_t sub_2447DD11C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = OrderedIdentifiedSet.endIndex.getter(a1);
  *a2 = result;
  return result;
}

uint64_t (*sub_2447DD140(_QWORD *a1, uint64_t *a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_2447DD1C8(v6, *a2, a3);
  return sub_2447DB4C4;
}

void sub_2447DD19C(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*sub_2447DD1C8(_QWORD *a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  *a1 = v6;
  a1[1] = v7;
  v8 = malloc(*(_QWORD *)(v7 + 64));
  a1[2] = v8;
  OrderedIdentifiedSet.subscript.getter(a2, a3, (uint64_t)v8);
  return sub_2447DB54C;
}

void sub_2447DD234(_QWORD *a1)
{
  void *v1;

  v1 = (void *)a1[2];
  (*(void (**)(void *, _QWORD))(a1[1] + 8))(v1, *a1);
  free(v1);
}

void sub_2447DD264(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

_QWORD *sub_2447DD274@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

_QWORD *sub_2447DD28C(_QWORD *result)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    ++*result;
  return result;
}

double sub_2447DD2A4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return OrderedIdentifiedSet.init(arrayLiteral:)(a1, *(_QWORD *)(a2 + 16), a3);
}

__n128 sub_2447DD2B0@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_2447DD2C0(uint64_t a1)
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedIdentifiedSet<A>, a1);
  return sub_2448EB22C();
}

uint64_t sub_2447DD2F4(uint64_t a1)
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedIdentifiedSet<A>, a1);
  return sub_2448EB238();
}

uint64_t static OrderedIdentifiedSet<>.== infix(_:_:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return static OrderedDictionary<>.== infix(_:_:)() & 1;
}

uint64_t sub_2447DD3D0()
{
  return static OrderedIdentifiedSet<>.== infix(_:_:)();
}

uint64_t sub_2447DD3E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = sub_2448EB508();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v12 - v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v12 - v10, a2, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  swift_getAssociatedConformanceWitness();
  sub_2448EA8B4();
  return sub_2448EA8F0();
}

uint64_t sub_2447DD52C@<X0>(uint64_t a1@<X8>)
{
  return sub_2447DD560(a1);
}

uint64_t sub_2447DD540(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_2447D9ED0(a1, a2, v2[6], v2[7], v2[2]);
}

uint64_t sub_2447DD560@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 16) - 8) + 16))(a1);
}

void sub_2447DD594(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_2447DAC54(a1, a2, v2[6], v2[2], v2[3], v2[4]);
}

uint64_t sub_2447DD5B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 16) - 8) + 16))(a2, a1);
}

uint64_t sub_2447DD5EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = sub_2448EB508();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v17 - v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v12 = (char *)&v17 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v17 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = type metadata accessor for OrderedDictionary(0, AssociatedTypeWitness, v5, AssociatedConformanceWitness);
  return OrderedDictionary.subscript.setter(v9, (uint64_t)v12, v15);
}

uint64_t sub_2447DD738(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_2447DBE6C(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_2447DD754(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 32))(a2) & 1;
}

void sub_2447DD77C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_2447DCB00(a1, a2, v2[6], v2[2], v2[3], v2[4]);
}

void sub_2447DD79C()
{
  JUMPOUT(0x24951AC70);
}

void sub_2447DD7AC()
{
  JUMPOUT(0x24951AC70);
}

void sub_2447DD7BC()
{
  JUMPOUT(0x24951AC70);
}

void sub_2447DD7CC()
{
  JUMPOUT(0x24951AC70);
}

void sub_2447DD7DC()
{
  JUMPOUT(0x24951AC70);
}

void sub_2447DD7EC()
{
  JUMPOUT(0x24951AC70);
}

uint64_t sub_2447DD7FC()
{
  return MEMORY[0x24BEE1780];
}

uint64_t sub_2447DD80C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for IdentifiedSet(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), a4);
  return sub_2447DD3E0(a1, a3);
}

uint64_t sub_2447DD858()
{
  return 16;
}

__n128 sub_2447DD864(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2447DD870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2447DB98C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))OrderedIdentifiedSet.subscript.getter);
}

uint64_t sub_2447DD890()
{
  return 16;
}

__n128 sub_2447DD89C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2447DD8A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2447DB98C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))OrderedIdentifiedSet.subscript.getter);
}

uint64_t keypath_set_2Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = type metadata accessor for OrderedIdentifiedSet(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), a4);
  return sub_2447DD5EC(a1, a3, v6);
}

uint64_t sub_2447DD914()
{
  return 16;
}

__n128 sub_2447DD920(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata accessor for IdentifiedSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IdentifiedSet);
}

uint64_t destroy for BuiltProductPathResolver.Cache()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s20PreviewsFoundationOS24BuiltProductPathResolverC5CacheVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for BuiltProductPathResolver.Cache(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for BuiltProductPathResolver.Cache(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for OrderedIdentifiedSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrderedIdentifiedSet);
}

uint64_t sub_2447DDA3C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t SendableAnyHashable.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2447C92C4(v1, a1);
}

uint64_t SendableAnyHashable.init<A>(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *boxed_opaque_existential_1;
  void (*v13)(uint64_t *, char *, uint64_t);
  unint64_t v14;
  uint64_t v15;
  void (*v16)(unint64_t, char *, uint64_t);
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v8 = *(_QWORD *)(a2 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  a4[3] = v11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  v13 = *(void (**)(uint64_t *, char *, uint64_t))(v8 + 16);
  v13(boxed_opaque_existential_1, a1, a2);
  v13((uint64_t *)v10, a1, a2);
  v14 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  v16 = *(void (**)(unint64_t, char *, uint64_t))(v8 + 32);
  v16(v15 + v14, v10, a2);
  a4[4] = (uint64_t)sub_2447DDBA0;
  a4[5] = v15;
  v16((unint64_t)v10, a1, a2);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  result = ((uint64_t (*)(unint64_t, char *, uint64_t))v16)(v17 + v14, v10, a2);
  a4[6] = (uint64_t)sub_2447DDD9C;
  a4[7] = v17;
  return result;
}

uint64_t sub_2447DDBA0()
{
  return sub_2448EA920();
}

uint64_t sub_2447DDBD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  char v13;
  void (*v14)(_BYTE *, uint64_t, uint64_t, uint64_t);
  char v15;
  _BYTE v17[32];

  v5 = sub_2448EB508();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = &v17[-v8];
  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_2447C92C4(a1, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738AAD0);
  v13 = swift_dynamicCast();
  v14 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  if ((v13 & 1) != 0)
  {
    v14(v9, 0, 1, a3);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v12, v9, a3);
    v15 = sub_2448EAA64();
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, a3);
  }
  else
  {
    v14(v9, 1, 1, a3);
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t sub_2447DDD9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  return sub_2447DDBD4(a1, v1 + ((v3 + 32) & ~v3), v2);
}

uint64_t static SendableAnyHashable.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 48))(a2) & 1;
}

uint64_t SendableAnyHashable.hash(into:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t SendableAnyHashable.description.getter()
{
  uint64_t v0;
  uint64_t v2;

  sub_2447C92C4(v0, (uint64_t)&v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738AAD0);
  return sub_2448EAAE8();
}

uint64_t SendableAnyHashable.hashValue.getter()
{
  uint64_t v0;
  _BYTE v2[72];

  sub_2448EBD00();
  (*(void (**)(_BYTE *))(v0 + 32))(v2);
  return sub_2448EBD3C();
}

uint64_t sub_2447DDE7C()
{
  uint64_t v0;
  _BYTE v2[72];

  sub_2448EBD00();
  (*(void (**)(_BYTE *))(v0 + 32))(v2);
  return sub_2448EBD3C();
}

uint64_t sub_2447DDEBC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t sub_2447DDEDC()
{
  uint64_t v0;
  _BYTE v2[72];

  sub_2448EBD00();
  (*(void (**)(_BYTE *))(v0 + 32))(v2);
  return sub_2448EBD3C();
}

unint64_t sub_2447DDF1C()
{
  unint64_t result;

  result = qword_25738AAD8;
  if (!qword_25738AAD8)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for SendableAnyHashable, &type metadata for SendableAnyHashable);
    atomic_store(result, (unint64_t *)&qword_25738AAD8);
  }
  return result;
}

uint64_t sub_2447DDF60()
{
  uint64_t v0;
  uint64_t v2;

  sub_2447C92C4(v0, (uint64_t)&v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738AAD0);
  return sub_2448EAAE8();
}

uint64_t sub_2447DDF9C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 48))(a2) & 1;
}

uint64_t destroy for SendableAnyHashable(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for SendableAnyHashable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = v5;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for SendableAnyHashable(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  __swift_assign_boxed_opaque_existential_0(a1, a2);
  v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  swift_retain();
  swift_release();
  v5 = a2[7];
  a1[6] = a2[6];
  a1[7] = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_0(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_OWORD *assignWithTake for SendableAnyHashable(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  swift_release();
  a1[3] = a2[3];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SendableAnyHashable(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SendableAnyHashable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SendableAnyHashable()
{
  return &type metadata for SendableAnyHashable;
}

uint64_t CommandLineArgumentConsumer.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommandLineArgumentConsumer.limit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t CommandLineArgumentConsumer.aggregate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_retain();
  return v1;
}

uint64_t CommandLineArgumentConsumer.init(_:limit:aggregate:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  if ((a4 & 1) != 0 || a3)
  {
    *(_QWORD *)a7 = result;
    *(_QWORD *)(a7 + 8) = a2;
    *(_QWORD *)(a7 + 16) = a3;
    *(_BYTE *)(a7 + 24) = a4 & 1;
    *(_QWORD *)(a7 + 32) = a5;
    *(_QWORD *)(a7 + 40) = a6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CommandLineArgumentConsumer.init(_:string:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_2447DE41C(a1, a2, a3, 1, 0, (uint64_t)sub_2447DE3C0, a4);
}

uint64_t sub_2447DE3C0()
{
  swift_bridgeObjectRetain();
  return swift_setAtWritableKeyPath();
}

uint64_t CommandLineArgumentConsumer.init(_:strings:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_2447DE41C(a1, a2, a3, 0, 1, (uint64_t)sub_2447DE524, a4);
}

uint64_t sub_2447DE41C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(_QWORD *)a7 = result;
  *(_QWORD *)(a7 + 8) = a2;
  *(_QWORD *)(a7 + 16) = a4;
  *(_BYTE *)(a7 + 24) = a5;
  *(_QWORD *)(a7 + 32) = a6;
  *(_QWORD *)(a7 + 40) = a3;
  return result;
}

uint64_t sub_2447DE430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t *, _QWORD);
  _QWORD **v6;
  _QWORD *v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v14;

  swift_bridgeObjectRetain();
  v5 = (uint64_t (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  v7 = v6;
  v8 = *v6;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v7 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v8 = sub_2447C1B70(0, v8[2] + 1, 1, v8);
    *v7 = v8;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    v8 = sub_2447C1B70((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    *v7 = v8;
  }
  v8[2] = v11 + 1;
  v12 = &v8[2 * v11];
  v12[4] = a2;
  v12[5] = a3;
  return v5(&v14, 0);
}

uint64_t sub_2447DE524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2447DE430(a1, a2, a3);
}

uint64_t CommandLineArgumentConsumer.shortUsage.getter()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  _OWORD v4[2];
  _BYTE v5[16];
  uint64_t v6;
  char v7;

  v4[0] = *(_OWORD *)(v0 + 16);
  v4[1] = *(_OWORD *)(v0 + 32);
  sub_2447DE698((uint64_t)v4, (uint64_t)v5);
  result = sub_2447DE698((uint64_t)v5, (uint64_t)&v6);
  if (v7 == 1)
  {
    sub_2448EA944();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    sub_2448EABC0();
    return 91;
  }
  if (v6 == 1)
    return sub_2448EA944();
  if ((v6 & 0x8000000000000000) == 0)
  {
    MEMORY[0x24BDAC7A8](result);
    sub_2447DE78C(0, v3, (uint64_t (*)(uint64_t, uint64_t))sub_2447DE784);
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A630);
    sub_2447D48B0();
    v2 = sub_2448EA9A4();
    swift_bridgeObjectRelease();
    return v2;
  }
  __break(1u);
  return result;
}

uint64_t sub_2447DE698(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_25738AAE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2447DE6E0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = sub_2448EA944();
  if (__OFADD__(a1, 1))
  {
    __break(1u);
  }
  else
  {
    v3 = result;
    sub_2448EBB5C();
    swift_bridgeObjectRetain();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v3;
  }
  return result;
}

uint64_t sub_2447DE784(uint64_t a1)
{
  return sub_2447DE6E0(a1);
}

uint64_t sub_2447DE78C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v15 = MEMORY[0x24BEE4AF8];
  result = sub_2447CEE18(0, 0, 0);
  v6 = a2 - a1;
  if (a2 == a1)
    return v15;
  if (a2 >= a1)
  {
    v7 = 0;
    while (v6 != v7)
    {
      if (__OFADD__(v7, 1))
        goto LABEL_12;
      result = a3(v7, a1 + v7);
      v8 = result;
      v10 = v9;
      v12 = *(_QWORD *)(v15 + 16);
      v11 = *(_QWORD *)(v15 + 24);
      if (v12 >= v11 >> 1)
        result = sub_2447CEE18(v11 > 1, v12 + 1, 1);
      *(_QWORD *)(v15 + 16) = v12 + 1;
      v13 = v15 + 16 * v12;
      *(_QWORD *)(v13 + 32) = v8;
      *(_QWORD *)(v13 + 40) = v10;
      if (v6 == ++v7)
        return v15;
    }
    __break(1u);
LABEL_12:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_2447DE8A0()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_2447DE8C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_2447DE914(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_2447DE99C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DiagnosticsCollector.WriteFileAction(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DiagnosticsCollector.WriteFileAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for CommandLineArgumentConsumer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CommandLineArgumentConsumer);
}

uint64_t dispatch thunk of static PredicateProtocol.isSatisfied(by:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

unint64_t sub_2447DEA9C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  unint64_t result;
  unint64_t v9;
  uint64_t i;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;

  v7 = sub_2448CCDB8(a1, a3, a4);
  result = sub_2448CCDB8(a2, a3, a4);
  v9 = result >> 14;
  if (v7 >> 14 < result >> 14)
  {
    for (i = 0; ; ++i)
    {
      v11 = i + 1;
      if (__OFADD__(i, 1))
        break;
      if ((a4 & 0x1000000000000000) != 0)
      {
        result = sub_2448EAB30();
        v7 = result;
      }
      else
      {
        v12 = v7 >> 16;
        if ((a4 & 0x2000000000000000) != 0)
        {
          v22 = a3;
          v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          v13 = *((unsigned __int8 *)&v22 + v12);
        }
        else
        {
          result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0)
            result = sub_2448EB820();
          v13 = *(unsigned __int8 *)(result + v12);
        }
        v14 = (char)v13;
        v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0)
          LOBYTE(v15) = 1;
        v7 = ((v12 + v15) << 16) | 5;
      }
      if (v9 <= v7 >> 14)
        return v11;
    }
    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }
  if (v9 < v7 >> 14)
  {
    v11 = 0;
    while (!__OFSUB__(v11--, 1))
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        result = sub_2448EAB3C();
        v7 = result;
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v22 = a3;
          v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v22 + (v7 >> 16) - 1) & 0xC0) == 0x80)
          {
            v20 = 0;
            do
              v21 = *((_BYTE *)&v22 + (v7 >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            v19 = 1 - v20;
          }
          else
          {
            v19 = 1;
          }
        }
        else
        {
          result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0)
            result = sub_2448EB820();
          v17 = 0;
          do
            v18 = *(_BYTE *)(result + (v7 >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          v19 = -v17;
        }
        v7 = (v7 - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v9 >= v7 >> 14)
        return v11;
    }
    goto LABEL_36;
  }
  return 0;
}

uint64_t sub_2447DECAC(unsigned int a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  _QWORD v11[3];

  if (a1 <= 0x19)
  {
    v4 = a1 + 97;
LABEL_7:
    v6 = v4 + 1;
LABEL_8:
    v11[1] = v2;
    v11[2] = v3;
    v11[0] = (v6 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v6) >> 3))));
    return MEMORY[0x249519338](v11);
  }
  v4 = a1 + 39;
  if (a1 >= 0xFFFFFFD9)
  {
    __break(1u);
    goto LABEL_14;
  }
  result = 0;
  if (HIWORD(v4) <= 0x10u && (v4 & 0xFFFFF800) != 0xD800)
  {
    if (v4 <= 0x7F)
      goto LABEL_7;
    v1 = (v4 & 0x3F) << 8;
    if (v4 < 0x800)
    {
      v6 = (v1 | (v4 >> 6)) + 33217;
      goto LABEL_8;
    }
LABEL_14:
    v7 = v4 >> 12;
    v8 = (v1 | (v4 >> 6) & 0x3F) << 8;
    v9 = HIWORD(v4);
    v6 = (((v8 | (v4 >> 12) & 0x3F) << 8) | (v4 >> 18)) - 2122219023;
    v10 = (v8 | v7) + 8487393;
    if (!v9)
      v6 = v10;
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_2447DEDB8(uint64_t result, unsigned int a2, char a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  v3 = result >> 1;
  if ((a3 & 1) != 0)
    v3 = result / 0x2BC;
  if (!a2)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  v4 = v3 / a2 + v3;
  if (v4 >= 0x1C8)
  {
    v5 = 0;
    while (1)
    {
      v6 = v5 + 36;
      if (v5 >= 0xFFFFFFDC)
        break;
      v7 = v4 / 0x23;
      v5 += 36;
      v8 = v4 >> 3;
      v4 /= 0x23u;
      if (v8 <= 0x7CA)
      {
        v4 = v7;
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  v6 = 0;
LABEL_10:
  v9 = 36 * v4 / (v4 + 38);
  result = v6 + v9;
  if (__CFADD__(v6, v9))
    goto LABEL_14;
  return result;
}

uint64_t _s20PreviewsFoundationOS8PunycodeO6encode6stringSSSgSS_tFZ_0(unint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t j;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;

  v4 = 0xE000000000000000;
  v69 = 0;
  v70 = 0xE000000000000000;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = HIBYTE(a2) & 0xF;
  else
    v5 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v5)
    goto LABEL_131;
  swift_bridgeObjectRetain_n();
  for (i = 0; i < v5; i += v11)
  {
    if ((a2 & 0x1000000000000000) != 0)
    {
      v9 = sub_2448EB790();
      v11 = v10;
      if (v9 <= 0x7F)
        goto LABEL_6;
    }
    else
    {
      if ((a2 & 0x2000000000000000) != 0)
      {
        v67 = a1;
        v68 = a2 & 0xFFFFFFFFFFFFFFLL;
        v9 = *((unsigned __int8 *)&v67 + i);
        if (*((char *)&v67 + i) < 0)
          __asm { BR              X9 }
      }
      else
      {
        v8 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((a1 & 0x1000000000000000) == 0)
          v8 = sub_2448EB820();
        v9 = *(unsigned __int8 *)(v8 + i);
        if (*(char *)(v8 + i) < 0)
          __asm { BR              X10 }
      }
      v11 = 1;
      if (v9 <= 0x7F)
      {
LABEL_6:
        v67 = v9;
        v7 = MEMORY[0x249519338](&v67, 1);
        MEMORY[0x249519398](v7);
        swift_bridgeObjectRelease();
        continue;
      }
    }
  }
  swift_bridgeObjectRelease_n();
  v13 = v69;
  v12 = v70;
  v4 = 0xE000000000000000;
  while (1)
  {
    v69 = 0;
    v70 = v4;
    v14 = sub_2448EAB78();
    if ((v14 & 0x8000000000000000) != 0)
      goto LABEL_137;
    v15 = v14;
    if (HIDWORD(v14))
      goto LABEL_137;
    v16 = 7;
    if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
      v16 = 11;
    v62 = v16 | (v5 << 16);
    if ((uint64_t)sub_2447DEA9C(0xFuLL, v62, a1, a2) <= v14)
    {
LABEL_111:
      v55 = v69;
      v56 = HIBYTE(v70) & 0xF;
      if ((v70 & 0x2000000000000000) == 0)
        v56 = v69 & 0xFFFFFFFFFFFFLL;
      if (v56)
      {
        v57 = HIBYTE(v12) & 0xF;
        if ((v12 & 0x2000000000000000) == 0)
          v57 = v13 & 0xFFFFFFFFFFFFLL;
        if (v57)
        {
          v67 = v13;
          v68 = v12;
          sub_2448EABC0();
          sub_2448EABC0();
          swift_bridgeObjectRelease();
          return v67;
        }
        else
        {
          swift_bridgeObjectRelease();
          return v55;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      return v13;
    }
    v17 = v15;
    v18 = 0;
    v64 = 72;
    v19 = 128;
    v63 = v17;
    v60 = v17;
    v61 = v12;
    v59 = v13;
LABEL_27:
    v20 = 1114111;
    if (v5)
    {
      for (j = 0; j < v5; j += v23)
      {
        if ((a2 & 0x1000000000000000) != 0)
        {
          v22 = sub_2448EB790();
        }
        else
        {
          if ((a2 & 0x2000000000000000) != 0)
          {
            v67 = a1;
            v68 = a2 & 0xFFFFFFFFFFFFFFLL;
            v22 = *((unsigned __int8 *)&v67 + j);
            if (*((char *)&v67 + j) < 0)
              __asm { BR              X9 }
          }
          else
          {
            v25 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
            if ((a1 & 0x1000000000000000) == 0)
              v25 = sub_2448EB820();
            v22 = *(unsigned __int8 *)(v25 + j);
            if (*(char *)(v25 + j) < 0)
              __asm { BR              X10 }
          }
          v23 = 1;
        }
        if (v22 >= v20)
          v24 = v20;
        else
          v24 = v22;
        if (v22 >= v19)
          v20 = v24;
      }
    }
    if (v20 < v19)
    {
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      sub_2448EB994();
      __break(1u);
      JUMPOUT(0x2447DF80CLL);
    }
    v26 = v63;
    if (v63 == -1)
      goto LABEL_133;
    v27 = (v20 - v19) * (unint64_t)(v63 + 1);
    if ((v27 & 0xFFFFFFFF00000000) != 0)
      goto LABEL_134;
    v28 = v18 + v27;
    if (__CFADD__(v18, (_DWORD)v27))
      break;
    if (!v5)
      goto LABEL_109;
    swift_bridgeObjectRetain();
    v29 = 0;
    while (1)
    {
      while (1)
      {
LABEL_53:
        if ((a2 & 0x1000000000000000) != 0)
        {
          v30 = sub_2448EB790();
        }
        else
        {
          if ((a2 & 0x2000000000000000) != 0)
          {
            v67 = a1;
            v68 = a2 & 0xFFFFFFFFFFFFFFLL;
            v30 = *((unsigned __int8 *)&v67 + v29);
            if (*((char *)&v67 + v29) < 0)
              __asm { BR              X9 }
          }
          else
          {
            v32 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
            if ((a1 & 0x1000000000000000) == 0)
              v32 = sub_2448EB820();
            v30 = *(unsigned __int8 *)(v32 + v29);
            if (*(char *)(v32 + v29) < 0)
              __asm { BR              X10 }
          }
          v31 = 1;
        }
        v29 += v31;
        if (v30 >= v20)
          break;
        if (v28 == -1)
          goto LABEL_118;
        ++v28;
        if (v29 >= v5)
        {
LABEL_107:
          v54 = v28;
          v53 = v63;
          goto LABEL_108;
        }
      }
      if (v30 == v20)
        break;
      if (v29 >= v5)
        goto LABEL_107;
    }
    v4 = 36;
    v33 = v28;
    while (1)
    {
      v34 = v4 + 36;
      if (v4 < 0xFFFFFFDC)
      {
        if (v64 < v4)
          goto LABEL_72;
        if (!v33)
          goto LABEL_103;
        v35 = 1;
LABEL_83:
        v36 = v34;
        goto LABEL_84;
      }
      if (v64 < v4)
      {
        v34 = -1;
LABEL_72:
        if (v64 >= 0xFFFFFFE6)
          goto LABEL_128;
        if (v4 >= v64 + 26)
        {
          if (v33 < 0x1A)
            goto LABEL_103;
          v35 = 26;
        }
        else
        {
          v35 = v4 - v64;
          if (v4 < v64)
            goto LABEL_130;
          if (v33 < v35)
          {
LABEL_103:
            v51 = sub_2447DECAC(v33);
            if (!v52)
            {
LABEL_118:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_119;
            }
            MEMORY[0x249519398](v51);
            swift_bridgeObjectRelease();
            v53 = v63 + 1;
            if (v63 == -1)
              goto LABEL_135;
            v64 = sub_2447DEDB8(v28, v63 + 1, v63 == v60);
            v28 = 0;
            v54 = 0;
            ++v63;
            if (v29 >= v5)
            {
LABEL_108:
              v28 = v54;
              swift_bridgeObjectRelease();
              v26 = v53;
LABEL_109:
              v63 = v26;
              v18 = v28 + 1;
              v13 = v59;
              if (v28 == -1)
                goto LABEL_136;
              v19 = v20 + 1;
              v12 = v61;
              if ((uint64_t)sub_2447DEA9C(0xFuLL, v62, a1, a2) <= v26)
                goto LABEL_111;
              goto LABEL_27;
            }
            goto LABEL_53;
          }
        }
        goto LABEL_83;
      }
      if (!v33)
        goto LABEL_103;
      v36 = -1;
      v35 = 1;
LABEL_84:
      v37 = v33 - v35;
      if (v33 < v35)
        break;
      v4 = 36 - v35;
      if (v35 > 0x24)
        goto LABEL_125;
      if (!(_DWORD)v4)
        goto LABEL_126;
      v38 = v37 / v4;
      v39 = v37 % v4;
      v40 = __CFADD__(v35, v39);
      v41 = v35 + v39;
      if (v40)
        goto LABEL_127;
      v65 = v36;
      v66 = v38;
      if (v41 > 0x19)
      {
        v40 = __CFADD__(v41, 39);
        v42 = v41 + 39;
        if (v40)
          goto LABEL_129;
        if (v42 >> 11 == 27 || v42 > 0x10FFFF)
          goto LABEL_118;
        if (v42 > 0x7F)
        {
          v46 = (v42 & 0x3F) << 8;
          if (v42 >= 0x800)
          {
            v47 = v42 >> 12;
            v48 = (v46 | (v42 >> 6) & 0x3F) << 8;
            v49 = HIWORD(v42);
            v44 = (((v48 | (v42 >> 12) & 0x3F) << 8) | (v42 >> 18)) - 2122219023;
            v50 = (v48 | v47) + 8487393;
            if (!v49)
              v44 = v50;
          }
          else
          {
            v44 = (v46 | (v42 >> 6)) + 33217;
          }
          goto LABEL_97;
        }
      }
      else
      {
        v42 = v41 + 97;
      }
      v44 = v42 + 1;
LABEL_97:
      v67 = (v44 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v44) >> 3))));
      v45 = MEMORY[0x249519338](&v67);
      MEMORY[0x249519398](v45);
      swift_bridgeObjectRelease();
      v4 = v65;
      v33 = v66;
      if (v65 == -1)
        goto LABEL_103;
    }
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    v13 = 0;
    v12 = 0xE000000000000000;
  }
  swift_bridgeObjectRelease();
LABEL_119:
  swift_bridgeObjectRelease();
  return 0;
}

ValueMetadata *type metadata accessor for Punycode()
{
  return &type metadata for Punycode;
}

uint64_t Sequence.pairs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t sub_2447DF8FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t PairSequence.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = sub_2448EB508();
  v15 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v14 - v5;
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v14 - v8;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v16 = v1;
  sub_2448EB58C();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v6, v3);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(v17, 1, 1, TupleTypeMetadata2);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v6, AssociatedTypeWitness);
    v12 = swift_getTupleTypeMetadata2();
    v13 = v17;
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v17, v9, AssociatedTypeWitness);
    sub_2448EB58C();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v13, 0, 1, v12);
  }
}

uint64_t sub_2447DFB30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a2, a1, AssociatedTypeWitness);
}

uint64_t PairSequence.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v13 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  sub_2448EACB0();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v11, AssociatedTypeWitness);
}

void sub_2447DFC88()
{
  JUMPOUT(0x24951AC70);
}

uint64_t sub_2447DFC98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  PairSequence.makeIterator()(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
}

uint64_t sub_2447DFCC8()
{
  return 0;
}

uint64_t sub_2447DFCD4()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_2447DFD40(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_2447DFDB0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_2447DFDC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t sub_2447DFDF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t sub_2447DFE20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t sub_2447DFE50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t sub_2447DFE80(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2447DFF30 + 4 * byte_2448EDCA0[(v7 - 1)]))();
}

void sub_2447DFF80(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for PairSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PairSequence);
}

uint64_t sub_2447E013C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_2447E01B8(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7 && *(_QWORD *)(v5 + 64) <= 0x18uLL && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t sub_2447E024C(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t sub_2447E0298(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_2447E02F0(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_2447E0348(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_2447E03A0(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_2447E03F8(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2)
    return 0;
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (a2 <= v6)
    goto LABEL_18;
  v7 = *(_QWORD *)(v5 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((a2 - v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if ((_DWORD)v6)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if ((_DWORD)v7)
  {
    if (v7 > 3)
      LODWORD(v7) = 4;
    __asm { BR              X11 }
  }
  return (v6 + v11 + 1);
}

void sub_2447E0538(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (a3 <= v7)
  {
    v9 = 0;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for PairSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PairSequence.Iterator);
}

uint64_t FulfillOnceState.__allocating_init(waitingState:initializationCallsite:initializationInfo:failureMode:thingDescription:actionPastParticiple:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;

  v11 = sub_2447E229C(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v9 + 80) - 8) + 8))(a1);
  return v11;
}

uint64_t FulfillOnceState.updateWaitingState<A>(update:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t updated;
  uint64_t v10;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *v4;
  v18 = v4[18];
  v7 = *(_QWORD *)(v6 + 88);
  v13 = *(_QWORD *)(v6 + 80);
  v14 = v7;
  v15 = a3;
  v16 = a1;
  v17 = a2;
  type metadata accessor for FulfillOnceState.State(255, v13, v7, a4);
  v8 = sub_2448EA5D8();
  updated = type metadata accessor for FulfillOnceState.WaitingStateUpdateResult(0, v13, v7, a3);
  swift_retain();
  v10 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v8);
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_2447B9000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/FulfillOnce.swift", 123, 2, 75, 25, (uint64_t)"updateWaitingState(update:)", 27, 2, (uint64_t)sub_2447E233C, (uint64_t)v12, v8, updated, v10);
  return swift_release();
}

uint64_t FulfillOnceState.fulfill(callsite:makeFulfilledState:ifAlreadyFulfilled:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[2];

  v6 = *v5;
  v7 = a1[1];
  v21 = *a1;
  v22 = v7;
  v23[0] = a1[2];
  *(_OWORD *)((char *)v23 + 9) = *(__int128 *)((char *)a1 + 41);
  v20 = v5[18];
  v16 = a2;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v8 = *(_QWORD *)(v6 + 80);
  v9 = *(_QWORD *)(v6 + 88);
  type metadata accessor for FulfillOnceState.State(255, v8, v9, a4);
  v10 = sub_2448EA5D8();
  v12 = type metadata accessor for FulfillOnceState.FulfillmentOutcome(0, v8, v9, v11);
  swift_retain();
  v13 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v10);
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_2447B9000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/FulfillOnce.swift", 123, 2, 104, 29, (uint64_t)"fulfill(callsite:makeFulfilledState:ifAlreadyFulfilled:)", 56, 2, (uint64_t)sub_2447E2374, (uint64_t)v15, v10, v12, v13);
  return swift_release();
}

__n128 FulfillOnceState.initializationCallsite.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  char v3;
  __n128 result;

  v2 = *(_BYTE *)(v1 + 32);
  v3 = *(_BYTE *)(v1 + 72);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 40);
  result = *(__n128 *)(v1 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(_BYTE *)(a1 + 56) = v3;
  return result;
}

uint64_t FulfillOnceState.init(waitingState:initializationCallsite:initializationInfo:failureMode:thingDescription:actionPastParticiple:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;

  v11 = *v9;
  v12 = sub_2447E212C(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v11 + 80) - 8) + 8))(a1);
  return v12;
}

uint64_t FulfillOnceState.__allocating_init<>(initializationCallsite:initializationInfo:failureMode:thingDescription:actionPastParticiple:)(__int128 *a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v14;
  __int128 v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  char v20;
  __int128 v21;
  __int128 v22;
  char v23;

  v14 = *((_BYTE *)a1 + 56);
  v15 = *a1;
  v20 = *((_BYTE *)a1 + 16);
  v21 = *(__int128 *)((char *)a1 + 24);
  v22 = *(__int128 *)((char *)a1 + 40);
  v23 = v14;
  v18 = *a4;
  v19 = v15;
  v16 = swift_allocObject();
  return sub_2447E212C(v16, (uint64_t *)&v19, a2, a3, (uint64_t *)&v18, a5, a6, a7, a8);
}

_QWORD *FulfillOnceState.deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[2];
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  uint64_t v65;

  v5 = v4;
  v6 = *(_QWORD *)(*v4 + 80);
  v7 = *(_QWORD *)(*v4 + 88);
  v8 = type metadata accessor for FulfillOnceState.State(0, v6, v7, a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v42 - v10;
  v57[0] = v4[18];
  v12 = sub_2448EA5D8();
  v13 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v12);
  SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/FulfillOnce.swift", 123, 2, 58, 38, (uint64_t)"deinit", 6, 2, v12, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v11, v6);
    v15 = v5[14];
    v14 = v5[15];
    v16 = v5[17];
    v55 = v5[16];
    v56 = v15;
    v17 = v5[2];
    v18 = v5[3];
    v54 = *((unsigned __int8 *)v5 + 32);
    v19 = v5[5];
    v52 = v14;
    v53 = v19;
    v20 = v5[6];
    v50 = v16;
    v51 = v20;
    v21 = v5[7];
    v48 = v7;
    v49 = v21;
    v47 = v5[8];
    v46 = *((unsigned __int8 *)v5 + 72);
    v22 = (uint64_t (*)(uint64_t))v5[10];
    swift_bridgeObjectRetain();
    if (v22)
    {
      v23 = swift_bridgeObjectRetain();
      v45 = v22(v23);
      v44 = v25;
    }
    else
    {
      swift_bridgeObjectRetain();
      v45 = 0;
      v44 = 0;
    }
    v26 = v5[13];
    v64 = v5[12];
    v27 = v64;
    v65 = v26;
    v57[0] = v17;
    v57[1] = v18;
    v28 = v54;
    v58 = v54;
    v42 = v17;
    v43 = v18;
    v29 = v53;
    v30 = v51;
    v59 = v53;
    v60 = v51;
    v31 = v49;
    v32 = v47;
    v61 = v49;
    v62 = v47;
    v33 = v46;
    v63 = v46;
    v34 = type metadata accessor for FulfillOnceState.Unfulfilled(0, v6, v48, v24);
    MEMORY[0x24951AC70](&unk_2448EE098, v34);
    v35 = (void *)swift_allocError();
    v36 = v52;
    *(_QWORD *)v37 = v56;
    *(_QWORD *)(v37 + 8) = v36;
    v38 = v50;
    *(_QWORD *)(v37 + 16) = v55;
    *(_QWORD *)(v37 + 24) = v38;
    v39 = v43;
    *(_QWORD *)(v37 + 32) = v42;
    *(_QWORD *)(v37 + 40) = v39;
    *(_BYTE *)(v37 + 48) = v28;
    *(_QWORD *)(v37 + 56) = v29;
    *(_QWORD *)(v37 + 64) = v30;
    *(_QWORD *)(v37 + 72) = v31;
    *(_QWORD *)(v37 + 80) = v32;
    *(_BYTE *)(v37 + 88) = v33;
    v40 = v44;
    *(_QWORD *)(v37 + 96) = v45;
    *(_QWORD *)(v37 + 104) = v40;
    sub_2447E23C0(v27);
    sub_2447E0DB0((uint64_t)v57, v35);
    sub_2447E23A0(v64);

  }
  sub_2447C8F84(v5[10]);
  sub_2447E23A0(v5[12]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v5;
}

void sub_2447E0DB0(uint64_t a1, void *a2)
{
  void (**v2)(uint64_t);
  void (*v4)(uint64_t);
  uint64_t v5;
  id v6;
  id v7;
  os_log_type_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *oslog;
  uint64_t v18;

  v4 = *v2;
  if (*v2)
  {
    if (v4 == (void (*)(uint64_t))1)
    {
      sub_244823F6C();
    }
    else if (v4 == (void (*)(uint64_t))2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0A8);
      sub_2448EB91C();
      sub_2448EB9A0();
      __break(1u);
    }
    else
    {
      v15 = swift_retain();
      v4(v15);
      sub_2447E23A0((unint64_t)v4);
    }
  }
  else
  {
    if (qword_257389CF0 != -1)
      swift_once();
    v5 = sub_2448EA5FC();
    __swift_project_value_buffer(v5, (uint64_t)qword_25738F7C8);
    v6 = a2;
    v7 = a2;
    oslog = sub_2448EA5E4();
    v8 = sub_2448EB3A0();
    if (os_log_type_enabled(oslog, v8))
    {
      v9 = swift_slowAlloc();
      v10 = (_QWORD *)swift_slowAlloc();
      v16 = swift_slowAlloc();
      v18 = v16;
      *(_DWORD *)v9 = 138412546;
      v11 = a2;
      v12 = _swift_stdlib_bridgeErrorToNSError();
      sub_2448EB598();
      *v10 = v12;

      *(_WORD *)(v9 + 12) = 2080;
      v13 = Callsite.description.getter();
      sub_2447D6798(v13, v14, &v18);
      sub_2448EB598();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2447B9000, oslog, v8, "FulfillOnce failure: %@, callsite: %s", (uint8_t *)v9, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(qword_25738AEF0);
      swift_arrayDestroy();
      MEMORY[0x24951AD84](v10, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x24951AD84](v16, -1, -1);
      MEMORY[0x24951AD84](v9, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t FulfillOnceState.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  FulfillOnceState.deinit(a1, a2, a3, a4);
  return swift_deallocClassInstance();
}

uint64_t sub_2447E1138@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  void (*v23)(char *);

  v22 = a3;
  v23 = a2;
  v12 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for FulfillOnceState.State(0, v15, v16, v15);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v22 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))((char *)&v22 - v18, a1, v17);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(a7, v19, a5);
    type metadata accessor for FulfillOnceState.WaitingStateUpdateResult(0, a4, a5, a6);
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v19, a4);
    v23(v14);
    type metadata accessor for FulfillOnceState.WaitingStateUpdateResult(0, a4, a5, a6);
    swift_storeEnumTagMultiPayload();
    sub_2447E12D8(a1, (uint64_t)v14, a4, a5);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a4);
  }
}

uint64_t sub_2447E12D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v7 = type metadata accessor for FulfillOnceState.State(0, a3, a4, a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v12 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))((char *)&v12 - v9, a2, a3);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 40))(a1, v10, v7);
}

uint64_t FulfillOnceState.snapshot.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for FulfillOnceState.State(255, *(_QWORD *)(*(_QWORD *)v4 + 80), *(_QWORD *)(*(_QWORD *)v4 + 88), a4);
  v5 = sub_2448EA5D8();
  v6 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v5);
  return SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/FulfillOnce.swift", 123, 2, 89, 19, (uint64_t)"snapshot", 8, 2, v5, v6);
}

uint64_t sub_2447E141C@<X0>(uint64_t a1@<X0>, void (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, void (*a6)(char *, _QWORD *)@<X5>, uint64_t a7@<X6>, void (*a8)(_QWORD)@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t result;
  uint64_t TupleTypeMetadata2;
  uint64_t v34;
  char *v35;
  _OWORD *v36;
  __int128 v37;
  uint64_t v38;
  void (*v39)(_QWORD);
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, _QWORD *);
  uint64_t v51;
  _QWORD v52[2];
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t (*v61)();
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  _BYTE v65[25];
  uint64_t v66;

  v49 = a7;
  v50 = a6;
  v38 = a3;
  v39 = a2;
  v12 = *a5;
  v47 = *a4;
  v46 = a4[1];
  v45 = *((unsigned __int8 *)a4 + 16);
  v44 = a4[3];
  v43 = a4[4];
  v42 = a4[5];
  v41 = a4[6];
  v40 = *((unsigned __int8 *)a4 + 56);
  v13 = *(_QWORD *)(v12 + 88);
  v51 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v48 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 + 80);
  v18 = type metadata accessor for FulfillOnceState.State(0, v16, v13, v17);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v38 - v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)&v38 - v20, a1, v18);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v38 = v16;
    v39 = a8;
    v22 = &v21[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    *(_OWORD *)&v65[9] = *(_OWORD *)(v22 + 41);
    v23 = *((_OWORD *)v22 + 1);
    v63 = *(_OWORD *)v22;
    v64 = v23;
    *(_OWORD *)v65 = *((_OWORD *)v22 + 2);
    v24 = v51;
    v25 = v48;
    (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v48, v21, v13);
    v26 = a5[12];
    v27 = a5[13];
    v28 = swift_allocObject();
    v29 = v64;
    *(_OWORD *)(v28 + 24) = v63;
    *(_OWORD *)(v28 + 40) = v29;
    *(_OWORD *)(v28 + 56) = *(_OWORD *)v65;
    *(_OWORD *)(v28 + 65) = *(_OWORD *)&v65[9];
    v30 = *((_OWORD *)a4 + 1);
    *(_OWORD *)(v28 + 88) = *(_OWORD *)a4;
    *(_QWORD *)(v28 + 16) = a5;
    *(_OWORD *)(v28 + 104) = v30;
    *(_OWORD *)(v28 + 120) = *((_OWORD *)a4 + 2);
    *(_OWORD *)(v28 + 129) = *(_OWORD *)((char *)a4 + 41);
    v52[0] = v47;
    v52[1] = v46;
    v53 = v45;
    v54 = v44;
    v55 = v43;
    v56 = v42;
    v57 = v41;
    v58 = v40;
    v59 = v26;
    v60 = v27;
    v61 = sub_2447E5980;
    v62 = v28;
    sub_2447E23C0(v26);
    swift_retain();
    v31 = v66;
    v50(v25, v52);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v13);
    sub_2447E23A0(v26);
    result = swift_release();
    if (!v31)
    {
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      return (*(uint64_t (**)(void (*)(_QWORD), uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8)
                                                                                               + 56))(v39, 1, 1, TupleTypeMetadata2);
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a1, v18);
    (*(void (**)(void (*)(_QWORD), char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a8, v21, v16);
    v34 = swift_getTupleTypeMetadata2();
    v35 = (char *)a8 + *(int *)(v34 + 48);
    v39(a8);
    v36 = (_OWORD *)(a1 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    (*(void (**)(uint64_t, char *, uint64_t))(v51 + 16))(a1, v35, v13);
    v37 = *((_OWORD *)a4 + 1);
    *v36 = *(_OWORD *)a4;
    v36[1] = v37;
    v36[2] = *((_OWORD *)a4 + 2);
    *(_OWORD *)((char *)v36 + 41) = *(_OWORD *)((char *)a4 + 41);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(void (*)(_QWORD), _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(a8, 0, 1, v34);
  }
  return result;
}

uint64_t sub_2447E186C(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v3 = *a1;
  v5 = a1[14];
  v4 = a1[15];
  v7 = a1[16];
  v6 = a1[17];
  v8 = *a2;
  v9 = a2[1];
  v10 = *((_BYTE *)a2 + 16);
  v38 = a2[4];
  v39 = a2[3];
  v36 = a2[6];
  v37 = a2[5];
  v35 = *((_BYTE *)a2 + 56);
  v33 = a3[1];
  v34 = *a3;
  v32 = *((_BYTE *)a3 + 16);
  v30 = a3[4];
  v31 = a3[3];
  v28 = a3[6];
  v29 = a3[5];
  v27 = *((_BYTE *)a3 + 56);
  v25 = a1[3];
  v26 = a1[2];
  v24 = *((_BYTE *)a1 + 32);
  v22 = a1[6];
  v23 = a1[5];
  v20 = a1[8];
  v21 = a1[7];
  v19 = *((_BYTE *)a1 + 72);
  v11 = (uint64_t (*)(uint64_t))a1[10];
  swift_bridgeObjectRetain();
  if (v11)
  {
    v12 = swift_bridgeObjectRetain();
    v14 = v11(v12);
    v11 = v15;
  }
  else
  {
    swift_bridgeObjectRetain();
    v14 = 0;
  }
  v16 = type metadata accessor for FulfillOnceState.Overfulfilled(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v13);
  MEMORY[0x24951AC70](&unk_2448EE140, v16);
  result = swift_allocError();
  *(_QWORD *)v18 = v5;
  *(_QWORD *)(v18 + 8) = v4;
  *(_QWORD *)(v18 + 16) = v7;
  *(_QWORD *)(v18 + 24) = v6;
  *(_QWORD *)(v18 + 32) = v8;
  *(_QWORD *)(v18 + 40) = v9;
  *(_BYTE *)(v18 + 48) = v10;
  *(_QWORD *)(v18 + 56) = v39;
  *(_QWORD *)(v18 + 64) = v38;
  *(_QWORD *)(v18 + 72) = v37;
  *(_QWORD *)(v18 + 80) = v36;
  *(_BYTE *)(v18 + 88) = v35;
  *(_QWORD *)(v18 + 96) = v34;
  *(_QWORD *)(v18 + 104) = v33;
  *(_BYTE *)(v18 + 112) = v32;
  *(_QWORD *)(v18 + 120) = v31;
  *(_QWORD *)(v18 + 128) = v30;
  *(_QWORD *)(v18 + 136) = v29;
  *(_QWORD *)(v18 + 144) = v28;
  *(_BYTE *)(v18 + 152) = v27;
  *(_QWORD *)(v18 + 160) = v26;
  *(_QWORD *)(v18 + 168) = v25;
  *(_BYTE *)(v18 + 176) = v24;
  *(_QWORD *)(v18 + 184) = v23;
  *(_QWORD *)(v18 + 192) = v22;
  *(_QWORD *)(v18 + 200) = v21;
  *(_QWORD *)(v18 + 208) = v20;
  *(_BYTE *)(v18 + 216) = v19;
  *(_QWORD *)(v18 + 224) = v14;
  *(_QWORD *)(v18 + 232) = v11;
  return result;
}

uint64_t FulfillOnceState.fulfill<>(callsite:ifAlreadyFulfilled:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  char v5;
  char v6;
  _QWORD v8[4];
  _BYTE v9[16];
  uint64_t v10;
  __int128 v11;
  char v12;
  __int128 v13;
  __int128 v14;
  char v15;

  v4 = *v3;
  v5 = *(_BYTE *)(a1 + 16);
  v6 = *(_BYTE *)(a1 + 56);
  v11 = *(_OWORD *)a1;
  v12 = v5;
  v13 = *(_OWORD *)(a1 + 24);
  v14 = *(_OWORD *)(a1 + 40);
  v15 = v6;
  v10 = *(_QWORD *)(v4 + 80);
  v8[2] = a2;
  v8[3] = a3;
  return FulfillOnceState.fulfill(callsite:makeFulfilledState:ifAlreadyFulfilled:)(&v11, (uint64_t)nullsub_1, (uint64_t)v9, (uint64_t)sub_2447E23D4, (uint64_t)v8);
}

unint64_t sub_2447E1AC8(uint64_t a1, __int128 *a2)
{
  return sub_2447E1ADC(a1, a2);
}

unint64_t sub_2447E1ADC(uint64_t a1, __int128 *a2)
{
  char v2;
  char v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(unint64_t);
  unint64_t v7;
  void *v8;
  __int128 v10;
  char v11;
  __int128 v12;
  __int128 v13;
  char v14;
  unint64_t v15;
  uint64_t v16;

  v2 = *((_BYTE *)a2 + 16);
  v3 = *((_BYTE *)a2 + 56);
  v4 = *((_QWORD *)a2 + 8);
  v5 = *((_QWORD *)a2 + 9);
  v6 = (uint64_t (*)(unint64_t))*((_QWORD *)a2 + 10);
  v15 = v4;
  v16 = v5;
  v10 = *a2;
  v11 = v2;
  v12 = *(__int128 *)((char *)a2 + 24);
  v13 = *(__int128 *)((char *)a2 + 40);
  v14 = v3;
  v7 = sub_2447E23C0(v4);
  v8 = (void *)v6(v7);
  sub_2447E0DB0((uint64_t)&v10, v8);

  return sub_2447E23A0(v4);
}

uint64_t sub_2447E1B80(uint64_t a1, __int128 *a2, uint64_t (*a3)(__int128 *))
{
  char v3;
  char v4;
  __int128 v5;
  __int128 v7;
  char v8;
  __int128 v9;
  __int128 v10;
  char v11;
  __int128 v12;
  __int128 v13;

  v3 = *((_BYTE *)a2 + 16);
  v4 = *((_BYTE *)a2 + 56);
  v7 = *a2;
  v8 = v3;
  v9 = *(__int128 *)((char *)a2 + 24);
  v10 = *(__int128 *)((char *)a2 + 40);
  v11 = v4;
  v5 = a2[5];
  v12 = a2[4];
  v13 = v5;
  return a3(&v7);
}

uint64_t sub_2447E1BDC()
{
  sub_2448EB79C();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  Callsite.description.getter();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_2447E1D64()
{
  sub_2448EB79C();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  Callsite.description.getter();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  Callsite.description.getter();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  Callsite.description.getter();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  return 0;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> OverfulfillHandle.throwError()()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 80))();
  swift_willThrow();
}

Swift::Void __swiftcall OverfulfillHandle.assert()()
{
  __int128 *v0;
  char v1;
  char v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(unint64_t);
  unint64_t v6;
  void *v7;
  __int128 v8;
  char v9;
  __int128 v10;
  __int128 v11;
  char v12;
  unint64_t v13;
  uint64_t v14;

  v1 = *((_BYTE *)v0 + 16);
  v2 = *((_BYTE *)v0 + 56);
  v3 = *((_QWORD *)v0 + 8);
  v4 = *((_QWORD *)v0 + 9);
  v5 = (uint64_t (*)(unint64_t))*((_QWORD *)v0 + 10);
  v13 = v3;
  v14 = v4;
  v8 = *v0;
  v9 = v1;
  v10 = *(__int128 *)((char *)v0 + 24);
  v11 = *(__int128 *)((char *)v0 + 40);
  v12 = v2;
  v6 = sub_2447E23C0(v3);
  v7 = (void *)v5(v6);
  sub_2447E0DB0((uint64_t)&v8, v7);

  sub_2447E23A0(v3);
}

uint64_t sub_2447E212C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v39 = a7;
  v40 = a8;
  v35 = a3;
  v36 = a4;
  v37 = a9;
  v38 = a6;
  v13 = *(_QWORD *)(*(_QWORD *)v9 + 80);
  v14 = type metadata accessor for FulfillOnceState.State(0, v13, *(_QWORD *)(*(_QWORD *)v9 + 88), a4);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v29 - v16;
  v18 = *a2;
  v19 = a2[1];
  v32 = *((unsigned __int8 *)a2 + 16);
  v31 = *(_OWORD *)(a2 + 3);
  v20 = a2[5];
  v29 = a2[6];
  v30 = v20;
  LOBYTE(a2) = *((_BYTE *)a2 + 56);
  v21 = *a5;
  v33 = a5[1];
  v34 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))((char *)&v29 - v16, a1, v13);
  swift_storeEnumTagMultiPayload();
  v22 = sub_24481320C(v17, v14);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  *(_QWORD *)(v9 + 144) = v22;
  *(_QWORD *)(v9 + 16) = v18;
  *(_QWORD *)(v9 + 24) = v19;
  *(_BYTE *)(v9 + 32) = v32;
  *(_OWORD *)(v9 + 40) = v31;
  v23 = v29;
  *(_QWORD *)(v9 + 56) = v30;
  *(_QWORD *)(v9 + 64) = v23;
  *(_BYTE *)(v9 + 72) = (_BYTE)a2;
  v24 = v36;
  *(_QWORD *)(v9 + 80) = v35;
  *(_QWORD *)(v9 + 88) = v24;
  v25 = v33;
  *(_QWORD *)(v9 + 96) = v34;
  *(_QWORD *)(v9 + 104) = v25;
  v26 = v39;
  *(_QWORD *)(v9 + 112) = v38;
  *(_QWORD *)(v9 + 120) = v26;
  v27 = v37;
  *(_QWORD *)(v9 + 128) = v40;
  *(_QWORD *)(v9 + 136) = v27;
  return v9;
}

uint64_t sub_2447E229C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  swift_allocObject();
  return sub_2447E212C(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_2447E233C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2447E1138(a1, *(void (**)(char *))(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

uint64_t type metadata accessor for FulfillOnceState.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FulfillOnceState.State);
}

uint64_t type metadata accessor for FulfillOnceState.WaitingStateUpdateResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FulfillOnceState.WaitingStateUpdateResult);
}

uint64_t sub_2447E2374@<X0>(uint64_t a1@<X0>, void (*a2)(_QWORD)@<X8>)
{
  uint64_t v2;

  return sub_2447E141C(a1, *(void (**)(_QWORD))(v2 + 16), *(_QWORD *)(v2 + 24), *(uint64_t **)(v2 + 32), *(uint64_t **)(v2 + 40), *(void (**)(char *, _QWORD *))(v2 + 48), *(_QWORD *)(v2 + 56), a2);
}

uint64_t type metadata accessor for FulfillOnceState.FulfillmentOutcome(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FulfillOnceState.FulfillmentOutcome);
}

unint64_t sub_2447E23A0(unint64_t result)
{
  if (result >= 3)
    return swift_release();
  return result;
}

uint64_t type metadata accessor for FulfillOnceState.Unfulfilled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FulfillOnceState.Unfulfilled);
}

unint64_t sub_2447E23C0(unint64_t result)
{
  if (result >= 3)
    return swift_retain();
  return result;
}

uint64_t sub_2447E23D4(uint64_t a1, __int128 *a2)
{
  uint64_t v2;

  return sub_2447E1B80(a1, a2, *(uint64_t (**)(__int128 *))(v2 + 16));
}

uint64_t sub_2447E23EC()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for FulfillOnceState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FulfillOnceState);
}

uint64_t method lookup function for FulfillOnceState()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FulfillOnceState.__allocating_init(waitingState:initializationCallsite:initializationInfo:failureMode:thingDescription:actionPastParticiple:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t sub_2447E2480()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  _QWORD v3[6];

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v3[4] = *(_QWORD *)(result - 8) + 64;
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v3[5] = v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_2447E251C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  if (((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 57 <= *(_QWORD *)(v6 + 64))
    v9 = *(_QWORD *)(v6 + 64);
  else
    v9 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 57;
  v10 = *(_DWORD *)(v7 + 80) | *(_DWORD *)(v6 + 80);
  if ((v10 & 0x1000F8) != 0 || v9 + 1 > 0x18)
  {
    v12 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v12 + (((v10 & 0xF8 | 7u) + 16) & ~(unint64_t)(v10 & 0xF8 | 7u)));
    swift_retain();
  }
  else
  {
    v13 = *((unsigned __int8 *)a2 + v9);
    if (v13 >= 2)
    {
      if (v9 <= 3)
        v14 = v9;
      else
        v14 = 4;
      __asm { BR              X15 }
    }
    if (v13 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v5);
      v15 = (_OWORD *)(((unint64_t)v4 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
      v16 = (__int128 *)(((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
      v18 = v16[1];
      v17 = v16[2];
      v19 = *v16;
      *(_OWORD *)((char *)v15 + 41) = *(__int128 *)((char *)v16 + 41);
      v15[1] = v18;
      v15[2] = v17;
      *v15 = v19;
      *((_BYTE *)v4 + v9) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
      *((_BYTE *)v4 + v9) = 0;
    }
  }
  return v4;
}

uint64_t sub_2447E269C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(v2 - 8);
  if (((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 57 > v4)
    v4 = ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 57;
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (v6 < 2)
  {
    if (v6 == 1)
      v3 = *(_QWORD *)(v2 - 8);
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  else
  {
    if (v4 <= 3)
      v7 = v4;
    else
      v7 = 4;
    return ((uint64_t (*)(void))((char *)&loc_2447E26F4 + 4 * byte_2448EDDC5[v7]))();
  }
}

uint64_t sub_2447E2748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  if (((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 57 <= *(_QWORD *)(v6 + 64))
    v9 = *(_QWORD *)(v6 + 64);
  else
    v9 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 57;
  v10 = *(unsigned __int8 *)(a2 + v9);
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X15 }
  }
  if (v10 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v5);
    v12 = (_OWORD *)((a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    v13 = (__int128 *)((a2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    v15 = v13[1];
    v14 = v13[2];
    v16 = *v13;
    *(_OWORD *)((char *)v12 + 41) = *(__int128 *)((char *)v13 + 41);
    v12[1] = v15;
    v12[2] = v14;
    *v12 = v16;
    v17 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 16))(a1, a2);
    v17 = 0;
  }
  *(_BYTE *)(a1 + v9) = v17;
  return a1;
}

uint64_t sub_2447E2880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    v9 = *(_QWORD *)(v8 + 64);
    if (((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 57 <= *(_QWORD *)(v7 + 64))
      v10 = *(_QWORD *)(v7 + 64);
    else
      v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 57;
    v11 = *(unsigned __int8 *)(a1 + v10);
    if (v11 >= 2)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
      v13 = *(_QWORD *)(v6 - 8);
    else
      v13 = *(_QWORD *)(v5 - 8);
    if (v11 == 1)
      v14 = *(_QWORD *)(a3 + 24);
    else
      v14 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v14);
    v15 = *(unsigned __int8 *)(a2 + v10);
    if (v15 >= 2)
    {
      if (v10 <= 3)
        v16 = v10;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a1, a2, v6);
      v17 = (_OWORD *)((a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
      v18 = (__int128 *)((a2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
      v20 = v18[1];
      v19 = v18[2];
      v21 = *v18;
      *(_OWORD *)((char *)v17 + 41) = *(__int128 *)((char *)v18 + 41);
      v17[1] = v20;
      v17[2] = v19;
      *v17 = v21;
      v22 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v5);
      v22 = 0;
    }
    *(_BYTE *)(a1 + v10) = v22;
  }
  return a1;
}

uint64_t sub_2447E2A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  if (((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 57 <= *(_QWORD *)(v6 + 64))
    v9 = *(_QWORD *)(v6 + 64);
  else
    v9 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 57;
  v10 = *(unsigned __int8 *)(a2 + v9);
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X15 }
  }
  if (v10 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v5);
    v12 = (_OWORD *)((a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    v13 = (__int128 *)((a2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    v15 = v13[1];
    v14 = v13[2];
    v16 = *v13;
    *(_OWORD *)((char *)v12 + 41) = *(__int128 *)((char *)v13 + 41);
    v12[1] = v15;
    v12[2] = v14;
    *v12 = v16;
    v17 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 32))(a1, a2);
    v17 = 0;
  }
  *(_BYTE *)(a1 + v9) = v17;
  return a1;
}

uint64_t sub_2447E2B8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    v9 = *(_QWORD *)(v8 + 64);
    if (((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 57 <= *(_QWORD *)(v7 + 64))
      v10 = *(_QWORD *)(v7 + 64);
    else
      v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 57;
    v11 = *(unsigned __int8 *)(a1 + v10);
    if (v11 >= 2)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
      v13 = *(_QWORD *)(v6 - 8);
    else
      v13 = *(_QWORD *)(v5 - 8);
    if (v11 == 1)
      v14 = *(_QWORD *)(a3 + 24);
    else
      v14 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v14);
    v15 = *(unsigned __int8 *)(a2 + v10);
    if (v15 >= 2)
    {
      if (v10 <= 3)
        v16 = v10;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(a1, a2, v6);
      v17 = (_OWORD *)((a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
      v18 = (__int128 *)((a2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
      v20 = v18[1];
      v19 = v18[2];
      v21 = *v18;
      *(_OWORD *)((char *)v17 + 41) = *(__int128 *)((char *)v18 + 41);
      v17[1] = v20;
      v17[2] = v19;
      *v17 = v21;
      v22 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v5);
      v22 = 0;
    }
    *(_BYTE *)(a1 + v10) = v22;
  }
  return a1;
}

uint64_t sub_2447E2D60(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 57;
  if (v3 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2447E2E34 + 4 * byte_2448EDDE8[(v4 - 1)]))();
}

void sub_2447E2E80(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 57 > v5)
    v5 = ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 57;
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_2447E3038(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 57;
  if (v2 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64))
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_2447E3090 + 4 * byte_2448EDDF6[v3]))();
}

void sub_2447E30D8(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  if (a2 > 1)
  {
    if (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 57 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    else
      v5 = ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 57;
    v6 = a2 - 2;
    if (v5 < 4)
    {
      v7 = v6 >> (8 * v5);
      v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 2;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 2;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    v4 = ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 57;
    if (v4 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    a1[v4] = a2;
  }
}

uint64_t sub_2447E31D8()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_2447E3260(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    v11 = *((unsigned __int8 *)a2 + v6);
    if (v11 >= 2)
    {
      if (v6 <= 3)
        v12 = v6;
      else
        v12 = 4;
      __asm { BR              X15 }
    }
    if (v11 == 1)
    {
      (*(void (**)(uint64_t *))(v5 + 16))(a1);
      *((_BYTE *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v6) = 0;
    }
  }
  else
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

uint64_t sub_2447E338C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 32) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(v2 - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (v6 < 2)
  {
    if (v6 == 1)
      v3 = *(_QWORD *)(v2 - 8);
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  else
  {
    if (v4 <= 3)
      v7 = v4;
    else
      v7 = 4;
    return ((uint64_t (*)(void))((char *)&loc_2447E33D8 + 4 * byte_2448EDE00[v7]))();
  }
}

uint64_t sub_2447E342C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t sub_2447E3500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v6 = *(_QWORD *)(a3 + 24);
    v5 = *(_QWORD *)(a3 + 32);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 32);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t sub_2447E367C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t sub_2447E3750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v6 = *(_QWORD *)(a3 + 24);
    v5 = *(_QWORD *)(a3 + 32);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 32);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t sub_2447E38CC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  if (v3 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) - 8) + 64))
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2447E3994 + 4 * byte_2448EDE23[(v4 - 1)]))();
}

void sub_2447E39E0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 32) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64);
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_2447E3B8C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64);
  if (v2 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 64))
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_2447E3BD8 + 4 * byte_2448EDE31[v3]))();
}

void sub_2447E3C20(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  if (a2 > 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 32)
                                                                                              - 8)
                                                                                  + 64))
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) - 8) + 64);
    else
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    v6 = a2 - 2;
    if (v5 < 4)
    {
      v7 = v6 >> (8 * v5);
      v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 2;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 2;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    if (v4 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) - 8) + 64))
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) - 8) + 64);
    a1[v4] = a2;
  }
}

uint64_t sub_2447E3D08()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v2 = swift_checkMetadataState();
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      swift_getTupleTypeLayout2();
      swift_initEnumMetadataSinglePayload();
      return 0;
    }
  }
  return v0;
}

_QWORD *sub_2447E3DA4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  size_t v15;
  uint64_t v16;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v24;

  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_DWORD *)(v8 + 80);
  v11 = *(_QWORD *)(v7 + 64) + v10;
  v12 = (v11 & ~v10) + *(_QWORD *)(v8 + 64);
  v13 = *(unsigned int *)(v7 + 84);
  v14 = v9 | v13;
  if (v9 | v13)
    v15 = (v11 & ~v10) + *(_QWORD *)(v8 + 64);
  else
    v15 = v12 + 1;
  v16 = (*(_BYTE *)(v7 + 80) | *(_BYTE *)(v8 + 80));
  if (v16 > 7 || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v15 > 0x18)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v19 + ((v16 + 16) & ~v16));
    swift_retain();
    return a1;
  }
  v20 = ~v10;
  v24 = v20;
  if (!v14)
  {
    if (!*((_BYTE *)a2 + v12))
      goto LABEL_28;
    v21 = (*((unsigned __int8 *)a2 + v12) - 1) << (8 * v12);
    if (v12 > 3)
      v21 = 0;
    if ((_DWORD)v12)
    {
      if (v12 <= 3)
        v22 = v12;
      else
        v22 = 4;
      __asm { BR              X11 }
    }
    if (v21 == -1)
      goto LABEL_28;
    goto LABEL_26;
  }
  if (v13 >= v9)
  {
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, v13, v6))
      goto LABEL_28;
LABEL_26:
    memcpy(a1, a2, v15);
    return a1;
  }
  if ((*(unsigned int (**)(unint64_t))(v8 + 48))(((unint64_t)a2 + v11) & v20))
    goto LABEL_26;
LABEL_28:
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)a1 + v11) & v24, ((unint64_t)a2 + v11) & v24, v5);
  if (!v14)
    *((_BYTE *)a1 + v12) = 0;
  return a1;
}

uint64_t sub_2447E3F78(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  int v14;

  v4 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v3 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = ~v9;
  v11 = *(_QWORD *)(v5 + 64) + v9;
  if (v8 | v6)
  {
    if (v6 >= v8)
    {
      result = (*(uint64_t (**)(uint64_t))(v5 + 48))(a1);
      if (!(_DWORD)result)
      {
LABEL_15:
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))((v11 + a1) & v10, v3);
      }
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))((v11 + a1) & v10, *(unsigned int *)(v7 + 84), v3);
      if (!(_DWORD)result)
        goto LABEL_15;
    }
  }
  else
  {
    v13 = (v11 & ~v9) + *(_QWORD *)(v7 + 64);
    if (!*(_BYTE *)(a1 + v13))
      goto LABEL_15;
    v14 = (*(unsigned __int8 *)(a1 + v13) - 1) << (8 * v13);
    if (v13 > 3)
      v14 = 0;
    if ((_DWORD)v13)
    {
      if (v13 > 3)
        LODWORD(v13) = 4;
      __asm { BR              X11 }
    }
    result = (v14 + 1);
    if (v14 == -1)
      goto LABEL_15;
  }
  return result;
}

_BYTE *sub_2447E40D0(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  int v15;
  int v16;
  int v17;
  size_t v18;

  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(_DWORD *)(v9 + 84);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = ~v11;
  v13 = *(_QWORD *)(v7 + 64) + v11;
  v14 = (v13 & ~v11) + *(_QWORD *)(v9 + 64);
  v15 = v10 | v8;
  if (v10 | v8)
  {
    if (v8 >= v10)
    {
      if (!(*(unsigned int (**)(_BYTE *))(v7 + 48))(a2))
        goto LABEL_19;
    }
    else if (!(*(unsigned int (**)(unint64_t, _QWORD, _QWORD))(v9 + 48))((unint64_t)&a2[v13] & v12, *(unsigned int *)(v9 + 84), *(_QWORD *)(a3 + 24)))
    {
LABEL_19:
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))((unint64_t)&a1[v13] & v12, (unint64_t)&a2[v13] & v12, v5);
      if (!v15)
        a1[v14] = 0;
      return a1;
    }
  }
  else
  {
    if (!a2[v14])
      goto LABEL_19;
    v16 = (a2[v14] - 1) << (8 * v14);
    if (v14 > 3)
      v16 = 0;
    if ((_DWORD)v14)
    {
      if (v14 <= 3)
        v17 = (v13 & ~(_DWORD)v11) + *(_DWORD *)(v9 + 64);
      else
        v17 = 4;
      __asm { BR              X11 }
    }
    if (v16 == -1)
      goto LABEL_19;
  }
  if (v15)
    v18 = v14;
  else
    v18 = v14 + 1;
  memcpy(a1, a2, v18);
  return a1;
}

_BYTE *sub_2447E4258(_BYTE *a1, unsigned __int8 *a2, uint64_t a3)
{
  const void *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  int v15;
  unint64_t v16;
  size_t v17;
  int v18;
  uint64_t v19;
  uint64_t (*v21)(unint64_t, uint64_t, uint64_t);
  uint64_t v22;
  int v23;
  int v24;
  char v25;
  int v26;
  int v27;
  uint64_t (*v29)(unsigned __int8 *, uint64_t, uint64_t);
  int v30;
  int v31;
  int v32;
  size_t v33;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v3 = a2;
  v4 = a1;
  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = ~v11;
  v13 = *(_QWORD *)(v7 + 64) + v11;
  v14 = (v13 & ~v11) + *(_QWORD *)(v9 + 64);
  v15 = v10 | v8;
  v38 = v13;
  v39 = v5;
  v37 = v7;
  if (v10 | v8)
  {
    if (v8 >= v10)
    {
      v29 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48);
      v30 = v29(a1, v8, v6);
      v24 = v29(a2, v8, v6);
      v3 = a2;
      if (v30)
      {
LABEL_4:
        if (!v24)
          goto LABEL_36;
        goto LABEL_30;
      }
    }
    else
    {
      v16 = (unint64_t)&a1[v13] & v12;
      v35 = *(_QWORD *)(a3 + 16);
      v36 = v4;
      v17 = (v13 & ~v11) + *(_QWORD *)(v9 + 64);
      v18 = v10 | v8;
      v19 = ~v11;
      v21 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
      v22 = *(_QWORD *)(v7 + 64) + v11;
      v23 = v21(v16, v10, v5);
      v24 = v21((unint64_t)&a2[v22] & v19, v10, v5);
      v3 = a2;
      v12 = v19;
      v15 = v18;
      v14 = v17;
      v6 = v35;
      v4 = v36;
      if (v23)
        goto LABEL_4;
    }
    v7 = v37;
    if (!v24)
    {
LABEL_34:
      (*(void (**)(_BYTE *, const void *, uint64_t))(v7 + 24))(v4, v3, v6);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 24))((unint64_t)&v4[v38] & v12, ((unint64_t)v3 + v38) & v12, v39);
      return v4;
    }
LABEL_29:
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v4, v6);
    (*(void (**)(unint64_t, uint64_t))(v9 + 8))((unint64_t)&v4[v38] & v12, v39);
    goto LABEL_30;
  }
  v25 = 8 * v14;
  if (!a1[v14])
    goto LABEL_41;
  v26 = (a1[v14] - 1) << v25;
  if (v14 > 3)
    v26 = 0;
  if ((_DWORD)v14)
  {
    if (v14 <= 3)
      v27 = v14;
    else
      v27 = 4;
    __asm { BR              X12 }
  }
  if (v26 == -1)
  {
LABEL_41:
    if (!a2[v14])
      goto LABEL_34;
    v31 = (a2[v14] - 1) << v25;
    if (v14 > 3)
      v31 = 0;
    if ((_DWORD)v14)
    {
      if (v14 <= 3)
        v32 = v14;
      else
        v32 = 4;
      __asm { BR              X11 }
    }
    v7 = *(_QWORD *)(v6 - 8);
    if (v31 == -1)
      goto LABEL_34;
    goto LABEL_29;
  }
  if (!a2[v14] || (a2[v14] - 1) << v25 == -1)
  {
LABEL_36:
    (*(void (**)(_BYTE *, const void *, uint64_t))(v37 + 16))(v4, v3, v6);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))((unint64_t)&v4[v38] & v12, ((unint64_t)v3 + v38) & v12, v39);
    if (!v15)
      v4[v14] = 0;
    return v4;
  }
LABEL_30:
  if (v15)
    v33 = v14;
  else
    v33 = v14 + 1;
  memcpy(v4, v3, v33);
  return v4;
}

_BYTE *sub_2447E45BC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  int v15;
  int v16;
  int v17;
  size_t v18;

  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(_DWORD *)(v9 + 84);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = ~v11;
  v13 = *(_QWORD *)(v7 + 64) + v11;
  v14 = (v13 & ~v11) + *(_QWORD *)(v9 + 64);
  v15 = v10 | v8;
  if (v10 | v8)
  {
    if (v8 >= v10)
    {
      if (!(*(unsigned int (**)(_BYTE *))(v7 + 48))(a2))
        goto LABEL_19;
    }
    else if (!(*(unsigned int (**)(unint64_t, _QWORD, _QWORD))(v9 + 48))((unint64_t)&a2[v13] & v12, *(unsigned int *)(v9 + 84), *(_QWORD *)(a3 + 24)))
    {
LABEL_19:
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))((unint64_t)&a1[v13] & v12, (unint64_t)&a2[v13] & v12, v5);
      if (!v15)
        a1[v14] = 0;
      return a1;
    }
  }
  else
  {
    if (!a2[v14])
      goto LABEL_19;
    v16 = (a2[v14] - 1) << (8 * v14);
    if (v14 > 3)
      v16 = 0;
    if ((_DWORD)v14)
    {
      if (v14 <= 3)
        v17 = (v13 & ~(_DWORD)v11) + *(_DWORD *)(v9 + 64);
      else
        v17 = 4;
      __asm { BR              X11 }
    }
    if (v16 == -1)
      goto LABEL_19;
  }
  if (v15)
    v18 = v14;
  else
    v18 = v14 + 1;
  memcpy(a1, a2, v18);
  return a1;
}

_BYTE *sub_2447E4744(_BYTE *a1, unsigned __int8 *a2, uint64_t a3)
{
  const void *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  int v15;
  unint64_t v16;
  size_t v17;
  int v18;
  uint64_t v19;
  uint64_t (*v21)(unint64_t, uint64_t, uint64_t);
  uint64_t v22;
  int v23;
  int v24;
  char v25;
  int v26;
  int v27;
  uint64_t (*v29)(unsigned __int8 *, uint64_t, uint64_t);
  int v30;
  int v31;
  int v32;
  size_t v33;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v3 = a2;
  v4 = a1;
  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = ~v11;
  v13 = *(_QWORD *)(v7 + 64) + v11;
  v14 = (v13 & ~v11) + *(_QWORD *)(v9 + 64);
  v15 = v10 | v8;
  v38 = v13;
  v39 = v5;
  v37 = v7;
  if (v10 | v8)
  {
    if (v8 >= v10)
    {
      v29 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48);
      v30 = v29(a1, v8, v6);
      v24 = v29(a2, v8, v6);
      v3 = a2;
      if (v30)
      {
LABEL_4:
        if (!v24)
          goto LABEL_36;
        goto LABEL_30;
      }
    }
    else
    {
      v16 = (unint64_t)&a1[v13] & v12;
      v35 = *(_QWORD *)(a3 + 16);
      v36 = v4;
      v17 = (v13 & ~v11) + *(_QWORD *)(v9 + 64);
      v18 = v10 | v8;
      v19 = ~v11;
      v21 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
      v22 = *(_QWORD *)(v7 + 64) + v11;
      v23 = v21(v16, v10, v5);
      v24 = v21((unint64_t)&a2[v22] & v19, v10, v5);
      v3 = a2;
      v12 = v19;
      v15 = v18;
      v14 = v17;
      v6 = v35;
      v4 = v36;
      if (v23)
        goto LABEL_4;
    }
    v7 = v37;
    if (!v24)
    {
LABEL_34:
      (*(void (**)(_BYTE *, const void *, uint64_t))(v7 + 40))(v4, v3, v6);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 40))((unint64_t)&v4[v38] & v12, ((unint64_t)v3 + v38) & v12, v39);
      return v4;
    }
LABEL_29:
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v4, v6);
    (*(void (**)(unint64_t, uint64_t))(v9 + 8))((unint64_t)&v4[v38] & v12, v39);
    goto LABEL_30;
  }
  v25 = 8 * v14;
  if (!a1[v14])
    goto LABEL_41;
  v26 = (a1[v14] - 1) << v25;
  if (v14 > 3)
    v26 = 0;
  if ((_DWORD)v14)
  {
    if (v14 <= 3)
      v27 = v14;
    else
      v27 = 4;
    __asm { BR              X12 }
  }
  if (v26 == -1)
  {
LABEL_41:
    if (!a2[v14])
      goto LABEL_34;
    v31 = (a2[v14] - 1) << v25;
    if (v14 > 3)
      v31 = 0;
    if ((_DWORD)v14)
    {
      if (v14 <= 3)
        v32 = v14;
      else
        v32 = 4;
      __asm { BR              X11 }
    }
    v7 = *(_QWORD *)(v6 - 8);
    if (v31 == -1)
      goto LABEL_34;
    goto LABEL_29;
  }
  if (!a2[v14] || (a2[v14] - 1) << v25 == -1)
  {
LABEL_36:
    (*(void (**)(_BYTE *, const void *, uint64_t))(v37 + 32))(v4, v3, v6);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))((unint64_t)&v4[v38] & v12, ((unint64_t)v3 + v38) & v12, v39);
    if (!v15)
      v4[v14] = 0;
    return v4;
  }
LABEL_30:
  if (v15)
    v33 = v14;
  else
    v33 = v14 + 1;
  memcpy(v4, v3, v33);
  return v4;
}

uint64_t sub_2447E4AA8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v6 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v6 + 64) + 1;
  }
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = *(_QWORD *)(v4 + 64) + v11;
  v13 = a2 - v9;
  if (a2 > v9)
  {
    v14 = v10 + (v12 & ~v11);
    v15 = 8 * v14;
    if (v14 > 3)
      goto LABEL_10;
    v17 = ((v13 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      v16 = *(_DWORD *)(a1 + v14);
      if (v16)
        goto LABEL_17;
    }
    else
    {
      if (v17 <= 0xFF)
      {
        if (v17 < 2)
          goto LABEL_26;
LABEL_10:
        v16 = *(unsigned __int8 *)(a1 + v14);
        if (!*(_BYTE *)(a1 + v14))
          goto LABEL_26;
LABEL_17:
        v18 = (v16 - 1) << v15;
        if (v14 > 3)
          v18 = 0;
        if ((_DWORD)v14)
        {
          if (v14 <= 3)
            v19 = v14;
          else
            v19 = 4;
          __asm { BR              X12 }
        }
        return v9 + v18 + 1;
      }
      v16 = *(unsigned __int16 *)(a1 + v14);
      if (*(_WORD *)(a1 + v14))
        goto LABEL_17;
    }
  }
LABEL_26:
  if (v8 < 2)
    return 0;
  if (v5 >= v7)
    v20 = (*(uint64_t (**)(void))(v4 + 48))();
  else
    v20 = (*(uint64_t (**)(uint64_t))(v6 + 48))((v12 + a1) & ~v11);
  if (v20 >= 2)
    return v20 - 1;
  else
    return 0;
}

void sub_2447E4C3C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v5 = 0;
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v7 + 84) <= *(_DWORD *)(v6 + 84))
    v8 = *(_DWORD *)(v6 + 84);
  else
    v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = *(_QWORD *)(v6 + 64) + v10;
  v12 = *(_QWORD *)(v7 + 64);
  if (v8)
    v13 = (v11 & ~v10) + v12;
  else
    v13 = (v11 & ~v10) + v12 + 1;
  if (a3 > v9)
  {
    if (v13 > 3)
    {
      v5 = 1u;
      if (v9 >= a2)
LABEL_26:
        __asm { BR              X0 }
LABEL_19:
      v15 = ~v9 + a2;
      if (v13 < 4)
      {
        if ((_DWORD)v13)
        {
          v16 = v15 & ~(-1 << (8 * v13));
          bzero(a1, v13);
          if ((_DWORD)v13 == 3)
          {
            *a1 = v16;
            *((_BYTE *)a1 + 2) = BYTE2(v16);
          }
          else if ((_DWORD)v13 == 2)
          {
            *a1 = v16;
          }
          else
          {
            *(_BYTE *)a1 = v16;
          }
        }
      }
      else
      {
        bzero(a1, v13);
        *(_DWORD *)a1 = v15;
      }
      __asm { BR              X10 }
    }
    v14 = ((a3 - v9 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v14))
    {
      v5 = 4u;
      if (v9 >= a2)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v14 >= 0x100)
      v5 = 2;
    else
      v5 = v14 > 1;
  }
  if (v9 >= a2)
    goto LABEL_26;
  goto LABEL_19;
}

void sub_2447E4E80()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_2447E4E88()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_2447E4ECC()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_2447E4ED4()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_2447E4EE4()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t sub_2447E4EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_DWORD *)(v2 + 84);
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = *(_QWORD *)(v2 + 64) + v6;
  if (v5 | v3)
  {
    if (v3 >= v5)
      return (*(uint64_t (**)(uint64_t, _QWORD))(v2 + 48))(a1, *(unsigned int *)(v2 + 84));
    else
      return (*(uint64_t (**)(uint64_t))(v4 + 48))((v7 + a1) & ~v6);
  }
  else
  {
    v9 = (v7 & ~v6) + *(_QWORD *)(v4 + 64);
    if (*(_BYTE *)(a1 + v9))
    {
      v10 = (*(unsigned __int8 *)(a1 + v9) - 1) << (8 * v9);
      if (v9 > 3)
        v10 = 0;
      if ((_DWORD)v9)
      {
        if (v9 > 3)
          LODWORD(v9) = 4;
        return ((uint64_t (*)(void))((char *)&loc_2447E4F8C + 4 * byte_2448EDE70[(v9 - 1)]))();
      }
      else
      {
        return (v10 + 1);
      }
    }
    else
    {
      return 0;
    }
  }
}

void sub_2447E4FD0(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  _BYTE *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  void (*v15)(_BYTE *);

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  if (v8 >= a2)
  {
    if (v8)
    {
      if (!a2)
        return;
    }
    else
    {
      a1[v11] = 0;
      if (!a2)
        return;
    }
    if (v5 >= v7)
    {
      v15 = *(void (**)(_BYTE *))(v4 + 56);
    }
    else
    {
      a1 = (_BYTE *)((unint64_t)&a1[v10] & ~v9);
      v15 = *(void (**)(_BYTE *))(v6 + 56);
    }
    v15(a1);
    return;
  }
  v12 = ~v8 + a2;
  if (v11 >= 4)
  {
    bzero(a1, (v10 & ~v9) + *(_QWORD *)(v6 + 64));
    *(_DWORD *)v3 = v12;
    LOBYTE(v13) = 1;
    if (v8)
      return;
    goto LABEL_23;
  }
  v13 = (v12 >> (8 * v11)) + 1;
  if (!(_DWORD)v11)
  {
LABEL_22:
    if (v8)
      return;
    goto LABEL_23;
  }
  v14 = v12 & ~(-1 << (8 * v11));
  bzero(a1, (v10 & ~v9) + *(_QWORD *)(v6 + 64));
  if ((_DWORD)v11 == 3)
  {
    *(_WORD *)v3 = v14;
    v3[2] = BYTE2(v14);
    goto LABEL_22;
  }
  if ((_DWORD)v11 == 2)
  {
    *(_WORD *)v3 = v14;
    if (v8)
      return;
    goto LABEL_23;
  }
  *v3 = v14;
  if (!v8)
LABEL_23:
    v3[v11] = v13;
}

_QWORD *destroy for FulfillmentFailureMode(_QWORD *result)
{
  if (*result >= 0xFFFFFFFFuLL)
    return (_QWORD *)swift_release();
  return result;
}

uint64_t _s20PreviewsFoundationOS22FulfillmentFailureModeOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_retain();
  }
  return a1;
}

unint64_t *assignWithCopy for FulfillmentFailureMode(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for FulfillmentFailureMode(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  if (*a1 < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    swift_release();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FulfillmentFailureMode(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 2;
  if (v4 >= 4)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FulfillmentFailureMode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 2;
  }
  return result;
}

uint64_t sub_2447E5324(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_2447E533C(_QWORD *result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for FulfillmentFailureMode()
{
  return &type metadata for FulfillmentFailureMode;
}

uint64_t destroy for OverfulfillHandle(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 64) >= 3uLL)
    swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for OverfulfillHandle(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  v5 = *(_QWORD *)(a2 + 64);
  if (v5 >= 3)
  {
    v6 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v5;
    *(_QWORD *)(a1 + 72) = v6;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  }
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OverfulfillHandle(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  unint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v4 = (_OWORD *)(a1 + 64);
  v6 = (_OWORD *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 64) >= 3uLL)
  {
    if (v5 >= 3)
    {
      v8 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = v5;
      *(_QWORD *)(a1 + 72) = v8;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    sub_2447E54FC(a1 + 64);
    goto LABEL_6;
  }
  if (v5 < 3)
  {
LABEL_6:
    *v4 = *v6;
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 72) = v7;
  swift_retain();
LABEL_8:
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_2447E54FC(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(qword_25738AE68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for OverfulfillHandle(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  unint64_t v5;
  _OWORD *v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v4 = (_OWORD *)(a1 + 64);
  v6 = (_OWORD *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 64) >= 3uLL)
  {
    if (v5 >= 3)
    {
      v7 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = v5;
      *(_QWORD *)(a1 + 72) = v7;
      swift_release();
      goto LABEL_6;
    }
    sub_2447E54FC(a1 + 64);
  }
  *v4 = *v6;
LABEL_6:
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for OverfulfillHandle(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OverfulfillHandle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 80) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OverfulfillHandle()
{
  return &type metadata for OverfulfillHandle;
}

uint64_t sub_2447E56B0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2447E56E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  v6 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_2447E574C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy112_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t sub_2447E583C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v6 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CommandLineToolInvocation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CommandLineToolInvocation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_2447E595C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2447E5980()
{
  uint64_t v0;

  return sub_2447E186C(*(uint64_t **)(v0 + 16), (uint64_t *)(v0 + 24), (uint64_t *)(v0 + 88));
}

uint64_t type metadata accessor for FulfillOnceState.Overfulfilled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FulfillOnceState.Overfulfilled);
}

uint64_t sub_2447E599C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_2447E59A4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2447E59D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 201) = *(_OWORD *)(a2 + 201);
  v9 = *(_OWORD *)(a2 + 192);
  v10 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  v11 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_2447E5A70(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy240_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  result = (__n128)a2[11];
  v11 = a2[12];
  v12 = a2[14];
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_OWORD *)(a1 + 224) = v12;
  *(__n128 *)(a1 + 176) = result;
  *(_OWORD *)(a1 + 192) = v11;
  return result;
}

uint64_t sub_2447E5C00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  v6 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_2447E5CCC(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 240))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_2447E5D14(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 232) = 0;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 240) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 240) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_2447E5D90(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v18;
  __int128 v19;

  __swift_instantiateConcreteTypeFromMangledName(&qword_25738B040);
  v18 = swift_allocObject();
  *(_DWORD *)(v18 + 76) = 0;
  *(_BYTE *)(v18 + 73) = 0;
  *(_QWORD *)(v9 + 136) = a9;
  *(_QWORD *)(v9 + 144) = v18;
  v19 = a1[1];
  *(_OWORD *)(v9 + 16) = *a1;
  *(_OWORD *)(v9 + 32) = v19;
  *(_OWORD *)(v9 + 48) = a1[2];
  *(_OWORD *)(v9 + 57) = *(_OWORD *)((char *)a1 + 41);
  *(_QWORD *)(v9 + 80) = a2;
  *(_QWORD *)(v9 + 88) = a3;
  *(_QWORD *)(v9 + 96) = a4;
  *(_QWORD *)(v9 + 104) = a5;
  *(_QWORD *)(v9 + 112) = a6;
  *(_QWORD *)(v9 + 120) = a7;
  *(_QWORD *)(v9 + 128) = a8;
  return v9;
}

uint64_t sub_2447E5E3C@<X0>(__int128 *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X4>, void (*a5)(uint64_t, _QWORD *)@<X5>, _BYTE *a6@<X8>)
{
  uint64_t v6;
  _BYTE *v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t result;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD v32[2];
  char v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  double (*v40)();
  uint64_t v41;
  _BYTE *v42;

  v9 = a6;
  v10 = *((unsigned __int8 *)a1 + 57);
  if (v10 == 1)
  {
    v12 = *((_QWORD *)a1 + 6);
    v22 = a1[1];
    v23 = a1[2];
    v21 = *a1;
    v30 = *((_BYTE *)a3 + 56);
    v28 = a3[5];
    v29 = a3[6];
    v27 = *(_OWORD *)(a3 + 3);
    v25 = *((_BYTE *)a1 + 56);
    v26 = *((_BYTE *)a3 + 16);
    v24 = a3[1];
    v42 = a6;
    v13 = *a3;
    v14 = *(_QWORD *)(a4 + 96);
    v15 = *(_QWORD *)(a4 + 104);
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = a4;
    *(_OWORD *)(v16 + 24) = v21;
    *(_OWORD *)(v16 + 40) = v22;
    *(_OWORD *)(v16 + 56) = v23;
    *(_QWORD *)(v16 + 72) = v12;
    *(_BYTE *)(v16 + 80) = v25;
    v17 = *((_OWORD *)a3 + 1);
    *(_OWORD *)(v16 + 88) = *(_OWORD *)a3;
    *(_OWORD *)(v16 + 104) = v17;
    *(_OWORD *)(v16 + 120) = *((_OWORD *)a3 + 2);
    *(_OWORD *)(v16 + 129) = *(_OWORD *)((char *)a3 + 41);
    v32[0] = v13;
    v9 = v42;
    v32[1] = v24;
    v33 = v26;
    v34 = v27;
    v35 = v28;
    v36 = v29;
    v37 = v30;
    v38 = v14;
    v39 = v15;
    v40 = sub_2447E6BAC;
    v41 = v16;
    sub_2447E23C0(v14);
    v18 = swift_retain();
    a5(v18, v32);
    sub_2447E23A0(v14);
    result = swift_release();
    if (v6)
      return result;
  }
  else
  {
    result = a2();
    v20 = *((_OWORD *)a3 + 1);
    *a1 = *(_OWORD *)a3;
    a1[1] = v20;
    a1[2] = *((_OWORD *)a3 + 2);
    *(__int128 *)((char *)a1 + 41) = *(_OWORD *)((char *)a3 + 41);
    *((_BYTE *)a1 + 57) = 1;
  }
  *v9 = v10;
  return result;
}

uint64_t sub_2447E6008@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X4>, void (*a5)(uint64_t *, _QWORD *)@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t result;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  _QWORD v35[2];
  char v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  double (*v43)();
  uint64_t v44;
  uint64_t v45;

  v10 = *(_QWORD *)a1;
  v12 = (_OWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  if ((*(_BYTE *)(a1 + 65) & 1) != 0)
  {
    v26 = *(_QWORD *)(a1 + 40);
    v24 = *(_QWORD *)(a1 + 32);
    v22 = *(_QWORD *)(a1 + 24);
    v32 = *(_BYTE *)(a1 + 64);
    v33 = *((_BYTE *)a3 + 56);
    v30 = *(_QWORD *)(a1 + 56);
    v31 = a3[6];
    v28 = *(_QWORD *)(a1 + 48);
    v29 = a3[5];
    v27 = *(_OWORD *)(a3 + 3);
    v25 = *((_BYTE *)a3 + 16);
    v23 = a3[1];
    v21 = *a3;
    v45 = *(_QWORD *)a1;
    v15 = *(_QWORD *)(a4 + 96);
    v16 = *(_QWORD *)(a4 + 104);
    v17 = swift_allocObject();
    v18 = *((_OWORD *)a3 + 1);
    *(_OWORD *)(v17 + 88) = *(_OWORD *)a3;
    *(_QWORD *)(v17 + 16) = a4;
    *(_QWORD *)(v17 + 24) = v11;
    *(_QWORD *)(v17 + 32) = v13;
    *(_QWORD *)(v17 + 40) = v22;
    *(_QWORD *)(v17 + 48) = v24;
    *(_QWORD *)(v17 + 56) = v26;
    *(_QWORD *)(v17 + 64) = v28;
    *(_QWORD *)(v17 + 72) = v30;
    *(_BYTE *)(v17 + 80) = v32;
    *(_OWORD *)(v17 + 104) = v18;
    *(_OWORD *)(v17 + 120) = *((_OWORD *)a3 + 2);
    *(_OWORD *)(v17 + 129) = *(_OWORD *)((char *)a3 + 41);
    v35[0] = v21;
    v35[1] = v23;
    v36 = v25;
    v37 = v27;
    v38 = v29;
    v39 = v31;
    v40 = v33;
    v41 = v15;
    v42 = v16;
    v43 = sub_2447E6B44;
    v44 = v17;
    sub_2447E6B74(v10, v11, v13, v22, v24, v26, v28, v30, v32, 1);
    sub_2447E23C0(v15);
    swift_retain();
    a5(&v45, v35);
    swift_bridgeObjectRelease();
    sub_2447E23A0(v15);
    result = swift_release();
    if (!v6)
    {
      *(_OWORD *)a6 = 0u;
      *(_OWORD *)(a6 + 16) = 0u;
    }
  }
  else
  {
    *(_QWORD *)a6 = v10;
    *(_QWORD *)(a6 + 8) = v11;
    *(_QWORD *)(a6 + 16) = v13;
    a2(a6);
    *(_QWORD *)a1 = *(_QWORD *)(a6 + 24);
    v20 = *((_OWORD *)a3 + 1);
    *v12 = *(_OWORD *)a3;
    v12[1] = v20;
    v12[2] = *((_OWORD *)a3 + 2);
    *(_OWORD *)((char *)v12 + 41) = *(_OWORD *)((char *)a3 + 41);
    *(_BYTE *)(a1 + 65) = 1;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_2447E623C@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X4>, void (*a5)(uint64_t *, _QWORD *)@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t result;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  _QWORD v35[2];
  char v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  double (*v43)();
  uint64_t v44;
  uint64_t v45;

  v10 = *(_QWORD *)a1;
  v12 = (_OWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  if ((*(_BYTE *)(a1 + 65) & 1) != 0)
  {
    v26 = *(_QWORD *)(a1 + 40);
    v24 = *(_QWORD *)(a1 + 32);
    v22 = *(_QWORD *)(a1 + 24);
    v32 = *(_BYTE *)(a1 + 64);
    v33 = *((_BYTE *)a3 + 56);
    v30 = *(_QWORD *)(a1 + 56);
    v31 = a3[6];
    v28 = *(_QWORD *)(a1 + 48);
    v29 = a3[5];
    v27 = *(_OWORD *)(a3 + 3);
    v25 = *((_BYTE *)a3 + 16);
    v23 = a3[1];
    v21 = *a3;
    v45 = *(_QWORD *)a1;
    v15 = *(_QWORD *)(a4 + 96);
    v16 = *(_QWORD *)(a4 + 104);
    v17 = swift_allocObject();
    v18 = *((_OWORD *)a3 + 1);
    *(_OWORD *)(v17 + 88) = *(_OWORD *)a3;
    *(_QWORD *)(v17 + 16) = a4;
    *(_QWORD *)(v17 + 24) = v11;
    *(_QWORD *)(v17 + 32) = v13;
    *(_QWORD *)(v17 + 40) = v22;
    *(_QWORD *)(v17 + 48) = v24;
    *(_QWORD *)(v17 + 56) = v26;
    *(_QWORD *)(v17 + 64) = v28;
    *(_QWORD *)(v17 + 72) = v30;
    *(_BYTE *)(v17 + 80) = v32;
    *(_OWORD *)(v17 + 104) = v18;
    *(_OWORD *)(v17 + 120) = *((_OWORD *)a3 + 2);
    *(_OWORD *)(v17 + 129) = *(_OWORD *)((char *)a3 + 41);
    v35[0] = v21;
    v35[1] = v23;
    v36 = v25;
    v37 = v27;
    v38 = v29;
    v39 = v31;
    v40 = v33;
    v41 = v15;
    v42 = v16;
    v43 = sub_2447E6B14;
    v44 = v17;
    sub_2447E6B74(v10, v11, v13, v22, v24, v26, v28, v30, v32, 1);
    sub_2447E23C0(v15);
    swift_retain();
    a5(&v45, v35);
    swift_bridgeObjectRelease();
    sub_2447E23A0(v15);
    result = swift_release();
    if (!v6)
    {
      *(_OWORD *)a6 = 0u;
      *(_OWORD *)(a6 + 16) = 0u;
    }
  }
  else
  {
    *(_QWORD *)a6 = v10;
    *(_QWORD *)(a6 + 8) = v11;
    *(_QWORD *)(a6 + 16) = v13;
    a2(a6);
    *(_QWORD *)a1 = *(_QWORD *)(a6 + 24);
    v20 = *((_OWORD *)a3 + 1);
    *v12 = *(_OWORD *)a3;
    v12[1] = v20;
    v12[2] = *((_OWORD *)a3 + 2);
    *(_OWORD *)((char *)v12 + 41) = *(_OWORD *)((char *)a3 + 41);
    *(_BYTE *)(a1 + 65) = 1;
    return swift_bridgeObjectRetain();
  }
  return result;
}

__n128 sub_2447E6470(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 result;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;

  v10 = *(_QWORD *)(a1 + 112);
  v9 = *(_QWORD *)(a1 + 120);
  v11 = *(_QWORD *)(a1 + 136);
  v23 = *(_QWORD *)(a1 + 128);
  v30 = *(_QWORD *)(a1 + 24);
  v31 = *(_QWORD *)(a1 + 16);
  v29 = *(_BYTE *)(a1 + 32);
  v27 = *(_QWORD *)(a1 + 48);
  v28 = *(_QWORD *)(a1 + 40);
  v25 = *(_QWORD *)(a1 + 64);
  v26 = *(_QWORD *)(a1 + 56);
  v24 = *(_BYTE *)(a1 + 72);
  v12 = *(uint64_t (**)(uint64_t))(a1 + 80);
  swift_bridgeObjectRetain();
  if (v12)
  {
    v13 = swift_bridgeObjectRetain();
    v14 = v12(v13);
    v12 = v15;
  }
  else
  {
    swift_bridgeObjectRetain();
    v14 = 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(a4);
  sub_2447E6BDC(a5, a4);
  swift_allocError();
  *(_QWORD *)v16 = v10;
  *(_QWORD *)(v16 + 8) = v9;
  *(_QWORD *)(v16 + 16) = v23;
  *(_QWORD *)(v16 + 24) = v11;
  v18 = a2[1];
  v17 = a2[2];
  v19 = *a2;
  *(_OWORD *)(v16 + 73) = *(__int128 *)((char *)a2 + 41);
  *(_OWORD *)(v16 + 48) = v18;
  *(_OWORD *)(v16 + 64) = v17;
  *(_OWORD *)(v16 + 32) = v19;
  result = *(__n128 *)(a3 + 41);
  v22 = *(_OWORD *)(a3 + 16);
  v21 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v16 + 96) = *(_OWORD *)a3;
  *(_OWORD *)(v16 + 112) = v22;
  *(_OWORD *)(v16 + 128) = v21;
  *(__n128 *)(v16 + 137) = result;
  *(_QWORD *)(v16 + 160) = v31;
  *(_QWORD *)(v16 + 168) = v30;
  *(_BYTE *)(v16 + 176) = v29;
  *(_QWORD *)(v16 + 184) = v28;
  *(_QWORD *)(v16 + 192) = v27;
  *(_QWORD *)(v16 + 200) = v26;
  *(_QWORD *)(v16 + 208) = v25;
  *(_BYTE *)(v16 + 216) = v24;
  *(_QWORD *)(v16 + 224) = v14;
  *(_QWORD *)(v16 + 232) = v12;
  return result;
}

uint64_t AutoCancelling.wrappedValue.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AutoCancelling.wrappedValue.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*AutoCancelling.wrappedValue.modify(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return sub_2447E6630;
}

uint64_t sub_2447E6630(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 16) = *a1;
  return swift_bridgeObjectRelease();
}

uint64_t AutoCancelling.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = MEMORY[0x24BEE4AF8];
  return result;
}

uint64_t AutoCancelling.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  return result;
}

uint64_t AutoCancelling.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  uint64_t v11[2];
  char v12;
  __int128 v13;
  const char *v14;
  uint64_t v15;
  char v16;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v11[0] = (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFou"
                      "ndation/AutoCancelling.swift";
    v11[1] = 126;
    v12 = 2;
    v13 = xmmword_2448EE180;
    v14 = "deinit";
    v15 = 6;
    v16 = 2;
    swift_bridgeObjectRetain_n();
    v3 = (uint64_t *)(v1 + 48);
    do
    {
      v4 = (void (*)(uint64_t))*(v3 - 2);
      v5 = *v3;
      v6 = *(_QWORD *)(*v3 + 144);
      swift_retain();
      swift_retain_n();
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v6 + 76));
      sub_2447E5E3C((__int128 *)(v6 + 16), (uint64_t (*)(void))nullsub_1, v11, v5, (void (*)(uint64_t, _QWORD *))sub_2447E1AC8, &v10);
      os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 76));
      swift_release();
      v7 = swift_release();
      if ((v10 & 1) == 0)
        v4(v7);
      swift_release();
      swift_release();
      v3 += 3;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease_n();
    v0 = v9;
  }
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AutoCancelling.__deallocating_deinit()
{
  AutoCancelling.deinit();
  return swift_deallocClassInstance();
}

uint64_t AutoCancelling.projectedValue.getter@<X0>(uint64_t (**a1)()@<X8>)
{
  uint64_t (*v1)();
  uint64_t v3;
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledName(&qword_25738AF78);
  v3 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738B040);
  v4 = swift_allocObject();
  *(_DWORD *)(v4 + 76) = 0;
  *(_BYTE *)(v4 + 73) = 0;
  *(_QWORD *)(v3 + 144) = v4;
  *(_QWORD *)(v3 + 16) = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/Previews"
                         "Foundation/AutoCancelling.swift";
  *(_QWORD *)(v3 + 24) = 126;
  *(_BYTE *)(v3 + 32) = 2;
  *(_OWORD *)(v3 + 40) = xmmword_2448EE190;
  *(_QWORD *)(v3 + 56) = "projectedValue";
  *(_QWORD *)(v3 + 64) = 14;
  *(_BYTE *)(v3 + 72) = 2;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_OWORD *)(v3 + 96) = xmmword_2448ECE80;
  *(_QWORD *)(v3 + 112) = 0xD000000000000011;
  *(_QWORD *)(v3 + 120) = 0x80000002448F9A50;
  *(_QWORD *)(v3 + 128) = 0x64656C65636E6163;
  *(_QWORD *)(v3 + 136) = 0xE800000000000000;
  *a1 = sub_2447E6A74;
  a1[1] = v1;
  a1[2] = (uint64_t (*)())v3;
  return swift_retain();
}

uint64_t sub_2447E6918(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t v10[2];
  char v11;
  __int128 v12;
  const char *v13;
  uint64_t v14;
  char v15;

  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEE4AF8];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v10[0] = (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFou"
                      "ndation/AutoCancelling.swift";
    v10[1] = 126;
    v11 = 2;
    v12 = xmmword_2448EE1A0;
    v13 = "projectedValue";
    v14 = 14;
    v15 = 2;
    swift_bridgeObjectRetain();
    v3 = (uint64_t *)(v1 + 48);
    do
    {
      v4 = (void (*)(uint64_t))*(v3 - 2);
      v5 = *v3;
      v6 = *(_QWORD *)(*v3 + 144);
      swift_retain();
      swift_retain();
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v6 + 76));
      sub_2447E5E3C((__int128 *)(v6 + 16), (uint64_t (*)(void))nullsub_1, v10, v5, (void (*)(uint64_t, _QWORD *))sub_2447E1AC8, &v9);
      os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 76));
      v7 = swift_release();
      if ((v9 & 1) == 0)
        v4(v7);
      swift_release();
      swift_release();
      v3 += 3;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_2447E6A74()
{
  uint64_t v0;

  return sub_2447E6918(v0);
}

uint64_t sub_2447E6A7C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_2447E6A8C(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 16) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for AutoCancelling()
{
  return objc_opt_self();
}

uint64_t method lookup function for AutoCancelling()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AutoCancelling.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_2447E6AF0()
{
  swift_release();
  return swift_deallocObject();
}

double sub_2447E6B14()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = sub_2447E6470(*(_QWORD *)(v0 + 16), (__int128 *)(v0 + 24), v0 + 88, &qword_25738B020, &qword_25738B028).n128_u64[0];
  return result;
}

double sub_2447E6B44()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = sub_2447E6470(*(_QWORD *)(v0 + 16), (__int128 *)(v0 + 24), v0 + 88, &qword_25738B030, &qword_25738B038).n128_u64[0];
  return result;
}

uint64_t sub_2447E6B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  if ((a10 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

double sub_2447E6BAC()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = sub_2447E6470(*(_QWORD *)(v0 + 16), (__int128 *)(v0 + 24), v0 + 88, &qword_25738B048, &qword_25738B050).n128_u64[0];
  return result;
}

uint64_t sub_2447E6BDC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x24951AC70](&unk_2448EE140, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t AnalyticsLogger.logEvent(identifierSuffix:makeFields:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;

  v10 = a3();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 8))(a1, a2, v10, a5, a6);
  return swift_bridgeObjectRelease();
}

uint64_t static AnalyticsFieldBuilder.buildBlock(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;

  v38 = *(_QWORD *)(a1 + 16);
  if (!v38)
    return MEMORY[0x24BEE4B00];
  v37 = a1 + 32;
  swift_bridgeObjectRetain();
  v1 = 0;
  v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  while (1)
  {
    v3 = *(_QWORD *)(v37 + 8 * v1);
    v41 = v1 + 1;
    swift_bridgeObjectRetain_n();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v46 = v2;
    v43 = v3 + 64;
    v5 = -1 << *(_BYTE *)(v3 + 32);
    v6 = -v5 < 64 ? ~(-1 << -(char)v5) : -1;
    v7 = v6 & *(_QWORD *)(v3 + 64);
    v8 = (unint64_t)(63 - v5) >> 6;
    swift_bridgeObjectRetain();
    v9 = 0;
    v42 = v8;
    v44 = v3;
    v39 = v3 + 112;
    v40 = v8 - 6;
    if (v7)
      break;
LABEL_11:
    v13 = v9 + 1;
    if (__OFADD__(v9, 1))
      goto LABEL_45;
    if (v13 < v42)
    {
      v14 = *(_QWORD *)(v43 + 8 * v13);
      v12 = v9 + 1;
      if (v14)
        goto LABEL_26;
      v12 = v9 + 2;
      if (v9 + 2 < v42)
      {
        v14 = *(_QWORD *)(v43 + 8 * v12);
        if (v14)
          goto LABEL_26;
        v12 = v9 + 3;
        if (v9 + 3 < v42)
        {
          v14 = *(_QWORD *)(v43 + 8 * v12);
          if (v14)
            goto LABEL_26;
          v12 = v9 + 4;
          if (v9 + 4 < v42)
          {
            v14 = *(_QWORD *)(v43 + 8 * v12);
            if (v14)
              goto LABEL_26;
            v12 = v9 + 5;
            if (v9 + 5 < v42)
            {
              v14 = *(_QWORD *)(v43 + 8 * v12);
              if (!v14)
              {
                v15 = v9;
                do
                {
                  if (v40 == v15)
                    goto LABEL_3;
                  v14 = *(_QWORD *)(v39 + 8 * v15++);
                }
                while (!v14);
                v12 = v15 + 5;
              }
LABEL_26:
              v45 = (v14 - 1) & v14;
              v11 = __clz(__rbit64(v14)) + (v12 << 6);
              goto LABEL_27;
            }
          }
        }
      }
    }
LABEL_3:
    swift_bridgeObjectRelease();
    sub_2447D1030();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v1 = v41;
    if (v41 == v38)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v2;
    }
  }
  while (1)
  {
    v45 = (v7 - 1) & v7;
    v11 = __clz(__rbit64(v7)) | (v9 << 6);
    v12 = v9;
LABEL_27:
    v16 = (uint64_t *)(*(_QWORD *)(v44 + 48) + 16 * v11);
    v17 = *v16;
    v18 = v16[1];
    v19 = *(_QWORD *)(v44 + 56) + 24 * v11;
    v20 = *(_QWORD *)v19;
    v21 = *(_QWORD *)(v19 + 8);
    v22 = *(_BYTE *)(v19 + 16);
    swift_bridgeObjectRetain();
    sub_2447C9254(v20, v21, v22);
    swift_bridgeObjectRetain();
    sub_2447C9254(v20, v21, v22);
    swift_bridgeObjectRelease();
    sub_2447E7490(v20, v21, v22);
    if (!v18)
      goto LABEL_3;
    v24 = sub_244828D0C(v17, v18);
    v25 = v2[2];
    v26 = (v23 & 1) == 0;
    v27 = v25 + v26;
    if (__OFADD__(v25, v26))
      break;
    v28 = v23;
    if (v2[3] >= v27)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v2 = v46;
        if ((v23 & 1) != 0)
          goto LABEL_9;
      }
      else
      {
        sub_24482D450();
        v2 = v46;
        if ((v28 & 1) != 0)
          goto LABEL_9;
      }
LABEL_35:
      v2[(v24 >> 6) + 8] |= 1 << v24;
      v31 = (uint64_t *)(v2[6] + 16 * v24);
      *v31 = v17;
      v31[1] = v18;
      v32 = v2[7] + 24 * v24;
      *(_QWORD *)v32 = v20;
      *(_QWORD *)(v32 + 8) = v21;
      *(_BYTE *)(v32 + 16) = v22;
      v33 = v2[2];
      v34 = __OFADD__(v33, 1);
      v35 = v33 + 1;
      if (v34)
        goto LABEL_44;
      v2[2] = v35;
      isUniquelyReferenced_nonNull_native = 1;
      v9 = v12;
      v7 = v45;
      if (!v45)
        goto LABEL_11;
    }
    else
    {
      sub_244829814(v27, isUniquelyReferenced_nonNull_native & 1);
      v29 = sub_244828D0C(v17, v18);
      if ((v28 & 1) != (v30 & 1))
        goto LABEL_46;
      v24 = v29;
      v2 = v46;
      if ((v28 & 1) == 0)
        goto LABEL_35;
LABEL_9:
      swift_bridgeObjectRelease();
      v10 = v2[7] + 24 * v24;
      sub_2447E7490(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16));
      *(_QWORD *)v10 = v20;
      *(_QWORD *)(v10 + 8) = v21;
      isUniquelyReferenced_nonNull_native = 1;
      v9 = v12;
      v7 = v45;
      *(_BYTE *)(v10 + 16) = v22;
      if (!v45)
        goto LABEL_11;
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  result = sub_2448EBC7C();
  __break(1u);
  return result;
}

uint64_t static AnalyticsFieldBuilder.buildArray(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;

  v38 = *(_QWORD *)(a1 + 16);
  if (!v38)
    return MEMORY[0x24BEE4B00];
  v37 = a1 + 32;
  swift_bridgeObjectRetain();
  v1 = 0;
  v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  while (1)
  {
    v3 = *(_QWORD *)(v37 + 8 * v1);
    v41 = v1 + 1;
    swift_bridgeObjectRetain_n();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v46 = v2;
    v43 = v3 + 64;
    v5 = -1 << *(_BYTE *)(v3 + 32);
    v6 = -v5 < 64 ? ~(-1 << -(char)v5) : -1;
    v7 = v6 & *(_QWORD *)(v3 + 64);
    v8 = (unint64_t)(63 - v5) >> 6;
    swift_bridgeObjectRetain();
    v9 = 0;
    v42 = v8;
    v44 = v3;
    v39 = v3 + 112;
    v40 = v8 - 6;
    if (v7)
      break;
LABEL_11:
    v13 = v9 + 1;
    if (__OFADD__(v9, 1))
      goto LABEL_45;
    if (v13 < v42)
    {
      v14 = *(_QWORD *)(v43 + 8 * v13);
      v12 = v9 + 1;
      if (v14)
        goto LABEL_26;
      v12 = v9 + 2;
      if (v9 + 2 < v42)
      {
        v14 = *(_QWORD *)(v43 + 8 * v12);
        if (v14)
          goto LABEL_26;
        v12 = v9 + 3;
        if (v9 + 3 < v42)
        {
          v14 = *(_QWORD *)(v43 + 8 * v12);
          if (v14)
            goto LABEL_26;
          v12 = v9 + 4;
          if (v9 + 4 < v42)
          {
            v14 = *(_QWORD *)(v43 + 8 * v12);
            if (v14)
              goto LABEL_26;
            v12 = v9 + 5;
            if (v9 + 5 < v42)
            {
              v14 = *(_QWORD *)(v43 + 8 * v12);
              if (!v14)
              {
                v15 = v9;
                do
                {
                  if (v40 == v15)
                    goto LABEL_3;
                  v14 = *(_QWORD *)(v39 + 8 * v15++);
                }
                while (!v14);
                v12 = v15 + 5;
              }
LABEL_26:
              v45 = (v14 - 1) & v14;
              v11 = __clz(__rbit64(v14)) + (v12 << 6);
              goto LABEL_27;
            }
          }
        }
      }
    }
LABEL_3:
    swift_bridgeObjectRelease();
    sub_2447D1030();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v1 = v41;
    if (v41 == v38)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v2;
    }
  }
  while (1)
  {
    v45 = (v7 - 1) & v7;
    v11 = __clz(__rbit64(v7)) | (v9 << 6);
    v12 = v9;
LABEL_27:
    v16 = (uint64_t *)(*(_QWORD *)(v44 + 48) + 16 * v11);
    v17 = *v16;
    v18 = v16[1];
    v19 = *(_QWORD *)(v44 + 56) + 24 * v11;
    v20 = *(_QWORD *)v19;
    v21 = *(_QWORD *)(v19 + 8);
    v22 = *(_BYTE *)(v19 + 16);
    swift_bridgeObjectRetain();
    sub_2447C9254(v20, v21, v22);
    swift_bridgeObjectRetain();
    sub_2447C9254(v20, v21, v22);
    swift_bridgeObjectRelease();
    sub_2447E7490(v20, v21, v22);
    if (!v18)
      goto LABEL_3;
    v24 = sub_244828D0C(v17, v18);
    v25 = v2[2];
    v26 = (v23 & 1) == 0;
    v27 = v25 + v26;
    if (__OFADD__(v25, v26))
      break;
    v28 = v23;
    if (v2[3] >= v27)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v2 = v46;
        if ((v23 & 1) != 0)
          goto LABEL_9;
      }
      else
      {
        sub_24482D450();
        v2 = v46;
        if ((v28 & 1) != 0)
          goto LABEL_9;
      }
LABEL_35:
      v2[(v24 >> 6) + 8] |= 1 << v24;
      v31 = (uint64_t *)(v2[6] + 16 * v24);
      *v31 = v17;
      v31[1] = v18;
      v32 = v2[7] + 24 * v24;
      *(_QWORD *)v32 = v20;
      *(_QWORD *)(v32 + 8) = v21;
      *(_BYTE *)(v32 + 16) = v22;
      v33 = v2[2];
      v34 = __OFADD__(v33, 1);
      v35 = v33 + 1;
      if (v34)
        goto LABEL_44;
      v2[2] = v35;
      isUniquelyReferenced_nonNull_native = 1;
      v9 = v12;
      v7 = v45;
      if (!v45)
        goto LABEL_11;
    }
    else
    {
      sub_244829814(v27, isUniquelyReferenced_nonNull_native & 1);
      v29 = sub_244828D0C(v17, v18);
      if ((v28 & 1) != (v30 & 1))
        goto LABEL_46;
      v24 = v29;
      v2 = v46;
      if ((v28 & 1) == 0)
        goto LABEL_35;
LABEL_9:
      swift_bridgeObjectRelease();
      v10 = v2[7] + 24 * v24;
      sub_2447E7490(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16));
      *(_QWORD *)v10 = v20;
      *(_QWORD *)(v10 + 8) = v21;
      isUniquelyReferenced_nonNull_native = 1;
      v9 = v12;
      v7 = v45;
      *(_BYTE *)(v10 + 16) = v22;
      if (!v45)
        goto LABEL_11;
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  result = sub_2448EBC7C();
  __break(1u);
  return result;
}

uint64_t sub_2447E7490(uint64_t result, unint64_t a2, char a3)
{
  if (a3 == 4)
    return sub_2447E74B0(result, a2);
  if (!a3)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_2447E74B0(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

unint64_t static AnalyticsFieldBuilder.buildExpression(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  char v11;

  __swift_instantiateConcreteTypeFromMangledName(qword_25738B058);
  inited = swift_initStackObject();
  v9 = inited;
  *(_OWORD *)(inited + 16) = xmmword_2448ECF10;
  *(_QWORD *)(inited + 32) = a1;
  *(_QWORD *)(inited + 40) = a2;
  if (a4)
    v10 = a3;
  else
    v10 = 0;
  if (a4)
    v11 = 0;
  else
    v11 = 5;
  *(_QWORD *)(inited + 48) = v10;
  *(_QWORD *)(inited + 56) = a4;
  *(_BYTE *)(inited + 64) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_2447C8758(v9);
}

unint64_t static AnalyticsFieldBuilder.buildExpression(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  char v11;

  __swift_instantiateConcreteTypeFromMangledName(qword_25738B058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2448ECF10;
  *(_QWORD *)(inited + 32) = a1;
  *(_QWORD *)(inited + 40) = a2;
  swift_bridgeObjectRetain();
  if ((a5 & 0x100) != 0)
  {
    v9 = 0;
    v10 = 0;
    v11 = 5;
  }
  else
  {
    v9 = sub_2448EB7D8();
    v11 = 0;
  }
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = v10;
  *(_BYTE *)(inited + 64) = v11;
  return sub_2447C8758(inited);
}

unint64_t static AnalyticsFieldBuilder.buildExpression(_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  int v6;
  uint64_t inited;
  uint64_t v8;
  char v9;

  v6 = a3;
  __swift_instantiateConcreteTypeFromMangledName(qword_25738B058);
  inited = swift_initStackObject();
  v8 = inited;
  *(_OWORD *)(inited + 16) = xmmword_2448ECF10;
  *(_QWORD *)(inited + 32) = a1;
  *(_QWORD *)(inited + 40) = a2;
  if (v6 == 2)
    v9 = 5;
  else
    v9 = 1;
  *(_QWORD *)(inited + 48) = a3 & 1;
  *(_QWORD *)(inited + 56) = 0;
  *(_BYTE *)(inited + 64) = v9;
  swift_bridgeObjectRetain();
  return sub_2447C8758(v8);
}

unint64_t static AnalyticsFieldBuilder.buildExpression(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  char v11;

  __swift_instantiateConcreteTypeFromMangledName(qword_25738B058);
  inited = swift_initStackObject();
  v9 = inited;
  *(_OWORD *)(inited + 16) = xmmword_2448ECF10;
  *(_QWORD *)(inited + 32) = a1;
  *(_QWORD *)(inited + 40) = a2;
  if ((a4 & 1) != 0)
    v10 = 0;
  else
    v10 = a3;
  if ((a4 & 1) != 0)
    v11 = 5;
  else
    v11 = 2;
  *(_QWORD *)(inited + 48) = v10;
  *(_QWORD *)(inited + 56) = 0;
  *(_BYTE *)(inited + 64) = v11;
  swift_bridgeObjectRetain();
  return sub_2447C8758(v9);
}

{
  unint64_t result;
  uint64_t v9;
  char v10;

  __swift_instantiateConcreteTypeFromMangledName(qword_25738B058);
  result = swift_initStackObject();
  v9 = result;
  *(_OWORD *)(result + 16) = xmmword_2448ECF10;
  *(_QWORD *)(result + 32) = a1;
  *(_QWORD *)(result + 40) = a2;
  if ((a4 & 1) != 0)
  {
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    v10 = 5;
    goto LABEL_5;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    *(_QWORD *)(result + 48) = a3;
    *(_QWORD *)(result + 56) = 0;
    v10 = 2;
LABEL_5:
    *(_BYTE *)(result + 64) = v10;
    swift_bridgeObjectRetain();
    return sub_2447C8758(v9);
  }
  __break(1u);
  return result;
}

{
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  char v11;

  __swift_instantiateConcreteTypeFromMangledName(qword_25738B058);
  inited = swift_initStackObject();
  v9 = inited;
  *(_OWORD *)(inited + 16) = xmmword_2448ECF10;
  *(_QWORD *)(inited + 32) = a1;
  *(_QWORD *)(inited + 40) = a2;
  if ((a4 & 1) != 0)
    v10 = 0;
  else
    v10 = a3;
  if ((a4 & 1) != 0)
    v11 = 5;
  else
    v11 = 3;
  *(_QWORD *)(inited + 48) = v10;
  *(_QWORD *)(inited + 56) = 0;
  *(_BYTE *)(inited + 64) = v11;
  swift_bridgeObjectRetain();
  return sub_2447C8758(v9);
}

unint64_t static AnalyticsFieldBuilder.buildExpression(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t inited;
  uint64_t v9;
  unint64_t v10;
  char v11;

  __swift_instantiateConcreteTypeFromMangledName(qword_25738B058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2448ECF10;
  swift_bridgeObjectRetain();
  sub_2447E7A94(a3, a4);
  sub_2447E7AA8(a3, a4);
  *(_QWORD *)(inited + 32) = a1;
  *(_QWORD *)(inited + 40) = a2;
  if (a4 >> 60 == 15)
    v9 = 0;
  else
    v9 = a3;
  if (a4 >> 60 == 15)
    v10 = 0;
  else
    v10 = a4;
  if (a4 >> 60 == 15)
    v11 = 5;
  else
    v11 = 4;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = v10;
  *(_BYTE *)(inited + 64) = v11;
  sub_2447E7A94(a3, a4);
  return sub_2447C8758(inited);
}

unint64_t static AnalyticsFieldBuilder.buildExpression(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  uint64_t inited;

  __swift_instantiateConcreteTypeFromMangledName(qword_25738B058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2448ECF10;
  swift_bridgeObjectRetain();
  sub_2447C9254(a3, a4, a5);
  sub_2447E7490(a3, a4, a5);
  *(_QWORD *)(inited + 32) = a1;
  *(_QWORD *)(inited + 40) = a2;
  swift_bridgeObjectRetain();
  sub_2447C9254(a3, a4, a5);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 48) = a3;
  *(_QWORD *)(inited + 56) = a4;
  *(_BYTE *)(inited + 64) = a5;
  return sub_2447C8758(inited);
}

unint64_t static AnalyticsFieldBuilder.buildExpression<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t inited;
  uint64_t v5;

  __swift_instantiateConcreteTypeFromMangledName(qword_25738B058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2448ECF10;
  *(_QWORD *)(inited + 32) = a1;
  *(_QWORD *)(inited + 40) = a2;
  swift_bridgeObjectRetain();
  *(_QWORD *)(inited + 48) = sub_2448EBDB4();
  *(_QWORD *)(inited + 56) = v5;
  *(_BYTE *)(inited + 64) = 0;
  return sub_2447C8758(inited);
}

uint64_t sub_2447E7A94(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_2447C9274(a1, a2);
  return a1;
}

uint64_t sub_2447E7AA8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_2447E74B0(a1, a2);
  return a1;
}

uint64_t dispatch thunk of AnalyticsLogger.logEvent(identifierSuffix:fields:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of AnalyticsLogger.hints.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AnalyticsLogger.hints.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of AnalyticsLogger.hints.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

ValueMetadata *type metadata accessor for AnalyticsFieldBuilder()
{
  return &type metadata for AnalyticsFieldBuilder;
}

uint64_t Ref.instance.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t Ref.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t Ref.hash(into:)()
{
  return sub_2448EBD0C();
}

BOOL static Ref.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t Ref.hashValue.getter()
{
  sub_2448EBD00();
  sub_2448EBD0C();
  return sub_2448EBD3C();
}

uint64_t sub_2447E7B84()
{
  sub_2448EBD00();
  Ref.hash(into:)();
  return sub_2448EBD3C();
}

uint64_t Set.insert<A>(_:)()
{
  char v0;

  swift_unknownObjectRetain();
  v0 = sub_2448EB10C();
  swift_unknownObjectRelease();
  return v0 & 1;
}

uint64_t Set.remove<A>(_:)()
{
  uint64_t v1;

  swift_unknownObjectRetain();
  sub_2448EB118();
  swift_unknownObjectRelease();
  return v1;
}

uint64_t Set.contains<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;

  v4 = type metadata accessor for Ref(0, a3, a3, a4);
  swift_unknownObjectRetain();
  MEMORY[0x24951AC70](&protocol conformance descriptor for Ref<A>, v4);
  v5 = sub_2448EB130();
  swift_unknownObjectRelease();
  return v5 & 1;
}

uint64_t type metadata accessor for Ref(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Ref);
}

uint64_t Set.forEach<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for Ref(255, a4, a3, a4);
  MEMORY[0x24951AC70](&protocol conformance descriptor for Ref<A>, v4);
  v5 = sub_2448EB160();
  MEMORY[0x24951AC70](MEMORY[0x24BEE1718], v5);
  return sub_2448EAD70();
}

uint64_t sub_2447E7D84(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 24))(*a1);
}

void sub_2447E7DB0()
{
  JUMPOUT(0x24951AC70);
}

id NSUndoManager.withGrouping<A>(perform:)(void (*a1)(id))
{
  void *v1;

  a1(objc_msgSend(v1, sel_beginUndoGrouping));
  return objc_msgSend(v1, sel_endUndoGrouping);
}

uint64_t DepthFirstRecursiveIterator.init(rootElements:dataSource:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t RecursiveIterator;
  uint64_t result;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a2;
  v23 = a3;
  v10 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v16 = (char *)&v22 - v15;
  RecursiveIterator = type metadata accessor for DepthFirstRecursiveIterator(0, a4, a5, v17);
  *(_QWORD *)(a6 + *(int *)(RecursiveIterator + 36)) = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a4);
  sub_2448EACB0();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, a4);
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(a6, v16, AssociatedTypeWitness);
  v20 = (_QWORD *)(a6 + *(int *)(RecursiveIterator + 40));
  v21 = v23;
  *v20 = v22;
  v20[1] = v21;
  return result;
}

uint64_t type metadata accessor for DepthFirstRecursiveIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DepthFirstRecursiveIterator);
}

uint64_t DepthFirstRecursiveIterator.next()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  int v31;
  uint64_t (*v32)(char *, uint64_t);
  uint64_t result;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = sub_2448EB508();
  v53 = *(_QWORD *)(v6 - 8);
  v54 = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v59 = (char *)&v51 - v8;
  v57 = *(_QWORD *)(a1 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v56 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v52 = (char *)&v51 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v55 = (char *)&v51 - v13;
  v14 = *(_QWORD *)(a1 + 24);
  v64 = v5;
  v65 = v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v58 = (char *)&v51 - v17;
  v18 = sub_2448EB508();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v20);
  v25 = (char *)&v51 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v51 - v26;
  v61 = a1;
  v51 = *(int *)(a1 + 36);
  v28 = *(_QWORD *)(v2 + v51);
  v66 = v2;
  if (v28)
    sub_2448EB718();
  else
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(a2, 1, 1, AssociatedTypeWitness);
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v62 = a2;
  v29(v27, (uint64_t)a2, v18);
  v60 = v16;
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v63 = AssociatedTypeWitness;
  v31 = v30(v27, 1, AssociatedTypeWitness);
  v32 = *(uint64_t (**)(char *, uint64_t))(v19 + 8);
  result = v32(v27, v18);
  if (v31 == 1)
  {
    v34 = v64;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    sub_2448EB58C();
    v35 = v62;
    v32(v62, v18);
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v35, v25, v18);
    v29(v22, (uint64_t)v35, v18);
    v36 = v63;
    if (v30(v22, 1, v63) == 1)
    {
      return v32(v22, v18);
    }
    else
    {
      v37 = v60;
      v38 = v58;
      (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v58, v22, v36);
      v39 = v61;
      v40 = v66 + *(int *)(v61 + 40);
      v41 = *(void (**)(char *))v40;
      v42 = *(_QWORD *)(v40 + 8);
      v43 = v59;
      (*(void (**)(char *))v40)(v38);
      v44 = *(_QWORD *)(v34 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v43, 1, v34) == 1)
      {
        (*(void (**)(char *, uint64_t))(v53 + 8))(v43, v54);
        return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v38, v36);
      }
      else
      {
        v45 = v52;
        Sequence.depthFirstRecursiveIterator(dataSource:)((uint64_t)v41, v42, v34, v65);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v43, v34);
        v46 = v57;
        v47 = v55;
        (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v55, v45, v39);
        (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v56, v47, v39);
        MEMORY[0x24951AC70](&protocol conformance descriptor for DepthFirstRecursiveIterator<A>, v39);
        v48 = sub_2448EB724();
        (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v39);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v36);
        v49 = v51;
        v50 = v66;
        result = swift_release();
        *(_QWORD *)(v50 + v49) = v48;
      }
    }
  }
  return result;
}

uint64_t Sequence.depthFirstRecursiveIterator(dataSource:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2447E8AD4(a1, a2, a3, a4, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))DepthFirstRecursiveIterator.init(rootElements:dataSource:));
}

uint64_t BreadthFirstRecursiveIterator.init(rootElements:dataSource:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t RecursiveIterator;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a2;
  v26 = a3;
  v24 = a1;
  v9 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v15 = (char *)&v23 - v14;
  RecursiveIterator = type metadata accessor for BreadthFirstRecursiveIterator(0, a4, a5, v16);
  v18 = *(int *)(RecursiveIterator + 36);
  *(_QWORD *)(a6 + v18) = sub_2448EAE54();
  v19 = v24;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v24, a4);
  sub_2448EACB0();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v19, a4);
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a6, v15, AssociatedTypeWitness);
  v21 = (_QWORD *)(a6 + *(int *)(RecursiveIterator + 40));
  v22 = v26;
  *v21 = v25;
  v21[1] = v22;
  return result;
}

uint64_t type metadata accessor for BreadthFirstRecursiveIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BreadthFirstRecursiveIterator);
}

uint64_t BreadthFirstRecursiveIterator.next()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t AssociatedConformanceWitness;
  char *v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  int v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(char *, uint64_t, uint64_t);
  void (*v70)(char *, uint64_t, uint64_t);
  char *v71;
  uint64_t v72;

  v71 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = sub_2448EB508();
  v54 = *(_QWORD *)(v5 - 8);
  v55 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v56 = (char *)&v50 - v6;
  v67 = a1;
  v7 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v60 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v58 = (char *)&v50 - v9;
  v10 = swift_getAssociatedTypeWitness();
  v11 = sub_2448EB508();
  v65 = *(_QWORD *)(v11 - 8);
  v66 = v11;
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v50 - v13;
  v15 = *(_QWORD *)(v10 - 8);
  v16 = MEMORY[0x24BDAC7A8](v12);
  v52 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v50 = (char *)&v50 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v51 = (char *)&v50 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v64 = (char *)&v50 - v22;
  v23 = sub_2448EB508();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = MEMORY[0x24BDAC7A8](v23);
  v59 = (char *)&v50 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v62 = (char *)&v50 - v28;
  MEMORY[0x24BDAC7A8](v27);
  v30 = (char *)&v50 - v29;
  v53 = v7;
  v57 = v4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v32 = v71;
  v61 = AssociatedConformanceWitness;
  sub_2448EB58C();
  v70 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  v70(v30, (uint64_t)v32, v23);
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v60 + 48);
  v68 = AssociatedTypeWitness;
  v69 = v33;
  v34 = v33(v30, 1, AssociatedTypeWitness);
  v63 = v24;
  v35 = *(void (**)(char *, uint64_t))(v24 + 8);
  while (v34 == 1)
  {
    v35(v30, v23);
    v38 = v2;
    v72 = *(_QWORD *)(v2 + *(int *)(v67 + 36));
    v39 = sub_2448EAEE4();
    MEMORY[0x24951AC70](MEMORY[0x24BEE12E0], v39);
    if ((sub_2448EB28C() & 1) != 0)
      goto LABEL_9;
    Array.popFirst()(v39, (uint64_t)v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v10) == 1)
    {
      (*(void (**)(char *, uint64_t))(v65 + 8))(v14, v66);
      v36 = v68;
      v37 = v71;
    }
    else
    {
      v40 = v64;
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v64, v14, v10);
      (*(void (**)(uint64_t, char *, uint64_t))(v15 + 24))(v2, v40, v10);
      v41 = v62;
      sub_2448EB58C();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v40, v10);
      v37 = v71;
      v35(v71, v23);
      (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v37, v41, v23);
      v36 = v68;
    }
    v70(v30, (uint64_t)v37, v23);
    v34 = v69(v30, 1, v36);
  }
  v38 = v2;
  v35(v30, v23);
LABEL_9:
  v42 = v59;
  v70(v59, (uint64_t)v71, v23);
  v43 = v68;
  if (v69(v42, 1, v68) == 1)
    return ((uint64_t (*)(char *, uint64_t))v35)(v42, v23);
  v45 = v60;
  v46 = v58;
  (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v58, v42, v43);
  v47 = v56;
  (*(void (**)(char *))(v38 + *(int *)(v67 + 40)))(v46);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 48))(v47, 1, v57) == 1)
  {
    (*(void (**)(char *, uint64_t))(v54 + 8))(v47, v55);
    return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v46, v43);
  }
  else
  {
    v48 = v50;
    sub_2448EACB0();
    v49 = v51;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v51, v48, v10);
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v52, v49, v10);
    sub_2448EAEE4();
    sub_2448EAE9C();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v49, v10);
    return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v46, v43);
  }
}

uint64_t Sequence.breadthFirstRecursiveIterator(dataSource:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2447E8AD4(a1, a2, a3, a4, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))BreadthFirstRecursiveIterator.init(rootElements:dataSource:));
}

uint64_t sub_2447E8AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v12, v5);
  swift_retain();
  return a5(v12, a1, a2, a3, a4);
}

uint64_t sub_2447E8B80()
{
  return sub_2447E9100();
}

_QWORD *sub_2447E8B8C(_QWORD *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *a1 = v9;
    a1 = (_QWORD *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    v10 = (_QWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    *v10 = *v11;
    v12 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = v12[1];
    v14 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v14 = *v12;
    v14[1] = v13;
    swift_retain();
  }
  swift_retain();
  return a1;
}

uint64_t sub_2447E8C78(uint64_t a1, uint64_t a2)
{
  return sub_2447E9288(a1, a2, (void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_2447E8C84(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_2447E8D20(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *v7 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v10 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 8);
  *v10 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
  v10[1] = v11;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_2447E8DD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2447E94EC(a1, a2, a3, (void (*)(uint64_t))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_2447E8DE0(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 < a2)
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    __asm { BR              X15 }
  }
  if (v5 >= 0x7FFFFFFF)
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  v12 = *(_QWORD *)((((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

void sub_2447E8F38(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v10 = 0;
    if (a2 <= v7)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v8 = a3 - v7 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v7)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v11 = ~v7 + a2;
    bzero(a1, ((((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_2447E9054()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x2447E90D8);
}

void sub_2447E905C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x2447E9064);
  JUMPOUT(0x2447E90D8);
}

void sub_2447E90B0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x2447E90D8);
}

void sub_2447E90B8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x2447E90D8);
}

uint64_t sub_2447E90C0@<X0>(unsigned int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v3 + v5) = 0;
  if (!(_DWORD)v4)
    JUMPOUT(0x2447E90D8);
  if (a1 < 0x7FFFFFFF)
  {
    if ((v4 & 0x80000000) == 0)
      JUMPOUT(0x2447E90D4);
    JUMPOUT(0x2447E90CCLL);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(v3, v4);
}

uint64_t sub_2447E90F0()
{
  return sub_2447E9100();
}

uint64_t sub_2447E9100()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_2447E9190(_QWORD *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *a1 = v9;
    a1 = (_QWORD *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    v10 = (_QWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    *v10 = *v11;
    v12 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = v12[1];
    v14 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v14 = *v12;
    v14[1] = v13;
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return a1;
}

uint64_t sub_2447E927C(uint64_t a1, uint64_t a2)
{
  return sub_2447E9288(a1, a2, (void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t sub_2447E9288(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, AssociatedTypeWitness);
  a3(*(_QWORD *)((a1 + *(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8));
  return swift_release();
}

uint64_t sub_2447E9304(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_2447E93A0(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *v7 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 8);
  *v10 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
  v10[1] = v11;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_2447E9450(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_OWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_2447E94E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2447E94EC(a1, a2, a3, (void (*)(uint64_t))MEMORY[0x24BEE4BC0]);
}

uint64_t sub_2447E94EC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(a1, a2, AssociatedTypeWitness);
  v9 = *(_QWORD *)(v8 + 64) + 7;
  v10 = (uint64_t *)((v9 + a1) & 0xFFFFFFFFFFFFFFF8);
  v11 = (uint64_t *)((v9 + a2) & 0xFFFFFFFFFFFFFFF8);
  v12 = *v10;
  *v10 = *v11;
  a4(v12);
  *(_OWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_2447E9590(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 < a2)
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    __asm { BR              X15 }
  }
  if (v5 >= 0x7FFFFFFF)
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

void sub_2447E96E0(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v10 = 0;
    if (a2 <= v7)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v8 = a3 - v7 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v7)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v11 = ~v7 + a2;
    bzero(a1, ((((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_2447E97FC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x2447E9874);
}

void sub_2447E9804()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x2447E980CLL);
  JUMPOUT(0x2447E9874);
}

void sub_2447E9850()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x2447E9874);
}

void sub_2447E9858()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x2447E9874);
}

uint64_t sub_2447E9860@<X0>(unsigned int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v3 + v5) = 0;
  if (!(_DWORD)v4)
    JUMPOUT(0x2447E9874);
  if (a1 < 0x7FFFFFFF)
  {
    if ((v4 & 0x80000000) == 0)
      JUMPOUT(0x2447E9870);
    JUMPOUT(0x2447E986CLL);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(v3, v4);
}

uint64_t Future.__allocating_init(dsoHandle:file:line:column:function:callback:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, void (*a10)(uint64_t), uint64_t a11)
{
  return sub_2447EB460(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_2447E98BC(__int128 *a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v3;
  char v4;
  char v5;
  __int128 v7;
  char v8;
  __int128 v9;
  __int128 v10;
  char v11;
  uint64_t v12;

  v4 = *((_BYTE *)a1 + 16);
  v5 = *((_BYTE *)a1 + 56);
  v7 = *a1;
  v8 = v4;
  v9 = *(__int128 *)((char *)a1 + 24);
  v10 = *(__int128 *)((char *)a1 + 40);
  v11 = v5;
  sub_2447E991C((uint64_t)&v7, a2, a3, v3, (uint64_t)&v12);
  return v12;
}

uint64_t sub_2447E991C@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t);
  _QWORD v30[2];
  char v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v28 = a3;
  v29 = a2;
  v27 = a5;
  v6 = *(_QWORD *)(a4 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)v7;
  v11 = *(_QWORD *)(v7 + 8);
  v12 = *(_BYTE *)(v7 + 16);
  v26 = *(_OWORD *)(v7 + 24);
  v13 = *(_QWORD *)(v7 + 40);
  v14 = *(_QWORD *)(v7 + 48);
  v15 = *(_BYTE *)(v7 + 56);
  type metadata accessor for Future(0, v18, v16, v17);
  v30[0] = v10;
  v30[1] = v11;
  v31 = v12;
  v32 = v26;
  v33 = v13;
  v34 = v14;
  v35 = v15;
  v22 = sub_2447E9A34((uint64_t)v30, v19, v20, v21);
  v24 = v23;
  v30[0] = v22;
  swift_retain();
  swift_dynamicCast();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v27, v9, a4);
  v29(v24);
  swift_release();
  return swift_release();
}

uint64_t sub_2447E9A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  uint64_t v20[2];
  char v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  v19 = *(_OWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_BYTE *)(a1 + 56);
  v11 = *(_QWORD *)(v4 + 80);
  type metadata accessor for PromiseFuture(0, v11, a3, a4);
  v20[0] = v5;
  v20[1] = v6;
  v21 = v7;
  v22 = v19;
  v23 = v8;
  v24 = v9;
  v25 = v10;
  swift_allocObject();
  v15 = sub_2447E9BF8(v20, v12, v13, v14);
  type metadata accessor for Promise(0, v11, v16, v17);
  *(_QWORD *)(swift_allocObject() + 16) = v15;
  return swift_retain();
}

uint64_t static Future.create(dsoHandle:file:line:column:function:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, void (*a10)(uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v13[0] = a2;
  v13[1] = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  v18 = a8;
  v19 = a9;
  v10 = sub_2447E9A34((uint64_t)v13, a2, a3, a4);
  a10(v11);
  swift_release();
  return v10;
}

uint64_t static Future.create(dsoHandle:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_2447EB4A0(a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_2447E9B90(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_allocObject();
  return sub_2447E9BF8(a1, v2, v3, v4);
}

uint64_t sub_2447E9BC8(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t sub_2447E9BF8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  _QWORD v26[2];
  char v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v6 = *(_QWORD *)(*v4 + 200);
  v7 = type metadata accessor for FutureState(0, v6, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v23 - v9;
  v11 = *a1;
  v12 = a1[1];
  v13 = *((_BYTE *)a1 + 16);
  v25 = *(_OWORD *)(a1 + 3);
  v14 = a1[5];
  v24 = a1[6];
  HIDWORD(v23) = *((unsigned __int8 *)a1 + 56);
  v17 = type metadata accessor for FutureTermination(0, v6, v15, v16);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v10, 1, 1, v17);
  swift_retain();
  v18 = sub_24481320C(v10, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v4[13] = v18;
  swift_release();
  v26[0] = v11;
  v26[1] = v12;
  v27 = v13;
  v28 = v25;
  v29 = v14;
  v30 = v24;
  v31 = BYTE4(v23);
  return sub_2448D24B4((uint64_t)v26, v19, v20, v21);
}

uint64_t sub_2447E9D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v6 = type metadata accessor for FutureTermination(0, *(_QWORD *)(*(_QWORD *)v4 + 200), a3, a4);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v15 - v8;
  LOBYTE(v8) = *(_BYTE *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 56);
  *(_OWORD *)v9 = *(_OWORD *)a1;
  v9[16] = v8;
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v9 + 40) = *(_OWORD *)(a1 + 40);
  v9[56] = v10;
  swift_storeEnumTagMultiPayload();
  sub_2447EA030((uint64_t)v9, v11, v12, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_2447E9DDC(uint64_t a1)
{
  return sub_2447E9F28(a1, &qword_25738A618, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *, _BYTE *))sub_2447EB27C, (uint64_t (*)(uint64_t *))sub_2447D1F5C);
}

uint64_t sub_2447E9DF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_QWORD *)(v1 + 104);
  v4 = v3 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v5);
  sub_2448B7874(v4, a1, &v7);
  os_unfair_lock_unlock(v5);
  LOBYTE(v4) = v7;
  result = swift_release();
  if ((v4 & 1) != 0)
    return sub_2447D2178(a1);
  return result;
}

uint64_t sub_2447E9F0C(uint64_t a1)
{
  return sub_2447E9F28(a1, &qword_25738A600, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *, _BYTE *))sub_2448E30CC, (uint64_t (*)(uint64_t *))sub_2447D2338);
}

uint64_t sub_2447E9F28(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t *__return_ptr, os_unfair_lock_s *, _BYTE *), uint64_t (*a4)(uint64_t *))
{
  uint64_t v4;
  os_unfair_lock_s *v8;
  char v9;
  uint64_t result;
  _BYTE v11[64];
  uint64_t v12;

  sub_2447D3184(a1, (uint64_t)v11, a2);
  v8 = *(os_unfair_lock_s **)(v4 + 104);
  swift_retain();
  os_unfair_lock_lock(v8 + 19);
  a3(&v12, v8 + 4, v11);
  os_unfair_lock_unlock(v8 + 19);
  v9 = v12;
  result = swift_release();
  if ((v9 & 1) != 0)
  {
    sub_2447D3184((uint64_t)v11, (uint64_t)&v12, a2);
    return a4(&v12);
  }
  return result;
}

uint64_t sub_2447EA030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2447EA234(a1, a2, a3, a4);
}

uint64_t sub_2447EA0A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = type metadata accessor for FutureTermination(0, *(_QWORD *)(*(_QWORD *)v4 + 200), a3, a4);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (uint64_t *)((char *)&v14 - v7);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v9 = sub_2448EBD48();
  sub_2448E8090(v9, v8);
  sub_2447EA030((uint64_t)v8, v10, v11, v12);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_2447EA160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = type metadata accessor for FutureTermination(0, *(_QWORD *)(*(_QWORD *)v4 + 200), a3, a4);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (uint64_t *)((char *)&v14 - v7);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v9 = sub_2448EBD48();
  sub_2448E8090(v9, v8);
  sub_2447EA234((uint64_t)v8, v10, v11, v12);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_2447EA234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v7 = *v4;
  v14 = v4[13];
  v12 = *(_QWORD *)(v7 + 200);
  v13 = a1;
  type metadata accessor for FutureState(255, v12, a3, a4);
  v8 = sub_2448EA5D8();
  swift_retain();
  v9 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v8);
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_2447B9000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/PromiseFuture.swift", 125, 2, 136, 51, (uint64_t)"tryTransition(to:)", 18, 2, (uint64_t)sub_2447EB6F0, (uint64_t)v11, v8, MEMORY[0x24BEE1328], v9);
  result = swift_release();
  if (!v5 && v15 == 1)
    return sub_2448D2CA4(a1);
  return result;
}

uint64_t sub_2447EA344@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t result;
  char *v24;
  _BYTE *v25;
  BOOL v26;
  void (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  char *v29;
  BOOL v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  _BYTE *v44;
  uint64_t v45;

  v45 = a2;
  v44 = a5;
  v7 = type metadata accessor for FutureTermination(0, a3, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v41 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v42 = (char *)&v40 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v43 = (char *)&v40 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v40 - v15;
  v19 = type metadata accessor for FutureState(0, a3, v17, v18);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v40 - v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))((char *)&v40 - v21, a1, v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v22, 1, v7) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(a1, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a1, v45, v7);
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    *v44 = 1;
    return result;
  }
  v24 = v42;
  v40 = a3;
  v25 = v44;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v16, v22, v7);
  v26 = FutureTermination.isCompleted.getter(v7);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v27(v43, v45, v7);
  v28 = v16;
  if (v26)
  {
    v29 = v43;
    v30 = FutureTermination.isCompleted.getter(v7);
    v31 = *(void (**)(char *, uint64_t))(v8 + 8);
    v31(v29, v7);
    if (v30)
    {
      v32 = (uint64_t)v24;
      v27(v24, (uint64_t)v28, v7);
      v33 = (uint64_t)v41;
      v27(v41, v45, v7);
      v34 = v40;
      v37 = type metadata accessor for PromiseFuture.TransitionError(0, v40, v35, v36);
      MEMORY[0x24951AC70](&unk_2448EE5B8, v37);
      swift_allocError();
      sub_2447EA610(v32, v33, v34, v39, v38);
      swift_willThrow();
      return ((uint64_t (*)(char *, uint64_t))v31)(v28, v7);
    }
  }
  else
  {
    v31 = *(void (**)(char *, uint64_t))(v8 + 8);
    v31(v43, v7);
  }
  result = ((uint64_t (*)(char *, uint64_t))v31)(v28, v7);
  *v25 = 0;
  return result;
}

uint64_t sub_2447EA610@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v9 = type metadata accessor for FutureTermination(0, a3, a3, a4);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v14(a5, a1, v9);
  v12 = a5 + *(int *)(type metadata accessor for PromiseFuture.TransitionError(0, a3, v10, v11) + 28);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v14)(v12, a2, v9);
}

uint64_t sub_2447EA6A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_2448EB79C();
  sub_2448EABC0();
  v4 = type metadata accessor for FutureTermination(0, *(_QWORD *)(a1 + 16), v2, v3);
  MEMORY[0x24951AC70](&protocol conformance descriptor for FutureTermination<A>, v4);
  sub_2448EBBB0();
  sub_2448EABC0();
  sub_2448EBBB0();
  sub_2448EABC0();
  return 0;
}

uint64_t sub_2447EA790()
{
  return swift_release();
}

uint64_t sub_2447EA798()
{
  Future.deinit();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t Promise.track(future:on:)(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(v2 + 16) != result)
  {
    v3 = result;
    v4 = a2[1];
    v6 = *a2;
    v5 = v6;
    v7 = v4;
    swift_retain();
    Future.observeCompletion(on:_:)((uint64_t)&v6, (uint64_t)sub_2447EB4D4, v2);
    swift_release();
    v6 = v5;
    v7 = v4;
    swift_retain();
    Future.observeCancelation(on:_:)((uint64_t)&v6, (uint64_t)sub_2447EB4F4, v2);
    swift_release();
    v6 = v5;
    v7 = v4;
    swift_retain();
    Future.observeCancelation(on:_:)((uint64_t)&v6, (uint64_t)sub_2447EB4FC, v3);
    return swift_release();
  }
  return result;
}

uint64_t Promise.fulfill(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2447EA0A4(a1, a2, a3, a4);
}

uint64_t sub_2447EA8B4(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  char v5;
  __int128 v7;
  char v8;
  __int128 v9;
  __int128 v10;
  char v11;

  v4 = *((_BYTE *)a1 + 16);
  v5 = *((_BYTE *)a1 + 56);
  v7 = *a1;
  v8 = v4;
  v9 = *(__int128 *)((char *)a1 + 24);
  v10 = *(__int128 *)((char *)a1 + 40);
  v11 = v5;
  return sub_2447E9D20((uint64_t)&v7, a2, a3, a4);
}

uint64_t Promise.cancel(callsite:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  char v5;
  __int128 v7;
  char v8;
  __int128 v9;
  __int128 v10;
  char v11;

  v4 = *((_BYTE *)a1 + 16);
  v5 = *((_BYTE *)a1 + 56);
  v7 = *a1;
  v8 = v4;
  v9 = *(__int128 *)((char *)a1 + 24);
  v10 = *(__int128 *)((char *)a1 + 40);
  v11 = v5;
  return sub_2447E9D20((uint64_t)&v7, a2, a3, a4);
}

uint64_t Promise.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t Promise.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t Promise.observeCancelation(on:_:)(__int128 *a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;

  v4 = *a1;
  return Future.observeCancelation(on:_:)((uint64_t)&v4, a2, a3);
}

uint64_t Promise.cancel(dsoHandle:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_2447EB54C(a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t Promise.succeed(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v4 = sub_2448EBD48();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v12 - v6;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))((char *)&v12 - v6, a1, v3);
  swift_storeEnumTagMultiPayload();
  sub_2447EA0A4((uint64_t)v7, v8, v9, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Promise.fail(with:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v2 = sub_2448EBD48();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v11 - v4;
  *(uint64_t *)((char *)&v11 - v4) = (uint64_t)a1;
  swift_storeEnumTagMultiPayload();
  v6 = a1;
  sub_2447EA0A4((uint64_t)v5, v7, v8, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t Promise<A>.succeed()()
{
  _OWORD v1[4];

  memset(v1, 0, 58);
  return sub_2447E9F28((uint64_t)v1, &qword_25738A618, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *, _BYTE *))sub_2447EB27C, (uint64_t (*)(uint64_t *))sub_2447D1F5C);
}

uint64_t Promise<A>.trySucceed()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  BOOL v5;
  _OWORD v6[4];
  _BYTE v7[64];
  BOOL v8;

  v2 = *(_QWORD *)(v0 + 16);
  memset(v6, 0, 58);
  v3 = *(_QWORD *)(v2 + 104);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 76));
  sub_2447EB27C((_QWORD *)(v3 + 16), (uint64_t)v6, &v8);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 76));
  if (v1)
    return swift_release();
  v5 = v8;
  result = swift_release();
  if (v5)
  {
    sub_2447D3184((uint64_t)v6, (uint64_t)v7, &qword_25738A618);
    return sub_2447D1F5C((uint64_t)v7);
  }
  return result;
}

uint64_t Promise.trySucceed(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v4 = sub_2448EBD48();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v12 - v6;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))((char *)v12 - v6, a1, v3);
  swift_storeEnumTagMultiPayload();
  sub_2447EA160((uint64_t)v7, v8, v9, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

BOOL Promise.isCanceled.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2448D2844(a1, a2, a3, a4);
}

uint64_t Promise.tryFulfill(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2447EA160(a1, a2, a3, a4);
}

uint64_t Promise.tryFail(with:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v2 = sub_2448EBD48();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v11 - v4;
  *(uint64_t *)((char *)&v11 - v4) = (uint64_t)a1;
  swift_storeEnumTagMultiPayload();
  v6 = a1;
  sub_2447EA160((uint64_t)v5, v7, v8, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t Promise.fulfill(on:handler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  _QWORD v18[2];
  _QWORD aBlock[6];

  v4 = v3;
  v18[0] = a1;
  v7 = sub_2448EA704();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_2448EA734();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v4;
  v15[3] = a2;
  v15[4] = a3;
  aBlock[4] = sub_2447EB5B8;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2447EB164;
  aBlock[3] = &block_descriptor;
  v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_2448EA71C();
  v18[1] = MEMORY[0x24BEE4AF8];
  sub_2447EB5DC();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
  sub_2447EB714(qword_25738B1F0, &qword_25738B1E8, MEMORY[0x24BEE12C8]);
  sub_2448EB6C4();
  MEMORY[0x249519C08](0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t sub_2447EB074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v6 = sub_2448EBD48();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = &v14[-v8];
  v15 = v5;
  v16 = a2;
  v17 = a3;
  sub_2447D18BC((void (*)(_BYTE *))sub_2447ECA70, (uint64_t)&v14[-v8]);
  sub_2447EA0A4((uint64_t)v9, v10, v11, v12);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_2447EB164(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t Promise.fulfill(handler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v6 = sub_2448EBD48();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = &v14[-v8];
  v15 = v5;
  v16 = a1;
  v17 = a2;
  sub_2447D18BC((void (*)(_BYTE *))sub_2447EB624, (uint64_t)&v14[-v8]);
  sub_2447EA0A4((uint64_t)v9, v10, v11, v12);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

_QWORD *sub_2447EB27C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v5 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(unsigned __int8 *)(a2 + 56);
  v12 = *(unsigned __int8 *)(a2 + 57);
  v13 = *((unsigned __int16 *)result + 28);
  v14 = v13 >> 8;
  if (v13 >> 8 < 0xFF)
  {
    if (v14 != 2 && v12 != 2)
    {
      v16 = (void *)*result;
      v25 = result[1];
      v23 = result[3];
      v24 = result[2];
      v21 = result[5];
      v22 = result[4];
      v20 = result[6];
      v19 = *(unsigned __int8 *)(a2 + 56);
      v17 = *(_QWORD *)(a2 + 40);
      v18 = *(_QWORD *)(a2 + 48);
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738B2F8);
      sub_2447EB714(qword_25738B300, &qword_25738B2F8, (uint64_t)&unk_2448EE5B8);
      swift_allocError();
      *(_QWORD *)v15 = v16;
      *(_QWORD *)(v15 + 8) = v25;
      *(_QWORD *)(v15 + 16) = v24;
      *(_QWORD *)(v15 + 24) = v23;
      *(_QWORD *)(v15 + 32) = v22;
      *(_QWORD *)(v15 + 40) = v21;
      *(_QWORD *)(v15 + 48) = v20;
      *(_WORD *)(v15 + 56) = v13;
      *(_QWORD *)(v15 + 64) = v5;
      *(_QWORD *)(v15 + 72) = v4;
      *(_QWORD *)(v15 + 80) = v7;
      *(_QWORD *)(v15 + 88) = v6;
      *(_QWORD *)(v15 + 96) = v9;
      *(_QWORD *)(v15 + 104) = v17;
      *(_QWORD *)(v15 + 112) = v18;
      *(_BYTE *)(v15 + 120) = v19;
      *(_BYTE *)(v15 + 121) = v12;
      sub_2447D31C8(v5, v4, v7, v6, v9, v17, v18, v19, v12);
      sub_2447EB754(v16, v25, v24, v23, v22, v21, v20, v13);
      return (_QWORD *)swift_willThrow();
    }
  }
  else
  {
    *result = v5;
    result[1] = v4;
    result[2] = v7;
    result[3] = v6;
    result[4] = v9;
    result[5] = v8;
    result[6] = v10;
    *((_WORD *)result + 28) = v11 | ((_WORD)v12 << 8);
    result = sub_2447D31C8(v5, v4, v7, v6, v9, v8, v10, v11, v12);
  }
  *a3 = v14 > 0xFE;
  return result;
}

uint64_t sub_2447EB460(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, void (*a9)(uint64_t), uint64_t a10)
{
  __int128 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  *(_QWORD *)&v11 = a1;
  *((_QWORD *)&v11 + 1) = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  v17 = a8;
  return sub_2447E98BC(&v11, a9, a10);
}

uint64_t sub_2447EB4A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  _QWORD v9[2];
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v9[0] = a1;
  v9[1] = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  v14 = a7;
  v15 = a8;
  return sub_2447E9A34((uint64_t)v9, a2, a3, a4);
}

uint64_t sub_2447EB4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2447EA0A4(a1, a2, a3, a4);
}

uint64_t sub_2447EB4F4(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_2447EA8B4(a1, v4, a3, a4);
}

uint64_t sub_2447EB4FC(__int128 *a1)
{
  uint64_t v1;
  char v2;
  char v3;
  __int128 v5;
  char v6;
  __int128 v7;
  __int128 v8;
  char v9;

  v2 = *((_BYTE *)a1 + 16);
  v3 = *((_BYTE *)a1 + 56);
  v5 = *a1;
  v6 = v2;
  v7 = *(__int128 *)((char *)a1 + 24);
  v8 = *(__int128 *)((char *)a1 + 40);
  v9 = v3;
  return (*(uint64_t (**)(__int128 *))(*(_QWORD *)v1 + 192))(&v5);
}

uint64_t sub_2447EB54C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  _QWORD v9[2];
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v9[0] = a1;
  v9[1] = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  v14 = a7;
  v15 = a8;
  return sub_2447E9D20((uint64_t)v9, a2, a3, a4);
}

uint64_t sub_2447EB58C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2447EB5B8()
{
  uint64_t *v0;

  return sub_2447EB074(v0[2], v0[3], v0[4]);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

unint64_t sub_2447EB5DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25738B1E0;
  if (!qword_25738B1E0)
  {
    v1 = sub_2448EA704();
    result = MEMORY[0x24951AC70](MEMORY[0x24BEE5468], v1);
    atomic_store(result, (unint64_t *)&qword_25738B1E0);
  }
  return result;
}

uint64_t sub_2447EB624(_QWORD *a1)
{
  uint64_t v1;

  return sub_2447D188C(*(uint64_t (**)(void))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_2447EB644()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for PromiseFuture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PromiseFuture);
}

uint64_t sub_2447EB694()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for Promise(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Promise);
}

uint64_t method lookup function for Promise()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_2447EB6F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, _BYTE *a3@<X8>)
{
  uint64_t v3;

  return sub_2447EA344(a1, *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 16), a2, a3);
}

uint64_t type metadata accessor for PromiseFuture.TransitionError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PromiseFuture.TransitionError);
}

uint64_t sub_2447EB714(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x24951AC70](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

id sub_2447EB754(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (BYTE1(a8) != 255)
    return sub_2447D31C8(result, a2, a3, a4, a5, a6, a7, a8, SBYTE1(a8));
  return result;
}

uint64_t sub_2447EB784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for FutureTermination(319, *(_QWORD *)(a1 + 16), a3, a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *sub_2447EB7F0(_OWORD *a1, char **a2, uint64_t a3)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char v17;
  __int128 v18;
  _OWORD *v19;
  id *v20;
  unsigned int v21;
  uint64_t v22;
  id v23;
  id v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v4 = (char *)a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v5 + 64) <= 0x39uLL)
    v6 = 57;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + 1;
  v8 = *(_DWORD *)(v5 + 80);
  v9 = v8 & 0xF8 | 7;
  v10 = ~v9;
  if ((v8 & 0x1000F8) != 0 || ((v6 + 1 + v9) & (unint64_t)~v9) + v6 + 1 > 0x18)
  {
    v12 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = &v12[(v9 + 16) & v10];
    swift_retain();
  }
  else
  {
    v13 = *((unsigned __int8 *)a2 + v6);
    if (v13 >= 3)
    {
      if (v6 <= 3)
        v14 = v6;
      else
        v14 = 4;
      __asm { BR              X12 }
    }
    if (v13 == 2)
    {
      v18 = *((_OWORD *)a2 + 1);
      *a1 = *(_OWORD *)a2;
      a1[1] = v18;
      a1[2] = *((_OWORD *)a2 + 2);
      *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
      v17 = 2;
    }
    else if (v13 == 1)
    {
      v15 = *a2;
      v16 = *a2;
      *(_QWORD *)v4 = v15;
      v17 = 1;
    }
    else
    {
      (*(void (**)(_OWORD *, char **, _QWORD))(v5 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
      v17 = 0;
    }
    v4[v6] = v17;
    v19 = (_OWORD *)((unint64_t)&v4[v7 + 7] & v10);
    v20 = (id *)(((unint64_t)a2 + v7 + 7) & v10);
    v21 = *((unsigned __int8 *)v20 + v6);
    if (v21 >= 3)
    {
      if (v6 <= 3)
        v22 = v6;
      else
        v22 = 4;
      __asm { BR              X12 }
    }
    if (v21 == 2)
    {
      v25 = *(_OWORD *)v20;
      v26 = *(_OWORD *)((((unint64_t)a2 + v7 + 7) & v10) + 0x10);
      v27 = *(_OWORD *)((((unint64_t)a2 + v7 + 7) & v10) + 0x20);
      *(_OWORD *)(((unint64_t)&v4[v7 + 7] & v10) + 0x29) = *(_OWORD *)((((unint64_t)a2 + v7 + 7) & v10)
                                                                            + 0x29);
      *(_OWORD *)(((unint64_t)&v4[v7 + 7] & v10) + 0x10) = v26;
      *(_OWORD *)(((unint64_t)&v4[v7 + 7] & v10) + 0x20) = v27;
      *v19 = v25;
      *((_BYTE *)v19 + v6) = 2;
    }
    else if (v21 == 1)
    {
      v23 = *v20;
      v24 = *v20;
      *(_QWORD *)v19 = v23;
      *((_BYTE *)v19 + v6) = 1;
    }
    else
    {
      (*(void (**)(unint64_t))(v5 + 16))((unint64_t)&v4[v7 + 7] & v10);
      *((_BYTE *)v19 + v6) = 0;
    }
  }
  return v4;
}

void sub_2447EBA70(id *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  unsigned int v9;
  uint64_t v10;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  if (*(_QWORD *)(v3 + 64) <= 0x39uLL)
    v4 = 57;
  else
    v4 = *(_QWORD *)(v3 + 64);
  v5 = *((unsigned __int8 *)a1 + v4);
  if (v5 >= 3)
  {
    if (v4 <= 3)
      v6 = v4;
    else
      v6 = 4;
    __asm { BR              X12 }
  }
  if (v5 != 2)
  {
    if (v5 == 1)

    else
      (*(void (**)(id *, _QWORD))(v3 + 8))(a1, *(_QWORD *)(a2 + 16));
  }
  v7 = *(_DWORD *)(v3 + 80) & 0xF8 | 7;
  v8 = (id *)(((unint64_t)a1 + v4 + v7 + 1) & ~v7);
  v9 = *((unsigned __int8 *)v8 + v4);
  if (v9 >= 3)
  {
    if (v4 <= 3)
      v10 = v4;
    else
      v10 = 4;
    __asm { BR              X12 }
  }
  if (v9 != 2)
  {
    if (v9 == 1)

    else
      (*(void (**)(void))(v3 + 8))();
  }
}

_OWORD *sub_2447EBC10(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  char v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v5 + 64) <= 0x39uLL)
    v6 = 57;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *((unsigned __int8 *)a2 + v6);
  if (v7 >= 3)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X12 }
  }
  if (v7 == 2)
  {
    v12 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v12;
    a1[2] = *((_OWORD *)a2 + 2);
    *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
    v11 = 2;
  }
  else if (v7 == 1)
  {
    v9 = *a2;
    v10 = (id)*a2;
    *(_QWORD *)a1 = v9;
    v11 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *, uint64_t *, _QWORD))(v5 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
    v11 = 0;
  }
  *((_BYTE *)a1 + v6) = v11;
  v13 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  v14 = v6 + v13 + 1;
  v15 = (_OWORD *)(((unint64_t)a1 + v14) & ~v13);
  v16 = ((unint64_t)a2 + v14) & ~v13;
  v17 = *(unsigned __int8 *)(v16 + v6);
  if (v17 >= 3)
  {
    if (v6 <= 3)
      v18 = v6;
    else
      v18 = 4;
    __asm { BR              X12 }
  }
  if (v17 == 2)
  {
    v22 = *(_OWORD *)v16;
    v23 = *(_OWORD *)(v16 + 16);
    v24 = *(_OWORD *)(v16 + 32);
    *(_OWORD *)((char *)v15 + 41) = *(_OWORD *)(v16 + 41);
    v15[1] = v23;
    v15[2] = v24;
    *v15 = v22;
    v21 = 2;
  }
  else if (v17 == 1)
  {
    v19 = *(_QWORD *)v16;
    v20 = *(id *)v16;
    *(_QWORD *)v15 = v19;
    v21 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *))(v5 + 16))(v15);
    v21 = 0;
  }
  *((_BYTE *)v15 + v6) = v21;
  return a1;
}

uint64_t sub_2447EBE40(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  id v12;
  id v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) <= 0x39uLL)
    v7 = 57;
  else
    v7 = *(_QWORD *)(v6 + 64);
  if ((__int128 *)a1 != a2)
  {
    v8 = *(unsigned __int8 *)(a1 + v7);
    if (v8 >= 3)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 != 2)
    {
      if (v8 == 1)

      else
        (*(void (**)(uint64_t, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    }
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 3)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 2)
    {
      v15 = *a2;
      v16 = a2[1];
      v17 = a2[2];
      *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
      *(_OWORD *)(a1 + 16) = v16;
      *(_OWORD *)(a1 + 32) = v17;
      *(_OWORD *)a1 = v15;
      v14 = 2;
    }
    else if (v10 == 1)
    {
      v12 = *(id *)a2;
      v13 = *(id *)a2;
      *(_QWORD *)a1 = v12;
      v14 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, __int128 *, uint64_t))(v6 + 16))(a1, a2, v5);
      v14 = 0;
    }
    *(_BYTE *)(a1 + v7) = v14;
  }
  v18 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  v19 = v7 + v18 + 1;
  v20 = (v19 + a1) & ~v18;
  v21 = ((unint64_t)a2 + v19) & ~v18;
  if (v20 != v21)
  {
    v22 = *(unsigned __int8 *)(v20 + v7);
    if (v22 >= 3)
    {
      if (v7 <= 3)
        v23 = v7;
      else
        v23 = 4;
      __asm { BR              X12 }
    }
    if (v22 != 2)
    {
      if (v22 == 1)

      else
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v20, v5);
    }
    v24 = *(unsigned __int8 *)(v21 + v7);
    if (v24 >= 3)
    {
      if (v7 <= 3)
        v25 = v7;
      else
        v25 = 4;
      __asm { BR              X12 }
    }
    if (v24 == 2)
    {
      v29 = *(_OWORD *)v21;
      v30 = *(_OWORD *)(v21 + 16);
      v31 = *(_OWORD *)(v21 + 32);
      *(_OWORD *)(v20 + 41) = *(_OWORD *)(v21 + 41);
      *(_OWORD *)(v20 + 16) = v30;
      *(_OWORD *)(v20 + 32) = v31;
      *(_OWORD *)v20 = v29;
      v28 = 2;
    }
    else if (v24 == 1)
    {
      v26 = *(_QWORD *)v21;
      v27 = *(id *)v21;
      *(_QWORD *)v20 = v26;
      v28 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v20, v21, v5);
      v28 = 0;
    }
    *(_BYTE *)(v20 + v7) = v28;
  }
  return a1;
}

_OWORD *sub_2447EC1DC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 *v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v5 + 64) <= 0x39uLL)
    v6 = 57;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *((unsigned __int8 *)a2 + v6);
  if (v7 >= 3)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X12 }
  }
  if (v7 == 2)
  {
    v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    a1[2] = a2[2];
    *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
    v9 = 2;
  }
  else if (v7 == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v9 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *, _OWORD *, _QWORD))(v5 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
    v9 = 0;
  }
  *((_BYTE *)a1 + v6) = v9;
  v11 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  v12 = v6 + v11 + 1;
  v13 = (_OWORD *)(((unint64_t)a1 + v12) & ~v11);
  v14 = (__int128 *)(((unint64_t)a2 + v12) & ~v11);
  v15 = *((unsigned __int8 *)v14 + v6);
  if (v15 >= 3)
  {
    if (v6 <= 3)
      v16 = v6;
    else
      v16 = 4;
    __asm { BR              X12 }
  }
  if (v15 == 2)
  {
    v18 = *v14;
    v19 = v14[1];
    v20 = v14[2];
    *(_OWORD *)((char *)v13 + 41) = *(__int128 *)((char *)v14 + 41);
    v13[1] = v19;
    v13[2] = v20;
    *v13 = v18;
    v17 = 2;
  }
  else if (v15 == 1)
  {
    *(_QWORD *)v13 = *(_QWORD *)v14;
    v17 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *))(v5 + 32))(v13);
    v17 = 0;
  }
  *((_BYTE *)v13 + v6) = v17;
  return a1;
}

uint64_t sub_2447EC3FC(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) <= 0x39uLL)
    v7 = 57;
  else
    v7 = *(_QWORD *)(v6 + 64);
  if ((_OWORD *)a1 != a2)
  {
    v8 = *(unsigned __int8 *)(a1 + v7);
    if (v8 >= 3)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 != 2)
    {
      if (v8 == 1)

      else
        (*(void (**)(uint64_t, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    }
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 3)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 2)
    {
      v13 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v13;
      *(_OWORD *)(a1 + 32) = a2[2];
      *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 41);
      v12 = 2;
    }
    else if (v10 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v12 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 0;
    }
    *(_BYTE *)(a1 + v7) = v12;
  }
  v14 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  v15 = v7 + v14 + 1;
  v16 = (v15 + a1) & ~v14;
  v17 = (__int128 *)(((unint64_t)a2 + v15) & ~v14);
  if ((__int128 *)v16 != v17)
  {
    v18 = *(unsigned __int8 *)(v16 + v7);
    if (v18 >= 3)
    {
      if (v7 <= 3)
        v19 = v7;
      else
        v19 = 4;
      __asm { BR              X12 }
    }
    if (v18 != 2)
    {
      if (v18 == 1)

      else
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v16, v5);
    }
    v20 = *((unsigned __int8 *)v17 + v7);
    if (v20 >= 3)
    {
      if (v7 <= 3)
        v21 = v7;
      else
        v21 = 4;
      __asm { BR              X12 }
    }
    if (v20 == 2)
    {
      v23 = *v17;
      v24 = v17[1];
      v25 = v17[2];
      *(_OWORD *)(v16 + 41) = *(__int128 *)((char *)v17 + 41);
      *(_OWORD *)(v16 + 16) = v24;
      *(_OWORD *)(v16 + 32) = v25;
      *(_OWORD *)v16 = v23;
      v22 = 2;
    }
    else if (v20 == 1)
    {
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v22 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, __int128 *, uint64_t))(v6 + 32))(v16, v17, v5);
      v22 = 0;
    }
    *(_BYTE *)(v16 + v7) = v22;
  }
  return a1;
}

uint64_t sub_2447EC788(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  unsigned int v10;
  int v11;
  unsigned int v12;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  if (v4 <= 0x39)
    v4 = 57;
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_21;
  v5 = *(_DWORD *)(v3 + 80) & 0xF8 | 7;
  v6 = ((v4 + 1 + v5) & ~v5) + v4 + 1;
  v7 = 8 * v6;
  if (v6 <= 3)
  {
    v10 = ((a2 + ~(-1 << v7) - 253) >> v7) + 1;
    if (HIWORD(v10))
    {
      v8 = *(_DWORD *)(a1 + v6);
      if (!v8)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v10 > 0xFF)
    {
      v8 = *(unsigned __int16 *)(a1 + v6);
      if (!*(_WORD *)(a1 + v6))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v10 < 2)
    {
LABEL_21:
      v12 = *(unsigned __int8 *)(a1 + v4);
      if (v12 >= 3)
        return (v12 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v8 = *(unsigned __int8 *)(a1 + v6);
  if (!*(_BYTE *)(a1 + v6))
    goto LABEL_21;
LABEL_14:
  v11 = (v8 - 1) << v7;
  if (v6 > 3)
    v11 = 0;
  if (!(_DWORD)v6)
    return (v11 + 254);
  if (v6 > 3)
    LODWORD(v6) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2447EC864 + 4 * byte_2448EE4A0[(v6 - 1)]))();
}

void sub_2447EC8B0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 <= 0x39)
    v6 = 57;
  v7 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  v8 = ((v6 + 1 + v7) & ~v7) + v6 + 1;
  if (a3 < 0xFE)
  {
    v9 = 0;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 + ~(-1 << (8 * v8)) - 253) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v10 = a2 - 254;
  if (v8 < 4)
  {
    if ((_DWORD)v8)
    {
      v12 = v10 & ~(-1 << (8 * v8));
      bzero(a1, v8);
      if ((_DWORD)v8 == 3)
      {
        *a1 = v12;
        *((_BYTE *)a1 + 2) = BYTE2(v12);
      }
      else if ((_DWORD)v8 == 2)
      {
        *a1 = v12;
      }
      else
      {
        *(_BYTE *)a1 = v12;
      }
    }
  }
  else
  {
    bzero(a1, v8);
    *(_DWORD *)a1 = v10;
  }
  __asm { BR              X10 }
}

uint64_t sub_2447ECA70(_QWORD *a1)
{
  return sub_2447EB624(a1);
}

uint64_t BiMap.init(_:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t TupleTypeMetadata2;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t result;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  _OWORD *v45;
  _QWORD *v46;
  int64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;

  v45 = a6;
  v11 = sub_2448EB508();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v44 - v13;
  v59 = *(_QWORD *)(a2 - 8);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v51 = (char *)v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v50 = (char *)v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v20 = sub_2448EB508();
  v57 = *(_QWORD *)(v20 - 8);
  v58 = v20;
  v21 = MEMORY[0x24BDAC7A8](v20);
  v54 = (char *)v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)v44 - v23;
  v52 = a4;
  *(_QWORD *)&v65 = sub_2448EA7C4();
  v60 = a2;
  v53 = a5;
  result = sub_2448EA7C4();
  *((_QWORD *)&v65 + 1) = result;
  v26 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    result = sub_2448EB97C();
    v46 = 0;
    v27 = 0;
    v28 = 0;
    v26 = result | 0x8000000000000000;
  }
  else
  {
    v29 = -1 << *(_BYTE *)(a1 + 32);
    v30 = *(_QWORD *)(a1 + 64);
    v46 = (_QWORD *)(a1 + 64);
    v31 = ~v29;
    v32 = -v29;
    if (v32 < 64)
      v33 = ~(-1 << v32);
    else
      v33 = -1;
    v28 = v33 & v30;
    v27 = v31;
  }
  v48 = v26 & 0x7FFFFFFFFFFFFFFFLL;
  v44[1] = v27;
  v47 = (unint64_t)(v27 + 64) >> 6;
  v44[0] = v47 - 1;
  v55 = v26;
  v49 = v14;
  v56 = 0;
  if ((v26 & 0x8000000000000000) != 0)
  {
    if (sub_2448EB988())
    {
      v34 = v54;
      sub_2448EBBBC();
      swift_unknownObjectRelease();
      sub_2448EBBBC();
      swift_unknownObjectRelease();
      v35 = 0;
LABEL_19:
      v40 = *(_QWORD *)(TupleTypeMetadata2 - 8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56))(v34, v35, 1, TupleTypeMetadata2);
      (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v24, v34, v58);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v24, 1, TupleTypeMetadata2) != 1)
      {
        v41 = v50;
        (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v50, &v24[*(int *)(TupleTypeMetadata2 + 48)], a3);
        v42 = v60;
        (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v51, v24, v60);
        (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v41, a3);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, a3);
        v61 = v42;
        v62 = a3;
        v63 = v52;
        v64 = v53;
        type metadata accessor for BiMap();
      }
      result = sub_2447D1030();
      *v45 = v65;
      return result;
    }
    v35 = 1;
LABEL_18:
    v34 = v54;
    goto LABEL_19;
  }
  if (v28)
  {
    v36 = __clz(__rbit64(v28));
LABEL_13:
    v37 = v26;
    v34 = v54;
    (*(void (**)(char *, unint64_t, uint64_t))(v59 + 16))(v54, *(_QWORD *)(v26 + 48) + *(_QWORD *)(v59 + 72) * v36, v60);
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(&v34[*(int *)(TupleTypeMetadata2 + 48)], *(_QWORD *)(v37 + 56) + *(_QWORD *)(v17 + 72) * v36, a3);
    v35 = 0;
    v14 = v49;
    goto LABEL_19;
  }
  v38 = 1;
  if (v47 <= 1)
  {
    v35 = 1;
    goto LABEL_18;
  }
  v39 = v46[1];
  if (v39)
  {
LABEL_16:
    v36 = __clz(__rbit64(v39)) + (v38 << 6);
    goto LABEL_13;
  }
  if (v47 <= 2)
  {
    v35 = 1;
    goto LABEL_18;
  }
  v39 = v46[2];
  if (v39)
  {
    v38 = 2;
    goto LABEL_16;
  }
  v43 = 3;
  if (v47 <= 3)
  {
    v35 = 1;
    goto LABEL_18;
  }
  v39 = v46[3];
  if (v39)
  {
    v38 = 3;
    goto LABEL_16;
  }
  while (1)
  {
    v38 = v43 + 1;
    if (__OFADD__(v43, 1))
      break;
    if (v38 >= v47)
    {
      v35 = 1;
      goto LABEL_18;
    }
    v39 = v46[v38];
    ++v43;
    if (v39)
      goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t BiMap.subscript.setter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  int v28;
  void (**v29)(char *, char *, uint64_t);
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  void (*v37)(uint64_t, uint64_t);
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t, uint64_t);
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;

  v6 = a3[2];
  v53 = *(_QWORD *)(v6 - 8);
  v54 = a1;
  MEMORY[0x24BDAC7A8](a1);
  v50 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2448EB508();
  v42 = *(_QWORD *)(v8 - 8);
  v43 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v42 - v9;
  v11 = a3[3];
  v12 = sub_2448EB508();
  v57 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v51 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v49 = (char *)&v42 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v42 - v18;
  v20 = *(char **)(v11 - 8);
  v21 = MEMORY[0x24BDAC7A8](v17);
  v44 = (char *)&v42 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v52 = (char *)&v42 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v42 - v25;
  v55 = v3;
  v56 = a2;
  v27 = *v3;
  v47 = a3[4];
  MEMORY[0x2495190C8](a2, v27, v6, v11);
  v48 = (uint64_t (*)(char *, uint64_t, uint64_t))*((_QWORD *)v20 + 6);
  v28 = v48(v19, 1, v11);
  v45 = v10;
  v46 = a3;
  if (v28 == 1)
  {
    (*(void (**)(char *, uint64_t))(v57 + 8))(v19, v12);
  }
  else
  {
    (*((void (**)(char *, char *, uint64_t))v20 + 4))(v26, v19, v11);
    sub_2448EA8B4();
    sub_2448EA818();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v10, v43);
    (*((void (**)(char *, uint64_t))v20 + 1))(v26, v11);
  }
  v29 = (void (**)(char *, char *, uint64_t))v20;
  v30 = v53;
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 16);
  v31(v50, v56, v6);
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v57 + 16);
  v33 = v54;
  v32(v49, v54, v12);
  sub_2448EA8B4();
  v34 = v33;
  sub_2448EA8F0();
  v35 = v51;
  v32(v51, v33, v12);
  v36 = v35;
  if (v48(v35, 1, v11) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v56, v6);
    v37 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
    v37(v34, v12);
    return ((uint64_t (*)(char *, uint64_t))v37)(v35, v12);
  }
  else
  {
    v39 = v52;
    v29[4](v52, v36, v11);
    v29[2](v44, v39, v11);
    v51 = (char *)v29;
    v40 = v45;
    v41 = v56;
    v31(v45, v56, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v40, 0, 1, v6);
    sub_2448EA8B4();
    sub_2448EA8F0();
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v41, v6);
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v33, v12);
    return (*((uint64_t (**)(char *, uint64_t))v51 + 1))(v52, v11);
  }
}

{
  uint64_t v6;

  sub_2447EE958(a1, a2, a3);
  (*(void (**)(uint64_t))(*(_QWORD *)(a3[2] - 8) + 8))(a2);
  v6 = sub_2448EB508();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(char *, uint64_t, uint64_t);
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = v3;
  v59 = a2;
  v6 = a3[3];
  v56 = *(_QWORD *)(v6 - 8);
  v57 = a1;
  MEMORY[0x24BDAC7A8](a1);
  v53 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2448EB508();
  v43 = *(_QWORD *)(v8 - 8);
  v44 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v42 - v9;
  v11 = a3[2];
  v12 = sub_2448EB508();
  v58 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v54 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v52 = (char *)&v42 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v42 - v18;
  v20 = *(_QWORD *)(v11 - 8);
  v21 = MEMORY[0x24BDAC7A8](v17);
  v45 = (char *)&v42 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v46 = (char *)&v42 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v42 - v25;
  v27 = *(_QWORD *)(v4 + 8);
  v50 = a3[5];
  MEMORY[0x2495190C8](v59, v27, v6, v11);
  v51 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v28 = v51(v19, 1, v11);
  v48 = a3;
  v49 = v4;
  v47 = v10;
  v55 = v20;
  if (v28 == 1)
  {
    v29 = v58;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v19, v12);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v26, v19, v11);
    sub_2448EA8B4();
    sub_2448EA818();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v10, v44);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v26, v11);
    v29 = v58;
  }
  v30 = v56;
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v56 + 16);
  v31(v53, v59, v6);
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  v33 = v57;
  v32(v52, v57, v12);
  sub_2448EA8B4();
  v34 = v33;
  sub_2448EA8F0();
  v35 = v54;
  v32(v54, v34, v12);
  if (v51(v35, 1, v11) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v59, v6);
    v36 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
    v36(v34, v12);
    return ((uint64_t (*)(char *, uint64_t))v36)(v35, v12);
  }
  else
  {
    v38 = v55;
    v39 = v46;
    (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v46, v35, v11);
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v45, v39, v11);
    v40 = v47;
    v41 = v59;
    v31(v47, v59, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v40, 0, 1, v6);
    sub_2448EA8B4();
    sub_2448EA8F0();
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v41, v6);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v34, v12);
    return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v39, v11);
  }
}

void type metadata accessor for BiMap()
{
  JUMPOUT(0x24951ABD4);
}

void BiMap.subscript.getter()
{
  JUMPOUT(0x2495190C8);
}

{
  JUMPOUT(0x2495190C8);
}

{
  JUMPOUT(0x2495190C8);
}

void sub_2447ED3FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a4 + a3 - 32);
  v7 = *(_QWORD *)(a4 + a3 - 8);
  v15 = *(_OWORD *)(a4 + a3 - 24);
  v8 = sub_2448EB508();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v15 - v11;
  MEMORY[0x24BDAC7A8](v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v15 - v14, a3, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
  v16 = v6;
  v17 = v15;
  v18 = v7;
  type metadata accessor for BiMap();
}

uint64_t sub_2447ED4E0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  return BiMap.subscript.setter(v1, v2, a1);
}

void (*BiMap.subscript.modify(_QWORD *a1, uint64_t a2, _QWORD *a3))(uint64_t **a1, char a2)
{
  _QWORD *v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;

  v7 = malloc(0x50uLL);
  *a1 = v7;
  *v7 = a3;
  v7[1] = v3;
  v8 = a3[3];
  v9 = sub_2448EB508();
  v7[2] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[3] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v7[4] = malloc(v11);
  v12 = malloc(v11);
  v13 = a3[2];
  v7[5] = v12;
  v7[6] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v7[7] = v14;
  v15 = *(_QWORD *)(v14 + 64);
  v7[8] = malloc(v15);
  v7[9] = malloc(v15);
  (*(void (**)(void))(v14 + 16))();
  MEMORY[0x2495190C8](a2, *v3, v13, v8, a3[4]);
  return sub_2447ED604;
}

{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;

  v7 = malloc(0x50uLL);
  *a1 = v7;
  *v7 = a3;
  v7[1] = v3;
  v8 = a3[2];
  v9 = sub_2448EB508();
  v7[2] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[3] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v7[4] = malloc(v11);
  v12 = malloc(v11);
  v13 = a3[3];
  v7[5] = v12;
  v7[6] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v7[7] = v14;
  v15 = *(_QWORD *)(v14 + 64);
  v7[8] = malloc(v15);
  v7[9] = malloc(v15);
  (*(void (**)(void))(v14 + 16))();
  MEMORY[0x2495190C8](a2, *(_QWORD *)(v3 + 8), v13, v8, a3[5]);
  return sub_2447EDF2C;
}

void sub_2447ED604(uint64_t **a1, char a2)
{
  sub_2447EDF38(a1, a2, (void (*)(void *, void *, uint64_t))BiMap.subscript.setter);
}

void sub_2447ED624()
{
  type metadata accessor for BiMap();
}

uint64_t sub_2447ED65C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_2447EE958(v2, v1, a1);
}

void (*BiMap.subscript.modify(_QWORD *a1, uint64_t a2, _QWORD *a3))(_QWORD ***a1, char a2)
{
  _QWORD *v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v7 = malloc(0x48uLL);
  *a1 = v7;
  *v7 = a3;
  v7[1] = v3;
  v8 = a3[3];
  v9 = sub_2448EB508();
  v7[2] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[3] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v7[4] = malloc(v11);
  v12 = malloc(v11);
  v13 = a3[2];
  v7[5] = v12;
  v7[6] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v7[7] = v14;
  v7[8] = malloc(*(_QWORD *)(v14 + 64));
  (*(void (**)(void))(v14 + 16))();
  MEMORY[0x2495190C8](a2, *v3, v13, v8, a3[4]);
  return sub_2447ED7BC;
}

void sub_2447ED7BC(_QWORD ***a1, char a2)
{
  _QWORD **v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void (*v11)(_QWORD *, _QWORD *);

  v2 = *a1;
  v4 = (*a1)[7];
  v3 = (*a1)[8];
  v5 = (*a1)[5];
  v6 = (*a1)[6];
  v8 = (*a1)[3];
  v7 = (*a1)[4];
  v9 = (*a1)[2];
  v10 = **a1;
  if ((a2 & 1) != 0)
  {
    ((void (*)(_QWORD *, _QWORD *, _QWORD *))v8[2])((*a1)[4], v5, v9);
    sub_2447EE958((uint64_t)v7, (uint64_t)v3, v10);
    ((void (*)(_QWORD *, _QWORD *))v4[1])(v3, v6);
    v11 = (void (*)(_QWORD *, _QWORD *))v8[1];
    v11(v7, v9);
  }
  else
  {
    sub_2447EE958((uint64_t)(*a1)[5], (uint64_t)v3, v10);
    ((void (*)(_QWORD *, _QWORD *))v4[1])(v3, v6);
    v11 = (void (*)(_QWORD *, _QWORD *))v8[1];
  }
  v11(v5, v9);
  free(v3);
  free(v5);
  free(v7);
  free(v2);
}

void sub_2447ED8B8()
{
  type metadata accessor for BiMap();
}

uint64_t sub_2447ED8F8(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v2, a1);
}

void sub_2447ED920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v6 = a4 + a3;
  v7 = *(_QWORD *)(a4 + a3 - 32);
  v8 = *(_QWORD *)(a4 + a3 - 8);
  v9 = sub_2448EB508();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v16 - v12;
  v16 = *(_OWORD *)(v6 - 24);
  MEMORY[0x24BDAC7A8](v11);
  (*(void (**)(char *, uint64_t))(v14 + 16))((char *)&v16 - v15, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  v17 = v7;
  v18 = v16;
  v19 = v8;
  type metadata accessor for BiMap();
}

uint64_t sub_2447EDA04(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  return BiMap.subscript.setter(v1, v2, a1);
}

void sub_2447EDF2C(uint64_t **a1, char a2)
{
  sub_2447EDF38(a1, a2, (void (*)(void *, void *, uint64_t))BiMap.subscript.setter);
}

void sub_2447EDF38(uint64_t **a1, char a2, void (*a3)(void *, void *, uint64_t))
{
  uint64_t *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a1;
  v5 = (void *)(*a1)[8];
  v6 = (void *)(*a1)[9];
  if ((a2 & 1) != 0)
  {
    v7 = v4[7];
    v9 = (void *)v4[4];
    v8 = (void *)v4[5];
    v10 = v4[2];
    v11 = v4[3];
    v12 = *v4;
    v13 = v4[6];
    (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v9, v8, v10);
    (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v5, v6, v13);
    a3(v9, v5, v12);
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
  }
  else
  {
    v9 = (void *)v4[4];
    v8 = (void *)v4[5];
    a3(v8, v6, *v4);
  }
  free(v6);
  free(v5);
  free(v8);
  free(v9);
  free(v4);
}

uint64_t BiMap.keys.getter@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_2447EE03C(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))nullsub_1, a2);
}

uint64_t BiMap.values.getter@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_2447EE03C(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))j_nullsub_1, a2);
}

uint64_t sub_2447EE03C@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD)@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;

  *a3 = a2(*v3, a1[2], a1[3], a1[4]);
  return swift_bridgeObjectRetain();
}

uint64_t BiMap.description.getter()
{
  return sub_2448EA80C();
}

uint64_t BiMap.init(dictionaryLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[6];

  v12 = sub_2448EB508();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v36 = (char *)&v31 - v14;
  v38 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v37 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v42 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v32 = *(_QWORD *)(v42 + 64);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v18 = (char *)&v31 - v17;
  v40 = a4;
  v19 = sub_2448EA7C4();
  v43[4] = v19;
  v39 = a2;
  v41 = a5;
  v20 = sub_2448EA7C4();
  v43[5] = v20;
  if (MEMORY[0x2495196A4](a1, TupleTypeMetadata2))
  {
    v21 = *(int *)(TupleTypeMetadata2 + 48);
    v35 = v18;
    v33 = a6;
    v34 = &v18[v21];
    v23 = v36;
    v22 = v37;
    v24 = &v18[v21];
    v25 = sub_2448EAE6C();
    sub_2448EAE18();
    if ((v25 & 1) != 0)
    {
      v26 = v35;
      (*(void (**)(char *, unint64_t, uint64_t))(v42 + 16))(v35, a1 + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80)), TupleTypeMetadata2);
    }
    else
    {
      v29 = sub_2448EB7F0();
      v26 = v35;
      if (v32 != 8)
      {
        __break(1u);
        JUMPOUT(0x2447EE338);
      }
      v43[0] = v29;
      (*(void (**)(char *, _QWORD *, uint64_t))(v42 + 16))(v35, v43, TupleTypeMetadata2);
      swift_unknownObjectRelease();
    }
    v27 = v39;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v22, v26, v39);
    v28 = *(_QWORD *)(a3 - 8);
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v23, v24, a3);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v23, 0, 1, a3);
    v43[0] = v27;
    v43[1] = a3;
    v43[2] = v40;
    v43[3] = v41;
    type metadata accessor for BiMap();
  }
  result = swift_bridgeObjectRelease();
  *a6 = v19;
  a6[1] = v20;
  return result;
}

uint64_t BiMap.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_2448EA7C4();
  result = sub_2448EA7C4();
  *a1 = v2;
  a1[1] = result;
  return result;
}

uint64_t BiMap.count.getter()
{
  return sub_2448EA860();
}

void BiMap.isEmpty.getter()
{
  JUMPOUT(0x249519074);
}

uint64_t BiMap.startIndex.getter(_QWORD *a1)
{
  return sub_2447EE410(a1, MEMORY[0x24BEE0268]);
}

uint64_t BiMap.endIndex.getter(_QWORD *a1)
{
  return sub_2447EE410(a1, MEMORY[0x24BEE0438]);
}

uint64_t sub_2447EE410(_QWORD *a1, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(*v2, a1[2], a1[3], a1[4]);
}

uint64_t BiMap.index(after:)()
{
  return sub_2448EA86C();
}

uint64_t BiMap.subscript.getter()
{
  return sub_2448EA8FC();
}

uint64_t BiMap.makeIterator()@<X0>(unint64_t *a1@<X8>)
{
  unint64_t *v1;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    v4 = sub_2448EB97C();
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = v4 | 0x8000000000000000;
  }
  else
  {
    v9 = -1;
    v10 = -1 << *(_BYTE *)(v3 + 32);
    v6 = ~v10;
    v5 = v3 + 64;
    v11 = -v10;
    if (v11 < 64)
      v9 = ~(-1 << v11);
    v7 = v9 & *(_QWORD *)(v3 + 64);
    v8 = *v1;
  }
  *a1 = v8;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = 0;
  a1[4] = v7;
  return swift_bridgeObjectRetain();
}

uint64_t sub_2447EE534@<X0>(uint64_t *a1@<X8>)
{
  return BiMap.init()(a1);
}

void (*sub_2447EE54C(_QWORD *a1, uint64_t a2, _QWORD *a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = BiMap.subscript.modify(v6, a2, a3);
  return sub_2447DD19C;
}

double sub_2447EE5A8@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  _OWORD v4[2];
  uint64_t v5;

  BiMap.makeIterator()((unint64_t *)v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(double *)v4;
  v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = v5;
  return result;
}

uint64_t sub_2447EE600(uint64_t a1)
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for BiMap<A, B>, a1);
  return sub_2448EB22C();
}

uint64_t sub_2447EE634(uint64_t a1)
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for BiMap<A, B>, a1);
  return sub_2448EB238();
}

uint64_t sub_2447EE668@<X0>(uint64_t a1@<X8>)
{
  return sub_2447DB438((uint64_t (*)(void))BiMap.startIndex.getter, a1);
}

uint64_t sub_2447EE674@<X0>(uint64_t a1@<X8>)
{
  return sub_2447DB438((uint64_t (*)(void))BiMap.endIndex.getter, a1);
}

void (*sub_2447EE680(uint64_t **a1, uint64_t a2, uint64_t a3))(uint64_t *a1, uint64_t a2)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  char *v10;
  void (*v11)(_QWORD *);
  uint64_t v12;
  uint64_t v13;

  v5 = (uint64_t *)malloc(0x40uLL);
  *a1 = v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(a3 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v5[4] = TupleTypeMetadata2;
  v9 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v5[5] = v9;
  v10 = (char *)malloc(*(_QWORD *)(v9 + 64));
  v5[6] = (uint64_t)v10;
  v11 = sub_2447EE7B8(v5);
  v13 = v12;
  v5[7] = (uint64_t)v11;
  (*(void (**)(char *))(*(_QWORD *)(v6 - 8) + 16))(v10);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(&v10[*(int *)(TupleTypeMetadata2 + 48)], v13, v7);
  return sub_2447EE764;
}

void sub_2447EE764(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(*a1 + 40) + 8))(*(_QWORD *)(*a1 + 48), *(_QWORD *)(*a1 + 32));
  v4 = *(void **)(v3 + 48);
  (*(void (**)(uint64_t, uint64_t))(v3 + 56))(v3, a2);
  free(v4);
  free((void *)v3);
}

void (*sub_2447EE7B8(uint64_t *a1))(_QWORD *a1)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v3;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  v3 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  a1[1] = v3;
  a1[2] = (uint64_t)malloc(*(_QWORD *)(v3 + 64));
  sub_2448EA8FC();
  return sub_2447DD234;
}

uint64_t sub_2447EE894@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  result = BiMap.index(after:)();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4 & 1;
  return result;
}

uint64_t sub_2447EE8D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  v5 = BiMap.index(after:)();
  v7 = v6;
  v9 = v8;
  result = sub_2447DDA3C(v2, v3, v4);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v9 & 1;
  return result;
}

uint64_t sub_2447EE948@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return BiMap.init(dictionaryLiteral:)(a1, a2[2], a2[3], a2[4], a2[5], a3);
}

uint64_t sub_2447EE958(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v6 = sub_2448EB508();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v15 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v12, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  return BiMap.subscript.setter((uint64_t)v10, (uint64_t)v12, a3);
}

uint64_t sub_2447EEA34(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x24951AC70](&protocol conformance descriptor for BiMap<A, B>);
  result = MEMORY[0x24951AC70](&protocol conformance descriptor for BiMap<A, B>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void sub_2447EEA78()
{
  JUMPOUT(0x24951AC70);
}

void sub_2447EEA88()
{
  JUMPOUT(0x24951AC70);
}

void sub_2447EEA98()
{
  sub_2447ED8B8();
}

uint64_t sub_2447EEAB8()
{
  return 32;
}

__n128 sub_2447EEAC4(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_2447EEAD0()
{
  sub_2447ED8B8();
}

uint64_t sub_2447EEAF0()
{
  return 32;
}

__n128 sub_2447EEAFC(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_2447EEB08()
{
  sub_2447ED8B8();
}

uint64_t sub_2447EEB28()
{
  return 32;
}

__n128 sub_2447EEB34(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_2447EEB40(_QWORD *a1)
{
  get_witness_table_SHRzSHR_r0_lSD4KeysVyxq__GSlHPyHCTm(a1, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD))MEMORY[0x24BEE0300]);
}

void sub_2447EEB54(_QWORD *a1)
{
  get_witness_table_SHRzSHR_r0_lSD4KeysVyxq__GSlHPyHCTm(a1, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD))MEMORY[0x24BEE03B0]);
}

void get_witness_table_SHRzSHR_r0_lSD4KeysVyxq__GSlHPyHCTm(_QWORD *a1, void (*a2)(uint64_t, _QWORD, _QWORD, _QWORD))
{
  a2(255, *a1, a1[1], a1[2]);
  JUMPOUT(0x24951AC70);
}

uint64_t Range.fullyContains(_:)()
{
  if ((sub_2448EA9D4() & 1) != 0)
    return sub_2448EA9D4() & 1;
  else
    return 0;
}

uint64_t Dictionary.nextUniqueKeyUsing(_:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  uint64_t (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v25;
  void (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;

  v25 = a5;
  v11 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_2448EB508();
  v14 = *(_QWORD *)(v28 - 8);
  v15 = MEMORY[0x24BDAC7A8](v28);
  v17 = (char *)&v25 - v16;
  v26 = a1;
  a1(v15);
  v27 = a2;
  v18 = a2;
  v19 = v25;
  MEMORY[0x2495190C8](a6, v18, a3, a4);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 48);
  v21 = v20(v17, 1, a4);
  v22 = *(uint64_t (**)(char *, uint64_t))(v14 + 8);
  if (v21 != 1)
  {
    do
    {
      v23 = v22(v17, v28);
      v26(v23);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a6, a3);
      (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a6, v13, a3);
      MEMORY[0x2495190C8](a6, v27, a3, a4, v19);
    }
    while (v20(v17, 1, a4) != 1);
  }
  return v22(v17, v28);
}

uint64_t Dictionary.mapKeys<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_2447EEF54(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)sub_2447EEEF4, (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))Sequence.keyedMap<A, B>(_:));
}

uint64_t sub_2447EEDD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = a2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v14 = (char *)&v21 - v13;
  result = a4(a3);
  if (!v7)
  {
    v16 = *(int *)(TupleTypeMetadata2 + 48);
    v17 = &v14[v16];
    v18 = a3 + v16;
    v19 = *(_QWORD *)(a6 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v14, a3, a6);
    v20 = *(_QWORD *)(a7 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v17, v18, a7);
    (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v22, v17, a7);
    return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v14, a6);
  }
  return result;
}

uint64_t sub_2447EEEF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_2447EEDD4(a1, a2, a3, *(uint64_t (**)(uint64_t))(v3 + 56), *(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t Dictionary.compactMapKeys<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_2447EEF54(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)sub_2447EF1FC, (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))Sequence.compactKeyedMap<A, B>(_:));
}

uint64_t sub_2447EEF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[10];

  v16[8] = a2;
  v16[9] = a3;
  v16[2] = a4;
  v16[3] = a5;
  v16[4] = a6;
  v16[5] = a7;
  v16[6] = a8;
  v16[7] = a1;
  v13 = sub_2448EA8B4();
  v14 = MEMORY[0x24951AC70](MEMORY[0x24BEE04D8], v13);
  return a10(a9, v16, v13, a6, a5, v14, a8);
}

uint64_t sub_2447EF000@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t TupleTypeMetadata2;

  v28 = a6;
  v29 = a7;
  v31 = a8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v32 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v15 = (char *)&v27 - v14;
  v30 = a5;
  v16 = sub_2448EB508();
  v27 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v27 - v17;
  result = a2(a1);
  if (!v8)
  {
    v20 = *(int *)(TupleTypeMetadata2 + 48);
    v21 = &v15[v20];
    v22 = a1 + v20;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(v15, a1, a3);
    v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(v21, v22, a4);
    MEMORY[0x24BDAC7A8](v23);
    *(&v27 - 6) = a3;
    *(&v27 - 5) = a4;
    v24 = v28;
    *(&v27 - 4) = v30;
    *(&v27 - 3) = v24;
    *(&v27 - 2) = v29;
    *(&v27 - 1) = (uint64_t)v15;
    v25 = swift_getTupleTypeMetadata2();
    sub_244818D58((void (*)(char *, char *))sub_2447EF35C, (uint64_t)(&v27 - 8), MEMORY[0x24BEE4078], v25, v26, v31);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v18, v16);
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v15, TupleTypeMetadata2);
  }
  return result;
}

uint64_t sub_2447EF1FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2447EF000(a1, *(uint64_t (**)(uint64_t))(v2 + 56), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), a2);
}

uint64_t sub_2447EF220@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v14 = (char *)&v22 - v13;
  v15 = a6 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(a6, a1, a5);
  v16 = *(int *)(TupleTypeMetadata2 + 48);
  v17 = &v14[v16];
  v18 = a2 + v16;
  v19 = *(_QWORD *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v14, a2, a3);
  v20 = *(_QWORD *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v17, v18, a4);
  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v15, v17, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v14, a3);
}

uint64_t sub_2447EF35C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_2447EF220(a1, v2[7], v2[2], v2[3], v2[4], a2);
}

uint64_t SynchronousAccessProviding<>.peek(file:line:column:function:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  uint64_t (*v10)(_QWORD *, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>), _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  _QWORD v13[6];
  _QWORD v14[2];
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v14[0] = a1;
  v14[1] = a2;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  v19 = a7;
  v20 = a8;
  v13[2] = a9;
  v13[3] = a10;
  v10 = *(uint64_t (**)(_QWORD *, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>), _QWORD *, uint64_t, uint64_t, uint64_t))(a10 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return v10(v14, sub_2447EF6F0, v13, AssociatedTypeWitness, a9, a10);
}

uint64_t SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD v15[2];
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v15[0] = a2;
  v15[1] = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  v19 = a7;
  v20 = a8;
  v21 = a9;
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a14 + 24))(v15, a10, a11, a13, a12, a14);
}

uint64_t SynchronousAccessProviding<>.syncUpdate(file:line:column:function:to:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t (*v11)(_QWORD *, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>), _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  _QWORD v14[6];
  _QWORD v15[2];
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v15[0] = a1;
  v15[1] = a2;
  v16 = a3;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  v20 = a7;
  v21 = a8;
  v14[2] = a10;
  v14[3] = a11;
  v14[4] = a9;
  v11 = *(uint64_t (**)(_QWORD *, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>), _QWORD *, uint64_t, uint64_t, uint64_t))(a11 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return v11(v15, sub_2447EF754, v14, AssociatedTypeWitness, a10, a11);
}

uint64_t SynchronousAccessProviding.syncRead<A>(file:line:column:function:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _QWORD v14[2];
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v14[0] = a1;
  v14[1] = a2;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  v19 = a7;
  v20 = a8;
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a13 + 16))(v14, a9, a10, a12, a11, a13);
}

uint64_t SynchronousAccessProviding.syncSetValue<A>(at:to:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[8];
  _QWORD v9[2];
  char v10;
  __int128 v11;
  const char *v12;
  uint64_t v13;
  char v14;

  v5 = *a1;
  v8[2] = a3;
  v8[3] = a4;
  v8[4] = a1;
  v8[5] = a2;
  v6 = *(_QWORD *)(*MEMORY[0x24BEE2B70] + v5 + 8);
  v9[0] = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Sync"
          "hronousAccessProviding.swift";
  v9[1] = 138;
  v10 = 2;
  v11 = xmmword_2448EE810;
  v12 = "syncSetValue(at:to:)";
  v13 = 20;
  v14 = 2;
  return (*(uint64_t (**)(_QWORD *, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>), _QWORD *, uint64_t, uint64_t))(a4 + 24))(v9, sub_2447EF7DC, v8, v6, a3);
}

uint64_t sub_2447EF608@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  void (*v10)(_BYTE *, _QWORD);
  void (*v11)(uint64_t);
  _BYTE v13[32];

  v6 = *(_QWORD *)(*MEMORY[0x24BEE2B70] + *a2 + 8);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = &v13[-v8];
  v10 = (void (*)(_BYTE *, _QWORD))swift_readAtKeyPath();
  v11 = *(void (**)(uint64_t))(v7 + 16);
  v11(a4);
  v10(v13, 0);
  ((void (*)(_BYTE *, uint64_t, uint64_t))v11)(v9, a3, v6);
  return swift_setAtWritableKeyPath();
}

uint64_t sub_2447EF6F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, a1, AssociatedTypeWitness);
}

uint64_t sub_2447EF754@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;

  v5 = *(_QWORD *)(v2 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a2, a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, v5, AssociatedTypeWitness);
}

uint64_t sub_2447EF7DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2447EF608(a1, *(_QWORD **)(v2 + 32), *(_QWORD *)(v2 + 40), a2);
}

uint64_t dispatch thunk of SynchronousAccessProviding.syncRead<A>(callsite:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

uint64_t dispatch thunk of SynchronousAccessProviding.syncWrite<A>(callsite:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t CrashLogSymbolicationParameters.pathResolvers.getter()
{
  return swift_bridgeObjectRetain();
}

PreviewsFoundationOS::CrashLogSymbolicationParameters __swiftcall CrashLogSymbolicationParameters.init(pathResolvers:)(PreviewsFoundationOS::CrashLogSymbolicationParameters pathResolvers)
{
  PreviewsFoundationOS::CrashLogSymbolicationParameters *v1;

  v1->pathResolvers._rawValue = pathResolvers.pathResolvers._rawValue;
  return pathResolvers;
}

ValueMetadata *type metadata accessor for CrashLogSymbolicationParameters()
{
  return &type metadata for CrashLogSymbolicationParameters;
}

uint64_t Assertion.invalidationHandle.getter()
{
  sub_2447F0E2C();
  return swift_retain();
}

uint64_t Assertion.__allocating_init(_:description:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  Assertion.init(_:description:)(a1, a2, a3);
  return v6;
}

uint64_t sub_2447EF8B0(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD aBlock[3];
  void *v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;

  v4 = (uint64_t)v3;
  type metadata accessor for InvalidationHandle();
  v8 = swift_allocObject();
  type metadata accessor for SingleFireEvent();
  swift_allocObject();
  *(_QWORD *)(v8 + 96) = SingleFireEvent.init(description:)(0, 0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738B408);
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 28) = 0;
  *(_QWORD *)(v9 + 16) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v9 + 24) = 0;
  *(_QWORD *)(v8 + 104) = v9;
  *(_QWORD *)(v8 + 16) = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/Previews"
                         "Foundation/Assertion.swift";
  *(_QWORD *)(v8 + 24) = 121;
  *(_BYTE *)(v8 + 32) = 2;
  *(_OWORD *)(v8 + 40) = xmmword_2448EE8C0;
  *(_QWORD *)(v8 + 56) = "Assertion";
  *(_QWORD *)(v8 + 64) = 9;
  *(_BYTE *)(v8 + 72) = 2;
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  v3[2] = v8;
  v3[3] = a2;
  v3[4] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738B4A0);
  v10 = swift_allocObject();
  *(_DWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 16) = a1;
  v3[5] = v10;
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = a2;
  v11[3] = a3;
  v11[4] = v4;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = sub_2447F0FC0;
  *(_QWORD *)(v12 + 24) = v11;
  v22 = sub_2447F1030;
  v23 = v12;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2447F09C8;
  v21 = &block_descriptor_13;
  v13 = _Block_copy(aBlock);
  swift_retain_n();
  swift_bridgeObjectRetain();
  v14 = a1;
  swift_retain();
  swift_release();
  objc_msgSend(v14, sel_setInvalidationHandler_, v13);
  _Block_release(v13);
  swift_release_n();
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 96) + 16);
  swift_retain_n();
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v15 + 32));
  sub_2448E2998((_QWORD *)(v15 + 16), (uint64_t)sub_2447F0FCC, v4, (uint64_t)aBlock);
  os_unfair_lock_unlock((os_unfair_lock_t)(v15 + 32));
  swift_release();
  v16 = aBlock[0];
  if (aBlock[0])
  {
    sub_2448E1168((uint64_t)aBlock);
    sub_2447C6AE8(v16);
LABEL_5:
    swift_release_n();

    swift_release();
    return v4;
  }
  if (!(_BYTE)v21)
    goto LABEL_5;
  v17 = *(_QWORD *)(v4 + 40);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v17 + 24));
  v18 = *(void **)(v17 + 16);
  *(_QWORD *)(v17 + 16) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v17 + 24));
  swift_release();
  objc_msgSend(v18, sel_invalidate);
  swift_release_n();

  swift_release();
  return v4;
}

uint64_t Assertion.init(_:description:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void (*v15)(uint64_t (*)(void *), _QWORD *, uint64_t, uint64_t);
  uint64_t v17;

  v4 = (uint64_t)v3;
  v8 = *v3;
  type metadata accessor for InvalidationHandle();
  v9 = swift_allocObject();
  type metadata accessor for SingleFireEvent();
  swift_allocObject();
  *(_QWORD *)(v9 + 96) = SingleFireEvent.init(description:)(0, 0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738B408);
  v10 = swift_allocObject();
  *(_DWORD *)(v10 + 28) = 0;
  *(_QWORD *)(v10 + 16) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v10 + 24) = 0;
  *(_QWORD *)(v9 + 104) = v10;
  *(_QWORD *)(v9 + 16) = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/Previews"
                         "Foundation/Assertion.swift";
  *(_QWORD *)(v9 + 24) = 121;
  *(_BYTE *)(v9 + 32) = 2;
  *(_OWORD *)(v9 + 40) = xmmword_2448EE8C0;
  *(_QWORD *)(v9 + 56) = "Assertion";
  *(_QWORD *)(v9 + 64) = 9;
  *(_BYTE *)(v9 + 72) = 2;
  *(_QWORD *)(v9 + 80) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  v3[2] = v9;
  v3[3] = a2;
  v3[4] = a3;
  v17 = a1;
  v11 = *(_QWORD *)(v8 + 80);
  v12 = sub_2448EB508();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v4 + 40) = sub_24481320C(&v17, v12);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a2;
  v13[3] = a3;
  v13[4] = v4;
  v14 = *(_QWORD *)(v8 + 88);
  v15 = *(void (**)(uint64_t (*)(void *), _QWORD *, uint64_t, uint64_t))(v14 + 8);
  swift_retain();
  v15(sub_2447F0E38, v13, v11, v14);
  swift_release();
  v17 = v4;
  swift_retain();
  Invalidatable.onInvalidation(_:)((void (*)(uint64_t))sub_2447F0E44, v4, v8, (uint64_t)&protocol witness table for Assertion<A>);
  swift_release();
  swift_unknownObjectRelease();
  return v4;
}

uint64_t sub_2447EFDA8(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  _OWORD v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  char v27;
  const char *v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  const char *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;

  if (qword_257389CF0 != -1)
    swift_once();
  v8 = sub_2448EA5FC();
  __swift_project_value_buffer(v8, (uint64_t)qword_25738F7C8);
  swift_bridgeObjectRetain();
  v9 = a1;
  swift_bridgeObjectRetain();
  v10 = a1;
  v11 = sub_2448EA5E4();
  v12 = sub_2448EB388();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc();
    v14 = swift_slowAlloc();
    *(_QWORD *)&v23[0] = v14;
    *(_DWORD *)v13 = 136446466;
    swift_bridgeObjectRetain();
    v35 = sub_2447D6798(a2, a3, (uint64_t *)v23);
    sub_2448EB598();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 12) = 2080;
    v15 = 0xE000000000000000;
    if (a1)
    {
      v35 = 0;
      v36 = 0xE000000000000000;
      sub_2448EABC0();
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0A8);
      sub_2448EB91C();
      v16 = v35;
      v15 = v36;
    }
    else
    {
      v16 = 0;
    }
    v35 = sub_2447D6798(v16, v15, (uint64_t *)v23);
    sub_2448EB598();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_2447B9000, v11, v12, "Assertion \"%{public}s\" invalidated%s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24951AD84](v14, -1, -1);
    MEMORY[0x24951AD84](v13, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();

  }
  v17 = *(_QWORD *)(a4 + 16);
  v18 = *(_BYTE *)(v17 + 32);
  v19 = *(_BYTE *)(v17 + 72);
  v20 = *(_OWORD *)(v17 + 16);
  v23[0] = *(_OWORD *)(v17 + 80);
  v23[1] = v20;
  v24 = v18;
  v25 = *(_OWORD *)(v17 + 40);
  v26 = *(_OWORD *)(v17 + 56);
  v27 = v19;
  v28 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Assertion.swift";
  v29 = 121;
  v30 = 2;
  v31 = xmmword_2448EE8D0;
  v32 = "init(_:description:)";
  v33 = 20;
  v34 = 2;
  sub_2447F0FD4((uint64_t)v23);
  v21 = sub_2447F0FEC((uint64_t)v23, (uint64_t)&v35);
  MEMORY[0x24BDAC7A8](v21);
  swift_retain();
  sub_2448E0E98((void (*)(uint64_t (*)(), _QWORD *))sub_2447F1028);
  return swift_release();
}

uint64_t sub_2447F00E0(void *a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v7 = *a4;
  if (qword_257389CF0 != -1)
    swift_once();
  v8 = sub_2448EA5FC();
  __swift_project_value_buffer(v8, (uint64_t)qword_25738F7C8);
  swift_bridgeObjectRetain();
  v9 = a1;
  swift_bridgeObjectRetain();
  v10 = a1;
  v11 = sub_2448EA5E4();
  v12 = sub_2448EB388();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc();
    v14 = swift_slowAlloc();
    v16 = v14;
    *(_DWORD *)v13 = 136446466;
    swift_bridgeObjectRetain();
    sub_2447D6798(a2, a3, &v16);
    sub_2448EB598();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 12) = 2080;
    if (a1)
    {
      sub_2448EABC0();
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0A8);
      sub_2448EB91C();
    }
    sub_2447D6798(0, 0xE000000000000000, &v16);
    sub_2448EB598();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_2447B9000, v11, v12, "Assertion \"%{public}s\" invalidated%s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24951AD84](v14, -1, -1);
    MEMORY[0x24951AD84](v13, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();

  }
  return sub_2448B06EC((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Assertion.swift", 121, 2, 36, 28, (uint64_t)"init(_:description:)", 20, 2, v7, (uint64_t)&protocol witness table for Assertion<A>);
}

void sub_2447F038C(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  v2 = *(id *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  swift_release();
  objc_msgSend(v2, sel_invalidate);

}

uint64_t sub_2447F03F4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  _QWORD v9[3];

  v1 = *a1;
  v2 = a1[5];
  v9[0] = 0;
  v9[1] = v2;
  v3 = *(_QWORD *)(v1 + 80);
  sub_2448EB508();
  v4 = sub_2448EA5D8();
  v5 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v4);
  result = SynchronousAccessProviding<>.syncUpdate(file:line:column:function:to:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Assertion.swift", 121, 2, 40, 52, (uint64_t)"init(_:description:)", 20, 2, (uint64_t)v9, v4, v5);
  if (v9[2])
  {
    v7 = *(_QWORD *)(v1 + 88);
    v8 = *(void (**)(uint64_t, uint64_t))(v7 + 16);
    swift_unknownObjectRetain();
    v8(v3, v7);
    return swift_unknownObjectRelease_n();
  }
  return result;
}

Swift::Void __swiftcall Assertion.acquire()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 80);
  sub_2448EB508();
  v3 = sub_2448EA5D8();
  v4 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v3);
  SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Assertion.swift", 121, 2, 46, 43, (uint64_t)"acquire()", 9, 2, v3, v4);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 88) + 24))(v2);
    swift_unknownObjectRelease();
  }
  else
  {
    sub_244823F6C();
  }
}

uint64_t Assertion.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t Assertion.__deallocating_deinit()
{
  Assertion.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_2447F089C()
{
  sub_2447F0E2C();
  return swift_retain();
}

id RBSAssertion.onInvalidation(_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  void *v7;
  _QWORD v9[6];

  v3 = v2;
  if (!a1)
    return objc_msgSend(v2, sel_setInvalidationHandler_, 0);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v9[4] = sub_2447F0E70;
  v9[5] = v6;
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 1107296256;
  v9[2] = sub_2447F09C8;
  v9[3] = &block_descriptor_0;
  v7 = _Block_copy(v9);
  sub_2447F0EAC(a1);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_setInvalidationHandler_, v7);
  _Block_release(v7);
  return (id)sub_2447C8F84(a1);
}

void sub_2447F09C8(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(id, void *);
  id v6;
  id v7;

  v5 = *(void (**)(id, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(v7, a3);
  swift_release();

}

id sub_2447F0A40()
{
  void *v0;

  return objc_msgSend(v0, sel_invalidate);
}

id sub_2447F0A50()
{
  return sub_2447F0A64();
}

id sub_2447F0A64()
{
  void *v0;
  id v2;
  id v3[2];

  v3[1] = *(id *)MEMORY[0x24BDAC8D0];
  v3[0] = 0;
  if (objc_msgSend(v0, sel_acquireWithError_, v3))
    return v3[0];
  v2 = v3[0];
  sub_2448EA38C();

  return (id)swift_willThrow();
}

uint64_t Assertion<>.init(pid:domain:name:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  id v19;

  v10 = (void *)objc_opt_self();
  swift_bridgeObjectRetain();
  v11 = objc_msgSend(v10, sel_targetWithPid_, a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738B410);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_2448EE8F0;
  v13 = (void *)sub_2448EAA70();
  swift_bridgeObjectRelease();
  v14 = (void *)sub_2448EAA70();
  swift_bridgeObjectRelease();
  v15 = objc_msgSend((id)objc_opt_self(), sel_attributeWithDomain_name_, v13, v14);

  *(_QWORD *)(v12 + 32) = v15;
  sub_2448EAE00();
  v16 = objc_allocWithZone(MEMORY[0x24BE80B10]);
  v17 = (void *)sub_2448EAA70();
  swift_bridgeObjectRelease();
  sub_2447F0EBC();
  v18 = (void *)sub_2448EADDC();
  swift_bridgeObjectRelease();
  v19 = objc_msgSend(v16, sel_initWithExplanation_target_attributes_, v17, v11, v18);

  sub_2448EBB5C();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_allocObject();
  return sub_2447EF8B0(v19, a6, a7);
}

uint64_t sub_2447F0D5C(void (*a1)(void))
{
  a1();
  return _swift_stdlib_bridgeErrorToNSError();
}

void sub_2447F0D7C(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  void *v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = (void *)a4();
  v7 = *a1 + 8;
  sub_2448EB598();
  *a1 = v7;
  v8 = *a2;
  if (*a2)
  {
    *v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {

  }
}

uint64_t sub_2447F0E2C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_2447F0E38(void *a1)
{
  uint64_t v1;

  return sub_2447F00E0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t **)(v1 + 32));
}

uint64_t sub_2447F0E44()
{
  uint64_t *v0;

  return sub_2447F03F4(v0);
}

uint64_t sub_2447F0E4C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2447F0E70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 16))(a2);
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_2447F0EAC(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

unint64_t sub_2447F0EBC()
{
  unint64_t result;

  result = qword_25738B418[0];
  if (!qword_25738B418[0])
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, qword_25738B418);
  }
  return result;
}

uint64_t dispatch thunk of AssertionImpl.onInvalidation(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of AssertionImpl.invalidate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AssertionImpl.acquire()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_2447F0F20()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for Assertion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Assertion);
}

uint64_t method lookup function for Assertion()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Assertion.__allocating_init(_:description:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t objectdestroyTm_1()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2447F0FC0(void *a1)
{
  uint64_t v1;

  return sub_2447EFDA8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

void sub_2447F0FCC()
{
  uint64_t v0;

  sub_2447F038C(v0);
}

uint64_t sub_2447F0FD4(uint64_t result)
{
  uint64_t v1;

  v1 = *(unsigned __int8 *)(result + 96);
  *(_QWORD *)(result + 72) &= 0x1FFuLL;
  *(_QWORD *)(result + 96) = v1;
  return result;
}

uint64_t sub_2447F0FEC(uint64_t a1, uint64_t a2)
{
  __swift_memcpy137_8(a2, a1);
  return a2;
}

uint64_t sub_2447F1028(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v2;

  return sub_2448AF794(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t AgentSymbolTable.__allocating_init(dataProvider:)(__int128 *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  sub_2447F3530(a1, v2 + 16);
  return v2;
}

uint64_t AgentSymbolTable.init(dataProvider:)(__int128 *a1)
{
  uint64_t v1;

  sub_2447F3530(a1, v1 + 16);
  return v1;
}

uint64_t AgentSymbolTable.orderedSymbolAddresses.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[5];
  v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

Swift::String __swiftcall AgentSymbolTable.symbolName(for:)(Swift::UInt64 a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  Swift::String result;

  v3 = v1[5];
  v4 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v3);
  v5 = (*(uint64_t (**)(Swift::UInt64, uint64_t, uint64_t))(v4 + 24))(a1, v3, v4);
  if (!v6)
  {
    v5 = 0x746164206461623CLL;
    v6 = (void *)0xEA00000000003E61;
  }
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

Swift::String_optional __swiftcall AgentSymbolTable.symbolName(covering:)(Swift::UInt64 covering)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Swift::UInt64 v10;
  uint64_t v12;
  uint64_t v13;
  Swift::String_optional result;

  v2 = v1;
  v4 = v1 + 2;
  v5 = v1[5];
  v6 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
  v8 = sub_2447F1254(covering, v7);
  if ((v9 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_13:
    v8 = 0;
    v9 = 0;
    goto LABEL_16;
  }
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v8 >= *(_QWORD *)(v7 + 16))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v10 = *(_QWORD *)(v7 + 8 * v8 + 32);
  swift_bridgeObjectRelease();
  if (covering <= v10 || (covering - v10) >> 20 != 0)
    goto LABEL_13;
  v13 = v2[5];
  v12 = v2[6];
  __swift_project_boxed_opaque_existential_1(v4, v13);
  v8 = (*(uint64_t (**)(Swift::UInt64, uint64_t, uint64_t))(v12 + 24))(v10, v13, v12);
  if (!v9)
  {
    v8 = 0x746164206461623CLL;
    v9 = 0xEA00000000003E61;
  }
LABEL_16:
  result.value._object = (void *)v9;
  result.value._countAndFlagsBits = v8;
  return result;
}

uint64_t sub_2447F1254(unint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t result;
  int64_t v5;
  int64_t v6;
  unint64_t v7;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  result = 0;
  v5 = 0;
  v6 = v2 - 1;
  while (!__OFSUB__(v6, v5))
  {
    v7 = v5 + (v6 - v5) / 2;
    if (__OFADD__(v5, (v6 - v5) / 2))
      goto LABEL_13;
    if (v7 >= v2)
      goto LABEL_14;
    if (*(_QWORD *)(a2 + 32 + 8 * v7) > a1)
    {
      v6 = v7 - 1;
    }
    else
    {
      result = v5 + (v6 - v5) / 2;
      v5 = v7 + 1;
    }
    if (v6 < v5)
      return result;
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t AgentSymbolTable.symbolCount.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[5];
  v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t AgentSymbolTable.augmentCrashReport(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t (*v49)(unint64_t, uint64_t, uint64_t);
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  _QWORD *v54;
  __int128 v55;

  v3 = v2;
  v6 = v2[5];
  v7 = v2[6];
  v54 = v2 + 2;
  __swift_project_boxed_opaque_existential_1(v2 + 2, v6);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(v6, v7);
  sub_2447F1688(a1, a2);
  v9 = type metadata accessor for CrashReport(0);
  v10 = *(_QWORD **)(a2 + *(int *)(v9 + 44));
  v11 = v10[2];
  if (!v11)
    return swift_bridgeObjectRelease();
  v12 = 0;
  v13 = v8 + 32;
  v47 = a2;
  v48 = v2;
  v45 = v9;
  v46 = v8;
  v43 = v10[2];
  v44 = *(int *)(v9 + 44);
  while (1)
  {
    if (v12 >= v10[2])
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    v14 = &v10[10 * v12];
    if (!v14[7])
    {
      v15 = v14[4];
      if ((v15 & 0x8000000000000000) != 0)
        goto LABEL_42;
      v16 = *(_QWORD *)(a2 + *(int *)(v9 + 40));
      if (v15 >= *(_QWORD *)(v16 + 16))
        goto LABEL_43;
      v17 = *(_QWORD *)(v16 + 72 * v15 + 64);
      if (v17 < 0)
        goto LABEL_46;
      v18 = v14[5];
      if (v18 < 0)
        goto LABEL_46;
      v19 = *(_QWORD *)(v8 + 16);
      if (v19)
      {
        v20 = 0;
        v21 = 0;
        v22 = v14[8];
        v23 = *((_BYTE *)v14 + 72);
        v24 = v14[10];
        v25 = *(_OWORD *)(v14 + 11);
        v26 = v17 + v18;
        v27 = v19 - 1;
        v28 = 1;
        v29 = *((_BYTE *)v14 + 104);
        do
        {
          while (1)
          {
            if (__OFSUB__(v27, v21))
            {
              __break(1u);
LABEL_39:
              __break(1u);
LABEL_40:
              __break(1u);
              goto LABEL_41;
            }
            v30 = v21 + (v27 - v21) / 2;
            if (__OFADD__(v21, (v27 - v21) / 2))
              goto LABEL_39;
            if (v30 >= v19)
              goto LABEL_40;
            if (v26 < *(_QWORD *)(v13 + 8 * v30))
              break;
            v28 = 0;
            v21 = v30 + 1;
            v20 = v30;
            if (v27 <= (uint64_t)v30)
              goto LABEL_21;
          }
          v27 = v30 - 1;
        }
        while ((uint64_t)(v30 - 1) >= v21);
        v30 = v20;
        if ((v28 & 1) != 0)
          goto LABEL_3;
LABEL_21:
        if (v30 >= v19)
          goto LABEL_44;
        v31 = *(_QWORD *)(v13 + 8 * v30);
        if (v26 > v31 && (v26 - v31) >> 20 == 0)
          break;
      }
    }
LABEL_3:
    if (++v12 == v11)
      return swift_bridgeObjectRelease();
  }
  v50 = v29;
  v51 = v24;
  v52 = v23;
  v53 = v22;
  v33 = v3;
  v34 = v3[5];
  v35 = v33[6];
  v55 = v25;
  __swift_project_boxed_opaque_existential_1(v54, v34);
  v49 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v35 + 24);
  swift_bridgeObjectRetain();
  v36 = v49(v31, v34, v35);
  v38 = v37;
  swift_bridgeObjectRelease();
  if (v38)
    v39 = v36;
  else
    v39 = 0x746164206461623CLL;
  if (v38)
    v40 = v38;
  else
    v40 = 0xEA00000000003E61;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v10 = sub_2447F2664(v10);
  if (v12 < v10[2])
  {
    v41 = &v10[10 * v12];
    v41[4] = v15;
    v41[5] = v18;
    v41[6] = v39;
    v41[7] = v40;
    v41[8] = v53;
    *((_BYTE *)v41 + 72) = v52;
    v41[10] = v51;
    *(_OWORD *)(v41 + 11) = v55;
    *((_BYTE *)v41 + 104) = v50;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a2 = v47;
    v3 = v48;
    v9 = v45;
    *(_QWORD *)(v47 + v44) = v10;
    v8 = v46;
    v11 = v43;
    goto LABEL_3;
  }
LABEL_45:
  __break(1u);
LABEL_46:
  result = sub_2448EB994();
  __break(1u);
  return result;
}

uint64_t sub_2447F1688(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CrashReport(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t AgentSymbolTable.mappingSize.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[5];
  v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
}

uint64_t AgentSymbolTable.swiftEntrySectionPointer.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[5];
  v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(v1, v2);
}

uint64_t AgentSymbolTable.mappingSizeDescription.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_2448EB79C();
  swift_bridgeObjectRelease();
  v1 = v0[5];
  v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  sub_2448EBB5C();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  v4 = v0[5];
  v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v4);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v4, v3);
  sub_2448EBB5C();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  return 0x3A736C6F626D7973;
}

uint64_t AgentSymbolTable.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return v0;
}

uint64_t AgentSymbolTable.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocClassInstance();
}

uint64_t SwiftEntrySectionPayload.sectionStart.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t SwiftEntrySectionPayload.sectionStart.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*SwiftEntrySectionPayload.sectionStart.modify())()
{
  return nullsub_1;
}

uint64_t SwiftEntrySectionPayload.init(sectionStart:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t SwiftEntrySectionPayload.init(jsonPayload:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;

  sub_2448EA1F4();
  swift_allocObject();
  sub_2448EA1E8();
  v7 = sub_2447F19C0(a1, a2);
  v9 = v8;
  sub_2447F2678();
  sub_2448EA1DC();
  swift_release();
  result = sub_2447E74B0(v7, v9);
  if (!v3)
    *a3 = v11;
  return result;
}

uint64_t sub_2447F19C0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v14[2];
  uint64_t v15;
  __int128 v16;
  _QWORD v17[7];

  v17[5] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v16 = a1;
  *((_QWORD *)&v16 + 1) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738B5B8);
  if (!swift_dynamicCast())
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    sub_2447F3494((uint64_t)v14);
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_20;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v17[0] = a1;
      v17[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v4 = (char *)v17 + (HIBYTE(a2) & 0xF);
      v5 = v17;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        v2 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v3 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v2 = sub_2448EB820();
      }
      if (v2)
        v4 = (_BYTE *)(v2 + v3);
      else
        v4 = 0;
      v5 = (_BYTE *)v2;
    }
    v6 = sub_2447F32B0(v5, v4);
    v8 = v7;
    if (v7 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)&v14[0] = v6;
      *((_QWORD *)&v14[0] + 1) = v8;
      return *(_QWORD *)&v14[0];
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_20:
      v9 = sub_2448EABE4();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v9 = HIBYTE(a2) & 0xF;
    }
    else
    {
      v9 = a1 & 0xFFFFFFFFFFFFLL;
    }
    *(_QWORD *)&v14[0] = sub_2447F3314(v9);
    *((_QWORD *)&v14[0] + 1) = v10;
    MEMORY[0x24BDAC7A8](*(_QWORD *)&v14[0]);
    sub_2447F2BFC();
    __asm { BR              X12 }
  }
  sub_2447F3530(v14, (uint64_t)v17);
  __swift_project_boxed_opaque_existential_1(v17, v17[3]);
  sub_2448EA308();
  swift_bridgeObjectRelease();
  v14[0] = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return *(_QWORD *)&v14[0];
}

char *SwiftEntrySectionPayload.jsonPayload.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  _QWORD v14[2];

  v2 = sub_2448EAADC();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  sub_2448EA218();
  swift_allocObject();
  sub_2448EA20C();
  v14[1] = v5;
  sub_2447F26BC();
  v6 = sub_2448EA200();
  if (!v1)
  {
    v8 = v6;
    v9 = v7;
    sub_2448EAAC4();
    v4 = (char *)sub_2448EAAAC();
    v11 = v10;
    sub_2447E74B0(v8, v9);
    if (!v11)
    {
      sub_2447F2700();
      swift_allocError();
      *v13 = v4;
      v13[1] = 0;
      v13[2] = v4;
      v13[3] = 0;
      swift_willThrow();
    }
  }
  swift_release();
  return v4;
}

uint64_t sub_2447F1FFC()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_2447F2028()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_2447F2054()
{
  return 0;
}

uint64_t sub_2447F205C()
{
  uint64_t *v0;

  return sub_244850AAC(*v0, v0[1], v0[2], v0[3]);
}

uint64_t SwiftEntrySectionPayload.hash(into:)()
{
  return sub_2448EBD30();
}

BOOL static SwiftEntrySectionPayload.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2447F20A4()
{
  sub_2448EBD00();
  sub_2448EBD0C();
  return sub_2448EBD3C();
}

uint64_t sub_2447F20E4()
{
  return sub_2448EBD0C();
}

uint64_t sub_2447F2108()
{
  sub_2448EBD00();
  sub_2448EBD0C();
  return sub_2448EBD3C();
}

uint64_t sub_2447F2144()
{
  return 0x536E6F6974636573;
}

uint64_t sub_2447F2164@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x536E6F6974636573 && a2 == 0xEC00000074726174)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_2448EBBEC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_2447F2210()
{
  return 0;
}

void sub_2447F221C(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_2447F2228()
{
  sub_2447F2744();
  return sub_2448EBD9C();
}

uint64_t sub_2447F2250()
{
  sub_2447F2744();
  return sub_2448EBDA8();
}

uint64_t SwiftEntrySectionPayload.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738B4C0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2447F2744();
  sub_2448EBD6C();
  sub_2448EBB08();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t SwiftEntrySectionPayload.hashValue.getter()
{
  sub_2448EBD00();
  sub_2448EBD30();
  return sub_2448EBD3C();
}

uint64_t SwiftEntrySectionPayload.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738B4D0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2447F2744();
  sub_2448EBD60();
  if (!v2)
  {
    v9 = sub_2448EBAF0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_2447F24A8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return SwiftEntrySectionPayload.init(from:)(a1, a2);
}

uint64_t sub_2447F24BC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738B4C0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2447F2744();
  sub_2448EBD6C();
  sub_2448EBB08();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_2447F25A4()
{
  sub_2448EBD00();
  sub_2448EBD30();
  return sub_2448EBD3C();
}

uint64_t sub_2447F25E8()
{
  return sub_2448EBD30();
}

uint64_t sub_2447F2610()
{
  sub_2448EBD00();
  sub_2448EBD30();
  return sub_2448EBD3C();
}

_QWORD *sub_2447F2650(_QWORD *a1)
{
  return sub_2447C1EC0(0, a1[2], 0, a1);
}

_QWORD *sub_2447F2664(_QWORD *a1)
{
  return sub_2447C2340(0, a1[2], 0, a1);
}

unint64_t sub_2447F2678()
{
  unint64_t result;

  result = qword_25738B4A8;
  if (!qword_25738B4A8)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for SwiftEntrySectionPayload, &type metadata for SwiftEntrySectionPayload);
    atomic_store(result, (unint64_t *)&qword_25738B4A8);
  }
  return result;
}

unint64_t sub_2447F26BC()
{
  unint64_t result;

  result = qword_25738B4B0;
  if (!qword_25738B4B0)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for SwiftEntrySectionPayload, &type metadata for SwiftEntrySectionPayload);
    atomic_store(result, (unint64_t *)&qword_25738B4B0);
  }
  return result;
}

unint64_t sub_2447F2700()
{
  unint64_t result;

  result = qword_25738B4B8;
  if (!qword_25738B4B8)
  {
    result = MEMORY[0x24951AC70](&unk_2448EECE8, &type metadata for SwiftEntrySectionPayload.CouldNotConvertJSONPayloadToString);
    atomic_store(result, (unint64_t *)&qword_25738B4B8);
  }
  return result;
}

unint64_t sub_2447F2744()
{
  unint64_t result;

  result = qword_25738B4C8;
  if (!qword_25738B4C8)
  {
    result = MEMORY[0x24951AC70](&unk_2448EEC98, &type metadata for SwiftEntrySectionPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25738B4C8);
  }
  return result;
}

unint64_t sub_2447F278C()
{
  unint64_t result;

  result = qword_25738B4D8;
  if (!qword_25738B4D8)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for SwiftEntrySectionPayload, &type metadata for SwiftEntrySectionPayload);
    atomic_store(result, (unint64_t *)&qword_25738B4D8);
  }
  return result;
}

uint64_t type metadata accessor for AgentSymbolTable()
{
  return objc_opt_self();
}

uint64_t method lookup function for AgentSymbolTable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AgentSymbolTable.__allocating_init(dataProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of AgentSymbolTable.DataProvider.symbolCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AgentSymbolTable.DataProvider.orderedSymbolAddresses.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AgentSymbolTable.DataProvider.symbolName(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of AgentSymbolTable.DataProvider.mappingSize.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of AgentSymbolTable.DataProvider.swiftEntrySectionPointer.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

ValueMetadata *type metadata accessor for SwiftEntrySectionPayload()
{
  return &type metadata for SwiftEntrySectionPayload;
}

uint64_t getEnumTagSinglePayload for SwiftEntrySectionPayload.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for SwiftEntrySectionPayload.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2447F28EC + 4 * byte_2448EE9C0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2447F290C + 4 * byte_2448EE9C5[v4]))();
}

_BYTE *sub_2447F28EC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2447F290C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2447F2914(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2447F291C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2447F2924(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2447F292C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SwiftEntrySectionPayload.CodingKeys()
{
  return &type metadata for SwiftEntrySectionPayload.CodingKeys;
}

uint64_t getEnumTagSinglePayload for SwiftEntrySectionPayload.CouldNotConvertJSONPayloadToString(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SwiftEntrySectionPayload.CouldNotConvertJSONPayloadToString(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SwiftEntrySectionPayload.CouldNotConvertJSONPayloadToString()
{
  return &type metadata for SwiftEntrySectionPayload.CouldNotConvertJSONPayloadToString;
}

unint64_t sub_2447F2A0C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_2447F2A38();
  result = sub_2447F2A7C();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_2447F2A38()
{
  unint64_t result;

  result = qword_25738B580;
  if (!qword_25738B580)
  {
    result = MEMORY[0x24951AC70](&unk_2448EEB7C, &type metadata for SwiftEntrySectionPayload.CouldNotConvertJSONPayloadToString);
    atomic_store(result, (unint64_t *)&qword_25738B580);
  }
  return result;
}

unint64_t sub_2447F2A7C()
{
  unint64_t result;

  result = qword_25738B588;
  if (!qword_25738B588)
  {
    result = MEMORY[0x24951AC70](&unk_2448EEB54, &type metadata for SwiftEntrySectionPayload.CouldNotConvertJSONPayloadToString);
    atomic_store(result, (unint64_t *)&qword_25738B588);
  }
  return result;
}

unint64_t sub_2447F2AC4()
{
  unint64_t result;

  result = qword_25738B590;
  if (!qword_25738B590)
  {
    result = MEMORY[0x24951AC70](&unk_2448EEC70, &type metadata for SwiftEntrySectionPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25738B590);
  }
  return result;
}

unint64_t sub_2447F2B0C()
{
  unint64_t result;

  result = qword_25738B598;
  if (!qword_25738B598)
  {
    result = MEMORY[0x24951AC70](&unk_2448EEBE0, &type metadata for SwiftEntrySectionPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25738B598);
  }
  return result;
}

unint64_t sub_2447F2B54()
{
  unint64_t result;

  result = qword_25738B5A0;
  if (!qword_25738B5A0)
  {
    result = MEMORY[0x24951AC70](&unk_2448EEC08, &type metadata for SwiftEntrySectionPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25738B5A0);
  }
  return result;
}

_QWORD *sub_2447F2B98(_QWORD *a1)
{
  return sub_2447C2D58(0, a1[2], 0, a1);
}

_QWORD *sub_2447F2BAC(_QWORD *a1)
{
  return sub_2447C2E74(0, a1[2], 0, a1);
}

_QWORD *sub_2447F2BC0(_QWORD *a1)
{
  return sub_2447C31FC(0, a1[2], 0, a1);
}

_QWORD *sub_2447F2BD4(_QWORD *a1)
{
  return sub_2447C1B70(0, a1[2], 0, a1);
}

_QWORD *sub_2447F2BE8(_QWORD *a1)
{
  return sub_2447C245C(0, a1[2], 0, a1);
}

void sub_2447F2BFC()
{
  __asm { BR              X11 }
}

_QWORD *sub_2447F2C5C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;

  v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  v10 = BYTE4(a1);
  v11 = BYTE5(a1);
  v12 = BYTE6(a1);
  result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2)
    result = v7;
  v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *v1 = v8;
  v1[1] = v6;
  return result;
}

_BYTE *sub_2447F2EEC@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_2447F30F8(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_2447F31B8((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_2447F3230((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

_QWORD *sub_2447F2F60(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a3)
  {
    result = a1(&v6, a3, a4 - a3);
    if (v4)
      return result;
    return (_QWORD *)v6;
  }
  result = a1(&v6, 0, 0);
  if (!v4)
    return (_QWORD *)v6;
  return result;
}

char *sub_2447F2FC4(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)sub_2448EA2A8();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)sub_2448EA2CC();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = sub_2448EA2C0();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

uint64_t sub_2447F3070@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  char v3;
  uint64_t v4;

  if (result)
  {
    swift_bridgeObjectRetain();
    result = sub_2448EB7A8();
    if ((v3 & 1) == 0)
    {
      v4 = result;
      result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_2447F30F8(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_2447F31B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_2448EA2D8();
  swift_allocObject();
  result = sub_2448EA29C();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_2448EA44C();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_2447F3230(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_2448EA2D8();
  swift_allocObject();
  result = sub_2448EA29C();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

_BYTE *sub_2447F32B0(_BYTE *result, _BYTE *a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (_BYTE *)sub_2447F30F8(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (_BYTE *)sub_2447F31B8((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (_BYTE *)sub_2447F3230((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t sub_2447F3314(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      sub_2448EA2D8();
      swift_allocObject();
      sub_2448EA2B4();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_2448EA44C();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t sub_2447F33B0(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  unint64_t v10;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738B5A8);
  v10 = sub_2447F3448();
  v8[0] = a1;
  v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  v3 = (_BYTE *)(*v2 + 32);
  v4 = &v3[*(_QWORD *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  sub_2447F2EEC(v3, v4, &v7);
  v5 = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v5;
}

unint64_t sub_2447F3448()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25738B5B0;
  if (!qword_25738B5B0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738B5A8);
    result = MEMORY[0x24951AC70](MEMORY[0x24BDCFBE0], v1);
    atomic_store(result, (unint64_t *)&qword_25738B5B0);
  }
  return result;
}

uint64_t sub_2447F3494(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738B5C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_2447F34D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[2];

  v5 = *(uint64_t **)(v3 + 16);
  v7 = *v5;
  v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  result = sub_2447F2F60((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_2447F3548, (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_2447F3530(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_2447F3548@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_2447F3070(a1, a2);
}

uint64_t sub_2447F3564@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2447F1688(v1, a1);
}

uint64_t sub_2447F3570()
{
  return sub_2447F3584();
}

uint64_t sub_2447F3578()
{
  return sub_2447F3584();
}

uint64_t sub_2447F3584()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CrashReport(0) + 20));
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  return v2;
}

uint64_t *_s20IndexOutOfRangeErrorVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v4 = type metadata accessor for CrashReport(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v25 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = (int *)v4;
    v7 = sub_2448EA548();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = v6[5];
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    v12 = v6[6];
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    *(_DWORD *)((char *)a1 + v6[7]) = *(_DWORD *)((char *)a2 + v6[7]);
    v16 = v6[8];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_2448EA500();
    v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20(v17, v18, v19);
    *(uint64_t *)((char *)a1 + v6[9]) = *(uint64_t *)((char *)a2 + v6[9]);
    *(uint64_t *)((char *)a1 + v6[10]) = *(uint64_t *)((char *)a2 + v6[10]);
    *(uint64_t *)((char *)a1 + v6[11]) = *(uint64_t *)((char *)a2 + v6[11]);
    v21 = v6[12];
    v22 = (uint64_t *)((char *)a1 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t _s20IndexOutOfRangeErrorVwxx(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = sub_2448EA548();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  v3 = type metadata accessor for CrashReport(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(v3 + 32);
  v5 = sub_2448EA500();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s20IndexOutOfRangeErrorVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v4 = sub_2448EA548();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  v5 = (int *)type metadata accessor for CrashReport(0);
  v6 = v5[5];
  v7 = (_QWORD *)(a1 + v6);
  v8 = (_QWORD *)(a2 + v6);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  v10 = v5[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  *(_DWORD *)(a1 + v5[7]) = *(_DWORD *)(a2 + v5[7]);
  v14 = v5[8];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = sub_2448EA500();
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18(v15, v16, v17);
  *(_QWORD *)(a1 + v5[9]) = *(_QWORD *)(a2 + v5[9]);
  *(_QWORD *)(a1 + v5[10]) = *(_QWORD *)(a2 + v5[10]);
  *(_QWORD *)(a1 + v5[11]) = *(_QWORD *)(a2 + v5[11]);
  v19 = v5[12];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s20IndexOutOfRangeErrorVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;

  v4 = sub_2448EA548();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  v5 = (int *)type metadata accessor for CrashReport(0);
  v6 = v5[5];
  v7 = (_QWORD *)(a1 + v6);
  v8 = (_QWORD *)(a2 + v6);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = v5[6];
  v10 = (_QWORD *)(a1 + v9);
  v11 = (_QWORD *)(a2 + v9);
  *v10 = *v11;
  v10[1] = v11[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + v5[7]) = *(_DWORD *)(a2 + v5[7]);
  v12 = v5[8];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_2448EA500();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  *(_QWORD *)(a1 + v5[9]) = *(_QWORD *)(a2 + v5[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v5[10]) = *(_QWORD *)(a2 + v5[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v5[11]) = *(_QWORD *)(a2 + v5[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = v5[12];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  *v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s20IndexOutOfRangeErrorVwtk(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_2448EA548();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  v5 = (int *)type metadata accessor for CrashReport(0);
  *(_OWORD *)(a1 + v5[5]) = *(_OWORD *)(a2 + v5[5]);
  *(_OWORD *)(a1 + v5[6]) = *(_OWORD *)(a2 + v5[6]);
  *(_DWORD *)(a1 + v5[7]) = *(_DWORD *)(a2 + v5[7]);
  v6 = v5[8];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_2448EA500();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_QWORD *)(a1 + v5[9]) = *(_QWORD *)(a2 + v5[9]);
  *(_QWORD *)(a1 + v5[10]) = *(_QWORD *)(a2 + v5[10]);
  *(_QWORD *)(a1 + v5[11]) = *(_QWORD *)(a2 + v5[11]);
  *(_OWORD *)(a1 + v5[12]) = *(_OWORD *)(a2 + v5[12]);
  return a1;
}

uint64_t _s20IndexOutOfRangeErrorVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  v4 = sub_2448EA548();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  v5 = (int *)type metadata accessor for CrashReport(0);
  v6 = v5[5];
  v7 = (_QWORD *)(a1 + v6);
  v8 = (uint64_t *)(a2 + v6);
  v10 = *v8;
  v9 = v8[1];
  *v7 = v10;
  v7[1] = v9;
  swift_bridgeObjectRelease();
  v11 = v5[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v15 = *v13;
  v14 = v13[1];
  *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + v5[7]) = *(_DWORD *)(a2 + v5[7]);
  v16 = v5[8];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = sub_2448EA500();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v17, v18, v19);
  *(_QWORD *)(a1 + v5[9]) = *(_QWORD *)(a2 + v5[9]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v5[10]) = *(_QWORD *)(a2 + v5[10]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v5[11]) = *(_QWORD *)(a2 + v5[11]);
  swift_bridgeObjectRelease();
  v20 = v5[12];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (uint64_t *)(a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s17GenericCrashErrorVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2447F3CC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CrashReport(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t _s17GenericCrashErrorVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2447F3D0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CrashReport(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for CrashReportError.GenericCrashError()
{
  uint64_t result;

  result = qword_25738B620;
  if (!qword_25738B620)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_2447F3D88()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CrashReport(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t NSTask.standardOutputPipe.getter()
{
  return sub_2447F3F40((SEL *)&selRef_standardOutput);
}

uint64_t sub_2447F3DFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738B658);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2447F3E44(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738B658);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_2447F3E84()
{
  unint64_t result;

  result = qword_25738B660;
  if (!qword_25738B660)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25738B660);
  }
  return result;
}

void NSTask.standardOutputPipe.setter(void *a1)
{
  void *v1;

  objc_msgSend(v1, sel_setStandardOutput_, a1);

}

void (*NSTask.standardOutputPipe.modify(uint64_t *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = NSTask.standardOutputPipe.getter();
  return sub_2447F3F28;
}

void sub_2447F3F28(uint64_t a1, uint64_t a2)
{
  sub_2447F4064(a1, a2, (SEL *)&selRef_setStandardOutput_);
}

uint64_t NSTask.standardErrorPipe.getter()
{
  return sub_2447F3F40((SEL *)&selRef_standardError);
}

uint64_t sub_2447F3F40(SEL *a1)
{
  void *v1;
  uint64_t v3;
  _OWORD v4[2];
  _BYTE v5[24];
  uint64_t v6;

  if (objc_msgSend(v1, *a1))
  {
    sub_2448EB664();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  sub_2447F3DFC((uint64_t)v4, (uint64_t)v5);
  if (v6)
  {
    sub_2447F3E84();
    if (swift_dynamicCast())
      return v3;
    else
      return 0;
  }
  else
  {
    sub_2447F3E44((uint64_t)v5);
    return 0;
  }
}

void NSTask.standardErrorPipe.setter(void *a1)
{
  void *v1;

  objc_msgSend(v1, sel_setStandardError_, a1);

}

void (*NSTask.standardErrorPipe.modify(uint64_t *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = NSTask.standardErrorPipe.getter();
  return sub_2447F4058;
}

void sub_2447F4058(uint64_t a1, uint64_t a2)
{
  sub_2447F4064(a1, a2, (SEL *)&selRef_setStandardError_);
}

void sub_2447F4064(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v3;

  v3 = *(id *)a1;
  objc_msgSend(*(id *)(a1 + 8), *a3, *(_QWORD *)a1);

}

uint64_t NSTask.makeStream(for:)(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738B668);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (uint64_t)objc_msgSend(v2, sel_isRunning);
  if ((result & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    MEMORY[0x24BDAC7A8](result);
    *(&v9 - 2) = (uint64_t)v2;
    *(&v9 - 1) = a1;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BEE6A10], v4);
    return sub_2448EB01C();
  }
  return result;
}

void sub_2447F4194(uint64_t a1, void *a2)
{
  id v4;
  id v5;
  id v6;

  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1740]), sel_init);
  v4 = a2;
  v5 = v6;
  swift_setAtReferenceWritableKeyPath();

  sub_2447F5000(v5, a1);
}

void sub_2447F421C(uint64_t a1)
{
  uint64_t v1;

  sub_2447F4194(a1, *(void **)(v1 + 16));
}

uint64_t NSTask.makeCombinedStream()()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  uint64_t v7;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738B668);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (uint64_t)objc_msgSend(v1, sel_isRunning);
  if ((result & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    MEMORY[0x24BDAC7A8](result);
    *(&v7 - 2) = (uint64_t)v1;
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE6A10], v2);
    return sub_2448EB01C();
  }
  return result;
}

void sub_2447F431C(uint64_t a1, void *a2)
{
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1740]), sel_init);
  objc_msgSend(a2, sel_setStandardOutput_, v4);
  objc_msgSend(a2, sel_setStandardError_, v4);
  sub_2447F5000(v4, a1);

}

void sub_2447F4398(uint64_t a1)
{
  uint64_t v1;

  sub_2447F431C(a1, *(void **)(v1 + 16));
}

void sub_2447F43A0(void *a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(qword_25738B6A8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = sub_2448EA494();
  MEMORY[0x24BDAC7A8](v6);
  v3 = objc_msgSend(a1, sel_availableData, v6);
  sub_2448EA47C();
  v5 = v4;

  __asm { BR              X10 }
}

uint64_t NSTask.run(interruptible:)(char a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = v1;
  *(_BYTE *)(v2 + 56) = a1;
  return swift_task_switch();
}

uint64_t sub_2447F4610()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 56);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_BYTE *)(v3 + 24) = v2;
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v4;
  *(_BYTE *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v1;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v5;
  *v5 = v0;
  v5[1] = sub_2447F46C4;
  return sub_2448EBBF8();
}

uint64_t sub_2447F46C4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t sub_2447F4738()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2447F4744()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2447F4780(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_BYTE *)(v3 + 48) = a3;
  *(_QWORD *)(v3 + 16) = a2;
  return swift_task_switch();
}

uint64_t sub_2447F479C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_BYTE *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_BYTE *)(v3 + 24) = v1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v4;
  *v4 = v0;
  v4[1] = sub_2447F4844;
  return sub_2448EBC34();
}

uint64_t sub_2447F4844()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2447F48B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  if (*(_BYTE *)(v0 + 48) == 1 && (v1 = *(_QWORD *)(v0 + 40), sub_2448EB070(), v1))
    v2 = *(uint64_t (**)(void))(v0 + 8);
  else
    v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_2447F4908()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2447F493C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v4 = swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_2447C62E8;
  *(_BYTE *)(v4 + 48) = v3;
  *(_QWORD *)(v4 + 16) = v2;
  return swift_task_switch();
}

uint64_t sub_2447F49A4(uint64_t a1, void *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  void *v12;
  id v13;
  uint64_t result;
  id v15;
  void *v16;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738B698);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&aBlock[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = (char *)swift_allocObject();
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v11[v10], v9, v6);
  aBlock[4] = sub_2447F4FA8;
  aBlock[5] = v11;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_2447F45F0;
  aBlock[3] = &block_descriptor_1;
  v12 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, sel_setTerminationHandler_, v12);
  _Block_release(v12);
  if ((a3 & 1) != 0)
    sub_2448EB070();
  aBlock[0] = 0;
  if (objc_msgSend(a2, sel_launchAndReturnError_, aBlock))
  {
    v13 = aBlock[0];
    result = sub_2448EB064();
    if ((result & 1) == 0)
      return result;
  }
  else
  {
    v15 = aBlock[0];
    v16 = (void *)sub_2448EA38C();

    swift_willThrow();
    objc_msgSend(a2, sel_setTerminationHandler_, 0);
    aBlock[0] = v16;
    sub_2448EAF2C();
    result = sub_2448EB064();
    if ((result & 1) == 0)
      return result;
  }
  if ((a3 & 1) != 0)
  {
    result = (uint64_t)objc_msgSend(a2, sel_isRunning);
    if ((_DWORD)result)
      return (uint64_t)objc_msgSend(a2, sel_terminate);
  }
  return result;
}

void sub_2447F4BB8(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t sub_2447F4C08(uint64_t result, id a2)
{
  if ((result & 1) != 0)
  {
    result = (uint64_t)objc_msgSend(a2, sel_isRunning);
    if ((_DWORD)result)
      return (uint64_t)objc_msgSend(a2, sel_terminate);
  }
  return result;
}

void sub_2447F4C54()
{
  uint64_t v0;
  void *v1;

  if (*(_BYTE *)(v0 + 16) == 1)
  {
    v1 = *(void **)(v0 + 24);
    if (objc_msgSend(v1, sel_isRunning))
      objc_msgSend(v1, sel_terminate);
  }
}

Swift::Bool __swiftcall NSTask.hasNonZeroExit()()
{
  void *v0;
  Swift::Bool result;

  result = objc_msgSend(v0, sel_isRunning);
  if (!result)
    return objc_msgSend(v0, sel_terminationReason) != (id)1
        || objc_msgSend(v0, sel_terminationStatus) != 0;
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSTask.checkNonZeroExit()()
{
  void *v0;

  if ((objc_msgSend(v0, sel_isRunning) & 1) != 0)
  {
    __break(1u);
  }
  else if (objc_msgSend(v0, sel_terminationReason) != (id)1 || objc_msgSend(v0, sel_terminationStatus))
  {
    sub_2447F4D98();
    swift_allocError();
    swift_willThrow();
  }
}

unint64_t sub_2447F4D98()
{
  unint64_t result;

  result = qword_25738B688;
  if (!qword_25738B688)
  {
    result = MEMORY[0x24951AC70](&unk_2448EEE0C, &type metadata for ProcessError);
    atomic_store(result, (unint64_t *)&qword_25738B688);
  }
  return result;
}

uint64_t sub_2447F4DDC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = NSTask.standardOutputPipe.getter();
  *a1 = result;
  return result;
}

id sub_2447F4E04(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setStandardOutput_, *a1);
}

uint64_t sub_2447F4E18@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = NSTask.standardErrorPipe.getter();
  *a1 = result;
  return result;
}

id sub_2447F4E40(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setStandardError_, *a1);
}

uint64_t storeEnumTagSinglePayload for ProcessError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2447F4E94 + 4 * asc_2448EED70[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2447F4EB4 + 4 * byte_2448EED75[v4]))();
}

_BYTE *sub_2447F4E94(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2447F4EB4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2447F4EBC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2447F4EC4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2447F4ECC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2447F4ED4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ProcessError()
{
  return &type metadata for ProcessError;
}

unint64_t sub_2447F4EF4()
{
  unint64_t result;

  result = qword_25738B690;
  if (!qword_25738B690)
  {
    result = MEMORY[0x24951AC70](&unk_2448EEDE4, &type metadata for ProcessError);
    atomic_store(result, (unint64_t *)&qword_25738B690);
  }
  return result;
}

uint64_t sub_2447F4F38(uint64_t a1)
{
  uint64_t v1;

  return sub_2447F49A4(a1, *(void **)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t sub_2447F4F44()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738B698);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_2447F4FA8()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738B698);
  return sub_2448EAF38();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t sub_2447F5000(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  _QWORD aBlock[6];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738B6A0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v7 = objc_msgSend(a1, sel_fileHandleForReading);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v4);
  v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  *(_QWORD *)(v9 + ((v6 + v8 + 7) & 0xFFFFFFFFFFFFFFF8)) = a1;
  aBlock[4] = sub_2447F51F4;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2447F45F0;
  aBlock[3] = &block_descriptor_13_0;
  v10 = _Block_copy(aBlock);
  v11 = a1;
  sub_2447F0EAC((uint64_t)sub_2447F51F4);
  swift_release();
  objc_msgSend(v7, sel_setReadabilityHandler_, v10);

  _Block_release(v10);
  return swift_release();
}

uint64_t sub_2447F517C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738B6A0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

void sub_2447F51F4(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738B6A0);
  sub_2447F43A0(a1);
}

uint64_t MutableBox.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 88);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t MutableBox.value.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 88);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 40))(v4, a1);
  return swift_endAccess();
}

uint64_t (*MutableBox.value.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t MutableBox.clone()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t)v1 + *(_QWORD *)(v2 + 88);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  v8 = swift_allocObject();
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 80) - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)v8 + 88), v6);
  return v8;
}

uint64_t ImmutableBox.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 88));
}

uint64_t _s20PreviewsFoundationOS10MutableBoxCyACyxGxcfC_0(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 80) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 88), a1);
  return v2;
}

uint64_t _s20PreviewsFoundationOS10MutableBoxCyACyxGxcfc_0(uint64_t a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 88), a1);
  return v1;
}

uint64_t ImmutableBox.clone()(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *(_QWORD *)v1;
  MEMORY[0x24BDAC7A8](a1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *))(v5 + 16))(v4, &v1[*(_QWORD *)(v2 + 88)]);
  v6 = swift_allocObject();
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 80) - 8) + 32))(v6 + *(_QWORD *)(*(_QWORD *)v6 + 88), v4);
  return v6;
}

uint64_t _s20PreviewsFoundationOS10MutableBoxCfd_0()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88));
  return v0;
}

uint64_t _s20PreviewsFoundationOS10MutableBoxCfD_0()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MutableBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MutableBox);
}

uint64_t method lookup function for MutableBox()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MutableBox.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t type metadata accessor for ImmutableBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ImmutableBox);
}

uint64_t method lookup function for ImmutableBox()
{
  return swift_lookUpClassMethod();
}

uint64_t Lens.modify(in:_:)(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v12 = (char *)&v14 - v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a5 + 24))(a1, a4, a5);
  a2(v12);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(a5 + 32))(v12, a1, a4, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

void sub_2447F5718()
{
  sub_2448EB9A0();
  __break(1u);
}

void sub_2447F5760()
{
  sub_2448EB9A0();
  __break(1u);
}

uint64_t sub_2447F57A8()
{
  return swift_deallocClassInstance();
}

uint64_t sub_2447F57B8(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 136) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 152), a1);
  return v2;
}

uint64_t sub_2447F580C(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)v1 + 144) + 24))(a1, *(_QWORD *)(*(_QWORD *)v1 + 136));
}

uint64_t sub_2447F583C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)v2 + 144) + 32))(a1, a2, *(_QWORD *)(*(_QWORD *)v2 + 136));
}

uint64_t sub_2447F586C()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 136) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152));
}

uint64_t sub_2447F5888()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 136) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152));
  return swift_deallocClassInstance();
}

uint64_t AnyLens.__allocating_init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  AnyLens.init<A>(_:)(a1, a2, a3);
  return v6;
}

uint64_t *AnyLens.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v7 = *v3;
  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v13 = *(_OWORD *)(v7 + 80);
    v14 = a2;
    v15 = a3;
    type metadata accessor for AnyLens.Box();
  }
  v10 = v13;
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, a2);
  v11 = *(_QWORD *)(v10 + 16);
  swift_retain();
  swift_release();
  v3[2] = v11;
  return v3;
}

void type metadata accessor for AnyLens.Box()
{
  JUMPOUT(0x24951ABD4);
}

uint64_t AnyLens.get(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 96))();
}

uint64_t AnyLens.set(_:in:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 104))();
}

uint64_t AnyLens.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t AnyLens.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_2447F5AD4()
{
  return AnyLens.get(from:)();
}

uint64_t sub_2447F5AF4()
{
  return AnyLens.set(_:in:)();
}

uint64_t WritableKeyPath.get(from:)()
{
  return swift_getAtKeyPath();
}

uint64_t WritableKeyPath.set(_:in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *))(v1 + 16))((char *)&v4 - v2);
  return swift_setAtWritableKeyPath();
}

uint64_t sub_2447F5BA4()
{
  return WritableKeyPath.get(from:)();
}

uint64_t sub_2447F5BC4(uint64_t a1)
{
  return WritableKeyPath.set(_:in:)(a1);
}

uint64_t dispatch thunk of Lens.get(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of Lens.set(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t sub_2447F5BF4()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AnyLens(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyLens);
}

uint64_t method lookup function for AnyLens()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnyLens.__allocating_init<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_2447F5C58()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AnyLens.BoxRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyLens.BoxRoot);
}

uint64_t sub_2447F5C98()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t CancelationToken<>.cancel<A>(onInvalidationOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;

  v4 = *(void (**)(uint64_t))v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  sub_2447F6C4C(v4, v5, v6);
  return swift_release();
}

{
  uint64_t v3;
  __int128 v4;
  __int128 v6[2];
  uint64_t v7;

  v4 = *(_OWORD *)(v3 + 16);
  v6[0] = *(_OWORD *)v3;
  v6[1] = v4;
  v7 = *(_QWORD *)(v3 + 32);
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  sub_2447F6DC0(v6);
  return swift_release();
}

double sub_2447F5D5C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v5;
  char v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  double result;
  uint64_t v11;

  v3 = v2;
  v5 = sub_244828D70(a1);
  if ((v6 & 1) != 0)
  {
    v7 = v5;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v2;
    v11 = *v3;
    *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_24482DD2C();
      v9 = v11;
    }
    sub_2447F81E8(*(_QWORD *)(v9 + 56) + 32 * v7, a2);
    sub_2447CD2CC(v7, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a2 = xmmword_2448ECFD0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
  }
  return result;
}

uint64_t sub_2447F5E10(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  _QWORD v6[4];
  _BYTE v7[32];

  sub_2447C9300(a1, (uint64_t)v6, &qword_25738BC10);
  if (v6[0])
    v4 = 0;
  else
    v4 = v6[1] == 1;
  if (v4)
  {
    sub_2447F81A8((uint64_t)v6);
    sub_2447F66D0(a2, (uint64_t)v7);
    sub_2447F81A8(a1);
    return sub_2447F81A8((uint64_t)v7);
  }
  else
  {
    sub_2447F81E8((uint64_t)v6, (uint64_t)v7);
    sub_2447F6390((uint64_t)v7, a2, (uint64_t)v6);
    sub_2447F81A8(a1);
    sub_2447F81A8((uint64_t)v6);
    return sub_2447F8228((uint64_t)v7);
  }
}

uint64_t sub_2447F5EB8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t result;
  _BYTE v25[32];
  uint64_t v26;
  _BYTE v27[32];

  v4 = *(_QWORD *)(a1 + 16);
  sub_2447F8114();
  v5 = (_QWORD *)sub_2448EA830();
  v6 = sub_2447C1EC0(0, v4, 0, MEMORY[0x24BEE4AF8]);
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
    result = swift_bridgeObjectRelease();
LABEL_22:
    *a2 = v5;
    a2[1] = v6;
    return result;
  }
  v8 = a1 + 32;
  while (1)
  {
    sub_2447C9300(v8, (uint64_t)&v26, &qword_25738BC38);
    v9 = v26;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v6 = sub_2447C1EC0(0, v6[2] + 1, 1, v6);
    v11 = v6[2];
    v10 = v6[3];
    if (v11 >= v10 >> 1)
      v6 = sub_2447C1EC0((_QWORD *)(v10 > 1), v11 + 1, 1, v6);
    v6[2] = v11 + 1;
    v6[v11 + 4] = v9;
    sub_2447F8254((uint64_t)v27, (uint64_t)v25);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = sub_244828D70(v9);
    v15 = v5[2];
    v16 = (v13 & 1) == 0;
    v17 = v15 + v16;
    if (__OFADD__(v15, v16))
      break;
    v18 = v13;
    if (v5[3] >= v17)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v13 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        sub_24482DD2C();
        if ((v18 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      sub_24482AD28(v17, isUniquelyReferenced_nonNull_native);
      v19 = sub_244828D70(v9);
      if ((v18 & 1) != (v20 & 1))
        goto LABEL_25;
      v14 = v19;
      if ((v18 & 1) != 0)
      {
LABEL_3:
        sub_2447F82A0((uint64_t)v25, v5[7] + 32 * v14);
        goto LABEL_4;
      }
    }
    v5[(v14 >> 6) + 8] |= 1 << v14;
    *(_QWORD *)(v5[6] + 8 * v14) = v9;
    sub_2447F81E8((uint64_t)v25, v5[7] + 32 * v14);
    v21 = v5[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_24;
    v5[2] = v23;
LABEL_4:
    swift_bridgeObjectRelease();
    sub_2447F8228((uint64_t)v27);
    v8 += 40;
    if (!--v7)
    {
      result = swift_bridgeObjectRelease();
      goto LABEL_22;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  result = sub_2448EBC7C();
  __break(1u);
  return result;
}

uint64_t sub_2447F6130@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  sub_2447F8114();
  v4 = (_QWORD *)sub_2448EA830();
  v5 = sub_2447C1EC0(0, v3, 0, MEMORY[0x24BEE4AF8]);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_20:
    result = swift_bridgeObjectRelease();
    *a2 = v4;
    a2[1] = v5;
    return result;
  }
  v7 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v10 = *(v7 - 2);
    v9 = *(v7 - 1);
    v11 = *v7;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v5 = sub_2447C1EC0(0, v5[2] + 1, 1, v5);
    v13 = v5[2];
    v12 = v5[3];
    if (v13 >= v12 >> 1)
      v5 = sub_2447C1EC0((_QWORD *)(v12 > 1), v13 + 1, 1, v5);
    v5[2] = v13 + 1;
    v5[v13 + 4] = v10;
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v16 = sub_244828D70(v10);
    v17 = v4[2];
    v18 = (v15 & 1) == 0;
    v19 = v17 + v18;
    if (__OFADD__(v17, v18))
      break;
    v20 = v15;
    if (v4[3] >= v19)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v15 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        sub_24482D80C();
        if ((v20 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      sub_24482A470(v19, isUniquelyReferenced_nonNull_native);
      v21 = sub_244828D70(v10);
      if ((v20 & 1) != (v22 & 1))
        goto LABEL_23;
      v16 = v21;
      if ((v20 & 1) != 0)
      {
LABEL_3:
        v8 = (_QWORD *)(v4[7] + 16 * v16);
        swift_release();
        *v8 = v9;
        v8[1] = v11;
        goto LABEL_4;
      }
    }
    v4[(v16 >> 6) + 8] |= 1 << v16;
    *(_QWORD *)(v4[6] + 8 * v16) = v10;
    v23 = (_QWORD *)(v4[7] + 16 * v16);
    *v23 = v9;
    v23[1] = v11;
    v24 = v4[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
      goto LABEL_22;
    v4[2] = v26;
LABEL_4:
    swift_release();
    swift_bridgeObjectRelease();
    v7 += 3;
    if (!--v6)
      goto LABEL_20;
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  result = sub_2448EBC7C();
  __break(1u);
  return result;
}

uint64_t sub_2447F6384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2447F64CC(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2447F74A8);
}

uint64_t sub_2447F6390@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE v13[32];
  _QWORD v14[4];

  v4 = v3;
  sub_2447F8254(a1, (uint64_t)v13);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v12 = *v3;
  *v3 = 0x8000000000000000;
  sub_2447F75B8((uint64_t)v13, a2, isUniquelyReferenced_nonNull_native, (uint64_t)v14);
  *v3 = v12;
  swift_bridgeObjectRelease();
  if (v14[0] || v14[1] != 1)
    return sub_2447F81E8((uint64_t)v14, a3);
  sub_2447F81A8((uint64_t)v14);
  v8 = (_QWORD *)v3[1];
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_2447C1EC0(0, v8[2] + 1, 1, v8);
    v8 = (_QWORD *)result;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    result = (uint64_t)sub_2447C1EC0((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    v8 = (_QWORD *)result;
  }
  v8[2] = v11 + 1;
  v8[v11 + 4] = a2;
  v4[1] = v8;
  *(_OWORD *)a3 = xmmword_2448ECFD0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  return result;
}

uint64_t sub_2447F64C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2447F64CC(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2447F76F4);
}

uint64_t sub_2447F64CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  _QWORD *v4;
  _QWORD *v6;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;

  v6 = v4;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16 = *v4;
  *v4 = 0x8000000000000000;
  v11 = a4(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  *v6 = v16;
  swift_bridgeObjectRelease();
  if (!v11)
  {
    v12 = (_QWORD *)v6[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = sub_2447C1EC0(0, v12[2] + 1, 1, v12);
    v14 = v12[2];
    v13 = v12[3];
    if (v14 >= v13 >> 1)
      v12 = sub_2447C1EC0((_QWORD *)(v13 > 1), v14 + 1, 1, v12);
    v12[2] = v14 + 1;
    v12[v14 + 4] = a3;
    v6[1] = v12;
  }
  return v11;
}

uint64_t sub_2447F65E4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  unint64_t v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = v1;
  v4 = sub_244828D70(a1);
  if ((v5 & 1) == 0)
    return 0;
  v6 = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = *v1;
  v15 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_24482D80C();
    v8 = v15;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v6);
  sub_2447CCDAC(v6, v8);
  *v2 = v8;
  result = swift_bridgeObjectRelease();
  v11 = v2[1];
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v13 = 0;
    v14 = v11 + 32;
    while (*(_QWORD *)(v14 + 8 * v13) != a1)
    {
      if (v12 == ++v13)
      {
        __break(1u);
        return 0;
      }
    }
    sub_2448AED5C(v13, &v15);
    return v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_2447F66D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];
  _BYTE v12[32];

  sub_2447F5D5C(a1, (uint64_t)v11);
  v5 = (unint64_t)v11;
  if (v11[0])
    v6 = 0;
  else
    v6 = v11[1] == 1;
  if (v6)
  {
LABEL_10:
    result = sub_2447F81A8(v5);
    *(_OWORD *)a2 = xmmword_2448ECFD0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
  }
  else
  {
    result = sub_2447F81E8((uint64_t)v11, (uint64_t)v12);
    v8 = *(_QWORD *)(v2 + 8);
    v9 = *(_QWORD *)(v8 + 16);
    if (v9)
    {
      v5 = 0;
      v10 = v8 + 32;
      while (*(_QWORD *)(v10 + 8 * v5) != a1)
      {
        if (v9 == ++v5)
        {
          __break(1u);
          goto LABEL_10;
        }
      }
      sub_2448AED5C(v5, v11);
      return sub_2447F81E8((uint64_t)v12, a2);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_2447F6784(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  unint64_t v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = v1;
  v4 = sub_244828D70(a1);
  if ((v5 & 1) == 0)
    return 0;
  v6 = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = *v1;
  v15 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_24482F338();
    v8 = v15;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v6);
  sub_2447CCDAC(v6, v8);
  *v2 = v8;
  result = swift_bridgeObjectRelease();
  v11 = v2[1];
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v13 = 0;
    v14 = v11 + 32;
    while (*(_QWORD *)(v14 + 8 * v13) != a1)
    {
      if (v12 == ++v13)
      {
        __break(1u);
        return 0;
      }
    }
    sub_2448AED5C(v13, &v15);
    return v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_2447F6870@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = sub_2448EB508();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - v7;
  if (qword_257389CA0 != -1)
    swift_once();
  v9 = (_QWORD *)((char *)off_25738DB00 + 16);
  v10 = (os_unfair_lock_s *)((char *)off_25738DB00 + 24);
  swift_retain();
  os_unfair_lock_lock(v10);
  sub_24483B130(v9, &v17);
  os_unfair_lock_unlock(v10);
  v11 = v17;
  swift_release();
  v12 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v8, a1, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v5);
  v17 = v11;
  v13 = sub_2447F8114();
  v14 = type metadata accessor for OrderedDictionary(0, (uint64_t)&type metadata for Identifier, v5, v13);
  result = OrderedDictionary.subscript.setter(v8, (uint64_t)&v17, v14);
  *a3 = v11;
  return result;
}

uint64_t sub_2447F69CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = sub_2448EB508();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - v5;
  v7 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))((char *)&v11 - v5, 1, 1, v3);
  v12 = v7;
  v8 = sub_2447F8114();
  v9 = type metadata accessor for OrderedDictionary(0, (uint64_t)&type metadata for Identifier, v3, v8);
  return OrderedDictionary.subscript.setter(v6, (uint64_t)&v12, v9);
}

uint64_t sub_2447F6A80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;

  swift_getTupleTypeMetadata2();
  v8 = sub_2448EAE54();
  v9 = sub_2447F8114();
  OrderedDictionary.init(dictionaryLiteral:)(v8, (uint64_t)&type metadata for Identifier, a1, v9, (_OWORD *)a4);
  type metadata accessor for CancelationToken(0, a2, a3, v10);
  result = sub_2448EAE54();
  *(_QWORD *)(a4 + 16) = result;
  return result;
}

uint64_t sub_2447F6B24()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v3;
  char v4;

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 32) + 144);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v1 + 21);
  sub_24487F310((uint64_t)&v1[4], (void (*)(__int128 *))sub_2447F8158, (uint64_t)&v3);
  os_unfair_lock_unlock(v1 + 21);
  swift_release();
  swift_release();
  return sub_2447F819C(v3, v4);
}

uint64_t sub_2447F6BB8()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v3;
  char v4;

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 32) + 144);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v1 + 21);
  sub_24487F310((uint64_t)&v1[4], (void (*)(__int128 *))sub_2447F82F8, (uint64_t)&v3);
  os_unfair_lock_unlock(v1 + 21);
  swift_release();
  swift_release();
  return sub_2447F819C(v3, v4);
}

uint64_t sub_2447F6C4C(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t result;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11[9];
  uint64_t v12;
  char v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[2];
  char v18;
  __int128 v19;
  const char *v20;
  uint64_t v21;
  char v22;

  v14 = a1;
  v15 = a2;
  v16 = a3;
  v4 = *(os_unfair_lock_s **)(*(_QWORD *)(v3 + 32) + 144);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v4 + 21);
  sub_24487F310((uint64_t)&v4[4], (void (*)(__int128 *))sub_2447F82E8, (uint64_t)&v12);
  os_unfair_lock_unlock(v4 + 21);
  swift_release();
  result = swift_release();
  if (v13 == 1)
  {
    v6 = v12;
    v7 = v14;
    v8 = v16;
    v17[0] = (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFou"
                      "ndation/InvalidationHandle.swift";
    v17[1] = 130;
    v18 = 2;
    v19 = xmmword_2448EEFA0;
    v20 = "manage(_:)";
    v21 = 10;
    v22 = 2;
    v9 = *(_QWORD *)(v16 + 144);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v9 + 76));
    sub_2447E5E3C((__int128 *)(v9 + 16), nullsub_1, v17, v8, (void (*)(uint64_t, _QWORD *))sub_2447E1AC8, v11);
    os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 76));
    v10 = swift_release();
    if ((v11[0] & 1) == 0)
      v7(v10);
    return sub_2447F819C(v6, 1);
  }
  return result;
}

uint64_t sub_2447F6DC0(__int128 *a1)
{
  uint64_t v1;
  __int128 v2;
  os_unfair_lock_s *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v2 = a1[1];
  v8 = *a1;
  v9 = v2;
  v10 = *((_QWORD *)a1 + 4);
  v3 = *(os_unfair_lock_s **)(*(_QWORD *)(v1 + 32) + 144);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v3 + 21);
  sub_24487F310((uint64_t)&v3[4], (void (*)(__int128 *))sub_2447F8298, (uint64_t)&v6);
  os_unfair_lock_unlock(v3 + 21);
  swift_release();
  result = swift_release();
  if (v7 == 1)
  {
    v5 = v6;
    v11 = v8;
    v12 = v9;
    v13 = v10;
    sub_2448E490C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/InvalidationHandle.swift", 130, 2, 64, 45, (uint64_t)"manage(_:)", 10, 2);
    return sub_2447F819C(v5, 1);
  }
  return result;
}

uint64_t sub_2447F6EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v8 = *(_QWORD **)(a1 + 16);
  swift_retain();
  swift_retain();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_2447C1FCC(0, v8[2] + 1, 1, v8);
    v8 = (_QWORD *)result;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    result = (uint64_t)sub_2447C1FCC((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    v8 = (_QWORD *)result;
  }
  v8[2] = v11 + 1;
  v12 = &v8[3 * v11];
  v12[4] = a2;
  v12[5] = a3;
  v12[6] = a4;
  *(_QWORD *)(a1 + 16) = v8;
  return result;
}

uint64_t IsolatedInvalidationHandle.executor.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return MEMORY[0x24951AE5C](v0 + 40);
}

uint64_t IsolatedInvalidationHandle.executor.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 48) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*IsolatedInvalidationHandle.executor.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  v4 = MEMORY[0x24951AE5C](v1 + 40);
  v5 = *(_QWORD *)(v1 + 48);
  v3[3] = v4;
  v3[4] = v5;
  return sub_2447F7090;
}

void sub_2447F7090(uint64_t a1, char a2)
{
  void *v3;

  v3 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 48) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

_QWORD *IsolatedInvalidationHandle.__allocating_init(dsoHandle:file:line:column:function:on:name:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _QWORD *v20;

  swift_allocObject();
  v20 = sub_2447F78E0(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  swift_unknownObjectRelease();
  return v20;
}

_QWORD *IsolatedInvalidationHandle.init(dsoHandle:file:line:column:function:on:name:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _QWORD *v13;

  v13 = sub_2447F78E0(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  swift_unknownObjectRelease();
  return v13;
}

uint64_t sub_2447F723C(uint64_t a1, uint64_t a2)
{
  return sub_2447F73EC(a1, a2, (void (*)(uint64_t))sub_2447F6B24);
}

uint64_t IsolatedInvalidationHandle.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  sub_2447F7A60(v0 + 40);
  return v0;
}

uint64_t IsolatedInvalidationHandle.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  sub_2447F7A60(v0 + 40);
  return swift_deallocClassInstance();
}

uint64_t IsolatedInvalidationHandle.invalidationHandle.getter()
{
  return swift_retain();
}

uint64_t sub_2447F72B0()
{
  return swift_retain();
}

_QWORD *ConcurrentInvalidationHandle.__allocating_init(dsoHandle:file:line:column:function:name:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  swift_allocObject();
  return sub_2447F7A84(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

_QWORD *ConcurrentInvalidationHandle.init(dsoHandle:file:line:column:function:name:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  return sub_2447F7A84(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_2447F73E0(uint64_t a1, uint64_t a2)
{
  return sub_2447F73EC(a1, a2, (void (*)(uint64_t))sub_2447F6BB8);
}

uint64_t sub_2447F73EC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    a3(a2);
    return swift_release();
  }
  return result;
}

uint64_t ConcurrentInvalidationHandle.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t ConcurrentInvalidationHandle.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_2447F74A8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_244828D70(a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (uint64_t *)(v18[7] + 16 * v12);
        result = *v19;
        *v19 = a1;
        v19[1] = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_24482D80C();
      goto LABEL_7;
    }
    sub_24482A470(v15, a4 & 1);
    v21 = sub_244828D70(a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_2448204A4(v12, a3, a1, a2, v18);
      return 0;
    }
  }
  result = sub_2448EBC7C();
  __break(1u);
  return result;
}

uint64_t sub_2447F75B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_244828D70(a2);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a3 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        sub_2447F81E8(v18[7] + 32 * v12, a4);
        return sub_2447F81E8(a1, v18[7] + 32 * v12);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a3 & 1) == 0)
    {
      sub_24482DD2C();
      goto LABEL_7;
    }
    sub_24482AD28(v15, a3 & 1);
    v20 = sub_244828D70(a2);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      result = sub_244820550(v12, a2, a1, v18);
      *(_OWORD *)a4 = xmmword_2448ECFD0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 24) = 0;
      return result;
    }
  }
  result = sub_2448EBC7C();
  __break(1u);
  return result;
}

uint64_t sub_2447F76F4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_244828D70(a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (uint64_t *)(v18[7] + 16 * v12);
        result = *v19;
        *v19 = a1;
        v19[1] = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_24482F338();
      goto LABEL_7;
    }
    sub_24482D17C(v15, a4 & 1);
    v21 = sub_244828D70(a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_2448204A4(v12, a3, a1, a2, v18);
      return 0;
    }
  }
  result = sub_2448EBC7C();
  __break(1u);
  return result;
}

uint64_t sub_2447F7804(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v3 = *a2;
  v4 = a2[1];
  v6 = a2[2];
  v5 = a2[3];
  v7 = a2[4];
  v8 = *(_QWORD **)(a1 + 16);
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_2447C2580(0, v8[2] + 1, 1, v8);
    v8 = (_QWORD *)result;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    result = (uint64_t)sub_2447C2580((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    v8 = (_QWORD *)result;
  }
  v8[2] = v11 + 1;
  v12 = &v8[5 * v11];
  v12[4] = v3;
  v12[5] = v4;
  v12[6] = v6;
  v12[7] = v5;
  v12[8] = v7;
  *(_QWORD *)(a1 + 16) = v8;
  return result;
}

_QWORD *sub_2447F78E0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v27[3];

  v12[6] = 0;
  swift_unknownObjectWeakInit();
  swift_beginAccess();
  v12[6] = a10;
  swift_unknownObjectWeakAssign();
  v12[2] = a11;
  v12[3] = a12;
  v17 = MEMORY[0x24BEE4AF8];
  sub_2447F5EB8(MEMORY[0x24BEE4AF8], v27);
  v18 = v27[0];
  v19 = v27[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738BC28);
  v20 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738BC30);
  v21 = swift_allocObject();
  *(_DWORD *)(v21 + 84) = 0;
  *(_QWORD *)(v21 + 16) = v18;
  *(_QWORD *)(v21 + 24) = v19;
  *(_QWORD *)(v21 + 32) = v17;
  *(_OWORD *)(v21 + 40) = 0u;
  *(_OWORD *)(v21 + 56) = 0u;
  *(_OWORD *)(v21 + 66) = 0u;
  *(_QWORD *)(v20 + 144) = v21;
  *(_QWORD *)(v20 + 16) = a1;
  *(_QWORD *)(v20 + 24) = a2;
  *(_BYTE *)(v20 + 32) = a3;
  *(_QWORD *)(v20 + 40) = a4;
  *(_QWORD *)(v20 + 48) = a5;
  *(_QWORD *)(v20 + 56) = a6;
  *(_QWORD *)(v20 + 64) = a7;
  *(_BYTE *)(v20 + 72) = a8;
  *(_QWORD *)(v20 + 80) = 0;
  *(_QWORD *)(v20 + 88) = 0;
  *(_OWORD *)(v20 + 96) = xmmword_2448ECE80;
  *(_QWORD *)(v20 + 112) = 0xD00000000000001CLL;
  *(_QWORD *)(v20 + 120) = 0x80000002448F9F70;
  *(_QWORD *)(v20 + 128) = 0x6164696C61766E69;
  *(_QWORD *)(v20 + 136) = 0xEB00000000646574;
  v12[4] = v20;
  return v12;
}

uint64_t sub_2447F7A60(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

_QWORD *sub_2447F7A84(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v24[3];

  v10[2] = a9;
  v10[3] = a10;
  sub_2447F6130(MEMORY[0x24BEE4AF8], v24);
  v17 = v24[0];
  v18 = v24[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738BC18);
  v19 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738BC20);
  v20 = swift_allocObject();
  *(_DWORD *)(v20 + 84) = 0;
  *(_QWORD *)(v20 + 16) = v17;
  *(_QWORD *)(v20 + 24) = v18;
  *(_QWORD *)(v20 + 32) = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(v20 + 40) = 0u;
  *(_OWORD *)(v20 + 56) = 0u;
  *(_OWORD *)(v20 + 66) = 0u;
  *(_QWORD *)(v19 + 144) = v20;
  *(_QWORD *)(v19 + 16) = a1;
  *(_QWORD *)(v19 + 24) = a2;
  *(_BYTE *)(v19 + 32) = a3;
  *(_QWORD *)(v19 + 40) = a4;
  *(_QWORD *)(v19 + 48) = a5;
  *(_QWORD *)(v19 + 56) = a6;
  *(_QWORD *)(v19 + 64) = a7;
  *(_BYTE *)(v19 + 72) = a8;
  *(_QWORD *)(v19 + 80) = 0;
  *(_QWORD *)(v19 + 88) = 0;
  *(_OWORD *)(v19 + 96) = xmmword_2448ECE80;
  *(_QWORD *)(v19 + 112) = 0xD00000000000001ELL;
  *(_QWORD *)(v19 + 120) = 0x80000002448F9EC0;
  *(_QWORD *)(v19 + 128) = 0x6164696C61766E69;
  *(_QWORD *)(v19 + 136) = 0xEB00000000646574;
  v10[4] = v19;
  return v10;
}

_UNKNOWN **sub_2447F7BCC()
{
  return &off_25738BBF0;
}

_UNKNOWN **sub_2447F7BD8()
{
  return &protocol witness table for IsolatedTokenCallback;
}

_UNKNOWN **sub_2447F7BE4()
{
  return &off_25738BBD8;
}

_UNKNOWN **sub_2447F7BF0()
{
  return &protocol witness table for ConcurrentTokenCallback;
}

uint64_t sub_2447F7BFC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *a1;
  v4 = *a1 + 40;
  swift_beginAccess();
  result = MEMORY[0x24951AE5C](v4);
  v6 = *(_QWORD *)(v3 + 48);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_2447F7C54(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 48) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_2447F7CAC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t sub_2447F7CB4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t sub_2447F7CBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t sub_2447F7CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t type metadata accessor for IsolatedInvalidationHandle()
{
  return objc_opt_self();
}

uint64_t method lookup function for IsolatedInvalidationHandle()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IsolatedInvalidationHandle.__allocating_init(dsoHandle:file:line:column:function:on:name:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t type metadata accessor for ConcurrentInvalidationHandle()
{
  return objc_opt_self();
}

uint64_t method lookup function for ConcurrentInvalidationHandle()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConcurrentInvalidationHandle.__allocating_init(dsoHandle:file:line:column:function:name:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

ValueMetadata *type metadata accessor for ConcurrentInvalidationObserverBox()
{
  return &type metadata for ConcurrentInvalidationObserverBox;
}

uint64_t destroy for IsolatedInvalidationObserverBox()
{
  swift_unknownObjectWeakDestroy();
  return swift_release();
}

uint64_t initializeWithCopy for IsolatedInvalidationObserverBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_unknownObjectWeakCopyInit();
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v4;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for IsolatedInvalidationObserverBox(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  *(_QWORD *)(swift_unknownObjectWeakCopyAssign() + 8) = a2[1];
  v4 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v4;
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for IsolatedInvalidationObserverBox(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __n128 result;

  v3 = swift_unknownObjectWeakTakeInit();
  v4 = *(_QWORD *)(a2 + 24);
  result = *(__n128 *)(a2 + 8);
  *(__n128 *)(v3 + 8) = result;
  *(_QWORD *)(v3 + 24) = v4;
  return result;
}

uint64_t assignWithTake for IsolatedInvalidationObserverBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = swift_unknownObjectWeakTakeAssign();
  v5 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for IsolatedInvalidationObserverBox(uint64_t a1, int a2)
{
  int v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  if ((*(_QWORD *)(a1 + 8) & 0xF000000000000007) != 0)
    v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  else
    v2 = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IsolatedInvalidationObserverBox(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      *(_QWORD *)(result + 8) = 1;
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IsolatedInvalidationObserverBox()
{
  return &type metadata for IsolatedInvalidationObserverBox;
}

uint64_t sub_2447F7F30()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *sub_2447F7F60(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_2447F7FAC(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_2447F8034(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CancellationToken(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CancellationToken(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for ObserverAndTokenStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ObserverAndTokenStorage);
}

unint64_t sub_2447F8114()
{
  unint64_t result;

  result = qword_25738BC08;
  if (!qword_25738BC08)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for Identifier, &type metadata for Identifier);
    atomic_store(result, (unint64_t *)&qword_25738BC08);
  }
  return result;
}

uint64_t sub_2447F8158()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 16);
  v3 = xmmword_2448ECFD0;
  v4 = 0;
  v5 = 0;
  return sub_2447F5E10((uint64_t)&v3, v1);
}

uint64_t sub_2447F819C(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_2447F81A8(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738BC10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2447F81E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_unknownObjectWeakTakeInit();
  v4 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = v4;
  return a2;
}

uint64_t sub_2447F8228(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  swift_release();
  return a1;
}

uint64_t sub_2447F8254(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_unknownObjectWeakCopyInit();
  v4 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = v4;
  swift_retain();
  return a2;
}

uint64_t sub_2447F8298(uint64_t a1)
{
  uint64_t v1;

  return sub_2447F7804(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_2447F82A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_unknownObjectWeakTakeAssign();
  v4 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = v4;
  swift_release();
  return a2;
}

uint64_t sub_2447F82E8(uint64_t a1)
{
  uint64_t v1;

  return sub_2447F6EB8(a1, **(_QWORD **)(v1 + 16), *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8), *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16));
}

uint64_t sub_2447F82F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_2447F65E4(*(_QWORD *)(v0 + 16));
  return sub_2447C8F84(v1);
}

uint64_t Set.map<A>(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v39;
  int64_t v40;
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  unint64_t v60;
  uint64_t v61;

  v8 = v7;
  v50 = a1;
  v51 = a2;
  v46 = *(_QWORD *)(a5 - 8);
  v13 = MEMORY[0x24BDAC7A8](a1);
  v49 = (char *)v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v45 = (char *)v41 - v16;
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v53 = (char *)v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_2448EB508();
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)v41 - v21;
  v47 = a5;
  v48 = a7;
  v61 = sub_2448EA7E8();
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_2448EB6DC();
    result = sub_2448EB124();
    v24 = v56;
    v42 = v57;
    v25 = v58;
    v26 = v59;
    v27 = v60;
  }
  else
  {
    v28 = -1 << *(_BYTE *)(a3 + 32);
    v29 = *(_QWORD *)(a3 + 56);
    v42 = a3 + 56;
    v25 = ~v28;
    v30 = -v28;
    if (v30 < 64)
      v31 = ~(-1 << v30);
    else
      v31 = -1;
    v27 = v31 & v29;
    result = swift_bridgeObjectRetain();
    v24 = a3;
    v26 = 0;
  }
  v41[1] = v25;
  v43 = v24 & 0x7FFFFFFFFFFFFFFFLL;
  v44 = (unint64_t)(v25 + 64) >> 6;
  v52 = v24;
  v32 = v53;
  v54 = v26;
  if ((v24 & 0x8000000000000000) == 0)
    goto LABEL_12;
LABEL_10:
  if (!sub_2448EB6E8())
    goto LABEL_30;
  sub_2448EBBBC();
  swift_unknownObjectRelease();
  v55 = v27;
  while (1)
  {
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v22, 0, 1, a4);
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v32, v22, a4);
    v50(v32);
    if (v8)
    {
      (*(void (**)(char *, uint64_t))(v18 + 8))(v32, a4);
      sub_2447D1030();
      return swift_bridgeObjectRelease();
    }
    v33 = v47;
    sub_2448EB160();
    v34 = a4;
    v35 = v45;
    sub_2448EB10C();
    v36 = v35;
    a4 = v34;
    v8 = 0;
    v32 = v53;
    (*(void (**)(char *, uint64_t))(v46 + 8))(v36, v33);
    result = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v32, a4);
    v27 = v55;
    v24 = v52;
    v54 = v26;
    if (v52 < 0)
      goto LABEL_10;
LABEL_12:
    if (v27)
    {
      v55 = (v27 - 1) & v27;
      v37 = __clz(__rbit64(v27)) | (v26 << 6);
      goto LABEL_27;
    }
    if (__OFADD__(v26++, 1))
    {
      __break(1u);
      return result;
    }
    if (v26 >= v44)
      goto LABEL_30;
    v39 = *(_QWORD *)(v42 + 8 * v26);
    if (!v39)
      break;
LABEL_26:
    v55 = (v39 - 1) & v39;
    v37 = __clz(__rbit64(v39)) + (v26 << 6);
LABEL_27:
    (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v22, *(_QWORD *)(v24 + 48) + *(_QWORD *)(v18 + 72) * v37, a4);
  }
  if (v26 + 1 >= v44)
    goto LABEL_30;
  v39 = *(_QWORD *)(v42 + 8 * (v26 + 1));
  if (v39)
  {
    ++v26;
    goto LABEL_26;
  }
  v26 += 2;
  if (v26 >= v44)
    goto LABEL_30;
  v39 = *(_QWORD *)(v42 + 8 * v26);
  if (v39)
    goto LABEL_26;
  v40 = v54 + 4;
  while (v44 != v40)
  {
    v39 = *(_QWORD *)(v42 + 8 * v40++);
    if (v39)
    {
      v26 = v40 - 1;
      goto LABEL_26;
    }
  }
LABEL_30:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v22, 1, 1, a4);
  sub_2447D1030();
  return v61;
}

uint64_t Set.inserting(_:)()
{
  uint64_t v0;

  v0 = sub_2448EAEE4();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v0);
  return sub_2448EB100();
}

uint64_t static StandardErrorCapture.captureStdErr(toFileName:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  id v17;
  id v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v23 = a4;
  v24 = a5;
  v21 = a2;
  v22 = a3;
  v6 = sub_2448EA3A4();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_2448EA434();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v21 - v15;
  v17 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v18 = objc_msgSend(v17, sel_temporaryDirectory);

  sub_2448EA404();
  v25 = a1;
  v26 = v21;
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BDCD798], v6);
  sub_2447D0980();
  sub_2448EA428();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v14, v10);
  _s20PreviewsFoundationOS20StandardErrorCaptureO010captureStdE05toURL4file4liney0B00J0V_SSSitFZ_0((uint64_t)v16, v22, v23, v24);
  return ((uint64_t (*)(char *, uint64_t))v19)(v16, v10);
}

void sub_2447F8998(uint64_t *a1@<X0>, __int128 *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  v6 = a1[1];
  if (v6)
  {
    v7 = *a1;
    if (*a1 != v4 || v6 != v5)
    {
      v9 = a1[3];
      v10 = a1[4];
      v11 = a1[2];
      if ((sub_2448EBBEC() & 1) == 0)
      {
        v12 = qword_257389D08;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v12 != -1)
          swift_once();
        v13 = sub_2448EA5FC();
        __swift_project_value_buffer(v13, (uint64_t)qword_25738F810);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v14 = sub_2448EA5E4();
        v15 = sub_2448EB3A0();
        if (os_log_type_enabled(v14, v15))
        {
          v21 = v11;
          v16 = swift_slowAlloc();
          v24 = swift_slowAlloc();
          *(_QWORD *)&v23 = v24;
          *(_DWORD *)v16 = 136446722;
          swift_bridgeObjectRetain();
          sub_2447D6798(v7, v6, (uint64_t *)&v23);
          sub_2448EB598();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v16 + 12) = 2082;
          swift_bridgeObjectRetain();
          sub_2447D6798(v21, v9, (uint64_t *)&v23);
          sub_2448EB598();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v16 + 22) = 2048;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v22 = v10;
          sub_2448EB598();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_2447B9000, v14, v15, "Already captured stderror to %{public}s from %{public}s:%ld", (uint8_t *)v16, 0x20u);
          v17 = v24;
          swift_arrayDestroy();
          MEMORY[0x24951AD84](v17, -1, -1);
          MEMORY[0x24951AD84](v16, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
      }
    }
    *a3 = 1;
  }
  else
  {
    v18 = *((_QWORD *)a2 + 4);
    v20 = *a2;
    v22 = a2[1];
    v19 = v22;
    v23 = v20;
    *a1 = v4;
    a1[1] = v5;
    *((_OWORD *)a1 + 1) = v19;
    a1[4] = v18;
    *a3 = 0;
    sub_2447F9B64((uint64_t)&v23);
    sub_2447F9B64((uint64_t)&v22);
  }
}

id sub_2447F8C88(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  id v7;
  id v8;
  uint64_t v9;
  id v11[2];

  v11[1] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = (void *)sub_2448EA3E0();
  v11[0] = 0;
  v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_fileHandleForWritingToURL_error_, v2, v11);

  v4 = v11[0];
  if (v3)
  {
    v5 = sub_2448EA434();
    v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
    v7 = v4;
    v6(a1, v5);
  }
  else
  {
    v8 = v11[0];
    sub_2448EA38C();

    swift_willThrow();
    v9 = sub_2448EA434();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
  }
  return v3;
}

uint64_t static StandardErrorCapture.print(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  FILE *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;

  v0 = sub_2448EA500();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = 0;
  v14 = 0xE000000000000000;
  if (qword_257389C48 != -1)
    swift_once();
  v4 = (void *)qword_25738BC40;
  sub_2448EA4E8();
  v5 = (void *)sub_2448EA4C4();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v6 = objc_msgSend(v4, sel_stringFromDate_, v5, v13, v14);

  v7 = sub_2448EAA94();
  v9 = v8;

  swift_bridgeObjectRelease();
  v13 = v7;
  v14 = v9;
  sub_2448EABC0();
  sub_2448EABC0();
  sub_2448EABC0();
  v10 = (FILE *)sub_2448EA614();
  v11 = sub_2448EAB0C();
  swift_bridgeObjectRelease();
  fputs((const char *)(v11 + 32), v10);
  return swift_release();
}

id sub_2447F8F10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  void *v5;
  id result;
  uint64_t v7;

  v0 = sub_2448EA59C();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD15D0]), sel_init);
  sub_2448EA590();
  v5 = (void *)sub_2448EA584();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  objc_msgSend(v4, sel_setTimeZone_, v5);

  result = objc_msgSend(v4, sel_setFormatOptions_, 3955);
  qword_25738BC40 = (uint64_t)v4;
  return result;
}

double sub_2447F8FE4()
{
  _OWORD *v0;
  double result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_25738BC58);
  v0 = (_OWORD *)swift_allocObject();
  result = 0.0;
  v0[1] = 0u;
  v0[2] = 0u;
  *(_OWORD *)((char *)v0 + 44) = 0u;
  qword_25738BC48 = (uint64_t)v0;
  return result;
}

BOOL sub_2447F9020(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return sub_2447F9068(v5, v7);
}

BOOL sub_2447F9068(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  char v5;
  _BOOL8 result;
  char v8;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = sub_2448EBBEC(), result = 0, (v5 & 1) != 0))
  {
    if (a1[2] == a2[2] && a1[3] == a2[3])
      return a1[4] == a2[4];
    v8 = sub_2448EBBEC();
    result = 0;
    if ((v8 & 1) != 0)
      return a1[4] == a2[4];
  }
  return result;
}

void _s20PreviewsFoundationOS20StandardErrorCaptureO010captureStdE05toURL4file4liney0B00J0V_SSSitFZ_0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  NSObject *v41;
  id v42;
  id v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  int v51;
  id v52;
  int v53;
  void *v54;
  char *v55;
  void *v56;
  id v57;
  FILE *v58;
  uint64_t v59;
  FILE *v60;
  uint64_t v61;
  int v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  _QWORD v66[2];
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  __int128 v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;

  v8 = sub_2448EA500();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v69 = (char *)v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_2448EA434();
  v74 = *(_QWORD *)(v11 - 8);
  v75 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v73 = (char *)v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_2448EAADC();
  v70 = *(_QWORD *)(v13 - 8);
  v71 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v72 = (char *)v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = a1;
  v15 = sub_2448EA410();
  v17 = v16;
  v76 = v15;
  *(_QWORD *)&v82 = v15;
  *((_QWORD *)&v82 + 1) = v16;
  v83 = a2;
  v84 = a3;
  v85 = a4;
  v18 = qword_257389C50;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v18 != -1)
    swift_once();
  v19 = (uint64_t *)(qword_25738BC48 + 16);
  v20 = (os_unfair_lock_s *)(qword_25738BC48 + 56);
  swift_retain();
  os_unfair_lock_lock(v20);
  sub_2447F8998(v19, &v82, &v80);
  v78 = 0;
  os_unfair_lock_unlock(v20);
  LOBYTE(v19) = v80;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  if ((v19 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v68 = v9;
  if (qword_257389D08 != -1)
    swift_once();
  v21 = sub_2448EA5FC();
  v22 = __swift_project_value_buffer(v21, (uint64_t)qword_25738F810);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v23 = sub_2448EA5E4();
  v24 = sub_2448EB3A0();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = swift_slowAlloc();
    v67 = v8;
    v26 = v25;
    v27 = swift_slowAlloc();
    v66[1] = v22;
    v28 = v27;
    v80 = v27;
    *(_DWORD *)v26 = 136315650;
    swift_bridgeObjectRetain();
    v79 = sub_2447D6798(v76, v17, &v80);
    sub_2448EB598();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v26 + 12) = 2080;
    swift_bridgeObjectRetain();
    v79 = sub_2447D6798(a2, a3, &v80);
    sub_2448EB598();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v26 + 22) = 2048;
    v79 = a4;
    sub_2448EB598();
    _os_log_impl(&dword_2447B9000, v23, v24, "Redirecting stderr to %s, from %s:%ld", (uint8_t *)v26, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x24951AD84](v28, -1, -1);
    v29 = v26;
    v8 = v67;
    MEMORY[0x24951AD84](v29, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  v30 = (void *)v78;
  v31 = (void *)objc_opt_self();
  v32 = objc_msgSend(v31, sel_processInfo);
  v33 = objc_msgSend(v32, sel_processName);

  v78 = sub_2448EAA94();
  v34 = objc_msgSend(v31, sel_processInfo);
  LODWORD(v67) = objc_msgSend(v34, sel_processIdentifier);

  v35 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v36 = v77;
  sub_2448EA41C();
  v37 = (void *)sub_2448EAA70();
  swift_bridgeObjectRelease();
  LOBYTE(v32) = objc_msgSend(v35, sel_fileExistsAtPath_, v37);

  v38 = v68;
  if ((v32 & 1) == 0)
  {
    v80 = 0;
    v81 = 0xE000000000000000;
    v39 = v72;
    sub_2448EAAC4();
    sub_2447D0980();
    sub_2448EB5F8();
    if (v30)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v70 + 8))(v39, v71);
      goto LABEL_15;
    }
    (*(void (**)(char *, uint64_t))(v70 + 8))(v39, v71);
    swift_bridgeObjectRelease();
  }
  sub_2447F9B28();
  v40 = (uint64_t)v73;
  (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v73, v36, v75);
  v41 = sub_2447F8C88(v40);
  if (!v30)
  {
    v44 = v41;
    swift_bridgeObjectRelease();
    -[NSObject seekToEndOfFile](v44, sel_seekToEndOfFile);
    v51 = -[NSObject fileDescriptor](v44, sel_fileDescriptor);
    v52 = objc_msgSend((id)objc_opt_self(), sel_fileHandleWithStandardError);
    v53 = objc_msgSend(v52, sel_fileDescriptor);

    if (dup2(v51, v53) == -1)
    {
      v61 = swift_bridgeObjectRelease();
      v62 = MEMORY[0x249518DEC](v61);
      v63 = sub_2448EA5E4();
      v64 = sub_2448EB3A0();
      if (os_log_type_enabled(v63, v64))
      {
        v65 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v65 = 67109120;
        LODWORD(v80) = v62;
        sub_2448EB598();
        _os_log_impl(&dword_2447B9000, v63, v64, "Failed to dup stderr to logHandle: %d", v65, 8u);
        MEMORY[0x24951AD84](v65, -1, -1);
      }

    }
    else
    {
      v80 = 0;
      v81 = 0xE000000000000000;
      sub_2448EB79C();
      sub_2448EABC0();
      if (qword_257389C48 != -1)
        swift_once();
      v54 = (void *)qword_25738BC40;
      v55 = v69;
      sub_2448EA4E8();
      v56 = (void *)sub_2448EA4C4();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v55, v8);
      v57 = objc_msgSend(v54, sel_stringFromDate_, v56);

      sub_2448EAA94();
      sub_2448EABC0();
      swift_bridgeObjectRelease();
      sub_2448EABC0();
      sub_2448EABC0();
      swift_bridgeObjectRelease();
      sub_2448EABC0();
      LODWORD(v79) = v67;
      sub_2448EBB5C();
      sub_2448EABC0();
      swift_bridgeObjectRelease();
      sub_2448EABC0();
      v58 = (FILE *)sub_2448EA614();
      v59 = sub_2448EAB0C();
      swift_bridgeObjectRelease();
      fputs((const char *)(v59 + 32), v58);
      swift_release();
      v60 = (FILE *)sub_2448EA614();
      fflush(v60);
    }
    goto LABEL_25;
  }
LABEL_15:
  swift_bridgeObjectRelease();
  v42 = v30;
  swift_bridgeObjectRetain();
  v43 = v30;
  v44 = sub_2448EA5E4();
  v45 = sub_2448EB3A0();
  if (os_log_type_enabled(v44, v45))
  {
    v46 = swift_slowAlloc();
    v47 = (_QWORD *)swift_slowAlloc();
    v48 = swift_slowAlloc();
    v80 = v48;
    *(_DWORD *)v46 = 136446466;
    swift_bridgeObjectRetain();
    v79 = sub_2447D6798(v76, v17, &v80);
    sub_2448EB598();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v46 + 12) = 2114;
    v49 = v30;
    v50 = _swift_stdlib_bridgeErrorToNSError();
    v79 = v50;
    sub_2448EB598();
    *v47 = v50;

    _os_log_impl(&dword_2447B9000, v44, v45, "Failed to write to file for capturing stderr, path: %{public}s, error: %{public}@", (uint8_t *)v46, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(qword_25738AEF0);
    swift_arrayDestroy();
    MEMORY[0x24951AD84](v47, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24951AD84](v48, -1, -1);
    MEMORY[0x24951AD84](v46, -1, -1);

    return;
  }

  swift_bridgeObjectRelease_n();
LABEL_25:

}

ValueMetadata *type metadata accessor for StandardErrorCapture()
{
  return &type metadata for StandardErrorCapture;
}

unint64_t sub_2447F9B28()
{
  unint64_t result;

  result = qword_25738BC50;
  if (!qword_25738BC50)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25738BC50);
  }
  return result;
}

uint64_t sub_2447F9B64(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *initializeWithCopy for CaptureConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CaptureConfiguration(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

_QWORD *assignWithTake for CaptureConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

ValueMetadata *type metadata accessor for CaptureConfiguration()
{
  return &type metadata for CaptureConfiguration;
}

uint64_t Future.publisher()()
{
  uint64_t v0;
  uint64_t v1;

  sub_2447F9D44();
  v0 = sub_2448EA674();
  swift_retain();
  sub_2448EA680();
  MEMORY[0x24951AC70](MEMORY[0x24BDB9E58], v0);
  v1 = sub_2448EA68C();
  swift_release();
  return v1;
}

unint64_t sub_2447F9D44()
{
  unint64_t result;

  result = qword_25738BC60;
  if (!qword_25738BC60)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for CombinePublisherError, &type metadata for CombinePublisherError);
    atomic_store(result, (unint64_t *)&qword_25738BC60);
  }
  return result;
}

uint64_t sub_2447F9D88(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  _QWORD *v6;

  v5 = *a3;
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = *(_QWORD *)(v5 + 80);
  v6[3] = a1;
  v6[4] = a2;
  swift_retain();
  Future.observeFinish(_:)((uint64_t)sub_2447FA1A0, (uint64_t)v6);
  return swift_release();
}

uint64_t sub_2447F9E00(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_2447F9D88(a1, a2, v2);
}

uint64_t sub_2447F9E08(uint64_t a1, void (*a2)(void **), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  int EnumCaseMultiPayload;
  void *v21;
  id v22;
  uint64_t v24;
  void (*v25)(void **);

  v25 = a2;
  sub_2447F9D44();
  v6 = sub_2448EBD48();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (void **)((char *)&v24 - v9);
  v11 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for FutureTermination(0, a4, v14, v15);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (void **)((char *)&v24 - v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)&v24 - v17, a1, v16);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v21 = *v18;
      *v10 = *v18;
      swift_storeEnumTagMultiPayload();
      v22 = v21;
      v25(v10);

    }
    else
    {
      *v10 = 0;
      swift_storeEnumTagMultiPayload();
      v25(v10);
    }
    return (*(uint64_t (**)(void **, uint64_t))(v7 + 8))(v10, v6);
  }
  else
  {
    (*(void (**)(char *, void **, uint64_t))(v11 + 32))(v13, v18, a4);
    (*(void (**)(void **, char *, uint64_t))(v11 + 16))(v10, v13, a4);
    swift_storeEnumTagMultiPayload();
    v25(v10);
    (*(void (**)(void **, uint64_t))(v7 + 8))(v10, v6);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, a4);
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for CombinePublisherError(_QWORD *a1, id *a2)
{
  id v3;
  id v4;

  v3 = *a2;
  v4 = *a2;
  *a1 = v3;
  return a1;
}

void destroy for CombinePublisherError(id *a1)
{

}

void **assignWithCopy for CombinePublisherError(void **a1, id *a2)
{
  id v3;
  id v4;
  void *v5;

  v3 = *a2;
  v4 = *a2;
  v5 = *a1;
  *a1 = v3;

  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void **assignWithTake for CombinePublisherError(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for CombinePublisherError(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CombinePublisherError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

_QWORD *sub_2447FA14C(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for CombinePublisherError()
{
  return &type metadata for CombinePublisherError;
}

uint64_t sub_2447FA17C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2447FA1A0(uint64_t a1)
{
  uint64_t v1;

  return sub_2447F9E08(a1, *(void (**)(void **))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16));
}

uint64_t sub_2447FA1B0(uint64_t a1)
{
  return sub_2447FA1E0(a1, 0x5054585F5444, 0xE600000000000000, &byte_25738BC68);
}

uint64_t sub_2447FA1CC(uint64_t a1)
{
  return sub_2447FA1E0(a1, 18755, 0xE200000000000000, &byte_25738BC69);
}

uint64_t sub_2447FA1E0(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t result;
  char v19;
  char v20;
  uint64_t v21;
  char v23;

  v7 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v8 = objc_msgSend(v7, sel_environment);

  v9 = sub_2448EA800();
  if (*(_QWORD *)(v9 + 16))
  {
    v10 = sub_244828D0C(a2, a3);
    if ((v11 & 1) != 0)
    {
      v12 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v10);
      v14 = *v12;
      v13 = v12[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (sub_2448EA938() == 1702195828 && v15 == 0xE400000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v17 = sub_2448EBBEC();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if ((v17 & 1) != 0)
        {
LABEL_8:
          result = swift_bridgeObjectRelease_n();
LABEL_12:
          v20 = 1;
LABEL_13:
          v19 = v20 & 1;
          goto LABEL_14;
        }
        if (sub_2448EA938() != 7562617 || v21 != 0xE300000000000000)
        {
          v23 = sub_2448EBBEC();
          swift_bridgeObjectRelease();
          if ((v23 & 1) == 0 && (v14 != 49 || v13 != 0xE100000000000000))
          {
            v20 = sub_2448EBBEC();
            result = swift_bridgeObjectRelease_n();
            goto LABEL_13;
          }
          goto LABEL_8;
        }
        swift_bridgeObjectRelease_n();
      }
      result = swift_bridgeObjectRelease();
      goto LABEL_12;
    }
  }
  result = swift_bridgeObjectRelease();
  v19 = 0;
LABEL_14:
  *a4 = v19;
  return result;
}

uint64_t isAutomation.getter()
{
  if (qword_257389C58 != -1)
    swift_once();
  if ((byte_25738BC68 & 1) != 0)
    return 1;
  if (qword_257389C60 != -1)
    swift_once();
  return byte_25738BC69;
}

void catchAndRethrow<A>(_:errorHandler:)(void (*a1)(void), uint64_t a2, void (*a3)(void *))
{
  void *v3;

  a1();
  if (v3)
  {
    a3(v3);

  }
}

uint64_t Error.future<A>()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, a1);
  v8 = sub_2448EBB80();
  if (v8)
  {
    v9 = (void *)v8;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a1);
  }
  else
  {
    v9 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v12, v6, a1);
  }
  type metadata accessor for Future(0, a2, v10, v11);
  v13 = sub_2447D2F1C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Error+UVAdditions.swift", 129, 2, 33, 23, (uint64_t)"future()", 8, 2, v9);

  return v13;
}

unint64_t static SampleProjectConstants.appleBundleIDBase.getter()
{
  return 0xD00000000000001CLL;
}

ValueMetadata *type metadata accessor for SampleProjectConstants()
{
  return &type metadata for SampleProjectConstants;
}

uint64_t DiagnosticsReporter.underlyingCollector.getter()
{
  return swift_retain();
}

uint64_t DiagnosticsReporter.__allocating_init(storeArchiveAt:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[15];
  char v16;
  uint64_t v17;

  v2 = sub_2448EA434();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for DiagnosticsReporter.DiagnosticsURL();
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = swift_allocObject();
  sub_2447FA978(a1, (uint64_t)v8);
  v10 = 0;
  v11 = 0;
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) != 1)
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 32))(v5, v8, v2);
    v10 = sub_2448EA41C();
    v11 = v12;
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  }
  swift_beginAccess();
  v17 = qword_2573905F0;
  v16 = 0;
  type metadata accessor for DiagnosticsCollector(0);
  swift_allocObject();
  v13 = DiagnosticsCollector.init(options:simulatorDiagnosticsDeviceSet:outputDirectory:prefix:suffix:)(&v17, &v16, v10, v11, 0, 0, 0, 0);
  sub_2447FAB3C(a1);
  *(_QWORD *)(v9 + 16) = v13;
  return v9;
}

uint64_t DiagnosticsReporter.init(storeArchiveAt:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[15];
  char v17;
  uint64_t v18;

  v2 = v1;
  v4 = sub_2448EA434();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for DiagnosticsReporter.DiagnosticsURL();
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_2447FA978(a1, (uint64_t)v10);
  v11 = 0;
  v12 = 0;
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) != 1)
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32))(v7, v10, v4);
    v11 = sub_2448EA41C();
    v12 = v13;
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  }
  swift_beginAccess();
  v18 = qword_2573905F0;
  v17 = 0;
  type metadata accessor for DiagnosticsCollector(0);
  swift_allocObject();
  v14 = DiagnosticsCollector.init(options:simulatorDiagnosticsDeviceSet:outputDirectory:prefix:suffix:)(&v18, &v17, v11, v12, 0, 0, 0, 0);
  sub_2447FAB3C(a1);
  *(_QWORD *)(v2 + 16) = v14;
  return v2;
}

uint64_t type metadata accessor for DiagnosticsReporter.DiagnosticsURL()
{
  uint64_t result;

  result = qword_25738BD90;
  if (!qword_25738BD90)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_2447FA978(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DiagnosticsReporter.DiagnosticsURL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2447FA9BC()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_state);
  swift_retain();
  os_unfair_lock_lock(v1 + 8);
  sub_2448A0EBC((uint64_t)&v1[4], &v4);
  os_unfair_lock_unlock(v1 + 8);
  v2 = v4;
  swift_release();
  return v2;
}

uint64_t sub_2447FAA3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v5;
  char v10;
  os_unfair_lock_s *v11;

  v10 = *a5;
  v11 = *(os_unfair_lock_s **)(*(_QWORD *)(v5 + 16) + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_state);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  os_unfair_lock_lock(v11 + 8);
  sub_2448A05F4((uint64_t)&v11[4], v10, a1, a2, a3, a4);
  os_unfair_lock_unlock(v11 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t DiagnosticsReporter.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t DiagnosticsReporter.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_2447FAB3C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DiagnosticsReporter.DiagnosticsURL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for DiagnosticsReporter()
{
  return objc_opt_self();
}

uint64_t method lookup function for DiagnosticsReporter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DiagnosticsReporter.__allocating_init(storeArchiveAt:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of DiagnosticsReporter.summaryDescription.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of DiagnosticsReporter.insertLogEntry(titled:content:at:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t *initializeBufferWithCopyOfBuffer for DiagnosticsReporter.DiagnosticsURL(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = sub_2448EA434();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for DiagnosticsReporter.DiagnosticsURL(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = sub_2448EA434();
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *initializeWithCopy for DiagnosticsReporter.DiagnosticsURL(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_2448EA434();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithCopy for DiagnosticsReporter.DiagnosticsURL(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = sub_2448EA434();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

void *initializeWithTake for DiagnosticsReporter.DiagnosticsURL(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_2448EA434();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithTake for DiagnosticsReporter.DiagnosticsURL(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = sub_2448EA434();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for DiagnosticsReporter.DiagnosticsURL()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2447FB028(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = sub_2448EA434();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2)
    return v5 - 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DiagnosticsReporter.DiagnosticsURL()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2447FB080(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 1);
  else
    v5 = 0;
  v6 = sub_2448EA434();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_2447FB0D0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2448EA434();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
}

uint64_t sub_2447FB108(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2448EA434();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 1, v4);
}

uint64_t sub_2447FB148()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2448EA434();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t StaticBuiltProductPathProvider.init(paths:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t StaticBuiltProductPathProvider.paths.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v2 = *v0;
  v3 = *(uint64_t (**)(uint64_t))(v1 + 8);
  swift_bridgeObjectRetain();
  return sub_2447FB1E4(v3, v1, v2);
}

uint64_t sub_2447FB1E4(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_2447FB1F4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v2 = *v0;
  v3 = *(uint64_t (**)(uint64_t))(v1 + 8);
  swift_bridgeObjectRetain();
  return sub_2447FB1E4(v3, v1, v2);
}

uint64_t dispatch thunk of BuiltProductPathProvider.paths.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 8) + *(_QWORD *)(a2 + 8));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_2447FB2A0;
  return v7(a1, a2);
}

uint64_t sub_2447FB2A0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

ValueMetadata *type metadata accessor for StaticBuiltProductPathProvider()
{
  return &type metadata for StaticBuiltProductPathProvider;
}

uint64_t sub_2447FB300()
{
  uint64_t v0;

  v0 = sub_2448EA5CC();
  __swift_allocate_value_buffer(v0, qword_25738BDB8);
  __swift_project_value_buffer(v0, (uint64_t)qword_25738BDB8);
  return sub_2447FB348();
}

uint64_t sub_2447FB348()
{
  uint64_t v0;
  id v1;
  void *v2;
  unsigned int v3;

  v0 = sub_2448EA5FC();
  MEMORY[0x24BDAC7A8](v0);
  v1 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v2 = (void *)sub_2448EAA70();
  v3 = objc_msgSend(v1, sel_BOOLForKey_, v2);

  if (!v3)
    return sub_2448EA5C0();
  sub_2448EA5F0();
  return sub_2448EA5B4();
}

uint64_t static OSSignposter.ultraviolet.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_257389C68 != -1)
    swift_once();
  v2 = sub_2448EA5CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_25738BDB8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

BOOL sub_2447FB528()
{
  BOOL v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_getAtKeyPath();
  swift_getAtKeyPath();
  v0 = v7 < v6;
  if (v7 == v6)
  {
    swift_getAtKeyPath();
    swift_getAtKeyPath();
    v0 = v5 < v4;
    if (v5 == v4)
    {
      swift_getAtKeyPath();
      swift_getAtKeyPath();
      v0 = v3 < v2;
      if (v3 == v2)
        return 0;
    }
  }
  return v0;
}

uint64_t VersionNumber.major.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t VersionNumber.minor.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t VersionNumber.update.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

PreviewsFoundationOS::VersionNumber __swiftcall VersionNumber.init(major:minor:update:)(Swift::Int major, Swift::Int minor, Swift::Int update)
{
  Swift::Int *v3;
  PreviewsFoundationOS::VersionNumber result;

  *v3 = major;
  v3[1] = minor;
  v3[2] = update;
  result.update = update;
  result.minor = minor;
  result.major = major;
  return result;
}

PreviewsFoundationOS::VersionNumber __swiftcall VersionNumber.init(_:)(PreviewsFoundationOS::VersionNumber result)
{
  PreviewsFoundationOS::VersionNumber *v1;

  *v1 = result;
  return result;
}

PreviewsFoundationOS::VersionNumber_optional __swiftcall VersionNumber.init(_:)(Swift::String a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int isUniquelyReferenced_nonNull_native;
  Swift::Int v6;
  Swift::Bool v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  char v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  PreviewsFoundationOS::VersionNumber_optional result;

  v2 = v1;
  v40 = a1;
  sub_2447D0980();
  v3 = sub_2448EB5B0();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
  {
    v35 = 0;
    v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_64:
    swift_bridgeObjectRelease();
    if (v35 != v9[2] || v35 - 1 >= 3)
    {
      isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_BYTE *)(v2 + 24) = 1;
    }
    else
    {
      v37 = v9[4];
      if (v35 >= 2)
      {
        v38 = v9[5];
        if (v35 == 2)
          v39 = 0;
        else
          v39 = v9[6];
      }
      else
      {
        v38 = 0;
        v39 = 0;
      }
      isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
      *(_QWORD *)v2 = v37;
      *(_QWORD *)(v2 + 8) = v38;
      *(_QWORD *)(v2 + 16) = v39;
      *(_BYTE *)(v2 + 24) = 0;
    }
    goto LABEL_78;
  }
  isUniquelyReferenced_nonNull_native = swift_bridgeObjectRetain();
  v8 = 0;
  v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v10 = (uint64_t *)(v3 + 32 + 16 * v8);
    v11 = *v10;
    v12 = v10[1];
    v13 = HIBYTE(v12) & 0xF;
    v14 = v11 & 0xFFFFFFFFFFFFLL;
    if ((v12 & 0x2000000000000000) != 0)
      v15 = HIBYTE(v12) & 0xF;
    else
      v15 = v11 & 0xFFFFFFFFFFFFLL;
    if (!v15)
      goto LABEL_4;
    if ((v12 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      v18 = (uint64_t)sub_2448D7398(v11, v12, 10);
      v34 = v33;
      isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
      if ((v34 & 1) == 0)
        goto LABEL_48;
      goto LABEL_4;
    }
    if ((v12 & 0x2000000000000000) == 0)
    {
      if ((v11 & 0x1000000000000000) != 0)
        v16 = (unsigned __int8 *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v16 = (unsigned __int8 *)sub_2448EB820();
      isUniquelyReferenced_nonNull_native = (Swift::Int)sub_2448D7348(v16, v14, 10);
      if ((v17 & 1) == 0)
      {
        v18 = isUniquelyReferenced_nonNull_native;
LABEL_48:
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          isUniquelyReferenced_nonNull_native = (Swift::Int)sub_2447C26A0(0, v9[2] + 1, 1, v9);
          v9 = (_QWORD *)isUniquelyReferenced_nonNull_native;
        }
        v29 = v9[2];
        v28 = v9[3];
        if (v29 >= v28 >> 1)
        {
          isUniquelyReferenced_nonNull_native = (Swift::Int)sub_2447C26A0((_QWORD *)(v28 > 1), v29 + 1, 1, v9);
          v9 = (_QWORD *)isUniquelyReferenced_nonNull_native;
        }
        v9[2] = v29 + 1;
        v9[v29 + 4] = v18;
        goto LABEL_4;
      }
      goto LABEL_4;
    }
    v40._countAndFlagsBits = v11;
    v40._object = (void *)(v12 & 0xFFFFFFFFFFFFFFLL);
    if (v11 == 43)
    {
      if (!v13)
        goto LABEL_77;
      if (v13 != 1 && (BYTE1(v11) - 48) <= 9u)
      {
        v18 = (BYTE1(v11) - 48);
        if (v13 == 2)
          goto LABEL_48;
        if ((BYTE2(v11) - 48) <= 9u)
        {
          v18 = 10 * (BYTE1(v11) - 48) + (BYTE2(v11) - 48);
          v19 = v13 - 3;
          if (v13 != 3)
          {
            v20 = (unsigned __int8 *)&v40._countAndFlagsBits + 3;
            while (1)
            {
              v21 = *v20 - 48;
              if (v21 > 9)
                goto LABEL_4;
              v22 = 10 * v18;
              if ((unsigned __int128)(v18 * (__int128)10) >> 64 != (10 * v18) >> 63)
                goto LABEL_4;
              v18 = v22 + v21;
              if (__OFADD__(v22, v21))
                goto LABEL_4;
              ++v20;
              if (!--v19)
                goto LABEL_48;
            }
          }
          goto LABEL_48;
        }
      }
      goto LABEL_4;
    }
    if (v11 != 45)
    {
      if (v13 && (v11 - 48) <= 9u)
      {
        v18 = (v11 - 48);
        if (v13 == 1)
          goto LABEL_48;
        if ((BYTE1(v11) - 48) <= 9u)
        {
          v18 = 10 * (v11 - 48) + (BYTE1(v11) - 48);
          v23 = v13 - 2;
          if (v13 != 2)
          {
            v24 = (unsigned __int8 *)&v40._countAndFlagsBits + 2;
            while (1)
            {
              v25 = *v24 - 48;
              if (v25 > 9)
                goto LABEL_4;
              v26 = 10 * v18;
              if ((unsigned __int128)(v18 * (__int128)10) >> 64 != (10 * v18) >> 63)
                goto LABEL_4;
              v18 = v26 + v25;
              if (__OFADD__(v26, v25))
                goto LABEL_4;
              ++v24;
              if (!--v23)
                goto LABEL_48;
            }
          }
          goto LABEL_48;
        }
      }
      goto LABEL_4;
    }
    if (!v13)
      break;
    if (v13 != 1 && (BYTE1(v11) - 48) <= 9u)
    {
      if (v13 == 2)
      {
        v18 = -(uint64_t)(BYTE1(v11) - 48);
        goto LABEL_48;
      }
      if ((BYTE2(v11) - 48) <= 9u)
      {
        v18 = -10 * (BYTE1(v11) - 48) - (BYTE2(v11) - 48);
        v27 = v13 - 3;
        if (v13 != 3)
        {
          v30 = (unsigned __int8 *)&v40._countAndFlagsBits + 3;
          while (1)
          {
            v31 = *v30 - 48;
            if (v31 > 9)
              goto LABEL_4;
            v32 = 10 * v18;
            if ((unsigned __int128)(v18 * (__int128)10) >> 64 != (10 * v18) >> 63)
              goto LABEL_4;
            v18 = v32 - v31;
            if (__OFSUB__(v32, v31))
              goto LABEL_4;
            ++v30;
            if (!--v27)
              goto LABEL_48;
          }
        }
        goto LABEL_48;
      }
    }
LABEL_4:
    if (++v8 == v4)
    {
      swift_bridgeObjectRelease();
      v35 = *(_QWORD *)(v3 + 16);
      goto LABEL_64;
    }
  }
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  result.value.update = v6;
  result.value.minor = v14;
  result.value.major = isUniquelyReferenced_nonNull_native;
  result.is_nil = v7;
  return result;
}

__n128 static VersionNumber.current.getter@<Q0>(__n128 *a1@<X8>)
{
  id v2;
  unint64_t v3;
  __n128 result;
  __n128 v5;
  __n128 v6;
  unint64_t v7;

  v2 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  objc_msgSend(v2, sel_operatingSystemVersion);
  v3 = v7;
  v5 = v6;

  result = v5;
  *a1 = v5;
  a1[1].n128_u64[0] = v3;
  return result;
}

uint64_t VersionNumber.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v3 = sub_2448EBB5C();
  sub_2448EABC0();
  sub_2448EBB5C();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  result = v3;
  if (v1)
  {
    sub_2448EABC0();
    sub_2448EBB5C();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    return v3;
  }
  return result;
}

BOOL static VersionNumber.< infix(_:_:)()
{
  BOOL v0;

  swift_getKeyPath();
  swift_getKeyPath();
  swift_getKeyPath();
  v0 = sub_2447FB528();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t VersionNumber.hash(into:)()
{
  sub_2448EBD0C();
  sub_2448EBD0C();
  return sub_2448EBD0C();
}

BOOL static VersionNumber.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t VersionNumber.hashValue.getter()
{
  sub_2448EBD00();
  sub_2448EBD0C();
  sub_2448EBD0C();
  sub_2448EBD0C();
  return sub_2448EBD3C();
}

uint64_t sub_2447FBDB0()
{
  sub_2448EBD00();
  sub_2448EBD0C();
  sub_2448EBD0C();
  sub_2448EBD0C();
  return sub_2448EBD3C();
}

uint64_t sub_2447FBE18()
{
  sub_2448EBD0C();
  sub_2448EBD0C();
  return sub_2448EBD0C();
}

uint64_t sub_2447FBE5C()
{
  sub_2448EBD00();
  sub_2448EBD0C();
  sub_2448EBD0C();
  sub_2448EBD0C();
  return sub_2448EBD3C();
}

BOOL sub_2447FBEC0()
{
  BOOL v0;

  swift_getKeyPath();
  swift_getKeyPath();
  swift_getKeyPath();
  v0 = sub_2447FB528();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

BOOL sub_2447FBF88()
{
  BOOL v0;

  swift_getKeyPath();
  swift_getKeyPath();
  swift_getKeyPath();
  v0 = sub_2447FB528();
  swift_release();
  swift_release();
  swift_release();
  return !v0;
}

BOOL sub_2447FC054()
{
  BOOL v0;

  swift_getKeyPath();
  swift_getKeyPath();
  swift_getKeyPath();
  v0 = sub_2447FB528();
  swift_release();
  swift_release();
  swift_release();
  return !v0;
}

BOOL sub_2447FC120()
{
  BOOL v0;

  swift_getKeyPath();
  swift_getKeyPath();
  swift_getKeyPath();
  v0 = sub_2447FB528();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

BOOL sub_2447FC1EC(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

unint64_t sub_2447FC220()
{
  unint64_t result;

  result = qword_25738BDD0[0];
  if (!qword_25738BDD0[0])
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for VersionNumber, &type metadata for VersionNumber);
    atomic_store(result, qword_25738BDD0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for VersionNumber(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for VersionNumber(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for VersionNumber()
{
  return &type metadata for VersionNumber;
}

uint64_t ErasingBox.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_2447FC300(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for CastableValueWrapper, (uint64_t)&off_251581268, a3);
}

uint64_t type metadata accessor for CastableValueWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CastableValueWrapper);
}

_QWORD *ErasingBox.forceUnwrap<A>(to:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_2447FC36C(a1, (uint64_t (*)(_QWORD))type metadata accessor for CastableValueWrapper, a2);
}

uint64_t SendableErasingBox.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_2447FC300(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for SendableCastableValueWrapper, (uint64_t)&off_251581260, a3);
}

uint64_t sub_2447FC300@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *boxed_opaque_existential_1;

  a5[3] = a3(0);
  a5[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(boxed_opaque_existential_1, a1, a2);
}

uint64_t type metadata accessor for SendableCastableValueWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SendableCastableValueWrapper);
}

_QWORD *SendableErasingBox.forceUnwrap<A>(to:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_2447FC36C(a1, (uint64_t (*)(_QWORD))type metadata accessor for SendableCastableValueWrapper, a2);
}

_QWORD *sub_2447FC36C@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;

  v4 = v3;
  v7 = a2(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v13 - v9;
  v11 = v4[3];
  result = __swift_project_boxed_opaque_existential_1(v4, v11);
  if (v7 == v11)
  {
    (*(void (**)(char *, _QWORD *, uint64_t))(v8 + 16))(v10, result, v7);
    return (_QWORD *)(*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(a3, v10, a1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t initializeWithCopy for ErasingBox(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for ErasingBox(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for ErasingBox(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for ErasingBox()
{
  return &type metadata for ErasingBox;
}

uint64_t _s20PreviewsFoundationOS10ErasingBoxVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_2447FC688(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SendableErasingBox()
{
  return &type metadata for SendableErasingBox;
}

uint64_t sub_2447FC6F0()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_2447FC75C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2447FC80C + 4 * byte_2448EF5A0[(v7 - 1)]))();
}

void sub_2447FC85C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t SubscriberCollection.init()@<X0>(uint64_t *a1@<X8>)
{
  sub_2447F8114();
  return OrderedDictionary.init()(a1);
}

uint64_t static SubscriberCollection.add(file:line:column:function:_:modify:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t (**a9)()@<X8>, uint64_t a10, void (*a11)(uint64_t (*)(uint64_t a1)), uint64_t a12, uint64_t a13)
{
  __int128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  *(_QWORD *)&v14 = a1;
  *((_QWORD *)&v14 + 1) = a2;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  v19 = a7;
  v20 = a8;
  return static SubscriberCollection.add(callsite:_:modify:)(&v14, a10, a11, a12, a13, a9);
}

uint64_t static SubscriberCollection.add(callsite:_:modify:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t (*)(uint64_t a1))@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (**a6)()@<X8>)
{
  __int128 v11;
  _QWORD *v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)();
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[2];
  _OWORD v24[2];

  v11 = a1[1];
  v23[0] = *a1;
  v23[1] = v11;
  v24[0] = a1[2];
  *(_OWORD *)((char *)v24 + 9) = *(_OWORD *)((char *)a1 + 41);
  if (qword_257389CA0 != -1)
    swift_once();
  v12 = (_QWORD *)((char *)off_25738DB00 + 16);
  v13 = (os_unfair_lock_s *)((char *)off_25738DB00 + 24);
  swift_retain();
  os_unfair_lock_lock(v13);
  sub_24483B130(v12, &v22);
  os_unfair_lock_unlock(v13);
  v14 = v22;
  v15 = swift_release();
  MEMORY[0x24BDAC7A8](v15);
  v19 = a5;
  v20 = v14;
  v21 = a2;
  a3(sub_2447FD760);
  v16 = (uint64_t (*)())swift_allocObject();
  *((_QWORD *)v16 + 2) = a5;
  *((_QWORD *)v16 + 3) = a3;
  *((_QWORD *)v16 + 4) = a4;
  *((_QWORD *)v16 + 5) = v14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738AF78);
  swift_allocObject();
  v17 = sub_2447E5D90(v23, 0, 0, 1, 0, 0xD000000000000011, 0x80000002448F9A50, 0x64656C65636E6163, 0xE800000000000000);
  *a6 = sub_2447FD790;
  a6[1] = v16;
  a6[2] = (uint64_t (*)())v17;
  return swift_retain();
}

uint64_t sub_2447FCC64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v7 = sub_2448EB508();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v14 - v8;
  v10 = *(_QWORD *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v14 - v8, a3, a4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v9, 0, 1, a4);
  v15 = a2;
  v11 = sub_2447F8114();
  v12 = type metadata accessor for OrderedDictionary(0, (uint64_t)&type metadata for Identifier, a4, v11);
  return OrderedDictionary.subscript.setter(v9, (uint64_t)&v15, v12);
}

uint64_t sub_2447FCD3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v5 = sub_2448EB508();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12 - v7;
  v13 = a2;
  v9 = sub_2447F8114();
  v10 = type metadata accessor for OrderedDictionary(0, (uint64_t)&type metadata for Identifier, a3, v9);
  OrderedDictionary.removeValue(forKey:)((uint64_t)&v13, v10, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t static SubscriberCollection.add<A>(file:line:column:function:_:at:of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t (**a9)()@<X8>, uint64_t a10, uint64_t *a11, uint64_t a12)
{
  __int128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  *(_QWORD *)&v13 = a1;
  *((_QWORD *)&v13 + 1) = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  v18 = a7;
  v19 = a8;
  return static SubscriberCollection.add<A>(callsite:_:at:of:)(&v13, a10, a11, a12, a9);
}

uint64_t static SubscriberCollection.add<A>(callsite:_:at:of:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t (**a5)()@<X8>)
{
  uint64_t v9;
  char v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD);
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)();
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  __int128 v25;
  char v26;
  __int128 v27;
  __int128 v28;
  char v29;

  v9 = *a3;
  v10 = *((_BYTE *)a1 + 16);
  v11 = *((_BYTE *)a1 + 56);
  v25 = *a1;
  v26 = v10;
  v27 = *(__int128 *)((char *)a1 + 24);
  v28 = *(__int128 *)((char *)a1 + 40);
  v29 = v11;
  v12 = (uint64_t *)(v9 + *MEMORY[0x24BEE35B8]);
  v13 = *v12;
  v14 = v12[1];
  v15 = MEMORY[0x24BEE4AE0] + 8;
  v16 = sub_24481A694(*v12, v14, MEMORY[0x24BEE4AE0] + 8);
  v18 = v17;
  swift_retain();
  v19 = captureWeak<A, B, C>(_:deinitialized:toInvoke:)(a4, (uint64_t)v16, v18, (uint64_t)sub_2447FD7D0, (uint64_t)a3, v13, v14, v15);
  v21 = v20;
  swift_release();
  swift_release();
  v22 = (_QWORD *)swift_allocObject();
  v23 = *(_QWORD *)(v14 + 16);
  v22[2] = v23;
  v22[3] = v13;
  v22[4] = v19;
  v22[5] = v21;
  static SubscriberCollection.add(callsite:_:modify:)(&v25, a2, (void (*)(uint64_t (*)(uint64_t)))sub_2447FD7FC, (uint64_t)v22, v23, a5);
  return swift_release();
}

uint64_t sub_2447FCF7C(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void (*v10)(_BYTE *, _QWORD);
  uint64_t v11;
  _BYTE v13[32];
  uint64_t v14;

  v7 = *a4;
  v8 = (_QWORD *)swift_allocObject();
  v9 = (_QWORD *)(v7 + *MEMORY[0x24BEE35B8]);
  v8[2] = *(_QWORD *)(v9[1] + 16);
  v8[3] = *v9;
  v8[4] = a2;
  v8[5] = a3;
  v14 = a1;
  swift_unknownObjectRetain();
  v10 = (void (*)(_BYTE *, _QWORD))swift_modifyAtReferenceWritableKeyPath();
  a2(v11);
  v10(v13, 0);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t SubscriberCollection.all.getter(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = sub_2447F8114();
  v3 = type metadata accessor for OrderedDictionary(0, (uint64_t)&type metadata for Identifier, v1, v2);
  return OrderedDictionary.lazyValues.getter(v3);
}

void SubscriberCollection.notifyAll(closure:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t TupleTypeMetadata2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[10];

  v12[2] = a1;
  v12[3] = a2;
  v4 = *(_QWORD *)(a3 + 16);
  v12[6] = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v12[1] = (char *)v12 - v6;
  v7 = sub_2448EB508();
  v12[4] = *(_QWORD *)(v7 - 8);
  v12[5] = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  MEMORY[0x24BDAC7A8](v8);
  v10 = *v3;
  v9 = v3[1];
  v12[7] = v10;
  v12[8] = v9;
  v12[9] = 0;
  v11 = sub_2447F8114();
  type metadata accessor for OrderedDictionary(0, (uint64_t)&type metadata for Identifier, v4, v11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  OrderedDictionary.endIndex.getter();
}

uint64_t SubscriberCollection.isEmpty.getter(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = sub_2447F8114();
  type metadata accessor for OrderedDictionary(0, (uint64_t)&type metadata for Identifier, v1, v2);
  return OrderedDictionary.isEmpty.getter() & 1;
}

void SubscriberCollection.count.getter(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = sub_2447F8114();
  type metadata accessor for OrderedDictionary(0, (uint64_t)&type metadata for Identifier, v1, v2);
  OrderedDictionary.count.getter();
}

Swift::Void __swiftcall SubscriberCollection.removeAll()()
{
  _OWORD *v0;
  __int128 v1;

  sub_2447F8114();
  OrderedDictionary.init()((uint64_t *)&v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *v0 = v1;
}

uint64_t SubscriberCollection.sort(using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = sub_2447F8114();
  type metadata accessor for OrderedDictionary(0, (uint64_t)&type metadata for Identifier, v3, v4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  OrderedDictionary.sort(using:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_2447FD4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v8 = sub_2448EB508();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v11 = MEMORY[0x24BDAC7A8](v10);
  MEMORY[0x24BDAC7A8](v11);
  v12 = sub_2447F8114();
  type metadata accessor for OrderedDictionary(0, (uint64_t)&type metadata for Identifier, a7, v12);
  OrderedDictionary.subscript.getter();
}

void sub_2447FD5CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v0) != 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v2, v3, v0);
    v5 = *(_QWORD *)(v4 - 112);
    *(_QWORD *)(v4 - 96) = *(_QWORD *)(v4 - 120);
    *(_QWORD *)(v4 - 88) = v5;
    *(_QWORD *)(v4 - 104) = *(_QWORD *)(v4 - 128);
    OrderedDictionary.subscript.getter();
  }
  __break(1u);
  JUMPOUT(0x2447FD6A0);
}

void SubscriberCollection<A>.notify()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  void (*v7)(uint64_t);
  uint64_t v8;

  v1 = v0[1];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *v0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v4 = 0;
    while (*(_QWORD *)(v3 + 16))
    {
      v5 = sub_244828D70(*(_QWORD *)(v1 + 8 * v4 + 32));
      if ((v6 & 1) == 0)
        goto LABEL_9;
      v7 = *(void (**)(uint64_t))(*(_QWORD *)(v3 + 56) + 16 * v5);
      ++v4;
      v8 = swift_retain();
      v7(v8);
      swift_release();
      if (v2 == v4)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
    }
    __break(1u);
LABEL_9:
    __break(1u);
  }
}

uint64_t sub_2447FD760(uint64_t a1)
{
  uint64_t *v1;

  return sub_2447FCC64(a1, v1[3], v1[4], v1[2]);
}

uint64_t sub_2447FD76C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2447FD790()
{
  _QWORD *v0;
  uint64_t (*v1)(uint64_t (*)(uint64_t), _QWORD *);
  uint64_t v2;
  _QWORD v4[4];

  v1 = (uint64_t (*)(uint64_t (*)(uint64_t), _QWORD *))v0[3];
  v2 = v0[5];
  v4[2] = v0[2];
  v4[3] = v2;
  return v1(sub_2447FD86C, v4);
}

uint64_t sub_2447FD7D0(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t *v3;

  return sub_2447FCF7C(a1, a2, a3, v3);
}

uint64_t sub_2447FD7D8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2447FD7FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t (*)(), _OWORD *);
  _OWORD v5[2];
  uint64_t v6;
  uint64_t v7;

  v3 = *(uint64_t (**)(uint64_t (*)(), _OWORD *))(v2 + 32);
  v5[1] = *(_OWORD *)(v2 + 16);
  v6 = a1;
  v7 = a2;
  return v3(sub_2447DDEBC, v5);
}

void sub_2447FD840(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_2447FD4B0(a1, a2, v2[3], v2[4], v2[5], v2[6], v2[2]);
}

uint64_t type metadata accessor for SubscriberCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SubscriberCollection);
}

uint64_t sub_2447FD85C()
{
  return swift_deallocObject();
}

uint64_t sub_2447FD86C(uint64_t a1)
{
  uint64_t v1;

  return sub_2447FCD3C(a1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 16));
}

uint64_t Callsite.init(_:_:_:_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  *(_QWORD *)a9 = result;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_BYTE *)(a9 + 56) = a8;
  return result;
}

uint64_t Callsite.file.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Callsite.line.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t Callsite.column.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t Callsite.function.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t Callsite.description.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  sub_2448EB79C();
  sub_2447FDA40();
  v0 = (void *)sub_2448EB49C();
  v1 = objc_msgSend(v0, sel_lastPathComponent);

  v2 = sub_2448EAA94();
  swift_bridgeObjectRelease();

  sub_2448EABC0();
  sub_2448EBB5C();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  sub_2448EBB5C();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  sub_2448EB7D8();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  return v2;
}

unint64_t sub_2447FDA40()
{
  unint64_t result;

  result = qword_25738BF58[0];
  if (!qword_25738BF58[0])
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, qword_25738BF58);
  }
  return result;
}

__n128 CallsiteError.callsite.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  char v3;
  __n128 result;

  v2 = *(_BYTE *)(v1 + 16);
  v3 = *(_BYTE *)(v1 + 56);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_BYTE *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  result = *(__n128 *)(v1 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_BYTE *)(a1 + 56) = v3;
  return result;
}

uint64_t CallsiteError.underlying.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t CallsiteError.init(underlying:callsite:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v8;
  char v9;
  uint64_t v10;

  v8 = *(_BYTE *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 56);
  *(_OWORD *)a5 = *(_OWORD *)a2;
  *(_BYTE *)(a5 + 16) = v8;
  *(_OWORD *)(a5 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a5 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a5 + 56) = v9;
  v10 = a5 + *(int *)(type metadata accessor for CallsiteError(0, a3, a4, a4) + 36);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v10, a1, a3);
}

uint64_t type metadata accessor for CallsiteError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CallsiteError);
}

uint64_t CallsiteError.lowValueTitle.getter()
{
  return Callsite.description.getter();
}

uint64_t CallsiteError.additionalInfo.getter()
{
  return 0;
}

uint64_t CallsiteError.additionalDiagnostics.getter()
{
  return 0;
}

uint64_t CallsiteError.isPotentialCrash.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;

  Error.humanReadable.getter(*(_QWORD *)(a1 + 16), (uint64_t)v4);
  v1 = v5;
  v2 = v6;
  __swift_project_boxed_opaque_existential_1(v4, v5);
  LOBYTE(v1) = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 96))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  return v1 & 1;
}

uint64_t sub_2447FDC30()
{
  return 0;
}

uint64_t sub_2447FDC40(uint64_t a1)
{
  uint64_t v2;

  v2 = MEMORY[0x24951AC70](&protocol conformance descriptor for CallsiteError<A>, a1);
  return HumanReadableError.errorDescription.getter(a1, v2);
}

uint64_t sub_2447FDC74(uint64_t a1)
{
  uint64_t v2;

  v2 = MEMORY[0x24951AC70](&protocol conformance descriptor for CallsiteError<A>, a1);
  return HumanReadableError.description.getter(a1, v2);
}

uint64_t Error.trackingCallsite(file:line:column:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t *v32;
  _QWORD v33[3];
  uint64_t v34;
  uint64_t v35;

  v31 = a8;
  v29 = a6;
  v30 = a7;
  v27 = a4;
  v28 = a5;
  HIDWORD(v26) = a3;
  v32 = a9;
  v14 = *(_QWORD *)(a10 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  Error.humanReadable.getter(a10, (uint64_t)v33);
  v18 = v34;
  v17 = v35;
  __swift_project_boxed_opaque_existential_1(v33, v34);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v11, a10);
  v20 = type metadata accessor for CallsiteError(0, a10, a11, v19);
  MEMORY[0x24951AC70](&protocol conformance descriptor for CallsiteError<A>, v20);
  v21 = (void *)swift_allocError();
  *(_QWORD *)v22 = a1;
  *(_QWORD *)(v22 + 8) = a2;
  *(_BYTE *)(v22 + 16) = BYTE4(v26);
  v23 = v28;
  *(_QWORD *)(v22 + 24) = v27;
  *(_QWORD *)(v22 + 32) = v23;
  v24 = v30;
  *(_QWORD *)(v22 + 40) = v29;
  *(_QWORD *)(v22 + 48) = v24;
  *(_BYTE *)(v22 + 56) = v31;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v22 + *(int *)(v20 + 36), v16, a10);
  HumanReadableError.withUnderlying(_:)(v21, v18, v17, v32);

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
}

uint64_t sub_2447FDE14(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x24951AC70](&protocol conformance descriptor for CallsiteError<A>);
  result = MEMORY[0x24951AC70](&protocol conformance descriptor for CallsiteError<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void sub_2447FDE58()
{
  JUMPOUT(0x24951AC70);
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Callsite(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Callsite(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 57) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Callsite()
{
  return &type metadata for Callsite;
}

uint64_t sub_2447FDEF0()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_2447FDF68(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  __int128 v9;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 57) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    v9 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v9;
    a1[2] = *((_OWORD *)a2 + 2);
    *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 57) & ~v5, ((unint64_t)a2 + v5 + 57) & ~v5);
  }
  return v3;
}

uint64_t sub_2447FE01C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_OWORD *sub_2447FE03C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 16))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t sub_2447FE09C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))((*(unsigned __int8 *)(v4 + 80) + 57 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 57 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_OWORD *sub_2447FE124(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t sub_2447FE184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))((*(unsigned __int8 *)(v4 + 80) + 57 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 57 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t sub_2447FE1F4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 57) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 57) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2447FE2B4 + 4 * byte_2448EF700[(v8 - 1)]))();
}

void sub_2447FE314(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 57) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 57) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

Swift::String __swiftcall lengthPrefixedNameSuitableForMangledSymbolName(_:)(Swift::String a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  Swift::String result;

  _s20PreviewsFoundationOS8PunycodeO6encode6stringSSSgSS_tFZ_0(a1._countAndFlagsBits, (unint64_t)a1._object);
  if (!v1)
    swift_bridgeObjectRetain();
  sub_2448EAC68();
  sub_2448EAB78();
  sub_2448EAB78();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EAB78();
  sub_2448EBB5C();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  v2 = 0;
  v3 = (void *)0xE000000000000000;
  result._object = v3;
  result._countAndFlagsBits = v2;
  return result;
}

Swift::tuple_module_String_name_String_optional __swiftcall demangleSimpleType(_:)(Swift::String a1)
{
  uint64_t countAndFlagsBits;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  char v11;
  char v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  char v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  _QWORD v37[2];
  Swift::tuple_module_String_name_String_optional result;

  countAndFlagsBits = a1._countAndFlagsBits;
  v2 = sub_2448EB4CC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_allocWithZone(MEMORY[0x24BDD17A8]);
  swift_bridgeObjectRetain();
  v7 = (void *)sub_2448EAA70();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, sel_initWithString_, v7);

  v9 = *MEMORY[0x24BDD0458];
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v10(v5, v9, v2);
  sub_2448EB4D8();
  v12 = v11;
  v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v5, v2);
  if ((v12 & 1) != 0)
  {

    goto LABEL_18;
  }
  sub_2448EB4B4();
  v37[1] = countAndFlagsBits;
  if (sub_2448EAC80() == 95 && v14 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = sub_2448EBBEC();
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
      goto LABEL_11;
  }
  sub_2448EB4C0();
  swift_bridgeObjectRelease();
LABEL_11:
  sub_2448EB4B4();
  v17 = sub_2448EABA8();
  v18 = sub_2448EB4B4();
  if (v17 >> 14 < v18 >> 14)
  {
    __break(1u);
    goto LABEL_25;
  }
  v22 = sub_2448EACA4();
  v23 = MEMORY[0x2495192FC](v22);
  v25 = v24;
  swift_bridgeObjectRelease();
  sub_2448EB4A8();
  v27 = v26;
  swift_bridgeObjectRelease();
  if (v27)
  {
    v10(v5, v9, v2);
    sub_2448EB4D8();
    v29 = v28;
    v13(v5, v2);
    if ((v29 & 1) == 0)
    {
      sub_2448EB4B4();
      if (sub_2448EAC80() == 95 && v30 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v33 = sub_2448EBBEC();
        swift_bridgeObjectRelease();
        if ((v33 & 1) == 0)
          goto LABEL_22;
      }
      sub_2448EB4C0();
      swift_bridgeObjectRelease();
LABEL_22:
      sub_2448EB4B4();
      v34 = sub_2448EABA8();
      v18 = sub_2448EB4B4();
      if (v34 >> 14 >= v18 >> 14)
      {
        v35 = sub_2448EACA4();
        v31 = MEMORY[0x2495192FC](v35);
        v32 = v36;
        swift_bridgeObjectRelease();

        goto LABEL_19;
      }
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
  }

  swift_bridgeObjectRelease();
LABEL_18:
  v23 = 0;
  v25 = 0;
  v31 = 0;
  v32 = 0;
LABEL_19:
  v18 = v23;
  v19 = v25;
  v20 = v31;
  v21 = v32;
LABEL_26:
  result.value.name._object = v21;
  result.value.name._countAndFlagsBits = v20;
  result.value.module._object = v19;
  result.value.module._countAndFlagsBits = v18;
  return result;
}

void OrderedDictionary.subscript.getter()
{
  JUMPOUT(0x2495190C8);
}

uint64_t OrderedDictionary.subscript.setter(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, char *, uint64_t);
  void (*v19)(char *, uint64_t);
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  char *v23;

  v6 = *(_QWORD *)(a3 + 24);
  v7 = sub_2448EB508();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v22 - v13;
  v15 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v23 = a1;
  v18(v14, a1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v6) == 1)
  {
    v19 = *(void (**)(char *, uint64_t))(v8 + 8);
    v19(v14, v7);
    OrderedDictionary.removeValue(forKey:)(a2, a3, v11);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 8))(a2);
    v19(v23, v7);
    return ((uint64_t (*)(char *, uint64_t))v19)(v11, v7);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v14, v6);
    OrderedDictionary.updateValue(_:forKey:)((uint64_t)v17, a2, a3, (uint64_t)v11);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 8))(a2);
    v21 = *(void (**)(char *, uint64_t))(v8 + 8);
    v21(v23, v7);
    v21(v11, v7);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v6);
  }
}

uint64_t OrderedDictionary.init(dictionaryLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  _OWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;

  v10 = sub_2448EB508();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v50 = (char *)&v37 - v12;
  v49 = *(_QWORD *)(a2 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v48 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v47 = (char *)&v37 - v15;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v52 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v37 = *(_QWORD *)(v52 + 64);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v18 = (char *)&v37 - v17;
  MEMORY[0x249519668](a1, TupleTypeMetadata2);
  v46 = a3;
  v51 = a4;
  *(_QWORD *)&v55 = sub_2448EA830();
  *((_QWORD *)&v55 + 1) = sub_2448EAE54();
  v45 = a2;
  v43 = sub_2448EAEE4();
  v44 = (char *)&v55 + 8;
  sub_2448EAE24();
  if (MEMORY[0x2495196A4](a1, TupleTypeMetadata2))
  {
    v38 = a5;
    v19 = 0;
    v20 = *(int *)(TupleTypeMetadata2 + 48);
    v41 = TupleTypeMetadata2;
    v42 = v18;
    v39 = &v18[v20];
    v40 = a1;
    v22 = v48;
    v21 = v49;
    v24 = v46;
    v23 = v47;
    v25 = &v18[v20];
    while (1)
    {
      v26 = sub_2448EAE6C();
      sub_2448EAE18();
      if ((v26 & 1) != 0)
      {
        v27 = v42;
        (*(void (**)(char *, unint64_t, uint64_t))(v52 + 16))(v42, a1+ ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))+ *(_QWORD *)(v52 + 72) * v19, TupleTypeMetadata2);
        v28 = v19 + 1;
        if (__OFADD__(v19, 1))
          goto LABEL_10;
      }
      else
      {
        result = sub_2448EB7F0();
        v27 = v42;
        if (v37 != 8)
        {
          __break(1u);
          return result;
        }
        v54 = result;
        (*(void (**)(char *, uint64_t *, uint64_t))(v52 + 16))(v42, &v54, TupleTypeMetadata2);
        swift_unknownObjectRelease();
        v28 = v19 + 1;
        if (__OFADD__(v19, 1))
        {
LABEL_10:
          __break(1u);
LABEL_11:
          result = swift_bridgeObjectRelease();
          a5 = v38;
          goto LABEL_13;
        }
      }
      v53 = v28;
      v29 = v27;
      v30 = v45;
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v23, v29, v45);
      v31 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
      v31(v22, v23, v30);
      sub_2448EAE9C();
      v31(v22, v23, v30);
      v32 = *(_QWORD *)(v24 - 8);
      v33 = v50;
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v50, v25, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v33, 0, 1, v24);
      sub_2448EA8B4();
      a1 = v40;
      sub_2448EA8F0();
      v34 = *(void (**)(char *, uint64_t))(v32 + 8);
      TupleTypeMetadata2 = v41;
      v34(v25, v24);
      (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v30);
      v35 = MEMORY[0x2495196A4](a1, TupleTypeMetadata2);
      ++v19;
      if (v53 == v35)
        goto LABEL_11;
    }
  }
  result = swift_bridgeObjectRelease();
LABEL_13:
  *a5 = v55;
  return result;
}

uint64_t OrderedDictionary.updateValue(_:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v24 = a2;
  v25 = a4;
  v5 = *(_QWORD *)(a3 + 16);
  v22 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v23 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 24);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_2448EB508();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v22 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  v17 = v24;
  sub_2448EA8B4();
  sub_2448EA824();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v16, 1, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v23, v17, v5);
    sub_2448EAEE4();
    sub_2448EAE9C();
    v18 = 1;
    v19 = v25;
  }
  else
  {
    v20 = v25;
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v25, v16, v9);
    v18 = 0;
    v19 = v20;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v19, v18, 1, v9);
}

uint64_t OrderedDictionary.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t result;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char v30;

  v4 = v3;
  v28 = a3;
  v6 = *(_QWORD *)(a2 + 16);
  v26 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v25 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 24);
  v10 = sub_2448EB508();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v24 - v13;
  v15 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2448EA8B4();
  v27 = a1;
  sub_2448EA818();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    v18 = 1;
    v19 = v28;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v19, v18, 1, v9);
  }
  v20 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v20(v17, v14, v9);
  v29 = *(_QWORD *)(v4 + 8);
  v21 = sub_2448EAEE4();
  MEMORY[0x24951AC70](MEMORY[0x24BEE12E0], v21);
  result = sub_2448EB2BC();
  if ((v30 & 1) == 0)
  {
    v23 = v25;
    sub_2448EAEB4();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v6);
    v19 = v28;
    v20(v28, v17, v9);
    v18 = 0;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v19, v18, 1, v9);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall OrderedDictionary.removeAll()()
{
  sub_2448EA8B4();
  sub_2448EA8A8();
  sub_2448EAEE4();
  sub_2448EAED8();
}

uint64_t OrderedDictionary.filter(_:)@<X0>(uint64_t (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  void (*v29)(void);
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  char *v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  uint64_t result;
  char *v42;
  char *v43;
  char *v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  char v47;
  _OWORD *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t (*v54)(char *, char *);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(void);
  uint64_t v59;
  _QWORD *v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;

  v54 = a1;
  v55 = a2;
  v8 = a3[3];
  v9 = sub_2448EB508();
  MEMORY[0x24BDAC7A8](v9);
  v49 = (char *)&v48 - v10;
  v11 = a3[2];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v56 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v13 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v53 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v63 = (char *)&v48 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v62 = (uint64_t)&v48 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v48 - v19;
  v22 = *v4;
  v21 = v4[1];
  v59 = v8;
  v60 = a3;
  OrderedDictionary.init()((uint64_t *)&v68);
  v65 = v22;
  v66 = v21;
  v67 = 0;
  swift_bridgeObjectRetain();
  v23 = swift_bridgeObjectRetain();
  v69 = v11;
  if (MEMORY[0x2495196A4](v23, v11))
  {
    v48 = a4;
    v64 = v5;
    v24 = 0;
    v25 = &v20[*(int *)(TupleTypeMetadata2 + 48)];
    v51 = v20;
    v52 = v25;
    while (1)
    {
      v33 = v62;
      v34 = v62 + *(int *)(TupleTypeMetadata2 + 48);
      OrderedDictionary.subscript.getter(v62, v34, v24, v60);
      v35 = *(_QWORD *)(v69 - 8);
      v58 = *(void (**)(void))(v35 + 16);
      ((void (*)(char *, uint64_t))v58)(v20, v33);
      v36 = v59;
      v37 = *(_QWORD *)(v59 - 8);
      v38 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 16);
      v39 = v52;
      v38(v52, v34, v59);
      v40 = *(uint64_t (**)(uint64_t, uint64_t))(v56 + 8);
      result = v40(v33, TupleTypeMetadata2);
      if (__OFADD__(v67, 1))
        break;
      v61 = (void (*)(char *, uint64_t))v40;
      ++v67;
      v42 = v20;
      v43 = v63;
      v44 = &v63[*(int *)(TupleTypeMetadata2 + 48)];
      v57 = v35;
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v63, v42, v69);
      v45 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
      v45(v44, v39, v36);
      v46 = v64;
      v47 = v54(v43, v44);
      v64 = v46;
      if (v46)
      {
        v61(v63, TupleTypeMetadata2);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      if ((v47 & 1) != 0)
      {
        v26 = v37;
        v27 = v63;
        v50 = (char *)(v62 + *(int *)(TupleTypeMetadata2 + 48));
        v28 = v50;
        v29 = v58;
        v58();
        v30 = v59;
        v38(v28, (uint64_t)v44, v59);
        v31 = &v53[*(int *)(TupleTypeMetadata2 + 48)];
        v29();
        v38(v31, (uint64_t)v44, v30);
        v32 = v49;
        v45(v49, v31, v30);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v32, 0, 1, v30);
        OrderedDictionary.subscript.setter(v32, v62, (uint64_t)v60);
        v61(v27, TupleTypeMetadata2);
        (*(void (**)(char *, uint64_t))(v57 + 8))(v53, v69);
        (*(void (**)(char *, uint64_t))(v26 + 8))(v50, v30);
      }
      else
      {
        v61(v63, TupleTypeMetadata2);
      }
      v20 = v51;
      v24 = v67;
      if (v24 == MEMORY[0x2495196A4](v66, v69))
      {
        a4 = v48;
        goto LABEL_11;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_11:
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *a4 = v68;
  }
  return result;
}

uint64_t OrderedDictionary.append(contentsOf:)(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t result;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v5 = a2[3];
  v6 = sub_2448EB508();
  v45 = *(_QWORD *)(v6 - 8);
  v46 = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v44 = (uint64_t)&v40 - v8;
  v50 = *(_QWORD *)(v5 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v43 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = a2;
  v11 = a2[2];
  v49 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v42 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = v5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v54 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v41 = (uint64_t)&v40 - v14;
  v15 = sub_2448EB508();
  v47 = *(_QWORD *)(v15 - 8);
  v48 = v15;
  v16 = MEMORY[0x24BDAC7A8](v15);
  v53 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v40 - v18;
  v20 = *a1;
  v21 = a1[1];
  v55 = v20;
  v56 = v21;
  v57 = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22 = 0;
  v23 = v49;
  v24 = (uint64_t)v42;
  while (1)
  {
    if (v22 == MEMORY[0x2495196A4](v21, v11))
    {
      v25 = 1;
      goto LABEL_6;
    }
    v26 = v2;
    v27 = v41;
    v28 = v41 + *(int *)(TupleTypeMetadata2 + 48);
    OrderedDictionary.subscript.getter(v41, v28, v22, v52);
    v29 = v53;
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v53, v27, v11);
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(&v29[*(int *)(TupleTypeMetadata2 + 48)], v28, v51);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 8))(v27, TupleTypeMetadata2);
    if (__OFADD__(v57, 1))
      break;
    v25 = 0;
    ++v57;
    v2 = v26;
LABEL_6:
    v32 = v53;
    v31 = v54;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v53, v25, 1, TupleTypeMetadata2);
    (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v19, v32, v48);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v19, 1, TupleTypeMetadata2) == 1)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    v33 = &v19[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v24, v19, v11);
    v35 = v50;
    v34 = v51;
    v36 = v11;
    v37 = (uint64_t)v43;
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v43, v33, v51);
    v38 = v44;
    OrderedDictionary.updateValue(_:forKey:)(v37, v24, (uint64_t)v52, v44);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v38, v46);
    v39 = v37;
    v11 = v36;
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v39, v34);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v24, v36);
    v21 = v56;
    v22 = v57;
  }
  __break(1u);
  return result;
}

uint64_t OrderedDictionary.values.getter(_QWORD *a1)
{
  __int128 *v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;

  v12 = *v1;
  v3 = (char *)a1[3];
  v9 = a1[2];
  v10 = v3;
  v11 = a1[4];
  v8[2] = v9;
  v8[3] = v11;
  v8[4] = swift_getKeyPath();
  v4 = MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedDictionary<A, B>, a1);
  v6 = sub_2447D31DC((void (*)(char *, char *))sub_244801CC0, (uint64_t)v8, (uint64_t)a1, v3, MEMORY[0x24BEE4078], v4, MEMORY[0x24BEE40A8], v5);
  swift_release();
  return v6;
}

uint64_t OrderedDictionary.keys.getter()
{
  sub_244801CE0();
  return swift_bridgeObjectRetain();
}

uint64_t OrderedDictionary.startIndex.getter()
{
  return 0;
}

void OrderedDictionary.endIndex.getter()
{
  JUMPOUT(0x2495196A4);
}

Swift::Int __swiftcall OrderedDictionary.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

uint64_t OrderedDictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;

  v20 = a2;
  v7 = a4[3];
  v8 = sub_2448EB508();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v19 - v10;
  v12 = a4[2];
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *v4;
  sub_2448EAF08();
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(a1, v15, v12);
  MEMORY[0x2495190C8](v15, v16, v12, v7, a4[4]);
  v17 = *(_QWORD *)(v7 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v11, 1, v7);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(v20, v11, v7);
  }
  return result;
}

uint64_t static OrderedDictionary<>.== infix(_:_:)()
{
  if ((sub_2448EA8CC() & 1) != 0)
    return sub_2448EAEF0();
  else
    return 0;
}

uint64_t OrderedDictionary.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  swift_getTupleTypeMetadata2();
  sub_2448EAE54();
  v2 = sub_2448EA848();
  result = sub_2448EAE54();
  *a1 = v2;
  a1[1] = result;
  return result;
}

uint64_t OrderedDictionary.lazyValues.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  _QWORD *v5;
  uint64_t v6;

  MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedDictionary<A, B>, a1);
  sub_2448EACEC();
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 32);
  KeyPath = swift_getKeyPath();
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = v2;
  v5[3] = v3;
  v5[4] = KeyPath;
  v6 = sub_2448EB7CC();
  MEMORY[0x24951AC70](MEMORY[0x24BEE25B0], v6);
  sub_2448EBA6C();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t OrderedDictionary.isEmpty.getter()
{
  uint64_t v0;

  v0 = sub_2448EAEE4();
  MEMORY[0x24951AC70](MEMORY[0x24BEE12E0], v0);
  return sub_2448EB28C() & 1;
}

void OrderedDictionary.count.getter()
{
  JUMPOUT(0x249519668);
}

uint64_t OrderedDictionary.sort(using:)()
{
  uint64_t v0;

  v0 = sub_2448EAEE4();
  MEMORY[0x24951AC70](MEMORY[0x24BEE12B8], v0);
  MEMORY[0x24951AC70](MEMORY[0x24BEE12D8], v0);
  return sub_2448EAA34();
}

double OrderedDictionary.init<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, _OWORD *a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t TupleTypeMetadata2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t AssociatedConformanceWitness;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  double result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t AssociatedTypeWitness;
  __int128 v49;

  v45 = a6;
  v47 = a5;
  v40 = a7;
  v41 = a1;
  v10 = sub_2448EB508();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v37 - v12;
  v14 = *(_QWORD *)(a2 - 8);
  v46 = a2;
  v44 = v14;
  v15 = MEMORY[0x24BDAC7A8](v11);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v22 = sub_2448EB508();
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v37 - v24;
  v42 = a4;
  v26 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v28 = (char *)&v37 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v38 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v30 = (char *)&v37 - v29;
  OrderedDictionary.init()((uint64_t *)&v49);
  v39 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v28, v41, v42);
  sub_2448EACB0();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v45 = v30;
  v43 = AssociatedConformanceWitness;
  sub_2448EB58C();
  v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48);
  if (v32(v25, 1, TupleTypeMetadata2) != 1)
  {
    v33 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    do
    {
      v33(v20, &v25[*(int *)(TupleTypeMetadata2 + 48)], a3);
      v34 = v46;
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v17, v25, v46);
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v13, v20, a3);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v13, 0, 1, a3);
      v35 = type metadata accessor for OrderedDictionary(0, v34, a3, v47);
      OrderedDictionary.subscript.setter(v13, (uint64_t)v17, v35);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, a3);
      sub_2448EB58C();
    }
    while (v32(v25, 1, TupleTypeMetadata2) != 1);
  }
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v41, v42);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v45, AssociatedTypeWitness);
  result = *(double *)&v49;
  *v40 = v49;
  return result;
}

double OrderedDictionary.init<A>(_:uniquingKeysWith:)@<D0>(uint64_t a1@<X0>, void (*a2)(char *, char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X7>, _OWORD *a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  double result;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  char *v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, char *);
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  char *v68;
  char *v69;
  unsigned int (*v70)(char *, uint64_t, uint64_t);
  char *AssociatedConformanceWitness;
  uint64_t TupleTypeMetadata2;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t AssociatedTypeWitness;
  char *v77;
  __int128 v78;

  v77 = a8;
  v74 = a7;
  v64 = a2;
  v65 = a3;
  v60 = a1;
  v59 = a9;
  v12 = sub_2448EB508();
  v62 = *(_QWORD *)(v12 - 8);
  v63 = v12;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v69 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v56 - v16;
  v18 = *(_QWORD *)(a5 - 8);
  v19 = MEMORY[0x24BDAC7A8](v15);
  v61 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v56 - v22;
  v24 = *(_QWORD *)(a4 - 8);
  v25 = MEMORY[0x24BDAC7A8](v21);
  v68 = (char *)&v56 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v56 - v27;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v29 = sub_2448EB508();
  v30 = MEMORY[0x24BDAC7A8](v29);
  v73 = (char *)&v56 - v31;
  v32 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v30);
  AssociatedConformanceWitness = (char *)&v56 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v56 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v75 = (char *)&v56 - v34;
  OrderedDictionary.init()((uint64_t *)&v78);
  v57 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(AssociatedConformanceWitness, v60, a6);
  sub_2448EACB0();
  v58 = a6;
  v36 = TupleTypeMetadata2;
  v35 = v73;
  AssociatedConformanceWitness = (char *)swift_getAssociatedConformanceWitness();
  sub_2448EB58C();
  v70 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48);
  if (v70(v35, 1, v36) != 1)
  {
    v38 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
    v66 = v24;
    v67 = v38;
    v77 = v28;
    do
    {
      v49 = &v35[*(int *)(v36 + 48)];
      v67(v28, v35, a4);
      v50 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
      v50(v23, v49, a5);
      v51 = v78;
      v52 = (_QWORD *)type metadata accessor for OrderedDictionary(0, a4, a5, v74);
      MEMORY[0x2495190C8](v28, v51, v52[2], v52[3], v52[4]);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, a5) == 1)
      {
        (*(void (**)(char *, uint64_t))(v62 + 8))(v17, v63);
        v53 = v68;
        (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v68, v77, a4);
        v54 = v69;
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v69, v23, a5);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v54, 0, 1, a5);
        v55 = (uint64_t)v53;
        v28 = v77;
        OrderedDictionary.subscript.setter(v54, v55, (uint64_t)v52);
        v47 = *(void (**)(char *, uint64_t))(v18 + 8);
      }
      else
      {
        v39 = a4;
        v40 = v23;
        v41 = v17;
        v42 = v61;
        v50(v61, v41, a5);
        v43 = a5;
        v44 = v68;
        (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v68, v77, v39);
        v45 = v69;
        v64(v42, v40);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v45, 0, 1, v43);
        v46 = (uint64_t)v44;
        a5 = v43;
        v28 = v77;
        OrderedDictionary.subscript.setter(v45, v46, (uint64_t)v52);
        v47 = *(void (**)(char *, uint64_t))(v18 + 8);
        v48 = v42;
        v17 = v41;
        v23 = v40;
        a4 = v39;
        v24 = v66;
        v47(v48, a5);
      }
      v36 = TupleTypeMetadata2;
      v47(v23, a5);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, a4);
      v35 = v73;
      sub_2448EB58C();
    }
    while (v70(v35, 1, v36) != 1);
  }
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v60, v58);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v75, AssociatedTypeWitness);
  result = *(double *)&v78;
  *v59 = v78;
  return result;
}

uint64_t sub_2448007C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = sub_2448EA860();
  swift_bridgeObjectRelease();
  v9 = MEMORY[0x249519668](a2, a3);
  result = swift_bridgeObjectRelease();
  if (v8 != v9)
    result = sub_244823F6C();
  *a4 = a1;
  a4[1] = a2;
  return result;
}

uint64_t sub_2448008A0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v26 = a4;
  v27 = a2;
  v5 = *a2;
  v6 = (_QWORD *)MEMORY[0x24BEE46A8];
  v7 = *(_QWORD *)(*a2 + *MEMORY[0x24BEE46A8]);
  v25 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v24 - v12;
  v14 = *(int *)(v7 + 48);
  v15 = (char *)&v24 + v14 - v12;
  v16 = v11 + v14;
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t))(v18 + 16))((char *)&v24 - v12, v19);
  v20 = *(_QWORD *)(*v6 + v5 + 8);
  v21 = *(_QWORD *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v15, v16, v20);
  v22 = &v10[*(int *)(v7 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v10, v13, a3);
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v22, v15, v20);
  swift_getAtKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v10, v7);
}

uint64_t sub_2448009E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD v25[2];

  v25[0] = a2;
  v25[1] = a4;
  v5 = (_QWORD *)MEMORY[0x24BEE46A8];
  v6 = *a2;
  v7 = *(_QWORD *)(*a2 + *MEMORY[0x24BEE46A8]);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)v25 - v13;
  v15 = *(int *)(v7 + 48);
  v16 = (char *)v25 + v15 - v13;
  v17 = v12 + v15;
  v19 = *(_QWORD *)(v18 - 8);
  (*(void (**)(char *, uint64_t))(v19 + 16))((char *)v25 - v13, v20);
  v21 = *(_QWORD *)(*v5 + v6 + 8);
  v22 = *(_QWORD *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v16, v17, v21);
  v23 = &v11[*(int *)(v7 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v11, v14, a3);
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v23, v16, v21);
  swift_getAtKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

void sub_244800B20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for OrderedDictionary(0, *(_QWORD *)(a3 + a2 - 24), *(_QWORD *)(a3 + a2 - 16), *(_QWORD *)(a3 + a2 - 8));
  OrderedDictionary.subscript.getter();
}

uint64_t sub_244800B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v6 = *(_QWORD *)(a4 + a3 - 24);
  v7 = *(_QWORD *)(a4 + a3 - 16);
  v8 = *(_QWORD *)(a4 + a3 - 8);
  v9 = sub_2448EB508();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v19 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v19 - v14, a3, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  v17 = type metadata accessor for OrderedDictionary(0, v6, v7, v8);
  return OrderedDictionary.subscript.setter(v13, (uint64_t)v15, v17);
}

void (*OrderedDictionary.subscript.modify(_QWORD *a1, uint64_t a2, _QWORD *a3))(uint64_t **a1, char a2)
{
  _QWORD *v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;

  v7 = malloc(0x50uLL);
  *a1 = v7;
  *v7 = a3;
  v7[1] = v3;
  v8 = a3[3];
  v9 = sub_2448EB508();
  v7[2] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[3] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v7[4] = malloc(v11);
  v12 = malloc(v11);
  v13 = a3[2];
  v7[5] = v12;
  v7[6] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v7[7] = v14;
  v15 = *(_QWORD *)(v14 + 64);
  v7[8] = malloc(v15);
  v7[9] = malloc(v15);
  (*(void (**)(void))(v14 + 16))();
  MEMORY[0x2495190C8](a2, *v3, v13, v8, a3[4]);
  return sub_244800D74;
}

{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  size_t v11;
  void *v12;
  uint64_t v13;

  v7 = malloc(0x48uLL);
  *a1 = v7;
  *v7 = a3;
  v7[1] = v3;
  v8 = a3[3];
  v7[2] = a3[2];
  v7[3] = v8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v7[4] = TupleTypeMetadata2;
  v10 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v7[5] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v7[6] = malloc(v11);
  v12 = malloc(v11);
  v7[7] = v12;
  v13 = *(int *)(TupleTypeMetadata2 + 48);
  *((_DWORD *)v7 + 16) = v13;
  OrderedDictionary.subscript.getter((uint64_t)v12, (uint64_t)v12 + v13, a2, a3);
  return sub_244801198;
}

void sub_244800D74(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = (void *)(*a1)[8];
  v4 = (void *)(*a1)[9];
  if ((a2 & 1) != 0)
  {
    v5 = v2[7];
    v11 = v2[6];
    v7 = (char *)v2[4];
    v6 = (char *)v2[5];
    v8 = v2[2];
    v9 = v2[3];
    v10 = *v2;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v7, v6, v8);
    (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v3, v4, v11);
    OrderedDictionary.subscript.setter(v7, (uint64_t)v3, v10);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  else
  {
    v7 = (char *)v2[4];
    v6 = (char *)v2[5];
    OrderedDictionary.subscript.setter(v6, (uint64_t)v4, *v2);
  }
  free(v4);
  free(v3);
  free(v6);
  free(v7);
  free(v2);
}

uint64_t sub_244800E58@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  void (*v22)(void);
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;

  v29 = a4;
  v6 = *(uint64_t *)((char *)a2 + a3 - 24);
  v5 = *(uint64_t *)((char *)a2 + a3 - 16);
  v7 = *(uint64_t *)((char *)a2 + a3 - 8);
  v27 = a1;
  v28 = v7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v11 = (char *)&v26 - v10;
  v12 = *(_QWORD *)(v5 - 8);
  v13 = MEMORY[0x24BDAC7A8](v9);
  v15 = (char *)&v26 - v14;
  v16 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v26 - v17;
  v19 = *a2;
  v30 = *v27;
  v20 = (_QWORD *)type metadata accessor for OrderedDictionary(0, v6, v5, v28);
  OrderedDictionary.subscript.getter((uint64_t)v18, (uint64_t)v15, v19, v20);
  v21 = &v11[*(int *)(TupleTypeMetadata2 + 48)];
  v22 = *(void (**)(void))(v16 + 32);
  ((void (*)(char *, char *, uint64_t))v22)(v11, v18, v6);
  v23 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v23(v21, v15, v5);
  v24 = v29 + *(int *)(TupleTypeMetadata2 + 48);
  v22();
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v23)(v24, v21, v5);
}

uint64_t sub_244800FD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v5 = *(_QWORD *)(a4 + a3 - 24);
  v6 = *(_QWORD *)(a4 + a3 - 16);
  v7 = *(_QWORD *)(a4 + a3 - 8);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v11 = (char *)&v17 - v10;
  v12 = *(int *)(v9 + 48);
  v13 = (uint64_t)&v11[v12];
  v14 = a1 + v12;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v11, a1, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v13, v14, v6);
  v15 = type metadata accessor for OrderedDictionary(0, v5, v6, v7);
  return sub_244801D24((uint64_t)v11, v13, v15);
}

uint64_t OrderedDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_244801D24(a1, a2, a4);
}

void sub_244801198(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v2 = *a1;
  v3 = *((int *)*a1 + 16);
  v4 = (void *)(*a1)[6];
  v5 = (char *)(*a1)[7];
  if ((a2 & 1) != 0)
  {
    v6 = v2[4];
    v7 = v2[5];
    v8 = v2[3];
    v9 = *v2;
    v10 = &v5[v3];
    v11 = (uint64_t)v4 + *(int *)(v6 + 48);
    (*(void (**)(uint64_t, char *))(*(_QWORD *)(v2[2] - 8) + 16))((*a1)[6], v5);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v11, v10, v8);
    sub_244801D24((uint64_t)v4, v11, v9);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  }
  else
  {
    sub_244801D24((*a1)[7], (uint64_t)&v5[v3], *v2);
  }
  free(v5);
  free(v4);
  free(v2);
}

uint64_t OrderedDictionary.appending(contentsOf:)@<X0>(__int128 *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;

  v6 = *v3;
  v7 = v3[1];
  *a3 = v6;
  a3[1] = v7;
  v9 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return OrderedDictionary.append(contentsOf:)((uint64_t *)&v9, a2);
}

uint64_t OrderedDictionary.subtract(_:)(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t result;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v5 = a2[3];
  v6 = sub_2448EB508();
  v40 = *(_QWORD *)(v6 - 8);
  v41 = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v39 = (char *)&v37 - v8;
  v45 = a2;
  v9 = a2[2];
  v43 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = v5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v47 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v38 = (uint64_t)&v37 - v13;
  v14 = sub_2448EB508();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v46 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v37 - v18;
  v20 = a1[1];
  v48 = *a1;
  v49 = v20;
  v50 = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = 0;
  v42 = v19;
  while (1)
  {
    if (v21 == MEMORY[0x2495196A4](v20, v9))
    {
      v22 = 1;
      goto LABEL_6;
    }
    v23 = v15;
    v24 = v11;
    v25 = v14;
    v26 = v2;
    v27 = v38;
    v28 = v38 + *(int *)(TupleTypeMetadata2 + 48);
    OrderedDictionary.subscript.getter(v38, v28, v21, v45);
    v29 = v46;
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v46, v27, v9);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(&v29[*(int *)(TupleTypeMetadata2 + 48)], v28);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8))(v27, TupleTypeMetadata2);
    if (__OFADD__(v50, 1))
      break;
    v22 = 0;
    ++v50;
    v2 = v26;
    v14 = v25;
    v11 = v24;
    v15 = v23;
    v19 = v42;
LABEL_6:
    v31 = v46;
    v32 = v47;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))(v46, v22, 1, TupleTypeMetadata2);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v19, v31, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v19, 1, TupleTypeMetadata2) == 1)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    v33 = &v19[*(int *)(TupleTypeMetadata2 + 48)];
    v34 = v43;
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v11, v19, v9);
    v35 = v39;
    OrderedDictionary.removeValue(forKey:)((uint64_t)v11, (uint64_t)v45, v39);
    v36 = v35;
    v19 = v42;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v36, v41);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v9);
    (*(void (**)(char *))(*(_QWORD *)(v44 - 8) + 8))(v33);
    v20 = v49;
    v21 = v50;
  }
  __break(1u);
  return result;
}

uint64_t OrderedDictionary.union<A>(groupsIn:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  uint64_t result;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;

  v4 = v3;
  v44 = a3;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v47 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v43 - v10;
  v51 = v12;
  v13 = v12[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v50 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v46 = (uint64_t)&v43 - v15;
  v48 = sub_2448EB508();
  v16 = *(_QWORD *)(v48 - 8);
  v17 = MEMORY[0x24BDAC7A8](v48);
  v49 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v43 - v19;
  v22 = *a1;
  v21 = a1[1];
  v23 = *v4;
  v24 = v4[1];
  *(_QWORD *)&v57 = v23;
  *((_QWORD *)&v57 + 1) = v24;
  v54 = v22;
  v55 = v21;
  v56 = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v25 = 0;
  v26 = MEMORY[0x24BEE12C8];
  v45 = v20;
  while (1)
  {
    if (v25 == MEMORY[0x2495196A4](v21, v6))
    {
      v28 = 1;
      goto LABEL_7;
    }
    v29 = v16;
    v30 = v6;
    v31 = TupleTypeMetadata2;
    v32 = v13;
    v33 = v11;
    v34 = v7;
    v35 = v46;
    v36 = (_QWORD *)(v46 + *(int *)(v31 + 48));
    OrderedDictionary.subscript.getter(v46, (uint64_t)v36, v25, v51);
    v37 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v49, v35, v30);
    *(_QWORD *)&v37[*(int *)(v31 + 48)] = *v36;
    swift_bridgeObjectRetain();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 8))(v35, v31);
    if (__OFADD__(v56, 1))
      break;
    v28 = 0;
    ++v56;
    v7 = v34;
    v11 = v33;
    v13 = v32;
    TupleTypeMetadata2 = v31;
    v6 = v30;
    v16 = v29;
    v20 = v45;
    v26 = MEMORY[0x24BEE12C8];
LABEL_7:
    v40 = v49;
    v39 = v50;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56))(v49, v28, 1, TupleTypeMetadata2);
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v20, v40, v48);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v20, 1, TupleTypeMetadata2) == 1)
    {
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      *v44 = v57;
      return result;
    }
    v41 = *(_QWORD *)&v20[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v20, v6);
    MEMORY[0x2495190C8](&v52, v11, v57, v6, v13, v51[4]);
    v42 = v52;
    if (!v52)
      v42 = sub_2448EAE54();
    v52 = v41;
    v53 = v42;
    MEMORY[0x24951AC70](v26, v13);
    sub_2448EAE90();
    v27 = (uint64_t)v47;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v47, v11, v6);
    v52 = v53;
    OrderedDictionary.subscript.setter((char *)&v52, v27, (uint64_t)v51);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    v21 = v55;
    v25 = v56;
  }
  __break(1u);
  return result;
}

uint64_t OrderedDictionary.mapValues<A>(_:)@<X0>(uint64_t a1@<X2>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v5 = *(_QWORD *)(v2 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  result = sub_2448EA89C();
  if (!v3)
  {
    v8 = result;
    swift_bridgeObjectRetain();
    return sub_2448007C8(v8, v5, v6, a2);
  }
  return result;
}

uint64_t sub_244801A20@<X0>(uint64_t *a1@<X8>)
{
  return OrderedDictionary.init()(a1);
}

void (*sub_244801A38(_QWORD *a1, uint64_t a2, _QWORD *a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = OrderedDictionary.subscript.modify(v6, a2, a3);
  return sub_2447DD19C;
}

void sub_244801A94()
{
  OrderedDictionary.endIndex.getter();
}

uint64_t sub_244801AA8(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

void (*sub_244801AB8(uint64_t **a1, uint64_t *a2, _QWORD *a3))(uint64_t *a1, uint64_t a2)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  char *v11;
  void (*v12)(_QWORD *);
  uint64_t v13;
  uint64_t v14;

  v6 = (uint64_t *)malloc(0x40uLL);
  *a1 = v6;
  v7 = a3[2];
  v8 = a3[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v6[4] = TupleTypeMetadata2;
  v10 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v6[5] = v10;
  v11 = (char *)malloc(*(_QWORD *)(v10 + 64));
  v6[6] = (uint64_t)v11;
  v12 = sub_244801B98(v6, *a2, a3);
  v14 = v13;
  v6[7] = (uint64_t)v12;
  (*(void (**)(char *))(*(_QWORD *)(v7 - 8) + 16))(v11);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(&v11[*(int *)(TupleTypeMetadata2 + 48)], v14, v8);
  return sub_2447EE764;
}

void (*sub_244801B98(uint64_t *a1, uint64_t a2, _QWORD *a3))(_QWORD *a1)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  void *v8;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  v7 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  a1[1] = v7;
  v8 = malloc(*(_QWORD *)(v7 + 64));
  a1[2] = (uint64_t)v8;
  OrderedDictionary.subscript.getter((uint64_t)v8, (uint64_t)v8 + *(int *)(TupleTypeMetadata2 + 48), a2, a3);
  return sub_2447DD234;
}

uint64_t sub_244801C34@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  return OrderedDictionary.init(dictionaryLiteral:)(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t sub_244801C44(uint64_t a1)
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedDictionary<A, B>, a1);
  return sub_2448EB22C();
}

uint64_t sub_244801C78(uint64_t a1)
{
  MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedDictionary<A, B>, a1);
  return sub_2448EB238();
}

uint64_t sub_244801CAC()
{
  return static OrderedDictionary<>.== infix(_:_:)();
}

uint64_t sub_244801CC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2448008A0(a1, *(_QWORD **)(v2 + 32), *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_244801CE0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_244801CE8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_244801D0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2448009E8(a1, *(uint64_t **)(v2 + 32), *(_QWORD *)(v2 + 16), a2);
}

uint64_t type metadata accessor for OrderedDictionary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrderedDictionary);
}

uint64_t sub_244801D24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v6 = *(_QWORD *)(a3 + 24);
  v17 = sub_2448EB508();
  v7 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v9 = (char *)&v17 - v8;
  v10 = *(_QWORD *)(a3 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v12 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v14 = (char *)&v17 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))((char *)&v17 - v13, a1, v10);
  v15 = (uint64_t)&v14[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v15, a2, v6);
  OrderedDictionary.updateValue(_:forKey:)(v15, (uint64_t)v14, a3, (uint64_t)v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, TupleTypeMetadata2);
}

uint64_t sub_244801E6C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedDictionary<A, B>);
  result = MEMORY[0x24951AC70](&protocol conformance descriptor for OrderedDictionary<A, B>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void sub_244801EB0()
{
  JUMPOUT(0x24951AC70);
}

uint64_t sub_244801EC8()
{
  return 24;
}

__n128 sub_244801ED4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_244801EF0()
{
  return 24;
}

__n128 sub_244801EFC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_244801F10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  if (qword_257389CA0 != -1)
    swift_once();
  v10 = (_QWORD *)((char *)off_25738DB00 + 16);
  v11 = (os_unfair_lock_s *)((char *)off_25738DB00 + 24);
  swift_retain();
  os_unfair_lock_lock(v11);
  sub_24483B130(v10, &v14);
  os_unfair_lock_unlock(v11);
  v12 = v14;
  result = swift_release();
  *a5 = v12;
  a5[1] = a1;
  a5[2] = a2;
  a5[3] = a3;
  a5[4] = a4;
  return result;
}

uint64_t ManagedResource.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = swift_allocObject();
  ManagedResource.init(_:)(a1, v3, v4, v5);
  return v2;
}

uint64_t ManagedResource.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = v4 + *(_QWORD *)(*(_QWORD *)v4 + 96);
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  type metadata accessor for ManagedResource.Request(0, v7, a3, a4);
  v8 = sub_2448EA7D0();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v4 + *(_QWORD *)(*(_QWORD *)v4 + 88), a1, v7);
  return v4;
}

uint64_t ManagedResource.requestUnderlying(receive:revoke:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (**a5)()@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t result;
  __int128 v17;
  char v18;
  __int128 v19;
  const char *v20;
  uint64_t v21;
  char v22;
  _OWORD v23[2];
  uint64_t v24;

  v6 = v5;
  v12 = *(_QWORD *)(*v6 + 80);
  swift_retain();
  swift_retain();
  sub_244801F10(a1, a2, a3, a4, v23);
  if (sub_244802238(v6, (uint64_t)v23))
    (*((void (**)(char *))&v23[0] + 1))((char *)v6 + *(_QWORD *)(*v6 + 88));
  v13 = swift_allocObject();
  swift_weakInit();
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v12;
  *(_QWORD *)(v14 + 24) = v13;
  v15 = v23[1];
  *(_OWORD *)(v14 + 32) = v23[0];
  *(_OWORD *)(v14 + 48) = v15;
  *(_QWORD *)(v14 + 64) = v24;
  *(_QWORD *)&v17 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFound"
                    "ation/ManagedResource.swift";
  *((_QWORD *)&v17 + 1) = 127;
  v18 = 2;
  v19 = xmmword_2448EFAF0;
  v20 = "requestUnderlying(receive:revoke:)";
  v21 = 34;
  v22 = 2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738AF78);
  swift_allocObject();
  result = sub_2447E5D90(&v17, 0, 0, 1, 0, 0xD000000000000011, 0x80000002448F9A50, 0x64656C65636E6163, 0xE800000000000000);
  *a5 = sub_244802410;
  a5[1] = (uint64_t (*)())v14;
  a5[2] = (uint64_t (*)())result;
  return result;
}

BOOL sub_244802238(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;

  v3 = *a1;
  v4 = *(_QWORD *)a2;
  v11 = *(_OWORD *)(a2 + 24);
  v12 = *(_OWORD *)(a2 + 8);
  v5 = (uint64_t)a1 + *(_QWORD *)(*a1 + 96);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    swift_beginAccess();
    sub_244802D0C(a2);
    type metadata accessor for ManagedResource.Request(255, *(_QWORD *)(v3 + 80), v7, v8);
    sub_2448EAEE4();
    sub_2448EAE9C();
    swift_endAccess();
  }
  else
  {
    v9 = *(_QWORD *)v5;
    *(_QWORD *)v5 = v4;
    *(_OWORD *)(v5 + 8) = v12;
    *(_OWORD *)(v5 + 24) = v11;
    sub_244802D0C(a2);
    sub_2448027D0(v9, 0);
  }
  return v6 == 0;
}

uint64_t sub_244802354()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_244802378(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v4 = *a2;
    sub_24480241C(&v4);
    return swift_release();
  }
  return result;
}

uint64_t sub_2448023DC()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_244802410()
{
  uint64_t v0;

  return sub_244802378(*(_QWORD *)(v0 + 24), (uint64_t *)(v0 + 32));
}

uint64_t sub_24480241C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  void (*v5)(char *);
  uint64_t v6;
  char *v7;
  uint64_t v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);

  sub_244802534(&v11, v10, v1, *a1);
  v3 = v11;
  v2 = v12;
  v4 = v13;
  v5 = (void (*)(char *))v10[1];
  v9 = v10[0];
  if (v12)
  {
    v6 = swift_retain();
    v4(v6);
    swift_release();
  }
  if (!v5)
    return sub_2448027D0(v3, v2);
  v7 = (char *)v1 + *(_QWORD *)(*v1 + 88);
  swift_retain();
  v5(v7);
  sub_2448027D0(v3, v2);
  sub_2448027D0(v9, (uint64_t)v5);
  return swift_release();
}

uint64_t sub_244802534(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;

  v7 = *a3;
  v8 = (uint64_t *)((char *)a3 + *(_QWORD *)(*a3 + 96));
  v9 = swift_beginAccess();
  v10 = v8[1];
  if (v10)
    v11 = *v8 == a4;
  else
    v11 = 0;
  if (v11)
  {
    v32 = v8[3];
    v30 = v8[4];
    v31 = v8[2];
    swift_beginAccess();
    type metadata accessor for ManagedResource.Request(255, *(_QWORD *)(v7 + 80), v21, v22);
    v23 = sub_2448EAEE4();
    swift_retain();
    swift_retain();
    v24 = MEMORY[0x24951AC70](MEMORY[0x24BEE12B0], v23);
    v25 = MEMORY[0x24951AC70](MEMORY[0x24BEE12E8], v23);
    MEMORY[0x249519B24](v33, v23, v24, v25);
    v26 = v34;
    v27 = *v8;
    v28 = v8[1];
    v29 = v33[1];
    *(_OWORD *)v8 = v33[0];
    *((_OWORD *)v8 + 1) = v29;
    v8[4] = v26;
    swift_endAccess();
    sub_2448027D0(v27, v28);
    *a1 = a4;
    a1[1] = v10;
    a1[2] = v31;
    a1[3] = v32;
    a1[4] = v30;
    v16 = *v8;
    v17 = v8[1];
    v18 = v8[2];
    v19 = v8[3];
    v20 = v8[4];
    result = sub_244802CDC(v16, v17);
  }
  else
  {
    *(_QWORD *)&v33[0] = v8[5];
    MEMORY[0x24BDAC7A8](v9);
    type metadata accessor for ManagedResource.Request(255, *(_QWORD *)(v7 + 80), v12, v13);
    v14 = sub_2448EAEE4();
    swift_bridgeObjectRetain();
    MEMORY[0x24951AC70](MEMORY[0x24BEE12F0], v14);
    v8[5] = sub_2448EB85C();
    result = swift_bridgeObjectRelease();
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    a1[4] = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  *a2 = v16;
  a2[1] = v17;
  a2[2] = v18;
  a2[3] = v19;
  a2[4] = v20;
  return result;
}

uint64_t ManagedResource.deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88));
  sub_2448027D0(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96)), *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96) + 8));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_2448027D0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t ManagedResource.__deallocating_deinit()
{
  ManagedResource.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_244802824()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for ManagedResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ManagedResource);
}

uint64_t method lookup function for ManagedResource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ManagedResource.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_2448028BC(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
  {
    swift_release();
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_2448028F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    v5 = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = v5;
    swift_retain();
    swift_retain();
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_244802970(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v6 = a2[1];
  if (!a1[1])
  {
    if (v6)
    {
      *a1 = *a2;
      v9 = a2[2];
      a1[1] = a2[1];
      a1[2] = v9;
      v10 = a2[4];
      a1[3] = a2[3];
      a1[4] = v10;
      swift_retain();
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    v12 = *(_OWORD *)a2;
    v13 = *((_OWORD *)a2 + 1);
    a1[4] = a2[4];
    *(_OWORD *)a1 = v12;
    *((_OWORD *)a1 + 1) = v13;
    goto LABEL_8;
  }
  if (!v6)
  {
    v11 = type metadata accessor for ManagedResource.Request(0, *(_QWORD *)(a3 + 16), a3, a4);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
    goto LABEL_7;
  }
  *a1 = *a2;
  v7 = a2[2];
  a1[1] = a2[1];
  a1[2] = v7;
  swift_retain();
  swift_release();
  v8 = a2[4];
  a1[3] = a2[3];
  a1[4] = v8;
  swift_retain();
  swift_release();
LABEL_8:
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for ManagedResource.Request(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ManagedResource.Request);
}

uint64_t sub_244802A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  if (!*(_QWORD *)(a1 + 8))
    goto LABEL_5;
  v6 = *(_QWORD *)(a2 + 8);
  if (!v6)
  {
    v8 = type metadata accessor for ManagedResource.Request(0, *(_QWORD *)(a3 + 16), a3, a4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
LABEL_5:
    v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    goto LABEL_6;
  }
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
LABEL_6:
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_244802B08(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_244802B50(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for ManagedResource.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ManagedResource.State);
}

uint64_t sub_244802BA8()
{
  swift_release();
  return swift_release();
}

uint64_t sub_244802BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *sub_244802C18(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_244802C7C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

BOOL sub_244802CC8(_QWORD *a1)
{
  uint64_t v1;

  return *a1 != *(_QWORD *)(v1 + 24);
}

uint64_t sub_244802CDC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_244802D0C(uint64_t a1)
{
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t PredicatedWrapper.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = a1;
  v35 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v33 = a3;
  v36 = a2;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v31 - v10;
  v13 = type metadata accessor for Predicated(255, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  v14 = sub_2448EB508();
  v31 = *(_QWORD *)(v14 - 8);
  v32 = v14;
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v31 - v16;
  v18 = *(_QWORD *)(v13 - 8);
  v19 = MEMORY[0x24BDAC7A8](v15);
  v21 = (char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v31 - v22;
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v34 = v8;
  v24(v11, v37, v8);
  Predicated.init(_:)((uint64_t)v11, AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, v13) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v37, v34);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v17, v32);
    v25 = 1;
    v26 = v35;
    v27 = v36;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v17, v13);
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v23, v13);
    v29 = v35;
    v28 = v36;
    (*(void (**)(char *, uint64_t))(v33 + 24))(v21, v36);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v37, v34);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v13);
    v25 = 0;
    v27 = v28;
    v26 = v29;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, v25, 1);
}

uint64_t PredicatedWrapper.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = type metadata accessor for Predicated(0, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v15 - v11;
  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  v13 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a3, v12, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t PredicatedWrapper.proof.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = type metadata accessor for Predicated(0, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v16 - v11;
  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  v13 = &v12[*(int *)(v9 + 36)];
  v14 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a3, v13, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t dispatch thunk of PredicatedWrapper.init(predicated:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PredicatedWrapper.predicated.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t OS_dispatch_queue.runAsync<A>(work:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t sub_244803220()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  _QWORD *v3;

  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  v2 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v1 + 32) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v3;
  *v3 = v0;
  v3[1] = sub_2448032C4;
  return sub_2448EBC34();
}

uint64_t sub_2448032C4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_244803338()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24480336C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD aBlock[6];

  v23 = a3;
  v27 = a2;
  v8 = sub_2448EA704();
  v26 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_2448EA734();
  v24 = *(_QWORD *)(v11 - 8);
  v25 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v14 = sub_2448EAF44();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v23 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)&v23 - v16, a1, v14);
  v18 = (*(unsigned __int8 *)(v15 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v19 = (char *)swift_allocObject();
  v20 = v23;
  *((_QWORD *)v19 + 2) = a5;
  *((_QWORD *)v19 + 3) = v20;
  *((_QWORD *)v19 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v19[v18], v17, v14);
  aBlock[4] = sub_244803930;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2447EB164;
  aBlock[3] = &block_descriptor_2;
  v21 = _Block_copy(aBlock);
  swift_retain();
  sub_2448EA71C();
  v28 = MEMORY[0x24BEE4AF8];
  sub_2447EB5DC();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
  sub_2448039A4();
  sub_2448EB6C4();
  MEMORY[0x249519C08](0, v13, v10, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v13, v25);
  return swift_release();
}

uint64_t sub_2448035C8(uint64_t a1)
{
  uint64_t *v1;

  return sub_24480336C(a1, v1[3], v1[4], v1[5], v1[2]);
}

uint64_t sub_2448035D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(void);
  uint64_t v10;
  char *v11;
  _QWORD v13[2];

  v5 = *(_QWORD *)(a4 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (void (*)(void))MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)v13 - v10;
  v9();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v11, a4);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  sub_2448EAF44();
  sub_2448EAF38();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v11, a4);
}

uint64_t static OS_dispatch_queue.runAsync<A>(qos:work:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t sub_244803724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  sub_244803860();
  v1 = sub_2448EB43C();
  *(_QWORD *)(v0 + 56) = v1;
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v2;
  *(_QWORD *)v2 = v0;
  *(_QWORD *)(v2 + 8) = sub_2448037B8;
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v2 + 40) = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v2 + 48) = v1;
  *(_OWORD *)(v2 + 24) = v4;
  *(_QWORD *)(v2 + 16) = v3;
  return swift_task_switch();
}

uint64_t sub_2448037B8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();

  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_24480382C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_244803860()
{
  unint64_t result;

  result = qword_25738C1F0;
  if (!qword_25738C1F0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25738C1F0);
  }
  return result;
}

uint64_t sub_24480389C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v1 = sub_2448EAF44();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_244803930()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_2448EAF44() - 8) + 80);
  return sub_2448035D4(v0[3], v0[4], (uint64_t)v0 + ((v2 + 40) & ~v2), v1);
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

unint64_t sub_2448039A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25738B1F0[0];
  if (!qword_25738B1F0[0])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738B1E8);
    result = MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, qword_25738B1F0);
  }
  return result;
}

uint64_t CommandLineToolInvocation.launchPath.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommandLineToolInvocation.launchArguments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CommandLineToolInvocation.environment.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CommandLineToolInvocation.workingPath.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommandLineToolInvocation.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

void *CommandLineToolInvocation.log.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 64);
  v2 = v1;
  return v1;
}

uint64_t CommandLineToolInvocation.printToStandardOutput.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t CommandLineToolInvocation.failedWhenRunningHandler.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_retain();
  return v1;
}

uint64_t CommandLineToolInvocation.failedToLaunchError.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_retain();
  return v1;
}

__n128 CommandLineToolInvocation.init(launchPath:launchArguments:environment:workingPath:name:log:printToStandardOutput:failedWhenRunningHandler:failedToLaunchError:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, unint64_t a8@<X7>, __n128 *a9@<X8>, unint64_t a10, unsigned __int8 a11, __n128 a12, unint64_t a13, unint64_t a14)
{
  __n128 result;

  result = a12;
  a9->n128_u64[0] = a1;
  a9->n128_u64[1] = a2;
  a9[1].n128_u64[0] = a3;
  a9[1].n128_u64[1] = a4;
  a9[2].n128_u64[0] = a5;
  a9[2].n128_u64[1] = a6;
  a9[3].n128_u64[0] = a7;
  a9[3].n128_u64[1] = a8;
  a9[4].n128_u64[0] = a10;
  a9[4].n128_u8[8] = a11;
  a9[5] = a12;
  a9[6].n128_u64[0] = a13;
  a9[6].n128_u64[1] = a14;
  return result;
}

uint64_t CommandLineToolInvocation.commandLineDescription.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v1 = v0[2];
  v12 = *v0;
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  v2 = v12;
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    v11 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_2447CEE18(0, v3, 0);
    sub_2447D0980();
    v4 = (unint64_t *)(v1 + 40);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      swift_bridgeObjectRetain();
      if ((sub_2448EB604() & 1) != 0)
      {
        sub_2448EABC0();
        sub_2448EABC0();
        swift_bridgeObjectRelease();
        v6 = 34;
        v5 = 0xE100000000000000;
      }
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      if (v8 >= v7 >> 1)
        sub_2447CEE18(v7 > 1, v8 + 1, 1);
      v4 += 2;
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = v5;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    v2 = v12;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A630);
  sub_2447EB714(qword_25738A638, &qword_25738A630, MEMORY[0x24BEE12B0]);
  sub_2448EA9A4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t CommandLineToolInvocation.toolName.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  v0 = (void *)sub_2448EAA70();
  v1 = objc_msgSend(v0, sel_lastPathComponent);

  v2 = sub_2448EAA94();
  return v2;
}

uint64_t CommandLineToolInvocation.run()()
{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  sub_2448EAADC();
  *(_QWORD *)(v1 + 200) = swift_task_alloc();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738B668);
  *(_QWORD *)(v1 + 208) = v2;
  *(_QWORD *)(v1 + 216) = *(_QWORD *)(v2 - 8);
  *(_QWORD *)(v1 + 224) = swift_task_alloc();
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738C200);
  *(_QWORD *)(v1 + 232) = v3;
  *(_QWORD *)(v1 + 240) = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v1 + 248) = swift_task_alloc();
  v4 = sub_2448EA434();
  *(_QWORD *)(v1 + 256) = v4;
  *(_QWORD *)(v1 + 264) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v1 + 272) = swift_task_alloc();
  v5 = v0[5];
  *(_OWORD *)(v1 + 80) = v0[4];
  *(_OWORD *)(v1 + 96) = v5;
  *(_OWORD *)(v1 + 112) = v0[6];
  v6 = v0[1];
  *(_OWORD *)(v1 + 16) = *v0;
  *(_OWORD *)(v1 + 32) = v6;
  v7 = v0[3];
  *(_OWORD *)(v1 + 48) = v0[2];
  *(_OWORD *)(v1 + 64) = v7;
  return swift_task_switch();
}

uint64_t sub_244803EA0()
{
  _QWORD *v0;
  _QWORD *v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  os_log_type_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;

  if (qword_257389CA0 != -1)
    swift_once();
  v1 = (_QWORD *)((char *)off_25738DB00 + 16);
  v2 = (os_unfair_lock_s *)((char *)off_25738DB00 + 24);
  swift_retain();
  os_unfair_lock_lock(v2);
  sub_24483B130(v1, &v33);
  os_unfair_lock_unlock(v2);
  v3 = (uint64_t)(v0 + 16);
  v4 = v33;
  v0[35] = v33;
  swift_release();
  v5 = v0[10];
  v0[36] = v5;
  if (v5)
  {
    v33 = 0;
    v34 = 0xE000000000000000;
    sub_244805038((uint64_t)(v0 + 2));
    sub_2448EB79C();
    swift_bridgeObjectRelease();
    v33 = 543451483;
    v34 = 0xE400000000000000;
    v0[24] = v4;
    sub_2448EBB5C();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    sub_2448EABC0();
    sub_244805038((uint64_t)(v0 + 2));
    v6 = (void *)sub_2448EAA70();
    v7 = objc_msgSend(v6, sel_lastPathComponent);

    sub_2448EAA94();
    sub_2448050C4((uint64_t)(v0 + 2));
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    sub_2448EABC0();
    v8 = v33;
    v9 = v34;
    v33 = 543451483;
    v34 = 0xE400000000000000;
    v0[21] = v4;
    sub_2448EBB5C();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    sub_2448EABC0();
    v10 = v33;
    v11 = v34;
    v12 = sub_2448EB388();
    v13 = v10;
    v3 = (uint64_t)(v0 + 16);
    sub_2448853D0(v8, v9, v13, v11, v12, v5);
    sub_2448050C4((uint64_t)(v0 + 2));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD17D8]), sel_init);
  v0[37] = v14;
  sub_244804F7C((uint64_t)(v0 + 6), (uint64_t)(v0 + 18));
  sub_244804F7C((uint64_t)(v0 + 18), v3);
  if (v0[17])
  {
    v16 = v0[33];
    v15 = v0[34];
    v17 = v0[32];
    sub_2448EA3C8();
    v18 = (void *)sub_2448EA3E0();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    objc_msgSend(v14, sel_setCurrentDirectoryURL_, v18);

  }
  v20 = v0[33];
  v19 = v0[34];
  v21 = v0[32];
  v22 = v0[3];
  v0[38] = v0[2];
  v0[39] = v22;
  sub_2448EA3C8();
  v23 = (void *)sub_2448EA3E0();
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  objc_msgSend(v14, sel_setExecutableURL_, v23);

  v24 = (void *)sub_2448EADDC();
  objc_msgSend(v14, sel_setArguments_, v24);

  v25 = (void *)sub_2448EA7F4();
  objc_msgSend(v14, sel_setEnvironment_, v25);

  result = (uint64_t)objc_msgSend(v14, sel_isRunning);
  if ((result & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v28 = v0[27];
    v27 = v0[28];
    v29 = v0[26];
    *(_QWORD *)(swift_task_alloc() + 16) = v14;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v28 + 104))(v27, *MEMORY[0x24BEE6A10], v29);
    sub_2448EB01C();
    swift_task_dealloc();
    v30 = swift_task_alloc();
    v0[40] = v30;
    *(_QWORD *)(v30 + 16) = v14;
    *(_BYTE *)(v30 + 24) = 1;
    v31 = swift_task_alloc();
    v0[41] = v31;
    *(_BYTE *)(v31 + 16) = 1;
    *(_QWORD *)(v31 + 24) = v14;
    v32 = (_QWORD *)swift_task_alloc();
    v0[42] = v32;
    *v32 = v0;
    v32[1] = sub_244804370;
    return sub_2448EBBF8();
  }
  return result;
}

uint64_t sub_244804370()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 344) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t sub_2448043E4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&dword_25738C208 + dword_25738C208);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 352) = v1;
  *v1 = v0;
  v1[1] = sub_244804440;
  return v3();
}

uint64_t sub_244804440(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 360) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24480449C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t result;
  uint64_t v26;
  char v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void (*v34)(_OWORD *, uint64_t, unint64_t);
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _OWORD v51[7];

  v1 = sub_2447F33B0(*(_QWORD *)(v0 + 360));
  v3 = v2;
  swift_bridgeObjectRelease();
  sub_2448EAAC4();
  v48 = v1;
  v49 = v3;
  v4 = sub_2448EAAAC();
  if (v5)
    v6 = v4;
  else
    v6 = 0;
  if (v5)
    v7 = v5;
  else
    v7 = 0xE000000000000000;
  v8 = MEMORY[0x24BEE0D00];
  if ((*(_BYTE *)(v0 + 88) & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738C220);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_2448ECF10;
    *(_QWORD *)(v9 + 56) = v8;
    *(_QWORD *)(v9 + 32) = v6;
    *(_QWORD *)(v9 + 40) = v7;
    swift_bridgeObjectRetain();
    sub_2448EBCDC();
    swift_bridgeObjectRelease();
  }
  v10 = *(void **)(v0 + 288);
  v50 = v6;
  if (v10)
  {
    v11 = *(void **)(v0 + 296);
    v12 = *(_QWORD *)(v0 + 280);
    v13 = v10;
    sub_2448EB394();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738C210);
    v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_2448EFC00;
    *(_QWORD *)(v0 + 184) = v12;
    v15 = sub_2448EBB5C();
    v17 = v16;
    *(_QWORD *)(v14 + 56) = v8;
    v18 = sub_24480514C();
    *(_QWORD *)(v14 + 64) = v18;
    *(_QWORD *)(v14 + 32) = v15;
    *(_QWORD *)(v14 + 40) = v17;
    v19 = objc_msgSend(v11, sel_processIdentifier);
    v20 = MEMORY[0x24BEE3F88];
    v21 = MEMORY[0x24BEE3FF0];
    *(_QWORD *)(v14 + 96) = MEMORY[0x24BEE3F88];
    *(_QWORD *)(v14 + 104) = v21;
    *(_DWORD *)(v14 + 72) = v19;
    v23 = *(_QWORD *)(v0 + 64);
    v22 = *(_QWORD *)(v0 + 72);
    *(_QWORD *)(v14 + 136) = v8;
    *(_QWORD *)(v14 + 144) = v18;
    *(_QWORD *)(v14 + 112) = v23;
    *(_QWORD *)(v14 + 120) = v22;
    swift_bridgeObjectRetain();
    v24 = objc_msgSend(v11, (SEL)&selRef_lock + 5);
    *(_QWORD *)(v14 + 176) = v20;
    *(_QWORD *)(v14 + 184) = v21;
    *(_DWORD *)(v14 + 152) = v24;
    sub_2448EA5A8();
    swift_bridgeObjectRelease();

  }
  result = (uint64_t)objc_msgSend(*(id *)(v0 + 296), sel_isRunning);
  if ((result & 1) != 0)
  {
    __break(1u);
  }
  else if (objc_msgSend(*(id *)(v0 + 296), sel_terminationReason) == (id)1
         && !objc_msgSend(*(id *)(v0 + 296), sel_terminationStatus))
  {
    v38 = *(_QWORD *)(v0 + 288);
    if (v38)
    {
      v39 = *(_QWORD *)(v0 + 280);
      v40 = *(_QWORD *)(v0 + 248);
      v45 = *(_QWORD *)(v0 + 240);
      v46 = *(void **)(v0 + 296);
      v47 = *(_QWORD *)(v0 + 232);
      swift_bridgeObjectRetain();
      sub_2448EB79C();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v51[0] = 543451483;
      *((_QWORD *)&v51[0] + 1) = 0xE400000000000000;
      *(_QWORD *)(v0 + 176) = v39;
      sub_2448EBB5C();
      sub_2448EABC0();
      swift_bridgeObjectRelease();
      sub_2448EABC0();
      sub_244805038(v0 + 16);
      v41 = (void *)sub_2448EAA70();
      v42 = objc_msgSend(v41, sel_lastPathComponent);

      sub_2448EAA94();
      sub_2448050C4(v0 + 16);
      sub_2448EABC0();
      swift_bridgeObjectRelease();
      sub_2448EABC0();
      v43 = sub_2448EB394();
      sub_244885A80(*(_QWORD *)&v51[0], *((_QWORD *)&v51[0] + 1), 0, 0, v43, v38, v6, v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_2447E74B0(v48, v49);

      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v40, v47);
    }
    else
    {
      v44 = *(void **)(v0 + 296);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 240) + 8))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 232));
      sub_2447E74B0(v48, v49);

    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v6, v7);
  }
  else
  {
    v26 = *(_QWORD *)(v0 + 288);
    v27 = sub_2448EB064();
    if (v26)
    {
      if ((v27 & 1) == 0)
      {
        v28 = *(_QWORD *)(v0 + 288);
        v29 = *(void **)(v0 + 296);
        v30 = *(_QWORD *)(v0 + 280);
        swift_bridgeObjectRetain();
        sub_2448EB79C();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v51[0] = 543451483;
        *((_QWORD *)&v51[0] + 1) = 0xE400000000000000;
        *(_QWORD *)(v0 + 160) = v30;
        sub_2448EBB5C();
        sub_2448EABC0();
        swift_bridgeObjectRelease();
        sub_2448EABC0();
        swift_bridgeObjectRetain();
        sub_2448EABC0();
        swift_bridgeObjectRelease();
        sub_2448EABC0();
        *(_DWORD *)(v0 + 368) = objc_msgSend(v29, (SEL)&selRef_lock + 5);
        sub_2448EBB5C();
        sub_2448EABC0();
        swift_bridgeObjectRelease();
        v31 = sub_2448EB388();
        v32 = v28;
        v6 = v50;
        sub_244885A80(*(_QWORD *)&v51[0], *((_QWORD *)&v51[0] + 1), 0, 0, v31, v32, v50, v7);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    v33 = *(void **)(v0 + 296);
    v34 = *(void (**)(_OWORD *, uint64_t, unint64_t))(v0 + 96);
    v35 = *(_OWORD *)(v0 + 96);
    v51[4] = *(_OWORD *)(v0 + 80);
    v51[5] = v35;
    v51[6] = *(_OWORD *)(v0 + 112);
    v36 = *(_OWORD *)(v0 + 32);
    v51[0] = *(_OWORD *)(v0 + 16);
    v51[1] = v36;
    v37 = *(_OWORD *)(v0 + 64);
    v51[2] = *(_OWORD *)(v0 + 48);
    v51[3] = v37;
    v34(v51, v6, v7);
    swift_bridgeObjectRelease();
    swift_willThrow();
    sub_2447E74B0(v48, v49);

    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 240) + 8))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 232));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_244804AE8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void (*v3)(_OWORD *, void *);
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[7];

  v1 = *(void **)(v0 + 344);
  v2 = *(void **)(v0 + 296);
  swift_task_dealloc();
  swift_task_dealloc();
  v3 = *(void (**)(_OWORD *, void *))(v0 + 112);
  v4 = *(_OWORD *)(v0 + 96);
  v8[4] = *(_OWORD *)(v0 + 80);
  v8[5] = v4;
  v8[6] = *(_OWORD *)(v0 + 112);
  v5 = *(_OWORD *)(v0 + 32);
  v8[0] = *(_OWORD *)(v0 + 16);
  v8[1] = v5;
  v6 = *(_OWORD *)(v0 + 64);
  v8[2] = *(_OWORD *)(v0 + 48);
  v8[3] = v6;
  v3(v8, v1);
  swift_willThrow();

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 240) + 8))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 232));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_244804BBC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[2] = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738C200);
  v1[3] = v2;
  v1[4] = *(_QWORD *)(v2 - 8);
  v1[5] = swift_task_alloc();
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738C228);
  v1[6] = v3;
  v1[7] = *(_QWORD *)(v3 - 8);
  v1[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_244804C4C()
{
  _QWORD *v0;
  _QWORD *v1;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[4] + 16))(v0[5], v0[2], v0[3]);
  sub_2447EB714(&qword_25738C230, &qword_25738C200, MEMORY[0x24BEE6AA8]);
  sub_2448EB0A0();
  v0[9] = sub_2447EB714(&qword_25738C238, &qword_25738C228, MEMORY[0x24BEE6A88]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[10] = v1;
  *v1 = v0;
  v1[1] = sub_244804D24;
  return sub_2448EAF5C();
}

uint64_t sub_244804D24()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    *(_QWORD *)(v2 + 96) = v0;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)(v2 + 88) = MEMORY[0x24BEE4AF8];
  }
  return swift_task_switch();
}

uint64_t sub_244804DA0()
{
  uint64_t v0;
  char v1;
  char isUniquelyReferenced_nonNull_native;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;

  v1 = *(_BYTE *)(v0 + 120);
  if ((*(_BYTE *)(v0 + 121) & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 88));
  }
  else
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v4 = *(char **)(v0 + 88);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v4 = sub_2447C27AC(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
    v6 = *((_QWORD *)v4 + 2);
    v5 = *((_QWORD *)v4 + 3);
    if (v6 >= v5 >> 1)
      v4 = sub_2447C27AC((char *)(v5 > 1), v6 + 1, 1, v4);
    *(_QWORD *)(v0 + 104) = v4;
    *((_QWORD *)v4 + 2) = v6 + 1;
    v4[v6 + 32] = v1;
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 112) = v7;
    *v7 = v0;
    v7[1] = sub_244804F0C;
    return sub_2448EAF5C();
  }
}

uint64_t sub_244804EBC()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_244804F0C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[12] = v0;
    swift_bridgeObjectRelease();
  }
  else
  {
    v2[11] = v2[13];
  }
  return swift_task_switch();
}

uint64_t sub_244804F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_244804FC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_BYTE *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_2447C62E8;
  return sub_2447F4780(a1, v4, v5);
}

uint64_t sub_24480502C()
{
  uint64_t v0;

  return sub_2447F4C08(*(unsigned __int8 *)(v0 + 16), *(id *)(v0 + 24));
}

uint64_t sub_244805038(uint64_t a1)
{
  id v2;

  v2 = *(id *)(a1 + 64);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_2448050C4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 64);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return a1;
}

unint64_t sub_24480514C()
{
  unint64_t result;

  result = qword_25738C218;
  if (!qword_25738C218)
  {
    result = MEMORY[0x24951AC70](MEMORY[0x24BDCFB50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_25738C218);
  }
  return result;
}

uint64_t destroy for CommandLineToolInvocation(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for CommandLineToolInvocation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v7;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v8 = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = v7;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CommandLineToolInvocation(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 64);
  v5 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v5;
  v6 = v5;

  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  swift_retain();
  swift_release();
  v8 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v8;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for CommandLineToolInvocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  v5 = *(void **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);

  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for CommandLineToolInvocation()
{
  return &type metadata for CommandLineToolInvocation;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_244805474()
{
  uint64_t v0;

  v0 = sub_2448EAEE4();
  nullsub_1(v0);
}

uint64_t CommandLineOptions.options.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CommandLineOptions.argumentConsumers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CommandLineOptions.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  type metadata accessor for CommandLineOption(0, a1, a2, a3);
  v6 = sub_2448EAE54();
  type metadata accessor for CommandLineArgumentConsumer(0, a1, v7, v8);
  result = sub_2448EAE54();
  *a4 = v6;
  a4[1] = result;
  return result;
}

uint64_t CommandLineOptions.init(consumer:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v18 = *a1;
  v8 = *((_QWORD *)a1 + 2);
  v9 = *((_BYTE *)a1 + 24);
  type metadata accessor for CommandLineOption(0, a2, a3, a4);
  v17 = a1[2];
  v10 = sub_2448EAE54();
  type metadata accessor for CommandLineArgumentConsumer(255, a2, v11, v12);
  sub_2448EBB68();
  swift_allocObject();
  v13 = sub_2448EAE0C();
  *(_OWORD *)v14 = v18;
  *(_QWORD *)(v14 + 16) = v8;
  *(_BYTE *)(v14 + 24) = v9;
  *(_OWORD *)(v14 + 32) = v17;
  v19 = v13;
  v15 = sub_2448EAEE4();
  result = nullsub_1(v15);
  *a5 = v10;
  a5[1] = v19;
  return result;
}

uint64_t CommandLineOptions.init(option:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  __int128 v17;
  uint64_t v18;

  v8 = *a1;
  v17 = *(_OWORD *)(a1 + 3);
  v9 = a1[5];
  v10 = a1[8];
  type metadata accessor for CommandLineOption(255, a2, a3, a4);
  sub_2448EBB68();
  swift_allocObject();
  v11 = sub_2448EAE0C();
  *(_QWORD *)v12 = v8;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)(a1 + 1);
  *(_OWORD *)(v12 + 24) = v17;
  *(_QWORD *)(v12 + 40) = v9;
  *(_OWORD *)(v12 + 48) = *((_OWORD *)a1 + 3);
  *(_QWORD *)(v12 + 64) = v10;
  v18 = v11;
  v13 = sub_2448EAEE4();
  nullsub_1(v13);
  type metadata accessor for CommandLineArgumentConsumer(0, a2, v14, v15);
  result = sub_2448EAE54();
  *a5 = v18;
  a5[1] = result;
  return result;
}

uint64_t CommandLineOptions.init(options:)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = a1();
  type metadata accessor for CommandLineArgumentConsumer(0, a2, v6, v7);
  result = sub_2448EAE54();
  *a3 = v5;
  a3[1] = result;
  return result;
}

uint64_t CommandLineOptions.init(consumers:)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t result;

  type metadata accessor for CommandLineOption(0, a2, a2, a3);
  v6 = sub_2448EAE54();
  result = a1();
  *a4 = v6;
  a4[1] = result;
  return result;
}

uint64_t CommandLineOptions.init(option:consumer:)@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v9 = *a1;
  v10 = a1[5];
  v11 = a1[8];
  v24 = *(_OWORD *)(a1 + 3);
  v26 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  v13 = *((_BYTE *)a2 + 24);
  type metadata accessor for CommandLineOption(255, a3, a3, a4);
  sub_2448EBB68();
  swift_allocObject();
  v14 = sub_2448EAE0C();
  *(_QWORD *)v15 = v9;
  *(_OWORD *)(v15 + 8) = *(_OWORD *)(a1 + 1);
  *(_OWORD *)(v15 + 24) = v24;
  *(_QWORD *)(v15 + 40) = v10;
  *(_OWORD *)(v15 + 48) = *((_OWORD *)a1 + 3);
  *(_QWORD *)(v15 + 64) = v11;
  v27 = v14;
  v16 = sub_2448EAEE4();
  v25 = a2[2];
  nullsub_1(v16);
  v17 = v27;
  type metadata accessor for CommandLineArgumentConsumer(255, a3, v18, v19);
  sub_2448EBB68();
  swift_allocObject();
  v20 = sub_2448EAE0C();
  *(_OWORD *)v21 = v26;
  *(_QWORD *)(v21 + 16) = v12;
  *(_BYTE *)(v21 + 24) = v13;
  *(_OWORD *)(v21 + 32) = v25;
  v28 = v20;
  v22 = sub_2448EAEE4();
  result = nullsub_1(v22);
  *a5 = v17;
  a5[1] = v28;
  return result;
}

uint64_t CommandLineOptions.init(options:consumer:)@<X0>(uint64_t (*a1)(void)@<X0>, __int128 *a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  __int128 v16;
  uint64_t v17;

  v16 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  v8 = *((_BYTE *)a2 + 24);
  v9 = a1();
  type metadata accessor for CommandLineArgumentConsumer(255, a3, v10, v11);
  sub_2448EBB68();
  swift_allocObject();
  v12 = sub_2448EAE0C();
  *(_OWORD *)v13 = v16;
  *(_QWORD *)(v13 + 16) = v7;
  *(_BYTE *)(v13 + 24) = v8;
  *(_OWORD *)(v13 + 32) = a2[2];
  v17 = v12;
  v14 = sub_2448EAEE4();
  result = nullsub_1(v14);
  *a4 = v9;
  a4[1] = v17;
  return result;
}

uint64_t CommandLineOptions.init(options:consumers:)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t result;

  v5 = a1();
  result = a2();
  *a3 = v5;
  a3[1] = result;
  return result;
}

uint64_t CommandLineOptions.shortUsage.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  type metadata accessor for CommandLineOption(255, v6, a3, a4);
  v7 = sub_2448EAEE4();
  MEMORY[0x24951AC70](MEMORY[0x24BEE12E0], v7);
  v8 = sub_2448EB28C();
  v11 = 0x534E4F4954504FLL;
  if ((v8 & 1) != 0)
    v11 = 0;
  v12 = 0xE700000000000000;
  if ((v8 & 1) != 0)
    v12 = 0xE000000000000000;
  v20 = v11;
  v21 = v12;
  v13 = type metadata accessor for CommandLineArgumentConsumer(0, v6, v9, v10);
  v14 = swift_bridgeObjectRetain();
  if (MEMORY[0x2495196A4](v14, v13))
  {
    v15 = 0;
    v16 = v5 + 40;
    while (1)
    {
      v17 = sub_2448EAE6C();
      result = sub_2448EAE18();
      if ((v17 & 1) == 0)
        break;
      v19 = v15 + 1;
      if (__OFADD__(v15, 1))
        goto LABEL_14;
      swift_bridgeObjectRetain();
      swift_retain();
      if ((v21 & 0xF00000000000000) != 0)
        sub_2448EABC0();
      CommandLineArgumentConsumer.shortUsage.getter();
      sub_2448EABC0();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      ++v15;
      v16 += 48;
      if (v19 == MEMORY[0x2495196A4](v5, v13))
        goto LABEL_12;
    }
    result = sub_2448EB7F0();
    __break(1u);
LABEL_14:
    __break(1u);
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRelease();
    return v20;
  }
  return result;
}

uint64_t CommandLineOptions.parse<A>(_:into:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, unint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(uint64_t *, _QWORD);
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t (*)());
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t AssociatedTypeWitness;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t AssociatedConformanceWitness;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(char *, uint64_t, unint64_t);
  uint64_t v128;
  uint64_t v129;
  void (*v130)(char *, uint64_t (*)());
  uint64_t *v131;
  _QWORD v132[9];
  uint64_t v133;

  v106 = a1;
  v93 = a5;
  v98 = sub_2448EA26C();
  v97 = *(_QWORD *)(v98 - 8);
  MEMORY[0x24BDAC7A8](v98);
  v96 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = a4;
  v100 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
  v107 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v95 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v101 = (char *)&v91 - v11;
  v12 = *(_QWORD *)(a2 + 16);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v5;
  v92 = v5[1];
  v94 = v16;
  v17 = *(void (**)(void))(v16 + 16);
  v99 = v14;
  v17();
  v108 = v12;
  v20 = type metadata accessor for CommandLineOption(0, v12, v18, v19);
  v133 = sub_2448EA7C4();
  v21 = swift_bridgeObjectRetain();
  v22 = MEMORY[0x2495196A4](v21, v20);
  v111 = v20;
  if (v22)
  {
    v23 = 0;
    v103 = v15 + 32;
    v104 = v15;
    while (1)
    {
      v25 = sub_2448EAE6C();
      result = sub_2448EAE18();
      if ((v25 & 1) == 0)
        break;
      if (__OFADD__(v23, 1))
        goto LABEL_44;
      v110 = v23 + 1;
      v27 = (uint64_t *)(v103 + 72 * v23);
      v28 = v27[1];
      v30 = v27[2];
      v29 = v27[3];
      v32 = (void (*)(char *, uint64_t, unint64_t))v27[4];
      v31 = v27[5];
      v34 = v27[6];
      v33 = v27[7];
      v35 = v27[8];
      v116 = *v27;
      v123 = v116;
      v124 = v28;
      v125 = v30;
      v126 = v29;
      v115 = v29;
      v127 = v32;
      v128 = v31;
      v114 = v31;
      v129 = v34;
      v130 = (void (*)(char *, uint64_t (*)()))v33;
      AssociatedConformanceWitness = v33;
      v131 = (uint64_t *)v35;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v112 = CommandLineOption.names.getter();
      v36 = *(_QWORD *)(v112 + 16);
      if (v36)
      {
        sub_2448EA8B4();
        v37 = (uint64_t *)(v112 + 40);
        do
        {
          v38 = *(v37 - 1);
          v39 = *v37;
          v123 = v116;
          v124 = v28;
          v125 = v30;
          v126 = v115;
          v127 = v32;
          v128 = v114;
          v129 = v34;
          v130 = (void (*)(char *, uint64_t (*)()))AssociatedConformanceWitness;
          v131 = (uint64_t *)v35;
          v121 = v38;
          v122 = v39;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          sub_2448EA8F0();
          v37 += 2;
          --v36;
        }
        while (v36);
      }
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v24 = MEMORY[0x2495196A4](v104, v111);
      v23 = v110;
      if (v110 == v24)
        goto LABEL_10;
    }
    result = sub_2448EB7F0();
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
  }
  else
  {
LABEL_10:
    swift_bridgeObjectRelease();
    v116 = swift_allocBox();
    v41 = v40;
    sub_2448EB1E4();
    sub_2448EB214();
    swift_beginAccess();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v42 = 0;
    v104 = 0;
    v112 = v41;
    while (1)
    {
      v43 = v101;
      if ((sub_2448EA9BC() & 1) == 0)
        break;
      v110 = v42;
      while (1)
      {
        v44 = (void (*)(uint64_t *, _QWORD))sub_2448EB2E0();
        v46 = *v45;
        v47 = v45[1];
        swift_bridgeObjectRetain();
        v44(&v123, 0);
        sub_24480684C();
        if ((sub_2448EAC68() & 1) == 0)
          break;
        v120 = 0;
        v119 = 0;
        v123 = v46;
        v124 = v47;
        v117 = 61;
        v118 = 0xE100000000000000;
        sub_2447D0980();
        v50 = sub_2448EB604();
        if ((v50 & 1) != 0)
        {
          v123 = 61;
          v124 = 0xE100000000000000;
          MEMORY[0x24BDAC7A8](v50);
          v90 = &v123;
          swift_bridgeObjectRetain_n();
          v51 = v109;
          v52 = (_QWORD *)sub_2447CC5C4(0x7FFFFFFFFFFFFFFFLL, 1, sub_244806DE4, (uint64_t)(&v91 - 4), v46, v47);
          v109 = v51;
          result = swift_bridgeObjectRelease();
          if (!v52[2])
            goto LABEL_45;
          v54 = v52[4];
          v53 = v52[5];
          v55 = v52[6];
          v56 = v52[7];
          swift_bridgeObjectRetain();
          v57 = MEMORY[0x2495192FC](v54, v53, v55, v56);
          v59 = v58;
          result = swift_bridgeObjectRelease();
          if (v52[2] < 2uLL)
            goto LABEL_46;
          v60 = v52[8];
          v61 = v52[9];
          v115 = v46;
          v62 = v47;
          v63 = v52[10];
          v64 = v52[11];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v65 = MEMORY[0x2495192FC](v60, v61, v63, v64);
          v67 = v66;
          v47 = v62;
          v46 = v115;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v119 = v65;
          v120 = v67;
        }
        else
        {
          swift_bridgeObjectRetain();
          v57 = v46;
          v59 = v47;
        }
        v123 = v57;
        v124 = v59;
        v68 = v96;
        sub_2448EA230();
        v69 = MEMORY[0x24BEE0D00];
        v70 = sub_2448EB5D4();
        v72 = v71;
        (*(void (**)(char *, uint64_t))(v97 + 8))(v68, v98);
        swift_bridgeObjectRelease();
        v117 = v70;
        v118 = v72;
        MEMORY[0x2495190C8](&v123, &v117, v133, v69, v111, MEMORY[0x24BEE0D10]);
        swift_bridgeObjectRelease();
        v73 = v124;
        if (!v124)
        {
          sub_244806D10();
          swift_allocError();
          *v88 = v46;
          v88[1] = v47;
          swift_willThrow();
          (*(void (**)(char *, uint64_t))(v94 + 8))(v99, v108);
          (*(void (**)(char *, uint64_t))(v95 + 8))(v101, AssociatedTypeWitness);
          swift_release();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        v74 = v123;
        v75 = v130;
        v76 = v131;
        v132[0] = v123;
        v132[1] = v124;
        v132[2] = v125;
        v132[3] = v126;
        v132[4] = v127;
        v132[5] = v128;
        v114 = v128;
        v115 = v129;
        v132[6] = v129;
        v132[7] = v130;
        v132[8] = v131;
        v77 = swift_bridgeObjectRelease();
        LOBYTE(v123) = 0;
        MEMORY[0x24BDAC7A8](v77);
        v78 = v107;
        *(&v91 - 10) = v108;
        *(&v91 - 9) = v78;
        *(&v91 - 8) = v105;
        *(&v91 - 7) = (uint64_t)&v119;
        *(&v91 - 6) = (uint64_t)&v123;
        v43 = v101;
        *(&v91 - 5) = v116;
        *(&v91 - 4) = (uint64_t)v43;
        *(&v91 - 3) = v106;
        v90 = v132;
        v79 = v109;
        v75(v99, sub_244806D54);
        v109 = v79;
        if (v79)
        {
          (*(void (**)(char *, uint64_t))(v94 + 8))(v99, v108);
          v90 = v76;
          sub_244806D88(v74, v73);
          (*(void (**)(char *, uint64_t))(v95 + 8))(v43, AssociatedTypeWitness);
          swift_release();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        v90 = v76;
        sub_244806D88(v74, v73);
        swift_bridgeObjectRelease();
        if ((sub_2448EA9BC() & 1) == 0)
          goto LABEL_37;
      }
      v80 = type metadata accessor for CommandLineArgumentConsumer(0, v108, v48, v49);
      v81 = MEMORY[0x249519668](v92, v80);
      if (v104 >= v81)
      {
        sub_244806D10();
        swift_allocError();
        *v89 = v46;
        v89[1] = v47;
        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v94 + 8))(v99, v108);
        (*(void (**)(char *, uint64_t))(v95 + 8))(v101, AssociatedTypeWitness);
        swift_release();
        return swift_bridgeObjectRelease();
      }
      sub_2448EAF08();
      v82 = v125;
      v83 = v126;
      v84 = v109;
      v127(v99, v46, v47);
      v109 = v84;
      if ((v83 & 1) != 0)
      {
        if (v84)
          goto LABEL_42;
        swift_release();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v42 = v110 + 1;
        if (__OFADD__(v110, 1))
          goto LABEL_47;
      }
      else
      {
        if (v84)
        {
LABEL_42:
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v94 + 8))(v99, v108);
          (*(void (**)(char *, uint64_t))(v95 + 8))(v101, AssociatedTypeWitness);
          swift_release();
          return swift_bridgeObjectRelease();
        }
        swift_release();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v85 = v110 + 1;
        if (__OFADD__(v110, 1))
          goto LABEL_48;
        v86 = v85 < v82;
        if (v85 < v82)
          v42 = v110 + 1;
        else
          v42 = 0;
        v87 = v104;
        if (!v86)
          v87 = v104 + 1;
        v104 = v87;
      }
    }
LABEL_37:
    (*(void (**)(char *, uint64_t))(v95 + 8))(v43, AssociatedTypeWitness);
    (*(void (**)(uint64_t, char *, uint64_t))(v94 + 32))(v93, v99, v108);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24480684C()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v9[24];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v2 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v4 = &v9[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v2);
  v6 = &v9[-v5];
  v7 = swift_projectBox();
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 16))(v4, v7, AssociatedTypeWitness);
  sub_2448EB1FC();
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v4, AssociatedTypeWitness);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v1 + 40))(v7, v6, AssociatedTypeWitness);
}

uint64_t sub_244806980(uint64_t *a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  void (*v20)(_BYTE *, _QWORD);
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD v26[5];
  _BYTE v27[32];
  uint64_t v28;

  v26[4] = a7;
  v26[0] = a6;
  v28 = a4;
  v26[2] = a9;
  v26[3] = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v15 = (char *)v26 - v14;
  v26[1] = a3;
  v16 = swift_projectBox();
  if (a1[1] && (*a2 & 1) == 0)
  {
    v22 = *a1;
    *a2 = 1;
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_beginAccess();
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v17(v15, v16, AssociatedTypeWitness);
    swift_getAssociatedConformanceWitness();
    v18 = sub_2448EA9BC();
    v19 = *(void (**)(char *, uint64_t))(v13 + 8);
    v19(v15, AssociatedTypeWitness);
    if ((v18 & 1) != 0)
    {
      swift_beginAccess();
      v17(v15, v16, AssociatedTypeWitness);
      v20 = (void (*)(_BYTE *, _QWORD))sub_2448EB2E0();
      v22 = *v21;
      swift_bridgeObjectRetain();
      v20(v27, 0);
      v19(v15, AssociatedTypeWitness);
      sub_24480684C();
    }
    else
    {
      v23 = *(_QWORD *)v26[0];
      v22 = *(_QWORD *)(v26[0] + 8);
      sub_244806E48();
      swift_allocError();
      *v24 = v23;
      v24[1] = v22;
      swift_bridgeObjectRetain();
      swift_willThrow();
    }
  }
  return v22;
}

unint64_t sub_244806BBC()
{
  sub_2448EB79C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  return 0xD00000000000001DLL;
}

unint64_t sub_244806C58()
{
  return sub_244806BBC();
}

uint64_t sub_244806C60()
{
  sub_2448EB79C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  return 0x22206E6F6974704FLL;
}

uint64_t sub_244806D08()
{
  return sub_244806C60();
}

unint64_t sub_244806D10()
{
  unint64_t result;

  result = qword_25738C240[0];
  if (!qword_25738C240[0])
  {
    result = MEMORY[0x24951AC70](&unk_2448EFD8C, &type metadata for UnknownOptionError);
    atomic_store(result, qword_25738C240);
  }
  return result;
}

uint64_t sub_244806D54()
{
  uint64_t v0;

  return sub_244806980(*(uint64_t **)(v0 + 40), *(_BYTE **)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_244806D88(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_244806DE4(_QWORD *a1)
{
  uint64_t v1;

  return sub_2447D08B4(a1, *(_QWORD **)(v1 + 16)) & 1;
}

uint64_t type metadata accessor for CommandLineOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CommandLineOptions);
}

uint64_t sub_244806E0C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for CommandLineOptionBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CommandLineOptionBuilder);
}

uint64_t type metadata accessor for CommandLineArgumentConsumerBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CommandLineArgumentConsumerBuilder);
}

ValueMetadata *type metadata accessor for UnknownOptionError()
{
  return &type metadata for UnknownOptionError;
}

unint64_t sub_244806E48()
{
  unint64_t result;

  result = qword_25738C3C8;
  if (!qword_25738C3C8)
  {
    result = MEMORY[0x24951AC70](&unk_2448EFE14, &type metadata for OptionNeedsArgumentError);
    atomic_store(result, (unint64_t *)&qword_25738C3C8);
  }
  return result;
}

ValueMetadata *type metadata accessor for OptionNeedsArgumentError()
{
  return &type metadata for OptionNeedsArgumentError;
}

uint64_t IteratorProtocol.map<A>(withBlock:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v11 = swift_allocBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(v12, v5, a3);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a3;
  v13[3] = a4;
  v13[4] = a5;
  v13[5] = v11;
  v13[6] = a1;
  v13[7] = a2;
  swift_retain();
  return sub_2448EB730();
}

uint64_t sub_244806F4C@<X0>(void (*a1)(char *)@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void (*v19)(char *);
  uint64_t v20;

  v18 = a2;
  v19 = a1;
  v20 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = sub_2448EB508();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v18 - v9;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v18 - v12;
  swift_projectBox();
  swift_beginAccess();
  sub_2448EB58C();
  swift_endAccess();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v14 = 1;
    v15 = v20;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, AssociatedTypeWitness);
    v16 = v20;
    v19(v13);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
    v14 = 0;
    v15 = v16;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v15, v14, 1, a3);
}

uint64_t sub_2448070E8()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_244807114@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_244806F4C(*(void (**)(char *))(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 24), a1);
}

uint64_t AnyIterator.map<A>(withBlock:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;

  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a4;
  v10[3] = a5;
  v10[4] = a3;
  v10[5] = a1;
  v10[6] = a2;
  swift_retain();
  swift_retain();
  return sub_2448EB730();
}

uint64_t sub_2448071A4@<X0>(void (*a1)(char *)@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD v19[2];

  v19[1] = a2;
  v9 = sub_2448EB508();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v19 - v12;
  v14 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2448EB718();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, a3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    v17 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v13, a3);
    a1(v16);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, a3);
    v17 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(a5, v17, 1, a4);
}

uint64_t sub_2448072F4()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_244807320@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2448071A4(*(void (**)(char *))(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t HumanReadableError.lowValueTitle.getter()
{
  return 0;
}

void sub_24480733C(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void HumanReadableError.severity.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t HumanReadableError.canTryAgain.getter()
{
  return 1;
}

uint64_t sub_244807360(uint64_t a1)
{
  uint64_t v1;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v3;
  uint64_t v5[3];
  uint64_t v6;

  v6 = a1;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v5);
  sub_2448112E0(v1, (uint64_t)boxed_opaque_existential_1);
  __swift_project_boxed_opaque_existential_1(v5, v6);
  swift_getDynamicType();
  v3 = sub_2448EBDB4();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  return v3;
}

uint64_t HumanReadableError.errorTypeDescription.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v4;
  uint64_t v6[3];
  uint64_t v7;

  v7 = a1;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v6);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_1, v1, a1);
  __swift_project_boxed_opaque_existential_1(v6, v7);
  swift_getDynamicType();
  v4 = sub_2448EBDB4();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  return v4;
}

uint64_t sub_244807454(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];

  v8[4] = a1;
  v8[3] = &type metadata for JITError;
  v8[0] = a1;
  __swift_project_boxed_opaque_existential_1(v8, (uint64_t)&type metadata for JITError);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  v2 = sub_2448EBDB4();
  v4 = v3;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  v8[0] = v2;
  v8[1] = v4;
  if (*(_QWORD *)(a1 + 16))
    sub_2448EABC0();
  JITError.additionalDiagnostics.getter();
  if (v5)
  {
    sub_2448EABC0();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
  }
  sub_2447D0980();
  v6 = sub_2448EB5E0();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_2448075A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];

  v7[3] = &type metadata for InvalidAuditTokenDeserialization;
  v7[0] = a1;
  __swift_project_boxed_opaque_existential_1(v7, (uint64_t)&type metadata for InvalidAuditTokenDeserialization);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  v1 = sub_2448EBDB4();
  v3 = v2;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  v7[0] = v1;
  v7[1] = v3;
  sub_2448EB79C();
  swift_bridgeObjectRelease();
  v4 = swift_bridgeObjectRetain();
  MEMORY[0x2495195D8](v4, MEMORY[0x24BEE44F0]);
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2447D0980();
  v5 = sub_2448EB5E0();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_244807738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_244807760(a1, a2, a3, a4, (uint64_t)&type metadata for UnhandledUnknownCaseError);
}

uint64_t sub_24480774C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_244807760(a1, a2, a3, a4, (uint64_t)&type metadata for SwiftEntrySectionPayload.CouldNotConvertJSONPayloadToString);
}

uint64_t sub_244807760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];

  v16[3] = a5;
  v10 = (_QWORD *)swift_allocObject();
  v16[0] = v10;
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = a3;
  v10[5] = a4;
  __swift_project_boxed_opaque_existential_1(v16, a5);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = sub_2448EBDB4();
  v13 = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  v16[0] = v11;
  v16[1] = v13;
  if (a2)
  {
    swift_bridgeObjectRetain();
    sub_2448EABC0();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
  }
  if (a4)
  {
    swift_bridgeObjectRetain();
    sub_2448EABC0();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
  }
  sub_2447D0980();
  v14 = sub_2448EB5E0();
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_2448078E8()
{
  __int128 *v0;
  uint64_t v1;
  __int128 v3;

  v3 = *v0;
  if (*((_QWORD *)v0 + 3))
  {
LABEL_4:
    sub_2447F9B64((uint64_t)&v3);
    swift_bridgeObjectRetain();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    if (!*((_QWORD *)v0 + 7))
      goto LABEL_6;
    goto LABEL_5;
  }
  if (*((_QWORD *)v0 + 5))
  {
    swift_bridgeObjectRetain();
    goto LABEL_4;
  }
  swift_bridgeObjectRetain();
  if (*((_QWORD *)v0 + 7))
  {
LABEL_5:
    swift_bridgeObjectRetain();
    sub_2448EABC0();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
  }
LABEL_6:
  if (*((_QWORD *)v0 + 9))
  {
    swift_bridgeObjectRetain();
    sub_2448EABC0();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
  }
  sub_2447D0980();
  v1 = sub_2448EB5E0();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_244807A88()
{
  uint64_t v0;

  sub_2448EBDB4();
  sub_2448EBDB4();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0A8);
  sub_2448EB91C();
  sub_2448EABC0();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2447D0980();
  v0 = sub_2448EB5E0();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_244807BC8(void *a1)
{
  id v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  sub_24480E4E0(a1);
  v2 = a1;
  v3 = objc_msgSend(v2, sel_localizedDescription);
  sub_2448EAA94();

  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v2, sel_localizedRecoverySuggestion);
  if (v4)
  {
    v5 = v4;
    sub_2448EAA94();

    sub_2448EABC0();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
  }
  sub_24480E044(v2);
  if (v6)
  {
    sub_2448EABC0();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
  }
  sub_2447D0980();
  v7 = sub_2448EB5E0();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_244807D64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  Swift::String *v22;
  uint64_t v23;
  _QWORD v25[5];
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v1 = type metadata accessor for CrashReport(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for CrashReportError(0);
  v4 = __swift_allocate_boxed_opaque_existential_1(&v26);
  sub_2448112E0(v0, (uint64_t)v4);
  __swift_project_boxed_opaque_existential_1(&v26, v28);
  swift_getDynamicType();
  v5 = sub_2448EBDB4();
  v7 = v6;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
  v30 = v5;
  v31 = v7;
  sub_2447BC68C();
  v8 = v28;
  v9 = v29;
  __swift_project_boxed_opaque_existential_1(&v26, v28);
  (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
  v11 = v10;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
  if (v11)
  {
    v26 = 8250;
    v27 = 0xE200000000000000;
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
  }
  sub_2447BC68C();
  v12 = v28;
  v13 = v29;
  __swift_project_boxed_opaque_existential_1(&v26, v28);
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v12, v13);
  v15 = v14;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
  if (v15)
  {
    sub_2448EABC0();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
  }
  sub_2447BC68C();
  v16 = v28;
  v17 = v29;
  __swift_project_boxed_opaque_existential_1(&v26, v28);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
  v18 = CrashReport.formattedAsLegacyCrashReport()();
  v19 = sub_2447BD730(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v21 = v19[2];
  v20 = v19[3];
  if (v21 >= v20 >> 1)
    v19 = sub_2447BD730((_QWORD *)(v20 > 1), v21 + 1, 1, v19);
  v19[2] = v21 + 1;
  v22 = (Swift::String *)&v19[3 * v21];
  v22[2] = v18;
  LOBYTE(v22[3]._countAndFlagsBits) = 0;
  Array<A>.builtDescription.getter((uint64_t)v19);
  swift_bridgeObjectRelease();
  sub_244811324((uint64_t)v3);
  sub_2448EABC0();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  v26 = v30;
  v27 = v31;
  v25[3] = 28252;
  v25[4] = 0xE200000000000000;
  v25[1] = 10;
  v25[2] = 0xE100000000000000;
  sub_2447D0980();
  v23 = sub_2448EB5E0();
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t sub_244808074()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v1 = v0;
  v9[3] = &type metadata for LowValueError;
  v2 = swift_allocObject();
  v9[0] = v2;
  v3 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)v0;
  *(_OWORD *)(v2 + 32) = v3;
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(v0 + 32);
  *(_BYTE *)(v2 + 64) = *(_BYTE *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1(v9, (uint64_t)&type metadata for LowValueError);
  swift_getDynamicType();
  sub_244811268(v0);
  v4 = sub_2448EBDB4();
  v6 = v5;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  v9[0] = v4;
  v9[1] = v6;
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v1 + 24))
  {
    swift_bridgeObjectRetain();
    sub_2448EABC0();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v1 + 40))
  {
    swift_bridgeObjectRetain();
    sub_2448EABC0();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
  }
  sub_2447D0980();
  v7 = sub_2448EB5E0();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_244808240(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  ValueMetadata *v19;
  uint64_t v20;
  unint64_t v21;

  v19 = &type metadata for TimeoutError;
  v8 = swift_allocObject();
  v16 = v8;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 32) = a3;
  v9 = a4 & 1;
  *(_BYTE *)(v8 + 40) = a4 & 1;
  __swift_project_boxed_opaque_existential_1(&v16, (uint64_t)&type metadata for TimeoutError);
  swift_getDynamicType();
  sub_244811220(a1, a2, a3, a4 & 1);
  v10 = sub_2448EBDB4();
  v12 = v11;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
  v20 = v10;
  v21 = v12;
  v16 = a1;
  v17 = a2;
  v18 = a3;
  LOBYTE(v19) = v9;
  TimeoutError.highValueTitle.getter();
  if (v13)
  {
    v16 = 8250;
    v17 = 0xE200000000000000;
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    v10 = v20;
    v12 = v21;
  }
  v16 = v10;
  v17 = v12;
  sub_2447D0980();
  v14 = sub_2448EB5E0();
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_2448083C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];

  v14[3] = &type metadata for Unreachable;
  v8 = (_QWORD *)swift_allocObject();
  v14[0] = v8;
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  __swift_project_boxed_opaque_existential_1(v14, (uint64_t)&type metadata for Unreachable);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = sub_2448EBDB4();
  v11 = v10;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  v14[0] = v9;
  v14[1] = v11;
  sub_2448EABC0();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  if (a4)
  {
    swift_bridgeObjectRetain();
    sub_2448EABC0();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
  }
  sub_2447D0980();
  v12 = sub_2448EB5E0();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_244808570(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  ValueMetadata *v9;

  v9 = &type metadata for InvalidUUID;
  v7 = a1;
  v8 = a2;
  __swift_project_boxed_opaque_existential_1(&v7, (uint64_t)&type metadata for InvalidUUID);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  v2 = sub_2448EBDB4();
  v4 = v3;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v7);
  v7 = v2;
  v8 = v4;
  sub_2448EB79C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2447D0980();
  v5 = sub_2448EB5E0();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t HumanReadableError.fullDiagnosticsOutput.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(void))(a2 + 88))();
  HumanReadableError.effectiveTitle.getter(a1, a2);
  if (v4)
  {
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (v5)
  {
    sub_2448EABC0();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
  if (v6)
  {
    sub_2448EABC0();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
  }
  sub_2447D0980();
  v7 = sub_2448EB5E0();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_244808880@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  Swift::String *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33[3];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  __int16 v43;
  char v44;

  v32 = a1;
  v2 = type metadata accessor for CrashReport(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for CrashReportError(0);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v33);
  sub_2448112E0(v1, (uint64_t)boxed_opaque_existential_1);
  __swift_project_boxed_opaque_existential_1(v33, v34);
  swift_getDynamicType();
  v31 = sub_2448EBDB4();
  v7 = v6;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  sub_2447BC68C();
  v8 = v34;
  v9 = v35;
  __swift_project_boxed_opaque_existential_1(v33, v34);
  v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
  v11 = v10;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  sub_2447BC68C();
  v12 = v34;
  v13 = v35;
  __swift_project_boxed_opaque_existential_1(v33, v34);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 24))(v12, v13);
  v16 = v15;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  sub_2447BC68C();
  v17 = v34;
  v18 = v35;
  __swift_project_boxed_opaque_existential_1(v33, v34);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  v19 = CrashReport.formattedAsLegacyCrashReport()();
  v20 = sub_2447BD730(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v22 = v20[2];
  v21 = v20[3];
  if (v22 >= v21 >> 1)
    v20 = sub_2447BD730((_QWORD *)(v21 > 1), v22 + 1, 1, v20);
  v20[2] = v22 + 1;
  v23 = (Swift::String *)&v20[3 * v22];
  v23[2] = v19;
  LOBYTE(v23[3]._countAndFlagsBits) = 0;
  v24 = Array<A>.builtDescription.getter((uint64_t)v20);
  v26 = v25;
  swift_bridgeObjectRelease();
  sub_244811324((uint64_t)v4);
  v33[0] = v31;
  v33[1] = v7;
  v33[2] = v30;
  v34 = v11;
  v35 = 0;
  v36 = 0;
  v37 = v14;
  v38 = v16;
  v39 = v24;
  v40 = v26;
  v41 = 2;
  v42 = 0;
  v43 = 258;
  v44 = 1;
  v27 = sub_24480C5A4();
  v28 = sub_24480FC04(v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *v32 = v28;
  return result;
}

uint64_t sub_244808B20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD v17[2];
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int16 v26;
  char v27;

  *((_QWORD *)&v18 + 1) = &type metadata for SwiftEntrySectionPayload.CouldNotConvertJSONPayloadToString;
  v10 = (_QWORD *)swift_allocObject();
  v17[0] = v10;
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = a3;
  v10[5] = a4;
  __swift_project_boxed_opaque_existential_1(v17, (uint64_t)&type metadata for SwiftEntrySectionPayload.CouldNotConvertJSONPayloadToString);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = sub_2448EBDB4();
  v13 = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  v17[0] = v11;
  v17[1] = v13;
  v18 = 0u;
  v19 = 0u;
  v20 = a1;
  v21 = a2;
  v22 = a3;
  v23 = a4;
  v24 = 0;
  v25 = 1;
  v26 = 2;
  v27 = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = sub_24480C5A4();
  v15 = sub_24480FC04(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a5 = v15;
  return result;
}

uint64_t sub_244808C64@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  ValueMetadata *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  ValueMetadata *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  __int16 v21;
  char v22;

  v15 = &type metadata for InvalidUUID;
  v12 = a1;
  v13 = a2;
  __swift_project_boxed_opaque_existential_1(&v12, (uint64_t)&type metadata for InvalidUUID);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  v4 = sub_2448EBDB4();
  v6 = v5;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  v12 = 0;
  v13 = 0xE000000000000000;
  sub_2448EB79C();
  swift_bridgeObjectRelease();
  v12 = 0xD000000000000015;
  v13 = 0x80000002448FA340;
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  v7 = v12;
  v8 = (ValueMetadata *)v13;
  v12 = v4;
  v13 = v6;
  v14 = v7;
  v15 = v8;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0;
  v20 = 1;
  v21 = 2;
  v22 = 1;
  v9 = sub_24480C5A4();
  v10 = sub_24480FC04(v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a3 = v10;
  return result;
}

uint64_t sub_244808DC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD v17[3];
  ValueMetadata *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int16 v27;
  char v28;

  v18 = &type metadata for Unreachable;
  v10 = (_QWORD *)swift_allocObject();
  v17[0] = v10;
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = a3;
  v10[5] = a4;
  __swift_project_boxed_opaque_existential_1(v17, (uint64_t)&type metadata for Unreachable);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = sub_2448EBDB4();
  v13 = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  v17[0] = v11;
  v17[1] = v13;
  v17[2] = 0;
  v18 = 0;
  v19 = 0xD00000000000001FLL;
  v20 = 0x80000002448FA3D0;
  v21 = a1;
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = 0;
  v26 = 1;
  v27 = 2;
  v28 = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = sub_24480C5A4();
  v15 = sub_24480FC04(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a5 = v15;
  return result;
}

uint64_t sub_244808F20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  ValueMetadata *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _QWORD v19[3];
  ValueMetadata *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  __int16 v26;
  char v27;

  v9 = a4 & 1;
  v20 = &type metadata for TimeoutError;
  v10 = swift_allocObject();
  v19[0] = v10;
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  *(_QWORD *)(v10 + 32) = a3;
  *(_BYTE *)(v10 + 40) = v9;
  __swift_project_boxed_opaque_existential_1(v19, (uint64_t)&type metadata for TimeoutError);
  swift_getDynamicType();
  sub_244811220(a1, a2, a3, v9);
  v11 = sub_2448EBDB4();
  v13 = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  v14 = TimeoutError.highValueTitle.getter();
  v19[0] = v11;
  v19[1] = v13;
  v19[2] = v14;
  v20 = v15;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0;
  v25 = 1;
  v26 = 258;
  v27 = 1;
  v16 = sub_24480C5A4();
  v17 = sub_24480FC04(v16);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a5 = v17;
  return result;
}

uint64_t sub_24480906C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[3];
  ValueMetadata *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  char v25;
  char v26;

  v17 = &type metadata for LowValueError;
  v3 = swift_allocObject();
  v16[0] = v3;
  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v3 + 32) = v4;
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(v1 + 32);
  *(_BYTE *)(v3 + 64) = *(_BYTE *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1(v16, (uint64_t)&type metadata for LowValueError);
  swift_getDynamicType();
  sub_244811268(v1);
  v5 = sub_2448EBDB4();
  v7 = v6;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  v8 = (*(_BYTE *)(v1 + 48) == 2) | *(_BYTE *)(v1 + 48);
  v9 = *(_QWORD *)v1;
  v10 = *(_QWORD *)(v1 + 8);
  v11 = *(_QWORD *)(v1 + 16);
  v12 = *(_QWORD *)(v1 + 40);
  v16[0] = v5;
  v16[1] = v7;
  v16[2] = 0;
  v17 = 0;
  v18 = v9;
  v19 = v10;
  v20 = v11;
  v21 = *(_OWORD *)(v1 + 24);
  v22 = v12;
  v23 = 0;
  v24 = 513;
  v25 = v8 & 1;
  v26 = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = sub_24480C5A4();
  v14 = sub_24480FC04(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a1 = v14;
  return result;
}

uint64_t sub_2448091DC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  ValueMetadata *v6;
  ValueMetadata *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  _QWORD v23[3];
  ValueMetadata *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  char v33;
  char v34;

  v24 = &type metadata for AccumulatedError;
  v23[0] = a1;
  __swift_project_boxed_opaque_existential_1(v23, (uint64_t)&type metadata for AccumulatedError);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  v21 = sub_2448EBDB4();
  v4 = v3;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  v5 = sub_2448A839C(a1);
  v7 = v6;
  v8 = sub_2448A8260(a1);
  v10 = v9;
  v11 = sub_2448A84B8(a1);
  v13 = v12;
  v14 = sub_2448A85D4(a1);
  v16 = v15;
  v17 = sub_2448A86F0(a1);
  v23[0] = v21;
  v23[1] = v4;
  v23[2] = v5;
  v24 = v7;
  v25 = v8;
  v26 = v10;
  v27 = v11;
  v28 = v13;
  v29 = v14;
  v30 = v16;
  v31 = 0;
  v32 = 513;
  v33 = v17 & 1;
  v34 = 1;
  v18 = sub_24480C5A4();
  v19 = sub_24480FC04(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v19;
  return result;
}

uint64_t sub_244809340@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  sub_24480E4E0(a1);
  v4 = objc_msgSend(a1, sel_localizedDescription);
  sub_2448EAA94();

  v5 = objc_msgSend(a1, sel_localizedRecoverySuggestion);
  if (v5)
  {
    v6 = v5;
    sub_2448EAA94();

  }
  sub_24480E044(a1);
  v7 = sub_24480C5A4();
  v8 = sub_24480FC04(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v8;
  return result;
}

uint64_t sub_244809480@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  sub_2448EBDB4();
  sub_2448EBDB4();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0A8);
  sub_2448EB91C();
  v2 = sub_24480C5A4();
  v3 = sub_24480FC04(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t sub_2448095A8@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  ValueMetadata *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  ValueMetadata *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  __int16 v21;
  char v22;

  v15 = &type metadata for InvalidAuditTokenDeserialization;
  v12 = a1;
  __swift_project_boxed_opaque_existential_1(&v12, (uint64_t)&type metadata for InvalidAuditTokenDeserialization);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  v3 = sub_2448EBDB4();
  v5 = v4;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  v12 = 0;
  v13 = 0xE000000000000000;
  sub_2448EB79C();
  swift_bridgeObjectRelease();
  v12 = 0xD000000000000027;
  v13 = 0x80000002448FA410;
  v6 = swift_bridgeObjectRetain();
  MEMORY[0x2495195D8](v6, MEMORY[0x24BEE44F0]);
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = v12;
  v8 = (ValueMetadata *)v13;
  v12 = v3;
  v13 = v5;
  v14 = v7;
  v15 = v8;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0;
  v20 = 1;
  v21 = 2;
  v22 = 1;
  v9 = sub_24480C5A4();
  v10 = sub_24480FC04(v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v10;
  return result;
}

uint64_t sub_244809710@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[3];
  ValueMetadata *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int16 v24;
  char v25;

  v15 = &type metadata for JITError;
  v14[0] = a1;
  __swift_project_boxed_opaque_existential_1(v14, (uint64_t)&type metadata for JITError);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  v4 = sub_2448EBDB4();
  v6 = v5;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  if (*(_QWORD *)(a1 + 16))
    v7 = 0xD000000000000017;
  else
    v7 = 0;
  if (*(_QWORD *)(a1 + 16))
    v8 = 0x80000002448FA380;
  else
    v8 = 0;
  v9 = JITError.additionalDiagnostics.getter();
  v14[0] = v4;
  v14[1] = v6;
  v14[2] = 0;
  v15 = 0;
  v16 = v7;
  v17 = v8;
  v18 = 0;
  v19 = 0;
  v20 = v9;
  v21 = v10;
  v22 = 64;
  v23 = 0;
  v24 = 258;
  v25 = 1;
  v11 = sub_24480C5A4();
  v12 = sub_24480FC04(v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v12;
  return result;
}

uint64_t HumanReadableError.plistRepresentation.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;

  v5 = (*(uint64_t (**)(void))(a2 + 88))();
  v7 = v6;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  v27 = v9;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  v25 = v11;
  v26 = v10;
  v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  v13 = v12;
  v23 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
  v15 = v14;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 56))(&v29, a1, a2);
  v22 = v29;
  v16 = v30;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 64))(&v43, a1, a2);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 96))(a1, a2);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 120))(a1, a2);
  v31 = v5;
  v32 = v7;
  v33 = v8;
  v34 = v27;
  v35 = v26;
  v36 = v25;
  v37 = v24;
  v38 = v13;
  v39 = v23;
  v40 = v15;
  v41 = v22;
  v42 = v16;
  BYTE1(v43) = v17 & 1;
  BYTE2(v43) = v18 & 1;
  v19 = sub_24480C5A4();
  v20 = sub_24480FC04(v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a3 = v20;
  return result;
}

uint64_t HumanReadableError.isNativeHumanReadable.getter()
{
  return 1;
}

uint64_t HumanReadableError.errorDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t HumanReadableError.description.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

Swift::String __swiftcall Error.describe()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  Swift::String result;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v2 = v1;
  v3 = v0;
  v4 = *(_QWORD *)(v0 - 8);
  v5 = ((uint64_t (*)())MEMORY[0x24BDAC7A8])();
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v8((char *)&v18 - v9, v1, v3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A480);
  if (!swift_dynamicCast())
  {
    v20 = 0;
    v18 = 0u;
    v19 = 0u;
    sub_2447BD180((uint64_t)&v18, &qword_25738C3D0);
    v8(v7, v1, v3);
LABEL_5:
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = 0xE000000000000000;
    sub_2448EBBA4();
    v14 = (void *)*((_QWORD *)&v18 + 1);
    v12 = v18;
    goto LABEL_6;
  }
  v10 = *((_QWORD *)&v19 + 1);
  v11 = v20;
  __swift_project_boxed_opaque_existential_1(&v18, *((uint64_t *)&v19 + 1));
  v12 = HumanReadableError.effectiveTitle.getter(v10, v11);
  v14 = v13;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
  v8(v7, v2, v3);
  if (!v14)
    goto LABEL_5;
LABEL_6:
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v15 = v12;
  v16 = v14;
  result._object = v16;
  result._countAndFlagsBits = v15;
  return result;
}

uint64_t HumanReadableError.highValueTitle.getter()
{
  return 0;
}

void HumanReadableError.options.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t sub_244809BA4(uint64_t a1)
{
  return sub_24480EC34(a1);
}

uint64_t sub_244809BB0()
{
  uint64_t *v0;

  return sub_244807760(*v0, v0[1], v0[2], v0[3], (uint64_t)&type metadata for SwiftEntrySectionPayload.CouldNotConvertJSONPayloadToString);
}

uint64_t sub_244809BDC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return sub_244808B20(*v1, v1[1], v1[2], v1[3], a1);
}

void Error.humanReadable.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *boxed_opaque_existential_1;
  uint64_t DynamicType;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  unint64_t v54;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v43 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12((char *)&v43 - v13, v2, a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A480);
  if (swift_dynamicCast())
    goto LABEL_7;
  v51 = 0;
  v49 = 0u;
  v50 = 0u;
  sub_2447BD180((uint64_t)&v49, &qword_25738C3D0);
  v12(v11, v2, a1);
  v14 = sub_2448EBB80();
  if (v14)
  {
    v15 = (void *)v14;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v11, a1);
  }
  else
  {
    v15 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v16, v11, a1);
  }
  v17 = (void *)sub_2448EA380();

  sub_24480E690(v17, (uint64_t)&v49);
  if (*((_QWORD *)&v50 + 1))
  {

LABEL_7:
    sub_2447F3530(&v49, (uint64_t)&v52);
    sub_2447F3530(&v52, a2);
    return;
  }
  v44 = (uint64_t *)a2;
  sub_2447BD180((uint64_t)&v49, &qword_25738C3D0);
  v18 = objc_msgSend(v17, sel_userInfo);
  v19 = sub_2448EA800();

  v20 = *(_QWORD *)(v19 + 16);
  swift_bridgeObjectRelease();
  if (v20)
  {
    v21 = objc_msgSend(v17, sel_userInfo);
    v22 = sub_2448EA800();

    v23 = sub_2448EAA94();
    if (*(_QWORD *)(v22 + 16))
    {
      v25 = sub_244828D0C(v23, v24);
      v26 = v44;
      if ((v27 & 1) != 0)
      {
        sub_2447C92C4(*(_QWORD *)(v22 + 56) + 32 * v25, (uint64_t)&v52);
      }
      else
      {
        v52 = 0u;
        v53 = 0u;
      }
    }
    else
    {
      v52 = 0u;
      v53 = 0u;
      v26 = v44;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v53 + 1))
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0A8);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v30 = (void *)v49;
        *((_QWORD *)&v53 + 1) = &type metadata for HumanReadableNSError;
        v54 = sub_24480FEF8();
        *(_QWORD *)&v52 = v17;
        swift_getErrorValue();
        v31 = v47;
        v32 = v48;
        v26[3] = (uint64_t)&type metadata for UnderlyingErrorWrapper;
        v26[4] = sub_24480FF3C();
        v33 = swift_allocObject();
        v34 = v33 + 16;
        *v26 = v33;
        v35 = v17;
        v36 = v30;
        Error.humanReadable.getter(v31, v32);

        sub_2447F3530(&v52, v34);
        return;
      }
    }
    else
    {
      sub_2447BD180((uint64_t)&v52, &qword_25738B658);
    }
    v26[3] = (uint64_t)&type metadata for HumanReadableNSError;
    v26[4] = sub_24480FEF8();
    *v26 = (uint64_t)v17;
  }
  else
  {
    v12(v8, v2, a1);
    v28 = sub_2448EBB80();
    if (v28)
    {
      v29 = v28;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
    }
    else
    {
      v29 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v37, v8, a1);
    }
    v38 = v44;
    swift_getErrorValue();
    v39 = v45;
    v40 = v46;
    *((_QWORD *)&v53 + 1) = v46;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v52);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(boxed_opaque_existential_1, v39, v40);
    __swift_project_boxed_opaque_existential_1(&v52, *((uint64_t *)&v53 + 1));
    DynamicType = swift_getDynamicType();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v52);
    v38[3] = (uint64_t)&type metadata for HumanReadableSwiftError;
    v38[4] = sub_24480FFAC();

    *v38 = v29;
    v38[1] = DynamicType;
  }
}

void sub_24480A0B4(uint64_t a1@<X8>)
{
  HumanReadableError.options.getter(a1);
}

void sub_24480A0C8(_BYTE *a1@<X8>)
{
  HumanReadableError.severity.getter(a1);
}

uint64_t HumanReadableError.withUnderlying(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  if (a1)
  {
    v17 = a2;
    v18 = a3;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v16);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(boxed_opaque_existential_1, v4, a2);
    swift_getErrorValue();
    a4[3] = (uint64_t)&type metadata for UnderlyingErrorWrapper;
    a4[4] = sub_24480FF3C();
    v9 = swift_allocObject();
    v10 = v9 + 16;
    *a4 = v9;
    v11 = v9 + 56;
    v12 = a1;
    Error.humanReadable.getter(v15, v11);

    return sub_2447F3530(&v16, v10);
  }
  else
  {
    a4[3] = a2;
    a4[4] = a3;
    v14 = __swift_allocate_boxed_opaque_existential_1(a4);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v14, v4, a2);
  }
}

uint64_t HumanReadableError.isPotentialCrash.getter()
{
  return 1;
}

PreviewsFoundationOS::HumanReadableErrorSeverity_optional __swiftcall HumanReadableErrorSeverity.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  PreviewsFoundationOS::HumanReadableErrorSeverity_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2448EBA84();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

uint64_t HumanReadableErrorSeverity.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 1868983913;
  else
    return 0x726F727265;
}

uint64_t sub_24480A290(char *a1, char *a2)
{
  return sub_2448BE0E0(*a1, *a2);
}

uint64_t sub_24480A29C()
{
  sub_2448EBD00();
  sub_2448EAB60();
  swift_bridgeObjectRelease();
  return sub_2448EBD3C();
}

uint64_t sub_24480A310()
{
  sub_2448EAB60();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24480A360()
{
  sub_2448EBD00();
  sub_2448EAB60();
  swift_bridgeObjectRelease();
  return sub_2448EBD3C();
}

PreviewsFoundationOS::HumanReadableErrorSeverity_optional sub_24480A3D0(Swift::String *a1)
{
  return HumanReadableErrorSeverity.init(rawValue:)(*a1);
}

void sub_24480A3DC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1868983913;
  if (!*v1)
    v2 = 0x726F727265;
  v3 = 0xE500000000000000;
  if (*v1)
    v3 = 0xE400000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t HumanReadableErrorOptions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

PreviewsFoundationOS::HumanReadableErrorOptions __swiftcall HumanReadableErrorOptions.init(rawValue:)(PreviewsFoundationOS::HumanReadableErrorOptions rawValue)
{
  PreviewsFoundationOS::HumanReadableErrorOptions *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static HumanReadableErrorOptions.showCrashLogsButton.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static HumanReadableErrorOptions.showTitleOnly.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static HumanReadableErrorOptions.generatesLiveIssues.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static HumanReadableErrorOptions.additionalInfoStringContainsMarkdown.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

void static HumanReadableErrorOptions.showCustomTitleAndDetails.getter(_QWORD *a1@<X8>)
{
  *a1 = 32;
}

void static HumanReadableErrorOptions.isJITRelated.getter(_QWORD *a1@<X8>)
{
  *a1 = 64;
}

_QWORD *sub_24480A468@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_24480A47C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

_QWORD *sub_24480A490@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_24480A4BC@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_24480A4E0(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_24480A4F4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_24480A508(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_24480A51C(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_24480A530(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_24480A544()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_24480A554()
{
  return sub_2448EB6AC();
}

_QWORD *sub_24480A56C(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

_QWORD *sub_24480A580@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t HumanReadableError.unwrapped.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t);
  uint64_t *boxed_opaque_existential_1;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[5];

  MEMORY[0x24BDAC7A8](a1);
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v9((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a1);
  if (swift_dynamicCast())
  {
    v17[2] = v14;
    v17[3] = v15;
    v17[4] = v16;
    v17[0] = v12;
    v17[1] = v13;
    sub_2447CE01C((uint64_t)v17, (uint64_t)a3);
    return sub_24480FFF0((uint64_t)v17);
  }
  else
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v12 = 0u;
    sub_2447BD180((uint64_t)&v12, &qword_25738C3F0);
    a3[3] = a1;
    a3[4] = a2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
    return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))v9)(boxed_opaque_existential_1, v3, a1);
  }
}

double HumanReadableError.underlying.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[2];
  _OWORD v12[3];

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (swift_dynamicCast())
  {
    v12[0] = v8;
    v12[1] = v9;
    v12[2] = v10;
    v11[0] = v6;
    v11[1] = v7;
    sub_2447CE01C((uint64_t)v12 + 8, a2);
    sub_24480FFF0((uint64_t)v11);
  }
  else
  {
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v6 = 0u;
    sub_2447BD180((uint64_t)&v6, &qword_25738C3F0);
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t HumanReadableError.effectiveTitle.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(uint64_t (**)(uint64_t))(v9 + 24))(v6);
  v12 = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a1);
  if (!v12)
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
  return v10;
}

_QWORD *HumanReadableError.effectiveOptions.getter@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  char v6;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(a1 + 56))(&v5);
  if (v6)
    v4 = 0;
  else
    v4 = v5;
  *a2 = v4;
  return result;
}

id HumanReadableError.serializableNSError.getter(uint64_t a1, uint64_t a2)
{
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v15;

  __swift_instantiateConcreteTypeFromMangledName(&qword_25738C3F8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2448ECFE0;
  *(_QWORD *)(inited + 32) = sub_2448EAA94();
  *(_QWORD *)(inited + 40) = v5;
  v6 = HumanReadableError.effectiveTitle.getter(a1, a2);
  *(_QWORD *)(inited + 72) = MEMORY[0x24BEE0D00];
  v8 = 0xD000000000000018;
  if (v7)
    v8 = v6;
  v9 = 0x80000002448FA2D0;
  if (v7)
    v9 = v7;
  *(_QWORD *)(inited + 48) = v8;
  *(_QWORD *)(inited + 56) = v9;
  v10 = (void *)objc_opt_self();
  *(_QWORD *)(inited + 80) = 0xD000000000000014;
  *(_QWORD *)(inited + 88) = 0x80000002448FA2F0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 112))(&v15, a1, a2);
  v11 = v15;
  *(_QWORD *)(inited + 120) = __swift_instantiateConcreteTypeFromMangledName(&qword_25738C400);
  *(_QWORD *)(inited + 96) = v11;
  sub_2447C8C10(inited);
  v12 = (void *)sub_2448EA7F4();
  swift_bridgeObjectRelease();
  v13 = objc_msgSend(v10, sel_uv_errorWithUserInfo_, v12);

  return v13;
}

uint64_t sub_24480A9F8(char *a1, char *a2)
{
  return sub_2448BE044(*a1, *a2);
}

uint64_t sub_24480AA04()
{
  sub_2448EBD00();
  sub_2448EAB60();
  swift_bridgeObjectRelease();
  return sub_2448EBD3C();
}

uint64_t sub_24480AA7C()
{
  sub_2448EAB60();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24480AAD0()
{
  sub_2448EBD00();
  sub_2448EAB60();
  swift_bridgeObjectRelease();
  return sub_2448EBD3C();
}

uint64_t sub_24480AB44@<X0>(char *a1@<X8>)
{
  return sub_24480AE18(a1);
}

void sub_24480AB50(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1717658988;
  if (*v1)
    v2 = 0x72657070617277;
  v3 = 0xE400000000000000;
  if (*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_24480AB88()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(v1, v2);
  v5 = v4;
  v7 = v0[8];
  v6 = v0[9];
  __swift_project_boxed_opaque_existential_1(v0 + 5, v7);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 40))(v7, v6);
  v10 = v8;
  if (v5)
  {
    if (v8)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738C210);
      v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_2448ECFE0;
      v12 = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v11 + 56) = MEMORY[0x24BEE0D00];
      v13 = sub_24480514C();
      *(_QWORD *)(v11 + 32) = v3;
      *(_QWORD *)(v11 + 40) = v5;
      *(_QWORD *)(v11 + 96) = v12;
      *(_QWORD *)(v11 + 104) = v13;
      *(_QWORD *)(v11 + 64) = v13;
      *(_QWORD *)(v11 + 72) = v9;
      *(_QWORD *)(v11 + 80) = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9 = sub_2448EAAB8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      return v3;
    }
  }
  return v9;
}

uint64_t sub_24480ACB4(char *a1, char *a2)
{
  return sub_2448BE42C(*a1, *a2);
}

uint64_t sub_24480ACC0()
{
  sub_2448EBD00();
  sub_2448EAB60();
  swift_bridgeObjectRelease();
  return sub_2448EBD3C();
}

uint64_t sub_24480AD3C()
{
  sub_2448EAB60();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24480AD94()
{
  sub_2448EBD00();
  sub_2448EAB60();
  swift_bridgeObjectRelease();
  return sub_2448EBD3C();
}

uint64_t sub_24480AE0C@<X0>(char *a1@<X8>)
{
  return sub_24480AE18(a1);
}

uint64_t sub_24480AE18@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2448EBA84();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_24480AE70(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1852399981;
  if (*v1)
    v2 = 0x69796C7265646E75;
  v3 = 0xE400000000000000;
  if (*v1)
    v3 = 0xEA0000000000676ELL;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_24480AEAC()
{
  _BYTE *v0;

  if (*v0)
    return 0x69796C7265646E75;
  else
    return 1852399981;
}

uint64_t sub_24480AEE4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v10 = 0;
  v2 = a1[3];
  v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v3 + 112))(&v11, v2, v3);
  v4 = a1 + 5;
  v6 = a1[8];
  v5 = a1[9];
  __swift_project_boxed_opaque_existential_1(v4, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 112))(&v9, v6, v5);
  v7 = sub_24480AFC8(0x707954726F727265, 0xE900000000000065, 1u, 0, v11, 1, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_24480AFC8(uint64_t a1, uint64_t a2, unsigned __int8 a3, char a4, uint64_t a5, char a6, uint64_t a7)
{
  int v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _UNKNOWN **v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _UNKNOWN **v24;
  ValueMetadata *v25;
  uint64_t v26;
  _UNKNOWN **v27;
  ValueMetadata *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v13 = a3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738C570);
  inited = swift_initStackObject();
  v15 = inited;
  *(_OWORD *)(inited + 16) = xmmword_2448ECFF0;
  *(_QWORD *)(inited + 32) = a1;
  *(_QWORD *)(inited + 40) = a2;
  if (v13 == 2)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    *(_QWORD *)(inited + 64) = 0;
  }
  else
  {
    if ((v13 & 1) != 0)
      v16 = 0x72657070617277;
    else
      v16 = 1717658988;
    if ((v13 & 1) != 0)
      v17 = 0xE700000000000000;
    else
      v17 = 0xE400000000000000;
    v19 = &protocol witness table for String;
    v18 = MEMORY[0x24BEE0D00];
  }
  v20 = 0xEA0000000000676ELL;
  v21 = 0x69796C7265646E75;
  *(_QWORD *)(inited + 48) = v16;
  *(_QWORD *)(inited + 56) = v17;
  *(_QWORD *)(inited + 72) = v18;
  *(_QWORD *)(inited + 80) = v19;
  if ((a4 & 1) != 0)
    v22 = 0x69796C7265646E75;
  else
    v22 = 1852399981;
  v23 = 0xE400000000000000;
  if ((a4 & 1) != 0)
    v23 = 0xEA0000000000676ELL;
  *(_QWORD *)(inited + 88) = v22;
  *(_QWORD *)(inited + 96) = v23;
  if (a5)
  {
    v24 = &protocol witness table for PropertyList;
    v25 = &type metadata for PropertyList;
    v26 = a5;
  }
  else
  {
    v26 = 0;
    v25 = 0;
    v24 = 0;
    *(_QWORD *)(inited + 112) = 0;
    *(_QWORD *)(inited + 120) = 0;
  }
  *(_QWORD *)(inited + 104) = v26;
  *(_QWORD *)(inited + 128) = v25;
  *(_QWORD *)(inited + 136) = v24;
  if ((a6 & 1) == 0)
  {
    v21 = 1852399981;
    v20 = 0xE400000000000000;
  }
  *(_QWORD *)(inited + 144) = v21;
  *(_QWORD *)(inited + 152) = v20;
  if (a7)
  {
    v27 = &protocol witness table for PropertyList;
    v28 = &type metadata for PropertyList;
    v29 = a7;
  }
  else
  {
    v29 = 0;
    v28 = 0;
    v27 = 0;
    *(_QWORD *)(inited + 168) = 0;
    *(_QWORD *)(inited + 176) = 0;
  }
  *(_QWORD *)(inited + 160) = v29;
  *(_QWORD *)(inited + 184) = v28;
  *(_QWORD *)(inited + 192) = v27;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v30 = sub_2447C8898(v15);
  v31 = sub_2448546D8(v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v31;
}

uint64_t sub_24480B1C0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8[2];
  __int128 v9;
  ValueMetadata *v10;
  _UNKNOWN **v11;

  v4 = *a1;
  v10 = &type metadata for UnderlyingErrorWrapper.Key;
  v11 = &off_2515825B8;
  LOBYTE(v9) = 0;
  sub_24480B578(&v9, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  if (v2)
    return swift_bridgeObjectRelease();
  v10 = &type metadata for UnderlyingErrorWrapper.Key;
  v11 = &off_2515825B8;
  LOBYTE(v9) = 1;
  sub_24480B578(&v9, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)&v8[0];
  unarchiveHumanReadableError(from:)(&v9, v8);
  swift_bridgeObjectRelease();
  v7 = v5;
  unarchiveHumanReadableError(from:)(v8, &v7);
  swift_bridgeObjectRelease();
  sub_2447F3530(&v9, a2);
  return sub_2447F3530(v8, a2 + 40);
}

double sub_24480B2F0(_QWORD *a1, uint64_t a2)
{
  double v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  double v11;
  uint64_t *v12;
  uint64_t *v13;
  __int128 v15;
  __int128 v16;
  _OWORD v17[2];

  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  if (!*(_QWORD *)(a2 + 16) || (v9 = sub_244828D0C(v7, v8), (v10 & 1) == 0))
  {
    v15 = 0u;
    v16 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  sub_2447C92C4(*(_QWORD *)(a2 + 56) + 32 * v9, (uint64_t)&v15);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v16 + 1))
  {
LABEL_6:
    sub_2447BD180((uint64_t)&v15, &qword_25738B658);
    sub_244811360();
    swift_allocError();
    v13 = v12;
    *v12 = a2;
    sub_2447CE01C((uint64_t)a1, (uint64_t)(v12 + 1));
    *((_BYTE *)v13 + 112) = 0;
    swift_bridgeObjectRetain();
    swift_willThrow();
    return v2;
  }
  sub_2447C91FC(&v15, v17);
  sub_24480F2AC((uint64_t)v17, (uint64_t)a1, a2);
  v2 = v11;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return v2;
}

uint64_t sub_24480B438(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t *v11;
  __int128 v13;
  __int128 v14;
  _OWORD v15[2];

  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  if (!*(_QWORD *)(a2 + 16) || (v8 = sub_244828D0C(v6, v7), (v9 & 1) == 0))
  {
    v13 = 0u;
    v14 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  sub_2447C92C4(*(_QWORD *)(a2 + 56) + 32 * v8, (uint64_t)&v13);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v14 + 1))
  {
LABEL_6:
    sub_2447BD180((uint64_t)&v13, &qword_25738B658);
    sub_244811360();
    swift_allocError();
    v11 = v10;
    *v10 = a2;
    sub_2447CE01C((uint64_t)a1, (uint64_t)(v10 + 1));
    *((_BYTE *)v11 + 112) = 0;
    swift_bridgeObjectRetain();
    swift_willThrow();
    return a2;
  }
  sub_2447C91FC(&v13, v15);
  a2 = sub_24480F3A4((uint64_t)v15, (uint64_t)a1, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  return a2;
}

uint64_t sub_24480B578(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t *v11;
  uint64_t *v12;
  __int128 v13;
  __int128 v14;
  _OWORD v15[2];

  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  if (*(_QWORD *)(a2 + 16) && (v8 = sub_244828D0C(v6, v7), (v9 & 1) != 0))
  {
    sub_2447C92C4(*(_QWORD *)(a2 + 56) + 32 * v8, (uint64_t)&v13);
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v14 + 1))
    {
      sub_2447C91FC(&v13, v15);
      sub_24480F820((uint64_t)v15, (uint64_t)a1, a2);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    }
  }
  else
  {
    v13 = 0u;
    v14 = 0u;
    swift_bridgeObjectRelease();
  }
  sub_2447BD180((uint64_t)&v13, &qword_25738B658);
  sub_244811360();
  swift_allocError();
  v12 = v11;
  *v11 = a2;
  sub_2447CE01C((uint64_t)a1, (uint64_t)(v11 + 1));
  *((_BYTE *)v12 + 112) = 0;
  swift_bridgeObjectRetain();
  return swift_willThrow();
}

uint64_t sub_24480B6BC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t *v11;
  __int128 v13;
  __int128 v14;
  _OWORD v15[2];

  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  if (!*(_QWORD *)(a2 + 16) || (v8 = sub_244828D0C(v6, v7), (v9 & 1) == 0))
  {
    v13 = 0u;
    v14 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  sub_2447C92C4(*(_QWORD *)(a2 + 56) + 32 * v8, (uint64_t)&v13);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v14 + 1))
  {
LABEL_6:
    sub_2447BD180((uint64_t)&v13, &qword_25738B658);
    sub_244811360();
    swift_allocError();
    v11 = v10;
    *v10 = a2;
    sub_2447CE01C((uint64_t)a1, (uint64_t)(v10 + 1));
    *((_BYTE *)v11 + 112) = 0;
    swift_bridgeObjectRetain();
    swift_willThrow();
    return a2;
  }
  sub_2447C91FC(&v13, v15);
  a2 = sub_24480F728((uint64_t)v15, (uint64_t)a1, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  return a2;
}

uint64_t sub_24480B804@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t *v13;
  uint64_t *v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[2];

  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  if (*(_QWORD *)(a2 + 16) && (v10 = sub_244828D0C(v8, v9), (v11 & 1) != 0))
  {
    sub_2447C92C4(*(_QWORD *)(a2 + 56) + 32 * v10, (uint64_t)&v15);
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v16 + 1))
    {
      sub_2447C91FC(&v15, v17);
      sub_24480F980((uint64_t)v17, (uint64_t)a1, a2, a3);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    }
  }
  else
  {
    v15 = 0u;
    v16 = 0u;
    swift_bridgeObjectRelease();
  }
  sub_2447BD180((uint64_t)&v15, &qword_25738B658);
  sub_244811360();
  swift_allocError();
  v14 = v13;
  *v13 = a2;
  sub_2447CE01C((uint64_t)a1, (uint64_t)(v13 + 1));
  *((_BYTE *)v14 + 112) = 0;
  swift_bridgeObjectRetain();
  return swift_willThrow();
}

uint64_t sub_24480B948(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[2];

  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  if (!*(_QWORD *)(a2 + 16) || (v9 = sub_244828D0C(v7, v8), (v10 & 1) == 0))
  {
    v21 = 0u;
    v22 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_2447C92C4(*(_QWORD *)(a2 + 56) + 32 * v9, (uint64_t)&v21);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v22 + 1))
  {
LABEL_7:
    sub_2447BD180((uint64_t)&v21, &qword_25738B658);
    sub_244811360();
    swift_allocError();
    v14 = v13;
    *v13 = a2;
    sub_2447CE01C((uint64_t)a1, (uint64_t)(v13 + 1));
    *((_BYTE *)v14 + 112) = 0;
    swift_bridgeObjectRetain();
    swift_willThrow();
    return a2;
  }
  sub_2447C91FC(&v21, v23);
  v11 = sub_24480F728((uint64_t)v23, (uint64_t)a1, a2);
  if (!v2)
  {
    a2 = v11;
    v16 = v12;
    swift_bridgeObjectRetain();
    v17 = sub_2448EBA84();
    swift_bridgeObjectRelease();
    if (v17)
    {
      if (v17 != 1)
      {
        sub_244811360();
        swift_allocError();
        v19 = v18;
        v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738C5B8);
        *(_QWORD *)v19 = &type metadata for ErrorType;
        *(_QWORD *)(v19 + 56) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v19 + 24) = v20;
        *(_QWORD *)(v19 + 32) = a2;
        *(_QWORD *)(v19 + 40) = v16;
        *(_BYTE *)(v19 + 112) = 3;
        swift_willThrow();
        goto LABEL_5;
      }
      a2 = 1;
    }
    else
    {
      a2 = 0;
    }
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    return a2;
  }
LABEL_5:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  return a2;
}

uint64_t unarchiveHumanReadableError(from:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t result;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  _OWORD v36[5];

  v4 = *a1;
  *((_QWORD *)&v26 + 1) = MEMORY[0x24BEE0D00];
  *(_QWORD *)&v27 = &protocol witness table for String;
  v24 = 0x707954726F727265;
  v25 = 0xE900000000000065;
  v5 = sub_24480B948(&v24, v4);
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
  v7 = v5;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
  if ((v7 & 1) != 0)
  {
    a2[3] = (uint64_t)&type metadata for UnderlyingErrorWrapper;
    a2[4] = sub_24480FF3C();
    v19 = (_OWORD *)swift_allocObject();
    *a2 = (uint64_t)v19;
    v35 = v4;
    swift_bridgeObjectRetain();
    result = sub_24480B1C0(&v35, (uint64_t)v36);
    v20 = v36[3];
    v21 = v36[4];
    v23 = v36[0];
    v22 = v36[1];
    v19[3] = v36[2];
    v19[4] = v20;
    v19[5] = v21;
    v19[1] = v23;
    v19[2] = v22;
  }
  else
  {
    a2[3] = (uint64_t)&type metadata for RemoteHumanReadableError;
    a2[4] = sub_244810050();
    v8 = swift_allocObject();
    *a2 = v8;
    *(_QWORD *)&v36[0] = v4;
    swift_bridgeObjectRetain();
    result = sub_24480D5B8((uint64_t *)v36, (uint64_t)&v24);
    v9 = v25;
    v10 = v30;
    v11 = v31;
    v12 = v32;
    v13 = v33;
    v14 = v34;
    v15 = v26;
    v16 = v27;
    v17 = v28;
    v18 = v29;
    *(_QWORD *)(v8 + 16) = v24;
    *(_QWORD *)(v8 + 24) = v9;
    *(_OWORD *)(v8 + 32) = v15;
    *(_OWORD *)(v8 + 48) = v16;
    *(_OWORD *)(v8 + 64) = v17;
    *(_OWORD *)(v8 + 80) = v18;
    *(_QWORD *)(v8 + 96) = v10;
    *(_BYTE *)(v8 + 104) = v11;
    *(_BYTE *)(v8 + 105) = v12;
    *(_BYTE *)(v8 + 106) = v13;
    *(_BYTE *)(v8 + 107) = v14;
  }
  return result;
}

uint64_t sub_24480BCF4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_24480BD30 + 4 * byte_2448EFE70[a1]))(0xD000000000000014, 0x80000002448F8FB0);
}

uint64_t sub_24480BD30()
{
  return 0x756C615668676968;
}

uint64_t sub_24480BD54()
{
  return 0x65756C6156776F6CLL;
}

uint64_t sub_24480BD78()
{
  return 0x6E6F697469646461;
}

uint64_t sub_24480BD9C()
{
  uint64_t v0;

  return v0 + 5;
}

uint64_t sub_24480BDB4()
{
  return 0x736E6F6974706FLL;
}

uint64_t sub_24480BDCC()
{
  return 0x7974697265766573;
}

unint64_t sub_24480BDE4()
{
  return 0xD000000000000010;
}

uint64_t sub_24480BE00()
{
  return 0x65766974614E7369;
}

uint64_t sub_24480BE18()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[40];
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v1 = (uint64_t)v0;
  v2 = v0[3];
  v3 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(v2, v3);
  v6 = v5;
  sub_2448110AC(v1, (uint64_t)v10);
  if (!v6)
  {
    v7 = v12;
    v8 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 24))(v7, v8);
  }
  sub_24480FFF0((uint64_t)v10);
  return v4;
}

uint64_t sub_24480BEC0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[40];
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v1 = (uint64_t)v0;
  v2 = v0[3];
  v3 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  v6 = v5;
  sub_2448110AC(v1, (uint64_t)v10);
  if (!v6)
  {
    v7 = v12;
    v8 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
  }
  sub_24480FFF0((uint64_t)v10);
  return v4;
}

uint64_t sub_24480BF6C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[40];
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v2 = (uint64_t)v1;
  v4 = v1[3];
  v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 56))(&v14, v4, v5);
  v6 = v14;
  LOBYTE(v5) = v15;
  sub_2448110AC(v2, (uint64_t)v10);
  if ((v5 & 1) != 0)
  {
    v7 = v12;
    v8 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    (*(void (**)(uint64_t, uint64_t))(v8 + 56))(v7, v8);
  }
  else
  {
    *(_QWORD *)a1 = v6;
    *(_BYTE *)(a1 + 8) = 0;
  }
  return sub_24480FFF0((uint64_t)v10);
}

uint64_t sub_24480C024@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[40];
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = (uint64_t)v1;
  v4 = v1[3];
  v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 64))(&v14, v4, v5);
  v6 = v14;
  sub_2448110AC(v2, (uint64_t)v10);
  if (v6 == 2)
  {
    v7 = v12;
    v8 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    (*(void (**)(uint64_t, uint64_t))(v8 + 64))(v7, v8);
  }
  else
  {
    *a1 = v6;
  }
  return sub_24480FFF0((uint64_t)v10);
}

uint64_t sub_24480C0D8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 72))(a1, v3, v4);
  v6 = v1[8];
  v5 = v1[9];
  __swift_project_boxed_opaque_existential_1(v1 + 5, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 72))(a1, v6, v5);
}

uint64_t sub_24480C158()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[40];
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v1 = (uint64_t)v0;
  v2 = v0[3];
  v3 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 80))(v2, v3);
  sub_2448110AC(v1, (uint64_t)v9);
  if ((v4 & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    v6 = v11;
    v7 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 80))(v6, v7);
  }
  sub_24480FFF0((uint64_t)v9);
  return v5 & 1;
}

uint64_t sub_24480C1FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v2);
  sub_2448EABC0();
  v4 = v0[8];
  v3 = v0[9];
  __swift_project_boxed_opaque_existential_1(v0 + 5, v4);
  (*(void (**)(uint64_t, uint64_t))(v3 + 88))(v4, v3);
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_24480C29C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[8];
  v2 = v0[9];
  __swift_project_boxed_opaque_existential_1(v0 + 5, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 96))(v1, v2) & 1;
}

uint64_t sub_24480C2E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v7;

  v1 = v0[8];
  v2 = v0[9];
  __swift_project_boxed_opaque_existential_1(v0 + 5, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 104))(v1, v2);
  v3 = v0[3];
  v4 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v3);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 104))(v3, v4);
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 2105468;
  v5._object = (void *)0xE300000000000000;
  String.prefixingEachLine(with:startingOnLine:)(v5, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_24480C400@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = sub_24480AEE4(v1);
  v4 = sub_24480FC04(v3);
  result = swift_bridgeObjectRelease();
  *a1 = v4;
  return result;
}

uint64_t sub_24480C450()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 120))(v1, v2) & 1;
}

uint64_t sub_24480C498@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24480B1C0(a1, a2);
}

void sub_24480C4B0(char *a1)
{
  sub_2448BE178(*a1);
}

uint64_t sub_24480C4BC()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_2448EBD00();
  sub_2448BE6F0((uint64_t)v3, v1);
  return sub_2448EBD3C();
}

void sub_24480C500(uint64_t a1)
{
  char *v1;

  sub_2448BE6F0(a1, *v1);
}

uint64_t sub_24480C508()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_2448EBD00();
  sub_2448BE6F0((uint64_t)v3, v1);
  return sub_2448EBD3C();
}

uint64_t sub_24480C548@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2448113BC();
  *a1 = result;
  return result;
}

uint64_t sub_24480C574@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24480BCF4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24480C59C()
{
  unsigned __int8 *v0;

  return sub_24480BCF4(*v0);
}

uint64_t sub_24480C5A4()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24480C708(0);
  v1 = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

void sub_24480C708(char a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738C570);
  *(_OWORD *)(swift_initStackObject() + 16) = xmmword_2448EFE60;
  __asm { BR              X13 }
}

uint64_t sub_24480C828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  _UNKNOWN **v29;
  uint64_t v30;

  strcpy((char *)(v28 + 32), "highValueTitle");
  *(_BYTE *)(v28 + 47) = -18;
  if (a26)
  {
    v29 = &protocol witness table for String;
    v30 = MEMORY[0x24BEE0D00];
  }
  else
  {
    v27 = 0;
    v30 = 0;
    v29 = 0;
    *(_QWORD *)(v28 + 64) = 0;
  }
  *(_QWORD *)(v28 + 48) = v27;
  *(_QWORD *)(v28 + 56) = a26;
  *(_QWORD *)(v28 + 72) = v30;
  *(_QWORD *)(v28 + 80) = v29;
  return ((uint64_t (*)())((char *)sub_24480C970 + 4 * byte_2448EFE82[v26]))();
}

uint64_t sub_24480C970()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _UNKNOWN **v6;

  strcpy((char *)(v0 + 88), "highValueTitle");
  *(_BYTE *)(v0 + 103) = -18;
  if (v1)
  {
    v6 = &protocol witness table for String;
    v5 = MEMORY[0x24BEE0D00];
    v4 = v1;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_QWORD *)(v0 + 120) = 0;
  }
  *(_QWORD *)(v0 + 104) = v3;
  *(_QWORD *)(v0 + 112) = v4;
  *(_QWORD *)(v0 + 128) = v5;
  *(_QWORD *)(v0 + 136) = v6;
  return ((uint64_t (*)(void))((char *)sub_24480CABC + 4 * byte_2448EFE8B[v2]))();
}

uint64_t sub_24480CABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _UNKNOWN **v19;

  strcpy((char *)(v14 + 144), "highValueTitle");
  *(_BYTE *)(v14 + 159) = -18;
  if (v15)
  {
    v19 = &protocol witness table for String;
    v18 = MEMORY[0x24BEE0D00];
    v17 = v15;
    v16 = a11;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    *(_QWORD *)(v14 + 176) = 0;
  }
  *(_QWORD *)(v14 + 160) = v16;
  *(_QWORD *)(v14 + 168) = v17;
  *(_QWORD *)(v14 + 184) = v18;
  *(_QWORD *)(v14 + 192) = v19;
  return ((uint64_t (*)(void))((char *)sub_24480CC34 + 4 * byte_2448EFE94[a14]))();
}

uint64_t sub_24480CC34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned __int8 a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _UNKNOWN **v20;

  strcpy((char *)(v15 + 200), "highValueTitle");
  *(_BYTE *)(v15 + 215) = -18;
  if (v16)
  {
    v20 = &protocol witness table for String;
    v19 = MEMORY[0x24BEE0D00];
    v18 = v16;
    v17 = a12;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    *(_QWORD *)(v15 + 232) = 0;
  }
  *(_QWORD *)(v15 + 216) = v17;
  *(_QWORD *)(v15 + 224) = v18;
  *(_QWORD *)(v15 + 240) = v19;
  *(_QWORD *)(v15 + 248) = v20;
  return ((uint64_t (*)(void))((char *)sub_24480CDA8 + 4 * byte_2448EFE9D[a15]))();
}

uint64_t sub_24480CDA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int8 a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _UNKNOWN **v21;

  strcpy((char *)(v16 + 256), "highValueTitle");
  *(_BYTE *)(v16 + 271) = -18;
  if (v17)
  {
    v21 = &protocol witness table for String;
    v20 = MEMORY[0x24BEE0D00];
    v19 = v17;
    v18 = a13;
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    *(_QWORD *)(v16 + 288) = 0;
  }
  *(_QWORD *)(v16 + 272) = v18;
  *(_QWORD *)(v16 + 280) = v19;
  *(_QWORD *)(v16 + 296) = v20;
  *(_QWORD *)(v16 + 304) = v21;
  return ((uint64_t (*)(void))((char *)sub_24480CF1C + 4 * byte_2448EFEA6[a16]))();
}

uint64_t sub_24480CF1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18, __int16 a19, unsigned __int8 a20)
{
  uint64_t v20;
  _UNKNOWN **v21;
  uint64_t v22;

  strcpy((char *)(v20 + 312), "highValueTitle");
  *(_BYTE *)(v20 + 327) = -18;
  if ((a18 & 1) != 0)
  {
    v22 = 0;
    v21 = 0;
    a10 = 0;
    *(_QWORD *)(v20 + 336) = 0;
    *(_QWORD *)(v20 + 344) = 0;
  }
  else
  {
    v21 = &protocol witness table for Int;
    v22 = MEMORY[0x24BEE1768];
  }
  *(_QWORD *)(v20 + 352) = v22;
  *(_QWORD *)(v20 + 360) = v21;
  *(_QWORD *)(v20 + 328) = a10;
  return ((uint64_t (*)(void))((char *)sub_24480D084 + 4 * byte_2448EFEAF[a20]))();
}

uint64_t sub_24480D084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,unsigned __int8 a21)
{
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _UNKNOWN **v25;

  strcpy((char *)(v21 + 368), "highValueTitle");
  *(_BYTE *)(v21 + 383) = -18;
  if (a20 == 2)
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    *(_QWORD *)(v21 + 400) = 0;
  }
  else
  {
    v22 = 1868983913;
    if ((a20 & 1) == 0)
      v22 = 0x726F727265;
    v23 = 0xE400000000000000;
    if ((a20 & 1) == 0)
      v23 = 0xE500000000000000;
    v25 = &protocol witness table for String;
    v24 = MEMORY[0x24BEE0D00];
  }
  *(_QWORD *)(v21 + 384) = v22;
  *(_QWORD *)(v21 + 392) = v23;
  *(_QWORD *)(v21 + 408) = v24;
  *(_QWORD *)(v21 + 416) = v25;
  return ((uint64_t (*)(void))((char *)sub_24480D1F8 + 4 * byte_2448EFEB8[a21]))();
}

uint64_t sub_24480D1F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,char a22,__int16 a23,unsigned __int8 a24)
{
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _UNKNOWN **v27;

  v25 = (_QWORD *)(v24 + 440);
  strcpy((char *)(v24 + 424), "highValueTitle");
  *(_BYTE *)(v24 + 439) = -18;
  if (a22 == 2)
  {
    v26 = 0;
    v27 = 0;
    *v25 = 0;
    *(_QWORD *)(v24 + 448) = 0;
    *(_QWORD *)(v24 + 456) = 0;
  }
  else
  {
    *(_BYTE *)v25 = a22 & 1;
    v27 = &protocol witness table for Bool;
    v26 = MEMORY[0x24BEE1328];
  }
  *(_QWORD *)(v24 + 464) = v26;
  *(_QWORD *)(v24 + 472) = v27;
  return ((uint64_t (*)())((char *)sub_24480D34C + 4 * byte_2448EFEC1[a24]))();
}

uint64_t sub_24480D34C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _UNKNOWN **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _UNKNOWN **v8;
  unint64_t v9;
  uint64_t v10;
  char v12;
  int v13;
  uint64_t v14;

  v2 = (_QWORD *)(v0 + 496);
  strcpy((char *)(v0 + 480), "highValueTitle");
  *(_BYTE *)(v0 + 495) = -18;
  if (v12 == 2)
  {
    v3 = 0;
    v4 = 0;
    *v2 = 0;
    *(_QWORD *)(v0 + 504) = 0;
    *(_QWORD *)(v0 + 512) = 0;
  }
  else
  {
    *(_BYTE *)v2 = v12 & 1;
    v4 = &protocol witness table for Bool;
    v3 = MEMORY[0x24BEE1328];
  }
  *(_QWORD *)(v0 + 520) = v3;
  *(_QWORD *)(v0 + 528) = v4;
  *(_QWORD *)(v0 + 536) = v14;
  *(_QWORD *)(v0 + 544) = v1;
  if (v13 == 2)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    *(_QWORD *)(v0 + 568) = 0;
  }
  else
  {
    v5 = 1717658988;
    if ((v13 & 1) != 0)
      v5 = 0x72657070617277;
    v6 = 0xE400000000000000;
    if ((v13 & 1) != 0)
      v6 = 0xE700000000000000;
    v8 = &protocol witness table for String;
    v7 = MEMORY[0x24BEE0D00];
  }
  *(_QWORD *)(v0 + 552) = v5;
  *(_QWORD *)(v0 + 560) = v6;
  *(_QWORD *)(v0 + 576) = v7;
  *(_QWORD *)(v0 + 584) = v8;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v9 = sub_2447C8898(v0);
  v10 = sub_2448546D8(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_24480D5B8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t result;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  unint64_t v29;
  ValueMetadata *v30;
  _UNKNOWN **v31;
  int v32;
  char v33;

  v4 = *a1;
  v30 = &type metadata for RemoteHumanReadableError.Key;
  LOBYTE(v28) = 0;
  v5 = sub_24480D958(&v28, v4);
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v7 = v5;
    v8 = v6;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
    if (v8)
    {
      if ((sub_2448EAC68() & 1) == 0)
      {
        v28 = 0x5D65746F6D65525BLL;
        v29 = 0xE900000000000020;
        sub_2448EABC0();
        swift_bridgeObjectRelease();
        v7 = v28;
        v8 = v29;
      }
    }
    else
    {
      v8 = 0x80000002448FA3F0;
      v7 = 0xD000000000000016;
    }
    v30 = &type metadata for RemoteHumanReadableError.Key;
    v31 = &off_2515825C8;
    LOBYTE(v28) = 1;
    v9 = sub_24480D958(&v28, v4);
    v11 = v10;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
    v30 = &type metadata for RemoteHumanReadableError.Key;
    v31 = &off_2515825C8;
    LOBYTE(v28) = 2;
    v24 = sub_24480D958(&v28, v4);
    v25 = v12;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
    v30 = &type metadata for RemoteHumanReadableError.Key;
    v31 = &off_2515825C8;
    LOBYTE(v28) = 3;
    v22 = sub_24480D958(&v28, v4);
    v23 = v13;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
    v30 = &type metadata for RemoteHumanReadableError.Key;
    v31 = &off_2515825C8;
    LOBYTE(v28) = 4;
    v20 = sub_24480D958(&v28, v4);
    v21 = v14;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
    v30 = &type metadata for RemoteHumanReadableError.Key;
    v31 = &off_2515825C8;
    LOBYTE(v28) = 5;
    sub_24480DA6C(&v28, v4, (uint64_t)&v26);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
    v19 = v26;
    v32 = v27;
    v30 = &type metadata for RemoteHumanReadableError.Key;
    v31 = &off_2515825C8;
    LOBYTE(v28) = 6;
    sub_24480DB7C(&v28, v4, &v33);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
    v18 = v33;
    v30 = &type metadata for RemoteHumanReadableError.Key;
    v31 = &off_2515825C8;
    LOBYTE(v28) = 7;
    v17 = sub_24480DC90(&v28, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
    v30 = &type metadata for RemoteHumanReadableError.Key;
    v31 = &off_2515825C8;
    LOBYTE(v28) = 8;
    v15 = sub_24480DC90(&v28, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = v9;
    *(_QWORD *)(a2 + 24) = v11;
    *(_QWORD *)(a2 + 32) = v24;
    *(_QWORD *)(a2 + 40) = v25;
    *(_QWORD *)(a2 + 48) = v22;
    *(_QWORD *)(a2 + 56) = v23;
    *(_QWORD *)(a2 + 64) = v20;
    *(_QWORD *)(a2 + 72) = v21;
    *(_QWORD *)(a2 + 80) = v19;
    *(_BYTE *)(a2 + 88) = v32;
    *(_BYTE *)(a2 + 89) = v18;
    *(_BYTE *)(a2 + 90) = (v17 == 2) | v17 & 1;
    *(_BYTE *)(a2 + 91) = v15 & 1;
  }
  return result;
}

uint64_t sub_24480D958(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];

  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  if (!*(_QWORD *)(a2 + 16) || (v9 = a2, v10 = sub_244828D0C(v7, v8), (v11 & 1) == 0))
  {
    v14 = 0u;
    v15 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_2447C92C4(*(_QWORD *)(a2 + 56) + 32 * v10, (uint64_t)&v14);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v15 + 1))
  {
LABEL_8:
    sub_2447BD180((uint64_t)&v14, &qword_25738B658);
    return 0;
  }
  sub_2447C91FC(&v14, v16);
  v12 = sub_24480F728((uint64_t)v16, (uint64_t)a1, a2);
  if (!v2)
    v9 = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  return v9;
}

uint64_t sub_24480DA6C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t result;
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];

  v7 = a1[3];
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
  if (!*(_QWORD *)(a2 + 16) || (v11 = sub_244828D0C(v9, v10), (v12 & 1) == 0))
  {
    v14 = 0u;
    v15 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_2447C92C4(*(_QWORD *)(a2 + 56) + 32 * v11, (uint64_t)&v14);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v15 + 1))
  {
LABEL_7:
    result = sub_2447BD180((uint64_t)&v14, &qword_25738B658);
    *(_QWORD *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 1;
    return result;
  }
  sub_2447C91FC(&v14, v16);
  sub_24480F628((uint64_t)v16, (uint64_t)a1, a2, (_QWORD *)a3);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  if (!v3)
    *(_BYTE *)(a3 + 8) = 0;
  return result;
}

uint64_t sub_24480DB7C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  __int128 v16;
  __int128 v17;
  _OWORD v18[2];

  v7 = a1[3];
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
  if (!*(_QWORD *)(a2 + 16) || (v11 = sub_244828D0C(v9, v10), (v12 & 1) == 0))
  {
    v16 = 0u;
    v17 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_2447C92C4(*(_QWORD *)(a2 + 56) + 32 * v11, (uint64_t)&v16);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v17 + 1))
  {
LABEL_8:
    result = sub_2447BD180((uint64_t)&v16, &qword_25738B658);
    *a3 = 2;
    return result;
  }
  sub_2447C91FC(&v16, v18);
  v13 = sub_24480F728((uint64_t)v18, (uint64_t)a1, a2);
  if (!v3)
    sub_244850E00(v13, v14, a3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

uint64_t sub_24480DC90(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  __int128 v12;
  __int128 v13;
  _OWORD v14[2];

  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  if (*(_QWORD *)(a2 + 16) && (v8 = sub_244828D0C(v6, v7), (v9 & 1) != 0))
  {
    sub_2447C92C4(*(_QWORD *)(a2 + 56) + 32 * v8, (uint64_t)&v12);
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v13 + 1))
    {
      sub_2447C91FC(&v12, v14);
      v10 = sub_24480F528((uint64_t)v14, (uint64_t)a1, a2);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
      return v10 & 1;
    }
  }
  else
  {
    v12 = 0u;
    v13 = 0u;
    swift_bridgeObjectRelease();
  }
  sub_2447BD180((uint64_t)&v12, &qword_25738B658);
  return 2;
}

uint64_t sub_24480DD94()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24480DDC0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24480DDEC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

void sub_24480DE18(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 88);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 80);
  *(_BYTE *)(a1 + 8) = v2;
}

void sub_24480DE2C(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 89);
}

uint64_t sub_24480DE38()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 90);
}

uint64_t sub_24480DE40()
{
  return sub_2448078E8();
}

uint64_t sub_24480DE88@<X0>(uint64_t *a1@<X8>)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _OWORD v8[4];
  _OWORD v9[2];

  v3 = v1[3];
  v8[2] = v1[2];
  v8[3] = v3;
  v9[0] = v1[4];
  *(_OWORD *)((char *)v9 + 12) = *(_OWORD *)((char *)v1 + 76);
  v4 = v1[1];
  v8[0] = *v1;
  v8[1] = v4;
  sub_244811110((uint64_t)v8);
  v5 = sub_24480C5A4();
  v6 = sub_24480FC04(v5);
  swift_bridgeObjectRelease();
  result = sub_244811178((uint64_t)v8);
  *a1 = v6;
  return result;
}

uint64_t sub_24480DF08()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 91);
}

uint64_t sub_24480DF10@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = sub_24480C5A4();
  v3 = sub_24480FC04(v2);
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t sub_24480DF80@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24480D5B8(a1, a2);
}

uint64_t sub_24480DF94()
{
  sub_2448EBDB4();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0A8);
  sub_2448EB91C();
  return 0;
}

uint64_t sub_24480E028()
{
  return sub_2448EBDB4();
}

uint64_t sub_24480E034()
{
  return sub_244807A88();
}

uint64_t sub_24480E03C@<X0>(uint64_t *a1@<X8>)
{
  return sub_244809480(a1);
}

void sub_24480E044(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  __int128 v32;
  _OWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v39 = xmmword_2448ECFF0;
  v2 = sub_2448EAA94();
  v4 = v3;
  v40 = v2;
  v41 = v3;
  v42 = sub_2448EAA94();
  v43 = v5;
  v30 = v5;
  v44 = sub_2448EAA94();
  v45 = v6;
  v7 = objc_msgSend(a1, sel_domain);
  v8 = sub_2448EAA94();
  v10 = v9;

  v34 = v8;
  v35 = v10;
  sub_2448EABC0();
  *(_QWORD *)&v32 = objc_msgSend(a1, sel_code);
  sub_2448EBB5C();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  v11 = v42;
  v37 = v34;
  v38 = v10;
  v12 = objc_msgSend(a1, sel_userInfo);
  v13 = sub_2448EA800();

  v14 = 0;
  v15 = *(_QWORD *)(v13 + 64);
  v29 = v13 + 64;
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v31 = (unint64_t)(v16 + 63) >> 6;
  if ((v17 & v15) == 0)
    goto LABEL_8;
LABEL_6:
  v19 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  v20 = v19 | (v14 << 6);
LABEL_7:
  v21 = *(_QWORD *)(v13 + 56);
  v22 = (_QWORD *)(*(_QWORD *)(v13 + 48) + 16 * v20);
  v23 = v22[1];
  *(_QWORD *)&v32 = *v22;
  *((_QWORD *)&v32 + 1) = v23;
  sub_2447C92C4(v21 + 32 * v20, (uint64_t)v33);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_2447D3184((uint64_t)&v32, (uint64_t)&v34, &qword_25738C568);
    v27 = v35;
    if (!v35)
    {
      swift_release();
      swift_arrayDestroy();
      return;
    }
    if ((v28 = v34, sub_2447C91FC(&v36, &v32), v2 == v28) && v4 == v27
      || (sub_2448EBBEC() & 1) != 0
      || v11 == v28 && v30 == v27
      || (sub_2448EBBEC() & 1) != 0
      || v44 == v28 && v45 == v27
      || (sub_2448EBBEC() & 1) != 0)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
      swift_bridgeObjectRelease();
      if (v18)
        goto LABEL_6;
    }
    else
    {
      sub_2448EABC0();
      sub_2448EABC0();
      swift_bridgeObjectRelease();
      sub_2448EABC0();
      sub_2448EB91C();
      sub_2448EABC0();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
      if (v18)
        goto LABEL_6;
    }
LABEL_8:
    v24 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v24 >= v31)
    {
      v26 = v14;
    }
    else
    {
      v25 = *(_QWORD *)(v29 + 8 * v24);
      if (v25)
        goto LABEL_11;
      v26 = v14 + 1;
      if (v14 + 2 < v31)
      {
        v25 = *(_QWORD *)(v29 + 8 * (v14 + 2));
        if (v25)
        {
          v24 = v14 + 2;
LABEL_11:
          v18 = (v25 - 1) & v25;
          v20 = __clz(__rbit64(v25)) + (v24 << 6);
          v14 = v24;
          goto LABEL_7;
        }
        v26 = v14 + 2;
        if (v14 + 3 < v31)
        {
          v25 = *(_QWORD *)(v29 + 8 * (v14 + 3));
          if (v25)
          {
            v24 = v14 + 3;
            goto LABEL_11;
          }
          v24 = v14 + 4;
          v26 = v14 + 3;
          if (v14 + 4 < v31)
          {
            v25 = *(_QWORD *)(v29 + 8 * v24);
            if (v25)
              goto LABEL_11;
            while (v31 - 5 != v14)
            {
              v25 = *(_QWORD *)(v13 + 104 + 8 * v14++);
              if (v25)
              {
                v24 = v14 + 4;
                goto LABEL_11;
              }
            }
            v26 = v31 - 1;
          }
        }
      }
    }
    v18 = 0;
    memset(v33, 0, sizeof(v33));
    v14 = v26;
    v32 = 0u;
  }
  __break(1u);
}

uint64_t sub_24480E4E0(void *a1)
{
  id v2;

  v2 = objc_msgSend(a1, sel_domain);
  sub_2448EAA94();

  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  objc_msgSend(a1, sel_code);
  sub_2448EBB5C();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  return 0x2E726F727245534ELL;
}

uint64_t sub_24480E5B8()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*v0, sel_localizedDescription);
  v2 = sub_2448EAA94();

  return v2;
}

uint64_t sub_24480E60C()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, sel_localizedRecoverySuggestion);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = sub_2448EAA94();

  return v3;
}

void sub_24480E670()
{
  void **v0;

  sub_24480E044(*v0);
}

uint64_t sub_24480E678()
{
  void **v0;

  return sub_24480E4E0(*v0);
}

uint64_t sub_24480E680()
{
  void **v0;

  return sub_244807BC8(*v0);
}

uint64_t sub_24480E688@<X0>(uint64_t *a1@<X8>)
{
  void **v1;

  return sub_244809340(*v1, a1);
}

uint64_t sub_24480E690@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t result;
  uint64_t v8[5];
  __int128 v9;
  __int128 v10;

  v3 = objc_msgSend(a1, sel_userInfo);
  v4 = sub_2448EA800();

  if (!*(_QWORD *)(v4 + 16) || (v5 = sub_244828D0C(0xD000000000000014, 0x80000002448FA2F0), (v6 & 1) == 0))
  {
    v9 = 0u;
    v10 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_2447C92C4(*(_QWORD *)(v4 + 56) + 32 * v5, (uint64_t)&v9);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v10 + 1))
  {
LABEL_7:
    result = sub_2447BD180((uint64_t)&v9, &qword_25738B658);
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738C400);
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {
    *(_QWORD *)&v9 = v8[0];
    unarchiveHumanReadableError(from:)((uint64_t *)&v9, v8);
    swift_bridgeObjectRelease();
    sub_2447D3184((uint64_t)v8, (uint64_t)&v9, &qword_25738C3D0);
    return sub_2447D3184((uint64_t)&v9, a2, &qword_25738C3D0);
  }
LABEL_8:
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

uint64_t Error.errorTypeDescription.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *boxed_opaque_existential_1;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v2 = v1;
  v4 = *(_QWORD *)(a1 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v8((char *)&v17 - v9, v1, a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A480);
  if (!swift_dynamicCast())
  {
    v19 = 0;
    v17 = 0u;
    v18 = 0u;
    sub_2447BD180((uint64_t)&v17, &qword_25738C3D0);
    v8(v7, v1, a1);
LABEL_5:
    *((_QWORD *)&v18 + 1) = a1;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v17);
    v8((char *)boxed_opaque_existential_1, (uint64_t)v7, a1);
    __swift_project_boxed_opaque_existential_1(&v17, *((uint64_t *)&v18 + 1));
    swift_getDynamicType();
    v12 = sub_2448EBDB4();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
    goto LABEL_6;
  }
  v10 = *((_QWORD *)&v18 + 1);
  v11 = v19;
  __swift_project_boxed_opaque_existential_1(&v17, *((uint64_t *)&v18 + 1));
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 88))(v10, v11);
  v14 = v13;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
  v8(v7, v2, a1);
  if (!v14)
    goto LABEL_5;
LABEL_6:
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, a1);
  return v12;
}

PreviewsFoundationOS::UnhandledUnknownCaseError __swiftcall UnhandledUnknownCaseError.init()()
{
  _OWORD *v0;
  PreviewsFoundationOS::UnhandledUnknownCaseError result;

  *v0 = 0u;
  v0[1] = 0u;
  return result;
}

uint64_t UnhandledUnknownCaseError.additionalInfo.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UnhandledUnknownCaseError.additionalInfo.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*UnhandledUnknownCaseError.additionalInfo.modify())()
{
  return nullsub_1;
}

uint64_t UnhandledUnknownCaseError.additionalDiagnostics.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UnhandledUnknownCaseError.additionalDiagnostics.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*UnhandledUnknownCaseError.additionalDiagnostics.modify())()
{
  return nullsub_1;
}

uint64_t sub_24480EC28(uint64_t a1)
{
  return sub_24480EC34(a1);
}

uint64_t sub_24480EC34(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[4];

  v4 = *v1;
  v3 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v10[3] = a1;
  v7 = (_QWORD *)swift_allocObject();
  v10[0] = v7;
  v7[2] = v4;
  v7[3] = v3;
  v7[4] = v6;
  v7[5] = v5;
  __swift_project_boxed_opaque_existential_1(v10, a1);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = sub_2448EBDB4();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  return v8;
}

uint64_t sub_24480ECE0()
{
  uint64_t *v0;

  return sub_244807760(*v0, v0[1], v0[2], v0[3], (uint64_t)&type metadata for UnhandledUnknownCaseError);
}

uint64_t sub_24480ED0C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[2];
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int16 v25;
  char v26;

  v6 = *v2;
  v5 = v2[1];
  v8 = v2[2];
  v7 = v2[3];
  *((_QWORD *)&v17 + 1) = a1;
  v9 = (_QWORD *)swift_allocObject();
  v16[0] = v9;
  v9[2] = v6;
  v9[3] = v5;
  v9[4] = v8;
  v9[5] = v7;
  __swift_project_boxed_opaque_existential_1(v16, a1);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = sub_2448EBDB4();
  v12 = v11;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  v16[0] = v10;
  v16[1] = v12;
  v17 = 0u;
  v18 = 0u;
  v19 = v6;
  v20 = v5;
  v21 = v8;
  v22 = v7;
  v23 = 0;
  v24 = 1;
  v25 = 258;
  v26 = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = sub_24480C5A4();
  v14 = sub_24480FC04(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v14;
  return result;
}

uint64_t sub_24480EE4C()
{
  uint64_t *v0;

  return sub_244850AC0(*v0, v0[1], v0[2], v0[3]);
}

uint64_t LowValueError.lowValueTitle.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LowValueError.additionalInfo.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LowValueError.additionalInfo.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*LowValueError.additionalInfo.modify())()
{
  return nullsub_1;
}

uint64_t LowValueError.additionalDiagnostics.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LowValueError.additionalDiagnostics.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*LowValueError.additionalDiagnostics.modify())()
{
  return nullsub_1;
}

uint64_t LowValueError.isPotentialCrash.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + 48) == 2) | *(_BYTE *)(v0 + 48) & 1u;
}

void __swiftcall LowValueError.init(_:isPotentialCrash:)(PreviewsFoundationOS::LowValueError *__return_ptr retstr, Swift::String _, Swift::Bool_optional isPotentialCrash)
{
  retstr->title = _;
  retstr->additionalInfo = 0u;
  retstr->additionalDiagnostics = 0u;
  retstr->potentialCrash = isPotentialCrash;
}

void sub_24480EF90(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t sub_24480EFA0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];

  v4 = *v1;
  v3 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v8 = v1[4];
  v7 = v1[5];
  v9 = *((_BYTE *)v1 + 48);
  v13[3] = a1;
  v10 = swift_allocObject();
  v13[0] = v10;
  *(_QWORD *)(v10 + 16) = v4;
  *(_QWORD *)(v10 + 24) = v3;
  *(_QWORD *)(v10 + 32) = v6;
  *(_QWORD *)(v10 + 40) = v5;
  *(_QWORD *)(v10 + 48) = v8;
  *(_QWORD *)(v10 + 56) = v7;
  *(_BYTE *)(v10 + 64) = v9;
  __swift_project_boxed_opaque_existential_1(v13, a1);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = sub_2448EBDB4();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  return v11;
}

uint64_t sub_24480F070()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + 48) == 2) | *(_BYTE *)(v0 + 48) & 1u;
}

uint64_t sub_24480F088()
{
  return sub_244808074();
}

uint64_t sub_24480F0C8@<X0>(uint64_t *a1@<X8>)
{
  return sub_24480906C(a1);
}

uint64_t sub_24480F108(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[4];

  v4 = *v1;
  v3 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v10[3] = a1;
  v7 = (_QWORD *)swift_allocObject();
  v10[0] = v7;
  v7[2] = v4;
  v7[3] = v3;
  v7[4] = v6;
  v7[5] = v5;
  __swift_project_boxed_opaque_existential_1(v10, a1);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = sub_2448EBDB4();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  return v8;
}

uint64_t sub_24480F1B8()
{
  uint64_t *v0;

  return sub_2448083C4(*v0, v0[1], v0[2], v0[3]);
}

uint64_t sub_24480F1C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return sub_244808DC0(*v1, v1[1], v1[2], v1[3], a1);
}

uint64_t sub_24480F1D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];

  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_BYTE *)(v1 + 24);
  v10[3] = a1;
  v7 = swift_allocObject();
  v10[0] = v7;
  *(_QWORD *)(v7 + 16) = v3;
  *(_QWORD *)(v7 + 24) = v4;
  *(_QWORD *)(v7 + 32) = v5;
  *(_BYTE *)(v7 + 40) = v6;
  __swift_project_boxed_opaque_existential_1(v10, a1);
  swift_getDynamicType();
  sub_244811220(v3, v4, v5, v6);
  v8 = sub_2448EBDB4();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  return v8;
}

uint64_t sub_24480F28C()
{
  uint64_t v0;

  return sub_244808240(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_24480F29C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_244808F20(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), a1);
}

uint64_t sub_24480F2AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  _QWORD *v9;
  _BYTE v10[32];

  sub_2447C92C4(a1, (uint64_t)v10);
  v6 = MEMORY[0x24BEE50B0];
  result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
    sub_244811360();
    swift_allocError();
    v9 = v8;
    *v8 = a3;
    sub_2447CE01C(a2, (uint64_t)(v8 + 1));
    sub_2447C92C4(a1, (uint64_t)(v9 + 6));
    v9[13] = __swift_instantiateConcreteTypeFromMangledName(&qword_25738C5A0);
    v9[10] = v6;
    *((_BYTE *)v9 + 112) = 1;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_24480F3A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t (*)(uint64_t, uint64_t), _QWORD *, uint64_t, uint64_t);
  _QWORD v13[5];
  uint64_t v14[4];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738C590);
  result = swift_conformsToProtocol2();
  if (result)
  {
    v9 = result;
    sub_2447CE01C(a2, (uint64_t)&v15);
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = a3;
    sub_2447F3530(&v15, v10 + 24);
    v11 = sub_2447C92C4(a1, (uint64_t)v14);
    MEMORY[0x24BDAC7A8](v11);
    v13[2] = sub_2448113A8;
    v13[3] = v10;
    v12 = *(void (**)(uint64_t *, uint64_t (*)(uint64_t, uint64_t), _QWORD *, uint64_t, uint64_t))(v9 + 16);
    v16 = v7;
    v17 = v9;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v15);
    swift_bridgeObjectRetain();
    v12(v14, sub_2448113B4, v13, v7, v9);
    swift_release();
    if (v3)
    {
      __swift_deallocate_boxed_opaque_existential_1((uint64_t)&v15);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738C598);
      swift_dynamicCast();
      v7 = sub_244811404(v14[0]);
      swift_bridgeObjectRelease();
    }
    return v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24480F528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _BYTE v11[48];

  sub_2447C92C4(a1, (uint64_t)v11);
  v6 = MEMORY[0x24BEE1328];
  if ((swift_dynamicCast() & 1) != 0)
  {
    v7 = v11[47] & 1;
  }
  else
  {
    sub_244811360();
    swift_allocError();
    v9 = v8;
    *v8 = a3;
    sub_2447CE01C(a2, (uint64_t)(v8 + 1));
    sub_2447C92C4(a1, (uint64_t)(v9 + 6));
    v9[13] = __swift_instantiateConcreteTypeFromMangledName(&qword_25738C5A8);
    v9[10] = v6;
    *((_BYTE *)v9 + 112) = 1;
    swift_bridgeObjectRetain();
    swift_willThrow();
  }
  return v7 & 1;
}

uint64_t sub_24480F628@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE v13[32];

  sub_2447C92C4(a1, (uint64_t)v13);
  v8 = MEMORY[0x24BEE1768];
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {
    *a4 = v12;
  }
  else
  {
    sub_244811360();
    swift_allocError();
    v11 = v10;
    *v10 = a3;
    sub_2447CE01C(a2, (uint64_t)(v10 + 1));
    sub_2447C92C4(a1, (uint64_t)(v11 + 6));
    v11[13] = __swift_instantiateConcreteTypeFromMangledName(&qword_25738C5B0);
    v11[10] = v8;
    *((_BYTE *)v11 + 112) = 1;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_24480F728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _BYTE v11[32];

  sub_2447C92C4(a1, (uint64_t)v11);
  v6 = MEMORY[0x24BEE0D00];
  if ((swift_dynamicCast() & 1) != 0)
    return v10;
  sub_244811360();
  swift_allocError();
  v9 = v8;
  *v8 = a3;
  sub_2447CE01C(a2, (uint64_t)(v8 + 1));
  sub_2447C92C4(a1, (uint64_t)(v9 + 6));
  v9[13] = __swift_instantiateConcreteTypeFromMangledName(&qword_25738C588);
  v9[10] = v6;
  *((_BYTE *)v9 + 112) = 1;
  swift_bridgeObjectRetain();
  return swift_willThrow();
}

uint64_t sub_24480F820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_BYTE *, uint64_t (*)(), _QWORD *, ValueMetadata *, uint64_t);
  _QWORD v12[5];
  _BYTE v13[32];
  __int128 v14;
  ValueMetadata *v15;
  uint64_t v16;

  result = swift_conformsToProtocol2();
  if (result)
  {
    v8 = result;
    sub_2447CE01C(a2, (uint64_t)&v14);
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = a3;
    sub_2447F3530(&v14, v9 + 24);
    v10 = sub_2447C92C4(a1, (uint64_t)v13);
    MEMORY[0x24BDAC7A8](v10);
    v12[2] = sub_244811860;
    v12[3] = v9;
    v11 = *(void (**)(_BYTE *, uint64_t (*)(), _QWORD *, ValueMetadata *, uint64_t))(v8 + 16);
    v15 = &type metadata for PropertyList;
    v16 = v8;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v14);
    swift_bridgeObjectRetain();
    v11(v13, sub_244811858, v12, &type metadata for PropertyList, v8);
    swift_release();
    if (v3)
    {
      return __swift_deallocate_boxed_opaque_existential_1((uint64_t)&v14);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25738C598);
      return swift_dynamicCast();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24480F980@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  _QWORD *v11;
  __int128 v12;
  _BYTE v13[32];

  sub_2447C92C4(a1, (uint64_t)v13);
  v8 = MEMORY[0x24BDCDDE8];
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {
    *a4 = v12;
  }
  else
  {
    sub_244811360();
    swift_allocError();
    v11 = v10;
    *v10 = a3;
    sub_2447CE01C(a2, (uint64_t)(v10 + 1));
    sub_2447C92C4(a1, (uint64_t)(v11 + 6));
    v11[13] = __swift_instantiateConcreteTypeFromMangledName(&qword_25738C580);
    v11[10] = v8;
    *((_BYTE *)v11 + 112) = 1;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_24480FA80(uint64_t a1, uint64_t a2, void (*a3)(__int128 *__return_ptr))
{
  uint64_t v3;
  uint64_t v4;
  __int128 v6[7];

  a3(v6);
  sub_244811360();
  v3 = swift_allocError();
  sub_2448114C8(v6, v4);
  return v3;
}

uint64_t sub_24480FADC()
{
  uint64_t *v0;

  return sub_2448075A8(*v0);
}

uint64_t sub_24480FAE4@<X0>(uint64_t *a1@<X8>)
{
  unint64_t *v1;

  return sub_2448095A8(*v1, a1);
}

uint64_t sub_24480FAEC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[4];

  v2 = *v1;
  v3 = v1[1];
  v6[3] = a1;
  v6[0] = v2;
  v6[1] = v3;
  __swift_project_boxed_opaque_existential_1(v6, a1);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  v4 = sub_2448EBDB4();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  return v4;
}

uint64_t sub_24480FB64()
{
  uint64_t *v0;

  return sub_244808570(*v0, v0[1]);
}

uint64_t sub_24480FB6C@<X0>(uint64_t *a1@<X8>)
{
  unint64_t *v1;

  return sub_244808C64(*v1, v1[1], a1);
}

uint64_t sub_24480FB74(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[4];

  v2 = *v1;
  v5[3] = a1;
  v5[0] = v2;
  __swift_project_boxed_opaque_existential_1(v5, a1);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  v3 = sub_2448EBDB4();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  return v3;
}

uint64_t sub_24480FBEC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return sub_2448091DC(*v1, a1);
}

uint64_t sub_24480FBF4()
{
  uint64_t *v0;

  return sub_244807454(*v0);
}

uint64_t sub_24480FBFC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return sub_244809710(*v1, a1);
}

uint64_t sub_24480FC04(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  __int128 v32[2];
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  uint64_t v40;
  int64_t v41;

  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A390);
  result = sub_2448EBA24();
  v3 = (_QWORD *)result;
  v4 = 0;
  v5 = *(_QWORD *)(a1 + 64);
  v29 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v30 = (unint64_t)(v6 + 63) >> 6;
  v31 = result + 64;
  if ((v7 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v41 = v4;
  for (i = v9 | (v4 << 6); ; i = __clz(__rbit64(v12)) + (v13 << 6))
  {
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v16 = *v15;
    v17 = v15[1];
    sub_2447CE01C(*(_QWORD *)(a1 + 56) + 40 * i, (uint64_t)v39);
    sub_2447CE01C((uint64_t)v39, (uint64_t)&v34);
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738C5C0);
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738C598);
    if (swift_dynamicCast())
    {
      sub_2447F3530(v32, (uint64_t)v36);
      v18 = a1;
      v20 = v37;
      v19 = v38;
      __swift_project_boxed_opaque_existential_1(v36, v37);
      v21 = v20;
      a1 = v18;
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v19 + 8))(&v34, v21, v19);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    }
    else
    {
      v33 = 0;
      memset(v32, 0, sizeof(v32));
      sub_2447BD180((uint64_t)v32, &qword_25738C5C8);
      v22 = v40;
      v23 = __swift_project_boxed_opaque_existential_1(v39, v40);
      v35 = v22;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v34);
      (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(boxed_opaque_existential_1, v23, v22);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
    *(_QWORD *)(v31 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v25 = (_QWORD *)(v3[6] + 16 * i);
    *v25 = v16;
    v25[1] = v17;
    result = (uint64_t)sub_2447C91FC(&v34, (_OWORD *)(v3[7] + 32 * i));
    v26 = v3[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v3[2] = v28;
    v4 = v41;
    if (v8)
      goto LABEL_4;
LABEL_5:
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_27;
    if (v11 >= v30)
      return (uint64_t)v3;
    v12 = *(_QWORD *)(v29 + 8 * v11);
    v13 = v4 + 1;
    if (!v12)
    {
      v13 = v4 + 2;
      if (v4 + 2 >= v30)
        return (uint64_t)v3;
      v12 = *(_QWORD *)(v29 + 8 * v13);
      if (!v12)
      {
        v13 = v4 + 3;
        if (v4 + 3 >= v30)
          return (uint64_t)v3;
        v12 = *(_QWORD *)(v29 + 8 * v13);
        if (!v12)
          break;
      }
    }
LABEL_18:
    v8 = (v12 - 1) & v12;
    v41 = v13;
  }
  v14 = v4 + 4;
  if (v4 + 4 >= v30)
    return (uint64_t)v3;
  v12 = *(_QWORD *)(v29 + 8 * v14);
  if (v12)
  {
    v13 = v4 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v30)
      return (uint64_t)v3;
    v12 = *(_QWORD *)(v29 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_18;
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_24480FEF8()
{
  unint64_t result;

  result = qword_25738C3D8;
  if (!qword_25738C3D8)
  {
    result = MEMORY[0x24951AC70](&unk_2448F074C, &type metadata for HumanReadableNSError);
    atomic_store(result, (unint64_t *)&qword_25738C3D8);
  }
  return result;
}

unint64_t sub_24480FF3C()
{
  unint64_t result;

  result = qword_25738C3E0;
  if (!qword_25738C3E0)
  {
    result = MEMORY[0x24951AC70](&unk_2448F0730, &type metadata for UnderlyingErrorWrapper);
    atomic_store(result, (unint64_t *)&qword_25738C3E0);
  }
  return result;
}

uint64_t sub_24480FF80()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return swift_deallocObject();
}

unint64_t sub_24480FFAC()
{
  unint64_t result;

  result = qword_25738C3E8;
  if (!qword_25738C3E8)
  {
    result = MEMORY[0x24951AC70](&unk_2448F0714, &type metadata for HumanReadableSwiftError);
    atomic_store(result, (unint64_t *)&qword_25738C3E8);
  }
  return result;
}

uint64_t sub_24480FFF0(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  return a1;
}

uint64_t __swift_deallocate_boxed_opaque_existential_1(uint64_t result)
{
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) - 8) + 80) & 0x20000) != 0)
    JUMPOUT(0x24951AD84);
  return result;
}

unint64_t sub_244810050()
{
  unint64_t result;

  result = qword_25738C408;
  if (!qword_25738C408)
  {
    result = MEMORY[0x24951AC70](&unk_2448F06F8, &type metadata for RemoteHumanReadableError);
    atomic_store(result, (unint64_t *)&qword_25738C408);
  }
  return result;
}

uint64_t sub_244810094()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_2448100DC()
{
  unint64_t result;

  result = qword_25738C410;
  if (!qword_25738C410)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for HumanReadableErrorSeverity, &type metadata for HumanReadableErrorSeverity);
    atomic_store(result, (unint64_t *)&qword_25738C410);
  }
  return result;
}

_UNKNOWN **sub_244810120()
{
  return &protocol witness table for String;
}

unint64_t sub_244810130()
{
  unint64_t result;

  result = qword_25738C440;
  if (!qword_25738C440)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for HumanReadableErrorOptions, &type metadata for HumanReadableErrorOptions);
    atomic_store(result, (unint64_t *)&qword_25738C440);
  }
  return result;
}

unint64_t sub_244810178()
{
  unint64_t result;

  result = qword_25738C448;
  if (!qword_25738C448)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for HumanReadableErrorOptions, &type metadata for HumanReadableErrorOptions);
    atomic_store(result, (unint64_t *)&qword_25738C448);
  }
  return result;
}

_UNKNOWN **sub_2448101BC()
{
  return &protocol witness table for Int;
}

unint64_t sub_2448101CC()
{
  unint64_t result;

  result = qword_25738C478;
  if (!qword_25738C478)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for HumanReadableErrorOptions, &type metadata for HumanReadableErrorOptions);
    atomic_store(result, (unint64_t *)&qword_25738C478);
  }
  return result;
}

unint64_t sub_244810214()
{
  unint64_t result;

  result = qword_25738C480;
  if (!qword_25738C480)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for HumanReadableErrorOptions, &type metadata for HumanReadableErrorOptions);
    atomic_store(result, (unint64_t *)&qword_25738C480);
  }
  return result;
}

uint64_t sub_244810258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_244810FF4(a1, a2, a3, (uint64_t (*)(void))sub_24481026C, (uint64_t (*)(void))sub_2448102B0);
}

unint64_t sub_24481026C()
{
  unint64_t result;

  result = qword_25738C488;
  if (!qword_25738C488)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for UnhandledUnknownCaseError, &type metadata for UnhandledUnknownCaseError);
    atomic_store(result, (unint64_t *)&qword_25738C488);
  }
  return result;
}

unint64_t sub_2448102B0()
{
  unint64_t result;

  result = qword_25738C490;
  if (!qword_25738C490)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for UnhandledUnknownCaseError, &type metadata for UnhandledUnknownCaseError);
    atomic_store(result, (unint64_t *)&qword_25738C490);
  }
  return result;
}

unint64_t sub_2448102F8()
{
  unint64_t result;

  result = qword_25738C498;
  if (!qword_25738C498)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for UnhandledUnknownCaseError, &type metadata for UnhandledUnknownCaseError);
    atomic_store(result, (unint64_t *)&qword_25738C498);
  }
  return result;
}

uint64_t sub_24481033C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_244810FF4(a1, a2, a3, (uint64_t (*)(void))sub_244810350, (uint64_t (*)(void))sub_244810394);
}

unint64_t sub_244810350()
{
  unint64_t result;

  result = qword_25738C4A0;
  if (!qword_25738C4A0)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for LowValueError, &type metadata for LowValueError);
    atomic_store(result, (unint64_t *)&qword_25738C4A0);
  }
  return result;
}

unint64_t sub_244810394()
{
  unint64_t result;

  result = qword_25738C4A8;
  if (!qword_25738C4A8)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for LowValueError, &type metadata for LowValueError);
    atomic_store(result, (unint64_t *)&qword_25738C4A8);
  }
  return result;
}

unint64_t sub_2448103DC()
{
  unint64_t result;

  result = qword_25738C4B0;
  if (!qword_25738C4B0)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for LowValueError, &type metadata for LowValueError);
    atomic_store(result, (unint64_t *)&qword_25738C4B0);
  }
  return result;
}

uint64_t dispatch thunk of HumanReadableError.highValueTitle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of HumanReadableError.lowValueTitle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of HumanReadableError.additionalInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of HumanReadableError.additionalDiagnostics.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of HumanReadableError.options.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of HumanReadableError.severity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of HumanReadableError.collectDiagnostics(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of HumanReadableError.canTryAgain.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of HumanReadableError.errorTypeDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of HumanReadableError.isPotentialCrash.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of HumanReadableError.fullDiagnosticsOutput.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of HumanReadableError.plistRepresentation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of HumanReadableError.isNativeHumanReadable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

ValueMetadata *type metadata accessor for HumanReadableErrorSeverity()
{
  return &type metadata for HumanReadableErrorSeverity;
}

ValueMetadata *type metadata accessor for HumanReadableErrorOptions()
{
  return &type metadata for HumanReadableErrorOptions;
}

ValueMetadata *type metadata accessor for UnhandledUnknownCaseError()
{
  return &type metadata for UnhandledUnknownCaseError;
}

uint64_t destroy for LowValueError()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LowValueError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LowValueError(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for LowValueError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for LowValueError(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LowValueError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LowValueError()
{
  return &type metadata for LowValueError;
}

uint64_t destroy for RemoteHumanReadableError()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RemoteHumanReadableError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RemoteHumanReadableError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v4;
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_BYTE *)(a1 + 90) = *(_BYTE *)(a2 + 90);
  *(_BYTE *)(a1 + 91) = *(_BYTE *)(a2 + 91);
  return a1;
}

__n128 __swift_memcpy92_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 + 76);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for RemoteHumanReadableError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(_BYTE *)(a1 + 90) = *(_BYTE *)(a2 + 90);
  *(_BYTE *)(a1 + 91) = *(_BYTE *)(a2 + 91);
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoteHumanReadableError(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 92))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RemoteHumanReadableError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 88) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 92) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 92) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteHumanReadableError()
{
  return &type metadata for RemoteHumanReadableError;
}

_QWORD *initializeBufferWithCopyOfBuffer for HumanReadableSwiftError(_QWORD *a1, uint64_t a2)
{
  id v4;
  id v5;
  uint64_t v6;

  v4 = *(id *)a2;
  v5 = *(id *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *a1 = v4;
  a1[1] = v6;
  return a1;
}

uint64_t assignWithCopy for HumanReadableSwiftError(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  void *v6;

  v4 = *(id *)a2;
  v5 = *(id *)a2;
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1;
}

id *assignWithTake for HumanReadableSwiftError(id *a1, _OWORD *a2)
{

  *(_OWORD *)a1 = *a2;
  return a1;
}

ValueMetadata *type metadata accessor for HumanReadableSwiftError()
{
  return &type metadata for HumanReadableSwiftError;
}

uint64_t destroy for UnderlyingErrorWrapper(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return __swift_destroy_boxed_opaque_existential_1(a1 + 40);
}

uint64_t initializeWithCopy for UnderlyingErrorWrapper(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  return a1;
}

uint64_t *assignWithCopy for UnderlyingErrorWrapper(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  __swift_assign_boxed_opaque_existential_1(a1 + 5, a2 + 5);
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for UnderlyingErrorWrapper(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for UnderlyingErrorWrapper(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UnderlyingErrorWrapper(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UnderlyingErrorWrapper()
{
  return &type metadata for UnderlyingErrorWrapper;
}

ValueMetadata *type metadata accessor for HumanReadableNSError()
{
  return &type metadata for HumanReadableNSError;
}

unint64_t sub_244810CE4()
{
  unint64_t result;

  result = qword_25738C4B8;
  if (!qword_25738C4B8)
  {
    result = MEMORY[0x24951AC70](&unk_2448F0418, &type metadata for HumanReadableNSError);
    atomic_store(result, (unint64_t *)&qword_25738C4B8);
  }
  return result;
}

unint64_t sub_244810D2C()
{
  unint64_t result;

  result = qword_25738C4C0;
  if (!qword_25738C4C0)
  {
    result = MEMORY[0x24951AC70](&unk_2448F04C8, &type metadata for UnderlyingErrorWrapper);
    atomic_store(result, (unint64_t *)&qword_25738C4C0);
  }
  return result;
}

_UNKNOWN **sub_244810D70()
{
  return &protocol witness table for PropertyList;
}

unint64_t sub_244810D80()
{
  unint64_t result;

  result = qword_25738C4F0;
  if (!qword_25738C4F0)
  {
    result = MEMORY[0x24951AC70](&unk_2448F0588, &type metadata for HumanReadableSwiftError);
    atomic_store(result, (unint64_t *)&qword_25738C4F0);
  }
  return result;
}

unint64_t sub_244810DC8()
{
  unint64_t result;

  result = qword_25738C4F8;
  if (!qword_25738C4F8)
  {
    result = MEMORY[0x24951AC70](&unk_2448F0638, &type metadata for RemoteHumanReadableError);
    atomic_store(result, (unint64_t *)&qword_25738C4F8);
  }
  return result;
}

uint64_t sub_244810E0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_244810FF4(a1, a2, a3, (uint64_t (*)(void))sub_244810E20, (uint64_t (*)(void))sub_244810E64);
}

unint64_t sub_244810E20()
{
  unint64_t result;

  result = qword_25738C528;
  if (!qword_25738C528)
  {
    result = MEMORY[0x24951AC70](&unk_2448F06A0, &type metadata for RemoteHumanReadableError);
    atomic_store(result, (unint64_t *)&qword_25738C528);
  }
  return result;
}

unint64_t sub_244810E64()
{
  unint64_t result;

  result = qword_25738C530;
  if (!qword_25738C530)
  {
    result = MEMORY[0x24951AC70](&unk_2448F0678, &type metadata for RemoteHumanReadableError);
    atomic_store(result, (unint64_t *)&qword_25738C530);
  }
  return result;
}

uint64_t sub_244810EA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_244810FF4(a1, a2, a3, (uint64_t (*)(void))sub_244810EBC, (uint64_t (*)(void))sub_244810F00);
}

unint64_t sub_244810EBC()
{
  unint64_t result;

  result = qword_25738C538;
  if (!qword_25738C538)
  {
    result = MEMORY[0x24951AC70](&unk_2448F05F0, &type metadata for HumanReadableSwiftError);
    atomic_store(result, (unint64_t *)&qword_25738C538);
  }
  return result;
}

unint64_t sub_244810F00()
{
  unint64_t result;

  result = qword_25738C540;
  if (!qword_25738C540)
  {
    result = MEMORY[0x24951AC70](&unk_2448F05C8, &type metadata for HumanReadableSwiftError);
    atomic_store(result, (unint64_t *)&qword_25738C540);
  }
  return result;
}

uint64_t sub_244810F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_244810FF4(a1, a2, a3, (uint64_t (*)(void))sub_244810F58, (uint64_t (*)(void))sub_244810F9C);
}

unint64_t sub_244810F58()
{
  unint64_t result;

  result = qword_25738C548;
  if (!qword_25738C548)
  {
    result = MEMORY[0x24951AC70](&unk_2448F0530, &type metadata for UnderlyingErrorWrapper);
    atomic_store(result, (unint64_t *)&qword_25738C548);
  }
  return result;
}

unint64_t sub_244810F9C()
{
  unint64_t result;

  result = qword_25738C550;
  if (!qword_25738C550)
  {
    result = MEMORY[0x24951AC70](&unk_2448F0508, &type metadata for UnderlyingErrorWrapper);
    atomic_store(result, (unint64_t *)&qword_25738C550);
  }
  return result;
}

uint64_t sub_244810FE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_244810FF4(a1, a2, a3, (uint64_t (*)(void))sub_244811024, (uint64_t (*)(void))sub_244811068);
}

uint64_t sub_244810FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = a4();
  result = a5();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_244811024()
{
  unint64_t result;

  result = qword_25738C558;
  if (!qword_25738C558)
  {
    result = MEMORY[0x24951AC70](&unk_2448F0480, &type metadata for HumanReadableNSError);
    atomic_store(result, (unint64_t *)&qword_25738C558);
  }
  return result;
}

unint64_t sub_244811068()
{
  unint64_t result;

  result = qword_25738C560;
  if (!qword_25738C560)
  {
    result = MEMORY[0x24951AC70](&unk_2448F0458, &type metadata for HumanReadableNSError);
    atomic_store(result, (unint64_t *)&qword_25738C560);
  }
  return result;
}

uint64_t sub_2448110AC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a2, a1);
  v5 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a2 + 40, a1 + 40);
  return a2;
}

uint64_t sub_244811110(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_244811178(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_2448111E4()
{
  uint64_t v0;

  sub_244811210(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocObject();
}

uint64_t sub_244811210(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if ((a4 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_244811220(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if ((a4 & 1) != 0)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_244811234()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_244811268(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t objectdestroy_7Tm()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2448112E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CrashReportError(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_244811324(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CrashReport(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_244811360()
{
  unint64_t result;

  result = qword_25738C578;
  if (!qword_25738C578)
  {
    result = MEMORY[0x24951AC70](&unk_2448F3AF8, &type metadata for PropertyListError);
    atomic_store(result, (unint64_t *)&qword_25738C578);
  }
  return result;
}

uint64_t sub_2448113A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_2448559BC(a1, a2, *(_QWORD *)(v3 + 16), v3 + 24, a3);
}

uint64_t sub_2448113B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_24480FA80(a1, a2, *(void (**)(__int128 *__return_ptr))(v2 + 16));
}

uint64_t sub_2448113BC()
{
  unint64_t v0;

  v0 = sub_2448EBA84();
  swift_bridgeObjectRelease();
  if (v0 >= 9)
    return 9;
  else
    return v0;
}

uint64_t sub_244811404(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  int *v4;
  unint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    sub_2447CEE34(0, v2, 0);
    result = v9;
    v4 = (int *)(a1 + 32);
    v5 = *(_QWORD *)(v9 + 16);
    do
    {
      v7 = *v4++;
      v6 = v7;
      v10 = result;
      v8 = *(_QWORD *)(result + 24);
      if (v5 >= v8 >> 1)
      {
        sub_2447CEE34(v8 > 1, v5 + 1, 1);
        result = v10;
      }
      *(_QWORD *)(result + 16) = v5 + 1;
      *(_DWORD *)(result + 4 * v5++ + 32) = v6;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_2448114C8(__int128 *a1, uint64_t a2)
{
  __swift_memcpy113_8(a2, a1);
  return a2;
}

uint64_t objectdestroy_32Tm()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for ErrorType()
{
  return &type metadata for ErrorType;
}

uint64_t _s20PreviewsFoundationOS26HumanReadableErrorSeverityOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_244811590 + 4 * byte_2448EFECF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2448115C4 + 4 * byte_2448EFECA[v4]))();
}

uint64_t sub_2448115C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2448115CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2448115D4);
  return result;
}

uint64_t sub_2448115E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2448115E8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2448115EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2448115F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UnderlyingErrorWrapper.Key()
{
  return &type metadata for UnderlyingErrorWrapper.Key;
}

uint64_t getEnumTagSinglePayload for RemoteHumanReadableError.Key(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for RemoteHumanReadableError.Key(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_2448116EC + 4 * byte_2448EFED9[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_244811720 + 4 * byte_2448EFED4[v4]))();
}

uint64_t sub_244811720(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_244811728(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x244811730);
  return result;
}

uint64_t sub_24481173C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x244811744);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_244811748(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244811750(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_24481175C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for RemoteHumanReadableError.Key()
{
  return &type metadata for RemoteHumanReadableError.Key;
}

unint64_t sub_244811778()
{
  unint64_t result;

  result = qword_25738C5D0;
  if (!qword_25738C5D0)
  {
    result = MEMORY[0x24951AC70](&unk_2448F07F0, &type metadata for RemoteHumanReadableError.Key);
    atomic_store(result, (unint64_t *)&qword_25738C5D0);
  }
  return result;
}

unint64_t sub_2448117C0()
{
  unint64_t result;

  result = qword_25738C5D8;
  if (!qword_25738C5D8)
  {
    result = MEMORY[0x24951AC70](&unk_2448F0890, &type metadata for UnderlyingErrorWrapper.Key);
    atomic_store(result, (unint64_t *)&qword_25738C5D8);
  }
  return result;
}

unint64_t sub_244811808()
{
  unint64_t result;

  result = qword_25738C608;
  if (!qword_25738C608)
  {
    result = MEMORY[0x24951AC70](&unk_2448F0940, &type metadata for ErrorType);
    atomic_store(result, (unint64_t *)&qword_25738C608);
  }
  return result;
}

void static ExecutionLane.any.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

double static ExecutionLane.main.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 1;
  *a1 = xmmword_2448ECE80;
  return result;
}

uint64_t static ExecutionLane.queue(label:qos:attributes:target:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  uint64_t v19;
  _QWORD *v20;
  os_unfair_lock_s *v21;
  uint64_t v22;
  uint64_t result;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;

  v28 = a2;
  v29 = a5;
  v26 = a3;
  v27 = a4;
  v30 = a1;
  v31 = a6;
  v6 = sub_2448EB40C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_2448EB3D0();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_2448EA734();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_244803860();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v26, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v27, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BEE5750], v6);
  v18 = v29;
  swift_bridgeObjectRetain();
  v19 = sub_2448EB430();
  if (qword_257389CA0 != -1)
    swift_once();
  v20 = (_QWORD *)((char *)off_25738DB00 + 16);
  v21 = (os_unfair_lock_s *)((char *)off_25738DB00 + 24);
  swift_retain();
  os_unfair_lock_lock(v21);
  sub_24483B130(v20, &v32);
  os_unfair_lock_unlock(v21);
  v22 = v32;
  swift_release();
  if (qword_257389C70 != -1)
    swift_once();
  v32 = v22;
  v33 = 0;
  result = sub_2448EB3F4();
  v24 = v31;
  *v31 = v19;
  v24[1] = v22;
  return result;
}

uint64_t ExecutionLane.execute(_:)(uint64_t (*a1)(void), uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v7;
  char v8;

  if (!*v2)
    return a1();
  v5 = v2[1];
  if (*v2 != 1)
  {
    sub_244803860();
    if (qword_257389C70 != -1)
      swift_once();
    sub_2448EB3E8();
    if ((v8 & 1) != 0 || v5 != v7)
      return sub_244811C48((uint64_t (*)(uint64_t))a1, a2);
    return a1();
  }
  if (objc_msgSend((id)objc_opt_self(), sel_isMainThread))
    return a1();
  return sub_244811C48((uint64_t (*)(uint64_t))a1, a2);
}

uint64_t ExecutionLane.isCurrentLane.getter()
{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  if (!*v0)
    return 1;
  if (*v0 == 1)
    return (uint64_t)objc_msgSend((id)objc_opt_self(), sel_isMainThread);
  v2 = v0[1];
  sub_244803860();
  if (qword_257389C70 != -1)
    swift_once();
  sub_2448EB3E8();
  return (v2 == v3) & ~v4;
}

uint64_t sub_244811C48(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  void **v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v18;
  _QWORD v19[2];
  uint64_t aBlock;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  void *v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;

  v5 = sub_2448EA704();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_2448EA734();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v2;
  if (!*v2)
    return a1(v11);
  v19[0] = v11;
  if (v14 == (void *)1)
  {
    sub_244803860();
    v15 = (void *)sub_2448EB418();
    v24 = a1;
    v25 = a2;
    aBlock = MEMORY[0x24BDAC760];
    v21 = 1107296256;
    v22 = sub_2447EB164;
    v23 = &block_descriptor_3;
    v16 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    sub_2448EA71C();
    aBlock = MEMORY[0x24BEE4AF8];
    sub_2447EB5DC();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
    sub_2448039A4();
    sub_2448EB6C4();
    MEMORY[0x249519C08](0, v13, v8, v16);
    _Block_release(v16);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return (*(uint64_t (**)(char *, _QWORD))(v10 + 8))(v13, v19[0]);
  }
  else
  {
    v24 = a1;
    v25 = a2;
    aBlock = MEMORY[0x24BDAC760];
    v21 = 1107296256;
    v22 = sub_2447EB164;
    v23 = &block_descriptor_3;
    v18 = _Block_copy(&aBlock);
    swift_retain();
    sub_24481240C(v14);
    sub_2448EA71C();
    v19[1] = MEMORY[0x24BEE4AF8];
    sub_2447EB5DC();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
    sub_2448039A4();
    sub_2448EB6C4();
    MEMORY[0x249519C08](0, v13, v8, v18);
    _Block_release(v18);
    sub_24481241C(v14);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, _QWORD))(v10 + 8))(v13, v19[0]);
    return swift_release();
  }
}

uint64_t sub_244811F10()
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(qword_25738C628);
  swift_allocObject();
  result = sub_2448EA6F8();
  qword_25738C610 = result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ExecutionLane(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  if (*(_QWORD *)a2 >= 2uLL)
  {
    v4 = *(_QWORD *)(a2 + 8);
    *a1 = v3;
    a1[1] = v4;
    v5 = v3;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  return a1;
}

void destroy for ExecutionLane(void **a1)
{
  void *v1;

  v1 = *a1;
  if ((unint64_t)v1 >= 2)

}

void **assignWithCopy for ExecutionLane(void **a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  id v7;

  v4 = *a1;
  v5 = *(void **)a2;
  if ((unint64_t)*a1 >= 2)
  {
    if ((unint64_t)v5 >= 2)
    {
      *a1 = v5;
      v7 = v5;

      a1[1] = *(void **)(a2 + 8);
      return a1;
    }
    sub_244812030((uint64_t)a1);
    goto LABEL_6;
  }
  if ((unint64_t)v5 < 2)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *a1 = v5;
  a1[1] = *(void **)(a2 + 8);
  v6 = v5;
  return a1;
}

uint64_t sub_244812030(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738C618);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void **assignWithTake for ExecutionLane(void **a1, void **a2)
{
  void *v4;

  v4 = *a1;
  if ((unint64_t)*a1 >= 2)
  {
    if ((unint64_t)*a2 >= 2)
    {
      *a1 = *a2;

      a1[1] = a2[1];
      return a1;
    }
    sub_244812030((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for ExecutionLane(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 2;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ExecutionLane(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = a2 - 2147483646;
    *(_QWORD *)(result + 8) = 0;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExecutionLane()
{
  return &type metadata for ExecutionLane;
}

uint64_t initializeBufferWithCopyOfBuffer for ExecutionLane.Lane(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    v5 = v3;
  }
  return a1;
}

void destroy for ExecutionLane.Lane(void **a1)
{
  void *v1;

  v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF)

}

uint64_t assignWithCopy for ExecutionLane.Lane(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  id v7;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  if (*(_QWORD *)a1 < 0xFFFFFFFFuLL)
  {
    if ((unint64_t)v5 >= 0xFFFFFFFF)
    {
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      v7 = v5;
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if ((unint64_t)v5 < 0xFFFFFFFF)
  {

    goto LABEL_7;
  }
  *(_QWORD *)a1 = v5;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for ExecutionLane.Lane(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  if (*(_QWORD *)a1 < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {

LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExecutionLane.Lane(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ExecutionLane.Lane(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExecutionLane.Lane()
{
  return &type metadata for ExecutionLane.Lane;
}

ValueMetadata *type metadata accessor for QueueIdentifier()
{
  return &type metadata for QueueIdentifier;
}

unint64_t sub_2448123B0()
{
  unint64_t result;

  result = qword_25738C620;
  if (!qword_25738C620)
  {
    result = MEMORY[0x24951AC70](&unk_2448F09D8, &type metadata for QueueIdentifier);
    atomic_store(result, (unint64_t *)&qword_25738C620);
  }
  return result;
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

id sub_24481240C(id result)
{
  if ((unint64_t)result >= 2)
    return result;
  return result;
}

void sub_24481241C(id a1)
{
  if ((unint64_t)a1 >= 2)

}

uint64_t AnalyticsHints.isSampleProject.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

PreviewsFoundationOS::AnalyticsHints __swiftcall AnalyticsHints.init(isSampleProject:)(PreviewsFoundationOS::AnalyticsHints isSampleProject)
{
  PreviewsFoundationOS::AnalyticsHints *v1;

  v1->isSampleProject = isSampleProject.isSampleProject;
  return isSampleProject;
}

uint64_t getEnumTagSinglePayload for AnalyticsHints(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AnalyticsHints(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_244812538 + 4 * byte_2448F0A45[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24481256C + 4 * byte_2448F0A40[v4]))();
}

uint64_t sub_24481256C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_244812574(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24481257CLL);
  return result;
}

uint64_t sub_244812588(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x244812590);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_244812594(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24481259C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsHints()
{
  return &type metadata for AnalyticsHints;
}

uint64_t (*UncheckedSendable.value.modify())()
{
  return nullsub_1;
}

uint64_t UncheckedSendable.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t UncheckedSendable.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t sub_2448125FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(_QWORD *)(a4 + a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v12 - v5;
  (*(void (**)(char *))(v7 + 16))((char *)&v12 - v5);
  v10 = type metadata accessor for UncheckedSendable(0, v4, v8, v9);
  return UncheckedSendable.wrappedValue.setter(v6, v10);
}

uint64_t _s20PreviewsFoundationOS17UncheckedSendableV5valuexvs_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

void (*UncheckedSendable.wrappedValue.modify(_QWORD *a1, uint64_t a2))(void **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  void (*v10)(void);

  v5 = malloc(0x30uLL);
  *a1 = v5;
  v6 = *(_QWORD *)(a2 + 16);
  *v5 = v2;
  v5[1] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[2] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[3] = malloc(v8);
  v9 = malloc(v8);
  v10 = *(void (**)(void))(v7 + 16);
  v5[4] = v9;
  v5[5] = v10;
  v10();
  return sub_24481272C;
}

void sub_24481272C(void **a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = (void *)v2[4];
    v5 = v2[2];
    v4 = (void *)v2[3];
    v7 = *v2;
    v6 = v2[1];
    ((void (*)(void *, void *, uint64_t))v2[5])(v4, v3, v6);
    (*(void (**)(uint64_t, void *, uint64_t))(v5 + 40))(v7, v4, v6);
    (*(void (**)(void *, uint64_t))(v5 + 8))(v3, v6);
  }
  else
  {
    v4 = (void *)v2[3];
    v3 = (void *)v2[4];
    (*(void (**)(_QWORD, void *, _QWORD))(v2[2] + 40))(*v2, v3, v2[1]);
  }
  free(v3);
  free(v4);
  free(v2);
}

uint64_t sub_2448127CC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for UncheckedSendable(0, *(_QWORD *)(a2 + a1 - 8), a2, a3);
  return UncheckedSendable.wrappedValue.getter(v5, a4);
}

uint64_t sub_244812808()
{
  return 8;
}

_QWORD *sub_244812814(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_244812820(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2448128D0 + 4 * byte_2448F0A80[(v7 - 1)]))();
}

void sub_244812920(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for UncheckedSendable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UncheckedSendable);
}

uint64_t CGFloat.init(_:)(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  int v3;
  _BYTE *v4;
  _QWORD v6[3];
  uint64_t v7;

  v7 = 0;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    sub_2448EB778();
    swift_bridgeObjectRelease();
    v3 = LOBYTE(v6[0]);
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    v6[0] = a1;
    v6[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    v3 = (a1 > 0x20u || ((0x100003E01uLL >> a1) & 1) == 0)
      && (v4 = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0
      && *v4 == 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((a1 & 0x1000000000000000) != 0)
      v2 = (_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v2 = (_BYTE *)sub_2448EB820();
    sub_244812E68(v2, (BOOL *)v6);
    v3 = LOBYTE(v6[0]);
    swift_bridgeObjectRelease();
  }
  if (v3)
    return v7;
  else
    return 0;
}

uint64_t sub_244812C14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];
  uint64_t v8;

  v8 = 0;
  v7[2] = &v8;
  v4 = sub_244812C94((void (*)(char *__return_ptr, _QWORD *))sub_244812E68, (uint64_t)v7, a1, a2);
  result = swift_bridgeObjectRelease();
  v6 = v8;
  if ((v4 & 1) == 0)
    v6 = 0;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 8) = (v4 & 1) == 0;
  return result;
}

uint64_t sub_244812C94(void (*a1)(char *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  char v7;
  char v9;
  _QWORD v10[2];
  char v11;

  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    sub_2448EB778();
    if (!v4)
      v7 = v11;
  }
  else if ((a4 & 0x2000000000000000) != 0)
  {
    v10[0] = a3;
    v10[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    a1(&v9, v10);
    if (!v4)
      v7 = v9;
  }
  else
  {
    if ((a3 & 0x1000000000000000) != 0)
      v6 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v6 = sub_2448EB820();
    a1((char *)v10, (_QWORD *)v6);
    if (!v4)
      v7 = v10[0];
  }
  return v7 & 1;
}

_BYTE *sub_244812D70@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t sub_244812DD8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char v4;
  uint64_t var2;

  if (a1)
  {
    a3(&var2);
    if (!v3)
      v4 = var2;
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, _QWORD, _QWORD))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3)
      v4 = BYTE1(var2);
  }
  return v4 & 1;
}

_QWORD *sub_244812E2C@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr)@<X2>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = a1(&v5);
  if (!v2)
    *a2 = v5;
  return result;
}

_BYTE *sub_244812E68@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_244812EC4(a1, a2);
}

unint64_t sub_244812E80()
{
  unint64_t result;

  result = qword_25738C6B0;
  if (!qword_25738C6B0)
  {
    result = MEMORY[0x24951AC70](MEMORY[0x24BEE50F8], MEMORY[0x24BEE50B0]);
    atomic_store(result, (unint64_t *)&qword_25738C6B0);
  }
  return result;
}

_BYTE *sub_244812EC4@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t OSAllocatedUnfairLock.init(value:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_24481320C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return v4;
}

void OSAllocatedUnfairLock.syncRead<A>(callsite:_:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  os_unfair_lock_s *v6;

  v5 = a4 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)a4 + 16);
  v6 = (os_unfair_lock_s *)(a4 + ((*(unsigned int *)(*(_QWORD *)a4 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  a2(v5);
  os_unfair_lock_unlock(v6);
}

_BYTE *sub_244813004@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_244813010@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_244813024(a1, a2);
}

uint64_t sub_244813024@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_BYTE *)(a1 + 64);
  v11 = *(_BYTE *)(a1 + 65);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = v8;
  *(_QWORD *)(a2 + 56) = v9;
  *(_BYTE *)(a2 + 64) = v10;
  *(_BYTE *)(a2 + 65) = v11;
  return sub_2447E6B74(v3, v2, v4, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_24481308C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_2448130BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = v2;
  return swift_bridgeObjectRetain();
}

void OSAllocatedUnfairLock.syncWrite<A>(callsite:_:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  os_unfair_lock_s *v6;

  v5 = a4 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)a4 + 16);
  v6 = (os_unfair_lock_s *)(a4 + ((*(unsigned int *)(*(_QWORD *)a4 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  a2(v5);
  os_unfair_lock_unlock(v6);
}

void sub_244813170(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t *v3;

  OSAllocatedUnfairLock.syncRead<A>(callsite:_:)(a1, a2, a3, *v3);
}

void sub_244813188(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t *v3;

  OSAllocatedUnfairLock.syncWrite<A>(callsite:_:)(a1, a2, a3, *v3);
}

uint64_t sub_2448131A0()
{
  type metadata accessor for os_unfair_lock_s(255);
  sub_2448EB814();
  return sub_2448EB808();
}

uint64_t sub_244813210@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *a1;
  *(_DWORD *)((char *)a1 + ((*(unsigned int *)(*a1 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + *MEMORY[0x24BEE27A8]) - 8) + 16))(a2, v3);
}

id sub_244813268()
{
  id v0;
  id result;

  v0 = objc_allocWithZone(MEMORY[0x24BDD1798]);
  result = sub_2448A3104(0xD000000000000010, 0x80000002448FA4F0, 16);
  qword_25738C6D8 = (uint64_t)result;
  return result;
}

id sub_24481331C()
{
  id v0;
  id result;

  v0 = objc_allocWithZone(MEMORY[0x24BDD1798]);
  result = sub_2448A3104(0x203A5C726F727265, 0xED000024292A2E28, 16);
  qword_25738C6E0 = (uint64_t)result;
  return result;
}

uint64_t String.firstFileBuildErrorMessage.getter(uint64_t a1, uint64_t a2)
{
  return sub_244813410(a1, a2, &qword_257389C78, (void **)&qword_25738C6D8);
}

uint64_t String.firstBuildErrorMessage.getter(uint64_t a1, uint64_t a2)
{
  return sub_244813410(a1, a2, &qword_257389C80, (void **)&qword_25738C6E0);
}

uint64_t sub_244813410(uint64_t a1, uint64_t a2, _QWORD *a3, void **a4)
{
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;

  if (*a3 == -1)
  {
    v5 = *a4;
    if (!*a4)
      return 0;
  }
  else
  {
    swift_once();
    v5 = *a4;
    if (!*a4)
      return 0;
  }
  v6 = v5;
  v7 = (void *)sub_2448EAA70();
  v8 = objc_msgSend(v6, sel_firstMatchInString_options_range_, v7, 0, 0, sub_2448EAB78());

  if (!v8)
  {

    return 0;
  }
  v9 = objc_msgSend(v8, sel_rangeAtIndex_, 1);
  v11 = v10;

  v12 = (void *)sub_2448EAA70();
  v13 = objc_msgSend(v12, sel_substringWithRange_, v9, v11);

  sub_2448EAA94();
  v14 = sub_2448EAC98();

  return v14;
}

Swift::Void __swiftcall NSRunLoop.spin(count:)(Swift::Int count)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  Swift::Int v9;
  void *v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;

  v2 = v1;
  v4 = sub_2448EA500();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (count >= 1)
  {
    v8 = *MEMORY[0x24BDBCA90];
    v9 = 1;
    do
    {
      sub_2448EA4DC();
      v10 = (void *)sub_2448EA4C4();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      v11 = objc_msgSend(v2, sel_runMode_beforeDate_, v8, v10);

      if (v11)
        v12 = v9 < count;
      else
        v12 = 0;
      ++v9;
    }
    while (v12);
  }
}

uint64_t NSRunLoop.spin(timeout:until:)(uint64_t a1, char a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  id v17;
  void *v18;
  unsigned int v19;
  char v20;
  uint64_t (*v22)(void);
  uint64_t v23;

  v22 = a3;
  v23 = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738C6E8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2448EA500();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v22 - v13;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
    goto LABEL_5;
  }
  sub_2448EA4F4();
  sub_2448EA4B8();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
LABEL_5:
    sub_2448EA4AC();
    sub_2448138A0((uint64_t)v7);
    goto LABEL_6;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
LABEL_6:
  v15 = (void *)objc_opt_self();
  v16 = *MEMORY[0x24BDBCA90];
  do
  {
    v17 = objc_msgSend(v15, sel_currentRunLoop, v22, v23);
    v18 = (void *)sub_2448EA4C4();
    v19 = objc_msgSend(v17, sel_runMode_beforeDate_, v16, v18);

    if (!v19)
      break;
    if ((v22() & 1) != 0)
      break;
    sub_2448EA4F4();
    v20 = sub_2448EA4D0();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  while ((v20 & 1) == 0);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
}

uint64_t sub_2448138A0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738C6E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Unreachable.init(message:diagnostics:callsite:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t result;

  result = sub_244823F6C();
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

uint64_t Unreachable.message.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Unreachable.additionalDiagnostics.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Unreachable.init(_:diagnostics:file:line:column:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t result;

  result = sub_244823F6C();
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

unint64_t Unreachable.lowValueTitle.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t Unreachable.additionalInfo.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Unreachable.isPotentialCrash.getter()
{
  return 0;
}

unint64_t sub_244813A7C()
{
  return 0xD00000000000001FLL;
}

uint64_t static Result.unreachable(_:file:line:column:function:)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;

  v3 = a1();
  v5 = v4;
  sub_2447D303C();
  v6 = swift_allocError();
  v8 = v7;
  sub_244823F6C();
  *v8 = v3;
  v8[1] = v5;
  v8[2] = 0;
  v8[3] = 0;
  *a2 = v6;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  sub_2448EBD48();
  return swift_storeEnumTagMultiPayload();
}

unint64_t sub_244813B98(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_244813BC4();
  result = sub_244813C08();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_244813BC4()
{
  unint64_t result;

  result = qword_25738C6F0;
  if (!qword_25738C6F0)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for Unreachable, &type metadata for Unreachable);
    atomic_store(result, (unint64_t *)&qword_25738C6F0);
  }
  return result;
}

unint64_t sub_244813C08()
{
  unint64_t result;

  result = qword_25738C6F8[0];
  if (!qword_25738C6F8[0])
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for Unreachable, &type metadata for Unreachable);
    atomic_store(result, qword_25738C6F8);
  }
  return result;
}

ValueMetadata *type metadata accessor for Unreachable()
{
  return &type metadata for Unreachable;
}

uint64_t CountedSet.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  swift_getTupleTypeMetadata2();
  sub_2448EAE54();
  result = sub_2448EA848();
  *a1 = result;
  return result;
}

uint64_t CountedSet.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;

  v8 = *(_QWORD *)(a2 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](a1);
  swift_getTupleTypeMetadata2();
  sub_2448EAE54();
  v10 = sub_2448EA848();
  v18 = v10;
  if (MEMORY[0x2495196A4](a1, a2))
  {
    v11 = 0;
    while (1)
    {
      v12 = sub_2448EAE6C();
      sub_2448EAE18();
      if ((v12 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))((char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v11, a2);
        v14 = v11 + 1;
        if (__OFADD__(v11, 1))
          goto LABEL_10;
      }
      else
      {
        result = sub_2448EB7F0();
        if (v9 != 8)
        {
          __break(1u);
          return result;
        }
        v17 = result;
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(&v17 - 2, &v17, a2);
        swift_unknownObjectRelease();
        v14 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_10:
          __break(1u);
LABEL_11:
          result = swift_bridgeObjectRelease();
          v10 = v18;
          goto LABEL_13;
        }
      }
      v15 = type metadata accessor for CountedSet(0, a2, a3, v13);
      CountedSet.insert(_:)((uint64_t)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v15);
      (*(void (**)(char *, uint64_t))(v8 + 8))((char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
      ++v11;
      if (v14 == MEMORY[0x2495196A4](a1, a2))
        goto LABEL_11;
    }
  }
  result = swift_bridgeObjectRelease();
LABEL_13:
  *a4 = v10;
  return result;
}

uint64_t CountedSet.insert(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char v13;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x2495190C8](&v12, v6, *v2, v4, MEMORY[0x24BEE1768], *(_QWORD *)(v9 + 24));
  if (v13)
    v10 = 0;
  else
    v10 = v12;
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  if (__OFADD__(v10, 1))
  {
    __break(1u);
  }
  else
  {
    v12 = v10 + 1;
    v13 = 0;
    sub_2448EA8B4();
    return sub_2448EA8F0();
  }
  return result;
}

uint64_t CountedSet.remove(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  char v14;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x2495190C8](&v13, v6, *v2, v4, MEMORY[0x24BEE1768], *(_QWORD *)(v9 + 24));
  v10 = v13;
  v11 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  if ((v11 & 1) != 0 || v10 < 2)
  {
    v13 = 0;
    v14 = 1;
  }
  else
  {
    v13 = v10 - 1;
    v14 = 0;
  }
  sub_2448EA8B4();
  return sub_2448EA8F0();
}

uint64_t CountedSet.count(of:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  char v5;

  MEMORY[0x2495190C8](&v4, a1, *v2, *(_QWORD *)(a2 + 16), MEMORY[0x24BEE1768], *(_QWORD *)(a2 + 24));
  if (v5)
    return 0;
  else
    return v4;
}

uint64_t CountedSet.contains(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  unsigned __int8 v5;

  MEMORY[0x2495190C8](&v4, a1, *v2, *(_QWORD *)(a2 + 16), MEMORY[0x24BEE1768], *(_QWORD *)(a2 + 24));
  return (v4 > 0) & ~v5;
}

uint64_t CountedSet.totalCount.getter()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_2448EA8B4();
  swift_bridgeObjectRetain();
  MEMORY[0x24951AC70](MEMORY[0x24BEE04D8], v0);
  sub_2448EAD4C();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t CountedSet.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_2448EA8C0();
  return swift_bridgeObjectRelease();
}

uint64_t static CountedSet.== infix(_:_:)()
{
  return sub_2448EA8CC();
}

uint64_t CountedSet.hashValue.getter()
{
  sub_2448EBD00();
  CountedSet.hash(into:)();
  return sub_2448EBD3C();
}

uint64_t sub_244814294()
{
  sub_2448EBD00();
  CountedSet.hash(into:)();
  return sub_2448EBD3C();
}

uint64_t sub_2448142D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return CountedSet.init(arrayLiteral:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t sub_2448142E0()
{
  return static CountedSet.== infix(_:_:)();
}

uint64_t type metadata accessor for CountedSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CountedSet);
}

uint64_t sub_2448142F8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v5 = *a1;
  result = swift_getTupleTypeMetadata2();
  v7 = *(_QWORD *)(a2 + *(int *)(result + 48));
  v8 = __OFADD__(v5, v7);
  v9 = v5 + v7;
  if (v8)
    __break(1u);
  else
    *a3 = v9;
  return result;
}

void sub_244814364()
{
  JUMPOUT(0x24951AC70);
}

uint64_t sub_244814374(unint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v17 = a1 >> 62;
  if (a1 >> 62)
    goto LABEL_42;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v18 = MEMORY[0x24BEE4AF8];
    result = sub_2447CEF08(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
    if (!v2)
      break;
    v4 = a1 & 0xFFFFFFFFFFFFFF8;
    if (v17)
    {
      swift_bridgeObjectRetain();
      v16 = sub_2448EBA18();
    }
    else
    {
      v16 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    v11 = 0;
    v5 = a1 & 0xC000000000000001;
    while ((v2 & ~(v2 >> 63)) != v11)
    {
      if (v16 == v11)
        goto LABEL_40;
      if (v5)
      {
        v12 = MEMORY[0x249519FE0](v11, a1);
      }
      else
      {
        if (v11 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_41;
        v12 = *(_QWORD *)(a1 + 8 * v11 + 32);
        swift_retain();
      }
      v14 = *(_QWORD *)(v18 + 16);
      v13 = *(_QWORD *)(v18 + 24);
      if (v14 >= v13 >> 1)
        sub_2447CEF08(v13 > 1, v14 + 1, 1);
      ++v11;
      *(_QWORD *)(v18 + 16) = v14 + 1;
      v15 = v18 + 40 * v14;
      *(_QWORD *)(v15 + 32) = v12;
      *(_QWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_BYTE *)(v15 + 64) = -1;
      if (v2 == v11)
        goto LABEL_8;
    }
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    swift_bridgeObjectRetain();
    v2 = sub_2448EBA18();
    swift_bridgeObjectRelease();
  }
  v4 = a1 & 0xFFFFFFFFFFFFFF8;
  v5 = a1 & 0xC000000000000001;
  swift_bridgeObjectRetain();
LABEL_8:
  if (v17)
  {
    while (1)
    {
      swift_bridgeObjectRetain();
      v6 = sub_2448EBA18();
      swift_bridgeObjectRelease();
      if (v2 == v6)
        break;
LABEL_12:
      if (v5)
      {
        v7 = MEMORY[0x249519FE0](v2, a1);
        if (__OFADD__(v2, 1))
          goto LABEL_38;
      }
      else
      {
        if (v2 < 0)
        {
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
        if ((unint64_t)v2 >= *(_QWORD *)(v4 + 16))
          goto LABEL_37;
        v7 = *(_QWORD *)(a1 + 8 * v2 + 32);
        swift_retain();
        if (__OFADD__(v2, 1))
          goto LABEL_38;
      }
      v9 = *(_QWORD *)(v18 + 16);
      v8 = *(_QWORD *)(v18 + 24);
      if (v9 >= v8 >> 1)
        sub_2447CEF08(v8 > 1, v9 + 1, 1);
      *(_QWORD *)(v18 + 16) = v9 + 1;
      v10 = v18 + 40 * v9;
      *(_QWORD *)(v10 + 32) = v7;
      *(_QWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_BYTE *)(v10 + 64) = -1;
      ++v2;
      if (!v17)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    if (v2 != *(_QWORD *)(v4 + 16))
      goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t sub_244814648(unint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v17 = a1 >> 62;
  if (a1 >> 62)
    goto LABEL_42;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v18 = MEMORY[0x24BEE4AF8];
    result = sub_2447CEF78(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
    if (!v2)
      break;
    v4 = a1 & 0xFFFFFFFFFFFFFF8;
    if (v17)
    {
      swift_bridgeObjectRetain();
      v16 = sub_2448EBA18();
    }
    else
    {
      v16 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    v11 = 0;
    v5 = a1 & 0xC000000000000001;
    while ((v2 & ~(v2 >> 63)) != v11)
    {
      if (v16 == v11)
        goto LABEL_40;
      if (v5)
      {
        v12 = MEMORY[0x249519FE0](v11, a1);
      }
      else
      {
        if (v11 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_41;
        v12 = *(_QWORD *)(a1 + 8 * v11 + 32);
        swift_retain();
      }
      v14 = *(_QWORD *)(v18 + 16);
      v13 = *(_QWORD *)(v18 + 24);
      if (v14 >= v13 >> 1)
        sub_2447CEF78(v13 > 1, v14 + 1, 1);
      *(_QWORD *)(v18 + 16) = v14 + 1;
      v15 = v18 + 32 * v14;
      *(_QWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      ++v11;
      *(_QWORD *)(v15 + 32) = v12;
      *(_BYTE *)(v15 + 56) = -1;
      if (v2 == v11)
        goto LABEL_8;
    }
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    swift_bridgeObjectRetain();
    v2 = sub_2448EBA18();
    swift_bridgeObjectRelease();
  }
  v4 = a1 & 0xFFFFFFFFFFFFFF8;
  v5 = a1 & 0xC000000000000001;
  swift_bridgeObjectRetain();
LABEL_8:
  if (v17)
  {
    while (1)
    {
      swift_bridgeObjectRetain();
      v6 = sub_2448EBA18();
      swift_bridgeObjectRelease();
      if (v2 == v6)
        break;
LABEL_12:
      if (v5)
      {
        v7 = MEMORY[0x249519FE0](v2, a1);
        if (__OFADD__(v2, 1))
          goto LABEL_38;
      }
      else
      {
        if (v2 < 0)
        {
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
        if ((unint64_t)v2 >= *(_QWORD *)(v4 + 16))
          goto LABEL_37;
        v7 = *(_QWORD *)(a1 + 8 * v2 + 32);
        swift_retain();
        if (__OFADD__(v2, 1))
          goto LABEL_38;
      }
      v9 = *(_QWORD *)(v18 + 16);
      v8 = *(_QWORD *)(v18 + 24);
      if (v9 >= v8 >> 1)
        sub_2447CEF78(v8 > 1, v9 + 1, 1);
      *(_QWORD *)(v18 + 16) = v9 + 1;
      v10 = v18 + 32 * v9;
      *(_QWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 32) = v7;
      *(_BYTE *)(v10 + 56) = -1;
      ++v2;
      if (!v17)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    if (v2 != *(_QWORD *)(v4 + 16))
      goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t Sequence.traverse<A>(dsoHandle:file:line:column:function:andAccumulateErrors:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, unsigned __int8 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD v15[2];
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v15[0] = a2;
  v15[1] = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  v19 = a7;
  v20 = a8;
  v21 = a9;
  return sub_244814C24((uint64_t)v15, a10, a11, a12, a13, a14);
}

void sub_244814974(_OWORD *a1, char a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int16 v13;

  if (a3 >> 62)
  {
    swift_bridgeObjectRetain_n();
    if (sub_2448EBA18())
      goto LABEL_3;
LABEL_7:
    swift_bridgeObjectRelease_n();
    v9 = MEMORY[0x24BEE4AF8];
    v10 = 0u;
    v11 = 0u;
    v12 = 0u;
    v13 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738C880);
    swift_allocObject();
    sub_2447D1D84(a1);
    swift_retain();
    sub_2447D2324((uint64_t)&v9);
    swift_release();
    return;
  }
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v6)
    goto LABEL_7;
LABEL_3:
  if ((a3 & 0xC000000000000001) != 0)
  {
    v7 = MEMORY[0x249519FE0](0, a3);
  }
  else
  {
    v7 = *(_QWORD *)(a3 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738C888);
  v8 = swift_allocObject();
  sub_244815114(a1, a2 & 1, a3, v7, v8);
}

void sub_244814ACC(_OWORD *a1, char a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int16 v13;

  if (a3 >> 62)
  {
    swift_bridgeObjectRetain_n();
    if (sub_2448EBA18())
      goto LABEL_3;
LABEL_7:
    swift_bridgeObjectRelease_n();
    v9 = MEMORY[0x24BEE4AF8];
    v10 = 0u;
    v11 = 0u;
    v12 = 0u;
    v13 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738C8A0);
    swift_allocObject();
    sub_2447D1F08(a1);
    swift_retain();
    sub_2447D2354((uint64_t)&v9);
    swift_release();
    return;
  }
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v6)
    goto LABEL_7;
LABEL_3:
  if ((a3 & 0xC000000000000001) != 0)
  {
    v7 = MEMORY[0x249519FE0](0, a3);
  }
  else
  {
    v7 = *(_QWORD *)(a3 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738C8A8);
  v8 = swift_allocObject();
  sub_24481566C(a1, a2 & 1, a3, v7, v8);
}

uint64_t sub_244814C24(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;

  v38 = a4;
  v47 = a6;
  v37 = a3;
  v36 = a2;
  v8 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = v11;
  v14 = type metadata accessor for Inhabited(255, v13, v11, v12);
  v15 = sub_2448EB508();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v35 - v18;
  v20 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v35 - v21;
  v23 = *(_QWORD *)(a1 + 8);
  v40 = *(_QWORD *)a1;
  v41 = v23;
  v42 = *(unsigned __int8 *)(a1 + 16);
  v24 = *(_QWORD *)(a1 + 32);
  v43 = *(_QWORD *)(a1 + 24);
  v44 = v24;
  v25 = *(_QWORD *)(a1 + 48);
  v45 = *(_QWORD *)(a1 + 40);
  v46 = v25;
  v26 = *(_BYTE *)(a1 + 56);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v39, a5);
  v27 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, v14);
  PredicatedWrapper.init(_:)((uint64_t)v10, v14, v27, (uint64_t)v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, v14) == 1)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    v28 = sub_2448EAEE4();
    type metadata accessor for Future(0, v28, v29, v30);
    v50 = v40;
    v51 = v41;
    v52 = v42;
    v53 = v43;
    v54 = v44;
    v55 = v45;
    v56 = v46;
    v57 = v26;
    v48 = sub_2448EAE54();
    v49 = 0;
    v33 = sub_2447D1358(&v50, (uint64_t)&v48, v31, v32);
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v19, v14);
    type metadata accessor for TraverseFuture(0, a5, v47, v35);
    v50 = v40;
    v51 = v41;
    v52 = v42;
    v53 = v43;
    v54 = v44;
    v55 = v45;
    v56 = v46;
    v57 = v26;
    swift_allocObject();
    v33 = sub_244817854(&v50, v36 & 1, (uint64_t)v22, v37, v38);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v14);
  }
  return v33;
}

uint64_t Sequence.invert<A>(dsoHandle:file:line:column:function:andAccumulateErrors:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, unsigned __int8 a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return sub_244817D08(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_244814F24(__int128 *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5;
  char v6;
  _QWORD v8[6];
  __int128 v9;
  char v10;
  __int128 v11;
  __int128 v12;
  char v13;

  v5 = *((_BYTE *)a1 + 16);
  v6 = *((_BYTE *)a1 + 56);
  v9 = *a1;
  v10 = v5;
  v11 = *(__int128 *)((char *)a1 + 24);
  v12 = *(__int128 *)((char *)a1 + 40);
  v13 = v6;
  v8[2] = a3;
  v8[3] = a4;
  v8[4] = a5;
  return sub_244814C24((uint64_t)&v9, a2, (uint64_t)sub_24481829C, (uint64_t)v8, a3, a4);
}

uint64_t static Future.inverting<A>(dsoHandle:file:line:column:function:accumulateErrors:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, unsigned __int8 a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  __int128 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  *(_QWORD *)&v15 = a2;
  *((_QWORD *)&v15 + 1) = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  v19 = a7;
  v20 = a8;
  v21 = a9;
  return sub_244814F24(&v15, a10, a12, *(_QWORD *)(v13 + 80), a13);
}

uint64_t static Future.inverting(dsoHandle:file:line:column:function:accumulateErrors:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, unsigned __int8 a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v23 = a11;
  *(_QWORD *)&v16 = a2;
  *((_QWORD *)&v16 + 1) = a3;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  v20 = a7;
  v21 = a8;
  v22 = a9;
  v12 = *(_QWORD *)(v11 + 80);
  type metadata accessor for Future(255, v12, a3, a4);
  v13 = sub_2448EAEE4();
  v14 = MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v13);
  return sub_244814F24(&v16, a10, v13, v12, v14);
}

uint64_t sub_244815084@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t **a5@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v7 = *a1;
  *a5 = a1;
  v8 = (char *)a5
     + *(int *)(type metadata accessor for TraverseFuture.Activity.Fiber(0, a3, *(_QWORD *)(v7 + 80), a4) + 44);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  sub_2448EBD48();
  v9 = sub_2448EB508();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8, a2, v9);
}

void sub_244815114(_OWORD *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  _QWORD *v21;
  os_unfair_lock_s *v22;
  unsigned int v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  os_unfair_lock_s *v33;
  __int16 v34;
  int v35;
  id v36;
  void *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  __int16 v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned __int8 v49;
  unsigned __int8 *v50;
  uint64_t v51;
  void *v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  id v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int16 v64;
  uint64_t v65[2];
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;

  swift_retain();
  v8 = swift_bridgeObjectRetain();
  v9 = sub_244814374(v8);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738C890);
  v10 = swift_allocObject();
  *(_DWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(a5 + 104) = v10;
  *(_BYTE *)(a5 + 112) = a2;
  swift_bridgeObjectRetain();
  swift_release();
  v11 = sub_2447D1D84(a1);
  v45 = *(_QWORD *)(v9 + 16);
  if (v45)
  {
    swift_retain();
    v12 = 0;
    v13 = (unsigned __int8 *)(v9 + 64);
    v46 = v11;
    while (1)
    {
      v16 = *((_QWORD *)v13 - 4);
      v15 = (void *)*((_QWORD *)v13 - 3);
      v17 = v11;
      v18 = *((_QWORD *)v13 - 2);
      v55 = *((_QWORD *)v13 - 1);
      v50 = v13;
      v19 = *v13;
      v20 = swift_allocObject();
      *(_QWORD *)(v20 + 16) = v17;
      *(_QWORD *)(v20 + 24) = v12;
      v54 = v12;
      v21 = (_QWORD *)swift_allocObject();
      v21[2] = 0;
      v21[3] = 0;
      v21[4] = sub_244817EF4;
      v21[5] = v20;
      v22 = *(os_unfair_lock_s **)(v16 + 88);
      swift_retain_n();
      swift_retain_n();
      swift_retain();
      v51 = v18;
      v52 = v15;
      v49 = v19;
      sub_244817F40(v15, v18, v55, v19);
      swift_retain();
      os_unfair_lock_lock(v22 + 25);
      sub_2448E1F10((uint64_t)&v22[4], (uint64_t)sub_244817F2C, (uint64_t)v21, (uint64_t)&v57);
      os_unfair_lock_unlock(v22 + 25);
      swift_release();
      v23 = HIBYTE(v64);
      v11 = v46;
      if (v23 <= 0xFE)
        break;
LABEL_13:
      swift_release();
      swift_release();
      swift_release_n();
      v32 = (_QWORD *)swift_allocObject();
      v32[2] = 0;
      v32[3] = 0;
      v32[4] = sub_244817F68;
      v32[5] = v11;
      v33 = *(os_unfair_lock_s **)(v16 + 88);
      swift_retain_n();
      swift_retain();
      os_unfair_lock_lock(v33 + 25);
      sub_2448E1F10((uint64_t)&v33[4], (uint64_t)sub_244817FA4, (uint64_t)v32, (uint64_t)&v57);
      os_unfair_lock_unlock(v33 + 25);
      swift_release();
      v34 = v64;
      v14 = v54;
      if (HIBYTE(v64) <= 0xFEu)
      {
        v36 = v57;
        v35 = v58;
        v37 = v59;
        v38 = v60;
        v40 = v61;
        v39 = v62;
        v41 = v63;
        if (v64 >= 0x200u)
        {
          v65[0] = (uint64_t)v57;
          v65[1] = v58;
          v66 = (char)v59;
          v67 = v60;
          v68 = v61;
          v69 = v62;
          v70 = v63;
          v71 = v64;
          v48 = v58;
          swift_retain();
          sub_24481618C(v65);
          v11 = v46;
          swift_release();
          v35 = v48;
        }
        sub_244818040(v36, v35, v37, v38, v40, v39, v41, v34);
        v14 = v54;
      }
      v12 = v14 + 1;
      v13 = v50 + 40;
      swift_release();
      swift_release();
      swift_release_n();
      sub_244818018(v52, v51, v55, v49);
      if (v45 == v12)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        return;
      }
    }
    v25 = v57;
    v24 = v58;
    v26 = v59;
    v53 = v60;
    v47 = v61;
    v43 = v63;
    v44 = v62;
    v42 = v64;
    if (v23)
    {
      if (v23 != 1)
      {
LABEL_12:
        sub_244818040(v25, v24, v26, v53, v47, v44, v43, v42);
        sub_244818040(v25, v24, v26, v53, v47, v44, v43, v42);
        goto LABEL_13;
      }
      v56 = 1;
      v27 = v57;
      v28 = v25;
      v29 = 0;
      v30 = 0;
    }
    else
    {
      v56 = 0;
      swift_bridgeObjectRetain_n();
      v29 = (uint64_t)v26;
      v30 = v24;
    }
    if (v56 != 255)
    {
      v31 = v29;
      swift_retain();
      sub_244817F40(v25, v30, v31, v56);
      sub_244815C64(v54, v25, v30, v31, v56 & 1);
      v11 = v46;
      sub_244818018(v25, v30, v31, v56);
      swift_release();
      sub_244818018(v25, v30, v31, v56);
    }
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
}

void sub_24481566C(_OWORD *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  _QWORD *v19;
  os_unfair_lock_s *v20;
  __int16 v21;
  unsigned int v22;
  uint64_t v23;
  id v24;
  void *v25;
  int v26;
  id v27;
  id v28;
  uint64_t v29;
  _QWORD *v30;
  os_unfair_lock_s *v31;
  __int16 v32;
  id v33;
  void *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  unsigned __int8 *v47;
  unsigned __int8 v48;
  uint64_t v49;
  void *v50;
  unint64_t v51;
  uint64_t v52;
  unsigned __int8 v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int16 v61;
  uint64_t v62[2];
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;

  swift_retain();
  v8 = swift_bridgeObjectRetain();
  v9 = sub_244814648(v8);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(qword_25738C8B0);
  v10 = swift_allocObject();
  *(_DWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(a5 + 104) = v10;
  *(_BYTE *)(a5 + 112) = a2;
  swift_bridgeObjectRetain();
  swift_release();
  v11 = sub_2447D1F08(a1);
  v43 = *(_QWORD *)(v9 + 16);
  if (v43)
  {
    swift_retain();
    v12 = 0;
    v13 = (unsigned __int8 *)(v9 + 56);
    v44 = v11;
    while (1)
    {
      v47 = v13;
      v15 = *((_QWORD *)v13 - 3);
      v14 = (void *)*((_QWORD *)v13 - 2);
      v16 = *((_QWORD *)v13 - 1);
      v17 = *v13;
      v18 = swift_allocObject();
      *(_QWORD *)(v18 + 16) = v11;
      *(_QWORD *)(v18 + 24) = v12;
      v51 = v12;
      v19 = (_QWORD *)swift_allocObject();
      v19[2] = 0;
      v19[3] = 0;
      v19[4] = sub_244818130;
      v19[5] = v18;
      v20 = *(os_unfair_lock_s **)(v15 + 88);
      swift_retain_n();
      swift_retain_n();
      v52 = v15;
      swift_retain();
      v49 = v16;
      v50 = v14;
      v48 = v17;
      sub_244818178(v14, v16, v17);
      swift_retain();
      os_unfair_lock_lock(v20 + 25);
      sub_2448E20D8((uint64_t)&v20[4], (uint64_t)sub_244818164, (uint64_t)v19, (uint64_t)&v54);
      os_unfair_lock_unlock(v20 + 25);
      swift_release();
      v21 = v61;
      v22 = HIBYTE(v61);
      v23 = v15;
      if (v22 <= 0xFE)
        break;
LABEL_13:
      swift_release();
      v11 = v44;
      swift_release();
      swift_release_n();
      v30 = (_QWORD *)swift_allocObject();
      v30[2] = 0;
      v30[3] = 0;
      v30[4] = sub_2448181A0;
      v30[5] = v44;
      v31 = *(os_unfair_lock_s **)(v23 + 88);
      swift_retain_n();
      swift_retain();
      os_unfair_lock_lock(v31 + 25);
      sub_2448E20D8((uint64_t)&v31[4], (uint64_t)sub_244818210, (uint64_t)v30, (uint64_t)&v54);
      os_unfair_lock_unlock(v31 + 25);
      swift_release();
      v32 = v61;
      if (HIBYTE(v61) <= 0xFEu)
      {
        v33 = v54;
        v34 = (void *)v55;
        v35 = v56;
        v36 = v57;
        v38 = v58;
        v37 = v59;
        v39 = v60;
        if (v61 >= 0x200u)
        {
          v62[0] = (uint64_t)v54;
          v62[1] = v55;
          v63 = v56;
          v64 = v57;
          v65 = v58;
          v66 = v59;
          v67 = v60;
          v68 = v61;
          v46 = v56;
          swift_retain();
          sub_244816338(v62);
          swift_release();
          v35 = v46;
        }
        sub_24481824C(v33, v34, v35, v36, v38, v37, v39, v32);
        v11 = v44;
      }
      v12 = v51 + 1;
      v13 = v47 + 32;
      swift_release();
      swift_release();
      swift_release_n();
      sub_244818224(v50, v49, v48);
      if (v43 == v51 + 1)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        return;
      }
    }
    v24 = v54;
    v25 = (void *)v55;
    v26 = v56;
    v45 = v57;
    v41 = v59;
    v42 = v58;
    v40 = v60;
    if (v22)
    {
      if (v22 != 1)
      {
LABEL_12:
        sub_24481824C(v24, v25, v26, v45, v42, v41, v40, v21);
        v23 = v52;
        sub_24481824C(v24, v25, v26, v45, v42, v41, v40, v21);
        goto LABEL_13;
      }
      v53 = 1;
      v27 = v54;
      v28 = v24;
      v29 = 0;
    }
    else
    {
      v53 = 0;
      swift_bridgeObjectRetain_n();
      v29 = (uint64_t)v25;
    }
    if (v53 != 255)
    {
      swift_retain();
      sub_244818178(v24, v29, v53);
      sub_244815D84(v51, v24, v29, v53 & 1);
      sub_244818224(v24, v29, v53);
      swift_release();
      sub_244818224(v24, v29, v53);
    }
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t sub_244815B64@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t **a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v16;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v10 = sub_2448EBD48();
  v11 = sub_2448EB508();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v16 - v12;
  v14 = (uint64_t *)a2(a1);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v13, 1, 1, v10);
  return sub_244815084(v14, (uint64_t)v13, a3, a4, a5);
}

void sub_244815C64(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21;
  char v22;

  v10 = a5 & 1;
  v11 = *(_QWORD *)(v5 + 104);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 24));
  v12 = sub_244816770((_QWORD **)(v11 + 16), a1, a2, a3, a4, v10);
  os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 24));
  swift_release();
  if (v12)
  {
    if (*(_BYTE *)(v5 + 112) == 1)
      v13 = sub_244816EF4(v12);
    else
      v13 = sub_244817454(v12);
    v15 = v13;
    v16 = v14;
    swift_bridgeObjectRelease();
    v17 = v15;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0;
    v22 = v16 & 1;
    sub_2447D7828(v15, v16 & 1);
    sub_2447D2324((uint64_t)&v17);
    sub_2447D7854(v15, v16 & 1);
    sub_2447D7854(v15, v16 & 1);
  }
}

void sub_244815D84(unint64_t a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  char v20;

  v8 = a4 & 1;
  v9 = *(_QWORD *)(v4 + 104);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 24));
  v10 = sub_24481697C((_QWORD **)(v9 + 16), a1, a2, a3, v8);
  os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 24));
  swift_release();
  if (v10)
  {
    if (*(_BYTE *)(v4 + 112) == 1)
      v11 = sub_2448171B4(v10);
    else
      v11 = sub_2448175A8(v10);
    v13 = v11;
    v14 = v12;
    swift_bridgeObjectRelease();
    v15 = v13;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0;
    v20 = v14 & 1;
    sub_2447D7828(v13, v14 & 1);
    sub_2447D2354((uint64_t)&v15);
    sub_2447D7854(v13, v14 & 1);
    sub_2447D7854(v13, v14 & 1);
  }
}

void sub_244815E94(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  void *v27;
  char v28;
  char v29[16];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  char v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  char v52;
  uint64_t v53;
  uint64_t v54;

  v3 = v2;
  v4 = (_QWORD *)*v2;
  v53 = v2[13];
  v5 = v4[26];
  v30 = v4[25];
  v31 = v5;
  v32 = v4[27];
  v33 = a1;
  v34 = a2;
  type metadata accessor for TraverseFuture.Activity(255, v30, v5, v32);
  v6 = sub_2448EA5D8();
  swift_retain();
  v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  sub_2448EBD48();
  v8 = sub_2448EAEE4();
  v9 = sub_2448EB508();
  v10 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v6);
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_2447B9000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/TraverseFuture.swift", 126, 2, 145, 42, (uint64_t)"receiveUnderlyingCompletion(at:with:)", 37, 2, (uint64_t)sub_2448180D4, (uint64_t)v29, v6, v9, v10);
  swift_release();
  if (v54)
  {
    if (*((_BYTE *)v3 + 112) == 1)
    {
      v44 = (void *)v54;
      v11 = (char *)MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v8);
      v12 = Sequence.invertAndAccumulateErrors<A, B>()(v8, v5, v7, v11, MEMORY[0x24BEE3F20]);
      v14 = v13;
      swift_bridgeObjectRelease();
      v15 = v14 & 1;
    }
    else
    {
      v35 = v54;
      v16 = MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v8);
      Sequence.invert<A, B>()(v8, v5, v7, v16, MEMORY[0x24BEE3F20], (uint64_t *)&v44);
      swift_bridgeObjectRelease();
      v12 = (uint64_t)v44;
      v15 = v45;
    }
    v27 = (void *)v12;
    v28 = v15;
    v35 = v12;
    LOBYTE(v36) = v15;
    sub_2448EAEE4();
    v17 = sub_2448EBD48();
    sub_2448E8090(v17, &v44);
    v18 = v44;
    v19 = v45;
    v20 = v46;
    v21 = v47;
    v22 = v48;
    v23 = v49;
    v24 = v50;
    v25 = v52;
    v26 = v51;
    v35 = (uint64_t)v44;
    v36 = v45;
    v37 = v46;
    v38 = v47;
    v39 = v48;
    v40 = v49;
    v41 = v50;
    v42 = v51;
    v43 = v52;
    sub_2448D2CA4((uint64_t)&v35);
    sub_2447D7854(v27, v28);
    sub_2448180F4(v18, v19, v20, v21, v22, v23, v24, v26, v25);
  }
}

uint64_t sub_244816138(uint64_t a1)
{
  char v1;
  char v2;
  __int128 v4;
  char v5;
  __int128 v6;
  __int128 v7;
  char v8;

  v1 = *(_BYTE *)(a1 + 16);
  v2 = *(_BYTE *)(a1 + 56);
  v4 = *(_OWORD *)a1;
  v5 = v1;
  v6 = *(_OWORD *)(a1 + 24);
  v7 = *(_OWORD *)(a1 + 40);
  v8 = v2;
  return sub_2448164DC(&v4);
}

uint64_t sub_24481618C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int128 v17;
  void (*v18)(__int128 *);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[25];
  char v30;

  v3 = *a1;
  v4 = a1[1];
  v5 = *((unsigned __int8 *)a1 + 16);
  v7 = a1[3];
  v6 = a1[4];
  v25 = a1[6];
  v26 = a1[5];
  v24 = *((_BYTE *)a1 + 56);
  v8 = *(_QWORD *)(v1 + 104);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 24));
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v23 = v6;
    *(_QWORD *)(v8 + 16) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 24));
    swift_release();
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
    {
      v20 = v7;
      v21 = v3;
      v22 = v5;
      swift_bridgeObjectRetain();
      v11 = (unsigned __int8 *)(v9 + 64);
      do
      {
        v12 = *((_QWORD *)v11 - 4);
        v13 = (void *)*((_QWORD *)v11 - 3);
        v14 = *((_QWORD *)v11 - 2);
        v15 = *((_QWORD *)v11 - 1);
        v16 = *v11;
        v11 += 40;
        v17 = *((_OWORD *)a1 + 1);
        v27 = *(_OWORD *)a1;
        v28 = v17;
        *(_OWORD *)v29 = *((_OWORD *)a1 + 2);
        *(_OWORD *)&v29[9] = *(_OWORD *)((char *)a1 + 41);
        v18 = *(void (**)(__int128 *))(*(_QWORD *)v12 + 192);
        swift_retain();
        sub_244817F40(v13, v14, v15, v16);
        v18(&v27);
        swift_release();
        sub_244818018(v13, v14, v15, v16);
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease();
      v5 = v22;
      v3 = v21;
      v7 = v20;
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)&v27 = v3;
    *((_QWORD *)&v27 + 1) = v4;
    *(_QWORD *)&v28 = v5;
    *((_QWORD *)&v28 + 1) = v7;
    *(_QWORD *)v29 = v23;
    *(_QWORD *)&v29[8] = v26;
    *(_QWORD *)&v29[16] = v25;
    v29[24] = v24;
    v30 = 2;
    return sub_2447D2324((uint64_t)&v27);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 24));
    return swift_release();
  }
}

uint64_t sub_244816338(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unsigned __int8 v15;
  __int128 v16;
  void (*v17)(__int128 *);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[25];
  char v29;

  v3 = *a1;
  v4 = a1[1];
  v5 = *((unsigned __int8 *)a1 + 16);
  v7 = a1[3];
  v6 = a1[4];
  v24 = a1[6];
  v25 = a1[5];
  v23 = *((_BYTE *)a1 + 56);
  v8 = *(_QWORD *)(v1 + 104);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 24));
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v22 = v6;
    *(_QWORD *)(v8 + 16) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 24));
    swift_release();
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
    {
      v19 = v7;
      v20 = v4;
      v21 = v5;
      swift_bridgeObjectRetain();
      v11 = (unsigned __int8 *)(v9 + 56);
      do
      {
        v12 = *((_QWORD *)v11 - 3);
        v13 = (void *)*((_QWORD *)v11 - 2);
        v14 = *((_QWORD *)v11 - 1);
        v15 = *v11;
        v11 += 32;
        v16 = *((_OWORD *)a1 + 1);
        v26 = *(_OWORD *)a1;
        v27 = v16;
        *(_OWORD *)v28 = *((_OWORD *)a1 + 2);
        *(_OWORD *)&v28[9] = *(_OWORD *)((char *)a1 + 41);
        v17 = *(void (**)(__int128 *))(*(_QWORD *)v12 + 192);
        swift_retain();
        sub_244818178(v13, v14, v15);
        v17(&v26);
        swift_release();
        sub_244818224(v13, v14, v15);
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease();
      v5 = v21;
      v7 = v19;
      v4 = v20;
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)&v26 = v3;
    *((_QWORD *)&v26 + 1) = v4;
    *(_QWORD *)&v27 = v5;
    *((_QWORD *)&v27 + 1) = v7;
    *(_QWORD *)v28 = v22;
    *(_QWORD *)&v28[8] = v25;
    *(_QWORD *)&v28[16] = v24;
    v28[24] = v23;
    v29 = 2;
    return sub_2447D2354((uint64_t)&v26);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 24));
    return swift_release();
  }
}

uint64_t sub_2448164DC(__int128 *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[2];
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[7];
  char v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[2];

  v2 = (_QWORD *)*v1;
  v3 = a1[1];
  v27 = *a1;
  v28 = v3;
  v29[0] = a1[2];
  *(_OWORD *)((char *)v29 + 9) = *(__int128 *)((char *)a1 + 41);
  v4 = *(_QWORD *)a1;
  v18 = *((_QWORD *)a1 + 1);
  v5 = *((unsigned __int8 *)a1 + 16);
  v17 = *((_QWORD *)a1 + 3);
  v16 = *((_QWORD *)a1 + 4);
  v15 = *((_QWORD *)a1 + 5);
  v14 = *((_QWORD *)a1 + 6);
  v13 = *((unsigned __int8 *)a1 + 56);
  v26 = v1[13];
  v6 = v2[26];
  v20 = v2[25];
  v21 = v6;
  v22 = v2[27];
  type metadata accessor for TraverseFuture.Activity(255, v20, v6, v22);
  v7 = sub_2448EA5D8();
  type metadata accessor for TraverseFuture.Activity.Fiber(255, v20, v6, v22);
  v8 = sub_2448EAEE4();
  v9 = sub_2448EB508();
  swift_retain();
  v10 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v7);
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_2447B9000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/TraverseFuture.swift", 126, 2, 167, 42, (uint64_t)"cancel(callsite:)", 17, 2, (uint64_t)sub_244817E58, (uint64_t)v19, v7, v9, v10);
  result = swift_release();
  if (v23[0])
  {
    v12[1] = v12;
    MEMORY[0x24BDAC7A8](result);
    v12[0] = v1;
    MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v8);
    sub_2448EAD70();
    swift_bridgeObjectRelease();
    v23[0] = v4;
    v23[1] = v18;
    v23[2] = v5;
    v23[3] = v17;
    v23[4] = v16;
    v23[5] = v15;
    v23[6] = v14;
    v24 = v13;
    v25 = 2;
    return sub_2448D2CA4((uint64_t)v23);
  }
  return result;
}

uint64_t sub_244816770(_QWORD **a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v6;
  _QWORD *v11;
  char v12;
  uint64_t result;
  _QWORD *v14;
  _QWORD *v15;
  int64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;

  v6 = *a1;
  if (!*a1)
    return (uint64_t)v6;
  v11 = a1;
  v12 = a6 & 1;
  sub_244817F58(a3, a4, a5, a6 & 1);
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  v14 = v6;
  if ((result & 1) != 0)
  {
    if ((a2 & 0x8000000000000000) == 0)
      goto LABEL_4;
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (uint64_t)sub_2447F2B98(v6);
  v14 = (_QWORD *)result;
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_17;
LABEL_4:
  if (v14[2] > a2)
  {
    v15 = &v14[5 * a2];
    sub_244818018((void *)v15[5], v15[6], v15[7], *((_BYTE *)v15 + 64));
    v15[5] = a3;
    v15[6] = a4;
    v15[7] = a5;
    *((_BYTE *)v15 + 64) = v12;
    v16 = v14[2];
    if (v16)
    {
      v27 = v11;
      v28 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_2447CEEDC(0, v16, 0);
      v17 = v28;
      v26 = v14;
      v18 = (unsigned __int8 *)(v14 + 8);
      do
      {
        v19 = (void *)*((_QWORD *)v18 - 3);
        v20 = *((_QWORD *)v18 - 2);
        v21 = *((_QWORD *)v18 - 1);
        v22 = *v18;
        sub_244817F40(v19, v20, v21, *v18);
        v24 = *(_QWORD *)(v28 + 16);
        v23 = *(_QWORD *)(v28 + 24);
        if (v24 >= v23 >> 1)
          sub_2447CEEDC(v23 > 1, v24 + 1, 1);
        v18 += 40;
        *(_QWORD *)(v28 + 16) = v24 + 1;
        v25 = v28 + 32 * v24;
        *(_QWORD *)(v25 + 32) = v19;
        *(_QWORD *)(v25 + 40) = v20;
        *(_QWORD *)(v25 + 48) = v21;
        *(_BYTE *)(v25 + 56) = v22;
        --v16;
      }
      while (v16);
      v14 = v26;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v11 = v27;
    }
    else
    {
      swift_bridgeObjectRelease();
      v17 = MEMORY[0x24BEE4AF8];
    }
    v6 = sub_2448C8E64(v17);
    swift_bridgeObjectRelease();
    if (v6[2] == v14[2])
    {
      swift_bridgeObjectRelease();
      *v11 = 0;
    }
    else
    {
      swift_bridgeObjectRelease();
      v6 = 0;
      *v11 = v14;
    }
    return (uint64_t)v6;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_24481697C(_QWORD **a1, unint64_t a2, void *a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v9;
  char v10;
  uint64_t result;
  _QWORD *v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  void *v17;
  uint64_t v18;
  unsigned __int8 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;

  v5 = *a1;
  if (!*a1)
    return (uint64_t)v5;
  v9 = a1;
  v10 = a5 & 1;
  sub_244818190(a3, a4, a5 & 1);
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  v12 = v5;
  if ((result & 1) != 0)
  {
    if ((a2 & 0x8000000000000000) == 0)
      goto LABEL_4;
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (uint64_t)sub_2447F2BC0(v5);
  v12 = (_QWORD *)result;
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_17;
LABEL_4:
  if (v12[2] > a2)
  {
    v13 = &v12[4 * a2];
    sub_244818224((void *)v13[5], v13[6], *((_BYTE *)v13 + 56));
    v13[5] = a3;
    v13[6] = a4;
    *((_BYTE *)v13 + 56) = v10;
    v14 = v12[2];
    if (v14)
    {
      v24 = v9;
      v25 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_2447CEF5C(0, v14, 0);
      v15 = v25;
      v23 = v12;
      v16 = (unsigned __int8 *)(v12 + 7);
      do
      {
        v17 = (void *)*((_QWORD *)v16 - 2);
        v18 = *((_QWORD *)v16 - 1);
        v19 = *v16;
        sub_244818178(v17, v18, *v16);
        v21 = *(_QWORD *)(v25 + 16);
        v20 = *(_QWORD *)(v25 + 24);
        if (v21 >= v20 >> 1)
          sub_2447CEF5C(v20 > 1, v21 + 1, 1);
        v16 += 32;
        *(_QWORD *)(v25 + 16) = v21 + 1;
        v22 = v25 + 24 * v21;
        *(_QWORD *)(v22 + 32) = v17;
        *(_QWORD *)(v22 + 40) = v18;
        *(_BYTE *)(v22 + 48) = v19;
        --v14;
      }
      while (v14);
      v12 = v23;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v9 = v24;
    }
    else
    {
      swift_bridgeObjectRelease();
      v15 = MEMORY[0x24BEE4AF8];
    }
    v5 = sub_2448C8F7C(v15);
    swift_bridgeObjectRelease();
    if (v5[2] == v12[2])
    {
      swift_bridgeObjectRelease();
      *v9 = 0;
    }
    else
    {
      swift_bridgeObjectRelease();
      v5 = 0;
      *v9 = v12;
    }
    return (uint64_t)v5;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_244816B6C@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v7;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;

  v41 = a6;
  v42 = a4;
  v40 = a2;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v12 = sub_2448EBD48();
  v13 = (char *)sub_2448EB508();
  v14 = *((_QWORD *)v13 - 1);
  result = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v38 - v16;
  v43 = a1;
  v18 = *a1;
  if (v18)
  {
    v39 = a7;
    v45 = v18;
    v19 = *(_QWORD *)(v12 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v17, a3, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v12);
    v20 = a5;
    v38[0] = a5;
    v21 = v41;
    v22 = type metadata accessor for TraverseFuture.Activity.Fiber(255, v42, v20, v41);
    v38[1] = v7;
    v23 = v22;
    v24 = sub_2448EAEE4();
    swift_bridgeObjectRetain();
    sub_2448EAE48();
    v25 = v45;
    v26 = v40;
    sub_2448736CC(v40, v45);
    (*(void (**)(unint64_t, char *, char *))(v14 + 40))(v25+ ((*(unsigned __int8 *)(*(_QWORD *)(v23 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v23 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72) * v26+ *(int *)(v23 + 44), v17, v13);
    nullsub_1(v24);
    v44 = v45;
    MEMORY[0x24BDAC7A8](v45);
    v27 = v38[0];
    v38[-4] = v42;
    v38[-3] = v27;
    v38[-2] = v21;
    swift_bridgeObjectRetain();
    v28 = MEMORY[0x24BEE12E0];
    v29 = MEMORY[0x24951AC70](MEMORY[0x24BEE12E0], v24);
    v31 = sub_2447D31DC((void (*)(char *, char *))sub_244818110, (uint64_t)&v38[-6], v24, v13, MEMORY[0x24BEE4078], v29, MEMORY[0x24BEE40A8], v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v44 = v31;
    v32 = sub_2448EAEE4();
    MEMORY[0x24951AC70](v28, v32);
    v33 = Collection.compacted<A>(type:)();
    swift_bridgeObjectRelease();
    v34 = MEMORY[0x249519668](v33, v12);
    v35 = v45;
    v36 = swift_bridgeObjectRetain();
    v37 = MEMORY[0x249519668](v36, v23);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (v34 == v37)
    {
      *v43 = 0;
      *v39 = v33;
    }
    else
    {
      *v43 = v35;
      *v39 = 0;
    }
  }
  else
  {
    *a7 = 0;
  }
  return result;
}

uint64_t sub_244816E68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  v6 = a1 + *(int *)(type metadata accessor for TraverseFuture.Activity.Fiber(0, a2, a3, a4) + 44);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  sub_2448EBD48();
  v7 = sub_2448EB508();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a5, v6, v7);
}

_QWORD *sub_244816EF4(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  id v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = (char *)(swift_bridgeObjectRetain() + 56);
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      v5 = (void *)*((_QWORD *)v2 - 3);
      v6 = *((_QWORD *)v2 - 2);
      v7 = *((_QWORD *)v2 - 1);
      v8 = *v2;
      if ((*v2 & 1) != 0)
      {
        v9 = v5;
        v10 = v5;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v4 = sub_2447C2C38(0, v4[2] + 1, 1, v4);
        v12 = v4[2];
        v11 = v4[3];
        if (v12 >= v11 >> 1)
          v4 = sub_2447C2C38((_QWORD *)(v11 > 1), v12 + 1, 1, v4);
        v4[2] = v12 + 1;
        v4[v12 + 4] = v5;
      }
      else
      {
        sub_244817F58(*((void **)v2 - 3), *((_QWORD *)v2 - 2), *((_QWORD *)v2 - 1), 0);
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v3 = sub_2447C2B14(0, v3[2] + 1, 1, v3);
        v14 = v3[2];
        v13 = v3[3];
        if (v14 >= v13 >> 1)
          v3 = sub_2447C2B14((_QWORD *)(v13 > 1), v14 + 1, 1, v3);
        v3[2] = v14 + 1;
        v15 = &v3[3 * v14];
        v15[4] = v5;
        v15[5] = v6;
        v15[6] = v7;
      }
      v2 += 32;
      sub_244818030(v5, v6, v7, v8);
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
    if (v4[2])
      goto LABEL_16;
LABEL_20:
    swift_bridgeObjectRelease();
    return v3;
  }
  v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_20;
LABEL_16:
  v16 = (void *)v4[4];
  v17 = v16;
  swift_bridgeObjectRelease();
  if (v4[2] == 1)
  {
    swift_bridgeObjectRelease();
    v18 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0A8);
    v19 = sub_2448EBB80();
    if (v19)
    {
      v3 = (_QWORD *)v19;

    }
    else
    {
      v3 = (_QWORD *)swift_allocError();
      *v23 = v16;
    }
  }
  else
  {
    v20 = sub_2447CAFE8((uint64_t)v4);
    swift_bridgeObjectRelease();
    v21 = sub_2448A9738(v20);
    swift_bridgeObjectRelease();
    sub_244818090();
    v3 = (_QWORD *)swift_allocError();
    *v22 = v21;
  }

  return v3;
}

_QWORD *sub_2448171B4(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  char v7;
  id v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = (char *)(swift_bridgeObjectRetain() + 48);
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      v5 = (void *)*((_QWORD *)v2 - 2);
      v6 = *((_QWORD *)v2 - 1);
      v7 = *v2;
      if ((*v2 & 1) != 0)
      {
        v8 = v5;
        v9 = v5;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v4 = sub_2447C2C38(0, v4[2] + 1, 1, v4);
        v11 = v4[2];
        v10 = v4[3];
        if (v11 >= v10 >> 1)
          v4 = sub_2447C2C38((_QWORD *)(v10 > 1), v11 + 1, 1, v4);
        v4[2] = v11 + 1;
        v4[v11 + 4] = v5;
      }
      else
      {
        swift_bridgeObjectRetain_n();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v3 = sub_2447C2FB4(0, v3[2] + 1, 1, v3);
        v13 = v3[2];
        v12 = v3[3];
        if (v13 >= v12 >> 1)
          v3 = sub_2447C2FB4((_QWORD *)(v12 > 1), v13 + 1, 1, v3);
        v3[2] = v13 + 1;
        v14 = &v3[2 * v13];
        v14[4] = v5;
        v14[5] = v6;
      }
      v2 += 24;
      sub_24481823C(v5, v6, v7);
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
    if (v4[2])
      goto LABEL_16;
LABEL_20:
    swift_bridgeObjectRelease();
    return v3;
  }
  v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_20;
LABEL_16:
  v15 = (void *)v4[4];
  v16 = v15;
  swift_bridgeObjectRelease();
  if (v4[2] == 1)
  {
    swift_bridgeObjectRelease();
    v17 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A0A8);
    v18 = sub_2448EBB80();
    if (v18)
    {
      v3 = (_QWORD *)v18;

    }
    else
    {
      v3 = (_QWORD *)swift_allocError();
      *v22 = v15;
    }
  }
  else
  {
    v19 = sub_2447CAFE8((uint64_t)v4);
    swift_bridgeObjectRelease();
    v20 = sub_2448A9738(v19);
    swift_bridgeObjectRelease();
    sub_244818090();
    v3 = (_QWORD *)swift_allocError();
    *v21 = v20;
  }

  return v3;
}

_QWORD *sub_244817454(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  id v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = (_BYTE *)(swift_bridgeObjectRetain() + 56);
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      v4 = (void *)*((_QWORD *)v2 - 3);
      if ((*v2 & 1) != 0)
        break;
      v5 = *((_QWORD *)v2 - 2);
      v6 = *((_QWORD *)v2 - 1);
      sub_244817F58(*((void **)v2 - 3), v5, v6, 0);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = sub_2447C2B14(0, v3[2] + 1, 1, v3);
      v8 = v3[2];
      v7 = v3[3];
      if (v8 >= v7 >> 1)
        v3 = sub_2447C2B14((_QWORD *)(v7 > 1), v8 + 1, 1, v3);
      v2 += 32;
      v3[2] = v8 + 1;
      v9 = &v3[3 * v8];
      v9[4] = v4;
      v9[5] = v5;
      v9[6] = v6;
      sub_244818030(v4, v5, v6, 0);
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        return v3;
      }
    }
    v10 = v4;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v4;
}

_QWORD *sub_2448175A8(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  id v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = (_BYTE *)(swift_bridgeObjectRetain() + 48);
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      v4 = (void *)*((_QWORD *)v2 - 2);
      if ((*v2 & 1) != 0)
        break;
      v5 = *((_QWORD *)v2 - 1);
      swift_bridgeObjectRetain_n();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = sub_2447C2FB4(0, v3[2] + 1, 1, v3);
      v7 = v3[2];
      v6 = v3[3];
      if (v7 >= v6 >> 1)
        v3 = sub_2447C2FB4((_QWORD *)(v6 > 1), v7 + 1, 1, v3);
      v2 += 24;
      v3[2] = v7 + 1;
      v8 = &v3[2 * v7];
      v8[4] = v4;
      v8[5] = v5;
      sub_24481823C(v4, v5, 0);
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        return v3;
      }
    }
    v9 = v4;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v4;
}

uint64_t sub_2448176D8()
{
  Future.deinit();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_24481770C(uint64_t (*a1)(__int128 *), uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  char v4;
  __int128 v6;
  uint64_t v7;
  char v8;

  v3 = *((_QWORD *)a3 + 2);
  v4 = *((_BYTE *)a3 + 24);
  v6 = *a3;
  v7 = v3;
  v8 = v4;
  return a1(&v6);
}

uint64_t sub_244817754(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void **), uint64_t a5)
{
  _BYTE v10[64];

  sub_2447D3184(a1, (uint64_t)v10, &qword_25738A600);
  return sub_2448B615C((uint64_t)v10, a2, a3, a4, a5);
}

void sub_2448177B4(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void **), uint64_t a5)
{
  _BYTE v9[64];

  sub_2447D3184(a1, (uint64_t)v9, &qword_25738A600);
  sub_2448B364C((uint64_t)v9, a2, a3, a4, a5);
}

uint64_t sub_244817814(uint64_t (*a1)(__int128 *), uint64_t a2, __int128 *a3)
{
  char v3;
  __int128 v5;
  char v6;

  v3 = *((_BYTE *)a3 + 16);
  v5 = *a3;
  v6 = v3;
  return a1(&v5);
}

uint64_t sub_244817854(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61[16];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[2];
  char v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  char v74;

  v54 = a4;
  v55 = a2;
  v8 = *v5;
  v9 = *(_QWORD *)(*v5 + 200);
  v53 = *(_QWORD *)(*v5 + 208);
  v10 = *(_QWORD *)(v8 + 216);
  v11 = type metadata accessor for TraverseFuture.Activity.Fiber(0, v9, v53, v10);
  v12 = *(_QWORD *)(v11 - 8);
  v60 = v11;
  v56 = v12;
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v43 - v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v59 = sub_2448EB508();
  v58 = *(_QWORD *)(v59 - 8);
  v16 = MEMORY[0x24BDAC7A8](v59);
  v57 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v43 - v19;
  v45 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = *a1;
  v51 = a1[1];
  v50 = *((unsigned __int8 *)a1 + 16);
  v49 = *(_OWORD *)(a1 + 3);
  v48 = a1[5];
  v47 = a1[6];
  v46 = *((unsigned __int8 *)a1 + 56);
  v24 = type metadata accessor for Inhabited(0, v9, v10, v23);
  swift_retain();
  v25 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, v24);
  PredicatedWrapper.value.getter(v24, v25, (uint64_t)v22);
  v26 = v53;
  v62 = v9;
  v63 = v53;
  v64 = v10;
  v65 = v54;
  v66 = a5;
  v28 = sub_2448CDDF0((void (*)(char *, char *))sub_2448182C0, (uint64_t)v61, v9, v60, MEMORY[0x24BEE4078], v10, MEMORY[0x24BEE40A8], v27);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v22, v9);
  v69[0] = v28;
  v29 = type metadata accessor for TraverseFuture.Activity(0, v9, v26, v10);
  v30 = sub_24481320C(v69, v29);
  v31 = v44;
  *(_QWORD *)(v44 + 104) = v30;
  *(_BYTE *)(v31 + 112) = v55;
  swift_release();
  v69[0] = v52;
  v69[1] = v51;
  v70 = v50;
  v71 = v49;
  v72 = v48;
  v73 = v47;
  v74 = v46;
  v35 = sub_2448D24B4((uint64_t)v69, v32, v33, v34);
  v69[0] = v28;
  v36 = sub_2448EAEE4();
  swift_retain();
  MEMORY[0x24951AC70](MEMORY[0x24BEE12C8], v36);
  sub_2448EACEC();
  swift_bridgeObjectRelease();
  v67 = v68;
  sub_2448EB9F4();
  sub_2448EB9D0();
  sub_2448EB9E8();
  for (i = v60; ; (*(void (**)(char *, uint64_t))(v40 + 8))(v14, i))
  {
    v38 = v57;
    sub_2448EB9DC();
    (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v20, v38, v59);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v20, 1, TupleTypeMetadata2) == 1)break;
    v39 = *(_QWORD *)v20;
    v40 = v56;
    (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v14, &v20[*(int *)(TupleTypeMetadata2 + 48)], i);
    v41 = swift_allocObject();
    *(_QWORD *)(v41 + 16) = v35;
    *(_QWORD *)(v41 + 24) = v39;
    swift_retain();
    Future.observeCompletion(_:)((uint64_t)sub_2448182E4, v41);
    swift_release();
    swift_retain();
    Future.observeCancelation(_:)((uint64_t)sub_24481830C, v35);
    swift_release();
  }
  swift_release();
  swift_bridgeObjectRelease();
  return v35;
}

uint64_t sub_244817D08(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  __int128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  *(_QWORD *)&v13 = a1;
  *((_QWORD *)&v13 + 1) = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  v18 = a7;
  v19 = a8;
  return sub_244814F24(&v13, a9, a10, a11, a12);
}

uint64_t sub_244817D58()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for TraverseFuture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TraverseFuture);
}

_QWORD *sub_244817DB0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for FutureSerialQueue.State()
{
  return swift_bridgeObjectRelease();
}

_QWORD *sub_244817DE4(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *sub_244817E1C(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for TraverseFuture.Activity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TraverseFuture.Activity);
}

uint64_t *sub_244817E58@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if (*result)
    *result = 0;
  *a2 = v2;
  return result;
}

uint64_t type metadata accessor for TraverseFuture.Activity.Fiber(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TraverseFuture.Activity.Fiber);
}

uint64_t sub_244817E78(uint64_t *a1)
{
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  __int128 v4;
  _OWORD v6[2];
  _OWORD v7[2];

  v2 = *(_OWORD **)(v1 + 40);
  v3 = *a1;
  v4 = v2[1];
  v6[0] = *v2;
  v6[1] = v4;
  v7[0] = v2[2];
  *(_OWORD *)((char *)v7 + 9) = *(_OWORD *)((char *)v2 + 41);
  return (*(uint64_t (**)(_OWORD *))(*(_QWORD *)v3 + 192))(v6);
}

uint64_t sub_244817ED0()
{
  swift_release();
  return swift_deallocObject();
}

void sub_244817EF4(uint64_t a1)
{
  uint64_t v1;

  sub_244815C64(*(_QWORD *)(v1 + 24), *(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t sub_244817F2C(uint64_t a1)
{
  return sub_244817FB8(a1, &qword_25738A5E8, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_2448B2AD4);
}

id sub_244817F40(id result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 != 255)
    return sub_244817F58(result, a2, a3, a4 & 1);
  return result;
}

id sub_244817F58(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
    return a1;
  else
    return (id)swift_bridgeObjectRetain();
}

uint64_t sub_244817F68(_OWORD *a1)
{
  __int128 v1;
  _OWORD v3[2];
  _OWORD v4[2];

  v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  v4[0] = a1[2];
  *(_OWORD *)((char *)v4 + 9) = *(_OWORD *)((char *)a1 + 41);
  return sub_24481618C((uint64_t *)v3);
}

uint64_t sub_244817FA4(uint64_t a1)
{
  return sub_244817FB8(a1, &qword_25738A5E8, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_2448B5654);
}

uint64_t sub_244817FB8(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[64];

  v5 = v3[2];
  v6 = v3[3];
  v8 = v3[4];
  v7 = v3[5];
  sub_2447D3184(a1, (uint64_t)v10, a2);
  return a3(v10, v5, v6, v8, v7);
}

void sub_244818018(void *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 != 255)
    sub_244818030(a1, a2, a3, a4 & 1);
}

void sub_244818030(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)

  else
    swift_bridgeObjectRelease();
}

void sub_244818040(void *a1, int a2, void *a3, int a4, int a5, int a6, int a7, __int16 a8)
{
  if (HIBYTE(a8) != 255)
    sub_244818070(a1, a2, a3, a4, a5, a6, a7, a8, SHIBYTE(a8));
}

void sub_244818070(void *a1, int a2, id a3, int a4, int a5, int a6, int a7, int a8, char a9)
{
  if (a9 == 1)
  {

  }
  else if (!a9)
  {
    swift_bridgeObjectRelease();
  }
}

unint64_t sub_244818090()
{
  unint64_t result;

  result = qword_25738C898;
  if (!qword_25738C898)
  {
    result = MEMORY[0x24951AC70](&unk_2448F6A70, &type metadata for AccumulatedError);
    atomic_store(result, (unint64_t *)&qword_25738C898);
  }
  return result;
}

uint64_t sub_2448180D4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_244816B6C(a1, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

void sub_2448180F4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9 == 1)
  {

  }
  else if (!a9)
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_244818110@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_244816E68(a1, v2[2], v2[3], v2[4], a2);
}

void sub_244818130(uint64_t a1)
{
  uint64_t v1;

  sub_244815D84(*(_QWORD *)(v1 + 24), *(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_244818164(uint64_t a1)
{
  return sub_244817FB8(a1, &qword_25738A600, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_2448B364C);
}

id sub_244818178(id result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return sub_244818190(result, a2, a3 & 1);
  return result;
}

id sub_244818190(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return a1;
  else
    return (id)swift_bridgeObjectRetain();
}

uint64_t sub_2448181A0(_OWORD *a1)
{
  __int128 v1;
  _OWORD v3[2];
  _OWORD v4[2];

  v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  v4[0] = a1[2];
  *(_OWORD *)((char *)v4 + 9) = *(_OWORD *)((char *)a1 + 41);
  return sub_244816338((uint64_t *)v3);
}

uint64_t objectdestroy_2Tm()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  if ((unint64_t)v1 >= 2)

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_244818210(uint64_t a1)
{
  return sub_244817FB8(a1, &qword_25738A600, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_2448B615C);
}

void sub_244818224(void *a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    sub_24481823C(a1, a2, a3 & 1);
}

void sub_24481823C(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)

  else
    swift_bridgeObjectRelease();
}

void sub_24481824C(void *a1, void *a2, int a3, int a4, int a5, int a6, int a7, __int16 a8)
{
  if (HIBYTE(a8) != 255)
    sub_24481827C(a1, a2, a3, a4, a5, a6, a7, a8, SHIBYTE(a8));
}

void sub_24481827C(void *a1, id a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9)
{
  if (a9 == 1)
  {

  }
  else if (!a9)
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_24481829C(uint64_t a1)
{
  sub_2448182B8(a1);
  return swift_retain();
}

uint64_t sub_2448182B8(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_2448182C0@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v2;

  return sub_244815B64(a1, *(uint64_t (**)(uint64_t))(v2 + 40), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 32), a2);
}

void sub_2448182E4(uint64_t a1)
{
  uint64_t v1;

  sub_244815E94(*(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_24481830C(uint64_t a1)
{
  return sub_244816138(a1);
}

uint64_t sub_244818314()
{
  uint64_t result;
  unint64_t v1;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  sub_2448EBD48();
  result = sub_2448EB508();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_2448183B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  id *v13;
  unsigned int v14;
  id v15;
  id v16;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6 & 0xF8 | 7;
  v8 = ~v7;
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v9 = 8;
  else
    v9 = *(_QWORD *)(v5 + 64);
  v10 = *a2;
  *a1 = *a2;
  if ((v6 & 0x1000F8) != 0 || (((v6 & 0xF8) + 15) & (unint64_t)~v7) + v9 + 1 > 0x18)
  {
    a1 = (uint64_t *)(v10 + ((v7 + 16) & v8));
    swift_retain();
  }
  else
  {
    v12 = (_QWORD *)(((unint64_t)a1 + 15) & v8);
    v13 = (id *)(((unint64_t)a2 + 15) & v8);
    v14 = *((unsigned __int8 *)v13 + v9);
    swift_retain();
    if (v14 > 1)
    {
      memcpy(v12, v13, v9 + 1);
    }
    else if (v14 == 1)
    {
      v15 = *v13;
      v16 = *v13;
      *v12 = v15;
      *((_BYTE *)v12 + v9) = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, id *, uint64_t))(v5 + 16))(v12, v13, v4);
      *((_BYTE *)v12 + v9) = 0;
    }
  }
  return a1;
}

void sub_2448184C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  id *v6;
  unint64_t v7;
  unsigned int v8;

  swift_release();
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 80) & 0xF8 | 7;
  v6 = (id *)((a1 + v5 + 8) & ~v5);
  v7 = *(_QWORD *)(v4 + 64);
  if (v7 <= 8)
    v7 = 8;
  v8 = *((unsigned __int8 *)v6 + v7);
  if (v8 <= 1)
  {
    if (v8 == 1)

    else
      (*(void (**)(void))(v4 + 8))();
  }
}

_QWORD *sub_24481854C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  id *v11;
  uint64_t v12;
  unsigned int v13;
  id v14;
  id v15;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80) & 0xF8;
  v7 = v6 + 15;
  v8 = (unint64_t)a1 + v6 + 15;
  v9 = ~v6 & 0xFFFFFFFFFFFFFFF8;
  v10 = (_QWORD *)(v8 & v9);
  v11 = (id *)(((unint64_t)a2 + v7) & v9);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v12 = 8;
  else
    v12 = *(_QWORD *)(v5 + 64);
  v13 = *((unsigned __int8 *)v11 + v12);
  swift_retain();
  if (v13 > 1)
  {
    memcpy(v10, v11, v12 + 1);
  }
  else if (v13 == 1)
  {
    v14 = *v11;
    v15 = *v11;
    *v10 = v14;
    *((_BYTE *)v10 + v12) = 1;
  }
  else
  {
    (*(void (**)(_QWORD *, id *, uint64_t))(v5 + 16))(v10, v11, v4);
    *((_BYTE *)v10 + v12) = 0;
  }
  return a1;
}

_QWORD *sub_244818624(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id *v12;
  void **v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  void *v17;
  id v18;
  unsigned int v19;
  uint64_t v20;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80) & 0xF8;
  v9 = v8 + 15;
  v10 = (unint64_t)a1 + v8 + 15;
  v11 = ~v8 & 0xFFFFFFFFFFFFFFF8;
  v12 = (id *)(v10 & v11);
  v13 = (void **)(((unint64_t)a2 + v9) & v11);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v14 = 8;
  else
    v14 = *(_QWORD *)(v7 + 64);
  v15 = *((unsigned __int8 *)v12 + v14);
  v16 = *((unsigned __int8 *)v13 + v14);
  if (v15 > 1)
  {
    if (v16 <= 1)
    {
      if (v16 != 1)
      {
LABEL_23:
        (*(void (**)(id *, void **, uint64_t))(v7 + 16))(v12, v13, v6);
        *((_BYTE *)v12 + v14) = 0;
        return a1;
      }
      goto LABEL_11;
    }
LABEL_15:
    memcpy(v12, v13, v14 + 1);
    return a1;
  }
  if (v16 > 1)
  {
    if (v15 == 1)

    else
      (*(void (**)(id *, uint64_t))(v7 + 8))(v12, v6);
    goto LABEL_15;
  }
  if (v12 != v13)
  {
    if (v15 == 1)

    else
      (*(void (**)(id *, uint64_t))(v7 + 8))(v12, v6);
    v19 = *((unsigned __int8 *)v13 + v14);
    if (v19 >= 2)
    {
      if (v14 <= 3)
        v20 = v14;
      else
        v20 = 4;
      __asm { BR              X12 }
    }
    if (v19 != 1)
      goto LABEL_23;
LABEL_11:
    v17 = *v13;
    v18 = v17;
    *v12 = v17;
    *((_BYTE *)v12 + v14) = 1;
  }
  return a1;
}

_QWORD *sub_2448187F0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 80) & 0xF8;
  v6 = v5 + 15;
  v7 = (unint64_t)a1 + v5 + 15;
  v8 = ~v5 & 0xFFFFFFFFFFFFFFF8;
  v9 = (_QWORD *)(v7 & v8);
  v10 = (_QWORD *)(((unint64_t)a2 + v6) & v8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v11 = 8;
  else
    v11 = *(_QWORD *)(v4 + 64);
  v12 = *((unsigned __int8 *)v10 + v11);
  if (v12 > 1)
  {
    memcpy(v9, v10, v11 + 1);
  }
  else if (v12 == 1)
  {
    *v9 = *v10;
    *((_BYTE *)v9 + v11) = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v4 + 32))(v9);
    *((_BYTE *)v9 + v11) = 0;
  }
  return a1;
}

_QWORD *sub_2448188A0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id *v12;
  id *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;

  *a1 = *a2;
  swift_release();
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80) & 0xF8;
  v9 = v8 + 15;
  v10 = (unint64_t)a1 + v8 + 15;
  v11 = ~v8 & 0xFFFFFFFFFFFFFFF8;
  v12 = (id *)(v10 & v11);
  v13 = (id *)(((unint64_t)a2 + v9) & v11);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v14 = 8;
  else
    v14 = *(_QWORD *)(v7 + 64);
  v15 = *((unsigned __int8 *)v12 + v14);
  v16 = *((unsigned __int8 *)v13 + v14);
  if (v15 > 1)
  {
    if (v16 <= 1)
    {
      if (v16 != 1)
      {
LABEL_23:
        (*(void (**)(id *, id *, uint64_t))(v7 + 32))(v12, v13, v6);
        *((_BYTE *)v12 + v14) = 0;
        return a1;
      }
      goto LABEL_11;
    }
LABEL_15:
    memcpy(v12, v13, v14 + 1);
    return a1;
  }
  if (v16 > 1)
  {
    if (v15 == 1)

    else
      (*(void (**)(id *, uint64_t))(v7 + 8))(v12, v6);
    goto LABEL_15;
  }
  if (v12 != v13)
  {
    if (v15 == 1)

    else
      (*(void (**)(id *, uint64_t))(v7 + 8))(v12, v6);
    v17 = *((unsigned __int8 *)v13 + v14);
    if (v17 >= 2)
    {
      if (v14 <= 3)
        v18 = v14;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    if (v17 != 1)
      goto LABEL_23;
LABEL_11:
    *v12 = *v13;
    *((_BYTE *)v12 + v14) = 1;
  }
  return a1;
}

uint64_t sub_244818A5C(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  if (v4 <= 8)
    v4 = 8;
  if (!a2)
    return 0;
  if ((a2 & 0x80000000) == 0)
    goto LABEL_5;
  v7 = v4
     + ((unsigned __int16)((*(_WORD *)(v3 + 80) & 0xF8) + 15) & (unsigned __int16)~(*(_WORD *)(v3 + 80) & 0xF8) & 0x1F8)
     + 1;
  v8 = 8 * v7;
  if (v7 > 3)
    goto LABEL_10;
  v10 = (a2 - 0x7FFFFFFF + ~(-1 << v8)) >> v8;
  if (v10 > 0xFFFE)
  {
    v9 = *(_DWORD *)((char *)a1 + v7);
    if (!v9)
      goto LABEL_5;
    goto LABEL_19;
  }
  if (v10 <= 0xFE)
  {
    if (!v10)
      goto LABEL_5;
LABEL_10:
    v9 = *((unsigned __int8 *)a1 + v7);
    if (!*((_BYTE *)a1 + v7))
      goto LABEL_5;
    goto LABEL_19;
  }
  v9 = *(unsigned __int16 *)((char *)a1 + v7);
  if (!*(_WORD *)((char *)a1 + v7))
  {
LABEL_5:
    v5 = *a1;
    if (*a1 >= 0xFFFFFFFFuLL)
      LODWORD(v5) = -1;
    return (v5 + 1);
  }
LABEL_19:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v11 ^ 0x80000000;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_244818B58 + 4 * byte_2448F0D9A[(v7 - 1)]))();
}

void sub_244818B88(_WORD *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 <= 8)
    v6 = 8;
  v7 = v6
     + ((unsigned __int16)((*(_WORD *)(v5 + 80) & 0xF8) + 15) & (unsigned __int16)~(*(_WORD *)(v5 + 80) & 0xF8) & 0x1F8)
     + 1;
  if (a3 < 0)
  {
    if (v7 <= 3)
    {
      v9 = (a3 - 0x7FFFFFFF + ~(-1 << (8 * v7))) >> (8 * v7);
      if (v9 > 0xFFFE)
      {
        v8 = 4u;
        if (a2 < 0)
          goto LABEL_14;
      }
      else
      {
        if (v9 >= 0xFF)
          v8 = 2;
        else
          v8 = v9 != 0;
        if (a2 < 0)
          goto LABEL_14;
      }
    }
    else
    {
      v8 = 1u;
      if (a2 < 0)
      {
LABEL_14:
        v10 = a2 ^ 0x80000000;
        if (v7 < 4)
        {
          if ((_DWORD)v7)
          {
            v11 = a2 & ~(-1 << (8 * v7));
            bzero(a1, v7);
            if ((_DWORD)v7 == 3)
            {
              *a1 = v11;
              *((_BYTE *)a1 + 2) = BYTE2(v11);
            }
            else if ((_DWORD)v7 == 2)
            {
              *a1 = v11;
            }
            else
            {
              *(_BYTE *)a1 = v11;
            }
          }
        }
        else
        {
          bzero(a1, v7);
          *(_DWORD *)a1 = v10;
        }
        __asm { BR              X10 }
      }
    }
  }
  else
  {
    v8 = 0;
    if (a2 < 0)
      goto LABEL_14;
  }
  __asm { BR              X10 }
}

void sub_244818D30()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x244818CE0);
}

void sub_244818D38()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x244818CE0);
}

void sub_244818D40()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x244818CE0);
}

uint64_t sub_244818D58@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *);
  uint64_t v28;

  v25 = a5;
  v26 = a2;
  v28 = a4;
  v27 = a1;
  v24 = a3;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v10);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v25, v12, v24);
    v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a6, v22, 1);
}

uint64_t static AnalyticsValue.type(_:)()
{
  return sub_2448EBDB4();
}

uint64_t static AnalyticsValue.type<A>(_:)()
{
  return sub_2448EBDB4();
}

uint64_t static AnalyticsValue.type<A>(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  unsigned __int8 v6;

  v4[2] = a2;
  sub_2448EB508();
  sub_244818D58((void (*)(char *, char *))sub_244819040, (uint64_t)v4, MEMORY[0x24BEE4078], (uint64_t)&type metadata for AnalyticsValue, v2, (uint64_t)&v5);
  if (v6 == 255)
    return 0;
  else
    return v5;
}

uint64_t sub_244818FA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11[3];
  uint64_t v12;

  v12 = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
  __swift_project_boxed_opaque_existential_1(v11, v12);
  swift_getDynamicType();
  v7 = sub_2448EBDB4();
  v9 = v8;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

uint64_t sub_244819040@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_244818FA8(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t destroy for AnalyticsValue(uint64_t a1)
{
  return sub_2447E7490(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s20PreviewsFoundationOS14AnalyticsValueOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_2447C9254(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AnalyticsValue(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_2447C9254(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_2447E7490(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AnalyticsValue(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_2447E7490(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnalyticsValue(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 5)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AnalyticsValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 251;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_2448191F0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 4u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 5);
}

uint64_t sub_244819208(uint64_t result, unsigned int a2)
{
  if (a2 >= 5)
  {
    *(_QWORD *)result = a2 - 5;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 5;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsValue()
{
  return &type metadata for AnalyticsValue;
}

uint64_t CrashReportError.DyldLibraryLoadCrashError.library.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CrashReportError.DyldLibraryLoadCrashError.crashReport.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for CrashReportError.DyldLibraryLoadCrashError() + 24);
  return sub_2447F1688(v3, a1);
}

uint64_t type metadata accessor for CrashReportError.DyldLibraryLoadCrashError()
{
  uint64_t result;

  result = qword_25738C998;
  if (!qword_25738C998)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t CrashReportError.DyldLibraryLoadCrashError.highValueTitle.getter()
{
  uint64_t *v0;
  uint64_t v1;

  sub_2448EB79C();
  v1 = *v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  swift_bridgeObjectRetain();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  return v1;
}

uint64_t CrashReportError.DyldLibraryLoadCrashError.additionalInfo.getter()
{
  return 0;
}

id sub_24481939C()
{
  id v0;
  id result;

  v0 = objc_allocWithZone(MEMORY[0x24BDD1798]);
  result = sub_2448A3104(0xD000000000000062, 0x80000002448FA6E0, 0);
  qword_25738C938 = (uint64_t)result;
  return result;
}

uint64_t static CrashReportError.DyldLibraryLoadCrashError.asiRegularExpression.getter()
{
  uint64_t v0;
  id v1;

  if (qword_257389C88 != -1)
    swift_once();
  swift_beginAccess();
  v0 = qword_25738C938;
  v1 = (id)qword_25738C938;
  return v0;
}

void static CrashReportError.DyldLibraryLoadCrashError.asiRegularExpression.setter(uint64_t a1)
{
  void *v2;

  if (qword_257389C88 != -1)
    swift_once();
  swift_beginAccess();
  v2 = (void *)qword_25738C938;
  qword_25738C938 = a1;

}

uint64_t (*static CrashReportError.DyldLibraryLoadCrashError.asiRegularExpression.modify())()
{
  if (qword_257389C88 != -1)
    swift_once();
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t CrashReportError.DyldLibraryLoadCrashError.init(report:asi:match:)@<X0>(uint64_t a1@<X0>, void *a2@<X3>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t CrashError;

  v6 = (_QWORD *)(a1 + *(int *)(type metadata accessor for CrashReport(0) + 20));
  v7 = v6[1];
  *a3 = *v6;
  a3[1] = v7;
  swift_bridgeObjectRetain();
  v8 = (void *)sub_2448EAA70();
  swift_bridgeObjectRelease();
  v9 = (void *)sub_2448EAA70();
  v10 = objc_msgSend(a2, sel_rangeWithName_, v9);
  v12 = v11;

  v13 = objc_msgSend(v8, sel_substringWithRange_, v10, v12);
  sub_2448EAA94();

  v14 = sub_2448EAC98();
  v16 = v15;

  a3[2] = v14;
  a3[3] = v16;
  CrashError = type metadata accessor for CrashReportError.DyldLibraryLoadCrashError();
  sub_244819704(a1, (uint64_t)a3 + *(int *)(CrashError + 24));
  return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(CrashError - 8) + 56))(a3, 0, 1, CrashError);
}

uint64_t sub_244819704(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CrashReport(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_244819748@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2447F1688(v2 + *(int *)(a1 + 24), a2);
}

uint64_t *_s29MissingEnvironmentObjectErrorVwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v30 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v30 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_2448EA548();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    v12 = (int *)type metadata accessor for CrashReport(0);
    v13 = v12[5];
    v14 = &v8[v13];
    v15 = &v9[v13];
    v16 = *((_QWORD *)v15 + 1);
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *((_QWORD *)v14 + 1) = v16;
    v17 = v12[6];
    v18 = &v8[v17];
    v19 = &v9[v17];
    v20 = *((_QWORD *)v19 + 1);
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *((_QWORD *)v18 + 1) = v20;
    *(_DWORD *)&v8[v12[7]] = *(_DWORD *)&v9[v12[7]];
    v21 = v12[8];
    v22 = &v8[v21];
    v23 = &v9[v21];
    v24 = sub_2448EA500();
    v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v25(v22, v23, v24);
    *(_QWORD *)&v8[v12[9]] = *(_QWORD *)&v9[v12[9]];
    *(_QWORD *)&v8[v12[10]] = *(_QWORD *)&v9[v12[10]];
    *(_QWORD *)&v8[v12[11]] = *(_QWORD *)&v9[v12[11]];
    v26 = v12[12];
    v27 = &v8[v26];
    v28 = &v9[v26];
    v29 = *((_QWORD *)v28 + 1);
    *(_QWORD *)v27 = *(_QWORD *)v28;
    *((_QWORD *)v27 + 1) = v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v3;
}

uint64_t _s29MissingEnvironmentObjectErrorVwxx(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_2448EA548();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = type metadata accessor for CrashReport(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = v4 + *(int *)(v6 + 32);
  v8 = sub_2448EA500();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s29MissingEnvironmentObjectErrorVwcp(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2448EA548();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = (int *)type metadata accessor for CrashReport(0);
  v12 = v11[5];
  v13 = &v7[v12];
  v14 = &v8[v12];
  v15 = *((_QWORD *)v14 + 1);
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = v15;
  v16 = v11[6];
  v17 = &v7[v16];
  v18 = &v8[v16];
  v19 = *((_QWORD *)v18 + 1);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *((_QWORD *)v17 + 1) = v19;
  *(_DWORD *)&v7[v11[7]] = *(_DWORD *)&v8[v11[7]];
  v20 = v11[8];
  v21 = &v7[v20];
  v22 = &v8[v20];
  v23 = sub_2448EA500();
  v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v24(v21, v22, v23);
  *(_QWORD *)&v7[v11[9]] = *(_QWORD *)&v8[v11[9]];
  *(_QWORD *)&v7[v11[10]] = *(_QWORD *)&v8[v11[10]];
  *(_QWORD *)&v7[v11[11]] = *(_QWORD *)&v8[v11[11]];
  v25 = v11[12];
  v26 = &v7[v25];
  v27 = &v8[v25];
  v28 = *((_QWORD *)v27 + 1);
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *((_QWORD *)v26 + 1) = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s29MissingEnvironmentObjectErrorVwca(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2448EA548();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = (int *)type metadata accessor for CrashReport(0);
  v11 = v10[5];
  v12 = &v7[v11];
  v13 = &v8[v11];
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = v10[6];
  v15 = &v7[v14];
  v16 = &v8[v14];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  v17 = v10[8];
  v18 = &v7[v17];
  v19 = &v8[v17];
  v20 = sub_2448EA500();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v18, v19, v20);
  *(_QWORD *)&v7[v10[9]] = *(_QWORD *)&v8[v10[9]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v7[v10[10]] = *(_QWORD *)&v8[v10[10]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v7[v10[11]] = *(_QWORD *)&v8[v10[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21 = v10[12];
  v22 = &v7[v21];
  v23 = &v8[v21];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *((_QWORD *)v22 + 1) = *((_QWORD *)v23 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *_s29MissingEnvironmentObjectErrorVwtk(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_2448EA548();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  v9 = (int *)type metadata accessor for CrashReport(0);
  *(_OWORD *)&v6[v9[5]] = *(_OWORD *)&v7[v9[5]];
  *(_OWORD *)&v6[v9[6]] = *(_OWORD *)&v7[v9[6]];
  *(_DWORD *)&v6[v9[7]] = *(_DWORD *)&v7[v9[7]];
  v10 = v9[8];
  v11 = &v6[v10];
  v12 = &v7[v10];
  v13 = sub_2448EA500();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  *(_QWORD *)&v6[v9[9]] = *(_QWORD *)&v7[v9[9]];
  *(_QWORD *)&v6[v9[10]] = *(_QWORD *)&v7[v9[10]];
  *(_QWORD *)&v6[v9[11]] = *(_QWORD *)&v7[v9[11]];
  *(_OWORD *)&v6[v9[12]] = *(_OWORD *)&v7[v9[12]];
  return a1;
}

_QWORD *_s29MissingEnvironmentObjectErrorVwta(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_2448EA548();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = (int *)type metadata accessor for CrashReport(0);
  v13 = v12[5];
  v14 = &v9[v13];
  v15 = &v10[v13];
  v17 = *(_QWORD *)v15;
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = v17;
  *((_QWORD *)v14 + 1) = v16;
  swift_bridgeObjectRelease();
  v18 = v12[6];
  v19 = &v9[v18];
  v20 = &v10[v18];
  v22 = *(_QWORD *)v20;
  v21 = *((_QWORD *)v20 + 1);
  *(_QWORD *)v19 = v22;
  *((_QWORD *)v19 + 1) = v21;
  swift_bridgeObjectRelease();
  *(_DWORD *)&v9[v12[7]] = *(_DWORD *)&v10[v12[7]];
  v23 = v12[8];
  v24 = &v9[v23];
  v25 = &v10[v23];
  v26 = sub_2448EA500();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  *(_QWORD *)&v9[v12[9]] = *(_QWORD *)&v10[v12[9]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v9[v12[10]] = *(_QWORD *)&v10[v12[10]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v9[v12[11]] = *(_QWORD *)&v10[v12[11]];
  swift_bridgeObjectRelease();
  v27 = v12[12];
  v28 = &v9[v27];
  v29 = &v10[v27];
  v31 = *(_QWORD *)v29;
  v30 = *((_QWORD *)v29 + 1);
  *(_QWORD *)v28 = v31;
  *((_QWORD *)v28 + 1) = v30;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s25DyldLibraryLoadCrashErrorVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_244819F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for CrashReport(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t _s25DyldLibraryLoadCrashErrorVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_244819FC8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for CrashReport(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_24481A03C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CrashReport(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_24481A0B0()
{
  uint64_t v0;

  v0 = sub_2448EA5FC();
  __swift_allocate_value_buffer(v0, qword_25739ED10);
  __swift_project_value_buffer(v0, (uint64_t)qword_25739ED10);
  return sub_2448EA5F0();
}

uint64_t TimingLogger.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TimingLogger.init(name:object:additionalIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD v37[2];

  v33 = a1;
  v37[1] = *MEMORY[0x24BDAC8D0];
  v7 = sub_2448EA548();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    if (a2)
      goto LABEL_3;
LABEL_5:
    v35 = 0;
    v36 = 0xE000000000000000;
    _s20PreviewsFoundationOS11CrashReportV2IDVAEycfC_0();
    sub_2448EA524();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v21 = sub_24481A5FC(6);
    v23 = v22;
    v25 = v24;
    v27 = v26;
    swift_bridgeObjectRelease();
    v28 = MEMORY[0x2495192FC](v21, v23, v25, v27);
    v30 = v29;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v35 = v28;
    v36 = v30;
    sub_2448EABC0();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    sub_2448EABC0();
    result = swift_bridgeObjectRelease();
    v18 = v35;
    v19 = v36;
    goto LABEL_6;
  }
  v35 = 45;
  v36 = 0xE100000000000000;
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  if (!a2)
    goto LABEL_5;
LABEL_3:
  v35 = 0;
  v36 = 0xE000000000000000;
  v37[0] = a2;
  swift_unknownObjectRetain();
  _s20PreviewsFoundationOS11CrashReportV2IDVAEycfC_0();
  sub_2448EA524();
  v32 = a4;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v11 = sub_24481A5FC(6);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  swift_bridgeObjectRelease();
  MEMORY[0x2495192FC](v11, v13, v15, v17);
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  sub_2448EABC0();
  sub_2448EABC0();
  v34 = v37;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738C9D8);
  sub_2448EB91C();
  a4 = v32;
  sub_2448EABC0();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v18 = v35;
  v19 = v36;
  swift_bridgeObjectRelease();
  result = swift_unknownObjectRelease();
LABEL_6:
  *a4 = v18;
  a4[1] = v19;
  return result;
}

Swift::Void __swiftcall TimingLogger.begin()()
{
  sub_24481A45C("begin: %{public}s");
}

Swift::Void __swiftcall TimingLogger.end()()
{
  sub_24481A45C("end: %{public}s");
}

void sub_24481A45C(const char *a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *v1;
  v3 = v1[1];
  if (qword_257389C90 != -1)
    swift_once();
  v5 = sub_2448EA5FC();
  __swift_project_value_buffer(v5, (uint64_t)qword_25739ED10);
  swift_bridgeObjectRetain_n();
  v6 = sub_2448EA5E4();
  v7 = sub_2448EB394();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v10 = v9;
    *(_DWORD *)v8 = 136446210;
    swift_bridgeObjectRetain();
    sub_2447D6798(v4, v3, &v10);
    sub_2448EB598();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_2447B9000, v6, v7, a1, v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24951AD84](v9, -1, -1);
    MEMORY[0x24951AD84](v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_24481A5FC(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    sub_2448EAB9C();
    return sub_2448EACA4();
  }
  return result;
}

ValueMetadata *type metadata accessor for TimingLogger()
{
  return &type metadata for TimingLogger;
}

uint64_t (*sub_24481A694(uint64_t a1, uint64_t a2, uint64_t a3))(_QWORD)
{
  _QWORD *v6;

  v6 = (_QWORD *)swift_allocObject();
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  return nullsub_1;
}

uint64_t (*captureWeak<A, B, C>(_:deinitialized:toInvoke:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))()
{
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a6;
  v16[3] = a7;
  v16[4] = a8;
  v16[5] = a4;
  v16[6] = a5;
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a6;
  v17[3] = a7;
  v17[4] = a8;
  v17[5] = a2;
  v17[6] = a3;
  captureWeak<A, B, C, D>(_:toInvoke:deinitialized:)(a1, (uint64_t)sub_24481D0F0, (uint64_t)v16, (uint64_t)sub_24481D0F0, (uint64_t)v17, a6, a7, a8, MEMORY[0x24BEE4AE0] + 8);
  v19 = v18;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = a6;
  v20[3] = a7;
  v20[4] = a8;
  v20[5] = sub_24481E3B8;
  v20[6] = v19;
  return sub_24481D0F0;
}

uint64_t (*captureWeak<A, B>(toInvokeInstanceMethod:on:deinitialized:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))()
{
  _QWORD *v14;

  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a6;
  v14[3] = a7;
  v14[4] = a1;
  v14[5] = a2;
  captureWeak<A, B>(_:toInvoke:deinitialized:)(a3, (uint64_t)sub_24481D110, (uint64_t)v14, a4, a5, a6, a7);
  swift_retain();
  swift_release();
  return sub_24481D19C;
}

uint64_t (*captureWeak<A, B>(_:toInvoke:deinitialized:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))()
{
  uint64_t v13;
  _QWORD *v14;

  v13 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a6;
  v14[3] = a7;
  v14[4] = v13;
  v14[5] = a4;
  v14[6] = a5;
  v14[7] = a2;
  v14[8] = a3;
  swift_retain();
  swift_retain();
  return sub_24481D19C;
}

uint64_t (*captureWeak<A>(toInvokeInstanceMethod:deinitialized:on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))()
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a6;
  v12[3] = a1;
  v12[4] = a2;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a3;
  *(_QWORD *)(v13 + 24) = a4;
  swift_retain();
  swift_retain();
  captureWeak<A, B>(toInvokeInstanceMethod:on:deinitialized:)((uint64_t)sub_24481D1B0, (uint64_t)v12, a5, (uint64_t)sub_24481D1FC, v13, a6, MEMORY[0x24BEE4AE0] + 8);
  v15 = v14;
  swift_release();
  swift_release();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = sub_24481D19C;
  *(_QWORD *)(v16 + 24) = v15;
  return sub_24481D21C;
}

uint64_t (*captureWeak<A, B, C>(toInvokeInstanceMethod:on:context:deinitialized:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9))()
{
  _QWORD *v17;

  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a7;
  v17[3] = a8;
  v17[4] = a9;
  v17[5] = a1;
  v17[6] = a2;
  captureWeak<A, B, C>(_:context:toInvoke:deinitialized:)(a3, a4, (uint64_t)sub_24481D224, (uint64_t)v17, a5, a6, a7, a8, a9);
  swift_retain();
  swift_release();
  return sub_24481D2BC;
}

uint64_t (*captureWeak<A, B, C>(_:context:toInvoke:deinitialized:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9))()
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = a7;
  v22 = a5;
  v23 = a3;
  v13 = *(_QWORD *)(a8 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a2, a8);
  v16 = (*(unsigned __int8 *)(v13 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v17 = (char *)swift_allocObject();
  *((_QWORD *)v17 + 2) = v21;
  *((_QWORD *)v17 + 3) = a8;
  *((_QWORD *)v17 + 4) = a9;
  *((_QWORD *)v17 + 5) = v15;
  *((_QWORD *)v17 + 6) = v22;
  *((_QWORD *)v17 + 7) = a6;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v17[v16], (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a8);
  v18 = &v17[(v14 + v16 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(_QWORD *)v18 = v23;
  *((_QWORD *)v18 + 1) = a4;
  swift_retain();
  swift_retain();
  return sub_24481D2BC;
}

uint64_t (*captureWeak<A, B>(toInvokeInstanceMethod:deinitialized:on:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))()
{
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a7;
  v16[3] = a8;
  v16[4] = a1;
  v16[5] = a2;
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a7;
  v17[3] = a8;
  v17[4] = a3;
  v17[5] = a4;
  swift_retain();
  swift_retain();
  captureWeak<A, B, C>(toInvokeInstanceMethod:on:context:deinitialized:)((uint64_t)sub_24481D314, (uint64_t)v16, a5, a6, (uint64_t)sub_2447DDEBC, (uint64_t)v17, a7, a8, MEMORY[0x24BEE4AE0] + 8);
  v19 = v18;
  swift_release();
  swift_release();
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = sub_24481D2BC;
  *(_QWORD *)(v20 + 24) = v19;
  return sub_24481E54C;
}

uint64_t (*captureWeak<A, B, C, D>(toInvokeInstanceMethod:on:context:_:deinitialized:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, char *, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11))()
{
  _QWORD *v17;

  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a8;
  v17[3] = a9;
  v17[4] = a10;
  v17[5] = a11;
  v17[6] = a1;
  v17[7] = a2;
  captureWeak<A, B, C, D>(_:context:_:toInvoke:deinitialized:)(a3, a4, a5, (uint64_t)sub_24481D318, (uint64_t)v17, a6, a7, a8, a9, a10, a11);
  swift_retain();
  swift_release();
  return sub_24481D3E4;
}

uint64_t (*captureWeak<A, B, C, D>(_:context:_:toInvoke:deinitialized:)(uint64_t a1, void (*a2)(char *, char *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11))()
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v40 = a8;
  v41 = a6;
  v42 = a7;
  v43 = a4;
  v44 = a5;
  v37 = a2;
  v35 = a1;
  v39 = a11;
  v12 = *(_QWORD *)(a10 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = MEMORY[0x24BDAC7A8](a1);
  v38 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v33 - v16;
  v18 = *(_QWORD *)(a9 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  v20 = MEMORY[0x24BDAC7A8](v15);
  v34 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v33 - v21;
  v36 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, _QWORD, uint64_t))(v18 + 16))(v22, v37, a9);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v17, a3, a10);
  v37 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
  v37((char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v22, a9);
  v23 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v24 = v38;
  v23(v38, v17, a10);
  v25 = (*(unsigned __int8 *)(v18 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v26 = (v19 + *(unsigned __int8 *)(v12 + 80) + v25) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v27 = (char *)swift_allocObject();
  *((_QWORD *)v27 + 2) = v40;
  *((_QWORD *)v27 + 3) = a9;
  v28 = v39;
  *((_QWORD *)v27 + 4) = a10;
  *((_QWORD *)v27 + 5) = v28;
  v29 = v41;
  *((_QWORD *)v27 + 6) = v36;
  *((_QWORD *)v27 + 7) = v29;
  *((_QWORD *)v27 + 8) = v42;
  v37(&v27[v25], v34, a9);
  v23(&v27[v26], v24, a10);
  v30 = &v27[(v13 + v26 + 7) & 0xFFFFFFFFFFFFFFF8];
  v31 = v44;
  *(_QWORD *)v30 = v43;
  *((_QWORD *)v30 + 1) = v31;
  swift_retain();
  swift_retain();
  return sub_24481D3E4;
}

uint64_t (*captureWeak<A, B, C>(toInvokeInstanceMethod:deinitialized:on:context:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(char *, char *, uint64_t), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10))()
{
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a8;
  v17[3] = a9;
  v17[4] = a10;
  v17[5] = a1;
  v17[6] = a2;
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = a8;
  v18[3] = a9;
  v18[4] = a10;
  v18[5] = a3;
  v18[6] = a4;
  swift_retain();
  swift_retain();
  captureWeak<A, B, C, D>(toInvokeInstanceMethod:on:context:_:deinitialized:)((uint64_t)sub_24481D460, (uint64_t)v17, a5, a6, a7, (uint64_t)sub_24481D0F0, (uint64_t)v18, a8, a9, a10, MEMORY[0x24BEE4AE0] + 8);
  v20 = v19;
  swift_release();
  swift_release();
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = sub_24481D3E4;
  *(_QWORD *)(v21 + 24) = v20;
  return sub_24481E54C;
}

uint64_t (*captureWeak<A, B, C, D, E>(toInvokeInstanceMethod:on:context:_:_:deinitialized:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, char *, uint64_t), uint64_t a5, void (*a6)(char *, char *, uint64_t), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13))()
{
  _QWORD *v17;

  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a9;
  v17[3] = a10;
  v17[4] = a11;
  v17[5] = a12;
  v17[6] = a13;
  v17[7] = a1;
  v17[8] = a2;
  captureWeak<A, B, C, D, E>(_:context:_:_:toInvoke:deinitialized:)(a3, a4, a5, a6, (uint64_t)sub_24481D464, (uint64_t)v17, a7, a8, a9, a10, a11, a12, a13);
  swift_retain();
  swift_release();
  return sub_24481D574;
}

uint64_t (*captureWeak<A, B, C, D, E>(_:context:_:_:toInvoke:deinitialized:)(uint64_t a1, void (*a2)(char *, char *, uint64_t), uint64_t a3, void (*a4)(char *, char *, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13))()
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, _QWORD, uint64_t);
  char *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _QWORD v48[2];
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;

  v58 = a7;
  v59 = a8;
  v60 = a5;
  v61 = a6;
  v53 = a4;
  v48[1] = a1;
  v56 = a9;
  v57 = a13;
  v50 = a2;
  v51 = a12;
  v14 = *(_QWORD *)(a12 - 8);
  v55 = *(_QWORD *)(v14 + 64);
  v15 = MEMORY[0x24BDAC7A8](a1);
  v54 = (char *)v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)v48 - v18;
  v20 = *(_QWORD *)(a11 - 8);
  v52 = *(_QWORD *)(v20 + 64);
  v21 = MEMORY[0x24BDAC7A8](v17);
  v63 = (char *)v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)v48 - v24;
  v26 = *(_QWORD *)(a10 - 8);
  v27 = *(_QWORD *)(v26 + 64);
  v28 = MEMORY[0x24BDAC7A8](v23);
  v62 = (char *)v48 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)v48 - v29;
  v49 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v31 = *(void (**)(char *, _QWORD, uint64_t))(v26 + 16);
  v48[0] = a10;
  v31(v30, v50, a10);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v25, a3, a11);
  v32 = v19;
  v33 = v19;
  v34 = v51;
  (*(void (**)(char *, void (*)(_QWORD, _QWORD), uint64_t))(v14 + 16))(v33, (void (*)(_QWORD, _QWORD))v53, v51);
  v53 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
  v53(v62, v30, a10);
  v50 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
  v50(v63, v25, a11);
  v35 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v36 = v54;
  v35(v54, v32, v34);
  v37 = (*(unsigned __int8 *)(v26 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  v38 = (v27 + *(unsigned __int8 *)(v20 + 80) + v37) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  v39 = (v52 + *(unsigned __int8 *)(v14 + 80) + v38) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v40 = (v55 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
  v41 = (char *)swift_allocObject();
  v42 = v48[0];
  *((_QWORD *)v41 + 2) = v56;
  *((_QWORD *)v41 + 3) = v42;
  *((_QWORD *)v41 + 4) = a11;
  *((_QWORD *)v41 + 5) = v34;
  v43 = v49;
  *((_QWORD *)v41 + 6) = v57;
  *((_QWORD *)v41 + 7) = v43;
  v44 = v59;
  *((_QWORD *)v41 + 8) = v58;
  *((_QWORD *)v41 + 9) = v44;
  ((void (*)(char *, char *))v53)(&v41[v37], v62);
  v50(&v41[v38], v63, a11);
  v35(&v41[v39], v36, v34);
  v45 = &v41[v40];
  v46 = v61;
  *(_QWORD *)v45 = v60;
  *((_QWORD *)v45 + 1) = v46;
  swift_retain();
  swift_retain();
  return sub_24481D574;
}

uint64_t (*captureWeak<A, B, C, D>(toInvokeInstanceMethod:deinitialized:on:context:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(char *, char *, uint64_t), uint64_t a7, void (*a8)(char *, char *, uint64_t), uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12))()
{
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a9;
  v17[3] = a10;
  v17[4] = a11;
  v17[5] = a12;
  v17[6] = a1;
  v17[7] = a2;
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = a9;
  v18[3] = a10;
  v18[4] = a11;
  v18[5] = a12;
  v18[6] = a3;
  v18[7] = a4;
  swift_retain();
  swift_retain();
  captureWeak<A, B, C, D, E>(toInvokeInstanceMethod:on:context:_:_:deinitialized:)((uint64_t)sub_24481D610, (uint64_t)v17, a5, a6, a7, a8, (uint64_t)sub_24481D614, (uint64_t)v18, a9, a10, a11, a12, MEMORY[0x24BEE4AE0] + 8);
  v20 = v19;
  swift_release();
  swift_release();
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = sub_24481D574;
  *(_QWORD *)(v21 + 24) = v20;
  return sub_24481E54C;
}

uint64_t (*captureWeak<A, B, C>(toInvokeInstanceMethod:on:deinitialized:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))(uint64_t a1)
{
  _QWORD *v16;

  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a6;
  v16[3] = a7;
  v16[4] = a8;
  v16[5] = a1;
  v16[6] = a2;
  captureWeak<A, B, C>(_:toInvoke:deinitialized:)(a3, (uint64_t)sub_24481D224, (uint64_t)v16, a4, a5, a6, a7, a8);
  swift_retain();
  swift_release();
  return sub_24481D6B0;
}

uint64_t (*captureWeak<A, B, C>(_:toInvoke:deinitialized:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))(uint64_t a1)
{
  uint64_t v15;
  _QWORD *v16;

  v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a6;
  v16[3] = a7;
  v16[4] = a8;
  v16[5] = v15;
  v16[6] = a4;
  v16[7] = a5;
  v16[8] = a2;
  v16[9] = a3;
  swift_retain();
  swift_retain();
  return sub_24481D6B0;
}

uint64_t (*captureWeak<A, B>(toInvokeInstanceMethod:deinitialized:on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))()
{
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a6;
  v14[3] = a7;
  v14[4] = a1;
  v14[5] = a2;
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a6;
  v15[3] = a7;
  v15[4] = a3;
  v15[5] = a4;
  swift_retain();
  swift_retain();
  captureWeak<A, B, C>(toInvokeInstanceMethod:on:deinitialized:)((uint64_t)sub_24481D314, (uint64_t)v14, a5, (uint64_t)sub_24481E63C, (uint64_t)v15, a6, a7, MEMORY[0x24BEE4AE0] + 8);
  v17 = v16;
  swift_release();
  swift_release();
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = a6;
  v18[3] = a7;
  v18[4] = sub_24481D6B0;
  v18[5] = v17;
  return sub_2447DDEBC;
}

uint64_t (*captureWeak<A, B, C, D>(toInvokeInstanceMethod:on:context:deinitialized:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10))(uint64_t a1)
{
  _QWORD *v17;

  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a7;
  v17[3] = a8;
  v17[4] = a9;
  v17[5] = a10;
  v17[6] = a1;
  v17[7] = a2;
  captureWeak<A, B, C, D>(_:context:toInvoke:deinitialized:)(a3, a4, (uint64_t)sub_24481D318, (uint64_t)v17, a5, a6, a7, a8, a9, a10);
  swift_retain();
  swift_release();
  return sub_24481D8FC;
}

uint64_t (*captureWeak<A, B, C, D>(_:context:toInvoke:deinitialized:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10))(uint64_t a1)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v22 = a7;
  v23 = a8;
  v24 = a5;
  v25 = a3;
  v13 = *(_QWORD *)(a9 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a2, a9);
  v16 = (*(unsigned __int8 *)(v13 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v17 = (char *)swift_allocObject();
  v18 = v23;
  *((_QWORD *)v17 + 2) = v22;
  *((_QWORD *)v17 + 3) = v18;
  *((_QWORD *)v17 + 4) = a9;
  *((_QWORD *)v17 + 5) = a10;
  v19 = v24;
  *((_QWORD *)v17 + 6) = v15;
  *((_QWORD *)v17 + 7) = v19;
  *((_QWORD *)v17 + 8) = a6;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v17[v16], (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a9);
  v20 = &v17[(v14 + v16 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(_QWORD *)v20 = v25;
  *((_QWORD *)v20 + 1) = a4;
  swift_retain();
  swift_retain();
  return sub_24481D8FC;
}

uint64_t (*captureWeak<A, B, C>(toInvokeInstanceMethod:deinitialized:on:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9))()
{
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a7;
  v17[3] = a8;
  v17[4] = a9;
  v17[5] = a1;
  v17[6] = a2;
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = a7;
  v18[3] = a8;
  v18[4] = a9;
  v18[5] = a3;
  v18[6] = a4;
  swift_retain();
  swift_retain();
  captureWeak<A, B, C, D>(toInvokeInstanceMethod:on:context:deinitialized:)((uint64_t)sub_24481D460, (uint64_t)v17, a5, a6, (uint64_t)sub_24481E554, (uint64_t)v18, a7, a8, a9, MEMORY[0x24BEE4AE0] + 8);
  v20 = v19;
  swift_release();
  swift_release();
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = a7;
  v21[3] = a8;
  v21[4] = a9;
  v21[5] = sub_24481D8FC;
  v21[6] = v20;
  return sub_24481D0F0;
}

uint64_t (*captureWeak<A, B, C, D, E>(toInvokeInstanceMethod:on:context:_:deinitialized:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12))(uint64_t a1)
{
  _QWORD *v17;

  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a8;
  v17[3] = a9;
  v17[4] = a10;
  v17[5] = a11;
  v17[6] = a12;
  v17[7] = a1;
  v17[8] = a2;
  captureWeak<A, B, C, D, E>(_:context:_:toInvoke:deinitialized:)(a3, a4, a5, (uint64_t)sub_24481D464, (uint64_t)v17, a6, a7, a8, a9, a10, a11, a12);
  swift_retain();
  swift_release();
  return sub_24481DD20;
}

uint64_t (*captureWeak<A, B, C, D, E>(_:context:_:toInvoke:deinitialized:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12))(uint64_t a1)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v43 = a8;
  v44 = a6;
  v45 = a7;
  v46 = a4;
  v47 = a5;
  v39 = a2;
  v37[1] = a1;
  v41 = a9;
  v42 = a12;
  v13 = *(_QWORD *)(a11 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = MEMORY[0x24BDAC7A8](a1);
  v40 = (char *)v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)v37 - v17;
  v19 = *(_QWORD *)(a10 - 8);
  v20 = *(_QWORD *)(v19 + 64);
  v21 = MEMORY[0x24BDAC7A8](v16);
  v37[0] = (char *)v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)v37 - v22;
  v38 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v23, v39, a10);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v18, a3, a11);
  v24 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
  v24((char *)v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), v23, a10);
  v25 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v26 = v40;
  v25(v40, v18, a11);
  v27 = (*(unsigned __int8 *)(v19 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v28 = (v20 + *(unsigned __int8 *)(v13 + 80) + v27) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v29 = (char *)swift_allocObject();
  v30 = v41;
  *((_QWORD *)v29 + 2) = v43;
  *((_QWORD *)v29 + 3) = v30;
  *((_QWORD *)v29 + 4) = a10;
  *((_QWORD *)v29 + 5) = a11;
  v31 = v38;
  *((_QWORD *)v29 + 6) = v42;
  *((_QWORD *)v29 + 7) = v31;
  v32 = &v29[v27];
  v33 = v45;
  *((_QWORD *)v29 + 8) = v44;
  *((_QWORD *)v29 + 9) = v33;
  v24(v32, (char *)v37[0], a10);
  v25(&v29[v28], v26, a11);
  v34 = &v29[(v14 + v28 + 7) & 0xFFFFFFFFFFFFFFF8];
  v35 = v47;
  *(_QWORD *)v34 = v46;
  *((_QWORD *)v34 + 1) = v35;
  swift_retain();
  swift_retain();
  return sub_24481DD20;
}

uint64_t (*captureWeak<A, B, C, D>(toInvokeInstanceMethod:deinitialized:on:context:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11))()
{
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a8;
  v17[3] = a9;
  v17[4] = a10;
  v17[5] = a11;
  v17[6] = a1;
  v17[7] = a2;
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = a8;
  v18[3] = a9;
  v18[4] = a10;
  v18[5] = a11;
  v18[6] = a3;
  v18[7] = a4;
  swift_retain();
  swift_retain();
  captureWeak<A, B, C, D, E>(toInvokeInstanceMethod:on:context:_:deinitialized:)((uint64_t)sub_24481D610, (uint64_t)v17, a5, a6, a7, (uint64_t)sub_24481E550, (uint64_t)v18, a8, a9, a10, a11, MEMORY[0x24BEE4AE0] + 8);
  v20 = v19;
  swift_release();
  swift_release();
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = a8;
  v21[3] = a9;
  v21[4] = a10;
  v21[5] = a11;
  v21[6] = sub_24481DD20;
  v21[7] = v20;
  return sub_24481D614;
}

uint64_t (*captureWeak<A, B, C, D, E, F>(toInvokeInstanceMethod:on:context:_:_:deinitialized:)(uint64_t a1, uint64_t a2, void (*a3)(char *, char *, uint64_t), void (*a4)(char *, char *, uint64_t), uint64_t a5, void (*a6)(char *, char *, uint64_t), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14))(uint64_t a1)
{
  _QWORD *v17;

  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a9;
  v17[3] = a10;
  v17[4] = a11;
  v17[5] = a12;
  v17[6] = a13;
  v17[7] = a14;
  v17[8] = a1;
  v17[9] = a2;
  captureWeak<A, B, C, D, E, F>(_:context:_:_:toInvoke:deinitialized:)(a3, a4, a5, a6, (uint64_t)sub_24481DE34, (uint64_t)v17, a7, a8, a9, a10, a11, a12, a13, a14);
  swift_retain();
  swift_release();
  return sub_24481E1B4;
}

uint64_t (*captureWeak<A, B, C, D, E, F>(_:context:_:_:toInvoke:deinitialized:)(void (*a1)(char *, char *, uint64_t), void (*a2)(char *, char *, uint64_t), uint64_t a3, void (*a4)(char *, char *, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14))(uint64_t a1)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  char *v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;

  v60 = a7;
  v61 = a8;
  v62 = a5;
  v63 = a6;
  v49 = a1;
  v57 = a9;
  v58 = a10;
  v59 = a14;
  v51 = a2;
  v52 = a13;
  v15 = *(_QWORD *)(a13 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v55 = a4;
  v56 = v16;
  v17 = MEMORY[0x24BDAC7A8](a1);
  v54 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v49 - v20;
  v22 = *(_QWORD *)(a12 - 8);
  v53 = *(_QWORD *)(v22 + 64);
  v23 = MEMORY[0x24BDAC7A8](v19);
  v65 = (char *)&v49 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v49 - v26;
  v28 = *(_QWORD *)(a11 - 8);
  v29 = *(_QWORD *)(v28 + 64);
  v30 = MEMORY[0x24BDAC7A8](v25);
  v64 = (char *)&v49 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)&v49 - v31;
  v50 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, _QWORD, uint64_t))(v28 + 16))(v32, v51, a11);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v27, a3, a12);
  v33 = v21;
  v34 = v21;
  v35 = v52;
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 16))(v34, v55, v52);
  v55 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
  v55(v64, v32, a11);
  v51 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
  v51(v65, v27, a12);
  v49 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v36 = v54;
  v49(v54, v33, v35);
  v37 = (*(unsigned __int8 *)(v28 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  v38 = (v29 + *(unsigned __int8 *)(v22 + 80) + v37) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v39 = (v53 + *(unsigned __int8 *)(v15 + 80) + v38) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v40 = (v56 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
  v41 = (char *)swift_allocObject();
  v42 = v58;
  *((_QWORD *)v41 + 2) = v57;
  *((_QWORD *)v41 + 3) = v42;
  *((_QWORD *)v41 + 4) = a11;
  *((_QWORD *)v41 + 5) = a12;
  v43 = v59;
  *((_QWORD *)v41 + 6) = v35;
  *((_QWORD *)v41 + 7) = v43;
  v44 = v60;
  v45 = v61;
  *((_QWORD *)v41 + 8) = v50;
  *((_QWORD *)v41 + 9) = v44;
  *((_QWORD *)v41 + 10) = v45;
  v55(&v41[v37], v64, a11);
  v51(&v41[v38], v65, a12);
  v49(&v41[v39], v36, v35);
  v46 = &v41[v40];
  v47 = v63;
  *(_QWORD *)v46 = v62;
  *((_QWORD *)v46 + 1) = v47;
  swift_retain();
  swift_retain();
  return sub_24481E1B4;
}

uint64_t (*captureWeak<A, B, C, D, E>(toInvokeInstanceMethod:deinitialized:on:context:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *, char *, uint64_t), void (*a6)(char *, char *, uint64_t), uint64_t a7, void (*a8)(char *, char *, uint64_t), uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13))()
{
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t (*result)();

  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a9;
  v17[3] = a10;
  v17[4] = a11;
  v17[5] = a12;
  v17[6] = a13;
  v17[7] = a1;
  v17[8] = a2;
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = a9;
  v18[3] = a10;
  v18[4] = a11;
  v18[5] = a12;
  v18[6] = a13;
  v18[7] = a3;
  v18[8] = a4;
  swift_retain();
  swift_retain();
  captureWeak<A, B, C, D, E, F>(toInvokeInstanceMethod:on:context:_:_:deinitialized:)((uint64_t)sub_24481E258, (uint64_t)v17, a5, a6, a7, a8, (uint64_t)sub_24481E2D8, (uint64_t)v18, a9, a10, a11, a12, a13, MEMORY[0x24BEE4AE0] + 8);
  v20 = v19;
  swift_release();
  swift_release();
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = a9;
  v21[3] = a10;
  v21[4] = a11;
  v21[5] = a12;
  v21[6] = a13;
  v21[7] = sub_24481E1B4;
  result = sub_24481E2D8;
  v21[8] = v20;
  return result;
}

uint64_t sub_24481C660(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, void (*a4)(void))
{
  uint64_t v6;

  v6 = a1 + 16;
  swift_beginAccess();
  if (!MEMORY[0x24951AE5C](v6))
    return a2();
  a4();
  return swift_unknownObjectRelease();
}

uint64_t (*captureWeak<A>(_:deinitialized:toInvoke:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))()
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a6;
  v12[3] = a4;
  v12[4] = a5;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a2;
  *(_QWORD *)(v13 + 24) = a3;
  captureWeak<A, B>(_:toInvoke:deinitialized:)(a1, (uint64_t)sub_24481E31C, (uint64_t)v12, (uint64_t)sub_24481E654, v13, a6, MEMORY[0x24BEE4AE0] + 8);
  v15 = v14;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = sub_24481D19C;
  *(_QWORD *)(v16 + 24) = v15;
  return sub_24481E54C;
}

uint64_t sub_24481C7F0(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v8;

  v8 = a1 + 16;
  swift_beginAccess();
  if (!MEMORY[0x24951AE5C](v8))
    return a2(a4);
  a5();
  return swift_unknownObjectRelease();
}

uint64_t (*captureWeak<A, B>(_:context:deinitialized:toInvoke:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))()
{
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a7;
  v16[3] = a8;
  v16[4] = a5;
  v16[5] = a6;
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a7;
  v17[3] = a8;
  v17[4] = a3;
  v17[5] = a4;
  captureWeak<A, B, C>(_:context:toInvoke:deinitialized:)(a1, a2, (uint64_t)sub_2447DDEBC, (uint64_t)v16, (uint64_t)sub_24481E63C, (uint64_t)v17, a7, a8, MEMORY[0x24BEE4AE0] + 8);
  v19 = v18;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = sub_24481D2BC;
  *(_QWORD *)(v20 + 24) = v19;
  return sub_24481E54C;
}

uint64_t sub_24481C9BC(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  uint64_t v10;

  v10 = a1 + 16;
  swift_beginAccess();
  if (!MEMORY[0x24951AE5C](v10))
    return a2(a4, a5);
  a6();
  return swift_unknownObjectRelease();
}

uint64_t (*captureWeak<A, B, C>(_:context:_:deinitialized:toInvoke:)(uint64_t a1, void (*a2)(char *, char *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10))()
{
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a8;
  v17[3] = a9;
  v17[4] = a10;
  v17[5] = a6;
  v17[6] = a7;
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = a8;
  v18[3] = a9;
  v18[4] = a10;
  v18[5] = a4;
  v18[6] = a5;
  captureWeak<A, B, C, D>(_:context:_:toInvoke:deinitialized:)(a1, a2, a3, (uint64_t)sub_24481D0F0, (uint64_t)v17, (uint64_t)sub_24481E554, (uint64_t)v18, a8, a9, a10, MEMORY[0x24BEE4AE0] + 8);
  v20 = v19;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = sub_24481D3E4;
  *(_QWORD *)(v21 + 24) = v20;
  return sub_24481E54C;
}

uint64_t sub_24481CBA4(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  uint64_t v12;

  v12 = a1 + 16;
  swift_beginAccess();
  if (!MEMORY[0x24951AE5C](v12))
    return a2(a4, a5, a6);
  a7();
  return swift_unknownObjectRelease();
}

uint64_t (*captureWeak<A, B, C, D>(_:context:_:_:deinitialized:toInvoke:)(uint64_t a1, void (*a2)(char *, char *, uint64_t), uint64_t a3, void (*a4)(char *, char *, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12))()
{
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a9;
  v17[3] = a10;
  v17[4] = a11;
  v17[5] = a12;
  v17[6] = a7;
  v17[7] = a8;
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = a9;
  v18[3] = a10;
  v18[4] = a11;
  v18[5] = a12;
  v18[6] = a5;
  v18[7] = a6;
  captureWeak<A, B, C, D, E>(_:context:_:_:toInvoke:deinitialized:)(a1, a2, a3, a4, (uint64_t)sub_24481D614, (uint64_t)v17, (uint64_t)sub_24481E550, (uint64_t)v18, a9, a10, a11, a12, MEMORY[0x24BEE4AE0] + 8);
  v20 = v19;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = sub_24481D574;
  *(_QWORD *)(v21 + 24) = v20;
  return sub_24481E54C;
}

uint64_t sub_24481CDA0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, void (*a5)(void))
{
  uint64_t v8;

  v8 = a2 + 16;
  swift_beginAccess();
  if (!MEMORY[0x24951AE5C](v8))
    return a3(a1);
  a5();
  return swift_unknownObjectRelease();
}

uint64_t (*captureWeak<A, B>(_:deinitialized:toInvoke:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))()
{
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a6;
  v14[3] = a7;
  v14[4] = a4;
  v14[5] = a5;
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a6;
  v15[3] = a7;
  v15[4] = a2;
  v15[5] = a3;
  captureWeak<A, B, C>(_:toInvoke:deinitialized:)(a1, (uint64_t)sub_24481E63C, (uint64_t)v14, (uint64_t)sub_24481E63C, (uint64_t)v15, a6, a7, MEMORY[0x24BEE4AE0] + 8);
  v17 = v16;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = a6;
  v18[3] = a7;
  v18[4] = sub_24481D6B0;
  v18[5] = v17;
  return sub_24481E63C;
}

uint64_t (*captureWeak<A, B, C, D>(_:toInvoke:deinitialized:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9))(uint64_t a1, uint64_t a2)
{
  uint64_t v16;
  _QWORD *v17;

  v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a6;
  v17[3] = a7;
  v17[4] = a8;
  v17[5] = a9;
  v17[6] = v16;
  v17[7] = a4;
  v17[8] = a5;
  v17[9] = a2;
  v17[10] = a3;
  swift_retain();
  swift_retain();
  return sub_24481E3B8;
}

uint64_t sub_24481D020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t a5, void (*a6)(void))
{
  uint64_t v10;

  v10 = a3 + 16;
  swift_beginAccess();
  if (!MEMORY[0x24951AE5C](v10))
    return a4(a1, a2);
  a6();
  return swift_unknownObjectRelease();
}

uint64_t sub_24481D0CC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24481D0F0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t sub_24481D110()
{
  uint64_t v0;
  void (*v1)(void);

  v1 = (void (*)(void))(*(uint64_t (**)(void))(v0 + 32))();
  v1();
  return swift_release();
}

uint64_t sub_24481D144()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_24481D168()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24481D19C()
{
  uint64_t v0;

  return sub_24481C660(*(_QWORD *)(v0 + 32), *(uint64_t (**)(void))(v0 + 40), *(_QWORD *)(v0 + 48), *(void (**)(void))(v0 + 56));
}

uint64_t (*sub_24481D1B0())()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (*(uint64_t (**)(void))(v0 + 24))();
  v3 = v2;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v3;
  return sub_24481E654;
}

uint64_t sub_24481D1FC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_24481D21C()
{
  uint64_t v0;

  return sub_2447D6708(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_24481D228()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24481D2BC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_24481C7F0(*(_QWORD *)(v0 + 40), *(uint64_t (**)(uint64_t))(v0 + 48), *(_QWORD *)(v0 + 56), v0 + v2, *(void (**)(void))(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_24481D31C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v1 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v2 - 8);
  v6 = (v4 + *(_QWORD *)(v3 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, v1);
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v6, v2);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24481D3E4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 32) - 8);
  v4 = (v2 + *(_QWORD *)(v1 + 64) + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_24481C9BC(*(_QWORD *)(v0 + 48), *(uint64_t (**)(uint64_t, uint64_t))(v0 + 56), *(_QWORD *)(v0 + 64), v0 + v2, v0 + v4, *(void (**)(void))(v0 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_24481D468()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v1 = *((_QWORD *)v0 + 3);
  v2 = *((_QWORD *)v0 + 4);
  v10 = *((_QWORD *)v0 + 5);
  v3 = *(_QWORD *)(v1 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v2 - 8);
  v6 = (v4 + *(_QWORD *)(v3 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v10 - 8);
  v8 = (v6 + *(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(&v0[v4], v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(&v0[v6], v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(&v0[v8], v10);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24481D574()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 32) - 8);
  v4 = (v2 + *(_QWORD *)(v1 + 64) + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(*(_QWORD *)(v0 + 40) - 8);
  v6 = (v4 + *(_QWORD *)(v3 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_24481CBA4(*(_QWORD *)(v0 + 56), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 64), *(_QWORD *)(v0 + 72), v0 + v2, v0 + v4, v0 + v6, *(void (**)(void))(v0 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_24481D614()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 48))();
}

uint64_t sub_24481D634(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v4)(uint64_t);

  v4 = (void (*)(uint64_t))(*(uint64_t (**)(void))(v2 + 40))();
  v4(a2);
  return swift_release();
}

uint64_t sub_24481D67C()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24481D6B0(uint64_t a1)
{
  uint64_t v1;

  return sub_24481CDA0(a1, *(_QWORD *)(v1 + 40), *(uint64_t (**)(uint64_t))(v1 + 48), *(_QWORD *)(v1 + 56), *(void (**)(void))(v1 + 64));
}

uint64_t (*sub_24481D6E0())()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  v6 = *(_OWORD *)(v0 + 16);
  v1 = (*(uint64_t (**)(void))(v0 + 32))();
  v3 = v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = v6;
  *(_QWORD *)(v4 + 32) = v1;
  *(_QWORD *)(v4 + 40) = v3;
  return sub_24481E63C;
}

uint64_t sub_24481D748()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24481D76C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void (*v6)(uint64_t, uint64_t);

  v6 = (void (*)(uint64_t, uint64_t))(*(uint64_t (**)(void))(v3 + 48))();
  v6(a2, a3);
  return swift_release();
}

uint64_t sub_24481D7BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5, void (*a6)(void))
{
  uint64_t v10;

  v10 = a2 + 16;
  swift_beginAccess();
  if (!MEMORY[0x24951AE5C](v10))
    return a3(a1, a5);
  a6();
  return swift_unknownObjectRelease();
}

uint64_t sub_24481D868()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24481D8FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 32) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  return sub_24481D7BC(a1, *(_QWORD *)(v1 + 48), *(uint64_t (**)(uint64_t, uint64_t))(v1 + 56), *(_QWORD *)(v1 + 64), v1 + v3, *(void (**)(void))(v1 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t (*sub_24481D95C())()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;

  v1 = *(_QWORD *)(v0 + 32);
  v7 = *(_OWORD *)(v0 + 16);
  v2 = (*(uint64_t (**)(void))(v0 + 40))();
  v4 = v3;
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = v7;
  *(_QWORD *)(v5 + 32) = v1;
  *(_QWORD *)(v5 + 40) = v2;
  *(_QWORD *)(v5 + 48) = v4;
  return sub_24481E554;
}

uint64_t sub_24481D9D4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24481D9F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  v8 = (void (*)(uint64_t, uint64_t, uint64_t))(*(uint64_t (**)(void))(v4 + 56))();
  v8(a2, a3, a4);
  return swift_release();
}

uint64_t (*captureWeak<A, B, C>(_:context:deinitialized:toInvoke:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9))()
{
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a7;
  v17[3] = a8;
  v17[4] = a9;
  v17[5] = a5;
  v17[6] = a6;
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = a7;
  v18[3] = a8;
  v18[4] = a9;
  v18[5] = a3;
  v18[6] = a4;
  captureWeak<A, B, C, D>(_:context:toInvoke:deinitialized:)(a1, a2, (uint64_t)sub_24481E554, (uint64_t)v17, (uint64_t)sub_24481E554, (uint64_t)v18, a7, a8, a9, MEMORY[0x24BEE4AE0] + 8);
  v20 = v19;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = a7;
  v21[3] = a8;
  v21[4] = a9;
  v21[5] = sub_24481D8FC;
  v21[6] = v20;
  return sub_24481E554;
}

uint64_t sub_24481DB98(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  uint64_t v12;

  v12 = a2 + 16;
  swift_beginAccess();
  if (!MEMORY[0x24951AE5C](v12))
    return a3(a1, a5, a6);
  a7();
  return swift_unknownObjectRelease();
}

uint64_t sub_24481DC58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v1 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v2 - 8);
  v6 = (v4 + *(_QWORD *)(v3 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, v1);
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v6, v2);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24481DD20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 32) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(*(_QWORD *)(v1 + 40) - 8);
  v5 = (v3 + *(_QWORD *)(v2 + 64) + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  return sub_24481DB98(a1, *(_QWORD *)(v1 + 56), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 64), *(_QWORD *)(v1 + 72), v1 + v3, v1 + v5, *(void (**)(void))(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t (*sub_24481DDA0())()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  __int128 v7;

  v6 = *(_OWORD *)(v0 + 32);
  v7 = *(_OWORD *)(v0 + 16);
  v1 = (*(uint64_t (**)(void))(v0 + 48))();
  v3 = v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = v7;
  *(_OWORD *)(v4 + 32) = v6;
  *(_QWORD *)(v4 + 48) = v1;
  *(_QWORD *)(v4 + 56) = v3;
  return sub_24481E550;
}

uint64_t sub_24481DE10()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24481DE34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  v10 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(uint64_t (**)(void))(v5 + 64))();
  v10(a2, a3, a4, a5);
  return swift_release();
}

uint64_t (*captureWeak<A, B, C, D>(_:context:_:deinitialized:toInvoke:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11))()
{
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a8;
  v17[3] = a9;
  v17[4] = a10;
  v17[5] = a11;
  v17[6] = a6;
  v17[7] = a7;
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = a8;
  v18[3] = a9;
  v18[4] = a10;
  v18[5] = a11;
  v18[6] = a4;
  v18[7] = a5;
  captureWeak<A, B, C, D, E>(_:context:_:toInvoke:deinitialized:)(a1, a2, a3, (uint64_t)sub_24481E550, (uint64_t)v17, (uint64_t)sub_24481E550, (uint64_t)v18, a8, a9, a10, a11, MEMORY[0x24BEE4AE0] + 8);
  v20 = v19;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = a8;
  v21[3] = a9;
  v21[4] = a10;
  v21[5] = a11;
  v21[6] = sub_24481DD20;
  v21[7] = v20;
  return sub_24481E550;
}

uint64_t sub_24481DFDC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(void))
{
  uint64_t v14;

  v14 = a2 + 16;
  swift_beginAccess();
  if (!MEMORY[0x24951AE5C](v14))
    return a3(a1, a5, a6, a7);
  a8();
  return swift_unknownObjectRelease();
}

uint64_t sub_24481E0A8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v1 = *((_QWORD *)v0 + 4);
  v2 = *((_QWORD *)v0 + 5);
  v10 = *((_QWORD *)v0 + 6);
  v3 = *(_QWORD *)(v1 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v2 - 8);
  v6 = (v4 + *(_QWORD *)(v3 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v10 - 8);
  v8 = (v6 + *(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(&v0[v4], v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(&v0[v6], v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(&v0[v8], v10);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24481E1B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 32) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(*(_QWORD *)(v1 + 40) - 8);
  v5 = (v3 + *(_QWORD *)(v2 + 64) + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(*(_QWORD *)(v1 + 48) - 8);
  v7 = (v5 + *(_QWORD *)(v4 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  return sub_24481DFDC(a1, *(_QWORD *)(v1 + 64), *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 72), *(_QWORD *)(v1 + 80), v1 + v3, v1 + v5, v1 + v7, *(void (**)(void))(v1 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t (*sub_24481E258())()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;

  v1 = *(_QWORD *)(v0 + 48);
  v7 = *(_OWORD *)(v0 + 32);
  v8 = *(_OWORD *)(v0 + 16);
  v2 = (*(uint64_t (**)(void))(v0 + 56))();
  v4 = v3;
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = v8;
  *(_OWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 48) = v1;
  *(_QWORD *)(v5 + 56) = v2;
  *(_QWORD *)(v5 + 64) = v4;
  return sub_24481E640;
}

uint64_t sub_24481E2D8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 56))();
}

uint64_t sub_24481E2F8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24481E31C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t sub_24481E33C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24481E360()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24481E384()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24481E3B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_24481D020(a1, a2, *(_QWORD *)(v2 + 48), *(uint64_t (**)(uint64_t, uint64_t))(v2 + 56), *(_QWORD *)(v2 + 64), *(void (**)(void))(v2 + 72));
}

uint64_t (*captureWeak<A, B, C, D, E>(_:context:_:_:deinitialized:toInvoke:)(void (*a1)(char *, char *, uint64_t), void (*a2)(char *, char *, uint64_t), uint64_t a3, void (*a4)(char *, char *, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13))()
{
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t (*result)();

  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a9;
  v17[3] = a10;
  v17[4] = a11;
  v17[5] = a12;
  v17[6] = a13;
  v17[7] = a7;
  v17[8] = a8;
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = a9;
  v18[3] = a10;
  v18[4] = a11;
  v18[5] = a12;
  v18[6] = a13;
  v18[7] = a5;
  v18[8] = a6;
  captureWeak<A, B, C, D, E, F>(_:context:_:_:toInvoke:deinitialized:)(a1, a2, a3, a4, (uint64_t)sub_24481E2D8, (uint64_t)v17, (uint64_t)sub_24481E640, (uint64_t)v18, a9, a10, a11, a12, a13, MEMORY[0x24BEE4AE0] + 8);
  v20 = v19;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = a9;
  v21[3] = a10;
  v21[4] = a11;
  v21[5] = a12;
  v21[6] = a13;
  v21[7] = sub_24481E1B4;
  result = sub_24481E640;
  v21[8] = v20;
  return result;
}

uint64_t sub_24481E53C()
{
  return swift_deallocObject();
}

uint64_t static CharacterSet.c99IdentifierAllowed.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v0 = sub_2448EA26C();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v2);
  v7 = (char *)&v18 - v6;
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v18 - v9;
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v18 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v18 - v14;
  sub_2448EA260();
  sub_2448EA224();
  sub_2448EA23C();
  v16 = *(void (**)(char *, uint64_t))(v1 + 8);
  v16(v4, v0);
  v16(v7, v0);
  sub_2448EA224();
  sub_2448EA23C();
  v16(v7, v0);
  v16(v10, v0);
  sub_2448EA224();
  sub_2448EA23C();
  v16(v10, v0);
  v16(v13, v0);
  sub_2448EA230();
  sub_2448EA23C();
  v16(v13, v0);
  return ((uint64_t (*)(char *, uint64_t))v16)(v15, v0);
}

uint64_t sub_24481E82C(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (_QWORD *)sub_2448C5974(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = sub_244820858(v5);
  *a1 = v2;
  return result;
}

void DispatchScheduler.Deadline.advanced(by:)()
{
  JUMPOUT(0x249518F54);
}

void sub_24481E8A8()
{
  JUMPOUT(0x249518F54);
}

BOOL sub_24481E8B4()
{
  return (_s20PreviewsFoundationOS17DispatchSchedulerV8DeadlineV1loiySbAE_AEtFZ_0() & 1) == 0;
}

BOOL sub_24481E8DC()
{
  return (_s20PreviewsFoundationOS17DispatchSchedulerV8DeadlineV1loiySbAE_AEtFZ_0() & 1) == 0;
}

uint64_t sub_24481E8F8()
{
  return _s20PreviewsFoundationOS17DispatchSchedulerV8DeadlineV1loiySbAE_AEtFZ_0();
}

uint64_t DispatchScheduler.init(queue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t DispatchScheduler.schedule(after:qos:execute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[6];

  v19 = a2;
  v8 = sub_2448EA704();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_2448EA764();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[1] = *v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  aBlock[4] = a3;
  aBlock[5] = a4;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2447EB164;
  aBlock[3] = &block_descriptor_4;
  v16 = _Block_copy(aBlock);
  v20 = MEMORY[0x24BEE4AF8];
  sub_2447BD7A0((unint64_t *)&qword_25738B1E0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738B1E8);
  sub_2448039A4();
  sub_2448EB6C4();
  MEMORY[0x249519BC0](v15, v19, v11, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

PreviewsFoundationOS::StepScheduler::Deadline __swiftcall StepScheduler.Deadline.init(floatLiteral:)(PreviewsFoundationOS::StepScheduler::Deadline floatLiteral)
{
  PreviewsFoundationOS::StepScheduler::Deadline *v1;

  v1->time = floatLiteral.time;
  return floatLiteral;
}

PreviewsFoundationOS::StepScheduler::Deadline __swiftcall StepScheduler.Deadline.init(integerLiteral:)(Swift::Int integerLiteral)
{
  double *v1;
  PreviewsFoundationOS::StepScheduler::Deadline result;

  result.time = (double)integerLiteral;
  *v1 = (double)integerLiteral;
  return result;
}

Swift::Double __swiftcall StepScheduler.Deadline.distance(to:)(PreviewsFoundationOS::StepScheduler::Deadline to)
{
  double *v1;
  double *v2;

  return *v1 - *v2;
}

PreviewsFoundationOS::StepScheduler::Deadline __swiftcall StepScheduler.Deadline.advanced(by:)(Swift::Double by)
{
  double *v1;
  double *v2;
  PreviewsFoundationOS::StepScheduler::Deadline result;

  result.time = *v2 + by;
  *v1 = result.time;
  return result;
}

BOOL static StepScheduler.Deadline.< infix(_:_:)(double *a1, double *a2)
{
  return *a1 < *a2;
}

uint64_t StepScheduler.Deadline.description.getter()
{
  double *v0;
  double v1;
  uint64_t result;

  v1 = *v0;
  if ((~*(_QWORD *)v0 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 9.22337204e18)
  {
    sub_24481EBC8();
    return sub_2448EB658();
  }
LABEL_7:
  __break(1u);
  return result;
}

unint64_t sub_24481EBC8()
{
  unint64_t result;

  result = qword_25738C9E0;
  if (!qword_25738C9E0)
  {
    result = MEMORY[0x24951AC70](MEMORY[0x24BEE17B0], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_25738C9E0);
  }
  return result;
}

uint64_t StepScheduler.Deadline.hash(into:)()
{
  return sub_2448EBD30();
}

uint64_t StepScheduler.Deadline.hashValue.getter()
{
  sub_2448EBD00();
  sub_2448EBD30();
  return sub_2448EBD3C();
}

double sub_24481EC84@<D0>(double *a1@<X8>, double a2@<D0>)
{
  double *v2;
  double result;

  result = *v2 + a2;
  *a1 = result;
  return result;
}

double sub_24481EC94@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double *v2;
  double result;

  result = *a1 - *v2;
  *a2 = result;
  return result;
}

double sub_24481ECA8@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double *v2;
  double result;

  result = *a1 + *v2;
  *a2 = result;
  return result;
}

double *sub_24481ECBC(double *result, uint64_t a2, char a3, double *a4, double *a5, double *a6)
{
  double v6;
  double v8;

  v6 = *a6;
  if ((a3 & 1) != 0)
  {
    v8 = v6 + *a4;
    goto LABEL_5;
  }
  if (!__OFADD__(a2++, 1))
  {
    v8 = *a5 + v6 * (double)a2;
LABEL_5:
    *result = v8;
    return (double *)a2;
  }
  __break(1u);
  return result;
}

uint64_t sub_24481ED00()
{
  sub_2448EBD00();
  sub_2448EBD30();
  return sub_2448EBD3C();
}

uint64_t sub_24481ED48()
{
  return sub_2448EBD30();
}

uint64_t sub_24481ED78()
{
  sub_2448EBD00();
  sub_2448EBD30();
  return sub_2448EBD3C();
}

BOOL sub_24481EDBC(double *a1, double *a2)
{
  return *a1 < *a2;
}

BOOL sub_24481EDD0(double *a1, double *a2)
{
  return *a2 >= *a1;
}

BOOL sub_24481EDE4(double *a1, double *a2)
{
  return *a1 >= *a2;
}

BOOL sub_24481EDF8(double *a1, double *a2)
{
  return *a2 < *a1;
}

double sub_24481EE0C@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double sub_24481EE18@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  double result;

  result = (double)*a1;
  *a2 = result;
  return result;
}

uint64_t sub_24481EE28()
{
  double *v0;
  double v1;
  uint64_t result;

  v1 = *v0;
  if ((~*(_QWORD *)v0 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 9.22337204e18)
  {
    sub_24481EBC8();
    return sub_2448EB658();
  }
LABEL_7:
  __break(1u);
  return result;
}

BOOL sub_24481EEAC(double *a1, double *a2)
{
  return *a2 - *a1 == 0.0;
}

double StepScheduler.now.getter@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 16);
  *a1 = result;
  return result;
}

uint64_t StepScheduler.__allocating_init()()
{
  uint64_t result;
  uint64_t v1;

  result = swift_allocObject();
  v1 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = v1;
  return result;
}

uint64_t StepScheduler.init()()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = v0;
  v2 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = v2;
  return result;
}

Swift::Void __swiftcall StepScheduler.advance(by:)(Swift::Double by)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  double *v16;
  unint64_t v17;
  _QWORD *v18;
  double v19;
  BOOL v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  double *v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;

  if ((~*(_QWORD *)&by & 0x7FF0000000000000) == 0)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (by <= -9.22337204e18)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (by >= 9.22337204e18)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v2 = v1;
  v3 = (uint64_t)by;
  if ((uint64_t)by < 0)
  {
LABEL_49:
    __break(1u);
    swift_release();
    __break(1u);
    return;
  }
  if (v3)
  {
    v4 = (uint64_t *)(v2 + 24);
    swift_beginAccess();
    v5 = 0;
    v40 = v3;
    while (v5 != v3)
    {
      *(double *)(v2 + 16) = *(double *)(v2 + 16) + 1.0;
      v6 = *(_QWORD *)(v2 + 24);
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_25738A4D8);
        v8 = (_QWORD *)swift_allocObject();
        v9 = _swift_stdlib_malloc_size(v8);
        v10 = v9 - 32;
        if (v9 < 32)
          v10 = v9 - 17;
        v8[2] = v7;
        v8[3] = 2 * (v10 >> 4);
        v41 = sub_2448214F0((uint64_t)&v44, v8 + 4, v7, v6);
        swift_bridgeObjectRetain_n();
        sub_2447D1030();
        if (v41 != v7)
          goto LABEL_45;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
        v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      v44 = v8;
      sub_24481E82C(&v44);
      v42 = v5 + 1;
      swift_bridgeObjectRelease();
      v11 = v44;
      v12 = v44[2];
      swift_retain();
      v13 = 0;
      v14 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_17:
      if (v13 <= v12)
        v15 = v12;
      else
        v15 = v13;
      v16 = (double *)&v11[2 * v13 + 4];
      v17 = v15 + 1;
      while (v12 != v13)
      {
        if (v17 == ++v13)
        {
          __break(1u);
          goto LABEL_44;
        }
        v18 = v16 + 2;
        v19 = *v16;
        v20 = *(double *)(v2 + 16) < *v16;
        v16 += 2;
        if (!v20)
        {
          v21 = *(v18 - 1);
          swift_bridgeObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v44 = v14;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_2447CEE88(0, v14[2] + 1, 1);
            v14 = v44;
          }
          v24 = v14[2];
          v23 = v14[3];
          if (v24 >= v23 >> 1)
          {
            sub_2447CEE88(v23 > 1, v24 + 1, 1);
            v14 = v44;
          }
          v14[2] = v24 + 1;
          v25 = (double *)&v14[2 * v24];
          v25[4] = v19;
          *((_QWORD *)v25 + 5) = v21;
          goto LABEL_17;
        }
      }
      swift_release();
      swift_release();
      v26 = v14[2];
      if (v26)
      {
        swift_bridgeObjectRetain();
        v27 = 0;
        do
        {
          v28 = (double *)&v14[2 * v27 + 4];
          v29 = *v28;
          v30 = *((_QWORD *)v28 + 1);
          v31 = *(_QWORD *)(v30 + 16);
          if (v31)
          {
            swift_bridgeObjectRetain();
            v32 = v30 + 40;
            do
            {
              v33 = *(void (**)(uint64_t))(v32 - 8);
              v34 = swift_retain();
              v33(v34);
              swift_release();
              v32 += 16;
              --v31;
            }
            while (v31);
          }
          else
          {
            swift_bridgeObjectRetain();
          }
          swift_beginAccess();
          v35 = sub_244828E00(v29);
          if ((v36 & 1) != 0)
          {
            v37 = v35;
            v38 = swift_isUniquelyReferenced_nonNull_native();
            v39 = *v4;
            v43 = *v4;
            *v4 = 0x8000000000000000;
            if (!v38)
            {
              sub_24482DEEC();
              v39 = v43;
            }
            sub_2447CD4AC(v37, v39);
            *v4 = v39;
            swift_bridgeObjectRelease();
          }
          ++v27;
          swift_endAccess();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        while (v27 != v26);
        swift_release_n();
      }
      else
      {
        swift_release();
      }
      v3 = v40;
      v5 = v42;
      if (v42 == v40)
        return;
    }
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
}

uint64_t StepScheduler.schedule(after:qos:execute:)(double *a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  double v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _QWORD *v12;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;

  v7 = *a1;
  if (*(double *)(v4 + 16) >= *a1)
    return a3();
  v8 = (uint64_t *)(v4 + 24);
  swift_beginAccess();
  v9 = *(_QWORD *)(v4 + 24);
  if (*(_QWORD *)(v9 + 16) && (v10 = sub_244828E00(v7), (v11 & 1) != 0))
  {
    v12 = *(_QWORD **)(*(_QWORD *)(v9 + 56) + 8 * v10);
    swift_endAccess();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_endAccess();
    v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a3;
  *(_QWORD *)(v14 + 24) = a4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v15 = v12;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v15 = sub_2447C28A4(0, v12[2] + 1, 1, v12);
  v17 = v15[2];
  v16 = v15[3];
  if (v17 >= v16 >> 1)
    v15 = sub_2447C28A4((_QWORD *)(v16 > 1), v17 + 1, 1, v15);
  v15[2] = v17 + 1;
  v18 = &v15[2 * v17];
  v18[4] = sub_24481D21C;
  v18[5] = v14;
  swift_release();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v20 = *v8;
  *v8 = 0x8000000000000000;
  sub_24481F9BC((uint64_t)v15, isUniquelyReferenced_nonNull_native, v7);
  *v8 = v20;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

Swift::Void __swiftcall StepScheduler.unscheduleAll()()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 24) = MEMORY[0x24BEE4B00];
  swift_bridgeObjectRelease();
}

uint64_t StepScheduler.description.getter()
{
  uint64_t v0;
  uint64_t result;
  double v2;

  sub_2448EB79C();
  result = swift_bridgeObjectRelease();
  v2 = *(double *)(v0 + 16);
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 9.22337204e18)
  {
    sub_24481EBC8();
    sub_2448EB658();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    sub_2448EABC0();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738C9E8);
    sub_244821718();
    sub_2448EA80C();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2448EABC0();
    return 0xD000000000000014;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t StepScheduler.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t StepScheduler.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

double sub_24481F6CC@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(*(_QWORD *)v1 + 16);
  *a1 = result;
  return result;
}

uint64_t sub_24481F6DC(double *a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  return StepScheduler.schedule(after:qos:execute:)(a1, a2, a3, a4);
}

uint64_t sub_24481F6FC()
{
  return StepScheduler.description.getter();
}

uint64_t sub_24481F71C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;

  v7 = v6;
  v14 = *v6;
  v16 = sub_244828D0C(a4, a5);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v20 = v15;
  v21 = *(_QWORD *)(v14 + 24);
  if (v21 >= v19 && (a6 & 1) != 0)
    goto LABEL_7;
  if (v21 >= v19 && (a6 & 1) == 0)
  {
    sub_24482D450();
LABEL_7:
    v22 = (_QWORD *)*v7;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = v22[7] + 24 * v16;
      result = sub_2447E7490(*(_QWORD *)v23, *(_QWORD *)(v23 + 8), *(_BYTE *)(v23 + 16));
      *(_QWORD *)v23 = a1;
      *(_QWORD *)(v23 + 8) = a2;
      *(_BYTE *)(v23 + 16) = a3;
      return result;
    }
LABEL_11:
    v22[(v16 >> 6) + 8] |= 1 << v16;
    v27 = (uint64_t *)(v22[6] + 16 * v16);
    *v27 = a4;
    v27[1] = a5;
    v28 = v22[7] + 24 * v16;
    *(_QWORD *)v28 = a1;
    *(_QWORD *)(v28 + 8) = a2;
    *(_BYTE *)(v28 + 16) = a3;
    v29 = v22[2];
    v30 = __OFADD__(v29, 1);
    v31 = v29 + 1;
    if (!v30)
    {
      v22[2] = v31;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_244829814(v19, a6 & 1);
  v25 = sub_244828D0C(a4, a5);
  if ((v20 & 1) == (v26 & 1))
  {
    v16 = v25;
    v22 = (_QWORD *)*v7;
    if ((v20 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_2448EBC7C();
  __break(1u);
  return result;
}

_OWORD *sub_24481F8A4(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_244828DC8(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_OWORD *)(v16[7] + 32 * v10);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
        return sub_2447C91FC(a1, v17);
      }
      return sub_2448204EC(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_24482D9B4();
      goto LABEL_7;
    }
    sub_24482A744(v13, a3 & 1);
    v19 = sub_244828DC8(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_2448204EC(v10, a2, a1, v16);
    }
  }
  result = (_OWORD *)sub_2448EBC7C();
  __break(1u);
  return result;
}

uint64_t sub_24481F9BC(uint64_t a1, char a2, double a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v8 = *v3;
  v10 = sub_244828E00(a3);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a2 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a2 & 1) == 0)
  {
    result = (uint64_t)sub_24482DEEC();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v19 = 8 * v10;
    *(double *)(v16[6] + v19) = a3;
    *(_QWORD *)(v16[7] + v19) = a1;
    v20 = v16[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return result;
    }
    goto LABEL_14;
  }
  sub_24482AFFC(result, a2 & 1);
  result = sub_244828E00(a3);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_2448EBC7C();
  __break(1u);
  return result;
}

_OWORD *sub_24481FAF0(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_244828E5C(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_OWORD *)(v16[7] + 32 * v10);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
        return sub_2447C91FC(a1, v17);
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_24482E08C();
      goto LABEL_7;
    }
    sub_24482B2D4(v13, a3 & 1);
    v19 = sub_244828E5C(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_2447D126C(a2, (uint64_t)v21);
      return sub_2448205B4(v10, (uint64_t)v21, a1, v16);
    }
  }
  result = (_OWORD *)sub_2448EBC7C();
  __break(1u);
  return result;
}

uint64_t sub_24481FC28(uint64_t a1, unsigned __int8 a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v8 = *v3;
  v10 = sub_244828E8C(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_24482E270();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = a2;
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v19 = v16[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_24482B5E8(result, a3 & 1);
  result = sub_244828E8C(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_2448EBC7C();
  __break(1u);
  return result;
}

uint64_t sub_24481FD5C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_244828D0C(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = v19
            + *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_25738CB98) - 8) + 72)
            * v12;
        return sub_244822088(a1, v20);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_24482E66C();
      goto LABEL_7;
    }
    sub_24482BC20(v15, a4 & 1);
    v22 = sub_244828D0C(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      v12 = v22;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_244820670(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = sub_2448EBC7C();
  __break(1u);
  return result;
}

_OWORD *sub_24481FE94(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_244828D0C(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_OWORD *)(v18[7] + 32 * v12);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
        return sub_2447C91FC(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_24482D628();
      goto LABEL_7;
    }
    sub_244829B3C(v15, a4 & 1);
    v21 = sub_244828D0C(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_2448206FC(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }
  result = (_OWORD *)sub_2448EBC7C();
  __break(1u);
  return result;
}

uint64_t sub_24481FFC4(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for CrashReport.ID(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = sub_244828EE4(a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  v17 = v12;
  v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    v19 = *v4;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7];
      result = swift_release();
      *(_QWORD *)(v20 + 8 * v13) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_24482E8A8();
    goto LABEL_7;
  }
  sub_24482BF88(v16, a3 & 1);
  v22 = sub_244828EE4(a2);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    result = sub_2448EBC7C();
    __break(1u);
    return result;
  }
  v13 = v22;
  v19 = *v4;
  if ((v17 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_244821FB8(a2, (uint64_t)v10);
  return sub_244820764(v13, (uint64_t)v10, a1, v19);
}

uint64_t sub_244820118(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v8 = *v3;
  v10 = sub_244828DC8(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_24482EAC8();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_release();
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v19 = 8 * v10;
    *(_QWORD *)(v16[6] + v19) = a2;
    *(_QWORD *)(v16[7] + v19) = a1;
    v20 = v16[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return result;
    }
    goto LABEL_14;
  }
  sub_24482C308(result, a3 & 1);
  result = sub_244828DC8(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_2448EBC7C();
  __break(1u);
  return result;
}

unint64_t sub_244820250(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t result;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_244828F54(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
        return sub_244821F7C((uint64_t)a1, v18[7] + 80 * v12);
      return sub_2448207F4(v12, a2, a3, a1, v18);
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_24482EC68();
      goto LABEL_7;
    }
    sub_24482C5BC(v15, a4 & 1);
    v20 = sub_244828F54(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        return sub_244821F7C((uint64_t)a1, v18[7] + 80 * v12);
      return sub_2448207F4(v12, a2, a3, a1, v18);
    }
  }
  result = sub_2448EBC7C();
  __break(1u);
  return result;
}

uint64_t sub_244820370(uint64_t a1, unsigned int a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v8 = *v3;
  v10 = sub_244829040(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_24482F194();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_release();
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_DWORD *)(v16[6] + 4 * v10) = a2;
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v19 = v16[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_24482CECC(result, a3 & 1);
  result = sub_244829040(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_2448EBC7C();
  __break(1u);
  return result;
}

unint64_t sub_2448204A4(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a5[6] + 8 * result) = a2;
  v5 = (_QWORD *)(a5[7] + 16 * result);
  *v5 = a3;
  v5[1] = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

_OWORD *sub_2448204EC(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_2447C91FC(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

uint64_t sub_244820550(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_2447F81E8(a3, a4[7] + 32 * a1);
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

_OWORD *sub_2448205B4(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = sub_2447C91FC(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

unint64_t sub_24482062C(unint64_t result, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a4[6] + result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

uint64_t sub_244820670(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738CB98);
  result = sub_244822040(a4, v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

_OWORD *sub_2448206FC(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_2447C91FC(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t sub_244820764(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for CrashReport.ID(0);
  result = sub_244821FFC(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

unint64_t sub_2448207F4(unint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  v6 = (_OWORD *)(a5[7] + 80 * result);
  *(_OWORD *)((char *)v6 + 57) = *(_OWORD *)((char *)a4 + 57);
  v7 = a4[3];
  v6[2] = a4[2];
  v6[3] = v7;
  v8 = a4[1];
  *v6 = *a4;
  v6[1] = v8;
  v9 = a5[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a5[2] = v11;
  return result;
}

uint64_t sub_244820858(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  double *v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  double *__dst;

  v3 = a1[1];
  result = sub_2448EBB14();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v84 = *a1;
      v85 = -1;
      v86 = 1;
      v87 = *a1;
      do
      {
        v88 = *(double *)(v84 + 16 * v86);
        v89 = v85;
        v90 = v87;
        do
        {
          if (*(double *)v90 < v88)
            break;
          if (!v84)
            goto LABEL_141;
          v91 = *(_QWORD *)(v90 + 24);
          *(_OWORD *)(v90 + 16) = *(_OWORD *)v90;
          *(double *)v90 = v88;
          *(_QWORD *)(v90 + 8) = v91;
          v90 -= 16;
        }
        while (!__CFADD__(v89++, 1));
        ++v86;
        v87 += 16;
        --v85;
      }
      while (v86 != v3);
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v6 = result;
  v102 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    __dst = (double *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v12 = (char *)MEMORY[0x24BEE4AF8];
LABEL_103:
      v93 = v12;
      v104 = v9;
      if (v13 >= 2)
      {
        v94 = *v102;
        do
        {
          v95 = v13 - 2;
          if (v13 < 2)
            goto LABEL_132;
          if (!v94)
            goto LABEL_145;
          v96 = v93;
          v97 = *(_QWORD *)&v93[16 * v95 + 32];
          v98 = *(_QWORD *)&v93[16 * v13 + 24];
          sub_244820F44((double *)(v94 + 16 * v97), (double *)(v94 + 16 * *(_QWORD *)&v93[16 * v13 + 16]), v94 + 16 * v98, __dst);
          if (v1)
            break;
          if (v98 < v97)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v96 = sub_2448C594C((uint64_t)v96);
          if (v95 >= *((_QWORD *)v96 + 2))
            goto LABEL_134;
          v99 = &v96[16 * v95 + 32];
          *(_QWORD *)v99 = v97;
          *((_QWORD *)v99 + 1) = v98;
          v100 = *((_QWORD *)v96 + 2);
          if (v13 > v100)
            goto LABEL_135;
          memmove(&v96[16 * v13 + 16], &v96[16 * v13 + 32], 16 * (v100 - v13));
          v93 = v96;
          *((_QWORD *)v96 + 2) = v100 - 1;
          v13 = v100 - 1;
        }
        while (v100 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738A4E0);
    v8 = sub_2448EAE60();
    *(_QWORD *)(v8 + 16) = v7;
    v104 = v8;
    __dst = (double *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v103 = *a1 + 32;
  v101 = *a1 - 16;
  v12 = (char *)MEMORY[0x24BEE4AF8];
  v105 = v6;
  v106 = v3;
  v107 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(double *)(v11 + 16 * v10);
      v16 = 16 * v14;
      v17 = *(double *)(v11 + 16 * v14);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v18 = (double *)(v103 + 16 * v14);
        v19 = v15;
        while (1)
        {
          v20 = v19;
          v19 = *v18;
          if (v17 >= v15 == v20 < *v18)
            break;
          ++v10;
          v18 += 2;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v17 >= v15)
      {
        if (v10 < v14)
          goto LABEL_138;
        if (v14 < v10)
        {
          v21 = 16 * v10;
          v22 = v10;
          v23 = v14;
          do
          {
            if (v23 != --v22)
            {
              if (!v11)
                goto LABEL_144;
              v24 = v11 + v21;
              v25 = *(_QWORD *)(v11 + v16);
              v26 = *(_QWORD *)(v11 + v16 + 8);
              *(_OWORD *)(v11 + v16) = *(_OWORD *)(v11 + v21 - 16);
              *(_QWORD *)(v24 - 16) = v25;
              *(_QWORD *)(v24 - 8) = v26;
            }
            ++v23;
            v21 -= 16;
            v16 += 16;
          }
          while (v23 < v22);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v10, v14))
      goto LABEL_136;
    if (v10 - v14 >= v6)
      goto LABEL_46;
    v27 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_139;
    if (v27 >= v3)
      v27 = v3;
    if (v27 < v14)
      break;
    if (v10 != v27)
    {
      v28 = v101 + 16 * v10;
      do
      {
        v29 = *(double *)(v11 + 16 * v10);
        v30 = v14;
        v31 = v28;
        do
        {
          if (*(double *)v31 < v29)
            break;
          if (!v11)
            goto LABEL_142;
          v32 = *(_QWORD *)(v31 + 24);
          *(_OWORD *)(v31 + 16) = *(_OWORD *)v31;
          *(double *)v31 = v29;
          *(_QWORD *)(v31 + 8) = v32;
          v31 -= 16;
          ++v30;
        }
        while (v10 != v30);
        ++v10;
        v28 += 16;
      }
      while (v10 != v27);
      v10 = v27;
    }
LABEL_46:
    if (v10 < v14)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = sub_2448C57AC(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v34 = *((_QWORD *)v12 + 2);
    v33 = *((_QWORD *)v12 + 3);
    v13 = v34 + 1;
    v11 = v107;
    if (v34 >= v33 >> 1)
    {
      v83 = sub_2448C57AC((char *)(v33 > 1), v34 + 1, 1, v12);
      v11 = v107;
      v12 = v83;
    }
    *((_QWORD *)v12 + 2) = v13;
    v35 = v12 + 32;
    v36 = &v12[16 * v34 + 32];
    *(_QWORD *)v36 = v14;
    *((_QWORD *)v36 + 1) = v10;
    if (v34)
    {
      while (1)
      {
        v37 = v13 - 1;
        if (v13 >= 4)
        {
          v42 = &v35[16 * v13];
          v43 = *((_QWORD *)v42 - 8);
          v44 = *((_QWORD *)v42 - 7);
          v48 = __OFSUB__(v44, v43);
          v45 = v44 - v43;
          if (v48)
            goto LABEL_120;
          v47 = *((_QWORD *)v42 - 6);
          v46 = *((_QWORD *)v42 - 5);
          v48 = __OFSUB__(v46, v47);
          v40 = v46 - v47;
          v41 = v48;
          if (v48)
            goto LABEL_121;
          v49 = v13 - 2;
          v50 = &v35[16 * v13 - 32];
          v52 = *(_QWORD *)v50;
          v51 = *((_QWORD *)v50 + 1);
          v48 = __OFSUB__(v51, v52);
          v53 = v51 - v52;
          if (v48)
            goto LABEL_123;
          v48 = __OFADD__(v40, v53);
          v54 = v40 + v53;
          if (v48)
            goto LABEL_126;
          if (v54 >= v45)
          {
            v72 = &v35[16 * v37];
            v74 = *(_QWORD *)v72;
            v73 = *((_QWORD *)v72 + 1);
            v48 = __OFSUB__(v73, v74);
            v75 = v73 - v74;
            if (v48)
              goto LABEL_130;
            v65 = v40 < v75;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v66 = *((_QWORD *)v12 + 4);
            v67 = *((_QWORD *)v12 + 5);
            v48 = __OFSUB__(v67, v66);
            v59 = v67 - v66;
            v60 = v48;
            goto LABEL_77;
          }
          v39 = *((_QWORD *)v12 + 4);
          v38 = *((_QWORD *)v12 + 5);
          v48 = __OFSUB__(v38, v39);
          v40 = v38 - v39;
          v41 = v48;
        }
        if ((v41 & 1) != 0)
          goto LABEL_122;
        v49 = v13 - 2;
        v55 = &v35[16 * v13 - 32];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v58 = __OFSUB__(v56, v57);
        v59 = v56 - v57;
        v60 = v58;
        if (v58)
          goto LABEL_125;
        v61 = &v35[16 * v37];
        v63 = *(_QWORD *)v61;
        v62 = *((_QWORD *)v61 + 1);
        v48 = __OFSUB__(v62, v63);
        v64 = v62 - v63;
        if (v48)
          goto LABEL_128;
        if (__OFADD__(v59, v64))
          goto LABEL_129;
        if (v59 + v64 >= v40)
        {
          v65 = v40 < v64;
LABEL_83:
          if (v65)
            v37 = v49;
          goto LABEL_85;
        }
LABEL_77:
        if ((v60 & 1) != 0)
          goto LABEL_124;
        v68 = &v35[16 * v37];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v48 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v48)
          goto LABEL_127;
        if (v71 < v59)
          goto LABEL_15;
LABEL_85:
        v76 = v37 - 1;
        if (v37 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11)
          goto LABEL_143;
        v77 = v12;
        v78 = &v35[16 * v76];
        v79 = *(_QWORD *)v78;
        v80 = &v35[16 * v37];
        v81 = *((_QWORD *)v80 + 1);
        sub_244820F44((double *)(v11 + 16 * *(_QWORD *)v78), (double *)(v11 + 16 * *(_QWORD *)v80), v11 + 16 * v81, __dst);
        if (v1)
          goto LABEL_93;
        if (v81 < v79)
          goto LABEL_117;
        if (v37 > *((_QWORD *)v77 + 2))
          goto LABEL_118;
        *(_QWORD *)v78 = v79;
        *(_QWORD *)&v35[16 * v76 + 8] = v81;
        v82 = *((_QWORD *)v77 + 2);
        if (v37 >= v82)
          goto LABEL_119;
        v12 = v77;
        v13 = v82 - 1;
        memmove(&v35[16 * v37], v80 + 16, 16 * (v82 - 1 - v37));
        *((_QWORD *)v77 + 2) = v82 - 1;
        v11 = v107;
        if (v82 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v105;
    v3 = v106;
    if (v10 >= v106)
    {
      v9 = v104;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = sub_2448EB994();
  __break(1u);
  return result;
}

uint64_t sub_244820F44(double *__src, double *a2, unint64_t a3, double *__dst)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  double v20;
  uint64_t result;
  double *v22;
  double *v23;
  double *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[2 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v16 = &v4[2 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v17 = (double *)(a3 - 16);
        v18 = v6;
        while (1)
        {
          v19 = v17 + 2;
          v20 = *(v18 - 2);
          v18 -= 2;
          if (v20 >= *(v16 - 2))
          {
            if (v19 != v6 || v17 >= v6)
              *(_OWORD *)v17 = *(_OWORD *)v18;
            v24 = v18;
            if (v18 <= v7)
              goto LABEL_42;
          }
          else
          {
            v22 = v16 - 2;
            if (v19 < v16 || v17 >= v16 || v19 != v16)
              *(_OWORD *)v17 = *((_OWORD *)v16 - 1);
            v18 = v6;
            v16 -= 2;
            if (v6 <= v7)
              goto LABEL_42;
          }
          v17 -= 2;
          v6 = v18;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[2 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[2 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        if (*v4 >= *v6)
        {
          v15 = v6 + 2;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        else
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 2;
          v23 = v4;
          v15 = v6;
        }
        v7 += 2;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    sub_2448C58A4((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_2448211BC(uint64_t *a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  __swift_instantiateConcreteTypeFromMangledName(qword_25738CBA0);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a4;
  *(_QWORD *)(v8 + 24) = 0;
  result = swift_bridgeObjectRelease();
  if (!a2)
    goto LABEL_8;
  if (!a3)
  {
LABEL_17:
    *a1 = v8;
    return a3;
  }
  if (a3 < 0)
    goto LABEL_19;
  if (!a4[2])
  {
LABEL_8:
    a3 = 0;
    goto LABEL_17;
  }
  v10 = a4[4];
  v11 = a4[5];
  *(_QWORD *)(v8 + 24) = 1;
  *a2 = v10;
  a2[1] = v11;
  if (a3 == 1)
  {
LABEL_16:
    swift_bridgeObjectRetain();
    goto LABEL_17;
  }
  v12 = a4[2];
  if (v12 == 1)
  {
    a3 = 1;
    goto LABEL_16;
  }
  v13 = 0;
  v14 = 2;
  while (v14 - 1 < v12)
  {
    v15 = &a2[v13];
    v16 = a4[v13 + 6];
    v17 = a4[v13 + 7];
    *(_QWORD *)(v8 + 24) = v14;
    v15[2] = v16;
    v15[3] = v17;
    if (a3 == v14)
    {
      swift_bridgeObjectRetain();
      goto LABEL_16;
    }
    result = swift_bridgeObjectRetain();
    v18 = v14 + 1;
    v12 = a4[2];
    v13 += 2;
    if (v14++ == v12)
    {
      a3 = v18 - 1;
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_2448212F4(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_2448214F0(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v16);
    v11[1] = v20;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_2448216F4()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t sub_244821718()
{
  unint64_t result;

  result = qword_25738C9F0;
  if (!qword_25738C9F0)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for StepScheduler.Deadline, &type metadata for StepScheduler.Deadline);
    atomic_store(result, (unint64_t *)&qword_25738C9F0);
  }
  return result;
}

uint64_t sub_24482175C()
{
  return sub_2447BD7A0(&qword_25738C9F8, (uint64_t (*)(uint64_t))type metadata accessor for DispatchScheduler.Deadline, (uint64_t)&protocol conformance descriptor for DispatchScheduler.Deadline);
}

uint64_t type metadata accessor for DispatchScheduler.Deadline()
{
  uint64_t result;

  result = qword_25738CAB8;
  if (!qword_25738CAB8)
    return swift_getSingletonMetadata();
  return result;
}

_UNKNOWN **sub_2448217C4()
{
  return &protocol witness table for DispatchScheduler.Deadline;
}

unint64_t sub_2448217D4()
{
  unint64_t result;

  result = qword_25738CA28;
  if (!qword_25738CA28)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for StepScheduler.Deadline, &type metadata for StepScheduler.Deadline);
    atomic_store(result, (unint64_t *)&qword_25738CA28);
  }
  return result;
}

uint64_t sub_244821818()
{
  return MEMORY[0x24BEE13F0];
}

uint64_t sub_244821824()
{
  return MEMORY[0x24BEE1420];
}

unint64_t sub_244821834()
{
  unint64_t result;

  result = qword_25738CA30;
  if (!qword_25738CA30)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for StepScheduler.Deadline, &type metadata for StepScheduler.Deadline);
    atomic_store(result, (unint64_t *)&qword_25738CA30);
  }
  return result;
}

uint64_t sub_244821878()
{
  return MEMORY[0x24BEE1440];
}

uint64_t sub_244821884()
{
  return MEMORY[0x24BEE17E8];
}

_UNKNOWN **sub_244821890()
{
  return &protocol witness table for StepScheduler.Deadline;
}

uint64_t dispatch thunk of Scheduler.now.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Scheduler.schedule(after:qos:execute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t dispatch thunk of SchedulerDeadline.advanced(by:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for DispatchScheduler()
{
  return &type metadata for DispatchScheduler;
}

uint64_t initializeBufferWithCopyOfBuffer for DispatchScheduler.Deadline(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2448EA764();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for DispatchScheduler.Deadline(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2448EA764();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for DispatchScheduler.Deadline(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2448EA764();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for DispatchScheduler.Deadline(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2448EA764();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for DispatchScheduler.Deadline(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2448EA764();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for DispatchScheduler.Deadline(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2448EA764();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for DispatchScheduler.Deadline()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_244821A50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2448EA764();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for DispatchScheduler.Deadline()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_244821A98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2448EA764();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_244821AD8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2448EA764();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for StepScheduler()
{
  return objc_opt_self();
}

uint64_t method lookup function for StepScheduler()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of StepScheduler.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

ValueMetadata *type metadata accessor for StepScheduler.Deadline()
{
  return &type metadata for StepScheduler.Deadline;
}

_QWORD *sub_244821B84(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;

  v5 = result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(void **)(*(_QWORD *)(a4 + 48) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    result = v20;
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_244821D7C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *(_DWORD *)v11 = *(_DWORD *)(*(_QWORD *)(a4 + 48) + 4 * v16);
    *(_QWORD *)(v11 + 8) = v20;
    if (v13 == v10)
    {
      swift_retain();
      goto LABEL_38;
    }
    v11 += 16;
    result = swift_retain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_244821F7C(uint64_t a1, uint64_t a2)
{
  assignWithTake for CrashReport.Frame(a2, a1);
  return a2;
}

uint64_t sub_244821FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CrashReport.ID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_244821FFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CrashReport.ID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_244822040(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738CB98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_244822088(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738CB98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

__uint64_t static NSThread.currentID.getter()
{
  __uint64_t v1[2];

  v1[1] = *MEMORY[0x24BDAC8D0];
  v1[0] = 0;
  pthread_threadid_np(0, v1);
  return v1[0];
}

uint64_t InvalidationTrace.appending(link:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD **v2;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  _BYTE v8[144];

  sub_2447F0FEC(a1, (uint64_t)v8);
  v4 = *v2;
  sub_2448227D0((uint64_t)v8, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_244822210);
  sub_2448227D0((uint64_t)v8, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_244822210);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = sub_2447C245C(0, v4[2] + 1, 1, v4);
  v6 = v4[2];
  v5 = v4[3];
  if (v6 >= v5 >> 1)
    v4 = sub_2447C245C((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
  v4[2] = v6 + 1;
  sub_2447F0FEC((uint64_t)v8, (uint64_t)&v4[18 * v6 + 4]);
  result = sub_2448227D0((uint64_t)v8, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_244822834);
  *a2 = v4;
  return result;
}

uint64_t sub_244822210()
{
  return swift_bridgeObjectRetain();
}

uint64_t InvalidationTrace.links.getter()
{
  return swift_bridgeObjectRetain();
}

void static InvalidationTrace.empty.getter(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
}

PreviewsFoundationOS::InvalidationTrace __swiftcall InvalidationTrace.appending(links:)(Swift::OpaquePointer links)
{
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  PreviewsFoundationOS::InvalidationTrace result;
  uint64_t v6;

  v3 = v1;
  v6 = *v2;
  swift_bridgeObjectRetain();
  v4 = swift_bridgeObjectRetain();
  result.links._rawValue = (void *)sub_2447CC28C(v4);
  *v3 = v6;
  return result;
}

uint64_t InvalidationTrace.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  _BYTE v11[144];
  _BYTE v12[144];
  uint64_t v13;
  unint64_t v14;

  v1 = *v0;
  v13 = 0;
  v14 = 0xE000000000000000;
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  v3 = swift_bridgeObjectRetain();
  v4 = 0;
  v5 = v3 + 144 * v2 - 112;
  v10 = v3;
  do
  {
    sub_2447F0FEC(v5, (uint64_t)v11);
    sub_2448227D0((uint64_t)v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_244822210);
    sub_2448EBB5C();
    sub_2448EABC0();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    sub_2447F0FEC((uint64_t)v11, (uint64_t)v12);
    v6 = sub_24482283C((uint64_t)v12);
    v7 = sub_244822848((uint64_t)v12);
    if (v6 == 1)
    {
      v8 = *(_BYTE *)(v7 + 73);
      sub_2448227D0((uint64_t)v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_244822210);
      sub_2448EABC0();
      sub_2448EABC0();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
      {
        sub_2448227D0((uint64_t)v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_244822834);
        goto LABEL_11;
      }
      sub_2448EB79C();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (*(_QWORD *)(v7 + 8))
      {
        sub_2448EABC0();
        sub_2448EABC0();
        sub_2448EABC0();
        swift_bridgeObjectRelease();
      }
      sub_2448EB79C();
      swift_bridgeObjectRelease();
      Callsite.description.getter();
      sub_2448EABC0();
      swift_bridgeObjectRelease();
      sub_2448EABC0();
      sub_2448EABC0();
      swift_bridgeObjectRelease();
      sub_2448EB79C();
      swift_bridgeObjectRelease();
    }
    Callsite.description.getter();
    sub_2448EABC0();
    swift_bridgeObjectRelease();
    sub_2448EABC0();
    sub_2448EABC0();
    sub_2448227D0((uint64_t)v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_244822834);
    swift_bridgeObjectRelease();
LABEL_11:
    if (v2 == 1)
      goto LABEL_14;
    --v2;
    ++v4;
    v5 -= 144;
  }
  while (v2 <= *(_QWORD *)(v10 + 16));
  __break(1u);
LABEL_14:
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t static InvalidationTrace.reason(_:callsite:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  char v21;

  v13 = a3[1];
  v14 = *a3;
  v12 = a3[2];
  v7 = *((_QWORD *)a3 + 6);
  v8 = *((_BYTE *)a3 + 56);
  v9 = *((_BYTE *)a3 + 57);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A150);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_2448ECF10;
  v15[0] = a1;
  v15[1] = a2;
  v16 = v14;
  v17 = v13;
  v18 = v12;
  v19 = v7;
  v20 = v8;
  v21 = v9;
  sub_244822858((uint64_t)v15);
  sub_2447F0FEC((uint64_t)v15, v10 + 32);
  *a4 = v10;
  return swift_bridgeObjectRetain();
}

uint64_t sub_2448227D0(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 136);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), v4);
  return a1;
}

uint64_t sub_244822834()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_24482283C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96) >> 63;
}

uint64_t sub_244822848(uint64_t result)
{
  *(_QWORD *)(result + 96) &= ~0x8000000000000000;
  return result;
}

uint64_t sub_244822858(uint64_t result)
{
  unint64_t v1;

  v1 = *(unsigned __int8 *)(result + 96) | 0x8000000000000000;
  *(_QWORD *)(result + 72) &= 0x1FFuLL;
  *(_QWORD *)(result + 96) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InvalidationTrace()
{
  return &type metadata for InvalidationTrace;
}

uint64_t destroy for InvalidationTrace.Link()
{
  return sub_244822834();
}

uint64_t initializeWithCopy for InvalidationTrace.Link(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v13 = a2[9];
  v14 = a2[10];
  v15 = a2[11];
  v16 = a2[12];
  v17 = a2[13];
  v18 = a2[14];
  v19 = a2[15];
  v20 = a2[16];
  v21 = *((_BYTE *)a2 + 136);
  sub_244822210();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v17;
  *(_QWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v20;
  *(_BYTE *)(a1 + 136) = v21;
  return a1;
}

uint64_t assignWithCopy for InvalidationTrace.Link(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v13 = a2[9];
  v14 = a2[10];
  v15 = a2[11];
  v16 = a2[12];
  v17 = a2[13];
  v18 = a2[14];
  v19 = a2[15];
  v20 = a2[16];
  v21 = *((_BYTE *)a2 + 136);
  sub_244822210();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v17;
  *(_QWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v20;
  *(_BYTE *)(a1 + 136) = v21;
  sub_244822834();
  return a1;
}

__n128 __swift_memcpy137_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for InvalidationTrace.Link(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = *(_QWORD *)(a2 + 128);
  v4 = *(_BYTE *)(a2 + 136);
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  *(_QWORD *)(a1 + 128) = v3;
  *(_BYTE *)(a1 + 136) = v4;
  sub_244822834();
  return a1;
}

uint64_t getEnumTagSinglePayload for InvalidationTrace.Link(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 137))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 72) >> 9;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for InvalidationTrace.Link(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_BYTE *)(a1 + 136) = 0;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 137) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 72) = (unint64_t)-a2 << 9;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_OWORD *)(a1 + 121) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 137) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_244822CD0(uint64_t result, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned __int8 *)(result + 96) | (unint64_t)(a2 << 63);
  *(_QWORD *)(result + 72) &= 0x1FFuLL;
  *(_QWORD *)(result + 96) = v2;
  return result;
}

ValueMetadata *type metadata accessor for InvalidationTrace.Link()
{
  return &type metadata for InvalidationTrace.Link;
}

id static NSProcessInfo.operatingSystemIsAtLeast(majorVersion:minorVersion:patchVersion:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  id v7;
  _QWORD v9[3];

  v6 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v9[0] = a1;
  v9[1] = a2;
  v9[2] = a3;
  v7 = objc_msgSend(v6, sel_isOperatingSystemAtLeastVersion_, v9);

  return v7;
}

uint64_t assertUnreachable(message:callsite:)()
{
  return sub_244823F6C();
}

uint64_t assertUnreachable(_:file:line:column:function:)()
{
  return sub_244823F6C();
}

uint64_t assertEqual<A>(_:to:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  return sub_244823064(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (uint64_t (*)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))assertEqual<A>(_:to:callsite:)) & 1;
}

uint64_t assertNoThrow<A>(_:file:line:column:function:)@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5)
{
  a1();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 56))(a2, 0, 1, a5);
}

uint64_t assertTrue(_:file:line:column:function:)(uint64_t (*a1)(void))
{
  char v1;

  v1 = a1();
  if ((v1 & 1) == 0)
    sub_244823F6C();
  return v1 & 1;
}

uint64_t assertTrue(_:callsite:)(uint64_t (*a1)(void))
{
  char v1;

  v1 = a1();
  if ((v1 & 1) == 0)
    sub_244823F6C();
  return v1 & 1;
}

uint64_t sub_24482300C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_244823F6C(a3);
}

uint64_t assertEqual<A>(_:to:callsite:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_2448231B0(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE0980]);
}

uint64_t assertGreaterOrEqual<A>(_:to:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  return sub_244823064(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (uint64_t (*)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))assertGreaterOrEqual<A>(_:to:callsite:)) & 1;
}

uint64_t sub_244823064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t (*a13)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))
{
  _QWORD v14[2];
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v14[0] = a3;
  v14[1] = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  v18 = a8;
  v19 = a9;
  v20 = a10;
  return a13(a1, a2, v14, a11, a12) & 1;
}

uint64_t assertGreaterOrEqual<A>(_:to:callsite:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_2448231B0(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE07E8]);
}

uint64_t assertGreater<A>(_:than:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  return sub_244823064(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (uint64_t (*)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))assertGreater<A>(_:than:callsite:)) & 1;
}

uint64_t assertGreater<A>(_:than:callsite:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_2448231B0(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE07D8]);
}

uint64_t assertLessOrEqual<A>(_:to:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  return sub_244823064(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (uint64_t (*)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))assertLessOrEqual<A>(_:to:callsite:)) & 1;
}

uint64_t assertLessOrEqual<A>(_:to:callsite:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_2448231B0(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE07F0]);
}

uint64_t assertLess<A>(_:than:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  return sub_244823064(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (uint64_t (*)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))assertLess<A>(_:than:callsite:)) & 1;
}

uint64_t assertLess<A>(_:than:callsite:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_2448231B0(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE07E0]);
}

uint64_t sub_2448231B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  char v6;

  v6 = a6(a1, a2, a4, a5);
  if ((v6 & 1) == 0)
    sub_244823F6C();
  return v6 & 1;
}

uint64_t assertIdentical<A>(_:to:file:line:column:function:)(uint64_t a1, uint64_t a2)
{
  return assertIdentical<A>(_:to:callsite:)(a1, a2) & 1;
}

uint64_t assertIdentical<A>(_:to:callsite:)(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2 && a1 == a2)
      return 1;
  }
  else if (!a2)
  {
    return 1;
  }
  sub_244823F6C();
  return 0;
}

uint64_t assertUnreachable(file:line:column:function:)()
{
  return sub_244823F6C();
}

uint64_t assertionFailure(message:file:line:column:function:)()
{
  return sub_244823F6C();
}

uint64_t assertNil<A>(_:_:file:line:column:function:)(uint64_t a1, void (*a2)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14[2];
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v12 = a1;
  v14[0] = a4;
  v14[1] = a5;
  v15 = a6;
  v16 = a7;
  v17 = a8;
  v18 = a9;
  v19 = a10;
  v20 = a11;
  a2(a1, a2, a3, a4, a5, a6, a7, a8);
  LOBYTE(v12) = sub_244824144(v12, v14, a12);
  swift_bridgeObjectRelease();
  return v12 & 1;
}

BOOL assertNil<A>(_:callsite:message:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_244824144(a1, a2, a5);
}

BOOL assertNil<A>(_:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  uint64_t v11[2];
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v11[0] = a2;
  v11[1] = a3;
  v12 = a4;
  v13 = a5;
  v14 = a6;
  v15 = a7;
  v16 = a8;
  v17 = a9;
  return sub_244824144(a1, v11, a10);
}

uint64_t assertEmpty<A>(_:file:line:column:function:)()
{
  return assertEmpty<A>(_:callsite:)() & 1;
}

uint64_t assertEmpty<A>(_:callsite:)()
{
  char v0;

  v0 = sub_2448EB208();
  if ((v0 & 1) == 0)
    sub_244823F6C();
  return v0 & 1;
}

uint64_t assertNoThrow<A>(_:callsite:)@<X0>(void (*a1)(_QWORD *__return_ptr)@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  a1(a3);
  return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, 0, 1);
}

uint64_t assertCast<A>(_:to:file:line:column:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, char a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, char a10, uint64_t a11)
{
  _QWORD v12[2];
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v12[0] = a2;
  v12[1] = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  v17 = a9;
  v18 = a10;
  return assertCast<A>(_:to:callsite:)(a1, (uint64_t)v12, a11, a8);
}

uint64_t assertCast<A>(_:to:callsite:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t IsCastableTo;
  uint64_t v13;
  __int128 v15;
  uint64_t v16[2];
  char v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  v15 = *(_OWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_BYTE *)(a2 + 56);
  IsCastableTo = type metadata accessor for IsCastableTo(0, a3, a2, a3);
  v16[0] = v6;
  v16[1] = v7;
  v17 = v8;
  v18 = v15;
  v19 = v9;
  v20 = v10;
  v21 = v11;
  v13 = MEMORY[0x24951AC70](&protocol conformance descriptor for IsCastableTo<A>, IsCastableTo);
  return assertPredicate<A>(_:predicate:callsite:)(a1, v16, IsCastableTo, v13, a4);
}

uint64_t assertPredicate<A>(_:predicate:callsite:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  v29 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = sub_2448EB508();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v24 - v12;
  v15 = *a2;
  v14 = a2[1];
  v28 = *((unsigned __int8 *)a2 + 16);
  v16 = a2[3];
  v26 = a2[4];
  v27 = v16;
  v17 = a2[5];
  v24 = a2[6];
  v25 = v17;
  v18 = *((_BYTE *)a2 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 24))(a1, a3, a4);
  v19 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v13, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v30 = v15;
    v31 = v14;
    v32 = v28;
    v33 = v27;
    v34 = v26;
    v35 = v25;
    v36 = v24;
    v37 = v18;
    sub_244823F6C();
    v20 = 1;
    v21 = v29;
  }
  else
  {
    v22 = v29;
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v29, v13, AssociatedTypeWitness);
    v20 = 0;
    v21 = v22;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v21, v20, 1, AssociatedTypeWitness);
}

uint64_t static IsCastableTo.isSatisfied(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v7;

  sub_2447C92C4(a1, (uint64_t)&v7);
  v5 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, v5 ^ 1u, 1, a2);
}

uint64_t sub_244823894@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static IsCastableTo.isSatisfied(by:)(a1, *(_QWORD *)(a2 + 16), a3);
}

uint64_t assertInhabit<A>(_:file:line:column:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v13[0] = a2;
  v13[1] = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  v18 = a8;
  v19 = a10;
  return assertInhabit<A>(_:callsite:)(a1, v13, a11, a12, a9);
}

uint64_t assertInhabit<A>(_:callsite:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  _QWORD v17[2];
  char v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v7 = *a2;
  v8 = a2[1];
  v9 = *((_BYTE *)a2 + 16);
  v16 = *(_OWORD *)(a2 + 3);
  v10 = a2[5];
  v11 = a2[6];
  v12 = *((_BYTE *)a2 + 56);
  v13 = type metadata accessor for Inhabited(0, a3, *(_QWORD *)(a4 + 8), a4);
  v17[0] = v7;
  v17[1] = v8;
  v18 = v9;
  v19 = v16;
  v20 = v10;
  v21 = v11;
  v22 = v12;
  v14 = MEMORY[0x24951AC70](&protocol conformance descriptor for Inhabited<A>, v13);
  return assertPredicate<A>(_:wrapper:callsite:)(a1, (uint64_t)v17, v13, v14, a5);
}

uint64_t assertPredicate<A>(_:wrapper:callsite:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  uint64_t AssociatedConformanceWitness;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[2];
  char v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  v22 = a4;
  v23 = a1;
  v24 = a5;
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v7 = sub_2448EB508();
  v21 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v19 - v8;
  v10 = *(_QWORD *)a2;
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(_BYTE *)(a2 + 16);
  v19 = *(_OWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 48);
  LOBYTE(a2) = *(_BYTE *)(a2 + 56);
  v15 = swift_checkMetadataState();
  v29[0] = v10;
  v29[1] = v11;
  v30 = v12;
  v31 = v19;
  v32 = v13;
  v33 = v14;
  v34 = a2;
  v16 = v23;
  assertPredicate<A>(_:predicate:callsite:)(v23, v29, v15, AssociatedConformanceWitness, (uint64_t)v9);
  v26 = a3;
  v27 = v22;
  v28 = v16;
  sub_244818D58((void (*)(char *, char *))sub_24482426C, (uint64_t)v25, MEMORY[0x24BEE4078], a3, v17, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v9, v7);
}

uint64_t assertUnwrap<A>(_:file:line:column:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11)
{
  _QWORD v12[2];
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v12[0] = a2;
  v12[1] = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  v17 = a8;
  v18 = a10;
  return assertUnwrap<A>(_:callsite:)(a1, (uint64_t)v12, a11, a4, a9);
}

uint64_t assertUnwrap<A>(_:callsite:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t IsSome;
  uint64_t v14;
  __int128 v16;
  uint64_t v17[2];
  char v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v7 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_BYTE *)(a2 + 16);
  v16 = *(_OWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_BYTE *)(a2 + 56);
  IsSome = type metadata accessor for IsSome(0, a3, a3, a4);
  v17[0] = v7;
  v17[1] = v8;
  v18 = v9;
  v19 = v16;
  v20 = v10;
  v21 = v11;
  v22 = v12;
  v14 = MEMORY[0x24951AC70](&protocol conformance descriptor for IsSome<A>, IsSome);
  return assertPredicate<A>(_:predicate:callsite:)(a1, v17, IsSome, v14, a5);
}

uint64_t static IsSome.isSatisfied(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6 = sub_2448EB508();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v13 - v7;
  (*(void (**)(char *, uint64_t))(v9 + 16))((char *)&v13 - v7, a1);
  v10 = *(_QWORD *)(a2 - 8);
  v11 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, a2) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v8, a2);
    v11 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a3, v11, 1, a2);
}

uint64_t sub_244823D04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static IsSome.isSatisfied(by:)(a1, *(_QWORD *)(a2 + 16), a3);
}

uint64_t assertPredicate<A>(_:wrapper:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  return sub_244823E90(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (uint64_t (*)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))assertPredicate<A>(_:wrapper:callsite:));
}

uint64_t sub_244823D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD v15[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = type metadata accessor for Predicated(0, AssociatedTypeWitness, AssociatedConformanceWitness, v10);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v15 - v12;
  static Predicated.unverified(value:proof:)(a2, a1, AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v15 - v12);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 24))(v13, a3, a4);
}

uint64_t assertPredicate<A>(_:predicate:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  return sub_244823E90(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (uint64_t (*)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))assertPredicate<A>(_:predicate:callsite:));
}

uint64_t sub_244823E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t (*a13)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))
{
  _QWORD v14[2];
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v14[0] = a3;
  v14[1] = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  v18 = a8;
  v19 = a9;
  v20 = a10;
  return a13(a1, a2, v14, a11, a12);
}

uint64_t assertMainThread(file:line:column:function:)()
{
  uint64_t result;

  result = (uint64_t)objc_msgSend((id)objc_opt_self(), sel_isMainThread);
  if ((result & 1) == 0)
    return sub_244823F6C();
  return result;
}

uint64_t sub_244823F6C()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::String v9;

  type metadata accessor for CoreAnalyticsLogger();
  inited = swift_initStackObject();
  __swift_instantiateConcreteTypeFromMangledName(qword_25738CCE8);
  v1 = swift_initStackObject();
  *(_DWORD *)(v1 + 20) = 0;
  *(_BYTE *)(v1 + 16) = 2;
  *(_QWORD *)(inited + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName(qword_25738B058);
  v2 = swift_initStackObject();
  *(_OWORD *)(v2 + 16) = xmmword_2448ECF10;
  *(_QWORD *)(v2 + 32) = 1701603686;
  *(_QWORD *)(v2 + 40) = 0xE400000000000000;
  sub_2448EB7D8();
  v3 = (void *)sub_2448EAA70();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v3, sel_lastPathComponent);

  v5 = sub_2448EAA94();
  v7 = v6;

  sub_2448EABC0();
  sub_2448EBB5C();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  sub_2448EABC0();
  sub_2448EBB5C();
  sub_2448EABC0();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 48) = v5;
  *(_QWORD *)(v2 + 56) = v7;
  *(_BYTE *)(v2 + 64) = 0;
  v8 = sub_2447C8758(v2);
  v9._countAndFlagsBits = 0x6573734174666F73;
  v9._object = (void *)0xEA00000000007472;
  CoreAnalyticsLogger.logEvent(identifierSuffix:fields:)(v9, (Swift::OpaquePointer)v8);
  swift_release();
  return swift_bridgeObjectRelease();
}

BOOL sub_244824144(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v6 = sub_2448EB508();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v18 - v8;
  v10 = *a2;
  v11 = a2[1];
  v12 = *((_BYTE *)a2 + 16);
  v13 = a2[3];
  v14 = a2[4];
  v20 = a2[5];
  v21 = v10;
  v19 = a2[6];
  v15 = *((_BYTE *)a2 + 56);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v18 - v8, a1, v6);
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 48))(v9, 1, a3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (v16 != 1)
  {
    v22 = v21;
    v23 = v11;
    v24 = v12;
    v25 = v13;
    v26 = v14;
    v27 = v20;
    v28 = v19;
    v29 = v15;
    sub_244823F6C();
  }
  return v16 == 1;
}

uint64_t type metadata accessor for IsCastableTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IsCastableTo);
}

uint64_t sub_24482426C(uint64_t a1)
{
  uint64_t *v1;

  return sub_244823D4C(a1, v1[4], v1[2], v1[3]);
}

uint64_t type metadata accessor for IsSome(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IsSome);
}

uint64_t type metadata accessor for PropertyListArchiver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PropertyListArchiver);
}

uint64_t PropertyListArchiver.archiveCase<A, B, C, D>(_:parameter:withKey:withDefault:)()
{
  return PropertyListArchiver.archiveCase<A, B, C, D>(_:parameter:withKey:withDefault:)();
}

{
  return PropertyListArchiver.archiveCase<A, B, C, D>(_:parameter:withKey:withDefault:)();
}

{
  return PropertyListArchiver.archiveCase<A, B, C, D>(_:parameter:withKey:withDefault:)();
}

uint64_t PropertyListArchiver.archiveCase<A, B, C>(_:parameter:withKey:withDefault:)()
{
  return PropertyListArchiver.archiveCase<A, B, C>(_:parameter:withKey:withDefault:)();
}

{
  return PropertyListArchiver.archiveCase<A, B, C>(_:parameter:withKey:withDefault:)();
}

uint64_t PropertyListArchiver.archiveCase<A, B>(_:parameter:withKey:withDefault:)()
{
  return PropertyListArchiver.archiveCase<A, B>(_:parameter:withKey:withDefault:)();
}

uint64_t PropertyListArchiver.archiveCase<A, B, C, D, E>(_:parameter:withKey:withDefault:)()
{
  return PropertyListArchiver.archiveCase<A, B, C, D, E>(_:parameter:withKey:withDefault:)();
}

{
  return PropertyListArchiver.archiveCase<A, B, C, D, E>(_:parameter:withKey:withDefault:)();
}

{
  return PropertyListArchiver.archiveCase<A, B, C, D, E>(_:parameter:withKey:withDefault:)();
}

{
  return PropertyListArchiver.archiveCase<A, B, C, D, E>(_:parameter:withKey:withDefault:)();
}

double Continuation.init(file:line:column:function:initializationInfo:failureMode:resume:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, __int128 *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _QWORD *v18;
  uint64_t v19;
  double result;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  uint64_t v30;

  *(_QWORD *)&v22 = a1;
  *((_QWORD *)&v22 + 1) = a2;
  v23 = a3;
  v24 = a4;
  v25 = a5;
  v26 = a6;
  v27 = a7;
  v28 = a8;
  v21 = *a12;
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = a15;
  v18[3] = a16;
  v18[4] = a17;
  v18[5] = a13;
  v18[6] = a14;
  Continuation.init(callsite:initializationInfo:failureMode:resume:)(&v22, a10, a11, (uint64_t *)&v21, (uint64_t)sub_244824934, (uint64_t)v18, a15, a16, (uint64_t (**)(__int128 *, uint64_t))&v29, a17);
  v19 = v30;
  result = *(double *)&v29;
  *(_OWORD *)a9 = v29;
  *(_QWORD *)(a9 + 16) = v19;
  return result;
}

uint64_t Continuation.resume(with:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t (**v9)(_QWORD *, uint64_t);
  uint64_t (*v10)(_QWORD *, uint64_t);
  _QWORD v12[2];
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v10 = *v9;
  v12[0] = a2;
  v12[1] = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  v17 = a8;
  v18 = a9;
  return v10(v12, a1);
}

uint64_t Continuation.resume(returning:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  void (**v10)(_QWORD *, char *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(_QWORD *, char *);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  v25 = a1;
  v26 = a8;
  v23 = a6;
  v24 = a7;
  v22 = a5;
  v14 = *(_QWORD *)(a10 + 16);
  v15 = sub_2448EBD48();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v21 - v17;
  v19 = *v10;
  v27[0] = a2;
  v27[1] = a3;
  v28 = a4;
  v29 = v22;
  v30 = v23;
  v31 = v24;
  v32 = v26;
  v33 = a9;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))((char *)&v21 - v17, v25, v14);
  swift_storeEnumTagMultiPayload();
  v19(v27, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t Continuation.resume(throwing:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  void (**v10)(_QWORD *, char *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(_QWORD *, char *);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  v25 = a1;
  v26 = a8;
  v23 = a6;
  v24 = a7;
  v22 = a5;
  v14 = *(_QWORD *)(a10 + 24);
  v15 = sub_2448EBD48();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v21 - v17;
  v19 = *v10;
  v27[0] = a2;
  v27[1] = a3;
  v28 = a4;
  v29 = v22;
  v30 = v23;
  v31 = v24;
  v32 = v26;
  v33 = a9;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))((char *)&v21 - v17, v25, v14);
  swift_storeEnumTagMultiPayload();
  v19(v27, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t Continuation.init(callsite:initializationInfo:failureMode:resume:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t (**a9)(__int128 *a1, uint64_t a2)@<X8>, uint64_t a10)
{
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(__int128 *, uint64_t);
  _OWORD v23[2];
  _OWORD v24[2];

  v17 = a1[1];
  v23[0] = *a1;
  v23[1] = v17;
  v24[0] = a1[2];
  *(_OWORD *)((char *)v24 + 9) = *(_OWORD *)((char *)a1 + 41);
  v18 = *a4;
  v19 = a4[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738AF78);
  swift_allocObject();
  v20 = sub_2447E5D90(v23, a2, a3, v18, v19, 0x61756E69746E6F43, 0xEC0000006E6F6974, 0x64656D75736572, 0xE700000000000000);
  v21 = (uint64_t (*)(__int128 *, uint64_t))swift_allocObject();
  *((_QWORD *)v21 + 2) = a7;
  *((_QWORD *)v21 + 3) = a8;
  *((_QWORD *)v21 + 4) = a10;
  *((_QWORD *)v21 + 5) = v20;
  *((_QWORD *)v21 + 6) = a5;
  *((_QWORD *)v21 + 7) = a6;
  *a9 = sub_244824984;
  a9[1] = v21;
  a9[2] = (uint64_t (*)(__int128 *, uint64_t))v20;
  return swift_retain();
}

uint64_t sub_244824828(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *, uint64_t))
{
  __int128 v7;
  uint64_t v8;
  uint64_t result;
  _OWORD v10[2];
  _OWORD v11[3];
  __int128 v12;
  __int128 v13;
  _OWORD v14[2];

  v7 = a1[1];
  v12 = *a1;
  v13 = v7;
  v14[0] = a1[2];
  *(_OWORD *)((char *)v14 + 9) = *(__int128 *)((char *)a1 + 41);
  v8 = *(_QWORD *)(a3 + 144);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 76));
  sub_2447E5E3C((__int128 *)(v8 + 16), nullsub_1, (uint64_t *)&v12, a3, (void (*)(uint64_t, _QWORD *))sub_2447E1AC8, v10);
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 76));
  result = swift_release();
  if ((v10[0] & 1) == 0)
  {
    v10[0] = v12;
    v10[1] = v13;
    v11[0] = v14[0];
    *(_OWORD *)((char *)v11 + 9) = *(_OWORD *)((char *)v14 + 9);
    return a4(v10, a2);
  }
  return result;
}

uint64_t sub_244824910()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_244824934(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 40))(a2);
}

uint64_t sub_244824958()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_244824984(__int128 *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_244824828(a1, a2, *(_QWORD *)(v2 + 40), *(uint64_t (**)(_OWORD *, uint64_t))(v2 + 48));
}

double Continuation.init(file:line:column:function:initializationInfo:failureMode:wrapping:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, _OWORD *a9@<X8>, uint64_t a10, uint64_t a11, _OWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  double result;
  _OWORD *v26;
  _OWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  uint64_t v46;

  v33 = a8;
  v31 = a6;
  v32 = a7;
  v29 = a4;
  v30 = a5;
  v28 = a3;
  v36 = a9;
  v34 = a11;
  v35 = a10;
  v27 = a12;
  v18 = sub_2448EAF44();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v27 - v20;
  *(_QWORD *)&v38 = a1;
  *((_QWORD *)&v38 + 1) = a2;
  v39 = v28;
  v40 = v29;
  v41 = v30;
  v42 = v31;
  v43 = v32;
  v44 = v33;
  v37 = *a12;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)&v27 - v20, a13, v18);
  v22 = (*(unsigned __int8 *)(v19 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v23 = (char *)swift_allocObject();
  *((_QWORD *)v23 + 2) = a14;
  *((_QWORD *)v23 + 3) = a15;
  *((_QWORD *)v23 + 4) = a16;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(&v23[v22], v21, v18);
  Continuation.init(callsite:initializationInfo:failureMode:resume:)(&v38, v35, v34, (uint64_t *)&v37, (uint64_t)sub_244824BAC, (uint64_t)v23, a14, a15, (uint64_t (**)(__int128 *, uint64_t))&v45, a16);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a13, v18);
  v24 = v46;
  result = *(double *)&v45;
  v26 = v36;
  *v36 = v45;
  *((_QWORD *)v26 + 2) = v24;
  return result;
}

uint64_t sub_244824B44()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_2448EAF44();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_244824BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_2448EAF44();
  return sub_24488C990(a2, v3);
}

uint64_t Continuation.resume(callsite:with:)(__int128 *a1)
{
  uint64_t (**v1)(__int128 *);
  char v2;
  char v3;
  uint64_t (*v4)(__int128 *);
  __int128 v6;
  char v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v2 = *((_BYTE *)a1 + 16);
  v3 = *((_BYTE *)a1 + 56);
  v4 = *v1;
  v6 = *a1;
  v7 = v2;
  v8 = *(__int128 *)((char *)a1 + 24);
  v9 = *(__int128 *)((char *)a1 + 40);
  v10 = v3;
  return v4(&v6);
}

uint64_t Continuation.resume<>(file:line:column:function:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  void (**v8)(_QWORD *, char *);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(_QWORD *, char *);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _QWORD v24[2];
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v23 = a8;
  v21 = a6;
  v22 = a7;
  v19 = a4;
  v20 = a5;
  v12 = sub_2448EBD48();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v18 - v14;
  v16 = *v8;
  v24[0] = a1;
  v24[1] = a2;
  v25 = a3;
  v26 = v19;
  v27 = v20;
  v28 = v21;
  v29 = v22;
  v30 = v23;
  static Result<>.success.getter();
  v16(v24, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

double static Continuation.noop.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  __int128 v10;
  __int128 v11;

  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  sub_2447C72E4(&v11);
  v10 = v11;
  return Continuation.init(file:line:column:function:initializationInfo:failureMode:resume:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Continuation.swift", 124, 2, 126, 14, (uint64_t)"noop", 4, 2, a4, 0, 0, &v10, (uint64_t)nullsub_1, (uint64_t)v8, a1, a2, a3);
}

uint64_t sub_244824E14()
{
  return swift_deallocObject();
}

uint64_t sub_244824E24@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (**a8)(__int128 *a1, uint64_t a2)@<X8>)
{
  uint64_t *v8;
  char v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v28[2];
  __int128 v29;
  char v30;
  __int128 v31;
  __int128 v32;
  char v33;

  v12 = *((_BYTE *)a1 + 16);
  v13 = *((_BYTE *)a1 + 56);
  v14 = v8[1];
  v22 = *v8;
  v15 = (_QWORD *)v8[2];
  v29 = *a1;
  v30 = v12;
  v31 = *(__int128 *)((char *)a1 + 24);
  v32 = *(__int128 *)((char *)a1 + 40);
  v33 = v13;
  v16 = v15[10];
  v17 = v15[11];
  v19 = v15[13];
  v28[0] = v15[12];
  v18 = v28[0];
  v28[1] = v19;
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = *(_OWORD *)(a4 + 16);
  *(_QWORD *)(v20 + 32) = a5;
  *(_QWORD *)(v20 + 40) = a6;
  *(_QWORD *)(v20 + 48) = *(_QWORD *)(a4 + 32);
  *(_QWORD *)(v20 + 56) = a7;
  *(_QWORD *)(v20 + 64) = v22;
  *(_QWORD *)(v20 + 72) = v14;
  *(_QWORD *)(v20 + 80) = v15;
  *(_QWORD *)(v20 + 88) = a2;
  *(_QWORD *)(v20 + 96) = a3;
  sub_2447F0EAC(v16);
  sub_2447E23C0(v18);
  swift_retain();
  swift_retain();
  swift_retain();
  return Continuation.init(callsite:initializationInfo:failureMode:resume:)(&v29, v16, v17, v28, (uint64_t)sub_244825668, v20, a5, a6, a8, a7);
}

uint64_t sub_244824F60(__int128 *a1, uint64_t a2, void (*a3)(__int128 *, char *), uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  __int128 v16;
  char v17;
  __int128 v18;
  __int128 v19;
  char v20;

  v10 = sub_2448EBD48();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v16 - v12;
  LOBYTE(v12) = *((_BYTE *)a1 + 16);
  v14 = *((_BYTE *)a1 + 56);
  v16 = *a1;
  v17 = v12;
  v18 = *(__int128 *)((char *)a1 + 24);
  v19 = *(__int128 *)((char *)a1 + 40);
  v20 = v14;
  a6(a2);
  a3(&v16, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t Continuation.contramap<A>(file:line:column:function:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t (**a9)(__int128 *a1, uint64_t a2)@<X8>, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13)
{
  __int128 *v13;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;

  v15 = *((_QWORD *)v13 + 2);
  v27 = *v13;
  v28 = v15;
  *(_QWORD *)&v20 = a1;
  *((_QWORD *)&v20 + 1) = a2;
  v21 = a3;
  v22 = a4;
  v23 = a5;
  v24 = a6;
  v25 = a7;
  v26 = a8;
  v16 = (_QWORD *)swift_allocObject();
  v17 = a12[3];
  v16[2] = a12[2];
  v16[3] = v17;
  v18 = a12[4];
  v16[4] = a13;
  v16[5] = v18;
  v16[6] = a10;
  v16[7] = a11;
  swift_retain();
  sub_244824E24(&v20, (uint64_t)sub_244825144, (uint64_t)v16, (uint64_t)a12, a13, v17, v18, a9);
  return swift_release();
}

uint64_t sub_244825120()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_244825144@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void (*v3)(char *);
  uint64_t v4;

  v3 = *(void (**)(char *))(v1 + 48);
  v4 = sub_2448EBD48();
  return sub_2448A6CDC(v3, v4, a1);
}

uint64_t Continuation.contramapError<A>(file:line:column:function:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t (**a9)(__int128 *a1, uint64_t a2)@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  __int128 *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  uint64_t v29;

  v16 = *((_QWORD *)v14 + 2);
  v28 = *v14;
  v29 = v16;
  *(_QWORD *)&v21 = a1;
  *((_QWORD *)&v21 + 1) = a2;
  v22 = a3;
  v23 = a4;
  v24 = a5;
  v25 = a6;
  v26 = a7;
  v27 = a8;
  v17 = swift_allocObject();
  v20 = *(_OWORD *)(a12 + 16);
  *(_OWORD *)(v17 + 16) = v20;
  v18 = *(_QWORD *)(a12 + 32);
  *(_QWORD *)(v17 + 32) = a13;
  *(_QWORD *)(v17 + 40) = v18;
  *(_QWORD *)(v17 + 48) = a14;
  *(_QWORD *)(v17 + 56) = a10;
  *(_QWORD *)(v17 + 64) = a11;
  swift_retain();
  sub_244824E24(&v21, (uint64_t)sub_244825364, v17, a12, v20, a13, a14, a9);
  return swift_release();
}

uint64_t sub_244825280@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v6 = sub_2448EBD48();
  MEMORY[0x24BDAC7A8](v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v10 - v8, a1, v6);
  return sub_244879BF4(a2, v6, a3);
}

uint64_t sub_244825340()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_244825364@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_244825280(a1, *(void (**)(char *))(v2 + 56), a2);
}

uint64_t Continuation.contramapResult<A, B>(file:line:column:function:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t (**a9)(__int128 *a1, uint64_t a2)@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  __int128 *v15;
  uint64_t v16;
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;

  v16 = *((_QWORD *)v15 + 2);
  v25 = *v15;
  v26 = v16;
  *(_QWORD *)&v18 = a1;
  *((_QWORD *)&v18 + 1) = a2;
  v19 = a3;
  v20 = a4;
  v21 = a5;
  v22 = a6;
  v23 = a7;
  v24 = a8;
  return sub_244824E24(&v18, a10, a11, a12, a13, a14, a15, a9);
}

uint64_t Continuation<>.tryContramap<A, B>(file:line:column:function:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t (**a9)(__int128 *a1, uint64_t a2)@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  __int128 *v15;
  uint64_t v17;
  _QWORD *v18;
  __int128 v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;

  v17 = *((_QWORD *)v15 + 2);
  v27 = *v15;
  v28 = v17;
  *(_QWORD *)&v20 = a1;
  *((_QWORD *)&v20 + 1) = a2;
  v21 = a3;
  v22 = a4;
  v23 = a5;
  v24 = a6;
  v25 = a7;
  v26 = a8;
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = *(_QWORD *)(a12 + 16);
  v18[3] = a13;
  v18[4] = a14;
  v18[5] = a15;
  v18[6] = a10;
  v18[7] = a11;
  swift_retain();
  sub_244824E24(&v20, (uint64_t)sub_2448254C0, (uint64_t)v18, a12, a13, a14, a15, a9);
  return swift_release();
}

uint64_t sub_2448254C0@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(char *);
  uint64_t v6;

  v3 = v1[2];
  v5 = (void (*)(char *))v1[6];
  v4 = v1[7];
  v6 = sub_2448EBD48();
  return Result.tryMap<A>(_:)(v5, v4, v6, v3, a1);
}

uint64_t destroy for CancellationToken()
{
  swift_release();
  return swift_release();
}

_QWORD *_s20PreviewsFoundationOS17CancellationTokenVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for CancellationToken(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for CancellationToken(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t type metadata accessor for Continuation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Continuation);
}

uint64_t sub_244825634()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_244825668(__int128 *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_244824F60(a1, a2, *(void (**)(__int128 *, char *))(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), *(void (**)(uint64_t))(v2 + 88));
}

void static TimeoutError.defaultError@Sendable (_:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
}

uint64_t Future.timeout(dsoHandle:file:line:column:function:after:timeoutError:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[5];
  _QWORD v36[2];
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;

  v33 = a12;
  v34 = a11;
  v20 = sub_2448EA710();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[0] = a3;
  v36[1] = a4;
  v37 = a5;
  v38 = a6;
  v39 = a7;
  v40 = a8;
  v41 = a9;
  v42 = a10;
  v25 = v24;
  (*(void (**)(char *, _QWORD))(v21 + 104))(v23, *MEMORY[0x24BEE5478]);
  v35[3] = &type metadata for SimpleTimeoutTimer;
  v35[4] = &protocol witness table for SimpleTimeoutTimer;
  sub_244803860();
  v26 = sub_2448EB43C();
  type metadata accessor for DelayedInvocation();
  v27 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CDF0);
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = v26;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CDF8);
  v29 = swift_allocObject();
  *(_DWORD *)(v29 + 44) = 0;
  *(_QWORD *)(v29 + 24) = 0;
  *(_QWORD *)(v29 + 32) = 0;
  *(_QWORD *)(v29 + 16) = nullsub_1;
  *(_BYTE *)(v29 + 40) = 1;
  *(_QWORD *)(v28 + 24) = v29;
  *(_QWORD *)(v27 + 16) = v28;
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v25);
  v35[0] = v27;
  *(double *)&v35[1] = a1;
  v30 = Future.timeout(callsite:using:timeoutError:)((uint64_t)v36, (uint64_t)v35, v34, v33);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  return v30;
}

uint64_t Future.timeout(callsite:using:timeoutError:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v14;
  _QWORD v16[5];
  uint64_t v17[2];
  char v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  v14 = *(_OWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_BYTE *)(a1 + 56);
  type metadata accessor for TimeoutFuture(0, *(_QWORD *)(*(_QWORD *)v4 + 80), a3, a4);
  v17[0] = v7;
  v17[1] = v8;
  v18 = v9;
  v19 = v14;
  v20 = v10;
  v21 = v11;
  v22 = v12;
  sub_2447CE01C(a2, (uint64_t)v16);
  swift_allocObject();
  swift_retain();
  swift_retain();
  return sub_244825D2C(v17, v4, v16, a3, a4);
}

uint64_t sub_244825954(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  swift_allocObject();
  return sub_244825D2C(a1, a2, a3, a4, a5);
}

uint64_t (*static TimeoutError.timedOut(waitingFor:)(uint64_t a1, uint64_t a2))@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  swift_bridgeObjectRetain();
  return sub_244826A98;
}

uint64_t TimeoutError.highValueTitle.getter()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 24) == 1)
  {
    sub_2448EB79C();
    sub_2448EABC0();
    sub_2448EABC0();
  }
  else
  {
    sub_2448EB79C();
  }
  sub_2448EABC0();
  sub_2448EB0B8();
  sub_2448EABC0();
  return 0;
}

uint64_t TimeoutError.additionalInfo.getter()
{
  return 0;
}

uint64_t TimeoutError.additionalDiagnostics.getter()
{
  return 0;
}

uint64_t sub_244825B68()
{
  uint64_t v0;

  return sub_244850AD4(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t Future.flattened<A>()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6[2];

  v1 = *v0;
  v2 = swift_allocObject();
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 80) + 16);
  *(_QWORD *)(v2 + 16) = v3;
  v6[0] = 0;
  v6[1] = 0;
  v4 = sub_24487B214((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/TimeoutFuture.swift", 125, 2, 80, 13, (uint64_t)"flattened()", 11, 2, v6, (uint64_t)sub_244826AC0, v2, v3);
  swift_release();
  sub_24481241C(0);
  return v4;
}

uint64_t sub_244825C28@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v4 = sub_2448EBD48();
  v5 = sub_2448EBD48();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (uint64_t *)((char *)&v10 - v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v10 - v6, a1, v5);
  if (swift_getEnumCaseMultiPayload() != 1)
    return (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, v7, v4);
  *a2 = *v7;
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_244825D2C(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t (*)(), uint64_t, uint64_t, uint64_t);
  char v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v9 = *v5;
  v10 = *a1;
  v11 = a1[1];
  v12 = *((_BYTE *)a1 + 16);
  v29 = *(_OWORD *)(a1 + 3);
  v27 = a1[6];
  v28 = a1[5];
  v26 = *((_BYTE *)a1 + 56);
  *(_QWORD *)&v30 = a2;
  sub_2447CE01C((uint64_t)a3, (uint64_t)&v30 + 8);
  v15 = type metadata accessor for TimeoutFuture.Activity(0, *(_QWORD *)(v9 + 200), v13, v14);
  swift_retain();
  swift_retain();
  v16 = sub_24481320C(&v30, v15);
  (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(&v30, v15);
  v5[13] = v16;
  sub_2447CE01C((uint64_t)a3, (uint64_t)&v30);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a4;
  *(_QWORD *)(v17 + 24) = a5;
  sub_2447F3530(&v30, v17 + 32);
  v5[14] = (uint64_t)sub_244827160;
  v5[15] = v17;
  swift_retain();
  swift_release();
  *(_QWORD *)&v30 = v10;
  *((_QWORD *)&v30 + 1) = v11;
  v31 = v12;
  v32 = v29;
  v33 = v28;
  v34 = v27;
  v35 = v26;
  v21 = sub_2448D24B4((uint64_t)&v30, v18, v19, v20);
  v22 = a3[3];
  v23 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v22);
  v24 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v23 + 16);
  swift_retain_n();
  v24(sub_244827264, v21, v22, v23);
  swift_release();
  swift_retain();
  Future.observeFinish(_:)((uint64_t)sub_2448271B8, v21);
  swift_release_n();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a3);
  return v21;
}

uint64_t sub_244825F08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = v0;
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 200);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v3 = sub_2448EBD48();
  v6 = type metadata accessor for FutureTermination(0, v3, v4, v5);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = &v20[-v8];
  v22 = *(_QWORD *)(v1 + 104);
  v21 = v2;
  type metadata accessor for TimeoutFuture.Activity(255, v2, v10, v11);
  v12 = sub_2448EA5D8();
  type metadata accessor for Future(255, v2, v13, v14);
  v15 = sub_2448EB508();
  swift_retain();
  v16 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v12);
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_2447B9000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/TimeoutFuture.swift", 125, 2, 136, 48, (uint64_t)"handleTimeout()", 15, 2, (uint64_t)sub_244827268, (uint64_t)v20, v12, v15, v16);
  result = swift_release();
  if (v23)
  {
    v18 = *(uint64_t (**)(uint64_t))(v1 + 112);
    v19 = swift_retain();
    *v9 = v18(v19);
    swift_storeEnumTagMultiPayload();
    sub_2448D2CA4((uint64_t)v9);
    (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
    sub_2448D429C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/TimeoutFuture.swift", 125, 2, 145, 33, (uint64_t)"handleTimeout()", 15, 2);
    return swift_release_n();
  }
  return result;
}

uint64_t sub_2448260F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[48];

  v30 = a1;
  v5 = *(_QWORD *)(*v4 + 200);
  v6 = type metadata accessor for FutureTermination(0, v5, a3, a4);
  v31 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v30 - v7;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v9 = sub_2448EBD48();
  v12 = type metadata accessor for FutureTermination(0, v9, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (uint64_t *)((char *)&v30 - v14);
  v36[0] = v4[13];
  v33 = v5;
  type metadata accessor for TimeoutFuture.Activity(255, v5, v16, v17);
  v18 = sub_2448EA5D8();
  swift_retain();
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738CF20);
  v20 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v18);
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_2447B9000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/TimeoutFuture.swift", 125, 2, 117, 47, (uint64_t)"receiveUnderlyingFinish(_:)", 27, 2, (uint64_t)sub_2448271BC, (uint64_t)v32, v18, v19, v20);
  swift_release();
  sub_2448271D4((uint64_t)v39, (uint64_t)&v34);
  if (v35)
  {
    v21 = sub_2447F3530(&v34, (uint64_t)v36);
    MEMORY[0x24BDAC7A8](v21);
    v29[2] = v5;
    v22 = v30;
    FutureTermination.map<A>(_:)((void (*)(_QWORD *))sub_24482725C, (uint64_t)v29, v6, v9, v15);
    sub_2448D2CA4((uint64_t)v15);
    (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
    v23 = v31;
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v8, v22, v6);
    if (swift_getEnumCaseMultiPayload() >= 2)
    {
      v27 = v37;
      v28 = v38;
      __swift_project_boxed_opaque_existential_1(v36, v37);
      (*(void (**)(uint64_t, uint64_t))(v28 + 32))(v27, v28);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v6);
      v24 = v37;
      v25 = v38;
      __swift_project_boxed_opaque_existential_1(v36, v37);
      (*(void (**)(uint64_t, uint64_t))(v25 + 24))(v24, v25);
    }
    sub_24482721C((uint64_t)v39);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  }
  else
  {
    sub_24482721C((uint64_t)v39);
    return sub_24482721C((uint64_t)&v34);
  }
}

double sub_2448263BC@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *, uint64_t);
  double result;
  uint64_t v11;
  __int128 v12;

  v7 = type metadata accessor for TimeoutFuture.Activity(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(&v11, a1, v7);
  v9 = *(void (**)(uint64_t *, uint64_t))(v8 + 8);
  if (v11)
  {
    v9(a1, v7);
    swift_release();
    sub_2447F3530(&v12, a5);
    result = 0.0;
    *((_OWORD *)a1 + 1) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else
  {
    v9(&v11, v7);
    *(_QWORD *)(a5 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
  return result;
}

uint64_t sub_244826478@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v4 = sub_2448EBD48();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  sub_2448EBD48();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_244826514@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t *, uint64_t);
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v7 = type metadata accessor for TimeoutFuture.Activity(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(&v12, a1, v7);
  v9 = *(uint64_t (**)(uint64_t *, uint64_t))(v8 + 8);
  if (v12)
  {
    v9(a1, v7);
    v10 = v12;
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
    *((_OWORD *)a1 + 1) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else
  {
    result = v9(&v12, v7);
    v10 = 0;
  }
  *a5 = v10;
  return result;
}

uint64_t sub_2448265C4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v35)(uint64_t *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char v49[16];
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  _QWORD v58[3];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61[3];

  v2 = v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v5 = sub_2448EBD48();
  v8 = type metadata accessor for FutureTermination(0, v5, v6, v7);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v37 - v10;
  v12 = *a1;
  v47 = a1[1];
  v46 = *((unsigned __int8 *)a1 + 16);
  v45 = a1[3];
  v44 = a1[4];
  v43 = a1[5];
  v42 = a1[6];
  v13 = *((_BYTE *)a1 + 56);
  v14 = *(_QWORD *)(v2 + 104);
  v50 = v4;
  v51 = v14;
  type metadata accessor for TimeoutFuture.Activity(255, v4, v15, v16);
  v17 = sub_2448EA5D8();
  type metadata accessor for Future(255, v4, v18, v19);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738CF18);
  swift_getTupleTypeMetadata2();
  v20 = sub_2448EB508();
  v21 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v17);
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_2447B9000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/TimeoutFuture.swift", 125, 2, 150, 42, (uint64_t)"cancel(callsite:)", 17, 2, (uint64_t)sub_24482711C, (uint64_t)v49, v17, v20, v21);
  swift_release();
  v22 = *(_QWORD *)(v20 - 8);
  v23 = *(void (**)(uint64_t *, _BYTE *, uint64_t))(v22 + 16);
  v48 = v20;
  v23(&v51, v61, v20);
  v24 = v51;
  if (v51)
  {
    sub_2447F3530(&v52, (uint64_t)v58);
    v41 = v22;
    v37 = v12;
    v38 = v8;
    v39 = v2;
    v40 = v9;
    v25 = v59;
    v26 = v60;
    __swift_project_boxed_opaque_existential_1(v58, v59);
    (*(void (**)(uint64_t, uint64_t))(v26 + 32))(v25, v26);
    v27 = v47;
    v51 = v12;
    *(_QWORD *)&v52 = v47;
    LOBYTE(v26) = v46;
    BYTE8(v52) = v46;
    v28 = v45;
    v29 = v44;
    v53 = v45;
    v54 = v44;
    v30 = v13;
    v31 = v42;
    v32 = v43;
    v55 = v43;
    v56 = v42;
    v57 = v30;
    (*(void (**)(uint64_t *))(*(_QWORD *)v24 + 192))(&v51);
    *(_QWORD *)v11 = v37;
    *((_QWORD *)v11 + 1) = v27;
    v11[16] = v26;
    *((_QWORD *)v11 + 3) = v28;
    *((_QWORD *)v11 + 4) = v29;
    *((_QWORD *)v11 + 5) = v32;
    *((_QWORD *)v11 + 6) = v31;
    v11[56] = v30;
    v33 = v38;
    swift_storeEnumTagMultiPayload();
    sub_2448D2CA4((uint64_t)v11);
    swift_release();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v33);
    (*(void (**)(uint64_t *, uint64_t))(v41 + 8))(v61, v48);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
  }
  else
  {
    v35 = *(uint64_t (**)(uint64_t *, uint64_t))(v22 + 8);
    v36 = v48;
    v35(v61, v48);
    return v35(&v51, v36);
  }
}

double sub_244826934@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *, uint64_t);
  uint64_t v10;
  double result;
  uint64_t v12;
  __int128 v13;
  __int128 v14[2];

  v7 = type metadata accessor for TimeoutFuture.Activity(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(&v12, a1, v7);
  v9 = *(void (**)(uint64_t *, uint64_t))(v8 + 8);
  if (v12)
  {
    v9(a1, v7);
    v10 = v12;
    sub_2447F3530(&v13, (uint64_t)v14);
    *((_OWORD *)a1 + 1) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_QWORD *)a5 = v10;
    sub_2447F3530(v14, a5 + 8);
  }
  else
  {
    v9(&v12, v7);
    result = 0.0;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)a5 = 0u;
  }
  return result;
}

uint64_t sub_2448269FC()
{
  swift_release();
  return swift_release();
}

uint64_t sub_244826A18()
{
  uint64_t v0;

  v0 = Future.deinit();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_244826A4C()
{
  sub_244826A18();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TimeoutFuture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimeoutFuture);
}

uint64_t sub_244826A74()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_244826A98@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  *(double *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = 1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_244826AB0()
{
  return swift_deallocObject();
}

uint64_t sub_244826AC0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_244825C28(a1, a2);
}

unint64_t sub_244826AC8(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_244826AF4();
  result = sub_244826B38();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_244826AF4()
{
  unint64_t result;

  result = qword_25738CE00;
  if (!qword_25738CE00)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for TimeoutError, &type metadata for TimeoutError);
    atomic_store(result, (unint64_t *)&qword_25738CE00);
  }
  return result;
}

unint64_t sub_244826B38()
{
  unint64_t result;

  result = qword_25738CE08;
  if (!qword_25738CE08)
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for TimeoutError, &type metadata for TimeoutError);
    atomic_store(result, (unint64_t *)&qword_25738CE08);
  }
  return result;
}

unint64_t sub_244826B80()
{
  unint64_t result;

  result = qword_25738CE10[0];
  if (!qword_25738CE10[0])
  {
    result = MEMORY[0x24951AC70](&protocol conformance descriptor for TimeoutError, &type metadata for TimeoutError);
    atomic_store(result, qword_25738CE10);
  }
  return result;
}

uint64_t destroy for TimeoutError(uint64_t a1)
{
  return sub_244811210(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for TimeoutError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_244811220(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for TimeoutError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_244811220(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  sub_244811210(v7, v8, v9, v10);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for TimeoutError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  sub_244811210(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeoutError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TimeoutError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t sub_244826D90(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_244826D98(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for TimeoutError()
{
  return &type metadata for TimeoutError;
}

uint64_t sub_244826DB4()
{
  return swift_initClassMetadata2();
}

unint64_t sub_244826E04(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
  {
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 1));
  }
  return result;
}

char *sub_244826E44(char *a1, _OWORD *a2)
{
  char *v3;
  __int128 v4;
  uint64_t v5;
  void (*v6)(char *, char *, uint64_t);
  __int128 v7;

  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    v7 = a2[1];
    *(_OWORD *)a1 = *a2;
    *((_OWORD *)a1 + 1) = v7;
    *((_OWORD *)a1 + 2) = a2[2];
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v3 = (char *)a2 + 8;
    v4 = a2[2];
    *((_OWORD *)a1 + 2) = v4;
    v5 = v4;
    v6 = **(void (***)(char *, char *, uint64_t))(v4 - 8);
    swift_retain();
    v6(a1 + 8, v3, v5);
  }
  return a1;
}

uint64_t sub_244826ECC(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  __int128 v9;
  __int128 v10;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *(_QWORD *)a1 = v5;
      v6 = (uint64_t)a2 + 8;
      v7 = *((_QWORD *)a2 + 4);
      *(_QWORD *)(a1 + 32) = v7;
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
      swift_retain();
      v8(a1 + 8, v6, v7);
      return a1;
    }
LABEL_7:
    v9 = *a2;
    v10 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v10;
    *(_OWORD *)a1 = v9;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
    goto LABEL_7;
  }
  *(_QWORD *)a1 = v5;
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)a2 + 1);
  return a1;
}

uint64_t sub_244826FAC(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_QWORD *)a1 < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
LABEL_5:
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t sub_244827038(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t sub_244827088(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t sub_2448270E4(uint64_t result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *(_QWORD *)result = v2;
  return result;
}

uint64_t type metadata accessor for TimeoutFuture.Activity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimeoutFuture.Activity);
}

double sub_24482711C@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;

  return sub_244826934(a1, *(_QWORD *)(v4 + 16), a2, a3, a4);
}

uint64_t sub_244827134()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  return swift_deallocObject();
}

uint64_t sub_244827160()
{
  _QWORD *v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (uint64_t (*)(uint64_t))v0[2];
  v2 = v0[7];
  v3 = v0[8];
  __swift_project_boxed_opaque_existential_1(v0 + 4, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  return v1(v4);
}

double sub_2448271BC@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;

  return sub_2448263BC(a1, *(_QWORD *)(v4 + 16), a2, a3, a4);
}

uint64_t sub_2448271D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738CF20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24482721C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738CF20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24482725C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_244826478(a1, a2);
}

uint64_t sub_244827268@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;

  return sub_244826514(a1, *(_QWORD *)(v4 + 16), a2, a3, a4);
}

uint64_t FileSystemProductsPathProvider.roots.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FileSystemProductsPathProvider.init(roots:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t FileSystemProductsPathProvider.paths.getter()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *v0;
  return swift_task_switch();
}

uint64_t sub_2448272AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = swift_bridgeObjectRetain();
  v2 = sub_2448279BC(v1);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_244827300@<X0>(void *a1@<X0>, unint64_t *a2@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  void *v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  int v36;
  void (*v37)(char *, uint64_t);
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  uint64_t result;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  int v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  char *v59;
  _OWORD v60[2];
  __int128 v61;
  __int128 v62;
  char *v63;

  v3 = v2;
  v58 = a1;
  v51 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738CF40);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v52 = (uint64_t)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v48 - v8;
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v48 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v48 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738CF38);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_2448EA434();
  v57 = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v49 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v63 = (char *)&v48 - v21;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A4C0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2448ECFE0;
  v23 = (void *)*MEMORY[0x24BDBCC70];
  *(_QWORD *)(inited + 32) = *MEMORY[0x24BDBCC70];
  v24 = (void *)*MEMORY[0x24BDBCC98];
  *(_QWORD *)(inited + 40) = *MEMORY[0x24BDBCC98];
  v25 = v23;
  v26 = v24;
  v27 = sub_244827FE0(inited);
  swift_setDeallocating();
  type metadata accessor for URLResourceKey(0);
  swift_arrayDestroy();
  v28 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v29 = swift_bridgeObjectRetain();
  sub_2447CE074(v29);
  v56 = v27;
  swift_bridgeObjectRelease();
  v30 = (void *)sub_2448EB37C();

  swift_release();
  v58 = v30;
  if (v30)
  {
    v50 = MEMORY[0x24BEE4AF8];
    v55 = MEMORY[0x24BEE4AD8] + 8;
    v31 = v57;
    v59 = v14;
    while (1)
    {
      if (objc_msgSend(v58, sel_nextObject))
      {
        sub_2448EB664();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v60, 0, sizeof(v60));
      }
      sub_2447F3DFC((uint64_t)v60, (uint64_t)&v61);
      if (!*((_QWORD *)&v62 + 1))
      {
        v46 = v51;
        v45 = v50;
        goto LABEL_30;
      }
      v32 = swift_dynamicCast();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v17, v32 ^ 1u, 1, v18);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v17, 1, v18) == 1)
      {
        v46 = v51;
        v45 = v50;
        goto LABEL_32;
      }
      v54 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
      v54(v63, v17, v18);
      sub_2448EA3B0();
      if (v3)
      {

        v33 = sub_2448EA32C();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v14, 1, 1, v33);
        v3 = 0;
      }
      else
      {
        v33 = sub_2448EA32C();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v14, 0, 1, v33);
      }
      sub_24482820C((uint64_t)v14, (uint64_t)v12);
      sub_2448EA32C();
      v34 = *(_QWORD *)(v33 - 8);
      v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
      if (v35(v12, 1, v33) == 1)
        break;
      v53 = sub_2448EA314();
      v36 = v53;
      v37 = *(void (**)(char *, uint64_t))(v34 + 8);
      v37(v12, v33);
      v38 = v36 == 2;
      v3 = 0;
      if (v38)
        goto LABEL_15;
      sub_24482820C((uint64_t)v59, (uint64_t)v9);
      v39 = (uint64_t)v9;
      if ((v53 & 1) == 0)
        goto LABEL_16;
      v40 = v52;
      sub_24482820C((uint64_t)v9, v52);
      if (v35((char *)v40, 1, v33) == 1)
      {
        sub_2447BD180((uint64_t)v9, &qword_25738CF40);
        v39 = v40;
LABEL_16:
        sub_2447BD180(v39, &qword_25738CF40);
LABEL_17:
        v14 = v59;
        sub_2447BD180((uint64_t)v59, &qword_25738CF40);
        v31 = v57;
        goto LABEL_18;
      }
      v53 = sub_2448EA320();
      sub_2447BD180((uint64_t)v9, &qword_25738CF40);
      v37((char *)v40, v33);
      if ((v53 & 1) == 0)
        goto LABEL_17;
      v31 = v57;
      (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v49, v63, v18);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v14 = v59;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v50 = sub_2447C29B8(0, *(_QWORD *)(v50 + 16) + 1, 1, v50);
      v43 = *(_QWORD *)(v50 + 16);
      v42 = *(_QWORD *)(v50 + 24);
      if (v43 >= v42 >> 1)
        v50 = sub_2447C29B8(v42 > 1, v43 + 1, 1, v50);
      v44 = v50;
      *(_QWORD *)(v50 + 16) = v43 + 1;
      v54((char *)(v44+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(_QWORD *)(v31 + 72) * v43), v49, v18);
      sub_2447BD180((uint64_t)v14, &qword_25738CF40);
LABEL_18:
      (*(void (**)(char *, uint64_t))(v31 + 8))(v63, v18);
    }
    sub_2447BD180((uint64_t)v12, &qword_25738CF40);
LABEL_15:
    sub_24482820C((uint64_t)v59, (uint64_t)v9);
    v39 = (uint64_t)v9;
    goto LABEL_16;
  }
  v61 = 0u;
  v62 = 0u;
  v45 = MEMORY[0x24BEE4AF8];
  v46 = v51;
  v31 = v57;
LABEL_30:
  sub_2447BD180((uint64_t)&v61, &qword_25738B658);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v17, 1, 1, v18);
LABEL_32:
  swift_bridgeObjectRelease();

  result = sub_2447BD180((uint64_t)v17, &qword_25738CF38);
  *v46 = v45;
  return result;
}

uint64_t sub_2448279BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int64_t v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t result;
  uint64_t v43;
  int64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  int64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;

  v2 = v1;
  v4 = sub_2448EA434();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738CF38);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 56);
  v43 = a1 + 56;
  v12 = 1 << *(_BYTE *)(a1 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v44 = (unint64_t)(v12 + 63) >> 6;
  v46 = a1;
  swift_bridgeObjectRetain();
  v15 = 0;
  v16 = MEMORY[0x24BEE4AF8];
  v45 = v10;
  while (1)
  {
    v50 = v16;
    if (v14)
    {
      v18 = __clz(__rbit64(v14));
      v19 = (v14 - 1) & v14;
      v20 = v18 | (v15 << 6);
      goto LABEL_21;
    }
    v21 = __OFADD__(v15++, 1);
    if (v21)
      goto LABEL_49;
    if (v15 >= v44)
    {
LABEL_43:
      v41 = v16;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
      goto LABEL_44;
    }
    v22 = *(_QWORD *)(v43 + 8 * v15);
    if (!v22)
      break;
LABEL_20:
    v19 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v15 << 6);
LABEL_21:
    v24 = *(_QWORD *)(v5 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v10, *(_QWORD *)(v46 + 48) + v24 * v20, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
    {
      swift_release();
      return v50;
    }
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    sub_244827300(v7, &v51);
    if (v2)
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      v41 = v50;
      swift_bridgeObjectRelease();
LABEL_44:
      swift_release();
      return v41;
    }
    v47 = v19;
    v48 = v15;
    v49 = 0;
    v25 = v7;
    v26 = v4;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v27 = v51;
    v28 = *(_QWORD *)(v51 + 16);
    v29 = *(_QWORD *)(v50 + 16);
    v30 = v29 + v28;
    if (__OFADD__(v29, v28))
    {
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    v31 = v5;
    v32 = v50;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v34 = v32;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0 || v30 > *(_QWORD *)(v32 + 24) >> 1)
    {
      if (v29 <= v30)
        v35 = v29 + v28;
      else
        v35 = v29;
      v34 = sub_2447C29B8(isUniquelyReferenced_nonNull_native, v35, 1, v32);
    }
    v4 = v26;
    v5 = v31;
    if (*(_QWORD *)(v27 + 16))
    {
      v36 = *(_QWORD *)(v34 + 16);
      if ((*(_QWORD *)(v34 + 24) >> 1) - v36 < v28)
        goto LABEL_48;
      v37 = (*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
      v17 = v34;
      v38 = v34 + v37 + v36 * v24;
      if (v27 + v37 < v38 + v28 * v24 && v38 < v27 + v37 + v28 * v24)
        goto LABEL_52;
      swift_arrayInitWithCopy();
      if (v28)
      {
        v39 = *(_QWORD *)(v17 + 16);
        v21 = __OFADD__(v39, v28);
        v40 = v39 + v28;
        if (v21)
          goto LABEL_50;
        *(_QWORD *)(v17 + 16) = v40;
      }
    }
    else
    {
      v17 = v34;
      if (v28)
        goto LABEL_47;
    }
    swift_bridgeObjectRelease();
    v16 = v17;
    v10 = v45;
    v7 = v25;
    v15 = v48;
    v2 = v49;
    v14 = v47;
  }
  v23 = v15 + 1;
  if (v15 + 1 >= v44)
    goto LABEL_43;
  v22 = *(_QWORD *)(v43 + 8 * v23);
  if (v22)
    goto LABEL_19;
  v23 = v15 + 2;
  if (v15 + 2 >= v44)
    goto LABEL_43;
  v22 = *(_QWORD *)(v43 + 8 * v23);
  if (v22)
    goto LABEL_19;
  v23 = v15 + 3;
  if (v15 + 3 >= v44)
    goto LABEL_43;
  v22 = *(_QWORD *)(v43 + 8 * v23);
  if (v22)
    goto LABEL_19;
  v23 = v15 + 4;
  if (v15 + 4 >= v44)
    goto LABEL_43;
  v22 = *(_QWORD *)(v43 + 8 * v23);
  if (v22)
  {
LABEL_19:
    v15 = v23;
    goto LABEL_20;
  }
  while (1)
  {
    v15 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v15 >= v44)
      goto LABEL_43;
    v22 = *(_QWORD *)(v43 + 8 * v15);
    ++v23;
    if (v22)
      goto LABEL_20;
  }
LABEL_51:
  __break(1u);
LABEL_52:
  result = sub_2448EBA48();
  __break(1u);
  return result;
}

uint64_t sub_244827E14()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *v0;
  return swift_task_switch();
}

ValueMetadata *type metadata accessor for FileSystemProductsPathProvider()
{
  return &type metadata for FileSystemProductsPathProvider;
}

uint64_t sub_244827E40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738CF50);
    v3 = sub_2448EB760();
    v4 = 0;
    v5 = v3 + 56;
    v25 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v25 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      sub_2448EBD00();
      swift_bridgeObjectRetain();
      sub_2448EAB60();
      result = sub_2448EBD3C();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (result = sub_2448EBBEC(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        v18 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v18;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v19 = (_QWORD *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            result = sub_2448EBBEC();
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v21 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v21 = v8;
      v21[1] = v7;
      v22 = *(_QWORD *)(v3 + 16);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x24BEE4B08];
}

uint64_t sub_244827FE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738CF48);
    v3 = sub_2448EB760();
    v4 = 0;
    v5 = v3 + 56;
    v31 = v1;
    v32 = a1 + 32;
    while (1)
    {
      v6 = *(void **)(v32 + 8 * v4);
      sub_2448EAA94();
      sub_2448EBD00();
      v7 = v6;
      sub_2448EAB60();
      v8 = sub_2448EBD3C();
      result = swift_bridgeObjectRelease();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = v8 & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = sub_2448EAA94();
        v17 = v16;
        if (v15 == sub_2448EAA94() && v17 == v18)
        {
LABEL_3:
          swift_bridgeObjectRelease_n();
LABEL_4:

          goto LABEL_5;
        }
        v20 = sub_2448EBBEC();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if ((v20 & 1) != 0)
          goto LABEL_4;
        v21 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v21;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v22 = sub_2448EAA94();
          v24 = v23;
          if (v22 == sub_2448EAA94() && v24 == v25)
            goto LABEL_3;
          v27 = sub_2448EBBEC();
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          if ((v27 & 1) != 0)
            goto LABEL_4;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11) = v7;
      v28 = *(_QWORD *)(v3 + 16);
      v29 = __OFADD__(v28, 1);
      v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v30;
LABEL_5:
      if (++v4 == v31)
        return v3;
    }
  }
  return MEMORY[0x24BEE4B08];
}

uint64_t sub_24482820C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738CF40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t withCaughtObjectiveCExceptions<A>(perform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  unsigned int v24;
  id v25;
  char isEscapingClosureAtFileLocation;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id aBlock[7];

  v37 = a4;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v7 = sub_2448EBD48();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v35 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v36 = (char *)&v34 - v11;
  v12 = sub_2448EB508();
  v40 = *(_QWORD *)(v12 - 8);
  v41 = v12;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v38 = (uint64_t)&v34 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v34 - v18;
  v39 = v8;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))((char *)&v34 - v18, 1, 1, v7);
  v20 = (void *)objc_opt_self();
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = a3;
  v21[3] = v19;
  v21[4] = a1;
  v21[5] = a2;
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = sub_244828788;
  v22[3] = v21;
  aBlock[4] = sub_24481D1FC;
  aBlock[5] = v22;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_2448287A4;
  aBlock[3] = &block_descriptor_5;
  v23 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v24 = objc_msgSend(v20, sel_perform_error_, v23, aBlock);
  _Block_release(v23);
  v25 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if (v24)
  {
    v27 = v40;
    v28 = v41;
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v15, v19, v41);
    v29 = v38;
    assertUnwrap<A>(_:file:line:column:function:)((uint64_t)v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/UVExceptionHandling.swift", 131, 2, 20, 36, (uint64_t)"withCaughtObjectiveCExceptions(perform:)", 40, v38, 2, v7);
    v30 = *(void (**)(char *, uint64_t))(v27 + 8);
    v30(v15, v28);
    v31 = v39;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v29, 1, v7) == 1)
    {
      v30((char *)v29, v28);
      sub_2448287DC();
      swift_allocError();
      swift_willThrow();
    }
    else
    {
      v32 = v36;
      (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v36, v29, v7);
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v35, v32, v7);
      sub_244828820(v7, (uint64_t)aBlock, v37);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v7);
    }
    v30(v19, v28);
  }
  else
  {
    sub_2448EA38C();

    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v19, v41);
  }
  return swift_release();
}

uint64_t sub_244828668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  v8 = sub_2448EBD48();
  v9 = sub_2448EB508();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = &v14[-v11];
  v15 = a4;
  v16 = a2;
  v17 = a3;
  sub_2447D18BC((void (*)(_BYTE *))sub_2447D3080, (uint64_t)&v14[-v11]);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v12, 0, 1, v8);
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v10 + 40))(a1, v12, v9);
}

uint64_t sub_244828778()
{
  return swift_deallocObject();
}

uint64_t sub_244828788()
{
  uint64_t *v0;

  return sub_244828668(v0[3], v0[4], v0[5], v0[2]);
}

uint64_t sub_244828794()
{
  return swift_deallocObject();
}

uint64_t sub_2448287A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

unint64_t sub_2448287DC()
{
  unint64_t result;

  result = qword_25738CF58;
  if (!qword_25738CF58)
  {
    result = MEMORY[0x24951AC70](&unk_2448F1694, &type metadata for UVExceptionHandlingError);
    atomic_store(result, (unint64_t *)&qword_25738CF58);
  }
  return result;
}

uint64_t sub_244828820@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload() != 1)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 32))(a3, v3);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 32))(a2, v3, *(_QWORD *)(a1 + 24));
  return swift_willThrowTypedImpl();
}

uint64_t storeEnumTagSinglePayload for UVExceptionHandlingError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2448288F4 + 4 * asc_2448F15E0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_244828914 + 4 * byte_2448F15E5[v4]))();
}

_BYTE *sub_2448288F4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_244828914(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24482891C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_244828924(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24482892C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_244828934(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for UVExceptionHandlingError()
{
  return &type metadata for UVExceptionHandlingError;
}

unint64_t sub_244828954()
{
  unint64_t result;

  result = qword_25738CF60;
  if (!qword_25738CF60)
  {
    result = MEMORY[0x24951AC70](&unk_2448F166C, &type metadata for UVExceptionHandlingError);
    atomic_store(result, (unint64_t *)&qword_25738CF60);
  }
  return result;
}

uint64_t static QueryResolutionsBuilder.buildExpression(_:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

unint64_t static QueryResolutionsBuilder.buildBlock(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  _OWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD v40[2];
  _OWORD v41[2];
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)@<X0>(uint64_t *@<X0>, _QWORD *@<X8>);
  uint64_t v51;
  _QWORD *v52;

  result = sub_2447C8E84(MEMORY[0x24BEE4AF8]);
  v5 = (_QWORD *)result;
  v39 = *(_QWORD *)(a1 + 16);
  if (!v39)
  {
LABEL_30:
    *a2 = v5;
    return result;
  }
  v38 = a1 + 32;
  swift_bridgeObjectRetain();
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD *)(v38 + 8 * v6);
    swift_bridgeObjectRetain_n();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v52 = v5;
    v9 = -1 << *(_BYTE *)(v7 + 32);
    v10 = ~v9;
    v11 = *(_QWORD *)(v7 + 64);
    v12 = -v9;
    v13 = v12 < 64 ? ~(-1 << v12) : -1;
    v45 = v7;
    v46 = v7 + 64;
    v47 = v10;
    v48 = 0;
    v49 = v13 & v11;
    v50 = sub_24482F4E0;
    v51 = 0;
    swift_bridgeObjectRetain();
    sub_24482FA18((uint64_t)&v42);
    if (v44)
      break;
LABEL_3:
    ++v6;
    swift_bridgeObjectRelease();
    sub_2447D1030();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v6 == v39)
    {
      result = swift_bridgeObjectRelease();
      goto LABEL_30;
    }
  }
  v14 = v42;
  sub_2447C91FC(&v43, v41);
  v16 = sub_244828DC8(v14);
  v17 = v5[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v20 = v15;
  if (v5[3] >= v19)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v15 & 1) == 0)
        goto LABEL_17;
    }
    else
    {
      sub_24482D9B4();
      if ((v20 & 1) == 0)
        goto LABEL_17;
    }
    goto LABEL_15;
  }
  sub_24482A744(v19, isUniquelyReferenced_nonNull_native);
  v21 = sub_244828DC8(v14);
  if ((v20 & 1) != (v22 & 1))
    goto LABEL_33;
  v16 = v21;
  if ((v20 & 1) != 0)
  {
LABEL_15:
    v5 = v52;
    sub_2447C91FC(v41, v40);
    v23 = (_OWORD *)(v5[7] + 32 * v16);
LABEL_19:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    sub_2447C91FC(v40, v23);
LABEL_22:
    while (1)
    {
      sub_24482FA18((uint64_t)&v42);
      if (!v44)
        goto LABEL_3;
      v29 = v42;
      sub_2447C91FC(&v43, v41);
      v31 = sub_244828DC8(v29);
      v32 = v5[2];
      v33 = (v30 & 1) == 0;
      v34 = v32 + v33;
      if (__OFADD__(v32, v33))
        goto LABEL_31;
      v35 = v30;
      if (v5[3] < v34)
      {
        sub_24482A744(v34, 1);
        v36 = sub_244828DC8(v29);
        if ((v35 & 1) != (v37 & 1))
          goto LABEL_33;
        v31 = v36;
      }
      if ((v35 & 1) != 0)
      {
        v5 = v52;
        sub_2447C91FC(v41, v40);
        v23 = (_OWORD *)(v5[7] + 32 * v31);
        goto LABEL_19;
      }
      v5 = v52;
      v52[(v31 >> 6) + 8] |= 1 << v31;
      *(_QWORD *)(v5[6] + 8 * v31) = v29;
      sub_2447C91FC(v41, (_OWORD *)(v5[7] + 32 * v31));
      v27 = v5[2];
      v25 = __OFADD__(v27, 1);
      v28 = v27 + 1;
      if (v25)
        goto LABEL_32;
      v5[2] = v28;
    }
  }
LABEL_17:
  v5 = v52;
  v52[(v16 >> 6) + 8] |= 1 << v16;
  *(_QWORD *)(v5[6] + 8 * v16) = v14;
  sub_2447C91FC(v41, (_OWORD *)(v5[7] + 32 * v16));
  v24 = v5[2];
  v25 = __OFADD__(v24, 1);
  v26 = v24 + 1;
  if (!v25)
  {
    v5[2] = v26;
    goto LABEL_22;
  }
LABEL_32:
  __break(1u);
LABEL_33:
  result = sub_2448EBC7C();
  __break(1u);
  return result;
}

unint64_t sub_244828D0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_2448EBD00();
  sub_2448EAB60();
  v4 = sub_2448EBD3C();
  return sub_244829074(a1, a2, v4);
}

unint64_t sub_244828D70(uint64_t a1)
{
  uint64_t v2;

  sub_2448EBD00();
  sub_2448EBD30();
  v2 = sub_2448EBD3C();
  return sub_244829154(a1, v2);
}

unint64_t sub_244828DC8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2448EBCF4();
  return sub_2448294EC(a1, v2);
}

unint64_t sub_244828E00(double a1)
{
  uint64_t v2;

  sub_2448EBD00();
  sub_2448EBD30();
  v2 = sub_2448EBD3C();
  return sub_2448291F0(v2, a1);
}

unint64_t sub_244828E5C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2448EB6F4();
  return sub_244829290(a1, v2);
}

unint64_t sub_244828E8C(unsigned __int8 a1)
{
  uint64_t v2;

  sub_2448EBD00();
  sub_2448EBD0C();
  v2 = sub_2448EBD3C();
  return sub_244829354(a1, v2);
}

unint64_t sub_244828EE4(uint64_t a1)
{
  uint64_t v2;

  sub_2448EBD00();
  sub_2448EA548();
  sub_24482FBFC();
  sub_2448EA920();
  v2 = sub_2448EBD3C();
  return sub_2448293F4(a1, v2);
}

unint64_t sub_244828F54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_2448EBD00();
  sub_2448EBD0C();
  sub_2448EBD0C();
  v4 = sub_2448EBD3C();
  return sub_244829588(a1, a2, v4);
}

unint64_t sub_244828FC0(uint64_t a1)
{
  uint64_t v2;

  sub_2448EAA94();
  sub_2448EBD00();
  sub_2448EAB60();
  v2 = sub_2448EBD3C();
  swift_bridgeObjectRelease();
  return sub_244829604(a1, v2);
}

unint64_t sub_244829040(unsigned int a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = MEMORY[0x24951A4CC](*(_QWORD *)(v1 + 40), a1, 4);
  return sub_244829778(a1, v3);
}

unint64_t sub_244829074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_2448EBBEC() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_2448EBBEC() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_244829154(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_2448291F0(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a1 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = *(_QWORD *)(v2 + 48);
    if (a2 - *(double *)(v6 + 8 * result) != 0.0)
    {
      v7 = ~v4;
      for (result = (result + 1) & v7;
            ((*(_QWORD *)(v3 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v7)
      {
        if (a2 - *(double *)(v6 + 8 * result) == 0.0)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_244829290(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_2447D126C(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x249519EE4](v9, a1);
      sub_2447D12A8((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_244829354(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_2448293F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v14;

  v4 = type metadata accessor for CrashReport.ID(0);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = -1 << *(_BYTE *)(v2 + 32);
  v9 = a2 & ~v8;
  if (((*(_QWORD *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    v10 = ~v8;
    v11 = *(_QWORD *)(v5 + 72);
    do
    {
      sub_244821FB8(*(_QWORD *)(v2 + 48) + v11 * v9, (uint64_t)v7);
      v12 = _s20PreviewsFoundationOS11CrashReportV2IDV2eeoiySbAE_AEtFZ_0();
      sub_24482FC44((uint64_t)v7);
      if ((v12 & 1) != 0)
        break;
      v9 = (v9 + 1) & v10;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

unint64_t sub_2448294EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_244829588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    do
    {
      v8 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * result);
      v10 = *v8;
      v9 = v8[1];
      if (v10 == a1 && v9 == a2)
        break;
      result = (result + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t sub_244829604(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = sub_2448EAA94();
    v8 = v7;
    if (v6 == sub_2448EAA94() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = sub_2448EBBEC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = sub_2448EAA94();
          v15 = v14;
          if (v13 == sub_2448EAA94() && v15 == v16)
            break;
          v18 = sub_2448EBBEC();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_244829778(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t sub_244829814(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t i;
  char v40;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A3A0);
  v40 = a2;
  v6 = sub_2448EBA30();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v37)
          goto LABEL_33;
        v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v37)
            goto LABEL_33;
          v23 = v38[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v40 & 1) != 0)
              {
                v36 = 1 << *(_BYTE *)(v5 + 32);
                if (v36 >= 64)
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v36;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v37)
                  goto LABEL_33;
                v23 = v38[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v30 = *v29;
      v31 = v29[1];
      v32 = *(_QWORD *)(v5 + 56) + 24 * v21;
      v34 = *(_QWORD *)v32;
      v33 = *(_QWORD *)(v32 + 8);
      v35 = *(_BYTE *)(v32 + 16);
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        sub_2447C9254(v34, v33, v35);
      }
      sub_2448EBD00();
      sub_2448EAB60();
      result = sub_2448EBD3C();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v30;
      v18[1] = v31;
      v19 = *(_QWORD *)(v7 + 56) + 24 * v17;
      *(_QWORD *)v19 = v34;
      *(_QWORD *)(v19 + 8) = v33;
      *(_BYTE *)(v19 + 16) = v35;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_244829B3C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  _OWORD v35[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A390);
  v6 = sub_2448EBA30();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_34;
        v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_34;
          v19 = v34[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((a2 & 1) != 0)
              {
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 >= 64)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v13 >= v33)
                  goto LABEL_34;
                v19 = v34[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        sub_2447C91FC(v24, v35);
      }
      else
      {
        sub_2447C92C4((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_2448EBD00();
      sub_2448EAB60();
      result = sub_2448EBD3C();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      result = (uint64_t)sub_2447C91FC(v35, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_244829E38(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  __int128 v38[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CF98);
  v37 = a2;
  v6 = sub_2448EBA30();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v35)
        goto LABEL_34;
      v20 = *(_QWORD *)(v36 + 8 * v13);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v20 = *(_QWORD *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v13 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_43;
            if (v13 >= v35)
              goto LABEL_34;
            v20 = *(_QWORD *)(v36 + 8 * v13);
            ++v21;
            if (v20)
              goto LABEL_21;
          }
        }
        v13 = v21;
      }
    }
LABEL_21:
    v10 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
    v24 = *v22;
    v23 = v22[1];
    v25 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v17);
    if ((v37 & 1) != 0)
    {
      sub_2447F3530(v25, (uint64_t)v38);
    }
    else
    {
      sub_2447CE01C((uint64_t)v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    sub_2448EBD00();
    sub_2448EAB60();
    result = sub_2448EBD3C();
    v26 = -1 << *(_BYTE *)(v7 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
    *v15 = v24;
    v15[1] = v23;
    result = sub_2447F3530(v38, *(_QWORD *)(v7 + 56) + 40 * v14);
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v19 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_24482A15C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CFA0);
  v36 = a2;
  v6 = sub_2448EBA30();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_2448EBD00();
    sub_2448EAB60();
    result = sub_2448EBD3C();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_24482A470(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  __int128 v30;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CFD8);
  result = sub_2448EBA30();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v29 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v12)
          goto LABEL_33;
        v21 = v29[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v12)
            goto LABEL_33;
          v21 = v29[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v28 = 1 << *(_BYTE *)(v5 + 32);
              if (v28 >= 64)
                bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v29 = -1 << v28;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v29[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v12)
                  goto LABEL_33;
                v21 = v29[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
      v30 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v19);
      if ((a2 & 1) == 0)
        swift_retain();
      sub_2448EBD00();
      sub_2448EBD30();
      result = sub_2448EBD3C();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v16 == v24;
          if (v16 == v24)
            v16 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v17) = v27;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v17) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

uint64_t sub_24482A744(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _OWORD v32[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A3B0);
  result = sub_2448EBA30();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v31 = v3;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v18 >= v13)
          goto LABEL_34;
        v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_34;
          v19 = v9[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v31;
                goto LABEL_41;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v9 = -1 << v30;
              v3 = v31;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_43;
                if (v8 >= v13)
                  goto LABEL_34;
                v19 = v9[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
      v22 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
        sub_2447C91FC(v22, v32);
      else
        sub_2447C92C4((uint64_t)v22, (uint64_t)v32);
      result = sub_2448EBCF4();
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v21;
      result = (uint64_t)sub_2447C91FC(v32, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v15));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v7;
  return result;
}

uint64_t sub_24482AA04(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A3A8);
  v42 = a2;
  v6 = sub_2448EBA30();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v31);
    v36 = *v35;
    v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_2448EBD00();
    sub_2448EAB60();
    result = sub_2448EBD3C();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v18);
    *v20 = v36;
    v20[1] = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_24482AD28(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _BYTE v31[32];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CF70);
  result = sub_2448EBA30();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v12)
          goto LABEL_34;
        v18 = v30[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_34;
          v18 = v30[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_41;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v30 = -1 << v29;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v30[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_43;
                if (v8 >= v12)
                  goto LABEL_34;
                v18 = v30[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
      v21 = *(_QWORD *)(v5 + 56) + 32 * v16;
      if ((a2 & 1) != 0)
        sub_2447F81E8(v21, (uint64_t)v31);
      else
        sub_2447F8254(v21, (uint64_t)v31);
      sub_2448EBD00();
      sub_2448EBD30();
      result = sub_2448EBD3C();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v20;
      result = sub_2447F81E8((uint64_t)v31, *(_QWORD *)(v7 + 56) + 32 * v14);
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v7;
  return result;
}

uint64_t sub_24482AFFC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CFD0);
  result = sub_2448EBA30();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v32 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v31 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v31)
          goto LABEL_33;
        v21 = v32[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v31)
            goto LABEL_33;
          v21 = v32[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v32 = -1 << v30;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v32[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v31)
                  goto LABEL_33;
                v21 = v32[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = 8 * v19;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v27);
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v27);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      sub_2448EBD00();
      sub_2448EBD30();
      result = sub_2448EBD3C();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = 8 * v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v17) = v28;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v17) = v29;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

uint64_t sub_24482B2D4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A368);
  v6 = sub_2448EBA30();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v11)
        goto LABEL_34;
      v23 = *(_QWORD *)(v36 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v14 >= v11)
              goto LABEL_34;
            v23 = *(_QWORD *)(v36 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v14 = v24;
      }
    }
LABEL_21:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    v25 = *(_QWORD *)(v5 + 48) + 40 * v20;
    if ((a2 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v40 = *(_QWORD *)(v25 + 32);
      v38 = v26;
      v39 = v27;
      sub_2447C91FC((_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      sub_2447D126C(v25, (uint64_t)&v38);
      sub_2447C92C4(*(_QWORD *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    result = sub_2448EB6F4();
    v28 = -1 << *(_BYTE *)(v7 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v7 + 48) + 40 * v15;
    v17 = v38;
    v18 = v39;
    *(_QWORD *)(v16 + 32) = v40;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    result = (uint64_t)sub_2447C91FC(v37, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v15));
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_24482B5E8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  _QWORD *v30;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CFC0);
  result = sub_2448EBA30();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v29 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v19 >= v29)
          goto LABEL_33;
        v20 = v30[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v29)
            goto LABEL_33;
          v20 = v30[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v29)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v28 = 1 << *(_BYTE *)(v5 + 32);
              if (v28 >= 64)
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v30 = -1 << v28;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v30[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_42;
                if (v8 >= v29)
                  goto LABEL_33;
                v20 = v30[v8];
                ++v21;
                if (v20)
                  goto LABEL_30;
              }
            }
            v8 = v21;
          }
        }
LABEL_30:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v26 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v18);
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      sub_2448EBD00();
      sub_2448EBD0C();
      result = sub_2448EBD3C();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v24 = v15 == v23;
          if (v15 == v23)
            v15 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v25 == -1);
        v16 = __clz(__rbit64(~v25)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v16) = v26;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v16) = v27;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

uint64_t sub_24482B8B8(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  int v43;
  char *v44;
  uint64_t v45;

  v3 = v2;
  v45 = sub_2448EA434();
  v5 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v44 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CFB8);
  v43 = a2;
  v8 = sub_2448EBA30();
  v9 = v8;
  if (*(_QWORD *)(v7 + 16))
  {
    v40 = v2;
    v10 = 1 << *(_BYTE *)(v7 + 32);
    v11 = *(_QWORD *)(v7 + 64);
    v42 = (_QWORD *)(v7 + 64);
    if (v10 < 64)
      v12 = ~(-1 << v10);
    else
      v12 = -1;
    v13 = v12 & v11;
    v41 = (unint64_t)(v10 + 63) >> 6;
    v14 = v8 + 64;
    result = swift_retain();
    v16 = 0;
    while (1)
    {
      if (v13)
      {
        v19 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v20 = v19 | (v16 << 6);
      }
      else
      {
        v21 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v41)
          goto LABEL_34;
        v22 = v42[v21];
        ++v16;
        if (!v22)
        {
          v16 = v21 + 1;
          if (v21 + 1 >= v41)
            goto LABEL_34;
          v22 = v42[v16];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v41)
            {
LABEL_34:
              swift_release();
              v3 = v40;
              if ((v43 & 1) != 0)
              {
                v38 = 1 << *(_BYTE *)(v7 + 32);
                if (v38 >= 64)
                  bzero(v42, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v42 = -1 << v38;
                *(_QWORD *)(v7 + 16) = 0;
              }
              break;
            }
            v22 = v42[v23];
            if (!v22)
            {
              while (1)
              {
                v16 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v16 >= v41)
                  goto LABEL_34;
                v22 = v42[v16];
                ++v23;
                if (v22)
                  goto LABEL_21;
              }
            }
            v16 = v23;
          }
        }
LABEL_21:
        v13 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v16 << 6);
      }
      v24 = *(_QWORD *)(v7 + 56);
      v25 = v7;
      v26 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v20);
      v28 = *v26;
      v27 = v26[1];
      v29 = *(_QWORD *)(v5 + 72);
      v30 = v24 + v29 * v20;
      if ((v43 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v44, v30, v45);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v44, v30, v45);
        swift_bridgeObjectRetain();
      }
      sub_2448EBD00();
      sub_2448EAB60();
      result = sub_2448EBD3C();
      v31 = -1 << *(_BYTE *)(v9 + 32);
      v32 = result & ~v31;
      v33 = v32 >> 6;
      if (((-1 << v32) & ~*(_QWORD *)(v14 + 8 * (v32 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v14 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v34 = 0;
        v35 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v35 && (v34 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v36 = v33 == v35;
          if (v33 == v35)
            v33 = 0;
          v34 |= v36;
          v37 = *(_QWORD *)(v14 + 8 * v33);
        }
        while (v37 == -1);
        v17 = __clz(__rbit64(~v37)) + (v33 << 6);
      }
      *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v17);
      *v18 = v28;
      v18[1] = v27;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v9 + 56) + v29 * v17, v44, v45);
      ++*(_QWORD *)(v9 + 16);
      v7 = v25;
    }
  }
  result = swift_release();
  *v3 = v9;
  return result;
}

uint64_t sub_24482BC20(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;

  v3 = v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738CB98);
  v41 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CFB0);
  v42 = a2;
  v9 = sub_2448EBA30();
  v10 = v9;
  if (*(_QWORD *)(v8 + 16))
  {
    v38 = v2;
    v11 = 1 << *(_BYTE *)(v8 + 32);
    v12 = *(_QWORD *)(v8 + 64);
    v40 = (_QWORD *)(v8 + 64);
    if (v11 < 64)
      v13 = ~(-1 << v11);
    else
      v13 = -1;
    v14 = v13 & v12;
    v39 = (unint64_t)(v11 + 63) >> 6;
    v15 = v9 + 64;
    result = swift_retain();
    v17 = 0;
    while (1)
    {
      if (v14)
      {
        v20 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        v21 = v20 | (v17 << 6);
      }
      else
      {
        v22 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v39)
          goto LABEL_34;
        v23 = v40[v22];
        ++v17;
        if (!v23)
        {
          v17 = v22 + 1;
          if (v22 + 1 >= v39)
            goto LABEL_34;
          v23 = v40[v17];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v39)
            {
LABEL_34:
              swift_release();
              v3 = v38;
              if ((v42 & 1) != 0)
              {
                v37 = 1 << *(_BYTE *)(v8 + 32);
                if (v37 >= 64)
                  bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v40 = -1 << v37;
                *(_QWORD *)(v8 + 16) = 0;
              }
              break;
            }
            v23 = v40[v24];
            if (!v23)
            {
              while (1)
              {
                v17 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_41;
                if (v17 >= v39)
                  goto LABEL_34;
                v23 = v40[v17];
                ++v24;
                if (v23)
                  goto LABEL_21;
              }
            }
            v17 = v24;
          }
        }
LABEL_21:
        v14 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v17 << 6);
      }
      v25 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v21);
      v27 = *v25;
      v26 = v25[1];
      v28 = *(_QWORD *)(v41 + 72);
      v29 = *(_QWORD *)(v8 + 56) + v28 * v21;
      if ((v42 & 1) != 0)
      {
        sub_2447D3184(v29, (uint64_t)v7, &qword_25738CB98);
      }
      else
      {
        sub_24482FC80(v29, (uint64_t)v7);
        swift_bridgeObjectRetain();
      }
      sub_2448EBD00();
      sub_2448EAB60();
      result = sub_2448EBD3C();
      v30 = -1 << *(_BYTE *)(v10 + 32);
      v31 = result & ~v30;
      v32 = v31 >> 6;
      if (((-1 << v31) & ~*(_QWORD *)(v15 + 8 * (v31 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v15 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v33 = 0;
        v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v35 = v32 == v34;
          if (v32 == v34)
            v32 = 0;
          v33 |= v35;
          v36 = *(_QWORD *)(v15 + 8 * v32);
        }
        while (v36 == -1);
        v18 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v18);
      *v19 = v27;
      v19[1] = v26;
      result = sub_2447D3184((uint64_t)v7, *(_QWORD *)(v10 + 56) + v28 * v18, &qword_25738CB98);
      ++*(_QWORD *)(v10 + 16);
    }
  }
  result = swift_release();
  *v3 = v10;
  return result;
}

uint64_t sub_24482BF88(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;

  v3 = v2;
  v5 = type metadata accessor for CrashReport.ID(0);
  v39 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CF88);
  v40 = a2;
  v9 = sub_2448EBA30();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v38 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v36 = v2;
  v37 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain();
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v37)
      break;
    v22 = v38;
    v23 = v38[v21];
    ++v17;
    if (!v23)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v37)
        goto LABEL_34;
      v23 = v38[v17];
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v37)
        {
LABEL_34:
          swift_release();
          v3 = v36;
          if ((v40 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = v38[v24];
        if (!v23)
        {
          while (1)
          {
            v17 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v17 >= v37)
              goto LABEL_34;
            v23 = v38[v17];
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v17 = v24;
      }
    }
LABEL_21:
    v14 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_22:
    v25 = *(_QWORD *)(v39 + 72);
    v26 = *(_QWORD *)(v8 + 48) + v25 * v20;
    if ((v40 & 1) != 0)
    {
      sub_244821FFC(v26, (uint64_t)v7);
      v27 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v20);
    }
    else
    {
      sub_244821FB8(v26, (uint64_t)v7);
      v27 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v20);
      swift_retain();
    }
    sub_2448EBD00();
    sub_2448EA548();
    sub_24482FBFC();
    sub_2448EA920();
    result = sub_2448EBD3C();
    v28 = -1 << *(_BYTE *)(v10 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v15 + 8 * v30);
      }
      while (v34 == -1);
      v18 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    result = sub_244821FFC((uint64_t)v7, *(_QWORD *)(v10 + 48) + v25 * v18);
    *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v18) = v27;
    ++*(_QWORD *)(v10 + 16);
  }
  swift_release();
  v3 = v36;
  v22 = v38;
  if ((v40 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v8 + 32);
  if (v35 >= 64)
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v35;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v10;
  return result;
}

uint64_t sub_24482C308(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CF78);
  result = sub_2448EBA30();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v10;
    v32 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33)
          goto LABEL_33;
        v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v33)
            goto LABEL_33;
          v22 = v9[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v32 >= 64)
                  bzero((void *)(v5 + 64), 8 * v33);
                else
                  *v9 = v31;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v8 >= v33)
                  goto LABEL_33;
                v22 = v9[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v28 = 8 * v20;
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v28);
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v28);
      if ((a2 & 1) == 0)
        swift_retain();
      result = sub_2448EBCF4();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = 8 * v17;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v29;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_24482C5BC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  int64_t v35;
  _QWORD *v36;
  char v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CF80);
  v37 = a2;
  result = sub_2448EBA30();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v36 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v19 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v21 >= v35)
          goto LABEL_33;
        v22 = v36[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v35)
            goto LABEL_33;
          v22 = v36[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v35)
            {
LABEL_33:
              if ((v37 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v34 = 1 << *(_BYTE *)(v5 + 32);
              if (v34 >= 64)
                bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v36 = -1 << v34;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v36[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_42;
                if (v8 >= v35)
                  goto LABEL_33;
                v22 = v36[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v11 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v28 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v20);
      v29 = *(_QWORD *)(v5 + 56) + 80 * v20;
      v30 = *(_QWORD *)(v29 + 16);
      v40 = *(_OWORD *)(v29 + 24);
      v41 = v28;
      v31 = *(_BYTE *)(v29 + 40);
      v32 = *(_QWORD *)(v29 + 48);
      v38 = *(_OWORD *)v29;
      v39 = *(_OWORD *)(v29 + 56);
      v33 = *(_BYTE *)(v29 + 72);
      if ((v37 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      sub_2448EBD00();
      sub_2448EBD0C();
      sub_2448EBD0C();
      result = sub_2448EBD3C();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
        v17 = v41;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v13) >> 6;
        v17 = v41;
        do
        {
          if (++v15 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v15 == v25;
          if (v15 == v25)
            v15 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v27 == -1);
        v16 = __clz(__rbit64(~v27)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v16) = v17;
      v18 = *(_QWORD *)(v7 + 56) + 80 * v16;
      *(_OWORD *)v18 = v38;
      *(_QWORD *)(v18 + 16) = v30;
      *(_OWORD *)(v18 + 24) = v40;
      *(_BYTE *)(v18 + 40) = v31;
      *(_QWORD *)(v18 + 48) = v32;
      *(_OWORD *)(v18 + 56) = v39;
      *(_BYTE *)(v18 + 72) = v33;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

uint64_t sub_24482C91C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CF68);
  result = sub_2448EBA30();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
      result = sub_2448EBCF4();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

uint64_t sub_24482CBC0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CFC8);
  v38 = a2;
  v6 = sub_2448EBA30();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_33;
      v23 = *(_QWORD *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v23 = *(_QWORD *)(v37 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v33 = v32;
    }
    sub_2448EBD00();
    sub_2448EAB60();
    result = sub_2448EBD3C();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_24482CECC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A358);
  result = sub_2448EBA30();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v29 = -1 << v10;
    v30 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v31 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v20 >= v31)
          goto LABEL_33;
        v21 = v9[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v31)
            goto LABEL_33;
          v21 = v9[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v30 >= 64)
                  bzero((void *)(v5 + 64), 8 * v31);
                else
                  *v9 = v29;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v21 = v9[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_41;
                if (v8 >= v31)
                  goto LABEL_33;
                v21 = v9[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v12 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(unsigned int *)(*(_QWORD *)(v5 + 48) + 4 * v19);
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if ((a2 & 1) == 0)
        swift_retain();
      result = MEMORY[0x24951A4CC](*(_QWORD *)(v7 + 40), v27, 4);
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v25 = v16 == v24;
          if (v16 == v24)
            v16 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v17) = v27;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v28;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_24482D17C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  __int128 v30;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A350);
  result = sub_2448EBA30();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v29 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v12)
          goto LABEL_33;
        v21 = v29[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v12)
            goto LABEL_33;
          v21 = v29[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v28 = 1 << *(_BYTE *)(v5 + 32);
              if (v28 >= 64)
                bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v29 = -1 << v28;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v29[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v12)
                  goto LABEL_33;
                v21 = v29[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
      v30 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v19);
      if ((a2 & 1) == 0)
        swift_retain();
      sub_2448EBD00();
      sub_2448EBD30();
      result = sub_2448EBD3C();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v16 == v24;
          if (v16 == v24)
            v16 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v17) = v27;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v17) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

void *sub_24482D450()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A3A0);
  v2 = *v0;
  v3 = sub_2448EBA24();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_26;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
        break;
    }
LABEL_25:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 24 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v25 = *(_BYTE *)(v21 + 16);
    *v24 = v19;
    v24[1] = v18;
    v26 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v26 = v22;
    *(_QWORD *)(v26 + 8) = v23;
    *(_BYTE *)(v26 + 16) = v25;
    swift_bridgeObjectRetain();
    result = (void *)sub_2447C9254(v22, v23, v25);
  }
  v29 = v27 + 2;
  if (v29 >= v13)
    goto LABEL_26;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_24482D628()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A390);
  v2 = *v0;
  v3 = sub_2448EBA24();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_2447C92C4(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_2447C91FC(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_24482D80C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CFD8);
  v2 = *v0;
  v3 = sub_2448EBA24();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    result = (void *)swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_24482D9B4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A3B0);
  v2 = *v0;
  v3 = sub_2448EBA24();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    sub_2447C92C4(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = sub_2447C91FC(v22, (_OWORD *)(*(_QWORD *)(v4 + 56) + v18));
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_24482DB74()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A3A8);
  v2 = *v0;
  v3 = sub_2448EBA24();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_24482DD2C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _BYTE v22[32];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CF70);
  v2 = *v0;
  v3 = sub_2448EBA24();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    sub_2447F8254(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)sub_2447F81E8((uint64_t)v22, *(_QWORD *)(v4 + 56) + v18);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_24482DEEC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CFD0);
  v2 = *v0;
  v3 = sub_2448EBA24();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_24482E08C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A368);
  v2 = *v0;
  v3 = sub_2448EBA24();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_2447D126C(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    sub_2447C92C4(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    result = sub_2447C91FC(v24, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_24482E270()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CFC0);
  v2 = *v0;
  v3 = sub_2448EBA24();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = (void *)swift_bridgeObjectRetain();
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_24482E410()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = sub_2448EA434();
  v1 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CFB8);
  v31 = v0;
  v4 = *v0;
  v5 = sub_2448EBA24();
  v6 = *(_QWORD *)(v4 + 16);
  v35 = v5;
  if (!v6)
  {
    result = (void *)swift_release();
    v29 = v35;
    v28 = v31;
LABEL_28:
    *v28 = v29;
    return result;
  }
  v7 = v5;
  result = (void *)(v5 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    v7 = v35;
  }
  v32 = v4 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 64);
  v33 = (unint64_t)(v12 + 63) >> 6;
  v15 = v34;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v25 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v25);
    ++v11;
    if (!v26)
    {
      v11 = v25 + 1;
      if (v25 + 1 >= v33)
        goto LABEL_26;
      v26 = *(_QWORD *)(v32 + 8 * v11);
      if (!v26)
        break;
    }
LABEL_25:
    v14 = (v26 - 1) & v26;
    v17 = __clz(__rbit64(v26)) + (v11 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v17);
    v21 = *v19;
    v20 = v19[1];
    v22 = *(_QWORD *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(_QWORD *)(v4 + 56) + v22, v15);
    v23 = v35;
    v24 = (_QWORD *)(*(_QWORD *)(v35 + 48) + v18);
    *v24 = v21;
    v24[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v23 + 56) + v22, v3, v15);
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v33)
  {
LABEL_26:
    result = (void *)swift_release();
    v28 = v31;
    v29 = v35;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v32 + 8 * v27);
  if (v26)
  {
    v11 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v11 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v11);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_24482E66C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738CB98);
  v29 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CFB0);
  v5 = *v0;
  v6 = sub_2448EBA24();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_25:
    *v1 = v7;
    return result;
  }
  v27 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v28 = v5 + 64;
  v10 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v11 = 1 << *(_BYTE *)(v5 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v5 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v23 >= v14)
      goto LABEL_23;
    v24 = *(_QWORD *)(v28 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_23;
      v24 = *(_QWORD *)(v28 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_22:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_9:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v16);
    v19 = *v18;
    v20 = v18[1];
    v21 = *(_QWORD *)(v29 + 72) * v16;
    sub_24482FC80(*(_QWORD *)(v5 + 56) + v21, (uint64_t)v4);
    v22 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v17);
    *v22 = v19;
    v22[1] = v20;
    sub_2447D3184((uint64_t)v4, *(_QWORD *)(v7 + 56) + v21, &qword_25738CB98);
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v14)
  {
LABEL_23:
    result = (void *)swift_release();
    v1 = v27;
    goto LABEL_25;
  }
  v24 = *(_QWORD *)(v28 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_23;
    v24 = *(_QWORD *)(v28 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_24482E8A8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  uint64_t v9;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v1 = v0;
  v2 = type metadata accessor for CrashReport.ID(0);
  v26 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CF88);
  v5 = *v0;
  v6 = sub_2448EBA24();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v7;
    return result;
  }
  v25 = v1;
  result = (void *)(v6 + 64);
  v9 = v5 + 64;
  v10 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  v12 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v13 = 1 << *(_BYTE *)(v5 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v5 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v22 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v9 + 8 * v22);
    ++v12;
    if (!v23)
    {
      v12 = v22 + 1;
      if (v22 + 1 >= v16)
        goto LABEL_26;
      v23 = *(_QWORD *)(v9 + 8 * v12);
      if (!v23)
        break;
    }
LABEL_25:
    v15 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v26 + 72) * v18;
    sub_244821FB8(*(_QWORD *)(v5 + 48) + v19, (uint64_t)v4);
    v20 = 8 * v18;
    v21 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
    sub_244821FFC((uint64_t)v4, *(_QWORD *)(v7 + 48) + v19);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v20) = v21;
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v16)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v9 + 8 * v24);
  if (v23)
  {
    v12 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v9 + 8 * v12);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_24482EAC8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CF78);
  v2 = *v0;
  v3 = sub_2448EBA24();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_retain();
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_24482EC68()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CF80);
  v2 = *v0;
  v3 = sub_2448EBA24();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_26;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
        break;
    }
LABEL_25:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = 80 * v15;
    v18 = *(_QWORD *)(v2 + 56) + v17;
    v19 = *(_QWORD *)(v18 + 16);
    v20 = *(_BYTE *)(v18 + 40);
    v21 = *(_QWORD *)(v18 + 48);
    v22 = *(_BYTE *)(v18 + 72);
    v23 = *(_OWORD *)v18;
    v24 = *(_OWORD *)(v18 + 24);
    v25 = *(_OWORD *)(v18 + 56);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v26 = *(_QWORD *)(v4 + 56) + v17;
    *(_OWORD *)v26 = v23;
    *(_QWORD *)(v26 + 16) = v19;
    *(_OWORD *)(v26 + 24) = v24;
    *(_BYTE *)(v26 + 40) = v20;
    *(_QWORD *)(v26 + 48) = v21;
    *(_OWORD *)(v26 + 56) = v25;
    *(_BYTE *)(v26 + 72) = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v29 = v27 + 2;
  if (v29 >= v13)
    goto LABEL_26;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_24482EE58()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CF68);
  v2 = *v0;
  v3 = sub_2448EBA24();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_24482EFE4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738CFC8);
  v2 = *v0;
  v3 = sub_2448EBA24();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_24482F194()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A358);
  v2 = *v0;
  v3 = sub_2448EBA24();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = 8 * v15;
    v19 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    result = (void *)swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_24482F338()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738A350);
  v2 = *v0;
  v3 = sub_2448EBA24();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    result = (void *)swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_24482F4E0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = sub_2447C92C4((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  *a2 = v3;
  return result;
}

uint64_t sub_24482F50C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _OWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  _OWORD v42[2];
  _OWORD v43[2];
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v47 = a1;
  v48 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v49 = v8;
  v50 = 0;
  v51 = v11 & v9;
  v52 = a2;
  v53 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_24482FA18((uint64_t)&v44);
  if (!v46)
    goto LABEL_27;
  v12 = v44;
  sub_2447C91FC(&v45, v43);
  v13 = *(_QWORD **)a5;
  v15 = sub_244828DC8(v12);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v19 = v14;
  if (v13[3] >= v18)
  {
    if ((a4 & 1) != 0)
    {
      if ((v14 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      sub_24482D9B4();
      if ((v19 & 1) != 0)
        goto LABEL_12;
    }
LABEL_14:
    v23 = *(_QWORD **)a5;
    *(_QWORD *)(*(_QWORD *)a5 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    *(_QWORD *)(v23[6] + 8 * v15) = v12;
    sub_2447C91FC(v43, (_OWORD *)(v23[7] + 32 * v15));
    v24 = v23[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v23[2] = v26;
LABEL_16:
    sub_24482FA18((uint64_t)&v44);
    while (v46)
    {
      v28 = v44;
      sub_2447C91FC(&v45, v43);
      v29 = *(_QWORD **)a5;
      v31 = sub_244828DC8(v28);
      v32 = v29[2];
      v33 = (v30 & 1) == 0;
      v34 = v32 + v33;
      if (__OFADD__(v32, v33))
        goto LABEL_28;
      v35 = v30;
      if (v29[3] < v34)
      {
        sub_24482A744(v34, 1);
        v36 = sub_244828DC8(v28);
        if ((v35 & 1) != (v37 & 1))
          goto LABEL_30;
        v31 = v36;
      }
      if ((v35 & 1) != 0)
      {
        sub_2447C92C4((uint64_t)v43, (uint64_t)v42);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
        v27 = (_OWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v31);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
        sub_2447C91FC(v42, v27);
      }
      else
      {
        v38 = *(_QWORD **)a5;
        *(_QWORD *)(*(_QWORD *)a5 + 8 * (v31 >> 6) + 64) |= 1 << v31;
        *(_QWORD *)(v38[6] + 8 * v31) = v28;
        sub_2447C91FC(v43, (_OWORD *)(v38[7] + 32 * v31));
        v39 = v38[2];
        v25 = __OFADD__(v39, 1);
        v40 = v39 + 1;
        if (v25)
          goto LABEL_29;
        v38[2] = v40;
      }
      sub_24482FA18((uint64_t)&v44);
    }
LABEL_27:
    swift_release();
    swift_bridgeObjectRelease();
    sub_2447D1030();
    return swift_release();
  }
  sub_24482A744(v18, a4 & 1);
  v20 = sub_244828DC8(v12);
  if ((v19 & 1) == (v21 & 1))
  {
    v15 = v20;
    if ((v19 & 1) == 0)
      goto LABEL_14;
LABEL_12:
    sub_2447C92C4((uint64_t)v43, (uint64_t)v42);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    v22 = (_OWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v15);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    sub_2447C91FC(v42, v22);
    goto LABEL_16;
  }
LABEL_30:
  result = sub_2448EBC7C();
  __break(1u);
  return result;
}

uint64_t sub_24482F834@<X0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  void (*v19)(_OWORD *);
  uint64_t result;
  _OWORD v21[3];
  _OWORD v22[3];
  __int128 v23;
  _OWORD v24[2];

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v10);
    v13 = *v11;
    v12 = v11[1];
    sub_2447C92C4(*(_QWORD *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    v16 = *(_QWORD *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      v9 = (v16 - 1) & v16;
      v10 = __clz(__rbit64(v16)) + (v14 << 6);
      v7 = v14;
      goto LABEL_3;
    }
    v17 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      v16 = *(_QWORD *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        v14 = v17;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        v16 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          v14 = v5 + 3;
          goto LABEL_7;
        }
        v17 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          v16 = *(_QWORD *)(v4 + 8 * v17);
          if (v16)
            goto LABEL_10;
          v14 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            v16 = *(_QWORD *)(v4 + 8 * v14);
            if (v16)
              goto LABEL_7;
            v7 = v15 - 1;
            v18 = v5 + 6;
            while (v15 != v18)
            {
              v16 = *(_QWORD *)(v4 + 8 * v18++);
              if (v16)
              {
                v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  memset(v24, 0, sizeof(v24));
  v23 = 0u;
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v19 = (void (*)(_OWORD *))v1[5];
  result = sub_2447D3184((uint64_t)&v23, (uint64_t)v22, &qword_25738C568);
  if (*((_QWORD *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return sub_2447BD180((uint64_t)v21, &qword_25738CFA8);
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

uint64_t sub_24482FA18@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  void (*v17)(_OWORD *);
  uint64_t result;
  _OWORD v19[2];
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v10);
    sub_2447C92C4(*(_QWORD *)(v3 + 56) + 32 * v10, (uint64_t)v23 + 8);
    *(_QWORD *)&v23[0] = v11;
    goto LABEL_23;
  }
  v12 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v13 = (unint64_t)(v6 + 64) >> 6;
  if (v12 < v13)
  {
    v14 = *(_QWORD *)(v4 + 8 * v12);
    if (v14)
    {
LABEL_7:
      v9 = (v14 - 1) & v14;
      v10 = __clz(__rbit64(v14)) + (v12 << 6);
      v7 = v12;
      goto LABEL_3;
    }
    v15 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v13)
    {
      v14 = *(_QWORD *)(v4 + 8 * v15);
      if (v14)
      {
LABEL_10:
        v12 = v15;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v13)
      {
        v14 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v14)
        {
          v12 = v5 + 3;
          goto LABEL_7;
        }
        v15 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v13)
        {
          v14 = *(_QWORD *)(v4 + 8 * v15);
          if (v14)
            goto LABEL_10;
          v12 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v13)
          {
            v14 = *(_QWORD *)(v4 + 8 * v12);
            if (v14)
              goto LABEL_7;
            v7 = v13 - 1;
            v16 = v5 + 6;
            while (v13 != v16)
            {
              v14 = *(_QWORD *)(v4 + 8 * v16++);
              if (v14)
              {
                v12 = v16 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  v24 = 0;
  memset(v23, 0, sizeof(v23));
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v17 = (void (*)(_OWORD *))v1[5];
  result = sub_2447D3184((uint64_t)v23, (uint64_t)v21, &qword_25738CFE0);
  if (v22)
  {
    v19[0] = v21[0];
    v19[1] = v21[1];
    v20 = v22;
    v17(v19);
    return sub_2447BD180((uint64_t)v19, &qword_25738CFE8);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

ValueMetadata *type metadata accessor for QueryResolutionsBuilder()
{
  return &type metadata for QueryResolutionsBuilder;
}

unint64_t sub_24482FBFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25738CF90;
  if (!qword_25738CF90)
  {
    v1 = sub_2448EA548();
    result = MEMORY[0x24951AC70](MEMORY[0x24BDCEA88], v1);
    atomic_store(result, (unint64_t *)&qword_25738CF90);
  }
  return result;
}

uint64_t sub_24482FC44(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CrashReport.ID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24482FC80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738CB98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t NoOpAnalyticsLogger.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t NoOpAnalyticsLogger.init()()
{
  uint64_t v0;

  return v0;
}

void NoOpAnalyticsLogger.hints.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t (*NoOpAnalyticsLogger.hints.modify(_BYTE *a1))()
{
  *a1 = 2;
  return nullsub_1;
}

uint64_t NoOpAnalyticsLogger.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t NoOpAnalyticsLogger.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t (*sub_24482FD24(_BYTE *a1))()
{
  *a1 = 2;
  return nullsub_1;
}

void sub_24482FD3C(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t type metadata accessor for NoOpAnalyticsLogger()
{
  return objc_opt_self();
}

uint64_t method lookup function for NoOpAnalyticsLogger()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NoOpAnalyticsLogger.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

void sub_24482FD80(_QWORD *a1@<X8>)
{
  type metadata accessor for IsolatedInvalidationHandle();
  swift_allocObject();
  *a1 = sub_2447F78E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ConcurrentInvalidatableCache.swift", 140, 2, 13, 60, (uint64_t)"init(resource:)", 15, 2, 0, 0, 0, 0);
  type metadata accessor for ConcurrentInvalidatableCache.IsolatedResource();
}

uint64_t sub_24482FE18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 52), v2, v1);
}

void ConcurrentInvalidatableCache.__allocating_init()()
{
  swift_allocObject();
  ConcurrentInvalidatableCache.init()();
}

uint64_t sub_24482FE74()
{
  uint64_t v0;

  return v0;
}

void ConcurrentInvalidatableCache.init()()
{
  swift_defaultActor_initialize();
  type metadata accessor for ConcurrentInvalidatableCache.IsolatedResource();
}

void sub_24482FEBC()
{
  type metadata accessor for IsolatedInvalidatableCache();
}

void sub_24482FEE8()
{
  IsolatedInvalidatableCache.__allocating_init()();
}

uint64_t sub_24482FEF0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 112) = a1;
  return v1;
}

void type metadata accessor for ConcurrentInvalidatableCache.IsolatedResource()
{
  JUMPOUT(0x24951ABD4);
}

void sub_24482FF14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[13] = a4;
  v5[14] = v4;
  v5[11] = a2;
  v5[12] = a3;
  v5[10] = a1;
  v6 = *(_QWORD **)v4;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  v5[15] = v7;
  v8 = v6[11];
  v5[16] = v8;
  v9 = v6[12];
  v5[17] = v9;
  v10 = v6[13];
  v5[18] = v10;
  v5[2] = v7;
  v5[3] = v8;
  v5[4] = v9;
  v5[5] = v10;
  type metadata accessor for ConcurrentInvalidatableCache.IsolatedResource();
}

uint64_t sub_24482FF70(uint64_t a1)
{
  _QWORD *v1;

  v1[19] = a1;
  v1[20] = *(_QWORD *)(a1 - 8);
  v1[21] = swift_task_alloc();
  return swift_task_switch();
}

void sub_24482FFB0()
{
  _OWORD *v0;

  v0[3] = *(_OWORD *)((char *)v0 + 120);
  v0[4] = *(_OWORD *)((char *)v0 + 136);
  type metadata accessor for ConcurrentInvalidatableCache();
}

void sub_24482FFEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = MEMORY[0x24951AC70](&protocol conformance descriptor for ConcurrentInvalidatableCache<A, B>, a1);
  v4 = swift_task_alloc();
  *(_QWORD *)(v1 + 176) = v4;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v1 + 96);
  *(_QWORD *)(v4 + 32) = v2;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 184) = v5;
  *v5 = v1;
  v5[1] = sub_244830074;
  IsolatedInvalidatableCache.resource(on:for:create:)(*(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 112), v3, *(_QWORD *)(v1 + 88), (uint64_t)&unk_25738D098, v4);
}

uint64_t sub_244830074()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 192) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2448300E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 160);
  v1 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 152);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 128) - 8) + 16))(*(_QWORD *)(v0 + 80), v1 + *(int *)(v3 + 52));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_244830158()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void type metadata accessor for ConcurrentInvalidatableCache()
{
  JUMPOUT(0x24951ABD4);
}

uint64_t sub_2448301A0(uint64_t a1, int *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t);

  v4[23] = a1;
  v4[24] = a4;
  v6 = *a4;
  v4[25] = *a4;
  v7 = *(_QWORD *)(v6 + 88);
  v4[26] = v7;
  v4[27] = *(_QWORD *)(v7 - 8);
  v4[28] = swift_task_alloc();
  v8 = swift_task_alloc();
  v4[29] = v8;
  v11 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v9 = (_QWORD *)swift_task_alloc();
  v4[30] = v9;
  *v9 = v4;
  v9[1] = sub_24483024C;
  return v11(v8);
}

uint64_t sub_24483024C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

void sub_2448302B4()
{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)v0[23];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[27] + 16))(v0[28], v0[29], v0[26]);
  sub_24482FD80(v1);
}

void sub_244830340()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[12] = v0;
  v1[13] = v2;
  v1[14] = v4;
  v1[15] = v3;
  type metadata accessor for ConcurrentInvalidatableCache();
}

void sub_24483035C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = MEMORY[0x24951AC70](&protocol conformance descriptor for ConcurrentInvalidatableCache<A, B>, a1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 48) = v7;
  swift_unknownObjectWeakAssign();
  v2[16] = v1;
  v2[17] = v4;
  v2[18] = v6;
  v2[19] = v5;
  type metadata accessor for ConcurrentInvalidatableCache.IsolatedResource();
}

void sub_2448303B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, void (*a12)(uint64_t *, uint64_t, uint64_t), uint64_t *a13)
{
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v20;

  v14[5] = a1;
  v14[6] = &off_2515847C0;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_1, v16, a1);
  v14[10] = v15;
  v14[11] = v17;
  v20 = __swift_allocate_boxed_opaque_existential_1(a13);
  a12(v20, v13, v15);
  sub_2448306C0(a11, (uint64_t)a13);
}

uint64_t sub_244830414()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
  __swift_destroy_boxed_opaque_existential_1(v3);
  __swift_destroy_boxed_opaque_existential_1(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_244830470()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2448304AC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;

  v4 = (int *)v1[2];
  v5 = v1[3];
  v6 = (uint64_t *)v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_2447C62E8;
  return sub_2448301A0(a1, v4, v5, v6);
}

void sub_244830518()
{
  IsolatedInvalidatableCache.snapshot.getter();
}

void sub_24483053C()
{
  type metadata accessor for ConcurrentInvalidatableCache.IsolatedResource();
}

uint64_t sub_244830564()
{
  uint64_t v0;

  v0 = sub_2448EA89C();
  swift_bridgeObjectRelease();
  return v0;
}

void sub_2448305B4()
{
  type metadata accessor for ConcurrentInvalidatableCache.IsolatedResource();
}

uint64_t sub_2448305FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v2, v1 + *(int *)(a1 + 52));
}

void sub_244830634()
{
  type metadata accessor for ConcurrentInvalidatableCache.IsolatedResource();
}

void sub_244830668()
{
  IsolatedInvalidatableCache.invalidate(file:line:column:function:trace:)();
}

uint64_t sub_2448306A4()
{
  return swift_bridgeObjectRelease();
}

void sub_2448306C0(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  _OWORD v15[2];
  __int128 v16[2];

  v5 = *v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738A208);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_2447CE01C(a2, (uint64_t)v16);
  v11 = swift_allocObject();
  sub_2447F3530(v16, v11 + 16);
  IsolatedInvalidatable.onInvalidation(_:)((uint64_t)sub_2448315BC, v11, v9, v10);
  swift_release();
  sub_2447CE01C((uint64_t)a1, (uint64_t)v16);
  v12 = swift_allocObject();
  sub_2447F3530(v16, v12 + 16);
  v13 = sub_2448EAF74();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 1, 1, v13);
  sub_2447CE01C(a2, (uint64_t)v16);
  v14 = *(_OWORD *)(v5 + 96);
  v15[0] = *(_OWORD *)(v5 + 80);
  v15[1] = v14;
  type metadata accessor for ConcurrentInvalidatableCache();
}

uint64_t sub_244830804(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = MEMORY[0x24951AC70](&protocol conformance descriptor for ConcurrentInvalidatableCache<A, B>, a1);
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = v1;
  v6[3] = v5;
  sub_2447F3530((__int128 *)(v4 - 120), (uint64_t)(v6 + 4));
  v6[9] = sub_2448315C4;
  v6[10] = v2;
  v6[11] = v1;
  swift_retain_n();
  sub_2447C5CB8(v3, (uint64_t)&unk_25738D240, (uint64_t)v6);
  return swift_release();
}

uint64_t sub_244830894(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = a2[3];
  v4 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v3);
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v2;
  return AnyInvalidatable.invalidate(file:line:column:function:trace:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ConcurrentInvalidatableCache.swift", 140, 2, 47, 56, (uint64_t)"bindInvalidation(of:_:)", 23, 2, &v7, v3, v6);
}

uint64_t sub_244830910(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v4 = *a3;
  v5 = a4[3];
  v6 = a4[4];
  __swift_project_boxed_opaque_existential_1(a4, v5);
  v8 = *(_QWORD *)(v6 + 8);
  v9 = v4;
  return AnyInvalidatable.invalidate(file:line:column:function:trace:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ConcurrentInvalidatableCache.swift", 140, 2, 52, 32, (uint64_t)"bindInvalidation(of:_:)", 23, 2, &v9, v5, v8);
}

uint64_t sub_24483098C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  _QWORD *v7;

  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[11] = *a7;
  return swift_task_switch();
}

uint64_t sub_2448309B0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD **)(v0 + 56);
  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v4;
  *v4 = v0;
  v4[1] = sub_244830A2C;
  return ConcurrentInvalidatable.invalidationTrace.getter(v0 + 48, v2, v3);
}

uint64_t sub_244830A2C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

void sub_244830A84()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v0 + 32) = v2;
  type metadata accessor for ConcurrentInvalidatableCache();
}

uint64_t sub_244830AC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t *);
  uint64_t v5;
  uint64_t v7;

  v5 = MEMORY[0x24951AC70](&protocol conformance descriptor for ConcurrentInvalidatableCache<A, B>, a1);
  v7 = v2;
  v4(v1, v5, &v7);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t ConcurrentInvalidatableCache.deinit()
{
  uint64_t v0;

  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t ConcurrentInvalidatableCache.__deallocating_deinit()
{
  swift_release();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t ConcurrentInvalidatableCache.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_244830B60()
{
  return ConcurrentInvalidatableCache.unownedExecutor.getter();
}

void ConcurrentOnDemand.init(create:)()
{
  type metadata accessor for ConcurrentInvalidatableCache();
}

void sub_244830BC0()
{
  swift_allocObject();
  ConcurrentInvalidatableCache.init()();
}

void sub_244830BD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  *v3 = v1;
  v3[1] = v2;
  v3[2] = v0;
}

void ConcurrentOnDemand.value.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v6;
  *v6 = v2;
  v6[1] = sub_244830C70;
  sub_24482FF14(a1, v2 + 16, v4, v5);
}

uint64_t sub_244830C70()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 32) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_244830CDC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ConcurrentOnDemand.invalidate()()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *v0;
  return swift_task_switch();
}

void sub_244830D00()
{
  sub_244830634();
}

uint64_t sub_244830D1C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_244830D30()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for ConcurrentInvalidatableCache()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConcurrentInvalidatableCache.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of ConcurrentInvalidatableCache.resource(for:create:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v4 + 136)
                                                                   + *(_QWORD *)(*(_QWORD *)v4 + 136));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_2447C81F0;
  return v12(a1, a2, a3, a4);
}

uint64_t dispatch thunk of ConcurrentInvalidatableCache.snapshot.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of ConcurrentInvalidatableCache.invalidate()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t sub_244830E38()
{
  swift_release();
  return swift_release();
}

uint64_t sub_244830E60(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *sub_244830EA0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_244830EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for ConcurrentOnDemand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConcurrentOnDemand);
}

uint64_t sub_244830F4C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_244830FC8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 8) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t sub_244831084(uint64_t a1, uint64_t a2)
{
  swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

_QWORD *sub_2448310C8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  swift_retain();
  v9(v7, v8, v4);
  return a1;
}

_QWORD *sub_244831138(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_QWORD *sub_2448311A8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *sub_2448311F8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  *a1 = *a2;
  swift_release();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t sub_244831260(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 8) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_244831334 + 4 * byte_2448F1780[(v9 - 1)]))();
}

void sub_2448313A4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_244831598()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_2448315BC(uint64_t *a1)
{
  uint64_t v1;

  return sub_244830894(a1, (_QWORD *)(v1 + 16));
}

uint64_t sub_2448315C4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return sub_244830910(a1, a2, a3, (_QWORD *)(v3 + 16));
}

uint64_t sub_2448315CC()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_244831608()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD **)(v0 + 88);
  v3 = swift_task_alloc();
  v4 = *(_OWORD *)(v0 + 72);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_2447C62E8;
  *(_QWORD *)(v3 + 80) = v2;
  *(_OWORD *)(v3 + 64) = v4;
  *(_QWORD *)(v3 + 56) = v0 + 32;
  *(_QWORD *)(v3 + 88) = *v2;
  return swift_task_switch();
}

void Sequence.concatenating<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v21 = a5;
  v12 = *(_QWORD *)(a3 - 8);
  v13 = MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v19 = (char *)&v20 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v6, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a6, v19, a2);
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = v21;
  type metadata accessor for ConcatenateSequence();
}

uint64_t sub_244831770(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2 + *(int *)(a1 + 52), v3, v1);
}

void sub_2448317A8(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for ConcatenateSequence();
}

uint64_t sub_244831800(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 52), v2, v1);
}

uint64_t ConcatenateSequence.underestimatedCount.getter()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  uint64_t result;

  v0 = sub_2448EACBC();
  v1 = sub_2448EACBC();
  v2 = __OFADD__(v0, v1);
  result = v0 + v1;
  if (v2)
    __break(1u);
  return result;
}

void ConcatenateSequence.makeIterator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v5 + 16);
  MEMORY[0x24BDAC7A8](v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v11 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v1, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v1 + *(int *)(a1 + 52), v3);
  sub_24483196C();
}

void sub_24483196C()
{
  type metadata accessor for ConcatenateSequence.Iterator();
}

uint64_t sub_2448319BC(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  *(_BYTE *)(v2 + a1[14]) = 0;
  v6 = v2 + a1[15];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v6, 1, 1, AssociatedTypeWitness);
  v8 = v2 + a1[16];
  v9 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(v2, v4, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v2 + a1[13], v11, v1);
}

BOOL sub_244831AA4(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_244831AB4()
{
  return sub_2448EBD0C();
}

uint64_t sub_244831AD8()
{
  sub_2448EBD00();
  sub_2448EBD0C();
  return sub_2448EBD3C();
}

BOOL sub_244831B1C(char *a1, char *a2)
{
  return sub_244831AA4(*a1, *a2);
}

uint64_t sub_244831B28()
{
  return sub_244831AD8();
}

uint64_t sub_244831B30()
{
  return sub_244831AB4();
}

uint64_t sub_244831B38()
{
  sub_2448EBD00();
  sub_244831AB4();
  return sub_2448EBD3C();
}

void ConcatenateSequence.Iterator.next()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[14];

  v15[13] = a2;
  v15[2] = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  v4 = MEMORY[0x24BDAC7A8](a1);
  v15[1] = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[5] = *(_QWORD *)(v4 + 40);
  v15[6] = v6;
  v15[9] = swift_getAssociatedTypeWitness();
  v7 = sub_2448EB508();
  v15[7] = *(_QWORD *)(v7 - 8);
  v15[8] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v15[0] = (char *)v15 - v8;
  v15[12] = swift_getAssociatedTypeWitness();
  v9 = sub_2448EB508();
  v15[10] = *(_QWORD *)(v9 - 8);
  v15[11] = v9;
  v10 = MEMORY[0x24BDAC7A8](v9);
  v15[4] = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v15[3] = (char *)v15 - v13;
  MEMORY[0x24BDAC7A8](v12);
  swift_getAssociatedTypeWitness();
  v14 = sub_2448EB508();
  MEMORY[0x24BDAC7A8](v14);
  __asm { BR              X10 }
}

uint64_t sub_244831D6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;

  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v11 = v0;
  v12 = v1;
  v10(v3, v0, v4);
  sub_2448EACB0();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v7, 0, 1, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40))(v11 + *(int *)(v5 + 60), v7, v2);
  *(_BYTE *)(v11 + v12) = 1;
  return ((uint64_t (*)(uint64_t))ConcatenateSequence.Iterator.next())(v5);
}

void sub_2448320BC()
{
  JUMPOUT(0x24951AC70);
}

void sub_2448320CC(uint64_t a1)
{
  ConcatenateSequence.makeIterator()(a1);
}

uint64_t sub_2448320E0()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

uint64_t sub_244832100()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_24483218C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v7 + 80));
  if (v10 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || (v9 & (unint64_t)~v8) + *(_QWORD *)(v7 + 64) > 0x18)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  else
  {
    v14 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v14, ((unint64_t)a2 + v9) & v14, v5);
  }
  return v4;
}

uint64_t sub_24483225C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((*(_QWORD *)(v4 + 64) + a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

uint64_t sub_2448322B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_244832320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_24483238C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_2448323F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_244832464(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_244832540 + 4 * byte_2448F18C4[v17 - 1]))();
}

void sub_2448325BC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void type metadata accessor for ConcatenateSequence()
{
  JUMPOUT(0x24951ABD4);
}

uint64_t sub_2448327C8()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_2448327D0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v2 = swift_checkMetadataState();
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      swift_getAssociatedTypeWitness();
      v0 = sub_2448EB508();
      if (v4 <= 0x3F)
      {
        swift_getAssociatedTypeWitness();
        v0 = sub_2448EB508();
        if (v5 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return v0;
}

uint64_t *sub_24483290C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  char *v31;
  size_t v32;
  char *v33;
  void *v34;
  const void *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  size_t __n;
  uint64_t AssociatedTypeWitness;
  uint64_t v43;
  int v44;
  uint64_t v45;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v44 = *(_DWORD *)(v7 + 80);
  v8 = v44;
  v37 = *(_QWORD *)(v6 + 64) + v44;
  v39 = v7;
  v9 = *(_QWORD *)(v7 + 64);
  v38 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v40 = v9;
  v12 = (v11 + v9 + (v37 & ~(unint64_t)v44) + 1) & ~(unint64_t)v11;
  if (*(_DWORD *)(v10 + 84))
    v13 = *(_QWORD *)(v10 + 64);
  else
    v13 = *(_QWORD *)(v10 + 64) + 1;
  v43 = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(v43 - 8);
  v15 = *(_DWORD *)(v14 + 80);
  v16 = v15;
  __n = v13;
  v17 = (v13 + v16 + v12) & ~v16;
  if (*(_DWORD *)(v14 + 84))
    v18 = *(_QWORD *)(v14 + 64);
  else
    v18 = *(_QWORD *)(v14 + 64) + 1;
  v19 = v18 + v17;
  v20 = v44 | *(_DWORD *)(v6 + 80) | v11 | v15;
  v21 = (v44 | *(_BYTE *)(v6 + 80) | v11 | v15);
  v22 = v20 & 0x100000;
  if (v21 <= 7 && v19 <= 0x18 && v22 == 0)
  {
    v45 = ~v16;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v38);
    v27 = ((unint64_t)a1 + v37) & ~v8;
    v28 = ((unint64_t)a2 + v37) & ~v8;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v39 + 16))(v27, v28, v5);
    *(_BYTE *)(v27 + v40) = *(_BYTE *)(v28 + v40);
    v29 = v28 + v40 + v11;
    v30 = (void *)((v27 + v40 + v11 + 1) & ~(unint64_t)v11);
    v31 = (char *)((v29 + 1) & ~(unint64_t)v11);
    v26 = a1;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v31, 1, AssociatedTypeWitness))
    {
      v32 = __n;
      memcpy(v30, v31, __n);
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v10 + 16))(v30, v31, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v30, 0, 1, AssociatedTypeWitness);
      v32 = __n;
    }
    v33 = &v31[v32];
    v34 = (void *)(((unint64_t)v30 + v32 + v16) & v45);
    v35 = (const void *)((unint64_t)&v33[v16] & v45);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v35, 1, v43))
    {
      memcpy(v34, v35, v18);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(v34, v35, v43);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v34, 0, 1, v43);
    }
  }
  else
  {
    v25 = *a2;
    *a1 = *a2;
    v26 = (uint64_t *)(v25 + ((v21 + 16) & ~v21));
    swift_retain();
  }
  return v26;
}

uint64_t sub_244832BDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(uint64_t, _QWORD))(v4 + 8))(a1, *(_QWORD *)(a2 + 16));
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, _QWORD))(v6 + 8))(v7, *(_QWORD *)(a2 + 24));
  v8 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = (v8 + *(unsigned __int8 *)(v10 + 80) + v7 + 1) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, AssociatedTypeWitness))
    (*(void (**)(unint64_t, uint64_t))(v10 + 8))(v11, AssociatedTypeWitness);
  v12 = *(_DWORD *)(v10 + 84);
  v13 = *(_QWORD *)(v10 + 64);
  v14 = swift_getAssociatedTypeWitness();
  v15 = v12 == 0;
  v16 = *(_QWORD *)(v14 - 8);
  v17 = v13 + v11;
  if (v15)
    ++v17;
  v18 = (v17 + *(unsigned __int8 *)(v16 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v16 + 48))(v18, 1, v14);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v16 + 8))(v18, v14);
  return result;
}

uint64_t sub_244832D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  int v20;
  size_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  size_t v28;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v7 + 16))(v10, v11, *(_QWORD *)(a3 + 24));
  v12 = *(_QWORD *)(v7 + 64);
  v13 = v10 + v12;
  v14 = v11 + v12;
  *(_BYTE *)(v10 + v12) = *(_BYTE *)(v11 + v12);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = (void *)((v17 + 1 + v13) & ~v17);
  v19 = (const void *)((v17 + 1 + v14) & ~v17);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v19, 1, AssociatedTypeWitness))
  {
    v20 = *(_DWORD *)(v16 + 84);
    v21 = *(_QWORD *)(v16 + 64);
    if (v20)
      v22 = v21;
    else
      v22 = v21 + 1;
    memcpy(v18, v19, v22);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v18, v19, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v18, 0, 1, AssociatedTypeWitness);
    v20 = *(_DWORD *)(v16 + 84);
    v21 = *(_QWORD *)(v16 + 64);
  }
  if (!v20)
    ++v21;
  v23 = swift_getAssociatedTypeWitness();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v26 = (void *)(((unint64_t)v18 + v21 + v25) & ~v25);
  v27 = (const void *)(((unint64_t)v19 + v21 + v25) & ~v25);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48))(v27, 1, v23))
  {
    if (*(_DWORD *)(v24 + 84))
      v28 = *(_QWORD *)(v24 + 64);
    else
      v28 = *(_QWORD *)(v24 + 64) + 1;
    memcpy(v26, v27, v28);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v24 + 16))(v26, v27, v23);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v26, 0, 1, v23);
  }
  return a1;
}

uint64_t sub_244832F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t (*v20)(void *, uint64_t, uint64_t);
  int v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t (*v29)(void *, uint64_t, uint64_t);
  int v30;
  int v31;
  size_t v32;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 24))(a1, a2, *(_QWORD *)(a3 + 16));
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v7 + 24))(v10, v11, *(_QWORD *)(a3 + 24));
  v12 = *(_QWORD *)(v7 + 64);
  v13 = v10 + v12;
  v14 = v11 + v12;
  *(_BYTE *)(v10 + v12) = *(_BYTE *)(v11 + v12);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = (void *)((v17 + 1 + v13) & ~v17);
  v19 = (void *)((v17 + 1 + v14) & ~v17);
  v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v13) = v20(v18, 1, AssociatedTypeWitness);
  v21 = v20(v19, 1, AssociatedTypeWitness);
  if ((_DWORD)v13)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v18, v19, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v18, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v18, v19, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v16 + 84))
    v22 = *(_QWORD *)(v16 + 64);
  else
    v22 = *(_QWORD *)(v16 + 64) + 1;
  memcpy(v18, v19, v22);
LABEL_10:
  if (*(_DWORD *)(v16 + 84))
    v23 = *(_QWORD *)(v16 + 64);
  else
    v23 = *(_QWORD *)(v16 + 64) + 1;
  v24 = swift_getAssociatedTypeWitness();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(unsigned __int8 *)(v25 + 80);
  v27 = (void *)(((unint64_t)v18 + v23 + v26) & ~v26);
  v28 = (void *)(((unint64_t)v19 + v23 + v26) & ~v26);
  v29 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  v30 = v29(v27, 1, v24);
  v31 = v29(v28, 1, v24);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 16))(v27, v28, v24);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v27, 0, 1, v24);
      return a1;
    }
  }
  else
  {
    if (!v31)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 24))(v27, v28, v24);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v25 + 8))(v27, v24);
  }
  if (*(_DWORD *)(v25 + 84))
    v32 = *(_QWORD *)(v25 + 64);
  else
    v32 = *(_QWORD *)(v25 + 64) + 1;
  memcpy(v27, v28, v32);
  return a1;
}

uint64_t sub_2448331C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  int v20;
  size_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  size_t v28;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v7 + 32))(v10, v11, *(_QWORD *)(a3 + 24));
  v12 = *(_QWORD *)(v7 + 64);
  v13 = v10 + v12;
  v14 = v11 + v12;
  *(_BYTE *)(v10 + v12) = *(_BYTE *)(v11 + v12);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = (void *)((v17 + 1 + v13) & ~v17);
  v19 = (const void *)((v17 + 1 + v14) & ~v17);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v19, 1, AssociatedTypeWitness))
  {
    v20 = *(_DWORD *)(v16 + 84);
    v21 = *(_QWORD *)(v16 + 64);
    if (v20)
      v22 = v21;
    else
      v22 = v21 + 1;
    memcpy(v18, v19, v22);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v18, v19, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v18, 0, 1, AssociatedTypeWitness);
    v20 = *(_DWORD *)(v16 + 84);
    v21 = *(_QWORD *)(v16 + 64);
  }
  if (!v20)
    ++v21;
  v23 = swift_getAssociatedTypeWitness();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v26 = (void *)(((unint64_t)v18 + v21 + v25) & ~v25);
  v27 = (const void *)(((unint64_t)v19 + v21 + v25) & ~v25);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48))(v27, 1, v23))
  {
    if (*(_DWORD *)(v24 + 84))
      v28 = *(_QWORD *)(v24 + 64);
    else
      v28 = *(_QWORD *)(v24 + 64) + 1;
    memcpy(v26, v27, v28);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v26, v27, v23);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v26, 0, 1, v23);
  }
  return a1;
}

uint64_t sub_2448333C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t (*v20)(void *, uint64_t, uint64_t);
  int v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t (*v29)(void *, uint64_t, uint64_t);
  int v30;
  int v31;
  size_t v32;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 40))(a1, a2, *(_QWORD *)(a3 + 16));
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v7 + 40))(v10, v11, *(_QWORD *)(a3 + 24));
  v12 = *(_QWORD *)(v7 + 64);
  v13 = v10 + v12;
  v14 = v11 + v12;
  *(_BYTE *)(v10 + v12) = *(_BYTE *)(v11 + v12);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = (void *)((v17 + 1 + v13) & ~v17);
  v19 = (void *)((v17 + 1 + v14) & ~v17);
  v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v13) = v20(v18, 1, AssociatedTypeWitness);
  v21 = v20(v19, 1, AssociatedTypeWitness);
  if ((_DWORD)v13)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v18, v19, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v18, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v18, v19, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v16 + 84))
    v22 = *(_QWORD *)(v16 + 64);
  else
    v22 = *(_QWORD *)(v16 + 64) + 1;
  memcpy(v18, v19, v22);
LABEL_10:
  if (*(_DWORD *)(v16 + 84))
    v23 = *(_QWORD *)(v16 + 64);
  else
    v23 = *(_QWORD *)(v16 + 64) + 1;
  v24 = swift_getAssociatedTypeWitness();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(unsigned __int8 *)(v25 + 80);
  v27 = (void *)(((unint64_t)v18 + v23 + v26) & ~v26);
  v28 = (void *)(((unint64_t)v19 + v23 + v26) & ~v26);
  v29 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  v30 = v29(v27, 1, v24);
  v31 = v29(v28, 1, v24);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 32))(v27, v28, v24);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v27, 0, 1, v24);
      return a1;
    }
  }
  else
  {
    if (!v31)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 40))(v27, v28, v24);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v25 + 8))(v27, v24);
  }
  if (*(_DWORD *)(v25 + 84))
    v32 = *(_QWORD *)(v25 + 64);
  else
    v32 = *(_QWORD *)(v25 + 64) + 1;
  memcpy(v27, v28, v32);
  return a1;
}

uint64_t sub_244833650(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t AssociatedTypeWitness;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(v6 - 8);
  v47 = *(_DWORD *)(v9 + 84);
  if (v47 <= v8)
    v10 = *(_DWORD *)(v7 + 84);
  else
    v10 = *(_DWORD *)(v9 + 84);
  v46 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(unsigned int *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 84);
  v12 = v11 - 1;
  if (!(_DWORD)v11)
    v12 = 0;
  v45 = v12;
  if (v10 <= v12)
    v10 = v12;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int *)(v15 + 84);
  v17 = v16 - 1;
  if (!(_DWORD)v16)
    v17 = 0;
  if (v10 <= v17)
    v18 = v17;
  else
    v18 = v10;
  if (v18 <= 0xFC)
    v19 = 252;
  else
    v19 = v18;
  if ((_DWORD)v11)
    v20 = *(_QWORD *)(v13 + 64);
  else
    v20 = *(_QWORD *)(v13 + 64) + 1;
  if ((_DWORD)v16)
    v21 = *(_QWORD *)(v15 + 64);
  else
    v21 = *(_QWORD *)(v15 + 64) + 1;
  if (!a2)
    return 0;
  v22 = v14;
  v23 = *(unsigned __int8 *)(v9 + 80);
  v24 = *(_QWORD *)(v7 + 64) + v23;
  v25 = *(_QWORD *)(v9 + 64);
  v26 = *(unsigned __int8 *)(v13 + 80);
  v27 = *(unsigned __int8 *)(v15 + 80);
  v28 = v20 + v27;
  v29 = a1;
  if (a2 <= v19)
    goto LABEL_41;
  v30 = v21 + ((v28 + ((v26 + v25 + (v24 & ~v23) + 1) & ~v26)) & ~v27);
  v31 = 8 * v30;
  if (v30 <= 3)
  {
    v33 = ((a2 - v19 + ~(-1 << v31)) >> v31) + 1;
    if (HIWORD(v33))
    {
      v32 = *(_DWORD *)(a1 + v30);
      if (!v32)
        goto LABEL_41;
      goto LABEL_32;
    }
    if (v33 > 0xFF)
    {
      v32 = *(unsigned __int16 *)(a1 + v30);
      if (!*(_WORD *)(a1 + v30))
        goto LABEL_41;
      goto LABEL_32;
    }
    if (v33 < 2)
    {
LABEL_41:
      if ((_DWORD)v8 == v19)
      {
        v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
        v37 = v8;
        v38 = v46;
        return v36(v29, v37, v38);
      }
      v29 = (v24 + a1) & ~v23;
      if (v47 == v19)
      {
        v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
        v37 = v47;
        v38 = v6;
        return v36(v29, v37, v38);
      }
      v39 = (unsigned __int8 *)(v29 + v25);
      if (v18 <= 0xFC)
      {
        v40 = *v39;
        if (v40 >= 4)
          return v40 - 3;
        else
          return 0;
      }
      v41 = (unint64_t)&v39[v26 + 1] & ~v26;
      if (v45 == v19)
      {
        if (v11 >= 2)
        {
          v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v41, v11, AssociatedTypeWitness);
          goto LABEL_56;
        }
      }
      else if (v16 >= 2)
      {
        v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))((v28 + v41) & ~v27, v16, v22);
LABEL_56:
        if (v42 >= 2)
          return v42 - 1;
        else
          return 0;
      }
      return 0;
    }
  }
  v32 = *(unsigned __int8 *)(a1 + v30);
  if (!*(_BYTE *)(a1 + v30))
    goto LABEL_41;
LABEL_32:
  v34 = (v32 - 1) << v31;
  if (v30 > 3)
    v34 = 0;
  if ((_DWORD)v30)
  {
    if (v30 <= 3)
      v35 = v30;
    else
      v35 = 4;
    __asm { BR              X12 }
  }
  return v19 + v34 + 1;
}

void sub_244833960(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  unsigned int v23;
  int v24;
  int v25;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = v9 - 1;
  if (!v9)
    v10 = 0;
  if (v7 <= v10)
    v7 = v10;
  v11 = *(_DWORD *)(v8 + 84);
  v12 = 0;
  v13 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v14 = *(_DWORD *)(v13 + 84);
  v15 = v14 - 1;
  if (!v14)
    v15 = 0;
  if (v7 <= v15)
    v16 = v15;
  else
    v16 = v7;
  if (v16 <= 0xFC)
    v17 = 252;
  else
    v17 = v16;
  v18 = *(_QWORD *)(v8 + 64);
  if (!v11)
    ++v18;
  v19 = *(unsigned __int8 *)(v13 + 80);
  v20 = v18 + v19;
  v21 = *(_QWORD *)(v13 + 64);
  if (!v14)
    ++v21;
  v22 = v21
      + ((v20
        + ((*(unsigned __int8 *)(v8 + 80)
          + *(_QWORD *)(v6 + 64)
          + ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
          + 1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))) & ~v19);
  if (a3 > v17)
  {
    if (v22 <= 3)
    {
      v23 = ((a3 - v17 + ~(-1 << (8 * v22))) >> (8 * v22)) + 1;
      if (HIWORD(v23))
      {
        v12 = 4u;
      }
      else if (v23 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v23 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  if (v17 < a2)
  {
    v24 = ~v17 + a2;
    if (v22 < 4)
    {
      if ((_DWORD)v22)
      {
        v25 = v24 & ~(-1 << (8 * v22));
        bzero(a1, v22);
        if ((_DWORD)v22 == 3)
        {
          *(_WORD *)a1 = v25;
          a1[2] = BYTE2(v25);
        }
        else if ((_DWORD)v22 == 2)
        {
          *(_WORD *)a1 = v25;
        }
        else
        {
          *a1 = v25;
        }
      }
    }
    else
    {
      bzero(a1, v22);
      *(_DWORD *)a1 = v24;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X4 }
}

void sub_244833C50()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = v0;
}

void sub_244833C58()
{
  __int16 v0;
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = v0;
}

void type metadata accessor for ConcatenateSequence.Iterator()
{
  JUMPOUT(0x24951ABD4);
}

uint64_t sub_244833CE4(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_244833D74(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_244833DC0 + 4 * byte_2448F18E5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_244833DF4 + 4 * byte_2448F18E0[v4]))();
}

uint64_t sub_244833DF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_244833DFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x244833E04);
  return result;
}

uint64_t sub_244833E10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x244833E18);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_244833E1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244833E24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ConcatenateSequence.Iterator.State()
{
  JUMPOUT(0x24951ABD4);
}

void sub_244833E3C()
{
  JUMPOUT(0x24951AC70);
}

uint64_t sub_244833E4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v6 + 16))(v5);
  if (!swift_getEnumCaseMultiPayload())
    return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 32))(a2, v5);
  result = sub_2448EBBE0();
  __break(1u);
  return result;
}

uint64_t sub_244833EF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_2448EBD48();
  MEMORY[0x24BDAC7A8](v4);
  sub_2448356AC(a1, (char *)&v7 - v5);
  return sub_244828820(v4, (uint64_t)&v8, a2);
}

void PromiseProtocol.cancel<>(file:line:column:function:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;
  _QWORD v12[2];
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v12[0] = a1;
  v12[1] = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  v18 = a8;
  sub_2448EAF50();
  sub_2447C8004();
  v10 = (void *)swift_allocError();
  sub_2448EA7DC();
  v11 = v10;
  (*(void (**)(_QWORD *, void **, uint64_t, uint64_t))(a10 + 48))(v12, &v11, a9, a10);

}

uint64_t sub_24483402C(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  char v5;
  _QWORD v7[6];
  __int128 v8;
  char v9;
  __int128 v10;
  __int128 v11;
  char v12;

  v4 = *((_BYTE *)a1 + 16);
  v5 = *((_BYTE *)a1 + 56);
  v8 = *a1;
  v9 = v4;
  v10 = *(__int128 *)((char *)a1 + 24);
  v11 = *(__int128 *)((char *)a1 + 40);
  v12 = v5;
  v7[2] = a3;
  v7[3] = a4;
  v7[4] = a2;
  return (*(uint64_t (**)(__int128 *, uint64_t (*)@<X0>(uint64_t@<X8>), _QWORD *, uint64_t (*)(), _QWORD, uint64_t, uint64_t))(a4 + 16))(&v8, sub_244835BB4, v7, nullsub_1, 0, a3, a4);
}

uint64_t sub_2448340AC(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = MEMORY[0x24951AC70](&unk_2448ECEAC, a4);
  return sub_244834118(a1, a2, a3, a4, v8) & 1;
}

uint64_t sub_244834118(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5;
  char v6;
  _QWORD v8[6];
  __int128 v9;
  char v10;
  __int128 v11;
  __int128 v12;
  char v13;

  v5 = *((_BYTE *)a1 + 16);
  v6 = *((_BYTE *)a1 + 56);
  v9 = *a1;
  v10 = v5;
  v11 = *(__int128 *)((char *)a1 + 24);
  v12 = *(__int128 *)((char *)a1 + 40);
  v13 = v6;
  v8[2] = a4;
  v8[3] = a5;
  v8[4] = a2;
  v8[5] = a3;
  return (*(uint64_t (**)(__int128 *, uint64_t (*)@<X0>(uint64_t@<X8>), _QWORD *, uint64_t (*)(uint64_t), _QWORD, uint64_t, uint64_t))(a5 + 16))(&v9, sub_244835BC0, v8, sub_2448357D4, 0, a4, a5) & 1;
}

uint64_t sub_244834190(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = MEMORY[0x24951AC70](&unk_2448ECEAC, a4);
  return sub_2448341EC(a1, a2, a3, a4, v8);
}

uint64_t sub_2448341EC(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5;
  char v6;
  _QWORD v8[8];
  __int128 v9;
  char v10;
  __int128 v11;
  __int128 v12;
  char v13;

  v5 = *((_BYTE *)a1 + 16);
  v6 = *((_BYTE *)a1 + 56);
  v9 = *a1;
  v10 = v5;
  v11 = *(__int128 *)((char *)a1 + 24);
  v12 = *(__int128 *)((char *)a1 + 40);
  v13 = v6;
  v8[2] = a4;
  v8[3] = a5;
  v8[4] = a2;
  v8[5] = a3;
  return (*(uint64_t (**)(__int128 *, uint64_t (*)@<X0>(uint64_t@<X8>), _QWORD *, unint64_t (*)(__int128 *), _QWORD, uint64_t, uint64_t))(a5 + 16))(&v9, sub_244835BE8, v8, sub_244835928, 0, a4, a5) & 1;
}

uint64_t sub_244834270(__int128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = MEMORY[0x24951AC70](&unk_2448ECEAC, a3);
  return sub_24483402C(a1, a2, a3, v6);
}

uint64_t PromiseProtocol.fulfill(file:line:column:function:with:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_244834690(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (uint64_t)sub_244835BDC) & 1;
}

uint64_t PromiseProtocol.tryFulfill(file:line:column:function:makeResult:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v13[0] = a1;
  v13[1] = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  v18 = a7;
  v19 = a8;
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(a12 + 32))(v13, a9, a10, a11, a12) & 1;
}

uint64_t PromiseProtocol.tryFulfill(file:line:column:function:with:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_2448343B8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (uint64_t)sub_2448345EC) & 1;
}

uint64_t PromiseProtocol.tryFulfill(file:line:column:function:returning:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_2448343B8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (uint64_t)sub_244834608) & 1;
}

uint64_t sub_2448343B8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD v13[6];
  _QWORD v14[2];
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v14[0] = a1;
  v14[1] = a2;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  v19 = a7;
  v20 = a8;
  v13[2] = a10;
  v13[3] = a11;
  v13[4] = a9;
  return (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD *, uint64_t, uint64_t))(a11 + 32))(v14, a12, v13, a10, a11) & 1;
}

uint64_t PromiseProtocol.tryFulfill<>(file:line:column:function:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  _QWORD v11[4];
  _QWORD v12[2];
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v12[0] = a1;
  v12[1] = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  v18 = a8;
  v11[2] = a9;
  v11[3] = a10;
  return (*(uint64_t (**)(_QWORD *, uint64_t (*)(), _QWORD *, uint64_t, uint64_t))(a10 + 32))(v12, sub_244834624, v11, a9, a10) & 1;
}

uint64_t PromiseProtocol.tryFulfill<>(file:line:column:function:throwing:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD v12[6];
  _QWORD v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v13[0] = a1;
  v13[1] = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  v18 = a7;
  v19 = a8;
  v12[2] = a10;
  v12[3] = a11;
  v12[4] = a9;
  return (*(uint64_t (**)(_QWORD *, id (*)@<X0>(_QWORD *@<X8>), _QWORD *, uint64_t, uint64_t))(a11 + 32))(v13, sub_24483463C, v12, a10, a11) & 1;
}

uint64_t PromiseProtocol.fulfill(file:line:column:function:makeResult:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v13[0] = a1;
  v13[1] = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  v18 = a7;
  v19 = a8;
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(a12 + 40))(v13, a9, a10, a11, a12) & 1;
}

uint64_t sub_244834520@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = sub_2448EBD48();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t sub_2448345EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_244834520(*(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_244834608@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2448346EC(*(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_244834624()
{
  return sub_244834818();
}

id sub_24483463C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_2448348F8(*(void **)(v1 + 32), a1);
}

uint64_t PromiseProtocol.fulfill(file:line:column:function:returning:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_244834690(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (uint64_t)sub_244835BE0) & 1;
}

uint64_t sub_244834690(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD v13[6];
  _QWORD v14[2];
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v14[0] = a1;
  v14[1] = a2;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  v19 = a7;
  v20 = a8;
  v13[2] = a10;
  v13[3] = a11;
  v13[4] = a9;
  return (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD *, uint64_t, uint64_t))(a11 + 40))(v14, a12, v13, a10, a11) & 1;
}

uint64_t sub_2448346EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, a1, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  sub_2448EBD48();
  return swift_storeEnumTagMultiPayload();
}

uint64_t PromiseProtocol.fulfill<>(file:line:column:function:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  _QWORD v11[4];
  _QWORD v12[2];
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v12[0] = a1;
  v12[1] = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  v18 = a8;
  v11[2] = a9;
  v11[3] = a10;
  return (*(uint64_t (**)(_QWORD *, uint64_t (*)(), _QWORD *, uint64_t, uint64_t))(a10 + 40))(v12, sub_244835BEC, v11, a9, a10) & 1;
}

uint64_t sub_244834818()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return static Result<>.success.getter();
}

uint64_t PromiseProtocol.fulfill<>(file:line:column:function:throwing:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD v12[6];
  _QWORD v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v13[0] = a1;
  v13[1] = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  v18 = a7;
  v19 = a8;
  v12[2] = a10;
  v12[3] = a11;
  v12[4] = a9;
  return (*(uint64_t (**)(_QWORD *, uint64_t (*)(), _QWORD *, uint64_t, uint64_t))(a11 + 40))(v13, sub_244835BE4, v12, a10, a11) & 1;
}

id sub_2448348F8@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1;
  swift_getAssociatedTypeWitness();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738A0A8);
  sub_2448EBD48();
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t dispatch thunk of PromiseProtocol.tryFulfill(callsite:makeResult:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))() & 1;
}

uint64_t dispatch thunk of PromiseProtocol.fulfill(callsite:makeResult:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t dispatch thunk of PromiseProtocol.cancel(callsite:error:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t sub_2448349B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 16))() & 1;
}

uint64_t sub_2448349CC()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_244834A54(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    v11 = *((unsigned __int8 *)a2 + v6);
    if (v11 >= 3)
    {
      if (v6 <= 3)
        v12 = v6;
      else
        v12 = 4;
      __asm { BR              X15 }
    }
    if (v11 == 2)
    {
      (*(void (**)(uint64_t *))(v5 + 16))(a1);
      *((_BYTE *)v3 + v6) = 2;
    }
    else if (v11 == 1)
    {
      (*(void (**)(uint64_t *))(v5 + 16))(a1);
      *((_BYTE *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v6) = 0;
    }
  }
  else
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

uint64_t sub_244834BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  if (*(_QWORD *)(v4 + 64) > v3)
    v3 = *(_QWORD *)(v4 + 64);
  if (*(unsigned __int8 *)(a1 + v3) < 3u)
  {
    if (*(_BYTE *)(a1 + v3))
      return (*(uint64_t (**)(void))(v4 + 8))();
    else
      return (*(uint64_t (**)(void))(v2 + 8))();
  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    return ((uint64_t (*)(void))((char *)&loc_244834BF0 + 4 * byte_2448F1A95[v5]))();
  }
}

uint64_t sub_244834C4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  char v10;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 3)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X15 }
  }
  if (*(_BYTE *)(a2 + v7))
  {
    if (v8 == 2)
      v10 = 2;
    else
      v10 = 1;
  }
  else
  {
    v10 = 0;
    v6 = *(_QWORD *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v6 + 16))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t sub_244834D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  char v16;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 3)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    v12 = *(_QWORD *)(v5 - 8);
    v13 = *(_QWORD *)(a3 + 16);
    if (*(_BYTE *)(a1 + v9))
    {
      v12 = *(_QWORD *)(v6 - 8);
      v13 = *(_QWORD *)(a3 + 24);
      if (v10 != 2)
      {
        v12 = *(_QWORD *)(v6 - 8);
        v13 = *(_QWORD *)(a3 + 24);
      }
    }
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 3)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    if (*(_BYTE *)(a2 + v9))
    {
      if (v14 == 2)
        v16 = 2;
      else
        v16 = 1;
      v7 = v8;
      v5 = v6;
    }
    else
    {
      v16 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v5);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t sub_244834EE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  char v10;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 3)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X15 }
  }
  if (*(_BYTE *)(a2 + v7))
  {
    if (v8 == 2)
      v10 = 2;
    else
      v10 = 1;
  }
  else
  {
    v10 = 0;
    v6 = *(_QWORD *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v6 + 32))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t sub_244834FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  char v16;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 3)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    v12 = *(_QWORD *)(v5 - 8);
    v13 = *(_QWORD *)(a3 + 16);
    if (*(_BYTE *)(a1 + v9))
    {
      v12 = *(_QWORD *)(v6 - 8);
      v13 = *(_QWORD *)(a3 + 24);
      if (v10 != 2)
      {
        v12 = *(_QWORD *)(v6 - 8);
        v13 = *(_QWORD *)(a3 + 24);
      }
    }
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 3)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    if (*(_BYTE *)(a2 + v9))
    {
      if (v14 == 2)
        v16 = 2;
      else
        v16 = 1;
      v7 = v8;
      v5 = v6;
    }
    else
    {
      v16 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v5);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t sub_244835184(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  if (v3 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 253) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 3)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 254);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_24483524C + 4 * byte_2448F1AB8[(v4 - 1)]))();
}

void sub_244835298(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64);
  v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v8 = a2 - 254;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_244835444(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64);
  if (v2 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64))
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 3u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_244835490 + 4 * byte_2448F1AC6[v3]))();
}

void sub_2448354D8(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  if (a2 > 2)
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16)
                                                                                              - 8)
                                                                                  + 64))
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    else
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    v6 = a2 - 3;
    if (v5 < 4)
    {
      v7 = v6 >> (8 * v5);
      v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 3;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 3;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    if (v4 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    a1[v4] = a2;
  }
}

uint64_t type metadata accessor for PromiseFulfillment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PromiseFulfillment);
}

uint64_t sub_2448355CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v10 = sub_2448EBD48();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v16 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v16 - v11, a1, v10);
  if (swift_getEnumCaseMultiPayload() == 1)
    v14 = a3;
  else
    v14 = a2;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(v14 - 8) + 32))(a5, v12);
  type metadata accessor for PromiseFulfillment(0, a2, a3, a4);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_2448356AC@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v14;

  v4 = MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v6);
  if (swift_getEnumCaseMultiPayload())
  {
    v12 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v12(v10, v6, v7);
    v12(a2, v10, v7);
  }
  else
  {
    (*(void (**)(char *, char *, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 32))(a2, v6, *(_QWORD *)(a1 + 16));
  }
  sub_2448EBD48();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_2448357D4(uint64_t a1)
{
  (*(void (**)(void))(a1 + 80))();
  return swift_willThrow();
}

uint64_t sub_244835804@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = sub_2448EBD48();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v13 - v10;
  a1(v9);
  sub_2448355CC((uint64_t)v11, AssociatedTypeWitness, v5, AssociatedConformanceWitness, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

unint64_t sub_244835928(__int128 *a1)
{
  char v1;
  char v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(unint64_t);
  unint64_t v6;
  void *v7;
  __int128 v9;
  char v10;
  __int128 v11;
  __int128 v12;
  char v13;
  unint64_t v14;
  uint64_t v15;

  v1 = *((_BYTE *)a1 + 16);
  v2 = *((_BYTE *)a1 + 56);
  v3 = *((_QWORD *)a1 + 8);
  v4 = *((_QWORD *)a1 + 9);
  v5 = (uint64_t (*)(unint64_t))*((_QWORD *)a1 + 10);
  v14 = v3;
  v15 = v4;
  v9 = *a1;
  v10 = v1;
  v11 = *(__int128 *)((char *)a1 + 24);
  v12 = *(__int128 *)((char *)a1 + 40);
  v13 = v2;
  v6 = sub_2447E23C0(v3);
  v7 = (void *)v5(v6);
  sub_2447E0DB0((uint64_t)&v9, v7);

  return sub_2447E23A0(v3);
}

uint64_t sub_2448359CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t AssociatedConformanceWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, a1, AssociatedTypeWitness);
  v5 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for PromiseFulfillment(0, v5, AssociatedTypeWitness, AssociatedConformanceWitness);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_244835AA0(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = MEMORY[0x24951AC70](&unk_2448F5184, a4);
  return sub_244834118(a1, a2, a3, a4, v8) & 1;
}

uint64_t sub_244835B0C(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = MEMORY[0x24951AC70](&unk_2448F5184, a4);
  return sub_2448341EC(a1, a2, a3, a4, v8);
}

uint64_t sub_244835B68(__int128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = MEMORY[0x24951AC70](&unk_2448F5184, a3);
  return sub_24483402C(a1, a2, a3, v6);
}

uint64_t sub_244835BB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2448359CC(*(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_244835BC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_244835804(*(void (**)(uint64_t))(v1 + 32), a1);
}

uint64_t sub_244835BF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t result;
  uint64_t v34;
  char *v35;
  uint64_t (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (**v45)(uint64_t);
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;

  v4 = v3;
  v49 = a3;
  v6 = *(_QWORD *)(a2 + 24);
  v48 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v46 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 16);
  v50 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v52 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v12 + 32);
  v14 = type metadata accessor for CountedSharedResourceStore.Storage.CountedResource(255, v10, v6, v13);
  v15 = sub_2448EB508();
  v43 = *(_QWORD *)(v15 - 8);
  v44 = v15;
  v16 = MEMORY[0x24BDAC7A8](v15);
  v47 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v43 - v19;
  v21 = *(_QWORD *)(v14 - 8);
  v22 = MEMORY[0x24BDAC7A8](v18);
  v24 = (char *)&v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v43 - v25;
  v45 = (void (**)(uint64_t))v4;
  v28 = *(_QWORD *)(v4 + 16);
  v27 = v4 + 16;
  v51 = v13;
  MEMORY[0x2495190C8](a1, v28, v10, v14, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1, v14) == 1)
  {
    (*(void (**)(char *, uint64_t))(v43 + 8))(v20, v44);
    v29 = v49;
    (*v45)(a1);
    v30 = v48;
    v31 = v46;
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v46, v29, v6);
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v24, v31, v6);
    *(_QWORD *)&v24[*(int *)(type metadata accessor for CountedSharedResourceStore.Storage.CountedResource(0, v10, v6, v51)+ 44)] = 1;
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v52, a1, v10);
    v32 = v47;
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v47, v24, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v32, 0, 1, v14);
    sub_2448EA8B4();
    sub_2448EA8F0();
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v24, v14);
  }
  else
  {
    v44 = v27;
    v45 = (void (**)(uint64_t))v6;
    v46 = v24;
    v34 = v50;
    v35 = v52;
    v36 = *(uint64_t (**)(char *, char *, uint64_t))(v21 + 32);
    result = v36(v26, v20, v14);
    v37 = *(int *)(v14 + 44);
    v38 = *(_QWORD *)&v26[v37];
    v39 = __OFADD__(v38, 1);
    v40 = v38 + 1;
    if (v39)
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)&v26[v37] = v40;
      (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v35, a1, v10);
      v41 = v47;
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v47, v26, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v41, 0, 1, v14);
      sub_2448EA8B4();
      sub_2448EA8F0();
      v42 = v46;
      v36(v46, v26, v14);
      return (*(uint64_t (**)(uint64_t, char *, void (**)(uint64_t)))(v48 + 32))(v49, v42, v45);
    }
  }
  return result;
}

uint64_t sub_244835F80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  const char *v33;
  uint64_t v34;
  char v35;

  v4 = *(_QWORD *)(a2 + 16);
  v25 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v26 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v6 + 32);
  v8 = type metadata accessor for CountedSharedResourceStore.Storage.CountedResource(255, v4, *(_QWORD *)(v6 + 24), v7);
  v9 = sub_2448EB508();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v27 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v25 - v14;
  v16 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v25 - v17;
  v19 = *(_QWORD *)(v2 + 16);
  v28 = a1;
  MEMORY[0x2495190C8](a1, v19, v4, v8, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    v29 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Coun"
          "tedSharedResourceStore.swift";
    v30 = 138;
    v31 = 2;
    v32 = xmmword_2448F1B60;
    v33 = "release(key:)";
    v34 = 13;
    v35 = 2;
    return sub_244823F6C();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v15, v8);
    v21 = *(int *)(v8 + 44);
    v22 = *(_QWORD *)&v18[v21];
    if (v22 < 2)
    {
      sub_2448EA8B4();
      v24 = v27;
      sub_2448EA818();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v24, v9);
    }
    else
    {
      *(_QWORD *)&v18[v21] = v22 - 1;
      (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v26, v28, v4);
      v23 = v27;
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v27, v18, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v23, 0, 1, v8);
      sub_2448EA8B4();
      sub_2448EA8F0();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v8);
  }
}

uint64_t CountedSharedResourceStore.__allocating_init(resourceConstructor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  CountedSharedResourceStore.init(resourceConstructor:)(a1, a2);
  return v4;
}

_QWORD *CountedSharedResourceStore.init(resourceConstructor:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;

  type metadata accessor for CountedSharedResourceStore.Storage.CountedResource(0, *(_QWORD *)(*v2 + 80), *(_QWORD *)(*v2 + 88), *(_QWORD *)(*v2 + 96));
  v5 = sub_2448EA7C4();
  v2[2] = a1;
  v2[3] = a2;
  v2[4] = v5;
  return v2;
}

uint64_t CountedSharedResourceStore.checkout(key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t **v2;
  uint64_t *v5;
  uint64_t v6;

  v5 = *v2;
  swift_beginAccess();
  v6 = type metadata accessor for CountedSharedResourceStore.Storage(0, v5[10], v5[11], v5[12]);
  sub_244835BF0(a1, v6, a2);
  return swift_endAccess();
}

uint64_t type metadata accessor for CountedSharedResourceStore.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CountedSharedResourceStore.Storage);
}

uint64_t CountedSharedResourceStore.release(key:)(uint64_t a1)
{
  uint64_t **v1;
  uint64_t *v3;
  uint64_t v4;

  v3 = *v1;
  swift_beginAccess();
  v4 = type metadata accessor for CountedSharedResourceStore.Storage(0, v3[10], v3[11], v3[12]);
  sub_244835F80(a1, v4);
  return swift_endAccess();
}

uint64_t CountedSharedResourceStore.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t CountedSharedResourceStore.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_244836400()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for CountedSharedResourceStore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CountedSharedResourceStore);
}

uint64_t method lookup function for CountedSharedResourceStore()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CountedSharedResourceStore.__allocating_init(resourceConstructor:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_244836464()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

_QWORD *sub_24483648C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_2448364C8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_244836524(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for CountedSharedResourceStore.Storage.CountedResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CountedSharedResourceStore.Storage.CountedResource);
}

uint64_t sub_244836574()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_2448365EC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t sub_24483669C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))();
}

uint64_t sub_2448366AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_244836708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_244836764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_2448367C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_24483681C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_24483688C + 4 * byte_2448F1B70[v8]))();
}

void sub_2448368E4(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_2448369CC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_2448369D4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x2448369DCLL);
}

void sub_2448369F8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_244836A00()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_244836A08(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x244836A10);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

double CGSize.scaledBy(x:y:)(double a1, double a2, double a3)
{
  return a1 * a3;
}

double CGSize.scaled(by:)(double a1, double a2)
{
  return a1 * a2;
}

uint64_t Future.unpleasantWait()@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  dispatch_semaphore_t v13;
  _QWORD *v14;
  NSObject *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v18 = a3;
  v4 = *(_QWORD *)(*(_QWORD *)v3 + 80);
  v5 = type metadata accessor for FutureTermination(255, v4, a1, a2);
  v6 = sub_2448EB508();
  v19 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v17 - v7;
  v9 = swift_allocBox();
  v11 = v10;
  v12 = *(_QWORD *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v5);
  v13 = dispatch_semaphore_create(0);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = v4;
  v14[3] = v9;
  v14[4] = v13;
  swift_retain();
  v15 = v13;
  Future.observeFinish(_:)((uint64_t)sub_244836CEC, (uint64_t)v14);
  swift_release();
  sub_2448EB448();
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v8, v11, v6);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v8, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {

    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v18, v8, v5);
    return swift_release();
  }
  return result;
}

uint64_t sub_244836BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = type metadata accessor for FutureTermination(255, a4, a3, a4);
  v6 = sub_2448EB508();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v13 - v8;
  v10 = swift_projectBox();
  v11 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v9, a1, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v5);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(v10, v9, v6);
  return sub_2448EB454();
}

uint64_t sub_244836CC0()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_244836CEC(uint64_t a1)
{
  uint64_t *v1;

  return sub_244836BCC(a1, v1[3], v1[4], v1[2]);
}

void sub_244836CF8(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t QueryManager.objectWillChange.getter()
{
  return swift_retain();
}

uint64_t QueryManager.resolvers.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 40);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  v2 = *(_QWORD *)(v1 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 32));
  swift_release();
  swift_release();
  return v2;
}

uint64_t sub_244836D70@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 32));
  sub_244838D3C((uint64_t *)(v3 + 16), &v6);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 32));
  v4 = v6;
  swift_release();
  result = swift_release();
  *a2 = v4;
  return result;
}

uint64_t QueryManager.resolvers.setter(uint64_t a1)
{
  sub_244838D68(a1);
  return swift_bridgeObjectRelease();
}

uint64_t (*QueryManager.resolvers.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 40);
  a1[2] = v1;
  a1[3] = v3;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 32));
  v4 = *(_QWORD *)(v3 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 32));
  swift_release();
  swift_release();
  *a1 = v4;
  return sub_244836EA0;
}

uint64_t sub_244836EA0(uint64_t *a1, char a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1 + 1;
  v5 = a1[3];
  v6 = *a1;
  swift_retain();
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    os_unfair_lock_lock((os_unfair_lock_t)(v5 + 32));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v5 + 16) = v6;
    os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 32));
    swift_release();
    a1[1] = v6;
    sub_2448EA65C();
    swift_bridgeObjectRelease();
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v5 + 32));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v5 + 16) = v6;
    os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 32));
    swift_release();
    *v4 = v6;
    sub_2448EA65C();
  }
  return swift_bridgeObjectRelease();
}

uint64_t QueryManager.delegateQueryManager.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 40);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  v2 = *(_QWORD *)(v1 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 32));
  swift_bridgeObjectRelease();
  swift_release();
  return v2;
}

uint64_t sub_244837010@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 32));
  sub_244838D3C((uint64_t *)(v3 + 16), v6);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 32));
  v4 = v6[1];
  swift_bridgeObjectRelease();
  result = swift_release();
  *a2 = v4;
  return result;
}

uint64_t QueryManager.delegateQueryManager.setter(uint64_t a1)
{
  sub_244838DEC(a1);
  return swift_release();
}

uint64_t (*QueryManager.delegateQueryManager.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 40);
  a1[2] = v1;
  a1[3] = v3;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 32));
  v4 = *(_QWORD *)(v3 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 32));
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = v4;
  return sub_24483713C;
}

uint64_t sub_24483713C(uint64_t *a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1 + 1;
  v3 = *a1;
  v4 = a1[3];
  if ((a2 & 1) != 0)
  {
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v4 + 32));
    swift_retain();
    swift_release();
    *(_QWORD *)(v4 + 24) = v3;
    os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 32));
    swift_release();
    a1[1] = v3;
    sub_2448EA65C();
    swift_release();
  }
  else
  {
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v4 + 32));
    swift_retain();
    swift_release();
    *(_QWORD *)(v4 + 24) = v3;
    os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 32));
    swift_release();
    *v2 = v3;
    sub_2448EA65C();
  }
  return swift_release();
}

uint64_t QueryManager.__allocating_init(delegateManager:resolvers:)(void *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v4;

  v4 = swift_allocObject();
  QueryManager.init(delegateManager:resolvers:)(a1, a2);
  return v4;
}

_QWORD *QueryManager.init(delegateManager:resolvers:)(void *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  _OWORD *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v58;
  uint64_t v59;
  void (*v60)(_QWORD, _QWORD, _QWORD, _QWORD);
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  char *v80;
  id v81;
  id v82;

  v3 = (_QWORD *)v2;
  v60 = a2;
  v79 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738D5C8);
  MEMORY[0x24BDAC7A8](v4);
  v61 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738D5D0);
  v7 = *(_QWORD *)(v6 - 8);
  v65 = v6;
  v66 = v7;
  MEMORY[0x24BDAC7A8](v6);
  v62 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738D5D8);
  v10 = *(_QWORD *)(v9 - 8);
  v68 = v9;
  v69 = v10;
  MEMORY[0x24BDAC7A8](v9);
  v63 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738D5E0);
  v13 = *(_QWORD *)(v12 - 8);
  v72 = v12;
  v73 = v13;
  MEMORY[0x24BDAC7A8](v12);
  v64 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738D5E8);
  v16 = *(_QWORD *)(v15 - 8);
  v74 = v15;
  v75 = v16;
  MEMORY[0x24BDAC7A8](v15);
  v67 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738D5F0);
  v78 = *(_QWORD *)(v76 - 8);
  MEMORY[0x24BDAC7A8](v76);
  v71 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738D5F8);
  v77 = *(_QWORD *)(v70 - 8);
  MEMORY[0x24BDAC7A8](v70);
  v80 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_2448EB40C();
  v20 = *(_QWORD *)(v59 - 8);
  MEMORY[0x24BDAC7A8](v59);
  v22 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_2448EA734();
  MEMORY[0x24BDAC7A8](v23);
  v24 = sub_2448EB3D0();
  v25 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8](v24);
  v58 = sub_244803860();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738D600);
  v26 = (_OWORD *)swift_allocObject();
  v26[1] = xmmword_2448ECF10;
  sub_2448EB3C4();
  v82 = v26;
  sub_2447BD7A0(&qword_25738D608, v25, MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738D610);
  sub_2447EB714(&qword_25738D618, &qword_25738D610, MEMORY[0x24BEE12C8]);
  sub_2448EB6C4();
  sub_2448EA71C();
  (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v22, *MEMORY[0x24BEE5750], v59);
  *(_QWORD *)(v2 + 16) = sub_2448EB430();
  *(_QWORD *)(v2 + 32) = 0;
  v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738D620);
  swift_allocObject();
  *(_QWORD *)(v2 + 64) = sub_2448EA650();
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738D628);
  v27 = swift_allocObject();
  *(_DWORD *)(v27 + 32) = 0;
  v28 = v60;
  v29 = v79;
  *(_QWORD *)(v27 + 16) = v60;
  *(_QWORD *)(v27 + 24) = v29;
  v3[5] = v27;
  swift_retain();
  v30 = v28;
  swift_bridgeObjectRetain();
  v31 = sub_2447C8D44(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738D630);
  v32 = swift_allocObject();
  *(_DWORD *)(v32 + 24) = 0;
  *(_QWORD *)(v32 + 16) = v31;
  v3[3] = v32;
  v82 = v30;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738D638);
  swift_allocObject();
  v3[6] = sub_2448EA668();
  v82 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738D640);
  swift_allocObject();
  swift_retain();
  v33 = (void *)sub_2448EA668();
  v3[7] = v33;
  v82 = v33;
  swift_retain();
  sub_2448EA638();
  v34 = MEMORY[0x24BDB9D10];
  sub_2447EB714(&qword_25738D648, &qword_25738D640, MEMORY[0x24BDB9D10]);
  sub_2447EB714(&qword_25738D650, &qword_25738D620, MEMORY[0x24BDB9CB0]);
  sub_2448EA6EC();
  swift_release();
  v35 = (void *)v3[6];
  v81 = (id)v3[2];
  v36 = v81;
  v82 = v35;
  v37 = sub_2448EB400();
  v60 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(v37 - 8) + 56);
  v38 = (uint64_t)v61;
  v60(v61, 1, 1, v37);
  sub_2447EB714(&qword_25738D658, &qword_25738D638, v34);
  sub_2447BD7A0(&qword_25738D660, (uint64_t (*)(uint64_t))sub_244803860, MEMORY[0x24BEE5670]);
  swift_retain();
  v39 = v36;
  v40 = v62;
  sub_2448EA6BC();
  sub_2447BD180(v38, &qword_25738D5C8);

  swift_release();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738D668);
  sub_2447EB714(&qword_25738D670, &qword_25738D5D0, MEMORY[0x24BDB9548]);
  v41 = v63;
  v42 = v65;
  sub_2448EA698();
  swift_release();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v40, v42);
  v43 = sub_2447EB714(&qword_25738D678, &qword_25738D5D8, MEMORY[0x24BDB96C0]);
  v44 = MEMORY[0x24BDB9798];
  v45 = sub_2447EB714(&qword_25738D680, &qword_25738D668, MEMORY[0x24BDB9798]);
  v46 = v64;
  v47 = v68;
  MEMORY[0x249518EB8](v68, v43, v45);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v41, v47);
  v82 = (id)sub_2448EB418();
  v48 = v38;
  v60(v38, 1, 1, v37);
  sub_2447EB714(&qword_25738D688, &qword_25738D5E0, MEMORY[0x24BDB9610]);
  v49 = v67;
  v50 = v72;
  sub_2448EA6B0();
  sub_2447BD180(v48, &qword_25738D5C8);

  (*(void (**)(char *, uint64_t))(v73 + 8))(v46, v50);
  sub_2447EB714(&qword_25738D690, &qword_25738D5E8, MEMORY[0x24BDB9A08]);
  sub_2447EB714(&qword_25738D698, &qword_25738D5F8, MEMORY[0x24BDB98F0]);
  v52 = v70;
  v51 = v71;
  v53 = v80;
  v54 = v74;
  sub_2448EA6A4();
  (*(void (**)(char *, uint64_t))(v75 + 8))(v49, v54);
  sub_2447EB714(&qword_25738D6A0, &qword_25738D5F0, v44);
  sub_2447EB714(&qword_25738D6A8, &qword_25738D620, MEMORY[0x24BDB9CA8]);
  v55 = v76;
  v56 = sub_2448EA6C8();
  swift_release();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v51, v55);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v53, v52);
  v3[4] = v56;
  swift_release();
  return v3;
}

uint64_t sub_244837BA8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  if (*a1)
  {
    result = swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25738D620);
    swift_allocObject();
    result = sub_2448EA650();
  }
  *a2 = result;
  return result;
}

uint64_t sub_244837BFC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v21 = a2;
  v23 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738D7C8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738D7D0);
  v22 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v12 = MEMORY[0x24BEE4AF8];
  v27 = MEMORY[0x24BEE4AF8];
  v13 = *(_QWORD *)(v11 + 16);
  if (v13)
  {
    v20 = v5;
    v14 = v11 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_2447CE01C(v14, (uint64_t)v24);
      v15 = v25;
      v16 = v26;
      __swift_project_boxed_opaque_existential_1(v24, v25);
      v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(v15, v16);
      v18 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
      if (v17)
      {
        MEMORY[0x2495195B4](v18);
        if (*(_QWORD *)(v27 + 16) >= *(_QWORD *)(v27 + 24) >> 1)
          sub_2448EAE30();
        sub_2448EAE78();
        sub_2448EAE00();
      }
      v14 += 40;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    v12 = v27;
    v5 = v20;
  }
  v24[0] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738D7D8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738D7E0);
  sub_2447EB714(&qword_25738D7E8, &qword_25738D7D8, MEMORY[0x24BDB9AF8]);
  sub_2447EB714(&qword_25738D7F0, &qword_25738D7E0, MEMORY[0x24BEE12C8]);
  sub_2448EA62C();
  v24[0] = *(_QWORD *)(v21 + 48);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738D638);
  sub_2447EB714(&qword_25738D658, &qword_25738D638, MEMORY[0x24BDB9D10]);
  sub_2448EA698();
  swift_release();
  sub_2447EB714(&qword_25738D7F8, &qword_25738D7D0, MEMORY[0x24BDB99D8]);
  sub_2447EB714(&qword_25738D800, &qword_25738D7C8, MEMORY[0x24BDB96C0]);
  sub_2448EA6A4();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v10, v8);
}

uint64_t QueryManager.allValues<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = *(_QWORD *)(v3 + 40);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 32));
  v8 = *(_QWORD *)(v7 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 32));
  swift_release();
  if (v8)
  {
    swift_retain();
    QueryManager.allValues<A>(for:)(a1, a2, a3);
    v9 = swift_release();
  }
  else
  {
    swift_getAssociatedTypeWitness();
    v9 = sub_2448EAE54();
  }
  MEMORY[0x24BDAC7A8](v9);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738D6B0);
  swift_getAssociatedTypeWitness();
  sub_2447EB714(&qword_25738D6B8, &qword_25738D6B0, MEMORY[0x24BEE12C8]);
  sub_2448EACE0();
  swift_bridgeObjectRelease();
  v10 = sub_2448EAE3C();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_2448380D8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v11 = a1[3];
  v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v12 + 8))(&v14, v11, v12);
  QueryResolutions.value<A>(for:with:)(a2, a3, a4, a5, a6);
  return swift_bridgeObjectRelease();
}

uint64_t QueryManager.firstValue<A>(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  *(_QWORD *)&v32 = a1;
  v34 = a3;
  v5 = *(_QWORD *)(a2 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v29 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v35 = v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v31 = sub_2448EB508();
  v9 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v11 = (char *)&v28 - v10;
  *(_QWORD *)&v30 = v3;
  v12 = *(_QWORD *)(v3 + 40);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v12 + 32));
  v14 = *(_QWORD *)(v12 + 16);
  v13 = *(_QWORD *)(v12 + 24);
  swift_retain();
  v33 = v14;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 32));
  swift_release();
  if (v13)
  {
    swift_retain();
    v15 = v32;
    QueryManager.firstValue<A>(for:)(v32, a2, v35);
    swift_release();
    v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v11, 1, AssociatedTypeWitness) != 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      v17 = v34;
      (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v34, v11, AssociatedTypeWitness);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v17, 0, 1, AssociatedTypeWitness);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v11, 1, 1, AssociatedTypeWitness);
    v15 = v32;
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v31);
  *(_QWORD *)&v39 = v33;
  v19 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v29, v15, a2);
  v20 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v21 = (v6 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject();
  v23 = v35;
  *(_QWORD *)(v22 + 16) = a2;
  *(_QWORD *)(v22 + 24) = v23;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v22 + v20, v19, a2);
  *(_QWORD *)(v22 + v21) = v30;
  swift_bridgeObjectRetain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25738D6C0);
  sub_2447EB714(&qword_25738D6C8, &qword_25738D6C0, MEMORY[0x24BEE25B0]);
  sub_2448EBA60();
  swift_release();
  swift_bridgeObjectRelease();
  v35 = v43;
  v32 = v44;
  v39 = v43;
  v40 = v44;
  v30 = v45;
  v41 = v45;
  v42 = v46;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25738D6B0);
  sub_2447EB714(&qword_25738D6B8, &qword_25738D6B0, MEMORY[0x24BEE12C8]);
  v24 = sub_2448EB904();
  MEMORY[0x24951AC70](MEMORY[0x24BEE2B40], v24);
  v25 = sub_2448EBA00();
  MEMORY[0x24951AC70](MEMORY[0x24BEE2FF8], v25);
  v26 = sub_2448EB904();
  v38 = sub_2447EB714(&qword_25738D6D0, &qword_25738D6B0, MEMORY[0x24BEE12E0]);
  v27 = MEMORY[0x24BEE2B50];
  v37 = MEMORY[0x24951AC70](MEMORY[0x24BEE2B50], v24, &v38);
  v36 = MEMORY[0x24951AC70](MEMORY[0x24BEE3000], v25, &v37);
  MEMORY[0x24951AC70](v27, v26, &v36);
  sub_2448EB250();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244838608@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v11 = a1[3];
  v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v12 + 8))(&v14, v11, v12);
  QueryResolutions.value<A>(for:with:)(a2, a3, a4, a5, a6);
  return swift_bridgeObjectRelease();
}

uint64_t QueryManager.cachedValue<A, B>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t TupleTypeMetadata2;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t);
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  char *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38[2];
  uint64_t v39[5];
  _BYTE v40[40];

  v6 = v5;
  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(&v24[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, a2);
  sub_2448EB70C();
  v39[2] = *(_QWORD *)(v6 + 24);
  v32 = a2;
  v33 = a3;
  v34 = a4;
  v35 = a5;
  v36 = v40;
  v37 = v6;
  v25 = a2;
  v26 = a3;
  v27 = a4;
  v28 = a5;
  v29 = sub_244838F30;
  v30 = &v31;
  swift_retain();
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_25738D6D8);
  type metadata accessor for Future(255, a3, v15, v16);
  type metadata accessor for Promise(255, a3, v17, v18);
  sub_2448EB508();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v20 = sub_2447EB714(&qword_25738D6E0, &qword_25738D6D8, (uint64_t)&protocol conformance descriptor for OSAllocatedUnfairLock<A>);
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_2447B9000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/QueryManager.swift", 124, 2, 117, 71, (uint64_t)"cachedValue(for:)", 17, 2, (uint64_t)sub_244838F40, (uint64_t)v24, v14, TupleTypeMetadata2, v20);
  swift_release();
  v21 = v39[3];
  if (v39[4])
  {
    v22 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(a4 + 40);
    swift_retain();
    v22(v39, v6, a2, a4);
    v38[0] = 0;
    v38[1] = 0;
    Promise.track(future:on:)(v39[0], v38);
    swift_release_n();
    swift_release();
    sub_24481241C(0);
  }
  sub_2447D12A8((uint64_t)v40);
  return v21;
}

uint64_t sub_2448388E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  _OWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = 0;
  sub_244838AF8(a2, (_QWORD *(*)(_QWORD *__return_ptr))sub_244839148, v21);
  type metadata accessor for Future(0, a5, v13, v14);
  swift_dynamicCast();
  v15 = v23;
  if (v24)
  {
    v16 = *(void (**)(uint64_t))(a3 + 72);
    if (v16)
    {
      v17 = swift_retain();
      v16(v17);
      sub_2447C8F84((uint64_t)v16);
    }
    sub_2447D126C(a2, (uint64_t)v21);
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = a4;
    *(_QWORD *)(v18 + 24) = a5;
    *(_QWORD *)(v18 + 32) = a6;
    *(_QWORD *)(v18 + 40) = a7;
    *(_QWORD *)(v18 + 48) = a3;
    v19 = v21[1];
    *(_OWORD *)(v18 + 56) = v21[0];
    *(_OWORD *)(v18 + 72) = v19;
    *(_QWORD *)(v18 + 88) = v22;
    swift_retain();
    Future.observeFinish(_:)((uint64_t)sub_244839194, v18);
    swift_release();
  }
  return v15;
}

uint64_t sub_244838A44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v11;
  uint64_t result;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v11 = type metadata accessor for Future(0, a3, a3, a4);
  v14 = a2;
  v15 = a4;
  v16 = a5;
  v17 = a1;
  result = sub_2447EB460((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/QueryManager.swift", 124, 2, 126, 35, (uint64_t)"cachedValue(for:)", 17, 2, (void (*)(uint64_t))sub_2448391A8, (uint64_t)v13);
  a6[3] = v11;
  *a6 = result;
  return result;
}

_OWORD *sub_244838AF8@<X0>(uint64_t a1@<X0>, _QWORD *(*a2)(_QWORD *__return_ptr)@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  _OWORD *v11;
  _OWORD *result;
  _BYTE v13[32];
  _BYTE v14[40];
  _QWORD v15[4];

  v8 = *v3;
  if (*(_QWORD *)(v8 + 16) && (v9 = sub_244828E5C(a1), (v10 & 1) != 0))
  {
    sub_2447C92C4(*(_QWORD *)(v8 + 56) + 32 * v9, (uint64_t)v14);
    v11 = v14;
  }
  else
  {
    result = a2(v15);
    if (v4)
      return result;
    sub_2447D126C(a1, (uint64_t)v14);
    sub_2447C92C4((uint64_t)v15, (uint64_t)v13);
    sub_244896164((uint64_t)v13, (uint64_t)v14);
    v11 = v15;
  }
  return sub_2447C91FC(v11, a3);
}

uint64_t sub_244838BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v5;

  v5 = *(os_unfair_lock_s **)(a2 + 24);
  swift_retain();
  os_unfair_lock_lock(v5 + 6);
  sub_244838C3C((uint64_t)&v5[4], a3, a2);
  os_unfair_lock_unlock(v5 + 6);
  return swift_release();
}

uint64_t sub_244838C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  void (*v5)(uint64_t);
  uint64_t v6;
  _OWORD v7[2];

  sub_24489798C(a2, v7);
  result = sub_2447BD180((uint64_t)v7, &qword_25738B658);
  v5 = *(void (**)(uint64_t))(a3 + 88);
  if (v5)
  {
    v6 = swift_retain();
    v5(v6);
    return sub_2447C8F84((uint64_t)v5);
  }
  return result;
}

uint64_t QueryManager.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_2447C8F84(*(_QWORD *)(v0 + 72));
  sub_2447C8F84(*(_QWORD *)(v0 + 88));
  return v0;
}

uint64_t QueryManager.__deallocating_deinit()
{
  QueryManager.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_244838D30@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 64);
  return swift_retain();
}

uint64_t sub_244838D3C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  v2 = a1[1];
  *a2 = v3;
  a2[1] = v2;
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_244838D68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 40);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 32));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 16) = a1;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 32));
  swift_release();
  return sub_2448EA65C();
}

uint64_t sub_244838DEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 40);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 32));
  swift_retain();
  swift_release();
  *(_QWORD *)(v3 + 24) = a1;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 32));
  swift_release();
  return sub_2448EA65C();
}

uint64_t sub_244838E70@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_244837BFC(a1, v2, a2);
}

uint64_t sub_244838E78@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_2448380D8(a1, v2[4], v2[5], v2[2], v2[3], a2);
}

uint64_t sub_244838E94()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_244838F00@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  return sub_244838608(a1, v2 + v5, *(_QWORD *)(v2 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8)), v3, *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_244838F30(uint64_t a1)
{
  uint64_t *v1;

  return sub_2448388E4(a1, v1[6], v1[7], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_244838F40@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(v1 + 48))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_244838F78()
{
  return sub_2447EB714(&qword_25738D650, &qword_25738D620, MEMORY[0x24BDB9CB0]);
}

uint64_t sub_244838FA8()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  sub_244838D68(v0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_244838FDC()
{
  uint64_t v0;

  v0 = swift_retain();
  sub_244838DEC(v0);
  return swift_release();
}

uint64_t type metadata accessor for QueryManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for QueryManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of QueryManager.__allocating_init(delegateManager:resolvers:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t destroy for QueryManager.State()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

_QWORD *_s20PreviewsFoundationOS12QueryManagerC5StateVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for QueryManager.State(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for QueryManager.State(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for QueryManager.State()
{
  return &type metadata for QueryManager.State;
}

uint64_t sub_244839148@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return sub_244838A44(v1[6], v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t sub_244839168()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return swift_deallocObject();
}

uint64_t sub_244839194(uint64_t a1)
{
  uint64_t v1;

  return sub_244838BC8(a1, *(_QWORD *)(v1 + 48), v1 + 56);
}

uint64_t sub_2448391A8(uint64_t a1)
{
  uint64_t v1;

  **(_QWORD **)(v1 + 40) = a1;
  swift_retain();
  return swift_release();
}

uint64_t dispatch thunk of DefaultInit.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

void TimePeriod.start.getter(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

void TimePeriod.end.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
}

_QWORD *TimePeriod.init(start:end:)@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  v3 = *a2;
  *a3 = *result;
  a3[1] = v3;
  return result;
}

double TimePeriod.nanoseconds.getter(double a1, double a2, double a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;

  v4 = v3[1];
  v5 = v4 - *v3;
  if (v4 < *v3)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (qword_257389C98 != -1)
LABEL_5:
    swift_once();
  LODWORD(a3) = HIDWORD(qword_25738D808);
  LODWORD(a2) = qword_25738D808;
  return (double)v5 * (double)*(unint64_t *)&a2 / (double)*(unint64_t *)&a3;
}

double TimePeriod.milliseconds.getter(double a1, double a2, double a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;

  v4 = v3[1];
  v5 = v4 - *v3;
  if (v4 < *v3)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (qword_257389C98 != -1)
LABEL_5:
    swift_once();
  LODWORD(a3) = HIDWORD(qword_25738D808);
  LODWORD(a2) = qword_25738D808;
  return (double)v5 * (double)*(unint64_t *)&a2 / (double)*(unint64_t *)&a3 / 1000000.0;
}

double TimePeriod.seconds.getter(double a1, double a2, double a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;

  v4 = v3[1];
  v5 = v4 - *v3;
  if (v4 < *v3)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (qword_257389C98 != -1)
LABEL_5:
    swift_once();
  LODWORD(a3) = HIDWORD(qword_25738D808);
  LODWORD(a2) = qword_25738D808;
  return (double)v5 * (double)*(unint64_t *)&a2 / (double)*(unint64_t *)&a3 / 1000000000.0;
}

double sub_244839374()
{
  double result;
  mach_timebase_info v1[2];

  v1[1] = *(mach_timebase_info *)MEMORY[0x24BDAC8D0];
  v1[0] = 0;
  mach_timebase_info(v1);
  result = *(double *)v1;
  qword_25738D808 = (uint64_t)v1[0];
  return result;
}

ValueMetadata *type metadata accessor for TimePeriod()
{
  return &type metadata for TimePeriod;
}

uint64_t DelayedInvocation.callback.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 80))();
}

uint64_t sub_24483940C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t (*)(), uint64_t);

  v3 = *a1;
  v4 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = *(uint64_t (**)(uint64_t (*)(), uint64_t))(**(_QWORD **)(*(_QWORD *)a2 + 16) + 88);
  swift_retain();
  return v6(sub_24481E54C, v5);
}

uint64_t DelayedInvocation.callback.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 88))();
}

uint64_t (*DelayedInvocation.callback.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 16);
  a1[2] = v3;
  *a1 = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 80))();
  a1[1] = v4;
  return sub_2448394E0;
}

uint64_t sub_2448394E0(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = a1[1];
  v3 = *a1;
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1[2] + 88);
  if ((a2 & 1) == 0)
    return v4(*a1, v2);
  swift_retain();
  v4(v3, v2);
  return swift_release();
}

uint64_t DelayedInvocation.__allocating_init<A>(scheduler:callback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_244839560(a1, a2, a3, a4, a5, (uint64_t (*)(void))sub_24483A164);
}

uint64_t DelayedInvocation.init<A>(scheduler:callback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_244839560(a1, a2, a3, a4, a5, (uint64_t (*)(void))sub_24483A104);
}

uint64_t sub_244839560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  uint64_t v8;

  v8 = a6();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a1, a4);
  return v8;
}

Swift::Void __swiftcall DelayedInvocation.schedule(delay:)(Swift::Double delay)
{
  uint64_t v1;

  (*(void (**)(double))(**(_QWORD **)(v1 + 16) + 104))(delay);
}

Swift::Void __swiftcall DelayedInvocation.cancel()()
{
  uint64_t v0;

  (*(void (**)(void))(**(_QWORD **)(v0 + 16) + 112))();
}

Swift::Void __swiftcall DelayedInvocation.invokeNowIfScheduled()()
{
  uint64_t v0;

  (*(void (**)(void))(**(_QWORD **)(v0 + 16) + 120))();
}

uint64_t DelayedInvocation.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t DelayedInvocation.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t (*sub_244839660())()
{
  return nullsub_1;
}

uint64_t sub_244839670()
{
  return swift_release();
}

uint64_t sub_244839678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  type metadata accessor for DelayedInvocation.DelayedInvocationBox.State(255, *(_QWORD *)(*(_QWORD *)v4 + 136), *(_QWORD *)(*(_QWORD *)v4 + 144), a4);
  v5 = sub_2448EA5D8();
  v6 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v5);
  SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/DelayedInvocation.swift", 129, 2, 79, 29, (uint64_t)"callback", 8, 2, v5, v6);
  return v8;
}

uint64_t sub_244839714(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];

  v5 = *v2;
  v14[2] = *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 160));
  v6 = *(_QWORD *)(v5 + 136);
  v7 = *(_QWORD *)(v5 + 144);
  KeyPath = (uint64_t *)swift_getKeyPath();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v14[0] = sub_24481E54C;
  v14[1] = v9;
  type metadata accessor for DelayedInvocation.DelayedInvocationBox.State(255, v6, v7, v10);
  v11 = sub_2448EA5D8();
  swift_retain();
  swift_retain();
  v12 = MEMORY[0x24951AC70](&protocol conformance descriptor for OSAllocatedUnfairLock<A>, v11);
  SynchronousAccessProviding.syncSetValue<A>(at:to:)(KeyPath, (uint64_t)v14, v11, v12);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

