void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

uint64_t static Result<>.catching<A>(_:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v4[2] = a1;
  v4[3] = a4;
  v8 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v6 = (_QWORD *)swift_task_alloc();
  v4[4] = v6;
  *v6 = v4;
  v6[1] = sub_23644E724;
  return v8(a1);
}

uint64_t sub_23644E724()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23644E788()
{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542A8310);
  sub_2365B0A40();
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23644E7E8()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 40);
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542A8310);
  sub_2365B0A40();
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x23B7F5158](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void type metadata accessor for CBUseCase(uint64_t a1)
{
  sub_23644F24C(a1, &qword_2563E44D0);
}

void type metadata accessor for CBNearbyActionProblemFlags(uint64_t a1)
{
  sub_23644F24C(a1, &qword_2563E44D8);
}

void type metadata accessor for CBNearbyActionFlags(uint64_t a1)
{
  sub_23644F24C(a1, &qword_2563E44E0);
}

void type metadata accessor for CBNearbyActionType(uint64_t a1)
{
  sub_23644F24C(a1, &qword_2563E44E8);
}

void type metadata accessor for RPStatusFlags(uint64_t a1)
{
  sub_23644F24C(a1, &qword_2563E44F0);
}

void type metadata accessor for RPDataLinkType(uint64_t a1)
{
  sub_23644F24C(a1, &qword_2563E44F8);
}

void type metadata accessor for SFDeviceActionType(uint64_t a1)
{
  sub_23644F24C(a1, &qword_2563E4500);
}

void type metadata accessor for SFAdvertiseRate(uint64_t a1)
{
  sub_23644F24C(a1, &qword_2563E4508);
}

void type metadata accessor for CUPasswordType(uint64_t a1)
{
  sub_23644F24C(a1, &qword_2563E4510);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_23644E958(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_23644E978(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for os_activity_scope_state_s(uint64_t a1)
{
  sub_23644F24C(a1, &qword_2563E4518);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_23644F24C(a1, (unint64_t *)&unk_2563E4520);
}

void type metadata accessor for AIDAServiceType(uint64_t a1)
{
  sub_23644F24C(a1, &qword_2542A82E8);
}

uint64_t sub_23644E9DC(uint64_t a1, uint64_t a2)
{
  return sub_23644EBAC(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF9E0]);
}

uint64_t sub_23644E9E8(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_2365B0044();
  *a2 = 0;
  return result;
}

uint64_t sub_23644EA5C(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_2365B0050();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_23644EAD8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_2365B005C();
  v2 = sub_2365B0038();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_23644EB18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_2365B005C();
  v2 = v1;
  if (v0 == sub_2365B005C() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_2365B08CC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_23644EBA0(uint64_t a1, uint64_t a2)
{
  return sub_23644EBAC(a1, a2, MEMORY[0x24BEE0CD8]);
}

uint64_t sub_23644EBAC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_2365B005C();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_23644EBE8()
{
  sub_2365B005C();
  sub_2365B008C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23644EC28()
{
  uint64_t v0;

  sub_2365B005C();
  sub_2365B09E0();
  sub_2365B008C();
  v0 = sub_2365B0A34();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_23644EC98@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_2365B0038();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_23644ECDC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_2365B005C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_23644ED04(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

void sub_23644ED10(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

_BYTE *sub_23644ED18@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 | *result;
  return result;
}

_BYTE *sub_23644ED2C@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & *result;
  return result;
}

_BYTE *sub_23644ED40@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_23644ED54(_BYTE *a1, unsigned __int8 *a2)
{
  _BYTE *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2;
  if ((v4 & v3) != v3)
    *v2 = v4 | v3;
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int8 *sub_23644ED84@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  v5 = v4 & v3;
  if ((v4 & v3) != 0)
    *v2 = v4 & ~(_BYTE)v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned __int8 *sub_23644EDB0@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 = v4 | v3;
  v5 = v4 & v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

_BYTE *sub_23644EDD4(_BYTE *result)
{
  _BYTE *v1;

  *v1 |= *result;
  return result;
}

_BYTE *sub_23644EDE8(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= *result;
  return result;
}

_BYTE *sub_23644EDFC(_BYTE *result)
{
  _BYTE *v1;

  *v1 ^= *result;
  return result;
}

_BYTE *sub_23644EE10@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_23644EE24(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_23644EE38(_BYTE *a1)
{
  _BYTE *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_23644EE4C(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_23644EE60()
{
  _BYTE *v0;

  return *v0 == 0;
}

uint64_t sub_23644EE70()
{
  return sub_2365B04E8();
}

_BYTE *sub_23644EE88(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t sub_23644EE9C()
{
  sub_2365B09E0();
  sub_2365B0A04();
  return sub_2365B0A34();
}

uint64_t sub_23644EEE0()
{
  return sub_2365B0A04();
}

uint64_t sub_23644EF08()
{
  sub_2365B09E0();
  sub_2365B0A04();
  return sub_2365B0A34();
}

unsigned __int8 *sub_23644EF48@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_23644EF58(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_DWORD *sub_23644EF64@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_23644EF74(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

uint64_t sub_23644EF80@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  char v3;
  uint64_t result;

  v3 = sub_23644F200(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

_BYTE *sub_23644EFBC@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

BOOL sub_23644EFC8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23644EFDC()
{
  sub_23644F0B8((unint64_t *)&qword_2542A82D0, (uint64_t (*)(uint64_t))type metadata accessor for AIDAServiceType, (uint64_t)&unk_2365B23B4);
  sub_23644F0B8(&qword_2563E4568, (uint64_t (*)(uint64_t))type metadata accessor for AIDAServiceType, (uint64_t)&unk_2365B2074);
  return sub_2365B06D4();
}

uint64_t sub_23644F060()
{
  return sub_23644F0B8(&qword_2563E4530, (uint64_t (*)(uint64_t))type metadata accessor for AIDAServiceType, (uint64_t)&unk_2365B203C);
}

uint64_t sub_23644F08C()
{
  return sub_23644F0B8(&qword_2563E4538, (uint64_t (*)(uint64_t))type metadata accessor for AIDAServiceType, (uint64_t)&unk_2365B2014);
}

uint64_t sub_23644F0B8(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x23B7F5164](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23644F0F8()
{
  return sub_23644F0B8(&qword_2563E4540, (uint64_t (*)(uint64_t))type metadata accessor for CBNearbyActionType, (uint64_t)&unk_2365B218C);
}

uint64_t sub_23644F124()
{
  return sub_23644F0B8(&qword_2563E4548, (uint64_t (*)(uint64_t))type metadata accessor for CBNearbyActionProblemFlags, (uint64_t)&unk_2365B2254);
}

uint64_t sub_23644F150()
{
  return sub_23644F0B8(&qword_2563E4550, (uint64_t (*)(uint64_t))type metadata accessor for CBNearbyActionProblemFlags, (uint64_t)&unk_2365B2224);
}

uint64_t sub_23644F17C()
{
  return sub_23644F0B8(&qword_2563E4558, (uint64_t (*)(uint64_t))type metadata accessor for CBNearbyActionProblemFlags, (uint64_t)&unk_2365B227C);
}

uint64_t sub_23644F1A8()
{
  return sub_23644F0B8(&qword_2563E4560, (uint64_t (*)(uint64_t))type metadata accessor for CBNearbyActionProblemFlags, (uint64_t)&unk_2365B22B4);
}

uint64_t sub_23644F1D4()
{
  return sub_23644F0B8((unint64_t *)&unk_2542A82D8, (uint64_t (*)(uint64_t))type metadata accessor for AIDAServiceType, (uint64_t)&unk_2365B20A4);
}

uint64_t sub_23644F200(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = (unsigned __int8 *)(v2 + 32);
  do
  {
    v5 = *v3++;
    v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0)
      v4 = 0;
    result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

void type metadata accessor for AKAppleIDInterativeAuthDevicePromptType(uint64_t a1)
{
  sub_23644F24C(a1, (unint64_t *)&unk_2563E4570);
}

void sub_23644F24C(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t AuthenticationModel.account.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23644F2B4(v1, a1);
}

uint64_t sub_23644F2B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E45E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x23B7F514C]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t AuthenticationModel.account.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_23644F344(a1, v1);
}

uint64_t sub_23644F344(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E45E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*AuthenticationModel.account.modify())()
{
  return nullsub_1;
}

uint64_t AuthenticationModel.candidateAccountID.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for AuthenticationModel() + 20));
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  v9 = v3[5];
  v10 = v3[6];
  v11 = v3[7];
  v13 = v3[8];
  v12 = v3[9];
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  a1[7] = v11;
  a1[8] = v13;
  a1[9] = v12;
  return sub_23644F440(v4, v5);
}

uint64_t type metadata accessor for AuthenticationModel()
{
  uint64_t result;

  result = qword_2563E4B08;
  if (!qword_2563E4B08)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23644F440(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

__n128 AuthenticationModel.candidateAccountID.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  __n128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v9 = *a1;
  v7 = a1[2];
  v8 = a1[1];
  v6 = (__n128)a1[3];
  v2 = *((_QWORD *)a1 + 8);
  v3 = *((_QWORD *)a1 + 9);
  v4 = v1 + *(int *)(type metadata accessor for AuthenticationModel() + 20);
  sub_23644F52C(*(_QWORD *)v4, *(_QWORD *)(v4 + 8));
  *(_OWORD *)v4 = v9;
  *(_OWORD *)(v4 + 16) = v8;
  result = v6;
  *(_OWORD *)(v4 + 32) = v7;
  *(__n128 *)(v4 + 48) = v6;
  *(_QWORD *)(v4 + 64) = v2;
  *(_QWORD *)(v4 + 72) = v3;
  return result;
}

uint64_t sub_23644F52C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*AuthenticationModel.candidateAccountID.modify())()
{
  type metadata accessor for AuthenticationModel();
  return nullsub_1;
}

uint64_t AuthenticationModel.userInteraction.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AuthenticationModel();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 24));
  return result;
}

uint64_t AuthenticationModel.userInteraction.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = type metadata accessor for AuthenticationModel();
  *(_BYTE *)(v1 + *(int *)(result + 24)) = v2;
  return result;
}

uint64_t (*AuthenticationModel.userInteraction.modify())()
{
  type metadata accessor for AuthenticationModel();
  return nullsub_1;
}

id AuthenticationModel._state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;

  v3 = v1 + *(int *)(type metadata accessor for AuthenticationModel() + 28);
  v4 = *(void **)v3;
  v5 = *(void **)(v3 + 8);
  v6 = *(void **)(v3 + 16);
  v7 = *(void **)(v3 + 24);
  v8 = *(void **)(v3 + 32);
  v9 = *(void **)(v3 + 40);
  v10 = *(_QWORD *)(v3 + 48);
  v11 = *(_QWORD *)(v3 + 56);
  v12 = *(void **)(v3 + 64);
  v13 = *(void **)(v3 + 72);
  LOBYTE(v3) = *(_BYTE *)(v3 + 80);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v13;
  *(_BYTE *)(a1 + 80) = v3;
  return sub_23644F6A4(v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v3);
}

id sub_23644F6A4(id result, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8, void *a9, void *a10, char a11)
{
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v28;

  v15 = result;
  switch(a11)
  {
    case 0:
      v19 = a6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 1:
      v28 = a10;
      v21 = result;
      sub_23644F7E0((uint64_t)a5, (uint64_t)a6, a7, a8, a9);
      goto LABEL_6;
    case 2:
      v23 = a5;
      v24 = v15;
      v25 = a2;
      v26 = a3;
      v22 = a4;
      goto LABEL_8;
    case 3:
    case 4:
      v28 = a3;
      v16 = a4;
      v17 = v15;
      v18 = a2;
LABEL_6:
      v22 = v28;
LABEL_8:
      result = v22;
      break;
    case 5:
LABEL_9:
      result = (id)swift_bridgeObjectRetain();
      break;
    case 6:
    case 7:
      result = (id)swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_23644F7E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v5;
  uint64_t result;

  if (a2 != 1)
  {
    v5 = a5;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

__n128 AuthenticationModel._state.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  __n128 result;
  __n128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v10 = *a1;
  v8 = a1[2];
  v9 = a1[1];
  v7 = (__n128)a1[3];
  v2 = *((_QWORD *)a1 + 8);
  v3 = *((_QWORD *)a1 + 9);
  v4 = *((_BYTE *)a1 + 80);
  v5 = v1 + *(int *)(type metadata accessor for AuthenticationModel() + 28);
  sub_23644F8BC(*(void **)v5, *(void **)(v5 + 8), *(void **)(v5 + 16), *(void **)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56), *(void **)(v5 + 64), *(void **)(v5 + 72), *(_BYTE *)(v5 + 80));
  *(_OWORD *)v5 = v10;
  *(_OWORD *)(v5 + 16) = v9;
  result = v7;
  *(_OWORD *)(v5 + 32) = v8;
  *(__n128 *)(v5 + 48) = v7;
  *(_QWORD *)(v5 + 64) = v2;
  *(_QWORD *)(v5 + 72) = v3;
  *(_BYTE *)(v5 + 80) = v4;
  return result;
}

void sub_23644F8BC(void *a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, char a11)
{
  void *v14;
  id v20;

  switch(a11)
  {
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (void *)a6;
      goto LABEL_8;
    case 1:
      v20 = a10;

      sub_23644F9E0(a5, a6, a7, a8, a9);
      goto LABEL_6;
    case 2:

      v14 = (void *)a5;
      goto LABEL_8;
    case 3:
    case 4:
      v20 = a4;

LABEL_6:
      v14 = v20;
LABEL_8:

      break;
    case 5:
      swift_bridgeObjectRelease();
      break;
    case 6:
    case 7:
      swift_release();
      break;
    default:
      return;
  }
}

void sub_23644F9E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
}

uint64_t (*AuthenticationModel._state.modify())()
{
  type metadata accessor for AuthenticationModel();
  return nullsub_1;
}

uint64_t AuthenticationModel.idmsData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AuthenticationModel() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AuthenticationModel.idmsData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for AuthenticationModel() + 32));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*AuthenticationModel.idmsData.modify())()
{
  type metadata accessor for AuthenticationModel();
  return nullsub_1;
}

uint64_t AuthenticationModel.currentServices.getter()
{
  type metadata accessor for AuthenticationModel();
  return swift_bridgeObjectRetain();
}

uint64_t AuthenticationModel.currentServices.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for AuthenticationModel() + 36);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*AuthenticationModel.currentServices.modify())()
{
  type metadata accessor for AuthenticationModel();
  return nullsub_1;
}

uint64_t AuthenticationModel.supportsSplitAccounts.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AuthenticationModel() + 40));
}

uint64_t AuthenticationModel.supportsSplitAccounts.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AuthenticationModel();
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*AuthenticationModel.supportsSplitAccounts.modify())()
{
  type metadata accessor for AuthenticationModel();
  return nullsub_1;
}

id AuthenticationModel.state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id result;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for AuthenticationModel() + 28));
  v4 = *v3;
  v5 = *((unsigned __int8 *)v3 + 80);
  if (v5 == 7)
  {
    v7 = *(void **)(v4 + 16);
    v6 = *(void **)(v4 + 24);
    v8 = *(void **)(v4 + 32);
    v9 = *(void **)(v4 + 40);
    v10 = *(void **)(v4 + 48);
    v11 = *(void **)(v4 + 56);
    v13 = *(_QWORD *)(v4 + 64);
    v12 = *(_QWORD *)(v4 + 72);
    v15 = *(void **)(v4 + 80);
    v14 = *(void **)(v4 + 88);
    LOBYTE(v5) = *(_BYTE *)(v4 + 96);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v10;
    result = sub_23644F6A4(v7, v6, v8, v9, v10, v11, v13, v12, v15, v14, v5);
  }
  else
  {
    v15 = (void *)v3[8];
    v14 = (void *)v3[9];
    v13 = v3[6];
    v12 = v3[7];
    v17 = (void *)v3[4];
    v11 = (void *)v3[5];
    v18 = (void *)v3[2];
    v19 = (void *)v3[3];
    v20 = (void *)v3[1];
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v20;
    *(_QWORD *)(a1 + 16) = v18;
    *(_QWORD *)(a1 + 24) = v19;
    *(_QWORD *)(a1 + 32) = v17;
    result = sub_23644F6A4((id)v4, v20, v18, v19, v17, v11, v13, v12, v15, v14, v5);
  }
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v13;
  *(_QWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 64) = v15;
  *(_QWORD *)(a1 + 72) = v14;
  *(_BYTE *)(a1 + 80) = v5;
  return result;
}

id sub_23644FCC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  uint64_t *v11;
  uint64_t *v12;
  void **v13;
  void **v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AuthenticationModel() + 28));
  v4 = *v3;
  v5 = *((unsigned __int8 *)v3 + 80);
  if (v5 == 7)
  {
    v6 = (void **)(v4 + 24);
    v7 = (void **)(v4 + 32);
    v8 = (void **)(v4 + 40);
    v9 = (void **)(v4 + 48);
    v10 = (void **)(v4 + 56);
    v11 = (uint64_t *)(v4 + 64);
    v12 = (uint64_t *)(v4 + 72);
    v13 = (void **)(v4 + 80);
    v14 = (void **)(v4 + 88);
    LOBYTE(v5) = *(_BYTE *)(v4 + 96);
    v4 = *(_QWORD *)(v4 + 16);
  }
  else
  {
    v6 = (void **)(v3 + 1);
    v7 = (void **)(v3 + 2);
    v8 = (void **)(v3 + 3);
    v9 = (void **)(v3 + 4);
    v10 = (void **)(v3 + 5);
    v11 = v3 + 6;
    v12 = v3 + 7;
    v13 = (void **)(v3 + 8);
    v14 = (void **)(v3 + 9);
  }
  v15 = *v14;
  v16 = *v13;
  v17 = *v12;
  v18 = *v11;
  v19 = *v10;
  v20 = *v9;
  v21 = *v8;
  v22 = *v7;
  v23 = *v6;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v23;
  *(_QWORD *)(a2 + 16) = v22;
  *(_QWORD *)(a2 + 24) = v21;
  *(_QWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 40) = v19;
  *(_QWORD *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 56) = v17;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v15;
  *(_BYTE *)(a2 + 80) = v5;
  return sub_23644F6A4((id)v4, v23, v22, v21, v20, v19, v18, v17, v16, v15, v5);
}

void sub_23644FDAC(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  id v11[10];
  char v12;

  v1 = *(void **)(a1 + 8);
  v2 = *(void **)(a1 + 16);
  v3 = *(void **)(a1 + 24);
  v4 = *(void **)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v6 = *(void **)(a1 + 48);
  v7 = *(void **)(a1 + 56);
  v8 = *(void **)(a1 + 64);
  v9 = *(void **)(a1 + 72);
  v10 = *(_BYTE *)(a1 + 80);
  v11[0] = *(id *)a1;
  v11[1] = v1;
  v11[2] = v2;
  v11[3] = v3;
  v11[4] = v4;
  v11[5] = v5;
  v11[6] = v6;
  v11[7] = v7;
  v11[8] = v8;
  v11[9] = v9;
  v12 = v10;
  sub_23644F6A4(v11[0], v1, v2, v3, v4, v5, (uint64_t)v6, (uint64_t)v7, v8, v9, v10);
  AuthenticationModel.state.setter((uint64_t *)v11);
}

void AuthenticationModel.state.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  v2 = v1;
  v3 = *a1;
  v4 = (void *)a1[1];
  v6 = (void *)a1[2];
  v5 = (void *)a1[3];
  v8 = a1[4];
  v7 = a1[5];
  v9 = (void *)a1[8];
  v27 = a1[6];
  v28 = a1[7];
  v10 = (void *)a1[9];
  v11 = *((unsigned __int8 *)a1 + 80);
  if (v11 == 7 && *(_BYTE *)(v3 + 96) == 7)
  {
    v12 = *(_QWORD *)(v3 + 16);
    v23 = *(void **)(v12 + 24);
    v24 = *(void **)(v12 + 16);
    v21 = *(void **)(v12 + 40);
    v22 = *(void **)(v12 + 32);
    v19 = *(void **)(v12 + 56);
    v20 = *(void **)(v12 + 48);
    v17 = *(_QWORD *)(v12 + 72);
    v18 = *(_QWORD *)(v12 + 64);
    v13 = *(void **)(v12 + 80);
    v25 = *(void **)(v12 + 88);
    v26 = *(_BYTE *)(v12 + 96);
    sub_23644F6A4(v24, v23, v22, v21, v20, v19, v18, v17, v13, v25, v26);
    sub_23644F8BC((void *)v3, v4, v6, v5, v8, v7, v27, v28, v9, v10, 7);
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = v24;
    *(_QWORD *)(v14 + 24) = v23;
    *(_QWORD *)(v14 + 32) = v22;
    *(_QWORD *)(v14 + 40) = v21;
    *(_QWORD *)(v14 + 48) = v20;
    *(_QWORD *)(v14 + 56) = v19;
    *(_QWORD *)(v14 + 64) = v18;
    *(_QWORD *)(v14 + 72) = v17;
    *(_QWORD *)(v14 + 80) = v13;
    *(_QWORD *)(v14 + 88) = v25;
    *(_BYTE *)(v14 + 96) = v26;
    v15 = v2 + *(int *)(type metadata accessor for AuthenticationModel() + 28);
    sub_23644F8BC(*(void **)v15, *(void **)(v15 + 8), *(void **)(v15 + 16), *(void **)(v15 + 24), *(_QWORD *)(v15 + 32), *(_QWORD *)(v15 + 40), *(_QWORD *)(v15 + 48), *(_QWORD *)(v15 + 56), *(void **)(v15 + 64), *(void **)(v15 + 72), *(_BYTE *)(v15 + 80));
    *(_QWORD *)v15 = v14;
    *(_OWORD *)(v15 + 8) = 0u;
    *(_OWORD *)(v15 + 24) = 0u;
    *(_OWORD *)(v15 + 40) = 0u;
    *(_OWORD *)(v15 + 56) = 0u;
    *(_QWORD *)(v15 + 72) = 0;
    *(_BYTE *)(v15 + 80) = 7;
  }
  else
  {
    v16 = v2 + *(int *)(type metadata accessor for AuthenticationModel() + 28);
    sub_23644F8BC(*(void **)v16, *(void **)(v16 + 8), *(void **)(v16 + 16), *(void **)(v16 + 24), *(_QWORD *)(v16 + 32), *(_QWORD *)(v16 + 40), *(_QWORD *)(v16 + 48), *(_QWORD *)(v16 + 56), *(void **)(v16 + 64), *(void **)(v16 + 72), *(_BYTE *)(v16 + 80));
    *(_QWORD *)v16 = v3;
    *(_QWORD *)(v16 + 8) = v4;
    *(_QWORD *)(v16 + 16) = v6;
    *(_QWORD *)(v16 + 24) = v5;
    *(_QWORD *)(v16 + 32) = v8;
    *(_QWORD *)(v16 + 40) = v7;
    *(_QWORD *)(v16 + 48) = v27;
    *(_QWORD *)(v16 + 56) = v28;
    *(_QWORD *)(v16 + 64) = v9;
    *(_QWORD *)(v16 + 72) = v10;
    *(_BYTE *)(v16 + 80) = v11;
  }
}

uint64_t sub_236450004()
{
  uint64_t v0;

  sub_23644F8BC(*(void **)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(void **)(v0 + 80), *(void **)(v0 + 88), *(_BYTE *)(v0 + 96));
  return swift_deallocObject();
}

void (*AuthenticationModel.state.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void (*result)(uint64_t **, char);

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for AuthenticationModel() + 28);
  *((_DWORD *)v3 + 21) = v4;
  v5 = (uint64_t *)(v1 + v4);
  v6 = *v5;
  v7 = *((unsigned __int8 *)v5 + 80);
  if (v7 == 7)
  {
    v9 = *(void **)(v6 + 16);
    v8 = *(void **)(v6 + 24);
    v10 = *(void **)(v6 + 32);
    v11 = *(void **)(v6 + 40);
    v13 = *(void **)(v6 + 48);
    v12 = *(void **)(v6 + 56);
    v15 = *(_QWORD *)(v6 + 64);
    v14 = *(_QWORD *)(v6 + 72);
    v17 = *(void **)(v6 + 80);
    v16 = *(void **)(v6 + 88);
    LOBYTE(v7) = *(_BYTE *)(v6 + 96);
    *v3 = v9;
    v3[1] = v8;
    v3[2] = v10;
    v3[3] = v11;
    sub_23644F6A4(v9, v8, v10, v11, v13, v12, v15, v14, v17, v16, v7);
  }
  else
  {
    v17 = (void *)v5[8];
    v16 = (void *)v5[9];
    v15 = v5[6];
    v14 = v5[7];
    v13 = (void *)v5[4];
    v12 = (void *)v5[5];
    v18 = (void *)v5[2];
    v19 = (void *)v5[3];
    v20 = (void *)v5[1];
    *v3 = v6;
    v3[1] = v20;
    v3[2] = v18;
    v3[3] = v19;
    sub_23644F6A4((id)v6, v20, v18, v19, v13, v12, v15, v14, v17, v16, v7);
  }
  v3[4] = v13;
  v3[5] = v12;
  v3[6] = v15;
  v3[7] = v14;
  v3[8] = v17;
  v3[9] = v16;
  result = sub_236450144;
  *((_BYTE *)v3 + 80) = v7;
  return result;
}

void sub_236450144(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  char v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  char v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  char v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  void *v69;
  void *v70;
  char v71;
  void *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;

  v2 = *a1;
  v3 = **a1;
  v4 = (void *)(*a1)[1];
  v5 = (void *)(*a1)[2];
  v6 = (void *)(*a1)[3];
  v7 = (void *)(*a1)[4];
  v8 = (void *)(*a1)[5];
  v9 = (*a1)[6];
  v10 = (*a1)[7];
  v11 = (void *)(*a1)[8];
  v12 = (void *)(*a1)[9];
  v13 = *((unsigned __int8 *)*a1 + 80);
  if ((a2 & 1) != 0)
  {
    v57 = *((_BYTE *)*a1 + 80);
    if (v13 == 7)
    {
      if (*(_BYTE *)(v3 + 96) == 7)
      {
        v14 = *(_QWORD *)(v3 + 16);
        v51 = *(void **)(v14 + 24);
        v54 = *(void **)(v14 + 16);
        v15 = *(void **)(v14 + 40);
        v48 = *(void **)(v14 + 32);
        v16 = *(void **)(v14 + 48);
        v17 = *(void **)(v14 + 56);
        v18 = *(_QWORD *)(v14 + 64);
        v19 = *(_QWORD *)(v14 + 72);
        v20 = *(void **)(v14 + 80);
        v21 = *(void **)(v14 + 88);
        v22 = *(_BYTE *)(v14 + 96);
        v23 = swift_allocObject();
        v24 = v15;
        v26 = v48;
        v25 = v51;
        v27 = v54;
        v37 = v22;
        v12 = v21;
        v11 = v20;
        v10 = v19;
        v9 = v18;
        v8 = v17;
        v7 = v16;
        v72 = 0;
        v74 = 0;
        v68 = 0;
        v70 = 0;
        v64 = 0;
        v66 = 0;
        v60 = 0;
        v62 = 0;
        v58 = 0;
        *(_QWORD *)(v23 + 16) = v54;
        *(_QWORD *)(v23 + 24) = v51;
        *(_QWORD *)(v23 + 32) = v48;
        *(_QWORD *)(v23 + 40) = v15;
        *(_QWORD *)(v23 + 48) = v16;
        *(_QWORD *)(v23 + 56) = v17;
        *(_QWORD *)(v23 + 64) = v18;
        *(_QWORD *)(v23 + 72) = v19;
        *(_QWORD *)(v23 + 80) = v20;
        *(_QWORD *)(v23 + 88) = v21;
        v77 = (void *)v23;
        *(_BYTE *)(v23 + 96) = v22;
LABEL_13:
        v38 = v2[11] + *((int *)v2 + 21);
        v39 = *(void **)(v38 + 16);
        v53 = *(void **)(v38 + 8);
        v56 = *(void **)v38;
        v40 = *(void **)(v38 + 24);
        v41 = *(_QWORD *)(v38 + 32);
        v42 = *(_QWORD *)(v38 + 40);
        v43 = *(_QWORD *)(v38 + 48);
        v44 = *(void **)(v38 + 64);
        v50 = *(_QWORD *)(v38 + 56);
        v45 = *(void **)(v38 + 72);
        v46 = *(_BYTE *)(v38 + 80);
        sub_23644F6A4(v27, v25, v26, v24, v7, v8, v9, v10, v11, v12, v37);
        sub_23644F8BC(v56, v53, v39, v40, v41, v42, v43, v50, v44, v45, v46);
        *(_QWORD *)v38 = v77;
        *(_QWORD *)(v38 + 8) = v74;
        *(_QWORD *)(v38 + 16) = v72;
        *(_QWORD *)(v38 + 24) = v70;
        *(_QWORD *)(v38 + 32) = v68;
        *(_QWORD *)(v38 + 40) = v66;
        *(_QWORD *)(v38 + 48) = v64;
        *(_QWORD *)(v38 + 56) = v62;
        *(_QWORD *)(v38 + 64) = v60;
        *(_QWORD *)(v38 + 72) = v58;
        *(_BYTE *)(v38 + 80) = v57;
        sub_23644F8BC((void *)*v2, (void *)v2[1], (void *)v2[2], (void *)v2[3], v2[4], v2[5], v2[6], v2[7], (void *)v2[8], (void *)v2[9], *((_BYTE *)v2 + 80));
        goto LABEL_14;
      }
      v37 = 7;
    }
    else
    {
      v37 = *((_BYTE *)*a1 + 80);
    }
    v74 = (void *)(*a1)[1];
    v77 = (void *)**a1;
    v72 = (void *)(*a1)[2];
    v68 = (*a1)[4];
    v70 = (void *)(*a1)[3];
    v64 = (*a1)[6];
    v66 = (*a1)[5];
    v60 = (*a1)[8];
    v62 = (*a1)[7];
    v58 = (*a1)[9];
    v27 = v77;
    v25 = v74;
    v26 = v72;
    v24 = v70;
    goto LABEL_13;
  }
  if (v13 == 7 && *(_BYTE *)(v3 + 96) == 7)
  {
    v28 = *(_QWORD *)(v3 + 16);
    v63 = *(void **)(v28 + 24);
    v65 = *(void **)(v28 + 16);
    v59 = *(void **)(v28 + 40);
    v61 = *(void **)(v28 + 32);
    v52 = *(void **)(v28 + 56);
    v55 = *(void **)(v28 + 48);
    v47 = *(_QWORD *)(v28 + 72);
    v49 = *(_QWORD *)(v28 + 64);
    v67 = *(void **)(v28 + 80);
    v69 = *(void **)(v28 + 88);
    v71 = *(_BYTE *)(v28 + 96);
    v75 = (*a1)[5];
    v78 = (*a1)[4];
    v29 = (*a1)[6];
    v30 = (*a1)[7];
    v31 = (void *)(*a1)[8];
    v32 = (void *)(*a1)[9];
    sub_23644F6A4(v65, v63, v61, v59, v55, v52, v49, v47, v67, v69, v71);
    sub_23644F8BC((void *)v3, v4, v5, v6, v78, v75, v29, v30, v31, v32, 7);
    v3 = swift_allocObject();
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v76 = 0;
    v79 = 0;
    v73 = 0;
    *(_QWORD *)(v3 + 16) = v65;
    *(_QWORD *)(v3 + 24) = v63;
    *(_QWORD *)(v3 + 32) = v61;
    *(_QWORD *)(v3 + 40) = v59;
    *(_QWORD *)(v3 + 48) = v55;
    *(_QWORD *)(v3 + 56) = v52;
    *(_QWORD *)(v3 + 64) = v49;
    *(_QWORD *)(v3 + 72) = v47;
    *(_QWORD *)(v3 + 80) = v67;
    *(_QWORD *)(v3 + 88) = v69;
    *(_BYTE *)(v3 + 96) = v71;
  }
  else
  {
    v73 = (*a1)[9];
    v76 = (*a1)[8];
    v79 = (*a1)[7];
    v35 = (*a1)[6];
    v34 = (*a1)[5];
    v33 = (*a1)[4];
  }
  v36 = v2[11] + *((int *)v2 + 21);
  sub_23644F8BC(*(void **)v36, *(void **)(v36 + 8), *(void **)(v36 + 16), *(void **)(v36 + 24), *(_QWORD *)(v36 + 32), *(_QWORD *)(v36 + 40), *(_QWORD *)(v36 + 48), *(_QWORD *)(v36 + 56), *(void **)(v36 + 64), *(void **)(v36 + 72), *(_BYTE *)(v36 + 80));
  *(_QWORD *)v36 = v3;
  *(_QWORD *)(v36 + 8) = v4;
  *(_QWORD *)(v36 + 16) = v5;
  *(_QWORD *)(v36 + 24) = v6;
  *(_QWORD *)(v36 + 32) = v33;
  *(_QWORD *)(v36 + 40) = v34;
  *(_QWORD *)(v36 + 48) = v35;
  *(_QWORD *)(v36 + 56) = v79;
  *(_QWORD *)(v36 + 64) = v76;
  *(_QWORD *)(v36 + 72) = v73;
  *(_BYTE *)(v36 + 80) = v13;
LABEL_14:
  free(v2);
}

uint64_t sub_2364504E8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *);

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AuthenticationModel() + 44));
  v4 = *v3;
  v5 = v3[1];
  if (*v3)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = sub_2364658F8;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;
  return sub_23645063C(v4);
}

uint64_t sub_236450560(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t *v7;
  uint64_t v8;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_2364658C8;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(a2 + *(int *)(type metadata accessor for AuthenticationModel() + 44));
  v8 = *v7;
  sub_23645063C(v3);
  result = sub_236450690(v8);
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  return result;
}

uint64_t AuthenticationModel.contextModifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AuthenticationModel() + 44));
  sub_23645063C(v1);
  return v1;
}

uint64_t sub_23645063C(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t AuthenticationModel.contextModifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t result;

  v5 = (uint64_t *)(v2 + *(int *)(type metadata accessor for AuthenticationModel() + 44));
  result = sub_236450690(*v5);
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t sub_236450690(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t (*AuthenticationModel.contextModifier.modify())()
{
  type metadata accessor for AuthenticationModel();
  return nullsub_1;
}

uint64_t AuthenticationModel.init(account:userInteraction:state:idmsData:supportsSplitAccounts:currentServices:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int *v15;
  _OWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v10 = *a2;
  v25 = a3[1];
  v26 = *a3;
  v23 = a3[3];
  v24 = a3[2];
  v11 = *((_QWORD *)a3 + 8);
  v12 = *((_QWORD *)a3 + 9);
  v13 = *((_BYTE *)a3 + 80);
  v14 = type metadata accessor for IdMSAccount();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a8, 1, 1, v14);
  v15 = (int *)type metadata accessor for AuthenticationModel();
  v16 = (_OWORD *)(a8 + v15[5]);
  v16[3] = 0u;
  v16[4] = 0u;
  v16[1] = 0u;
  v16[2] = 0u;
  *v16 = 0u;
  v17 = (_QWORD *)(a8 + v15[8]);
  *v17 = 0;
  v17[1] = 0;
  v18 = v15[9];
  *(_QWORD *)(a8 + v18) = MEMORY[0x24BEE4AF8];
  v19 = v15[10];
  *(_BYTE *)(a8 + v19) = 0;
  v20 = (_QWORD *)(a8 + v15[11]);
  *v20 = 0;
  v20[1] = 0;
  sub_23644F344(a1, a8);
  *(_BYTE *)(a8 + v15[6]) = v10;
  v21 = a8 + v15[7];
  *(_OWORD *)v21 = v26;
  *(_OWORD *)(v21 + 16) = v25;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)(v21 + 48) = v23;
  *(_QWORD *)(v21 + 64) = v11;
  *(_QWORD *)(v21 + 72) = v12;
  *(_BYTE *)(v21 + 80) = v13;
  swift_bridgeObjectRelease();
  *v17 = a4;
  v17[1] = a5;
  *(_BYTE *)(a8 + v19) = a6;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a8 + v18) = a7;
  return result;
}

void sub_236450820(char *a1)
{
  sub_23656F910(*a1);
}

void sub_23645082C()
{
  char *v0;

  sub_23656FB08(*v0);
}

void sub_236450834(uint64_t a1)
{
  char *v1;

  sub_23656FD1C(a1, *v1);
}

void sub_23645083C(uint64_t a1)
{
  char *v1;

  sub_236570278(a1, *v1);
}

uint64_t sub_236450844@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23645C280();
  *a1 = result;
  return result;
}

uint64_t sub_236450870()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_2364508A0 + 4 * byte_2365B2440[*v0]))();
}

void sub_2364508A0(_QWORD *a1@<X8>)
{
  *a1 = 0x65746E4972657375;
  a1[1] = 0xEF6E6F6974636172;
}

void sub_2364508C8(_QWORD *a1@<X8>)
{
  *a1 = 0x6574617473;
  a1[1] = 0xE500000000000000;
}

void sub_2364508E0(_QWORD *a1@<X8>)
{
  *a1 = 0x61746144736D6469;
  a1[1] = 0xE800000000000000;
}

void sub_2364508FC(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000015;
  a1[1] = 0x80000002365CB140;
}

void sub_23645091C(_QWORD *a1@<X8>)
{
  *a1 = 0x53746E6572727563;
  a1[1] = 0xEF73656369767265;
}

uint64_t sub_236450944()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_236450974 + 4 * byte_2365B2446[*v0]))(0x746E756F636361, 0xE700000000000000);
}

uint64_t sub_236450974()
{
  return 0x65746E4972657375;
}

uint64_t sub_236450998()
{
  return 0x6574617473;
}

uint64_t sub_2364509AC()
{
  return 0x61746144736D6469;
}

unint64_t sub_2364509C4()
{
  return 0xD000000000000015;
}

uint64_t sub_2364509E0()
{
  return 0x53746E6572727563;
}

uint64_t sub_236450A04@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23645C280();
  *a1 = result;
  return result;
}

uint64_t sub_236450A28()
{
  return 0;
}

void sub_236450A34(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_236450A40()
{
  sub_236450D6C();
  return sub_2365B0AD0();
}

uint64_t sub_236450A68()
{
  sub_236450D6C();
  return sub_2365B0ADC();
}

uint64_t AuthenticationModel.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  _OWORD v15[5];
  char v16;
  char v17;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E45E8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_236450D6C();
  sub_2365B0AAC();
  LOBYTE(v15[0]) = 0;
  type metadata accessor for IdMSAccount();
  sub_23644F0B8(&qword_2563E45F8, (uint64_t (*)(uint64_t))type metadata accessor for IdMSAccount, (uint64_t)&protocol conformance descriptor for IdMSAccount);
  sub_2365B07E8();
  if (!v2)
  {
    v9 = (int *)type metadata accessor for AuthenticationModel();
    LOBYTE(v15[0]) = *(_BYTE *)(v3 + v9[6]);
    v17 = 1;
    sub_236450DB0();
    sub_2365B0824();
    v10 = v3 + v9[7];
    v11 = *(_BYTE *)(v10 + 80);
    v12 = *(_OWORD *)(v10 + 16);
    v15[0] = *(_OWORD *)v10;
    v15[1] = v12;
    v13 = *(_OWORD *)(v10 + 48);
    v15[2] = *(_OWORD *)(v10 + 32);
    v15[3] = v13;
    v15[4] = *(_OWORD *)(v10 + 64);
    v16 = v11;
    v17 = 2;
    sub_236450DF4();
    sub_2365B0824();
    v15[0] = *(_OWORD *)(v3 + v9[8]);
    v17 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4610);
    sub_236450E38();
    sub_2365B0824();
    LOBYTE(v15[0]) = 4;
    sub_2365B080C();
    *(_QWORD *)&v15[0] = *(_QWORD *)(v3 + v9[9]);
    v17 = 5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4620);
    sub_23645146C(&qword_2563E4628, &qword_2563E4630, (uint64_t)&protocol conformance descriptor for AIDAServiceType, MEMORY[0x24BEE12A0]);
    sub_2365B0824();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_236450D6C()
{
  unint64_t result;

  result = qword_2563E45F0;
  if (!qword_2563E45F0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B4864, &type metadata for AuthenticationModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E45F0);
  }
  return result;
}

unint64_t sub_236450DB0()
{
  unint64_t result;

  result = qword_2563E4600;
  if (!qword_2563E4600)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.UserInteraction, &type metadata for AuthenticationModel.UserInteraction);
    atomic_store(result, (unint64_t *)&qword_2563E4600);
  }
  return result;
}

unint64_t sub_236450DF4()
{
  unint64_t result;

  result = qword_2563E4608;
  if (!qword_2563E4608)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.State, &type metadata for AuthenticationModel.State);
    atomic_store(result, (unint64_t *)&qword_2563E4608);
  }
  return result;
}

unint64_t sub_236450E38()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_2563E4618;
  if (!qword_2563E4618)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2563E4610);
    v2 = MEMORY[0x24BEE0D08];
    result = MEMORY[0x23B7F5164](MEMORY[0x24BEE4AA8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2563E4618);
  }
  return result;
}

uint64_t AuthenticationModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 v67;
  int v68;
  char v69;
  unsigned __int8 v70;

  v52 = a2;
  v4 = (int *)type metadata accessor for AuthenticationModel();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E45E0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4638);
  v10 = *(_QWORD *)(v54 - 8);
  MEMORY[0x24BDAC7A8](v54);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v55 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  sub_236450D6C();
  v53 = v12;
  sub_2365B0A7C();
  if (!v2)
  {
    v14 = v6;
    v15 = v10;
    v16 = type metadata accessor for IdMSAccount();
    LOBYTE(v57) = 0;
    sub_23644F0B8(&qword_2563E4640, (uint64_t (*)(uint64_t))type metadata accessor for IdMSAccount, (uint64_t)&protocol conformance descriptor for IdMSAccount);
    v17 = v53;
    v18 = v54;
    sub_2365B0734();
    LOBYTE(v57) = 1;
    sub_2364513E4();
    sub_2365B0770();
    v19 = v70;
    LOBYTE(v56) = 2;
    sub_236451428();
    sub_2365B0770();
    v68 = v19;
    v44 = v57;
    v45 = v58;
    v46 = v59;
    v47 = v60;
    v48 = v61;
    v49 = v62;
    v50 = v63;
    v51 = v64;
    v43 = v65;
    v42 = v66;
    v20 = v67;
    LOBYTE(v56) = 3;
    v39 = sub_2365B0710();
    v40 = v21;
    v41 = v20;
    LOBYTE(v56) = 4;
    v38 = sub_2365B0758();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4620);
    v69 = 5;
    sub_23645146C(&qword_2563E4658, &qword_2563E4660, (uint64_t)&protocol conformance descriptor for AIDAServiceType, MEMORY[0x24BEE12D0]);
    sub_2365B0770();
    v37 = v56;
    v23 = (uint64_t)v14;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v14, 1, 1, v16);
    v24 = &v14[v4[5]];
    *((_OWORD *)v24 + 3) = 0u;
    *((_OWORD *)v24 + 4) = 0u;
    *((_OWORD *)v24 + 1) = 0u;
    *((_OWORD *)v24 + 2) = 0u;
    *(_OWORD *)v24 = 0u;
    v25 = (uint64_t *)&v14[v4[8]];
    *v25 = 0;
    v25[1] = 0;
    v26 = v4[9];
    *(_QWORD *)(v23 + v26) = MEMORY[0x24BEE4AF8];
    v36 = v4[10];
    *(_BYTE *)(v23 + v36) = 0;
    v27 = (_QWORD *)(v23 + v4[11]);
    *v27 = 0;
    v27[1] = 0;
    sub_23644F344((uint64_t)v9, v23);
    *(_BYTE *)(v23 + v4[6]) = v68;
    v28 = v23 + v4[7];
    v29 = v45;
    *(_QWORD *)v28 = v44;
    *(_QWORD *)(v28 + 8) = v29;
    v30 = v47;
    *(_QWORD *)(v28 + 16) = v46;
    *(_QWORD *)(v28 + 24) = v30;
    v31 = v49;
    *(_QWORD *)(v28 + 32) = v48;
    *(_QWORD *)(v28 + 40) = v31;
    v32 = v51;
    *(_QWORD *)(v28 + 48) = v50;
    *(_QWORD *)(v28 + 56) = v32;
    v33 = v42;
    *(_QWORD *)(v28 + 64) = v43;
    *(_QWORD *)(v28 + 72) = v33;
    *(_BYTE *)(v28 + 80) = v41;
    swift_bridgeObjectRelease();
    v34 = v40;
    *v25 = v39;
    v25[1] = v34;
    *(_BYTE *)(v23 + v36) = v38 & 1;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v23 + v26) = v37;
    sub_23646591C(v23, v52, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v18);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t sub_2364513E4()
{
  unint64_t result;

  result = qword_2563E4648;
  if (!qword_2563E4648)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.UserInteraction, &type metadata for AuthenticationModel.UserInteraction);
    atomic_store(result, (unint64_t *)&qword_2563E4648);
  }
  return result;
}

unint64_t sub_236451428()
{
  unint64_t result;

  result = qword_2563E4650;
  if (!qword_2563E4650)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.State, &type metadata for AuthenticationModel.State);
    atomic_store(result, (unint64_t *)&qword_2563E4650);
  }
  return result;
}

uint64_t sub_23645146C(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2563E4620);
    v10 = sub_23644F0B8(a2, (uint64_t (*)(uint64_t))type metadata accessor for AIDAServiceType, a3);
    result = MEMORY[0x23B7F5164](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

BOOL static AuthenticationModel.UserInteraction.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void static AuthenticationModel.State.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2364515CC@<X0>(void *a1@<X2>, uint64_t a2@<X7>, int a3@<W8>, int8x16_t a4@<Q3>, int8x16_t a5@<Q4>)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  char v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  _QWORD v41[4];
  __int16 v42;
  char v43;
  char v44;
  void *v45;
  uint64_t v46;
  _QWORD v47[4];
  unsigned __int16 v48;
  char v49;
  char v50;
  int8x16_t v51;
  _BYTE v52[280];

  if (a3)
  {
    v32 = v10;
    v25 = v9;
    v26 = v8;
    v27 = v5;
    v28 = v6;
    v29 = v7;
    sub_23644F6A4(v25, v26, a1, v17, v16, v15, v14, a2, v32, v13, a3);
    sub_23644F6A4(v11, v29, v27, v28, v35, v36, v37, v38, v39, v40, v12);
    sub_23645DB34((uint64_t)v52);
    v24 = 0;
  }
  else
  {
    v34 = a4.i64[0];
    v18 = (void *)a5.i64[0];
    v47[0] = v11;
    v47[1] = v7;
    v47[2] = v5;
    v47[3] = v6;
    v48 = a5.i16[0];
    v49 = a5.i8[2] & 1;
    v50 = a5.i8[3] & 1;
    v33 = (void *)a5.i64[1];
    v51 = vextq_s8(a5, a4, 8uLL);
    v41[0] = v9;
    v41[1] = v8;
    v41[2] = a1;
    v41[3] = v17;
    v42 = (__int16)v16;
    v43 = BYTE2(v16) & 1;
    v44 = BYTE3(v16) & 1;
    v45 = v15;
    v46 = v14;
    v31 = v10;
    v19 = v9;
    v20 = v8;
    v21 = v5;
    v22 = v6;
    v23 = v7;
    sub_23644F6A4(v19, v20, a1, v17, v16, v15, v14, a2, v31, v13, 0);
    sub_23644F6A4(v11, v23, v21, v22, v18, v33, v34, v38, v39, v40, 0);
    v24 = _s12AppleIDSetup19AuthenticationModelV10BasicLoginV2eeoiySbAE_AEtFZ_0((uint64_t)v47, (uint64_t)v41);
    sub_23645DB34((uint64_t)v52);
  }
  return v24 & 1;
}

uint64_t AuthenticationModel.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  sub_23645BE58();
  v1 = type metadata accessor for AuthenticationModel();
  sub_2365B09F8();
  AuthenticationModel.State.hash(into:)();
  if (*(_QWORD *)(v0 + *(int *)(v1 + 32) + 8))
  {
    sub_2365B0A04();
    swift_bridgeObjectRetain();
    sub_2365B008C();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_2365B0A04();
  }
  sub_2365B0A04();
  v2 = *(_QWORD *)(v0 + *(int *)(v1 + 36));
  result = sub_2365B09F8();
  v4 = *(_QWORD *)(v2 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    v5 = 0;
    do
    {
      v6 = *(void **)(v2 + 8 * v5++ + 32);
      sub_2365B005C();
      v7 = v6;
      sub_2365B008C();

      swift_bridgeObjectRelease();
    }
    while (v4 != v5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t AuthenticationModel.hashValue.getter()
{
  sub_2365B09E0();
  AuthenticationModel.hash(into:)();
  return sub_2365B0A34();
}

uint64_t sub_236452334@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AuthenticationModel.init(from:)(a1, a2);
}

uint64_t sub_236452348(_QWORD *a1)
{
  return AuthenticationModel.encode(to:)(a1);
}

uint64_t sub_236452360()
{
  sub_2365B09E0();
  AuthenticationModel.hash(into:)();
  return sub_2365B0A34();
}

uint64_t sub_2364523A0()
{
  sub_2365B09E0();
  AuthenticationModel.hash(into:)();
  return sub_2365B0A34();
}

void AuthenticationModel.State.hash(into:)()
{
  __asm { BR              X10 }
}

uint64_t sub_236452448()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = v0;
  sub_2365B09F8();
  *(_QWORD *)(v7 - 176) = v4;
  *(_QWORD *)(v7 - 168) = v5;
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 152) = v2;
  *(_WORD *)(v7 - 144) = v3;
  *(_BYTE *)(v7 - 142) = BYTE2(v3) & 1;
  *(_BYTE *)(v7 - 141) = HIBYTE(v3) & 1;
  *(_QWORD *)(v7 - 136) = v6;
  *(_QWORD *)(v7 - 128) = v8;
  return AuthenticationModel.BasicLogin.hash(into:)();
}

uint64_t sub_2364528D8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23645290C + 4 * byte_2365B2467[a1]))(0x6C616974696E69, 0xE700000000000000);
}

uint64_t sub_23645290C()
{
  return 7369331;
}

uint64_t sub_23645291C()
{
  return 0x676F4C6369736162;
}

uint64_t sub_236452938()
{
  return 0x6146646E6F636573;
}

uint64_t sub_236452958()
{
  return 0x6552726576726573;
}

uint64_t sub_23645297C()
{
  return 0x655265766974616ELL;
}

uint64_t sub_2364529A0()
{
  return 0x6C6168436F646966;
}

uint64_t sub_2364529C4()
{
  return 0x6E6973557065656BLL;
}

uint64_t sub_2364529E0()
{
  return 0x7472656C61;
}

uint64_t sub_2364529F4()
{
  return 0x676E6964616F6CLL;
}

BOOL sub_236452A08(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_236452A24()
{
  return sub_2365B09F8();
}

uint64_t sub_236452A50()
{
  _BYTE *v0;

  if (*v0)
    return 12639;
  else
    return 12383;
}

uint64_t sub_236452A6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2364642A4(a1, a2);
  *a3 = result;
  return result;
}

void sub_236452A90(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_236452A9C()
{
  sub_23645DE5C();
  return sub_2365B0AD0();
}

uint64_t sub_236452AC4()
{
  sub_23645DE5C();
  return sub_2365B0ADC();
}

uint64_t sub_236452AEC()
{
  return 1;
}

uint64_t sub_236452AFC()
{
  return 12383;
}

void sub_236452B0C(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_236452B18()
{
  sub_23645E18C();
  return sub_2365B0AD0();
}

uint64_t sub_236452B40()
{
  sub_23645E18C();
  return sub_2365B0ADC();
}

uint64_t sub_236452B68()
{
  unsigned __int8 *v0;

  return sub_2364528D8(*v0);
}

uint64_t sub_236452B70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_236464364(a1, a2);
  *a3 = result;
  return result;
}

void sub_236452B94(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_236452BA0()
{
  sub_23645DDD4();
  return sub_2365B0AD0();
}

uint64_t sub_236452BC8()
{
  sub_23645DDD4();
  return sub_2365B0ADC();
}

uint64_t sub_236452BF0()
{
  sub_23645DF6C();
  return sub_2365B0AD0();
}

uint64_t sub_236452C18()
{
  sub_23645DF6C();
  return sub_2365B0ADC();
}

uint64_t sub_236452C40()
{
  return 0;
}

uint64_t sub_236452C4C()
{
  sub_23645E258();
  return sub_2365B0AD0();
}

uint64_t sub_236452C74()
{
  sub_23645E258();
  return sub_2365B0ADC();
}

uint64_t sub_236452C9C()
{
  sub_23645DEE4();
  return sub_2365B0AD0();
}

uint64_t sub_236452CC4()
{
  sub_23645DEE4();
  return sub_2365B0ADC();
}

uint64_t sub_236452CEC()
{
  return sub_2365B09F8();
}

uint64_t sub_236452D10()
{
  sub_23645DE18();
  return sub_2365B0AD0();
}

uint64_t sub_236452D38()
{
  sub_23645DE18();
  return sub_2365B0ADC();
}

uint64_t sub_236452D60()
{
  sub_23645DFF4();
  return sub_2365B0AD0();
}

uint64_t sub_236452D88()
{
  sub_23645DFF4();
  return sub_2365B0ADC();
}

uint64_t sub_236452DB0()
{
  sub_23645E104();
  return sub_2365B0AD0();
}

uint64_t sub_236452DD8()
{
  sub_23645E104();
  return sub_2365B0ADC();
}

uint64_t sub_236452E00()
{
  sub_2365B09E0();
  sub_2365B09F8();
  return sub_2365B0A34();
}

uint64_t sub_236452E40()
{
  sub_2365B09E0();
  sub_2365B09F8();
  return sub_2365B0A34();
}

uint64_t sub_236452E7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_2365B08CC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_236452EF8()
{
  sub_23645E07C();
  return sub_2365B0AD0();
}

uint64_t sub_236452F20()
{
  sub_23645E07C();
  return sub_2365B0ADC();
}

uint64_t sub_236452F48()
{
  sub_23645E214();
  return sub_2365B0AD0();
}

uint64_t sub_236452F70()
{
  sub_23645E214();
  return sub_2365B0ADC();
}

void AuthenticationModel.State.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4668);
  v35 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v34 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4670);
  v38 = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v37 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4678);
  v31 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v29 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4680);
  v30 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v28 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4688);
  v26 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v25 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4690);
  v23 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v22 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4698);
  v20 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v19 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E46A0);
  v17 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v16 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E46A8);
  v14[1] = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E46B0);
  MEMORY[0x24BDAC7A8](v11);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E46B8);
  v48 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v51 = *v1;
  v49 = v1[1];
  v12 = v1[2];
  v46 = v1[3];
  v47 = v12;
  v44 = v1[4];
  v41 = v1[5];
  v42 = v1[6];
  v45 = v1[7];
  v43 = v1[8];
  v40 = v1[9];
  v13 = *((unsigned __int8 *)v1 + 80);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23645DDD4();
  sub_2365B0AAC();
  __asm { BR              X9 }
}

void sub_2364533B4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v1 - 248);
  *(_QWORD *)(v1 - 288) = v2 >> 8;
  *(_BYTE *)(v1 - 176) = 2;
  sub_23645E18C();
  v3 = *(_QWORD *)(v1 - 200);
  swift_bridgeObjectRetain();
  v4 = *(_QWORD *)(v1 - 232);
  swift_bridgeObjectRetain();
  v5 = *(void **)(v1 - 272);
  v6 = v5;
  v7 = *(_QWORD *)(v1 - 264);
  swift_bridgeObjectRetain();
  v8 = *(_QWORD *)(v1 - 472);
  v9 = *(_QWORD *)(v1 - 192);
  sub_2365B07B8();
  *(_QWORD *)(v1 - 176) = *(_QWORD *)(v1 - 184);
  *(_QWORD *)(v1 - 168) = v3;
  *(_QWORD *)(v1 - 160) = *(_QWORD *)(v1 - 224);
  *(_QWORD *)(v1 - 152) = v4;
  *(_BYTE *)(v1 - 144) = v2;
  *(_BYTE *)(v1 - 143) = *(_QWORD *)(v1 - 288);
  *(_BYTE *)(v1 - 142) = BYTE2(v2) & 1;
  *(_BYTE *)(v1 - 141) = BYTE3(v2) & 1;
  *(_QWORD *)(v1 - 136) = v5;
  *(_QWORD *)(v1 - 128) = v7;
  sub_23645E1D0();
  v10 = *(_QWORD *)(v1 - 456);
  sub_2365B0824();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 464) + 8))(v8, v10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 216) + 8))(v0, v9);
  sub_23644F8BC(*(void **)(v1 - 184), *(void **)(v1 - 200), *(void **)(v1 - 224), *(void **)(v1 - 232), v2, (uint64_t)v5, v7, *(_QWORD *)(v1 - 240), *(void **)(v1 - 256), *(void **)(v1 - 280), 0);
}

uint64_t AuthenticationModel.State.hashValue.getter()
{
  sub_2365B09E0();
  AuthenticationModel.State.hash(into:)();
  return sub_2365B0A34();
}

uint64_t AuthenticationModel.State.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD v27[4];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;

  v50 = a2;
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4750);
  v43 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v55 = (char *)v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4758);
  v46 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v54 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4760);
  v41 = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v53 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4768);
  v39 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v49 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4770);
  v38 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v52 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4778);
  v36 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v51 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4780);
  v33 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v48 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4788);
  v31 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v47 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4790);
  v29 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4798);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E47A0);
  v15 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v17 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v57 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v18);
  sub_23645DDD4();
  v19 = v58;
  sub_2365B0A7C();
  v58 = v19;
  if (!v19)
  {
    v27[3] = v14;
    v27[1] = v12;
    v27[2] = v11;
    v28 = v15;
    v20 = sub_2365B07A0();
    if (*(_QWORD *)(v20 + 16) == 1)
      __asm { BR              X10 }
    v21 = sub_2365B05B4();
    v22 = swift_allocError();
    v24 = v23;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E47A8);
    *v24 = &type metadata for AuthenticationModel.State;
    v25 = v56;
    sub_2365B0704();
    sub_2365B059C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v24, *MEMORY[0x24BEE26D0], v21);
    v58 = v22;
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v17, v25);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
}

uint64_t sub_236455060@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AuthenticationModel.State.init(from:)(a1, a2);
}

void sub_236455074(_QWORD *a1)
{
  AuthenticationModel.State.encode(to:)(a1);
}

uint64_t sub_23645508C()
{
  sub_2365B09E0();
  AuthenticationModel.State.hash(into:)();
  return sub_2365B0A34();
}

uint64_t sub_2364550F0()
{
  sub_2365B09E0();
  AuthenticationModel.State.hash(into:)();
  return sub_2365B0A34();
}

uint64_t AuthenticationModel.UserInteraction.hash(into:)()
{
  return sub_2365B09F8();
}

uint64_t sub_236455174()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6C616E6F6974706FLL;
  if (*v0 != 1)
    v1 = 0x6465726975716572;
  if (*v0)
    return v1;
  else
    return 0x726576656ELL;
}

uint64_t sub_2364551CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2364647F8(a1, a2);
  *a3 = result;
  return result;
}

void sub_2364551F0(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_2364551FC()
{
  sub_23645E4EC();
  return sub_2365B0AD0();
}

uint64_t sub_236455224()
{
  sub_23645E4EC();
  return sub_2365B0ADC();
}

uint64_t sub_23645524C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_236455278()
{
  sub_23645E5B8();
  return sub_2365B0AD0();
}

uint64_t sub_2364552A0()
{
  sub_23645E5B8();
  return sub_2365B0ADC();
}

uint64_t sub_2364552C8()
{
  sub_23645E574();
  return sub_2365B0AD0();
}

uint64_t sub_2364552F0()
{
  sub_23645E574();
  return sub_2365B0ADC();
}

uint64_t sub_236455318()
{
  sub_23645E530();
  return sub_2365B0AD0();
}

uint64_t sub_236455340()
{
  sub_23645E530();
  return sub_2365B0ADC();
}

uint64_t AuthenticationModel.UserInteraction.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E47E8);
  v22 = *(_QWORD *)(v4 - 8);
  v23 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v21 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E47F0);
  v19 = *(_QWORD *)(v6 - 8);
  v20 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E47F8);
  v9 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4800);
  v24 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23645E4EC();
  sub_2365B0AAC();
  if (v15)
  {
    if (v15 == 1)
    {
      v26 = 1;
      sub_23645E574();
      sub_2365B07B8();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v20);
    }
    else
    {
      v27 = 2;
      sub_23645E530();
      v16 = v21;
      sub_2365B07B8();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v23);
    }
  }
  else
  {
    v25 = 0;
    sub_23645E5B8();
    sub_2365B07B8();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v14, v12);
}

uint64_t AuthenticationModel.UserInteraction.hashValue.getter()
{
  sub_2365B09E0();
  sub_2365B09F8();
  return sub_2365B0A34();
}

uint64_t AuthenticationModel.UserInteraction.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  char v42;
  char v43;
  char v44;

  v38 = a2;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4828);
  v34 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v40 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4830);
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v39 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4838);
  v6 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4840);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23645E4EC();
  v13 = v41;
  sub_2365B0A7C();
  if (v13)
    goto LABEL_7;
  v31 = v6;
  v32 = v10;
  v14 = v39;
  v15 = v40;
  v41 = a1;
  v16 = v12;
  v17 = sub_2365B07A0();
  v18 = v9;
  if (*(_QWORD *)(v17 + 16) != 1)
  {
    v23 = sub_2365B05B4();
    swift_allocError();
    v25 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E47A8);
    *v25 = &type metadata for AuthenticationModel.UserInteraction;
    sub_2365B0704();
    sub_2365B059C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, *MEMORY[0x24BEE26D0], v23);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    a1 = v41;
LABEL_7:
    v26 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v26);
  }
  v19 = *(unsigned __int8 *)(v17 + 32);
  if (*(_BYTE *)(v17 + 32))
  {
    if (v19 == 1)
    {
      v43 = 1;
      sub_23645E574();
      v20 = v9;
      sub_2365B06F8();
      v21 = v38;
      v22 = v32;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v20);
    }
    else
    {
      v44 = 2;
      sub_23645E530();
      v28 = v15;
      sub_2365B06F8();
      v21 = v38;
      v29 = v32;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v28, v37);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v18);
    }
  }
  else
  {
    v42 = 0;
    sub_23645E5B8();
    sub_2365B06F8();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    v21 = v38;
  }
  *v21 = v19;
  v26 = (uint64_t)v41;
  return __swift_destroy_boxed_opaque_existential_1(v26);
}

uint64_t sub_236455A54@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return AuthenticationModel.UserInteraction.init(from:)(a1, a2);
}

uint64_t sub_236455A68(_QWORD *a1)
{
  return AuthenticationModel.UserInteraction.encode(to:)(a1);
}

BOOL AuthenticationModel.isLoading.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for AuthenticationModel() + 28) + 80) == 7;
}

uint64_t AuthenticationModel.alertModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  void *v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD v41[2];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[25];

  result = type metadata accessor for AuthenticationModel();
  v4 = (uint64_t *)(v1 + *(int *)(result + 28));
  v5 = *v4;
  v6 = *((unsigned __int8 *)v4 + 80);
  if (v6 == 7)
  {
    v6 = *(unsigned __int8 *)(v5 + 96);
    v5 = *(_QWORD *)(v5 + 16);
  }
  if (v6 == 6)
  {
    v7 = *(_OWORD *)(v5 + 144);
    v47 = *(_OWORD *)(v5 + 128);
    v48 = v7;
    *(_OWORD *)v49 = *(_OWORD *)(v5 + 160);
    *(_OWORD *)&v49[9] = *(_OWORD *)(v5 + 169);
    v8 = *(_OWORD *)(v5 + 80);
    v43 = *(_OWORD *)(v5 + 64);
    v44 = v8;
    v9 = *(_OWORD *)(v5 + 112);
    v45 = *(_OWORD *)(v5 + 96);
    v46 = v9;
    v10 = *(_OWORD *)(v5 + 32);
    v41[0] = *(_OWORD *)(v5 + 16);
    v41[1] = v10;
    v42 = *(_OWORD *)(v5 + 48);
    v39 = *((_QWORD *)&v41[0] + 1);
    v40 = *(_QWORD *)&v41[0];
    v37 = *((_QWORD *)&v10 + 1);
    v38 = v10;
    v35 = *((_QWORD *)&v42 + 1);
    v36 = v42;
    v33 = *((_QWORD *)&v43 + 1);
    v34 = v43;
    v31 = *((_QWORD *)&v44 + 1);
    v32 = v44;
    v29 = BYTE1(v45);
    v30 = v45;
    v11 = (void *)*((_QWORD *)&v46 + 1);
    v27 = (void *)v46;
    v28 = (void *)*((_QWORD *)&v45 + 1);
    v12 = v47;
    v13 = v48;
    v14 = *(_OWORD *)v49;
    v15 = *(void **)&v49[16];
    v16 = v49[24];
    sub_23645E5FC((uint64_t)v41);
    sub_23644F8BC(v28, v27, v11, (void *)v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((void **)&v14 + 1), v15, v16);
    v17 = v29;
    v18 = v30;
    v20 = v31;
    v19 = v32;
    v22 = v33;
    v21 = v34;
    v23 = v36;
    v24 = v37;
    v25 = v35;
    *(_QWORD *)a1 = v40;
    v26 = v38;
    result = v39;
    *(_QWORD *)(a1 + 8) = v39;
  }
  else
  {
    v26 = 0;
    v23 = 0;
    v25 = 0;
    v21 = 0;
    v22 = 0;
    v19 = 0;
    v20 = 0;
    v17 = 0;
    v24 = 0xE000000000000000;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0xE000000000000000;
    v18 = -1;
  }
  *(_QWORD *)(a1 + 16) = v26;
  *(_QWORD *)(a1 + 24) = v24;
  *(_QWORD *)(a1 + 32) = v23;
  *(_QWORD *)(a1 + 40) = v25;
  *(_QWORD *)(a1 + 48) = v21;
  *(_QWORD *)(a1 + 56) = v22;
  *(_QWORD *)(a1 + 64) = v19;
  *(_QWORD *)(a1 + 72) = v20;
  *(_BYTE *)(a1 + 80) = v18;
  *(_BYTE *)(a1 + 81) = v17;
  return result;
}

__n128 AuthenticationModel.Alert.init(title:message:isPresented:error:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v7;
  __int128 v8;
  __n128 result;

  v7 = *(_BYTE *)(a6 + 48);
  *(_QWORD *)a7 = a1;
  *(_QWORD *)(a7 + 8) = a2;
  *(_QWORD *)(a7 + 16) = a3;
  *(_QWORD *)(a7 + 24) = a4;
  v8 = *(_OWORD *)(a6 + 16);
  *(_OWORD *)(a7 + 32) = *(_OWORD *)a6;
  *(_OWORD *)(a7 + 48) = v8;
  result = *(__n128 *)(a6 + 32);
  *(__n128 *)(a7 + 64) = result;
  *(_BYTE *)(a7 + 80) = v7;
  *(_BYTE *)(a7 + 81) = a5;
  return result;
}

uint64_t AuthenticationModel.isAlertPresented.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  char v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void *v33;
  char v34;
  void *v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD v44[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[25];

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AuthenticationModel() + 28));
  v2 = *v1;
  v3 = *((unsigned __int8 *)v1 + 80);
  if (v3 == 7)
  {
    v3 = *(unsigned __int8 *)(v2 + 96);
    v2 = *(_QWORD *)(v2 + 16);
  }
  if (v3 == 6)
  {
    v4 = *(_OWORD *)(v2 + 144);
    v50 = *(_OWORD *)(v2 + 128);
    v51 = v4;
    *(_OWORD *)v52 = *(_OWORD *)(v2 + 160);
    *(_OWORD *)&v52[9] = *(_OWORD *)(v2 + 169);
    v5 = *(_OWORD *)(v2 + 80);
    v46 = *(_OWORD *)(v2 + 64);
    v47 = v5;
    v6 = *(_OWORD *)(v2 + 112);
    v48 = *(_OWORD *)(v2 + 96);
    v49 = v6;
    v7 = *(_OWORD *)(v2 + 32);
    v44[0] = *(_OWORD *)(v2 + 16);
    v44[1] = v7;
    v45 = *(_OWORD *)(v2 + 48);
    v43 = *((_QWORD *)&v45 + 1);
    v41 = v45;
    v42 = v46;
    v39 = v47;
    v40 = *((_QWORD *)&v46 + 1);
    v38 = *((_QWORD *)&v47 + 1);
    v36 = v48;
    v37 = BYTE1(v48);
    v8 = (void *)v49;
    v35 = (void *)*((_QWORD *)&v48 + 1);
    v9 = (void *)*((_QWORD *)&v49 + 1);
    v11 = *((_QWORD *)&v50 + 1);
    v10 = (void *)v50;
    v13 = *((_QWORD *)&v51 + 1);
    v12 = v51;
    v15 = *(void **)&v52[8];
    v14 = *(_QWORD *)v52;
    v16 = *(void **)&v52[16];
    v17 = v52[24];
    sub_23645E5FC((uint64_t)v44);
    v34 = v17;
    v33 = v15;
    v18 = v8;
    v19 = v9;
    v20 = v41;
    v21 = v42;
    v22 = v10;
    v23 = v11;
    v25 = v39;
    v24 = v40;
    v26 = v43;
    v27 = v13;
    v28 = v38;
    v29 = v14;
    v31 = v36;
    v30 = v37;
    sub_23644F8BC(v35, v18, v19, v22, v23, v12, v27, v29, v33, v16, v34);
  }
  else
  {
    v20 = 0;
    v26 = 0;
    v21 = 0;
    v24 = 0;
    v25 = 0;
    v28 = 0;
    v30 = 0;
    v31 = -1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23645DC9C(v20, v26, v21, v24, v25, v28, v31);
  return v30;
}

uint64_t sub_236455E34@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  _BYTE *v18;
  char v19;
  char v20;
  char v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  void *v34;
  void *v35;
  char v36;
  void *v37;
  void *v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD v47[2];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[25];

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AuthenticationModel() + 28));
  v4 = *v3;
  v5 = *((unsigned __int8 *)v3 + 80);
  if (v5 == 7)
  {
    v5 = *(unsigned __int8 *)(v4 + 96);
    v4 = *(_QWORD *)(v4 + 16);
  }
  if (v5 == 6)
  {
    v6 = *(_OWORD *)(v4 + 144);
    v53 = *(_OWORD *)(v4 + 128);
    v54 = v6;
    *(_OWORD *)v55 = *(_OWORD *)(v4 + 160);
    *(_OWORD *)&v55[9] = *(_OWORD *)(v4 + 169);
    v7 = *(_OWORD *)(v4 + 80);
    v49 = *(_OWORD *)(v4 + 64);
    v50 = v7;
    v8 = *(_OWORD *)(v4 + 112);
    v51 = *(_OWORD *)(v4 + 96);
    v52 = v8;
    v9 = *(_OWORD *)(v4 + 32);
    v47[0] = *(_OWORD *)(v4 + 16);
    v47[1] = v9;
    v48 = *(_OWORD *)(v4 + 48);
    v45 = v49;
    v46 = *((_QWORD *)&v48 + 1);
    v43 = v48;
    v44 = *((_QWORD *)&v49 + 1);
    v41 = *((_QWORD *)&v50 + 1);
    v42 = v50;
    v39 = BYTE1(v51);
    v40 = v51;
    v10 = (void *)*((_QWORD *)&v52 + 1);
    v37 = (void *)v52;
    v38 = (void *)*((_QWORD *)&v51 + 1);
    v12 = *((_QWORD *)&v53 + 1);
    v11 = (void *)v53;
    v14 = *((_QWORD *)&v54 + 1);
    v13 = v54;
    v16 = *(void **)&v55[8];
    v15 = *(_QWORD *)v55;
    v17 = *(void **)&v55[16];
    v18 = a2;
    v19 = v55[24];
    sub_23645E5FC((uint64_t)v47);
    v36 = v19;
    a2 = v18;
    v34 = v16;
    v35 = v17;
    v20 = v39;
    v21 = v40;
    v22 = v10;
    v23 = v11;
    v25 = v45;
    v24 = v46;
    v26 = v12;
    v27 = v43;
    v28 = v44;
    v29 = v13;
    v30 = v15;
    v32 = v41;
    v31 = v42;
    sub_23644F8BC(v38, v37, v22, v23, v26, v29, v14, v30, v34, v35, v36);
  }
  else
  {
    v27 = 0;
    v24 = 0;
    v25 = 0;
    v28 = 0;
    v31 = 0;
    v32 = 0;
    v20 = 0;
    v21 = -1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = sub_23645DC9C(v27, v24, v25, v28, v31, v32, v21);
  *a2 = v20;
  return result;
}

double sub_236455FF0(char *a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  double result;
  _OWORD *v5;
  int v6;
  _OWORD *v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  _OWORD v35[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[89];

  v2 = *a1;
  v3 = a2 + *(int *)(type metadata accessor for AuthenticationModel() + 28);
  v5 = *(_OWORD **)v3;
  v6 = *(unsigned __int8 *)(v3 + 80);
  v7 = *(_OWORD **)v3;
  v8 = v6;
  if (v6 == 7)
  {
    v7 = (_OWORD *)*((_QWORD *)v5 + 2);
    v8 = *((unsigned __int8 *)v5 + 96);
  }
  if (v8 == 6)
  {
    v33 = *(void **)(v3 + 24);
    v34 = *(void **)(v3 + 16);
    v31 = *(_QWORD *)(v3 + 40);
    v32 = *(_QWORD *)(v3 + 32);
    v29 = *(_QWORD *)(v3 + 56);
    v30 = *(_QWORD *)(v3 + 48);
    v27 = *(void **)(v3 + 64);
    v28 = *(void **)(v3 + 8);
    v26 = *(void **)(v3 + 72);
    v9 = v7[9];
    *(_OWORD *)&v39[32] = v7[8];
    *(_OWORD *)&v39[48] = v9;
    *(_OWORD *)&v39[64] = v7[10];
    *(_OWORD *)&v39[73] = *(_OWORD *)((char *)v7 + 169);
    v10 = v7[5];
    v37 = v7[4];
    v38 = v10;
    v11 = v7[7];
    *(_OWORD *)v39 = v7[6];
    *(_OWORD *)&v39[16] = v11;
    v12 = v7[2];
    v35[0] = v7[1];
    v35[1] = v12;
    v36 = v7[3];
    v19 = v12;
    v17 = v37;
    v18 = v36;
    v13 = v38;
    v14 = v39[0];
    v24 = *(_OWORD *)&v39[24];
    v25 = *(_OWORD *)&v39[8];
    v22 = *(_OWORD *)&v39[56];
    v23 = *(_OWORD *)&v39[40];
    v15 = *(_QWORD *)&v39[72];
    v21 = *(_QWORD *)&v39[80];
    v20 = v39[88];
    v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = v35[0];
    *(_OWORD *)(v16 + 32) = v19;
    *(_OWORD *)(v16 + 48) = v18;
    *(_OWORD *)(v16 + 64) = v17;
    *(_OWORD *)(v16 + 80) = v13;
    *(_BYTE *)(v16 + 96) = v14;
    *(_BYTE *)(v16 + 97) = v2;
    *(_OWORD *)(v16 + 104) = v25;
    *(_OWORD *)(v16 + 120) = v24;
    *(_OWORD *)(v16 + 136) = v23;
    *(_OWORD *)(v16 + 152) = v22;
    *(_QWORD *)(v16 + 168) = v15;
    *(_QWORD *)(v16 + 176) = v21;
    *(_BYTE *)(v16 + 184) = v20;
    sub_23645E5FC((uint64_t)v35);
    sub_23644F8BC(v5, v28, v34, v33, v32, v31, v30, v29, v27, v26, v6);
    *(_QWORD *)v3 = v16;
    result = 0.0;
    *(_OWORD *)(v3 + 8) = 0u;
    *(_OWORD *)(v3 + 24) = 0u;
    *(_OWORD *)(v3 + 40) = 0u;
    *(_OWORD *)(v3 + 56) = 0u;
    *(_QWORD *)(v3 + 72) = 0;
    *(_BYTE *)(v3 + 80) = 6;
  }
  return result;
}

double AuthenticationModel.isAlertPresented.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  double result;
  _OWORD *v5;
  int v6;
  _OWORD *v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  _OWORD v35[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[89];

  v3 = v1 + *(int *)(type metadata accessor for AuthenticationModel() + 28);
  v5 = *(_OWORD **)v3;
  v6 = *(unsigned __int8 *)(v3 + 80);
  v7 = *(_OWORD **)v3;
  v8 = v6;
  if (v6 == 7)
  {
    v7 = (_OWORD *)*((_QWORD *)v5 + 2);
    v8 = *((unsigned __int8 *)v5 + 96);
  }
  if (v8 == 6)
  {
    v33 = *(void **)(v3 + 24);
    v34 = *(void **)(v3 + 16);
    v31 = *(_QWORD *)(v3 + 40);
    v32 = *(_QWORD *)(v3 + 32);
    v29 = *(_QWORD *)(v3 + 56);
    v30 = *(_QWORD *)(v3 + 48);
    v27 = *(void **)(v3 + 64);
    v28 = *(void **)(v3 + 8);
    v26 = *(void **)(v3 + 72);
    v9 = v7[9];
    *(_OWORD *)&v39[32] = v7[8];
    *(_OWORD *)&v39[48] = v9;
    *(_OWORD *)&v39[64] = v7[10];
    *(_OWORD *)&v39[73] = *(_OWORD *)((char *)v7 + 169);
    v10 = v7[5];
    v37 = v7[4];
    v38 = v10;
    v11 = v7[7];
    *(_OWORD *)v39 = v7[6];
    *(_OWORD *)&v39[16] = v11;
    v12 = v7[2];
    v35[0] = v7[1];
    v35[1] = v12;
    v36 = v7[3];
    v20 = v12;
    v18 = v37;
    v19 = v36;
    v13 = v38;
    v14 = v39[0];
    v24 = *(_OWORD *)&v39[24];
    v25 = *(_OWORD *)&v39[8];
    v22 = *(_OWORD *)&v39[56];
    v23 = *(_OWORD *)&v39[40];
    v15 = *(_QWORD *)&v39[72];
    v16 = *(_QWORD *)&v39[80];
    v21 = v39[88];
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = v35[0];
    *(_OWORD *)(v17 + 32) = v20;
    *(_OWORD *)(v17 + 48) = v19;
    *(_OWORD *)(v17 + 64) = v18;
    *(_OWORD *)(v17 + 80) = v13;
    *(_BYTE *)(v17 + 96) = v14;
    *(_BYTE *)(v17 + 97) = a1 & 1;
    *(_OWORD *)(v17 + 104) = v25;
    *(_OWORD *)(v17 + 120) = v24;
    *(_OWORD *)(v17 + 136) = v23;
    *(_OWORD *)(v17 + 152) = v22;
    *(_QWORD *)(v17 + 168) = v15;
    *(_QWORD *)(v17 + 176) = v16;
    *(_BYTE *)(v17 + 184) = v21;
    sub_23645E5FC((uint64_t)v35);
    sub_23644F8BC(v5, v28, v34, v33, v32, v31, v30, v29, v27, v26, v6);
    *(_QWORD *)v3 = v17;
    result = 0.0;
    *(_OWORD *)(v3 + 8) = 0u;
    *(_OWORD *)(v3 + 24) = 0u;
    *(_OWORD *)(v3 + 40) = 0u;
    *(_OWORD *)(v3 + 56) = 0u;
    *(_QWORD *)(v3 + 72) = 0;
    *(_BYTE *)(v3 + 80) = 6;
  }
  return result;
}

void (*AuthenticationModel.isAlertPresented.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char *v23;
  void *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  void *v40;
  void *v41;
  char v42;
  uint64_t v43;
  void *v44;
  void *v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v3 = (char *)malloc(0xB8uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 22) = v1;
  v4 = *(int *)(type metadata accessor for AuthenticationModel() + 28);
  *((_DWORD *)v3 + 43) = v4;
  v5 = v1 + v4;
  v6 = *(_QWORD *)(v1 + v4);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v7 == 7)
  {
    v7 = *(unsigned __int8 *)(v6 + 96);
    v6 = *(_QWORD *)(v6 + 16);
  }
  v8 = v3 + 169;
  if (v7 == 6)
  {
    v9 = *(_OWORD *)(v6 + 16);
    v10 = *(_OWORD *)(v6 + 48);
    *((_OWORD *)v3 + 1) = *(_OWORD *)(v6 + 32);
    *((_OWORD *)v3 + 2) = v10;
    *(_OWORD *)v3 = v9;
    v11 = *(_OWORD *)(v6 + 64);
    v12 = *(_OWORD *)(v6 + 80);
    v13 = *(_OWORD *)(v6 + 112);
    *((_OWORD *)v3 + 5) = *(_OWORD *)(v6 + 96);
    *((_OWORD *)v3 + 6) = v13;
    *((_OWORD *)v3 + 3) = v11;
    *((_OWORD *)v3 + 4) = v12;
    v14 = *(_OWORD *)(v6 + 128);
    v15 = *(_OWORD *)(v6 + 144);
    v16 = *(_OWORD *)(v6 + 160);
    *(_OWORD *)(v3 + 153) = *(_OWORD *)(v6 + 169);
    *((_OWORD *)v3 + 8) = v15;
    *((_OWORD *)v3 + 9) = v16;
    *((_OWORD *)v3 + 7) = v14;
    v52 = *((_QWORD *)v3 + 4);
    v50 = *((_QWORD *)v3 + 6);
    v51 = *((_QWORD *)v3 + 5);
    v48 = *((_QWORD *)v3 + 9);
    v49 = *((_QWORD *)v3 + 8);
    v46 = v3[81];
    v47 = v3[80];
    v17 = (void *)*((_QWORD *)v3 + 13);
    v44 = (void *)*((_QWORD *)v3 + 12);
    v45 = (void *)*((_QWORD *)v3 + 11);
    v18 = (void *)*((_QWORD *)v3 + 14);
    v19 = *((_QWORD *)v3 + 15);
    v20 = *((_QWORD *)v3 + 16);
    v21 = *((_QWORD *)v3 + 17);
    v22 = (void *)*((_QWORD *)v3 + 19);
    v43 = *((_QWORD *)v3 + 18);
    v23 = v3 + 169;
    v24 = (void *)*((_QWORD *)v3 + 20);
    v25 = v3[168];
    v26 = (uint64_t)v3;
    v27 = *((_QWORD *)v3 + 7);
    sub_23645E5FC(v26);
    v42 = v25;
    v40 = v22;
    v41 = v24;
    v8 = v23;
    v29 = v50;
    v28 = v51;
    v30 = v17;
    v31 = v18;
    v33 = v48;
    v32 = v49;
    v34 = v19;
    v35 = v20;
    v36 = v46;
    v37 = v47;
    v38 = v52;
    sub_23644F8BC(v45, v44, v30, v31, v34, v35, v21, v43, v40, v41, v42);
  }
  else
  {
    v38 = 0;
    v28 = 0;
    v29 = 0;
    v27 = 0;
    v32 = 0;
    v33 = 0;
    v36 = 0;
    v37 = -1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23645DC9C(v38, v28, v29, v27, v32, v33, v37);
  *v8 = v36;
  return sub_2364565CC;
}

void sub_2364565CC(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  int v4;
  _OWORD *v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;

  v1 = *(_OWORD **)a1;
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 176) + *(int *)(*(_QWORD *)a1 + 172);
  v30 = *(_BYTE *)(*(_QWORD *)a1 + 169);
  v3 = *(_OWORD **)v2;
  v38 = *(void **)(v2 + 16);
  v39 = *(void **)(v2 + 8);
  v36 = *(_QWORD *)(v2 + 32);
  v37 = *(void **)(v2 + 24);
  v34 = *(_QWORD *)(v2 + 48);
  v35 = *(_QWORD *)(v2 + 40);
  v32 = *(void **)(v2 + 64);
  v33 = *(_QWORD *)(v2 + 56);
  v31 = *(void **)(v2 + 72);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = *(_OWORD **)v2;
  v6 = v4;
  if (v4 == 7)
  {
    v5 = (_OWORD *)*((_QWORD *)v3 + 2);
    v6 = *((unsigned __int8 *)v3 + 96);
  }
  if (v6 == 6)
  {
    v7 = v5[1];
    v8 = v5[3];
    v1[1] = v5[2];
    v1[2] = v8;
    *v1 = v7;
    v9 = v5[4];
    v10 = v5[5];
    v11 = v5[7];
    v1[5] = v5[6];
    v1[6] = v11;
    v1[3] = v9;
    v1[4] = v10;
    v12 = v5[8];
    v13 = v5[9];
    v14 = v5[10];
    *(_OWORD *)((char *)v1 + 153) = *(_OWORD *)((char *)v5 + 169);
    v1[8] = v13;
    v1[9] = v14;
    v1[7] = v12;
    v22 = v1[1];
    v23 = *v1;
    v20 = v1[3];
    v21 = v1[2];
    v16 = *((_QWORD *)v1 + 8);
    v15 = *((_QWORD *)v1 + 9);
    v17 = *((_BYTE *)v1 + 80);
    v28 = *(_OWORD *)((char *)v1 + 104);
    v29 = *(_OWORD *)((char *)v1 + 88);
    v26 = *(_OWORD *)((char *)v1 + 136);
    v27 = *(_OWORD *)((char *)v1 + 120);
    v18 = *((_QWORD *)v1 + 19);
    v25 = *((_QWORD *)v1 + 20);
    v24 = *((_BYTE *)v1 + 168);
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = v23;
    *(_OWORD *)(v19 + 32) = v22;
    *(_OWORD *)(v19 + 48) = v21;
    *(_OWORD *)(v19 + 64) = v20;
    *(_QWORD *)(v19 + 80) = v16;
    *(_QWORD *)(v19 + 88) = v15;
    *(_BYTE *)(v19 + 96) = v17;
    *(_BYTE *)(v19 + 97) = v30;
    *(_OWORD *)(v19 + 104) = v29;
    *(_OWORD *)(v19 + 120) = v28;
    *(_OWORD *)(v19 + 136) = v27;
    *(_OWORD *)(v19 + 152) = v26;
    *(_QWORD *)(v19 + 168) = v18;
    *(_QWORD *)(v19 + 176) = v25;
    *(_BYTE *)(v19 + 184) = v24;
    sub_23645E5FC((uint64_t)v1);
    sub_23644F8BC(v3, v39, v38, v37, v36, v35, v34, v33, v32, v31, v4);
    *(_QWORD *)v2 = v19;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_QWORD *)(v2 + 72) = 0;
    *(_BYTE *)(v2 + 80) = 6;
  }
  free(v1);
}

uint64_t AuthenticationModel.BasicLogin.username.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AuthenticationModel.BasicLogin.username.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*AuthenticationModel.BasicLogin.username.modify())()
{
  return nullsub_1;
}

uint64_t AuthenticationModel.BasicLogin.password.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AuthenticationModel.BasicLogin.password.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*AuthenticationModel.BasicLogin.password.modify())()
{
  return nullsub_1;
}

uint64_t AuthenticationModel.BasicLogin.isCancelled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t AuthenticationModel.BasicLogin.isCancelled.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = result;
  return result;
}

uint64_t (*AuthenticationModel.BasicLogin.isCancelled.modify())()
{
  return nullsub_1;
}

uint64_t AuthenticationModel.BasicLogin.isSkipped.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t AuthenticationModel.BasicLogin.isSkipped.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 33) = result;
  return result;
}

uint64_t (*AuthenticationModel.BasicLogin.isSkipped.modify())()
{
  return nullsub_1;
}

uint64_t AuthenticationModel.BasicLogin.supportsSplitAccounts.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 34);
}

uint64_t AuthenticationModel.BasicLogin.supportsSplitAccounts.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 34) = result;
  return result;
}

uint64_t (*AuthenticationModel.BasicLogin.supportsSplitAccounts.modify())()
{
  return nullsub_1;
}

uint64_t AuthenticationModel.BasicLogin.isSplitAccountSetup.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 35);
}

uint64_t AuthenticationModel.BasicLogin.isSplitAccountSetup.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 35) = result;
  return result;
}

uint64_t (*AuthenticationModel.BasicLogin.isSplitAccountSetup.modify())()
{
  return nullsub_1;
}

void *AuthenticationModel.BasicLogin.authenticationContext.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 40);
  v2 = v1;
  return v1;
}

uint64_t AuthenticationModel.BasicLogin.currentServices.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AuthenticationModel.BasicLogin.currentServices.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t (*AuthenticationModel.BasicLogin.currentServices.modify())()
{
  return nullsub_1;
}

uint64_t AuthenticationModel.BasicLogin.init(username:password:supportsSplitAccounts:isSplitAccountSetup:authenticationContext:currentServices:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  *(_QWORD *)a9 = result;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_WORD *)(a9 + 32) = 514;
  *(_BYTE *)(a9 + 34) = a5;
  *(_BYTE *)(a9 + 35) = a6;
  *(_QWORD *)(a9 + 40) = a7;
  *(_QWORD *)(a9 + 48) = a8;
  return result;
}

unint64_t AuthenticationModel.BasicLogin.description.getter()
{
  sub_2365B0578();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4848);
  sub_2365B0080();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  return 0xD00000000000001ALL;
}

unint64_t AuthenticationModel.BasicLogin.debugDescription.getter()
{
  sub_2365B0578();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4610);
  sub_2365B0080();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4848);
  sub_2365B0080();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  return 0xD000000000000010;
}

uint64_t AuthenticationModel.BasicLogin.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(unsigned __int8 *)(v0 + 32);
  v3 = *(unsigned __int8 *)(v0 + 33);
  v5 = *(void **)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  if (*(_QWORD *)(v0 + 8))
  {
    sub_2365B0A04();
    swift_bridgeObjectRetain();
    sub_2365B008C();
    swift_bridgeObjectRelease();
    if (v1)
      goto LABEL_3;
  }
  else
  {
    sub_2365B0A04();
    if (v1)
    {
LABEL_3:
      sub_2365B0A04();
      swift_bridgeObjectRetain();
      sub_2365B008C();
      swift_bridgeObjectRelease();
      if (v2 == 2)
        goto LABEL_8;
LABEL_7:
      sub_2365B0A04();
      goto LABEL_8;
    }
  }
  sub_2365B0A04();
  if (v2 != 2)
    goto LABEL_7;
LABEL_8:
  sub_2365B0A04();
  if (v3 != 2)
    sub_2365B0A04();
  sub_2365B0A04();
  sub_2365B0A04();
  sub_2365B0A04();
  sub_2365B0A04();
  if (v5)
  {
    v6 = v5;
    sub_2365B0458();

  }
  result = sub_2365B09F8();
  v8 = *(_QWORD *)(v4 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain();
    v9 = 0;
    do
    {
      v10 = *(void **)(v4 + 8 * v9++ + 32);
      sub_2365B005C();
      v11 = v10;
      sub_2365B008C();

      swift_bridgeObjectRelease();
    }
    while (v8 != v9);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_236456E38(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_236456E6C + 4 * byte_2365B2498[a1]))(0x656D616E72657375, 0xE800000000000000);
}

uint64_t sub_236456E6C()
{
  return 0x64726F7773736170;
}

uint64_t sub_236456E80()
{
  return 0x6C65636E61437369;
}

uint64_t sub_236456EA0()
{
  return 0x657070696B537369;
}

unint64_t sub_236456EBC()
{
  return 0xD000000000000015;
}

uint64_t sub_236456F04()
{
  return 0x53746E6572727563;
}

uint64_t sub_236456F28()
{
  unsigned __int8 *v0;

  return sub_236456E38(*v0);
}

uint64_t sub_236456F30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_236464944(a1, a2);
  *a3 = result;
  return result;
}

void sub_236456F54(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_236456F60()
{
  sub_23645E6E4();
  return sub_2365B0AD0();
}

uint64_t sub_236456F88()
{
  sub_23645E6E4();
  return sub_2365B0ADC();
}

uint64_t AuthenticationModel.BasicLogin.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4850);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v1 + 16);
  v23 = *(_QWORD *)(v1 + 24);
  v24 = v8;
  LODWORD(v8) = *(unsigned __int8 *)(v1 + 32);
  v21 = *(unsigned __int8 *)(v1 + 33);
  v22 = v8;
  LODWORD(v8) = *(unsigned __int8 *)(v1 + 34);
  v19 = *(unsigned __int8 *)(v1 + 35);
  v20 = v8;
  v9 = *(_QWORD *)(v1 + 40);
  v17 = *(_QWORD *)(v1 + 48);
  v18 = v9;
  v10 = a1[3];
  v11 = a1;
  v13 = v12;
  __swift_project_boxed_opaque_existential_1(v11, v10);
  sub_23645E6E4();
  sub_2365B0AAC();
  LOBYTE(v26) = 0;
  sub_2365B07C4();
  if (!v2)
  {
    v14 = v18;
    LOBYTE(v26) = 1;
    sub_2365B07C4();
    LOBYTE(v26) = 2;
    sub_2365B07D0();
    LOBYTE(v26) = 3;
    sub_2365B07D0();
    LOBYTE(v26) = 4;
    sub_2365B080C();
    LOBYTE(v26) = 5;
    sub_2365B080C();
    v26 = v14;
    v25 = 6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4860);
    sub_23645E904(&qword_2563E4868, &qword_2563E4860, (uint64_t)&protocol conformance descriptor for _objcCodable<A>);
    sub_2365B0824();
    v26 = v17;
    v25 = 7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4620);
    sub_23645146C(&qword_2563E4628, &qword_2563E4630, (uint64_t)&protocol conformance descriptor for AIDAServiceType, MEMORY[0x24BEE12A0]);
    sub_2365B0824();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v13);
}

uint64_t AuthenticationModel.BasicLogin.hashValue.getter()
{
  sub_2365B09E0();
  AuthenticationModel.BasicLogin.hash(into:)();
  return sub_2365B0A34();
}

uint64_t AuthenticationModel.BasicLogin.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void *v34;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4870);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23645E6E4();
  sub_2365B0A7C();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

  }
  else
  {
    LOBYTE(v34) = 0;
    v9 = sub_2365B0710();
    v12 = v11;
    v32 = v9;
    LOBYTE(v34) = 1;
    swift_bridgeObjectRetain();
    v13 = sub_2365B0710();
    v15 = v14;
    v31 = v13;
    LOBYTE(v34) = 2;
    swift_bridgeObjectRetain();
    v30 = sub_2365B071C();
    LOBYTE(v34) = 3;
    v29 = sub_2365B071C();
    LOBYTE(v34) = 4;
    v28 = sub_2365B0758();
    LOBYTE(v34) = 5;
    v26 = sub_2365B0758();
    v27 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4860);
    v33 = 6;
    sub_23645E904(&qword_2563E4878, &qword_2563E4860, (uint64_t)&protocol conformance descriptor for _objcCodable<A>);
    sub_2365B0770();
    v16 = v34;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4620);
    v33 = 7;
    v17 = sub_23645146C(&qword_2563E4658, &qword_2563E4660, (uint64_t)&protocol conformance descriptor for AIDAServiceType, MEMORY[0x24BEE12D0]);
    v24 = (uint64_t)v16;
    v25 = v17;
    v18 = v16;
    sub_2365B0770();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v19 = v28 & 1;
    v20 = v26 & 1;
    v21 = (uint64_t)v34;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22 = v27;
    *v27 = v32;
    v22[1] = v12;
    v22[2] = v31;
    v22[3] = v15;
    *((_BYTE *)v22 + 32) = v30;
    *((_BYTE *)v22 + 33) = v29;
    *((_BYTE *)v22 + 34) = v19;
    *((_BYTE *)v22 + 35) = v20;
    v22[5] = v24;
    v22[6] = v21;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();

  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2364576C0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return AuthenticationModel.BasicLogin.init(from:)(a1, a2);
}

uint64_t sub_2364576D4(_QWORD *a1)
{
  return AuthenticationModel.BasicLogin.encode(to:)(a1);
}

uint64_t sub_2364576EC()
{
  sub_2365B09E0();
  AuthenticationModel.BasicLogin.hash(into:)();
  return sub_2365B0A34();
}

uint64_t sub_236457758()
{
  sub_2365B09E0();
  AuthenticationModel.BasicLogin.hash(into:)();
  return sub_2365B0A34();
}

id AuthenticationModel.SecondFactor.authenticationContext.getter()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

uint64_t AuthenticationModel.SecondFactor.codeLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t AuthenticationModel.SecondFactor.collectedCode.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t AuthenticationModel.SecondFactor.collectedCode.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*AuthenticationModel.SecondFactor.collectedCode.modify())()
{
  return nullsub_1;
}

uint64_t AuthenticationModel.SecondFactor.errorInfo.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = v1[4];
  v3 = v1[5];
  v4 = v1[6];
  v5 = v1[7];
  v6 = (void *)v1[8];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = (uint64_t)v6;
  return sub_23644F7E0(v2, v3, v4, v5, v6);
}

__n128 AuthenticationModel.SecondFactor.errorInfo.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;
  __n128 v4;
  __int128 v5;

  v4 = (__n128)a1[1];
  v5 = *a1;
  v2 = *((_QWORD *)a1 + 4);
  sub_23644F9E0(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(void **)(v1 + 64));
  result = v4;
  *(_OWORD *)(v1 + 32) = v5;
  *(__n128 *)(v1 + 48) = v4;
  *(_QWORD *)(v1 + 64) = v2;
  return result;
}

uint64_t (*AuthenticationModel.SecondFactor.errorInfo.modify())()
{
  return nullsub_1;
}

void *AuthenticationModel.SecondFactor.error.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 72);
  v2 = v1;
  return v1;
}

void AuthenticationModel.SecondFactor.error.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = a1;
}

uint64_t (*AuthenticationModel.SecondFactor.error.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_236457928();
  return sub_236457924;
}

uint64_t (*sub_236457928())()
{
  return nullsub_1;
}

__n128 AuthenticationModel.SecondFactor.init(codeLength:authenticationContext:errorInfo:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  __n128 result;
  __int128 v6;

  v4 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a4 + 8) = a1;
  *(_QWORD *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 24) = 1;
  *(_QWORD *)a4 = a2;
  result = *(__n128 *)a3;
  v6 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a4 + 32) = *(_OWORD *)a3;
  *(_OWORD *)(a4 + 48) = v6;
  *(_QWORD *)(a4 + 64) = v4;
  *(_QWORD *)(a4 + 72) = 0;
  return result;
}

void AuthenticationModel.SecondFactor.hash(into:)()
{
  uint64_t v0;
  void *v1;
  int v2;
  void *v3;
  id v4;
  id v5[2];
  id v6;

  v1 = *(void **)v0;
  v2 = *(unsigned __int8 *)(v0 + 24);
  *(_OWORD *)v5 = *(_OWORD *)(v0 + 40);
  v3 = *(void **)(v0 + 72);
  if (*(_QWORD *)v0)
  {
    sub_2365B0A04();
    v4 = v1;
    sub_2365B0458();

  }
  else
  {
    sub_2365B0A04();
  }
  sub_2365B09F8();
  sub_2365B0A04();
  if (!v2)
    sub_2365B09F8();
  if (v5[0] == (id)1)
  {
    sub_2365B0A04();
    if (v3)
    {
LABEL_8:
      sub_2365B0A04();
      v6 = v3;
      sub_2365B0458();

      return;
    }
  }
  else
  {
    sub_2365B0A04();
    AuthenticationModel.ErrorInfo.hash(into:)();
    if (v3)
      goto LABEL_8;
  }
  sub_2365B0A04();
}

uint64_t sub_236457ABC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_236457AF0 + 4 * byte_2365B24A0[*v0]))(0xD000000000000015, 0x80000002365CB430);
}

uint64_t sub_236457AF0()
{
  return 0x676E654C65646F63;
}

uint64_t sub_236457B0C()
{
  return 0x657463656C6C6F63;
}

uint64_t sub_236457B30()
{
  return 0x666E49726F727265;
}

uint64_t sub_236457B4C()
{
  return 0x726F727265;
}

uint64_t sub_236457B60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_236464CB8(a1, a2);
  *a3 = result;
  return result;
}

void sub_236457B84(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_236457B90()
{
  sub_23645E728();
  return sub_2365B0AD0();
}

uint64_t sub_236457BB8()
{
  sub_23645E728();
  return sub_2365B0ADC();
}

uint64_t AuthenticationModel.SecondFactor.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4880);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v22 = v1[2];
  v23 = v8;
  v29 = *((unsigned __int8 *)v1 + 24);
  v10 = v1[4];
  v20 = v1[5];
  v21 = v10;
  v11 = v1[7];
  v17 = v1[6];
  v18 = v11;
  v19 = v1[8];
  v16 = v1[9];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23645E728();
  sub_2365B0AAC();
  v24 = v9;
  v30 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4860);
  sub_23645E904(&qword_2563E4868, &qword_2563E4860, (uint64_t)&protocol conformance descriptor for _objcCodable<A>);
  sub_2365B0824();
  if (!v2)
  {
    v12 = v21;
    v13 = v20;
    LOBYTE(v24) = 1;
    sub_2365B0818();
    LOBYTE(v24) = 2;
    sub_2365B07DC();
    v24 = v12;
    v25 = v13;
    v26 = v17;
    v27 = v18;
    v28 = v19;
    v30 = 3;
    sub_23645E76C();
    sub_2365B07E8();
    v24 = v16;
    v30 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4898);
    sub_23645E904(&qword_2563E48A0, &qword_2563E4898, (uint64_t)&protocol conformance descriptor for _objcCodable<A>);
    sub_2365B0824();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t AuthenticationModel.SecondFactor.hashValue.getter()
{
  sub_2365B09E0();
  AuthenticationModel.SecondFactor.hash(into:)();
  return sub_2365B0A34();
}

void AuthenticationModel.SecondFactor.init(from:)(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  int v38;
  char v39;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E48A8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23645E728();
  sub_2365B0A7C();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

    sub_23644F9E0(0, 1, 0, 0, 0);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4860);
    v39 = 0;
    sub_23645E904(&qword_2563E4878, &qword_2563E4860, (uint64_t)&protocol conformance descriptor for _objcCodable<A>);
    sub_2365B0770();
    v9 = v33;
    LOBYTE(v33) = 1;
    v32 = v9;
    v10 = v9;
    v11 = sub_2365B0764();
    LOBYTE(v33) = 2;
    v12 = sub_2365B0728();
    v38 = v13;
    v31 = v12;
    v39 = 3;
    sub_23645E7B0();
    sub_2365B0734();
    v25 = v11;
    v26 = a2;
    v28 = v10;
    v15 = (uint64_t)v33;
    v14 = v34;
    v16 = v36;
    v30 = v35;
    v17 = v37;
    v27 = (id)__swift_instantiateConcreteTypeFromMangledName(&qword_2563E4898);
    v39 = 4;
    v29 = v16;
    sub_23644F7E0(v15, v14, v30, v16, v17);
    sub_23645E904(&qword_2563E48B8, &qword_2563E4898, (uint64_t)&protocol conformance descriptor for _objcCodable<A>);
    sub_2365B0770();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v18 = v33;
    v27 = v33;
    v19 = v28;
    v21 = v29;
    v20 = v30;
    sub_23644F7E0(v15, v14, v30, v29, v17);
    sub_23644F9E0(v15, v14, v20, v21, v17);

    v22 = v26;
    v23 = v25;
    *v26 = v32;
    v22[1] = v23;
    v22[2] = v31;
    *((_BYTE *)v22 + 24) = v38 & 1;
    v22[4] = v15;
    v22[5] = v14;
    v22[6] = v20;
    v22[7] = v21;
    v22[8] = v17;
    v22[9] = v18;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

    sub_23644F9E0(v15, v14, v20, v21, v17);
  }
}

void sub_236458284(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  AuthenticationModel.SecondFactor.init(from:)(a1, a2);
}

uint64_t sub_236458298(_QWORD *a1)
{
  return AuthenticationModel.SecondFactor.encode(to:)(a1);
}

uint64_t sub_2364582B0()
{
  sub_2365B09E0();
  AuthenticationModel.SecondFactor.hash(into:)();
  return sub_2365B0A34();
}

uint64_t sub_23645831C()
{
  sub_2365B09E0();
  AuthenticationModel.SecondFactor.hash(into:)();
  return sub_2365B0A34();
}

uint64_t AuthenticationModel.ErrorInfo.title.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AuthenticationModel.ErrorInfo.message.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

void AuthenticationModel.ErrorInfo.error.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
}

uint64_t (*AuthenticationModel.ErrorInfo.error.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_236457928();
  return sub_236457924;
}

uint64_t AuthenticationModel.ErrorInfo.init(title:message:error:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  *a6 = result;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  return result;
}

void AuthenticationModel.ErrorInfo.hash(into:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  id v3;

  v1 = v0[3];
  v2 = (void *)v0[4];
  if (v0[1])
  {
    sub_2365B0A04();
    swift_bridgeObjectRetain();
    sub_2365B008C();
    swift_bridgeObjectRelease();
    if (v1)
      goto LABEL_3;
LABEL_6:
    sub_2365B0A04();
    if (v2)
      goto LABEL_4;
    goto LABEL_7;
  }
  sub_2365B0A04();
  if (!v1)
    goto LABEL_6;
LABEL_3:
  sub_2365B0A04();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  if (v2)
  {
LABEL_4:
    sub_2365B0A04();
    v3 = v2;
    sub_2365B0458();

    return;
  }
LABEL_7:
  sub_2365B0A04();
}

uint64_t sub_236458558()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6567617373656DLL;
  if (*v0 != 1)
    v1 = 0x726F727265;
  if (*v0)
    return v1;
  else
    return 0x656C746974;
}

uint64_t sub_2364585AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_236464F04(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2364585D0()
{
  sub_23645E7F4();
  return sub_2365B0AD0();
}

uint64_t sub_2364585F8()
{
  sub_23645E7F4();
  return sub_2365B0ADC();
}

uint64_t AuthenticationModel.ErrorInfo.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E48C0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[2];
  v13 = v1[3];
  v14 = v7;
  v12 = v1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23645E7F4();
  sub_2365B0AAC();
  v19 = 0;
  v8 = v15;
  sub_2365B07C4();
  if (!v8)
  {
    v9 = v12;
    v18 = 1;
    sub_2365B07C4();
    v16 = v9;
    v17 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4898);
    sub_23645E904(&qword_2563E48A0, &qword_2563E4898, (uint64_t)&protocol conformance descriptor for _objcCodable<A>);
    sub_2365B0824();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t AuthenticationModel.ErrorInfo.hashValue.getter()
{
  sub_2365B09E0();
  AuthenticationModel.ErrorInfo.hash(into:)();
  return sub_2365B0A34();
}

uint64_t AuthenticationModel.ErrorInfo.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  char v23;
  char v24;
  char v25;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E48D0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23645E7F4();
  sub_2365B0A7C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v25 = 0;
  v9 = sub_2365B0710();
  v11 = v10;
  v21 = v9;
  v24 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_2365B0710();
  v14 = v13;
  v19 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4898);
  v23 = 2;
  sub_23645E904(&qword_2563E48B8, &qword_2563E4898, (uint64_t)&protocol conformance descriptor for _objcCodable<A>);
  v20 = v14;
  swift_bridgeObjectRetain();
  sub_2365B0770();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = (uint64_t)v22;
  v16 = v22;
  v17 = v20;
  *a2 = v21;
  a2[1] = v11;
  a2[2] = v19;
  a2[3] = v17;
  a2[4] = v15;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_236458A5C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return AuthenticationModel.ErrorInfo.init(from:)(a1, a2);
}

uint64_t sub_236458A70(_QWORD *a1)
{
  return AuthenticationModel.ErrorInfo.encode(to:)(a1);
}

uint64_t sub_236458A88()
{
  sub_2365B09E0();
  AuthenticationModel.ErrorInfo.hash(into:)();
  return sub_2365B0A34();
}

uint64_t sub_236458ADC()
{
  sub_2365B09E0();
  AuthenticationModel.ErrorInfo.hash(into:)();
  return sub_2365B0A34();
}

id AuthenticationModel.ServerRedirect.authenticationContext.getter()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

void *AuthenticationModel.ServerRedirect.configuration.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 8);
  v2 = v1;
  return v1;
}

void *AuthenticationModel.ServerRedirect.finalURLResponse.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

void AuthenticationModel.ServerRedirect.finalURLResponse.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
}

uint64_t (*AuthenticationModel.ServerRedirect.finalURLResponse.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_236457928();
  return sub_236457924;
}

void *AuthenticationModel.ServerRedirect.error.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 24);
  v2 = v1;
  return v1;
}

void AuthenticationModel.ServerRedirect.error.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
}

uint64_t (*AuthenticationModel.ServerRedirect.error.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_236457928();
  return sub_236457924;
}

void *AuthenticationModel.ServerRedirect.additionalOptions.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 32);
  v2 = v1;
  return v1;
}

void AuthenticationModel.ServerRedirect.additionalOptions.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
}

uint64_t (*AuthenticationModel.ServerRedirect.additionalOptions.modify())()
{
  return nullsub_1;
}

void AuthenticationModel.ServerRedirect.hash(into:)()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v2 = *(void **)v0;
  v1 = *(void **)(v0 + 8);
  v4 = *(void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v5 = *(void **)(v0 + 32);
  if (*(_QWORD *)v0)
  {
    sub_2365B0A04();
    v6 = v2;
    sub_2365B0458();

    if (v1)
      goto LABEL_3;
  }
  else
  {
    sub_2365B0A04();
    if (v1)
    {
LABEL_3:
      sub_2365B0A04();
      v7 = v1;
      sub_2365B0458();

      if (v4)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  sub_2365B0A04();
  if (v4)
  {
LABEL_4:
    sub_2365B0A04();
    v8 = v4;
    sub_2365B0458();

    if (v3)
      goto LABEL_5;
LABEL_10:
    sub_2365B0A04();
    if (v5)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_9:
  sub_2365B0A04();
  if (!v3)
    goto LABEL_10;
LABEL_5:
  sub_2365B0A04();
  v9 = v3;
  sub_2365B0458();

  if (v5)
  {
LABEL_6:
    sub_2365B0A04();
    v10 = v5;
    sub_2365B0458();

    return;
  }
LABEL_11:
  sub_2365B0A04();
}

uint64_t sub_236458E60(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_236458EA0 + 4 * byte_2365B24A5[a1]))(0xD000000000000015, 0x80000002365CB430);
}

uint64_t sub_236458EA0()
{
  return 0x72756769666E6F63;
}

unint64_t sub_236458EC4()
{
  return 0xD000000000000010;
}

uint64_t sub_236458EE0()
{
  return 0x726F727265;
}

uint64_t sub_236458EF4()
{
  uint64_t v0;

  return v0 + 1;
}

uint64_t sub_236458F0C()
{
  unsigned __int8 *v0;

  return sub_236458E60(*v0);
}

uint64_t sub_236458F14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_236465048(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_236458F38()
{
  sub_23645E838();
  return sub_2365B0AD0();
}

uint64_t sub_236458F60()
{
  sub_23645E838();
  return sub_2365B0ADC();
}

uint64_t AuthenticationModel.ServerRedirect.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E48D8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v17 = v1[2];
  v18 = v8;
  v10 = v1[3];
  v15 = v1[4];
  v16 = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23645E838();
  sub_2365B0AAC();
  v20 = v9;
  v19 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4860);
  sub_23645E904(&qword_2563E4868, &qword_2563E4860, (uint64_t)&protocol conformance descriptor for _objcCodable<A>);
  sub_2365B0824();
  if (!v2)
  {
    v12 = v16;
    v11 = v17;
    v20 = v18;
    v19 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E48E8);
    sub_23645E904(&qword_2563E48F0, &qword_2563E48E8, (uint64_t)&protocol conformance descriptor for _objcCodable<A>);
    sub_2365B0824();
    v20 = v11;
    v19 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E48F8);
    sub_23645E904(&qword_2563E4900, &qword_2563E48F8, (uint64_t)&protocol conformance descriptor for _objcCodable<A>);
    sub_2365B0824();
    v20 = v12;
    v19 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4898);
    sub_23645E904(&qword_2563E48A0, &qword_2563E4898, (uint64_t)&protocol conformance descriptor for _objcCodable<A>);
    sub_2365B0824();
    v20 = v15;
    v19 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4908);
    sub_23645E904(&qword_2563E4910, &qword_2563E4908, (uint64_t)&protocol conformance descriptor for _objcCodableDictionary<A>);
    sub_2365B0824();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t AuthenticationModel.ServerRedirect.hashValue.getter()
{
  sub_2365B09E0();
  AuthenticationModel.ServerRedirect.hash(into:)();
  return sub_2365B0A34();
}

void AuthenticationModel.ServerRedirect.init(from:)(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v20[2];
  id v21;
  id v22;
  _QWORD *v23;
  id v24;
  id v25;
  char v26;
  id v27;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4918);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23645E838();
  sub_2365B0A7C();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4860);
    v26 = 0;
    sub_23645E904(&qword_2563E4878, &qword_2563E4860, (uint64_t)&protocol conformance descriptor for _objcCodable<A>);
    sub_2365B0770();
    v9 = v27;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E48E8);
    v26 = 1;
    sub_23645E904(&qword_2563E4920, &qword_2563E48E8, (uint64_t)&protocol conformance descriptor for _objcCodable<A>);
    v25 = v9;
    v10 = v9;
    sub_2365B0770();
    v23 = a2;
    v11 = v27;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E48F8);
    v26 = 2;
    sub_23645E904(&qword_2563E4928, &qword_2563E48F8, (uint64_t)&protocol conformance descriptor for _objcCodable<A>);
    v24 = v11;
    sub_2365B0770();
    v22 = v10;
    v12 = v27;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4898);
    v26 = 3;
    sub_23645E904(&qword_2563E48B8, &qword_2563E4898, (uint64_t)&protocol conformance descriptor for _objcCodable<A>);
    v21 = v12;
    sub_2365B0770();
    v13 = v27;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4908);
    v26 = 4;
    v14 = sub_23645E904(&qword_2563E4930, &qword_2563E4908, (uint64_t)&protocol conformance descriptor for _objcCodableDictionary<A>);
    v20[0] = v13;
    v20[1] = v14;
    v15 = v13;
    sub_2365B0770();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v16 = v27;
    v17 = v27;
    v18 = v23;
    *v23 = v25;
    v18[1] = v11;
    v19 = v20[0];
    v18[2] = v12;
    v18[3] = v19;
    v18[4] = v16;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

  }
}

void sub_2364596D4(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  AuthenticationModel.ServerRedirect.init(from:)(a1, a2);
}

uint64_t sub_2364596E8(_QWORD *a1)
{
  return AuthenticationModel.ServerRedirect.encode(to:)(a1);
}

uint64_t sub_236459700()
{
  sub_2365B09E0();
  AuthenticationModel.ServerRedirect.hash(into:)();
  return sub_2365B0A34();
}

uint64_t sub_236459754()
{
  sub_2365B09E0();
  AuthenticationModel.ServerRedirect.hash(into:)();
  return sub_2365B0A34();
}

uint64_t (*AuthenticationModel.NativeRecovery.error.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_236457928();
  return sub_236457924;
}

void AuthenticationModel.NativeRecovery.recoveredInfo.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
}

uint64_t (*AuthenticationModel.NativeRecovery.recoveredInfo.modify())()
{
  return nullsub_1;
}

void AuthenticationModel.NativeRecovery.hash(into:)()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;

  v2 = *(void **)v0;
  v1 = *(void **)(v0 + 8);
  v4 = *(void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  if (*(_QWORD *)v0)
  {
    sub_2365B0A04();
    v5 = v2;
    sub_2365B0458();

    if (v1)
      goto LABEL_3;
  }
  else
  {
    sub_2365B0A04();
    if (v1)
    {
LABEL_3:
      sub_2365B0A04();
      v6 = v1;
      sub_2365B0458();

      if (v4)
        goto LABEL_4;
LABEL_8:
      sub_2365B0A04();
      if (v3)
        goto LABEL_5;
      goto LABEL_9;
    }
  }
  sub_2365B0A04();
  if (!v4)
    goto LABEL_8;
LABEL_4:
  sub_2365B0A04();
  v7 = v4;
  sub_2365B0458();

  if (v3)
  {
LABEL_5:
    sub_2365B0A04();
    v8 = v3;
    sub_2365B0458();

    return;
  }
LABEL_9:
  sub_2365B0A04();
}

uint64_t sub_236459948()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23645997C + 4 * byte_2365B24AA[*v0]))(0xD000000000000015, 0x80000002365CB430);
}

uint64_t sub_23645997C()
{
  return 0x747865746E6F63;
}

uint64_t sub_236459994()
{
  return 0x726F727265;
}

uint64_t sub_2364599A8()
{
  return 0x657265766F636572;
}

uint64_t sub_2364599CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23646526C(a1, a2);
  *a3 = result;
  return result;
}

void sub_2364599F0(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_2364599FC()
{
  sub_23645E87C();
  return sub_2365B0AD0();
}

uint64_t sub_236459A24()
{
  sub_23645E87C();
  return sub_2365B0ADC();
}

uint64_t AuthenticationModel.NativeRecovery.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4938);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v14 = v1[2];
  v15 = v8;
  v13 = v1[3];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23645E87C();
  sub_2365B0AAC();
  v17 = v9;
  v16 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4860);
  sub_23645E904(&qword_2563E4868, &qword_2563E4860, (uint64_t)&protocol conformance descriptor for _objcCodable<A>);
  sub_2365B0824();
  if (!v2)
  {
    v10 = v13;
    v11 = v14;
    v17 = v15;
    v16 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4948);
    sub_23645E904(&qword_2563E4950, &qword_2563E4948, (uint64_t)&protocol conformance descriptor for _objcCodable<A>);
    sub_2365B0824();
    v17 = v11;
    v16 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4898);
    sub_23645E904(&qword_2563E48A0, &qword_2563E4898, (uint64_t)&protocol conformance descriptor for _objcCodable<A>);
    sub_2365B0824();
    v17 = v10;
    v16 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4908);
    sub_23645E904(&qword_2563E4910, &qword_2563E4908, (uint64_t)&protocol conformance descriptor for _objcCodableDictionary<A>);
    sub_2365B0824();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t AuthenticationModel.NativeRecovery.hashValue.getter()
{
  sub_2365B09E0();
  AuthenticationModel.NativeRecovery.hash(into:)();
  return sub_2365B0A34();
}

void AuthenticationModel.NativeRecovery.init(from:)(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  _QWORD *v16;
  _QWORD v17[2];
  _QWORD *v18;
  id v19;
  id v20;
  char v21;
  id v22;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4958);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23645E87C();
  sub_2365B0A7C();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4860);
    v21 = 0;
    sub_23645E904(&qword_2563E4878, &qword_2563E4860, (uint64_t)&protocol conformance descriptor for _objcCodable<A>);
    sub_2365B0770();
    v9 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4948);
    v21 = 1;
    sub_23645E904(&qword_2563E4960, &qword_2563E4948, (uint64_t)&protocol conformance descriptor for _objcCodable<A>);
    v20 = v9;
    sub_2365B0770();
    v18 = a2;
    v10 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4898);
    v21 = 2;
    sub_23645E904(&qword_2563E48B8, &qword_2563E4898, (uint64_t)&protocol conformance descriptor for _objcCodable<A>);
    v19 = v10;
    sub_2365B0770();
    v11 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4908);
    v21 = 3;
    v12 = sub_23645E904(&qword_2563E4930, &qword_2563E4908, (uint64_t)&protocol conformance descriptor for _objcCodableDictionary<A>);
    v17[0] = v11;
    v17[1] = v12;
    v13 = v11;
    sub_2365B0770();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v14 = v22;
    v15 = v22;
    v16 = v18;
    *v18 = v9;
    v16[1] = v10;
    v16[2] = v17[0];
    v16[3] = v14;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

  }
}

void sub_23645A05C(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  AuthenticationModel.NativeRecovery.init(from:)(a1, a2);
}

uint64_t sub_23645A070(_QWORD *a1)
{
  return AuthenticationModel.NativeRecovery.encode(to:)(a1);
}

uint64_t sub_23645A088()
{
  sub_2365B09E0();
  AuthenticationModel.NativeRecovery.hash(into:)();
  return sub_2365B0A34();
}

uint64_t sub_23645A0D4()
{
  sub_2365B09E0();
  AuthenticationModel.NativeRecovery.hash(into:)();
  return sub_2365B0A34();
}

id AuthenticationModel.FidoChallenge.authenticationContext.getter()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

void *AuthenticationModel.FidoChallenge.context.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 8);
  v2 = v1;
  return v1;
}

void *AuthenticationModel.FidoChallenge.response.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

void AuthenticationModel.FidoChallenge.response.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
}

uint64_t (*AuthenticationModel.FidoChallenge.response.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_236457928();
  return sub_236457924;
}

void *AuthenticationModel.FidoChallenge.error.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 24);
  v2 = v1;
  return v1;
}

void AuthenticationModel.FidoChallenge.error.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
}

uint64_t (*AuthenticationModel.FidoChallenge.error.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_236457928();
  return sub_236457924;
}

void sub_23645A288(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

void AuthenticationModel.FidoChallenge.hash(into:)()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;

  v2 = *(void **)v0;
  v1 = *(void **)(v0 + 8);
  v4 = *(void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  if (*(_QWORD *)v0)
  {
    sub_2365B0A04();
    v5 = v2;
    sub_2365B0458();

    if (v1)
      goto LABEL_3;
  }
  else
  {
    sub_2365B0A04();
    if (v1)
    {
LABEL_3:
      sub_2365B0A04();
      v6 = v1;
      sub_2365B0458();

      if (v4)
        goto LABEL_4;
LABEL_8:
      sub_2365B0A04();
      if (v3)
        goto LABEL_5;
      goto LABEL_9;
    }
  }
  sub_2365B0A04();
  if (!v4)
    goto LABEL_8;
LABEL_4:
  sub_2365B0A04();
  v7 = v4;
  sub_2365B0458();

  if (v3)
  {
LABEL_5:
    sub_2365B0A04();
    v8 = v3;
    sub_2365B0458();

    return;
  }
LABEL_9:
  sub_2365B0A04();
}

uint64_t sub_23645A3E0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23645A414 + 4 * byte_2365B24AE[*v0]))(0xD000000000000015, 0x80000002365CB430);
}

uint64_t sub_23645A414()
{
  return 0x747865746E6F63;
}

uint64_t sub_23645A42C()
{
  return 0x65736E6F70736572;
}

uint64_t sub_23645A444()
{
  return 0x726F727265;
}

uint64_t sub_23645A458@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23646543C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23645A47C()
{
  sub_23645E8C0();
  return sub_2365B0AD0();
}

uint64_t sub_23645A4A4()
{
  sub_23645E8C0();
  return sub_2365B0ADC();
}

uint64_t AuthenticationModel.FidoChallenge.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4968);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v14 = v1[2];
  v15 = v8;
  v13 = v1[3];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23645E8C0();
  sub_2365B0AAC();
  v17 = v9;
  v16 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4860);
  sub_23645E904(&qword_2563E4868, &qword_2563E4860, (uint64_t)&protocol conformance descriptor for _objcCodable<A>);
  sub_2365B0824();
  if (!v2)
  {
    v10 = v13;
    v11 = v14;
    v17 = v15;
    v16 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4978);
    sub_23645E904(&qword_2563E4980, &qword_2563E4978, (uint64_t)&protocol conformance descriptor for _objcCodable<A>);
    sub_2365B0824();
    v17 = v11;
    v16 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4988);
    sub_23645E904(&qword_2563E4990, &qword_2563E4988, (uint64_t)&protocol conformance descriptor for _objcCodable<A>);
    sub_2365B0824();
    v17 = v10;
    v16 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4898);
    sub_23645E904(&qword_2563E48A0, &qword_2563E4898, (uint64_t)&protocol conformance descriptor for _objcCodable<A>);
    sub_2365B0824();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t AuthenticationModel.FidoChallenge.hashValue.getter()
{
  sub_2365B09E0();
  AuthenticationModel.FidoChallenge.hash(into:)();
  return sub_2365B0A34();
}

void AuthenticationModel.FidoChallenge.init(from:)(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  _QWORD *v16;
  _QWORD v17[2];
  _QWORD *v18;
  id v19;
  id v20;
  char v21;
  id v22;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4998);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23645E8C0();
  sub_2365B0A7C();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4860);
    v21 = 0;
    sub_23645E904(&qword_2563E4878, &qword_2563E4860, (uint64_t)&protocol conformance descriptor for _objcCodable<A>);
    sub_2365B0770();
    v9 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4978);
    v21 = 1;
    sub_23645E904(&qword_2563E49A0, &qword_2563E4978, (uint64_t)&protocol conformance descriptor for _objcCodable<A>);
    v20 = v9;
    sub_2365B0770();
    v18 = a2;
    v10 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4988);
    v21 = 2;
    sub_23645E904(&qword_2563E49A8, &qword_2563E4988, (uint64_t)&protocol conformance descriptor for _objcCodable<A>);
    v19 = v10;
    sub_2365B0770();
    v11 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4898);
    v21 = 3;
    v12 = sub_23645E904(&qword_2563E48B8, &qword_2563E4898, (uint64_t)&protocol conformance descriptor for _objcCodable<A>);
    v17[0] = v11;
    v17[1] = v12;
    v13 = v11;
    sub_2365B0770();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v14 = v22;
    v15 = v22;
    v16 = v18;
    *v18 = v9;
    v16[1] = v10;
    v16[2] = v17[0];
    v16[3] = v14;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

  }
}

void sub_23645AADC(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  AuthenticationModel.FidoChallenge.init(from:)(a1, a2);
}

uint64_t sub_23645AAF0(_QWORD *a1)
{
  return AuthenticationModel.FidoChallenge.encode(to:)(a1);
}

uint64_t sub_23645AB08()
{
  sub_2365B09E0();
  AuthenticationModel.FidoChallenge.hash(into:)();
  return sub_2365B0A34();
}

uint64_t sub_23645AB54()
{
  sub_2365B09E0();
  AuthenticationModel.FidoChallenge.hash(into:)();
  return sub_2365B0A34();
}

uint64_t AuthenticationModel.KeepUsing.username.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AuthenticationModel.KeepUsing.keepUsing.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t AuthenticationModel.KeepUsing.keepUsing.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*AuthenticationModel.KeepUsing.keepUsing.modify())()
{
  return nullsub_1;
}

AppleIDSetup::AuthenticationModel::KeepUsing __swiftcall AuthenticationModel.KeepUsing.init(username:keepUsing:)(Swift::String username, Swift::Bool_optional keepUsing)
{
  uint64_t v2;
  AppleIDSetup::AuthenticationModel::KeepUsing result;

  *(Swift::String *)v2 = username;
  *(Swift::Bool_optional *)(v2 + 16) = keepUsing;
  result.username = username;
  result.keepUsing = keepUsing;
  return result;
}

uint64_t AuthenticationModel.KeepUsing.hash(into:)()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  if (v1 != 2)
    sub_2365B0A04();
  return sub_2365B0A04();
}

uint64_t _s12AppleIDSetup14ValueInterceptC12DropBehaviorO04hashC0Sivg_0()
{
  sub_2365B09E0();
  sub_2365B09F8();
  return sub_2365B0A34();
}

uint64_t sub_23645ACAC()
{
  sub_2365B09E0();
  sub_2365B09F8();
  return sub_2365B0A34();
}

uint64_t sub_23645ACEC()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E6973557065656BLL;
  else
    return 0x656D616E72657375;
}

uint64_t sub_23645AD2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2364655E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23645AD50()
{
  sub_23645E944();
  return sub_2365B0AD0();
}

uint64_t sub_23645AD78()
{
  sub_23645E944();
  return sub_2365B0ADC();
}

uint64_t AuthenticationModel.KeepUsing.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  char v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E49B0);
  v9 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(unsigned __int8 *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23645E944();
  sub_2365B0AAC();
  v12 = 0;
  sub_2365B0800();
  if (!v2)
  {
    v11 = 1;
    sub_2365B07D0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v6, v4);
}

uint64_t AuthenticationModel.KeepUsing.hashValue.getter()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_2365B09E0();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  if (v1 != 2)
    sub_2365B0A04();
  sub_2365B0A04();
  return sub_2365B0A34();
}

uint64_t AuthenticationModel.KeepUsing.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  char v15;
  char v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E49C0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23645E944();
  sub_2365B0A7C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v16 = 0;
  v9 = sub_2365B074C();
  v11 = v10;
  v15 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_2365B071C();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v11;
  *(_BYTE *)(a2 + 16) = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23645B0E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AuthenticationModel.KeepUsing.init(from:)(a1, a2);
}

uint64_t sub_23645B0F8(_QWORD *a1)
{
  return AuthenticationModel.KeepUsing.encode(to:)(a1);
}

uint64_t sub_23645B110()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_2365B09E0();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  if (v1 != 2)
    sub_2365B0A04();
  sub_2365B0A04();
  return sub_2365B0A34();
}

uint64_t sub_23645B1A0()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  if (v1 != 2)
    sub_2365B0A04();
  return sub_2365B0A04();
}

uint64_t sub_23645B218()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_2365B09E0();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  if (v1 != 2)
    sub_2365B0A04();
  sub_2365B0A04();
  return sub_2365B0A34();
}

uint64_t AuthenticationModel.Alert.title.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AuthenticationModel.Alert.title.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*AuthenticationModel.Alert.title.modify())()
{
  return nullsub_1;
}

uint64_t AuthenticationModel.Alert.message.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AuthenticationModel.Alert.message.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*AuthenticationModel.Alert.message.modify())()
{
  return nullsub_1;
}

uint64_t AuthenticationModel.Alert.error.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(v1 + 40);
  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = *(_QWORD *)(v1 + 64);
  v7 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *(_BYTE *)(v1 + 80);
  *(_BYTE *)(a1 + 48) = v8;
  return sub_23645DBF0(v2, v3, v4, v5, v6, v7, v8);
}

__n128 AuthenticationModel.Alert.error.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  __n128 result;
  __n128 v6;
  __int128 v7;

  v6 = (__n128)a1[1];
  v7 = *a1;
  v2 = *((_QWORD *)a1 + 4);
  v3 = *((_QWORD *)a1 + 5);
  v4 = *((_BYTE *)a1 + 48);
  sub_23645DC9C(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_BYTE *)(v1 + 80));
  result = v6;
  *(_OWORD *)(v1 + 32) = v7;
  *(__n128 *)(v1 + 48) = v6;
  *(_QWORD *)(v1 + 64) = v2;
  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 80) = v4;
  return result;
}

uint64_t (*AuthenticationModel.Alert.error.modify())()
{
  return nullsub_1;
}

uint64_t AuthenticationModel.Alert.isPresented.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 81);
}

uint64_t AuthenticationModel.Alert.isPresented.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 81) = result;
  return result;
}

uint64_t (*AuthenticationModel.Alert.isPresented.modify())()
{
  return nullsub_1;
}

uint64_t AuthenticationModel.Alert.hash(into:)()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 80);
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A04();
  if (v1 != 255)
    SetupError.hash(into:)();
  return sub_2365B0A04();
}

uint64_t sub_23645B544()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23645B570 + 4 * byte_2365B24B2[*v0]))(0x656C746974, 0xE500000000000000);
}

uint64_t sub_23645B570()
{
  return 0x6567617373656DLL;
}

uint64_t sub_23645B588()
{
  return 0x726F727265;
}

uint64_t sub_23645B598()
{
  return 0x6E65736572507369;
}

uint64_t sub_23645B5B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2364656E4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23645B5DC()
{
  sub_23645E988();
  return sub_2365B0AD0();
}

uint64_t sub_23645B604()
{
  sub_23645E988();
  return sub_2365B0ADC();
}

uint64_t AuthenticationModel.Alert.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD v17[4];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int v34;
  char v35;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E49C8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 16);
  v24 = *(_QWORD *)(v1 + 24);
  v25 = v7;
  v8 = *(_QWORD *)(v1 + 32);
  v22 = *(_QWORD *)(v1 + 40);
  v23 = v8;
  v9 = *(_QWORD *)(v1 + 48);
  v20 = *(_QWORD *)(v1 + 56);
  v21 = v9;
  v10 = *(_QWORD *)(v1 + 64);
  v18 = *(_QWORD *)(v1 + 72);
  v19 = v10;
  v34 = *(unsigned __int8 *)(v1 + 80);
  v17[3] = *(unsigned __int8 *)(v1 + 81);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23645E988();
  sub_2365B0AAC();
  LOBYTE(v27) = 0;
  v11 = v26;
  sub_2365B0800();
  if (!v11)
  {
    v12 = v20;
    v13 = v21;
    v15 = v22;
    v14 = v23;
    LOBYTE(v27) = 1;
    sub_2365B0800();
    v27 = v14;
    v28 = v15;
    v29 = v13;
    v30 = v12;
    v31 = v19;
    v32 = v18;
    v33 = v34;
    v35 = 2;
    sub_23645E9CC();
    sub_2365B07E8();
    LOBYTE(v27) = 3;
    sub_2365B080C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t AuthenticationModel.Alert.hashValue.getter()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 80);
  sub_2365B09E0();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A04();
  if (v1 != 255)
    SetupError.hash(into:)();
  sub_2365B0A04();
  return sub_2365B0A34();
}

uint64_t AuthenticationModel.Alert.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E49E0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23645E988();
  sub_2365B0A7C();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    v25 = 0;
    v29 = 0;
    v17 = 0;
    v16 = 0;
    v18 = -1;
    v30 = 0;
    v31 = 0;
  }
  else
  {
    LOBYTE(v43) = 0;
    v9 = sub_2365B074C();
    v12 = v11;
    v39 = v9;
    LOBYTE(v43) = 1;
    swift_bridgeObjectRetain();
    v13 = sub_2365B074C();
    v42 = v12;
    v40 = v14;
    v37 = v13;
    v50 = 2;
    sub_23645EA10();
    swift_bridgeObjectRetain();
    v38 = 0;
    sub_2365B0734();
    v33 = a2;
    v15 = v43;
    v17 = v47;
    v16 = v48;
    v18 = v49;
    LOBYTE(v43) = 3;
    v41 = v15;
    v34 = v44;
    v35 = v46;
    v36 = v45;
    sub_23645DBF0(v15, v44, v45, v46, v47, v48, v49);
    v19 = sub_2365B0758();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    LODWORD(v38) = v19 & 1;
    swift_bridgeObjectRetain();
    v20 = v40;
    swift_bridgeObjectRetain();
    v21 = v41;
    v22 = v34;
    v23 = v36;
    sub_23645DBF0(v41, v34, v36, v35, v17, v16, v18);
    v24 = v21;
    v25 = v35;
    sub_23645DC9C(v24, v22, v23, v35, v17, v16, v18);
    v26 = v42;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v27 = v33;
    *v33 = v39;
    v27[1] = v26;
    v28 = v36;
    v27[2] = v37;
    v27[3] = v20;
    v27[4] = v41;
    v27[5] = v22;
    v27[6] = v28;
    v27[7] = v25;
    v27[8] = v17;
    v27[9] = v16;
    *((_BYTE *)v27 + 80) = v18;
    *((_BYTE *)v27 + 81) = v38;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v29 = v41;
    v30 = v22;
    v31 = v28;
  }
  return sub_23645DC9C(v29, v30, v31, v25, v17, v16, v18);
}

uint64_t sub_23645BD18@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return AuthenticationModel.Alert.init(from:)(a1, a2);
}

uint64_t sub_23645BD2C(_QWORD *a1)
{
  return AuthenticationModel.Alert.encode(to:)(a1);
}

uint64_t sub_23645BD4C()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 80);
  sub_2365B09E0();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A04();
  if (v1 != 255)
    SetupError.hash(into:)();
  sub_2365B0A04();
  return sub_2365B0A34();
}

uint64_t sub_23645BE58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v1 = v0;
  v2 = type metadata accessor for IdMSAccount();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E45E0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23644F2B4(v1, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) != 1)
  {
    sub_23646591C((uint64_t)v8, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for IdMSAccount);
    sub_2365B0A04();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_2365B008C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2365AF8D0();
    sub_23644F0B8(&qword_2563E4D80, (uint64_t (*)(uint64_t))MEMORY[0x24BDCCC10], MEMORY[0x24BDCCC28]);
    sub_2365AFFD8();
    __asm { BR              X10 }
  }
  return sub_2365B0A04();
}

uint64_t sub_23645C280()
{
  unint64_t v0;

  v0 = sub_2365B06E0();
  swift_bridgeObjectRelease();
  if (v0 >= 6)
    return 6;
  else
    return v0;
}

uint64_t _s12AppleIDSetup19AuthenticationModelV10BasicLoginV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  int v30;
  int v31;
  char v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  id v37;
  char v38;
  void *v40;
  void *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(unsigned __int8 *)(a1 + 32);
  v7 = *(unsigned __int8 *)(a1 + 33);
  v8 = *(unsigned __int8 *)(a1 + 34);
  v9 = *(unsigned __int8 *)(a1 + 35);
  v11 = *(void **)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a2 + 8);
  v13 = *(_QWORD *)(a2 + 16);
  v14 = *(_QWORD *)(a2 + 24);
  v15 = *(unsigned __int8 *)(a2 + 32);
  v16 = *(unsigned __int8 *)(a2 + 33);
  v17 = *(unsigned __int8 *)(a2 + 34);
  v18 = *(unsigned __int8 *)(a2 + 35);
  v20 = *(void **)(a2 + 40);
  v19 = *(_QWORD *)(a2 + 48);
  if (v3)
  {
    if (!v12)
      return 0;
    if (*(_QWORD *)a1 != *(_QWORD *)a2 || v3 != v12)
    {
      v46 = *(_QWORD *)(a1 + 48);
      v43 = *(unsigned __int8 *)(a1 + 34);
      v44 = *(unsigned __int8 *)(a2 + 35);
      v42 = *(unsigned __int8 *)(a1 + 35);
      v40 = *(void **)(a1 + 40);
      v41 = *(void **)(a2 + 40);
      v21 = *(_QWORD *)(a2 + 48);
      v22 = *(unsigned __int8 *)(a1 + 33);
      v23 = *(unsigned __int8 *)(a2 + 33);
      v24 = *(unsigned __int8 *)(a1 + 32);
      v25 = *(unsigned __int8 *)(a2 + 32);
      v26 = *(_QWORD *)(a1 + 16);
      v27 = *(_QWORD *)(a2 + 16);
      v28 = sub_2365B08CC();
      v13 = v27;
      v4 = v26;
      v15 = v25;
      v6 = v24;
      v16 = v23;
      v7 = v22;
      v19 = v21;
      v11 = v40;
      v20 = v41;
      v9 = v42;
      v8 = v43;
      v18 = v44;
      v10 = v46;
      if ((v28 & 1) == 0)
        return 0;
    }
  }
  else if (v12)
  {
    return 0;
  }
  if (v5)
  {
    if (!v14)
      return 0;
    if (v4 != v13 || v5 != v14)
    {
      v47 = v10;
      v29 = v19;
      v30 = v7;
      v31 = v16;
      v45 = v15;
      v32 = sub_2365B08CC();
      v15 = v45;
      v16 = v31;
      v7 = v30;
      v19 = v29;
      v10 = v47;
      if ((v32 & 1) == 0)
        return 0;
    }
  }
  else if (v14)
  {
    return 0;
  }
  if (v6 == 2)
  {
    if (v15 != 2)
      return 0;
  }
  else if (v15 == 2 || ((((v6 & 1) == 0) ^ v15) & 1) == 0)
  {
    return 0;
  }
  if (v7 == 2)
  {
    if (v16 != 2 || v8 != v17)
      return 0;
  }
  else if (v16 == 2 || ((((v7 & 1) == 0) ^ v16) & 1) == 0 || ((v8 ^ v17) & 1) != 0)
  {
    return 0;
  }
  if (((v9 ^ v18) & 1) == 0)
  {
    if (v11)
    {
      if (!v20)
        return 0;
      v33 = v10;
      v34 = v11;
      v35 = v19;
      sub_236465960(0, &qword_2563E4D88);
      v36 = v20;
      v37 = v34;
      v38 = sub_2365B044C();

      v19 = v35;
      v10 = v33;
      if ((v38 & 1) == 0)
        return 0;
      return sub_23654B5CC(v10, v19);
    }
    if (!v20)
      return sub_23654B5CC(v10, v19);
  }
  return 0;
}

uint64_t _s12AppleIDSetup19AuthenticationModelV9ErrorInfoV2eeoiySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  BOOL v11;
  char v12;
  uint64_t result;
  char v14;
  id v15;
  id v16;
  char v17;

  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = (void *)a1[4];
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = (void *)a2[4];
  if (!v3)
  {
    if (v7)
      return 0;
    goto LABEL_10;
  }
  if (!v7)
    return 0;
  v11 = *a1 == *a2 && v3 == v7;
  if (v11 || (v12 = sub_2365B08CC(), result = 0, (v12 & 1) != 0))
  {
LABEL_10:
    if (v5)
    {
      if (!v9)
        return 0;
      if (v4 != v8 || v5 != v9)
      {
        v14 = sub_2365B08CC();
        result = 0;
        if ((v14 & 1) == 0)
          return result;
      }
    }
    else if (v9)
    {
      return 0;
    }
    if (v6)
    {
      if (v10)
      {
        sub_236465960(0, (unint64_t *)&qword_2563E4D78);
        v15 = v10;
        v16 = v6;
        v17 = sub_2365B044C();

        if ((v17 & 1) != 0)
          return 1;
      }
    }
    else if (!v10)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

BOOL _s12AppleIDSetup19AuthenticationModelV12SecondFactorV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  char v25;
  _BOOL8 result;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  id v47;
  char v48;
  void *v49;
  void *v50;
  id v51;
  id v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  _QWORD v66[5];
  _QWORD v67[4];
  void *v68;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_BYTE *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v10 = *(void **)(a1 + 64);
  v11 = *(void **)(a1 + 72);
  v13 = *(void **)a2;
  v12 = *(_QWORD *)(a2 + 8);
  v14 = *(_QWORD *)(a2 + 16);
  v15 = *(unsigned __int8 *)(a2 + 24);
  v16 = *(_QWORD *)(a2 + 32);
  v17 = *(_QWORD *)(a2 + 40);
  v19 = *(_QWORD *)(a2 + 48);
  v18 = *(_QWORD *)(a2 + 56);
  v21 = *(void **)(a2 + 64);
  v20 = *(void **)(a2 + 72);
  if (*(_QWORD *)a1)
  {
    if (!v13)
      return 0;
    v54 = *(_QWORD *)(a2 + 32);
    v55 = *(_QWORD *)(a2 + 40);
    v56 = *(_QWORD *)(a2 + 48);
    v57 = *(_QWORD *)(a2 + 56);
    v63 = *(void **)(a1 + 72);
    v64 = *(void **)(a2 + 64);
    v58 = *(void **)(a2 + 72);
    v59 = *(_QWORD *)(a1 + 32);
    v60 = *(_QWORD *)(a1 + 40);
    v61 = *(_QWORD *)(a1 + 48);
    v62 = *(_QWORD *)(a1 + 56);
    v22 = *(void **)(a1 + 64);
    sub_236465960(0, &qword_2563E4D88);
    v23 = v13;
    v24 = v2;
    v25 = sub_2365B044C();

    result = 0;
    if ((v25 & 1) == 0)
      return result;
    v10 = v22;
    v8 = v62;
    v11 = v63;
    v6 = v60;
    v9 = v61;
    v20 = v58;
    v7 = v59;
    v21 = v64;
    v19 = v56;
    v18 = v57;
    v16 = v54;
    v17 = v55;
    if (v3 != v12)
      return result;
LABEL_8:
    if ((v5 & 1) != 0)
    {
      if (!v15)
        return 0;
    }
    else
    {
      if (v4 == v14)
        v27 = v15;
      else
        v27 = 1;
      if ((v27 & 1) != 0)
        return 0;
    }
    if (v6 == 1)
    {
      v28 = v7;
      v29 = 1;
      v30 = v9;
      v31 = v8;
      if (v17 == 1)
      {
LABEL_24:
        if (v11)
        {
          if (!v20)
            return 0;
          v50 = v20;
          sub_236465960(0, (unint64_t *)&qword_2563E4D78);
          v51 = v50;
          v52 = v11;
          v53 = sub_2365B044C();

          return (v53 & 1) != 0;
        }
        return !v20;
      }
    }
    else
    {
      v67[0] = v7;
      v67[1] = v6;
      v67[2] = v9;
      v67[3] = v8;
      v68 = v10;
      if (v17 != 1)
      {
        v66[0] = v16;
        v66[1] = v17;
        v66[2] = v19;
        v66[3] = v18;
        v66[4] = v21;
        v42 = v9;
        v43 = v8;
        v44 = v6;
        v45 = v7;
        v46 = v20;
        sub_23644F7E0(v7, v6, v9, v8, v10);
        v47 = v10;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v48 = _s12AppleIDSetup19AuthenticationModelV9ErrorInfoV2eeoiySbAE_AEtFZ_0(v67, v66);
        v49 = v68;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        sub_23644F9E0(v45, v44, v42, v43, v10);
        v20 = v46;
        if ((v48 & 1) == 0)
          return 0;
        goto LABEL_24;
      }
      v28 = v7;
      v30 = v9;
      v29 = v6;
      v32 = v8;
      v65 = v21;
      v33 = v18;
      v34 = v19;
      v35 = v16;
      swift_bridgeObjectRetain();
      v31 = v32;
      swift_bridgeObjectRetain();
      v36 = v10;
      v16 = v35;
      v17 = 1;
      v19 = v34;
      v18 = v33;
      v21 = v65;
    }
    v37 = v19;
    v38 = v16;
    v39 = v18;
    v40 = v21;
    v41 = v17;
    sub_23644F7E0(v16, v17, v19, v18, v21);
    sub_23644F9E0(v28, v29, v30, v31, v10);
    sub_23644F9E0(v38, v41, v37, v39, v40);
    return 0;
  }
  result = 0;
  if (!v13 && v3 == v12)
    goto LABEL_8;
  return result;
}

uint64_t _s12AppleIDSetup19AuthenticationModelV14ServerRedirectV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  char v13;
  id v14;
  id v15;
  char v16;
  id v17;
  id v18;
  char v19;
  id v20;
  id v21;
  char v22;
  id v23;
  id v24;
  char v25;
  void *v27;

  v2 = *(void **)a1;
  v3 = *(void **)(a1 + 8);
  v5 = *(void **)(a1 + 16);
  v4 = *(void **)(a1 + 24);
  v6 = *(void **)a2;
  v7 = *(void **)(a2 + 8);
  v9 = *(void **)(a2 + 16);
  v8 = *(void **)(a2 + 24);
  v10 = *(void **)(a2 + 32);
  if (*(_QWORD *)a1)
  {
    if (!v6)
      return 0;
    v27 = *(void **)(a1 + 32);
    sub_236465960(0, &qword_2563E4D88);
    v11 = v6;
    v12 = v2;
    v13 = sub_2365B044C();

    if ((v13 & 1) == 0)
      return 0;
  }
  else
  {
    v27 = *(void **)(a1 + 32);
    if (v6)
      return 0;
  }
  if (v3)
  {
    if (!v7)
      return 0;
    sub_236465960(0, &qword_2563E4D98);
    v14 = v7;
    v15 = v3;
    v16 = sub_2365B044C();

    if ((v16 & 1) == 0)
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  if (v5)
  {
    if (!v9)
      return 0;
    sub_236465960(0, &qword_2563E4D90);
    v17 = v9;
    v18 = v5;
    v19 = sub_2365B044C();

    if ((v19 & 1) == 0)
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  if (v4)
  {
    if (!v8)
      return 0;
    sub_236465960(0, (unint64_t *)&qword_2563E4D78);
    v20 = v8;
    v21 = v4;
    v22 = sub_2365B044C();

    if ((v22 & 1) == 0)
      return 0;
  }
  else if (v8)
  {
    return 0;
  }
  if (v27)
  {
    if (v10)
    {
      sub_236465960(0, &qword_2563EA390);
      v23 = v10;
      v24 = v27;
      v25 = sub_2365B044C();

      if ((v25 & 1) != 0)
        return 1;
    }
  }
  else if (!v10)
  {
    return 1;
  }
  return 0;
}

uint64_t _s12AppleIDSetup19AuthenticationModelV14NativeRecoveryV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  char v12;
  id v13;
  id v14;
  char v15;
  id v16;
  id v17;
  char v18;
  id v19;
  id v20;
  char v21;

  v2 = *(void **)a1;
  v3 = *(void **)(a1 + 8);
  v5 = *(void **)(a1 + 16);
  v4 = *(void **)(a1 + 24);
  v6 = *(void **)a2;
  v7 = *(void **)(a2 + 8);
  v9 = *(void **)(a2 + 16);
  v8 = *(void **)(a2 + 24);
  if (*(_QWORD *)a1)
  {
    if (!v6)
      return 0;
    sub_236465960(0, &qword_2563E4D88);
    v10 = v6;
    v11 = v2;
    v12 = sub_2365B044C();

    if ((v12 & 1) == 0)
      return 0;
  }
  else if (v6)
  {
    return 0;
  }
  if (v3)
  {
    if (!v7)
      return 0;
    sub_236465960(0, &qword_2563E4DA0);
    v13 = v7;
    v14 = v3;
    v15 = sub_2365B044C();

    if ((v15 & 1) == 0)
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  if (v5)
  {
    if (!v9)
      return 0;
    sub_236465960(0, (unint64_t *)&qword_2563E4D78);
    v16 = v9;
    v17 = v5;
    v18 = sub_2365B044C();

    if ((v18 & 1) == 0)
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  if (v4)
  {
    if (v8)
    {
      sub_236465960(0, &qword_2563EA390);
      v19 = v8;
      v20 = v4;
      v21 = sub_2365B044C();

      if ((v21 & 1) != 0)
        return 1;
    }
  }
  else if (!v8)
  {
    return 1;
  }
  return 0;
}

uint64_t _s12AppleIDSetup19AuthenticationModelV13FidoChallengeV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  char v12;
  id v13;
  id v14;
  char v15;
  id v16;
  id v17;
  char v18;
  id v19;
  id v20;
  char v21;

  v2 = *(void **)a1;
  v3 = *(void **)(a1 + 8);
  v5 = *(void **)(a1 + 16);
  v4 = *(void **)(a1 + 24);
  v6 = *(void **)a2;
  v7 = *(void **)(a2 + 8);
  v9 = *(void **)(a2 + 16);
  v8 = *(void **)(a2 + 24);
  if (*(_QWORD *)a1)
  {
    if (!v6)
      return 0;
    sub_236465960(0, &qword_2563E4D88);
    v10 = v6;
    v11 = v2;
    v12 = sub_2365B044C();

    if ((v12 & 1) == 0)
      return 0;
  }
  else if (v6)
  {
    return 0;
  }
  if (v3)
  {
    if (!v7)
      return 0;
    sub_236465960(0, &qword_2563E4DB0);
    v13 = v7;
    v14 = v3;
    v15 = sub_2365B044C();

    if ((v15 & 1) == 0)
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  if (v5)
  {
    if (!v9)
      return 0;
    sub_236465960(0, &qword_2563E4DA8);
    v16 = v9;
    v17 = v5;
    v18 = sub_2365B044C();

    if ((v18 & 1) == 0)
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  if (v4)
  {
    if (v8)
    {
      sub_236465960(0, (unint64_t *)&qword_2563E4D78);
      v19 = v8;
      v20 = v4;
      v21 = sub_2365B044C();

      if ((v21 & 1) != 0)
        return 1;
    }
  }
  else if (!v8)
  {
    return 1;
  }
  return 0;
}

uint64_t _s12AppleIDSetup19AuthenticationModelV5AlertV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 48);
  v28 = *(_QWORD *)(a1 + 32);
  v29 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v30 = *(unsigned __int8 *)(a1 + 80);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v23 = *(_QWORD *)(a2 + 40);
  v24 = *(_QWORD *)(a2 + 48);
  v25 = *(_QWORD *)(a2 + 56);
  v26 = *(_QWORD *)(a2 + 64);
  v27 = *(_QWORD *)(a2 + 72);
  v11 = *(unsigned __int8 *)(a2 + 80);
  v21 = *(unsigned __int8 *)(a2 + 81);
  v22 = *(unsigned __int8 *)(a1 + 81);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    || (v12 = sub_2365B08CC(), result = 0, (v12 & 1) != 0))
  {
    if (v2 == v8 && v3 == v9 || (v14 = sub_2365B08CC(), result = 0, (v14 & 1) != 0))
    {
      if (v30 == 255)
      {
        v18 = v7;
        v17 = v5;
        v16 = v6;
        v15 = v4;
        if (v11 == 255)
          return v22 ^ v21 ^ 1u;
      }
      else
      {
        v31 = v28;
        v32 = v29;
        v15 = v4;
        v33 = v4;
        v34 = v6;
        v16 = v6;
        v17 = v5;
        v35 = v5;
        v36 = v7;
        v18 = v7;
        v37 = v30;
        if (v11 != 255)
        {
          sub_23645DC04(v28, v29, v4, v6, v5, v7, v30);
          sub_23645DC04(v28, v29, v4, v6, v5, v7, v30);
          static SetupError.== infix(_:_:)((uint64_t)&v31);
          v20 = v19;
          sub_23645DCB0(v31, v32, v33, v34, v35, v36, v37);
          sub_23645DC9C(v28, v29, v4, v6, v5, v7, v30);
          if ((v20 & 1) == 0)
            return 0;
          return v22 ^ v21 ^ 1u;
        }
        sub_23645DC04(v28, v29, v4, v6, v5, v7, v30);
        sub_23645DC04(v28, v29, v4, v6, v5, v7, v30);
        sub_23645DCB0(v28, v29, v4, v6, v5, v7, v30);
      }
      sub_23645DBF0(v10, v23, v24, v25, v26, v27, v11);
      sub_23645DC9C(v28, v29, v15, v16, v17, v18, v30);
      sub_23645DC9C(v10, v23, v24, v25, v26, v27, v11);
      return 0;
    }
  }
  return result;
}

BOOL _s12AppleIDSetup19AuthenticationModelV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unsigned int (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  int *v51;
  int v52;
  int v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  char v57;
  __int128 v58;
  __int128 v59;
  __int128 *v60;
  char v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  char v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v77;
  int v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  char v99;
  _OWORD v100[5];
  char v101;

  v81 = type metadata accessor for AuthenticationModel();
  v4 = MEMORY[0x24BDAC7A8](v81);
  v88 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v87 = (char *)&v80 - v7;
  v8 = MEMORY[0x24BDAC7A8](v6);
  v84 = (char *)&v80 - v9;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v90 = (char *)&v80 - v11;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v92 = (uint64_t)&v80 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v89 = (uint64_t)&v80 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v93 = (uint64_t)&v80 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v91 = (uint64_t)&v80 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v83 = (uint64_t)&v80 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v82 = (uint64_t)&v80 - v22;
  v23 = type metadata accessor for IdMSAccount();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v26 = (uint64_t *)((char *)&v80 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4DB8);
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v80 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E45E0);
  v31 = MEMORY[0x24BDAC7A8](v30);
  v33 = (uint64_t *)((char *)&v80 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  v34 = MEMORY[0x24BDAC7A8](v31);
  v36 = (char *)&v80 - v35;
  MEMORY[0x24BDAC7A8](v34);
  v38 = (char *)&v80 - v37;
  v85 = a1;
  sub_23644F2B4(a1, (uint64_t)&v80 - v37);
  v86 = a2;
  sub_23644F2B4(a2, (uint64_t)v36);
  v39 = (uint64_t)&v29[*(int *)(v27 + 48)];
  sub_23644F2B4((uint64_t)v38, (uint64_t)v29);
  sub_23644F2B4((uint64_t)v36, v39);
  v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  if (v40((uint64_t)v29, 1, v23) == 1)
  {
    sub_236465998((uint64_t)v36, &qword_2563E45E0);
    sub_236465998((uint64_t)v38, &qword_2563E45E0);
    if (v40(v39, 1, v23) == 1)
    {
      sub_236465998((uint64_t)v29, &qword_2563E45E0);
      v41 = v85;
      v42 = v82;
      sub_2364659D4(v85, v82);
      v43 = v86;
      v44 = v83;
      sub_2364659D4(v86, v83);
      v45 = (uint64_t)v88;
      v46 = (uint64_t)v87;
      v47 = (uint64_t)v84;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  sub_23644F2B4((uint64_t)v29, (uint64_t)v33);
  if (v40(v39, 1, v23) == 1)
  {
    sub_236465998((uint64_t)v36, &qword_2563E45E0);
    sub_236465998((uint64_t)v38, &qword_2563E45E0);
    sub_236465A18((uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for IdMSAccount);
LABEL_6:
    sub_236465998((uint64_t)v29, &qword_2563E4DB8);
    v41 = v85;
    v42 = v82;
    sub_2364659D4(v85, v82);
    v43 = v86;
    v44 = v83;
    sub_2364659D4(v86, v83);
    v45 = (uint64_t)v88;
    v46 = (uint64_t)v87;
    v47 = (uint64_t)v84;
    v48 = v92;
    v49 = v93;
LABEL_16:
    sub_236465A18(v44, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
    sub_236465A18(v42, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
    v54 = v91;
    sub_2364659D4(v41, v91);
    sub_2364659D4(v43, v49);
LABEL_17:
    sub_236465A18(v49, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
    sub_236465A18(v54, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
    v68 = v89;
    sub_2364659D4(v41, v89);
    sub_2364659D4(v43, v48);
    goto LABEL_18;
  }
  sub_23646591C(v39, (uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for IdMSAccount);
  v50 = _s12AppleIDSetup11IdMSAccountV2eeoiySbAC_ACtFZ_0(v33, v26);
  sub_236465A18((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for IdMSAccount);
  sub_236465998((uint64_t)v36, &qword_2563E45E0);
  sub_236465998((uint64_t)v38, &qword_2563E45E0);
  sub_236465A18((uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for IdMSAccount);
  sub_236465998((uint64_t)v29, &qword_2563E45E0);
  v41 = v85;
  v42 = v82;
  sub_2364659D4(v85, v82);
  v43 = v86;
  v44 = v83;
  sub_2364659D4(v86, v83);
  v45 = (uint64_t)v88;
  v46 = (uint64_t)v87;
  v47 = (uint64_t)v84;
  v48 = v92;
  v49 = v93;
  if ((v50 & 1) == 0)
    goto LABEL_16;
LABEL_8:
  v51 = (int *)v81;
  v52 = *(unsigned __int8 *)(v42 + *(int *)(v81 + 24));
  sub_236465A18(v42, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  v53 = *(unsigned __int8 *)(v44 + v51[6]);
  sub_236465A18(v44, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  v54 = v91;
  sub_2364659D4(v41, v91);
  sub_2364659D4(v43, v93);
  v55 = v52 == v53;
  v49 = v93;
  v48 = v92;
  if (!v55)
    goto LABEL_17;
  v56 = v54 + v51[7];
  v57 = *(_BYTE *)(v56 + 80);
  v58 = *(_OWORD *)(v56 + 16);
  v100[0] = *(_OWORD *)v56;
  v100[1] = v58;
  v59 = *(_OWORD *)(v56 + 48);
  v100[2] = *(_OWORD *)(v56 + 32);
  v100[3] = v59;
  v100[4] = *(_OWORD *)(v56 + 64);
  v101 = v57;
  v60 = (__int128 *)(v93 + v51[7]);
  v61 = *((_BYTE *)v60 + 80);
  v62 = v60[1];
  v94 = *v60;
  v63 = v60[2];
  v64 = v60[3];
  v95 = v62;
  v96 = v63;
  v65 = v60[4];
  v97 = v64;
  v98 = v65;
  v99 = v61;
  static AuthenticationModel.State.== infix(_:_:)((uint64_t)v100);
  v67 = v66;
  sub_236465A18(v49, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  sub_236465A18(v54, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  v68 = v89;
  sub_2364659D4(v41, v89);
  sub_2364659D4(v43, v48);
  if ((v67 & 1) == 0)
  {
LABEL_18:
    sub_236465A18(v48, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
    sub_236465A18(v68, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
    v75 = (uint64_t)v90;
LABEL_19:
    sub_2364659D4(v41, v75);
    sub_2364659D4(v43, v47);
LABEL_20:
    sub_236465A18(v47, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
    sub_236465A18(v75, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
    sub_2364659D4(v41, v46);
    sub_2364659D4(v43, v45);
LABEL_21:
    sub_236465A18(v46, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
    sub_236465A18(v45, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
    return 0;
  }
  v69 = v51[8];
  v70 = (_QWORD *)(v68 + v69);
  v71 = *(_QWORD *)(v68 + v69 + 8);
  v72 = (_QWORD *)(v48 + v69);
  v73 = v72[1];
  v74 = v48;
  v75 = (uint64_t)v90;
  if (!v71)
  {
    swift_bridgeObjectRetain();
    sub_236465A18(v74, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
    sub_236465A18(v68, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
    if (!v73)
      goto LABEL_24;
LABEL_26:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  if (!v73)
  {
    swift_bridgeObjectRetain();
    sub_236465A18(v92, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
    sub_236465A18(v68, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
    goto LABEL_26;
  }
  if (*v70 == *v72 && v71 == v73)
  {
    swift_bridgeObjectRetain();
    sub_236465A18(v92, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
    sub_236465A18(v68, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
    swift_bridgeObjectRelease();
LABEL_24:
    sub_2364659D4(v41, v75);
    sub_2364659D4(v43, v47);
    goto LABEL_28;
  }
  LODWORD(v93) = sub_2365B08CC();
  swift_bridgeObjectRetain();
  sub_236465A18(v92, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  sub_236465A18(v68, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  swift_bridgeObjectRelease();
  sub_2364659D4(v41, v75);
  sub_2364659D4(v43, v47);
  if ((v93 & 1) == 0)
    goto LABEL_20;
LABEL_28:
  v77 = *(unsigned __int8 *)(v75 + v51[10]);
  sub_236465A18(v75, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  v78 = *(unsigned __int8 *)(v47 + v51[10]);
  sub_236465A18(v47, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  sub_2364659D4(v41, v46);
  sub_2364659D4(v43, v45);
  if (v77 != v78)
    goto LABEL_21;
  v79 = sub_23654B5CC(*(_QWORD *)(v46 + v51[9]), *(_QWORD *)(v45 + v51[9]));
  sub_236465A18(v46, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  sub_236465A18(v45, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  return (v79 & 1) != 0;
}

uint64_t sub_23645DB34(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char v10;
  void *v12;
  void *v13;

  v13 = *(void **)(a1 + 88);
  v2 = *(void **)(a1 + 104);
  v12 = *(void **)(a1 + 96);
  v3 = *(void **)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 144);
  v8 = *(void **)(a1 + 152);
  v9 = *(void **)(a1 + 160);
  v10 = *(_BYTE *)(a1 + 168);
  sub_23644F8BC(*(void **)a1, *(void **)(a1 + 8), *(void **)(a1 + 16), *(void **)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(void **)(a1 + 64), *(void **)(a1 + 72), *(_BYTE *)(a1 + 80));
  sub_23644F8BC(v13, v12, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t sub_23645DBF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7 != -1)
    return sub_23645DC04(a1, a2, a3, a4, a5, a6, a7);
  return a1;
}

uint64_t sub_23645DC04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t result;

  switch(a7)
  {
    case 0:
      swift_bridgeObjectRetain();
      goto LABEL_4;
    case 1:
      goto LABEL_4;
    case 2:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_4:
      result = swift_bridgeObjectRetain();
      break;
    case 3:
      result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_23645DC9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7 != -1)
    return sub_23645DCB0(a1, a2, a3, a4, a5, a6, a7);
  return a1;
}

uint64_t sub_23645DCB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t result;

  switch(a7)
  {
    case 0:
      swift_bridgeObjectRelease();
      goto LABEL_4;
    case 1:
      goto LABEL_4;
    case 2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_4:
      result = swift_bridgeObjectRelease();
      break;
    case 3:
      result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t _s12AppleIDSetup19AuthenticationModelV9KeepUsingV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  char v5;
  uint64_t result;

  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = *(unsigned __int8 *)(a2 + 16);
  v4 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v4 || (v5 = sub_2365B08CC(), result = 0, (v5 & 1) != 0))
  {
    if (v2 == 2)
    {
      if (v3 != 2)
        return 0;
    }
    else if (v3 == 2 || ((((v2 & 1) == 0) ^ v3) & 1) == 0)
    {
      return 0;
    }
    return 1;
  }
  return result;
}

unint64_t sub_23645DDD4()
{
  unint64_t result;

  result = qword_2563E46C0;
  if (!qword_2563E46C0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B4814, &type metadata for AuthenticationModel.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E46C0);
  }
  return result;
}

unint64_t sub_23645DE18()
{
  unint64_t result;

  result = qword_2563E46C8;
  if (!qword_2563E46C8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B47C4, &type metadata for AuthenticationModel.State.LoadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E46C8);
  }
  return result;
}

unint64_t sub_23645DE5C()
{
  unint64_t result;

  result = qword_2563E46D0;
  if (!qword_2563E46D0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B4774, &type metadata for AuthenticationModel.State.AlertCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E46D0);
  }
  return result;
}

unint64_t sub_23645DEA0()
{
  unint64_t result;

  result = qword_2563E46D8;
  if (!qword_2563E46D8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.Alert, &type metadata for AuthenticationModel.Alert);
    atomic_store(result, (unint64_t *)&qword_2563E46D8);
  }
  return result;
}

unint64_t sub_23645DEE4()
{
  unint64_t result;

  result = qword_2563E46E0;
  if (!qword_2563E46E0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B4724, &type metadata for AuthenticationModel.State.KeepUsingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E46E0);
  }
  return result;
}

unint64_t sub_23645DF28()
{
  unint64_t result;

  result = qword_2563E46E8;
  if (!qword_2563E46E8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.KeepUsing, &type metadata for AuthenticationModel.KeepUsing);
    atomic_store(result, (unint64_t *)&qword_2563E46E8);
  }
  return result;
}

unint64_t sub_23645DF6C()
{
  unint64_t result;

  result = qword_2563E46F0;
  if (!qword_2563E46F0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B46D4, &type metadata for AuthenticationModel.State.FidoChallengeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E46F0);
  }
  return result;
}

unint64_t sub_23645DFB0()
{
  unint64_t result;

  result = qword_2563E46F8;
  if (!qword_2563E46F8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.FidoChallenge, &type metadata for AuthenticationModel.FidoChallenge);
    atomic_store(result, (unint64_t *)&qword_2563E46F8);
  }
  return result;
}

unint64_t sub_23645DFF4()
{
  unint64_t result;

  result = qword_2563E4700;
  if (!qword_2563E4700)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B4684, &type metadata for AuthenticationModel.State.NativeRecoveryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4700);
  }
  return result;
}

unint64_t sub_23645E038()
{
  unint64_t result;

  result = qword_2563E4708;
  if (!qword_2563E4708)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.NativeRecovery, &type metadata for AuthenticationModel.NativeRecovery);
    atomic_store(result, (unint64_t *)&qword_2563E4708);
  }
  return result;
}

unint64_t sub_23645E07C()
{
  unint64_t result;

  result = qword_2563E4710;
  if (!qword_2563E4710)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B4634, &type metadata for AuthenticationModel.State.ServerRedirectCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4710);
  }
  return result;
}

unint64_t sub_23645E0C0()
{
  unint64_t result;

  result = qword_2563E4718;
  if (!qword_2563E4718)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.ServerRedirect, &type metadata for AuthenticationModel.ServerRedirect);
    atomic_store(result, (unint64_t *)&qword_2563E4718);
  }
  return result;
}

unint64_t sub_23645E104()
{
  unint64_t result;

  result = qword_2563E4720;
  if (!qword_2563E4720)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B45E4, &type metadata for AuthenticationModel.State.SecondFactorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4720);
  }
  return result;
}

unint64_t sub_23645E148()
{
  unint64_t result;

  result = qword_2563E4728;
  if (!qword_2563E4728)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.SecondFactor, &type metadata for AuthenticationModel.SecondFactor);
    atomic_store(result, (unint64_t *)&qword_2563E4728);
  }
  return result;
}

unint64_t sub_23645E18C()
{
  unint64_t result;

  result = qword_2563E4730;
  if (!qword_2563E4730)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B4594, &type metadata for AuthenticationModel.State.BasicLoginCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4730);
  }
  return result;
}

unint64_t sub_23645E1D0()
{
  unint64_t result;

  result = qword_2563E4738;
  if (!qword_2563E4738)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.BasicLogin, &type metadata for AuthenticationModel.BasicLogin);
    atomic_store(result, (unint64_t *)&qword_2563E4738);
  }
  return result;
}

unint64_t sub_23645E214()
{
  unint64_t result;

  result = qword_2563E4740;
  if (!qword_2563E4740)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B4544, &type metadata for AuthenticationModel.State.SrpCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4740);
  }
  return result;
}

unint64_t sub_23645E258()
{
  unint64_t result;

  result = qword_2563E4748;
  if (!qword_2563E4748)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B44F4, &type metadata for AuthenticationModel.State.InitialCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4748);
  }
  return result;
}

uint64_t sub_23645E29C()
{
  uint64_t v0;
  int v1;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = *(unsigned __int8 *)(v0 + 96);
  if (v1 != 255)
    sub_23645DCB0(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), v1);
  sub_23644F8BC(*(void **)(v0 + 104), *(void **)(v0 + 112), *(void **)(v0 + 120), *(void **)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(void **)(v0 + 168), *(void **)(v0 + 176), *(_BYTE *)(v0 + 184));
  return swift_deallocObject();
}

unint64_t sub_23645E310()
{
  unint64_t result;

  result = qword_2563E47B0;
  if (!qword_2563E47B0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.Alert, &type metadata for AuthenticationModel.Alert);
    atomic_store(result, (unint64_t *)&qword_2563E47B0);
  }
  return result;
}

unint64_t sub_23645E354()
{
  unint64_t result;

  result = qword_2563E47B8;
  if (!qword_2563E47B8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.KeepUsing, &type metadata for AuthenticationModel.KeepUsing);
    atomic_store(result, (unint64_t *)&qword_2563E47B8);
  }
  return result;
}

unint64_t sub_23645E398()
{
  unint64_t result;

  result = qword_2563E47C0;
  if (!qword_2563E47C0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.FidoChallenge, &type metadata for AuthenticationModel.FidoChallenge);
    atomic_store(result, (unint64_t *)&qword_2563E47C0);
  }
  return result;
}

unint64_t sub_23645E3DC()
{
  unint64_t result;

  result = qword_2563E47C8;
  if (!qword_2563E47C8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.NativeRecovery, &type metadata for AuthenticationModel.NativeRecovery);
    atomic_store(result, (unint64_t *)&qword_2563E47C8);
  }
  return result;
}

unint64_t sub_23645E420()
{
  unint64_t result;

  result = qword_2563E47D0;
  if (!qword_2563E47D0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.ServerRedirect, &type metadata for AuthenticationModel.ServerRedirect);
    atomic_store(result, (unint64_t *)&qword_2563E47D0);
  }
  return result;
}

unint64_t sub_23645E464()
{
  unint64_t result;

  result = qword_2563E47D8;
  if (!qword_2563E47D8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.SecondFactor, &type metadata for AuthenticationModel.SecondFactor);
    atomic_store(result, (unint64_t *)&qword_2563E47D8);
  }
  return result;
}

unint64_t sub_23645E4A8()
{
  unint64_t result;

  result = qword_2563E47E0;
  if (!qword_2563E47E0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.BasicLogin, &type metadata for AuthenticationModel.BasicLogin);
    atomic_store(result, (unint64_t *)&qword_2563E47E0);
  }
  return result;
}

unint64_t sub_23645E4EC()
{
  unint64_t result;

  result = qword_2563E4808;
  if (!qword_2563E4808)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B44A4, &type metadata for AuthenticationModel.UserInteraction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4808);
  }
  return result;
}

unint64_t sub_23645E530()
{
  unint64_t result;

  result = qword_2563E4810;
  if (!qword_2563E4810)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B4454, &type metadata for AuthenticationModel.UserInteraction.RequiredCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4810);
  }
  return result;
}

unint64_t sub_23645E574()
{
  unint64_t result;

  result = qword_2563E4818;
  if (!qword_2563E4818)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B4404, &type metadata for AuthenticationModel.UserInteraction.OptionalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4818);
  }
  return result;
}

unint64_t sub_23645E5B8()
{
  unint64_t result;

  result = qword_2563E4820;
  if (!qword_2563E4820)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B43B4, &type metadata for AuthenticationModel.UserInteraction.NeverCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4820);
  }
  return result;
}

uint64_t sub_23645E5FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  char v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v2 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  v20 = *(void **)(a1 + 88);
  v18 = *(void **)(a1 + 104);
  v19 = *(void **)(a1 + 96);
  v16 = *(void **)(a1 + 120);
  v17 = *(void **)(a1 + 112);
  v14 = *(_QWORD *)(a1 + 136);
  v15 = *(void **)(a1 + 128);
  v6 = *(void **)(a1 + 152);
  v13 = *(_QWORD *)(a1 + 144);
  v7 = *(void **)(a1 + 160);
  v8 = *(_BYTE *)(a1 + 168);
  v9 = *(_BYTE *)(a1 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23645DBF0(v12, v11, v2, v3, v4, v5, v9);
  sub_23644F6A4(v20, v19, v18, v17, v16, v15, v14, v13, v6, v7, v8);
  return a1;
}

unint64_t sub_23645E6E4()
{
  unint64_t result;

  result = qword_2563E4858;
  if (!qword_2563E4858)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B4364, &type metadata for AuthenticationModel.BasicLogin.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4858);
  }
  return result;
}

unint64_t sub_23645E728()
{
  unint64_t result;

  result = qword_2563E4888;
  if (!qword_2563E4888)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B4314, &type metadata for AuthenticationModel.SecondFactor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4888);
  }
  return result;
}

unint64_t sub_23645E76C()
{
  unint64_t result;

  result = qword_2563E4890;
  if (!qword_2563E4890)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.ErrorInfo, &type metadata for AuthenticationModel.ErrorInfo);
    atomic_store(result, (unint64_t *)&qword_2563E4890);
  }
  return result;
}

unint64_t sub_23645E7B0()
{
  unint64_t result;

  result = qword_2563E48B0;
  if (!qword_2563E48B0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.ErrorInfo, &type metadata for AuthenticationModel.ErrorInfo);
    atomic_store(result, (unint64_t *)&qword_2563E48B0);
  }
  return result;
}

unint64_t sub_23645E7F4()
{
  unint64_t result;

  result = qword_2563E48C8;
  if (!qword_2563E48C8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B42C4, &type metadata for AuthenticationModel.ErrorInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E48C8);
  }
  return result;
}

unint64_t sub_23645E838()
{
  unint64_t result;

  result = qword_2563E48E0;
  if (!qword_2563E48E0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B4274, &type metadata for AuthenticationModel.ServerRedirect.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E48E0);
  }
  return result;
}

unint64_t sub_23645E87C()
{
  unint64_t result;

  result = qword_2563E4940;
  if (!qword_2563E4940)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B4224, &type metadata for AuthenticationModel.NativeRecovery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4940);
  }
  return result;
}

unint64_t sub_23645E8C0()
{
  unint64_t result;

  result = qword_2563E4970;
  if (!qword_2563E4970)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B41D4, &type metadata for AuthenticationModel.FidoChallenge.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4970);
  }
  return result;
}

uint64_t sub_23645E904(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x23B7F5164](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23645E944()
{
  unint64_t result;

  result = qword_2563E49B8;
  if (!qword_2563E49B8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B4184, &type metadata for AuthenticationModel.KeepUsing.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E49B8);
  }
  return result;
}

unint64_t sub_23645E988()
{
  unint64_t result;

  result = qword_2563E49D0;
  if (!qword_2563E49D0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B4134, &type metadata for AuthenticationModel.Alert.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E49D0);
  }
  return result;
}

unint64_t sub_23645E9CC()
{
  unint64_t result;

  result = qword_2563E49D8;
  if (!qword_2563E49D8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for SetupError, &type metadata for SetupError);
    atomic_store(result, (unint64_t *)&qword_2563E49D8);
  }
  return result;
}

unint64_t sub_23645EA10()
{
  unint64_t result;

  result = qword_2563E49E8;
  if (!qword_2563E49E8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for SetupError, &type metadata for SetupError);
    atomic_store(result, (unint64_t *)&qword_2563E49E8);
  }
  return result;
}

uint64_t sub_23645EA54(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_23644F0B8(&qword_2563E49F0, (uint64_t (*)(uint64_t))type metadata accessor for AuthenticationModel, (uint64_t)&protocol conformance descriptor for AuthenticationModel);
  a1[2] = sub_23644F0B8(&qword_2563E49F8, (uint64_t (*)(uint64_t))type metadata accessor for AuthenticationModel, (uint64_t)&protocol conformance descriptor for AuthenticationModel);
  result = sub_23644F0B8(&qword_2563E4A00, (uint64_t (*)(uint64_t))type metadata accessor for AuthenticationModel, (uint64_t)&protocol conformance descriptor for AuthenticationModel);
  a1[3] = result;
  return result;
}

uint64_t sub_23645EACC()
{
  return sub_23644F0B8(&qword_2563E4A08, (uint64_t (*)(uint64_t))type metadata accessor for AuthenticationModel, (uint64_t)&protocol conformance descriptor for AuthenticationModel);
}

uint64_t sub_23645EAF8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_23645EB14(a1, a2, a3, (uint64_t (*)(void))sub_236451428, (uint64_t (*)(void))sub_236450DF4, (uint64_t (*)(void))sub_23645EB58);
}

uint64_t sub_23645EB14(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t result;

  a1[1] = a4();
  a1[2] = a5();
  result = a6();
  a1[3] = result;
  return result;
}

unint64_t sub_23645EB58()
{
  unint64_t result;

  result = qword_2563E4A10;
  if (!qword_2563E4A10)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.State, &type metadata for AuthenticationModel.State);
    atomic_store(result, (unint64_t *)&qword_2563E4A10);
  }
  return result;
}

unint64_t sub_23645EBA0()
{
  unint64_t result;

  result = qword_2563E4A18;
  if (!qword_2563E4A18)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.State, &type metadata for AuthenticationModel.State);
    atomic_store(result, (unint64_t *)&qword_2563E4A18);
  }
  return result;
}

unint64_t sub_23645EBE8()
{
  unint64_t result;

  result = qword_2563E4A20;
  if (!qword_2563E4A20)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.UserInteraction, &type metadata for AuthenticationModel.UserInteraction);
    atomic_store(result, (unint64_t *)&qword_2563E4A20);
  }
  return result;
}

uint64_t sub_23645EC2C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_23645EB14(a1, a2, a3, (uint64_t (*)(void))sub_2364513E4, (uint64_t (*)(void))sub_236450DB0, (uint64_t (*)(void))sub_23645EC48);
}

unint64_t sub_23645EC48()
{
  unint64_t result;

  result = qword_2563E4A28;
  if (!qword_2563E4A28)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.UserInteraction, &type metadata for AuthenticationModel.UserInteraction);
    atomic_store(result, (unint64_t *)&qword_2563E4A28);
  }
  return result;
}

uint64_t sub_23645EC8C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_23645EB14(a1, a2, a3, (uint64_t (*)(void))sub_23645E4A8, (uint64_t (*)(void))sub_23645E1D0, (uint64_t (*)(void))sub_23645ECA8);
}

unint64_t sub_23645ECA8()
{
  unint64_t result;

  result = qword_2563E4A30;
  if (!qword_2563E4A30)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.BasicLogin, &type metadata for AuthenticationModel.BasicLogin);
    atomic_store(result, (unint64_t *)&qword_2563E4A30);
  }
  return result;
}

unint64_t sub_23645ECF0()
{
  unint64_t result;

  result = qword_2563E4A38;
  if (!qword_2563E4A38)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.BasicLogin, &type metadata for AuthenticationModel.BasicLogin);
    atomic_store(result, (unint64_t *)&qword_2563E4A38);
  }
  return result;
}

uint64_t sub_23645ED34(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_23645EB14(a1, a2, a3, (uint64_t (*)(void))sub_23645E464, (uint64_t (*)(void))sub_23645E148, (uint64_t (*)(void))sub_23645ED50);
}

unint64_t sub_23645ED50()
{
  unint64_t result;

  result = qword_2563E4A40;
  if (!qword_2563E4A40)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.SecondFactor, &type metadata for AuthenticationModel.SecondFactor);
    atomic_store(result, (unint64_t *)&qword_2563E4A40);
  }
  return result;
}

unint64_t sub_23645ED98()
{
  unint64_t result;

  result = qword_2563E4A48;
  if (!qword_2563E4A48)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.SecondFactor, &type metadata for AuthenticationModel.SecondFactor);
    atomic_store(result, (unint64_t *)&qword_2563E4A48);
  }
  return result;
}

uint64_t sub_23645EDDC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_23645EB14(a1, a2, a3, (uint64_t (*)(void))sub_23645E7B0, (uint64_t (*)(void))sub_23645E76C, (uint64_t (*)(void))sub_23645EDF8);
}

unint64_t sub_23645EDF8()
{
  unint64_t result;

  result = qword_2563E4A50;
  if (!qword_2563E4A50)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.ErrorInfo, &type metadata for AuthenticationModel.ErrorInfo);
    atomic_store(result, (unint64_t *)&qword_2563E4A50);
  }
  return result;
}

unint64_t sub_23645EE40()
{
  unint64_t result;

  result = qword_2563E4A58;
  if (!qword_2563E4A58)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.ErrorInfo, &type metadata for AuthenticationModel.ErrorInfo);
    atomic_store(result, (unint64_t *)&qword_2563E4A58);
  }
  return result;
}

uint64_t sub_23645EE84(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_23645EB14(a1, a2, a3, (uint64_t (*)(void))sub_23645E420, (uint64_t (*)(void))sub_23645E0C0, (uint64_t (*)(void))sub_23645EEA0);
}

unint64_t sub_23645EEA0()
{
  unint64_t result;

  result = qword_2563E4A60;
  if (!qword_2563E4A60)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.ServerRedirect, &type metadata for AuthenticationModel.ServerRedirect);
    atomic_store(result, (unint64_t *)&qword_2563E4A60);
  }
  return result;
}

unint64_t sub_23645EEE8()
{
  unint64_t result;

  result = qword_2563E4A68;
  if (!qword_2563E4A68)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.ServerRedirect, &type metadata for AuthenticationModel.ServerRedirect);
    atomic_store(result, (unint64_t *)&qword_2563E4A68);
  }
  return result;
}

uint64_t sub_23645EF2C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_23645EB14(a1, a2, a3, (uint64_t (*)(void))sub_23645E3DC, (uint64_t (*)(void))sub_23645E038, (uint64_t (*)(void))sub_23645EF48);
}

unint64_t sub_23645EF48()
{
  unint64_t result;

  result = qword_2563E4A70;
  if (!qword_2563E4A70)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.NativeRecovery, &type metadata for AuthenticationModel.NativeRecovery);
    atomic_store(result, (unint64_t *)&qword_2563E4A70);
  }
  return result;
}

unint64_t sub_23645EF90()
{
  unint64_t result;

  result = qword_2563E4A78;
  if (!qword_2563E4A78)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.NativeRecovery, &type metadata for AuthenticationModel.NativeRecovery);
    atomic_store(result, (unint64_t *)&qword_2563E4A78);
  }
  return result;
}

uint64_t sub_23645EFD4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_23645EB14(a1, a2, a3, (uint64_t (*)(void))sub_23645E398, (uint64_t (*)(void))sub_23645DFB0, (uint64_t (*)(void))sub_23645EFF0);
}

unint64_t sub_23645EFF0()
{
  unint64_t result;

  result = qword_2563E4A80;
  if (!qword_2563E4A80)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.FidoChallenge, &type metadata for AuthenticationModel.FidoChallenge);
    atomic_store(result, (unint64_t *)&qword_2563E4A80);
  }
  return result;
}

unint64_t sub_23645F038()
{
  unint64_t result;

  result = qword_2563E4A88;
  if (!qword_2563E4A88)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.FidoChallenge, &type metadata for AuthenticationModel.FidoChallenge);
    atomic_store(result, (unint64_t *)&qword_2563E4A88);
  }
  return result;
}

uint64_t sub_23645F07C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_23645EB14(a1, a2, a3, (uint64_t (*)(void))sub_23645E354, (uint64_t (*)(void))sub_23645DF28, (uint64_t (*)(void))sub_23645F098);
}

unint64_t sub_23645F098()
{
  unint64_t result;

  result = qword_2563E4A90;
  if (!qword_2563E4A90)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.KeepUsing, &type metadata for AuthenticationModel.KeepUsing);
    atomic_store(result, (unint64_t *)&qword_2563E4A90);
  }
  return result;
}

unint64_t sub_23645F0E0()
{
  unint64_t result;

  result = qword_2563E4A98;
  if (!qword_2563E4A98)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.KeepUsing, &type metadata for AuthenticationModel.KeepUsing);
    atomic_store(result, (unint64_t *)&qword_2563E4A98);
  }
  return result;
}

uint64_t sub_23645F124(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_23645EB14(a1, a2, a3, (uint64_t (*)(void))sub_23645E310, (uint64_t (*)(void))sub_23645DEA0, (uint64_t (*)(void))sub_23645F140);
}

unint64_t sub_23645F140()
{
  unint64_t result;

  result = qword_2563E4AA0;
  if (!qword_2563E4AA0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.Alert, &type metadata for AuthenticationModel.Alert);
    atomic_store(result, (unint64_t *)&qword_2563E4AA0);
  }
  return result;
}

unint64_t sub_23645F188()
{
  unint64_t result;

  result = qword_2563E4AA8;
  if (!qword_2563E4AA8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticationModel.Alert, &type metadata for AuthenticationModel.Alert);
    atomic_store(result, (unint64_t *)&qword_2563E4AA8);
  }
  return result;
}

id sub_23645F1E4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  *a2 = v2;
  return v2;
}

void sub_23645F1F0(id *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *(void **)(a2 + 40);
  v5 = *a1;

  *(_QWORD *)(a2 + 40) = v3;
}

id sub_23645F228@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *a2 = v2;
  return v2;
}

void sub_23645F234(id *a1, void **a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *a2;
  v5 = *a1;

  *a2 = v3;
}

id sub_23645F26C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  *a2 = v2;
  return v2;
}

void sub_23645F278(id *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *(void **)(a2 + 72);
  v5 = *a1;

  *(_QWORD *)(a2 + 72) = v3;
}

id sub_23645F2B0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  *a2 = v2;
  return v2;
}

void sub_23645F2BC(id *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *(void **)(a2 + 32);
  v5 = *a1;

  *(_QWORD *)(a2 + 32) = v3;
}

id sub_23645F2F4@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *a2 = v2;
  return v2;
}

void sub_23645F300(id *a1, void **a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *a2;
  v5 = *a1;

  *a2 = v3;
}

id sub_23645F338@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  *a2 = v2;
  return v2;
}

void sub_23645F344(id *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *(void **)(a2 + 8);
  v5 = *a1;

  *(_QWORD *)(a2 + 8) = v3;
}

id sub_23645F37C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  *a2 = v2;
  return v2;
}

void sub_23645F388(id *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *(void **)(a2 + 16);
  v5 = *a1;

  *(_QWORD *)(a2 + 16) = v3;
}

id sub_23645F3C0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  *a2 = v2;
  return v2;
}

void sub_23645F3CC(id *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *(void **)(a2 + 24);
  v5 = *a1;

  *(_QWORD *)(a2 + 24) = v3;
}

void sub_23645F404(id *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *(void **)(a2 + 32);
  v5 = *a1;

  *(_QWORD *)(a2 + 32) = v3;
}

id sub_23645F43C@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *a2 = v2;
  return v2;
}

void sub_23645F448(id *a1, void **a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *a2;
  v5 = *a1;

  *a2 = v3;
}

id sub_23645F480@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  *a2 = v2;
  return v2;
}

void sub_23645F48C(id *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *(void **)(a2 + 8);
  v5 = *a1;

  *(_QWORD *)(a2 + 8) = v3;
}

id sub_23645F4C4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  *a2 = v2;
  return v2;
}

void sub_23645F4D0(id *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *(void **)(a2 + 16);
  v5 = *a1;

  *(_QWORD *)(a2 + 16) = v3;
}

id sub_23645F508@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  *a2 = v2;
  return v2;
}

void sub_23645F514(id *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *(void **)(a2 + 24);
  v5 = *a1;

  *(_QWORD *)(a2 + 24) = v3;
}

void sub_23645F54C(id *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *(void **)(a2 + 24);
  v5 = *a1;

  *(_QWORD *)(a2 + 24) = v3;
}

uint64_t *initializeBufferWithCopyOfBuffer for AuthenticationModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t *, _QWORD, uint64_t, int *);
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  char *v41;
  int *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void (*v66)(char *, char *, uint64_t);
  uint64_t v67;
  void *v68;
  char *v69;
  uint64_t v70;
  void *v71;
  char *v72;
  char v73;
  uint64_t v74;
  uint64_t *v75;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    v11 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = (int *)type metadata accessor for IdMSAccount();
    v8 = *((_QWORD *)v7 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E45E0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      v13 = a2[3];
      a1[2] = a2[2];
      a1[3] = v13;
      v14 = a2[5];
      a1[4] = a2[4];
      a1[5] = v14;
      v74 = v8;
      v15 = a2[7];
      a1[6] = a2[6];
      a1[7] = v15;
      v16 = a2[9];
      a1[8] = a2[8];
      a1[9] = v16;
      v17 = v7[5];
      v69 = (char *)a2 + v17;
      v72 = (char *)a1 + v17;
      v18 = sub_2365AF8D0();
      v66 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v18 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v66(v72, v69, v18);
      v19 = v7[6];
      v20 = (char *)a1 + v19;
      v21 = (char *)a2 + v19;
      v22 = *(_QWORD *)v21;
      v23 = *((_QWORD *)v21 + 1);
      v24 = *((_QWORD *)v21 + 2);
      v25 = *((_QWORD *)v21 + 4);
      v26 = *((_QWORD *)v21 + 5);
      v64 = *((_QWORD *)v21 + 6);
      v67 = *((_QWORD *)v21 + 3);
      v63 = *((_QWORD *)v21 + 7);
      v70 = *((_QWORD *)v21 + 8);
      LOBYTE(v72) = v21[72];
      sub_23645F8F8(*(_QWORD *)v21, v23, v24, v67, v25, v26, v64, v63, v70, (char)v72);
      *(_QWORD *)v20 = v22;
      *((_QWORD *)v20 + 1) = v23;
      *((_QWORD *)v20 + 2) = v24;
      *((_QWORD *)v20 + 3) = v67;
      *((_QWORD *)v20 + 4) = v25;
      *((_QWORD *)v20 + 5) = v26;
      *((_QWORD *)v20 + 6) = v64;
      *((_QWORD *)v20 + 7) = v63;
      *((_QWORD *)v20 + 8) = v70;
      v20[72] = (char)v72;
      *(uint64_t *)((char *)a1 + v7[7]) = *(uint64_t *)((char *)a2 + v7[7]);
      v27 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v74 + 56);
      swift_bridgeObjectRetain();
      v27(a1, 0, 1, v7);
    }
    v28 = a3[5];
    v29 = (uint64_t *)((char *)a1 + v28);
    v30 = (uint64_t *)((char *)a2 + v28);
    v31 = v30[1];
    if (v31)
    {
      *v29 = *v30;
      v29[1] = v31;
      v32 = v30[3];
      v29[2] = v30[2];
      v29[3] = v32;
      v33 = v30[5];
      v29[4] = v30[4];
      v29[5] = v33;
      v34 = v30[7];
      v29[6] = v30[6];
      v29[7] = v34;
      v35 = v30[9];
      v29[8] = v30[8];
      v29[9] = v35;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v36 = *((_OWORD *)v30 + 3);
      *((_OWORD *)v29 + 2) = *((_OWORD *)v30 + 2);
      *((_OWORD *)v29 + 3) = v36;
      *((_OWORD *)v29 + 4) = *((_OWORD *)v30 + 4);
      v37 = *((_OWORD *)v30 + 1);
      *(_OWORD *)v29 = *(_OWORD *)v30;
      *((_OWORD *)v29 + 1) = v37;
    }
    v38 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    v39 = a2;
    v40 = (char *)a1 + v38;
    v41 = (char *)v39 + v38;
    v42 = a3;
    v44 = *(void **)((char *)v39 + v38);
    v43 = *(void **)((char *)v39 + v38 + 8);
    v45 = *(void **)((char *)v39 + v38 + 16);
    v46 = *(void **)((char *)v39 + v38 + 24);
    v47 = a1;
    v48 = (void *)*((_QWORD *)v41 + 4);
    v49 = (void *)*((_QWORD *)v41 + 5);
    v51 = *((_QWORD *)v41 + 6);
    v50 = *((_QWORD *)v41 + 7);
    v75 = v47;
    v65 = v43;
    v68 = (void *)*((_QWORD *)v41 + 8);
    v71 = (void *)*((_QWORD *)v41 + 9);
    v73 = v41[80];
    sub_23644F6A4(v44, v43, v45, v46, v48, v49, v51, v50, v68, v71, v73);
    *(_QWORD *)v40 = v44;
    *((_QWORD *)v40 + 1) = v65;
    *((_QWORD *)v40 + 2) = v45;
    *((_QWORD *)v40 + 3) = v46;
    *((_QWORD *)v40 + 4) = v48;
    *((_QWORD *)v40 + 5) = v49;
    *((_QWORD *)v40 + 6) = v51;
    *((_QWORD *)v40 + 7) = v50;
    v11 = v75;
    *((_QWORD *)v40 + 8) = v68;
    *((_QWORD *)v40 + 9) = v71;
    v40[80] = v73;
    v52 = v42[8];
    v53 = v42[9];
    v54 = (uint64_t *)((char *)v75 + v52);
    v55 = (uint64_t *)((char *)v39 + v52);
    v56 = v55[1];
    *v54 = *v55;
    v54[1] = v56;
    *(uint64_t *)((char *)v75 + v53) = *(uint64_t *)((char *)v39 + v53);
    v57 = v42[11];
    *((_BYTE *)v75 + v42[10]) = *((_BYTE *)v39 + v42[10]);
    v58 = (uint64_t *)((char *)v75 + v57);
    v59 = (char *)v39 + v57;
    v60 = *(uint64_t *)((char *)v39 + v57);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v60)
    {
      v61 = *((_QWORD *)v59 + 1);
      *v58 = v60;
      v58[1] = v61;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v58 = *(_OWORD *)v59;
    }
  }
  return v11;
}

uint64_t sub_23645F8F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t result;

  if (a10 != 2)
  {
    if (a10 != 1)
    {
      if (a10)
        return result;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

uint64_t destroy for AuthenticationModel(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = type metadata accessor for IdMSAccount();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = a1 + *(int *)(v4 + 20);
    v6 = sub_2365AF8D0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
    v7 = a1 + *(int *)(v4 + 24);
    sub_23645FAF8(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), *(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 40), *(_QWORD *)(v7 + 48), *(_QWORD *)(v7 + 56), *(_QWORD *)(v7 + 64), *(_BYTE *)(v7 + 72));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + a2[5] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v8 = a1 + a2[7];
  sub_23644F8BC(*(void **)v8, *(void **)(v8 + 8), *(void **)(v8 + 16), *(void **)(v8 + 24), *(_QWORD *)(v8 + 32), *(_QWORD *)(v8 + 40), *(_QWORD *)(v8 + 48), *(_QWORD *)(v8 + 56), *(void **)(v8 + 64), *(void **)(v8 + 72), *(_BYTE *)(v8 + 80));
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + a2[11]))
    return swift_release();
  return result;
}

uint64_t sub_23645FAF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t result;

  result = a2;
  if (a10 != 2)
  {
    if (a10 != 1)
    {
      if (a10)
        return result;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for AuthenticationModel(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  void *v62;
  char *v63;
  void *v64;
  uint64_t v65;
  char v66;
  char *v67;
  int *v68;
  _QWORD *v69;

  v6 = (int *)type metadata accessor for IdMSAccount();
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E45E0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v65 = v7;
    v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    v10 = a2[3];
    a1[2] = a2[2];
    a1[3] = v10;
    v11 = a2[5];
    a1[4] = a2[4];
    a1[5] = v11;
    v12 = a2[7];
    a1[6] = a2[6];
    a1[7] = v12;
    v13 = a2[9];
    a1[8] = a2[8];
    a1[9] = v13;
    v14 = v6[5];
    v67 = (char *)a1 + v14;
    v63 = (char *)a2 + v14;
    v15 = sub_2365AF8D0();
    v60 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v60(v67, v63, v15);
    v16 = v6[6];
    v68 = a3;
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = *(_QWORD *)v18;
    v20 = *((_QWORD *)v18 + 1);
    v21 = *((_QWORD *)v18 + 2);
    v22 = *((_QWORD *)v18 + 3);
    v23 = *((_QWORD *)v18 + 4);
    v24 = *((_QWORD *)v18 + 5);
    v57 = *((_QWORD *)v18 + 7);
    v58 = *((_QWORD *)v18 + 6);
    v61 = *((_QWORD *)v18 + 8);
    LOBYTE(v63) = v18[72];
    sub_23645F8F8(*(_QWORD *)v18, v20, v21, v22, v23, v24, v58, v57, v61, (char)v63);
    *(_QWORD *)v17 = v19;
    *((_QWORD *)v17 + 1) = v20;
    *((_QWORD *)v17 + 2) = v21;
    *((_QWORD *)v17 + 3) = v22;
    *((_QWORD *)v17 + 4) = v23;
    *((_QWORD *)v17 + 5) = v24;
    *((_QWORD *)v17 + 6) = v58;
    *((_QWORD *)v17 + 7) = v57;
    *((_QWORD *)v17 + 8) = v61;
    v17[72] = (char)v63;
    *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
    v25 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v65 + 56);
    swift_bridgeObjectRetain();
    v25(a1, 0, 1, v6);
    a3 = v68;
  }
  v26 = a3[5];
  v27 = (_QWORD *)((char *)a1 + v26);
  v28 = (_QWORD *)((char *)a2 + v26);
  v29 = v28[1];
  if (v29)
  {
    *v27 = *v28;
    v27[1] = v29;
    v30 = v28[3];
    v27[2] = v28[2];
    v27[3] = v30;
    v31 = v28[5];
    v27[4] = v28[4];
    v27[5] = v31;
    v32 = v28[7];
    v27[6] = v28[6];
    v27[7] = v32;
    v33 = v28[9];
    v27[8] = v28[8];
    v27[9] = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v34 = *((_OWORD *)v28 + 3);
    *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
    *((_OWORD *)v27 + 3) = v34;
    *((_OWORD *)v27 + 4) = *((_OWORD *)v28 + 4);
    v35 = *((_OWORD *)v28 + 1);
    *(_OWORD *)v27 = *(_OWORD *)v28;
    *((_OWORD *)v27 + 1) = v35;
  }
  v36 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v69 = a1;
  v37 = (char *)a1 + v36;
  v38 = *(void **)((char *)a2 + v36 + 8);
  v39 = *(void **)((char *)a2 + v36 + 16);
  v40 = *(void **)((char *)a2 + v36 + 24);
  v41 = *(void **)((char *)a2 + v36 + 32);
  v42 = *(void **)((char *)a2 + v36 + 40);
  v43 = a3;
  v45 = *(_QWORD *)((char *)a2 + v36 + 48);
  v44 = *(_QWORD *)((char *)a2 + v36 + 56);
  v59 = *(void **)((char *)a2 + v36);
  v62 = *(void **)((char *)a2 + v36 + 64);
  v64 = *(void **)((char *)a2 + v36 + 72);
  v66 = *((_BYTE *)a2 + v36 + 80);
  sub_23644F6A4(v59, v38, v39, v40, v41, v42, v45, v44, v62, v64, v66);
  *(_QWORD *)v37 = v59;
  *((_QWORD *)v37 + 1) = v38;
  *((_QWORD *)v37 + 2) = v39;
  *((_QWORD *)v37 + 3) = v40;
  *((_QWORD *)v37 + 4) = v41;
  *((_QWORD *)v37 + 5) = v42;
  *((_QWORD *)v37 + 6) = v45;
  *((_QWORD *)v37 + 7) = v44;
  *((_QWORD *)v37 + 8) = v62;
  *((_QWORD *)v37 + 9) = v64;
  v37[80] = v66;
  v46 = v43[8];
  v47 = v43[9];
  v48 = (_QWORD *)((char *)v69 + v46);
  v49 = (_QWORD *)((char *)a2 + v46);
  v50 = v49[1];
  *v48 = *v49;
  v48[1] = v50;
  *(_QWORD *)((char *)v69 + v47) = *(_QWORD *)((char *)a2 + v47);
  v51 = v43[11];
  *((_BYTE *)v69 + v43[10]) = *((_BYTE *)a2 + v43[10]);
  v52 = (_QWORD *)((char *)v69 + v51);
  v53 = (_QWORD *)((char *)a2 + v51);
  v54 = *v53;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v54)
  {
    v55 = v53[1];
    *v52 = v54;
    v52[1] = v55;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v52 = *(_OWORD *)v53;
  }
  return v69;
}

_QWORD *assignWithCopy for AuthenticationModel(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, int *);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  char *v60;
  id v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  char v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, char *, uint64_t);
  uint64_t v96;
  uint64_t v97;
  void *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  _QWORD *v103;
  char *v104;
  char v105;
  _QWORD *v106;
  int *v107;

  v6 = (int *)type metadata accessor for IdMSAccount();
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  v107 = a3;
  if (v9)
  {
    if (!v10)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      a1[6] = a2[6];
      a1[7] = a2[7];
      a1[8] = a2[8];
      a1[9] = a2[9];
      v11 = v6[5];
      v104 = (char *)a1 + v11;
      v99 = (char *)a2 + v11;
      v12 = sub_2365AF8D0();
      v95 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v95(v104, v99, v12);
      v13 = v6[6];
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v16 = *((_QWORD *)v15 + 1);
      v17 = *((_QWORD *)v15 + 2);
      v18 = *((_QWORD *)v15 + 3);
      v19 = *((_QWORD *)v15 + 4);
      v20 = *((_QWORD *)v15 + 5);
      v93 = *((_QWORD *)v15 + 6);
      v96 = *(_QWORD *)v15;
      v92 = *((_QWORD *)v15 + 7);
      v100 = *((_QWORD *)v15 + 8);
      LOBYTE(v104) = v15[72];
      sub_23645F8F8(*(_QWORD *)v15, v16, v17, v18, v19, v20, v93, v92, v100, (char)v104);
      *(_QWORD *)v14 = v96;
      *((_QWORD *)v14 + 1) = v16;
      *((_QWORD *)v14 + 2) = v17;
      *((_QWORD *)v14 + 3) = v18;
      a3 = v107;
      *((_QWORD *)v14 + 4) = v19;
      *((_QWORD *)v14 + 5) = v20;
      *((_QWORD *)v14 + 6) = v93;
      *((_QWORD *)v14 + 7) = v92;
      *((_QWORD *)v14 + 8) = v100;
      v14[72] = (char)v104;
      *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
      v21 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v7 + 56);
      swift_bridgeObjectRetain();
      v21(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_236465A18((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for IdMSAccount);
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E45E0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v31 = v6[5];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = sub_2365AF8D0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v32, v33, v34);
  v35 = v6[6];
  v36 = (char *)a1 + v35;
  v37 = (char *)a2 + v35;
  v38 = *(_QWORD *)v37;
  v39 = *((_QWORD *)v37 + 1);
  v40 = *((_QWORD *)v37 + 2);
  v41 = *((_QWORD *)v37 + 3);
  v42 = *((_QWORD *)v37 + 4);
  v43 = *((_QWORD *)v37 + 5);
  v94 = *((_QWORD *)v37 + 7);
  v97 = *((_QWORD *)v37 + 6);
  v101 = *((_QWORD *)v37 + 8);
  v105 = v37[72];
  sub_23645F8F8(*(_QWORD *)v37, v39, v40, v41, v42, v43, v97, v94, v101, v105);
  v44 = *(_QWORD *)v36;
  v45 = *((_QWORD *)v36 + 1);
  v46 = *((_QWORD *)v36 + 2);
  v47 = *((_QWORD *)v36 + 3);
  v48 = *((_QWORD *)v36 + 4);
  v49 = *((_QWORD *)v36 + 5);
  v50 = *((_QWORD *)v36 + 6);
  v51 = *((_QWORD *)v36 + 7);
  v52 = *((_QWORD *)v36 + 8);
  v53 = v36[72];
  *(_QWORD *)v36 = v38;
  *((_QWORD *)v36 + 1) = v39;
  *((_QWORD *)v36 + 2) = v40;
  *((_QWORD *)v36 + 3) = v41;
  a3 = v107;
  *((_QWORD *)v36 + 4) = v42;
  *((_QWORD *)v36 + 5) = v43;
  *((_QWORD *)v36 + 6) = v97;
  *((_QWORD *)v36 + 7) = v94;
  *((_QWORD *)v36 + 8) = v101;
  v36[72] = v105;
  sub_23645FAF8(v44, v45, v46, v47, v48, v49, v50, v51, v52, v53);
  *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_7:
  v23 = a3[5];
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  v26 = *(_QWORD *)((char *)a1 + v23 + 8);
  v27 = *(_QWORD *)((char *)a2 + v23 + 8);
  if (v26)
  {
    if (v27)
    {
      *v24 = *v25;
      v24[1] = v25[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v24[2] = v25[2];
      v24[3] = v25[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v24[4] = v25[4];
      v24[5] = v25[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v24[6] = v25[6];
      v24[7] = v25[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v24[8] = v25[8];
      v24[9] = v25[9];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_236460568((uint64_t)v24);
      *(_OWORD *)v24 = *(_OWORD *)v25;
      v28 = *((_OWORD *)v25 + 4);
      v30 = *((_OWORD *)v25 + 1);
      v29 = *((_OWORD *)v25 + 2);
      *((_OWORD *)v24 + 3) = *((_OWORD *)v25 + 3);
      *((_OWORD *)v24 + 4) = v28;
      *((_OWORD *)v24 + 1) = v30;
      *((_OWORD *)v24 + 2) = v29;
    }
  }
  else if (v27)
  {
    *v24 = *v25;
    v24[1] = v25[1];
    v24[2] = v25[2];
    v24[3] = v25[3];
    v24[4] = v25[4];
    v24[5] = v25[5];
    v24[6] = v25[6];
    v24[7] = v25[7];
    v24[8] = v25[8];
    v24[9] = v25[9];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)v24 = *(_OWORD *)v25;
    v54 = *((_OWORD *)v25 + 1);
    v55 = *((_OWORD *)v25 + 2);
    v56 = *((_OWORD *)v25 + 4);
    *((_OWORD *)v24 + 3) = *((_OWORD *)v25 + 3);
    *((_OWORD *)v24 + 4) = v56;
    *((_OWORD *)v24 + 1) = v54;
    *((_OWORD *)v24 + 2) = v55;
  }
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v57 = a3[7];
  v58 = a2;
  v103 = a2;
  v106 = a1;
  v59 = (char *)a1 + v57;
  v60 = (char *)v58 + v57;
  v61 = *(id *)v60;
  v62 = (void *)*((_QWORD *)v60 + 1);
  v63 = (void *)*((_QWORD *)v60 + 2);
  v64 = (void *)*((_QWORD *)v60 + 3);
  v65 = (void *)*((_QWORD *)v60 + 4);
  v66 = (void *)*((_QWORD *)v60 + 5);
  v67 = *((_QWORD *)v60 + 6);
  v68 = *((_QWORD *)v60 + 7);
  v69 = (void *)*((_QWORD *)v60 + 8);
  v98 = (void *)*((_QWORD *)v60 + 9);
  v102 = v60[80];
  sub_23644F6A4(*(id *)v60, v62, v63, v64, v65, v66, v67, v68, v69, v98, v102);
  v70 = *(void **)v59;
  v71 = (void *)*((_QWORD *)v59 + 1);
  v72 = (void *)*((_QWORD *)v59 + 2);
  v73 = (void *)*((_QWORD *)v59 + 3);
  v74 = *((_QWORD *)v59 + 4);
  v75 = *((_QWORD *)v59 + 5);
  v76 = *((_QWORD *)v59 + 6);
  v77 = *((_QWORD *)v59 + 7);
  v78 = (void *)*((_QWORD *)v59 + 8);
  v79 = (void *)*((_QWORD *)v59 + 9);
  v80 = v59[80];
  *(_QWORD *)v59 = v61;
  *((_QWORD *)v59 + 1) = v62;
  *((_QWORD *)v59 + 2) = v63;
  *((_QWORD *)v59 + 3) = v64;
  *((_QWORD *)v59 + 4) = v65;
  *((_QWORD *)v59 + 5) = v66;
  *((_QWORD *)v59 + 6) = v67;
  *((_QWORD *)v59 + 7) = v68;
  *((_QWORD *)v59 + 8) = v69;
  *((_QWORD *)v59 + 9) = v98;
  v59[80] = v102;
  sub_23644F8BC(v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80);
  v81 = v107[8];
  v82 = (_QWORD *)((char *)v106 + v81);
  v83 = (_QWORD *)((char *)v103 + v81);
  *v82 = *v83;
  v82[1] = v83[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v106 + v107[9]) = *(_QWORD *)((char *)v103 + v107[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)v106 + v107[10]) = *((_BYTE *)v103 + v107[10]);
  v84 = v107[11];
  v85 = (_QWORD *)((char *)v106 + v84);
  v86 = (char *)v103 + v84;
  v87 = *(_QWORD *)((char *)v106 + v84);
  v88 = *(_QWORD *)((char *)v103 + v84);
  if (!v87)
  {
    if (v88)
    {
      v90 = *((_QWORD *)v86 + 1);
      *v85 = v88;
      v85[1] = v90;
      swift_retain();
      return v106;
    }
LABEL_21:
    *(_OWORD *)v85 = *(_OWORD *)v86;
    return v106;
  }
  if (!v88)
  {
    swift_release();
    goto LABEL_21;
  }
  v89 = *((_QWORD *)v86 + 1);
  *v85 = v88;
  v85[1] = v89;
  swift_retain();
  swift_release();
  return v106;
}

uint64_t sub_236460568(uint64_t a1)
{
  destroy for IdMSAccount.ID();
  return a1;
}

_OWORD *initializeWithTake for AuthenticationModel(_OWORD *a1, _OWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;

  v6 = (int *)type metadata accessor for IdMSAccount();
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E45E0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = a2[3];
    a1[2] = a2[2];
    a1[3] = v9;
    a1[4] = a2[4];
    v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    v11 = v6[5];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = sub_2365AF8D0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    v15 = v6[6];
    v16 = (_OWORD *)((char *)a1 + v15);
    v17 = (_OWORD *)((char *)a2 + v15);
    v18 = v17[3];
    v16[2] = v17[2];
    v16[3] = v18;
    *(_OWORD *)((char *)v16 + 57) = *(_OWORD *)((char *)v17 + 57);
    v19 = v17[1];
    *v16 = *v17;
    v16[1] = v19;
    *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
  }
  v20 = a3[5];
  v21 = a3[6];
  v22 = (_OWORD *)((char *)a1 + v20);
  v23 = (_OWORD *)((char *)a2 + v20);
  v24 = v23[3];
  v22[2] = v23[2];
  v22[3] = v24;
  v22[4] = v23[4];
  v25 = v23[1];
  *v22 = *v23;
  v22[1] = v25;
  *((_BYTE *)a1 + v21) = *((_BYTE *)a2 + v21);
  v26 = a3[7];
  v27 = a3[8];
  v28 = (char *)a1 + v26;
  v29 = (char *)a2 + v26;
  v28[80] = v29[80];
  v30 = *((_OWORD *)v29 + 1);
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *((_OWORD *)v28 + 1) = v30;
  v31 = *((_OWORD *)v29 + 4);
  v32 = *((_OWORD *)v29 + 2);
  *((_OWORD *)v28 + 3) = *((_OWORD *)v29 + 3);
  *((_OWORD *)v28 + 4) = v31;
  *((_OWORD *)v28 + 2) = v32;
  *(_OWORD *)((char *)a1 + v27) = *(_OWORD *)((char *)a2 + v27);
  v33 = a3[10];
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  *((_BYTE *)a1 + v33) = *((_BYTE *)a2 + v33);
  v34 = a3[11];
  v35 = (_QWORD *)((char *)a1 + v34);
  v36 = (uint64_t *)((char *)a2 + v34);
  v37 = *v36;
  if (*v36)
  {
    v38 = v36[1];
    *v35 = v37;
    v35[1] = v38;
  }
  else
  {
    *(_OWORD *)v35 = *(_OWORD *)v36;
  }
  return a1;
}

_QWORD *assignWithTake for AuthenticationModel(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, int *);
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  char v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  __int128 v86;
  __int128 v87;

  v6 = (int *)type metadata accessor for IdMSAccount();
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      v11 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v11;
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      v12 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v12;
      v13 = v6[5];
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v16 = sub_2365AF8D0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      v17 = v6[6];
      v18 = (_OWORD *)((char *)a1 + v17);
      v19 = (_OWORD *)((char *)a2 + v17);
      v20 = v19[3];
      v18[2] = v19[2];
      v18[3] = v20;
      *(_OWORD *)((char *)v18 + 57) = *(_OWORD *)((char *)v19 + 57);
      v21 = v19[1];
      *v18 = *v19;
      v18[1] = v21;
      *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_236465A18((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for IdMSAccount);
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E45E0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  v62 = a2[1];
  *a1 = *a2;
  a1[1] = v62;
  swift_bridgeObjectRelease();
  v63 = a2[3];
  a1[2] = a2[2];
  a1[3] = v63;
  swift_bridgeObjectRelease();
  v64 = a2[5];
  a1[4] = a2[4];
  a1[5] = v64;
  swift_bridgeObjectRelease();
  v65 = a2[7];
  a1[6] = a2[6];
  a1[7] = v65;
  swift_bridgeObjectRelease();
  v66 = a2[9];
  a1[8] = a2[8];
  a1[9] = v66;
  swift_bridgeObjectRelease();
  v67 = v6[5];
  v68 = (char *)a1 + v67;
  v69 = (char *)a2 + v67;
  v70 = sub_2365AF8D0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 40))(v68, v69, v70);
  v71 = v6[6];
  v72 = (char *)a1 + v71;
  v73 = (char *)a2 + v71;
  v74 = *((_QWORD *)v73 + 8);
  v75 = v73[72];
  v76 = *(_QWORD *)v72;
  v77 = *((_QWORD *)v72 + 1);
  v78 = *((_QWORD *)v72 + 2);
  v79 = *((_QWORD *)v72 + 3);
  v80 = *((_QWORD *)v72 + 4);
  v81 = *((_QWORD *)v72 + 5);
  v82 = *((_QWORD *)v72 + 6);
  v83 = *((_QWORD *)v72 + 7);
  v84 = *((_QWORD *)v72 + 8);
  v85 = v72[72];
  v86 = *((_OWORD *)v73 + 1);
  *(_OWORD *)v72 = *(_OWORD *)v73;
  *((_OWORD *)v72 + 1) = v86;
  v87 = *((_OWORD *)v73 + 3);
  *((_OWORD *)v72 + 2) = *((_OWORD *)v73 + 2);
  *((_OWORD *)v72 + 3) = v87;
  *((_QWORD *)v72 + 8) = v74;
  v72[72] = v75;
  sub_23645FAF8(v76, v77, v78, v79, v80, v81, v82, v83, v84, v85);
  *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
  swift_bridgeObjectRelease();
LABEL_7:
  v23 = a3[5];
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  if (*(_QWORD *)((char *)a1 + v23 + 8))
  {
    v26 = v25[1];
    if (v26)
    {
      *v24 = *v25;
      v24[1] = v26;
      swift_bridgeObjectRelease();
      v27 = v25[3];
      v24[2] = v25[2];
      v24[3] = v27;
      swift_bridgeObjectRelease();
      v28 = v25[5];
      v24[4] = v25[4];
      v24[5] = v28;
      swift_bridgeObjectRelease();
      v29 = v25[7];
      v24[6] = v25[6];
      v24[7] = v29;
      swift_bridgeObjectRelease();
      v30 = v25[9];
      v24[8] = v25[8];
      v24[9] = v30;
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    sub_236460568((uint64_t)v24);
  }
  v31 = *((_OWORD *)v25 + 3);
  *((_OWORD *)v24 + 2) = *((_OWORD *)v25 + 2);
  *((_OWORD *)v24 + 3) = v31;
  *((_OWORD *)v24 + 4) = *((_OWORD *)v25 + 4);
  v32 = *((_OWORD *)v25 + 1);
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *((_OWORD *)v24 + 1) = v32;
LABEL_12:
  v33 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = v35[80];
  v37 = *(void **)v34;
  v38 = (void *)*((_QWORD *)v34 + 1);
  v39 = (void *)*((_QWORD *)v34 + 2);
  v40 = (void *)*((_QWORD *)v34 + 3);
  v41 = *((_QWORD *)v34 + 4);
  v42 = *((_QWORD *)v34 + 5);
  v43 = *((_QWORD *)v34 + 6);
  v44 = *((_QWORD *)v34 + 7);
  v45 = (void *)*((_QWORD *)v34 + 8);
  v46 = (void *)*((_QWORD *)v34 + 9);
  v47 = v34[80];
  v48 = *((_OWORD *)v35 + 1);
  *(_OWORD *)v34 = *(_OWORD *)v35;
  *((_OWORD *)v34 + 1) = v48;
  v49 = *((_OWORD *)v35 + 3);
  *((_OWORD *)v34 + 2) = *((_OWORD *)v35 + 2);
  *((_OWORD *)v34 + 3) = v49;
  *((_OWORD *)v34 + 4) = *((_OWORD *)v35 + 4);
  v34[80] = v36;
  sub_23644F8BC(v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47);
  v50 = a3[8];
  v51 = (_QWORD *)((char *)a1 + v50);
  v52 = (_QWORD *)((char *)a2 + v50);
  v54 = *v52;
  v53 = v52[1];
  *v51 = v54;
  v51[1] = v53;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  swift_bridgeObjectRelease();
  v55 = a3[11];
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  v56 = (_QWORD *)((char *)a1 + v55);
  v57 = (_QWORD *)((char *)a2 + v55);
  v58 = *v57;
  if (!*(_QWORD *)((char *)a1 + v55))
  {
    if (v58)
    {
      v60 = v57[1];
      *v56 = v58;
      v56[1] = v60;
      return a1;
    }
LABEL_18:
    *(_OWORD *)v56 = *(_OWORD *)v57;
    return a1;
  }
  if (!v58)
  {
    swift_release();
    goto LABEL_18;
  }
  v59 = v57[1];
  *v56 = v58;
  v56[1] = v59;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AuthenticationModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_236460AF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E45E0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 36));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for AuthenticationModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_236460B84(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E45E0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
  return result;
}

void sub_236460C00()
{
  unint64_t v0;

  sub_236460CA8();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_236460CA8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2563E4B18[0])
  {
    type metadata accessor for IdMSAccount();
    v0 = sub_2365B047C();
    if (!v1)
      atomic_store(v0, qword_2563E4B18);
  }
}

void destroy for AuthenticationModel.State(uint64_t a1)
{
  sub_23644F8BC(*(void **)a1, *(void **)(a1 + 8), *(void **)(a1 + 16), *(void **)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(void **)(a1 + 64), *(void **)(a1 + 72), *(_BYTE *)(a1 + 80));
}

uint64_t initializeWithCopy for AuthenticationModel.State(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v13;
  char v14;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  v7 = *(void **)(a2 + 32);
  v8 = *(void **)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(void **)(a2 + 64);
  v13 = *(void **)(a2 + 72);
  v14 = *(_BYTE *)(a2 + 80);
  sub_23644F6A4(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v13;
  *(_BYTE *)(a1 + 80) = v14;
  return a1;
}

uint64_t assignWithCopy for AuthenticationModel.State(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  char v22;
  void *v24;
  char v25;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  v7 = *(void **)(a2 + 32);
  v8 = *(void **)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(void **)(a2 + 64);
  v24 = *(void **)(a2 + 72);
  v25 = *(_BYTE *)(a2 + 80);
  sub_23644F6A4(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v24, v25);
  v12 = *(void **)a1;
  v13 = *(void **)(a1 + 8);
  v14 = *(void **)(a1 + 16);
  v15 = *(void **)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(void **)(a1 + 64);
  v21 = *(void **)(a1 + 72);
  v22 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v24;
  *(_BYTE *)(a1 + 80) = v25;
  sub_23644F8BC(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  return a1;
}

__n128 __swift_memcpy81_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for AuthenticationModel.State(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  char v14;
  __int128 v15;
  __int128 v16;

  v3 = *(_BYTE *)(a2 + 80);
  v4 = *(void **)a1;
  v6 = *(void **)(a1 + 8);
  v5 = *(void **)(a1 + 16);
  v7 = *(void **)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(void **)(a1 + 64);
  v13 = *(void **)(a1 + 72);
  v14 = *(_BYTE *)(a1 + 80);
  v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = v3;
  sub_23644F8BC(v4, v6, v5, v7, v8, v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for AuthenticationModel.State(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF8 && *(_BYTE *)(a1 + 81))
    return (*(_DWORD *)a1 + 248);
  v3 = *(unsigned __int8 *)(a1 + 80);
  if (v3 <= 8)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AuthenticationModel.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF7)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 - 248;
    if (a3 >= 0xF8)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if (a3 >= 0xF8)
      *(_BYTE *)(result + 81) = 0;
    if (a2)
      *(_BYTE *)(result + 80) = -(char)a2;
  }
  return result;
}

uint64_t sub_236461004(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 80) <= 7u)
    return *(unsigned __int8 *)(a1 + 80);
  else
    return (*(_DWORD *)a1 + 8);
}

uint64_t sub_23646101C(uint64_t result, unsigned int a2)
{
  if (a2 >= 8)
  {
    *(_QWORD *)result = a2 - 8;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)(result + 72) = 0;
    LOBYTE(a2) = 8;
  }
  *(_BYTE *)(result + 80) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AuthenticationModel.State()
{
  return &type metadata for AuthenticationModel.State;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for AuthenticationModel.UserInteraction()
{
  return &type metadata for AuthenticationModel.UserInteraction;
}

uint64_t initializeBufferWithCopyOfBuffer for IdMSAccount.Credential.CompanionKeyEnvelope(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for AuthenticationModel.BasicLogin(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AuthenticationModel.BasicLogin(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v6 = *(void **)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = v6;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AuthenticationModel.BasicLogin(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  v4 = *(void **)(a1 + 40);
  v5 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = v5;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AuthenticationModel.BasicLogin(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);

  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AuthenticationModel.BasicLogin(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AuthenticationModel.BasicLogin(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AuthenticationModel.BasicLogin()
{
  return &type metadata for AuthenticationModel.BasicLogin;
}

void destroy for AuthenticationModel.SecondFactor(uint64_t a1)
{

  if (*(_QWORD *)(a1 + 40) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
}

uint64_t initializeWithCopy for AuthenticationModel.SecondFactor(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  id v13;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = v4;
  if (v6 == 1)
  {
    v8 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v6;
    v9 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v9;
    v10 = *(void **)(a2 + 64);
    *(_QWORD *)(a1 + 64) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11 = v10;
  }
  v12 = *(void **)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  v13 = v12;
  return a1;
}

uint64_t assignWithCopy for AuthenticationModel.SecondFactor(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  id v22;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  v8 = (__int128 *)(a1 + 32);
  v9 = (__int128 *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40) == 1)
  {
    if (v10 == 1)
    {
      v11 = *v9;
      v12 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *v8 = v11;
      *(_OWORD *)(a1 + 48) = v12;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      v15 = *(void **)(a2 + 64);
      *(_QWORD *)(a1 + 64) = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v16 = v15;
    }
  }
  else if (v10 == 1)
  {
    sub_236461584(a1 + 32);
    v13 = *(_QWORD *)(a2 + 64);
    v14 = *(_OWORD *)(a2 + 48);
    *v8 = *v9;
    *(_OWORD *)(a1 + 48) = v14;
    *(_QWORD *)(a1 + 64) = v13;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v17 = *(void **)(a1 + 64);
    v18 = *(void **)(a2 + 64);
    *(_QWORD *)(a1 + 64) = v18;
    v19 = v18;

  }
  v20 = *(void **)(a1 + 72);
  v21 = *(void **)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v21;
  v22 = v21;

  return a1;
}

uint64_t sub_236461584(uint64_t a1)
{
  destroy for AuthenticationModel.ErrorInfo(a1);
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for AuthenticationModel.SecondFactor(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  if (*(_QWORD *)(a1 + 40) != 1)
  {
    v6 = *(_QWORD *)(a2 + 40);
    if (v6 != 1)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v6;
      swift_bridgeObjectRelease();
      v8 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v8;
      swift_bridgeObjectRelease();
      v9 = *(void **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);

      goto LABEL_6;
    }
    sub_236461584(a1 + 32);
  }
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
LABEL_6:
  v10 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);

  return a1;
}

uint64_t getEnumTagSinglePayload for AuthenticationModel.SecondFactor(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 80))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AuthenticationModel.SecondFactor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AuthenticationModel.SecondFactor()
{
  return &type metadata for AuthenticationModel.SecondFactor;
}

void destroy for AuthenticationModel.ErrorInfo(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

_QWORD *initializeWithCopy for AuthenticationModel.ErrorInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = (void *)a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = v5;
  return a1;
}

_QWORD *assignWithCopy for AuthenticationModel.ErrorInfo(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a1[4];
  v5 = (void *)a2[4];
  a1[4] = v5;
  v6 = v5;

  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AuthenticationModel.ErrorInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v5 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for AuthenticationModel.ErrorInfo(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AuthenticationModel.ErrorInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AuthenticationModel.ErrorInfo()
{
  return &type metadata for AuthenticationModel.ErrorInfo;
}

void destroy for AuthenticationModel.ServerRedirect(id *a1)
{

}

_QWORD *initializeWithCopy for AuthenticationModel.ServerRedirect(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = *(void **)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  a1[2] = v5;
  a1[3] = v6;
  v7 = *(void **)(a2 + 32);
  a1[4] = v7;
  v8 = v3;
  v9 = v4;
  v10 = v5;
  v11 = v6;
  v12 = v7;
  return a1;
}

uint64_t assignWithCopy for AuthenticationModel.ServerRedirect(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  v10 = *(void **)(a1 + 16);
  v11 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  v12 = v11;

  v13 = *(void **)(a1 + 24);
  v14 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v14;
  v15 = v14;

  v16 = *(void **)(a1 + 32);
  v17 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v17;
  v18 = v17;

  return a1;
}

uint64_t assignWithTake for AuthenticationModel.ServerRedirect(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);

  return a1;
}

uint64_t getEnumTagSinglePayload for AuthenticationModel.ServerRedirect(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AuthenticationModel.ServerRedirect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AuthenticationModel.ServerRedirect()
{
  return &type metadata for AuthenticationModel.ServerRedirect;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

ValueMetadata *type metadata accessor for AuthenticationModel.NativeRecovery()
{
  return &type metadata for AuthenticationModel.NativeRecovery;
}

void destroy for AuthenticationModel.FidoChallenge(id *a1)
{

}

_QWORD *_s12AppleIDSetup19AuthenticationModelV14NativeRecoveryVwcp_0(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = *(void **)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  a1[2] = v5;
  a1[3] = v6;
  v7 = v3;
  v8 = v4;
  v9 = v5;
  v10 = v6;
  return a1;
}

uint64_t _s12AppleIDSetup19AuthenticationModelV14NativeRecoveryVwca_0(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  v10 = *(void **)(a1 + 16);
  v11 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  v12 = v11;

  v13 = *(void **)(a1 + 24);
  v14 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v14;
  v15 = v14;

  return a1;
}

uint64_t _s12AppleIDSetup19AuthenticationModelV14NativeRecoveryVwta_0(uint64_t a1, _OWORD *a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];

  return a1;
}

uint64_t _s12AppleIDSetup19AuthenticationModelV14NativeRecoveryVwet_0(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s12AppleIDSetup19AuthenticationModelV14NativeRecoveryVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AuthenticationModel.FidoChallenge()
{
  return &type metadata for AuthenticationModel.FidoChallenge;
}

uint64_t destroy for AuthenticationModel.KeepUsing()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s12AppleIDSetup19AuthenticationModelV9KeepUsingVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AuthenticationModel.KeepUsing(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AuthenticationModel.KeepUsing(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AuthenticationModel.KeepUsing(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AuthenticationModel.KeepUsing(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AuthenticationModel.KeepUsing()
{
  return &type metadata for AuthenticationModel.KeepUsing;
}

uint64_t destroy for AuthenticationModel.Alert(uint64_t a1)
{
  uint64_t result;
  int v3;

  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v3 = *(unsigned __int8 *)(a1 + 80);
  if (v3 != 255)
    return sub_23645DCB0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), v3);
  return result;
}

uint64_t initializeWithCopy for AuthenticationModel.Alert(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(unsigned __int8 *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 == 255)
  {
    v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v13;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 32);
    v8 = *(_QWORD *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 48);
    v10 = *(_QWORD *)(a2 + 56);
    v11 = *(_QWORD *)(a2 + 64);
    v12 = *(_QWORD *)(a2 + 72);
    sub_23645DC04(v7, v8, v9, v10, v11, v12, v6);
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v10;
    *(_QWORD *)(a1 + 64) = v11;
    *(_QWORD *)(a1 + 72) = v12;
    *(_BYTE *)(a1 + 80) = v6;
  }
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  return a1;
}

uint64_t assignWithCopy for AuthenticationModel.Alert(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 32);
  v5 = (__int128 *)(a2 + 32);
  v6 = *(unsigned __int8 *)(a2 + 80);
  if (*(unsigned __int8 *)(a1 + 80) == 255)
  {
    if (v6 == 255)
    {
      v29 = *v5;
      v30 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 64);
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      *(_OWORD *)(a1 + 48) = v30;
      *(_OWORD *)(a1 + 64) = v31;
      *v4 = v29;
    }
    else
    {
      v20 = *(_QWORD *)(a2 + 32);
      v21 = *(_QWORD *)(a2 + 40);
      v22 = *(_QWORD *)(a2 + 48);
      v23 = *(_QWORD *)(a2 + 56);
      v24 = *(_QWORD *)(a2 + 64);
      v25 = *(_QWORD *)(a2 + 72);
      sub_23645DC04(v20, v21, v22, v23, v24, v25, *(_BYTE *)(a2 + 80));
      *(_QWORD *)(a1 + 32) = v20;
      *(_QWORD *)(a1 + 40) = v21;
      *(_QWORD *)(a1 + 48) = v22;
      *(_QWORD *)(a1 + 56) = v23;
      *(_QWORD *)(a1 + 64) = v24;
      *(_QWORD *)(a1 + 72) = v25;
      *(_BYTE *)(a1 + 80) = v6;
    }
  }
  else if (v6 == 255)
  {
    sub_236462250(a1 + 32);
    v27 = *(_OWORD *)(a2 + 48);
    v26 = *(_OWORD *)(a2 + 64);
    v28 = *v5;
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    *(_OWORD *)(a1 + 48) = v27;
    *(_OWORD *)(a1 + 64) = v26;
    *v4 = v28;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 32);
    v8 = *(_QWORD *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 48);
    v10 = *(_QWORD *)(a2 + 56);
    v11 = *(_QWORD *)(a2 + 64);
    v12 = *(_QWORD *)(a2 + 72);
    sub_23645DC04(v7, v8, v9, v10, v11, v12, *(_BYTE *)(a2 + 80));
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(_QWORD *)(a1 + 40);
    v15 = *(_QWORD *)(a1 + 48);
    v16 = *(_QWORD *)(a1 + 56);
    v17 = *(_QWORD *)(a1 + 64);
    v18 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v10;
    *(_QWORD *)(a1 + 64) = v11;
    *(_QWORD *)(a1 + 72) = v12;
    v19 = *(_BYTE *)(a1 + 80);
    *(_BYTE *)(a1 + 80) = v6;
    sub_23645DCB0(v13, v14, v15, v16, v17, v18, v19);
  }
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  return a1;
}

uint64_t sub_236462250(uint64_t a1)
{
  destroy for SetupError(a1);
  return a1;
}

__n128 __swift_memcpy82_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for AuthenticationModel.Alert(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(unsigned __int8 *)(a1 + 80);
  if (v6 == 255)
    goto LABEL_5;
  v7 = *(unsigned __int8 *)(a2 + 80);
  if (v7 == 255)
  {
    sub_236462250(a1 + 32);
LABEL_5:
    v15 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v15;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    goto LABEL_6;
  }
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = v7;
  sub_23645DCB0(v8, v9, v10, v11, v12, v13, v6);
LABEL_6:
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  return a1;
}

uint64_t getEnumTagSinglePayload for AuthenticationModel.Alert(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 82))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AuthenticationModel.Alert(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 82) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 82) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AuthenticationModel.Alert()
{
  return &type metadata for AuthenticationModel.Alert;
}

ValueMetadata *type metadata accessor for AuthenticationModel.Alert.CodingKeys()
{
  return &type metadata for AuthenticationModel.Alert.CodingKeys;
}

ValueMetadata *type metadata accessor for AuthenticationModel.KeepUsing.CodingKeys()
{
  return &type metadata for AuthenticationModel.KeepUsing.CodingKeys;
}

ValueMetadata *type metadata accessor for AuthenticationModel.FidoChallenge.CodingKeys()
{
  return &type metadata for AuthenticationModel.FidoChallenge.CodingKeys;
}

uint64_t getEnumTagSinglePayload for SignInCommand.Request.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s12AppleIDSetup19AuthenticationModelV5AlertV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_236462530 + 4 * byte_2365B24C7[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_236462564 + 4 * byte_2365B24C2[v4]))();
}

uint64_t sub_236462564(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23646256C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x236462574);
  return result;
}

uint64_t sub_236462580(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x236462588);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23646258C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236462594(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AuthenticationModel.NativeRecovery.CodingKeys()
{
  return &type metadata for AuthenticationModel.NativeRecovery.CodingKeys;
}

ValueMetadata *type metadata accessor for AuthenticationModel.ServerRedirect.CodingKeys()
{
  return &type metadata for AuthenticationModel.ServerRedirect.CodingKeys;
}

ValueMetadata *type metadata accessor for AuthenticationModel.ErrorInfo.CodingKeys()
{
  return &type metadata for AuthenticationModel.ErrorInfo.CodingKeys;
}

uint64_t getEnumTagSinglePayload for IdMSAccount.ID.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s12AppleIDSetup19AuthenticationModelV14ServerRedirectV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_2364626B4 + 4 * byte_2365B24D1[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_2364626E8 + 4 * byte_2365B24CC[v4]))();
}

uint64_t sub_2364626E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364626F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2364626F8);
  return result;
}

uint64_t sub_236462704(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23646270CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_236462710(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236462718(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AuthenticationModel.SecondFactor.CodingKeys()
{
  return &type metadata for AuthenticationModel.SecondFactor.CodingKeys;
}

uint64_t getEnumTagSinglePayload for AuthenticationModel.BasicLogin.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AuthenticationModel.BasicLogin.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_236462810 + 4 * byte_2365B24DB[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_236462844 + 4 * byte_2365B24D6[v4]))();
}

uint64_t sub_236462844(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23646284C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x236462854);
  return result;
}

uint64_t sub_236462860(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x236462868);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_23646286C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236462874(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236462880(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_236462888(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for AuthenticationModel.BasicLogin.CodingKeys()
{
  return &type metadata for AuthenticationModel.BasicLogin.CodingKeys;
}

uint64_t getEnumTagSinglePayload for RepairError.GenericCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s12AppleIDSetup19AuthenticationModelV15UserInteractionOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23646297C + 4 * byte_2365B24E5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2364629B0 + 4 * byte_2365B24E0[v4]))();
}

uint64_t sub_2364629B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364629B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2364629C0);
  return result;
}

uint64_t sub_2364629CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2364629D4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2364629D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364629E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AuthenticationModel.UserInteraction.CodingKeys()
{
  return &type metadata for AuthenticationModel.UserInteraction.CodingKeys;
}

ValueMetadata *type metadata accessor for AuthenticationModel.UserInteraction.NeverCodingKeys()
{
  return &type metadata for AuthenticationModel.UserInteraction.NeverCodingKeys;
}

ValueMetadata *type metadata accessor for AuthenticationModel.UserInteraction.OptionalCodingKeys()
{
  return &type metadata for AuthenticationModel.UserInteraction.OptionalCodingKeys;
}

ValueMetadata *type metadata accessor for AuthenticationModel.UserInteraction.RequiredCodingKeys()
{
  return &type metadata for AuthenticationModel.UserInteraction.RequiredCodingKeys;
}

uint64_t getEnumTagSinglePayload for AuthenticationModel.State.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AuthenticationModel.State.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_236462B08 + 4 * byte_2365B24EF[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_236462B3C + 4 * byte_2365B24EA[v4]))();
}

uint64_t sub_236462B3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_236462B44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x236462B4CLL);
  return result;
}

uint64_t sub_236462B58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x236462B60);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_236462B64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236462B6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AuthenticationModel.State.CodingKeys()
{
  return &type metadata for AuthenticationModel.State.CodingKeys;
}

ValueMetadata *type metadata accessor for AuthenticationModel.State.InitialCodingKeys()
{
  return &type metadata for AuthenticationModel.State.InitialCodingKeys;
}

ValueMetadata *type metadata accessor for AuthenticationModel.State.SrpCodingKeys()
{
  return &type metadata for AuthenticationModel.State.SrpCodingKeys;
}

uint64_t sub_236462BB4()
{
  return 0;
}

ValueMetadata *type metadata accessor for AuthenticationModel.State.BasicLoginCodingKeys()
{
  return &type metadata for AuthenticationModel.State.BasicLoginCodingKeys;
}

ValueMetadata *type metadata accessor for AuthenticationModel.State.SecondFactorCodingKeys()
{
  return &type metadata for AuthenticationModel.State.SecondFactorCodingKeys;
}

ValueMetadata *type metadata accessor for AuthenticationModel.State.ServerRedirectCodingKeys()
{
  return &type metadata for AuthenticationModel.State.ServerRedirectCodingKeys;
}

ValueMetadata *type metadata accessor for AuthenticationModel.State.NativeRecoveryCodingKeys()
{
  return &type metadata for AuthenticationModel.State.NativeRecoveryCodingKeys;
}

ValueMetadata *type metadata accessor for AuthenticationModel.State.FidoChallengeCodingKeys()
{
  return &type metadata for AuthenticationModel.State.FidoChallengeCodingKeys;
}

ValueMetadata *type metadata accessor for AuthenticationModel.State.KeepUsingCodingKeys()
{
  return &type metadata for AuthenticationModel.State.KeepUsingCodingKeys;
}

uint64_t getEnumTagSinglePayload for RepairError.NestedCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s12AppleIDSetup19AuthenticationModelV9KeepUsingV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_236462CF8 + 4 * byte_2365B24F9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_236462D2C + 4 * byte_2365B24F4[v4]))();
}

uint64_t sub_236462D2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_236462D34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x236462D3CLL);
  return result;
}

uint64_t sub_236462D48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x236462D50);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_236462D54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236462D5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_236462D68(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AuthenticationModel.State.AlertCodingKeys()
{
  return &type metadata for AuthenticationModel.State.AlertCodingKeys;
}

uint64_t getEnumTagSinglePayload for AuthenticateCommand.Response.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s12AppleIDSetup19AuthenticationModelV5StateO20BasicLoginCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_236462E14 + 4 * byte_2365B24FE[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_236462E34 + 4 * byte_2365B2503[v4]))();
}

_BYTE *sub_236462E14(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_236462E34(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_236462E3C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_236462E44(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_236462E4C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_236462E54(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AuthenticationModel.State.LoadingCodingKeys()
{
  return &type metadata for AuthenticationModel.State.LoadingCodingKeys;
}

uint64_t getEnumTagSinglePayload for AuthenticationModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AuthenticationModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_236462F4C + 4 * byte_2365B250D[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_236462F80 + 4 * byte_2365B2508[v4]))();
}

uint64_t sub_236462F80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_236462F88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x236462F90);
  return result;
}

uint64_t sub_236462F9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x236462FA4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_236462FA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236462FB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AuthenticationModel.CodingKeys()
{
  return &type metadata for AuthenticationModel.CodingKeys;
}

unint64_t sub_236462FD0()
{
  unint64_t result;

  result = qword_2563E4B60;
  if (!qword_2563E4B60)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B328C, &type metadata for AuthenticationModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4B60);
  }
  return result;
}

unint64_t sub_236463018()
{
  unint64_t result;

  result = qword_2563E4B68;
  if (!qword_2563E4B68)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3344, &type metadata for AuthenticationModel.State.LoadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4B68);
  }
  return result;
}

unint64_t sub_236463060()
{
  unint64_t result;

  result = qword_2563E4B70;
  if (!qword_2563E4B70)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B33FC, &type metadata for AuthenticationModel.State.AlertCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4B70);
  }
  return result;
}

unint64_t sub_2364630A8()
{
  unint64_t result;

  result = qword_2563E4B78;
  if (!qword_2563E4B78)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B34B4, &type metadata for AuthenticationModel.State.KeepUsingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4B78);
  }
  return result;
}

unint64_t sub_2364630F0()
{
  unint64_t result;

  result = qword_2563E4B80;
  if (!qword_2563E4B80)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B356C, &type metadata for AuthenticationModel.State.FidoChallengeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4B80);
  }
  return result;
}

unint64_t sub_236463138()
{
  unint64_t result;

  result = qword_2563E4B88;
  if (!qword_2563E4B88)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3624, &type metadata for AuthenticationModel.State.NativeRecoveryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4B88);
  }
  return result;
}

unint64_t sub_236463180()
{
  unint64_t result;

  result = qword_2563E4B90;
  if (!qword_2563E4B90)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B36DC, &type metadata for AuthenticationModel.State.ServerRedirectCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4B90);
  }
  return result;
}

unint64_t sub_2364631C8()
{
  unint64_t result;

  result = qword_2563E4B98;
  if (!qword_2563E4B98)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3794, &type metadata for AuthenticationModel.State.SecondFactorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4B98);
  }
  return result;
}

unint64_t sub_236463210()
{
  unint64_t result;

  result = qword_2563E4BA0;
  if (!qword_2563E4BA0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B384C, &type metadata for AuthenticationModel.State.BasicLoginCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4BA0);
  }
  return result;
}

unint64_t sub_236463258()
{
  unint64_t result;

  result = qword_2563E4BA8;
  if (!qword_2563E4BA8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B39A4, &type metadata for AuthenticationModel.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4BA8);
  }
  return result;
}

unint64_t sub_2364632A0()
{
  unint64_t result;

  result = qword_2563E4BB0;
  if (!qword_2563E4BB0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3B4C, &type metadata for AuthenticationModel.UserInteraction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4BB0);
  }
  return result;
}

unint64_t sub_2364632E8()
{
  unint64_t result;

  result = qword_2563E4BB8;
  if (!qword_2563E4BB8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3C04, &type metadata for AuthenticationModel.BasicLogin.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4BB8);
  }
  return result;
}

unint64_t sub_236463330()
{
  unint64_t result;

  result = qword_2563E4BC0;
  if (!qword_2563E4BC0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3CBC, &type metadata for AuthenticationModel.SecondFactor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4BC0);
  }
  return result;
}

unint64_t sub_236463378()
{
  unint64_t result;

  result = qword_2563E4BC8;
  if (!qword_2563E4BC8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3D74, &type metadata for AuthenticationModel.ErrorInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4BC8);
  }
  return result;
}

unint64_t sub_2364633C0()
{
  unint64_t result;

  result = qword_2563E4BD0;
  if (!qword_2563E4BD0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3E2C, &type metadata for AuthenticationModel.ServerRedirect.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4BD0);
  }
  return result;
}

unint64_t sub_236463408()
{
  unint64_t result;

  result = qword_2563E4BD8;
  if (!qword_2563E4BD8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3EE4, &type metadata for AuthenticationModel.NativeRecovery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4BD8);
  }
  return result;
}

unint64_t sub_236463450()
{
  unint64_t result;

  result = qword_2563E4BE0;
  if (!qword_2563E4BE0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3F9C, &type metadata for AuthenticationModel.FidoChallenge.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4BE0);
  }
  return result;
}

unint64_t sub_236463498()
{
  unint64_t result;

  result = qword_2563E4BE8;
  if (!qword_2563E4BE8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B4054, &type metadata for AuthenticationModel.KeepUsing.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4BE8);
  }
  return result;
}

unint64_t sub_2364634E0()
{
  unint64_t result;

  result = qword_2563E4BF0;
  if (!qword_2563E4BF0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B410C, &type metadata for AuthenticationModel.Alert.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4BF0);
  }
  return result;
}

unint64_t sub_236463528()
{
  unint64_t result;

  result = qword_2563E4BF8;
  if (!qword_2563E4BF8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B407C, &type metadata for AuthenticationModel.Alert.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4BF8);
  }
  return result;
}

unint64_t sub_236463570()
{
  unint64_t result;

  result = qword_2563E4C00;
  if (!qword_2563E4C00)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B40A4, &type metadata for AuthenticationModel.Alert.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4C00);
  }
  return result;
}

unint64_t sub_2364635B8()
{
  unint64_t result;

  result = qword_2563E4C08;
  if (!qword_2563E4C08)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3FC4, &type metadata for AuthenticationModel.KeepUsing.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4C08);
  }
  return result;
}

unint64_t sub_236463600()
{
  unint64_t result;

  result = qword_2563E4C10;
  if (!qword_2563E4C10)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3FEC, &type metadata for AuthenticationModel.KeepUsing.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4C10);
  }
  return result;
}

unint64_t sub_236463648()
{
  unint64_t result;

  result = qword_2563E4C18;
  if (!qword_2563E4C18)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3F0C, &type metadata for AuthenticationModel.FidoChallenge.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4C18);
  }
  return result;
}

unint64_t sub_236463690()
{
  unint64_t result;

  result = qword_2563E4C20;
  if (!qword_2563E4C20)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3F34, &type metadata for AuthenticationModel.FidoChallenge.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4C20);
  }
  return result;
}

unint64_t sub_2364636D8()
{
  unint64_t result;

  result = qword_2563E4C28;
  if (!qword_2563E4C28)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3E54, &type metadata for AuthenticationModel.NativeRecovery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4C28);
  }
  return result;
}

unint64_t sub_236463720()
{
  unint64_t result;

  result = qword_2563E4C30;
  if (!qword_2563E4C30)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3E7C, &type metadata for AuthenticationModel.NativeRecovery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4C30);
  }
  return result;
}

unint64_t sub_236463768()
{
  unint64_t result;

  result = qword_2563E4C38;
  if (!qword_2563E4C38)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3D9C, &type metadata for AuthenticationModel.ServerRedirect.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4C38);
  }
  return result;
}

unint64_t sub_2364637B0()
{
  unint64_t result;

  result = qword_2563E4C40;
  if (!qword_2563E4C40)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3DC4, &type metadata for AuthenticationModel.ServerRedirect.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4C40);
  }
  return result;
}

unint64_t sub_2364637F8()
{
  unint64_t result;

  result = qword_2563E4C48;
  if (!qword_2563E4C48)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3CE4, &type metadata for AuthenticationModel.ErrorInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4C48);
  }
  return result;
}

unint64_t sub_236463840()
{
  unint64_t result;

  result = qword_2563E4C50;
  if (!qword_2563E4C50)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3D0C, &type metadata for AuthenticationModel.ErrorInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4C50);
  }
  return result;
}

unint64_t sub_236463888()
{
  unint64_t result;

  result = qword_2563E4C58;
  if (!qword_2563E4C58)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3C2C, &type metadata for AuthenticationModel.SecondFactor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4C58);
  }
  return result;
}

unint64_t sub_2364638D0()
{
  unint64_t result;

  result = qword_2563E4C60;
  if (!qword_2563E4C60)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3C54, &type metadata for AuthenticationModel.SecondFactor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4C60);
  }
  return result;
}

unint64_t sub_236463918()
{
  unint64_t result;

  result = qword_2563E4C68;
  if (!qword_2563E4C68)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3B74, &type metadata for AuthenticationModel.BasicLogin.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4C68);
  }
  return result;
}

unint64_t sub_236463960()
{
  unint64_t result;

  result = qword_2563E4C70;
  if (!qword_2563E4C70)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3B9C, &type metadata for AuthenticationModel.BasicLogin.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4C70);
  }
  return result;
}

unint64_t sub_2364639A8()
{
  unint64_t result;

  result = qword_2563E4C78;
  if (!qword_2563E4C78)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3A6C, &type metadata for AuthenticationModel.UserInteraction.NeverCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4C78);
  }
  return result;
}

unint64_t sub_2364639F0()
{
  unint64_t result;

  result = qword_2563E4C80;
  if (!qword_2563E4C80)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3A94, &type metadata for AuthenticationModel.UserInteraction.NeverCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4C80);
  }
  return result;
}

unint64_t sub_236463A38()
{
  unint64_t result;

  result = qword_2563E4C88;
  if (!qword_2563E4C88)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3A1C, &type metadata for AuthenticationModel.UserInteraction.OptionalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4C88);
  }
  return result;
}

unint64_t sub_236463A80()
{
  unint64_t result;

  result = qword_2563E4C90;
  if (!qword_2563E4C90)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3A44, &type metadata for AuthenticationModel.UserInteraction.OptionalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4C90);
  }
  return result;
}

unint64_t sub_236463AC8()
{
  unint64_t result;

  result = qword_2563E4C98;
  if (!qword_2563E4C98)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B39CC, &type metadata for AuthenticationModel.UserInteraction.RequiredCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4C98);
  }
  return result;
}

unint64_t sub_236463B10()
{
  unint64_t result;

  result = qword_2563E4CA0;
  if (!qword_2563E4CA0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B39F4, &type metadata for AuthenticationModel.UserInteraction.RequiredCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4CA0);
  }
  return result;
}

unint64_t sub_236463B58()
{
  unint64_t result;

  result = qword_2563E4CA8;
  if (!qword_2563E4CA8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3ABC, &type metadata for AuthenticationModel.UserInteraction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4CA8);
  }
  return result;
}

unint64_t sub_236463BA0()
{
  unint64_t result;

  result = qword_2563E4CB0;
  if (!qword_2563E4CB0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3AE4, &type metadata for AuthenticationModel.UserInteraction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4CB0);
  }
  return result;
}

unint64_t sub_236463BE8()
{
  unint64_t result;

  result = qword_2563E4CB8;
  if (!qword_2563E4CB8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B38C4, &type metadata for AuthenticationModel.State.InitialCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4CB8);
  }
  return result;
}

unint64_t sub_236463C30()
{
  unint64_t result;

  result = qword_2563E4CC0;
  if (!qword_2563E4CC0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B38EC, &type metadata for AuthenticationModel.State.InitialCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4CC0);
  }
  return result;
}

unint64_t sub_236463C78()
{
  unint64_t result;

  result = qword_2563E4CC8;
  if (!qword_2563E4CC8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3874, &type metadata for AuthenticationModel.State.SrpCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4CC8);
  }
  return result;
}

unint64_t sub_236463CC0()
{
  unint64_t result;

  result = qword_2563E4CD0;
  if (!qword_2563E4CD0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B389C, &type metadata for AuthenticationModel.State.SrpCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4CD0);
  }
  return result;
}

unint64_t sub_236463D08()
{
  unint64_t result;

  result = qword_2563E4CD8;
  if (!qword_2563E4CD8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B37BC, &type metadata for AuthenticationModel.State.BasicLoginCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4CD8);
  }
  return result;
}

unint64_t sub_236463D50()
{
  unint64_t result;

  result = qword_2563E4CE0;
  if (!qword_2563E4CE0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B37E4, &type metadata for AuthenticationModel.State.BasicLoginCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4CE0);
  }
  return result;
}

unint64_t sub_236463D98()
{
  unint64_t result;

  result = qword_2563E4CE8;
  if (!qword_2563E4CE8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3704, &type metadata for AuthenticationModel.State.SecondFactorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4CE8);
  }
  return result;
}

unint64_t sub_236463DE0()
{
  unint64_t result;

  result = qword_2563E4CF0;
  if (!qword_2563E4CF0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B372C, &type metadata for AuthenticationModel.State.SecondFactorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4CF0);
  }
  return result;
}

unint64_t sub_236463E28()
{
  unint64_t result;

  result = qword_2563E4CF8;
  if (!qword_2563E4CF8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B364C, &type metadata for AuthenticationModel.State.ServerRedirectCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4CF8);
  }
  return result;
}

unint64_t sub_236463E70()
{
  unint64_t result;

  result = qword_2563E4D00;
  if (!qword_2563E4D00)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3674, &type metadata for AuthenticationModel.State.ServerRedirectCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4D00);
  }
  return result;
}

unint64_t sub_236463EB8()
{
  unint64_t result;

  result = qword_2563E4D08;
  if (!qword_2563E4D08)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3594, &type metadata for AuthenticationModel.State.NativeRecoveryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4D08);
  }
  return result;
}

unint64_t sub_236463F00()
{
  unint64_t result;

  result = qword_2563E4D10;
  if (!qword_2563E4D10)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B35BC, &type metadata for AuthenticationModel.State.NativeRecoveryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4D10);
  }
  return result;
}

unint64_t sub_236463F48()
{
  unint64_t result;

  result = qword_2563E4D18;
  if (!qword_2563E4D18)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B34DC, &type metadata for AuthenticationModel.State.FidoChallengeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4D18);
  }
  return result;
}

unint64_t sub_236463F90()
{
  unint64_t result;

  result = qword_2563E4D20;
  if (!qword_2563E4D20)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3504, &type metadata for AuthenticationModel.State.FidoChallengeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4D20);
  }
  return result;
}

unint64_t sub_236463FD8()
{
  unint64_t result;

  result = qword_2563E4D28;
  if (!qword_2563E4D28)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3424, &type metadata for AuthenticationModel.State.KeepUsingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4D28);
  }
  return result;
}

unint64_t sub_236464020()
{
  unint64_t result;

  result = qword_2563E4D30;
  if (!qword_2563E4D30)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B344C, &type metadata for AuthenticationModel.State.KeepUsingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4D30);
  }
  return result;
}

unint64_t sub_236464068()
{
  unint64_t result;

  result = qword_2563E4D38;
  if (!qword_2563E4D38)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B336C, &type metadata for AuthenticationModel.State.AlertCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4D38);
  }
  return result;
}

unint64_t sub_2364640B0()
{
  unint64_t result;

  result = qword_2563E4D40;
  if (!qword_2563E4D40)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3394, &type metadata for AuthenticationModel.State.AlertCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4D40);
  }
  return result;
}

unint64_t sub_2364640F8()
{
  unint64_t result;

  result = qword_2563E4D48;
  if (!qword_2563E4D48)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B32B4, &type metadata for AuthenticationModel.State.LoadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4D48);
  }
  return result;
}

unint64_t sub_236464140()
{
  unint64_t result;

  result = qword_2563E4D50;
  if (!qword_2563E4D50)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B32DC, &type metadata for AuthenticationModel.State.LoadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4D50);
  }
  return result;
}

unint64_t sub_236464188()
{
  unint64_t result;

  result = qword_2563E4D58;
  if (!qword_2563E4D58)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B3914, &type metadata for AuthenticationModel.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4D58);
  }
  return result;
}

unint64_t sub_2364641D0()
{
  unint64_t result;

  result = qword_2563E4D60;
  if (!qword_2563E4D60)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B393C, &type metadata for AuthenticationModel.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4D60);
  }
  return result;
}

unint64_t sub_236464218()
{
  unint64_t result;

  result = qword_2563E4D68;
  if (!qword_2563E4D68)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B31C4, &type metadata for AuthenticationModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4D68);
  }
  return result;
}

unint64_t sub_236464260()
{
  unint64_t result;

  result = qword_2563E4D70;
  if (!qword_2563E4D70)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B31EC, &type metadata for AuthenticationModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E4D70);
  }
  return result;
}

uint64_t sub_2364642A4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 12639 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_236464364(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C616974696E69 && a2 == 0xE700000000000000;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7369331 && a2 == 0xE300000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x676F4C6369736162 && a2 == 0xEA00000000006E69 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6146646E6F636573 && a2 == 0xEC000000726F7463 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6552726576726573 && a2 == 0xEE00746365726964 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x655265766974616ELL && a2 == 0xEE00797265766F63 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6C6168436F646966 && a2 == 0xED000065676E656CLL || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6E6973557065656BLL && a2 == 0xE900000000000067 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7472656C61 && a2 == 0xE500000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x676E6964616F6CLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

uint64_t sub_2364647F8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x726576656ELL && a2 == 0xE500000000000000;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C616E6F6974706FLL && a2 == 0xE800000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6465726975716572 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_236464944(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656D616E72657375 && a2 == 0xE800000000000000;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x64726F7773736170 && a2 == 0xE800000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C65636E61437369 && a2 == 0xEB0000000064656CLL || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x657070696B537369 && a2 == 0xE900000000000064 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000002365CB140 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000002365CB410 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000002365CB430 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x53746E6572727563 && a2 == 0xEF73656369767265)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_236464CB8(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000015 && a2 == 0x80000002365CB430 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E654C65646F63 && a2 == 0xEA00000000006874 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x657463656C6C6F63 && a2 == 0xED000065646F4364 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x666E49726F727265 && a2 == 0xE90000000000006FLL || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x726F727265 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v5 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_236464F04(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C746974 && a2 == 0xE500000000000000;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x726F727265 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_236465048(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000015 && a2 == 0x80000002365CB430 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x72756769666E6F63 && a2 == 0xED00006E6F697461 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002365CB450 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x726F727265 && a2 == 0xE500000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002365CB470)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v5 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_23646526C(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000015 && a2 == 0x80000002365CB430 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x747865746E6F63 && a2 == 0xE700000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x726F727265 && a2 == 0xE500000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x657265766F636572 && a2 == 0xED00006F666E4964)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v5 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_23646543C(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000015 && a2 == 0x80000002365CB430 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x747865746E6F63 && a2 == 0xE700000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65736E6F70736572 && a2 == 0xE800000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x726F727265 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v5 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_2364655E8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656D616E72657375 && a2 == 0xE800000000000000;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6973557065656BLL && a2 == 0xE900000000000067)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_2364656E4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C746974 && a2 == 0xE500000000000000;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x726F727265 && a2 == 0xE500000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E65736572507369 && a2 == 0xEB00000000646574)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_2364658A4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2364658C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t sub_2364658F8(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t sub_23646591C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_236465960(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_236465998(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_2364659D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AuthenticationModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_236465A18(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_236465AB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_2365AFC00();
  __swift_allocate_value_buffer(v0, qword_2563E4DC0);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_2563E4DC0);
  if (qword_2563E4348 != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)qword_2563ECF60);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t MessagePacker.encoder.getter()
{
  return swift_retain();
}

uint64_t MessagePacker.encoder.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*MessagePacker.encoder.modify())()
{
  return nullsub_1;
}

uint64_t MessagePacker.signingIdentity.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23646C4B0(v2 + *(int *)(a1 + 36), a2, &qword_2563E4DD8);
}

uint64_t MessagePacker.signingIdentity.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_236465BB8(a1, v2 + *(int *)(a2 + 36));
}

uint64_t sub_236465BB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4DD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*MessagePacker.signingIdentity.modify())()
{
  return nullsub_1;
}

uint64_t (*MessagePacker.topicIdentifier.modify())()
{
  return nullsub_1;
}

uint64_t MessagePacker.init(encoder:signingIdentity:topicIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  return sub_236467924(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for MessagePacker, a7);
}

uint64_t type metadata accessor for MessagePacker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MessagePacker);
}

uint64_t MessagePacker.pack(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, char *);
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t inited;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t *v54;
  void (**v55)(char *, uint64_t, char *);
  unint64_t v56;
  void (*v57)(char *, uint64_t, char *);
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  char v84;
  NSObject *v85;
  os_log_type_t v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v94;
  uint8_t *v95;
  os_log_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  void (*v103)(char *, uint64_t, char *);
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114[2];
  uint64_t v115;
  uint64_t v116[3];
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4DD8);
  MEMORY[0x24BDAC7A8](v4);
  v107 = (uint64_t)&v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4DE0);
  v105 = *(_QWORD *)(v6 - 8);
  v106 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v102 = (uint64_t *)((char *)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_2365AF9FC();
  v100 = *(_QWORD *)(v8 - 8);
  v101 = v8;
  v9 = MEMORY[0x24BDAC7A8](v8);
  v99 = (char *)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = a2;
  v11 = *(char **)(a2 + 16);
  v12 = *((_QWORD *)v11 - 1);
  v13 = MEMORY[0x24BDAC7A8](v9);
  v104 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v94 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v94 - v18;
  if (qword_2563E42B0 != -1)
    swift_once();
  v20 = sub_2365AFC00();
  v21 = __swift_project_value_buffer(v20, (uint64_t)qword_2563E4DC0);
  v22 = *(void (**)(char *, uint64_t, char *))(v12 + 16);
  v22(v19, a1, v11);
  v108 = v21;
  v23 = sub_2365AFBE8();
  v24 = sub_2365B038C();
  v25 = os_log_type_enabled(v23, v24);
  v103 = v22;
  if (v25)
  {
    v26 = swift_slowAlloc();
    v96 = v23;
    v27 = (uint8_t *)v26;
    v97 = swift_slowAlloc();
    v116[0] = v97;
    v98 = a1;
    v95 = v27;
    *(_DWORD *)v27 = 136315138;
    v22(v17, (uint64_t)v19, v11);
    v28 = sub_2365B0080();
    *(_QWORD *)&v114[0] = sub_236468D88(v28, v29, v116);
    a1 = v98;
    sub_2365B04A0();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *))(v12 + 8))(v19, v11);
    v30 = v95;
    v23 = v96;
    _os_log_impl(&dword_23644B000, v96, v24, "Packing up outMessage: %s", v95, 0xCu);
    v31 = v97;
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v31, -1, -1);
    MEMORY[0x23B7F5254](v30, -1, -1);
  }
  else
  {
    (*(void (**)(char *, char *))(v12 + 8))(v19, v11);
  }

  v32 = v111;
  v33 = *v110;
  v34 = *(NSObject **)(v111 + 24);
  v35 = v109;
  v36 = sub_2365AF804();
  v109 = v37;
  if (!v35)
  {
    v38 = v36;
    v96 = v34;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4DE8);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2365B48E0;
    *(_QWORD *)(inited + 32) = 0x726576676B70;
    *(_QWORD *)(inited + 40) = 0xE600000000000000;
    v116[0] = 1;
    sub_2365B0548();
    *(_QWORD *)(inited + 88) = 25712;
    *(_QWORD *)(inited + 96) = 0xE200000000000000;
    v116[0] = v38;
    v116[1] = v109;
    v98 = v38;
    sub_236468CBC(v38, v109);
    v95 = (uint8_t *)sub_236468D00();
    sub_2365B0548();
    v40 = sub_236466830(inited);
    v119 = v40;
    v103(v104, a1, v11);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4DF8);
    v104 = v11;
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_23646A440(v114, (uint64_t)v116);
      v41 = v117;
      v42 = v118;
      __swift_project_boxed_opaque_existential_1(v116, v117);
      LOBYTE(v112) = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 32))(v41, v42);
      sub_2365B0548();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v112 = v40;
      sub_236469D24((uint64_t)v114, 0x7265766F746F7270, 0xE800000000000000, isUniquelyReferenced_nonNull_native);
      v119 = v112;
      swift_bridgeObjectRelease();
      v44 = v117;
      v45 = v118;
      __swift_project_boxed_opaque_existential_1(v116, v117);
      v46 = *(void (**)(uint64_t, uint64_t))(v45 + 24);
      v47 = v99;
      v48 = v45;
      v32 = v111;
      v46(v44, v48);
      v49 = sub_2365AF9C0();
      v51 = v50;
      (*(void (**)(char *, uint64_t))(v100 + 8))(v47, v101);
      v112 = v49;
      v113 = v51;
      sub_2365B0548();
      v52 = v119;
      v53 = swift_isUniquelyReferenced_nonNull_native();
      v112 = v52;
      sub_236469D24((uint64_t)v114, 0x646967736DLL, 0xE500000000000000, v53);
      v40 = v112;
      v119 = v112;
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
    }
    else
    {
      v115 = 0;
      memset(v114, 0, sizeof(v114));
      sub_236465998((uint64_t)v114, qword_2563E4E00);
    }
    v54 = v110;
    v55 = (void (**)(char *, uint64_t, char *))((char *)v110 + *(int *)(v32 + 40));
    v56 = (unint64_t)v55[1];
    v97 = 0;
    if (v56)
    {
      v57 = *v55;
      swift_bridgeObjectRetain_n();
      v58 = sub_2365AFBE8();
      v59 = sub_2365B038C();
      if (os_log_type_enabled(v58, v59))
      {
        v103 = v57;
        v60 = (uint8_t *)swift_slowAlloc();
        v61 = swift_slowAlloc();
        v116[0] = v61;
        *(_DWORD *)v60 = 136315138;
        swift_bridgeObjectRetain();
        *(_QWORD *)&v114[0] = sub_236468D88((uint64_t)v103, v56, v116);
        v57 = v103;
        v54 = v110;
        sub_2365B04A0();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_23644B000, v58, v59, "Attaching topic identifier: %s", v60, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x23B7F5254](v61, -1, -1);
        MEMORY[0x23B7F5254](v60, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      *(_QWORD *)&v114[0] = v57;
      *((_QWORD *)&v114[0] + 1) = v56;
      sub_2365B0548();
      v62 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v114[0] = v40;
      sub_236469D24((uint64_t)v116, 1684631668, 0xE400000000000000, v62);
      v119 = *(_QWORD *)&v114[0];
      swift_bridgeObjectRelease();
    }
    v63 = v107;
    sub_23646C4B0((uint64_t)v54 + *(int *)(v111 + 36), v107, &qword_2563E4DD8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v105 + 48))(v63, 1, v106) == 1)
    {
      v64 = &qword_2563E4DD8;
      v65 = v63;
    }
    else
    {
      v66 = v63;
      v67 = v102;
      sub_2364693D8(v66, (uint64_t)v102);
      v68 = v98;
      v69 = sub_23646A118((uint64_t)v67, v98, v109);
      if (v70 >> 60 == 15)
      {
        sub_236465998((uint64_t)v102, &qword_2563E4DE0);
LABEL_24:
        v85 = sub_2365AFBE8();
        v86 = sub_2365B038C();
        if (os_log_type_enabled(v85, v86))
        {
          v87 = (uint8_t *)swift_slowAlloc();
          v88 = swift_slowAlloc();
          v116[0] = v88;
          *(_DWORD *)v87 = 136315138;
          v111 = (uint64_t)(v87 + 4);
          swift_beginAccess();
          swift_bridgeObjectRetain();
          v89 = sub_2365AFF6C();
          v91 = v90;
          swift_bridgeObjectRelease();
          v112 = sub_236468D88(v89, v91, v116);
          v68 = v98;
          sub_2365B04A0();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_23644B000, v85, v86, "Returning packed up outDictionary: %s", v87, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x23B7F5254](v88, -1, -1);
          MEMORY[0x23B7F5254](v87, -1, -1);
        }

        swift_beginAccess();
        v92 = swift_bridgeObjectRetain();
        v33 = sub_236466F38(v92);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_236468D44(v68, v109);
        return v33;
      }
      v71 = (uint64_t)v69;
      v72 = v70;
      sub_23646A418((uint64_t)v69, v70);
      sub_236468CBC(v71, v72);
      v73 = sub_2365AFBE8();
      v74 = sub_2365B038C();
      if (os_log_type_enabled(v73, v74))
      {
        v75 = (uint8_t *)swift_slowAlloc();
        v111 = swift_slowAlloc();
        v116[0] = v111;
        *(_DWORD *)v75 = 136315138;
        v110 = (uint64_t *)(v75 + 4);
        sub_236468CBC(v71, v72);
        v76 = sub_2365AF90C();
        v78 = v77;
        sub_23646A42C(v71, v72);
        *(_QWORD *)&v114[0] = sub_236468D88(v76, v78, v116);
        sub_2365B04A0();
        swift_bridgeObjectRelease();
        sub_23646A42C(v71, v72);
        sub_23646A42C(v71, v72);
        _os_log_impl(&dword_23644B000, v73, v74, "Attaching signature: %s", v75, 0xCu);
        v79 = v111;
        swift_arrayDestroy();
        MEMORY[0x23B7F5254](v79, -1, -1);
        MEMORY[0x23B7F5254](v75, -1, -1);
      }
      else
      {
        sub_23646A42C(v71, v72);
        sub_23646A42C(v71, v72);
      }

      *(_QWORD *)&v114[0] = v71;
      *((_QWORD *)&v114[0] + 1) = v72;
      sub_236468CBC(v71, v72);
      sub_2365B0548();
      v80 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v114[0] = v119;
      sub_236469D24((uint64_t)v116, 26483, 0xE200000000000000, v80);
      v81 = *(_QWORD *)&v114[0];
      swift_bridgeObjectRelease();
      v82 = v102;
      v83 = v102[1];
      *(_QWORD *)&v114[0] = *v102;
      *((_QWORD *)&v114[0] + 1) = v83;
      swift_bridgeObjectRetain();
      sub_2365B0548();
      v84 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v114[0] = v81;
      sub_236469D24((uint64_t)v116, 0x64696D6B6773, 0xE600000000000000, v84);
      v119 = *(_QWORD *)&v114[0];
      swift_bridgeObjectRelease();
      sub_23646A42C(v71, v72);
      v64 = &qword_2563E4DE0;
      v65 = (uint64_t)v82;
    }
    sub_236465998(v65, v64);
    v68 = v98;
    goto LABEL_24;
  }
  return v33;
}

unint64_t sub_236466830(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5038);
  v2 = (_QWORD *)sub_2365B06BC();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_23646C4B0(v4, (uint64_t)&v16, &qword_2563E5058);
    v5 = v16;
    v6 = v17;
    result = sub_236468628(v16, v17);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = (uint64_t *)(v2[6] + 16 * result);
    *v9 = v5;
    v9[1] = v6;
    v10 = v2[7] + 40 * result;
    v11 = v18;
    v12 = v19;
    *(_QWORD *)(v10 + 32) = v20;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v2[2] = v15;
    v4 += 56;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_236466978(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5000);
  v2 = sub_2365B06BC();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_23646C4B0(v6, (uint64_t)&v15, (uint64_t *)&unk_2563E9550);
    v7 = v15;
    v8 = v16;
    result = sub_236468628(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_23646C38C(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_236466AAC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5008);
  v2 = (_QWORD *)sub_2365B06BC();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_236468628(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_236466BCC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4FF8);
  v2 = (_QWORD *)sub_2365B06BC();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    v8 = v7;
    result = sub_236468628(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_236466CE4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5020);
  v2 = sub_2365B06BC();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_23646C4B0(v6, (uint64_t)v15, &qword_2563E5028);
    result = sub_2364685F8((uint64_t)v15);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v9 = v3[6] + 40 * result;
    v10 = v15[0];
    v11 = v15[1];
    *(_QWORD *)(v9 + 32) = v16;
    *(_OWORD *)v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    result = (unint64_t)sub_23646C38C(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_236466E24(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  unint64_t result;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC790);
  v2 = (_QWORD *)sub_2365B06BC();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 1);
    v6 = *v4;
    v7 = (id)*(v4 - 2);
    swift_bridgeObjectRetain();
    result = sub_236468578((uint64_t)v7);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v2[6] + 8 * result) = v7;
    v10 = (_QWORD *)(v2[7] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_236466F38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[2];
  uint64_t v47;

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5020);
    v2 = sub_2365B06BC();
  }
  else
  {
    v2 = MEMORY[0x24BEE4B00];
  }
  v28 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v27 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27)
      goto LABEL_37;
    v14 = *(_QWORD *)(v28 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v27)
        goto LABEL_37;
      v14 = *(_QWORD *)(v28 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v27)
          goto LABEL_37;
        v14 = *(_QWORD *)(v28 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v27)
            goto LABEL_37;
          v14 = *(_QWORD *)(v28 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v19 = *v17;
    v18 = v17[1];
    sub_23646C3E8(*(_QWORD *)(a1 + 56) + 40 * v12, (uint64_t)v46);
    v44 = v19;
    v45 = v18;
    v41 = v46[0];
    v42 = v46[1];
    v43 = v47;
    v31 = v19;
    v32 = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    v29[0] = v41;
    v29[1] = v42;
    v30 = v43;
    swift_dynamicCast();
    v37 = v33;
    v38 = v34;
    v39 = v35;
    sub_23646C38C(&v36, v40);
    v33 = v37;
    v34 = v38;
    v35 = v39;
    sub_23646C38C(v40, v29);
    sub_23646C38C(v29, &v37);
    result = sub_2365B0530();
    v20 = -1 << *(_BYTE *)(v2 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v6 + 8 * (v21 >> 6))) != 0)
    {
      v9 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v6 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v6 + 8 * v22);
      }
      while (v26 == -1);
      v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    v10 = *(_QWORD *)(v2 + 48) + 40 * v9;
    *(_OWORD *)v10 = v33;
    *(_OWORD *)(v10 + 16) = v34;
    *(_QWORD *)(v10 + 32) = v35;
    result = (uint64_t)sub_23646C38C(&v37, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v9));
    ++*(_QWORD *)(v2 + 16);
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_23646C39C();
    return v2;
  }
  v14 = *(_QWORD *)(v28 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v27)
      goto LABEL_37;
    v14 = *(_QWORD *)(v28 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

unint64_t sub_23646731C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t result;
  int64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _OWORD *v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t *v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];

  v1 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5000);
    v2 = (_QWORD *)sub_2365B06BC();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v32 = v1 + 64;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v31 = (unint64_t)(63 - v3) >> 6;
  v6 = &v37;
  v7 = &v39;
  result = swift_bridgeObjectRetain();
  i = 0;
  v10 = MEMORY[0x24BEE4AD8] + 8;
  v11 = MEMORY[0x24BEE0D00];
  if (v5)
    goto LABEL_10;
LABEL_11:
  v20 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v20 >= v31)
    goto LABEL_32;
  v21 = *(_QWORD *)(v32 + 8 * v20);
  v22 = i + 1;
  if (!v21)
  {
    v22 = i + 2;
    if (i + 2 >= v31)
      goto LABEL_32;
    v21 = *(_QWORD *)(v32 + 8 * v22);
    if (!v21)
    {
      v22 = i + 3;
      if (i + 3 >= v31)
        goto LABEL_32;
      v21 = *(_QWORD *)(v32 + 8 * v22);
      if (!v21)
      {
        v22 = i + 4;
        if (i + 4 >= v31)
          goto LABEL_32;
        v21 = *(_QWORD *)(v32 + 8 * v22);
        if (!v21)
        {
          v23 = i + 5;
          if (i + 5 < v31)
          {
            v21 = *(_QWORD *)(v32 + 8 * v23);
            if (v21)
            {
              v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v22 = v23 + 1;
              if (__OFADD__(v23, 1))
                goto LABEL_36;
              if (v22 >= v31)
                break;
              v21 = *(_QWORD *)(v32 + 8 * v22);
              ++v23;
              if (v21)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_23646C39C();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  v34 = (v21 - 1) & v21;
  v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    v24 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v19);
    v35 = *v24;
    v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_23646C38C(v6, v7);
    sub_23646C38C(v7, v40);
    sub_23646C38C(v40, &v38);
    result = sub_236468628(v35, v36);
    v25 = result;
    if ((v26 & 1) != 0)
    {
      v33 = i;
      v12 = v7;
      v13 = v6;
      v14 = v1;
      v15 = v11;
      v16 = v10;
      v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v17 = v35;
      v17[1] = v36;
      v10 = v16;
      v11 = v15;
      v1 = v14;
      v6 = v13;
      v7 = v12;
      i = v33;
      v18 = (_OWORD *)(v2[7] + 32 * v25);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
      result = (unint64_t)sub_23646C38C(&v38, v18);
      v5 = v34;
      if (!v34)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v27 = (uint64_t *)(v2[6] + 16 * result);
    *v27 = v35;
    v27[1] = v36;
    result = (unint64_t)sub_23646C38C(&v38, (_OWORD *)(v2[7] + 32 * result));
    v28 = v2[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_34;
    v2[2] = v30;
    v5 = v34;
    if (!v34)
      goto LABEL_11;
LABEL_10:
    v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

char *sub_236467684(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4E58);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_2365AFE1C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4DE0);
  sub_23646C4B0((uint64_t)&v2[*(int *)(v13 + 36)], (uint64_t)v8, &qword_2563E4E58);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_236465998((uint64_t)v8, &qword_2563E4E58);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5040);
    sub_23646C460();
    swift_allocError();
    swift_willThrow();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    v16[0] = a1;
    v16[1] = a2;
    sub_23646C3A4();
    v2 = v12;
    v14 = sub_2365AFE04();
    if (!v3)
      v2 = (char *)v14;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return v2;
}

uint64_t sub_236467840@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = MessagePacker.pack(_:)(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t (*MessageUnpacker.decoder.modify())()
{
  return nullsub_1;
}

uint64_t (*MessageUnpacker.signingIdentity.modify())()
{
  return nullsub_1;
}

uint64_t _s12AppleIDSetup13MessagePackerV15topicIdentifierSSSgvg_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 40));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t _s12AppleIDSetup13MessagePackerV15topicIdentifierSSSgvs_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3 + 40));
  result = swift_bridgeObjectRelease();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*MessageUnpacker.topicIdentifier.modify())()
{
  return nullsub_1;
}

uint64_t MessageUnpacker.init(decoder:signingIdentity:topicIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  return sub_236467924(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for MessageUnpacker, a7);
}

uint64_t sub_236467924@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(_QWORD, uint64_t, uint64_t)@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;

  v13 = a7(0, a5, a6);
  v14 = (uint64_t)a8 + *(int *)(v13 + 36);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4DE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = (_QWORD *)((char *)a8 + *(int *)(v13 + 40));
  *v16 = 0;
  v16[1] = 0;
  *a8 = a1;
  sub_236465BB8(a2, v14);
  result = swift_bridgeObjectRelease();
  *v16 = a3;
  v16[1] = a4;
  return result;
}

uint64_t MessageUnpacker.unpack(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint8_t *v48;
  uint8_t *v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  unint64_t v54;
  char v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  _QWORD v82[2];
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92[5];
  __int128 v93;
  __int128 v94;
  uint64_t v95;

  v5 = v4;
  v6 = v3;
  v86 = a3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4DD8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4DE0);
  v87 = *(_QWORD *)(v12 - 8);
  v88 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v95 = (uint64_t)v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2563E42B0 != -1)
    swift_once();
  v14 = sub_2365AFC00();
  v15 = __swift_project_value_buffer(v14, (uint64_t)qword_2563E4DC0);
  swift_bridgeObjectRetain_n();
  v16 = sub_2365AFBE8();
  v17 = sub_2365B038C();
  v18 = os_log_type_enabled(v16, v17);
  v89 = v11;
  if (v18)
  {
    v19 = swift_slowAlloc();
    v83 = v6;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc();
    v85 = a2;
    v22 = v21;
    v92[0] = v21;
    v82[1] = v15;
    *(_DWORD *)v20 = 136315138;
    v82[0] = v20 + 4;
    swift_bridgeObjectRetain();
    v84 = v4;
    v23 = sub_2365AFF6C();
    v25 = v24;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v93 = sub_236468D88(v23, v25, v92);
    sub_2365B04A0();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23644B000, v16, v17, "Unpacking inDictionary: %s", v20, 0xCu);
    v5 = v84;
    swift_arrayDestroy();
    v26 = v22;
    a2 = v85;
    MEMORY[0x23B7F5254](v26, -1, -1);
    v27 = v20;
    v6 = v83;
    MEMORY[0x23B7F5254](v27, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v90 = 25712;
  v91 = 0xE200000000000000;
  sub_2365B0548();
  if (*(_QWORD *)(a1 + 16) && (v28 = sub_2364685F8((uint64_t)v92), (v29 & 1) != 0))
  {
    sub_23646A9F4(*(_QWORD *)(a1 + 56) + 32 * v28, (uint64_t)&v93);
  }
  else
  {
    v93 = 0u;
    v94 = 0u;
  }
  sub_23646A464((uint64_t)v92);
  if (!*((_QWORD *)&v94 + 1))
  {
    sub_236465998((uint64_t)&v93, (uint64_t *)&unk_2542A8320);
    goto LABEL_17;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_17:
    v36 = sub_2365AFBE8();
    v37 = sub_2365B0398();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v38 = 0;
      _os_log_impl(&dword_23644B000, v36, v37, "Failed to unpack message due to missing payload", v38, 2u);
      MEMORY[0x23B7F5254](v38, -1, -1);
    }

    v40 = type metadata accessor for MessageUnpacker.Failure(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v39);
    MEMORY[0x23B7F5164](&protocol conformance descriptor for MessageUnpacker<A>.Failure, v40);
    swift_allocError();
    *v41 = 0u;
    v41[1] = 0u;
    return swift_willThrow();
  }
  v30 = v90;
  v85 = v91;
  v31 = (uint64_t *)(v6 + *(int *)(a2 + 40));
  v32 = v31[1];
  if (v32)
  {
    v33 = *v31;
    v90 = 1684631668;
    v91 = 0xE400000000000000;
    swift_bridgeObjectRetain();
    sub_2365B0548();
    if (*(_QWORD *)(a1 + 16) && (v34 = sub_2364685F8((uint64_t)v92), (v35 & 1) != 0))
    {
      sub_23646A9F4(*(_QWORD *)(a1 + 56) + 32 * v34, (uint64_t)&v93);
    }
    else
    {
      v93 = 0u;
      v94 = 0u;
    }
    sub_23646A464((uint64_t)v92);
    if (*((_QWORD *)&v94 + 1))
    {
      if ((swift_dynamicCast() & 1) != 0)
      {
        v43 = v91;
        if (v33 == v90 && v32 == v91 || (v83 = v90, (sub_2365B08CC() & 1) != 0))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v44 = sub_2365AFBE8();
          v45 = sub_2365B038C();
          if (os_log_type_enabled(v44, v45))
          {
            v46 = a1;
            v47 = v6;
            v48 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v48 = 0;
            _os_log_impl(&dword_23644B000, v44, v45, "Verified that topic identifier for inDictionary matches, unpacking will proceed", v48, 2u);
            v49 = v48;
            v6 = v47;
            a1 = v46;
            MEMORY[0x23B7F5254](v49, -1, -1);
          }

          goto LABEL_29;
        }
        v71 = v33;
        swift_bridgeObjectRetain_n();
        v95 = v43;
        swift_bridgeObjectRetain_n();
        v72 = sub_2365AFBE8();
        v73 = sub_2365B0380();
        if (os_log_type_enabled(v72, v73))
        {
          v74 = swift_slowAlloc();
          v88 = swift_slowAlloc();
          v92[0] = v88;
          *(_DWORD *)v74 = 136315394;
          v89 = (char *)v30;
          swift_bridgeObjectRetain();
          v84 = v71;
          *(_QWORD *)&v93 = sub_236468D88(v71, v32, v92);
          sub_2365B04A0();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v74 + 12) = 2080;
          v75 = v95;
          swift_bridgeObjectRetain();
          v76 = v83;
          *(_QWORD *)&v93 = sub_236468D88(v83, v75, v92);
          v30 = (uint64_t)v89;
          sub_2365B04A0();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_23644B000, v72, v73, "Failed to unpack due to topic identifiers not matching: %s != %s", (uint8_t *)v74, 0x16u);
          v77 = v88;
          swift_arrayDestroy();
          MEMORY[0x23B7F5254](v77, -1, -1);
          MEMORY[0x23B7F5254](v74, -1, -1);

          v79 = v84;
        }
        else
        {

          v75 = v95;
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          v79 = v71;
          v76 = v83;
        }
        v80 = type metadata accessor for MessageUnpacker.Failure(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v78);
        MEMORY[0x23B7F5164](&protocol conformance descriptor for MessageUnpacker<A>.Failure, v80);
        swift_allocError();
        *v81 = v79;
        v81[1] = v32;
        v81[2] = v76;
        v81[3] = v75;
LABEL_41:
        swift_willThrow();
        return sub_236468D44(v30, v85);
      }
    }
    else
    {
      sub_236465998((uint64_t)&v93, (uint64_t *)&unk_2542A8320);
    }
    swift_bridgeObjectRetain();
    v56 = sub_2365AFBE8();
    v57 = sub_2365B0398();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = swift_slowAlloc();
      v84 = v33;
      v59 = (uint8_t *)v58;
      v60 = swift_slowAlloc();
      v92[0] = v60;
      *(_DWORD *)v59 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v93 = sub_236468D88(v84, v32, v92);
      sub_2365B04A0();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_23644B000, v56, v57, "Failed to unpack due to missing topic id when expected: %s", v59, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7F5254](v60, -1, -1);
      MEMORY[0x23B7F5254](v59, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v62 = type metadata accessor for MessageUnpacker.Failure(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v61);
    MEMORY[0x23B7F5164](&protocol conformance descriptor for MessageUnpacker<A>.Failure, v62);
    swift_allocError();
    *(_OWORD *)v63 = xmmword_2365B48F0;
    *(_QWORD *)(v63 + 16) = 0;
    *(_QWORD *)(v63 + 24) = 0;
    goto LABEL_41;
  }
LABEL_29:
  v50 = (uint64_t)v89;
  sub_23646C4B0(v6 + *(int *)(a2 + 36), (uint64_t)v89, &qword_2563E4DD8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v87 + 48))(v50, 1, v88) == 1)
  {
    sub_236465998(v50, &qword_2563E4DD8);
  }
  else
  {
    sub_2364693D8(v50, v95);
    v51 = sub_2365AFBE8();
    v52 = sub_2365B038C();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v53 = 0;
      _os_log_impl(&dword_23644B000, v51, v52, "Incoming signature will be validated", v53, 2u);
      MEMORY[0x23B7F5254](v53, -1, -1);
    }

    *(_QWORD *)&v93 = 26483;
    *((_QWORD *)&v93 + 1) = 0xE200000000000000;
    sub_2365B0548();
    if (*(_QWORD *)(a1 + 16) && (v54 = sub_2364685F8((uint64_t)v92), (v55 & 1) != 0))
    {
      sub_23646A9F4(*(_QWORD *)(a1 + 56) + 32 * v54, (uint64_t)&v93);
    }
    else
    {
      v93 = 0u;
      v94 = 0u;
    }
    sub_23646A464((uint64_t)v92);
    if (*((_QWORD *)&v94 + 1))
    {
      v64 = swift_dynamicCast();
      if (v64)
        v65 = v90;
      else
        v65 = 0;
      if (v64)
        v66 = v91;
      else
        v66 = 0xF000000000000000;
    }
    else
    {
      sub_236465998((uint64_t)&v93, (uint64_t *)&unk_2542A8320);
      v65 = 0;
      v66 = 0xF000000000000000;
    }
    v67 = *(_QWORD *)(a2 + 16);
    v68 = *(_QWORD *)(a2 + 24);
    v69 = v95;
    sub_23646A578(v65, v66, v30, v85, v95, v67, v68);
    sub_236465998(v69, &qword_2563E4DE0);
    if (v5)
    {
      sub_236468D44(v30, v85);
      return sub_23646A42C(v65, v66);
    }
    sub_23646A42C(v65, v66);
  }
  v70 = v85;
  sub_2365AF7E0();
  return sub_236468D44(v30, v70);
}

uint64_t sub_23646851C@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return MessageUnpacker.unpack(_:)(*a1, a2, a3);
}

uint64_t sub_236468534(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_236468544(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

unint64_t sub_236468578(uint64_t a1)
{
  uint64_t v2;

  sub_2365B005C();
  sub_2365B09E0();
  sub_2365B008C();
  v2 = sub_2365B0A34();
  swift_bridgeObjectRelease();
  return sub_236468734(a1, v2);
}

unint64_t sub_2364685F8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2365B0530();
  return sub_2364688A8(a1, v2);
}

unint64_t sub_236468628(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_2365B09E0();
  sub_2365B008C();
  v4 = sub_2365B0A34();
  return sub_23646896C(a1, a2, v4);
}

unint64_t sub_23646868C(unsigned __int8 a1)
{
  uint64_t v2;

  sub_2365B09E0();
  sub_2365B09F8();
  v2 = sub_2365B0A34();
  return sub_236468A4C(a1, v2);
}

unint64_t sub_2364686E4(uint64_t a1)
{
  uint64_t v2;

  sub_2365B0674();
  v2 = sub_2365AFFCC();
  return sub_236468AEC(a1, v2);
}

unint64_t sub_236468734(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = sub_2365B005C();
    v8 = v7;
    if (v6 == sub_2365B005C() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = sub_2365B005C();
          v15 = v14;
          if (v13 == sub_2365B005C() && v15 == v16)
            break;
          v18 = sub_2365B08CC();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_2364688A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_23646C3E8(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x23B7F454C](v9, a1);
      sub_23646A464((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_23646896C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_2365B08CC() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_2365B08CC() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_236468A4C(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_236468AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = sub_2365B0674();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_2365B0014();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

uint64_t sub_236468C14(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_236468C34(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a4();
  sub_236468D88(v6, v7, a3);
  v8 = *a1 + 8;
  sub_2365B04A0();
  result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_236468CBC(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

unint64_t sub_236468D00()
{
  unint64_t result;

  result = qword_2563E4DF0;
  if (!qword_2563E4DF0)
  {
    result = MEMORY[0x23B7F5164](MEMORY[0x24BDCDE08], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_2563E4DF0);
  }
  return result;
}

uint64_t sub_236468D44(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t sub_236468D88(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_236468E58(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_23646A9F4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_23646A9F4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_236468E58(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_2365B04AC();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_236469010(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_2365B05D8();
  if (!v8)
  {
    sub_2365B0680();
    __break(1u);
LABEL_17:
    result = sub_2365B06C8();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_236469010(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_2364690A4(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23646927C(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_23646927C(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_2364690A4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_236469218(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_2365B0584();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_2365B0680();
      __break(1u);
LABEL_10:
      v2 = sub_2365B00BC();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_2365B06C8();
    __break(1u);
LABEL_14:
    result = sub_2365B0680();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *sub_236469218(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5050);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_23646927C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5050);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2365B06C8();
  __break(1u);
  return result;
}

_BYTE **sub_2364693C8(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

uint64_t sub_2364693D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4DE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_236469420(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5038);
  v42 = a2;
  v6 = sub_2365B06B0();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_22;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v40)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v41 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v40)
        goto LABEL_34;
      v23 = *(_QWORD *)(v41 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v40)
        {
LABEL_34:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = *(_QWORD *)(v41 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v13 >= v40)
              goto LABEL_34;
            v23 = *(_QWORD *)(v41 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v13 = v24;
      }
    }
LABEL_21:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_22:
    v25 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v27 = *v25;
    v26 = v25[1];
    v28 = *(_QWORD *)(v5 + 56) + 40 * v20;
    if ((v42 & 1) != 0)
    {
      v29 = *(_OWORD *)v28;
      v30 = *(_OWORD *)(v28 + 16);
      v45 = *(_QWORD *)(v28 + 32);
      v43 = v29;
      v44 = v30;
    }
    else
    {
      sub_23646C3E8(v28, (uint64_t)&v43);
      swift_bridgeObjectRetain();
    }
    sub_2365B09E0();
    sub_2365B008C();
    result = sub_2365B0A34();
    v31 = -1 << *(_BYTE *)(v7 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v11 + 8 * (v32 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v11 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v11 + 8 * v33);
      }
      while (v37 == -1);
      v14 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
    *v15 = v27;
    v15[1] = v26;
    v16 = *(_QWORD *)(v7 + 56) + 40 * v14;
    v17 = v43;
    v18 = v44;
    *(_QWORD *)(v16 + 32) = v45;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v22 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v22, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_236469754(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4FF8);
  v38 = a2;
  v6 = sub_2365B06B0();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_33;
      v23 = *(_QWORD *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v23 = *(_QWORD *)(v37 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v33 = v32;
    }
    sub_2365B09E0();
    sub_2365B008C();
    result = sub_2365B0A34();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_236469A60(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5018);
  result = sub_2365B06B0();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v30 = a2;
    v8 = 0;
    v31 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v12)
          goto LABEL_31;
        v18 = v31[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_31;
          v18 = v31[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_31:
              if ((v30 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v31 = -1 << v29;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v31[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_40;
                if (v8 >= v12)
                  goto LABEL_31;
                v18 = v31[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16);
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
      sub_2365B09E0();
      sub_2365B09F8();
      result = sub_2365B0A34();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v14) = v20;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v14) = v21;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

uint64_t sub_236469D24(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v5 = v4;
  v10 = *v4;
  v12 = sub_236468628(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_2364D111C();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      return sub_23646C424(a1, v18[7] + 40 * v12);
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    v23 = v18[7] + 40 * v12;
    v24 = *(_OWORD *)a1;
    v25 = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(v23 + 32) = *(_QWORD *)(a1 + 32);
    *(_OWORD *)v23 = v24;
    *(_OWORD *)(v23 + 16) = v25;
    v26 = v18[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (!v27)
    {
      v18[2] = v28;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_236469420(v15, a4 & 1);
  v20 = sub_236468628(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      return sub_23646C424(a1, v18[7] + 40 * v12);
    goto LABEL_11;
  }
LABEL_15:
  result = sub_2365B0944();
  __break(1u);
  return result;
}

void sub_236469E90(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_236468628(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_2364D1310();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];

      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain();
      return;
    }
    goto LABEL_14;
  }
  sub_236469754(v15, a4 & 1);
  v20 = sub_236468628(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  sub_2365B0944();
  __break(1u);
}

uint64_t sub_236469FEC(uint64_t a1, unsigned __int8 a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v4 = v3;
  v8 = *v3;
  v10 = sub_23646868C(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_2364D14C0();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v16[7] + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = a2;
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v18 = v16[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (!v19)
    {
      v16[2] = v20;
      return result;
    }
    goto LABEL_14;
  }
  sub_236469A60(result, a3 & 1);
  result = sub_23646868C(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5010);
  result = sub_2365B0944();
  __break(1u);
  return result;
}

char *sub_23646A118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4DE0);
  v6 = MEMORY[0x24BDAC7A8](v5);
  MEMORY[0x24BDAC7A8](v6);
  return sub_236467684(a2, a3);
}

uint64_t sub_23646A418(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_236468CBC(a1, a2);
  return a1;
}

uint64_t sub_23646A42C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_236468D44(a1, a2);
  return a1;
}

uint64_t sub_23646A440(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t type metadata accessor for MessageUnpacker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MessageUnpacker);
}

uint64_t sub_23646A464(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

uint64_t type metadata accessor for MessageUnpacker.Failure(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MessageUnpacker.Failure);
}

unint64_t sub_23646A4A4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *i;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5018);
    v3 = (_QWORD *)sub_2365B06BC();
    for (i = (_QWORD *)(a1 + 40); ; i += 2)
    {
      v5 = *((_BYTE *)i - 8);
      v6 = *i;
      result = sub_23646868C(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_BYTE *)(v3[6] + result) = v5;
      *(_QWORD *)(v3[7] + 8 * result) = v6;
      v9 = v3[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v3[2] = v11;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

void sub_23646A578(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v46 = a7;
  v40 = a4;
  v41 = a6;
  v39 = a3;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4E60);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_2365AFE4C();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 >> 60 == 15)
  {
    if (qword_2563E42B0 != -1)
      swift_once();
    v17 = sub_2365AFC00();
    __swift_project_value_buffer(v17, (uint64_t)qword_2563E4DC0);
    v18 = sub_2365AFBE8();
    v19 = sub_2365B0398();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_23644B000, v18, v19, "** Incoming message was not signed (but expected) **", v20, 2u);
      MEMORY[0x23B7F5254](v20, -1, -1);
    }

    v22 = type metadata accessor for MessageUnpacker.Failure(0, v41, v46, v21);
    MEMORY[0x23B7F5164](&protocol conformance descriptor for MessageUnpacker<A>.Failure, v22);
    swift_allocError();
    *(_OWORD *)v23 = xmmword_2365B4910;
    *(_QWORD *)(v23 + 16) = 0;
    *(_QWORD *)(v23 + 24) = 0;
    swift_willThrow();
    return;
  }
  v24 = a2;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4DE0);
  sub_23646C4B0(a5 + *(int *)(v25 + 40), (uint64_t)v12, &qword_2563E4E60);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_236468CBC(a1, a2);
    sub_236465998((uint64_t)v12, &qword_2563E4E60);
LABEL_15:
    if (qword_2563E42B0 != -1)
      swift_once();
    v31 = sub_2365AFC00();
    __swift_project_value_buffer(v31, (uint64_t)qword_2563E4DC0);
    v32 = sub_2365AFBE8();
    v33 = sub_2365B0398();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v34 = 0;
      _os_log_impl(&dword_23644B000, v32, v33, "** Incoming message signature is not valid (and enforced) **", v34, 2u);
      MEMORY[0x23B7F5254](v34, -1, -1);
    }

    v36 = type metadata accessor for MessageUnpacker.Failure(0, v41, v46, v35);
    MEMORY[0x23B7F5164](&protocol conformance descriptor for MessageUnpacker<A>.Failure, v36);
    swift_allocError();
    *(_OWORD *)v37 = xmmword_2365B4900;
    *(_QWORD *)(v37 + 16) = 0;
    *(_QWORD *)(v37 + 24) = 0;
    swift_willThrow();
    sub_23646A42C(a1, v24);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
  v44 = v39;
  v45 = v40;
  v42 = a1;
  v43 = a2;
  sub_236468CBC(a1, a2);
  sub_23646C3A4();
  v26 = sub_2365AFE28();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  if ((v26 & 1) == 0)
    goto LABEL_15;
  if (qword_2563E42B0 != -1)
    swift_once();
  v27 = sub_2365AFC00();
  __swift_project_value_buffer(v27, (uint64_t)qword_2563E4DC0);
  v28 = sub_2365AFBE8();
  v29 = sub_2365B038C();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v30 = 0;
    _os_log_impl(&dword_23644B000, v28, v29, "Validated signature", v30, 2u);
    MEMORY[0x23B7F5254](v30, -1, -1);
  }
  sub_23646A42C(a1, v24);

}

uint64_t sub_23646A9F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_23646AA30(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t dispatch thunk of MessagePacking.pack(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t sub_23646AA50()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23646AA74()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23646AA84()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23646AA94()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2563E4EF0[0])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2563E4DE0);
    v0 = sub_2365B047C();
    if (!v1)
      atomic_store(v0, qword_2563E4EF0);
  }
}

void sub_23646AAEC()
{
  unint64_t v0;

  sub_23646AA94();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t *sub_23646AB6C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char *__dst;
  uint64_t v39;
  _QWORD *v40;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v8 = *(int *)(a3 + 36);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    swift_retain();
    v11 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_2563E4DE0);
    v12 = *((_QWORD *)v11 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4DD8);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v39 = v12;
      v40 = v9;
      v14 = v10[1];
      *v9 = *v10;
      v9[1] = v14;
      *((_BYTE *)v9 + 16) = *((_BYTE *)v10 + 16);
      v15 = v11[9];
      __dst = (char *)v9 + v15;
      v16 = (char *)v10 + v15;
      v17 = sub_2365AFE1C();
      v18 = *(_QWORD *)(v17 - 8);
      v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
      swift_bridgeObjectRetain();
      if (v19(v16, 1, v17))
      {
        v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4E58);
        memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(__dst, v16, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
      }
      v21 = v11[10];
      v22 = (char *)v40 + v21;
      v23 = (char *)v10 + v21;
      v24 = sub_2365AFE4C();
      v25 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4E60);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
      v27 = v11[11];
      v28 = (char *)v40 + v27;
      v29 = (char *)v10 + v27;
      v30 = sub_2365AFE88();
      v31 = *(_QWORD *)(v30 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      {
        v32 = __swift_instantiateConcreteTypeFromMangledName(qword_2563E4E68);
        memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v28, v29, v30);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v39 + 56))(v40, 0, 1, v11);
    }
    v33 = *(int *)(a3 + 40);
    v34 = (uint64_t *)((char *)a1 + v33);
    v35 = (uint64_t *)((char *)a2 + v33);
    v36 = v35[1];
    *v34 = *v35;
    v34[1] = v36;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_23646AE30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  swift_release();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_2563E4DE0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v5 - 1) + 48))(v4, 1, v5))
  {
    swift_bridgeObjectRelease();
    v6 = v4 + v5[9];
    v7 = sub_2365AFE1C();
    v8 = *(_QWORD *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    v9 = v4 + v5[10];
    v10 = sub_2365AFE4C();
    v11 = *(_QWORD *)(v10 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    v12 = v4 + v5[11];
    v13 = sub_2365AFE88();
    v14 = *(_QWORD *)(v13 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }
  return swift_bridgeObjectRelease();
}

_QWORD *sub_23646AF78(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  char *__dst;
  uint64_t v37;
  uint64_t v38;

  v3 = a3;
  *a1 = *a2;
  v6 = *(int *)(a3 + 36);
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  swift_retain();
  v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_2563E4DE0);
  v10 = *((_QWORD *)v9 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4DD8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v37 = v10;
    v38 = v3;
    v12 = v8[1];
    *v7 = *v8;
    v7[1] = v12;
    *((_BYTE *)v7 + 16) = *((_BYTE *)v8 + 16);
    v13 = v9[9];
    __dst = (char *)v7 + v13;
    v14 = (char *)v8 + v13;
    v15 = sub_2365AFE1C();
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    swift_bridgeObjectRetain();
    if (v17(v14, 1, v15))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4E58);
      memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    v19 = v9[10];
    v20 = (char *)v7 + v19;
    v21 = (char *)v8 + v19;
    v22 = sub_2365AFE4C();
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4E60);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    v25 = v9[11];
    v26 = (char *)v7 + v25;
    v27 = (char *)v8 + v25;
    v28 = sub_2365AFE88();
    v29 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName(qword_2563E4E68);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v26, v27, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    v3 = v38;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v37 + 56))(v7, 0, 1, v9);
  }
  v31 = *(int *)(v3 + 40);
  v32 = (_QWORD *)((char *)a1 + v31);
  v33 = (_QWORD *)((char *)a2 + v31);
  v34 = v33[1];
  *v32 = *v33;
  v32[1] = v34;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_23646B214(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, int *);
  int v12;
  int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  size_t v20;
  void *v21;
  char *v22;
  uint64_t v23;
  void *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(void *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  void *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(void *, uint64_t, uint64_t);
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(void *, uint64_t, uint64_t);
  int v63;
  int v64;
  void *__dst;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;

  v4 = a2;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = *(int *)(a3 + 36);
  v7 = (uint64_t)a1 + v6;
  v8 = (char *)v4 + v6;
  v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_2563E4DE0);
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11((uint64_t)v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_236465998(v7, &qword_2563E4DE0);
      goto LABEL_7;
    }
    v67 = a3;
    v69 = v4;
    *(_QWORD *)v7 = *(_QWORD *)v8;
    *(_QWORD *)(v7 + 8) = *((_QWORD *)v8 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(v7 + 16) = v8[16];
    v23 = v9[9];
    v24 = (void *)(v7 + v23);
    v25 = &v8[v23];
    v26 = sub_2365AFE1C();
    v27 = *(_QWORD *)(v26 - 8);
    v28 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
    v29 = v28(v24, 1, v26);
    v30 = v28(v25, 1, v26);
    if (v29)
    {
      if (!v30)
      {
        (*(void (**)(void *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
        goto LABEL_24;
      }
    }
    else
    {
      if (!v30)
      {
        (*(void (**)(void *, char *, uint64_t))(v27 + 24))(v24, v25, v26);
LABEL_24:
        v48 = v9[10];
        v49 = (void *)(v7 + v48);
        v50 = &v8[v48];
        v51 = sub_2365AFE4C();
        v52 = *(_QWORD *)(v51 - 8);
        v53 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v52 + 48);
        v54 = v53(v49, 1, v51);
        v55 = v53(v50, 1, v51);
        if (v54)
        {
          if (!v55)
          {
            (*(void (**)(void *, char *, uint64_t))(v52 + 16))(v49, v50, v51);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
LABEL_30:
            v57 = v9[11];
            v58 = (void *)(v7 + v57);
            v59 = &v8[v57];
            v60 = sub_2365AFE88();
            v61 = *(_QWORD *)(v60 - 8);
            v62 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v61 + 48);
            v63 = v62(v58, 1, v60);
            v64 = v62(v59, 1, v60);
            a3 = v67;
            v4 = v69;
            if (v63)
            {
              if (!v64)
              {
                (*(void (**)(void *, char *, uint64_t))(v61 + 16))(v58, v59, v60);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
                goto LABEL_20;
              }
            }
            else
            {
              if (!v64)
              {
                (*(void (**)(void *, char *, uint64_t))(v61 + 24))(v58, v59, v60);
                goto LABEL_20;
              }
              (*(void (**)(void *, uint64_t))(v61 + 8))(v58, v60);
            }
            v20 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(qword_2563E4E68) - 8) + 64);
            v21 = v58;
            v22 = v59;
            goto LABEL_8;
          }
        }
        else
        {
          if (!v55)
          {
            (*(void (**)(void *, char *, uint64_t))(v52 + 24))(v49, v50, v51);
            goto LABEL_30;
          }
          (*(void (**)(void *, uint64_t))(v52 + 8))(v49, v51);
        }
        v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4E60);
        memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
        goto LABEL_30;
      }
      (*(void (**)(void *, uint64_t))(v27 + 8))(v24, v26);
    }
    v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4E58);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_24;
  }
  if (v13)
  {
LABEL_7:
    v20 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2563E4DD8) - 8) + 64);
    v21 = (void *)v7;
    v22 = v8;
LABEL_8:
    memcpy(v21, v22, v20);
    goto LABEL_20;
  }
  v66 = a3;
  v68 = v4;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_QWORD *)(v7 + 8) = *((_QWORD *)v8 + 1);
  *(_BYTE *)(v7 + 16) = v8[16];
  v14 = v9[9];
  __dst = (void *)(v7 + v14);
  v15 = &v8[v14];
  v16 = sub_2365AFE1C();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  swift_bridgeObjectRetain();
  if (v18(v15, 1, v16))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4E58);
    memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v17 + 16))(__dst, v15, v16);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
  }
  v31 = v9[10];
  v32 = (void *)(v7 + v31);
  v33 = &v8[v31];
  v34 = sub_2365AFE4C();
  v35 = *(_QWORD *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4E60);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  a3 = v66;
  v37 = v9[11];
  v38 = (void *)(v7 + v37);
  v39 = &v8[v37];
  v40 = sub_2365AFE88();
  v41 = *(_QWORD *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    v42 = __swift_instantiateConcreteTypeFromMangledName(qword_2563E4E68);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
  }
  v4 = v68;
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
LABEL_20:
  v43 = *(int *)(a3 + 40);
  v44 = (_QWORD *)((char *)a1 + v43);
  v45 = (_QWORD *)((char *)v4 + v43);
  *v44 = *v45;
  v44[1] = v45[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *sub_23646B78C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;

  *a1 = *a2;
  v6 = *(int *)(a3 + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_2563E4DE0);
  v10 = *((_QWORD *)v9 - 1);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4DD8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v31 = v10;
    *(_OWORD *)v7 = *(_OWORD *)v8;
    v7[16] = v8[16];
    v12 = v9[9];
    v13 = &v7[v12];
    v14 = &v8[v12];
    v15 = sub_2365AFE1C();
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4E58);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v18 = v9[10];
    v19 = &v7[v18];
    v20 = &v8[v18];
    v21 = sub_2365AFE4C();
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4E60);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    v24 = v9[11];
    v25 = &v7[v24];
    v26 = &v8[v24];
    v27 = sub_2365AFE88();
    v28 = *(_QWORD *)(v27 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(qword_2563E4E68);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v28 + 32))(v25, v26, v27);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v31 + 56))(v7, 0, 1, v9);
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 40)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 40));
  return a1;
}

_QWORD *sub_23646BA08(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int *v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, int *);
  int v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(_BYTE *, uint64_t, uint64_t);
  int v28;
  size_t v29;
  void *v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(_BYTE *, uint64_t, uint64_t);
  int v49;
  size_t v50;
  void *v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(_BYTE *, uint64_t, uint64_t);
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;

  *a1 = *a2;
  swift_release();
  v6 = *(int *)(a3 + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_2563E4DE0);
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_236465998((uint64_t)v7, &qword_2563E4DE0);
      goto LABEL_7;
    }
    v70 = a3;
    v21 = *((_QWORD *)v8 + 1);
    *(_QWORD *)v7 = *(_QWORD *)v8;
    *((_QWORD *)v7 + 1) = v21;
    swift_bridgeObjectRelease();
    v7[16] = v8[16];
    v22 = v9[9];
    v23 = &v7[v22];
    v24 = &v8[v22];
    v25 = sub_2365AFE1C();
    v26 = *(_QWORD *)(v25 - 8);
    v27 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v26 + 48);
    v67 = v23;
    LODWORD(v23) = v27(v23, 1, v25);
    v28 = v27(v24, 1, v25);
    if ((_DWORD)v23)
    {
      if (v28)
      {
        v29 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2563E4E58) - 8) + 64);
        v30 = v67;
LABEL_21:
        memcpy(v30, v24, v29);
        goto LABEL_24;
      }
      (*(void (**)(void *, _BYTE *, uint64_t))(v26 + 32))(v67, v24, v25);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v67, 0, 1, v25);
    }
    else
    {
      if (v28)
      {
        (*(void (**)(void *, uint64_t))(v26 + 8))(v67, v25);
        v29 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2563E4E58) - 8) + 64);
        v30 = v67;
        goto LABEL_21;
      }
      (*(void (**)(void *, _BYTE *, uint64_t))(v26 + 40))(v67, v24, v25);
    }
LABEL_24:
    v43 = v9[10];
    v44 = &v7[v43];
    v45 = &v8[v43];
    v46 = sub_2365AFE4C();
    v47 = *(_QWORD *)(v46 - 8);
    v48 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v47 + 48);
    v68 = v44;
    LODWORD(v44) = v48(v44, 1, v46);
    v49 = v48(v45, 1, v46);
    if ((_DWORD)v44)
    {
      if (v49)
      {
        v50 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2563E4E60) - 8) + 64);
        v51 = v68;
LABEL_29:
        memcpy(v51, v45, v50);
        goto LABEL_32;
      }
      (*(void (**)(void *, _BYTE *, uint64_t))(v47 + 32))(v68, v45, v46);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v68, 0, 1, v46);
    }
    else
    {
      if (v49)
      {
        (*(void (**)(void *, uint64_t))(v47 + 8))(v68, v46);
        v50 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2563E4E60) - 8) + 64);
        v51 = v68;
        goto LABEL_29;
      }
      (*(void (**)(void *, _BYTE *, uint64_t))(v47 + 40))(v68, v45, v46);
    }
LABEL_32:
    v52 = v9[11];
    v53 = &v7[v52];
    v54 = &v8[v52];
    v55 = sub_2365AFE88();
    v56 = *(_QWORD *)(v55 - 8);
    v57 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v56 + 48);
    v58 = v57(v53, 1, v55);
    v59 = v57(v54, 1, v55);
    if (v58)
    {
      if (!v59)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v56 + 32))(v53, v54, v55);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
LABEL_38:
        a3 = v70;
        goto LABEL_39;
      }
    }
    else
    {
      if (!v59)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v56 + 40))(v53, v54, v55);
        goto LABEL_38;
      }
      (*(void (**)(_BYTE *, uint64_t))(v56 + 8))(v53, v55);
    }
    v60 = __swift_instantiateConcreteTypeFromMangledName(qword_2563E4E68);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_38;
  }
  if (v13)
  {
LABEL_7:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4DD8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_39;
  }
  v69 = a3;
  *(_OWORD *)v7 = *(_OWORD *)v8;
  v7[16] = v8[16];
  v14 = v9[9];
  v15 = &v7[v14];
  v16 = &v8[v14];
  v17 = sub_2365AFE1C();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4E58);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  v31 = v9[10];
  v32 = &v7[v31];
  v33 = &v8[v31];
  v34 = sub_2365AFE4C();
  v35 = *(_QWORD *)(v34 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4E60);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v35 + 32))(v32, v33, v34);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  v37 = v9[11];
  v38 = &v7[v37];
  v39 = &v8[v37];
  v40 = sub_2365AFE88();
  v41 = *(_QWORD *)(v40 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    v42 = __swift_instantiateConcreteTypeFromMangledName(qword_2563E4E68);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v41 + 32))(v38, v39, v40);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
  }
  a3 = v69;
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
LABEL_39:
  v61 = *(int *)(a3 + 40);
  v62 = (_QWORD *)((char *)a1 + v61);
  v63 = (_QWORD *)((char *)a2 + v61);
  v65 = *v63;
  v64 = v63[1];
  *v62 = v65;
  v62[1] = v64;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23646BF8C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_indexTm(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4DD8);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 36)], a2, v8);
  }
}

uint64_t sub_23646C01C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *__swift_store_extra_inhabitant_indexTm(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4DD8);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 36)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_23646C0A4()
{
  return swift_allocateGenericValueMetadata();
}

unint64_t destroy for SignInModel.State(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23646C0EC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    v4 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *sub_23646C144(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  __int128 v5;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v5;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23646C224(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __int128 v6;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23646C29C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFC && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 2147483644);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 3;
  if (v4 >= 5)
    return v5;
  else
    return 0;
}

uint64_t sub_23646C2F0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 3;
  }
  return result;
}

uint64_t sub_23646C350(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_23646C368(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    result[2] = 0;
    result[3] = 0;
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

_OWORD *sub_23646C38C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_23646C39C()
{
  return swift_release();
}

unint64_t sub_23646C3A4()
{
  unint64_t result;

  result = qword_2563E5030;
  if (!qword_2563E5030)
  {
    result = MEMORY[0x23B7F5164](MEMORY[0x24BDCDDC0], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_2563E5030);
  }
  return result;
}

uint64_t sub_23646C3E8(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t sub_23646C424(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 40))(a2, a1);
  return a2;
}

unint64_t sub_23646C460()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2563E5048;
  if (!qword_2563E5048)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2563E5040);
    result = MEMORY[0x23B7F5164](&unk_2365BAA58, v1);
    atomic_store(result, (unint64_t *)&qword_2563E5048);
  }
  return result;
}

uint64_t sub_23646C4B0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x23B7F50EC](a1, v6, a5);
}

uint64_t dispatch thunk of MessageUnpacking.unpack(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of MessagePacking.pack(_:)(a1, a2, a3);
}

uint64_t sub_23646C588()
{
  uint64_t v0;

  v0 = sub_2365AFC00();
  __swift_allocate_value_buffer(v0, qword_25641F6A8);
  __swift_project_value_buffer(v0, (uint64_t)qword_25641F6A8);
  return sub_2365AFBF4();
}

uint64_t sub_23646C604()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_2365AFC00();
  __swift_allocate_value_buffer(v0, qword_2563E5060);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_2563E5060);
  if (qword_2563E42B8 != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)qword_25641F6A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t static _Coordinated.CommonError.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  switch(v3)
  {
    case 0uLL:
      if (v5)
        goto LABEL_11;
      v3 = 0;
      v6 = 1;
      break;
    case 1uLL:
      if (v5 != 1)
        goto LABEL_11;
      v3 = 1;
      v6 = 1;
      break;
    case 2uLL:
      if (v5 != 2)
        goto LABEL_11;
      v6 = 1;
      v3 = 2;
      break;
    case 3uLL:
      if (v5 != 3)
        goto LABEL_11;
      v6 = 1;
      v3 = 3;
      break;
    default:
      if (v5 >= 4)
      {
        if (v2 == v4 && v3 == v5)
          v6 = 1;
        else
          v6 = sub_2365B08CC();
      }
      else
      {
LABEL_11:
        v6 = 0;
      }
      sub_23646C7A4(v4, v5);
      sub_23646C7A4(v2, v3);
      break;
  }
  sub_23646C7B8(v2, v3);
  sub_23646C7B8(v4, v5);
  return v6 & 1;
}

uint64_t sub_23646C7A4(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 4)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_23646C7B8(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 4)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_23646C7D0(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v5;

  MEMORY[0x24BDAC7A8](a1);
  v2 = (char *)&v5 - v1;
  (*(void (**)(char *))(v3 + 16))((char *)&v5 - v1);
  return sub_23646C8A8((uint64_t)v2);
}

uint64_t sub_23646C844@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 96);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t sub_23646C8A8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 96);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 40))(v4, a1);
  return swift_endAccess();
}

uint64_t (*sub_23646C914())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t _Coordinated.receiver.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104));
  swift_retain();
  return v1;
}

uint64_t sub_23646C994(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 120));
  v4 = *v3;
  *v3 = a1;
  v3[1] = a2;
  return sub_236450690(v4);
}

uint64_t sub_23646C9B4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128));
}

uint64_t sub_23646C9C4(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 128)) = result;
  return result;
}

uint64_t sub_23646C9D4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 136));
}

uint64_t sub_23646C9E4(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 136)) = result;
  return result;
}

uint64_t sub_23646C9F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t result;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 136);
  v2 = *(_QWORD *)(v0 + v1);
  if (v2 == -1)
  {
    *(_QWORD *)(v0 + v1) = 0;
    v1 = *(_QWORD *)(*(_QWORD *)v0 + 136);
    v2 = *(_QWORD *)(v0 + v1);
  }
  v3 = __CFADD__(v2, 1);
  v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v0 + v1) = v4;
    return *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 136));
  }
  return result;
}

uint64_t sub_23646CA38(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[5] = a1;
  v2[6] = v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v2[7] = v3;
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542A8310);
  v4 = sub_2365B0A40();
  v2[8] = v4;
  v2[9] = *(_QWORD *)(v4 - 8);
  v2[10] = swift_task_alloc();
  v7 = type metadata accessor for _Coordinated.ValueUpdate.Response(0, v3, v5, v6);
  v2[11] = v7;
  v2[12] = *(_QWORD *)(v7 - 8);
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23646CB08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  _QWORD *v21;
  uint64_t v22;
  NSObject *log;
  uint64_t v24;
  uint64_t v25;

  if (qword_2563E42C0 != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 96);
  v5 = sub_2365AFC00();
  *(_QWORD *)(v0 + 128) = __swift_project_value_buffer(v5, (uint64_t)qword_2563E5060);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 136) = v6;
  v6(v2, v1, v3);
  v7 = sub_2365AFBE8();
  v8 = sub_2365B038C();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 120);
  if (v9)
  {
    v11 = *(_QWORD *)(v0 + 112);
    v12 = *(_QWORD *)(v0 + 88);
    v22 = *(_QWORD *)(v0 + 96);
    log = v7;
    v13 = (uint8_t *)swift_slowAlloc();
    v24 = swift_slowAlloc();
    v25 = v24;
    *(_DWORD *)v13 = 136315138;
    v6(v11, v10, v12);
    v14 = sub_2365B0080();
    *(_QWORD *)(v0 + 32) = sub_236468D88(v14, v15, &v25);
    sub_2365B04A0();
    swift_bridgeObjectRelease();
    v16 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v16(v10, v12);
    _os_log_impl(&dword_23644B000, log, v8, "Received _Coordinated value update: %s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v24, -1, -1);
    MEMORY[0x23B7F5254](v13, -1, -1);

  }
  else
  {
    v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 96) + 8);
    v16(v10, *(_QWORD *)(v0 + 88));

  }
  *(_QWORD *)(v0 + 144) = v16;
  if ((*(_BYTE *)(*(_QWORD *)(v0 + 48) + *(_QWORD *)(**(_QWORD **)(v0 + 48) + 128)) & 1) != 0)
  {
    v17 = sub_2365AFBE8();
    v18 = sub_2365B0398();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_23644B000, v17, v18, "_Coordinated value is actually invalidated, rejecting this update", v19, 2u);
      MEMORY[0x23B7F5254](v19, -1, -1);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0 + 56) - 8) + 16))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 40) + *(int *)(*(_QWORD *)(v0 + 88) + 32));
    swift_storeEnumTagMultiPayload();
    v21 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 152) = v21;
    *v21 = v0;
    v21[1] = sub_23646CE34;
    return sub_23646D620(*(_QWORD *)(v0 + 40));
  }
}

uint64_t sub_23646CE34()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23646CE98()
{
  uint64_t v0;
  uint64_t v1;
  int **v2;
  int *v3;
  _QWORD *v4;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  void (*v9)(uint64_t *, uint64_t);
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD);

  v1 = *(_QWORD *)(v0 + 48);
  if (**(_QWORD **)(v0 + 40) == *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 136)))
  {
    v2 = (int **)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 120));
    v3 = *v2;
    *(_QWORD *)(v0 + 168) = *v2;
    *(_QWORD *)(v0 + 176) = v2[1];
    if (v3)
    {
      sub_23645063C((uint64_t)v3);
      v21 = (uint64_t (*)(_QWORD))((char *)v3 + *v3);
      v4 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 184) = v4;
      *v4 = v0;
      v4[1] = sub_23646D140;
      return v21(*(_QWORD *)(v0 + 80));
    }
    v6 = sub_2365AFBE8();
    v16 = sub_2365B038C();
    if (os_log_type_enabled(v6, (os_log_type_t)v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_23644B000, v6, (os_log_type_t)v16, "Ignoring value update response because we do not have an active update handler", v17, 2u);
      v15 = (uint64_t)v17;
      goto LABEL_9;
    }
  }
  else
  {
    (*(void (**)(_QWORD))(v0 + 136))(*(_QWORD *)(v0 + 104));
    swift_retain();
    v6 = sub_2365AFBE8();
    v7 = sub_2365B0398();
    v8 = os_log_type_enabled(v6, v7);
    v9 = *(void (**)(uint64_t *, uint64_t))(v0 + 144);
    v10 = *(uint64_t **)(v0 + 104);
    v11 = *(_QWORD *)(v0 + 88);
    v12 = *(_QWORD *)(v0 + 48);
    if (v8)
    {
      v13 = swift_slowAlloc();
      *(_DWORD *)v13 = 134218240;
      v14 = *v10;
      v9(v10, v11);
      *(_QWORD *)(v0 + 16) = v14;
      sub_2365B04A0();
      *(_WORD *)(v13 + 12) = 2048;
      *(_QWORD *)(v0 + 24) = *(_QWORD *)(v12 + *(_QWORD *)(*(_QWORD *)v12 + 136));
      sub_2365B04A0();
      swift_release();
      _os_log_impl(&dword_23644B000, v6, v7, "Received update with sequence ID %llu but we're currently at %llu", (uint8_t *)v13, 0x16u);
      v15 = v13;
LABEL_9:
      MEMORY[0x23B7F5254](v15, -1, -1);
      goto LABEL_10;
    }
    v9(*(uint64_t **)(v0 + 104), *(_QWORD *)(v0 + 88));
    swift_release();
  }
LABEL_10:
  v19 = *(_QWORD *)(v0 + 72);
  v18 = *(_QWORD *)(v0 + 80);
  v20 = *(_QWORD *)(v0 + 64);

  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_23646D140(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 192) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23646D1A0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(unsigned __int8 *)(v0 + 192);
  v2 = sub_2365AFBE8();
  v3 = sub_2365B038C();
  v4 = os_log_type_enabled(v2, v3);
  if ((_DWORD)v1 == 1)
  {
    if (v4)
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_23644B000, v2, v3, "Clearing current update handler", v5, 2u);
      MEMORY[0x23B7F5254](v5, -1, -1);
    }
    v6 = *(_QWORD *)(v0 + 168);
    v8 = *(_QWORD *)(v0 + 72);
    v7 = *(_QWORD *)(v0 + 80);
    v9 = *(_QWORD *)(v0 + 64);
    v10 = *(_QWORD *)(v0 + 48);

    v11 = (uint64_t *)(v10 + *(_QWORD *)(*(_QWORD *)v10 + 120));
    v12 = *v11;
    *v11 = 0;
    v11[1] = 0;
    sub_236450690(v12);
    sub_236450690(v6);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  else
  {
    if (v4)
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_23644B000, v2, v3, "Not clearing current update handler", v13, 2u);
      MEMORY[0x23B7F5254](v13, -1, -1);
    }
    v15 = *(_QWORD *)(v0 + 72);
    v14 = *(_QWORD *)(v0 + 80);
    v16 = *(_QWORD *)(v0 + 64);
    sub_236450690(*(_QWORD *)(v0 + 168));

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_23646D33C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  int **v4;
  int *v5;
  _QWORD *v6;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  void (*v11)(uint64_t *, uint64_t);
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(_QWORD);

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD **)(v0 + 80);
  (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(v2, *(_QWORD *)(v0 + 64));
  *v2 = v1;
  swift_storeEnumTagMultiPayload();
  v3 = *(_QWORD *)(v0 + 48);
  if (**(_QWORD **)(v0 + 40) == *(_QWORD *)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 136)))
  {
    v4 = (int **)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 120));
    v5 = *v4;
    *(_QWORD *)(v0 + 168) = *v4;
    *(_QWORD *)(v0 + 176) = v4[1];
    if (v5)
    {
      sub_23645063C((uint64_t)v5);
      v23 = (uint64_t (*)(_QWORD))((char *)v5 + *v5);
      v6 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 184) = v6;
      *v6 = v0;
      v6[1] = sub_23646D140;
      return v23(*(_QWORD *)(v0 + 80));
    }
    v8 = sub_2365AFBE8();
    v18 = sub_2365B038C();
    if (os_log_type_enabled(v8, (os_log_type_t)v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_23644B000, v8, (os_log_type_t)v18, "Ignoring value update response because we do not have an active update handler", v19, 2u);
      v17 = (uint64_t)v19;
      goto LABEL_9;
    }
  }
  else
  {
    (*(void (**)(_QWORD))(v0 + 136))(*(_QWORD *)(v0 + 104));
    swift_retain();
    v8 = sub_2365AFBE8();
    v9 = sub_2365B0398();
    v10 = os_log_type_enabled(v8, v9);
    v11 = *(void (**)(uint64_t *, uint64_t))(v0 + 144);
    v12 = *(uint64_t **)(v0 + 104);
    v13 = *(_QWORD *)(v0 + 88);
    v14 = *(_QWORD *)(v0 + 48);
    if (v10)
    {
      v15 = swift_slowAlloc();
      *(_DWORD *)v15 = 134218240;
      v16 = *v12;
      v11(v12, v13);
      *(_QWORD *)(v0 + 16) = v16;
      sub_2365B04A0();
      *(_WORD *)(v15 + 12) = 2048;
      *(_QWORD *)(v0 + 24) = *(_QWORD *)(v14 + *(_QWORD *)(*(_QWORD *)v14 + 136));
      sub_2365B04A0();
      swift_release();
      _os_log_impl(&dword_23644B000, v8, v9, "Received update with sequence ID %llu but we're currently at %llu", (uint8_t *)v15, 0x16u);
      v17 = v15;
LABEL_9:
      MEMORY[0x23B7F5254](v17, -1, -1);
      goto LABEL_10;
    }
    v11(*(uint64_t **)(v0 + 104), *(_QWORD *)(v0 + 88));
    swift_release();
  }
LABEL_10:
  v21 = *(_QWORD *)(v0 + 72);
  v20 = *(_QWORD *)(v0 + 80);
  v22 = *(_QWORD *)(v0 + 64);

  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t type metadata accessor for _Coordinated.ValueUpdate.Response(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _Coordinated.ValueUpdate.Response);
}

uint64_t sub_23646D620(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[20] = a1;
  v2[21] = v1;
  v3 = *v1;
  v4 = sub_2365AF9FC();
  v2[22] = v4;
  v2[23] = *(_QWORD *)(v4 - 8);
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  v5 = *(_QWORD *)(v3 + 80);
  v2[28] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542A8310);
  v2[29] = v6;
  v2[30] = type metadata accessor for _Coordinated.AsyncThrowingTapHandle(255, v5, v6, MEMORY[0x24BEE3F20]);
  v2[31] = swift_getTupleTypeMetadata2();
  v7 = sub_2365B047C();
  v2[32] = v7;
  v2[33] = *(_QWORD *)(v7 - 8);
  v2[34] = swift_task_alloc();
  v2[35] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23646D748()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t);
  uint64_t v55;

  if (qword_2563E42C0 != -1)
    swift_once();
  v1 = sub_2365AFC00();
  *(_QWORD *)(v0 + 288) = __swift_project_value_buffer(v1, (uint64_t)qword_2563E5060);
  swift_retain();
  v2 = sub_2365AFBE8();
  v3 = sub_2365B038C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v4 = 134217984;
    swift_beginAccess();
    sub_23647A6F4(&qword_2563E5088, MEMORY[0x24BDCEA88]);
    swift_bridgeObjectRetain();
    v5 = sub_2365AFF84();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 152) = v5;
    sub_2365B04A0();
    swift_release();
    _os_log_impl(&dword_23644B000, v2, v3, "Expected to pre-process value update with %ld taps", v4, 0xCu);
    MEMORY[0x23B7F5254](v4, -1, -1);
  }
  else
  {
    swift_release();
  }

  v6 = (uint64_t *)(*(_QWORD *)(v0 + 168) + *(_QWORD *)(**(_QWORD **)(v0 + 168) + 112));
  swift_beginAccess();
  v7 = *v6;
  *(_QWORD *)(v0 + 296) = v7;
  v8 = *(_BYTE *)(v7 + 32);
  *(_BYTE *)(v0 + 360) = v8;
  v9 = -1;
  v10 = -1 << v8;
  if (-(-1 << v8) < 64)
    v9 = ~(-1 << -(char)v10);
  v11 = v9 & *(_QWORD *)(v7 + 64);
  swift_bridgeObjectRetain();
  if (v11)
  {
    v12 = 0;
    v13 = __clz(__rbit64(v11));
    v14 = (v11 - 1) & v11;
LABEL_10:
    v15 = *(_QWORD *)(v0 + 272);
    v16 = *(_QWORD *)(v0 + 248);
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v0 + 184) + 16))(v15, *(_QWORD *)(v7 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 184) + 72) * v13, *(_QWORD *)(v0 + 176));
    *(_QWORD *)(v15 + *(int *)(v16 + 48)) = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v13);
    v17 = *(_QWORD *)(v16 - 8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
    swift_retain();
    goto LABEL_17;
  }
  v18 = 63 - v10;
  if ((unint64_t)(63 - v10) <= 0x7F)
  {
    v12 = 0;
  }
  else
  {
    v19 = *(_QWORD *)(v7 + 72);
    if (v19)
    {
      v12 = 1;
LABEL_14:
      v14 = (v19 - 1) & v19;
      v13 = __clz(__rbit64(v19)) + (v12 << 6);
      goto LABEL_10;
    }
    if (v18 < 0xC0)
    {
      v12 = 1;
    }
    else
    {
      v19 = *(_QWORD *)(v7 + 80);
      if (v19)
      {
        v12 = 2;
        goto LABEL_14;
      }
      if (v18 < 0x100)
      {
        v12 = 2;
      }
      else
      {
        v19 = *(_QWORD *)(v7 + 88);
        if (v19)
        {
          v12 = 3;
          goto LABEL_14;
        }
        v50 = 0;
        v51 = v18 >> 6;
        v52 = 4;
        if (v51 > 4)
          v52 = v51;
        v53 = v52 - 4;
        while (v53 != v50)
        {
          v19 = *(_QWORD *)(v7 + 96 + 8 * v50++);
          if (v19)
          {
            v12 = v50 + 3;
            goto LABEL_14;
          }
        }
        v12 = v51 - 1;
      }
    }
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v0 + 248) - 8);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v17 + 56))(*(_QWORD *)(v0 + 272), 1, 1);
  v14 = 0;
LABEL_17:
  *(_QWORD *)(v0 + 304) = v12;
  *(_QWORD *)(v0 + 312) = v14;
  v20 = *(_QWORD *)(v0 + 280);
  v21 = *(_QWORD *)(v0 + 248);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 264) + 32))(v20, *(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 256));
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v20, 1, v21);
  v23 = *(_QWORD *)(v0 + 280);
  v25 = *(_QWORD *)(v0 + 208);
  v24 = *(_QWORD *)(v0 + 216);
  if (v22 == 1)
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v27 = *(_QWORD *)(v0 + 176);
    v28 = *(_QWORD *)(v0 + 184);
    v29 = *(_QWORD *)(v23 + *(int *)(*(_QWORD *)(v0 + 248) + 48));
    *(_QWORD *)(v0 + 320) = v29;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(v24, v23, v27);
    v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16);
    *(_QWORD *)(v0 + 328) = v30;
    v30(v25, v24, v27);
    swift_retain_n();
    v31 = sub_2365AFBE8();
    v32 = sub_2365B038C();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = *(_QWORD *)(v0 + 208);
      v35 = *(_QWORD *)(v0 + 176);
      v34 = *(_QWORD *)(v0 + 184);
      v36 = swift_slowAlloc();
      v37 = swift_slowAlloc();
      v55 = v37;
      *(_DWORD *)v36 = 136315394;
      sub_23647A6F4((unint64_t *)&qword_2563E5130, MEMORY[0x24BDCEAB8]);
      v38 = sub_2365B0860();
      *(_QWORD *)(v36 + 4) = sub_236468D88(v38, v39, &v55);
      swift_bridgeObjectRelease();
      v40 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
      v40(v33, v35);
      *(_WORD *)(v36 + 12) = 2080;
      *(_QWORD *)(v0 + 144) = v29;
      swift_retain();
      v41 = sub_2365B0080();
      *(_QWORD *)(v36 + 14) = sub_236468D88(v41, v42, &v55);
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23644B000, v31, v32, "Pre-processing value update with tap (id:%s): %s", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23B7F5254](v37, -1, -1);
      MEMORY[0x23B7F5254](v36, -1, -1);

    }
    else
    {
      v40 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 184) + 8);
      v40(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 176));

      swift_release_n();
    }
    *(_QWORD *)(v0 + 336) = v40;
    v45 = *(_QWORD *)(v0 + 224);
    v46 = *(_QWORD *)(v0 + 160);
    v47 = *(int **)(v29 + 32);
    *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 240);
    *(_QWORD *)(v0 + 48) = &off_2507D03B8;
    *(_QWORD *)(v0 + 16) = v29;
    v48 = v46 + *(int *)(type metadata accessor for _Coordinated.ValueUpdate.Response(0, v45, v43, v44) + 32);
    v54 = (uint64_t (*)(uint64_t, uint64_t))((char *)v47 + *v47);
    swift_retain();
    v49 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 344) = v49;
    *v49 = v0;
    v49[1] = sub_23646DD94;
    return v54(v0 + 16, v48);
  }
}

uint64_t sub_23646DD94()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 352) = v0;
  swift_task_dealloc();
  if (!v0)
    __swift_destroy_boxed_opaque_existential_1(v2 + 16);
  return swift_task_switch();
}

uint64_t sub_23646DE08()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t (*v48)(uint64_t, uint64_t);
  uint64_t v49;

  v1 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 336);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 176);
  swift_release();
  result = v1(v2, v3);
  v6 = *(_QWORD *)(v0 + 304);
  v5 = *(_QWORD *)(v0 + 312);
  if (v5)
  {
    v7 = (v5 - 1) & v5;
    v8 = __clz(__rbit64(v5)) | (v6 << 6);
    v9 = *(_QWORD *)(v0 + 296);
LABEL_3:
    v10 = *(_QWORD *)(v0 + 272);
    v11 = *(_QWORD *)(v0 + 248);
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v0 + 184) + 16))(v10, *(_QWORD *)(v9 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 184) + 72) * v8, *(_QWORD *)(v0 + 176));
    *(_QWORD *)(v10 + *(int *)(v11 + 48)) = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v8);
    v12 = *(_QWORD *)(v11 - 8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
    swift_retain();
    goto LABEL_19;
  }
  v13 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  v14 = (unint64_t)((1 << *(_BYTE *)(v0 + 360)) + 63) >> 6;
  if (v13 < v14)
  {
    v9 = *(_QWORD *)(v0 + 296);
    v15 = v9 + 64;
    v16 = *(_QWORD *)(v9 + 64 + 8 * v13);
    if (v16)
    {
LABEL_7:
      v7 = (v16 - 1) & v16;
      v8 = __clz(__rbit64(v16)) + (v13 << 6);
      v6 = v13;
      goto LABEL_3;
    }
    v17 = v6 + 2;
    ++v6;
    if (v13 + 1 < v14)
    {
      v16 = *(_QWORD *)(v15 + 8 * v17);
      if (v16)
      {
        ++v13;
        goto LABEL_7;
      }
      v18 = v13 + 2;
      v6 = v13 + 1;
      if (v13 + 2 < v14)
      {
        v16 = *(_QWORD *)(v15 + 8 * v18);
        if (v16)
        {
          v13 += 2;
          goto LABEL_7;
        }
        while (1)
        {
          v13 = v18 + 1;
          if (__OFADD__(v18, 1))
            break;
          if (v13 >= v14)
          {
            v6 = v14 - 1;
            goto LABEL_18;
          }
          v16 = *(_QWORD *)(v15 + 8 * v13);
          ++v18;
          if (v16)
            goto LABEL_7;
        }
LABEL_26:
        __break(1u);
        return result;
      }
    }
  }
LABEL_18:
  v12 = *(_QWORD *)(*(_QWORD *)(v0 + 248) - 8);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v12 + 56))(*(_QWORD *)(v0 + 272), 1, 1);
  v7 = 0;
LABEL_19:
  *(_QWORD *)(v0 + 304) = v6;
  *(_QWORD *)(v0 + 312) = v7;
  v19 = *(_QWORD *)(v0 + 280);
  v20 = *(_QWORD *)(v0 + 248);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 264) + 32))(v19, *(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 256));
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v19, 1, v20);
  v22 = *(_QWORD *)(v0 + 280);
  v24 = *(_QWORD *)(v0 + 208);
  v23 = *(_QWORD *)(v0 + 216);
  if (v21 == 1)
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v25 = *(_QWORD *)(v0 + 176);
    v26 = *(_QWORD *)(v0 + 184);
    v27 = *(_QWORD *)(v22 + *(int *)(*(_QWORD *)(v0 + 248) + 48));
    *(_QWORD *)(v0 + 320) = v27;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v23, v22, v25);
    v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
    *(_QWORD *)(v0 + 328) = v28;
    v28(v24, v23, v25);
    swift_retain_n();
    v29 = sub_2365AFBE8();
    v30 = sub_2365B038C();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = *(_QWORD *)(v0 + 208);
      v33 = *(_QWORD *)(v0 + 176);
      v32 = *(_QWORD *)(v0 + 184);
      v34 = swift_slowAlloc();
      v35 = swift_slowAlloc();
      v49 = v35;
      *(_DWORD *)v34 = 136315394;
      sub_23647A6F4((unint64_t *)&qword_2563E5130, MEMORY[0x24BDCEAB8]);
      v36 = sub_2365B0860();
      *(_QWORD *)(v34 + 4) = sub_236468D88(v36, v37, &v49);
      swift_bridgeObjectRelease();
      v38 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
      v38(v31, v33);
      *(_WORD *)(v34 + 12) = 2080;
      *(_QWORD *)(v0 + 144) = v27;
      swift_retain();
      v39 = sub_2365B0080();
      *(_QWORD *)(v34 + 14) = sub_236468D88(v39, v40, &v49);
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23644B000, v29, v30, "Pre-processing value update with tap (id:%s): %s", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23B7F5254](v35, -1, -1);
      MEMORY[0x23B7F5254](v34, -1, -1);

    }
    else
    {
      v38 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 184) + 8);
      v38(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 176));

      swift_release_n();
    }
    *(_QWORD *)(v0 + 336) = v38;
    v43 = *(_QWORD *)(v0 + 224);
    v44 = *(_QWORD *)(v0 + 160);
    v45 = *(int **)(v27 + 32);
    *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 240);
    *(_QWORD *)(v0 + 48) = &off_2507D03B8;
    *(_QWORD *)(v0 + 16) = v27;
    v46 = v44 + *(int *)(type metadata accessor for _Coordinated.ValueUpdate.Response(0, v43, v41, v42) + 32);
    v48 = (uint64_t (*)(uint64_t, uint64_t))((char *)v45 + *v45);
    swift_retain();
    v47 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 344) = v47;
    *v47 = v0;
    v47[1] = sub_23646DD94;
    return v48(v0 + 16, v46);
  }
}

uint64_t sub_23646E2A0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  id v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(void);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t result;
  unint64_t v55;
  int64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  int64_t v64;
  uint64_t v65;
  unint64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t, uint64_t);
  NSObject *v77;
  os_log_type_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void (*v86)(uint64_t, uint64_t);
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  os_log_type_t type;
  os_log_t log;
  uint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t (*v102)(uint64_t, uint64_t);
  uint64_t v103[2];

  v1 = *(void **)(v0 + 352);
  v2 = *(_QWORD *)(v0 + 224);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  *(_QWORD *)(v0 + 104) = v1;
  v3 = v1;
  v6 = type metadata accessor for _Coordinated.HaltingTapError(0, v2, v4, v5);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 328);
    v8 = *(_QWORD *)(v0 + 216);
    v9 = *(_QWORD *)(v0 + 200);
    v10 = *(_QWORD *)(v0 + 176);

    v11 = v9;
    v12 = *(void **)(v0 + 112);
    v7(v11, v8, v10);
    v13 = v12;
    v14 = v12;
    v15 = sub_2365AFBE8();
    v16 = sub_2365B0380();
    v17 = os_log_type_enabled(v15, v16);
    v18 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
    v19 = *(_QWORD *)(v0 + 200);
    v20 = *(_QWORD *)(v0 + 176);
    if (v17)
    {
      v101 = v12;
      type = v16;
      v21 = swift_slowAlloc();
      v96 = (_QWORD *)swift_slowAlloc();
      v99 = swift_slowAlloc();
      v103[0] = v99;
      *(_DWORD *)v21 = 136315394;
      sub_23647A6F4((unint64_t *)&qword_2563E5130, MEMORY[0x24BDCEAB8]);
      v22 = sub_2365B0860();
      *(_QWORD *)(v0 + 128) = sub_236468D88(v22, v23, v103);
      sub_2365B04A0();
      swift_bridgeObjectRelease();
      v18(v19, v20);
      *(_WORD *)(v21 + 12) = 2112;
      MEMORY[0x23B7F5164](&protocol conformance descriptor for _Coordinated<A>.HaltingTapError, v6);
      swift_allocError();
      *v24 = v12;
      v25 = v12;
      v26 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 136) = v26;
      sub_2365B04A0();
      *v96 = v26;

      _os_log_impl(&dword_23644B000, v15, type, "Halting coordination for tap (id:%s): %@", (uint8_t *)v21, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9960);
      swift_arrayDestroy();
      MEMORY[0x23B7F5254](v96, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x23B7F5254](v99, -1, -1);
      MEMORY[0x23B7F5254](v21, -1, -1);

      if (!v101)
        goto LABEL_8;
    }
    else
    {
      v18(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 176));

      if (!v12)
      {
LABEL_8:
        MEMORY[0x23B7F5164](&protocol conformance descriptor for _Coordinated<A>.HaltingTapError, v6);
        swift_allocError();
        *v46 = 0;
      }
    }
    v47 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
    v48 = *(_QWORD *)(v0 + 216);
    v49 = *(_QWORD *)(v0 + 176);
    swift_willThrow();
    swift_release();
    v47(v48, v49);
    swift_release();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v50 = *(uint64_t (**)(void))(v0 + 8);
    return v50();
  }
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 328);
  v28 = *(_QWORD *)(v0 + 216);
  v29 = *(_QWORD *)(v0 + 192);
  v30 = *(_QWORD *)(v0 + 176);

  v27(v29, v28, v30);
  swift_retain_n();
  v31 = sub_2365AFBE8();
  v32 = sub_2365B0398();
  v33 = os_log_type_enabled(v31, v32);
  v34 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
  v35 = *(_QWORD *)(v0 + 320);
  if (v33)
  {
    log = *(os_log_t *)(v0 + 352);
    v100 = *(_QWORD *)(v0 + 216);
    v36 = *(_QWORD *)(v0 + 192);
    v37 = *(_QWORD *)(v0 + 176);
    v38 = swift_slowAlloc();
    v39 = swift_slowAlloc();
    v103[0] = v39;
    *(_DWORD *)v38 = 136315394;
    sub_23647A6F4((unint64_t *)&qword_2563E5130, MEMORY[0x24BDCEAB8]);
    v40 = sub_2365B0860();
    *(_QWORD *)(v38 + 4) = sub_236468D88(v40, v41, v103);
    swift_bridgeObjectRelease();
    v34(v36, v37);
    *(_WORD *)(v38 + 12) = 2080;
    *(_QWORD *)(v0 + 120) = v35;
    swift_retain();
    v42 = sub_2365B0080();
    *(_QWORD *)(v38 + 14) = sub_236468D88(v42, v43, v103);
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23644B000, v31, v32, "Ignoring non-halting error in tap (id:%s): %s", (uint8_t *)v38, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v39, -1, -1);
    MEMORY[0x23B7F5254](v38, -1, -1);

    swift_release();
    v44 = v100;
    v45 = v37;
  }
  else
  {
    v51 = *(_QWORD *)(v0 + 216);
    v52 = *(_QWORD *)(v0 + 192);
    v53 = *(_QWORD *)(v0 + 176);

    swift_release_n();
    v34(v52, v53);
    swift_release();
    v44 = v51;
    v45 = v53;
  }
  result = ((uint64_t (*)(uint64_t, uint64_t))v34)(v44, v45);
  v56 = *(_QWORD *)(v0 + 304);
  v55 = *(_QWORD *)(v0 + 312);
  if (!v55)
  {
    v63 = v56 + 1;
    if (__OFADD__(v56, 1))
    {
      __break(1u);
    }
    else
    {
      v64 = (unint64_t)((1 << *(_BYTE *)(v0 + 360)) + 63) >> 6;
      if (v63 >= v64)
        goto LABEL_28;
      v59 = *(_QWORD *)(v0 + 296);
      v65 = v59 + 64;
      v66 = *(_QWORD *)(v59 + 64 + 8 * v63);
      if (v66)
      {
LABEL_17:
        v57 = (v66 - 1) & v66;
        v58 = __clz(__rbit64(v66)) + (v63 << 6);
        v56 = v63;
        goto LABEL_13;
      }
      v67 = v56 + 2;
      ++v56;
      if (v63 + 1 >= v64)
        goto LABEL_28;
      v66 = *(_QWORD *)(v65 + 8 * v67);
      if (v66)
      {
        ++v63;
        goto LABEL_17;
      }
      v68 = v63 + 2;
      v56 = v63 + 1;
      if (v63 + 2 >= v64)
      {
LABEL_28:
        v62 = *(_QWORD *)(*(_QWORD *)(v0 + 248) - 8);
        (*(void (**)(_QWORD, uint64_t, uint64_t))(v62 + 56))(*(_QWORD *)(v0 + 272), 1, 1);
        v57 = 0;
        goto LABEL_29;
      }
      v66 = *(_QWORD *)(v65 + 8 * v68);
      if (v66)
      {
        v63 += 2;
        goto LABEL_17;
      }
      while (1)
      {
        v63 = v68 + 1;
        if (__OFADD__(v68, 1))
          break;
        if (v63 >= v64)
        {
          v56 = v64 - 1;
          goto LABEL_28;
        }
        v66 = *(_QWORD *)(v65 + 8 * v63);
        ++v68;
        if (v66)
          goto LABEL_17;
      }
    }
    __break(1u);
    return result;
  }
  v57 = (v55 - 1) & v55;
  v58 = __clz(__rbit64(v55)) | (v56 << 6);
  v59 = *(_QWORD *)(v0 + 296);
LABEL_13:
  v60 = *(_QWORD *)(v0 + 272);
  v61 = *(_QWORD *)(v0 + 248);
  (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v0 + 184) + 16))(v60, *(_QWORD *)(v59 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 184) + 72) * v58, *(_QWORD *)(v0 + 176));
  *(_QWORD *)(v60 + *(int *)(v61 + 48)) = *(_QWORD *)(*(_QWORD *)(v59 + 56) + 8 * v58);
  v62 = *(_QWORD *)(v61 - 8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v62 + 56))(v60, 0, 1, v61);
  swift_retain();
LABEL_29:
  *(_QWORD *)(v0 + 304) = v56;
  *(_QWORD *)(v0 + 312) = v57;
  v69 = *(_QWORD *)(v0 + 280);
  v70 = *(_QWORD *)(v0 + 248);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 264) + 32))(v69, *(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 256));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v69, 1, v70) == 1)
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v50 = *(uint64_t (**)(void))(v0 + 8);
    return v50();
  }
  v72 = *(_QWORD *)(v0 + 208);
  v71 = *(_QWORD *)(v0 + 216);
  v73 = *(_QWORD *)(v0 + 176);
  v74 = *(_QWORD *)(v0 + 184);
  v75 = *(_QWORD *)(*(_QWORD *)(v0 + 280) + *(int *)(*(_QWORD *)(v0 + 248) + 48));
  *(_QWORD *)(v0 + 320) = v75;
  (*(void (**)(uint64_t))(v74 + 32))(v71);
  v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 16);
  *(_QWORD *)(v0 + 328) = v76;
  v76(v72, v71, v73);
  swift_retain_n();
  v77 = sub_2365AFBE8();
  v78 = sub_2365B038C();
  if (os_log_type_enabled(v77, v78))
  {
    v79 = *(_QWORD *)(v0 + 208);
    v81 = *(_QWORD *)(v0 + 176);
    v80 = *(_QWORD *)(v0 + 184);
    v82 = swift_slowAlloc();
    v83 = swift_slowAlloc();
    v103[0] = v83;
    *(_DWORD *)v82 = 136315394;
    sub_23647A6F4((unint64_t *)&qword_2563E5130, MEMORY[0x24BDCEAB8]);
    v84 = sub_2365B0860();
    *(_QWORD *)(v82 + 4) = sub_236468D88(v84, v85, v103);
    swift_bridgeObjectRelease();
    v86 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
    v86(v79, v81);
    *(_WORD *)(v82 + 12) = 2080;
    *(_QWORD *)(v0 + 144) = v75;
    swift_retain();
    v87 = sub_2365B0080();
    *(_QWORD *)(v82 + 14) = sub_236468D88(v87, v88, v103);
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23644B000, v77, v78, "Pre-processing value update with tap (id:%s): %s", (uint8_t *)v82, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v83, -1, -1);
    MEMORY[0x23B7F5254](v82, -1, -1);

  }
  else
  {
    v86 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 184) + 8);
    v86(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 176));

    swift_release_n();
  }
  *(_QWORD *)(v0 + 336) = v86;
  v91 = *(_QWORD *)(v0 + 224);
  v92 = *(_QWORD *)(v0 + 160);
  v93 = *(int **)(v75 + 32);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 240);
  *(_QWORD *)(v0 + 48) = &off_2507D03B8;
  *(_QWORD *)(v0 + 16) = v75;
  v94 = v92 + *(int *)(type metadata accessor for _Coordinated.ValueUpdate.Response(0, v91, v89, v90) + 32);
  v102 = (uint64_t (*)(uint64_t, uint64_t))((char *)v93 + *v93);
  swift_retain();
  v95 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 344) = v95;
  *v95 = v0;
  v95[1] = sub_23646DD94;
  return v102(v0 + 16, v94);
}

uint64_t _Coordinated.__allocating_init(coordinating:receiver:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  _Coordinated.init(coordinating:receiver:)(a1, a2, a3);
  return v6;
}

uint64_t *_Coordinated.init(coordinating:receiver:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v7 = *v3;
  swift_defaultActor_initialize();
  v8 = *(_QWORD *)(*v3 + 112);
  sub_2365AF9FC();
  v9 = *(_QWORD *)(v7 + 80);
  v10 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542A8310);
  type metadata accessor for _Coordinated.AsyncThrowingTapHandle(255, v9, v10, MEMORY[0x24BEE3F20]);
  swift_getTupleTypeMetadata2();
  sub_2365B0188();
  sub_23647A6F4(&qword_2563E5088, MEMORY[0x24BDCEA88]);
  *(uint64_t *)((char *)v3 + v8) = sub_2365AFF78();
  v11 = (uint64_t *)((char *)v3 + *(_QWORD *)(*v3 + 120));
  *v11 = 0;
  v11[1] = 0;
  *((_BYTE *)v3 + *(_QWORD *)(*v3 + 128)) = 0;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 + 136)) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))((uint64_t)v3 + *(_QWORD *)(*v3 + 96), a1, v9);
  v12 = (uint64_t *)((char *)v3 + *(_QWORD *)(*v3 + 104));
  *v12 = a2;
  v12[1] = a3;
  return v3;
}

uint64_t sub_23646EE20()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[9] = v0;
  v1[10] = *(_QWORD *)(*(_QWORD *)v0 + 80);
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542A8310);
  v2 = sub_2365B0A40();
  v1[11] = v2;
  v1[12] = *(_QWORD *)(v2 - 8);
  v1[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23646EEA8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int **v13;
  int *v14;
  int *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  os_log_type_t type;
  uint64_t (*v41)(_QWORD);
  uint64_t v42;

  if (qword_2563E42C0 != -1)
    swift_once();
  v1 = sub_2365AFC00();
  __swift_project_value_buffer(v1, (uint64_t)qword_2563E5060);
  swift_retain_n();
  v2 = sub_2365AFBE8();
  v3 = sub_2365B0380();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 72);
    v5 = *(_QWORD *)(v0 + 80);
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v42 = v7;
    *(_DWORD *)v6 = 136315138;
    *(_QWORD *)(v0 + 56) = v4;
    type metadata accessor for _Coordinated(0, v5, v8, v9);
    swift_retain();
    v10 = sub_2365B0080();
    *(_QWORD *)(v0 + 64) = sub_236468D88(v10, v11, &v42);
    sub_2365B04A0();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23644B000, v2, v3, "Invalidating %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v7, -1, -1);
    MEMORY[0x23B7F5254](v6, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v12 = *(_QWORD *)(v0 + 72);
  *(_BYTE *)(v12 + *(_QWORD *)(*(_QWORD *)v12 + 128)) = 1;
  v13 = (int **)(v12 + *(_QWORD *)(*(_QWORD *)v12 + 120));
  v14 = *v13;
  *(_QWORD *)(v0 + 112) = *v13;
  v15 = v13[1];
  *(_QWORD *)(v0 + 120) = v15;
  if (v14)
  {
    sub_23645063C((uint64_t)v14);
    swift_retain();
    sub_23645063C((uint64_t)v14);
    swift_retain();
    sub_23645063C((uint64_t)v14);
    v16 = sub_2365AFBE8();
    v17 = sub_2365B0380();
    if (os_log_type_enabled(v16, v17))
    {
      type = v17;
      v19 = *(_QWORD *)(v0 + 72);
      v18 = *(_QWORD *)(v0 + 80);
      v20 = swift_slowAlloc();
      v39 = swift_slowAlloc();
      v42 = v39;
      *(_DWORD *)v20 = 136315394;
      *(_QWORD *)(v0 + 32) = v19;
      type metadata accessor for _Coordinated(0, v18, v21, v22);
      swift_retain();
      v23 = sub_2365B0080();
      *(_QWORD *)(v0 + 40) = sub_236468D88(v23, v24, &v42);
      sub_2365B04A0();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2080;
      v25 = (_QWORD *)swift_allocObject();
      v25[2] = v18;
      v25[3] = v14;
      v25[4] = v15;
      *(_QWORD *)(v0 + 16) = &unk_2563E50A0;
      *(_QWORD *)(v0 + 24) = v25;
      swift_getFunctionTypeMetadata1();
      swift_retain();
      v26 = sub_2365B0080();
      *(_QWORD *)(v0 + 48) = sub_236468D88(v26, v27, &v42);
      sub_2365B04A0();
      swift_bridgeObjectRelease();
      sub_236450690((uint64_t)v14);
      sub_236450690((uint64_t)v14);
      _os_log_impl(&dword_23644B000, v16, type, "Invalidating %s with currentUpdateHandler: %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23B7F5254](v39, -1, -1);
      MEMORY[0x23B7F5254](v20, -1, -1);
    }
    else
    {
      swift_release_n();
      sub_236450690((uint64_t)v14);
      sub_236450690((uint64_t)v14);
    }

    v32 = *(uint64_t **)(v0 + 104);
    v35 = type metadata accessor for _Coordinated.CommonError(0, *(_QWORD *)(v0 + 80), v33, v34);
    MEMORY[0x23B7F5164](&protocol conformance descriptor for _Coordinated<A>.CommonError, v35);
    v36 = swift_allocError();
    *v37 = xmmword_2365B4900;
    *v32 = v36;
    swift_storeEnumTagMultiPayload();
    v41 = (uint64_t (*)(_QWORD))((char *)v14 + *v14);
    v38 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v38;
    *v38 = v0;
    v38[1] = sub_23646F42C;
    return v41(*(_QWORD *)(v0 + 104));
  }
  else
  {
    v28 = sub_2365AFBE8();
    v29 = sub_2365B038C();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      _os_log_impl(&dword_23644B000, v28, v29, "Nothing to actively invalidate", v30, 2u);
      MEMORY[0x23B7F5254](v30, -1, -1);
    }

    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_23646F42C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch();
}

uint64_t sub_23646F4A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = (uint64_t *)(*(_QWORD *)(v0 + 72) + *(_QWORD *)(**(_QWORD **)(v0 + 72) + 120));
  v3 = *v2;
  *v2 = 0;
  v2[1] = 0;
  sub_236450690(v3);
  sub_236450690(v1);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23646F500(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  *(_QWORD *)(v3 + 16) = a1;
  v7 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v5;
  *v5 = v3;
  v5[1] = sub_23646F564;
  return v7(a2);
}

uint64_t sub_23646F564(char a1)
{
  uint64_t *v1;
  _BYTE *v3;
  uint64_t v5;

  v3 = *(_BYTE **)(*v1 + 16);
  v5 = *v1;
  swift_task_dealloc();
  *v3 = a1;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_23646F5B4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return swift_task_switch();
}

uint64_t sub_23646F5D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[4];
  v2 = v0[2];
  v3 = swift_task_alloc();
  v0[5] = v3;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc();
  v0[6] = v4;
  *v4 = v0;
  v4[1] = sub_23646F654;
  return sub_23646F6FC((uint64_t)sub_23647A398, v3);
}

uint64_t sub_23646F654()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23646F6C8()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23646F6FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  v3[11] = v4;
  v3[12] = swift_task_alloc();
  v7 = type metadata accessor for _Coordinated.ValueUpdate(0, v4, v5, v6);
  v3[13] = v7;
  v3[14] = *(_QWORD *)(v7 - 8);
  v3[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23646F788()
{
  _QWORD *v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (void (*)(uint64_t))v0[8];
  v2 = v0[10] + *(_QWORD *)(*(_QWORD *)v0[10] + 96);
  swift_beginAccess();
  v1(v2);
  swift_endAccess();
  sub_236471EF8();
  v3 = v0[15];
  v5 = v0[11];
  v4 = v0[12];
  v6 = (uint64_t *)v0[10];
  v7 = sub_23646C9F4();
  v8 = *v6;
  v9 = (uint64_t)v6 + *(_QWORD *)(*v6 + 96);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v8 + 80) - 8) + 16))(v4, v9);
  sub_23646F9E8(v7, 0, v4, 0, v5, v3);
  v10 = (_QWORD *)swift_task_alloc();
  v0[16] = v10;
  *v10 = v0;
  v10[1] = sub_23646F8E4;
  return sub_236471A14(v0[15], 0, v11, v12);
}

uint64_t sub_23646F8E4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23646F948()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23646F998()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23646F9E8@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  *(_QWORD *)a6 = a1;
  *(_BYTE *)(a6 + 8) = a2;
  v9 = type metadata accessor for _Coordinated.ValueUpdate(0, a5, a3, a4);
  v10 = *(_QWORD *)(a5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(a6 + *(int *)(v9 + 32), a3, a5);
  v11 = *(int *)(v9 + 36);
  v12 = sub_236473C78();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a3, a5);
  *(_QWORD *)(a6 + v11) = v12;
  return result;
}

uint64_t sub_23646FA78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v6[8] = *v5;
  return swift_task_switch();
}

uint64_t sub_23646FAA0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = v0[8];
  v2 = v0[6];
  v3 = v0[3];
  v4 = (_QWORD *)swift_task_alloc();
  v0[9] = (uint64_t)v4;
  v4[2] = *(_QWORD *)(v1 + 80);
  v4[3] = v2;
  v4[4] = v3;
  v5 = (_QWORD *)swift_task_alloc();
  v0[10] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = sub_23646FB30;
  return sub_23646FBD8(v0[2], (uint64_t)sub_23647A3EC, (uint64_t)v4, v0[4], v0[5], v0[6]);
}

uint64_t sub_23646FB30()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23646FBA4()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23646FBD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7[13] = a6;
  v7[14] = v6;
  v7[11] = a4;
  v7[12] = a5;
  v7[9] = a2;
  v7[10] = a3;
  v7[8] = a1;
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 80);
  v7[15] = v8;
  v7[16] = swift_getTupleTypeMetadata2();
  v7[17] = swift_task_alloc();
  v7[18] = *(_QWORD *)(v8 - 8);
  v7[19] = swift_task_alloc();
  v7[20] = swift_task_alloc();
  v11 = type metadata accessor for _Coordinated.ValueUpdate(0, v8, v9, v10);
  v7[21] = v11;
  v7[22] = *(_QWORD *)(v11 - 8);
  v7[23] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9790);
  v7[24] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23646FCE0()
{
  _QWORD *v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v1 = (void (*)(uint64_t))v0[9];
  v2 = v0[14] + *(_QWORD *)(*(_QWORD *)v0[14] + 96);
  swift_beginAccess();
  v1(v2);
  swift_endAccess();
  sub_236471EF8();
  v0[25] = 0;
  v3 = v0[24];
  v23 = v0[23];
  v22 = v0[20];
  v4 = v0[15];
  v6 = v0[13];
  v5 = (uint64_t *)v0[14];
  v7 = v0[11];
  v8 = v0[12];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E50D0);
  v9 = (_BYTE *)swift_allocObject();
  v0[26] = v9;
  swift_defaultActor_initialize();
  v10 = &v9[*(_QWORD *)(*(_QWORD *)v9 + 104)];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E50D8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v9[112] = 0;
  v12 = sub_2365B0218();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v3, 1, 1, v12);
  v15 = type metadata accessor for _Coordinated(255, v4, v13, v14);
  v16 = MEMORY[0x23B7F5164](&protocol conformance descriptor for _Coordinated<A>, v15);
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = v5;
  v17[3] = v16;
  v17[4] = v6;
  v17[5] = v5;
  v17[6] = v7;
  v17[7] = v8;
  v17[8] = v9;
  swift_retain_n();
  swift_retain();
  swift_retain();
  v0[27] = sub_2364718E4(v3, (uint64_t)&unk_2563E50E8, (uint64_t)v17);
  v18 = sub_23646C9F4();
  v19 = *v5;
  v20 = (uint64_t)v5 + *(_QWORD *)(*v5 + 96);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v19 + 80) - 8) + 16))(v22, v20);
  sub_23646F9E8(v18, 1, v22, 0, v4, v23);
  return swift_task_switch();
}

uint64_t sub_23646FF60()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = v0[25];
  sub_236479FF8();
  if (v1)
  {
    v0[32] = v1;
    return swift_task_switch();
  }
  else
  {
    sub_23645E904(&qword_2563E50F0, &qword_2563E50D0, (uint64_t)&protocol conformance descriptor for ValueIntercept<A>);
    v3 = (_QWORD *)swift_task_alloc();
    v0[28] = v3;
    *v3 = v0;
    v3[1] = sub_236470040;
    return sub_2365B0914();
  }
}

uint64_t sub_236470040()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 232) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2364700A8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[14];
  v2 = (_QWORD *)swift_task_alloc();
  v0[30] = v2;
  *v2 = v0;
  v2[1] = sub_236470100;
  return sub_236471A14(v0[23], v1, v3, v4);
}

uint64_t sub_236470100()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 248) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 264) = v4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542A8310);
  *v4 = v2;
  v4[1] = sub_236470260;
  return sub_2365B02A8();
}

uint64_t sub_2364701B0()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 256) = *(_QWORD *)(v0 + 232);
  return swift_task_switch();
}

uint64_t sub_2364701CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 176);
  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 168);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236470260()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 272) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2364702C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(_QWORD *)(v0 + 184);
  v1 = *(_QWORD *)(v0 + 160);
  v9 = *(_QWORD *)(v0 + 176);
  v10 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 136) + *(int *)(*(_QWORD *)(v0 + 128) + 48);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 32))(v2, *(_QWORD *)(v0 + 136), v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v6, v7, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v4);
  sub_23646C8A8(v1);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2364703F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 176);
  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 168);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236470488()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 176);
  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 168);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23647051C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[6] = a7;
  v8[7] = a8;
  v8[4] = a5;
  v8[5] = a6;
  v8[2] = a1;
  v8[3] = a4;
  v8[8] = *a4;
  return swift_task_switch();
}

uint64_t sub_236470544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;

  v5 = *(_QWORD *)(v4 + 56);
  v6 = type metadata accessor for _Coordinated(255, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 80), a3, a4);
  MEMORY[0x23B7F5164](&protocol conformance descriptor for _Coordinated<A>, v6);
  v7 = swift_task_alloc();
  *(_QWORD *)(v4 + 72) = v7;
  v8 = *(_OWORD *)(v4 + 24);
  v9 = *(_OWORD *)(v4 + 40);
  *(_QWORD *)(v7 + 16) = v5;
  *(_OWORD *)(v7 + 24) = v8;
  *(_OWORD *)(v7 + 40) = v9;
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 80) = v10;
  swift_getTupleTypeMetadata2();
  *v10 = v4;
  v10[1] = sub_236470640;
  return sub_2365B0914();
}

uint64_t sub_236470640()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_2364706B4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v30 = a4;
  v31 = a5;
  v29 = a3;
  v9 = *a2;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9790);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v9 + 80);
  swift_getTupleTypeMetadata2();
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542A8310);
  v14 = sub_2365B01D0();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v28 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)&v28 - v17, a1, v14);
  v19 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v13;
  *(_QWORD *)(v20 + 24) = a6;
  (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v20 + v19, v18, v14);
  v21 = (_QWORD *)(v20 + ((v16 + v19 + 7) & 0xFFFFFFFFFFFFFFF8));
  v22 = v30;
  *v21 = v29;
  v21[1] = v22;
  v23 = (uint64_t *)((char *)a2 + *(_QWORD *)(*a2 + 120));
  v24 = *v23;
  *v23 = (uint64_t)&unk_2563E5C70;
  v23[1] = v20;
  swift_retain();
  sub_236450690(v24);
  v25 = sub_2365B0218();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v12, 1, 1, v25);
  v26 = (_QWORD *)swift_allocObject();
  v26[2] = 0;
  v26[3] = 0;
  v26[4] = v31;
  swift_retain();
  sub_236492240((uint64_t)v12, (uint64_t)&unk_2563E5C80, (uint64_t)v26);
  return swift_release();
}

uint64_t sub_2364708B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6[14] = a5;
  v6[15] = a6;
  v6[12] = a3;
  v6[13] = a4;
  v6[10] = a1;
  v6[11] = a2;
  v6[16] = swift_getTupleTypeMetadata2();
  v6[17] = swift_task_alloc();
  v6[18] = *(_QWORD *)(a6 - 8);
  v6[19] = swift_task_alloc();
  v6[20] = swift_task_alloc();
  v6[21] = swift_task_alloc();
  type metadata accessor for CoordinatedDecision(0, a6, v9, v10);
  v6[22] = swift_task_alloc();
  v6[23] = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542A8310);
  v11 = sub_2365B0A40();
  v6[24] = v11;
  v6[25] = *(_QWORD *)(v11 - 8);
  v6[26] = swift_task_alloc();
  v6[27] = *(_QWORD *)(a5 - 8);
  v6[28] = swift_task_alloc();
  v6[29] = swift_task_alloc();
  v6[30] = swift_task_alloc();
  v6[31] = swift_task_alloc();
  v6[32] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_236470A28()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  int *v11;
  _QWORD *v12;
  int *v14;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 16))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 192));
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v1 = **(void ***)(v0 + 208);
    if (qword_2563E42C0 != -1)
      swift_once();
    v2 = sub_2365AFC00();
    __swift_project_value_buffer(v2, (uint64_t)qword_2563E5060);
    v3 = v1;
    v4 = v1;
    v5 = sub_2365AFBE8();
    v6 = sub_2365B0398();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v7 = 138412290;
      v9 = v1;
      v10 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 24) = v10;
      sub_2365B04A0();
      *v8 = v10;

      _os_log_impl(&dword_23644B000, v5, v6, "Failed to coordinate with error: %@", v7, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9960);
      swift_arrayDestroy();
      MEMORY[0x23B7F5254](v8, -1, -1);
      MEMORY[0x23B7F5254](v7, -1, -1);
    }
    else
    {

    }
    *(_QWORD *)(v0 + 16) = v1;
    sub_2365B01D0();
    sub_2365B01B8();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
  }
  else
  {
    v11 = *(int **)(v0 + 96);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 32))(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 112));
    v14 = (int *)((char *)v11 + *v11);
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 264) = v12;
    *v12 = v0;
    v12[1] = sub_236470D28;
    return ((uint64_t (*)(_QWORD, _QWORD))v14)(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 256));
  }
}

uint64_t sub_236470D28()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 272) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_236470D8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  void (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  int v71;
  uint64_t v72;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3);
  v5 = v4;
  if (v4 == 1)
  {
    if (qword_2563E42C0 != -1)
      swift_once();
    v27 = *(_QWORD *)(v0 + 256);
    v28 = *(_QWORD *)(v0 + 232);
    v29 = *(_QWORD *)(v0 + 216);
    v30 = *(_QWORD *)(v0 + 112);
    v31 = sub_2365AFC00();
    __swift_project_value_buffer(v31, (uint64_t)qword_2563E5060);
    v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16);
    v32(v28, v27, v30);
    v33 = sub_2365AFBE8();
    v34 = sub_2365B038C();
    v35 = os_log_type_enabled(v33, v34);
    v36 = *(_QWORD *)(v0 + 256);
    if (v35)
    {
      v69 = *(_QWORD *)(v0 + 256);
      v37 = *(_QWORD *)(v0 + 232);
      v38 = *(_QWORD *)(v0 + 240);
      v67 = *(_QWORD *)(v0 + 216);
      v39 = *(_QWORD *)(v0 + 112);
      v40 = (uint8_t *)swift_slowAlloc();
      v41 = swift_slowAlloc();
      v72 = v41;
      *(_DWORD *)v40 = 136315138;
      v32(v38, v37, v39);
      v42 = sub_2365B0080();
      *(_QWORD *)(v0 + 56) = sub_236468D88(v42, v43, &v72);
      sub_2365B04A0();
      swift_bridgeObjectRelease();
      v44 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
      v44(v37, v39);
      _os_log_impl(&dword_23644B000, v33, v34, "Continuing to wait for coordination to complete: %s", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7F5254](v41, -1, -1);
      v45 = v40;
      v5 = 1;
      MEMORY[0x23B7F5254](v45, -1, -1);

      v44(v69, v39);
    }
    else
    {
      v54 = *(_QWORD *)(v0 + 232);
      v55 = *(_QWORD *)(v0 + 216);
      v56 = *(_QWORD *)(v0 + 112);

      v57 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
      v57(v54, v56);
      v57(v36, v56);
    }
  }
  else
  {
    v71 = v4;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 168), v1, v3);
    if (qword_2563E42C0 != -1)
      swift_once();
    v6 = *(_QWORD *)(v0 + 248);
    v7 = *(_QWORD *)(v0 + 256);
    v8 = *(_QWORD *)(v0 + 216);
    v10 = *(_QWORD *)(v0 + 160);
    v9 = *(_QWORD *)(v0 + 168);
    v11 = *(_QWORD *)(v0 + 144);
    v13 = *(_QWORD *)(v0 + 112);
    v12 = *(_QWORD *)(v0 + 120);
    v14 = sub_2365AFC00();
    __swift_project_value_buffer(v14, (uint64_t)qword_2563E5060);
    v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    v68(v6, v7, v13);
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    v15(v10, v9, v12);
    v16 = sub_2365AFBE8();
    v17 = sub_2365B038C();
    v18 = os_log_type_enabled(v16, v17);
    v19 = *(_QWORD *)(v0 + 248);
    v66 = v15;
    if (v18)
    {
      v20 = *(_QWORD *)(v0 + 240);
      v59 = *(_QWORD *)(v0 + 216);
      v60 = *(_QWORD *)(v0 + 152);
      v64 = *(_QWORD *)(v0 + 144);
      v21 = *(_QWORD *)(v0 + 112);
      v61 = *(_QWORD *)(v0 + 120);
      v62 = *(_QWORD *)(v0 + 160);
      v22 = swift_slowAlloc();
      v63 = swift_slowAlloc();
      v72 = v63;
      *(_DWORD *)v22 = 136315394;
      v68(v20, v19, v21);
      v23 = sub_2365B0080();
      *(_QWORD *)(v0 + 64) = sub_236468D88(v23, v24, &v72);
      sub_2365B04A0();
      swift_bridgeObjectRelease();
      v70 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
      v70(v19, v21);
      *(_WORD *)(v22 + 12) = 2080;
      v15(v60, v62, v61);
      v25 = sub_2365B0080();
      *(_QWORD *)(v0 + 72) = sub_236468D88(v25, v26, &v72);
      sub_2365B04A0();
      swift_bridgeObjectRelease();
      v65 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
      v65(v62, v61);
      _os_log_impl(&dword_23644B000, v16, v17, "Accepting / completing coordination for inValue (%s) with outValue: %s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23B7F5254](v63, -1, -1);
      MEMORY[0x23B7F5254](v22, -1, -1);
    }
    else
    {
      v46 = *(_QWORD *)(v0 + 160);
      v47 = *(_QWORD *)(v0 + 144);
      v48 = *(_QWORD *)(v0 + 120);
      v70 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 216) + 8);
      v70(v19, *(_QWORD *)(v0 + 112));
      v65 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
      v65(v46, v48);
    }

    v49 = *(_QWORD *)(v0 + 256);
    v50 = *(_QWORD *)(v0 + 168);
    v52 = *(_QWORD *)(v0 + 112);
    v51 = *(_QWORD *)(v0 + 120);
    v53 = *(_QWORD *)(v0 + 136) + *(int *)(*(_QWORD *)(v0 + 128) + 48);
    v68(*(_QWORD *)(v0 + 136), v49, v52);
    v66(v53, v50, v51);
    sub_2365B01D0();
    sub_2365B01C4();
    v65(v50, v51);
    v70(v49, v52);
    v5 = v71;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(BOOL))(v0 + 8))(v5 != 1);
}

uint64_t sub_236471398()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  if (qword_2563E42C0 != -1)
    swift_once();
  v1 = *(void **)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 112);
  v6 = sub_2365AFC00();
  __swift_project_value_buffer(v6, (uint64_t)qword_2563E5060);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v7(v3, v2, v5);
  v8 = v1;
  v9 = v1;
  v10 = sub_2365AFBE8();
  v11 = sub_2365B0398();
  v12 = os_log_type_enabled(v10, v11);
  v13 = *(void **)(v0 + 272);
  if (v12)
  {
    v14 = *(_QWORD *)(v0 + 240);
    v15 = *(_QWORD *)(v0 + 224);
    v26 = *(_QWORD *)(v0 + 216);
    v16 = *(_QWORD *)(v0 + 112);
    v17 = swift_slowAlloc();
    v27 = (_QWORD *)swift_slowAlloc();
    v28 = swift_slowAlloc();
    v29 = v28;
    *(_DWORD *)v17 = 136315394;
    v7(v14, v15, v16);
    v18 = sub_2365B0080();
    *(_QWORD *)(v0 + 40) = sub_236468D88(v18, v19, &v29);
    sub_2365B04A0();
    swift_bridgeObjectRelease();
    v20 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v20(v15, v16);
    *(_WORD *)(v17 + 12) = 2112;
    v21 = v13;
    v22 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 48) = v22;
    sub_2365B04A0();
    *v27 = v22;

    _os_log_impl(&dword_23644B000, v10, v11, "Failed to handle incoming value (%s) with error: %@", (uint8_t *)v17, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9960);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v27, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v28, -1, -1);
    MEMORY[0x23B7F5254](v17, -1, -1);
  }
  else
  {
    v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 216) + 8);
    v20(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 112));

  }
  v23 = *(_QWORD *)(v0 + 256);
  v24 = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 32) = *(_QWORD *)(v0 + 272);
  sub_2365B01D0();
  sub_2365B01B8();
  v20(v23, v24);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
}

uint64_t sub_236471700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[8] = a1;
  v4[9] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5C40);
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E50D8);
  v4[12] = v5;
  v4[13] = *(_QWORD *)(v5 - 8);
  v4[14] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23647179C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 72) + *(_QWORD *)(**(_QWORD **)(v0 + 72) + 104);
  swift_beginAccess();
  sub_23647DF90(v4, v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_236465998(*(_QWORD *)(v0 + 88), &qword_2563E5C40);
    v5 = 1;
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 104);
    v6 = *(_QWORD *)(v0 + 112);
    v8 = *(_QWORD *)(v0 + 96);
    v9 = *(_QWORD *)(v0 + 80);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 32))(v6, *(_QWORD *)(v0 + 88), v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v9, 1, 1, v8);
    swift_beginAccess();
    sub_23647DF48(v9, v4);
    swift_endAccess();
    sub_2365B01C4();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v5 = 0;
  }
  **(_BYTE **)(v0 + 64) = v5;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2364718E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_2365B0218();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_2365B020C();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  sub_236465998(a1, &qword_2563E9790);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_2365B01AC();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_236471A14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[3] = a2;
  v5[4] = v4;
  v5[2] = a1;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  v5[5] = v6;
  v7 = type metadata accessor for _Coordinated.ValueUpdate.Response(0, v6, a3, a4);
  v5[6] = v7;
  v5[7] = *(_QWORD *)(v7 - 8);
  v5[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_236471A84()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  if (qword_2563E42C0 != -1)
    swift_once();
  v1 = sub_2365AFC00();
  v0[9] = __swift_project_value_buffer(v1, (uint64_t)qword_2563E5060);
  v2 = sub_2365AFBE8();
  v3 = sub_2365B038C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_23644B000, v2, v3, "Running taps with echo response for update", v4, 2u);
    MEMORY[0x23B7F5254](v4, -1, -1);
  }
  v5 = (char *)v0[8];
  v6 = v0[5];
  v7 = v0[2];

  v10 = type metadata accessor for _Coordinated.ValueUpdate(0, v6, v8, v9);
  _Coordinated.ValueUpdate.response(withUpdatedValue:)(v7 + *(int *)(v10 + 32), v10, v5);
  v11 = (_QWORD *)swift_task_alloc();
  v0[10] = v11;
  *v11 = v0;
  v11[1] = sub_236471BB8;
  return sub_23646D620(v0[8]);
}

uint64_t sub_236471BB8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_236471C1C()
{
  _QWORD *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(_QWORD, _QWORD);

  v1 = sub_2365AFBE8();
  v2 = sub_2365B038C();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_23644B000, v1, v2, "Finished running taps, calling receiver", v3, 2u);
    MEMORY[0x23B7F5254](v3, -1, -1);
  }
  v4 = v0[4];

  v7 = (uint64_t (*)(_QWORD, _QWORD))(**(int **)(v4 + *(_QWORD *)(*(_QWORD *)v4 + 104))
                                              + *(_QWORD *)(v4 + *(_QWORD *)(*(_QWORD *)v4 + 104)));
  v5 = (_QWORD *)swift_task_alloc();
  v0[12] = v5;
  *v5 = v0;
  v5[1] = sub_236471D00;
  return v7(v0[3], v0[2]);
}

uint64_t sub_236471D00()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_236471D64()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236471DAC()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236471DF4()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _Coordinated.ValueUpdate.response(withUpdatedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(_QWORD *, _QWORD);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  (*(void (**)(char *))(v6 + 16))(v8);
  v10 = sub_236473CC0();
  *(_QWORD *)a3 = v9;
  v13 = type metadata accessor for _Coordinated.ValueUpdate.Response(0, v5, v11, v12);
  result = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 32))(&a3[*(int *)(v13 + 32)], v8, v5);
  *((_QWORD *)a3 + 1) = v10;
  return result;
}

void sub_236471EF8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;

  v1 = *v0;
  if ((*((_BYTE *)v0 + *(_QWORD *)(*v0 + 128)) & 1) != 0)
  {
    if (qword_2563E42C0 != -1)
      swift_once();
    v2 = sub_2365AFC00();
    __swift_project_value_buffer(v2, (uint64_t)qword_2563E5060);
    swift_retain_n();
    v3 = sub_2365AFBE8();
    v4 = sub_2365B0380();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      v6 = swift_slowAlloc();
      v25 = v6;
      *(_DWORD *)v5 = 136315138;
      v7 = *(_QWORD *)(v1 + 80);
      type metadata accessor for _Coordinated(0, v7, v8, v9);
      swift_retain();
      v10 = sub_2365B0080();
      sub_236468D88(v10, v11, &v25);
      sub_2365B04A0();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_23644B000, v3, v4, "Coordinator %s is invalidated", v5, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7F5254](v6, -1, -1);
      MEMORY[0x23B7F5254](v5, -1, -1);

    }
    else
    {
      swift_release_n();

      v7 = *(_QWORD *)(v1 + 80);
    }
    v23 = type metadata accessor for _Coordinated.CommonError(0, v7, v12, v13);
    MEMORY[0x23B7F5164](&protocol conformance descriptor for _Coordinated<A>.CommonError, v23);
    swift_allocError();
    *v24 = xmmword_2365B4900;
    swift_willThrow();
  }
  else
  {
    if (qword_2563E42C0 != -1)
      swift_once();
    v14 = sub_2365AFC00();
    __swift_project_value_buffer(v14, (uint64_t)qword_2563E5060);
    swift_retain_n();
    v15 = sub_2365AFBE8();
    v16 = sub_2365B038C();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      v25 = v18;
      *(_DWORD *)v17 = 136315138;
      type metadata accessor for _Coordinated(0, *(_QWORD *)(v1 + 80), v19, v20);
      swift_retain();
      v21 = sub_2365B0080();
      sub_236468D88(v21, v22, &v25);
      sub_2365B04A0();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_23644B000, v15, v16, "Checked that %s is not invalidated & ready to coordinate", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7F5254](v18, -1, -1);
      MEMORY[0x23B7F5254](v17, -1, -1);
    }
    else
    {
      swift_release_n();
    }

  }
}

uint64_t sub_2364722A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v4[6] = *v3;
  return swift_task_switch();
}

uint64_t sub_2364722C4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = v0[6];
  v3 = v0[3];
  v2 = v0[4];
  v4 = (_QWORD *)swift_allocObject();
  v0[7] = (uint64_t)v4;
  v4[2] = *(_QWORD *)(v1 + 80);
  v4[3] = v3;
  v4[4] = v2;
  swift_retain();
  v5 = (_QWORD *)swift_task_alloc();
  v0[8] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = sub_236472364;
  return sub_236472614(v0[2], (uint64_t)&unk_2563E5108, (uint64_t)v4);
}

uint64_t sub_236472364()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2364723BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t sub_2364723D8()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(v0 + 32))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236472410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v4[6] = *v3;
  return swift_task_switch();
}

uint64_t sub_236472434()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = v0[6];
  v3 = v0[3];
  v2 = v0[4];
  v4 = (_QWORD *)swift_allocObject();
  v0[7] = (uint64_t)v4;
  v4[2] = *(_QWORD *)(v1 + 80);
  v4[3] = v3;
  v4[4] = v2;
  swift_retain();
  v5 = (_QWORD *)swift_task_alloc();
  v0[8] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = sub_2364724D4;
  return sub_236472614(v0[2], (uint64_t)&unk_2563E5128, (uint64_t)v4);
}

uint64_t sub_2364724D4()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23647252C()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23647255C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)a3 + *a3);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_2364725C8;
  return v8(a1, a2);
}

uint64_t sub_2364725C8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_236472614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  v4[8] = *v3;
  v5 = sub_2365AF9FC();
  v4[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[10] = v6;
  v4[11] = *(_QWORD *)(v6 + 64);
  v4[12] = swift_task_alloc();
  v4[13] = swift_task_alloc();
  v4[14] = swift_task_alloc();
  v4[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_2364726AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;

  sub_2365AF9F0();
  if (qword_2563E42C0 != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v5 = sub_2365AFC00();
  __swift_project_value_buffer(v5, (uint64_t)qword_2563E5060);
  v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v49(v2, v1, v4);
  v6 = sub_2365AFBE8();
  v7 = sub_2365B038C();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 112);
  v11 = *(_QWORD *)(v0 + 72);
  v10 = *(_QWORD *)(v0 + 80);
  if (v8)
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v51 = v13;
    *(_DWORD *)v12 = 136315138;
    sub_23647A6F4((unint64_t *)&qword_2563E5130, MEMORY[0x24BDCEAB8]);
    v14 = sub_2365B0860();
    *(_QWORD *)(v0 + 24) = sub_236468D88(v14, v15, &v51);
    sub_2365B04A0();
    swift_bridgeObjectRelease();
    v50 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v50(v9, v11);
    _os_log_impl(&dword_23644B000, v6, v7, "Tapping with with id: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v13, -1, -1);
    MEMORY[0x23B7F5254](v12, -1, -1);
  }
  else
  {
    v50 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v50(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 72));
  }

  v16 = *(_QWORD *)(v0 + 120);
  v17 = *(_QWORD *)(v0 + 104);
  v18 = *(_QWORD *)(v0 + 80);
  v46 = *(_QWORD *)(v0 + 96);
  v47 = *(_QWORD *)(v0 + 88);
  v19 = *(_QWORD *)(v0 + 72);
  v45 = *(_QWORD *)(v0 + 48);
  v43 = v16;
  v44 = *(_QWORD *)(v0 + 40);
  v20 = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 80);
  v42 = v20;
  v21 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542A8310);
  v22 = type metadata accessor for _Coordinated.AsyncThrowingTapHandle(0, v20, v21, MEMORY[0x24BEE3F20]);
  v23 = swift_allocObject();
  swift_weakInit();
  v49(v17, v16, v19);
  v24 = (*(unsigned __int8 *)(v18 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = v42;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v18 + 32))(v25 + v24, v17, v19);
  *(_QWORD *)(v25 + ((v47 + v24 + 7) & 0xFFFFFFFFFFFFFFF8)) = v23;
  v48 = v22;
  v26 = (_QWORD *)swift_allocObject();
  v26[4] = v44;
  v26[5] = v45;
  v26[2] = sub_23647A6A4;
  v26[3] = v25;
  v49(v46, v43, v19);
  swift_retain();
  v27 = sub_2365AFBE8();
  v28 = sub_2365B038C();
  v29 = os_log_type_enabled(v27, v28);
  v30 = *(_QWORD *)(v0 + 96);
  v31 = *(_QWORD *)(v0 + 72);
  if (v29)
  {
    v32 = (uint8_t *)swift_slowAlloc();
    v33 = swift_slowAlloc();
    v51 = v33;
    *(_DWORD *)v32 = 136315138;
    sub_23647A6F4((unint64_t *)&qword_2563E5130, MEMORY[0x24BDCEAB8]);
    v34 = sub_2365B0860();
    *(_QWORD *)(v0 + 16) = sub_236468D88(v34, v35, &v51);
    sub_2365B04A0();
    swift_bridgeObjectRelease();
    v50(v30, v31);
    _os_log_impl(&dword_23644B000, v27, v28, "Adding tap with id: %s", v32, 0xCu);
    swift_arrayDestroy();
    v36 = v33;
    v37 = v50;
    MEMORY[0x23B7F5254](v36, -1, -1);
    MEMORY[0x23B7F5254](v32, -1, -1);
  }
  else
  {
    v37 = v50;
    v50(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 72));
  }

  v38 = *(_QWORD *)(v0 + 120);
  v39 = *(_QWORD *)(v0 + 72);
  v40 = *(_QWORD **)(v0 + 32);
  sub_2364730E0((uint64_t)v26, v38);
  v40[3] = v48;
  v40[4] = &off_2507D03B8;
  *v40 = v26;
  v37(v38, v39);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236472B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  void (*v28)(char *, uint64_t);
  uint8_t *v29;
  uint64_t result;
  char *v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  void (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56[3];

  v51 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9790);
  MEMORY[0x24BDAC7A8](v5);
  v49 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_2365AF9FC();
  v8 = *(_QWORD **)(v7 - 8);
  v9 = v8[8];
  v10 = MEMORY[0x24BDAC7A8](v7);
  v48 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v52 = (char *)&v45 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v45 - v13;
  v15 = (void (*)(char *, uint64_t))(a2 + 16);
  if (qword_2563E42C0 != -1)
    swift_once();
  v16 = sub_2365AFC00();
  v17 = __swift_project_value_buffer(v16, (uint64_t)qword_2563E5060);
  v18 = (void (*)(char *, uint64_t, uint64_t))v8[2];
  v18(v14, a1, v7);
  v50 = v17;
  v19 = sub_2365AFBE8();
  v20 = sub_2365B038C();
  v21 = os_log_type_enabled(v19, v20);
  v53 = v8;
  v47 = v9;
  if (v21)
  {
    v22 = swift_slowAlloc();
    v46 = v18;
    v23 = (uint8_t *)v22;
    v24 = swift_slowAlloc();
    v56[0] = v24;
    *(_DWORD *)v23 = 136315138;
    v45 = v15;
    sub_23647A6F4((unint64_t *)&qword_2563E5130, MEMORY[0x24BDCEAB8]);
    v25 = sub_2365B0860();
    v55 = sub_236468D88(v25, v26, v56);
    v27 = v53;
    sub_2365B04A0();
    swift_bridgeObjectRelease();
    v28 = (void (*)(char *, uint64_t))v27[1];
    v28(v14, v7);
    _os_log_impl(&dword_23644B000, v19, v20, "Called to untap with %s", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v24, -1, -1);
    v29 = v23;
    v18 = v46;
    MEMORY[0x23B7F5254](v29, -1, -1);
  }
  else
  {
    v28 = (void (*)(char *, uint64_t))v8[1];
    v28(v14, v7);
  }

  swift_beginAccess();
  result = swift_weakLoadStrong();
  v31 = v52;
  if (result)
  {
    v32 = result;
    v45 = v28;
    v18(v52, a1, v7);
    v33 = sub_2365AFBE8();
    v34 = sub_2365B038C();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc();
      v36 = swift_slowAlloc();
      v55 = v36;
      v46 = v18;
      v50 = a1;
      *(_DWORD *)v35 = 136315138;
      sub_23647A6F4((unint64_t *)&qword_2563E5130, MEMORY[0x24BDCEAB8]);
      v37 = sub_2365B0860();
      v54 = sub_236468D88(v37, v38, &v55);
      a1 = v50;
      v18 = v46;
      sub_2365B04A0();
      swift_bridgeObjectRelease();
      v45(v31, v7);
      _os_log_impl(&dword_23644B000, v33, v34, "Untapping with %s", v35, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7F5254](v36, -1, -1);
      MEMORY[0x23B7F5254](v35, -1, -1);
    }
    else
    {
      v45(v31, v7);
    }

    v40 = v48;
    v39 = (uint64_t)v49;
    v41 = sub_2365B0218();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v39, 1, 1, v41);
    v18(v40, a1, v7);
    v42 = v53;
    v43 = (*((unsigned __int8 *)v53 + 80) + 48) & ~(unint64_t)*((unsigned __int8 *)v53 + 80);
    v44 = (char *)swift_allocObject();
    *((_QWORD *)v44 + 2) = 0;
    *((_QWORD *)v44 + 3) = 0;
    *((_QWORD *)v44 + 4) = v51;
    *((_QWORD *)v44 + 5) = v32;
    ((void (*)(char *, char *, uint64_t))v42[4])(&v44[v43], v40, v7);
    sub_23649225C(v39, (uint64_t)&unk_2563E5C38, (uint64_t)v44);
    return swift_release();
  }
  return result;
}

uint64_t sub_236473048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch();
}

uint64_t sub_236473060()
{
  uint64_t v0;

  sub_2364733D0(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_236473090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[4] = a1;
  result[5] = a2;
  result[2] = a3;
  result[3] = a4;
  return result;
}

uint64_t sub_2364730E0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33[3];
  uint64_t v34;

  v5 = *v2;
  v6 = sub_2365AF9FC();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v27 - v11;
  if (qword_2563E42C0 != -1)
    swift_once();
  v13 = sub_2365AFC00();
  __swift_project_value_buffer(v13, (uint64_t)qword_2563E5060);
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v32 = a2;
  v31(v12, a2, v6);
  v14 = sub_2365AFBE8();
  v15 = sub_2365B038C();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc();
    v29 = a1;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc();
    v30 = v10;
    v19 = v18;
    v33[0] = v18;
    v27 = v2;
    v28 = v5;
    *(_DWORD *)v17 = 136315138;
    sub_23647A6F4((unint64_t *)&qword_2563E5130, MEMORY[0x24BDCEAB8]);
    v20 = sub_2365B0860();
    v34 = sub_236468D88(v20, v21, v33);
    v5 = v28;
    sub_2365B04A0();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    _os_log_impl(&dword_23644B000, v14, v15, "Actually adding the tap with id now: %s", v17, 0xCu);
    swift_arrayDestroy();
    v22 = v19;
    v10 = v30;
    MEMORY[0x23B7F5254](v22, -1, -1);
    v23 = v17;
    a1 = v29;
    MEMORY[0x23B7F5254](v23, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  }

  v31(v10, v32, v6);
  v34 = a1;
  swift_beginAccess();
  v24 = *(_QWORD *)(v5 + 80);
  swift_retain();
  v25 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542A8310);
  type metadata accessor for _Coordinated.AsyncThrowingTapHandle(255, v24, v25, MEMORY[0x24BEE3F20]);
  sub_23647A6F4(&qword_2563E5088, MEMORY[0x24BDCEA88]);
  sub_2365AFF90();
  sub_2365AFFC0();
  return swift_endAccess();
}

uint64_t sub_2364733D0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31[3];
  uint64_t v32;

  v3 = *v1;
  v4 = sub_2365AF9FC();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v25 - v9;
  if (qword_2563E42C0 != -1)
    swift_once();
  v11 = sub_2365AFC00();
  __swift_project_value_buffer(v11, (uint64_t)qword_2563E5060);
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v30(v10, a1, v4);
  v12 = sub_2365AFBE8();
  v13 = sub_2365B038C();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc();
    v29 = v8;
    v15 = (uint8_t *)v14;
    v16 = swift_slowAlloc();
    v26 = a1;
    v17 = v16;
    v31[0] = v16;
    v27 = v1;
    v28 = v3;
    *(_DWORD *)v15 = 136315138;
    sub_23647A6F4((unint64_t *)&qword_2563E5130, MEMORY[0x24BDCEAB8]);
    v18 = sub_2365B0860();
    v32 = sub_236468D88(v18, v19, v31);
    v3 = v28;
    sub_2365B04A0();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    _os_log_impl(&dword_23644B000, v12, v13, "Removing tap with id: %s", v15, 0xCu);
    swift_arrayDestroy();
    v20 = v17;
    a1 = v26;
    MEMORY[0x23B7F5254](v20, -1, -1);
    v21 = v15;
    v8 = v29;
    MEMORY[0x23B7F5254](v21, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }

  v30(v8, a1, v4);
  v32 = 0;
  swift_beginAccess();
  v22 = *(_QWORD *)(v3 + 80);
  v23 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542A8310);
  type metadata accessor for _Coordinated.AsyncThrowingTapHandle(255, v22, v23, MEMORY[0x24BEE3F20]);
  sub_23647A6F4(&qword_2563E5088, MEMORY[0x24BDCEA88]);
  sub_2365AFF90();
  sub_2365AFFC0();
  return swift_endAccess();
}

uint64_t _Coordinated.deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96));
  swift_release();
  swift_bridgeObjectRelease();
  sub_236450690(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120)));
  swift_defaultActor_destroy();
  return v0;
}

uint64_t _Coordinated.__deallocating_deinit()
{
  _Coordinated.deinit();
  return swift_defaultActor_deallocate();
}

uint64_t sub_236473740(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_236473758()
{
  uint64_t v0;

  sub_23646C844(*(_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236473788(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23647E27C;
  return sub_23646CA38(a1);
}

uint64_t sub_2364737D4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_23647E274;
  return sub_23646EE20();
}

uint64_t sub_236473818(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23647E274;
  v4[2] = a1;
  v4[3] = v1;
  v4[4] = *v1;
  return swift_task_switch();
}

uint64_t sub_236473880(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23647E274;
  return sub_23646F6FC(a1, a2);
}

uint64_t sub_2364738DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v12;

  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = sub_23647E274;
  v12[6] = a5;
  v12[7] = v5;
  v12[4] = a3;
  v12[5] = a4;
  v12[2] = a1;
  v12[3] = a2;
  v12[8] = *v5;
  return swift_task_switch();
}

uint64_t sub_23647396C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;

  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = sub_23647E274;
  return sub_23646FBD8(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_2364739FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_23647E274;
  v8[4] = a3;
  v8[5] = v3;
  v8[2] = a1;
  v8[3] = a2;
  v8[6] = *v3;
  return swift_task_switch();
}

uint64_t sub_236473A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_23647E274;
  v8[4] = a3;
  v8[5] = v3;
  v8[2] = a1;
  v8[3] = a2;
  v8[6] = *v3;
  return swift_task_switch();
}

uint64_t sub_236473AF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23647E274;
  return sub_236472614(a1, a2, a3);
}

uint64_t sub_236473B5C()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(v0 + 16);
  swift_retain();
  v2 = swift_release();
  v1(v2);
  return swift_release();
}

uint64_t sub_236473B9C()
{
  uint64_t v0;

  swift_retain();
  sub_236473B5C();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_236473BCC()
{
  sub_236473B9C();
  return swift_deallocClassInstance();
}

uint64_t sub_236473BE8()
{
  return sub_236473B5C();
}

id _Coordinated.HaltingTapError.underlyingError.getter()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

uint64_t _Coordinated.HaltingTapError.init(underlyingError:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t _Coordinated.ValueUpdate.isCoordinated.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t _Coordinated.ValueUpdate.updatedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 32), a1);
}

uint64_t (*_Coordinated.ValueUpdate.updatedValue.modify())()
{
  return nullsub_1;
}

uint64_t sub_236473C78()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5138);
  swift_allocObject();
  return sub_2365AFAB0();
}

void (*sub_236473CC0())(_QWORD *, _QWORD)
{
  void (*result)(_QWORD *, _QWORD);
  _QWORD *v1;
  _QWORD v2[4];

  sub_2365AFAC8();
  if (v2[0] == -1)
  {
    v2[0] = 0;
    sub_2365AFAD4();
  }
  result = (void (*)(_QWORD *, _QWORD))sub_2365AFABC();
  if (*v1 == -1)
  {
    __break(1u);
  }
  else
  {
    ++*v1;
    result(v2, 0);
    sub_2365AFAC8();
    return (void (*)(_QWORD *, _QWORD))v2[0];
  }
  return result;
}

BOOL sub_236473D68(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_236473D78()
{
  return sub_2365B09F8();
}

uint64_t sub_236473D9C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65636E6575716573 && a2 == 0xEA00000000004449;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6964726F6F437369 && a2 == 0xED0000646574616ELL || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x5664657461647075 && a2 == 0xEC00000065756C61 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x80000002365CB780)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_236473F98(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_236473FD0 + 4 * byte_2365B4AA4[a1]))(0x65636E6575716573, 0xEA00000000004449);
}

uint64_t sub_236473FD0()
{
  return 0x6964726F6F437369;
}

uint64_t sub_236473FF4()
{
  return 0x5664657461647075;
}

unint64_t sub_236474014()
{
  return 0xD000000000000019;
}

BOOL sub_236474030(char *a1, char *a2)
{
  return sub_236473D68(*a1, *a2);
}

uint64_t sub_236474040()
{
  return sub_2364742C8();
}

uint64_t sub_23647405C()
{
  return sub_236473D78();
}

uint64_t sub_236474068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_236474380(a1, a2, a3, (void (*)(_BYTE *, _QWORD, _QWORD))sub_236473D78);
}

uint64_t sub_236474074()
{
  unsigned __int8 *v0;

  return sub_236473F98(*v0);
}

uint64_t sub_236474080@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_236473D9C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2364740A8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23647A7C4();
  *a1 = result;
  return result;
}

uint64_t sub_2364740D0(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365B52E8, a1);
  return sub_2365B0AD0();
}

uint64_t sub_236474104(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365B52E8, a1);
  return sub_2365B0ADC();
}

uint64_t _s12AppleIDSetup12_CoordinatedC11ValueUpdateV07updatedD0xvg_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 32));
}

uint64_t sub_236474158(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65636E6575716573 && a2 == 0xEA00000000004449;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002365CB7A0 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x5664657461647075 && a2 == 0xEC00000065756C61)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_2364742C8()
{
  sub_2365B09E0();
  sub_2365B09F8();
  return sub_2365B0A34();
}

uint64_t sub_23647430C(char a1)
{
  if (!a1)
    return 0x65636E6575716573;
  if (a1 == 1)
    return 0xD000000000000012;
  return 0x5664657461647075;
}

uint64_t sub_236474374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_236474380(a1, a2, a3, (void (*)(_BYTE *, _QWORD, _QWORD))sub_23647E2AC);
}

uint64_t sub_236474380(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, _QWORD, _QWORD))
{
  unsigned __int8 *v4;
  _BYTE v8[72];

  sub_2365B09E0();
  a4(v8, *v4, *(_QWORD *)(a2 + 16));
  return sub_2365B0A34();
}

uint64_t sub_2364743D0()
{
  char *v0;

  return sub_23647430C(*v0);
}

uint64_t sub_2364743DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_236474158(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_236474404@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23647A7CC();
  *a1 = result;
  return result;
}

uint64_t sub_23647442C(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365B5298, a1);
  return sub_2365B0AD0();
}

uint64_t sub_236474460(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365B5298, a1);
  return sub_2365B0ADC();
}

uint64_t _Coordinated.ValueUpdate<A>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(void);
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char v38;
  char v39;
  char v40;
  char v41;

  v32 = a3;
  v28 = a4;
  v29 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v31 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for _Coordinated.ValueUpdate.CodingKeys(255, v7, v8, v9);
  MEMORY[0x23B7F5164](&unk_2365B52E8, v10);
  v35 = sub_2365B07AC();
  v30 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v12 = (char *)&v26 - v11;
  v33 = a2;
  v15 = type metadata accessor for _Coordinated.ValueUpdate(0, a2, v13, v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v26 - v17;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v34 = v12;
  v19 = (uint64_t)v36;
  sub_2365B0A7C();
  if (v19)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v27 = v16;
  v36 = a1;
  v20 = v34;
  v21 = v30;
  v41 = 0;
  v22 = v35;
  *(_QWORD *)v18 = sub_2365B0794();
  v40 = 1;
  v18[8] = sub_2365B0758() & 1;
  v39 = 2;
  sub_2365B0770();
  v23 = *(void (**)(void))(v29 + 32);
  v32 = &v18[*(int *)(v15 + 32)];
  v23();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5138);
  v38 = 3;
  sub_23647A740(&qword_2563E5140, MEMORY[0x24BEE4598], MEMORY[0x24BDFC418]);
  sub_2365B0770();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v20, v22);
  *(_QWORD *)&v18[*(int *)(v15 + 36)] = v37;
  v24 = v27;
  (*(void (**)(uint64_t, char *, uint64_t))(v27 + 16))(v28, v18, v15);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v18, v15);
}

uint64_t sub_2364747A0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return _Coordinated.ValueUpdate<A>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(char **)(a3 - 8), a4);
}

uint64_t _Coordinated.ValueUpdate<A>.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;

  v18 = a3;
  v5 = v4;
  v17 = a2;
  v16 = *(_QWORD *)(a2 + 16);
  v7 = type metadata accessor for _Coordinated.ValueUpdate.CodingKeys(255, v16, a3, a4);
  MEMORY[0x23B7F5164](&unk_2365B52E8, v7);
  v8 = sub_2365B0854();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v15 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2365B0AAC();
  v24 = 0;
  v12 = v19;
  sub_2365B0848();
  if (v12)
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v14 = v17;
  v19 = v9;
  v23 = 1;
  sub_2365B080C();
  v22 = 2;
  sub_2365B0824();
  v20 = *(_QWORD *)(v5 + *(int *)(v14 + 36));
  v21 = 3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5138);
  sub_23647A740(&qword_2563E5148, MEMORY[0x24BEE4570], MEMORY[0x24BDFC408]);
  sub_2365B0824();
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v11, v8);
}

uint64_t sub_2364749C0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _Coordinated.ValueUpdate<A>.encode(to:)(a1, a2, *(_QWORD *)(a3 - 8), a4);
}

uint64_t static _Coordinated.ValueUpdate<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  if (*(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8))
    return 0;
  type metadata accessor for _Coordinated.ValueUpdate(0, a3, a3, a4);
  if ((sub_2365B0014() & 1) == 0)
    return 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5138);
  return sub_2365AFAEC() & 1;
}

uint64_t sub_236474A90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static _Coordinated.ValueUpdate<A>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t _Coordinated.ValueUpdate<A>.hash(into:)()
{
  sub_2365B0A28();
  sub_2365B0A04();
  sub_2365AFFD8();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5138);
  sub_23647A740((unint64_t *)&qword_2563E5150, MEMORY[0x24BEE4578], MEMORY[0x24BDFC410]);
  return sub_2365AFFD8();
}

uint64_t _Coordinated.ValueUpdate<A>.hashValue.getter(uint64_t a1, uint64_t a2)
{
  return sub_23647508C(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))_Coordinated.ValueUpdate<A>.hash(into:));
}

uint64_t sub_236474B60(uint64_t a1, uint64_t a2)
{
  return _Coordinated.ValueUpdate<A>.hashValue.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t sub_236474B68()
{
  return _Coordinated.ValueUpdate<A>.hash(into:)();
}

uint64_t sub_236474B70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_236475100(a1, a2, a3, (void (*)(_BYTE *, uint64_t, uint64_t))_Coordinated.ValueUpdate<A>.hash(into:));
}

uint64_t _Coordinated.ValueUpdate.Response<A>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  char v35;
  char v36;
  char v37;

  v30 = a3;
  v27 = a4;
  v26 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v29 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for _Coordinated.ValueUpdate.Response.CodingKeys(255, v7, v8, v9);
  MEMORY[0x23B7F5164](&unk_2365B5298, v10);
  v33 = sub_2365B07AC();
  v28 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v12 = (char *)&v25 - v11;
  v31 = a2;
  v15 = type metadata accessor for _Coordinated.ValueUpdate.Response(0, a2, v13, v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (uint64_t *)((char *)&v25 - v17);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v32 = v12;
  v19 = v34;
  sub_2365B0A7C();
  if (v19)
  {
    v24 = (uint64_t)a1;
  }
  else
  {
    v25 = v16;
    v20 = v31;
    v34 = a1;
    v21 = v28;
    v22 = v29;
    v37 = 0;
    *v18 = sub_2365B0794();
    v36 = 1;
    v18[1] = sub_2365B0794();
    v35 = 2;
    sub_2365B0770();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v32, v33);
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))((char *)v18 + *(int *)(v15 + 32), v22, v20);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v25 + 32))(v27, v18, v15);
    v24 = (uint64_t)v34;
  }
  return __swift_destroy_boxed_opaque_existential_1(v24);
}

uint64_t sub_236474DDC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return _Coordinated.ValueUpdate.Response<A>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), a4);
}

uint64_t _Coordinated.ValueUpdate.Response<A>.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12[4];
  char v13;
  char v14;
  char v15;

  v12[2] = a3;
  v12[1] = a2;
  v12[0] = *(_QWORD *)(a2 + 16);
  v5 = type metadata accessor for _Coordinated.ValueUpdate.Response.CodingKeys(255, v12[0], a3, a4);
  MEMORY[0x23B7F5164](&unk_2365B5298, v5);
  v6 = sub_2365B0854();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2365B0AAC();
  v15 = 0;
  v10 = v12[3];
  sub_2365B0848();
  if (!v10)
  {
    v14 = 1;
    sub_2365B0848();
    v13 = 2;
    sub_2365B0824();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_236474F78(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _Coordinated.ValueUpdate.Response<A>.encode(to:)(a1, a2, *(_QWORD *)(a3 - 8), a4);
}

uint64_t static _Coordinated.ValueUpdate.Response<A>.== infix(_:_:)(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  if (*a1 != *a2 || a1[1] != a2[1])
    return 0;
  type metadata accessor for _Coordinated.ValueUpdate.Response(0, a3, a3, a4);
  return sub_2365B0014() & 1;
}

uint64_t sub_236475010(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return static _Coordinated.ValueUpdate.Response<A>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t _Coordinated.ValueUpdate.Response<A>.hash(into:)()
{
  sub_2365B0A28();
  sub_2365B0A28();
  return sub_2365AFFD8();
}

uint64_t _Coordinated.ValueUpdate.Response<A>.hashValue.getter(uint64_t a1, uint64_t a2)
{
  return sub_23647508C(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))_Coordinated.ValueUpdate.Response<A>.hash(into:));
}

uint64_t sub_23647508C(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, uint64_t, uint64_t))
{
  _BYTE v7[72];

  sub_2365B09E0();
  a3(v7, a1, a2);
  return sub_2365B0A34();
}

uint64_t sub_2364750E4(uint64_t a1, uint64_t a2)
{
  return _Coordinated.ValueUpdate.Response<A>.hashValue.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t sub_2364750EC()
{
  return _Coordinated.ValueUpdate.Response<A>.hash(into:)();
}

uint64_t sub_2364750F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_236475100(a1, a2, a3, (void (*)(_BYTE *, uint64_t, uint64_t))_Coordinated.ValueUpdate.Response<A>.hash(into:));
}

uint64_t sub_236475100(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, uint64_t, uint64_t))
{
  uint64_t v6;
  _BYTE v8[72];

  v6 = *(_QWORD *)(a3 - 8);
  sub_2365B09E0();
  a4(v8, a2, v6);
  return sub_2365B0A34();
}

_QWORD *CoordinationProtocol.coercing<A>(derive:mutator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for _Coordinated.Coerced(0, AssociatedTypeWitness, a6, v15);
  v16 = CoordinationProtocol.into()(a5, a7);
  v17 = (_QWORD *)swift_allocObject();
  swift_retain();
  swift_retain();
  swift_defaultActor_initialize();
  v17[14] = v16;
  v17[15] = a1;
  v17[16] = a2;
  v17[17] = a3;
  v17[18] = a4;
  return v17;
}

uint64_t CoordinationProtocol.into()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for _AnyCoordinated(0, AssociatedTypeWitness, v5, v6);
  v7 = swift_allocObject();
  swift_unknownObjectRetain();
  swift_defaultActor_initialize();
  *(_QWORD *)(v7 + 112) = v2;
  *(_QWORD *)(v7 + 120) = a2;
  return v7;
}

_QWORD *sub_23647528C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;

  v10 = (_QWORD *)swift_allocObject();
  swift_defaultActor_initialize();
  v10[14] = a1;
  v10[15] = a2;
  v10[16] = a3;
  v10[17] = a4;
  v10[18] = a5;
  return v10;
}

uint64_t CoordinationProtocol.coercing<A>(to:derive:mutator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  v9[9] = a8;
  v9[10] = v8;
  v9[7] = a6;
  v9[8] = a7;
  v9[5] = a4;
  v9[6] = a5;
  v9[3] = a2;
  v9[4] = a3;
  v9[2] = a1;
  v11 = sub_2365B047C();
  v9[11] = v11;
  v9[12] = *(_QWORD *)(v11 - 8);
  v9[13] = swift_task_alloc();
  v9[14] = *(_QWORD *)(a7 - 8);
  v9[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_236475384()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  v1 = *(_QWORD *)(v0 + 104);
  v14 = *(_QWORD *)(v0 + 96);
  v15 = *(_QWORD *)(v0 + 88);
  v16 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 16);
  v6 = *(_QWORD *)(v0 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for _Coordinated.Coerced(0, AssociatedTypeWitness, v2, v9);
  v17 = *(_OWORD *)(v0 + 32);
  v10 = CoordinationProtocol.into()(v5, v3);
  v11 = swift_allocObject();
  *(_QWORD *)(v0 + 128) = v11;
  swift_retain();
  swift_retain();
  swift_defaultActor_initialize();
  *(_QWORD *)(v11 + 112) = v10;
  *(_QWORD *)(v11 + 120) = v6;
  *(_OWORD *)(v11 + 128) = v17;
  *(_QWORD *)(v11 + 144) = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v1, v7, v15);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 128));
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 32))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 64));
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v13;
    *v13 = v0;
    v13[1] = sub_236475538;
    return sub_236475D00(*(_QWORD *)(v0 + 120));
  }
}

uint64_t sub_236475538()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23647559C()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 64));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 128));
}

uint64_t sub_2364755F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 64);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236475658(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_2364756B8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)v0[3];
  v0[7] = v1[15];
  v0[8] = v1[16];
  v2 = (_QWORD *)v1[14];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc();
  v0[9] = v3;
  *v3 = v0;
  v3[1] = sub_236475740;
  v3[2] = v0[6];
  v3[3] = v2;
  v3[4] = *v2;
  return swift_task_switch();
}

uint64_t sub_236475740()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_236475798()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  (*(void (**)(uint64_t))(v0 + 56))(v1);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_236475800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  swift_defaultActor_initialize();
  v5[14] = a1;
  v5[15] = a2;
  v5[16] = a3;
  v5[17] = a4;
  v5[18] = a5;
  return v5;
}

uint64_t sub_236475854(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_236475870()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = *(_QWORD **)(v0[4] + 112);
  v2 = (_QWORD *)swift_task_alloc();
  v0[5] = v2;
  *v2 = v0;
  v2[1] = sub_2364758E0;
  v2[2] = v0[2];
  v2[3] = v1;
  v2[4] = *v1;
  return swift_task_switch();
}

uint64_t sub_2364758E0()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_236475934()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 32) + 136);
  swift_retain();
  v3(v2, v1);
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236475990(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[2] = a1;
  v2[3] = v1;
  v3 = *v1;
  v2[4] = *v1;
  v4 = *(_QWORD *)(v3 + 80);
  v2[5] = v4;
  v2[6] = swift_task_alloc();
  v7 = type metadata accessor for _Coordinated.ValueUpdate.Response(0, v4, v5, v6);
  v2[7] = v7;
  v2[8] = *(_QWORD *)(v7 - 8);
  v2[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_236475A1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v5 = v4[4];
  v6 = (_QWORD *)v4[2];
  v4[10] = *(_QWORD *)(v4[3] + 112);
  v4[11] = *v6;
  v7 = (char *)v6
     + *(int *)(type metadata accessor for _Coordinated.ValueUpdate.Response(0, *(_QWORD *)(v5 + 88), a3, a4) + 32);
  v8 = (_QWORD *)swift_task_alloc();
  v4[12] = v8;
  *v8 = v4;
  v8[1] = sub_236475AAC;
  v9 = v4[6];
  v10 = v4[3];
  v8[3] = v7;
  v8[4] = v10;
  v8[2] = v9;
  return swift_task_switch();
}

uint64_t sub_236475AAC()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_236475B04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = (char *)v4[9];
  v6 = v4[5];
  v7 = v4[6];
  v8 = *(_QWORD *)(v4[2] + 8);
  *(_QWORD *)v5 = v4[11];
  v9 = type metadata accessor for _Coordinated.ValueUpdate.Response(0, v6, a3, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(&v5[*(int *)(v9 + 32)], v7, v6);
  *((_QWORD *)v5 + 1) = v8;
  v10 = (_QWORD *)swift_task_alloc();
  v4[13] = v10;
  *v10 = v4;
  v10[1] = sub_236475BB4;
  v11 = (_QWORD *)v4[10];
  v10[2] = v4[9];
  v10[3] = v11;
  v10[4] = *v11;
  return swift_task_switch();
}

uint64_t sub_236475BB4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *(_QWORD *)(*v1 + 64);
  v3 = *(_QWORD *)(*v1 + 72);
  v5 = *(_QWORD *)(*v1 + 56);
  v7 = *v1;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v7 + 8))(a1);
}

uint64_t sub_236475C3C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_236475C54()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 112);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v2;
  *v2 = v0;
  v2[1] = sub_236475CB8;
  v2[2] = v1;
  return swift_task_switch();
}

uint64_t sub_236475CB8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_236475D00(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_236475D60()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v0[7] = *(_QWORD *)(v0[3] + 112);
  v1 = (_QWORD *)swift_task_alloc();
  v0[8] = v1;
  *v1 = v0;
  v1[1] = sub_236475DD0;
  v2 = v0[6];
  v3 = v0[3];
  v1[3] = v0[2];
  v1[4] = v3;
  v1[2] = v2;
  return swift_task_switch();
}

uint64_t sub_236475DD0()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v1 = (_QWORD *)*v0;
  v5 = (_QWORD *)*v0;
  swift_task_dealloc();
  v2 = (_QWORD *)swift_task_alloc();
  v1[9] = v2;
  *v2 = v5;
  v2[1] = sub_236475E50;
  v3 = (_QWORD *)v1[7];
  v2[2] = v1[6];
  v2[3] = v3;
  v2[4] = *v3;
  return swift_task_switch();
}

uint64_t sub_236475E50()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*v1 + 40);
  v2 = *(_QWORD *)(*v1 + 48);
  v4 = *(_QWORD *)(*v1 + 32);
  v5 = *v1;
  *(_QWORD *)(v5 + 80) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_236475EF4()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236475F28(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *v2;
  return swift_task_switch();
}

uint64_t sub_236475F4C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD *v10;

  v1 = *(_QWORD **)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = (_QWORD *)v1[14];
  v5 = v1[17];
  v4 = v1[18];
  *(_QWORD *)(v0 + 48) = v4;
  v7 = v1[15];
  v6 = v1[16];
  *(_QWORD *)(v0 + 56) = v6;
  v8 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v8;
  v9 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v2 + 80);
  *(_QWORD *)(v8 + 24) = *(_QWORD *)(v2 + 88);
  *(_QWORD *)(v8 + 32) = v7;
  *(_QWORD *)(v8 + 40) = v6;
  *(_OWORD *)(v8 + 48) = v9;
  *(_QWORD *)(v8 + 64) = v5;
  *(_QWORD *)(v8 + 72) = v4;
  swift_retain();
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v10;
  *v10 = v0;
  v10[1] = sub_236476030;
  v10[3] = v8;
  v10[4] = v3;
  v10[2] = sub_23647A7D4;
  v10[5] = *v3;
  return swift_task_switch();
}

uint64_t sub_236476030()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_2364760BC()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236476104(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5, void (*a6)(uint64_t, char *), uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(uint64_t);
  uint64_t v18;

  v12 = *(_QWORD *)(a9 - 8);
  v13 = MEMORY[0x24BDAC7A8]();
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16(v13);
  a4(v15);
  a6(a1, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, a9);
}

uint64_t sub_2364761BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v7 = *v5;
  v6[8] = *v5;
  v8 = *(_QWORD *)(v7 + 80);
  v6[9] = v8;
  v6[10] = *(_QWORD *)(v8 - 8);
  v6[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_236476228()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v0[12] = *(_QWORD *)(v0[7] + 112);
  v1 = (_QWORD *)swift_task_alloc();
  v0[13] = v1;
  *v1 = v0;
  v1[1] = sub_23647629C;
  v2 = v0[11];
  v3 = v0[7];
  v1[3] = v0[3];
  v1[4] = v3;
  v1[2] = v2;
  return swift_task_switch();
}

uint64_t sub_23647629C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2364762F4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = v0[8];
  v1 = v0[9];
  v4 = v0[6];
  v3 = v0[7];
  v6 = v0[4];
  v5 = v0[5];
  v8 = *(_QWORD *)(v3 + 120);
  v7 = *(_QWORD *)(v3 + 128);
  v0[14] = v7;
  v9 = (_QWORD *)swift_allocObject();
  v0[15] = v9;
  v9[2] = v1;
  v9[3] = *(_QWORD *)(v2 + 88);
  v9[4] = v4;
  v9[5] = v8;
  v9[6] = v7;
  v9[7] = v6;
  v9[8] = v5;
  swift_retain_n();
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc();
  v0[16] = v10;
  *v10 = v0;
  v10[1] = sub_2364763E4;
  v12 = v0[11];
  v11 = (_QWORD *)v0[12];
  v13 = v0[2];
  v10[6] = v0[6];
  v10[7] = v11;
  v10[4] = &unk_2563E51C8;
  v10[5] = v9;
  v10[2] = v13;
  v10[3] = v12;
  v10[8] = *v11;
  return swift_task_switch();
}

uint64_t sub_2364763E4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*v1 + 80);
  v2 = *(_QWORD *)(*v1 + 88);
  v4 = *(_QWORD *)(*v1 + 72);
  v5 = *v1;
  *(_QWORD *)(v5 + 136) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  if (v0)
    return swift_task_switch();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_2364764A0()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2364764E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[7] = a6;
  v8[8] = a8;
  v8[5] = a4;
  v8[6] = a5;
  v8[3] = a2;
  v8[4] = a3;
  v8[2] = a1;
  v8[9] = *(_QWORD *)(a8 - 8);
  v8[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_236476540()
{
  uint64_t v0;
  int *v1;
  _QWORD *v2;
  int *v4;

  v1 = *(int **)(v0 + 48);
  (*(void (**)(_QWORD))(v0 + 32))(*(_QWORD *)(v0 + 24));
  v4 = (int *)((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v2;
  *v2 = v0;
  v2[1] = sub_2364765B4;
  return ((uint64_t (*)(_QWORD, _QWORD))v4)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 80));
}

uint64_t sub_2364765B4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_236476618()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236476660()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2364766A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  v7[9] = *v6;
  return swift_task_switch();
}

uint64_t sub_2364766D4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v2 = *(_QWORD **)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v18 = *(_QWORD *)(v0 + 40);
  v19 = *(_QWORD *)(v0 + 48);
  v20 = (_QWORD *)v2[14];
  v4 = v2[18];
  v17 = v2[17];
  *(_QWORD *)(v0 + 80) = v4;
  v5 = v2[15];
  v6 = v2[16];
  *(_QWORD *)(v0 + 88) = v6;
  v7 = swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v7;
  v8 = *(_QWORD *)(v1 + 80);
  v9 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v7 + 16) = v8;
  v10 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v7 + 24) = v10;
  *(_QWORD *)(v7 + 32) = v3;
  *(_QWORD *)(v7 + 40) = v5;
  *(_QWORD *)(v7 + 48) = v6;
  *(_OWORD *)(v7 + 56) = v9;
  *(_QWORD *)(v7 + 72) = v17;
  *(_QWORD *)(v7 + 80) = v4;
  v11 = v2[15];
  v12 = v2[16];
  *(_QWORD *)(v0 + 104) = v12;
  v13 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 112) = v13;
  v13[2] = v8;
  v13[3] = v10;
  v13[4] = v3;
  v13[5] = v11;
  v13[6] = v12;
  v13[7] = v18;
  v13[8] = v19;
  swift_retain_n();
  swift_retain();
  swift_retain();
  swift_retain();
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v14;
  *v14 = v0;
  v14[1] = sub_23647683C;
  v15 = *(_QWORD *)(v0 + 16);
  v14[7] = *(_QWORD *)(v0 + 56);
  v14[8] = v20;
  v14[5] = &unk_2563E51E8;
  v14[6] = v13;
  v14[3] = sub_23647A8AC;
  v14[4] = v7;
  v14[2] = v15;
  v14[9] = *v20;
  return swift_task_switch();
}

uint64_t sub_23647683C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 128) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_2364768E8()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23647694C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[7] = a6;
  v8[8] = a8;
  v8[5] = a4;
  v8[6] = a5;
  v8[3] = a2;
  v8[4] = a3;
  v8[2] = a1;
  v8[9] = *(_QWORD *)(a8 - 8);
  v8[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_2364769AC()
{
  uint64_t v0;
  int *v1;
  _QWORD *v2;
  int *v4;

  v1 = *(int **)(v0 + 48);
  (*(void (**)(_QWORD))(v0 + 32))(*(_QWORD *)(v0 + 24));
  v4 = (int *)((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v2;
  *v2 = v0;
  v2[1] = sub_236476A20;
  return ((uint64_t (*)(_QWORD, _QWORD))v4)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 80));
}

uint64_t sub_236476A20()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_236476A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v4[6] = *v3;
  return swift_task_switch();
}

uint64_t sub_236476AA8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = (_QWORD *)v0[5];
  v2 = v0[6];
  v4 = v0[3];
  v3 = v0[4];
  v5 = (_QWORD *)v1[14];
  v6 = v1[15];
  v7 = v1[16];
  v0[7] = v7;
  v8 = (_QWORD *)swift_allocObject();
  v0[8] = v8;
  v8[2] = *(_QWORD *)(v2 + 80);
  v8[3] = *(_QWORD *)(v2 + 88);
  v8[4] = v4;
  v8[5] = v3;
  v8[6] = v6;
  v8[7] = v7;
  swift_retain_n();
  swift_retain();
  v9 = (_QWORD *)swift_task_alloc();
  v0[9] = v9;
  *v9 = v0;
  v9[1] = sub_23647E278;
  v10 = v0[2];
  v9[4] = v8;
  v9[5] = v5;
  v9[2] = v10;
  v9[3] = sub_23647A9B8;
  v9[6] = *v5;
  return swift_task_switch();
}

uint64_t sub_236476B94(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v17;

  v11 = *(_QWORD *)(a8 - 8);
  MEMORY[0x24BDAC7A8]();
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15(v14);
  a3(a1, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, a8);
}

uint64_t sub_236476C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v4[6] = *v3;
  return swift_task_switch();
}

uint64_t sub_236476C58()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = (_QWORD *)v0[5];
  v2 = v0[6];
  v4 = v0[3];
  v3 = v0[4];
  v5 = (_QWORD *)v1[14];
  v6 = v1[15];
  v7 = v1[16];
  v0[7] = v7;
  v8 = (_QWORD *)swift_allocObject();
  v0[8] = v8;
  v8[2] = *(_QWORD *)(v2 + 80);
  v8[3] = *(_QWORD *)(v2 + 88);
  v8[4] = v4;
  v8[5] = v3;
  v8[6] = v6;
  v8[7] = v7;
  swift_retain_n();
  swift_retain();
  v9 = (_QWORD *)swift_task_alloc();
  v0[9] = v9;
  *v9 = v0;
  v9[1] = sub_23647E278;
  v10 = v0[2];
  v9[4] = v8;
  v9[5] = v5;
  v9[2] = v10;
  v9[3] = &unk_2563E5218;
  v9[6] = *v5;
  return swift_task_switch();
}

uint64_t sub_236476D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[7] = a6;
  v8[8] = a8;
  v8[5] = a4;
  v8[6] = a5;
  v8[3] = a2;
  v8[4] = a3;
  v8[2] = a1;
  v8[9] = *(_QWORD *)(a8 - 8);
  v8[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_236476DA4()
{
  uint64_t v0;
  int *v1;
  _QWORD *v2;
  int *v4;

  v1 = *(int **)(v0 + 32);
  (*(void (**)(_QWORD))(v0 + 48))(*(_QWORD *)(v0 + 24));
  v4 = (int *)((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v2;
  *v2 = v0;
  v2[1] = sub_236476E18;
  return ((uint64_t (*)(_QWORD, _QWORD))v4)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 80));
}

uint64_t sub_236476E18()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *(_QWORD *)(*v0 + 80);
  v2 = *(_QWORD *)(*v0 + 64);
  v3 = *(_QWORD *)(*v0 + 72);
  v5 = *v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_236476E84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v4[6] = *v3;
  return swift_task_switch();
}

uint64_t sub_236476EA8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = (_QWORD *)v0[5];
  v2 = v0[6];
  v4 = v0[3];
  v3 = v0[4];
  v5 = (_QWORD *)v1[14];
  v6 = v1[15];
  v7 = v1[16];
  v0[7] = v7;
  v8 = (_QWORD *)swift_allocObject();
  v0[8] = v8;
  v8[2] = *(_QWORD *)(v2 + 80);
  v8[3] = *(_QWORD *)(v2 + 88);
  v8[4] = v4;
  v8[5] = v3;
  v8[6] = v6;
  v8[7] = v7;
  swift_retain_n();
  swift_retain();
  v9 = (_QWORD *)swift_task_alloc();
  v0[9] = v9;
  *v9 = v0;
  v9[1] = sub_236476F94;
  v10 = v0[2];
  v9[4] = v8;
  v9[5] = v5;
  v9[2] = v10;
  v9[3] = &unk_2563E5238;
  v9[6] = *v5;
  return swift_task_switch();
}

uint64_t sub_236476F94()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_236476FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[7] = a6;
  v8[8] = a8;
  v8[5] = a4;
  v8[6] = a5;
  v8[3] = a2;
  v8[4] = a3;
  v8[2] = a1;
  v8[9] = *(_QWORD *)(a8 - 8);
  v8[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_236477050()
{
  uint64_t v0;
  int *v1;
  _QWORD *v2;
  int *v4;

  v1 = *(int **)(v0 + 32);
  (*(void (**)(_QWORD))(v0 + 48))(*(_QWORD *)(v0 + 24));
  v4 = (int *)((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v2;
  *v2 = v0;
  v2[1] = sub_2364770C4;
  return ((uint64_t (*)(_QWORD, _QWORD))v4)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 80));
}

uint64_t sub_2364770C4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*v1 + 80);
  v3 = *(_QWORD *)(*v1 + 64);
  v4 = *(_QWORD *)(*v1 + 72);
  v5 = *v1;
  *(_QWORD *)(v5 + 96) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_236477164()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _Coordinated.Coerced.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t _Coordinated.Coerced.__deallocating_deinit()
{
  _Coordinated.Coerced.deinit();
  return swift_defaultActor_deallocate();
}

uint64_t sub_2364771E4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23647E274;
  return sub_236475658(a1);
}

uint64_t sub_236477234(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23647E27C;
  return sub_236475990(a1);
}

uint64_t sub_236477280()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_23647E274;
  v2[2] = v0;
  return swift_task_switch();
}

uint64_t sub_2364772DC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23647E274;
  return sub_236475D00(a1);
}

uint64_t sub_236477328(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_23647E274;
  v6[3] = a2;
  v6[4] = v2;
  v6[2] = a1;
  v6[5] = *v2;
  return swift_task_switch();
}

uint64_t sub_2364773A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;

  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_236477420;
  return sub_2364761BC(a1, a2, a3, a4, a5);
}

uint64_t sub_236477420()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_236477468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v14;

  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v14;
  *v14 = v7;
  v14[1] = sub_23647E274;
  v14[7] = a6;
  v14[8] = v6;
  v14[5] = a4;
  v14[6] = a5;
  v14[3] = a2;
  v14[4] = a3;
  v14[2] = a1;
  v14[9] = *v6;
  return swift_task_switch();
}

uint64_t sub_236477508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_23647E274;
  v8[4] = a3;
  v8[5] = v3;
  v8[2] = a1;
  v8[3] = a2;
  v8[6] = *v3;
  return swift_task_switch();
}

uint64_t sub_236477584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_23647E274;
  v8[4] = a3;
  v8[5] = v3;
  v8[2] = a1;
  v8[3] = a2;
  v8[6] = *v3;
  return swift_task_switch();
}

uint64_t sub_236477600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_23647E274;
  v8[4] = a3;
  v8[5] = v3;
  v8[2] = a1;
  v8[3] = a2;
  v8[6] = *v3;
  return swift_task_switch();
}

uint64_t _AnyCoordinated.__allocating_init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = swift_allocObject();
  swift_defaultActor_initialize();
  *(_QWORD *)(v5 + 112) = a1;
  *(_QWORD *)(v5 + 120) = a3;
  return v5;
}

uint64_t _TypeEraser.wrappedValue.getter()
{
  return swift_retain();
}

uint64_t _TypeEraser.__allocating_init(wrappedValue:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  swift_defaultActor_initialize();
  *(_QWORD *)(v2 + 112) = a1;
  return v2;
}

uint64_t _TypeEraser.init(wrappedValue:)(uint64_t a1)
{
  uint64_t v1;

  swift_defaultActor_initialize();
  *(_QWORD *)(v1 + 112) = a1;
  return v1;
}

uint64_t _TypeEraser.__allocating_init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = CoordinationProtocol.into()(a2, a3);
  v4 = swift_allocObject();
  swift_defaultActor_initialize();
  *(_QWORD *)(v4 + 112) = v3;
  swift_unknownObjectRelease();
  return v4;
}

uint64_t _TypeEraser.deinit()
{
  uint64_t v0;

  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t _TypeEraser.__deallocating_deinit()
{
  return sub_236479A3C((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t _TypeEraser.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_2364777D0()
{
  return _TypeEraser.unownedExecutor.getter();
}

uint64_t sub_2364777E8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return swift_task_switch();
}

uint64_t sub_236477808()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  _QWORD *v6;
  uint64_t v7;

  v1 = v0[3];
  v2 = v0[4];
  v4 = *(_QWORD *)(v1 + 112);
  v3 = *(_QWORD *)(v1 + 120);
  ObjectType = swift_getObjectType();
  v6 = (_QWORD *)swift_task_alloc();
  v0[5] = (uint64_t)v6;
  v7 = *(_QWORD *)(v2 + 80);
  *v6 = v0;
  v6[1] = sub_236477880;
  return sub_2364778C8(v0[2], v4, v7, ObjectType, v3);
}

uint64_t sub_236477880()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_2364778C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);

  v5[2] = a1;
  v5[3] = a3;
  v5[4] = swift_getAssociatedTypeWitness();
  v8 = swift_task_alloc();
  v5[5] = v8;
  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a5 + 24) + *(_QWORD *)(a5 + 24));
  v9 = (_QWORD *)swift_task_alloc();
  v5[6] = v9;
  *v9 = v5;
  v9[1] = sub_236477988;
  return v11(v8, a4, a5);
}

uint64_t sub_236477988()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2364779DC()
{
  uint64_t v0;

  swift_dynamicCast();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _AnyCoordinated.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  swift_defaultActor_initialize();
  *(_QWORD *)(v3 + 112) = a1;
  *(_QWORD *)(v3 + 120) = a3;
  return v3;
}

uint64_t sub_236477A58(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return swift_task_switch();
}

uint64_t sub_236477A78()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  _QWORD *v6;
  uint64_t v7;

  v1 = v0[3];
  v2 = v0[4];
  v4 = *(_QWORD *)(v1 + 112);
  v3 = *(_QWORD *)(v1 + 120);
  ObjectType = swift_getObjectType();
  v6 = (_QWORD *)swift_task_alloc();
  v0[5] = (uint64_t)v6;
  v7 = *(_QWORD *)(v2 + 80);
  *v6 = v0;
  v6[1] = sub_236477AEC;
  return sub_236477B3C(v4, v0[2], v7, ObjectType, v3);
}

uint64_t sub_236477AEC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_236477B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5[4] = a4;
  v5[5] = a5;
  v5[2] = a1;
  v5[3] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for _Coordinated.ValueUpdate.Response(0, AssociatedTypeWitness, v8, v9);
  v5[6] = v10;
  v5[7] = *(_QWORD *)(v10 - 8);
  v5[8] = swift_task_alloc();
  v13 = type metadata accessor for _Coordinated.ValueUpdate.Response(0, a3, v11, v12);
  v5[9] = v13;
  v5[10] = *(_QWORD *)(v13 - 8);
  v5[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_236477BFC()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD, _QWORD, _QWORD);

  v1 = v0[5];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[10] + 16))(v0[11], v0[3], v0[9]);
  swift_dynamicCast();
  v4 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))(**(int **)(v1 + 32) + *(_QWORD *)(v1 + 32));
  v2 = (_QWORD *)swift_task_alloc();
  v0[12] = v2;
  *v2 = v0;
  v2[1] = sub_236477CA8;
  return v4(v0[8], v0[4], v0[5]);
}

uint64_t sub_236477CA8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *(_QWORD *)(*v1 + 56);
  v3 = *(_QWORD *)(*v1 + 64);
  v5 = *(_QWORD *)(*v1 + 48);
  v7 = *v1;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v7 + 8))(a1);
}

uint64_t sub_236477D30()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_236477D48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 120);
  ObjectType = swift_getObjectType();
  v5 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v1 + 40) + *(_QWORD *)(v1 + 40));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v3;
  *v3 = v0;
  v3[1] = sub_23647E298;
  return v5(ObjectType, v1);
}

uint64_t sub_236477DC0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return swift_task_switch();
}

uint64_t sub_236477DE0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  _QWORD *v6;
  uint64_t v7;

  v1 = v0[3];
  v2 = v0[4];
  v4 = *(_QWORD *)(v1 + 112);
  v3 = *(_QWORD *)(v1 + 120);
  ObjectType = swift_getObjectType();
  v6 = (_QWORD *)swift_task_alloc();
  v0[5] = (uint64_t)v6;
  v7 = *(_QWORD *)(v2 + 80);
  *v6 = v0;
  v6[1] = sub_236477880;
  return sub_236477E54(v4, v0[2], v7, ObjectType, v3);
}

uint64_t sub_236477E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[7] = AssociatedTypeWitness;
  v5[8] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[9] = swift_task_alloc();
  v5[10] = *(_QWORD *)(a3 - 8);
  v5[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_236477EFC()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD, _QWORD, _QWORD);

  v1 = v0[6];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[10] + 16))(v0[11], v0[3], v0[4]);
  swift_dynamicCast();
  v4 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))(**(int **)(v1 + 48) + *(_QWORD *)(v1 + 48));
  v2 = (_QWORD *)swift_task_alloc();
  v0[12] = v2;
  *v2 = v0;
  v2[1] = sub_236477FA8;
  return v4(v0[9], v0[5], v0[6]);
}

uint64_t sub_236477FA8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 104) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 + 64) + 8))(*(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 56));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23647804C()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2364780A0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *v2;
  return swift_task_switch();
}

uint64_t sub_2364780C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v1 + 112);
  v4 = *(_QWORD *)(v1 + 120);
  ObjectType = swift_getObjectType();
  v6 = swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v6;
  v7 = *(_QWORD *)(v2 + 80);
  *(_QWORD *)v6 = v0;
  *(_QWORD *)(v6 + 8) = sub_236478150;
  v8 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v6 + 48) = ObjectType;
  *(_QWORD *)(v6 + 56) = v4;
  *(_QWORD *)(v6 + 40) = v7;
  *(_OWORD *)(v6 + 24) = v8;
  *(_QWORD *)(v6 + 16) = v3;
  return swift_task_switch();
}

uint64_t sub_236478150()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_236478198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return swift_task_switch();
}

uint64_t sub_2364781B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t (*)(char *), uint64_t, _QWORD, _QWORD);

  v1 = *(_QWORD *)(v0 + 56);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v2;
  v3 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v2 + 32) = v1;
  *(_OWORD *)(v2 + 40) = v3;
  v6 = (uint64_t (*)(uint64_t (*)(char *), uint64_t, _QWORD, _QWORD))(**(int **)(v1 + 56)
                                                                                       + *(_QWORD *)(v1 + 56));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v4;
  *v4 = v0;
  v4[1] = sub_236478250;
  return v6(sub_23647DE40, v2, *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_236478250()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_2364782C4()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2364782F8(char *a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v20;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v20 - v9;
  v11 = *(_QWORD *)(a4 - 8);
  v12 = MEMORY[0x24BDAC7A8](v8);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v20 - v15;
  v18 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v18(v10, a1, AssociatedTypeWitness);
  swift_dynamicCast();
  a2(v16);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, a4);
  swift_dynamicCast();
  v18(a1, v10, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v16, a4);
}

uint64_t sub_23647845C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v6[8] = *v5;
  return swift_task_switch();
}

uint64_t sub_236478484()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  _QWORD *v4;
  uint64_t v5;

  v1 = v0[8];
  v2 = *(_QWORD *)(v0[7] + 112);
  ObjectType = swift_getObjectType();
  v4 = (_QWORD *)swift_task_alloc();
  v0[9] = (uint64_t)v4;
  v5 = *(_QWORD *)(v1 + 80);
  *v4 = v0;
  v4[1] = sub_236478504;
  return sub_23647854C(v0[2], v2, v0[3], v0[4], v0[5], v5, v0[6], ObjectType);
}

uint64_t sub_236478504()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23647854C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;

  v8[9] = a8;
  v8[10] = v12;
  v8[7] = a6;
  v8[8] = a7;
  v8[5] = a4;
  v8[6] = a5;
  v8[3] = a2;
  v8[4] = a3;
  v8[2] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[11] = AssociatedTypeWitness;
  v8[12] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8[13] = swift_task_alloc();
  v8[14] = *(_QWORD *)(a6 - 8);
  v8[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_2364785F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v8;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v8 = *(_OWORD *)(v0 + 56);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 16))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 56));
  swift_dynamicCast();
  v5 = swift_allocObject();
  *(_QWORD *)(v0 + 128) = v5;
  *(_OWORD *)(v5 + 16) = v8;
  *(_QWORD *)(v5 + 32) = v2;
  *(_QWORD *)(v5 + 40) = v1;
  *(_QWORD *)(v5 + 48) = v4;
  *(_QWORD *)(v5 + 56) = v3;
  *(_QWORD *)&v8 = **(int **)(v1 + 64) + *(_QWORD *)(v1 + 64);
  swift_retain();
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v6;
  *v6 = v0;
  v6[1] = sub_236478710;
  return ((uint64_t (*)(_QWORD, _QWORD, void *, uint64_t, _QWORD, _QWORD, _QWORD))v8)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 104), &unk_2563E5C28, v5, *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
}

uint64_t sub_236478710()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *v1;
  *(_QWORD *)(v2 + 144) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v5 = *(_QWORD *)(v2 + 96);
  v4 = *(_QWORD *)(v2 + 104);
  v6 = *(_QWORD *)(v2 + 88);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_2364787BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 96);
  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 88);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236478820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v5[7] = *(_QWORD *)(a5 - 8);
  v5[8] = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[9] = AssociatedTypeWitness;
  v5[10] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_2364788C4()
{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  int *v4;

  v1 = (int *)v0[4];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[10] + 16))(v0[11], v0[3], v0[9]);
  swift_dynamicCast();
  v4 = (int *)((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc();
  v0[12] = v2;
  *v2 = v0;
  v2[1] = sub_23647896C;
  return ((uint64_t (*)(_QWORD, _QWORD))v4)(v0[2], v0[8]);
}

uint64_t sub_23647896C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 104) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 + 56) + 8))(*(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 48));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_236478A10()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236478A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  v7[9] = *v6;
  return swift_task_switch();
}

uint64_t sub_236478A90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v1 + 112);
  v4 = *(_QWORD *)(v1 + 120);
  ObjectType = swift_getObjectType();
  v6 = swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v6;
  v7 = *(_QWORD *)(v2 + 80);
  *(_QWORD *)v6 = v0;
  *(_QWORD *)(v6 + 8) = sub_236478B28;
  v8 = *(_QWORD *)(v0 + 56);
  v9 = *(_QWORD *)(v0 + 16);
  v10 = *(_OWORD *)(v0 + 24);
  v11 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v6 + 80) = ObjectType;
  *(_QWORD *)(v6 + 88) = v4;
  *(_QWORD *)(v6 + 64) = v7;
  *(_QWORD *)(v6 + 72) = v8;
  *(_OWORD *)(v6 + 32) = v10;
  *(_OWORD *)(v6 + 48) = v11;
  *(_QWORD *)(v6 + 16) = v9;
  *(_QWORD *)(v6 + 24) = v3;
  return swift_task_switch();
}

uint64_t sub_236478B28()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_236478B70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;

  v8[10] = v10;
  v8[11] = v11;
  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  return swift_task_switch();
}

uint64_t sub_236478BA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t (*v12)(_QWORD, uint64_t (*)(char *), uint64_t, void *, _QWORD *, _QWORD, _QWORD, _QWORD);

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v7 = swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v7;
  v8 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v7 + 16) = v4;
  *(_QWORD *)(v7 + 24) = v3;
  *(_QWORD *)(v7 + 32) = v2;
  *(_QWORD *)(v7 + 40) = v1;
  *(_OWORD *)(v7 + 48) = v8;
  v9 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 104) = v9;
  v9[2] = v4;
  v9[3] = v3;
  v9[4] = v2;
  v9[5] = v1;
  v9[6] = v6;
  v9[7] = v5;
  v12 = (uint64_t (*)(_QWORD, uint64_t (*)(char *), uint64_t, void *, _QWORD *, _QWORD, _QWORD, _QWORD))(**(int **)(v1 + 72) + *(_QWORD *)(v1 + 72));
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v10;
  *v10 = v0;
  v10[1] = sub_236478C98;
  return v12(*(_QWORD *)(v0 + 16), sub_23647DCE4, v7, &unk_2563E5C18, v9, *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
}

uint64_t sub_236478C98()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 120) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_236478D18()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236478D54(char *a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v20;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v20 - v9;
  v11 = *(_QWORD *)(a4 - 8);
  v12 = MEMORY[0x24BDAC7A8](v8);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v20 - v15;
  v18 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v18(v10, a1, AssociatedTypeWitness);
  swift_dynamicCast();
  a2(v16);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, a4);
  swift_dynamicCast();
  v18(a1, v10, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v16, a4);
}

uint64_t sub_236478EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v5[7] = *(_QWORD *)(a5 - 8);
  v5[8] = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[9] = AssociatedTypeWitness;
  v5[10] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_236478F58()
{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  int *v4;

  v1 = (int *)v0[4];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[10] + 16))(v0[11], v0[3], v0[9]);
  swift_dynamicCast();
  v4 = (int *)((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc();
  v0[12] = v2;
  *v2 = v0;
  v2[1] = sub_236479000;
  return ((uint64_t (*)(_QWORD, _QWORD))v4)(v0[2], v0[8]);
}

uint64_t sub_236479000()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 104) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 + 56) + 8))(*(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 48));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_2364790A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v4[6] = *v3;
  return swift_task_switch();
}

uint64_t sub_2364790C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v1 + 112);
  v4 = *(_QWORD *)(v1 + 120);
  ObjectType = swift_getObjectType();
  v6 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v6;
  v7 = *(_QWORD *)(v2 + 80);
  *(_QWORD *)v6 = v0;
  *(_QWORD *)(v6 + 8) = sub_23647E264;
  v8 = *(_QWORD *)(v0 + 16);
  v9 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v6 + 56) = ObjectType;
  *(_QWORD *)(v6 + 64) = v4;
  *(_QWORD *)(v6 + 48) = v7;
  *(_OWORD *)(v6 + 32) = v9;
  *(_QWORD *)(v6 + 16) = v8;
  *(_QWORD *)(v6 + 24) = v3;
  return swift_task_switch();
}

uint64_t sub_236479158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  return swift_task_switch();
}

uint64_t sub_23647917C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(_QWORD, uint64_t (*)(uint64_t, uint64_t), uint64_t, _QWORD, _QWORD);

  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v4 = swift_allocObject();
  *(_QWORD *)(v0 + 72) = v4;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v4 + 32) = v1;
  *(_QWORD *)(v4 + 40) = v3;
  *(_QWORD *)(v4 + 48) = v2;
  v7 = (uint64_t (*)(_QWORD, uint64_t (*)(uint64_t, uint64_t), uint64_t, _QWORD, _QWORD))(**(int **)(v1 + 80) + *(_QWORD *)(v1 + 80));
  swift_retain();
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v5;
  *v5 = v0;
  v5[1] = sub_23647E270;
  return v7(*(_QWORD *)(v0 + 16), sub_23647DCD4, v4, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_236479234(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, char *), uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v9 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v16 - v14, a2, AssociatedTypeWitness);
  swift_dynamicCast();
  a3(a1, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, a5);
}

uint64_t sub_236479344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v4[6] = *v3;
  return swift_task_switch();
}

uint64_t sub_236479368()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v1 + 112);
  v4 = *(_QWORD *)(v1 + 120);
  ObjectType = swift_getObjectType();
  v6 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v6;
  v7 = *(_QWORD *)(v2 + 80);
  *(_QWORD *)v6 = v0;
  *(_QWORD *)(v6 + 8) = sub_23647E264;
  v8 = *(_QWORD *)(v0 + 16);
  v9 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v6 + 56) = ObjectType;
  *(_QWORD *)(v6 + 64) = v4;
  *(_QWORD *)(v6 + 48) = v7;
  *(_OWORD *)(v6 + 32) = v9;
  *(_QWORD *)(v6 + 16) = v8;
  *(_QWORD *)(v6 + 24) = v3;
  return swift_task_switch();
}

uint64_t sub_2364793F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  return swift_task_switch();
}

uint64_t sub_23647941C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(_QWORD, void *, uint64_t, _QWORD, _QWORD);

  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v4 = swift_allocObject();
  *(_QWORD *)(v0 + 72) = v4;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v4 + 32) = v1;
  *(_QWORD *)(v4 + 40) = v3;
  *(_QWORD *)(v4 + 48) = v2;
  v7 = (uint64_t (*)(_QWORD, void *, uint64_t, _QWORD, _QWORD))(**(int **)(v1 + 88) + *(_QWORD *)(v1 + 88));
  swift_retain();
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v5;
  *v5 = v0;
  v5[1] = sub_23647E270;
  return v7(*(_QWORD *)(v0 + 16), &unk_2563E5C08, v4, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_2364794D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v5[7] = *(_QWORD *)(a5 - 8);
  v5[8] = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[9] = AssociatedTypeWitness;
  v5[10] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_236479578()
{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  int *v4;

  v1 = (int *)v0[4];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[10] + 16))(v0[11], v0[3], v0[9]);
  swift_dynamicCast();
  v4 = (int *)((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc();
  v0[12] = v2;
  *v2 = v0;
  v2[1] = sub_236479620;
  return ((uint64_t (*)(_QWORD, _QWORD))v4)(v0[2], v0[8]);
}

uint64_t sub_236479620()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(_QWORD *)(*v0 + 56);
  v1 = *(_QWORD *)(*v0 + 64);
  v3 = *(_QWORD *)(*v0 + 48);
  v5 = *v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_236479698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v4[6] = *v3;
  return swift_task_switch();
}

uint64_t sub_2364796BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v1 + 112);
  v4 = *(_QWORD *)(v1 + 120);
  ObjectType = swift_getObjectType();
  v6 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v6;
  v7 = *(_QWORD *)(v2 + 80);
  *(_QWORD *)v6 = v0;
  *(_QWORD *)(v6 + 8) = sub_23647974C;
  v8 = *(_QWORD *)(v0 + 16);
  v9 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v6 + 56) = ObjectType;
  *(_QWORD *)(v6 + 64) = v4;
  *(_QWORD *)(v6 + 48) = v7;
  *(_OWORD *)(v6 + 32) = v9;
  *(_QWORD *)(v6 + 16) = v8;
  *(_QWORD *)(v6 + 24) = v3;
  return swift_task_switch();
}

uint64_t sub_23647974C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_236479794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  return swift_task_switch();
}

uint64_t sub_2364797B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(_QWORD, void *, uint64_t, _QWORD, _QWORD);

  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v4 = swift_allocObject();
  *(_QWORD *)(v0 + 72) = v4;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v4 + 32) = v1;
  *(_QWORD *)(v4 + 40) = v3;
  *(_QWORD *)(v4 + 48) = v2;
  v7 = (uint64_t (*)(_QWORD, void *, uint64_t, _QWORD, _QWORD))(**(int **)(v1 + 96) + *(_QWORD *)(v1 + 96));
  swift_retain();
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v5;
  *v5 = v0;
  v5[1] = sub_236479870;
  return v7(*(_QWORD *)(v0 + 16), &unk_2563E5BF8, v4, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_236479870()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_2364798C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v5[7] = *(_QWORD *)(a5 - 8);
  v5[8] = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[9] = AssociatedTypeWitness;
  v5[10] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_236479964()
{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  int *v4;

  v1 = (int *)v0[4];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[10] + 16))(v0[11], v0[3], v0[9]);
  swift_dynamicCast();
  v4 = (int *)((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc();
  v0[12] = v2;
  *v2 = v0;
  v2[1] = sub_23647896C;
  return ((uint64_t (*)(_QWORD, _QWORD))v4)(v0[2], v0[8]);
}

uint64_t _AnyCoordinated.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t _AnyCoordinated.__deallocating_deinit()
{
  return sub_236479A3C((void (*)(_QWORD))MEMORY[0x24BEE4F70]);
}

uint64_t sub_236479A3C(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 112));
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t sub_236479A64(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23647E274;
  v4[2] = a1;
  v4[3] = v1;
  v4[4] = *v1;
  return swift_task_switch();
}

uint64_t sub_236479ACC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23647E27C;
  v4[2] = a1;
  v4[3] = v1;
  v4[4] = *v1;
  return swift_task_switch();
}

uint64_t sub_236479B34()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_23647E274;
  v2[2] = v0;
  return swift_task_switch();
}

uint64_t sub_236479B90(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23647E274;
  v4[2] = a1;
  v4[3] = v1;
  v4[4] = *v1;
  return swift_task_switch();
}

uint64_t sub_236479BF8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_23647E274;
  v6[3] = a2;
  v6[4] = v2;
  v6[2] = a1;
  v6[5] = *v2;
  return swift_task_switch();
}

uint64_t sub_236479C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v12;

  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = sub_23647E274;
  v12[6] = a5;
  v12[7] = v5;
  v12[4] = a3;
  v12[5] = a4;
  v12[2] = a1;
  v12[3] = a2;
  v12[8] = *v5;
  return swift_task_switch();
}

uint64_t sub_236479D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v14;

  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v14;
  *v14 = v7;
  v14[1] = sub_23647E274;
  v14[7] = a6;
  v14[8] = v6;
  v14[5] = a4;
  v14[6] = a5;
  v14[3] = a2;
  v14[4] = a3;
  v14[2] = a1;
  v14[9] = *v6;
  return swift_task_switch();
}

uint64_t sub_236479DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_23647E274;
  v8[4] = a3;
  v8[5] = v3;
  v8[2] = a1;
  v8[3] = a2;
  v8[6] = *v3;
  return swift_task_switch();
}

uint64_t sub_236479E1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_23647E274;
  v8[4] = a3;
  v8[5] = v3;
  v8[2] = a1;
  v8[3] = a2;
  v8[6] = *v3;
  return swift_task_switch();
}

uint64_t sub_236479E98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_23647E274;
  v8[4] = a3;
  v8[5] = v3;
  v8[2] = a1;
  v8[3] = a2;
  v8[6] = *v3;
  return swift_task_switch();
}

uint64_t sub_236479F14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5C40);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E50D8);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  v9 = a2 + *(_QWORD *)(*(_QWORD *)a2 + 104);
  swift_beginAccess();
  sub_23647DF48((uint64_t)v6, v9);
  return swift_endAccess();
}

uint64_t sub_236479FF8()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD v13[3];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5C40);
  v2 = MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)v13 - v5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E50D8);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (uint64_t)&v0[*(_QWORD *)(*(_QWORD *)v0 + 104)];
  swift_beginAccess();
  sub_23647DF90(v11, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    return sub_236465998((uint64_t)v6, &qword_2563E5C40);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  if ((v0[112] & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5C48);
    sub_23645E904(&qword_2563E5C50, &qword_2563E5C48, (uint64_t)&protocol conformance descriptor for ValueIntercept<A>.DroppedPending);
    v13[0] = swift_allocError();
    sub_2365B01B8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v4, 1, 1, v7);
    swift_beginAccess();
    sub_23647DF48((uint64_t)v4, v11);
    swift_endAccess();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5C58);
    sub_23645E904(&qword_2563E5C60, &qword_2563E5C58, (uint64_t)&protocol conformance descriptor for ValueIntercept<A>.DroppedNew);
    swift_allocError();
    swift_willThrow();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void *sub_23647A234(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  uint64_t v4;

  if (__src)
    v4 = a2 - (_QWORD)__src;
  else
    v4 = 0;
  if (!__dst)
  {
    if (v4 <= 0)
      return __src;
LABEL_10:
    __src = (void *)sub_2365B06C8();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v4)
    goto LABEL_10;
  if (__src)
    return memmove(__dst, __src, a2 - (_QWORD)__src);
  return __src;
}

uint64_t type metadata accessor for _Coordinated.AsyncThrowingTapHandle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _Coordinated.AsyncThrowingTapHandle);
}

uint64_t type metadata accessor for _Coordinated.CommonError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _Coordinated.CommonError);
}

uint64_t type metadata accessor for _Coordinated(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _Coordinated);
}

uint64_t sub_23647A2EC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23647A310(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 24);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_2563E5098 + dword_2563E5098))(a1, a2, v6);
}

uint64_t sub_23647A398(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for _Coordinated.ValueUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _Coordinated.ValueUpdate);
}

uint64_t sub_23647A3EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, v4, v3);
}

uint64_t sub_23647A438()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23647A474(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = swift_task_alloc();
  v6 = *(_OWORD *)(v1 + 40);
  v7 = *(_OWORD *)(v1 + 56);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_23647E274;
  *(_QWORD *)(v5 + 56) = v4;
  *(_OWORD *)(v5 + 40) = v7;
  *(_OWORD *)(v5 + 24) = v6;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 64) = *(_QWORD *)v6;
  return swift_task_switch();
}

uint64_t sub_23647A4FC(uint64_t a1)
{
  uint64_t v1;

  return sub_236479F14(a1, v1);
}

uint64_t sub_23647A504(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  __int128 v7;

  v6 = swift_task_alloc();
  v7 = *(_OWORD *)(v2 + 24);
  *(_QWORD *)(v3 + 16) = v6;
  *(_QWORD *)v6 = v3;
  *(_QWORD *)(v6 + 8) = sub_23647E274;
  *(_OWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  return swift_task_switch();
}

uint64_t sub_23647A578(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t);

  v6 = *(int **)(v2 + 24);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23647E274;
  v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v8 = (_QWORD *)swift_task_alloc();
  v7[2] = v8;
  *v8 = v7;
  v8[1] = sub_2364725C8;
  return v10(a1, a2);
}

uint64_t sub_23647A60C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23647A630()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_2365AF9FC();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23647A6A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(sub_2365AF9FC() - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  return sub_236472B74(v0 + v3, *(_QWORD *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8)), v1);
}

uint64_t sub_23647A6F4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_2365AF9FC();
    result = MEMORY[0x23B7F5164](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for _Coordinated.ValueUpdate.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _Coordinated.ValueUpdate.CodingKeys);
}

uint64_t sub_23647A740(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2563E5138);
    v8 = a2;
    result = MEMORY[0x23B7F5164](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for _Coordinated.ValueUpdate.Response.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _Coordinated.ValueUpdate.Response.CodingKeys);
}

uint64_t type metadata accessor for _Coordinated.Coerced(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _Coordinated.Coerced);
}

uint64_t type metadata accessor for _AnyCoordinated(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _AnyCoordinated);
}

uint64_t sub_23647A7C4()
{
  return 4;
}

uint64_t sub_23647A7CC()
{
  return 3;
}

uint64_t sub_23647A7D4(uint64_t a1)
{
  uint64_t v1;

  return sub_236476104(a1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(void (**)(char *))(v1 + 48), *(_QWORD *)(v1 + 56), *(void (**)(uint64_t, char *))(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23647A808(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[5];
  v9 = v2[6];
  v10 = v2[7];
  v11 = v2[8];
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v12;
  *v12 = v3;
  v12[1] = sub_23647E274;
  return sub_2364764E0(a1, a2, v8, v9, v10, v11, v6, v7);
}

uint64_t sub_23647A8AC(uint64_t a1)
{
  uint64_t v1;

  return sub_236476104(a1, *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(void (**)(char *))(v1 + 56), *(_QWORD *)(v1 + 64), *(void (**)(uint64_t, char *))(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t objectdestroy_47Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23647A910(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[5];
  v9 = v2[6];
  v10 = v2[7];
  v11 = v2[8];
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v12;
  *v12 = v3;
  v12[1] = sub_23647E274;
  return sub_23647694C(a1, a2, v8, v9, v10, v11, v6, v7);
}

uint64_t sub_23647A9B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_236476B94(a1, a2, *(void (**)(uint64_t, char *))(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_23647A9CC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v11 = v2[6];
  v10 = v2[7];
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v12;
  *v12 = v3;
  v12[1] = sub_23647E274;
  return sub_236476D44(a1, a2, v8, v9, v11, v10, v6, v7);
}

uint64_t objectdestroy_60Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23647AA8C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v11 = v2[6];
  v10 = v2[7];
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v12;
  *v12 = v3;
  v12[1] = sub_23647E274;
  return sub_236476FF0(a1, a2, v8, v9, v11, v10, v6, v7);
}

uint64_t sub_23647AB1C(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7F5164](&protocol conformance descriptor for _Coordinated<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23647AB48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x23B7F5164](&protocol conformance descriptor for <A> _Coordinated<A>.ValueUpdate, a1, &v4);
}

uint64_t sub_23647AB80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x23B7F5164](&protocol conformance descriptor for <A> _Coordinated<A>.ValueUpdate.Response, a1, &v4);
}

uint64_t sub_23647ABB8(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7F5164](&protocol conformance descriptor for _Coordinated<A>.Coerced<A1>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23647ABE4(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7F5164](&protocol conformance descriptor for _AnyCoordinated<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23647AC10@<X0>(uint64_t a1@<X8>)
{
  return sub_23646C844(a1);
}

uint64_t sub_23647AC34()
{
  return 8;
}

_QWORD *sub_23647AC40(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t dispatch thunk of CoordinationProtocol.wrappedValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 24) + *(_QWORD *)(a3 + 24));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23647E274;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of CoordinationProtocol.submit(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 32) + *(_QWORD *)(a3 + 32));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23647E27C;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of CoordinationProtocol.invalidate()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 40) + *(_QWORD *)(a2 + 40));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23647E274;
  return v7(a1, a2);
}

uint64_t dispatch thunk of CoordinationProtocol.updateWithoutCoordination(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 48) + *(_QWORD *)(a3 + 48));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23647E274;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of CoordinationProtocol.updatingWithoutCoordination(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 56) + *(_QWORD *)(a4 + 56));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_23647E274;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of CoordinationProtocol.updateWithCoordination<A>(to:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v15;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a7 + 64)
                                                                                              + *(_QWORD *)(a7 + 64));
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v15;
  *v15 = v7;
  v15[1] = sub_23647E274;
  return v17(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t dispatch thunk of CoordinationProtocol.updatingWithCoordination<A>(_:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v17;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a8 + 72) + *(_QWORD *)(a8 + 72));
  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v17;
  *v17 = v8;
  v17[1] = sub_23647E274;
  return v19(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t dispatch thunk of CoordinationProtocol.tapping(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a5 + 80) + *(_QWORD *)(a5 + 80));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_23647E274;
  return v13(a1, a2, a3, a4, a5);
}

{
  uint64_t v5;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a5 + 88) + *(_QWORD *)(a5 + 88));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_23647E274;
  return v13(a1, a2, a3, a4, a5);
}

{
  uint64_t v5;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a5 + 96) + *(_QWORD *)(a5 + 96));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_23647E274;
  return v13(a1, a2, a3, a4, a5);
}

uint64_t sub_23647B1CC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for _Coordinated()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of _Coordinated.wrappedValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of _Coordinated.wrappedValue.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of _Coordinated.wrappedValue.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of _Coordinated.submit(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 272) + *(_QWORD *)(*(_QWORD *)v1 + 272));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23647E27C;
  return v6(a1);
}

uint64_t dispatch thunk of _Coordinated.__allocating_init(coordinating:receiver:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t dispatch thunk of _Coordinated.invalidate()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 296) + *(_QWORD *)(*(_QWORD *)v0 + 296));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_236477420;
  return v4();
}

uint64_t dispatch thunk of _Coordinated.updateWithoutCoordination(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 304) + *(_QWORD *)(*(_QWORD *)v1 + 304));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23647E274;
  return v6(a1);
}

uint64_t dispatch thunk of _Coordinated.updatingWithoutCoordination(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 312) + *(_QWORD *)(*(_QWORD *)v2 + 312));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_23647E274;
  return v8(a1, a2);
}

uint64_t dispatch thunk of _Coordinated.updateWithCoordination<A>(to:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v5 + 320)
                                                                            + *(_QWORD *)(*(_QWORD *)v5 + 320));
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = sub_236477420;
  return v14(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of _Coordinated.updatingWithCoordination<A>(_:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v14;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v6 + 328)
                                                                                     + *(_QWORD *)(*(_QWORD *)v6 + 328));
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v14;
  *v14 = v7;
  v14[1] = sub_23647E274;
  return v16(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of _Coordinated.tapping(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 352)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 352));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_23647E274;
  return v10(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 360)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 360));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_23647E274;
  return v10(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 368)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 368));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_23647E274;
  return v10(a1, a2, a3);
}

uint64_t sub_23647B708()
{
  return swift_allocateGenericValueMetadata();
}

unint64_t sub_23647B714(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_23647B72C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *sub_23647B774(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23647B814(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23647B874(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFC && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483644);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 3;
  if (v4 >= 5)
    return v5;
  else
    return 0;
}

uint64_t sub_23647B8C8(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 3;
  }
  return result;
}

_QWORD *sub_23647B924(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

uint64_t sub_23647B944()
{
  return swift_initClassMetadata2();
}

_QWORD *sub_23647B988(_QWORD *a1, id *a2)
{
  id v3;
  id v4;

  v3 = *a2;
  v4 = *a2;
  *a1 = v3;
  return a1;
}

void sub_23647B9B8(id *a1)
{

}

void **sub_23647B9C0(void **a1, id *a2)
{
  void *v3;
  id v4;
  id v5;

  v3 = *a1;
  v4 = *a2;
  v5 = *a2;
  *a1 = v4;

  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void **sub_23647BA10(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t sub_23647BA40(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_23647BA9C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t type metadata accessor for _Coordinated.HaltingTapError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _Coordinated.HaltingTapError);
}

uint64_t dispatch thunk of CoordinatedTapHandle.untap()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_23647BB00()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23647BB08()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_23647BB98(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64) + 7;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v6 + ((v5 + 9) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v10 = (a1 + v5 + 9) & ~v5;
    v11 = ((unint64_t)a2 + v5 + 9) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v10, v11);
    *(_QWORD *)((v6 + v10) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v6 + v11) & 0xFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v3;
}

uint64_t sub_23647BC78(uint64_t a1, uint64_t a2)
{
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)
                                                                                            + 9) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
  return swift_release();
}

uint64_t sub_23647BCC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 9 + a1) & ~v5;
  v7 = (v5 + 9 + a2) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v6, v7);
  *(_QWORD *)((*(_QWORD *)(v4 + 64) + 7 + v6) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v4 + 64) + 7 + v7) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t sub_23647BD54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 9 + a1) & ~v5;
  v7 = (v5 + 9 + a2) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v6, v7);
  *(_QWORD *)((*(_QWORD *)(v4 + 64) + 7 + v6) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v4 + 64) + 7 + v7) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_23647BDEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 9 + a1) & ~v5;
  v7 = (v5 + 9 + a2) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  *(_QWORD *)((*(_QWORD *)(v4 + 64) + 7 + v6) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v4 + 64) + 7 + v7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_23647BE74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 9 + a1) & ~v5;
  v7 = (v5 + 9 + a2) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v6, v7);
  *(_QWORD *)((*(_QWORD *)(v4 + 64) + 7 + v6) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v4 + 64) + 7 + v7) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_23647BF04(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  if (v6 >= a2)
  {
    v13 = (a1 + v7 + 9) & ~v7;
    if (v5 < 0x7FFFFFFF)
    {
      v14 = *(_QWORD *)((v8 + v13) & 0xFFFFFFFFFFFFF8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))(v13);
    }
  }
  else
  {
    if (((((v8 + ((v7 + 9) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v6 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_23647BF90 + 4 * byte_2365B4AA8[v11]))();
  }
}

void sub_23647C020(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 9) & ~(_DWORD)v7)) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X14 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 9) & ~(_DWORD)v7)) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7 + ((v7 + 9) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_23647C128()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x23647C1A0);
}

void sub_23647C130(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x23647C138);
  JUMPOUT(0x23647C1A0);
}

void sub_23647C17C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x23647C1A0);
}

void sub_23647C184()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x23647C1A0);
}

uint64_t sub_23647C18C@<X0>(int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a1)
    JUMPOUT(0x23647C1A0);
  if (a2 < 0x7FFFFFFF)
  {
    if ((a1 & 0x80000000) == 0)
      JUMPOUT(0x23647C19CLL);
    JUMPOUT(0x23647C198);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))((v6 + v5 + 9) & a3);
}

uint64_t sub_23647C1B8()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23647C234(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 16) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v9 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v10 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v9 = *v10;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)v9 + v5 + 8) & ~v5, ((unint64_t)v10 + v5 + 8) & ~v5);
  }
  return v3;
}

uint64_t sub_23647C2E8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *sub_23647C310(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 16))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_QWORD *sub_23647C374(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_QWORD *sub_23647C3D8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_QWORD *sub_23647C43C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t sub_23647C4A0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 16) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v6 + 8) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_23647C560 + 4 * byte_2365B4AB7[(v8 - 1)]))();
}

void sub_23647C5C8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_23647C79C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_23647C7F4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (*(_DWORD *)(v6 + 80) > 7u || (v7 & 0x100000) != 0 || v8 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
  {
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_23647C8CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *sub_23647C928(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_23647C9C0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

void *sub_23647CAA0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_23647CB38(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

uint64_t sub_23647CC18(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void sub_23647CD58(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_23647CF00()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_23647CF08()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t sub_23647CF2C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 48))(a1, 1);
}

uint64_t sub_23647CF40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 56))(a1, a2, 1);
}

uint64_t type metadata accessor for CoordinatedDecision(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CoordinatedDecision);
}

uint64_t sub_23647CF60()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for _Coordinated.Coerced()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of _Coordinated.Coerced.wrappedValue.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 176) + *(_QWORD *)(*(_QWORD *)v1 + 176));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23647E274;
  return v6(a1);
}

uint64_t dispatch thunk of _Coordinated.Coerced.submit(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 200) + *(_QWORD *)(*(_QWORD *)v1 + 200));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23647E27C;
  return v6(a1);
}

uint64_t dispatch thunk of _Coordinated.Coerced.invalidate()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 208) + *(_QWORD *)(*(_QWORD *)v0 + 208));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_23647E274;
  return v4();
}

uint64_t dispatch thunk of _Coordinated.Coerced.updateWithoutCoordination(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 216) + *(_QWORD *)(*(_QWORD *)v1 + 216));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23647E274;
  return v6(a1);
}

uint64_t dispatch thunk of _Coordinated.Coerced.updatingWithoutCoordination(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 224) + *(_QWORD *)(*(_QWORD *)v2 + 224));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_23647E274;
  return v8(a1, a2);
}

uint64_t dispatch thunk of _Coordinated.Coerced.updateWithCoordination<A>(to:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v5 + 232)
                                                                            + *(_QWORD *)(*(_QWORD *)v5 + 232));
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = sub_23647E274;
  return v14(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of _Coordinated.Coerced.updatingWithCoordination<A>(_:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v14;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v6 + 240)
                                                                                     + *(_QWORD *)(*(_QWORD *)v6 + 240));
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v14;
  *v14 = v7;
  v14[1] = sub_23647E274;
  return v16(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of _Coordinated.Coerced.tapping(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 248)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 248));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_23647E274;
  return v10(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 256)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 256));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_23647E274;
  return v10(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 264)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 264));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_23647E274;
  return v10(a1, a2, a3);
}

uint64_t sub_23647D47C()
{
  return sub_23647D4B8();
}

uint64_t type metadata accessor for _TypeEraser(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _TypeEraser);
}

uint64_t method lookup function for _TypeEraser()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of _TypeEraser.__allocating_init(wrappedValue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_23647D4AC()
{
  return sub_23647D4B8();
}

uint64_t sub_23647D4B8()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for _AnyCoordinated()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of _AnyCoordinated.wrappedValue.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 104) + *(_QWORD *)(*(_QWORD *)v1 + 104));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23647E274;
  return v6(a1);
}

uint64_t dispatch thunk of _AnyCoordinated.__allocating_init<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of _AnyCoordinated.submit(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 120) + *(_QWORD *)(*(_QWORD *)v1 + 120));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23647E27C;
  return v6(a1);
}

uint64_t dispatch thunk of _AnyCoordinated.invalidate()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 128) + *(_QWORD *)(*(_QWORD *)v0 + 128));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_23647E274;
  return v4();
}

uint64_t dispatch thunk of _AnyCoordinated.updateWithoutCoordination(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 136) + *(_QWORD *)(*(_QWORD *)v1 + 136));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23647E274;
  return v6(a1);
}

uint64_t dispatch thunk of _AnyCoordinated.updatingWithoutCoordination(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 144) + *(_QWORD *)(*(_QWORD *)v2 + 144));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_23647E274;
  return v8(a1, a2);
}

uint64_t dispatch thunk of _AnyCoordinated.updateWithCoordination<A>(to:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v5 + 152)
                                                                            + *(_QWORD *)(*(_QWORD *)v5 + 152));
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = sub_23647E274;
  return v14(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of _AnyCoordinated.updatingWithCoordination<A>(_:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v14;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v6 + 160)
                                                                                     + *(_QWORD *)(*(_QWORD *)v6 + 160));
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v14;
  *v14 = v7;
  v14[1] = sub_23647E274;
  return v16(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of _AnyCoordinated.tapping(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 168)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 168));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_23647E274;
  return v10(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 176)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 176));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_23647E274;
  return v10(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 184)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 184));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_23647E274;
  return v10(a1, a2, a3);
}

uint64_t sub_23647D9C0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23647DA0C + 4 * byte_2365B4AD8[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23647DA40 + 4 * byte_2365B4AD3[v4]))();
}

uint64_t sub_23647DA40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23647DA48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23647DA50);
  return result;
}

uint64_t sub_23647DA5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23647DA64);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23647DA68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23647DA70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23647DA7C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23647DAC8 + 4 * byte_2365B4AE2[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23647DAFC + 4 * byte_2365B4ADD[v4]))();
}

uint64_t sub_23647DAFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23647DB04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23647DB0CLL);
  return result;
}

uint64_t sub_23647DB18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23647DB20);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23647DB24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23647DB2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_23647DB38()
{
  JUMPOUT(0x23B7F5164);
}

void sub_23647DB48()
{
  JUMPOUT(0x23B7F5164);
}

void sub_23647DB58()
{
  JUMPOUT(0x23B7F5164);
}

void sub_23647DB68()
{
  JUMPOUT(0x23B7F5164);
}

void sub_23647DB78()
{
  JUMPOUT(0x23B7F5164);
}

void sub_23647DB88()
{
  JUMPOUT(0x23B7F5164);
}

uint64_t sub_23647DB98()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23647DBBC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = v2[5];
  v8 = v2[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_23647E274;
  return sub_2364798C0(a1, a2, v7, v8, v6);
}

uint64_t sub_23647DC48(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = v2[5];
  v8 = v2[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_23647E274;
  return sub_2364794D4(a1, a2, v7, v8, v6);
}

uint64_t sub_23647DCD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_236479234(a1, a2, *(void (**)(uint64_t, char *))(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 16));
}

uint64_t sub_23647DCE4(char *a1)
{
  uint64_t v1;

  return sub_236478D54(a1, *(void (**)(char *))(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 16));
}

uint64_t sub_23647DCF4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23647DD18(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v8 = v2[6];
  v7 = v2[7];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_23647E274;
  return sub_236478EB4(a1, a2, v8, v7, v6);
}

uint64_t sub_23647DDAC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v8 = v2[6];
  v7 = v2[7];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_23647E274;
  return sub_236478820(a1, a2, v8, v7, v6);
}

uint64_t sub_23647DE40(char *a1)
{
  uint64_t v1;

  return sub_2364782F8(a1, *(void (**)(char *))(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 16));
}

uint64_t sub_23647DE50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_2365AF9FC();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_23647DECC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_2365AF9FC() - 8) + 80);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = v0 + ((v2 + 48) & ~v2);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_23647E274;
  v5[2] = v3;
  v5[3] = v4;
  return swift_task_switch();
}

uint64_t sub_23647DF48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5C40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_23647DF90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5C40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23647DFD8(uint64_t a1)
{
  uint64_t v1;

  return sub_2364706B4(a1, *(uint64_t **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 16));
}

uint64_t sub_23647DFE8()
{
  uint64_t v0;
  uint64_t v1;

  swift_getTupleTypeMetadata2();
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542A8310);
  v1 = sub_2365B01D0();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23647E094(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  swift_getTupleTypeMetadata2();
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542A8310);
  v6 = *(_QWORD *)(sub_2365B01D0() - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = v1 + v7;
  v9 = (uint64_t *)(v1 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  v10 = *v9;
  v11 = v9[1];
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_23647E174;
  return sub_2364708B0(a1, v8, v10, v11, v5, v4);
}

uint64_t sub_23647E174(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_23647E1C4()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23647E1F0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_23647E274;
  return sub_236471700(a1, v4, v5, v6);
}

uint64_t sub_23647E2C4(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  os_unfair_lock_s *v6;
  _OWORD v8[8];
  char v9;
  _OWORD v10[8];
  char v11;

  sub_2365B0A28();
  sub_2365B0A04();
  swift_getKeyPath();
  *(_QWORD *)&v10[0] = a4;
  sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  sub_2365AFA44();
  swift_release();
  v6 = *(os_unfair_lock_s **)(a4 + 16);
  swift_retain();
  os_unfair_lock_lock(v6 + 37);
  sub_236568774((uint64_t)&v6[4], (uint64_t)v10);
  os_unfair_lock_unlock(v6 + 37);
  swift_release();
  v8[6] = v10[6];
  v8[7] = v10[7];
  v8[2] = v10[2];
  v8[3] = v10[3];
  v8[4] = v10[4];
  v8[5] = v10[5];
  v8[0] = v10[0];
  v8[1] = v10[1];
  v9 = v11;
  sub_2365687F8(a1);
  sub_236484BB0((uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5138);
  sub_236487D74();
  return sub_2365AFFD8();
}

uint64_t sub_23647E45C(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v8 = type metadata accessor for SetupModel.ModelData(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2365B0A28();
  sub_2365B0A04();
  swift_getKeyPath();
  *(_QWORD *)&v28 = a4;
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA44();
  swift_release();
  v11 = *(_QWORD *)(a4 + 16);
  v12 = v11 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v11 + 16);
  v13 = (os_unfair_lock_s *)(v11 + ((*(unsigned int *)(*(_QWORD *)v11 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v13);
  sub_23657FBD0(v12, (uint64_t)v10);
  os_unfair_lock_unlock(v13);
  swift_release();
  sub_2365B09F8();
  v14 = *((_QWORD *)v10 + 3);
  v15 = *((_DWORD *)v10 + 8);
  v16 = *((_WORD *)v10 + 18);
  v28 = *(_OWORD *)(v10 + 8);
  *(_QWORD *)&v29 = v14;
  WORD6(v29) = v16;
  DWORD2(v29) = v15;
  SetupModel.RemoteRole.hash(into:)();
  v17 = v10[88];
  switch(v17)
  {
    case -6:
    case -5:
    case -4:
    case -3:
    case -2:
    case -1:
      sub_2365B09F8();
      break;
    default:
      v19 = *((_QWORD *)v10 + 9);
      v18 = *((_QWORD *)v10 + 10);
      v27 = *(_OWORD *)(v10 + 56);
      v26 = *(_OWORD *)(v10 + 40);
      sub_2365B09F8();
      v28 = v26;
      v29 = v27;
      *(_QWORD *)&v30 = v19;
      *((_QWORD *)&v30 + 1) = v18;
      LOBYTE(v31) = v17;
      SetupError.hash(into:)();
      break;
  }
  v20 = *((_OWORD *)v10 + 15);
  v36 = *((_OWORD *)v10 + 14);
  v37 = v20;
  v38 = *((_OWORD *)v10 + 16);
  v21 = *((_OWORD *)v10 + 11);
  v32 = *((_OWORD *)v10 + 10);
  v33 = v21;
  v22 = *((_OWORD *)v10 + 13);
  v34 = *((_OWORD *)v10 + 12);
  v35 = v22;
  v23 = *((_OWORD *)v10 + 7);
  v28 = *((_OWORD *)v10 + 6);
  v24 = *((_OWORD *)v10 + 8);
  v31 = *((_OWORD *)v10 + 9);
  v29 = v23;
  v30 = v24;
  DiscoveryModel.hash(into:)(a1);
  AuthenticationModel.hash(into:)();
  SignInModel.hash(into:)((uint64_t)a1);
  sub_236465A18((uint64_t)v10, type metadata accessor for SetupModel.ModelData);
  *(_QWORD *)&v28 = a5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5138);
  sub_236487D74();
  return sub_2365AFFD8();
}

unint64_t static Constants.MachServiceNames.setupService.getter()
{
  return 0xD000000000000021;
}

unint64_t static Constants.MachServiceNames.repairService.getter()
{
  return 0xD000000000000022;
}

void MachRepairMessage.hash(into:)()
{
  __int128 *v0;
  char *v1;
  __int128 v2[8];
  _OWORD v3[9];

  sub_236484B60(v0, v2);
  sub_236484B60(v2, v3);
  v1 = (char *)sub_23647E7F4 + 4 * byte_2365B5366[sub_236484B90((uint64_t)v3)];
  __asm { BR              X10 }
}

uint64_t sub_23647E7F4()
{
  __int128 *v0;
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[8];
  char v11;
  uint64_t v12;
  char v13;
  _OWORD v14[8];
  __int128 v15[23];

  v3 = *(_QWORD *)((uint64_t (*)(uint64_t))nullsub_1)(v2 - 224);
  sub_2365B09F8();
  swift_getKeyPath();
  v12 = v3;
  sub_236484B60(v15, v14);
  ((void (*)(_OWORD *))nullsub_1)(v14);
  sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  swift_retain();
  sub_2365AFA44();
  swift_release();
  v4 = *(os_unfair_lock_s **)(v3 + 16);
  swift_retain();
  os_unfair_lock_lock(v4 + 37);
  sub_236568774((uint64_t)&v4[4], (uint64_t)&v12);
  os_unfair_lock_unlock(v4 + 37);
  swift_release();
  v5 = v1[7];
  v10[6] = v1[6];
  v10[7] = v5;
  v6 = v1[3];
  v10[2] = v1[2];
  v10[3] = v6;
  v7 = v1[5];
  v10[4] = v1[4];
  v10[5] = v7;
  v8 = v1[1];
  v10[0] = *v1;
  v10[1] = v8;
  v11 = v13;
  sub_2365687F8(v0);
  sub_236484BB0((uint64_t)v10);
  return sub_236487E90((uint64_t)v15, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_236484CE0);
}

uint64_t sub_23647EC44(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23647EC74 + 4 * byte_2365B536E[a1]))(0x726961706572, 0xE600000000000000);
}

uint64_t sub_23647EC74()
{
  return 0x6552726961706572;
}

unint64_t sub_23647EC94()
{
  return 0xD000000000000015;
}

uint64_t sub_23647ECB0()
{
  return 0x526D6F74706D7973;
}

unint64_t sub_23647ECD4()
{
  return 0xD000000000000016;
}

uint64_t sub_23647ED0C()
{
  return 0x74706965636572;
}

uint64_t sub_23647ED24()
{
  return 0x6572756C696166;
}

uint64_t sub_23647ED3C()
{
  unsigned __int8 *v0;

  return sub_23647EC44(*v0);
}

uint64_t sub_23647ED44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_236487508(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23647ED68()
{
  sub_236484E58();
  return sub_2365B0AD0();
}

uint64_t sub_23647ED90()
{
  sub_236484E58();
  return sub_2365B0ADC();
}

uint64_t sub_23647EDB8()
{
  sub_236484FC8();
  return sub_2365B0AD0();
}

uint64_t sub_23647EDE0()
{
  sub_236484FC8();
  return sub_2365B0ADC();
}

uint64_t sub_23647EE08()
{
  sub_236485088();
  return sub_2365B0AD0();
}

uint64_t sub_23647EE30()
{
  sub_236485088();
  return sub_2365B0ADC();
}

uint64_t sub_23647EE58()
{
  sub_236484EFC();
  return sub_2365B0AD0();
}

uint64_t sub_23647EE80()
{
  sub_236484EFC();
  return sub_2365B0ADC();
}

uint64_t sub_23647EEA8()
{
  sub_2364851D0();
  return sub_2365B0AD0();
}

uint64_t sub_23647EED0()
{
  sub_2364851D0();
  return sub_2365B0ADC();
}

uint64_t sub_23647EEF8()
{
  sub_236484F84();
  return sub_2365B0AD0();
}

uint64_t sub_23647EF20()
{
  sub_236484F84();
  return sub_2365B0ADC();
}

uint64_t sub_23647EF48()
{
  sub_2364852D8();
  return sub_2365B0AD0();
}

uint64_t sub_23647EF70()
{
  sub_2364852D8();
  return sub_2365B0ADC();
}

uint64_t sub_23647EF98()
{
  sub_236485250();
  return sub_2365B0AD0();
}

uint64_t sub_23647EFC0()
{
  sub_236485250();
  return sub_2365B0ADC();
}

uint64_t sub_23647EFE8()
{
  sub_236485148();
  return sub_2365B0AD0();
}

uint64_t sub_23647F010()
{
  sub_236485148();
  return sub_2365B0ADC();
}

void MachRepairMessage.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  _QWORD v15[3];
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  __int128 v37[8];
  _OWORD v38[8];

  v2 = v1;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5CA0);
  v32 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v31 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5CA8);
  v21 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v17 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5CB0);
  v29 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v28 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5CB8);
  v26 = *(_QWORD *)(v7 - 8);
  v27 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v25 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5CC0);
  v22 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v19 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5CC8);
  v15[1] = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5CD0);
  v18 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v15[2] = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5CD8);
  MEMORY[0x24BDAC7A8](v11);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5CE0);
  v34 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v13 = (char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_236484B60(v2, v37);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_236484E58();
  v35 = v13;
  sub_2365B0AAC();
  sub_236484B60(v37, v38);
  v14 = (char *)sub_23647F330 + 4 * word_2365B5376[sub_236484B90((uint64_t)v38)];
  __asm { BR              X10 }
}

uint64_t sub_23647F330()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)((uint64_t (*)(uint64_t))nullsub_1)(v4 - 216);
  *(_BYTE *)(v0 + 256) = 0;
  sub_236484B60((__int128 *)(v0 + 504), (_OWORD *)(v0 + 376));
  ((void (*)(uint64_t))nullsub_1)(v0 + 376);
  sub_2364852D8();
  swift_retain();
  v7 = *(_QWORD *)(v0 + 240);
  v6 = *(_QWORD *)(v0 + 248);
  sub_2365B07B8();
  *(_QWORD *)(v0 + 256) = v5;
  type metadata accessor for RepairModel();
  sub_23644F0B8(&qword_2563E5D20, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  sub_2365B0824();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 232) + 8))(v7, v6);
  return sub_236487E90(v0 + 504, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_236484CE0);
}

void sub_23647F9E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v0 + 376) = 6;
  sub_236484F84();
  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 248);
  sub_2365B07B8();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(v1, *(_QWORD *)(v0 + 80));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 232) + 8))(v2, v3);
  JUMPOUT(0x23647F9BCLL);
}

uint64_t MachRepairMessage.hashValue.getter()
{
  __int128 *v0;
  _OWORD v2[8];
  __int128 v3[8];

  sub_236484B60(v0, v3);
  sub_236484B60(v3, v2);
  sub_2365B09E0();
  MachRepairMessage.hash(into:)();
  return sub_2365B0A34();
}

uint64_t MachRepairMessage.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD v26[11];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;

  v38 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5D70);
  v35 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v43 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5D78);
  v31 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v42 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5D80);
  v26[6] = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v37 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5D88);
  v30 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v41 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5D90);
  v26[10] = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v40 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5D98);
  v26[9] = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v39 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5DA0);
  v26[7] = *(_QWORD *)(v9 - 8);
  v26[8] = v9;
  MEMORY[0x24BDAC7A8](v9);
  v36 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5DA8);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5DB0);
  v15 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v17 = (char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v45 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v18);
  sub_236484E58();
  v19 = v46;
  sub_2365B0A7C();
  if (!v19)
  {
    v26[3] = v11;
    v26[4] = v14;
    v26[2] = v12;
    v26[5] = 0;
    v46 = v15;
    v20 = sub_2365B07A0();
    if (*(_QWORD *)(v20 + 16) == 1)
    {
      v26[1] = v17;
      __asm { BR              X10 }
    }
    v21 = sub_2365B05B4();
    swift_allocError();
    v23 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E47A8);
    *v23 = &type metadata for MachRepairMessage;
    v24 = v44;
    sub_2365B0704();
    sub_2365B059C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, *MEMORY[0x24BEE26D0], v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v17, v24);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
}

uint64_t sub_236480694@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return MachRepairMessage.init(from:)(a1, a2);
}

void sub_2364806A8(_QWORD *a1)
{
  MachRepairMessage.encode(to:)(a1);
}

uint64_t sub_2364806C0()
{
  __int128 *v0;
  _OWORD v2[8];
  __int128 v3[8];

  sub_236484B60(v0, v3);
  sub_236484B60(v3, v2);
  sub_2365B09E0();
  MachRepairMessage.hash(into:)();
  return sub_2365B0A34();
}

uint64_t sub_23648071C()
{
  __int128 *v0;
  _OWORD v2[8];
  __int128 v3[8];

  sub_236484B60(v0, v3);
  sub_236484B60(v3, v2);
  sub_2365B09E0();
  MachRepairMessage.hash(into:)();
  return sub_2365B0A34();
}

void RepairError.hash(into:)()
{
  __asm { BR              X10 }
}

uint64_t sub_2364807CC()
{
  sub_2365B09F8();
  return sub_2365B008C();
}

uint64_t sub_236480838()
{
  uint64_t v0;
  uint64_t v1;

  sub_2365B09F8();
  return sub_2364830F0(v0, v1);
}

uint64_t sub_23648086C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  v14 = *(_QWORD *)(v0 + 72);
  v15 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 88);
  v12 = *(_QWORD *)(v0 + 104);
  v13 = *(_QWORD *)(v0 + 96);
  v10 = *(_QWORD *)(v0 + 80);
  v11 = *(_QWORD *)(v0 + 112);
  v7 = *(_BYTE *)(v0 + 64);
  v9 = *(_BYTE *)(v0 + 120);
  sub_2365B09F8();
  sub_23645DC04(v1, v2, v3, v4, v5, v15, v7);
  sub_23645DC04(v14, v10, v6, v13, v12, v11, v9);
  SetupError.hash(into:)();
  SetupError.hash(into:)();
  sub_23645DCB0(v1, v2, v3, v4, v5, v15, v7);
  return sub_23645DCB0(v14, v10, v6, v13, v12, v11, v9);
}

uint64_t sub_236480998()
{
  return sub_2365B09F8();
}

uint64_t sub_236480A10(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_236480A44 + 4 * byte_2365B539B[a1]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_236480A44()
{
  return 0x4364696C61766E69;
}

uint64_t sub_236480A68()
{
  return 0x656C6C65636E6163;
}

uint64_t sub_236480A84()
{
  return 0x636E614372657375;
}

uint64_t sub_236480AA8()
{
  return 0x636972656E6567;
}

unint64_t sub_236480ABC()
{
  return 0xD000000000000017;
}

unint64_t sub_236480ADC()
{
  return 0xD000000000000014;
}

uint64_t sub_236480AF8()
{
  return 0x64657473656ELL;
}

uint64_t sub_236480B0C()
{
  sub_2364855DC();
  return sub_2365B0AD0();
}

uint64_t sub_236480B34()
{
  sub_2364855DC();
  return sub_2365B0ADC();
}

uint64_t sub_236480B5C()
{
  sub_236485768();
  return sub_2365B0AD0();
}

uint64_t sub_236480B84()
{
  sub_236485768();
  return sub_2365B0ADC();
}

uint64_t sub_236480BAC()
{
  unsigned __int8 *v0;

  return sub_236480A10(*v0);
}

uint64_t sub_236480BB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23648786C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_236480BD8()
{
  sub_236485554();
  return sub_2365B0AD0();
}

uint64_t sub_236480C00()
{
  sub_236485554();
  return sub_2365B0ADC();
}

uint64_t sub_236480C28()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 1701080931;
  if (*v0 != 1)
    v1 = 0xD000000000000014;
  if (*v0)
    return v1;
  else
    return 0x6E69616D6F64;
}

uint64_t sub_236480C7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_236487BF0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_236480CA0()
{
  sub_2364856E0();
  return sub_2365B0AD0();
}

uint64_t sub_236480CC8()
{
  sub_2364856E0();
  return sub_2365B0ADC();
}

uint64_t sub_236480CF0()
{
  sub_2364857AC();
  return sub_2365B0AD0();
}

uint64_t sub_236480D18()
{
  sub_2364857AC();
  return sub_2365B0ADC();
}

uint64_t sub_236480D40()
{
  sub_236485620();
  return sub_2365B0AD0();
}

uint64_t sub_236480D68()
{
  sub_236485620();
  return sub_2365B0ADC();
}

uint64_t sub_236480D90()
{
  sub_236485598();
  return sub_2365B0AD0();
}

uint64_t sub_236480DB8()
{
  sub_236485598();
  return sub_2365B0ADC();
}

uint64_t sub_236480DE0()
{
  sub_2364857F0();
  return sub_2365B0AD0();
}

uint64_t sub_236480E08()
{
  sub_2364857F0();
  return sub_2365B0ADC();
}

uint64_t sub_236480E30()
{
  sub_236485724();
  return sub_2365B0AD0();
}

uint64_t sub_236480E58()
{
  sub_236485724();
  return sub_2365B0ADC();
}

void RepairError.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5DE8);
  v31 = *(_QWORD *)(v3 - 8);
  v32 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v30 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5DF0);
  v16 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v15 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5DF8);
  v22 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v25 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5E00);
  v27 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v26 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5E08);
  v13[1] = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v13[0] = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5E10);
  v19 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v18 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5E18);
  v23 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5E20);
  MEMORY[0x24BDAC7A8](v21);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5E28);
  v37 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v10 = *(_QWORD *)(v1 + 8);
  v35 = *(_QWORD *)(v1 + 16);
  v36 = v10;
  v11 = *(_QWORD *)(v1 + 24);
  v33 = *(_QWORD *)(v1 + 32);
  v34 = v11;
  v12 = *(unsigned __int8 *)(v1 + 40);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_236485554();
  sub_2365B0AAC();
  __asm { BR              X9 }
}

uint64_t sub_2364811A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v2 - 144) = 1;
  sub_2364857AC();
  v3 = *(_QWORD *)(v2 - 152);
  sub_2365B07B8();
  v4 = *(_QWORD *)(v2 - 272);
  sub_2365B0800();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 280) + 8))(v0, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 168) + 8))(v1, v3);
}

uint64_t RepairError.hashValue.getter()
{
  sub_2365B09E0();
  RepairError.hash(into:)();
  return sub_2365B0A34();
}

uint64_t RepairError.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD v25[10];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;

  v36 = a2;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5E88);
  v25[7] = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v41 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5E90);
  v29 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v35 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5E98);
  v25[6] = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v39 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5EA0);
  v32 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v38 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5EA8);
  v25[9] = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v34 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5EB0);
  v25[8] = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v33 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5EB8);
  v25[5] = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5EC0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5EC8);
  v14 = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[3];
  v43 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v17);
  sub_236485554();
  v18 = v44;
  sub_2365B0A7C();
  if (!v18)
  {
    v25[2] = v13;
    v25[1] = v11;
    v25[3] = v10;
    v25[4] = 0;
    v44 = v14;
    v19 = sub_2365B07A0();
    if (*(_QWORD *)(v19 + 16) == 1)
    {
      v25[0] = v16;
      __asm { BR              X10 }
    }
    v20 = sub_2365B05B4();
    swift_allocError();
    v22 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E47A8);
    *v22 = &type metadata for RepairError;
    v23 = v42;
    sub_2365B0704();
    sub_2365B059C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, *MEMORY[0x24BEE26D0], v20);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v16, v23);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
}

void sub_236481CF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)(v1 - 72) = 1;
  sub_2364857AC();
  v2 = *(_QWORD *)(v1 - 296);
  v3 = v0;
  v4 = *(_QWORD *)(v1 - 320);
  v5 = *(_QWORD *)(v1 - 288);
  sub_2365B06F8();
  if (v5)
  {
    swift_bridgeObjectRelease();
    JUMPOUT(0x236481CC0);
  }
  v6 = *(_QWORD *)(v1 - 240);
  v7 = sub_2365B074C();
  v8 = *(_QWORD *)(v1 - 96);
  v9 = v7;
  v11 = v10;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 280) + 8))(v2, v6);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v4, v3);
  v12 = *(_QWORD *)(v1 - 160);
  *(_QWORD *)v12 = v9;
  *(_QWORD *)(v12 + 8) = v11;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_BYTE *)(v12 + 40) = 0;
  JUMPOUT(0x236481CC8);
}

void sub_236481D5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v2 - 72) = 2;
  sub_236485768();
  v3 = *(_QWORD *)(v2 - 184);
  v4 = v0;
  v5 = *(_QWORD *)(v2 - 320);
  v6 = *(_QWORD *)(v2 - 288);
  sub_2365B06F8();
  if (v6)
  {
    swift_bridgeObjectRelease();
    JUMPOUT(0x236481CC0);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 256) + 8))(v3, v1);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v5, v4);
  v7 = *(_QWORD *)(v2 - 160);
  *(_QWORD *)v7 = 1;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_BYTE *)(v7 + 40) = 4;
  JUMPOUT(0x236481CC8);
}

void sub_236481DC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v1 - 72) = 3;
  sub_236485724();
  v2 = *(_QWORD *)(v1 - 176);
  v3 = v0;
  v4 = *(_QWORD *)(v1 - 320);
  v5 = *(_QWORD *)(v1 - 288);
  sub_2365B06F8();
  if (!v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 248) + 8))(v2, *(_QWORD *)(v1 - 224));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 96) + 8))(v4, v3);
    v6 = *(_QWORD *)(v1 - 160);
    *(_QWORD *)v6 = 2;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 32) = 0;
    *(_BYTE *)(v6 + 40) = 4;
    JUMPOUT(0x236481CC8);
  }
  swift_bridgeObjectRelease();
  JUMPOUT(0x236481CC0);
}

void sub_236481E5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v3 - 72) = 4;
  sub_2364856E0();
  v4 = *(_QWORD *)(v3 - 320);
  v5 = *(_QWORD *)(v3 - 288);
  sub_2365B06F8();
  if (!v5)
  {
    *(_BYTE *)(v3 - 72) = 0;
    v6 = *(_QWORD *)(v3 - 232);
    *(_QWORD *)(v3 - 128) = sub_2365B074C();
    *(_QWORD *)(v3 - 120) = v1;
    *(_BYTE *)(v3 - 72) = 1;
    sub_2365B0764();
    *(_BYTE *)(v3 - 72) = 2;
    sub_2365B074C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 192) + 8))(v2, v6);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 96) + 8))(v4, v0);
    JUMPOUT(0x2364822F8);
  }
  swift_bridgeObjectRelease();
  JUMPOUT(0x236481CC0);
}

void sub_236481F00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v2 - 72) = 5;
  sub_236485620();
  v3 = *(_QWORD *)(v2 - 320);
  v4 = *(_QWORD *)(v2 - 288);
  sub_2365B06F8();
  if (v4)
  {
    swift_bridgeObjectRelease();
    JUMPOUT(0x236481CC0);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5E50);
  sub_236485878();
  v5 = *(_QWORD *)(v2 - 208);
  sub_2365B0770();
  v6 = *(_QWORD *)(v2 - 96);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 272) + 8))(v1, v5);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v0);
  JUMPOUT(0x2364822F0);
}

void sub_236481F5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v2 - 72) = 6;
  sub_2364855DC();
  v3 = *(_QWORD *)(v2 - 168);
  v4 = v0;
  v5 = *(_QWORD *)(v2 - 320);
  v6 = *(_QWORD *)(v2 - 288);
  sub_2365B06F8();
  if (v6)
    JUMPOUT(0x236481FA8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 216) + 8))(v3, v1);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v5, v4);
  v7 = *(_QWORD *)(v2 - 160);
  *(_QWORD *)v7 = 3;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_BYTE *)(v7 + 40) = 4;
  JUMPOUT(0x236481CC8);
}

void sub_236481FC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v2 - 72) = 7;
  sub_236485598();
  v3 = v1;
  v4 = *(_QWORD *)(v2 - 320);
  v5 = *(_QWORD *)(v2 - 288);
  sub_2365B06F8();
  if (v5)
    JUMPOUT(0x23648201CLL);
  *(_QWORD *)(v2 - 128) = swift_allocObject();
  *(_BYTE *)(v2 - 72) = 0;
  sub_23645EA10();
  v6 = *(_QWORD *)(v2 - 200);
  sub_2365B0770();
  v7 = *(_QWORD *)(v2 - 96);
  *(_BYTE *)(v2 - 72) = 1;
  sub_2365B0770();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 264) + 8))(v3, v6);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v4, v0);
  JUMPOUT(0x236482470);
}

uint64_t sub_236482480()
{
  sub_236487D28();
  return sub_2365B0980();
}

uint64_t sub_2364824A8()
{
  sub_236487D28();
  return sub_2365B0974();
}

uint64_t sub_2364824D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return RepairError.init(from:)(a1, a2);
}

void sub_2364824E4(_QWORD *a1)
{
  RepairError.encode(to:)(a1);
}

uint64_t sub_2364824FC()
{
  sub_2365B09E0();
  RepairError.hash(into:)();
  return sub_2365B0A34();
}

uint64_t sub_236482558()
{
  sub_2365B09E0();
  RepairError.hash(into:)();
  return sub_2365B0A34();
}

uint64_t static RepairError.errorDomain.getter()
{
  uint64_t v0;

  swift_beginAccess();
  v0 = qword_2563E5C88;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static RepairError.errorDomain.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  qword_2563E5C88 = a1;
  qword_2563E5C90 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*static RepairError.errorDomain.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t RepairError.errorCode.getter()
{
  uint64_t v0;

  return ((uint64_t (*)(uint64_t))((char *)sub_2364826B8 + 4 * byte_2365B53B8[*(unsigned __int8 *)(v0 + 40)]))(2001);
}

uint64_t sub_2364826B8()
{
  return 2004;
}

uint64_t sub_2364826C0()
{
  return 2005;
}

uint64_t sub_2364826C8()
{
  return 2007;
}

uint64_t sub_2364826D0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v7;

  v3 = v1[1];
  v2 = v1[2];
  v4 = v1[3] | v1[4];
  if (!(v4 | a1 | v2 | v3))
    return 2000;
  v5 = v4 | v2 | v3;
  if (a1 == 1 && v5 == 0)
    return 2002;
  if (v5)
    v7 = 0;
  else
    v7 = a1 == 2;
  if (v7)
    return 2003;
  else
    return 2006;
}

unint64_t RepairError.errorUserInfo.getter()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5ED8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2365B6A20;
  *(_QWORD *)(inited + 32) = sub_2365B005C();
  *(_QWORD *)(inited + 40) = v1;
  RepairError.description.getter();
  *(_QWORD *)(inited + 72) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 56) = v3;
  return sub_236466978(inited);
}

void RepairError.description.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_236482834()
{
  uint64_t v0;
  uint64_t v1;

  sub_2365B0578();
  sub_2365B00B0();
  sub_2365B00B0();
  sub_2365B00B0();
  *(_QWORD *)(v1 - 104) = v0;
  sub_2365B0860();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  sub_2365B00B0();
  return 0;
}

uint64_t sub_236482B6C()
{
  uint64_t v0;

  swift_beginAccess();
  v0 = qword_2563E5C88;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_236482BBC()
{
  uint64_t v0;

  return ((uint64_t (*)(uint64_t))((char *)sub_236482BE0 + 4 * byte_2365B53C2[*(unsigned __int8 *)(v0 + 40)]))(2001);
}

uint64_t sub_236482BE0()
{
  return 2004;
}

uint64_t sub_236482BE8()
{
  return 2005;
}

uint64_t sub_236482BF0()
{
  return 2007;
}

uint64_t sub_236482BF8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v7;

  v3 = v1[1];
  v2 = v1[2];
  v4 = v1[3] | v1[4];
  if (!(v4 | a1 | v2 | v3))
    return 2000;
  v5 = v4 | v2 | v3;
  if (a1 == 1 && v5 == 0)
    return 2002;
  if (v5)
    v7 = 0;
  else
    v7 = a1 == 2;
  if (v7)
    return 2003;
  else
    return 2006;
}

unint64_t sub_236482C50()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5ED8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2365B6A20;
  *(_QWORD *)(inited + 32) = sub_2365B005C();
  *(_QWORD *)(inited + 40) = v1;
  RepairError.description.getter();
  *(_QWORD *)(inited + 72) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 56) = v3;
  return sub_236466978(inited);
}

void Error.into()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  _QWORD v56[5];
  unsigned __int8 v57;

  v4 = v3;
  v8 = *(_QWORD *)(a1 - 8);
  v9 = MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v43 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v15((char *)&v43 - v16, v3, a1);
  if (!swift_dynamicCast())
    goto LABEL_4;
  v47 = v8;
  v48 = a3;
  v43 = v15;
  v44 = v3;
  v17 = v49;
  v18 = v50;
  v45 = a2;
  v46 = v11;
  v20 = (uint64_t)v51;
  v19 = v52;
  v21 = v53;
  v22 = v54;
  v23 = v55;
  sub_2365A4DD8((uint64_t)v56);
  v24 = v17;
  v25 = v18;
  v26 = v21;
  v11 = v46;
  v27 = v22;
  v15 = v43;
  v4 = v44;
  v28 = v23;
  v8 = v47;
  a3 = v48;
  sub_23645DCB0(v24, v25, v20, v19, v26, v27, v28);
  v29 = v57;
  if (v57 == 255)
  {
LABEL_4:
    v15(v14, v4, a1);
    if (swift_dynamicCast())
    {
      v30 = v49;
      v31 = v50;
      v32 = v51;
      v33 = v52;
      v34 = v53;
      v29 = v54;
    }
    else
    {
      v15(v11, v4, a1);
      v35 = sub_2365B08A8();
      if (v35)
      {
        v36 = (void *)v35;
        (*(void (**)(char *, uint64_t))(v8 + 8))(v11, a1);
      }
      else
      {
        v36 = (void *)swift_allocError();
        (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v37, v11, a1);
      }
      v38 = (void *)sub_2365AF8E8();

      v39 = objc_msgSend(v38, sel_domain);
      v30 = sub_2365B005C();
      v31 = v40;

      v32 = objc_msgSend(v38, sel_code);
      v41 = objc_msgSend(v38, sel_localizedDescription);
      v33 = sub_2365B005C();
      v34 = v42;

      v29 = 1;
    }
  }
  else
  {
    v30 = v56[0];
    v31 = v56[1];
    v32 = (id)v56[2];
    v33 = v56[3];
    v34 = v56[4];
  }
  *(_QWORD *)a3 = v30;
  *(_QWORD *)(a3 + 8) = v31;
  *(_QWORD *)(a3 + 16) = v32;
  *(_QWORD *)(a3 + 24) = v33;
  *(_QWORD *)(a3 + 32) = v34;
  *(_BYTE *)(a3 + 40) = v29;
}

uint64_t sub_236482FA8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  sub_2365AFA44();
  swift_release();
  *a2 = *(_QWORD *)(v3 + 16);
  return swift_retain();
}

uint64_t sub_236483038()
{
  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  swift_retain();
  sub_2365AFA38();
  swift_release();
  return swift_release();
}

uint64_t sub_2364830F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  unint64_t v17;
  int64_t v18;

  sub_2365B0A34();
  v3 = a2 + 56;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  v10 = 0;
  while (1)
  {
    if (v6)
    {
      v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    if (__OFADD__(v10++, 1))
      goto LABEL_19;
    if (v10 >= v7)
    {
LABEL_17:
      swift_release();
      return sub_2365B09F8();
    }
    v17 = *(_QWORD *)(v3 + 8 * v10);
    if (!v17)
      break;
LABEL_16:
    v6 = (v17 - 1) & v17;
    v12 = __clz(__rbit64(v17)) + (v10 << 6);
LABEL_5:
    v13 = *(void **)(*(_QWORD *)(a2 + 48) + 8 * v12);
    sub_2365B005C();
    sub_2365B09E0();
    v14 = v13;
    sub_2365B008C();
    v15 = sub_2365B0A34();

    result = swift_bridgeObjectRelease();
    v9 ^= v15;
  }
  v18 = v10 + 1;
  if (v10 + 1 >= v7)
    goto LABEL_17;
  v17 = *(_QWORD *)(v3 + 8 * v18);
  if (v17)
  {
    ++v10;
    goto LABEL_16;
  }
  while (1)
  {
    v10 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v10 >= v7)
      goto LABEL_17;
    v17 = *(_QWORD *)(v3 + 8 * v10);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_236483294(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v4 = type metadata accessor for IdMSAccount();
  v28 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v27 = (uint64_t)&v23 - v8;
  v9 = *((_QWORD *)a1 + 8);
  v10 = a1[1];
  v33 = *a1;
  v34 = v10;
  v11 = a1[2];
  v12 = a1[3];
  v23 = a1;
  v35 = v11;
  v36 = v12;
  v37 = v9;
  v26 = sub_2365B0A34();
  v13 = *(_QWORD *)(a2 + 56);
  v24 = a2 + 56;
  v14 = 1 << *(_BYTE *)(a2 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v30 = (unint64_t)(v14 + 63) >> 6;
  v29 = a2;
  swift_bridgeObjectRetain();
  v25 = v4;
  v32 = 0;
  if (v16)
  {
    v17 = __clz(__rbit64(v16));
    v31 = (v16 - 1) & v16;
    goto LABEL_14;
  }
  v18 = 1;
  if (v30 > 1)
  {
    v19 = *(_QWORD *)(v24 + 8);
    if (v19)
    {
LABEL_13:
      v31 = (v19 - 1) & v19;
      v17 = __clz(__rbit64(v19)) + (v18 << 6);
LABEL_14:
      v21 = v27;
      sub_236487DD0(*(_QWORD *)(v29 + 48) + *(_QWORD *)(v28 + 72) * v17, v27);
      sub_236487E14(v21, (uint64_t)v7);
      sub_2365B09E0();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_2365B008C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_2365AF8D0();
      sub_23644F0B8(&qword_2563E4D80, (uint64_t (*)(uint64_t))MEMORY[0x24BDCCC10], MEMORY[0x24BDCCC28]);
      sub_2365AFFD8();
      __asm { BR              X9 }
    }
    v20 = 2;
    if (v30 > 2)
    {
      v19 = *(_QWORD *)(v24 + 16);
      if (v19)
      {
        v18 = 2;
        goto LABEL_13;
      }
      while (1)
      {
        v18 = v20 + 1;
        if (__OFADD__(v20, 1))
        {
          __break(1u);
          __break(1u);
          JUMPOUT(0x236483848);
        }
        if (v18 >= v30)
          break;
        v19 = *(_QWORD *)(v24 + 8 * v18);
        ++v20;
        if (v19)
          goto LABEL_13;
      }
    }
  }
  swift_release();
  return sub_2365B09F8();
}

uint64_t sub_236483858(__int128 *a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22[72];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v3 = *((_QWORD *)a1 + 8);
  v4 = a1[1];
  v23 = *a1;
  v24 = v4;
  v5 = a1[3];
  v25 = a1[2];
  v26 = v5;
  v27 = v3;
  sub_2365B0A34();
  v20 = a2 + 56;
  v6 = 1 << *(_BYTE *)(a2 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a2 + 56);
  v19 = (unint64_t)(v6 + 63) >> 6;
  v21 = a2;
  swift_bridgeObjectRetain();
  v9 = 0;
  v10 = 0;
  while (1)
  {
    if (v8)
    {
      v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_18;
    }
    if (__OFADD__(v10++, 1))
      goto LABEL_22;
    if (v10 >= v19)
      break;
    v15 = *(_QWORD *)(v20 + 8 * v10);
    if (!v15)
    {
      v16 = v10 + 1;
      if (v10 + 1 >= v19)
        break;
      v15 = *(_QWORD *)(v20 + 8 * v16);
      if (!v15)
      {
        while (1)
        {
          v10 = v16 + 1;
          if (__OFADD__(v16, 1))
            break;
          if (v10 >= v19)
            goto LABEL_20;
          v15 = *(_QWORD *)(v20 + 8 * v10);
          ++v16;
          if (v15)
            goto LABEL_17;
        }
        __break(1u);
LABEL_22:
        __break(1u);
        JUMPOUT(0x236483B40);
      }
      ++v10;
    }
LABEL_17:
    v8 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_18:
    v17 = *(_QWORD *)(*(_QWORD *)(v21 + 48) + 96 * v13 + 80);
    sub_2365B09E0();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_236487E58(v17);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_2365B008C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    switch(v17)
    {
      case 0uLL:
      case 1uLL:
      case 2uLL:
      case 3uLL:
        sub_2365B09F8();
        break;
      default:
        sub_2365B09F8();
        swift_bridgeObjectRetain();
        sub_2364830F0((uint64_t)v22, v17);
        sub_236487E68(v17);
        break;
    }
    sub_2365B0A04();
    v11 = sub_2365B0A34();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_236487E68(v17);
    v9 ^= v11;
  }
LABEL_20:
  swift_release();
  return sub_2365B09F8();
}

uint64_t sub_236483B50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)(a2 + 16);
  result = sub_2365B09F8();
  if (v4)
  {
    swift_retain();
    v6 = a2 + 120;
    do
    {
      v7 = *(_QWORD *)(v6 - 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_2365B008C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      switch(v7)
      {
        case 0uLL:
        case 1uLL:
        case 2uLL:
        case 3uLL:
          sub_2365B09F8();
          break;
        default:
          sub_2365B09F8();
          swift_bridgeObjectRetain();
          sub_2364830F0(a1, v7);
          sub_236487E68(v7);
          break;
      }
      v6 += 96;
      sub_2365B0A04();
      --v4;
    }
    while (v4);
    return swift_release();
  }
  return result;
}

void _s12AppleIDSetup11RepairErrorO2eeoiySbAC_ACtFZ_0(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_236483D34()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v23;
  uint64_t v24;

  if (v1)
  {
    v17 = v8;
    v18 = v4;
    *(_QWORD *)(v11 - 216) = v8;
    v19 = *(_QWORD *)(v11 - 208);
    v24 = v4;
    v20 = v0;
    v21 = v1;
    sub_236484E9C(v5, v17, v9, v18, v0, v1);
    sub_236484E9C(v2, v10, v6, v7, v19, v3);
    sub_236484C80(v2, v10, v6, v7, v19, v3);
    sub_236484C80(v5, *(_QWORD *)(v11 - 216), v9, v24, v20, v21);
    v13 = 0;
  }
  else
  {
    if (v2 == v5 && v10 == v8)
    {
      v12 = v2;
      v13 = 1;
    }
    else
    {
      v12 = v2;
      v14 = v0;
      v15 = sub_2365B08CC();
      v0 = v14;
      v13 = v15;
    }
    v23 = v0;
    sub_236484E9C(v5, v8, v9, v4, v0, 0);
    v16 = *(_QWORD *)(v11 - 208);
    sub_236484E9C(v12, v10, v6, v7, v16, 0);
    sub_236484C80(v12, v10, v6, v7, v16, 0);
    sub_236484C80(v5, v8, v9, v4, v23, 0);
  }
  return v13 & 1;
}

void _s12AppleIDSetup17MachRepairMessageO2eeoiySbAC_ACtFZ_0(__int128 *a1, __int128 *a2)
{
  char *v3;
  __int128 v4[8];
  __int128 v5[8];
  _OWORD v6[8];
  _OWORD v7[8];
  _OWORD v8[8];

  sub_236484B60(a1, v4);
  sub_236484B60(a2, v5);
  sub_236484B60(v4, v6);
  sub_236484B60(v5, v7);
  sub_236484B60(v4, v8);
  v3 = (char *)sub_2364845F8 + 4 * word_2365B53D0[sub_236484B90((uint64_t)v8)];
  __asm { BR              X10 }
}

uint64_t sub_2364845F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  _OWORD v5[8];
  _BYTE v6[128];
  __int128 v7[8];
  _BYTE v8[488];

  v1 = *(_QWORD *)((uint64_t (*)(uint64_t))nullsub_1)(v0 - 216);
  sub_236484B60(v7, v5);
  if (sub_236484B90((uint64_t)v5))
  {
    sub_236487E90((uint64_t)v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_236485B68);
    sub_236487E90((uint64_t)v6, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_236485B68);
    sub_236487EF4((uint64_t)v8);
    v3 = 0;
  }
  else
  {
    v2 = *(_QWORD *)((uint64_t (*)(_OWORD *))nullsub_1)(v5);
    sub_236487E90((uint64_t)v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_236485B68);
    sub_236487E90((uint64_t)v6, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_236485B68);
    v3 = _s12AppleIDSetup11RepairModelC2eeoiySbAC_ACtFZ_0(v1, v2);
    sub_236487EF4((uint64_t)v8);
  }
  return v3 & 1;
}

_OWORD *sub_236484B60(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[3];
  a2[2] = a1[2];
  a2[3] = v4;
  *a2 = v2;
  a2[1] = v3;
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  *(_OWORD *)((char *)a2 + 105) = *(__int128 *)((char *)a1 + 105);
  a2[5] = v6;
  a2[6] = v7;
  a2[4] = v5;
  return a2;
}

uint64_t sub_236484B90(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 120) <= 6u)
    return *(unsigned __int8 *)(a1 + 120);
  else
    return (*(_DWORD *)a1 + 7);
}

uint64_t sub_236484BB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 88);
  v3 = *(_QWORD *)(a1 + 96);
  v4 = *(_QWORD *)(a1 + 104);
  v5 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 120);
  v7 = *(_BYTE *)(a1 + 128);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_236484C6C(v2, v3, v4, v5, v8, v7);
  return a1;
}

uint64_t sub_236484C6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6 <= 0xFAu)
    return sub_236484C80(a1, a2, a3, a4, a5, a6);
  return a1;
}

uint64_t sub_236484C80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t result;

  switch(a6)
  {
    case 0:
    case 2:
      goto LABEL_2;
    case 1:
      swift_bridgeObjectRelease();
LABEL_2:
      result = swift_bridgeObjectRelease();
      break;
    case 3:
      result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_236484CE0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  switch(a16)
  {
    case 0:
    case 2:
    case 5:
      goto LABEL_5;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return sub_236484E1C(a12, a13);
    case 3:
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_5;
    case 4:
      swift_release();
LABEL_5:
      result = swift_release();
      break;
    case 6:
      result = sub_236484C80(result, a2, a3, a4, a5, a6);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_236484E1C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

unint64_t sub_236484E58()
{
  unint64_t result;

  result = qword_2563E5CE8;
  if (!qword_2563E5CE8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B699C, &type metadata for MachRepairMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5CE8);
  }
  return result;
}

uint64_t sub_236484E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t result;

  switch(a6)
  {
    case 0:
    case 2:
      goto LABEL_2;
    case 1:
      swift_bridgeObjectRetain();
LABEL_2:
      result = swift_bridgeObjectRetain();
      break;
    case 3:
      result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_236484EFC()
{
  unint64_t result;

  result = qword_2563E5CF0;
  if (!qword_2563E5CF0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B694C, &type metadata for MachRepairMessage.FailureCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5CF0);
  }
  return result;
}

unint64_t sub_236484F40()
{
  unint64_t result;

  result = qword_2563E5CF8;
  if (!qword_2563E5CF8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairError, &type metadata for RepairError);
    atomic_store(result, (unint64_t *)&qword_2563E5CF8);
  }
  return result;
}

unint64_t sub_236484F84()
{
  unint64_t result;

  result = qword_2563E5D00;
  if (!qword_2563E5D00)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B68FC, &type metadata for MachRepairMessage.ReceiptCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5D00);
  }
  return result;
}

unint64_t sub_236484FC8()
{
  unint64_t result;

  result = qword_2563E5D08;
  if (!qword_2563E5D08)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B68AC, &type metadata for MachRepairMessage.CoordinatedModelResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5D08);
  }
  return result;
}

unint64_t sub_23648500C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_2563E5D18;
  if (!qword_2563E5D18)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2563E5D10);
    v2 = sub_23644F0B8(&qword_2563E5D20, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for <A> _Coordinated<A>.ValueUpdate.Response, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2563E5D18);
  }
  return result;
}

unint64_t sub_236485088()
{
  unint64_t result;

  result = qword_2563E5D28;
  if (!qword_2563E5D28)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B685C, &type metadata for MachRepairMessage.CoordinatedModelUpdateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5D28);
  }
  return result;
}

unint64_t sub_2364850CC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_2563E5D38;
  if (!qword_2563E5D38)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2563E5D30);
    v2 = sub_23644F0B8(&qword_2563E5D20, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for <A> _Coordinated<A>.ValueUpdate, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2563E5D38);
  }
  return result;
}

unint64_t sub_236485148()
{
  unint64_t result;

  result = qword_2563E5D40;
  if (!qword_2563E5D40)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B680C, &type metadata for MachRepairMessage.SymptomReportCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5D40);
  }
  return result;
}

unint64_t sub_23648518C()
{
  unint64_t result;

  result = qword_2563E5D48;
  if (!qword_2563E5D48)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for SymptomReport, &type metadata for SymptomReport);
    atomic_store(result, (unint64_t *)&qword_2563E5D48);
  }
  return result;
}

unint64_t sub_2364851D0()
{
  unint64_t result;

  result = qword_2563E5D50;
  if (!qword_2563E5D50)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B67BC, &type metadata for MachRepairMessage.GenerateSymptomReportCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5D50);
  }
  return result;
}

uint64_t sub_236485214(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_retain();
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_236485250()
{
  unint64_t result;

  result = qword_2563E5D58;
  if (!qword_2563E5D58)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B676C, &type metadata for MachRepairMessage.RepairReportCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5D58);
  }
  return result;
}

unint64_t sub_236485294()
{
  unint64_t result;

  result = qword_2563E5D60;
  if (!qword_2563E5D60)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairReport, &type metadata for RepairReport);
    atomic_store(result, (unint64_t *)&qword_2563E5D60);
  }
  return result;
}

unint64_t sub_2364852D8()
{
  unint64_t result;

  result = qword_2563E5D68;
  if (!qword_2563E5D68)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B671C, &type metadata for MachRepairMessage.RepairCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5D68);
  }
  return result;
}

unint64_t sub_23648531C()
{
  unint64_t result;

  result = qword_2563E5DB8;
  if (!qword_2563E5DB8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairError, &type metadata for RepairError);
    atomic_store(result, (unint64_t *)&qword_2563E5DB8);
  }
  return result;
}

uint64_t sub_236485360(uint64_t result)
{
  *(_BYTE *)(result + 120) = 6;
  return result;
}

double sub_23648536C(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 120) = 7;
  return result;
}

unint64_t sub_236485390()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_2563E5DC0;
  if (!qword_2563E5DC0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2563E5D10);
    v2 = sub_23644F0B8(&qword_2563E5DC8, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for <A> _Coordinated<A>.ValueUpdate.Response, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2563E5DC0);
  }
  return result;
}

uint64_t sub_23648540C(uint64_t result)
{
  *(_BYTE *)(result + 120) = 5;
  return result;
}

unint64_t sub_236485418()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_2563E5DD0;
  if (!qword_2563E5DD0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2563E5D30);
    v2 = sub_23644F0B8(&qword_2563E5DC8, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for <A> _Coordinated<A>.ValueUpdate, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2563E5DD0);
  }
  return result;
}

uint64_t sub_236485494(uint64_t result)
{
  *(_BYTE *)(result + 120) = 4;
  return result;
}

unint64_t sub_2364854A0()
{
  unint64_t result;

  result = qword_2563E5DD8;
  if (!qword_2563E5DD8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for SymptomReport, &type metadata for SymptomReport);
    atomic_store(result, (unint64_t *)&qword_2563E5DD8);
  }
  return result;
}

uint64_t sub_2364854E4(uint64_t result)
{
  *(_BYTE *)(result + 120) = 3;
  return result;
}

uint64_t sub_2364854F0(uint64_t result)
{
  *(_BYTE *)(result + 120) = 2;
  return result;
}

unint64_t sub_2364854FC()
{
  unint64_t result;

  result = qword_2563E5DE0;
  if (!qword_2563E5DE0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairReport, &type metadata for RepairReport);
    atomic_store(result, (unint64_t *)&qword_2563E5DE0);
  }
  return result;
}

uint64_t sub_236485540(uint64_t result)
{
  *(_BYTE *)(result + 120) = 1;
  return result;
}

uint64_t sub_23648554C(uint64_t result)
{
  *(_BYTE *)(result + 120) = 0;
  return result;
}

unint64_t sub_236485554()
{
  unint64_t result;

  result = qword_2563E5E30;
  if (!qword_2563E5E30)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B66CC, &type metadata for RepairError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5E30);
  }
  return result;
}

unint64_t sub_236485598()
{
  unint64_t result;

  result = qword_2563E5E38;
  if (!qword_2563E5E38)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B667C, &type metadata for RepairError.NestedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5E38);
  }
  return result;
}

unint64_t sub_2364855DC()
{
  unint64_t result;

  result = qword_2563E5E40;
  if (!qword_2563E5E40)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B662C, &type metadata for RepairError.BleClientInterceptedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5E40);
  }
  return result;
}

unint64_t sub_236485620()
{
  unint64_t result;

  result = qword_2563E5E48;
  if (!qword_2563E5E48)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B65DC, &type metadata for RepairError.MissingRequiredAccountsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5E48);
  }
  return result;
}

unint64_t sub_236485664()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_2563E5E58;
  if (!qword_2563E5E58)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2563E5E50);
    v2 = sub_23644F0B8(&qword_2563E4630, (uint64_t (*)(uint64_t))type metadata accessor for AIDAServiceType, (uint64_t)&protocol conformance descriptor for AIDAServiceType);
    result = MEMORY[0x23B7F5164](MEMORY[0x24BEE1700], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2563E5E58);
  }
  return result;
}

unint64_t sub_2364856E0()
{
  unint64_t result;

  result = qword_2563E5E60;
  if (!qword_2563E5E60)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B658C, &type metadata for RepairError.GenericCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5E60);
  }
  return result;
}

unint64_t sub_236485724()
{
  unint64_t result;

  result = qword_2563E5E68;
  if (!qword_2563E5E68)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B653C, &type metadata for RepairError.UserCancelledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5E68);
  }
  return result;
}

unint64_t sub_236485768()
{
  unint64_t result;

  result = qword_2563E5E70;
  if (!qword_2563E5E70)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B64EC, &type metadata for RepairError.CancelledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5E70);
  }
  return result;
}

unint64_t sub_2364857AC()
{
  unint64_t result;

  result = qword_2563E5E78;
  if (!qword_2563E5E78)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B649C, &type metadata for RepairError.InvalidContextCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5E78);
  }
  return result;
}

unint64_t sub_2364857F0()
{
  unint64_t result;

  result = qword_2563E5E80;
  if (!qword_2563E5E80)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B644C, &type metadata for RepairError.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5E80);
  }
  return result;
}

uint64_t sub_236485834()
{
  uint64_t v0;

  sub_23645DCB0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  sub_23645DCB0(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_BYTE *)(v0 + 120));
  return swift_deallocObject();
}

unint64_t sub_236485878()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_2563E5ED0;
  if (!qword_2563E5ED0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2563E5E50);
    v2 = sub_23644F0B8(&qword_2563E4660, (uint64_t (*)(uint64_t))type metadata accessor for AIDAServiceType, (uint64_t)&protocol conformance descriptor for AIDAServiceType);
    result = MEMORY[0x23B7F5164](MEMORY[0x24BEE1720], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2563E5ED0);
  }
  return result;
}

unint64_t sub_2364858F4()
{
  unint64_t result;

  result = qword_2563E5EE0;
  if (!qword_2563E5EE0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for SetupError, &type metadata for SetupError);
    atomic_store(result, (unint64_t *)&qword_2563E5EE0);
  }
  return result;
}

uint64_t sub_236485938(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_23645EB14(a1, a2, a3, (uint64_t (*)(void))sub_236485954, (uint64_t (*)(void))sub_236485998, (uint64_t (*)(void))sub_2364859DC);
}

unint64_t sub_236485954()
{
  unint64_t result;

  result = qword_2563E5EE8;
  if (!qword_2563E5EE8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for MachRepairMessage, &type metadata for MachRepairMessage);
    atomic_store(result, (unint64_t *)&qword_2563E5EE8);
  }
  return result;
}

unint64_t sub_236485998()
{
  unint64_t result;

  result = qword_2563E5EF0;
  if (!qword_2563E5EF0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for MachRepairMessage, &type metadata for MachRepairMessage);
    atomic_store(result, (unint64_t *)&qword_2563E5EF0);
  }
  return result;
}

unint64_t sub_2364859DC()
{
  unint64_t result;

  result = qword_2563E5EF8;
  if (!qword_2563E5EF8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for MachRepairMessage, &type metadata for MachRepairMessage);
    atomic_store(result, (unint64_t *)&qword_2563E5EF8);
  }
  return result;
}

unint64_t sub_236485A24()
{
  unint64_t result;

  result = qword_2563E5F00;
  if (!qword_2563E5F00)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for MachRepairMessage, &type metadata for MachRepairMessage);
    atomic_store(result, (unint64_t *)&qword_2563E5F00);
  }
  return result;
}

uint64_t sub_236485A68(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_23645EB14(a1, a2, a3, (uint64_t (*)(void))sub_23648531C, (uint64_t (*)(void))sub_236484F40, (uint64_t (*)(void))sub_236485A84);
}

unint64_t sub_236485A84()
{
  unint64_t result;

  result = qword_2563E5F08;
  if (!qword_2563E5F08)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairError, &type metadata for RepairError);
    atomic_store(result, (unint64_t *)&qword_2563E5F08);
  }
  return result;
}

unint64_t sub_236485ACC()
{
  unint64_t result;

  result = qword_2563E5F10;
  if (!qword_2563E5F10)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairError, &type metadata for RepairError);
    atomic_store(result, (unint64_t *)&qword_2563E5F10);
  }
  return result;
}

unint64_t sub_236485B14()
{
  unint64_t result;

  result = qword_2563E5F18;
  if (!qword_2563E5F18)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairError, &type metadata for RepairError);
    atomic_store(result, (unint64_t *)&qword_2563E5F18);
  }
  return result;
}

ValueMetadata *type metadata accessor for Constants.MachServiceNames()
{
  return &type metadata for Constants.MachServiceNames;
}

uint64_t sub_236485B68(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  switch(a16)
  {
    case 0:
    case 2:
    case 5:
      goto LABEL_5;
    case 1:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      result = sub_236485214(a12, a13);
      break;
    case 3:
      swift_retain();
      swift_retain();
      result = swift_bridgeObjectRetain();
      break;
    case 4:
      swift_retain();
LABEL_5:
      result = swift_retain();
      break;
    case 6:
      result = sub_236484E9C(result, a2, a3, a4, a5, a6);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for MachRepairMessage(uint64_t a1)
{
  return sub_236484CE0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_BYTE *)(a1 + 120));
}

uint64_t initializeWithCopy for MachRepairMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_BYTE *)(a2 + 120);
  sub_236485B68(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18, v19);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v17;
  *(_QWORD *)(a1 + 112) = v18;
  *(_BYTE *)(a1 + 120) = v19;
  return a1;
}

uint64_t assignWithCopy for MachRepairMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v26 = *(_QWORD *)(a2 + 72);
  v27 = *(_QWORD *)(a2 + 80);
  v28 = *(_QWORD *)(a2 + 88);
  v29 = *(_QWORD *)(a2 + 96);
  v30 = *(_QWORD *)(a2 + 104);
  v31 = *(_QWORD *)(a2 + 112);
  v32 = *(_BYTE *)(a2 + 120);
  sub_236485B68(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v26, v27, v28, v29, v30, v31, v32);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_QWORD *)(a1 + 112);
  v24 = *(_BYTE *)(a1 + 120);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v26;
  *(_QWORD *)(a1 + 80) = v27;
  *(_QWORD *)(a1 + 88) = v28;
  *(_QWORD *)(a1 + 96) = v29;
  *(_QWORD *)(a1 + 104) = v30;
  *(_QWORD *)(a1 + 112) = v31;
  *(_BYTE *)(a1 + 120) = v32;
  sub_236484CE0(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, v24);
  return a1;
}

__n128 __swift_memcpy121_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_OWORD *)(a1 + 105) = *(__int128 *)((char *)a2 + 105);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for MachRepairMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v3 = *(_QWORD *)(a2 + 112);
  v4 = *(_BYTE *)(a2 + 120);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_OWORD *)(a1 + 64);
  v14 = *(_OWORD *)(a1 + 80);
  v15 = *(_OWORD *)(a1 + 96);
  v16 = *(_QWORD *)(a1 + 112);
  v17 = *(_BYTE *)(a1 + 120);
  v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v18;
  v19 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v19;
  v20 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v20;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = v3;
  *(_BYTE *)(a1 + 120) = v4;
  sub_236484CE0(v5, v7, v6, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for MachRepairMessage(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF9 && *(_BYTE *)(a1 + 121))
    return (*(_DWORD *)a1 + 249);
  v3 = *(unsigned __int8 *)(a1 + 120);
  if (v3 <= 7)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MachRepairMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 120) = 0;
    *(_QWORD *)result = a2 - 249;
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 121) = 1;
  }
  else
  {
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 121) = 0;
    if (a2)
      *(_BYTE *)(result + 120) = -(char)a2;
  }
  return result;
}

uint64_t sub_2364860B0(uint64_t result, unsigned int a2)
{
  if (a2 >= 7)
  {
    *(_QWORD *)result = a2 - 7;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    LOBYTE(a2) = 7;
    *(_OWORD *)(result + 104) = 0u;
  }
  *(_BYTE *)(result + 120) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MachRepairMessage()
{
  return &type metadata for MachRepairMessage;
}

uint64_t destroy for RepairError(uint64_t a1)
{
  return sub_236484C80(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

uint64_t initializeWithCopy for RepairError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  sub_236484E9C(*(_QWORD *)a2, v4, v5, v6, v7, v8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  return a1;
}

uint64_t assignWithCopy for RepairError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  sub_236484E9C(*(_QWORD *)a2, v4, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  v14 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v8;
  sub_236484C80(v9, v10, v11, v12, v13, v14);
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for RepairError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 32) = v3;
  v11 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v4;
  sub_236484C80(v5, v7, v6, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for RepairError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RepairError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t sub_236486308(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 40) <= 3u)
    return *(unsigned __int8 *)(a1 + 40);
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t sub_236486320(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(_QWORD *)result = a2 - 4;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    LOBYTE(a2) = 4;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for RepairError()
{
  return &type metadata for RepairError;
}

ValueMetadata *type metadata accessor for RepairError.CodingKeys()
{
  return &type metadata for RepairError.CodingKeys;
}

ValueMetadata *type metadata accessor for RepairError.UnknownCodingKeys()
{
  return &type metadata for RepairError.UnknownCodingKeys;
}

ValueMetadata *type metadata accessor for RepairError.InvalidContextCodingKeys()
{
  return &type metadata for RepairError.InvalidContextCodingKeys;
}

ValueMetadata *type metadata accessor for RepairError.CancelledCodingKeys()
{
  return &type metadata for RepairError.CancelledCodingKeys;
}

ValueMetadata *type metadata accessor for RepairError.UserCancelledCodingKeys()
{
  return &type metadata for RepairError.UserCancelledCodingKeys;
}

uint64_t storeEnumTagSinglePayload for RepairError.GenericCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2364863FC + 4 * byte_2365B5403[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_236486430 + 4 * byte_2365B53FE[v4]))();
}

uint64_t sub_236486430(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_236486438(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x236486440);
  return result;
}

uint64_t sub_23648644C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x236486454);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_236486458(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236486460(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RepairError.GenericCodingKeys()
{
  return &type metadata for RepairError.GenericCodingKeys;
}

ValueMetadata *type metadata accessor for RepairError.MissingRequiredAccountsCodingKeys()
{
  return &type metadata for RepairError.MissingRequiredAccountsCodingKeys;
}

ValueMetadata *type metadata accessor for RepairError.BleClientInterceptedCodingKeys()
{
  return &type metadata for RepairError.BleClientInterceptedCodingKeys;
}

uint64_t storeEnumTagSinglePayload for RepairError.NestedCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2364864E8 + 4 * byte_2365B540D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23648651C + 4 * byte_2365B5408[v4]))();
}

uint64_t sub_23648651C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_236486524(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23648652CLL);
  return result;
}

uint64_t sub_236486538(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x236486540);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_236486544(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23648654C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RepairError.NestedCodingKeys()
{
  return &type metadata for RepairError.NestedCodingKeys;
}

uint64_t _s12AppleIDSetup11RepairErrorO10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_2364865B4 + 4 * byte_2365B5417[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_2364865E8 + 4 * byte_2365B5412[v4]))();
}

uint64_t sub_2364865E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364865F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2364865F8);
  return result;
}

uint64_t sub_236486604(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23648660CLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_236486610(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236486618(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MachRepairMessage.CodingKeys()
{
  return &type metadata for MachRepairMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for MachRepairMessage.RepairCodingKeys()
{
  return &type metadata for MachRepairMessage.RepairCodingKeys;
}

ValueMetadata *type metadata accessor for MachRepairMessage.RepairReportCodingKeys()
{
  return &type metadata for MachRepairMessage.RepairReportCodingKeys;
}

ValueMetadata *type metadata accessor for MachRepairMessage.GenerateSymptomReportCodingKeys()
{
  return &type metadata for MachRepairMessage.GenerateSymptomReportCodingKeys;
}

ValueMetadata *type metadata accessor for MachRepairMessage.SymptomReportCodingKeys()
{
  return &type metadata for MachRepairMessage.SymptomReportCodingKeys;
}

ValueMetadata *type metadata accessor for MachRepairMessage.CoordinatedModelUpdateCodingKeys()
{
  return &type metadata for MachRepairMessage.CoordinatedModelUpdateCodingKeys;
}

ValueMetadata *type metadata accessor for MachRepairMessage.CoordinatedModelResponseCodingKeys()
{
  return &type metadata for MachRepairMessage.CoordinatedModelResponseCodingKeys;
}

ValueMetadata *type metadata accessor for MachRepairMessage.ReceiptCodingKeys()
{
  return &type metadata for MachRepairMessage.ReceiptCodingKeys;
}

uint64_t _s12AppleIDSetup11RepairErrorO24InvalidContextCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2364866E4 + 4 * byte_2365B541C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_236486704 + 4 * byte_2365B5421[v4]))();
}

_BYTE *sub_2364866E4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_236486704(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23648670C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_236486714(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23648671C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_236486724(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MachRepairMessage.FailureCodingKeys()
{
  return &type metadata for MachRepairMessage.FailureCodingKeys;
}

unint64_t sub_236486744()
{
  unint64_t result;

  result = qword_2563E5F20;
  if (!qword_2563E5F20)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B59F4, &type metadata for MachRepairMessage.FailureCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5F20);
  }
  return result;
}

unint64_t sub_23648678C()
{
  unint64_t result;

  result = qword_2563E5F28;
  if (!qword_2563E5F28)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B5AFC, &type metadata for MachRepairMessage.CoordinatedModelResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5F28);
  }
  return result;
}

unint64_t sub_2364867D4()
{
  unint64_t result;

  result = qword_2563E5F30;
  if (!qword_2563E5F30)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B5BB4, &type metadata for MachRepairMessage.CoordinatedModelUpdateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5F30);
  }
  return result;
}

unint64_t sub_23648681C()
{
  unint64_t result;

  result = qword_2563E5F38;
  if (!qword_2563E5F38)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B5C6C, &type metadata for MachRepairMessage.SymptomReportCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5F38);
  }
  return result;
}

unint64_t sub_236486864()
{
  unint64_t result;

  result = qword_2563E5F40;
  if (!qword_2563E5F40)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B5D24, &type metadata for MachRepairMessage.GenerateSymptomReportCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5F40);
  }
  return result;
}

unint64_t sub_2364868AC()
{
  unint64_t result;

  result = qword_2563E5F48;
  if (!qword_2563E5F48)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B5DDC, &type metadata for MachRepairMessage.RepairReportCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5F48);
  }
  return result;
}

unint64_t sub_2364868F4()
{
  unint64_t result;

  result = qword_2563E5F50;
  if (!qword_2563E5F50)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B5E94, &type metadata for MachRepairMessage.RepairCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5F50);
  }
  return result;
}

unint64_t sub_23648693C()
{
  unint64_t result;

  result = qword_2563E5F58;
  if (!qword_2563E5F58)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B5F4C, &type metadata for MachRepairMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5F58);
  }
  return result;
}

unint64_t sub_236486984()
{
  unint64_t result;

  result = qword_2563E5F60;
  if (!qword_2563E5F60)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B6004, &type metadata for RepairError.NestedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5F60);
  }
  return result;
}

unint64_t sub_2364869CC()
{
  unint64_t result;

  result = qword_2563E5F68;
  if (!qword_2563E5F68)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B610C, &type metadata for RepairError.MissingRequiredAccountsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5F68);
  }
  return result;
}

unint64_t sub_236486A14()
{
  unint64_t result;

  result = qword_2563E5F70;
  if (!qword_2563E5F70)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B61C4, &type metadata for RepairError.GenericCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5F70);
  }
  return result;
}

unint64_t sub_236486A5C()
{
  unint64_t result;

  result = qword_2563E5F78;
  if (!qword_2563E5F78)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B631C, &type metadata for RepairError.InvalidContextCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5F78);
  }
  return result;
}

unint64_t sub_236486AA4()
{
  unint64_t result;

  result = qword_2563E5F80;
  if (!qword_2563E5F80)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B6424, &type metadata for RepairError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5F80);
  }
  return result;
}

unint64_t sub_236486AEC()
{
  unint64_t result;

  result = qword_2563E5F88;
  if (!qword_2563E5F88)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B6344, &type metadata for RepairError.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5F88);
  }
  return result;
}

unint64_t sub_236486B34()
{
  unint64_t result;

  result = qword_2563E5F90;
  if (!qword_2563E5F90)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B636C, &type metadata for RepairError.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5F90);
  }
  return result;
}

unint64_t sub_236486B7C()
{
  unint64_t result;

  result = qword_2563E5F98;
  if (!qword_2563E5F98)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B628C, &type metadata for RepairError.InvalidContextCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5F98);
  }
  return result;
}

unint64_t sub_236486BC4()
{
  unint64_t result;

  result = qword_2563E5FA0;
  if (!qword_2563E5FA0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B62B4, &type metadata for RepairError.InvalidContextCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5FA0);
  }
  return result;
}

unint64_t sub_236486C0C()
{
  unint64_t result;

  result = qword_2563E5FA8;
  if (!qword_2563E5FA8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B623C, &type metadata for RepairError.CancelledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5FA8);
  }
  return result;
}

unint64_t sub_236486C54()
{
  unint64_t result;

  result = qword_2563E5FB0;
  if (!qword_2563E5FB0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B6264, &type metadata for RepairError.CancelledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5FB0);
  }
  return result;
}

unint64_t sub_236486C9C()
{
  unint64_t result;

  result = qword_2563E5FB8;
  if (!qword_2563E5FB8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B61EC, &type metadata for RepairError.UserCancelledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5FB8);
  }
  return result;
}

unint64_t sub_236486CE4()
{
  unint64_t result;

  result = qword_2563E5FC0;
  if (!qword_2563E5FC0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B6214, &type metadata for RepairError.UserCancelledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5FC0);
  }
  return result;
}

unint64_t sub_236486D2C()
{
  unint64_t result;

  result = qword_2563E5FC8;
  if (!qword_2563E5FC8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B6134, &type metadata for RepairError.GenericCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5FC8);
  }
  return result;
}

unint64_t sub_236486D74()
{
  unint64_t result;

  result = qword_2563E5FD0;
  if (!qword_2563E5FD0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B615C, &type metadata for RepairError.GenericCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5FD0);
  }
  return result;
}

unint64_t sub_236486DBC()
{
  unint64_t result;

  result = qword_2563E5FD8;
  if (!qword_2563E5FD8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B607C, &type metadata for RepairError.MissingRequiredAccountsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5FD8);
  }
  return result;
}

unint64_t sub_236486E04()
{
  unint64_t result;

  result = qword_2563E5FE0;
  if (!qword_2563E5FE0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B60A4, &type metadata for RepairError.MissingRequiredAccountsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5FE0);
  }
  return result;
}

unint64_t sub_236486E4C()
{
  unint64_t result;

  result = qword_2563E5FE8;
  if (!qword_2563E5FE8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B602C, &type metadata for RepairError.BleClientInterceptedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5FE8);
  }
  return result;
}

unint64_t sub_236486E94()
{
  unint64_t result;

  result = qword_2563E5FF0;
  if (!qword_2563E5FF0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B6054, &type metadata for RepairError.BleClientInterceptedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5FF0);
  }
  return result;
}

unint64_t sub_236486EDC()
{
  unint64_t result;

  result = qword_2563E5FF8;
  if (!qword_2563E5FF8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B5F74, &type metadata for RepairError.NestedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E5FF8);
  }
  return result;
}

unint64_t sub_236486F24()
{
  unint64_t result;

  result = qword_2563E6000;
  if (!qword_2563E6000)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B5F9C, &type metadata for RepairError.NestedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6000);
  }
  return result;
}

unint64_t sub_236486F6C()
{
  unint64_t result;

  result = qword_2563E6008;
  if (!qword_2563E6008)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B6394, &type metadata for RepairError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6008);
  }
  return result;
}

unint64_t sub_236486FB4()
{
  unint64_t result;

  result = qword_2563E6010;
  if (!qword_2563E6010)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B63BC, &type metadata for RepairError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6010);
  }
  return result;
}

unint64_t sub_236486FFC()
{
  unint64_t result;

  result = qword_2563E6018;
  if (!qword_2563E6018)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B5E04, &type metadata for MachRepairMessage.RepairCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6018);
  }
  return result;
}

unint64_t sub_236487044()
{
  unint64_t result;

  result = qword_2563E6020;
  if (!qword_2563E6020)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B5E2C, &type metadata for MachRepairMessage.RepairCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6020);
  }
  return result;
}

unint64_t sub_23648708C()
{
  unint64_t result;

  result = qword_2563E6028;
  if (!qword_2563E6028)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B5D4C, &type metadata for MachRepairMessage.RepairReportCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6028);
  }
  return result;
}

unint64_t sub_2364870D4()
{
  unint64_t result;

  result = qword_2563E6030;
  if (!qword_2563E6030)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B5D74, &type metadata for MachRepairMessage.RepairReportCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6030);
  }
  return result;
}

unint64_t sub_23648711C()
{
  unint64_t result;

  result = qword_2563E6038;
  if (!qword_2563E6038)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B5C94, &type metadata for MachRepairMessage.GenerateSymptomReportCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6038);
  }
  return result;
}

unint64_t sub_236487164()
{
  unint64_t result;

  result = qword_2563E6040;
  if (!qword_2563E6040)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B5CBC, &type metadata for MachRepairMessage.GenerateSymptomReportCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6040);
  }
  return result;
}

unint64_t sub_2364871AC()
{
  unint64_t result;

  result = qword_2563E6048;
  if (!qword_2563E6048)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B5BDC, &type metadata for MachRepairMessage.SymptomReportCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6048);
  }
  return result;
}

unint64_t sub_2364871F4()
{
  unint64_t result;

  result = qword_2563E6050;
  if (!qword_2563E6050)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B5C04, &type metadata for MachRepairMessage.SymptomReportCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6050);
  }
  return result;
}

unint64_t sub_23648723C()
{
  unint64_t result;

  result = qword_2563E6058;
  if (!qword_2563E6058)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B5B24, &type metadata for MachRepairMessage.CoordinatedModelUpdateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6058);
  }
  return result;
}

unint64_t sub_236487284()
{
  unint64_t result;

  result = qword_2563E6060;
  if (!qword_2563E6060)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B5B4C, &type metadata for MachRepairMessage.CoordinatedModelUpdateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6060);
  }
  return result;
}

unint64_t sub_2364872CC()
{
  unint64_t result;

  result = qword_2563E6068;
  if (!qword_2563E6068)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B5A6C, &type metadata for MachRepairMessage.CoordinatedModelResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6068);
  }
  return result;
}

unint64_t sub_236487314()
{
  unint64_t result;

  result = qword_2563E6070;
  if (!qword_2563E6070)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B5A94, &type metadata for MachRepairMessage.CoordinatedModelResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6070);
  }
  return result;
}

unint64_t sub_23648735C()
{
  unint64_t result;

  result = qword_2563E6078;
  if (!qword_2563E6078)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B5A1C, &type metadata for MachRepairMessage.ReceiptCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6078);
  }
  return result;
}

unint64_t sub_2364873A4()
{
  unint64_t result;

  result = qword_2563E6080;
  if (!qword_2563E6080)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B5A44, &type metadata for MachRepairMessage.ReceiptCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6080);
  }
  return result;
}

unint64_t sub_2364873EC()
{
  unint64_t result;

  result = qword_2563E6088;
  if (!qword_2563E6088)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B5964, &type metadata for MachRepairMessage.FailureCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6088);
  }
  return result;
}

unint64_t sub_236487434()
{
  unint64_t result;

  result = qword_2563E6090;
  if (!qword_2563E6090)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B598C, &type metadata for MachRepairMessage.FailureCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6090);
  }
  return result;
}

unint64_t sub_23648747C()
{
  unint64_t result;

  result = qword_2563E6098;
  if (!qword_2563E6098)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B5EBC, &type metadata for MachRepairMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6098);
  }
  return result;
}

unint64_t sub_2364874C4()
{
  unint64_t result;

  result = qword_2563E60A0;
  if (!qword_2563E60A0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B5EE4, &type metadata for MachRepairMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E60A0);
  }
  return result;
}

uint64_t sub_236487508(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x726961706572 && a2 == 0xE600000000000000;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6552726961706572 && a2 == 0xEC00000074726F70 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000002365CBA70 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x526D6F74706D7973 && a2 == 0xED000074726F7065 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000002365CBA90 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000002365CBAB0 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x74706965636572 && a2 == 0xE700000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6572756C696166 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_23648786C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E776F6E6B6E75 && a2 == 0xE700000000000000;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4364696C61766E69 && a2 == 0xEE00747865746E6FLL || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C6C65636E6163 && a2 == 0xE900000000000064 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x636E614372657375 && a2 == 0xED000064656C6C65 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x636972656E6567 && a2 == 0xE700000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000002365CBAD0 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000002365CBAF0 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x64657473656ELL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_236487BF0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E69616D6F64 && a2 == 0xE600000000000000;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701080931 && a2 == 0xE400000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000002365CBB10)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

unint64_t sub_236487D28()
{
  unint64_t result;

  result = qword_2563E60A8;
  if (!qword_2563E60A8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairError, &type metadata for RepairError);
    atomic_store(result, (unint64_t *)&qword_2563E60A8);
  }
  return result;
}

unint64_t sub_236487D74()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_2563E5150;
  if (!qword_2563E5150)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2563E5138);
    v2 = MEMORY[0x24BEE4578];
    result = MEMORY[0x23B7F5164](MEMORY[0x24BDFC410], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2563E5150);
  }
  return result;
}

uint64_t sub_236487DD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for IdMSAccount();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_236487E14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for IdMSAccount();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_236487E58(unint64_t result)
{
  if (result >= 4)
    return swift_bridgeObjectRetain();
  return result;
}

unint64_t sub_236487E68(unint64_t result)
{
  if (result >= 4)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_236487E78()
{
  uint64_t v0;

  return sub_236567020(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_236487E90(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 120);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), v4);
  return a1;
}

uint64_t sub_236487EF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 136);
  v15 = *(_QWORD *)(a1 + 128);
  v3 = *(_QWORD *)(a1 + 144);
  v4 = *(_QWORD *)(a1 + 152);
  v5 = *(_QWORD *)(a1 + 160);
  v6 = *(_QWORD *)(a1 + 168);
  v7 = *(_QWORD *)(a1 + 176);
  v8 = *(_QWORD *)(a1 + 184);
  v13 = *(_OWORD *)(a1 + 208);
  v14 = *(_OWORD *)(a1 + 192);
  v12 = *(_OWORD *)(a1 + 224);
  v9 = *(_QWORD *)(a1 + 240);
  v10 = *(_BYTE *)(a1 + 248);
  sub_236484CE0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_BYTE *)(a1 + 120));
  sub_236484CE0(v15, v2, v3, v4, v5, v6, v7, v8, v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v9, v10);
  return a1;
}

unint64_t static AISLogger.subsystem.getter()
{
  return 0xD000000000000016;
}

uint64_t sub_236488000(uint64_t a1)
{
  return sub_2364881D8(a1, qword_2542A79C0);
}

uint64_t static AISLogger.common.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_236488070(&qword_2542A79D8, (uint64_t)qword_2542A79C0, a1);
}

uint64_t sub_236488038(uint64_t a1)
{
  return sub_2364881D8(a1, qword_2542A79A8);
}

uint64_t static AISLogger.daemon.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_236488070(&qword_2542A79A0, (uint64_t)qword_2542A79A8, a1);
}

uint64_t sub_236488070@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = sub_2365AFC00();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t sub_2364880D8(uint64_t a1)
{
  return sub_2364881D8(a1, qword_2563E60C0);
}

uint64_t static AISLogger.xpc.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_236488070(&qword_2563E42C8, (uint64_t)qword_2563E60C0, a1);
}

uint64_t sub_23648810C(uint64_t a1)
{
  return sub_2364881D8(a1, qword_2563E60D8);
}

uint64_t static AISLogger.setup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_236488070(&qword_2563E42D0, (uint64_t)qword_2563E60D8, a1);
}

uint64_t sub_236488144(uint64_t a1)
{
  return sub_2364881D8(a1, qword_2563E60F0);
}

uint64_t static AISLogger.repair.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_236488070(&qword_2563E42D8, (uint64_t)qword_2563E60F0, a1);
}

uint64_t sub_23648817C(uint64_t a1)
{
  return sub_2364881D8(a1, qword_2563E6108);
}

uint64_t static AISLogger.signpost.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_236488070(&qword_2563E42E0, (uint64_t)qword_2563E6108, a1);
}

uint64_t sub_2364881B8(uint64_t a1)
{
  return sub_2364881D8(a1, qword_2563E6120);
}

uint64_t sub_2364881D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_2365AFC00();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return sub_2365AFBF4();
}

uint64_t static AISLogger.signOut.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_236488070(&qword_2563E42E8, (uint64_t)qword_2563E6120, a1);
}

uint64_t RedactedValue.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t RedactedValue.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*RedactedValue.wrappedValue.modify())()
{
  return nullsub_1;
}

uint64_t RedactedValue.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t RedactedValue.description.getter()
{
  return 0x657463616465723CLL;
}

uint64_t RedactedValue.debugDescription.getter()
{
  return sub_2364885EC();
}

uint64_t sub_2364882E8()
{
  return 0x657463616465723CLL;
}

uint64_t sub_236488304()
{
  return sub_2364885EC();
}

uint64_t OSActivity.__allocating_init(_:)(char *a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = swift_allocObject();
  OSActivity.init(_:)(a1, v6, a3);
  return v5;
}

uint64_t OSActivity.init(_:)(char *a1, uint64_t a2, char a3)
{
  int v3;
  uint64_t v4;
  NSObject *v6;
  char *v7;
  unsigned int v8;
  unsigned int v9;
  NSObject *v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  char description[8];

  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  if ((a3 & 1) != 0)
  {
    if ((unint64_t)a1 >> 32)
    {
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
    v8 = a1 >> 11;
    if (a1 >> 11 == 27)
    {
      __break(1u);
    }
    else
    {
      v8 = a1 >> 16;
      if (a1 >> 16 > 0x10)
      {
        __break(1u);
      }
      else if ((a1 & 0xFFFFFF80) == 0)
      {
        if (a1 > 0xFF)
        {
          __break(1u);
          goto LABEL_21;
        }
        v9 = ((_BYTE)a1 + 1);
LABEL_11:
        *(_QWORD *)description = (v9 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << ((32 - (__clz(v9) & 0x38)) & 0x38));
        if (qword_2563E42F0 == -1)
        {
LABEL_12:
          v6 = qword_2563E6138;
          v7 = description;
          goto LABEL_13;
        }
LABEL_21:
        swift_once();
        goto LABEL_12;
      }
      v3 = (a1 & 0x3F) << 8;
      if (a1 < 0x800)
      {
        v9 = (v3 | (a1 >> 6)) + 33217;
        goto LABEL_11;
      }
    }
    v12 = (v3 | (a1 >> 6) & 0x3F) << 8;
    v13 = (((v12 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
    v14 = (v12 | (a1 >> 12)) + 8487393;
    if (v8)
      v9 = v13;
    else
      v9 = v14;
    goto LABEL_11;
  }
  if (!a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (qword_2563E42F0 != -1)
LABEL_16:
    swift_once();
  v6 = qword_2563E6138;
  v7 = a1;
LABEL_13:
  *(_QWORD *)(v4 + 16) = _os_activity_create(&dword_23644B000, v7, v6, OS_ACTIVITY_FLAG_DEFAULT);
  swift_beginAccess();
  v10 = swift_unknownObjectRetain();
  os_activity_scope_enter(v10, (os_activity_scope_state_t)(v4 + 24));
  swift_endAccess();
  swift_unknownObjectRelease();
  return v4;
}

Swift::Void __swiftcall OSActivity.close()()
{
  uint64_t v0;

  swift_beginAccess();
  os_activity_scope_leave((os_activity_scope_state_t)(v0 + 24));
  swift_endAccess();
}

uint64_t sub_236488584()
{
  qword_2563E6138 = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_os_activity_current");
  return swift_unknownObjectRetain();
}

uint64_t OSActivity.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return v0;
}

uint64_t OSActivity.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_2364885EC()
{
  swift_getMetatypeMetadata();
  sub_2365B0AE8();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  return 0x657463616465723CLL;
}

ValueMetadata *type metadata accessor for AISLogger()
{
  return &type metadata for AISLogger;
}

uint64_t sub_236488660()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_2364886CC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_23648873C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_23648874C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t sub_23648877C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t sub_2364887AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t sub_2364887DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t sub_23648880C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2364888BC + 4 * byte_2365B6A30[(v7 - 1)]))();
}

void sub_23648890C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for RedactedValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RedactedValue);
}

uint64_t type metadata accessor for OSActivity()
{
  return objc_opt_self();
}

uint64_t method lookup function for OSActivity()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of OSActivity.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t sub_236488AFC()
{
  uint64_t result;
  uint64_t v1;

  result = sub_2365B005C();
  qword_25641F6C0 = result;
  qword_25641F6C8 = v1;
  return result;
}

uint64_t AISAuthenticationResponse.payload.getter()
{
  return swift_bridgeObjectRetain();
}

unint64_t sub_236488B38()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v5;
  _BYTE v6[32];

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___AISAuthenticationResponse_payload);
  if (*(_QWORD *)(v1 + 16)
    && (v2 = sub_236468628(0x6F54534D44494B41, 0xEB000000006E656BLL), (v3 & 1) != 0)
    && (sub_23646A9F4(*(_QWORD *)(v1 + 56) + 32 * v2, (uint64_t)v6),
        __swift_instantiateConcreteTypeFromMangledName(&qword_2542A82B8),
        swift_dynamicCast()))
  {
    return v5;
  }
  else
  {
    return sub_236466AAC(MEMORY[0x24BEE4AF8]);
  }
}

uint64_t sub_236488BE4()
{
  return sub_236488C78(0xD000000000000024, 0x80000002365CBB90);
}

uint64_t sub_236488C00()
{
  return sub_236488C78(0xD000000000000015, 0x80000002365CBBC0);
}

uint64_t sub_236488C1C()
{
  return sub_236488DEC(0x69746E6564494B41, 0xEF6E656B6F547974);
}

uint64_t sub_236488C40()
{
  return sub_236488C78(0xD00000000000001FLL, 0x80000002365CBBE0);
}

uint64_t sub_236488C5C()
{
  return sub_236488C78(0xD000000000000021, 0x80000002365CBC00);
}

uint64_t sub_236488C78(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;

  v4 = sub_236488B38();
  if (*(_QWORD *)(v4 + 16) && (v5 = sub_236468628(a1, a2), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 16 * v5);
    swift_bridgeObjectRetain();
  }
  else
  {
    v7 = 0;
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_236488CF0()
{
  return sub_236488DEC(0x495344746C414B41, 0xE900000000000044);
}

double sub_236488D0C@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  double result;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR___AISAuthenticationResponse_payload);
  if (qword_2563E42F8 != -1)
  {
    swift_once();
    if (*(_QWORD *)(v3 + 16))
      goto LABEL_3;
LABEL_8:
    result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
    return result;
  }
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_8;
LABEL_3:
  v4 = qword_25641F6C8;
  v5 = qword_25641F6C0;
  swift_bridgeObjectRetain();
  v6 = sub_236468628(v5, v4);
  if ((v7 & 1) != 0)
  {
    sub_23646A9F4(*(_QWORD *)(v3 + 56) + 32 * v6, (uint64_t)a1);
  }
  else
  {
    *a1 = 0u;
    a1[1] = 0u;
  }
  swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_236488DD0()
{
  return sub_236488DEC(0x616E726573554B41, 0xEA0000000000656DLL);
}

uint64_t sub_236488DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v7;
  _BYTE v8[32];

  v3 = *(_QWORD *)(v2 + OBJC_IVAR___AISAuthenticationResponse_payload);
  if (!*(_QWORD *)(v3 + 16))
    return 0;
  v4 = sub_236468628(a1, a2);
  if ((v5 & 1) == 0)
    return 0;
  sub_23646A9F4(*(_QWORD *)(v3 + 56) + 32 * v4, (uint64_t)v8);
  if (swift_dynamicCast())
    return v7;
  else
    return 0;
}

id AISAuthenticationResponse.__allocating_init(with:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  objc_super v5;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR___AISAuthenticationResponse_payload] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id AISAuthenticationResponse.init(with:)(uint64_t a1)
{
  char *v1;
  objc_super v3;

  *(_QWORD *)&v1[OBJC_IVAR___AISAuthenticationResponse_payload] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for AISAuthenticationResponse();
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t sub_236488F54()
{
  sub_2365B0578();
  sub_2365B00B0();
  sub_236488BE4();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  sub_236488C00();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  return 0;
}

id AISAuthenticationResponse.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void AISAuthenticationResponse.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id AISAuthenticationResponse.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AISAuthenticationResponse();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for AISAuthenticationResponse()
{
  return objc_opt_self();
}

uint64_t method lookup function for AISAuthenticationResponse()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AISAuthenticationResponse.psToken.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of AISAuthenticationResponse.petToken.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of AISAuthenticationResponse.identityToken.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of AISAuthenticationResponse.familyToken.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of AISAuthenticationResponse.familyRepairToken.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of AISAuthenticationResponse.altDSID.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of AISAuthenticationResponse.dsid.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x90))();
}

uint64_t dispatch thunk of AISAuthenticationResponse.username.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of AISAuthenticationResponse.__allocating_init(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

double RepairCommand.Request.init(from:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  type metadata accessor for V1Command(0);
  if (swift_getEnumCaseMultiPayload())
  {
    v4 = type metadata accessor for V1Command;
LABEL_6:
    sub_236465A18(a1, v4);
    *(_QWORD *)&v9 = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_QWORD *)(a2 + 80) = 0;
    *(_BYTE *)(a2 + 88) = -4;
    return *(double *)&v9;
  }
  type metadata accessor for V1Command.Request(0);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    v4 = type metadata accessor for V1Command.Request;
    goto LABEL_6;
  }
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_BYTE *)(a1 + 88);
  v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v7;
  v8 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v8;
  v9 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 64) = v9;
  *(_QWORD *)(a2 + 80) = v5;
  *(_BYTE *)(a2 + 88) = v6;
  return *(double *)&v9;
}

uint64_t RepairCommand.Request.into()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  __int128 v5;
  __int128 v6;

  v3 = *(_QWORD *)(v1 + 80);
  v4 = *(_BYTE *)(v1 + 88);
  v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v5;
  v6 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(_QWORD *)(a1 + 80) = v3;
  *(_BYTE *)(a1 + 88) = v4;
  type metadata accessor for V1Command.Request(0);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for V1Command(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t RepairCommand.Request.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  int v3;
  unint64_t v4;

  v3 = *(unsigned __int8 *)(v1 + 88) >> 6;
  if (v3)
  {
    if (v3 == 1)
    {
      v4 = *(_QWORD *)(v1 + 80);
      sub_2365B09F8();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_2365B008C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      switch(v4)
      {
        case 0uLL:
        case 1uLL:
        case 2uLL:
        case 3uLL:
          sub_2365B09F8();
          break;
        default:
          sub_2365B09F8();
          swift_bridgeObjectRetain();
          sub_2364830F0(a1, v4);
          sub_236487E68(v4);
          break;
      }
      return sub_2365B0A04();
    }
    else
    {
      return sub_2365B09F8();
    }
  }
  else
  {
    sub_2365B09F8();
    return sub_2365B008C();
  }
}

unint64_t sub_2364894C0()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7953726961706572;
  if (*v0 != 1)
    v1 = 0x64656873696E6966;
  if (*v0)
    return v1;
  else
    return 0xD000000000000015;
}

uint64_t sub_23648952C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23648CF1C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_236489550()
{
  sub_23648B4F0();
  return sub_2365B0AD0();
}

uint64_t sub_236489578()
{
  sub_23648B4F0();
  return sub_2365B0ADC();
}

uint64_t sub_2364895A0()
{
  sub_23648B534();
  return sub_2365B0AD0();
}

uint64_t sub_2364895C8()
{
  sub_23648B534();
  return sub_2365B0ADC();
}

uint64_t sub_2364895F0()
{
  sub_23648B600();
  return sub_2365B0AD0();
}

uint64_t sub_236489618()
{
  sub_23648B600();
  return sub_2365B0ADC();
}

uint64_t sub_236489640()
{
  sub_23648B578();
  return sub_2365B0AD0();
}

uint64_t sub_236489668()
{
  sub_23648B578();
  return sub_2365B0ADC();
}

uint64_t RepairCommand.Request.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6298);
  v33 = *(_QWORD *)(v3 - 8);
  v34 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v32 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E62A0);
  v35 = *(_QWORD *)(v5 - 8);
  v36 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E62A8);
  v31 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E62B0);
  v39 = *(_QWORD *)(v11 - 8);
  v40 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v1[1];
  v37 = *v1;
  v38 = v14;
  v30 = v1[2];
  v29 = v1[3];
  v28 = v1[4];
  v27 = v1[5];
  v26 = v1[6];
  v25 = v1[7];
  v24 = v1[8];
  v23 = v1[9];
  v22 = v1[10];
  v15 = *((unsigned __int8 *)v1 + 88);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23648B4F0();
  sub_2365B0AAC();
  if (!(v15 >> 6))
  {
    LOBYTE(v41) = 0;
    sub_23648B600();
    v17 = v40;
    sub_2365B07B8();
    sub_2365B0800();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v13, v17);
  }
  if (v15 >> 6 == 1)
  {
    v16 = v15 & 0x3F;
    LOBYTE(v41) = 1;
    sub_23648B578();
    v17 = v40;
    sub_2365B07B8();
    v41 = v37;
    v42 = v38;
    v43 = v30;
    v44 = v29;
    v45 = v28;
    v46 = v27;
    v47 = v26;
    v48 = v25;
    v49 = v24;
    v50 = v23;
    v51 = v22;
    v52 = v16;
    sub_23648B5BC();
    v18 = v36;
    sub_2365B0824();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v18);
    return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v13, v17);
  }
  LOBYTE(v41) = 2;
  sub_23648B534();
  v20 = v32;
  v21 = v40;
  sub_2365B07B8();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v20, v34);
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v13, v21);
}

uint64_t RepairCommand.Request.hashValue.getter()
{
  __int128 *v0;
  uint64_t v1;
  char v2;
  __int128 v3;
  __int128 v4;
  _BYTE v6[72];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  char v13;

  v1 = *((_QWORD *)v0 + 10);
  v2 = *((_BYTE *)v0 + 88);
  v3 = v0[1];
  v7 = *v0;
  v8 = v3;
  v4 = v0[3];
  v9 = v0[2];
  v10 = v4;
  v11 = v0[4];
  v12 = v1;
  v13 = v2;
  sub_2365B09E0();
  RepairCommand.Request.hash(into:)((uint64_t)v6);
  return sub_2365B0A34();
}

uint64_t RepairCommand.Request.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  char v54;
  uint64_t v55;

  v43 = a2;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E62E0);
  v41 = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v45 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E62E8);
  v42 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v44 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E62F0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E62F8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v46 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  sub_23648B4F0();
  v14 = v55;
  sub_2365B0A7C();
  if (!v14)
  {
    v38 = v6;
    v16 = v44;
    v15 = v45;
    v55 = v10;
    v17 = sub_2365B07A0();
    v18 = v9;
    if (*(_QWORD *)(v17 + 16) == 1)
    {
      v19 = v12;
      if (*(_BYTE *)(v17 + 32))
      {
        if (*(_BYTE *)(v17 + 32) == 1)
        {
          LOBYTE(v47) = 1;
          sub_23648B578();
          sub_2365B06F8();
          sub_23648B644();
          v27 = v40;
          sub_2365B0770();
          (*(void (**)(char *, uint64_t))(v42 + 8))(v16, v27);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v55 + 8))(v12, v18);
          v28 = v47;
          v29 = v48;
          v30 = v49;
          v31 = v50;
          v32 = v51;
          v33 = v52;
          v34 = v53;
          v35 = v54 | 0x40;
LABEL_12:
          v23 = (uint64_t)v46;
          v37 = v43;
          *v43 = v28;
          v37[1] = v29;
          *((_OWORD *)v37 + 1) = v30;
          *((_OWORD *)v37 + 2) = v31;
          *((_OWORD *)v37 + 3) = v32;
          *((_OWORD *)v37 + 4) = v33;
          v37[10] = v34;
          *((_BYTE *)v37 + 88) = v35;
          return __swift_destroy_boxed_opaque_existential_1(v23);
        }
        LOBYTE(v47) = 2;
        sub_23648B534();
        sub_2365B06F8();
        (*(void (**)(char *, uint64_t))(v41 + 8))(v15, v39);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v55 + 8))(v12, v18);
        v28 = 0;
        v29 = 0;
        v34 = 0;
        v30 = 0uLL;
        v35 = 0x80;
      }
      else
      {
        LOBYTE(v47) = 0;
        sub_23648B600();
        v25 = v8;
        v26 = v18;
        sub_2365B06F8();
        v28 = sub_2365B074C();
        v29 = v36;
        (*(void (**)(char *, uint64_t))(v38 + 8))(v25, v5);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v55 + 8))(v19, v26);
        v34 = 0;
        v35 = 0;
        v30 = 0uLL;
      }
      v31 = 0uLL;
      v32 = 0uLL;
      v33 = 0uLL;
      goto LABEL_12;
    }
    v20 = sub_2365B05B4();
    swift_allocError();
    v22 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E47A8);
    *v22 = &type metadata for RepairCommand.Request;
    sub_2365B0704();
    sub_2365B059C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, *MEMORY[0x24BEE26D0], v20);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v12, v18);
  }
  v23 = (uint64_t)v46;
  return __swift_destroy_boxed_opaque_existential_1(v23);
}

uint64_t sub_236489FF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  __int128 v5;
  __int128 v6;

  v3 = *(_QWORD *)(v1 + 80);
  v4 = *(_BYTE *)(v1 + 88);
  v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v5;
  v6 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(_QWORD *)(a1 + 80) = v3;
  *(_BYTE *)(a1 + 88) = v4;
  type metadata accessor for V1Command.Request(0);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for V1Command(0);
  return swift_storeEnumTagMultiPayload();
}

double sub_23648A068@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  type metadata accessor for V1Command(0);
  if (swift_getEnumCaseMultiPayload())
  {
    v4 = type metadata accessor for V1Command;
LABEL_6:
    sub_236465A18(a1, v4);
    *(_QWORD *)&v9 = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_QWORD *)(a2 + 80) = 0;
    *(_BYTE *)(a2 + 88) = -4;
    return *(double *)&v9;
  }
  type metadata accessor for V1Command.Request(0);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    v4 = type metadata accessor for V1Command.Request;
    goto LABEL_6;
  }
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_BYTE *)(a1 + 88);
  v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v7;
  v8 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v8;
  v9 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 64) = v9;
  *(_QWORD *)(a2 + 80) = v5;
  *(_BYTE *)(a2 + 88) = v6;
  return *(double *)&v9;
}

uint64_t sub_23648A120@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return RepairCommand.Request.init(from:)(a1, a2);
}

uint64_t sub_23648A134(_QWORD *a1)
{
  return RepairCommand.Request.encode(to:)(a1);
}

uint64_t sub_23648A14C()
{
  __int128 *v0;
  uint64_t v1;
  char v2;
  __int128 v3;
  __int128 v4;
  _BYTE v6[72];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  char v13;

  v1 = *((_QWORD *)v0 + 10);
  v2 = *((_BYTE *)v0 + 88);
  v3 = v0[1];
  v7 = *v0;
  v8 = v3;
  v4 = v0[3];
  v9 = v0[2];
  v10 = v4;
  v11 = v0[4];
  v12 = v1;
  v13 = v2;
  sub_2365B09E0();
  RepairCommand.Request.hash(into:)((uint64_t)v6);
  return sub_2365B0A34();
}

uint64_t sub_23648A1B8()
{
  __int128 *v0;
  uint64_t v1;
  char v2;
  __int128 v3;
  __int128 v4;
  _BYTE v6[72];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  char v13;

  v1 = *((_QWORD *)v0 + 10);
  v2 = *((_BYTE *)v0 + 88);
  v3 = v0[1];
  v7 = *v0;
  v8 = v3;
  v4 = v0[3];
  v9 = v0[2];
  v10 = v4;
  v11 = v0[4];
  v12 = v1;
  v13 = v2;
  sub_2365B09E0();
  RepairCommand.Request.hash(into:)((uint64_t)v6);
  return sub_2365B0A34();
}

uint64_t RepairCommand.Response.init(from:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int128 v5;
  uint64_t (*v6)(uint64_t);

  type metadata accessor for V1Command(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for V1Command.Response(0);
    result = swift_getEnumCaseMultiPayload();
    if ((_DWORD)result == 4)
    {
      v5 = a1[1];
      *(_OWORD *)a2 = *a1;
      *(_OWORD *)(a2 + 16) = v5;
      return result;
    }
    v6 = type metadata accessor for V1Command.Response;
  }
  else
  {
    v6 = type metadata accessor for V1Command;
  }
  result = sub_236465A18((uint64_t)a1, v6);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0xF000000000000007;
  return result;
}

uint64_t RepairCommand.Response.into()@<X0>(_OWORD *a1@<X8>)
{
  _OWORD *v1;
  __int128 v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  type metadata accessor for V1Command.Response(0);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for V1Command(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t RepairCommand.Response.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v3 = *v1;
  v4 = v1[3];
  if (v4 >> 62)
  {
    if (v4 >> 62 == 1)
    {
      sub_2365B09F8();
      return sub_2365B0A04();
    }
    else
    {
      return sub_2365B09F8();
    }
  }
  else
  {
    v7 = v1[1];
    v6 = v1[2];
    sub_2365B09F8();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_2365B008C();
    sub_236483B50(a1, v4);
    return sub_23648B8D8(v3, v7, v6, v4);
  }
}

uint64_t sub_23648A3CC()
{
  sub_23648B918();
  return sub_2365B0AD0();
}

uint64_t sub_23648A3F4()
{
  sub_23648B918();
  return sub_2365B0ADC();
}

uint64_t sub_23648A41C()
{
  sub_23648B95C();
  return sub_2365B0AD0();
}

uint64_t sub_23648A444()
{
  sub_23648B95C();
  return sub_2365B0ADC();
}

uint64_t sub_23648A46C()
{
  sub_23648B9E4();
  return sub_2365B0AD0();
}

uint64_t sub_23648A494()
{
  sub_23648B9E4();
  return sub_2365B0ADC();
}

uint64_t sub_23648A4BC()
{
  sub_23648B9A0();
  return sub_2365B0AD0();
}

uint64_t sub_23648A4E4()
{
  sub_23648B9A0();
  return sub_2365B0ADC();
}

uint64_t RepairCommand.Response.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6308);
  v29 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v25 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6310);
  v26 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6318);
  v27 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6320);
  v33 = *(_QWORD *)(v8 - 8);
  v34 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v1[1];
  v32 = *v1;
  v12 = v1[3];
  v24 = v1[2];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23648B918();
  sub_2365B0AAC();
  if (v12 >> 62)
  {
    if (v12 >> 62 == 1)
    {
      LOBYTE(v35) = 1;
      sub_23648B9A0();
      v13 = v34;
      sub_2365B07B8();
      v14 = v28;
      sub_2365B080C();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v5, v14);
      return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v10, v13);
    }
    else
    {
      LOBYTE(v35) = 2;
      sub_23648B95C();
      v21 = v25;
      v22 = v34;
      sub_2365B07B8();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v21, v31);
      return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v10, v22);
    }
  }
  else
  {
    LOBYTE(v35) = 0;
    sub_23648B9E4();
    v16 = v11;
    swift_bridgeObjectRetain();
    v17 = v24;
    swift_retain();
    swift_retain();
    v18 = v34;
    sub_2365B07B8();
    v19 = v32;
    v35 = v32;
    v36 = v16;
    v37 = v17;
    v38 = v12;
    sub_23648518C();
    v20 = v30;
    sub_2365B0824();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v20);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v18);
    return sub_23648B8D8(v19, v16, v17, v12);
  }
}

uint64_t RepairCommand.Response.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _BYTE v6[72];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  sub_2365B09E0();
  if (v4 >> 62)
  {
    sub_2365B09F8();
    if (v4 >> 62 == 1)
      sub_2365B0A04();
  }
  else
  {
    sub_2365B09F8();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_2365B008C();
    sub_236483B50((uint64_t)v6, v4);
    sub_23648B8D8(v1, v2, v3, v4);
  }
  return sub_2365B0A34();
}

uint64_t RepairCommand.Response.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;

  v41 = a2;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6348);
  v44 = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v43 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6350);
  v40 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v42 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6358);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6360);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v45 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  sub_23648B918();
  v14 = v50;
  sub_2365B0A7C();
  if (v14)
    goto LABEL_7;
  v36 = v6;
  v37 = v5;
  v16 = v42;
  v15 = v43;
  v17 = v44;
  v50 = v10;
  v18 = sub_2365B07A0();
  v19 = v9;
  if (*(_QWORD *)(v18 + 16) != 1)
  {
    v22 = sub_2365B05B4();
    swift_allocError();
    v24 = v23;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E47A8);
    *v24 = &type metadata for RepairCommand.Response;
    sub_2365B0704();
    sub_2365B059C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v24, *MEMORY[0x24BEE26D0], v22);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v12, v19);
LABEL_7:
    v30 = (uint64_t)v45;
    return __swift_destroy_boxed_opaque_existential_1(v30);
  }
  v20 = v50;
  if (*(_BYTE *)(v18 + 32))
  {
    if (*(_BYTE *)(v18 + 32) == 1)
    {
      LOBYTE(v46) = 1;
      sub_23648B9A0();
      v21 = v12;
      sub_2365B06F8();
      v28 = v38;
      v29 = sub_2365B0758();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v16, v28);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v21, v19);
      v30 = (uint64_t)v45;
      v31 = 0;
      v32 = 0;
      v33 = v29 & 1;
      v34 = 0x4000000000000000;
    }
    else
    {
      LOBYTE(v46) = 2;
      sub_23648B95C();
      sub_2365B06F8();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v15, v39);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v12, v19);
      v33 = 0;
      v31 = 0;
      v32 = 0;
      v34 = 0x8000000000000000;
      v30 = (uint64_t)v45;
    }
    v27 = v41;
  }
  else
  {
    LOBYTE(v46) = 0;
    sub_23648B9E4();
    v26 = v8;
    sub_2365B06F8();
    v27 = v41;
    sub_2364854A0();
    v35 = v37;
    sub_2365B0770();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v26, v35);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v12, v19);
    v33 = v46;
    v31 = v47;
    v32 = v48;
    v34 = v49;
    v30 = (uint64_t)v45;
  }
  *v27 = v33;
  v27[1] = v31;
  v27[2] = v32;
  v27[3] = v34;
  return __swift_destroy_boxed_opaque_existential_1(v30);
}

uint64_t sub_23648AE20@<X0>(_OWORD *a1@<X8>)
{
  _OWORD *v1;
  __int128 v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  type metadata accessor for V1Command.Response(0);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for V1Command(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_23648AE70@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int128 v5;
  uint64_t (*v6)(uint64_t);

  type metadata accessor for V1Command(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for V1Command.Response(0);
    result = swift_getEnumCaseMultiPayload();
    if ((_DWORD)result == 4)
    {
      v5 = a1[1];
      *(_OWORD *)a2 = *a1;
      *(_OWORD *)(a2 + 16) = v5;
      return result;
    }
    v6 = type metadata accessor for V1Command.Response;
  }
  else
  {
    v6 = type metadata accessor for V1Command;
  }
  result = sub_236465A18((uint64_t)a1, v6);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0xF000000000000007;
  return result;
}

uint64_t sub_23648AEFC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return RepairCommand.Response.init(from:)(a1, a2);
}

uint64_t sub_23648AF10(_QWORD *a1)
{
  return RepairCommand.Response.encode(to:)(a1);
}

uint64_t sub_23648AF2C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v3 = *v1;
  v4 = v1[3];
  if (v4 >> 62)
  {
    if (v4 >> 62 == 1)
    {
      sub_2365B09F8();
      return sub_2365B0A04();
    }
    else
    {
      return sub_2365B09F8();
    }
  }
  else
  {
    v7 = v1[1];
    v6 = v1[2];
    sub_2365B09F8();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_2365B008C();
    sub_236483B50(a1, v4);
    return sub_23648B8D8(v3, v7, v6, v4);
  }
}

uint64_t sub_23648AFFC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _BYTE v6[72];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  sub_2365B09E0();
  if (v4 >> 62)
  {
    sub_2365B09F8();
    if (v4 >> 62 == 1)
      sub_2365B0A04();
  }
  else
  {
    sub_2365B09F8();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_2365B008C();
    sub_236483B50((uint64_t)v6, v4);
    sub_23648B8D8(v1, v2, v3, v4);
  }
  return sub_2365B0A34();
}

uint64_t _s12AppleIDSetup13RepairCommandV7RequestO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned __int8 v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD v76[11];
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 80);
  v13 = *(unsigned __int8 *)(a1 + 88);
  v15 = *(_QWORD *)a2;
  v14 = *(_QWORD *)(a2 + 8);
  v17 = *(_QWORD *)(a2 + 16);
  v16 = *(_QWORD *)(a2 + 24);
  v18 = *(_QWORD *)(a2 + 32);
  v19 = *(_QWORD *)(a2 + 40);
  v20 = *(_QWORD *)(a2 + 48);
  v21 = *(_QWORD *)(a2 + 56);
  v23 = *(_QWORD *)(a2 + 64);
  v22 = *(_QWORD *)(a2 + 72);
  v24 = *(_QWORD *)(a2 + 80);
  v25 = *(unsigned __int8 *)(a2 + 88);
  v76[0] = *(_QWORD *)a1;
  v76[1] = v2;
  v76[2] = v5;
  v76[3] = v4;
  v76[4] = v7;
  v76[5] = v6;
  v76[6] = v9;
  v76[7] = v8;
  v76[8] = v11;
  v76[9] = v10;
  v76[10] = v12;
  v77 = v13;
  v78 = v15;
  v79 = v14;
  v80 = v17;
  v81 = v16;
  v82 = v18;
  v83 = v19;
  v84 = v20;
  v85 = v21;
  v86 = v23;
  v87 = v22;
  v88 = v24;
  v89 = v25;
  v72 = v9;
  v73 = v8;
  if (v13 >> 6)
  {
    if (v13 >> 6 == 1)
    {
      if ((v25 & 0xC0) == 0x40)
      {
        v56 = v10;
        v58 = v11;
        v60 = v5;
        v62 = v4;
        v64 = v7;
        v66 = v6;
        v68 = v2;
        v70 = v3;
        v52 = v19;
        v54 = v21;
        v49 = v20;
        v50 = v18;
        if (v3 == v15 && v2 == v14
          || (v26 = sub_2365B08CC(), v18 = v50, v19 = v52, v20 = v49, v21 = v54, (v26 & 1) != 0))
        {
          v74 = v24;
          v75 = v12;
          sub_23648BF84(v15, v14, v17, v16, v18, v19, v20, v21, v23, v22, v24, v25);
          sub_23648BF84(v70, v68, v60, v62, v64, v66, v72, v73, v58, v56, v12, v13);
          sub_23648BF84(v15, v14, v17, v16, v50, v52, v49, v54, v23, v22, v24, v25);
          sub_23648BF84(v70, v68, v60, v62, v64, v66, v72, v73, v58, v56, v12, v13);
          v47 = _s12AppleIDSetup7SymptomV4KindO2eeoiySbAE_AEtFZ_0(&v75, &v74);
          sub_23648D090((uint64_t)v76);
          sub_23648C070(v15, v14, v17, v16, v50, v52, v49, v54, v23, v22, v24, v25);
          sub_23648C070(v70, v68, v60, v62, v64, v66, v72, v73, v58, v56, v12, v13);
          if ((v47 & 1) != 0 && ((v25 ^ v13) & 0x3F) == 0)
          {
            v27 = 1;
            return v27 & 1;
          }
LABEL_20:
          v27 = 0;
          return v27 & 1;
        }
        sub_23648BF84(v15, v14, v17, v16, v50, v52, v49, v54, v23, v22, v24, v25);
        sub_23648BF84(v70, v68, v60, v62, v64, v66, v72, v73, v58, v56, v12, v13);
LABEL_19:
        sub_23648D090((uint64_t)v76);
        goto LABEL_20;
      }
    }
    else if ((v25 & 0xC0) == 0x80 && !(v14 | v15 | v17 | v16 | v18 | v19 | v20 | v21 | v23 | v22 | v24) && v25 == 128)
    {
      sub_23648D090((uint64_t)v76);
      v27 = 1;
      return v27 & 1;
    }
LABEL_18:
    v46 = v25;
    v44 = v22;
    v45 = v24;
    v43 = v23;
    v28 = v15;
    v29 = v14;
    v30 = v5;
    v31 = v10;
    v32 = v17;
    v33 = v4;
    v34 = v16;
    v35 = v7;
    v36 = v6;
    v37 = v2;
    v38 = v3;
    v39 = v11;
    sub_23648BF84(v28, v29, v32, v34, v18, v19, v20, v21, v43, v44, v45, v46);
    sub_23648BF84(v38, v37, v30, v33, v35, v36, v72, v73, v39, v31, v12, v13);
    goto LABEL_19;
  }
  if (v25 >= 0x40)
    goto LABEL_18;
  v48 = v12;
  v57 = v10;
  v59 = v11;
  v61 = v5;
  v63 = v4;
  v65 = v7;
  v67 = v6;
  v69 = v2;
  v71 = v3;
  if (v3 == v15 && v2 == v14)
  {
    v27 = 1;
  }
  else
  {
    v51 = v18;
    v53 = v19;
    v55 = v21;
    v41 = v20;
    v42 = sub_2365B08CC();
    v18 = v51;
    v19 = v53;
    v20 = v41;
    v21 = v55;
    v27 = v42;
  }
  sub_23648BF84(v15, v14, v17, v16, v18, v19, v20, v21, v23, v22, v24, v25);
  sub_23648BF84(v71, v69, v61, v63, v65, v67, v72, v73, v59, v57, v48, v13);
  sub_23648D090((uint64_t)v76);
  return v27 & 1;
}

unint64_t sub_23648B4F0()
{
  unint64_t result;

  result = qword_2563E62B8;
  if (!qword_2563E62B8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B7594, &type metadata for RepairCommand.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E62B8);
  }
  return result;
}

unint64_t sub_23648B534()
{
  unint64_t result;

  result = qword_2563E62C0;
  if (!qword_2563E62C0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B7544, &type metadata for RepairCommand.Request.FinishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E62C0);
  }
  return result;
}

unint64_t sub_23648B578()
{
  unint64_t result;

  result = qword_2563E62C8;
  if (!qword_2563E62C8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B74F4, &type metadata for RepairCommand.Request.RepairSymptomCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E62C8);
  }
  return result;
}

unint64_t sub_23648B5BC()
{
  unint64_t result;

  result = qword_2563E62D0;
  if (!qword_2563E62D0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for Symptom, &type metadata for Symptom);
    atomic_store(result, (unint64_t *)&qword_2563E62D0);
  }
  return result;
}

unint64_t sub_23648B600()
{
  unint64_t result;

  result = qword_2563E62D8;
  if (!qword_2563E62D8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B74A4, &type metadata for RepairCommand.Request.GenerateSymptomReportCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E62D8);
  }
  return result;
}

unint64_t sub_23648B644()
{
  unint64_t result;

  result = qword_2563E6300;
  if (!qword_2563E6300)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for Symptom, &type metadata for Symptom);
    atomic_store(result, (unint64_t *)&qword_2563E6300);
  }
  return result;
}

uint64_t _s12AppleIDSetup13RepairCommandV8ResponseO2eeoiySbAE_AEtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  BOOL v11;
  char v12;

  v3 = *a1;
  v2 = a1[1];
  v5 = a1[2];
  v4 = a1[3];
  v6 = *a2;
  v7 = a2[1];
  v9 = a2[2];
  v8 = a2[3];
  if (!(v4 >> 62))
  {
    if (v8 >> 62)
    {
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_25;
    }
    v11 = v3 == v6 && v2 == v7;
    if (!v11 && (sub_2365B08CC() & 1) == 0)
    {
      sub_23648C4C0(v3, v2, v5, v4);
      goto LABEL_25;
    }
    sub_23648C4C0(v6, v7, v9, v8);
    sub_23648C4C0(v3, v2, v5, v4);
    sub_23648C4C0(v3, v2, v5, v4);
    sub_23648C4C0(v6, v7, v9, v8);
    v12 = sub_23651F4EC(v9, v8, v5, v4);
    sub_23648B8D8(v3, v2, v5, v4);
    sub_23648B8D8(v6, v7, v9, v8);
    sub_23648B8D8(v6, v7, v9, v8);
    sub_23648B8D8(v3, v2, v5, v4);
    if ((v12 & 1) == 0)
      goto LABEL_26;
LABEL_22:
    v10 = 1;
    return v10 & 1;
  }
  if (v4 >> 62 != 1)
  {
    if (v8 >> 62 != 2 || (v7 | v6 | v9) != 0 || v8 != 0x8000000000000000)
      goto LABEL_25;
    sub_23648B8D8(*a1, v2, v5, v4);
    sub_23648B8D8(0, 0, 0, 0x8000000000000000);
    goto LABEL_22;
  }
  if (v8 >> 62 != 1)
  {
LABEL_25:
    sub_23648C4C0(v6, v7, v9, v8);
    sub_23648B8D8(v3, v2, v5, v4);
    sub_23648B8D8(v6, v7, v9, v8);
LABEL_26:
    v10 = 0;
    return v10 & 1;
  }
  sub_23648B8D8(*a1, v2, v5, v4);
  sub_23648B8D8(v6, v7, v9, v8);
  v10 = ((v3 & 1) == 0) ^ v6;
  return v10 & 1;
}

uint64_t sub_23648B8D8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;

  if (!(a4 >> 62))
  {
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

unint64_t sub_23648B918()
{
  unint64_t result;

  result = qword_2563E6328;
  if (!qword_2563E6328)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B7454, &type metadata for RepairCommand.Response.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6328);
  }
  return result;
}

unint64_t sub_23648B95C()
{
  unint64_t result;

  result = qword_2563E6330;
  if (!qword_2563E6330)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B7404, &type metadata for RepairCommand.Response.FinishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6330);
  }
  return result;
}

unint64_t sub_23648B9A0()
{
  unint64_t result;

  result = qword_2563E6338;
  if (!qword_2563E6338)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B73B4, &type metadata for RepairCommand.Response.RepairSymptomCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6338);
  }
  return result;
}

unint64_t sub_23648B9E4()
{
  unint64_t result;

  result = qword_2563E6340;
  if (!qword_2563E6340)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B7364, &type metadata for RepairCommand.Response.GenerateSymptomReportCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6340);
  }
  return result;
}

unint64_t sub_23648BA2C()
{
  unint64_t result;

  result = qword_2563E6368;
  if (!qword_2563E6368)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairCommand, &type metadata for RepairCommand);
    atomic_store(result, (unint64_t *)&qword_2563E6368);
  }
  return result;
}

unint64_t sub_23648BA70(uint64_t a1)
{
  unint64_t result;

  result = sub_23648BA94();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_23648BA94()
{
  unint64_t result;

  result = qword_2563E6398;
  if (!qword_2563E6398)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairCommand.Request, &type metadata for RepairCommand.Request);
    atomic_store(result, (unint64_t *)&qword_2563E6398);
  }
  return result;
}

unint64_t sub_23648BADC()
{
  unint64_t result;

  result = qword_2563E63A0;
  if (!qword_2563E63A0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairCommand, &type metadata for RepairCommand);
    atomic_store(result, (unint64_t *)&qword_2563E63A0);
  }
  return result;
}

unint64_t sub_23648BB20(uint64_t a1)
{
  unint64_t result;

  result = sub_23648BB44();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_23648BB44()
{
  unint64_t result;

  result = qword_2563E63C8;
  if (!qword_2563E63C8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairCommand.Request, &type metadata for RepairCommand.Request);
    atomic_store(result, (unint64_t *)&qword_2563E63C8);
  }
  return result;
}

uint64_t sub_23648BB88(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_23645EB14(a1, a2, a3, (uint64_t (*)(void))sub_23648BBA4, (uint64_t (*)(void))sub_23648BBE8, (uint64_t (*)(void))sub_23648BC2C);
}

unint64_t sub_23648BBA4()
{
  unint64_t result;

  result = qword_2563E63D0;
  if (!qword_2563E63D0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairCommand.Request, &type metadata for RepairCommand.Request);
    atomic_store(result, (unint64_t *)&qword_2563E63D0);
  }
  return result;
}

unint64_t sub_23648BBE8()
{
  unint64_t result;

  result = qword_2563E63D8;
  if (!qword_2563E63D8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairCommand.Request, &type metadata for RepairCommand.Request);
    atomic_store(result, (unint64_t *)&qword_2563E63D8);
  }
  return result;
}

unint64_t sub_23648BC2C()
{
  unint64_t result;

  result = qword_2563E63E0;
  if (!qword_2563E63E0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairCommand.Request, &type metadata for RepairCommand.Request);
    atomic_store(result, (unint64_t *)&qword_2563E63E0);
  }
  return result;
}

unint64_t sub_23648BC74()
{
  unint64_t result;

  result = qword_2563E63E8;
  if (!qword_2563E63E8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairCommand.Request, &type metadata for RepairCommand.Request);
    atomic_store(result, (unint64_t *)&qword_2563E63E8);
  }
  return result;
}

unint64_t sub_23648BCB8(uint64_t a1)
{
  unint64_t result;

  result = sub_23648BCDC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_23648BCDC()
{
  unint64_t result;

  result = qword_2563E6418;
  if (!qword_2563E6418)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairCommand.Response, &type metadata for RepairCommand.Response);
    atomic_store(result, (unint64_t *)&qword_2563E6418);
  }
  return result;
}

unint64_t sub_23648BD20(uint64_t a1)
{
  unint64_t result;

  result = sub_23648BD44();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_23648BD44()
{
  unint64_t result;

  result = qword_2563E6440;
  if (!qword_2563E6440)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairCommand.Response, &type metadata for RepairCommand.Response);
    atomic_store(result, (unint64_t *)&qword_2563E6440);
  }
  return result;
}

uint64_t sub_23648BD88(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_23645EB14(a1, a2, a3, (uint64_t (*)(void))sub_23648BDA4, (uint64_t (*)(void))sub_23648BDE8, (uint64_t (*)(void))sub_23648BE2C);
}

unint64_t sub_23648BDA4()
{
  unint64_t result;

  result = qword_2563E6448;
  if (!qword_2563E6448)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairCommand.Response, &type metadata for RepairCommand.Response);
    atomic_store(result, (unint64_t *)&qword_2563E6448);
  }
  return result;
}

unint64_t sub_23648BDE8()
{
  unint64_t result;

  result = qword_2563E6450;
  if (!qword_2563E6450)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairCommand.Response, &type metadata for RepairCommand.Response);
    atomic_store(result, (unint64_t *)&qword_2563E6450);
  }
  return result;
}

unint64_t sub_23648BE2C()
{
  unint64_t result;

  result = qword_2563E6458;
  if (!qword_2563E6458)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairCommand.Response, &type metadata for RepairCommand.Response);
    atomic_store(result, (unint64_t *)&qword_2563E6458);
  }
  return result;
}

unint64_t sub_23648BE74()
{
  unint64_t result;

  result = qword_2563E6460;
  if (!qword_2563E6460)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairCommand.Response, &type metadata for RepairCommand.Response);
    atomic_store(result, (unint64_t *)&qword_2563E6460);
  }
  return result;
}

unint64_t sub_23648BEBC()
{
  unint64_t result;

  result = qword_2563E6468;
  if (!qword_2563E6468)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairCommand.Request, &type metadata for RepairCommand.Request);
    atomic_store(result, (unint64_t *)&qword_2563E6468);
  }
  return result;
}

unint64_t sub_23648BF04()
{
  unint64_t result;

  result = qword_2563E6470;
  if (!qword_2563E6470)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairCommand.Response, &type metadata for RepairCommand.Response);
    atomic_store(result, (unint64_t *)&qword_2563E6470);
  }
  return result;
}

unint64_t sub_23648BF48(uint64_t a1)
{
  unint64_t result;

  result = sub_23648BADC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for RepairCommand()
{
  return &type metadata for RepairCommand;
}

unint64_t sub_23648BF84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, unsigned __int8 a12)
{
  int v12;
  unint64_t result;

  v12 = a12 >> 6;
  if (v12 == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return sub_236487E58(a11);
  }
  else if (!v12)
  {
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t destroy for RepairCommand.Request(uint64_t a1)
{
  return sub_23648C070(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88));
}

unint64_t sub_23648C070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, unsigned __int8 a12)
{
  int v12;
  unint64_t result;

  v12 = a12 >> 6;
  if (v12 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_236487E68(a11);
  }
  else if (!v12)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for RepairCommand.Request(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_BYTE *)(a2 + 88);
  sub_23648BF84(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_BYTE *)(a1 + 88) = v15;
  return a1;
}

uint64_t assignWithCopy for RepairCommand.Request(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  unint64_t v21;
  unsigned __int8 v22;
  uint64_t v24;
  unint64_t v25;
  unsigned __int8 v26;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v24 = *(_QWORD *)(a2 + 72);
  v25 = *(_QWORD *)(a2 + 80);
  v26 = *(_BYTE *)(a2 + 88);
  sub_23648BF84(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v24, v25, v26);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 80);
  v22 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v24;
  *(_QWORD *)(a1 + 80) = v25;
  *(_BYTE *)(a1 + 88) = v26;
  sub_23648C070(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, v22);
  return a1;
}

__n128 __swift_memcpy89_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for RepairCommand.Request(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  unint64_t v14;
  unsigned __int8 v15;
  __int128 v16;
  __int128 v17;

  v3 = *(_QWORD *)(a2 + 80);
  v4 = *(_BYTE *)(a2 + 88);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_OWORD *)(a1 + 64);
  v14 = *(_QWORD *)(a1 + 80);
  v15 = *(_BYTE *)(a1 + 88);
  v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
  v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = v3;
  *(_BYTE *)(a1 + 88) = v4;
  sub_23648C070(v5, v7, v6, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for RepairCommand.Request(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3E && *(_BYTE *)(a1 + 89))
    return (*(_DWORD *)a1 + 62);
  v3 = (*(_BYTE *)(a1 + 88) & 0x3C | (*(unsigned __int8 *)(a1 + 88) >> 6)) ^ 0x3F;
  if (v3 >= 0x3D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for RepairCommand.Request(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3D)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 88) = 0;
    *(_QWORD *)result = a2 - 62;
    if (a3 >= 0x3E)
      *(_BYTE *)(result + 89) = 1;
  }
  else
  {
    if (a3 >= 0x3E)
      *(_BYTE *)(result + 89) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 80) = 0;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)result = 0u;
      *(_BYTE *)(result + 88) = 4 * (((-a2 >> 2) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t sub_23648C43C(uint64_t a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;

  v1 = *(unsigned __int8 *)(a1 + 88);
  v2 = (char)v1;
  v3 = v1 >> 6;
  if (v2 >= 0)
    return v3;
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_23648C45C(uint64_t result)
{
  *(_BYTE *)(result + 88) &= 0x3Fu;
  return result;
}

uint64_t sub_23648C46C(uint64_t result, unsigned int a2)
{
  if (a2 < 2)
  {
    *(_BYTE *)(result + 88) = *(_BYTE *)(result + 88) & 3 | ((_BYTE)a2 << 6);
  }
  else
  {
    *(_QWORD *)result = a2 - 2;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_BYTE *)(result + 88) = 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for RepairCommand.Request()
{
  return &type metadata for RepairCommand.Request;
}

uint64_t sub_23648C4C0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;

  if (!(a4 >> 62))
  {
    swift_retain();
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for RepairCommand.Response(uint64_t a1)
{
  return sub_23648B8D8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t *initializeWithCopy for RepairCommand.Response(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  sub_23648C4C0(*a2, v4, v5, v6);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for RepairCommand.Response(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  sub_23648C4C0(*a2, v4, v5, v6);
  v7 = *a1;
  v8 = a1[1];
  v9 = a1[2];
  v10 = a1[3];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  sub_23648B8D8(v7, v8, v9, v10);
  return a1;
}

uint64_t *assignWithTake for RepairCommand.Response(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a1;
  v5 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v7 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v7;
  sub_23648B8D8(v3, v5, v4, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for RepairCommand.Response(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 126);
  v3 = (((*(_QWORD *)(a1 + 24) >> 57) >> 5) | (4
                                                           * ((*(_QWORD *)(a1 + 24) >> 57) & 0x18 | *(_QWORD *)(a1 + 24) & 7))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for RepairCommand.Response(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7D)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 126;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_23648C6B4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24) >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_23648C6D0(uint64_t result)
{
  *(_QWORD *)(result + 24) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

_QWORD *sub_23648C6E0(_QWORD *result, uint64_t a2)
{
  if (a2 < 2)
  {
    result[3] = result[3] & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
  }
  else
  {
    *result = (a2 - 2);
    result[1] = 0;
    result[2] = 0;
    result[3] = 0x8000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for RepairCommand.Response()
{
  return &type metadata for RepairCommand.Response;
}

ValueMetadata *type metadata accessor for RepairCommand.Response.CodingKeys()
{
  return &type metadata for RepairCommand.Response.CodingKeys;
}

ValueMetadata *type metadata accessor for RepairCommand.Response.GenerateSymptomReportCodingKeys()
{
  return &type metadata for RepairCommand.Response.GenerateSymptomReportCodingKeys;
}

ValueMetadata *type metadata accessor for RepairCommand.Response.RepairSymptomCodingKeys()
{
  return &type metadata for RepairCommand.Response.RepairSymptomCodingKeys;
}

ValueMetadata *type metadata accessor for RepairCommand.Response.FinishedCodingKeys()
{
  return &type metadata for RepairCommand.Response.FinishedCodingKeys;
}

uint64_t _s12AppleIDSetup13RepairCommandV8ResponseO10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23648C7B0 + 4 * byte_2365B6B69[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23648C7E4 + 4 * byte_2365B6B64[v4]))();
}

uint64_t sub_23648C7E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23648C7EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23648C7F4);
  return result;
}

uint64_t sub_23648C800(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23648C808);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23648C80C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23648C814(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RepairCommand.Request.CodingKeys()
{
  return &type metadata for RepairCommand.Request.CodingKeys;
}

ValueMetadata *type metadata accessor for RepairCommand.Request.GenerateSymptomReportCodingKeys()
{
  return &type metadata for RepairCommand.Request.GenerateSymptomReportCodingKeys;
}

uint64_t _s12AppleIDSetup13RepairCommandV8ResponseO31GenerateSymptomReportCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23648C880 + 4 * byte_2365B6B6E[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23648C8A0 + 4 * byte_2365B6B73[v4]))();
}

_BYTE *sub_23648C880(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23648C8A0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23648C8A8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23648C8B0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23648C8B8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23648C8C0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for RepairCommand.Request.RepairSymptomCodingKeys()
{
  return &type metadata for RepairCommand.Request.RepairSymptomCodingKeys;
}

ValueMetadata *type metadata accessor for RepairCommand.Request.FinishedCodingKeys()
{
  return &type metadata for RepairCommand.Request.FinishedCodingKeys;
}

unint64_t sub_23648C8F0()
{
  unint64_t result;

  result = qword_2563E64C8;
  if (!qword_2563E64C8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B6F54, &type metadata for RepairCommand.Request.RepairSymptomCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E64C8);
  }
  return result;
}

unint64_t sub_23648C938()
{
  unint64_t result;

  result = qword_2563E64D0;
  if (!qword_2563E64D0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B700C, &type metadata for RepairCommand.Request.GenerateSymptomReportCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E64D0);
  }
  return result;
}

unint64_t sub_23648C980()
{
  unint64_t result;

  result = qword_2563E64D8;
  if (!qword_2563E64D8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B70C4, &type metadata for RepairCommand.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E64D8);
  }
  return result;
}

unint64_t sub_23648C9C8()
{
  unint64_t result;

  result = qword_2563E64E0;
  if (!qword_2563E64E0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B71CC, &type metadata for RepairCommand.Response.RepairSymptomCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E64E0);
  }
  return result;
}

unint64_t sub_23648CA10()
{
  unint64_t result;

  result = qword_2563E64E8;
  if (!qword_2563E64E8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B7284, &type metadata for RepairCommand.Response.GenerateSymptomReportCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E64E8);
  }
  return result;
}

unint64_t sub_23648CA58()
{
  unint64_t result;

  result = qword_2563E64F0;
  if (!qword_2563E64F0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B733C, &type metadata for RepairCommand.Response.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E64F0);
  }
  return result;
}

unint64_t sub_23648CAA0()
{
  unint64_t result;

  result = qword_2563E64F8;
  if (!qword_2563E64F8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B71F4, &type metadata for RepairCommand.Response.GenerateSymptomReportCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E64F8);
  }
  return result;
}

unint64_t sub_23648CAE8()
{
  unint64_t result;

  result = qword_2563E6500;
  if (!qword_2563E6500)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B721C, &type metadata for RepairCommand.Response.GenerateSymptomReportCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6500);
  }
  return result;
}

unint64_t sub_23648CB30()
{
  unint64_t result;

  result = qword_2563E6508;
  if (!qword_2563E6508)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B713C, &type metadata for RepairCommand.Response.RepairSymptomCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6508);
  }
  return result;
}

unint64_t sub_23648CB78()
{
  unint64_t result;

  result = qword_2563E6510;
  if (!qword_2563E6510)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B7164, &type metadata for RepairCommand.Response.RepairSymptomCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6510);
  }
  return result;
}

unint64_t sub_23648CBC0()
{
  unint64_t result;

  result = qword_2563E6518;
  if (!qword_2563E6518)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B70EC, &type metadata for RepairCommand.Response.FinishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6518);
  }
  return result;
}

unint64_t sub_23648CC08()
{
  unint64_t result;

  result = qword_2563E6520;
  if (!qword_2563E6520)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B7114, &type metadata for RepairCommand.Response.FinishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6520);
  }
  return result;
}

unint64_t sub_23648CC50()
{
  unint64_t result;

  result = qword_2563E6528;
  if (!qword_2563E6528)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B72AC, &type metadata for RepairCommand.Response.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6528);
  }
  return result;
}

unint64_t sub_23648CC98()
{
  unint64_t result;

  result = qword_2563E6530;
  if (!qword_2563E6530)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B72D4, &type metadata for RepairCommand.Response.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6530);
  }
  return result;
}

unint64_t sub_23648CCE0()
{
  unint64_t result;

  result = qword_2563E6538;
  if (!qword_2563E6538)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B6F7C, &type metadata for RepairCommand.Request.GenerateSymptomReportCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6538);
  }
  return result;
}

unint64_t sub_23648CD28()
{
  unint64_t result;

  result = qword_2563E6540;
  if (!qword_2563E6540)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B6FA4, &type metadata for RepairCommand.Request.GenerateSymptomReportCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6540);
  }
  return result;
}

unint64_t sub_23648CD70()
{
  unint64_t result;

  result = qword_2563E6548;
  if (!qword_2563E6548)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B6EC4, &type metadata for RepairCommand.Request.RepairSymptomCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6548);
  }
  return result;
}

unint64_t sub_23648CDB8()
{
  unint64_t result;

  result = qword_2563E6550;
  if (!qword_2563E6550)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B6EEC, &type metadata for RepairCommand.Request.RepairSymptomCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6550);
  }
  return result;
}

unint64_t sub_23648CE00()
{
  unint64_t result;

  result = qword_2563E6558;
  if (!qword_2563E6558)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B6E74, &type metadata for RepairCommand.Request.FinishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6558);
  }
  return result;
}

unint64_t sub_23648CE48()
{
  unint64_t result;

  result = qword_2563E6560;
  if (!qword_2563E6560)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B6E9C, &type metadata for RepairCommand.Request.FinishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6560);
  }
  return result;
}

unint64_t sub_23648CE90()
{
  unint64_t result;

  result = qword_2563E6568;
  if (!qword_2563E6568)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B7034, &type metadata for RepairCommand.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6568);
  }
  return result;
}

unint64_t sub_23648CED8()
{
  unint64_t result;

  result = qword_2563E6570;
  if (!qword_2563E6570)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B705C, &type metadata for RepairCommand.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6570);
  }
  return result;
}

uint64_t sub_23648CF1C(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000015 && a2 == 0x80000002365CBA70 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7953726961706572 && a2 == 0xED00006D6F74706DLL || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x64656873696E6966 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v5 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23648D090(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  __int128 v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 104);
  v13 = *(_QWORD *)(a1 + 96);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 152);
  v12 = *(_OWORD *)(a1 + 160);
  v9 = *(_QWORD *)(a1 + 176);
  v10 = *(_BYTE *)(a1 + 184);
  sub_23648C070(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88));
  sub_23648C070(v13, v2, v3, v4, v5, v6, v7, v8, v12, *((uint64_t *)&v12 + 1), v9, v10);
  return a1;
}

uint64_t static AISAnalytics.shared.getter()
{
  type metadata accessor for AISAnalytics();
  return swift_initStaticObject();
}

uint64_t type metadata accessor for AISAnalytics()
{
  return objc_opt_self();
}

uint64_t sub_23648D1A4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = a1[3];
  v2 = a1[4];
  v3 = __swift_project_boxed_opaque_existential_1(a1, v1);
  return sub_23648D228((uint64_t)v3, v1, v2);
}

uint64_t sub_23648D1D0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[3];
  v2 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t AISAnalytics.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t AISAnalytics.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_23648D228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *boxed_opaque_existential_1;
  void *v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 *v25;
  uint64_t v27;
  _QWORD aBlock[3];
  void *v29;
  uint64_t (*v30)();
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34[5];

  v34[3] = a2;
  v34[4] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v34);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
  (*(void (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  v7 = (void *)sub_2365B0038();
  swift_bridgeObjectRelease();
  sub_23648D710((uint64_t)v34, (uint64_t)&v32);
  v8 = swift_allocObject();
  sub_23646A440(&v32, v8 + 16);
  v30 = sub_23648D778;
  v31 = v8;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_236503CB4;
  v29 = &block_descriptor;
  v9 = _Block_copy(aBlock);
  swift_release();
  v10 = AnalyticsSendEventLazy();
  _Block_release(v9);

  if (!v10)
  {
    if (qword_2542A79D8 != -1)
      swift_once();
    v21 = sub_2365AFC00();
    __swift_project_value_buffer(v21, (uint64_t)qword_2542A79C0);
    sub_23648D710((uint64_t)v34, (uint64_t)aBlock);
    v12 = sub_2365AFBE8();
    v22 = sub_2365B038C();
    if (os_log_type_enabled(v12, v22))
    {
      v14 = swift_slowAlloc();
      v15 = swift_slowAlloc();
      *(_QWORD *)&v32 = v15;
      *(_DWORD *)v14 = 136315138;
      __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v29);
      v23 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
      v27 = sub_236468D88(v23, v24, (uint64_t *)&v32);
      sub_2365B04A0();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
      _os_log_impl(&dword_23644B000, v12, v22, "Failed to send Core Analytics event: %s", (uint8_t *)v14, 0xCu);
      goto LABEL_10;
    }
    v25 = (__int128 *)aBlock;
LABEL_13:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    goto LABEL_14;
  }
  if (qword_2542A79D8 != -1)
    swift_once();
  v11 = sub_2365AFC00();
  __swift_project_value_buffer(v11, (uint64_t)qword_2542A79C0);
  sub_23648D710((uint64_t)v34, (uint64_t)aBlock);
  sub_23648D710((uint64_t)v34, (uint64_t)&v32);
  v12 = sub_2365AFBE8();
  v13 = sub_2365B038C();
  if (!os_log_type_enabled(v12, v13))
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
    v25 = &v32;
    goto LABEL_13;
  }
  v14 = swift_slowAlloc();
  v15 = swift_slowAlloc();
  v27 = v15;
  *(_DWORD *)v14 = 136315394;
  __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v29);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  sub_236468D88(v16, v17, &v27);
  sub_2365B04A0();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
  *(_WORD *)(v14 + 12) = 2080;
  __swift_project_boxed_opaque_existential_1(&v32, v33);
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  sub_23648D7D4();
  v18 = sub_2365AFF6C();
  v20 = v19;
  swift_bridgeObjectRelease();
  sub_236468D88(v18, v20, &v27);
  sub_2365B04A0();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
  _os_log_impl(&dword_23644B000, v12, v13, "Sent Core Analytics event:  %s %s", (uint8_t *)v14, 0x16u);
LABEL_10:
  swift_arrayDestroy();
  MEMORY[0x23B7F5254](v15, -1, -1);
  MEMORY[0x23B7F5254](v14, -1, -1);
LABEL_14:

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
}

uint64_t dispatch thunk of AISAnalyticsProtocol.reportEvent(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t method lookup function for AISAnalytics()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AISAnalytics.reportEvent(event:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_23648D710(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_23648D754()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_23648D778()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[5];
  v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

unint64_t sub_23648D7D4()
{
  unint64_t result;

  result = qword_2563E6618;
  if (!qword_2563E6618)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2563E6618);
  }
  return result;
}

uint64_t String.localized.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjCClassFromMetadata;
  id v3;

  v0 = sub_2365AFA2C();
  MEMORY[0x24BDAC7A8](v0);
  v1 = sub_2365B0020();
  MEMORY[0x24BDAC7A8](v1);
  swift_bridgeObjectRetain();
  sub_2365B002C();
  type metadata accessor for AISChildSetupFlowResult();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v3 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  sub_2365AFA20();
  return sub_2365B0074();
}

uint64_t String.rebrand.getter(uint64_t a1, unint64_t a2)
{
  char v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  ValueMetadata *v9;
  unint64_t v10;

  v9 = &type metadata for AppleAccountFeature;
  v10 = sub_23648DA40();
  v4 = sub_2365AFA98();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v7);
  if ((v4 & 1) != 0 && (v7 = a1, v8 = a2, sub_23648DA84(), (sub_2365B04B8() & 1) == 0))
  {
    v7 = 0x444E41524245525FLL;
    v8 = 0xE800000000000000;
    swift_bridgeObjectRetain();
    v6 = sub_2365B00F8();
    sub_2365B00A4();
    return v6;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return a1;
}

unint64_t sub_23648DA40()
{
  unint64_t result;

  result = qword_2563E6620;
  if (!qword_2563E6620)
  {
    result = MEMORY[0x23B7F5164](&unk_2365BCC3C, &type metadata for AppleAccountFeature);
    atomic_store(result, (unint64_t *)&qword_2563E6620);
  }
  return result;
}

unint64_t sub_23648DA84()
{
  unint64_t result;

  result = qword_2563E6628;
  if (!qword_2563E6628)
  {
    result = MEMORY[0x23B7F5164](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_2563E6628);
  }
  return result;
}

uint64_t AuthenticateCommand.Request.account.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23648DFF8(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for IdMSAccount);
}

uint64_t AuthenticateCommand.Request.account.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_23648DAF4(a1, v1);
}

uint64_t sub_23648DAF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for IdMSAccount();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*AuthenticateCommand.Request.account.modify())()
{
  return nullsub_1;
}

uint64_t AuthenticateCommand.Request.deviceInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = v1 + *(int *)(type metadata accessor for AuthenticateCommand.Request(0) + 20);
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(_QWORD *)(v3 + 32);
  v9 = *(_QWORD *)(v3 + 40);
  v10 = *(_QWORD *)(v3 + 48);
  v11 = *(_QWORD *)(v3 + 56);
  LOBYTE(v3) = *(_BYTE *)(v3 + 64);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = v3;
  return sub_23648DBC0(v4, v5, v6, v7, v8, v9);
}

uint64_t type metadata accessor for AuthenticateCommand.Request(uint64_t a1)
{
  return sub_2364905D8(a1, qword_2563E6888);
}

uint64_t sub_23648DBC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return sub_23648DC24(a5, a6);
  }
  return result;
}

uint64_t sub_23648DC24(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

__n128 AuthenticateCommand.Request.deviceInfo.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  __n128 result;
  __n128 v7;
  __int128 v8;
  __int128 v9;

  v8 = a1[1];
  v9 = *a1;
  v7 = (__n128)a1[2];
  v2 = *((_QWORD *)a1 + 6);
  v3 = *((_QWORD *)a1 + 7);
  v4 = *((_BYTE *)a1 + 64);
  v5 = v1 + *(int *)(type metadata accessor for AuthenticateCommand.Request(0) + 20);
  sub_23648DCEC(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40));
  *(_OWORD *)v5 = v9;
  *(_OWORD *)(v5 + 16) = v8;
  result = v7;
  *(__n128 *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 48) = v2;
  *(_QWORD *)(v5 + 56) = v3;
  *(_BYTE *)(v5 + 64) = v4;
  return result;
}

uint64_t sub_23648DCEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_23648DD50(a5, a6);
  }
  return result;
}

uint64_t sub_23648DD50(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*AuthenticateCommand.Request.deviceInfo.modify())()
{
  type metadata accessor for AuthenticateCommand.Request(0);
  return nullsub_1;
}

__n128 AuthenticateCommand.Request.init(account:deviceInfo:)@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  __n128 result;
  __n128 v10;
  __int128 v11;
  __int128 v12;

  v11 = a2[1];
  v12 = *a2;
  v10 = (__n128)a2[2];
  v5 = *((_QWORD *)a2 + 6);
  v6 = *((_QWORD *)a2 + 7);
  v7 = *((_BYTE *)a2 + 64);
  v8 = a3 + *(int *)(type metadata accessor for AuthenticateCommand.Request(0) + 20);
  sub_23646591C(a1, a3, (uint64_t (*)(_QWORD))type metadata accessor for IdMSAccount);
  *(_OWORD *)v8 = v12;
  *(_OWORD *)(v8 + 16) = v11;
  result = v10;
  *(__n128 *)(v8 + 32) = v10;
  *(_QWORD *)(v8 + 48) = v5;
  *(_QWORD *)(v8 + 56) = v6;
  *(_BYTE *)(v8 + 64) = v7;
  return result;
}

uint64_t AuthenticateCommand.Request.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v15;

  v4 = type metadata accessor for AuthenticateCommand.Request(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v15 - v10;
  v12 = (char *)&v15 + *(int *)(v9 + 20) - v10;
  type metadata accessor for V1Command(0);
  *(_OWORD *)v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  *((_OWORD *)v12 + 2) = 0u;
  *((_OWORD *)v12 + 3) = 0u;
  v12[64] = 0;
  if (swift_getEnumCaseMultiPayload())
  {
    v13 = type metadata accessor for V1Command;
  }
  else
  {
    type metadata accessor for V1Command.Request(0);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      sub_23646591C(a1, (uint64_t)v8, type metadata accessor for AuthenticateCommand.Request);
      sub_23646591C((uint64_t)v8, (uint64_t)v11, type metadata accessor for AuthenticateCommand.Request);
      sub_23648DFF8((uint64_t)v11, a2, type metadata accessor for AuthenticateCommand.Request);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
      return sub_236465A18((uint64_t)v11, type metadata accessor for AuthenticateCommand.Request);
    }
    v13 = type metadata accessor for V1Command.Request;
  }
  sub_236465A18(a1, v13);
  sub_23648DCEC(0, 0, 0, 0, 0, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1, 1, v4);
}

uint64_t sub_23648DFF8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t AuthenticateCommand.Request.into()@<X0>(uint64_t a1@<X8>)
{
  return sub_23648F83C(type metadata accessor for AuthenticateCommand.Request, (void (*)(_QWORD))type metadata accessor for V1Command.Request, a1);
}

void AuthenticateCommand.Request.hash(into:)()
{
  uint64_t v1;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for IdMSAccount();
  sub_2365AF8D0();
  sub_23644F0B8(&qword_2563E4D80, (uint64_t (*)(uint64_t))MEMORY[0x24BDCCC10], MEMORY[0x24BDCCC28]);
  sub_2365AFFD8();
  __asm { BR              X10 }
}

uint64_t sub_23648E17C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  sub_2365B09F8();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A28();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v1 + *(int *)(v2 + 28));
  swift_bridgeObjectRetain();
  sub_2364830F0(v0, v3);
  swift_bridgeObjectRelease();
  v4 = v1 + *(int *)(type metadata accessor for AuthenticateCommand.Request(0) + 20);
  if (*(_QWORD *)(v4 + 8))
  {
    v6 = *(_OWORD *)(v4 + 40);
    sub_2365B0A04();
    swift_bridgeObjectRetain();
    sub_2365B008C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_2365B008C();
    swift_bridgeObjectRelease();
    sub_2365B0A04();
    if ((_QWORD)v6)
      SetupReport.LocaleInfo.hash(into:)();
  }
  return sub_2365B0A04();
}

uint64_t sub_23648E480()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E49656369766564;
  else
    return 0x746E756F636361;
}

uint64_t sub_23648E4C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2364920A0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23648E4E4()
{
  sub_2364904F8();
  return sub_2365B0AD0();
}

uint64_t sub_23648E50C()
{
  sub_2364904F8();
  return sub_2365B0ADC();
}

uint64_t AuthenticateCommand.Request.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  __int128 *v9;
  char v10;
  __int128 v11;
  __int128 v12;
  _BYTE v14[16];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6630);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2364904F8();
  sub_2365B0AAC();
  LOBYTE(v15) = 0;
  type metadata accessor for IdMSAccount();
  sub_23644F0B8(&qword_2563E45F8, (uint64_t (*)(uint64_t))type metadata accessor for IdMSAccount, (uint64_t)&protocol conformance descriptor for IdMSAccount);
  sub_2365B0824();
  if (!v2)
  {
    v9 = (__int128 *)(v3 + *(int *)(type metadata accessor for AuthenticateCommand.Request(0) + 20));
    v10 = *((_BYTE *)v9 + 64);
    v11 = v9[1];
    v15 = *v9;
    v16 = v11;
    v12 = v9[3];
    v17 = v9[2];
    v18 = v12;
    v19 = v10;
    v14[15] = 1;
    sub_23649053C();
    sub_2365B07E8();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

void AuthenticateCommand.Request.hashValue.getter()
{
  uint64_t v1;

  sub_2365B09E0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for IdMSAccount();
  sub_2365AF8D0();
  sub_23644F0B8(&qword_2563E4D80, (uint64_t (*)(uint64_t))MEMORY[0x24BDCCC10], MEMORY[0x24BDCCC28]);
  sub_2365AFFD8();
  __asm { BR              X10 }
}

uint64_t sub_23648E7DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;

  sub_2365B09F8();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A28();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v0 + *(int *)(v1 + 28));
  swift_bridgeObjectRetain();
  sub_2364830F0((uint64_t)&v6, v2);
  swift_bridgeObjectRelease();
  v3 = v0 + *(int *)(type metadata accessor for AuthenticateCommand.Request(0) + 20);
  if (*(_QWORD *)(v3 + 8))
  {
    v5 = *(_OWORD *)(v3 + 40);
    sub_2365B0A04();
    swift_bridgeObjectRetain();
    sub_2365B008C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_2365B008C();
    swift_bridgeObjectRelease();
    sub_2365B0A04();
    if ((_QWORD)v5)
      SetupReport.LocaleInfo.hash(into:)();
  }
  sub_2365B0A04();
  return sub_2365B0A34();
}

uint64_t AuthenticateCommand.Request.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  _QWORD *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;

  v21 = a2;
  *(_QWORD *)&v22 = type metadata accessor for IdMSAccount();
  MEMORY[0x24BDAC7A8](v22);
  *(_QWORD *)&v23 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6648);
  v5 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AuthenticateCommand.Request(0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = &v11[*(int *)(v9 + 20)];
  v12[64] = 0;
  *((_OWORD *)v12 + 2) = 0u;
  *((_OWORD *)v12 + 3) = 0u;
  *(_OWORD *)v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2364904F8();
  sub_2365B0A7C();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return sub_23648DCEC(*(_QWORD *)v12, *((_QWORD *)v12 + 1), *((_QWORD *)v12 + 2), *((_QWORD *)v12 + 3), *((_QWORD *)v12 + 4), *((_QWORD *)v12 + 5));
  }
  else
  {
    v20 = a1;
    v13 = v5;
    LOBYTE(v25) = 0;
    sub_23644F0B8(&qword_2563E4640, (uint64_t (*)(uint64_t))type metadata accessor for IdMSAccount, (uint64_t)&protocol conformance descriptor for IdMSAccount);
    v14 = v23;
    v15 = v24;
    sub_2365B0770();
    sub_23646591C(v14, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for IdMSAccount);
    v31 = 1;
    sub_236490580();
    sub_2365B0734();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v7, v15);
    v23 = v26;
    v24 = v25;
    v22 = v27;
    v16 = v28;
    v17 = v29;
    LOBYTE(v15) = v30;
    sub_23648DCEC(*(_QWORD *)v12, *((_QWORD *)v12 + 1), *((_QWORD *)v12 + 2), *((_QWORD *)v12 + 3), *((_QWORD *)v12 + 4), *((_QWORD *)v12 + 5));
    v18 = v23;
    *(_OWORD *)v12 = v24;
    *((_OWORD *)v12 + 1) = v18;
    *((_OWORD *)v12 + 2) = v22;
    *((_QWORD *)v12 + 6) = v16;
    *((_QWORD *)v12 + 7) = v17;
    v12[64] = v15;
    sub_23648DFF8((uint64_t)v11, v21, type metadata accessor for AuthenticateCommand.Request);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    return sub_236465A18((uint64_t)v11, type metadata accessor for AuthenticateCommand.Request);
  }
}

uint64_t sub_23648EDE4@<X0>(uint64_t a1@<X8>)
{
  return sub_23648FDDC(type metadata accessor for AuthenticateCommand.Request, (void (*)(_QWORD))type metadata accessor for V1Command.Request, a1);
}

uint64_t sub_23648EE00@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AuthenticateCommand.Request.init(from:)(a1, a2);
}

uint64_t sub_23648EE14(_QWORD *a1)
{
  return AuthenticateCommand.Request.encode(to:)(a1);
}

void sub_23648EE30()
{
  uint64_t v1;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for IdMSAccount();
  sub_2365AF8D0();
  sub_23644F0B8(&qword_2563E4D80, (uint64_t (*)(uint64_t))MEMORY[0x24BDCCC10], MEMORY[0x24BDCCC28]);
  sub_2365AFFD8();
  __asm { BR              X10 }
}

uint64_t sub_23648EF58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int128 v7;

  sub_2365B09F8();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A28();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v1 + *(int *)(v2 + 28));
  swift_bridgeObjectRetain();
  sub_2364830F0(v0, v3);
  swift_bridgeObjectRelease();
  v4 = v1 + *(int *)(v6 + 20);
  if (*(_QWORD *)(v4 + 8))
  {
    v7 = *(_OWORD *)(v4 + 40);
    sub_2365B0A04();
    swift_bridgeObjectRetain();
    sub_2365B008C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_2365B008C();
    swift_bridgeObjectRelease();
    sub_2365B0A04();
    if ((_QWORD)v7)
      SetupReport.LocaleInfo.hash(into:)();
  }
  return sub_2365B0A04();
}

void sub_23648F258()
{
  uint64_t v1;

  sub_2365B09E0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for IdMSAccount();
  sub_2365AF8D0();
  sub_23644F0B8(&qword_2563E4D80, (uint64_t (*)(uint64_t))MEMORY[0x24BDCCC10], MEMORY[0x24BDCCC28]);
  sub_2365AFFD8();
  __asm { BR              X10 }
}

uint64_t sub_23648F384()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  sub_2365B09F8();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A28();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v0 + *(int *)(v1 + 28));
  swift_bridgeObjectRetain();
  sub_2364830F0((uint64_t)&v7, v2);
  swift_bridgeObjectRelease();
  v3 = v0 + *(int *)(v5 + 20);
  if (*(_QWORD *)(v3 + 8))
  {
    v6 = *(_OWORD *)(v3 + 40);
    sub_2365B0A04();
    swift_bridgeObjectRetain();
    sub_2365B008C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_2365B008C();
    swift_bridgeObjectRelease();
    sub_2365B0A04();
    if ((_QWORD)v6)
      SetupReport.LocaleInfo.hash(into:)();
  }
  sub_2365B0A04();
  return sub_2365B0A34();
}

uint64_t AuthenticateCommand.Response.result.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6658);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t AuthenticateCommand.Response.result.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6658);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*AuthenticateCommand.Response.result.modify())()
{
  return nullsub_1;
}

uint64_t AuthenticateCommand.Response.init(result:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6658);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t AuthenticateCommand.Response.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);

  type metadata accessor for V1Command(0);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v8 = type metadata accessor for V1Command;
LABEL_6:
    sub_236465A18(a1, v8);
    v4 = type metadata accessor for AuthenticateCommand.Response(0);
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
    v6 = a2;
    v7 = 1;
    return v5(v6, v7, 1, v4);
  }
  type metadata accessor for V1Command.Response(0);
  if (swift_getEnumCaseMultiPayload() != 3)
  {
    v8 = type metadata accessor for V1Command.Response;
    goto LABEL_6;
  }
  sub_23646591C(a1, a2, type metadata accessor for AuthenticateCommand.Response);
  v4 = type metadata accessor for AuthenticateCommand.Response(0);
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
  v6 = a2;
  v7 = 0;
  return v5(v6, v7, 1, v4);
}

uint64_t AuthenticateCommand.Response.into()@<X0>(uint64_t a1@<X8>)
{
  return sub_23648F83C(type metadata accessor for AuthenticateCommand.Response, (void (*)(_QWORD))type metadata accessor for V1Command.Response, a1);
}

uint64_t sub_23648F83C@<X0>(uint64_t (*a1)(_QWORD)@<X0>, void (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  sub_23646591C(v3, a3, a1);
  a2(0);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for V1Command(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t static AuthenticateCommand.Response.== infix(_:_:)()
{
  sub_23649060C();
  sub_236490650();
  sub_236490694();
  return sub_2365AFB10();
}

uint64_t AuthenticateCommand.Response.hash(into:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6658);
  sub_23649082C((unint64_t *)&qword_2563E6670, (uint64_t (*)(void))sub_2364906D8, (uint64_t (*)(void))sub_23649071C, MEMORY[0x24BDFC460]);
  return sub_2365AFFD8();
}

uint64_t sub_23648F968()
{
  return 0x746C75736572;
}

uint64_t sub_23648F97C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x746C75736572 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_2365B08CC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23648FA08()
{
  sub_236490760();
  return sub_2365B0AD0();
}

uint64_t sub_23648FA30()
{
  sub_236490760();
  return sub_2365B0ADC();
}

uint64_t AuthenticateCommand.Response.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6688);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_236490760();
  sub_2365B0AAC();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6658);
  sub_23649082C(&qword_2563E6698, (uint64_t (*)(void))sub_2364907A4, (uint64_t (*)(void))sub_2364907E8, MEMORY[0x24BDFC458]);
  sub_2365B0824();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t AuthenticateCommand.Response.hashValue.getter()
{
  sub_2365B09E0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6658);
  sub_23649082C((unint64_t *)&qword_2563E6670, (uint64_t (*)(void))sub_2364906D8, (uint64_t (*)(void))sub_23649071C, MEMORY[0x24BDFC460]);
  sub_2365AFFD8();
  return sub_2365B0A34();
}

uint64_t AuthenticateCommand.Response.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v15 = a2;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6658);
  v14 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v16 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E66B0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AuthenticateCommand.Response(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_236490760();
  sub_2365B0A7C();
  if (!v2)
  {
    sub_23649082C(&qword_2563E66B8, (uint64_t (*)(void))sub_2364908A8, (uint64_t (*)(void))sub_2364908EC, MEMORY[0x24BDFC470]);
    sub_2365B0770();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v16, v17);
    sub_23646591C((uint64_t)v11, v15, type metadata accessor for AuthenticateCommand.Response);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_23648FDC4@<X0>(uint64_t a1@<X8>)
{
  return sub_23648FDDC(type metadata accessor for AuthenticateCommand.Response, (void (*)(_QWORD))type metadata accessor for V1Command.Response, a1);
}

uint64_t sub_23648FDDC@<X0>(uint64_t (*a1)(_QWORD)@<X2>, void (*a2)(_QWORD)@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;

  sub_23646591C(v3, a3, a1);
  a2(0);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for V1Command(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_23648FE40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t);

  type metadata accessor for V1Command(0);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v7 = type metadata accessor for V1Command;
LABEL_6:
    sub_236465A18(a1, v7);
    v6 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, v6, 1, a2);
  }
  type metadata accessor for V1Command.Response(0);
  if (swift_getEnumCaseMultiPayload() != 3)
  {
    v7 = type metadata accessor for V1Command.Response;
    goto LABEL_6;
  }
  sub_23646591C(a1, a3, type metadata accessor for AuthenticateCommand.Response);
  v6 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, v6, 1, a2);
}

uint64_t sub_23648FEF4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AuthenticateCommand.Response.init(from:)(a1, a2);
}

uint64_t sub_23648FF08(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6688);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_236490760();
  sub_2365B0AAC();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6658);
  sub_23649082C(&qword_2563E6698, (uint64_t (*)(void))sub_2364907A4, (uint64_t (*)(void))sub_2364907E8, MEMORY[0x24BDFC458]);
  sub_2365B0824();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_236490024()
{
  sub_23649060C();
  sub_236490650();
  sub_236490694();
  return sub_2365AFB10();
}

uint64_t sub_236490084()
{
  sub_2365B09E0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6658);
  sub_23649082C((unint64_t *)&qword_2563E6670, (uint64_t (*)(void))sub_2364906D8, (uint64_t (*)(void))sub_23649071C, MEMORY[0x24BDFC460]);
  sub_2365AFFD8();
  return sub_2365B0A34();
}

uint64_t sub_2364900FC()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6658);
  sub_23649082C((unint64_t *)&qword_2563E6670, (uint64_t (*)(void))sub_2364906D8, (uint64_t (*)(void))sub_23649071C, MEMORY[0x24BDFC460]);
  return sub_2365AFFD8();
}

uint64_t sub_236490160()
{
  sub_2365B09E0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6658);
  sub_23649082C((unint64_t *)&qword_2563E6670, (uint64_t (*)(void))sub_2364906D8, (uint64_t (*)(void))sub_23649071C, MEMORY[0x24BDFC460]);
  sub_2365AFFD8();
  return sub_2365B0A34();
}

BOOL _s12AppleIDSetup19AuthenticateCommandV7RequestV2eeoiySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  char v5;
  _BOOL8 result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char v69;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = sub_2365B08CC(), result = 0, (v5 & 1) != 0))
  {
    v7 = type metadata accessor for IdMSAccount();
    if ((sub_2365AF8B8() & 1) != 0)
    {
      v8 = (char *)a1 + *(int *)(v7 + 24);
      v9 = *((_QWORD *)v8 + 8);
      v10 = v8[72];
      v11 = *((_OWORD *)v8 + 1);
      v50 = *(_OWORD *)v8;
      v51 = v11;
      v12 = *((_OWORD *)v8 + 3);
      v52 = *((_OWORD *)v8 + 2);
      v53 = v12;
      v54 = v9;
      LOBYTE(v55) = v10;
      v13 = (char *)a2 + *(int *)(v7 + 24);
      v14 = *((_QWORD *)v13 + 8);
      v15 = v13[72];
      v16 = *((_OWORD *)v13 + 1);
      v64 = *(_OWORD *)v13;
      v65 = v16;
      v17 = *((_OWORD *)v13 + 3);
      v66 = *((_OWORD *)v13 + 2);
      v67 = v17;
      v68 = v14;
      v69 = v15;
      _s12AppleIDSetup11IdMSAccountV10CredentialO2eeoiySbAE_AEtFZ_0((uint64_t)&v50);
      if ((v18 & 1) != 0
        && (sub_2365A28C4(*(_QWORD *)((char *)a1 + *(int *)(v7 + 28)), *(_QWORD *)((char *)a2 + *(int *)(v7 + 28))) & 1) != 0)
      {
        v19 = *(int *)(type metadata accessor for AuthenticateCommand.Request(0) + 20);
        v20 = (char *)a1 + v19;
        v21 = *(_QWORD *)((char *)a1 + v19);
        v22 = *(_QWORD *)((char *)a1 + v19 + 8);
        v23 = *(_QWORD *)((char *)a1 + v19 + 16);
        v24 = *(_QWORD *)((char *)a1 + v19 + 24);
        v26 = *(_QWORD *)((char *)a1 + v19 + 32);
        v25 = *(_QWORD *)((char *)a1 + v19 + 40);
        v28 = *(_QWORD *)((char *)a1 + v19 + 48);
        v27 = *(_QWORD *)((char *)a1 + v19 + 56);
        v29 = v20[64];
        v30 = (char *)a2 + v19;
        v32 = *(_QWORD *)v30;
        v31 = *((_QWORD *)v30 + 1);
        v34 = *((_QWORD *)v30 + 2);
        v33 = *((_QWORD *)v30 + 3);
        v35 = *((_QWORD *)v30 + 4);
        v36 = *((_QWORD *)v30 + 5);
        v37 = *((_QWORD *)v30 + 6);
        v38 = *((_QWORD *)v30 + 7);
        v39 = v30[64];
        if (v22)
        {
          *(_QWORD *)&v50 = v21;
          *((_QWORD *)&v50 + 1) = v22;
          *(_QWORD *)&v51 = v23;
          *((_QWORD *)&v51 + 1) = v24;
          *(_QWORD *)&v52 = v26;
          *((_QWORD *)&v52 + 1) = v25;
          *(_QWORD *)&v53 = v28;
          *((_QWORD *)&v53 + 1) = v27;
          LOBYTE(v54) = v29;
          v48 = v21;
          v49 = v23;
          v47 = v29;
          if (v31)
          {
            *(_QWORD *)&v64 = v32;
            *((_QWORD *)&v64 + 1) = v31;
            *(_QWORD *)&v65 = v34;
            *((_QWORD *)&v65 + 1) = v33;
            *(_QWORD *)&v66 = v35;
            *((_QWORD *)&v66 + 1) = v36;
            *(_QWORD *)&v67 = v37;
            *((_QWORD *)&v67 + 1) = v38;
            LOBYTE(v68) = v39 & 1;
            sub_23648DBC0(v21, v22, v23, v24, v26, v25);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_23648DC24(v26, v25);
            v45 = _s12AppleIDSetup11IdMSAccountV10DeviceInfoV2eeoiySbAE_AEtFZ_0((uint64_t)&v50, (uint64_t)&v64);
            v40 = v52;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_23648DD50(v40, *((uint64_t *)&v40 + 1));
            sub_23648DCEC(v48, v22, v49, v24, v26, v25);
            return (v45 & 1) != 0;
          }
          v44 = v37;
          v46 = v38;
          v42 = v35;
          v43 = v36;
          v41 = v33;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_23648DC24(v26, v25);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_23648DC24(v26, v25);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_23648DD50(v26, v25);
          v33 = v41;
          v35 = v42;
          v36 = v43;
          v37 = v44;
          v38 = v46;
          v29 = v47;
          v21 = v48;
          v23 = v49;
        }
        else if (!v31)
        {
          return 1;
        }
        *(_QWORD *)&v50 = v21;
        *((_QWORD *)&v50 + 1) = v22;
        *(_QWORD *)&v51 = v23;
        *((_QWORD *)&v51 + 1) = v24;
        *(_QWORD *)&v52 = v26;
        *((_QWORD *)&v52 + 1) = v25;
        *(_QWORD *)&v53 = v28;
        *((_QWORD *)&v53 + 1) = v27;
        LOBYTE(v54) = v29;
        v55 = v32;
        v56 = v31;
        v57 = v34;
        v58 = v33;
        v59 = v35;
        v60 = v36;
        v61 = v37;
        v62 = v38;
        v63 = v39;
        sub_23648DBC0(v32, v31, v34, v33, v35, v36);
        sub_23649219C((uint64_t *)&v50);
      }
    }
    return 0;
  }
  return result;
}

unint64_t sub_2364904F8()
{
  unint64_t result;

  result = qword_2563E6638;
  if (!qword_2563E6638)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B7AFC, &type metadata for AuthenticateCommand.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6638);
  }
  return result;
}

unint64_t sub_23649053C()
{
  unint64_t result;

  result = qword_2563E6640;
  if (!qword_2563E6640)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for IdMSAccount.DeviceInfo, &type metadata for IdMSAccount.DeviceInfo);
    atomic_store(result, (unint64_t *)&qword_2563E6640);
  }
  return result;
}

unint64_t sub_236490580()
{
  unint64_t result;

  result = qword_2563E6650;
  if (!qword_2563E6650)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for IdMSAccount.DeviceInfo, &type metadata for IdMSAccount.DeviceInfo);
    atomic_store(result, (unint64_t *)&qword_2563E6650);
  }
  return result;
}

uint64_t type metadata accessor for AuthenticateCommand.Response(uint64_t a1)
{
  return sub_2364905D8(a1, qword_2563E6918);
}

uint64_t sub_2364905D8(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_23649060C()
{
  unint64_t result;

  result = qword_2563E6660;
  if (!qword_2563E6660)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for IdMSAccount.SRPResults, &type metadata for IdMSAccount.SRPResults);
    atomic_store(result, (unint64_t *)&qword_2563E6660);
  }
  return result;
}

unint64_t sub_236490650()
{
  unint64_t result;

  result = qword_2563E6668;
  if (!qword_2563E6668)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RemoteError, &type metadata for RemoteError);
    atomic_store(result, (unint64_t *)&qword_2563E6668);
  }
  return result;
}

unint64_t sub_236490694()
{
  unint64_t result;

  result = qword_2542A7F00[0];
  if (!qword_2542A7F00[0])
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RemoteError, &type metadata for RemoteError);
    atomic_store(result, qword_2542A7F00);
  }
  return result;
}

unint64_t sub_2364906D8()
{
  unint64_t result;

  result = qword_2563E6678;
  if (!qword_2563E6678)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for IdMSAccount.SRPResults, &type metadata for IdMSAccount.SRPResults);
    atomic_store(result, (unint64_t *)&qword_2563E6678);
  }
  return result;
}

unint64_t sub_23649071C()
{
  unint64_t result;

  result = qword_2563E6680;
  if (!qword_2563E6680)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RemoteError, &type metadata for RemoteError);
    atomic_store(result, (unint64_t *)&qword_2563E6680);
  }
  return result;
}

unint64_t sub_236490760()
{
  unint64_t result;

  result = qword_2563E6690;
  if (!qword_2563E6690)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B7AAC, &type metadata for AuthenticateCommand.Response.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6690);
  }
  return result;
}

unint64_t sub_2364907A4()
{
  unint64_t result;

  result = qword_2563E66A0;
  if (!qword_2563E66A0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for IdMSAccount.SRPResults, &type metadata for IdMSAccount.SRPResults);
    atomic_store(result, (unint64_t *)&qword_2563E66A0);
  }
  return result;
}

unint64_t sub_2364907E8()
{
  unint64_t result;

  result = qword_2563E66A8;
  if (!qword_2563E66A8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RemoteError, &type metadata for RemoteError);
    atomic_store(result, (unint64_t *)&qword_2563E66A8);
  }
  return result;
}

uint64_t sub_23649082C(unint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2563E6658);
    v10[0] = a2();
    v10[1] = a3();
    result = MEMORY[0x23B7F5164](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_2364908A8()
{
  unint64_t result;

  result = qword_2563E66C0;
  if (!qword_2563E66C0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for IdMSAccount.SRPResults, &type metadata for IdMSAccount.SRPResults);
    atomic_store(result, (unint64_t *)&qword_2563E66C0);
  }
  return result;
}

unint64_t sub_2364908EC()
{
  unint64_t result;

  result = qword_2563E66C8;
  if (!qword_2563E66C8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RemoteError, &type metadata for RemoteError);
    atomic_store(result, (unint64_t *)&qword_2563E66C8);
  }
  return result;
}

unint64_t sub_236490934()
{
  unint64_t result;

  result = qword_2563E66D0;
  if (!qword_2563E66D0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticateCommand, &type metadata for AuthenticateCommand);
    atomic_store(result, (unint64_t *)&qword_2563E66D0);
  }
  return result;
}

uint64_t sub_236490978(uint64_t a1)
{
  uint64_t result;

  result = sub_23644F0B8(&qword_2563E6700, type metadata accessor for AuthenticateCommand.Request, (uint64_t)&protocol conformance descriptor for AuthenticateCommand.Request);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_2364909B8()
{
  unint64_t result;

  result = qword_2563E6708;
  if (!qword_2563E6708)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AuthenticateCommand, &type metadata for AuthenticateCommand);
    atomic_store(result, (unint64_t *)&qword_2563E6708);
  }
  return result;
}

uint64_t sub_2364909FC(uint64_t a1)
{
  uint64_t result;

  result = sub_23644F0B8(&qword_2563E6730, type metadata accessor for AuthenticateCommand.Request, (uint64_t)&protocol conformance descriptor for AuthenticateCommand.Request);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_236490A38(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_23644F0B8(&qword_2563E6738, type metadata accessor for AuthenticateCommand.Request, (uint64_t)&protocol conformance descriptor for AuthenticateCommand.Request);
  a1[2] = sub_23644F0B8(&qword_2563E6740, type metadata accessor for AuthenticateCommand.Request, (uint64_t)&protocol conformance descriptor for AuthenticateCommand.Request);
  result = sub_23644F0B8(&qword_2563E6748, type metadata accessor for AuthenticateCommand.Request, (uint64_t)&protocol conformance descriptor for AuthenticateCommand.Request);
  a1[3] = result;
  return result;
}

uint64_t sub_236490AB0()
{
  return sub_23644F0B8(&qword_2563E6750, type metadata accessor for AuthenticateCommand.Request, (uint64_t)&protocol conformance descriptor for AuthenticateCommand.Request);
}

uint64_t sub_236490ADC(uint64_t a1)
{
  uint64_t result;

  result = sub_23644F0B8(&qword_2563E6780, type metadata accessor for AuthenticateCommand.Response, (uint64_t)&protocol conformance descriptor for AuthenticateCommand.Response);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_236490B18(uint64_t a1)
{
  uint64_t result;

  result = sub_23644F0B8(&qword_2563E67A8, type metadata accessor for AuthenticateCommand.Response, (uint64_t)&protocol conformance descriptor for AuthenticateCommand.Response);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_236490B54(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_23644F0B8(&qword_2563E67B0, type metadata accessor for AuthenticateCommand.Response, (uint64_t)&protocol conformance descriptor for AuthenticateCommand.Response);
  a1[2] = sub_23644F0B8(&qword_2563E67B8, type metadata accessor for AuthenticateCommand.Response, (uint64_t)&protocol conformance descriptor for AuthenticateCommand.Response);
  result = sub_23644F0B8(&qword_2563E67C0, type metadata accessor for AuthenticateCommand.Response, (uint64_t)&protocol conformance descriptor for AuthenticateCommand.Response);
  a1[3] = result;
  return result;
}

uint64_t sub_236490BCC()
{
  return sub_23644F0B8(&qword_2563E67C8, type metadata accessor for AuthenticateCommand.Response, (uint64_t)&protocol conformance descriptor for AuthenticateCommand.Response);
}

uint64_t sub_236490BF8()
{
  return sub_23644F0B8(&qword_2563E67D0, type metadata accessor for AuthenticateCommand.Request, (uint64_t)&protocol conformance descriptor for AuthenticateCommand.Request);
}

uint64_t sub_236490C24()
{
  return sub_23644F0B8(&qword_2563E67D8, type metadata accessor for AuthenticateCommand.Response, (uint64_t)&protocol conformance descriptor for AuthenticateCommand.Response);
}

unint64_t sub_236490C50(uint64_t a1)
{
  unint64_t result;

  result = sub_2364909B8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_236490C74()
{
  return sub_23644F0B8(&qword_2563E6700, type metadata accessor for AuthenticateCommand.Request, (uint64_t)&protocol conformance descriptor for AuthenticateCommand.Request);
}

uint64_t sub_236490CA0()
{
  return sub_23644F0B8(&qword_2563E6780, type metadata accessor for AuthenticateCommand.Response, (uint64_t)&protocol conformance descriptor for AuthenticateCommand.Response);
}

ValueMetadata *type metadata accessor for AuthenticateCommand()
{
  return &type metadata for AuthenticateCommand;
}

uint64_t *initializeBufferWithCopyOfBuffer for AuthenticateCommand.Request(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v33 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v33 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    v9 = a2[7];
    a1[6] = a2[6];
    a1[7] = v9;
    v10 = a2[9];
    a1[8] = a2[8];
    a1[9] = v10;
    v11 = type metadata accessor for IdMSAccount();
    v12 = *(int *)(v11 + 20);
    v13 = v11;
    v41 = (char *)v4 + v12;
    v42 = v11;
    v39 = (char *)a2 + v12;
    v14 = sub_2365AF8D0();
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15(v41, v39, v14);
    v16 = *(int *)(v13 + 24);
    v17 = (char *)v4 + v16;
    v18 = (char *)a2 + v16;
    v19 = *(_QWORD *)v18;
    v20 = *((_QWORD *)v18 + 1);
    v21 = *((_QWORD *)v18 + 2);
    v22 = *((_QWORD *)v18 + 3);
    v23 = *((_QWORD *)v18 + 4);
    v24 = *((_QWORD *)v18 + 5);
    v25 = *((_QWORD *)v18 + 7);
    v38 = *((_QWORD *)v18 + 6);
    v40 = *((_QWORD *)v18 + 8);
    LOBYTE(v41) = v18[72];
    sub_23645F8F8(*(_QWORD *)v18, v20, v21, v22, v23, v24, v38, v25, v40, (char)v41);
    *(_QWORD *)v17 = v19;
    *((_QWORD *)v17 + 1) = v20;
    *((_QWORD *)v17 + 2) = v21;
    *((_QWORD *)v17 + 3) = v22;
    *((_QWORD *)v17 + 4) = v23;
    *((_QWORD *)v17 + 5) = v24;
    *((_QWORD *)v17 + 6) = v38;
    *((_QWORD *)v17 + 7) = v25;
    *((_QWORD *)v17 + 8) = v40;
    v17[72] = (char)v41;
    *(uint64_t *)((char *)v4 + *(int *)(v42 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(v42 + 28));
    v26 = *(int *)(a3 + 20);
    v27 = (char *)v4 + v26;
    v28 = (char *)a2 + v26;
    v29 = *(uint64_t *)((char *)a2 + v26 + 8);
    swift_bridgeObjectRetain();
    if (v29)
    {
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *((_QWORD *)v27 + 1) = v29;
      v30 = *((_QWORD *)v28 + 3);
      *((_QWORD *)v27 + 2) = *((_QWORD *)v28 + 2);
      *((_QWORD *)v27 + 3) = v30;
      v31 = *((_QWORD *)v28 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v31)
      {
        *((_QWORD *)v27 + 4) = *((_QWORD *)v28 + 4);
        *((_QWORD *)v27 + 5) = v31;
        v32 = *((_QWORD *)v28 + 7);
        *((_QWORD *)v27 + 6) = *((_QWORD *)v28 + 6);
        *((_QWORD *)v27 + 7) = v32;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v36 = *((_OWORD *)v28 + 3);
        *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
        *((_OWORD *)v27 + 3) = v36;
      }
      v27[64] = v28[64];
    }
    else
    {
      v34 = *((_OWORD *)v28 + 3);
      *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
      *((_OWORD *)v27 + 3) = v34;
      v27[64] = v28[64];
      v35 = *((_OWORD *)v28 + 1);
      *(_OWORD *)v27 = *(_OWORD *)v28;
      *((_OWORD *)v27 + 1) = v35;
    }
  }
  return v4;
}

uint64_t destroy for AuthenticateCommand.Request(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = type metadata accessor for IdMSAccount();
  v5 = a1 + *(int *)(v4 + 20);
  v6 = sub_2365AF8D0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(v4 + 24);
  sub_23645FAF8(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), *(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 40), *(_QWORD *)(v7 + 48), *(_QWORD *)(v7 + 56), *(_QWORD *)(v7 + 64), *(_BYTE *)(v7 + 72));
  swift_bridgeObjectRelease();
  v8 = a1 + *(int *)(a2 + 20);
  result = *(_QWORD *)(v8 + 8);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = *(_QWORD *)(v8 + 40);
    if (result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

_QWORD *initializeWithCopy for AuthenticateCommand.Request(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  v8 = a2[7];
  a1[6] = a2[6];
  a1[7] = v8;
  v9 = a2[9];
  a1[8] = a2[8];
  a1[9] = v9;
  v10 = type metadata accessor for IdMSAccount();
  v11 = *(int *)(v10 + 20);
  v38 = (char *)a1 + v11;
  v39 = v10;
  v36 = (char *)a2 + v11;
  v12 = sub_2365AF8D0();
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v38, v36, v12);
  v14 = *(int *)(v10 + 24);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *((_QWORD *)v16 + 1);
  v18 = *((_QWORD *)v16 + 2);
  v19 = *((_QWORD *)v16 + 3);
  v20 = *((_QWORD *)v16 + 4);
  v21 = *((_QWORD *)v16 + 5);
  v23 = *((_QWORD *)v16 + 6);
  v22 = *((_QWORD *)v16 + 7);
  v35 = *(_QWORD *)v16;
  v37 = *((_QWORD *)v16 + 8);
  LOBYTE(v38) = v16[72];
  sub_23645F8F8(*(_QWORD *)v16, v17, v18, v19, v20, v21, v23, v22, v37, (char)v38);
  *(_QWORD *)v15 = v35;
  *((_QWORD *)v15 + 1) = v17;
  *((_QWORD *)v15 + 2) = v18;
  *((_QWORD *)v15 + 3) = v19;
  *((_QWORD *)v15 + 4) = v20;
  *((_QWORD *)v15 + 5) = v21;
  *((_QWORD *)v15 + 6) = v23;
  *((_QWORD *)v15 + 7) = v22;
  *((_QWORD *)v15 + 8) = v37;
  v15[72] = (char)v38;
  *(_QWORD *)((char *)a1 + *(int *)(v39 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(v39 + 28));
  v24 = *(int *)(a3 + 20);
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = *(_QWORD *)((char *)a2 + v24 + 8);
  swift_bridgeObjectRetain();
  if (v27)
  {
    *(_QWORD *)v25 = *(_QWORD *)v26;
    *((_QWORD *)v25 + 1) = v27;
    v28 = *((_QWORD *)v26 + 3);
    *((_QWORD *)v25 + 2) = *((_QWORD *)v26 + 2);
    *((_QWORD *)v25 + 3) = v28;
    v29 = *((_QWORD *)v26 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v29)
    {
      *((_QWORD *)v25 + 4) = *((_QWORD *)v26 + 4);
      *((_QWORD *)v25 + 5) = v29;
      v30 = *((_QWORD *)v26 + 7);
      *((_QWORD *)v25 + 6) = *((_QWORD *)v26 + 6);
      *((_QWORD *)v25 + 7) = v30;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v33 = *((_OWORD *)v26 + 3);
      *((_OWORD *)v25 + 2) = *((_OWORD *)v26 + 2);
      *((_OWORD *)v25 + 3) = v33;
    }
    v25[64] = v26[64];
  }
  else
  {
    v31 = *((_OWORD *)v26 + 3);
    *((_OWORD *)v25 + 2) = *((_OWORD *)v26 + 2);
    *((_OWORD *)v25 + 3) = v31;
    v25[64] = v26[64];
    v32 = *((_OWORD *)v26 + 1);
    *(_OWORD *)v25 = *(_OWORD *)v26;
    *((_OWORD *)v25 + 1) = v32;
  }
  return a1;
}

_QWORD *assignWithCopy for AuthenticateCommand.Request(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  _OWORD *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = type metadata accessor for IdMSAccount();
  v6 = *(int *)(v5 + 20);
  v7 = v5;
  v53 = v5;
  v8 = (char *)a1 + v6;
  v9 = (char *)a2 + v6;
  v10 = sub_2365AF8D0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(v7 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = *(_QWORD *)v13;
  v15 = *((_QWORD *)v13 + 1);
  v16 = *((_QWORD *)v13 + 2);
  v17 = *((_QWORD *)v13 + 3);
  v18 = *((_QWORD *)v13 + 4);
  v19 = *((_QWORD *)v13 + 5);
  v20 = *((_QWORD *)v13 + 7);
  v50 = *((_QWORD *)v13 + 6);
  v51 = *((_QWORD *)v13 + 8);
  v52 = v13[72];
  sub_23645F8F8(*(_QWORD *)v13, v15, v16, v17, v18, v19, v50, v20, v51, v52);
  v21 = *(_QWORD *)v12;
  v22 = *((_QWORD *)v12 + 1);
  v23 = *((_QWORD *)v12 + 2);
  v24 = *((_QWORD *)v12 + 3);
  v25 = *((_QWORD *)v12 + 4);
  v26 = *((_QWORD *)v12 + 5);
  v27 = *((_QWORD *)v12 + 6);
  v28 = *((_QWORD *)v12 + 7);
  v29 = *((_QWORD *)v12 + 8);
  v30 = v12[72];
  *(_QWORD *)v12 = v14;
  *((_QWORD *)v12 + 1) = v15;
  *((_QWORD *)v12 + 2) = v16;
  *((_QWORD *)v12 + 3) = v17;
  *((_QWORD *)v12 + 4) = v18;
  *((_QWORD *)v12 + 5) = v19;
  *((_QWORD *)v12 + 6) = v50;
  *((_QWORD *)v12 + 7) = v20;
  *((_QWORD *)v12 + 8) = v51;
  v12[72] = v52;
  sub_23645FAF8(v21, v22, v23, v24, v25, v26, v27, v28, v29, v30);
  *(_QWORD *)((char *)a1 + *(int *)(v53 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(v53 + 28));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v31 = *(int *)(a3 + 20);
  v32 = (uint64_t)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *(_QWORD *)((char *)a1 + v31 + 8);
  v35 = *((_QWORD *)v33 + 1);
  if (v34)
  {
    if (v35)
    {
      *(_QWORD *)v32 = *(_QWORD *)v33;
      *(_QWORD *)(v32 + 8) = *((_QWORD *)v33 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v32 + 16) = *((_QWORD *)v33 + 2);
      *(_QWORD *)(v32 + 24) = *((_QWORD *)v33 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v36 = (_OWORD *)(v32 + 32);
      v37 = v33 + 32;
      v38 = *((_QWORD *)v33 + 5);
      if (*(_QWORD *)(v32 + 40))
      {
        if (v38)
        {
          *(_QWORD *)(v32 + 32) = *((_QWORD *)v33 + 4);
          *(_QWORD *)(v32 + 40) = *((_QWORD *)v33 + 5);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v32 + 48) = *((_QWORD *)v33 + 6);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v32 + 56) = *((_QWORD *)v33 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        else
        {
          sub_2364915D0(v32 + 32);
          v47 = *((_OWORD *)v33 + 3);
          *v36 = *v37;
          *(_OWORD *)(v32 + 48) = v47;
        }
        goto LABEL_15;
      }
      if (!v38)
      {
        v48 = *((_OWORD *)v33 + 3);
        *v36 = *v37;
        *(_OWORD *)(v32 + 48) = v48;
        goto LABEL_15;
      }
      goto LABEL_11;
    }
    sub_236491604(v32);
    *(_OWORD *)v32 = *(_OWORD *)v33;
    v42 = *((_OWORD *)v33 + 2);
    v41 = *((_OWORD *)v33 + 3);
    v43 = *((_OWORD *)v33 + 1);
    *(_BYTE *)(v32 + 64) = v33[64];
    *(_OWORD *)(v32 + 32) = v42;
    *(_OWORD *)(v32 + 48) = v41;
    *(_OWORD *)(v32 + 16) = v43;
  }
  else
  {
    if (v35)
    {
      *(_QWORD *)v32 = *(_QWORD *)v33;
      *(_QWORD *)(v32 + 8) = *((_QWORD *)v33 + 1);
      *(_QWORD *)(v32 + 16) = *((_QWORD *)v33 + 2);
      *(_QWORD *)(v32 + 24) = *((_QWORD *)v33 + 3);
      v39 = *((_QWORD *)v33 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v39)
      {
        v40 = *((_OWORD *)v33 + 3);
        *(_OWORD *)(v32 + 32) = *((_OWORD *)v33 + 2);
        *(_OWORD *)(v32 + 48) = v40;
LABEL_15:
        *(_BYTE *)(v32 + 64) = v33[64];
        return a1;
      }
LABEL_11:
      *(_QWORD *)(v32 + 32) = *((_QWORD *)v33 + 4);
      *(_QWORD *)(v32 + 40) = *((_QWORD *)v33 + 5);
      *(_QWORD *)(v32 + 48) = *((_QWORD *)v33 + 6);
      *(_QWORD *)(v32 + 56) = *((_QWORD *)v33 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_15;
    }
    *(_OWORD *)v32 = *(_OWORD *)v33;
    v44 = *((_OWORD *)v33 + 1);
    v45 = *((_OWORD *)v33 + 2);
    v46 = *((_OWORD *)v33 + 3);
    *(_BYTE *)(v32 + 64) = v33[64];
    *(_OWORD *)(v32 + 32) = v45;
    *(_OWORD *)(v32 + 48) = v46;
    *(_OWORD *)(v32 + 16) = v44;
  }
  return a1;
}

uint64_t sub_2364915D0(uint64_t a1)
{
  destroy for SetupReport.LocaleInfo();
  return a1;
}

uint64_t sub_236491604(uint64_t a1)
{
  destroy for IdMSAccount.DeviceInfo(a1);
  return a1;
}

_OWORD *initializeWithTake for AuthenticateCommand.Request(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;

  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  a1[4] = a2[4];
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  v8 = (int *)type metadata accessor for IdMSAccount();
  v9 = v8[5];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = sub_2365AF8D0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  v13 = v8[6];
  v14 = (_OWORD *)((char *)a1 + v13);
  v15 = (_OWORD *)((char *)a2 + v13);
  v16 = v15[3];
  v14[2] = v15[2];
  v14[3] = v16;
  *(_OWORD *)((char *)v14 + 57) = *(_OWORD *)((char *)v15 + 57);
  v17 = v15[1];
  *v14 = *v15;
  v14[1] = v17;
  *(_QWORD *)((char *)a1 + v8[7]) = *(_QWORD *)((char *)a2 + v8[7]);
  v18 = *(int *)(a3 + 20);
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = *((_OWORD *)v20 + 3);
  *((_OWORD *)v19 + 2) = *((_OWORD *)v20 + 2);
  *((_OWORD *)v19 + 3) = v21;
  v19[64] = v20[64];
  v22 = *((_OWORD *)v20 + 1);
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *((_OWORD *)v19 + 1) = v22;
  return a1;
}

_QWORD *assignWithTake for AuthenticateCommand.Request(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease();
  v10 = a2[9];
  a1[8] = a2[8];
  a1[9] = v10;
  swift_bridgeObjectRelease();
  v11 = (int *)type metadata accessor for IdMSAccount();
  v12 = v11[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_2365AF8D0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = v11[6];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *((_QWORD *)v18 + 8);
  v20 = v18[72];
  v21 = *(_QWORD *)v17;
  v22 = *((_QWORD *)v17 + 1);
  v23 = *((_QWORD *)v17 + 2);
  v24 = *((_QWORD *)v17 + 3);
  v25 = *((_QWORD *)v17 + 4);
  v26 = *((_QWORD *)v17 + 5);
  v27 = *((_QWORD *)v17 + 6);
  v28 = *((_QWORD *)v17 + 7);
  v29 = *((_QWORD *)v17 + 8);
  v30 = v17[72];
  v31 = *((_OWORD *)v18 + 1);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v31;
  v32 = *((_OWORD *)v18 + 3);
  *((_OWORD *)v17 + 2) = *((_OWORD *)v18 + 2);
  *((_OWORD *)v17 + 3) = v32;
  *((_QWORD *)v17 + 8) = v19;
  v17[72] = v20;
  sub_23645FAF8(v21, v22, v23, v24, v25, v26, v27, v28, v29, v30);
  *(_QWORD *)((char *)a1 + v11[7]) = *(_QWORD *)((char *)a2 + v11[7]);
  swift_bridgeObjectRelease();
  v33 = *(int *)(a3 + 20);
  v34 = (uint64_t)a1 + v33;
  v35 = (char *)a2 + v33;
  if (*(_QWORD *)((char *)a1 + v33 + 8))
  {
    v36 = *((_QWORD *)v35 + 1);
    if (v36)
    {
      *(_QWORD *)v34 = *(_QWORD *)v35;
      *(_QWORD *)(v34 + 8) = v36;
      swift_bridgeObjectRelease();
      v37 = *((_QWORD *)v35 + 3);
      *(_QWORD *)(v34 + 16) = *((_QWORD *)v35 + 2);
      *(_QWORD *)(v34 + 24) = v37;
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v34 + 40))
      {
        v38 = *((_QWORD *)v35 + 5);
        if (v38)
        {
          *(_QWORD *)(v34 + 32) = *((_QWORD *)v35 + 4);
          *(_QWORD *)(v34 + 40) = v38;
          swift_bridgeObjectRelease();
          *(_QWORD *)(v34 + 48) = *((_QWORD *)v35 + 6);
          swift_bridgeObjectRelease();
          *(_QWORD *)(v34 + 56) = *((_QWORD *)v35 + 7);
          swift_bridgeObjectRelease();
LABEL_10:
          *(_BYTE *)(v34 + 64) = v35[64];
          return a1;
        }
        sub_2364915D0(v34 + 32);
      }
      v41 = *((_OWORD *)v35 + 3);
      *(_OWORD *)(v34 + 32) = *((_OWORD *)v35 + 2);
      *(_OWORD *)(v34 + 48) = v41;
      goto LABEL_10;
    }
    sub_236491604(v34);
  }
  v39 = *((_OWORD *)v35 + 3);
  *(_OWORD *)(v34 + 32) = *((_OWORD *)v35 + 2);
  *(_OWORD *)(v34 + 48) = v39;
  *(_BYTE *)(v34 + 64) = v35[64];
  v40 = *((_OWORD *)v35 + 1);
  *(_OWORD *)v34 = *(_OWORD *)v35;
  *(_OWORD *)(v34 + 16) = v40;
  return a1;
}

uint64_t getEnumTagSinglePayload for AuthenticateCommand.Request()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_236491908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for IdMSAccount();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for AuthenticateCommand.Request()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2364919A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for IdMSAccount();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t sub_236491A1C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for IdMSAccount();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AuthenticateCommand.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6658);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for AuthenticateCommand.Response(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6658);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for AuthenticateCommand.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6658);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for AuthenticateCommand.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6658);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for AuthenticateCommand.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6658);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for AuthenticateCommand.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6658);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AuthenticateCommand.Response()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_236491C30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6658);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AuthenticateCommand.Response()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_236491C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6658);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_236491CC0()
{
  unint64_t v0;

  sub_236491D28();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_236491D28()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2542A8290)
  {
    sub_236490694();
    v0 = sub_2365AFB1C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2542A8290);
  }
}

uint64_t storeEnumTagSinglePayload for AuthenticateCommand.Response.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_236491DC8 + 4 * byte_2365B7660[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_236491DE8 + 4 * byte_2365B7665[v4]))();
}

_BYTE *sub_236491DC8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_236491DE8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_236491DF0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_236491DF8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_236491E00(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_236491E08(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AuthenticateCommand.Response.CodingKeys()
{
  return &type metadata for AuthenticateCommand.Response.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AuthenticateCommand.Request.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_236491E70 + 4 * byte_2365B766F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_236491EA4 + 4 * byte_2365B766A[v4]))();
}

uint64_t sub_236491EA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_236491EAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x236491EB4);
  return result;
}

uint64_t sub_236491EC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x236491EC8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_236491ECC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236491ED4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AuthenticateCommand.Request.CodingKeys()
{
  return &type metadata for AuthenticateCommand.Request.CodingKeys;
}

unint64_t sub_236491EF4()
{
  unint64_t result;

  result = qword_2563E6950;
  if (!qword_2563E6950)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B79CC, &type metadata for AuthenticateCommand.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6950);
  }
  return result;
}

unint64_t sub_236491F3C()
{
  unint64_t result;

  result = qword_2563E6958;
  if (!qword_2563E6958)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B7A84, &type metadata for AuthenticateCommand.Response.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6958);
  }
  return result;
}

unint64_t sub_236491F84()
{
  unint64_t result;

  result = qword_2563E6960;
  if (!qword_2563E6960)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B79F4, &type metadata for AuthenticateCommand.Response.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6960);
  }
  return result;
}

unint64_t sub_236491FCC()
{
  unint64_t result;

  result = qword_2563E6968;
  if (!qword_2563E6968)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B7A1C, &type metadata for AuthenticateCommand.Response.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6968);
  }
  return result;
}

unint64_t sub_236492014()
{
  unint64_t result;

  result = qword_2563E6970;
  if (!qword_2563E6970)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B793C, &type metadata for AuthenticateCommand.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6970);
  }
  return result;
}

unint64_t sub_23649205C()
{
  unint64_t result;

  result = qword_2563E6978;
  if (!qword_2563E6978)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B7964, &type metadata for AuthenticateCommand.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6978);
  }
  return result;
}

uint64_t sub_2364920A0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746E756F636361 && a2 == 0xE700000000000000;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E49656369766564 && a2 == 0xEA00000000006F66)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t *sub_23649219C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[9];
  v3 = a1[10];
  v4 = a1[11];
  v5 = a1[12];
  v6 = a1[13];
  v7 = a1[14];
  sub_23648DCEC(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  sub_23648DCEC(v2, v3, v4, v5, v6, v7);
  return a1;
}

uint64_t sub_236492240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2364923BC(a1, a2, a3, (uint64_t)&unk_2507D1D30, &qword_2563E6A60);
}

uint64_t sub_23649225C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_2365B0218();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_2365B020C();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_236495B38(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_2365B01AC();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_2364923A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2364923BC(a1, a2, a3, (uint64_t)&unk_2507D1CE0, &qword_2563E6A40);
}

uint64_t sub_2364923BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = sub_2365B0218();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) != 1)
  {
    sub_2365B020C();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_236495B38(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_2365B01AC();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  __swift_instantiateConcreteTypeFromMangledName(a5);
  return swift_task_create();
}

uint64_t AutomaticRepairModelExchange.setupExchange.getter@<X0>(void *a1@<X8>)
{
  const void *v1;
  _BYTE v4[624];

  memcpy(v4, v1, 0x268uLL);
  memcpy(a1, v1, 0x268uLL);
  return sub_23649255C((uint64_t)v4);
}

uint64_t sub_23649255C(uint64_t a1)
{
  id v2;

  v2 = *(id *)(a1 + 160);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *AutomaticRepairModelExchange.setupExchange.setter(const void *a1)
{
  void *v1;
  _BYTE v4[624];

  memcpy(v4, v1, 0x268uLL);
  sub_2364927FC((uint64_t)v4);
  return memcpy(v1, a1, 0x268uLL);
}

uint64_t sub_2364927FC(uint64_t a1)
{
  void *v3;

  v3 = *(void **)(a1 + 160);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return a1;
}

uint64_t (*AutomaticRepairModelExchange.setupExchange.modify())()
{
  return nullsub_1;
}

void *AutomaticRepairModelExchange.queue.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 160);
  v2 = v1;
  return v1;
}

void AutomaticRepairModelExchange.queue.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 160) = a1;
}

void (*AutomaticRepairModelExchange.queue.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + 160);
  *a1 = v2;
  a1[1] = v1;
  v3 = v2;
  return sub_236492AE8;
}

void sub_236492AE8(uint64_t a1, char a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v3 = *(void **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(v2 + 160);
  if ((a2 & 1) != 0)
  {
    v5 = v3;

    *(_QWORD *)(v2 + 160) = v3;
  }
  else
  {

    *(_QWORD *)(v2 + 160) = v3;
  }
}

uint64_t sub_236492B4C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v7 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v5;
  *v5 = v3;
  v5[1] = sub_23647E274;
  return v7(a2);
}

uint64_t sub_236492BAC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 616) = &unk_2563E6A18;
  *(_QWORD *)(a2 + 624) = v5;
  return result;
}

uint64_t sub_236492C14(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v3;
  *v3 = v2;
  v3[1] = sub_23647E274;
  return v5();
}

uint64_t AutomaticRepairModelExchange.receiveInitial.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 616);
  swift_retain();
  return v1;
}

uint64_t AutomaticRepairModelExchange.receiveInitial.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 616) = a1;
  *(_QWORD *)(v2 + 624) = a2;
  return result;
}

uint64_t (*AutomaticRepairModelExchange.receiveInitial.modify())()
{
  return nullsub_1;
}

uint64_t sub_236492CEC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 632) = &unk_2563E6A08;
  *(_QWORD *)(a2 + 640) = v5;
  return result;
}

uint64_t AutomaticRepairModelExchange.receiveRepairing.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 632);
  swift_retain();
  return v1;
}

uint64_t AutomaticRepairModelExchange.receiveRepairing.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 632) = a1;
  *(_QWORD *)(v2 + 640) = a2;
  return result;
}

uint64_t (*AutomaticRepairModelExchange.receiveRepairing.modify())()
{
  return nullsub_1;
}

uint64_t sub_236492DCC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 648) = &unk_2563E69F8;
  *(_QWORD *)(a2 + 656) = v5;
  return result;
}

uint64_t AutomaticRepairModelExchange.receiveFinished.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 648);
  swift_retain();
  return v1;
}

uint64_t AutomaticRepairModelExchange.receiveFinished.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 648) = a1;
  *(_QWORD *)(v2 + 656) = a2;
  return result;
}

uint64_t (*AutomaticRepairModelExchange.receiveFinished.modify())()
{
  return nullsub_1;
}

uint64_t sub_236492EAC()
{
  uint64_t v0;

  return sub_236495DA0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_236492EB8(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)a4 + *a4);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v7;
  *v7 = v4;
  v7[1] = sub_23647E274;
  return v9(a2, a3);
}

uint64_t sub_236492F24(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 664) = &unk_2563E69E0;
  *(_QWORD *)(a2 + 672) = v5;
  return result;
}

uint64_t sub_236492F8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_23647E274;
  return v6();
}

uint64_t AutomaticRepairModelExchange.receiveRepairError.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 664);
  swift_retain();
  return v1;
}

uint64_t AutomaticRepairModelExchange.receiveRepairError.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 664) = a1;
  *(_QWORD *)(v2 + 672) = a2;
  return result;
}

uint64_t (*AutomaticRepairModelExchange.receiveRepairError.modify())()
{
  return nullsub_1;
}

uint64_t sub_236493070(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 680) = &unk_2563E69C0;
  *(_QWORD *)(a2 + 688) = v5;
  return result;
}

uint64_t AutomaticRepairModelExchange.receiveDismiss.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 680);
  swift_retain();
  return v1;
}

uint64_t AutomaticRepairModelExchange.receiveDismiss.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 680) = a1;
  *(_QWORD *)(v2 + 688) = a2;
  return result;
}

uint64_t (*AutomaticRepairModelExchange.receiveDismiss.modify())()
{
  return nullsub_1;
}

void *AutomaticRepairModelExchange.init(setupExchange:)@<X0>(void *__src@<X0>, _QWORD *a2@<X8>)
{
  void *result;

  result = memcpy(a2, __src, 0x268uLL);
  a2[77] = &unk_2563E6980;
  a2[78] = 0;
  a2[79] = &unk_2563E6988;
  a2[80] = 0;
  a2[81] = &unk_2563E6990;
  a2[82] = 0;
  a2[83] = &unk_2563E6998;
  a2[84] = 0;
  a2[85] = &unk_2563E69A0;
  a2[86] = 0;
  return result;
}

uint64_t AutomaticRepairModelExchange.receiveModelUpdate(_:with:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  const void *v4;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v19[696];

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9790);
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = *a1;
  v12 = *((_BYTE *)a1 + 8);
  v14 = a1[2];
  v13 = a1[3];
  memcpy(v19, v4, sizeof(v19));
  v15 = sub_2365B0218();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v10, 1, 1, v15);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  memcpy((void *)(v16 + 32), v19, 0x2B8uLL);
  *(_QWORD *)(v16 + 728) = v11;
  *(_BYTE *)(v16 + 736) = v12;
  *(_QWORD *)(v16 + 744) = v14;
  *(_QWORD *)(v16 + 752) = v13;
  *(_QWORD *)(v16 + 760) = a2;
  *(_QWORD *)(v16 + 768) = a3;
  sub_236493588((uint64_t)v19);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_23649225C((uint64_t)v10, (uint64_t)&unk_2563E69B0, v16);
  return swift_release();
}

uint64_t sub_236493314(int a1, int a2, int a3, void *__src, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v8 + 760) = v14;
  *(_QWORD *)(v8 + 752) = v13;
  *(_QWORD *)(v8 + 744) = a8;
  *(_QWORD *)(v8 + 736) = a7;
  *(_BYTE *)(v8 + 784) = a6;
  *(_QWORD *)(v8 + 728) = a5;
  memcpy((void *)(v8 + 16), __src, 0x2B8uLL);
  *(_BYTE *)(v8 + 712) = a6;
  *(_QWORD *)(v8 + 720) = a7;
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 768) = v11;
  *v11 = v8;
  v11[1] = sub_2364933B0;
  return sub_236493824(v8 + 712);
}

uint64_t sub_2364933B0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 776) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23649340C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(_QWORD *);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];

  v1 = *(_QWORD *)(v0 + 776);
  if (*(_BYTE *)(v0 + 784) == 1)
  {
    v2 = *(void (**)(_QWORD *))(v0 + 752);
    v3 = *(_QWORD *)(v0 + 744);
    v4 = *(_QWORD *)(v0 + 736);
    v5 = *(_QWORD *)(v0 + 728);
    swift_retain();
    v7[0] = v5;
    v7[1] = sub_236596590(v5, 1, v4, v3);
    v7[2] = v1;
    v2(v7);
    swift_release_n();
  }
  else
  {
    swift_release();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2364934B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  __int128 v10;

  v2 = v0 + 736;
  v3 = (const void *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 728);
  v5 = *(_BYTE *)(v0 + 736);
  v6 = swift_task_alloc();
  v10 = *(_OWORD *)(v2 + 8);
  v7 = *(_OWORD *)(v2 + 24);
  *(_QWORD *)(v1 + 16) = v6;
  *(_QWORD *)v6 = v1;
  *(_QWORD *)(v6 + 8) = sub_23647E274;
  *(_OWORD *)(v6 + 736) = v10;
  *(_OWORD *)(v6 + 752) = v7;
  *(_BYTE *)(v6 + 784) = v5;
  *(_QWORD *)(v6 + 728) = v4;
  memcpy((void *)(v6 + 16), v3, 0x2B8uLL);
  *(_BYTE *)(v6 + 712) = v5;
  *(_QWORD *)(v6 + 720) = v10;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 768) = v8;
  *v8 = v6;
  v8[1] = sub_2364933B0;
  return sub_236493824(v6 + 712);
}

uint64_t sub_236493588(uint64_t a1)
{
  id v2;

  v2 = *(id *)(a1 + 160);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_236493824(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = *(_OWORD *)(v1 + 640);
  *(_OWORD *)(v2 + 4400) = *(_OWORD *)(v1 + 624);
  *(_OWORD *)(v2 + 4416) = v3;
  v4 = *(_OWORD *)(v1 + 672);
  *(_OWORD *)(v2 + 4432) = *(_OWORD *)(v1 + 656);
  *(_QWORD *)(v2 + 4376) = v1;
  *(_BYTE *)(v2 + 4153) = *(_BYTE *)a1;
  *(_QWORD *)(v2 + 4384) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v2 + 4392) = *(_QWORD *)(v1 + 616);
  *(_OWORD *)(v2 + 4448) = v4;
  *(_QWORD *)(v2 + 4464) = *(_QWORD *)(v1 + 688);
  return swift_task_switch();
}

uint64_t sub_236493878()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  char v20;
  const void *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t (*v59)(uint64_t);
  uint64_t v60;

  v1 = *(_QWORD *)(v0 + 4384);
  swift_getKeyPath();
  *(_QWORD *)(v0 + 4472) = OBJC_IVAR____TtC12AppleIDSetup11RepairModel___observationRegistrar;
  *(_QWORD *)(v0 + 4320) = v1;
  *(_QWORD *)(v0 + 4480) = sub_236495D18();
  swift_retain();
  sub_2365AFA44();
  swift_release();
  swift_getKeyPath();
  *(_QWORD *)(v0 + 4368) = v1;
  sub_2365AFA44();
  swift_release();
  v2 = *(os_unfair_lock_s **)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock(v2 + 37);
  sub_236567FD8((uint64_t)&v2[4], v0 + 4208);
  *(_QWORD *)(v0 + 4488) = 0;
  os_unfair_lock_unlock(v2 + 37);
  v53 = (char *)(v0 + 4153);
  swift_release();
  v3 = *(_QWORD *)(v0 + 4208);
  *(_QWORD *)(v0 + 4496) = v3;
  v4 = *(_QWORD *)(v0 + 4216);
  *(_QWORD *)(v0 + 4504) = v4;
  v5 = *(_QWORD *)(v0 + 4224);
  *(_QWORD *)(v0 + 4512) = v5;
  v6 = *(_QWORD *)(v0 + 4232);
  *(_QWORD *)(v0 + 4520) = v6;
  v7 = *(_QWORD *)(v0 + 4240);
  *(_QWORD *)(v0 + 4528) = v7;
  v8 = *(unsigned __int8 *)(v0 + 4248);
  *(_BYTE *)(v0 + 4154) = v8;
  switch(v8)
  {
    case 251:
      if ((*v53 & 1) != 0)
        goto LABEL_13;
      v9 = *(_QWORD *)(v0 + 4448);
      v10 = *(_QWORD *)(v0 + 4392);
      v42 = *(_OWORD *)(v0 + 4416);
      v47 = *(_OWORD *)(v0 + 4400);
      v37 = *(_OWORD *)(v0 + 4432);
      v54 = *(_OWORD *)(v0 + 4456);
      memcpy((void *)(v0 + 2800), *(const void **)(v0 + 4376), 0x268uLL);
      *(_QWORD *)(v0 + 3416) = v10;
      *(_OWORD *)(v0 + 3424) = v47;
      *(_OWORD *)(v0 + 3440) = v42;
      *(_OWORD *)(v0 + 3456) = v37;
      *(_QWORD *)(v0 + 3472) = v9;
      *(_OWORD *)(v0 + 3480) = v54;
      *(_QWORD *)&v54 = *(int *)v54 + (_QWORD)v54;
      v11 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 4600) = v11;
      *v11 = v0;
      v11[1] = sub_2364944D4;
      result = ((uint64_t (*)(uint64_t))v54)(v0 + 2800);
      break;
    case 252:
      if ((*v53 & 1) != 0)
      {
        v15 = *(_QWORD *)(v0 + 4384);
        *(_OWORD *)(v0 + 4256) = 0u;
        *(_OWORD *)(v0 + 4272) = 0u;
        *(_QWORD *)(v0 + 4288) = 0;
        *(_BYTE *)(v0 + 4296) = -5;
        swift_getKeyPath();
        v16 = swift_task_alloc();
        *(_QWORD *)(v16 + 16) = v15;
        *(_QWORD *)(v16 + 24) = v0 + 4256;
        *(_QWORD *)(v0 + 4344) = v15;
        sub_2365AFA38();
        swift_release();
        goto LABEL_8;
      }
      v27 = *(_QWORD *)(v0 + 4464);
      v28 = *(_QWORD *)(v0 + 4440);
      v29 = *(_QWORD *)(v0 + 4416);
      v30 = *(_QWORD *)(v0 + 4392);
      v45 = *(_OWORD *)(v0 + 4400);
      v51 = *(_OWORD *)(v0 + 4424);
      v57 = *(_OWORD *)(v0 + 4448);
      memcpy((void *)(v0 + 16), *(const void **)(v0 + 4376), 0x268uLL);
      *(_QWORD *)(v0 + 632) = v30;
      *(_OWORD *)(v0 + 640) = v45;
      *(_QWORD *)(v0 + 656) = v29;
      *(_OWORD *)(v0 + 664) = v51;
      *(_QWORD *)(v0 + 680) = v28;
      *(_OWORD *)(v0 + 688) = v57;
      *(_QWORD *)(v0 + 704) = v27;
      *(_QWORD *)&v57 = *(int *)v51 + (_QWORD)v51;
      v31 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 4584) = v31;
      *v31 = v0;
      v31[1] = sub_236494220;
      result = ((uint64_t (*)(uint64_t))v57)(v0 + 16);
      break;
    case 253:
      if ((*v53 & 1) != 0)
        goto LABEL_13;
      v49 = *(_OWORD *)(v0 + 4424);
      v55 = *(_OWORD *)(v0 + 4392);
      v43 = *(_OWORD *)(v0 + 4440);
      v35 = *(_OWORD *)(v0 + 4408);
      v39 = *(_OWORD *)(v0 + 4456);
      memcpy((void *)(v0 + 712), *(const void **)(v0 + 4376), 0x268uLL);
      *(_OWORD *)(v0 + 1328) = v55;
      *(_OWORD *)(v0 + 1344) = v35;
      *(_OWORD *)(v0 + 1360) = v49;
      *(_OWORD *)(v0 + 1376) = v43;
      *(_OWORD *)(v0 + 1392) = v39;
      *(_QWORD *)&v55 = *(int *)v35 + (_QWORD)v35;
      v17 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 4576) = v17;
      *v17 = v0;
      v17[1] = sub_2364941CC;
      result = ((uint64_t (*)(uint64_t))v55)(v0 + 712);
      break;
    case 254:
      v18 = *(_QWORD *)(v0 + 4384);
      swift_getKeyPath();
      *(_QWORD *)(v0 + 4328) = v18;
      sub_2365AFA44();
      swift_release();
      swift_getKeyPath();
      *(_QWORD *)(v0 + 4336) = v18;
      sub_2365AFA44();
      swift_release();
      v19 = *(os_unfair_lock_s **)(v1 + 16);
      swift_retain();
      os_unfair_lock_lock(v19 + 37);
      sub_2365679EC((uint64_t)&v19[4], &v60);
      *(_QWORD *)(v0 + 4544) = 0;
      os_unfair_lock_unlock(v19 + 37);
      v20 = *v53;
      v21 = *(const void **)(v0 + 4376);
      v22 = v60;
      *(_QWORD *)(v0 + 4552) = v60;
      swift_release();
      memcpy((void *)(v0 + 3496), v21, 0x268uLL);
      *(_BYTE *)(v0 + 4304) = v20;
      *(_QWORD *)(v0 + 4312) = v22;
      v23 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 4560) = v23;
      *v23 = v0;
      v23[1] = sub_236494094;
      result = sub_2365967F8(v0 + 4304);
      break;
    case 255:
      if ((*v53 & 1) != 0)
        goto LABEL_13;
      v32 = *(_QWORD *)(v0 + 4464);
      v33 = *(_QWORD *)(v0 + 4408);
      v52 = *(_OWORD *)(v0 + 4432);
      v58 = *(_OWORD *)(v0 + 4416);
      v41 = *(_OWORD *)(v0 + 4392);
      v46 = *(_OWORD *)(v0 + 4448);
      memcpy((void *)(v0 + 1408), *(const void **)(v0 + 4376), 0x268uLL);
      *(_OWORD *)(v0 + 2024) = v41;
      *(_QWORD *)(v0 + 2040) = v33;
      *(_OWORD *)(v0 + 2048) = v58;
      *(_OWORD *)(v0 + 2064) = v52;
      *(_OWORD *)(v0 + 2080) = v46;
      *(_QWORD *)(v0 + 2096) = v32;
      v59 = (uint64_t (*)(uint64_t))(*(int *)v41 + (_QWORD)v41);
      v34 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 4536) = v34;
      *v34 = v0;
      v34[1] = sub_236494040;
      result = v59(v0 + 1408);
      break;
    default:
      if ((*v53 & 1) != 0)
      {
        v13 = *(_QWORD *)(v0 + 4384);
        *(_OWORD *)(v0 + 4112) = 0u;
        *(_OWORD *)(v0 + 4128) = 0u;
        *(_QWORD *)(v0 + 4144) = 0;
        *(_BYTE *)(v0 + 4152) = -5;
        v38 = v3;
        v48 = v7;
        swift_getKeyPath();
        v14 = swift_task_alloc();
        *(_QWORD *)(v14 + 16) = v13;
        *(_QWORD *)(v14 + 24) = v0 + 4112;
        *(_QWORD *)(v0 + 4352) = v13;
        sub_2365AFA38();
        swift_release();
        sub_236484C6C(v38, v4, v5, v6, v48, v8);
LABEL_8:
        swift_task_dealloc();
LABEL_13:
        result = (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 4384));
      }
      else
      {
        v50 = *(_OWORD *)(v0 + 4408);
        v56 = *(_OWORD *)(v0 + 4392);
        v36 = *(_OWORD *)(v0 + 4440);
        v40 = *(_OWORD *)(v0 + 4456);
        v44 = *(_OWORD *)(v0 + 4424);
        v24 = v3;
        v25 = v7;
        memcpy((void *)(v0 + 2104), *(const void **)(v0 + 4376), 0x268uLL);
        *(_OWORD *)(v0 + 2720) = v56;
        *(_OWORD *)(v0 + 2736) = v50;
        *(_OWORD *)(v0 + 2752) = v44;
        *(_OWORD *)(v0 + 2768) = v36;
        *(_OWORD *)(v0 + 2784) = v40;
        *(_QWORD *)(v0 + 4160) = v24;
        *(_QWORD *)(v0 + 4168) = v4;
        *(_QWORD *)(v0 + 4176) = v5;
        *(_QWORD *)(v0 + 4184) = v6;
        *(_QWORD *)(v0 + 4192) = v25;
        *(_BYTE *)(v0 + 4200) = v8;
        *(_QWORD *)&v56 = *(int *)v36 + (_QWORD)v36;
        v26 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 4592) = v26;
        *v26 = v0;
        v26[1] = sub_23649435C;
        result = ((uint64_t (*)(uint64_t, uint64_t))v56)(v0 + 2104, v0 + 4160);
      }
      break;
  }
  return result;
}

uint64_t sub_236494040()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_236494094(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 4568) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2364940F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 4568);
  v2 = *(_QWORD *)(v0 + 4384);
  swift_getKeyPath();
  v3 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  *(_QWORD *)(v0 + 4360) = v2;
  sub_2365AFA38();
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 4384));
}

uint64_t sub_2364941CC()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_236494220()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_236494274()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 4384);
  *(_OWORD *)(v0 + 4256) = 0u;
  *(_OWORD *)(v0 + 4272) = 0u;
  *(_QWORD *)(v0 + 4288) = 0;
  *(_BYTE *)(v0 + 4296) = -5;
  swift_getKeyPath();
  v2 = swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = v0 + 4256;
  *(_QWORD *)(v0 + 4344) = v1;
  sub_2365AFA38();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 4384));
}

uint64_t sub_23649435C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2364943B0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v0 + 4520);
  v9 = *(_QWORD *)(v0 + 4528);
  v6 = *(_QWORD *)(v0 + 4504);
  v7 = *(_QWORD *)(v0 + 4512);
  v5 = *(_QWORD *)(v0 + 4496);
  v1 = *(_QWORD *)(v0 + 4384);
  *(_OWORD *)(v0 + 4112) = 0u;
  *(_OWORD *)(v0 + 4128) = 0u;
  *(_QWORD *)(v0 + 4144) = 0;
  *(_BYTE *)(v0 + 4152) = -5;
  v2 = *(_BYTE *)(v0 + 4154);
  swift_getKeyPath();
  v3 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v0 + 4112;
  *(_QWORD *)(v0 + 4352) = v1;
  sub_2365AFA38();
  swift_release();
  sub_236484C6C(v5, v6, v7, v8, v9, v2);
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 4384));
}

uint64_t sub_2364944D4()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_236494528()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 4384));
}

void *sub_236494534()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 160);
  v2 = v1;
  return v1;
}

uint64_t sub_236494558(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  const void *v4;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v19[696];

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9790);
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = *a1;
  v12 = *((_BYTE *)a1 + 8);
  v14 = a1[2];
  v13 = a1[3];
  memcpy(v19, v4, sizeof(v19));
  v15 = sub_2365B0218();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v10, 1, 1, v15);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  memcpy((void *)(v16 + 32), v19, 0x2B8uLL);
  *(_QWORD *)(v16 + 728) = v11;
  *(_BYTE *)(v16 + 736) = v12;
  *(_QWORD *)(v16 + 744) = v14;
  *(_QWORD *)(v16 + 752) = v13;
  *(_QWORD *)(v16 + 760) = a2;
  *(_QWORD *)(v16 + 768) = a3;
  sub_236493588((uint64_t)v19);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_23649225C((uint64_t)v10, (uint64_t)&unk_2563E6A28, v16);
  return swift_release();
}

id sub_2364946A0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *(void **)(a1 + 160);
  *a2 = v2;
  return v2;
}

void sub_2364946AC(id *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *(void **)(a2 + 160);
  v5 = *a1;

  *(_QWORD *)(a2 + 160) = v3;
}

uint64_t sub_2364946E4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 616);
  v4 = *(_QWORD *)(a1 + 624);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  *a2 = &unk_2563E6A20;
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_23649473C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 632);
  v4 = *(_QWORD *)(a1 + 640);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  *a2 = &unk_2563E6A10;
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_236494794@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 648);
  v4 = *(_QWORD *)(a1 + 656);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  *a2 = &unk_2563E6A00;
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_2364947EC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 664);
  v4 = *(_QWORD *)(a1 + 672);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  *a2 = &unk_2563E69F0;
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_236494844@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 680);
  v4 = *(_QWORD *)(a1 + 688);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  *a2 = &unk_2563E69D0;
  a2[1] = v5;
  return swift_retain();
}

uint64_t destroy for AutomaticRepairModelExchange(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for AutomaticRepairModelExchange(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  id v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v3 = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = v3;
  v17 = *(_OWORD *)(a2 + 160);
  v4 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = v17;
  *(_OWORD *)(a1 + 176) = v4;
  v5 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v5;
  v6 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v6;
  v7 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v7;
  v8 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v8;
  v9 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v9;
  v10 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = v10;
  v11 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v11;
  v12 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 432) = v12;
  v13 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 464) = v13;
  v21 = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = v21;
  v18 = *(_OWORD *)(a2 + 528);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 528) = v18;
  v19 = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 560) = v19;
  v20 = *(_OWORD *)(a2 + 592);
  *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 592) = v20;
  v22 = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
  *(_OWORD *)(a1 + 624) = v22;
  v23 = *(_OWORD *)(a2 + 656);
  *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
  *(_OWORD *)(a1 + 656) = v23;
  v14 = *(_QWORD *)(a2 + 688);
  *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
  *(_QWORD *)(a1 + 688) = v14;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v15 = (id)v17;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for AutomaticRepairModelExchange(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_retain();
  swift_release();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_retain();
  swift_release();
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_retain();
  swift_release();
  v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  swift_retain();
  swift_release();
  v10 = a2[13];
  a1[12] = a2[12];
  a1[13] = v10;
  swift_retain();
  swift_release();
  v11 = a2[15];
  a1[14] = a2[14];
  a1[15] = v11;
  swift_retain();
  swift_release();
  v12 = a2[17];
  a1[16] = a2[16];
  a1[17] = v12;
  swift_retain();
  swift_release();
  v13 = a2[19];
  a1[18] = a2[18];
  a1[19] = v13;
  swift_retain();
  swift_release();
  v14 = (void *)a1[20];
  v15 = (void *)a2[20];
  a1[20] = v15;
  v16 = v15;

  v17 = a2[22];
  a1[21] = a2[21];
  a1[22] = v17;
  swift_retain();
  swift_release();
  v18 = a2[24];
  a1[23] = a2[23];
  a1[24] = v18;
  swift_retain();
  swift_release();
  v19 = a2[26];
  a1[25] = a2[25];
  a1[26] = v19;
  swift_retain();
  swift_release();
  v20 = a2[28];
  a1[27] = a2[27];
  a1[28] = v20;
  swift_retain();
  swift_release();
  v21 = a2[30];
  a1[29] = a2[29];
  a1[30] = v21;
  swift_retain();
  swift_release();
  v22 = a2[32];
  a1[31] = a2[31];
  a1[32] = v22;
  swift_retain();
  swift_release();
  v23 = a2[34];
  a1[33] = a2[33];
  a1[34] = v23;
  swift_retain();
  swift_release();
  v24 = a2[36];
  a1[35] = a2[35];
  a1[36] = v24;
  swift_retain();
  swift_release();
  v25 = a2[38];
  a1[37] = a2[37];
  a1[38] = v25;
  swift_retain();
  swift_release();
  v26 = a2[40];
  a1[39] = a2[39];
  a1[40] = v26;
  swift_retain();
  swift_release();
  v27 = a2[42];
  a1[41] = a2[41];
  a1[42] = v27;
  swift_retain();
  swift_release();
  v28 = a2[44];
  a1[43] = a2[43];
  a1[44] = v28;
  swift_retain();
  swift_release();
  v29 = a2[46];
  a1[45] = a2[45];
  a1[46] = v29;
  swift_retain();
  swift_release();
  v30 = a2[48];
  a1[47] = a2[47];
  a1[48] = v30;
  swift_retain();
  swift_release();
  v31 = a2[50];
  a1[49] = a2[49];
  a1[50] = v31;
  swift_retain();
  swift_release();
  v32 = a2[52];
  a1[51] = a2[51];
  a1[52] = v32;
  swift_retain();
  swift_release();
  v33 = a2[54];
  a1[53] = a2[53];
  a1[54] = v33;
  swift_retain();
  swift_release();
  v34 = a2[56];
  a1[55] = a2[55];
  a1[56] = v34;
  swift_retain();
  swift_release();
  v35 = a2[58];
  a1[57] = a2[57];
  a1[58] = v35;
  swift_retain();
  swift_release();
  v36 = a2[60];
  a1[59] = a2[59];
  a1[60] = v36;
  swift_retain();
  swift_release();
  v37 = a2[62];
  a1[61] = a2[61];
  a1[62] = v37;
  swift_retain();
  swift_release();
  v38 = a2[64];
  a1[63] = a2[63];
  a1[64] = v38;
  swift_retain();
  swift_release();
  v39 = a2[66];
  a1[65] = a2[65];
  a1[66] = v39;
  swift_retain();
  swift_release();
  v40 = a2[68];
  a1[67] = a2[67];
  a1[68] = v40;
  swift_retain();
  swift_release();
  v41 = a2[70];
  a1[69] = a2[69];
  a1[70] = v41;
  swift_retain();
  swift_release();
  v42 = a2[72];
  a1[71] = a2[71];
  a1[72] = v42;
  swift_retain();
  swift_release();
  v43 = a2[74];
  a1[73] = a2[73];
  a1[74] = v43;
  swift_retain();
  swift_release();
  v44 = a2[76];
  a1[75] = a2[75];
  a1[76] = v44;
  swift_retain();
  swift_release();
  v45 = a2[78];
  a1[77] = a2[77];
  a1[78] = v45;
  swift_retain();
  swift_release();
  v46 = a2[80];
  a1[79] = a2[79];
  a1[80] = v46;
  swift_retain();
  swift_release();
  v47 = a2[82];
  a1[81] = a2[81];
  a1[82] = v47;
  swift_retain();
  swift_release();
  v48 = a2[84];
  a1[83] = a2[83];
  a1[84] = v48;
  swift_retain();
  swift_release();
  v49 = a2[86];
  a1[85] = a2[85];
  a1[86] = v49;
  swift_retain();
  swift_release();
  return a1;
}

void *__swift_memcpy696_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x2B8uLL);
}

uint64_t assignWithTake for AutomaticRepairModelExchange(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  void *v6;

  v4 = (_OWORD *)(a1 + 264);
  v5 = (_OWORD *)(a2 + 264);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_release();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_release();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  swift_release();
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  swift_release();
  v6 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);

  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  swift_release();
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  swift_release();
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  swift_release();
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  swift_release();
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  swift_release();
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  swift_release();
  *v4 = *v5;
  swift_release();
  v4[1] = v5[1];
  swift_release();
  v4[2] = v5[2];
  swift_release();
  v4[3] = v5[3];
  swift_release();
  v4[4] = v5[4];
  swift_release();
  v4[5] = v5[5];
  swift_release();
  v4[6] = v5[6];
  swift_release();
  v4[7] = v5[7];
  swift_release();
  v4[8] = v5[8];
  swift_release();
  v4[9] = v5[9];
  swift_release();
  v4[10] = v5[10];
  swift_release();
  v4[11] = v5[11];
  swift_release();
  v4[12] = v5[12];
  swift_release();
  v4[13] = v5[13];
  swift_release();
  v4[14] = v5[14];
  swift_release();
  v4[15] = v5[15];
  swift_release();
  v4[16] = v5[16];
  swift_release();
  v4[17] = v5[17];
  swift_release();
  v4[18] = v5[18];
  swift_release();
  v4[19] = v5[19];
  swift_release();
  v4[20] = v5[20];
  swift_release();
  v4[21] = v5[21];
  swift_release();
  v4[22] = v5[22];
  swift_release();
  v4[23] = v5[23];
  swift_release();
  v4[24] = v5[24];
  swift_release();
  v4[25] = v5[25];
  swift_release();
  v4[26] = v5[26];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AutomaticRepairModelExchange(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 696))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomaticRepairModelExchange(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 696) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 696) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AutomaticRepairModelExchange()
{
  return &type metadata for AutomaticRepairModelExchange;
}

uint64_t sub_2364956B4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2364956D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_2563E69B8 + dword_2563E69B8))(a1, v4);
}

uint64_t sub_236495744(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_2563E69C8 + dword_2563E69C8))(a1, a2, v6);
}

uint64_t sub_2364957C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_2563E69D8 + dword_2563E69D8))(a1, a2, v6);
}

uint64_t sub_236495840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v8;
  _QWORD *v9;

  v8 = *(int **)(v3 + 16);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_2563E69E8 + dword_2563E69E8))(a1, a2, a3, v8);
}

uint64_t objectdestroyTm()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_236495A68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  __int128 v10;

  v2 = v0 + 736;
  v3 = (const void *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 728);
  v5 = *(_BYTE *)(v0 + 736);
  v6 = swift_task_alloc();
  v10 = *(_OWORD *)(v2 + 8);
  v7 = *(_OWORD *)(v2 + 24);
  *(_QWORD *)(v1 + 16) = v6;
  *(_QWORD *)v6 = v1;
  *(_QWORD *)(v6 + 8) = sub_236477420;
  *(_OWORD *)(v6 + 736) = v10;
  *(_OWORD *)(v6 + 752) = v7;
  *(_BYTE *)(v6 + 784) = v5;
  *(_QWORD *)(v6 + 728) = v4;
  memcpy((void *)(v6 + 16), v3, 0x2B8uLL);
  *(_BYTE *)(v6 + 712) = v5;
  *(_QWORD *)(v6 + 720) = v10;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 768) = v8;
  *v8 = v6;
  v8[1] = sub_2364933B0;
  return sub_236493824(v6 + 712);
}

uint64_t sub_236495B38(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9790);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_236495B78(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_236495BE0;
  return v5(v2 + 32);
}

uint64_t sub_236495BE0()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_BYTE **)(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc();
  *v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_236495C30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_2563E6A30 + dword_2563E6A30))(a1, v4);
}

uint64_t sub_236495CA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_2563E8930 + dword_2563E8930))(a1, v4);
}

unint64_t sub_236495D18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2563E5C98;
  if (!qword_2563E5C98)
  {
    v1 = type metadata accessor for RepairModel();
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairModel, v1);
    atomic_store(result, (unint64_t *)&qword_2563E5C98);
  }
  return result;
}

void sub_236495D68()
{
  uint64_t v0;

  sub_2365680DC(*(_QWORD *)(v0 + 16), *(__int128 **)(v0 + 24));
}

void sub_236495D88()
{
  uint64_t v0;

  sub_236567AB4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_236495DA0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_236495DA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_236477420;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_2563E8948 + dword_2563E8948))(a1, v4);
}

void sub_236495E48()
{
  sub_236495D68();
}

BOOL AISAppleIDSignInFlowType.init(rawValue:)(uint64_t a1)
{
  return a1 && a1 == 1;
}

BOOL sub_236495E88(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

unint64_t sub_236495EA0()
{
  unint64_t result;

  result = qword_2563E6A68;
  if (!qword_2563E6A68)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AISAppleIDSignInFlowType, &type metadata for AISAppleIDSignInFlowType);
    atomic_store(result, (unint64_t *)&qword_2563E6A68);
  }
  return result;
}

uint64_t sub_236495EE4()
{
  sub_2365B09E0();
  sub_2365B09F8();
  return sub_2365B0A34();
}

uint64_t sub_236495F28()
{
  return sub_2365B09F8();
}

uint64_t sub_236495F50()
{
  sub_2365B09E0();
  sub_2365B09F8();
  return sub_2365B0A34();
}

_QWORD *sub_236495F90@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;

  v2 = *result != 1 && *result != 0;
  *(_QWORD *)a2 = *result == 1;
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

ValueMetadata *type metadata accessor for AISAppleIDSignInFlowType()
{
  return &type metadata for AISAppleIDSignInFlowType;
}

uint64_t RepairContext.Builder.MissingExpectedValue.description.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_236495FFC()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

_QWORD *RepairContext.Builder.init()@<X0>(uint64_t a1@<X8>)
{
  _QWORD *result;

  *(_BYTE *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0xC000000000000000;
  *(_WORD *)(a1 + 116) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 1;
  *(_BYTE *)(a1 + 160) = 2;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 200) = &type metadata for AutomaticRepairModelExchange;
  *(_QWORD *)(a1 + 208) = &protocol witness table for AutomaticRepairModelExchange;
  result = (_QWORD *)swift_allocObject();
  result[22] = 0;
  result[23] = &unk_2563ED5A0;
  result[24] = 0;
  result[25] = &unk_2563ED5A8;
  result[26] = 0;
  result[27] = &unk_2563ED5B0;
  result[28] = 0;
  result[29] = &unk_2563ED5B8;
  result[30] = 0;
  result[31] = &unk_2563ED5C0;
  result[32] = 0;
  result[33] = &unk_2563ED5C8;
  result[34] = 0;
  result[35] = &unk_2563ED5D0;
  result[36] = 0;
  result[37] = &unk_2563ED5D8;
  result[38] = 0;
  result[39] = &unk_2563ED5E0;
  result[40] = 0;
  result[41] = &unk_2563ED5E8;
  *(_QWORD *)(a1 + 176) = result;
  result[42] = 0;
  result[43] = &unk_2563ED5F0;
  result[2] = &unk_2563ED550;
  result[3] = 0;
  result[44] = 0;
  result[45] = &unk_2563ED5F8;
  result[4] = &unk_2563ED558;
  result[5] = 0;
  result[46] = 0;
  result[47] = &unk_2563ED600;
  result[6] = &unk_2563ED560;
  result[7] = 0;
  result[48] = 0;
  result[49] = &unk_2563ED608;
  result[8] = &unk_2563ED568;
  result[9] = 0;
  result[50] = 0;
  result[51] = &unk_2563ED610;
  result[10] = &unk_2563ED570;
  result[11] = 0;
  result[52] = 0;
  result[53] = &unk_2563ED618;
  result[12] = &unk_2563ED578;
  result[13] = 0;
  result[54] = 0;
  result[55] = &unk_2563ED620;
  result[14] = &unk_2563ED580;
  result[15] = 0;
  result[56] = 0;
  result[57] = &unk_2563ED628;
  result[16] = &unk_2563ED588;
  result[17] = 0;
  result[58] = 0;
  result[59] = &unk_2563ED630;
  result[18] = &unk_2563ED590;
  result[19] = 0;
  result[60] = 0;
  result[61] = &unk_2563ED638;
  result[20] = &unk_2563ED598;
  result[21] = 0;
  result[62] = 0;
  result[63] = &unk_2563ED640;
  result[64] = 0;
  result[65] = &unk_2563ED648;
  result[66] = 0;
  result[67] = &unk_2563ED650;
  result[68] = 0;
  result[69] = &unk_2563ED658;
  result[70] = 0;
  result[71] = &unk_2563ED660;
  result[72] = 0;
  result[73] = &unk_2563ED668;
  result[74] = 0;
  result[75] = &unk_2563ED670;
  result[76] = 0;
  result[77] = &unk_2563ED678;
  result[78] = 0;
  result[79] = &unk_2563E6980;
  result[80] = 0;
  result[81] = &unk_2563E6988;
  result[82] = 0;
  result[83] = &unk_2563E6990;
  result[84] = 0;
  result[85] = &unk_2563E6998;
  result[86] = 0;
  result[87] = &unk_2563E69A0;
  result[88] = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  return result;
}

__n128 RepairContext.Builder.accountID(_:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = a1[1];
  v22 = *a1;
  v5 = a1[3];
  v6 = a1[5];
  v20 = a1[4];
  v21 = a1[2];
  v7 = a1[7];
  v8 = a1[9];
  v18 = a1[8];
  v19 = a1[6];
  v16 = *(_QWORD *)(v2 + 8);
  v17 = *(_QWORD *)v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23644F52C(v17, v16);
  *(_QWORD *)v2 = v22;
  *(_QWORD *)(v2 + 8) = v4;
  *(_QWORD *)(v2 + 16) = v21;
  *(_QWORD *)(v2 + 24) = v5;
  *(_QWORD *)(v2 + 32) = v20;
  *(_QWORD *)(v2 + 40) = v6;
  *(_QWORD *)(v2 + 48) = v19;
  *(_QWORD *)(v2 + 56) = v7;
  *(_QWORD *)(v2 + 64) = v18;
  *(_QWORD *)(v2 + 72) = v8;
  v9 = *(_OWORD *)(v2 + 208);
  *(_OWORD *)(a2 + 192) = *(_OWORD *)(v2 + 192);
  *(_OWORD *)(a2 + 208) = v9;
  *(_BYTE *)(a2 + 224) = *(_BYTE *)(v2 + 224);
  v10 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(a2 + 144) = v10;
  v11 = *(_OWORD *)(v2 + 176);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(v2 + 160);
  *(_OWORD *)(a2 + 176) = v11;
  v12 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(a2 + 112) = v12;
  v13 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a2 + 80) = v13;
  v14 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v14;
  result = *(__n128 *)(v2 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 32);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

__n128 RepairContext.Builder._proximityRepairClient(for:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  void *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;

  v4 = a1[1];
  v5 = *((unsigned int *)a1 + 6);
  v17 = *((unsigned __int16 *)a1 + 8) | ((unint64_t)*((unsigned __int8 *)a1 + 20) << 32);
  v18 = *a1;
  v6 = v5 | ((unint64_t)*((unsigned __int8 *)a1 + 28) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 29) << 40);
  v7 = *(void **)(v2 + 88);
  v8 = *(void **)(v2 + 96);
  v9 = *(_QWORD *)(v2 + 104);
  swift_bridgeObjectRetain();
  sub_2364984F8(v7, v8, v9);
  *(_QWORD *)(v2 + 88) = v18;
  *(_QWORD *)(v2 + 96) = v4;
  *(_QWORD *)(v2 + 104) = v17;
  *(_WORD *)(v2 + 116) = WORD2(v6);
  *(_DWORD *)(v2 + 112) = v5;
  v10 = *(_OWORD *)(v2 + 208);
  *(_OWORD *)(a2 + 192) = *(_OWORD *)(v2 + 192);
  *(_OWORD *)(a2 + 208) = v10;
  *(_BYTE *)(a2 + 224) = *(_BYTE *)(v2 + 224);
  v11 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(a2 + 144) = v11;
  v12 = *(_OWORD *)(v2 + 176);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(v2 + 160);
  *(_OWORD *)(a2 + 176) = v12;
  v13 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v13;
  v14 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(a2 + 48) = v14;
  result = *(__n128 *)(v2 + 112);
  v16 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a2 + 80) = v16;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(v2 + 96);
  *(__n128 *)(a2 + 112) = result;
  return result;
}

__n128 RepairContext.Builder._proximityRepairClientIntercept()@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;

  sub_2364984F8(*(void **)(v1 + 88), *(id *)(v1 + 96), *(_QWORD *)(v1 + 104));
  *(_OWORD *)(v1 + 88) = xmmword_2365B7D00;
  *(_QWORD *)(v1 + 104) = 0xC000000000000000;
  *(_WORD *)(v1 + 116) = 0;
  *(_DWORD *)(v1 + 112) = 0;
  v3 = *(_OWORD *)(v1 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(v1 + 192);
  *(_OWORD *)(a1 + 208) = v3;
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(v1 + 224);
  v4 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v1 + 128);
  *(_OWORD *)(a1 + 144) = v4;
  v5 = *(_OWORD *)(v1 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(v1 + 160);
  *(_OWORD *)(a1 + 176) = v5;
  v6 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  result = *(__n128 *)(v1 + 112);
  v9 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 80) = v9;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v1 + 96);
  *(__n128 *)(a1 + 112) = result;
  return result;
}

__n128 RepairContext.Builder._enableProximityRepair(withTargetAuthTag:withCodeType:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __n128 result;

  v8 = *a3;
  v9 = *((_BYTE *)a3 + 8);
  sub_2364984F8(*(void **)(v4 + 88), *(id *)(v4 + 96), *(_QWORD *)(v4 + 104));
  *(_OWORD *)(v4 + 88) = xmmword_2365B48C0;
  *(_QWORD *)(v4 + 104) = 0xC000000000000000;
  *(_WORD *)(v4 + 116) = 0;
  *(_DWORD *)(v4 + 112) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 136) = a1;
  *(_QWORD *)(v4 + 144) = a2;
  *(_QWORD *)(v4 + 152) = v8;
  *(_BYTE *)(v4 + 160) = v9;
  v10 = *(_OWORD *)(v4 + 208);
  *(_OWORD *)(a4 + 192) = *(_OWORD *)(v4 + 192);
  *(_OWORD *)(a4 + 208) = v10;
  *(_BYTE *)(a4 + 224) = *(_BYTE *)(v4 + 224);
  v11 = *(_OWORD *)(v4 + 112);
  v12 = *(_OWORD *)(v4 + 80);
  *(_OWORD *)(a4 + 64) = *(_OWORD *)(v4 + 64);
  *(_OWORD *)(a4 + 80) = v12;
  *(_OWORD *)(a4 + 96) = *(_OWORD *)(v4 + 96);
  *(_OWORD *)(a4 + 112) = v11;
  v13 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)a4 = *(_OWORD *)v4;
  *(_OWORD *)(a4 + 16) = v13;
  v14 = *(_OWORD *)(v4 + 48);
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(v4 + 32);
  *(_OWORD *)(a4 + 48) = v14;
  v15 = *(_OWORD *)(v4 + 144);
  *(_OWORD *)(a4 + 128) = *(_OWORD *)(v4 + 128);
  *(_OWORD *)(a4 + 144) = v15;
  result = *(__n128 *)(v4 + 176);
  *(_OWORD *)(a4 + 160) = *(_OWORD *)(v4 + 160);
  *(__n128 *)(a4 + 176) = result;
  return result;
}

__n128 RepairContext.Builder._context(_:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  id v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __n128 result;
  uint64_t v23;
  uint64_t v24[5];
  _BYTE v25[696];
  _BYTE v26[696];
  _BYTE __src[696];
  _BYTE v28[24];
  uint64_t v29;
  _OWORD __dst[45];

  v3 = v2;

  *(_QWORD *)(v3 + 168) = a1;
  sub_236498520(v3 + 176, (uint64_t)v28);
  if (v29)
  {
    v6 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6A78);
    if ((swift_dynamicCast() & 1) != 0)
    {
      memcpy(__dst, __src, 0x2B8uLL);
      if (qword_2563E42D0 != -1)
        swift_once();
      v7 = sub_2365AFC00();
      __swift_project_value_buffer(v7, (uint64_t)qword_2563E60D8);
      v8 = sub_2365AFBE8();
      v9 = sub_2365B038C();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc();
        v23 = swift_slowAlloc();
        v24[0] = v23;
        *(_DWORD *)v10 = 136315138;
        swift_beginAccess();
        memcpy(v26, __dst, sizeof(v26));
        memcpy(v25, __dst, sizeof(v25));
        sub_236493588((uint64_t)v26);
        v11 = sub_2365B0080();
        *(_QWORD *)v25 = sub_236468D88(v11, v12, v24);
        sub_2365B04A0();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_23644B000, v8, v9, "Applying main queue override on exchange: %s", v10, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x23B7F5254](v23, -1, -1);
        MEMORY[0x23B7F5254](v10, -1, -1);
      }

      sub_2364985A8();
      v13 = sub_2365B03E0();
      swift_beginAccess();
      v14 = *(void **)&__dst[10];
      *(_QWORD *)&__dst[10] = v13;

      *(_OWORD *)v25 = __dst[0];
      *(_OWORD *)&v25[16] = __dst[1];
      *(_OWORD *)&v25[32] = __dst[2];
      *(_OWORD *)&v25[48] = __dst[3];
      *(_OWORD *)&v25[64] = __dst[4];
      *(_OWORD *)&v25[80] = __dst[5];
      *(_OWORD *)&v25[96] = __dst[6];
      *(_OWORD *)&v25[112] = __dst[7];
      *(_OWORD *)&v25[128] = __dst[8];
      *(_OWORD *)&v25[144] = __dst[9];
      *(_OWORD *)&v25[168] = *(_OWORD *)((char *)&__dst[10] + 8);
      *(_OWORD *)&v25[184] = *(_OWORD *)((char *)&__dst[11] + 8);
      *(_OWORD *)&v25[200] = *(_OWORD *)((char *)&__dst[12] + 8);
      *(_OWORD *)&v25[216] = *(_OWORD *)((char *)&__dst[13] + 8);
      *(_OWORD *)&v25[232] = *(_OWORD *)((char *)&__dst[14] + 8);
      *(_OWORD *)&v25[248] = *(_OWORD *)((char *)&__dst[15] + 8);
      *(_QWORD *)&v25[160] = v13;
      *(_QWORD *)&v25[264] = *((_QWORD *)&__dst[16] + 1);
      *(_OWORD *)&v25[272] = __dst[17];
      *(_OWORD *)&v25[288] = __dst[18];
      *(_OWORD *)&v25[304] = __dst[19];
      *(_OWORD *)&v25[320] = __dst[20];
      *(_OWORD *)&v25[336] = __dst[21];
      *(_OWORD *)&v25[352] = __dst[22];
      *(_OWORD *)&v25[368] = __dst[23];
      *(_OWORD *)&v25[384] = __dst[24];
      *(_OWORD *)&v25[400] = __dst[25];
      *(_OWORD *)&v25[416] = __dst[26];
      *(_OWORD *)&v25[432] = __dst[27];
      *(_OWORD *)&v25[448] = __dst[28];
      *(_OWORD *)&v25[464] = __dst[29];
      *(_OWORD *)&v25[480] = __dst[30];
      *(_OWORD *)&v25[496] = __dst[31];
      *(_OWORD *)&v25[512] = __dst[32];
      *(_OWORD *)&v25[528] = __dst[33];
      *(_OWORD *)&v25[544] = __dst[34];
      *(_OWORD *)&v25[560] = __dst[35];
      *(_OWORD *)&v25[576] = __dst[36];
      *(_OWORD *)&v25[592] = __dst[37];
      *(_OWORD *)&v25[608] = __dst[38];
      *(_OWORD *)&v25[624] = __dst[39];
      *(_OWORD *)&v25[640] = __dst[40];
      *(_OWORD *)&v25[656] = __dst[41];
      *(_OWORD *)&v25[672] = __dst[42];
      *(_QWORD *)&v25[688] = *(_QWORD *)&__dst[43];
      v24[3] = (uint64_t)&type metadata for AutomaticRepairModelExchange;
      v24[4] = (uint64_t)&protocol witness table for AutomaticRepairModelExchange;
      v24[0] = swift_allocObject();
      memcpy((void *)(v24[0] + 16), v25, 0x2B8uLL);
      sub_236493588((uint64_t)v25);
      sub_236498568(v3 + 176);
      sub_2364985E4((uint64_t)v24, v3 + 176);
      memcpy(v26, __dst, sizeof(v26));
      sub_23649862C((uint64_t)v26);
    }
  }
  else
  {
    v15 = a1;
    sub_236498568((uint64_t)v28);
  }
  v16 = *(_OWORD *)(v3 + 208);
  *(_OWORD *)(a2 + 192) = *(_OWORD *)(v3 + 192);
  *(_OWORD *)(a2 + 208) = v16;
  *(_BYTE *)(a2 + 224) = *(_BYTE *)(v3 + 224);
  v17 = *(_OWORD *)(v3 + 144);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(v3 + 128);
  *(_OWORD *)(a2 + 144) = v17;
  v18 = *(_OWORD *)(v3 + 176);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(v3 + 160);
  *(_OWORD *)(a2 + 176) = v18;
  v19 = *(_OWORD *)(v3 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(v3 + 64);
  *(_OWORD *)(a2 + 80) = v19;
  v20 = *(_OWORD *)(v3 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(v3 + 96);
  *(_OWORD *)(a2 + 112) = v20;
  v21 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v3;
  *(_OWORD *)(a2 + 16) = v21;
  result = *(__n128 *)(v3 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v3 + 32);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

id RepairContext.Builder._builderError(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_QWORD *)(v2 + 216) = a1;
  *(_BYTE *)(a2 + 224) = *(_BYTE *)(v2 + 224);
  v5 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(a2 + 144) = v5;
  v6 = *(_OWORD *)(v2 + 176);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(v2 + 160);
  *(_OWORD *)(a2 + 176) = v6;
  v7 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a2 + 80) = v7;
  v8 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(a2 + 112) = v8;
  v9 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v9;
  v10 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(a2 + 48) = v10;
  v11 = *(_OWORD *)(v2 + 208);
  *(_OWORD *)(a2 + 192) = *(_OWORD *)(v2 + 192);
  *(_OWORD *)(a2 + 208) = v11;
  return a1;
}

__n128 RepairContext.Builder.modelExchange<A>(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t *boxed_opaque_existential_1;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  uint64_t v16[5];

  v16[3] = a2;
  v16[4] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
  sub_236498568(v4 + 176);
  sub_2364985E4((uint64_t)v16, v4 + 176);
  v9 = *(_OWORD *)(v4 + 208);
  *(_OWORD *)(a4 + 192) = *(_OWORD *)(v4 + 192);
  *(_OWORD *)(a4 + 208) = v9;
  *(_BYTE *)(a4 + 224) = *(_BYTE *)(v4 + 224);
  v10 = *(_OWORD *)(v4 + 144);
  *(_OWORD *)(a4 + 128) = *(_OWORD *)(v4 + 128);
  *(_OWORD *)(a4 + 144) = v10;
  v11 = *(_OWORD *)(v4 + 176);
  *(_OWORD *)(a4 + 160) = *(_OWORD *)(v4 + 160);
  *(_OWORD *)(a4 + 176) = v11;
  v12 = *(_OWORD *)(v4 + 80);
  *(_OWORD *)(a4 + 64) = *(_OWORD *)(v4 + 64);
  *(_OWORD *)(a4 + 80) = v12;
  v13 = *(_OWORD *)(v4 + 112);
  *(_OWORD *)(a4 + 96) = *(_OWORD *)(v4 + 96);
  *(_OWORD *)(a4 + 112) = v13;
  v14 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)a4 = *(_OWORD *)v4;
  *(_OWORD *)(a4 + 16) = v14;
  result = *(__n128 *)(v4 + 48);
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(v4 + 32);
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 RepairContext.Builder.shouldSkipConfirmation(_:)@<Q0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;

  *(_BYTE *)(v2 + 224) = a1;
  *(_BYTE *)(a2 + 224) = a1;
  v3 = *(_OWORD *)(v2 + 208);
  *(_OWORD *)(a2 + 192) = *(_OWORD *)(v2 + 192);
  *(_OWORD *)(a2 + 208) = v3;
  v4 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(a2 + 144) = v4;
  v5 = *(_OWORD *)(v2 + 176);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(v2 + 160);
  *(_OWORD *)(a2 + 176) = v5;
  v6 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a2 + 80) = v6;
  v7 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(a2 + 112) = v7;
  v8 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v8;
  result = *(__n128 *)(v2 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 32);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

__n128 RepairContext.Builder._fixedPin(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 120) = a1;
  *(_QWORD *)(v3 + 128) = a2;
  v7 = *(_OWORD *)(v3 + 208);
  *(_OWORD *)(a3 + 192) = *(_OWORD *)(v3 + 192);
  *(_OWORD *)(a3 + 208) = v7;
  *(_BYTE *)(a3 + 224) = *(_BYTE *)(v3 + 224);
  v8 = *(_OWORD *)(v3 + 176);
  *(_OWORD *)(a3 + 160) = *(_OWORD *)(v3 + 160);
  *(_OWORD *)(a3 + 176) = v8;
  v9 = *(_OWORD *)(v3 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(v3 + 64);
  *(_OWORD *)(a3 + 80) = v9;
  v10 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v3;
  *(_OWORD *)(a3 + 16) = v10;
  v11 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(a3 + 48) = v11;
  v12 = *(_OWORD *)(v3 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(v3 + 96);
  *(_OWORD *)(a3 + 112) = v12;
  result = *(__n128 *)(v3 + 144);
  *(_OWORD *)(a3 + 128) = *(_OWORD *)(v3 + 128);
  *(__n128 *)(a3 + 144) = result;
  return result;
}

uint64_t RepairContext.Builder.build()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE v19[232];
  _OWORD v20[10];
  __int128 v21;
  _OWORD v22[3];
  char v23;

  v3 = *(void **)(v1 + 216);
  if (v3)
  {
    v4 = v3;
    sub_2364988FC(v1);
    return swift_willThrow();
  }
  v7 = *(_OWORD *)(v1 + 208);
  v22[1] = *(_OWORD *)(v1 + 192);
  v22[2] = v7;
  v23 = *(_BYTE *)(v1 + 224);
  v8 = *(_OWORD *)(v1 + 144);
  v20[8] = *(_OWORD *)(v1 + 128);
  v20[9] = v8;
  v9 = *(_OWORD *)(v1 + 176);
  v21 = *(_OWORD *)(v1 + 160);
  v22[0] = v9;
  v10 = *(_OWORD *)(v1 + 80);
  v20[4] = *(_OWORD *)(v1 + 64);
  v20[5] = v10;
  v11 = *(_OWORD *)(v1 + 112);
  v20[6] = *(_OWORD *)(v1 + 96);
  v20[7] = v11;
  v12 = *(_OWORD *)(v1 + 16);
  v20[0] = *(_OWORD *)v1;
  v20[1] = v12;
  v13 = *(_OWORD *)(v1 + 48);
  v20[2] = *(_OWORD *)(v1 + 32);
  v20[3] = v13;
  if (*((_QWORD *)&v21 + 1))
  {
    v14 = *((id *)&v21 + 1);
    v15 = AISRepairContext.into(relaxed:)(0);
    if (v15)
    {
      v16 = v15;

LABEL_8:
      sub_236498520((uint64_t)v22, (uint64_t)v19);
      sub_2364988FC((uint64_t)v20);
      *a1 = v16;
      return sub_2364985E4((uint64_t)v19, (uint64_t)(a1 + 1));
    }
    sub_236498928();
    swift_allocError();
    *v18 = 0;
    swift_willThrow();

  }
  else
  {
    sub_2364988C8((uint64_t)v20, (uint64_t)v19);
    v17 = sub_2364978B8();
    if (!v2)
    {
      v16 = v17;
      goto LABEL_8;
    }
  }
  return sub_2364988FC((uint64_t)v20);
}

uint64_t AISRepairContext.into(relaxed:)(int a1)
{
  void *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  os_unfair_lock_s *v28;
  uint64_t KeyPath;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  os_unfair_lock_s *v36;
  uint64_t v37;
  id v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  os_unfair_lock_s *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  _OWORD v77[3];
  __int128 v78;
  _OWORD v79[7];
  __int16 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  char v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _OWORD v94[3];
  _OWORD v95[8];
  _BYTE v96[8];
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  __int16 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  char v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  _OWORD v109[11];
  _OWORD v110[12];

  LODWORD(v74) = a1;
  v70 = type metadata accessor for SignInModel();
  MEMORY[0x24BDAC7A8](v70);
  v3 = (char *)&v68 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2563E42D0 != -1)
    swift_once();
  v4 = sub_2365AFC00();
  v5 = __swift_project_value_buffer(v4, (uint64_t)qword_2563E60D8);
  v6 = v1;
  v73 = v5;
  v7 = sub_2365AFBE8();
  v8 = sub_2365B0380();
  v9 = os_log_type_enabled(v7, v8);
  v75 = v6;
  v71 = v3;
  if (v9)
  {
    v10 = swift_slowAlloc();
    v11 = swift_slowAlloc();
    *(_QWORD *)&v110[0] = v11;
    *(_DWORD *)v10 = 67109634;
    LODWORD(v109[0]) = v74 & 1;
    sub_2365B04A0();
    *(_WORD *)(v10 + 8) = 2080;
    v12 = objc_msgSend(v75, sel_altDSID);
    v13 = sub_2365B005C();
    v15 = v14;

    *(_QWORD *)&v109[0] = sub_236468D88(v13, v15, (uint64_t *)v110);
    v16 = v75;
    sub_2365B04A0();

    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 18) = 2080;
    v17 = objc_msgSend(v16, sel_userProfileIdentifier);
    if (v17)
    {
      v18 = v17;
      v19 = sub_2365B005C();
      v21 = v20;

    }
    else
    {
      v21 = 0xE600000000000000;
      v19 = 0x3E6C6C756E3CLL;
    }
    *(_QWORD *)&v109[0] = sub_236468D88(v19, v21, (uint64_t *)v110);
    sub_2365B04A0();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23644B000, v7, v8, "Converting objc setup context with properties (relaxed: %{BOOL}d): {\n  altDSID: %s,\n  userProfileIdentifier: %s\n}", (uint8_t *)v10, 0x1Cu);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v11, -1, -1);
    MEMORY[0x23B7F5254](v10, -1, -1);

  }
  else
  {

  }
  v22 = AISSetupContext.into(relaxed:)(v74 & 1);
  if (v22)
  {
    v23 = v22;
    swift_getKeyPath();
    v24 = v23 + OBJC_IVAR____TtC12AppleIDSetup10SetupModel___observationRegistrar;
    *(_QWORD *)&v110[0] = v23;
    v25 = sub_236498A1C();
    sub_2365AFA44();
    swift_release();
    swift_getKeyPath();
    *(_QWORD *)&v110[0] = v23;
    v74 = v24;
    sub_2365AFA44();
    swift_release();
    v26 = *(_QWORD *)(v23 + 16);
    v27 = (_OWORD *)(v26 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v26 + 16));
    v28 = (os_unfair_lock_s *)(v26 + ((*(unsigned int *)(*(_QWORD *)v26 + 48) + 3) & 0x1FFFFFFFCLL));
    swift_retain();
    os_unfair_lock_lock(v28);
    sub_236571F64(v27, v96);
    os_unfair_lock_unlock(v28);
    swift_release();
    v96[0] = 1;
    LOWORD(v94[0]) = __PAIR16__(v96[1], 1);
    *(_OWORD *)((char *)v94 + 8) = v97;
    *(_OWORD *)((char *)&v94[1] + 8) = v98;
    *((_QWORD *)&v94[2] + 1) = v99;
    LOWORD(v95[0]) = v100;
    *(_OWORD *)((char *)v95 + 8) = v101;
    *(_OWORD *)((char *)&v95[1] + 8) = v102;
    *(_OWORD *)((char *)&v95[2] + 8) = v103;
    *(_OWORD *)((char *)&v95[3] + 8) = v104;
    BYTE8(v95[4]) = v105;
    v95[5] = v106;
    v95[6] = v107;
    v95[7] = v108;
    v110[5] = v95[2];
    v110[3] = v95[0];
    v110[4] = v95[1];
    v110[1] = v94[1];
    v110[2] = v94[2];
    v110[0] = v94[0];
    v110[10] = v108;
    v110[9] = v107;
    v110[8] = v106;
    v110[6] = v95[3];
    v110[7] = v95[4];
    KeyPath = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](KeyPath);
    *(&v68 - 2) = v23;
    *(&v68 - 1) = (uint64_t)v110;
    *(_QWORD *)&v109[0] = v23;
    v69 = MEMORY[0x24BEE4AE0] + 8;
    sub_2365AFA38();
    sub_236498A84((uint64_t)v94);
    swift_release();
    v30 = objc_msgSend(v75, sel_altDSID);
    v31 = sub_2365B005C();
    v33 = v32;

    swift_getKeyPath();
    *(_QWORD *)&v109[0] = v23;
    sub_2365AFA44();
    swift_release();
    swift_getKeyPath();
    *(_QWORD *)&v109[0] = v23;
    v72 = v25;
    sub_2365AFA44();
    swift_release();
    v34 = *(_QWORD *)(v23 + 16);
    v35 = (_OWORD *)(v34 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v34 + 16));
    v36 = (os_unfair_lock_s *)(v34 + ((*(unsigned int *)(*(_QWORD *)v34 + 48) + 3) & 0x1FFFFFFFCLL));
    swift_retain();
    os_unfair_lock_lock(v36);
    sub_236571F64(v35, &v80);
    os_unfair_lock_unlock(v36);
    swift_release();
    swift_bridgeObjectRelease();
    v85 = v31;
    v86 = v33;
    LOWORD(v77[0]) = v80;
    *(_OWORD *)((char *)v77 + 8) = v81;
    *(_OWORD *)((char *)&v77[1] + 8) = v82;
    *((_QWORD *)&v77[2] + 1) = v83;
    LOWORD(v78) = v84;
    *((_QWORD *)&v78 + 1) = v31;
    *(_QWORD *)&v79[0] = v33;
    *(_OWORD *)((char *)v79 + 8) = v87;
    *(_OWORD *)((char *)&v79[1] + 8) = v88;
    *(_OWORD *)((char *)&v79[2] + 8) = v89;
    BYTE8(v79[3]) = v90;
    v79[4] = v91;
    v79[5] = v92;
    v79[6] = v93;
    v109[4] = v79[0];
    v109[5] = v79[1];
    v109[2] = v77[2];
    v109[3] = v78;
    v109[0] = v77[0];
    v109[1] = v77[1];
    v109[9] = v92;
    v109[10] = v93;
    v109[7] = v79[3];
    v109[8] = v91;
    v109[6] = v79[2];
    v37 = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](v37);
    *(&v68 - 2) = v23;
    *(&v68 - 1) = (uint64_t)v109;
    v76 = v23;
    sub_2365AFA38();
    sub_236498A84((uint64_t)v77);
    swift_release();
    v38 = v75;
    v39 = objc_msgSend(v75, sel_userProfileIdentifier);
    if (v39)
    {
      v40 = v39;
      v41 = sub_2365B005C();
      v69 = v42;

      v43 = sub_2365AFBE8();
      v44 = sub_2365B0380();
      if (os_log_type_enabled(v43, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v45 = 0;
        _os_log_impl(&dword_23644B000, v43, v44, "Client provided a profile identifier. Setting it.", v45, 2u);
        MEMORY[0x23B7F5254](v45, -1, -1);
      }

      swift_getKeyPath();
      v76 = v23;
      sub_2365AFA44();
      swift_release();
      swift_getKeyPath();
      v76 = v23;
      sub_2365AFA44();
      swift_release();
      v46 = *(_QWORD *)(v23 + 16);
      v47 = v46 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v46 + 16);
      v48 = (os_unfair_lock_s *)(v46 + ((*(unsigned int *)(*(_QWORD *)v46 + 48) + 3) & 0x1FFFFFFFCLL));
      swift_retain();
      os_unfair_lock_lock(v48);
      v49 = (uint64_t)v71;
      sub_236572E68(v47, (uint64_t)v71);
      os_unfair_lock_unlock(v48);
      swift_release();
      v50 = v49 + *(int *)(v70 + 48);
      sub_236498C2C(*(_QWORD *)v50, *(_QWORD *)(v50 + 8), *(_BYTE *)(v50 + 16));
      v51 = v69;
      *(_QWORD *)v50 = v41;
      *(_QWORD *)(v50 + 8) = v51;
      *(_BYTE *)(v50 + 16) = 0;
      v52 = swift_getKeyPath();
      MEMORY[0x24BDAC7A8](v52);
      *(&v68 - 2) = v23;
      *(&v68 - 1) = v49;
      v76 = v23;
      sub_2365AFA38();
      swift_release();
      sub_236465A18(v49, (uint64_t (*)(_QWORD))type metadata accessor for SignInModel);
      v38 = v75;
    }
    v53 = objc_msgSend(v38, sel_altDSID);
    v54 = sub_2365B005C();
    v56 = v55;

    v57 = objc_msgSend(v38, sel_userProfileIdentifier);
    if (v57)
    {
      v58 = v57;
      v59 = sub_2365B005C();
      v61 = v60;

    }
    else
    {
      v59 = 0;
      v61 = 0;
    }
    type metadata accessor for RepairModel();
    v65 = swift_allocObject();
    sub_2365AFA50();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6A88);
    v66 = swift_allocObject();
    *(_DWORD *)(v66 + 148) = 0;
    *(_QWORD *)(v66 + 16) = v54;
    *(_QWORD *)(v66 + 24) = v56;
    *(_OWORD *)(v66 + 32) = 0u;
    *(_OWORD *)(v66 + 48) = 0u;
    *(_OWORD *)(v66 + 64) = 0u;
    *(_QWORD *)(v66 + 80) = v59;
    *(_QWORD *)(v66 + 88) = v61;
    *(_QWORD *)(v66 + 96) = v23;
    *(_OWORD *)(v66 + 104) = 0u;
    *(_OWORD *)(v66 + 120) = 0u;
    *(_QWORD *)(v66 + 136) = 0;
    *(_BYTE *)(v66 + 144) = -1;
    *(_QWORD *)(v65 + 16) = v66;
  }
  else
  {
    v62 = sub_2365AFBE8();
    v63 = sub_2365B0398();
    if (os_log_type_enabled(v62, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v64 = 0;
      _os_log_impl(&dword_23644B000, v62, v63, "Unable to convert setup model", v64, 2u);
      MEMORY[0x23B7F5254](v64, -1, -1);
    }

    return 0;
  }
  return v65;
}

uint64_t sub_2364978B8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  int *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  void *v62;
  void *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BOOL4 v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  _BYTE v92[11];
  __int16 v93;
  int v94;
  __int16 v95;

  v80 = type metadata accessor for SetupModel.ModelData(0);
  MEMORY[0x24BDAC7A8](v80);
  v2 = (char *)&v61 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for SignInModel();
  MEMORY[0x24BDAC7A8](v77);
  v91 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E45E0);
  MEMORY[0x24BDAC7A8](v4);
  v74 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for AuthenticationModel();
  v6 = MEMORY[0x24BDAC7A8](v66);
  v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v90 = (uint64_t)&v61 - v9;
  v10 = *(void **)(v0 + 88);
  v11 = *(void **)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 104);
  v13 = *(unsigned int *)(v0 + 112) | ((unint64_t)*(unsigned __int16 *)(v0 + 116) << 32);
  v78 = (v12 >> 62) >= 2;
  v14 = *(_QWORD *)v0;
  v15 = *(_QWORD *)(v0 + 8);
  v16 = *(_QWORD *)(v0 + 24);
  v17 = *(_QWORD *)(v0 + 32);
  v18 = *(_QWORD *)(v0 + 40);
  v19 = *(_QWORD *)(v0 + 48);
  v20 = *(_QWORD *)(v0 + 56);
  v21 = *(_QWORD *)(v0 + 64);
  v22 = *(_QWORD *)(v0 + 72);
  if (v15)
  {
    v88 = *(_QWORD *)(v0 + 16);
    v89 = v14;
    v79 = v15;
    v86 = v17;
    v87 = v16;
    v84 = v19;
    v85 = v18;
    v82 = v21;
    v83 = v20;
    v81 = v22;
  }
  else
  {
    v88 = 0;
    v89 = 0;
    v86 = 0;
    v87 = 0;
    v84 = 0;
    v85 = 0;
    v82 = 0;
    v83 = 0;
    v81 = 0;
    v79 = 0xE000000000000000;
  }
  v69 = *(unsigned __int8 *)(v0 + 80);
  v23 = *(_QWORD *)(v0 + 128);
  v75 = *(_QWORD *)(v0 + 120);
  v76 = v69 ^ 1u | 0x200;
  v67 = v23;
  v24 = *(_QWORD *)(v0 + 144);
  v70 = *(_QWORD *)(v0 + 136);
  v68 = v24;
  v73 = *(_QWORD *)(v0 + 152);
  v72 = *(unsigned __int8 *)(v0 + 160);
  v71 = *(unsigned __int8 *)(v0 + 224);
  sub_23644F440(v14, v15);
  v62 = v10;
  sub_236499054(v10, v11, v12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2364988FC(v0);
  v25 = type metadata accessor for IdMSAccount();
  v26 = *(_QWORD *)(v25 - 8);
  v65 = v13;
  v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
  v28 = (uint64_t)v74;
  v27(v74, 1, 1, v25);
  v27(v8, 1, 1, v25);
  v29 = (int *)v66;
  v30 = &v8[*(int *)(v66 + 20)];
  *((_OWORD *)v30 + 3) = 0u;
  *((_OWORD *)v30 + 4) = 0u;
  *((_OWORD *)v30 + 1) = 0u;
  *((_OWORD *)v30 + 2) = 0u;
  *(_OWORD *)v30 = 0u;
  v31 = v29[8];
  v64 = v12;
  v32 = &v8[v31];
  *(_QWORD *)v32 = 0;
  *((_QWORD *)v32 + 1) = 0;
  v63 = v11;
  v33 = v29[9];
  *(_QWORD *)&v8[v33] = MEMORY[0x24BEE4AF8];
  v34 = v29[10];
  v8[v34] = 0;
  v35 = &v8[v29[11]];
  *(_QWORD *)v35 = 0;
  *((_QWORD *)v35 + 1) = 0;
  sub_23644F344(v28, (uint64_t)v8);
  v8[v29[6]] = 1;
  v36 = &v8[v29[7]];
  *((_OWORD *)v36 + 3) = 0u;
  *((_OWORD *)v36 + 4) = 0u;
  *((_OWORD *)v36 + 1) = 0u;
  *((_OWORD *)v36 + 2) = 0u;
  *(_OWORD *)v36 = 0u;
  v36[80] = 8;
  swift_bridgeObjectRelease();
  *(_QWORD *)v32 = 0;
  *((_QWORD *)v32 + 1) = 0;
  v8[v34] = 0;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v8[v33] = MEMORY[0x24BEE4AF8];
  v37 = v90;
  sub_236499BE8((uint64_t)v8, v90);
  v27((char *)v28, 1, 1, v25);
  v38 = (uint64_t)v91;
  v27(v91, 1, 1, v25);
  v39 = (int *)v77;
  v40 = v38 + *(int *)(v77 + 20);
  *(_OWORD *)(v40 + 64) = 0u;
  *(_OWORD *)(v40 + 80) = 0u;
  *(_OWORD *)(v40 + 32) = 0u;
  *(_OWORD *)(v40 + 48) = 0u;
  *(_OWORD *)v40 = 0u;
  *(_OWORD *)(v40 + 16) = 0u;
  v41 = v38 + v39[10];
  *(_OWORD *)v41 = 0u;
  *(_OWORD *)(v41 + 16) = 0u;
  *(_QWORD *)(v38 + v39[11]) = 0;
  v42 = (_QWORD *)(v38 + v39[13]);
  *v42 = 0;
  v42[1] = 0;
  *(_BYTE *)(v38 + v39[14]) = 0;
  sub_23644F344(v28, v38);
  sub_236499C2C(*(_QWORD *)v40, *(_QWORD *)(v40 + 8), *(_QWORD *)(v40 + 16), *(_QWORD *)(v40 + 24), *(_QWORD *)(v40 + 32), *(_QWORD *)(v40 + 40), *(_QWORD *)(v40 + 48), *(_QWORD *)(v40 + 56), *(_QWORD *)(v40 + 64), *(_QWORD *)(v40 + 72), *(_QWORD *)(v40 + 80), *(_QWORD *)(v40 + 88));
  *(_OWORD *)(v40 + 64) = 0u;
  *(_OWORD *)(v40 + 80) = 0u;
  *(_OWORD *)(v40 + 32) = 0u;
  *(_OWORD *)(v40 + 48) = 0u;
  *(_OWORD *)v40 = 0u;
  *(_OWORD *)(v40 + 16) = 0u;
  v43 = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v38 + v39[6]) = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v38 + v39[7]) = v43;
  *(_BYTE *)(v38 + v39[8]) = 0;
  *(_BYTE *)(v38 + v39[9]) = 0;
  v44 = v38 + v39[12];
  *(_QWORD *)v44 = 0;
  *(_QWORD *)(v44 + 8) = 0;
  *(_BYTE *)(v44 + 16) = 1;
  v45 = v38 + v39[15];
  *(_BYTE *)(v45 + 32) = 0;
  *(_OWORD *)v45 = 0u;
  *(_OWORD *)(v45 + 16) = 0u;
  sub_23648DD50(*(_QWORD *)v41, *(_QWORD *)(v41 + 8));
  type metadata accessor for SetupModel(0);
  *(_OWORD *)v41 = 0u;
  *(_OWORD *)(v41 + 16) = 0u;
  v46 = swift_allocObject();
  sub_2365AFA50();
  v47 = v80;
  sub_23648DFF8(v37, (uint64_t)&v2[*(int *)(v80 + 32)], (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  sub_23648DFF8(v38, (uint64_t)&v2[*(int *)(v47 + 36)], (uint64_t (*)(_QWORD))type metadata accessor for SignInModel);
  *v2 = v69;
  v48 = v63;
  *((_QWORD *)v2 + 1) = v62;
  *((_QWORD *)v2 + 2) = v48;
  *((_QWORD *)v2 + 3) = v64;
  v49 = v65;
  *((_WORD *)v2 + 18) = WORD2(v65);
  *((_DWORD *)v2 + 8) = v49;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  v2[88] = -1;
  v2[96] = 1;
  v2[97] = v78;
  *(_DWORD *)(v2 + 98) = v94;
  *((_WORD *)v2 + 51) = v95;
  v50 = v68;
  *((_QWORD *)v2 + 13) = v70;
  *((_QWORD *)v2 + 14) = v50;
  v51 = v67;
  *((_QWORD *)v2 + 15) = v75;
  *((_QWORD *)v2 + 16) = v51;
  *((_QWORD *)v2 + 17) = v73;
  v2[144] = v72;
  v2[145] = v71;
  *(_DWORD *)(v2 + 146) = *(_DWORD *)&v92[7];
  *((_WORD *)v2 + 75) = v93;
  *((_QWORD *)v2 + 19) = 0;
  *((_QWORD *)v2 + 20) = 0;
  *((_QWORD *)v2 + 21) = v76;
  *((_QWORD *)v2 + 22) = 0;
  *((_QWORD *)v2 + 23) = 0;
  *((_QWORD *)v2 + 24) = 0;
  *(_OWORD *)(v2 + 200) = xmmword_2365B7D10;
  v2[216] = 0;
  *(_DWORD *)(v2 + 217) = *(_DWORD *)v92;
  *((_DWORD *)v2 + 55) = *(_DWORD *)&v92[3];
  *((_OWORD *)v2 + 15) = 0u;
  *((_OWORD *)v2 + 16) = 0u;
  *((_OWORD *)v2 + 14) = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6AC8);
  v52 = swift_allocObject();
  *(_DWORD *)(v52 + ((*(unsigned int *)(*(_QWORD *)v52 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_23648DFF8((uint64_t)v2, v52 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v52 + 16), type metadata accessor for SetupModel.ModelData);
  sub_236465A18(v38, (uint64_t (*)(_QWORD))type metadata accessor for SignInModel);
  sub_236465A18(v37, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  sub_236465A18((uint64_t)v2, type metadata accessor for SetupModel.ModelData);
  *(_QWORD *)(v46 + 16) = v52;
  type metadata accessor for RepairModel();
  v53 = swift_allocObject();
  sub_2365AFA50();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6A88);
  v54 = swift_allocObject();
  *(_DWORD *)(v54 + 148) = 0;
  v55 = v79;
  *(_QWORD *)(v54 + 16) = v89;
  *(_QWORD *)(v54 + 24) = v55;
  v56 = v87;
  *(_QWORD *)(v54 + 32) = v88;
  *(_QWORD *)(v54 + 40) = v56;
  v57 = v85;
  *(_QWORD *)(v54 + 48) = v86;
  *(_QWORD *)(v54 + 56) = v57;
  v58 = v83;
  *(_QWORD *)(v54 + 64) = v84;
  *(_QWORD *)(v54 + 72) = v58;
  v59 = v81;
  *(_QWORD *)(v54 + 80) = v82;
  *(_QWORD *)(v54 + 88) = v59;
  *(_QWORD *)(v54 + 96) = v46;
  *(_OWORD *)(v54 + 104) = 0u;
  *(_OWORD *)(v54 + 120) = 0u;
  *(_QWORD *)(v54 + 136) = 0;
  *(_BYTE *)(v54 + 144) = -1;
  *(_QWORD *)(v53 + 16) = v54;
  return v53;
}

uint64_t sub_236498014@<X0>(uint64_t *a1@<X8>)
{
  return RepairContext.Builder.build()(a1);
}

uint64_t sub_236498028@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_getKeyPath();
  sub_236498A1C();
  sub_2365AFA44();
  swift_release();
  *a2 = *(_QWORD *)(v3 + 16);
  return swift_retain();
}

uint64_t sub_2364980A0()
{
  swift_getKeyPath();
  sub_236498A1C();
  swift_retain();
  sub_2365AFA38();
  swift_release();
  return swift_release();
}

__n128 sub_236498140@<Q0>(uint64_t a1@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  _OWORD v7[11];

  sub_236571DF0(v7);
  v2 = v7[9];
  *(_OWORD *)(a1 + 128) = v7[8];
  *(_OWORD *)(a1 + 144) = v2;
  *(_OWORD *)(a1 + 160) = v7[10];
  v3 = v7[5];
  *(_OWORD *)(a1 + 64) = v7[4];
  *(_OWORD *)(a1 + 80) = v3;
  v4 = v7[7];
  *(_OWORD *)(a1 + 96) = v7[6];
  *(_OWORD *)(a1 + 112) = v4;
  v5 = v7[1];
  *(_OWORD *)a1 = v7[0];
  *(_OWORD *)(a1 + 16) = v5;
  result = (__n128)v7[3];
  *(_OWORD *)(a1 + 32) = v7[2];
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t sub_2364981A0(_OWORD *a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[11];

  v1 = a1[9];
  v7[8] = a1[8];
  v7[9] = v1;
  v7[10] = a1[10];
  v2 = a1[5];
  v7[4] = a1[4];
  v7[5] = v2;
  v3 = a1[7];
  v7[6] = a1[6];
  v7[7] = v3;
  v4 = a1[1];
  v7[0] = *a1;
  v7[1] = v4;
  v5 = a1[3];
  v7[2] = a1[2];
  v7[3] = v5;
  swift_getKeyPath();
  sub_236499A64((uint64_t)v7);
  sub_236498A1C();
  sub_2365AFA38();
  sub_236498A84((uint64_t)v7);
  return swift_release();
}

uint64_t sub_23649826C@<X0>(uint64_t a1@<X8>)
{
  return sub_236572D3C(a1);
}

uint64_t sub_23649828C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v9[16];
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;

  v4 = type metadata accessor for SignInModel();
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_23648DFF8(a1, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for SignInModel);
  v7 = *a2;
  swift_getKeyPath();
  v10 = v7;
  v11 = v6;
  v12 = v7;
  sub_236498A1C();
  sub_2365AFA38();
  swift_release();
  return sub_236465A18((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for SignInModel);
}

uint64_t sub_23649837C()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_2364984F8(void *a1, id a2, unint64_t a3)
{
  unint64_t v3;

  v3 = a3 >> 62;
  if (a3 >> 62 == 2 || (_DWORD)v3 == 1)
  {

  }
  else if (!(_DWORD)v3)
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_236498520(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6A70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_236498568(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6A70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_2364985A8()
{
  unint64_t result;

  result = qword_2542A82F8;
  if (!qword_2542A82F8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2542A82F8);
  }
  return result;
}

uint64_t sub_2364985E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6A70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23649862C(uint64_t a1)
{
  void *v3;

  v3 = *(void **)(a1 + 160);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return a1;
}

uint64_t sub_2364988C8(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for RepairContext.Builder(a2, a1);
  return a2;
}

uint64_t sub_2364988FC(uint64_t a1)
{
  destroy for RepairContext.Builder(a1);
  return a1;
}

unint64_t sub_236498928()
{
  unint64_t result;

  result = qword_2563E6A80;
  if (!qword_2563E6A80)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B7EF8, &type metadata for RepairContext.Builder.Failure);
    atomic_store(result, (unint64_t *)&qword_2563E6A80);
  }
  return result;
}

uint64_t sub_23649896C(uint64_t (*a1)(void))
{
  return a1() & 1;
}

uint64_t sub_236498990@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

__n128 sub_2364989B8@<Q0>(uint64_t a1@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  _OWORD v7[11];

  sub_236571DF0(v7);
  v2 = v7[9];
  *(_OWORD *)(a1 + 128) = v7[8];
  *(_OWORD *)(a1 + 144) = v2;
  *(_OWORD *)(a1 + 160) = v7[10];
  v3 = v7[5];
  *(_OWORD *)(a1 + 64) = v7[4];
  *(_OWORD *)(a1 + 80) = v3;
  v4 = v7[7];
  *(_OWORD *)(a1 + 96) = v7[6];
  *(_OWORD *)(a1 + 112) = v4;
  v5 = v7[1];
  *(_OWORD *)a1 = v7[0];
  *(_OWORD *)(a1 + 16) = v5;
  result = (__n128)v7[3];
  *(_OWORD *)(a1 + 32) = v7[2];
  *(__n128 *)(a1 + 48) = result;
  return result;
}

unint64_t sub_236498A1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2563E60B0;
  if (!qword_2563E60B0)
  {
    v1 = type metadata accessor for SetupModel(255);
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for SetupModel, v1);
    atomic_store(result, (unint64_t *)&qword_2563E60B0);
  }
  return result;
}

void sub_236498A6C()
{
  uint64_t v0;

  sub_2365720D0(*(_QWORD *)(v0 + 16), *(_OWORD **)(v0 + 24));
}

uint64_t sub_236498A84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  v10 = *(_QWORD *)(a1 + 136);
  v11 = *(_QWORD *)(a1 + 128);
  v8 = *(unsigned __int8 *)(a1 + 120);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_236498B50(v2, v3, v4, v5, v6, v7, v8);
  sub_236484E1C(v11, v10);
  swift_bridgeObjectRelease();
  return a1;
}

void sub_236498B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  int v9;
  unsigned __int8 v11;

  v9 = (a7 >> 3) & 3;
  if (v9 == 1)
  {
    v11 = a7 & 0xE7;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_236498BE0(a4, a5, a6, v11);
  }
  else if (!v9)
  {
    sub_236498BE0(a2, a3, a4, a5);
  }
}

uint64_t sub_236498BE0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  int v4;
  uint64_t result;

  v4 = a4 >> 5;
  if (v4 == 3)
    return swift_release();
  if (v4 == 2 || !(a4 >> 5))
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_236498C08@<X0>(uint64_t a1@<X8>)
{
  return sub_236572D3C(a1);
}

uint64_t sub_236498C2C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (!a3)
    return swift_bridgeObjectRelease();
  return result;
}

void sub_236498C40()
{
  uint64_t v0;

  sub_236572F6C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

_UNKNOWN **sub_236498C58()
{
  return &protocol witness table for RepairContext.Builder;
}

uint64_t destroy for RepairContext(uint64_t a1)
{
  uint64_t result;

  result = swift_release();
  if (*(_QWORD *)(a1 + 32))
    return __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  return result;
}

uint64_t initializeWithCopy for RepairContext(uint64_t a1, _QWORD *a2)
{
  _OWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  *(_QWORD *)a1 = *a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = a2 + 1;
  v6 = a2[4];
  swift_retain();
  if (v6)
  {
    v7 = a2[5];
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v7;
    (**(void (***)(uint64_t, _QWORD *, uint64_t))(v6 - 8))(a1 + 8, v5, v6);
  }
  else
  {
    v8 = *((_OWORD *)v5 + 1);
    *v4 = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 40) = v5[4];
  }
  return a1;
}

uint64_t assignWithCopy for RepairContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 32);
  if (!*(_QWORD *)(a1 + 32))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 32) = v4;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
      return a1;
    }
LABEL_7:
    v5 = *(_OWORD *)(a2 + 8);
    v6 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 8) = v5;
    *(_OWORD *)(a1 + 24) = v6;
    return a1;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for RepairContext(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  if (*(_QWORD *)(a1 + 32))
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for RepairContext(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RepairContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RepairContext()
{
  return &type metadata for RepairContext;
}

id sub_236499054(id result, id a2, unint64_t a3)
{
  unint64_t v3;

  v3 = a3 >> 62;
  if (a3 >> 62 == 2 || (_DWORD)v3 == 1)
    return result;
  if (!(_DWORD)v3)
    return (id)swift_bridgeObjectRetain();
  return result;
}

void destroy for RepairContext.Builder(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_2364984F8(*(void **)(a1 + 88), *(id *)(a1 + 96), *(_QWORD *)(a1 + 104));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (*(_QWORD *)(a1 + 200))
    __swift_destroy_boxed_opaque_existential_1(a1 + 176);

}

uint64_t initializeWithCopy for RepairContext.Builder(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  void *v12;
  unint64_t v13;
  __int16 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  __int128 v22;
  void *v23;
  id v24;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    v5 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v5;
    v6 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v6;
    v7 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v7;
    v8 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v9;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
  }
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v11 = *(void **)(a2 + 88);
  v12 = *(void **)(a2 + 96);
  v13 = *(_QWORD *)(a2 + 104);
  v14 = *(_WORD *)(a2 + 116);
  v15 = *(_DWORD *)(a2 + 112);
  sub_236499054(v11, v12, v13);
  *(_QWORD *)(a1 + 88) = v11;
  *(_QWORD *)(a1 + 96) = v12;
  *(_QWORD *)(a1 + 104) = v13;
  *(_WORD *)(a1 + 116) = v14;
  *(_DWORD *)(a1 + 112) = v15;
  v16 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v16;
  v17 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v17;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v18 = *(void **)(a2 + 168);
  *(_QWORD *)(a1 + 168) = v18;
  v19 = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20 = v18;
  if (v19)
  {
    v21 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 200) = v19;
    *(_QWORD *)(a1 + 208) = v21;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v19 - 8))(a1 + 176, a2 + 176, v19);
  }
  else
  {
    v22 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v22;
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  }
  v23 = *(void **)(a2 + 216);
  v24 = v23;
  *(_QWORD *)(a1 + 216) = v23;
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  return a1;
}

uint64_t assignWithCopy for RepairContext.Builder(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  void *v12;
  unint64_t v13;
  __int16 v14;
  int v15;
  void *v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  void *v26;
  void *v27;
  id v28;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v4)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_236460568(a1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v5 = *(_OWORD *)(a2 + 64);
      v7 = *(_OWORD *)(a2 + 16);
      v6 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v5;
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 32) = v6;
    }
  }
  else if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v8 = *(_OWORD *)(a2 + 16);
    v9 = *(_OWORD *)(a2 + 32);
    v10 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v10;
    *(_OWORD *)(a1 + 16) = v8;
    *(_OWORD *)(a1 + 32) = v9;
  }
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v11 = *(void **)(a2 + 88);
  v12 = *(void **)(a2 + 96);
  v13 = *(_QWORD *)(a2 + 104);
  v14 = *(_WORD *)(a2 + 116);
  v15 = *(_DWORD *)(a2 + 112);
  sub_236499054(v11, v12, v13);
  v16 = *(void **)(a1 + 88);
  v17 = *(void **)(a1 + 96);
  v18 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = v11;
  *(_QWORD *)(a1 + 96) = v12;
  *(_QWORD *)(a1 + 104) = v13;
  *(_DWORD *)(a1 + 112) = v15;
  *(_WORD *)(a1 + 116) = v14;
  sub_2364984F8(v16, v17, v18);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v19;
  v20 = *(void **)(a1 + 168);
  v21 = *(void **)(a2 + 168);
  *(_QWORD *)(a1 + 168) = v21;
  v22 = v21;

  v23 = *(_QWORD *)(a2 + 200);
  if (!*(_QWORD *)(a1 + 200))
  {
    if (v23)
    {
      *(_QWORD *)(a1 + 200) = v23;
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      (**(void (***)(uint64_t, uint64_t))(v23 - 8))(a1 + 176, a2 + 176);
      goto LABEL_15;
    }
LABEL_14:
    v24 = *(_OWORD *)(a2 + 176);
    v25 = *(_OWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 176) = v24;
    *(_OWORD *)(a1 + 192) = v25;
    goto LABEL_15;
  }
  if (!v23)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 176);
    goto LABEL_14;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 176), (uint64_t *)(a2 + 176));
LABEL_15:
  v26 = *(void **)(a1 + 216);
  v27 = *(void **)(a2 + 216);
  v28 = v27;
  *(_QWORD *)(a1 + 216) = v27;

  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  return a1;
}

__n128 __swift_memcpy225_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  result = (__n128)a2[11];
  v11 = a2[12];
  v12 = a2[13];
  *(_BYTE *)(a1 + 224) = *((_BYTE *)a2 + 224);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

uint64_t assignWithTake for RepairContext.Builder(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  void *v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  __int128 v20;
  uint64_t v21;
  void *v22;

  if (*(_QWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v4;
      swift_bridgeObjectRelease();
      v5 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v5;
      swift_bridgeObjectRelease();
      v6 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v6;
      swift_bridgeObjectRelease();
      v7 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v7;
      swift_bridgeObjectRelease();
      v8 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v8;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_236460568(a1);
  }
  v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
LABEL_6:
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v11 = *(_QWORD *)(a2 + 104);
  v12 = *(_WORD *)(a2 + 116);
  v13 = *(_DWORD *)(a2 + 112);
  v14 = *(void **)(a1 + 88);
  v15 = *(void **)(a1 + 96);
  v16 = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = v11;
  *(_DWORD *)(a1 + 112) = v13;
  *(_WORD *)(a1 + 116) = v12;
  sub_2364984F8(v14, v15, v16);
  v17 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v17;
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v18;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v19 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);

  if (*(_QWORD *)(a1 + 200))
    __swift_destroy_boxed_opaque_existential_1(a1 + 176);
  v20 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v20;
  v21 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  v22 = *(void **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v21;

  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  return a1;
}

uint64_t getEnumTagSinglePayload for RepairContext.Builder(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 225))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = (*(_QWORD *)(a1 + 104) >> 24) & 0xFFFF0000 | WORD1(*(_QWORD *)(a1 + 104));
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for RepairContext.Builder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 216) = 0;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 224) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 225) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 88) = 0;
      *(_QWORD *)(result + 96) = 0;
      *(_QWORD *)(result + 104) = (-65536 * a2) | ((unint64_t)(-a2 >> 16) << 40);
      *(_WORD *)(result + 116) = 0;
      *(_DWORD *)(result + 112) = 0;
      return result;
    }
    *(_BYTE *)(result + 225) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RepairContext.Builder()
{
  return &type metadata for RepairContext.Builder;
}

_QWORD *initializeBufferWithCopyOfBuffer for RepairContext.Builder.MissingExpectedValue(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for RepairContext.Builder.MissingExpectedValue(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for RepairContext.Builder.MissingExpectedValue(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RepairContext.Builder.MissingExpectedValue(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RepairContext.Builder.MissingExpectedValue(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RepairContext.Builder.MissingExpectedValue()
{
  return &type metadata for RepairContext.Builder.MissingExpectedValue;
}

uint64_t storeEnumTagSinglePayload for RepairContext.Builder.Failure(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23649999C + 4 * byte_2365B7D35[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2364999D0 + 4 * byte_2365B7D30[v4]))();
}

uint64_t sub_2364999D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364999D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2364999E0);
  return result;
}

uint64_t sub_2364999EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2364999F4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2364999F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236499A00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RepairContext.Builder.Failure()
{
  return &type metadata for RepairContext.Builder.Failure;
}

unint64_t sub_236499A20()
{
  unint64_t result;

  result = qword_2563E6AC0;
  if (!qword_2563E6AC0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B7ED0, &type metadata for RepairContext.Builder.Failure);
    atomic_store(result, (unint64_t *)&qword_2563E6AC0);
  }
  return result;
}

uint64_t sub_236499A64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  v10 = *(_QWORD *)(a1 + 136);
  v11 = *(_QWORD *)(a1 + 128);
  v8 = *(unsigned __int8 *)(a1 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_236499B30(v2, v3, v4, v5, v6, v7, v8);
  sub_236485214(v11, v10);
  swift_bridgeObjectRetain();
  return a1;
}

void sub_236499B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  int v9;
  unsigned __int8 v11;

  v9 = (a7 >> 3) & 3;
  if (v9 == 1)
  {
    v11 = a7 & 0xE7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_236499BC0(a4, a5, a6, v11);
  }
  else if (!v9)
  {
    sub_236499BC0(a2, a3, a4, a5);
  }
}

uint64_t sub_236499BC0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  int v4;
  uint64_t result;

  v4 = a4 >> 5;
  if (v4 == 3)
    return swift_retain();
  if (v4 == 2 || !(a4 >> 5))
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_236499BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AuthenticationModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_236499C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_23646A42C(a11, a12);
  }
  return result;
}

void sub_236499CA0()
{
  sub_236498A6C();
}

void sub_236499CB4()
{
  sub_236498C40();
}

void __swiftcall IdMSAccount.ID.init(altDsid:username:dsid:name:deviceUserId:)(AppleIDSetup::IdMSAccount::ID *__return_ptr retstr, Swift::String altDsid, Swift::String_optional username, Swift::String_optional dsid, Swift::String_optional name, Swift::String_optional deviceUserId)
{
  retstr->altDsid = altDsid;
  retstr->username = username;
  retstr->dsid = dsid;
  retstr->name = name;
  retstr->deviceUserId = deviceUserId;
}

uint64_t IdMSAccount.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 56);
  *(_QWORD *)(a1 + 72) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 IdMSAccount.id.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v7 = a1[1];
  v8 = *a1;
  v5 = (__n128)a1[3];
  v6 = a1[2];
  v2 = *((_QWORD *)a1 + 8);
  v3 = *((_QWORD *)a1 + 9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)v1 = v8;
  *(_OWORD *)(v1 + 16) = v7;
  result = v5;
  *(_OWORD *)(v1 + 32) = v6;
  *(__n128 *)(v1 + 48) = v5;
  *(_QWORD *)(v1 + 64) = v2;
  *(_QWORD *)(v1 + 72) = v3;
  return result;
}

uint64_t (*IdMSAccount.id.modify())()
{
  return nullsub_1;
}

uint64_t IdMSAccount.name.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for IdMSAccount() + 20);
  v4 = sub_2365AF8D0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t IdMSAccount.name.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for IdMSAccount() + 20);
  v4 = sub_2365AF8D0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*IdMSAccount.name.modify())()
{
  type metadata accessor for IdMSAccount();
  return nullsub_1;
}

uint64_t IdMSAccount.credential.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = v1 + *(int *)(type metadata accessor for IdMSAccount() + 24);
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(_QWORD *)(v3 + 32);
  v9 = *(_QWORD *)(v3 + 40);
  v10 = *(_QWORD *)(v3 + 48);
  v11 = *(_QWORD *)(v3 + 56);
  v12 = *(_QWORD *)(v3 + 64);
  LOBYTE(v3) = *(_BYTE *)(v3 + 72);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v12;
  *(_BYTE *)(a1 + 72) = v3;
  return sub_23645F8F8(v4, v5, v6, v7, v8, v9, v10, v11, v12, v3);
}

__n128 IdMSAccount.credential.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  __n128 result;
  __n128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v9 = *a1;
  v7 = a1[2];
  v8 = a1[1];
  v6 = (__n128)a1[3];
  v2 = *((_QWORD *)a1 + 8);
  v3 = *((_BYTE *)a1 + 72);
  v4 = v1 + *(int *)(type metadata accessor for IdMSAccount() + 24);
  sub_23645FAF8(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 56), *(_QWORD *)(v4 + 64), *(_BYTE *)(v4 + 72));
  *(_OWORD *)v4 = v9;
  *(_OWORD *)(v4 + 16) = v8;
  result = v6;
  *(_OWORD *)(v4 + 32) = v7;
  *(__n128 *)(v4 + 48) = v6;
  *(_QWORD *)(v4 + 64) = v2;
  *(_BYTE *)(v4 + 72) = v3;
  return result;
}

uint64_t (*IdMSAccount.credential.modify())()
{
  type metadata accessor for IdMSAccount();
  return nullsub_1;
}

uint64_t IdMSAccount.services.getter()
{
  type metadata accessor for IdMSAccount();
  return swift_bridgeObjectRetain();
}

uint64_t IdMSAccount.services.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for IdMSAccount() + 28);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*IdMSAccount.services.modify())()
{
  type metadata accessor for IdMSAccount();
  return nullsub_1;
}

__n128 IdMSAccount.init(id:name:credential:services:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  __int128 v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 result;
  __n128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v8 = *(_QWORD *)(a1 + 8);
  v20 = a3[1];
  v21 = *a3;
  v18 = (__n128)a3[3];
  v19 = a3[2];
  v9 = *((_QWORD *)a3 + 8);
  v10 = *((_BYTE *)a3 + 72);
  *(_QWORD *)a5 = *(_QWORD *)a1;
  *(_QWORD *)(a5 + 8) = v8;
  v11 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a5 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a5 + 32) = v11;
  v12 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a5 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a5 + 64) = v12;
  v13 = (int *)type metadata accessor for IdMSAccount();
  v14 = a5 + v13[5];
  v15 = sub_2365AF8D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, a2, v15);
  v16 = a5 + v13[6];
  *(_OWORD *)v16 = v21;
  *(_OWORD *)(v16 + 16) = v20;
  result = v18;
  *(_OWORD *)(v16 + 32) = v19;
  *(__n128 *)(v16 + 48) = v18;
  *(_QWORD *)(v16 + 64) = v9;
  *(_BYTE *)(v16 + 72) = v10;
  *(_QWORD *)(a5 + v13[7]) = a4;
  return result;
}

uint64_t IdMSAccount.description.getter()
{
  _QWORD v1[2];

  strcpy((char *)v1, "IdMSAccount(");
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  IdMSAccount.ID.description.getter();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  return v1[0];
}

uint64_t IdMSAccount.debugDescription.getter()
{
  sub_2365B0578();
  sub_2365B00B0();
  sub_2365B00B0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  IdMSAccount.ID.description.getter();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  type metadata accessor for IdMSAccount();
  sub_2365AF8AC();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  sub_2365B065C();
  sub_2365B00B0();
  type metadata accessor for AIDAServiceType(0);
  sub_23644F0B8((unint64_t *)&qword_2542A82D0, (uint64_t (*)(uint64_t))type metadata accessor for AIDAServiceType, (uint64_t)&unk_2365B23B4);
  swift_bridgeObjectRetain();
  sub_2365B032C();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t static IdMSAccount.ID.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_2365B08CC();
}

void IdMSAccount.hash(into:)()
{
  uint64_t v1;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for IdMSAccount();
  sub_2365AF8D0();
  sub_23644F0B8(&qword_2563E4D80, (uint64_t (*)(uint64_t))MEMORY[0x24BDCCC10], MEMORY[0x24BDCCC28]);
  sub_2365AFFD8();
  __asm { BR              X10 }
}

uint64_t sub_23649A65C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_2365B09F8();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A28();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v1 + *(int *)(v2 + 28));
  swift_bridgeObjectRetain();
  sub_2364830F0(v0, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23649A884()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23649A8A8 + 4 * byte_2365B7F44[*v0]))(25705, 0xE200000000000000);
}

uint64_t sub_23649A8A8()
{
  return 1701667182;
}

uint64_t sub_23649A8B8()
{
  return 0x69746E6564657263;
}

uint64_t sub_23649A8D4()
{
  return 0x7365636976726573;
}

uint64_t sub_23649A8EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2364A5D20(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23649A910()
{
  sub_2364A5164();
  return sub_2365B0AD0();
}

uint64_t sub_23649A938()
{
  sub_2364A5164();
  return sub_2365B0ADC();
}

uint64_t IdMSAccount.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6AD0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2364A5164();
  sub_2365B0AAC();
  v9 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)&v21 = *(_QWORD *)v3;
  *((_QWORD *)&v21 + 1) = v9;
  v10 = *(_OWORD *)(v3 + 32);
  v22 = *(_OWORD *)(v3 + 16);
  v23 = v10;
  v11 = *(_OWORD *)(v3 + 64);
  v24 = *(_OWORD *)(v3 + 48);
  v25 = v11;
  v20 = 0;
  sub_2364A51A8();
  sub_2365B0824();
  if (!v2)
  {
    v12 = type metadata accessor for IdMSAccount();
    LOBYTE(v21) = 1;
    sub_2365AF8D0();
    sub_23644F0B8(&qword_2563E6AE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCCC10], MEMORY[0x24BDCCC20]);
    sub_2365B0824();
    v13 = (__int128 *)(v3 + *(int *)(v12 + 24));
    v14 = *((_QWORD *)v13 + 8);
    v15 = *((_BYTE *)v13 + 72);
    v16 = v13[1];
    v21 = *v13;
    v22 = v16;
    v17 = v13[3];
    v23 = v13[2];
    v24 = v17;
    *(_QWORD *)&v25 = v14;
    BYTE8(v25) = v15;
    v20 = 2;
    sub_2364A51EC();
    sub_2365B0824();
    *(_QWORD *)&v21 = *(_QWORD *)(v3 + *(int *)(v12 + 28));
    v20 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5E50);
    sub_2364A52B8((unint64_t *)&qword_2563E5E58, &qword_2563E4630, (uint64_t)&protocol conformance descriptor for AIDAServiceType, MEMORY[0x24BEE1700]);
    sub_2365B0824();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void IdMSAccount.hashValue.getter()
{
  uint64_t v1;

  sub_2365B09E0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for IdMSAccount();
  sub_2365AF8D0();
  sub_23644F0B8(&qword_2563E4D80, (uint64_t (*)(uint64_t))MEMORY[0x24BDCCC10], MEMORY[0x24BDCCC28]);
  sub_2365AFFD8();
  __asm { BR              X10 }
}

uint64_t sub_23649ACDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  sub_2365B09F8();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A28();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v0 + *(int *)(v1 + 28));
  swift_bridgeObjectRetain();
  sub_2364830F0((uint64_t)&v4, v2);
  swift_bridgeObjectRelease();
  return sub_2365B0A34();
}

uint64_t IdMSAccount.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char v43;

  v32 = a2;
  v33 = sub_2365AF8D0();
  v3 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6AF8);
  v6 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for IdMSAccount();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v36 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  sub_2364A5164();
  v34 = v8;
  v13 = v37;
  sub_2365B0A7C();
  if (v13)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  v37 = v6;
  v31 = v9;
  v14 = v11;
  v15 = v3;
  v43 = 0;
  sub_2364A5230();
  v16 = v34;
  v17 = v35;
  sub_2365B0770();
  v18 = *((_QWORD *)&v38 + 1);
  v19 = (uint64_t)v14;
  *(_QWORD *)v14 = v38;
  *((_QWORD *)v14 + 1) = v18;
  v20 = v40;
  *((_OWORD *)v14 + 1) = v39;
  *((_OWORD *)v14 + 2) = v20;
  v21 = v42;
  *((_OWORD *)v14 + 3) = v41;
  *((_OWORD *)v14 + 4) = v21;
  LOBYTE(v38) = 1;
  sub_23644F0B8(&qword_2563E6B08, (uint64_t (*)(uint64_t))MEMORY[0x24BDCCC10], MEMORY[0x24BDCCC38]);
  v22 = v33;
  sub_2365B0770();
  v23 = v31;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v19 + *(int *)(v31 + 20), v5, v22);
  v43 = 2;
  sub_2364A5274();
  sub_2365B0770();
  v24 = v42;
  v25 = BYTE8(v42);
  v26 = v19 + *(int *)(v23 + 24);
  v27 = v39;
  *(_OWORD *)v26 = v38;
  *(_OWORD *)(v26 + 16) = v27;
  v28 = v41;
  *(_OWORD *)(v26 + 32) = v40;
  *(_OWORD *)(v26 + 48) = v28;
  *(_QWORD *)(v26 + 64) = v24;
  *(_BYTE *)(v26 + 72) = v25;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5E50);
  v43 = 3;
  sub_2364A52B8((unint64_t *)&qword_2563E5ED0, &qword_2563E4660, (uint64_t)&protocol conformance descriptor for AIDAServiceType, MEMORY[0x24BEE1720]);
  sub_2365B0770();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v16, v17);
  *(_QWORD *)(v19 + *(int *)(v23 + 28)) = v38;
  sub_236487DD0(v19, v32);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  return sub_2364A533C(v19);
}

uint64_t sub_23649B344()
{
  _QWORD v1[2];

  strcpy((char *)v1, "IdMSAccount(");
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  IdMSAccount.ID.description.getter();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  return v1[0];
}

uint64_t sub_23649B45C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return IdMSAccount.init(from:)(a1, a2);
}

uint64_t sub_23649B470(_QWORD *a1)
{
  return IdMSAccount.encode(to:)(a1);
}

void sub_23649B490(uint64_t a1, uint64_t a2)
{
  sub_2365B09E0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2365AF8D0();
  sub_23644F0B8(&qword_2563E4D80, (uint64_t (*)(uint64_t))MEMORY[0x24BDCCC10], MEMORY[0x24BDCCC28]);
  sub_2365AFFD8();
  __asm { BR              X10 }
}

uint64_t sub_23649B5B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  sub_2365B09F8();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A28();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v0 + *(int *)(v1 + 28));
  swift_bridgeObjectRetain();
  sub_2364830F0((uint64_t)&v4, v2);
  swift_bridgeObjectRelease();
  return sub_2365B0A34();
}

void IdMSAccount.Credential.hash(into:)()
{
  __asm { BR              X10 }
}

uint64_t sub_23649B838()
{
  sub_2365B09F8();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A28();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23649B960()
{
  sub_2365B09F8();
  return sub_2365B008C();
}

void sub_23649B998()
{
  sub_2365B09F8();
  JUMPOUT(0x23649B9B4);
}

uint64_t sub_23649B9D4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23649B9FC + 4 * byte_2365B7F54[*v0]))(1701736302, 0xE400000000000000);
}

uint64_t sub_23649B9FC()
{
  return 0x6F696E61706D6F63;
}

unint64_t sub_23649BA20()
{
  return 0xD000000000000011;
}

uint64_t sub_23649BA3C()
{
  return 0x7773736150776172;
}

uint64_t sub_23649BA5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2364A5EBC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23649BA80()
{
  sub_2364A55CC();
  return sub_2365B0AD0();
}

uint64_t sub_23649BAA8()
{
  sub_2364A55CC();
  return sub_2365B0ADC();
}

uint64_t sub_23649BAD0()
{
  sub_2364A5698();
  return sub_2365B0AD0();
}

uint64_t sub_23649BAF8()
{
  sub_2364A5698();
  return sub_2365B0ADC();
}

uint64_t sub_23649BB20()
{
  sub_2364A5720();
  return sub_2365B0AD0();
}

uint64_t sub_23649BB48()
{
  sub_2364A5720();
  return sub_2365B0ADC();
}

uint64_t sub_23649BB70()
{
  _BYTE *v0;

  if (*v0)
    return 0x61746144736D6469;
  else
    return 0xD000000000000011;
}

uint64_t sub_23649BBBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2364A6098(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23649BBE0()
{
  sub_2364A5654();
  return sub_2365B0AD0();
}

uint64_t sub_23649BC08()
{
  sub_2364A5654();
  return sub_2365B0ADC();
}

uint64_t sub_23649BC30()
{
  sub_2364A5610();
  return sub_2365B0AD0();
}

uint64_t sub_23649BC58()
{
  sub_2364A5610();
  return sub_2365B0ADC();
}

void IdMSAccount.Credential.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[7];
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6B18);
  v15 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v13 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6B20);
  v16 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v14 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6B28);
  v11[6] = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v11[5] = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6B30);
  MEMORY[0x24BDAC7A8](v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6B38);
  v23 = *(_QWORD *)(v7 - 8);
  v24 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v8 = v1[1];
  v21 = *v1;
  v22 = v8;
  v9 = v1[2];
  v19 = v1[3];
  v20 = v9;
  v11[4] = v1[4];
  v11[3] = v1[5];
  v11[2] = v1[6];
  v11[1] = v1[7];
  v11[0] = v1[8];
  v10 = *((unsigned __int8 *)v1 + 72);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2364A55CC();
  sub_2365B0AAC();
  __asm { BR              X9 }
}

uint64_t sub_23649BEA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v1 - 160) = 1;
  sub_2364A5698();
  v2 = *(_QWORD *)(v1 - 280);
  v3 = *(_QWORD *)(v1 - 168);
  sub_2365B07B8();
  v4 = *(_QWORD *)(v1 - 184);
  *(_QWORD *)(v1 - 160) = *(_QWORD *)(v1 - 192);
  *(_QWORD *)(v1 - 152) = v4;
  v5 = *(_QWORD *)(v1 - 208);
  *(_QWORD *)(v1 - 144) = *(_QWORD *)(v1 - 200);
  *(_QWORD *)(v1 - 136) = v5;
  v6 = *(_QWORD *)(v1 - 296);
  *(_QWORD *)(v1 - 128) = *(_QWORD *)(v1 - 288);
  *(_QWORD *)(v1 - 120) = v6;
  v7 = *(_QWORD *)(v1 - 312);
  *(_QWORD *)(v1 - 112) = *(_QWORD *)(v1 - 304);
  *(_QWORD *)(v1 - 104) = v7;
  *(_QWORD *)(v1 - 96) = *(_QWORD *)(v1 - 320);
  sub_2364A56DC();
  v8 = *(_QWORD *)(v1 - 264);
  sub_2365B0824();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 272) + 8))(v2, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 176) + 8))(v0, v3);
}

void IdMSAccount.Credential.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 72);
  sub_2365B09E0();
  __asm { BR              X9 }
}

uint64_t sub_23649C148()
{
  sub_2365B09F8();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A28();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_2365B0A34();
}

uint64_t IdMSAccount.Credential.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;

  v25 = a2;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6B70);
  v24 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v29 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6B78);
  v26 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v28 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6B80);
  v22 = *(_QWORD *)(v5 - 8);
  v23 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v27 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6B88);
  MEMORY[0x24BDAC7A8](v7);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6B90);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v30 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  sub_2364A55CC();
  v13 = v31;
  sub_2365B0A7C();
  if (!v13)
  {
    v19[1] = v7;
    v19[2] = 0;
    v31 = v9;
    v14 = sub_2365B07A0();
    if (*(_QWORD *)(v14 + 16) == 1)
      __asm { BR              X10 }
    v15 = sub_2365B05B4();
    swift_allocError();
    v17 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E47A8);
    *v17 = &type metadata for IdMSAccount.Credential;
    sub_2365B0704();
    sub_2365B059C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, *MEMORY[0x24BEE26D0], v15);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v8);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
}

uint64_t sub_23649C990@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return IdMSAccount.Credential.init(from:)(a1, a2);
}

void sub_23649C9A4(_QWORD *a1)
{
  IdMSAccount.Credential.encode(to:)(a1);
}

void sub_23649C9C4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 72);
  sub_2365B09E0();
  __asm { BR              X9 }
}

uint64_t sub_23649CA1C()
{
  sub_2365B09F8();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A28();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_2365B0A34();
}

uint64_t IdMSAccount.ID.altDsid.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IdMSAccount.ID.altDsid.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*IdMSAccount.ID.altDsid.modify())()
{
  return nullsub_1;
}

uint64_t IdMSAccount.ID.username.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IdMSAccount.ID.username.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*IdMSAccount.ID.username.modify())()
{
  return nullsub_1;
}

uint64_t IdMSAccount.ID.dsid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IdMSAccount.ID.dsid.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*IdMSAccount.ID.dsid.modify())()
{
  return nullsub_1;
}

uint64_t IdMSAccount.ID.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IdMSAccount.ID.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t (*IdMSAccount.ID.name.modify())()
{
  return nullsub_1;
}

uint64_t IdMSAccount.ID.deviceUserId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IdMSAccount.ID.deviceUserId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  return result;
}

uint64_t (*IdMSAccount.ID.deviceUserId.modify())()
{
  return nullsub_1;
}

uint64_t IdMSAccount.ID.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_2365B008C();
  return swift_bridgeObjectRelease();
}

uint64_t IdMSAccount.ID.description.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 72))
  {
    sub_2365B0578();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_2365B00B0();
    swift_bridgeObjectRelease();
    sub_2365B00B0();
    swift_bridgeObjectRetain();
    sub_2365B00B0();
    swift_bridgeObjectRelease();
    sub_2365B00B0();
    swift_bridgeObjectRetain();
    sub_2365B00B0();
    swift_bridgeObjectRelease();
    sub_2365B00B0();
    sub_2365B00B0();
  }
  else
  {
    sub_2365B0578();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_2365B00B0();
    swift_bridgeObjectRelease();
    sub_2365B00B0();
    swift_bridgeObjectRetain();
    sub_2365B00B0();
    swift_bridgeObjectRelease();
    sub_2365B00B0();
    swift_bridgeObjectRetain();
    sub_2365B00B0();
    swift_bridgeObjectRelease();
  }
  sub_2365B00B0();
  return 3825960;
}

uint64_t IdMSAccount.ID.debugDescription.getter()
{
  return IdMSAccount.ID.description.getter();
}

uint64_t sub_23649D08C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23649D0BC + 4 * byte_2365B7F68[*v0]))(0x64697344746C61, 0xE700000000000000);
}

uint64_t sub_23649D0BC()
{
  return 0x656D616E72657375;
}

uint64_t sub_23649D0D4()
{
  return 1684632420;
}

uint64_t sub_23649D0E4()
{
  return 1701667182;
}

uint64_t sub_23649D0F4()
{
  return 0x7355656369766564;
}

uint64_t sub_23649D114@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2364A61A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23649D138()
{
  sub_2364A57A8();
  return sub_2365B0AD0();
}

uint64_t sub_23649D160()
{
  sub_2364A57A8();
  return sub_2365B0ADC();
}

uint64_t IdMSAccount.ID.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[10];
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6BA0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[2];
  v13[7] = v1[3];
  v13[8] = v7;
  v8 = v1[4];
  v13[5] = v1[5];
  v13[6] = v8;
  v9 = v1[6];
  v13[3] = v1[7];
  v13[4] = v9;
  v10 = v1[8];
  v13[1] = v1[9];
  v13[2] = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2364A57A8();
  sub_2365B0AAC();
  v18 = 0;
  v11 = v13[9];
  sub_2365B0800();
  if (!v11)
  {
    v17 = 1;
    sub_2365B07C4();
    v16 = 2;
    sub_2365B07C4();
    v15 = 3;
    sub_2365B07C4();
    v14 = 4;
    sub_2365B07C4();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t IdMSAccount.ID.hashValue.getter()
{
  sub_2365B09E0();
  sub_2365B008C();
  return sub_2365B0A34();
}

uint64_t IdMSAccount.ID.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6BB0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2364A57A8();
  sub_2365B0A7C();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v39 = 0;
    v9 = sub_2365B074C();
    v12 = v11;
    v34 = v9;
    v38 = 1;
    swift_bridgeObjectRetain();
    v13 = sub_2365B0710();
    v15 = v14;
    v31 = v13;
    v32 = a2;
    v33 = v12;
    v37 = 2;
    swift_bridgeObjectRetain();
    v16 = sub_2365B0710();
    v18 = v17;
    v30 = v16;
    v36 = 3;
    swift_bridgeObjectRetain();
    v19 = sub_2365B0710();
    v21 = v20;
    v29 = v19;
    v35 = 4;
    swift_bridgeObjectRetain();
    v22 = sub_2365B0710();
    v24 = v23;
    v25 = *(void (**)(char *, uint64_t))(v6 + 8);
    v26 = v22;
    v25(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v27 = v32;
    v28 = v33;
    *v32 = v34;
    v27[1] = v28;
    v27[2] = v31;
    v27[3] = v15;
    v27[4] = v30;
    v27[5] = v18;
    v27[6] = v29;
    v27[7] = v21;
    v27[8] = v26;
    v27[9] = v24;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23649D70C()
{
  return IdMSAccount.ID.description.getter();
}

uint64_t sub_23649D74C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return IdMSAccount.ID.init(from:)(a1, a2);
}

uint64_t sub_23649D760(_QWORD *a1)
{
  return IdMSAccount.ID.encode(to:)(a1);
}

uint64_t sub_23649D774(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_2365B08CC();
}

uint64_t sub_23649D7A4()
{
  sub_2365B09E0();
  sub_2365B008C();
  return sub_2365B0A34();
}

uint64_t sub_23649D7EC()
{
  return sub_2365B008C();
}

uint64_t sub_23649D7F4()
{
  sub_2365B09E0();
  sub_2365B008C();
  return sub_2365B0A34();
}

uint64_t IdMSAccount.SRPResults.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 56);
  *(_QWORD *)(a1 + 72) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 IdMSAccount.SRPResults.id.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v7 = a1[1];
  v8 = *a1;
  v5 = (__n128)a1[3];
  v6 = a1[2];
  v2 = *((_QWORD *)a1 + 8);
  v3 = *((_QWORD *)a1 + 9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)v1 = v8;
  *(_OWORD *)(v1 + 16) = v7;
  result = v5;
  *(_OWORD *)(v1 + 32) = v6;
  *(__n128 *)(v1 + 48) = v5;
  *(_QWORD *)(v1 + 64) = v2;
  *(_QWORD *)(v1 + 72) = v3;
  return result;
}

uint64_t (*IdMSAccount.SRPResults.id.modify())()
{
  return nullsub_1;
}

uint64_t IdMSAccount.SRPResults.archivedData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  sub_23646A418(v1, *(_QWORD *)(v0 + 88));
  return v1;
}

uint64_t IdMSAccount.SRPResults.archivedData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_23646A42C(*(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88));
  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = a2;
  return result;
}

uint64_t (*IdMSAccount.SRPResults.archivedData.modify())()
{
  return nullsub_1;
}

__n128 IdMSAccount.SRPResults.init(id:archivedData:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_QWORD *)(a4 + 8) = v4;
  v5 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a4 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a4 + 32) = v5;
  result = *(__n128 *)(a1 + 48);
  v7 = *(_OWORD *)(a1 + 64);
  *(__n128 *)(a4 + 48) = result;
  *(_OWORD *)(a4 + 64) = v7;
  *(_QWORD *)(a4 + 80) = a2;
  *(_QWORD *)(a4 + 88) = a3;
  return result;
}

uint64_t IdMSAccount.SRPResults.description.getter()
{
  _QWORD v1[2];

  strcpy((char *)v1, "SRPResults(id:");
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  IdMSAccount.ID.description.getter();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  return v1[0];
}

uint64_t IdMSAccount.SRPResults.debugDescription.getter()
{
  _QWORD v1[2];

  strcpy((char *)v1, "SRPResults(id:");
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  IdMSAccount.ID.description.getter();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  sub_2365B00B0();
  sub_2364A57EC();
  sub_2365B08B4();
  sub_2365B00B0();
  swift_bridgeObjectRetain();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1[0];
}

uint64_t IdMSAccount.SRPResults.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2 >> 60 == 15)
    return sub_2365B0A04();
  sub_2365B0A04();
  sub_236468CBC(v1, v2);
  sub_2365AF954();
  return sub_23646A42C(v1, v2);
}

uint64_t sub_23649DE8C()
{
  _BYTE *v0;

  if (*v0)
    return 0x6465766968637261;
  else
    return 25705;
}

uint64_t sub_23649DEC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2364A63BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23649DEE8()
{
  sub_2364A5830();
  return sub_2365B0AD0();
}

uint64_t sub_23649DF10()
{
  sub_2364A5830();
  return sub_2365B0ADC();
}

uint64_t IdMSAccount.SRPResults.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6BC0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v18 = v1[1];
  v19 = v7;
  v8 = v1[2];
  v16 = v1[3];
  v17 = v8;
  v10 = *((_QWORD *)v1 + 8);
  v9 = *((_QWORD *)v1 + 9);
  v11 = *((_QWORD *)v1 + 10);
  v14 = *((_QWORD *)v1 + 11);
  v15 = v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2364A5830();
  sub_2365B0AAC();
  v21 = v19;
  v22 = v18;
  v23 = v17;
  v24 = v16;
  v25 = v10;
  v26 = v9;
  v27 = 0;
  sub_2364A51A8();
  v12 = v20;
  sub_2365B0824();
  if (!v12)
  {
    *(_QWORD *)&v21 = v15;
    *((_QWORD *)&v21 + 1) = v14;
    v27 = 1;
    sub_2364A5874();
    sub_2365B07E8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t IdMSAccount.SRPResults.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  sub_2365B09E0();
  sub_2365B008C();
  sub_2365B0A04();
  if (v2 >> 60 != 15)
  {
    sub_236468CBC(v1, v2);
    sub_2365AF954();
    sub_23646A42C(v1, v2);
  }
  return sub_2365B0A34();
}

uint64_t IdMSAccount.SRPResults.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6BD0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2364A5830();
  sub_2365B0A7C();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    v21 = 0;
    v22 = 0xF000000000000000;
  }
  else
  {
    v44 = 0;
    sub_2364A5230();
    sub_2365B0770();
    v10 = v35;
    v28 = v34;
    v29 = a2;
    v11 = v37;
    v26 = v38;
    v27 = v36;
    v30 = v39;
    v12 = v41;
    v13 = v43;
    v24 = v42;
    v25 = v40;
    v44 = 1;
    sub_2364A58B8();
    v33 = v10;
    swift_bridgeObjectRetain();
    v32 = v11;
    v14 = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31 = v13;
    swift_bridgeObjectRetain();
    sub_2365B0734();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v15 = v34;
    v16 = v35;
    sub_23646A418(v34, v35);
    sub_23646A42C(0, 0xF000000000000000);
    v17 = v33;
    swift_bridgeObjectRetain();
    v18 = v32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19 = v31;
    swift_bridgeObjectRetain();
    sub_23646A418(v15, v16);
    sub_23646A42C(v15, v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20 = v29;
    *v29 = v28;
    v20[1] = v17;
    v20[2] = v27;
    v20[3] = v18;
    v20[4] = v26;
    v20[5] = v14;
    v20[6] = v25;
    v20[7] = v12;
    v20[8] = v24;
    v20[9] = v19;
    v20[10] = v15;
    v20[11] = v16;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21 = v15;
    v22 = v16;
  }
  return sub_23646A42C(v21, v22);
}

uint64_t sub_23649E4B4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return IdMSAccount.SRPResults.init(from:)(a1, a2);
}

uint64_t sub_23649E4C8(_QWORD *a1)
{
  return IdMSAccount.SRPResults.encode(to:)(a1);
}

uint64_t sub_23649E4E0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  sub_2365B09E0();
  sub_2365B008C();
  sub_2365B0A04();
  if (v2 >> 60 != 15)
  {
    sub_236468CBC(v1, v2);
    sub_2365AF954();
    sub_23646A42C(v1, v2);
  }
  return sub_2365B0A34();
}

uint64_t sub_23649E588()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  sub_2365B008C();
  if (v2 >> 60 == 15)
    return sub_2365B0A04();
  sub_2365B0A04();
  sub_236468CBC(v1, v2);
  sub_2365AF954();
  return sub_23646A42C(v1, v2);
}

uint64_t sub_23649E610()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  sub_2365B09E0();
  sub_2365B008C();
  sub_2365B0A04();
  if (v2 >> 60 != 15)
  {
    sub_236468CBC(v1, v2);
    sub_2365AF954();
    sub_23646A42C(v1, v2);
  }
  return sub_2365B0A34();
}

uint64_t IdMSAccount.AnisettePackage.machineID.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IdMSAccount.AnisettePackage.oneTimePassword.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IdMSAccount.AnisettePackage.routingInfo.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t IdMSAccount.AnisettePackage.init(machineID:oneTimePassword:routingInfo:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  *a6 = result;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  return result;
}

unint64_t IdMSAccount.AnisettePackage.description.getter()
{
  sub_2365B0578();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  swift_bridgeObjectRetain();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  sub_2365B0860();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  return 0xD000000000000014;
}

unint64_t IdMSAccount.AnisettePackage.debugDescription.getter()
{
  return IdMSAccount.AnisettePackage.description.getter();
}

uint64_t IdMSAccount.AnisettePackage.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  return sub_2365B0A28();
}

uint64_t sub_23649E90C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x50656D6954656E6FLL;
  if (*v0 != 1)
    v1 = 0x49676E6974756F72;
  if (*v0)
    return v1;
  else
    return 0x49656E696863616DLL;
}

uint64_t sub_23649E980@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2364A64AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23649E9A4()
{
  sub_2364A5B44();
  return sub_2365B0AD0();
}

uint64_t sub_23649E9CC()
{
  sub_2364A5B44();
  return sub_2365B0ADC();
}

uint64_t IdMSAccount.AnisettePackage.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  char v11;
  char v12;
  char v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6BE0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[2];
  v10[1] = v1[3];
  v10[2] = v7;
  v10[0] = v1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2364A5B44();
  sub_2365B0AAC();
  v13 = 0;
  v8 = v10[3];
  sub_2365B0800();
  if (!v8)
  {
    v12 = 1;
    sub_2365B0800();
    v11 = 2;
    sub_2365B0848();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t IdMSAccount.AnisettePackage.hashValue.getter()
{
  sub_2365B09E0();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A28();
  return sub_2365B0A34();
}

uint64_t IdMSAccount.AnisettePackage.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6BF0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2364A5B44();
  sub_2365B0A7C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v24 = 0;
  v9 = sub_2365B074C();
  v11 = v10;
  v21 = v9;
  v23 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_2365B074C();
  v14 = v13;
  v19 = v12;
  v22 = 2;
  swift_bridgeObjectRetain();
  v20 = v14;
  v15 = sub_2365B0794();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v16 = v20;
  *a2 = v21;
  a2[1] = v11;
  a2[2] = v19;
  a2[3] = v16;
  a2[4] = v15;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t sub_23649EE0C()
{
  return IdMSAccount.AnisettePackage.description.getter();
}

uint64_t sub_23649EE48@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return IdMSAccount.AnisettePackage.init(from:)(a1, a2);
}

uint64_t sub_23649EE5C(_QWORD *a1)
{
  return IdMSAccount.AnisettePackage.encode(to:)(a1);
}

uint64_t sub_23649EE74()
{
  sub_2365B09E0();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A28();
  return sub_2365B0A34();
}

uint64_t sub_23649EF10()
{
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  return sub_2365B0A28();
}

uint64_t sub_23649EF94()
{
  sub_2365B09E0();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A28();
  return sub_2365B0A34();
}

uint64_t IdMSAccount.DeviceInfo.deviceIdentifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IdMSAccount.DeviceInfo.deviceIdentifier.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*IdMSAccount.DeviceInfo.deviceIdentifier.modify())()
{
  return nullsub_1;
}

uint64_t IdMSAccount.DeviceInfo.serverFriendlyDescription.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IdMSAccount.DeviceInfo.serverFriendlyDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*IdMSAccount.DeviceInfo.serverFriendlyDescription.modify())()
{
  return nullsub_1;
}

uint64_t IdMSAccount.DeviceInfo.localeInfo.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[4];
  v3 = v1[5];
  v4 = v1[6];
  v5 = v1[7];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return sub_23648DC24(v2, v3);
}

__n128 IdMSAccount.DeviceInfo.localeInfo.setter(__n128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_i64[0];
  v3 = a1[1].n128_i64[1];
  sub_23648DD50(v1[4], v1[5]);
  result = v5;
  *((__n128 *)v1 + 2) = v5;
  v1[6] = v2;
  v1[7] = v3;
  return result;
}

uint64_t (*IdMSAccount.DeviceInfo.localeInfo.modify())()
{
  return nullsub_1;
}

uint64_t IdMSAccount.DeviceInfo.isLegacy.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t IdMSAccount.DeviceInfo.isLegacy.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 64) = result;
  return result;
}

uint64_t (*IdMSAccount.DeviceInfo.isLegacy.modify())()
{
  return nullsub_1;
}

void __swiftcall IdMSAccount.DeviceInfo.init(deviceIdentifier:serverFriendlyDescription:localeInfo:isLegacy:)(AppleIDSetup::IdMSAccount::DeviceInfo *__return_ptr retstr, Swift::String deviceIdentifier, Swift::String serverFriendlyDescription, AppleIDSetup::SetupReport::LocaleInfo_optional localeInfo, Swift::Bool isLegacy)
{
  __int128 v5;

  retstr->deviceIdentifier = deviceIdentifier;
  retstr->serverFriendlyDescription = serverFriendlyDescription;
  v5 = *(_OWORD *)(localeInfo.value.localeID._countAndFlagsBits + 16);
  retstr->localeInfo.value.localeID = *(Swift::String *)localeInfo.value.localeID._countAndFlagsBits;
  *(_OWORD *)&retstr->localeInfo.value.languages._rawValue = v5;
  retstr->isLegacy = (Swift::Bool)localeInfo.value.localeID._object;
}

void static IdMSAccount.DeviceInfo.current.getter(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __CFString *v12;
  CFPropertyListRef v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  CFPropertyListRef v33;

  v2 = sub_2365AFA2C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend((id)objc_opt_self(), sel_currentDevice);
  if (v6)
  {
    v7 = v6;
    sub_2365AFA20();
    v8 = sub_2365AFA08();
    v10 = v9;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v11 = sub_2365AFA14();
    v12 = (__CFString *)sub_2365B0038();
    v13 = CFPreferencesCopyValue(v12, (CFStringRef)*MEMORY[0x24BDBD568], (CFStringRef)*MEMORY[0x24BDBD590], (CFStringRef)*MEMORY[0x24BDBD570]);

    if (v13
      && (v33 = v13, __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6BF8), swift_dynamicCast()))
    {
      v14 = v32;
    }
    else
    {
      v14 = MEMORY[0x24BEE4AF8];
    }
    v15 = objc_msgSend(v7, sel_uniqueDeviceIdentifier);
    if (v15)
    {
      v16 = v15;
      v17 = sub_2365B005C();
      v19 = v18;

      v20 = objc_msgSend(v7, sel_serverFriendlyDescription);
      if (v20)
      {
        v21 = v20;
        v22 = sub_2365B005C();
        v31 = v14;
        v23 = v11;
        v24 = v10;
        v25 = v8;
        v26 = v22;
        v28 = v27;

        *(_QWORD *)a1 = v17;
        *(_QWORD *)(a1 + 8) = v19;
        *(_QWORD *)(a1 + 16) = v26;
        *(_QWORD *)(a1 + 24) = v28;
        *(_QWORD *)(a1 + 32) = v25;
        *(_QWORD *)(a1 + 40) = v24;
        v29 = v31;
        *(_QWORD *)(a1 + 48) = v23;
        *(_QWORD *)(a1 + 56) = v29;
        *(_BYTE *)(a1 + 64) = 0;
        return;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

    }
    *(_BYTE *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else
  {
    __break(1u);
  }
}

void __swiftcall AKDevice.into(with:)(AppleIDSetup::IdMSAccount::DeviceInfo_optional *__return_ptr retstr, AppleIDSetup::SetupReport::LocaleInfo_optional with)
{
  void *v2;
  void *v3;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;

  v3 = v2;
  v5 = *(_QWORD *)with.value.localeID._countAndFlagsBits;
  v6 = *(void **)(with.value.localeID._countAndFlagsBits + 8);
  v7 = *(void **)(with.value.localeID._countAndFlagsBits + 16);
  v8 = *(void **)(with.value.localeID._countAndFlagsBits + 24);
  v9 = objc_msgSend(v3, sel_uniqueDeviceIdentifier, with.value.languages._rawValue, with.value.keyboards._rawValue);
  if (v9)
  {
    v10 = v9;
    v11 = sub_2365B005C();
    v13 = v12;

    v14 = objc_msgSend(v3, sel_serverFriendlyDescription);
    if (v14)
    {
      v15 = v14;
      v16 = sub_2365B005C();
      v18 = v17;

      retstr->value.deviceIdentifier._countAndFlagsBits = v11;
      retstr->value.deviceIdentifier._object = v13;
      retstr->value.serverFriendlyDescription._countAndFlagsBits = v16;
      retstr->value.serverFriendlyDescription._object = v18;
      retstr->value.localeInfo.value.localeID._countAndFlagsBits = v5;
      retstr->value.localeInfo.value.localeID._object = v6;
      retstr->value.localeInfo.value.languages._rawValue = v7;
      retstr->value.localeInfo.value.keyboards._rawValue = v8;
      retstr->value.isLegacy = 0;
      sub_23648DC24(v5, (uint64_t)v6);
      return;
    }
    swift_bridgeObjectRelease();
  }
  retstr->value.isLegacy = 0;
  retstr->value.localeInfo.value.localeID = 0u;
  *(_OWORD *)&retstr->value.localeInfo.value.languages._rawValue = 0u;
  retstr->value.deviceIdentifier = 0u;
  retstr->value.serverFriendlyDescription = 0u;
}

uint64_t IdMSAccount.DeviceInfo.description.getter()
{
  _QWORD v1[2];

  sub_2365B0578();
  swift_bridgeObjectRelease();
  strcpy((char *)v1, "DeviceInfo(id:");
  swift_bridgeObjectRetain();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  swift_bridgeObjectRetain();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  return v1[0];
}

uint64_t IdMSAccount.DeviceInfo.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = IdMSAccount.DeviceInfo.description.getter();
  sub_23648DC24(v1, v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6C00);
  sub_2365B0080();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  swift_bridgeObjectRetain();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t IdMSAccount.DeviceInfo.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A04();
  if (v1)
    SetupReport.LocaleInfo.hash(into:)();
  return sub_2365B0A04();
}

uint64_t sub_23649F83C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23649F870 + 4 * byte_2365B7F6D[*v0]))(0xD000000000000010, 0x80000002365CBE40);
}

uint64_t sub_23649F870(uint64_t a1)
{
  return a1 + 9;
}

uint64_t sub_23649F888()
{
  return 0x6E49656C61636F6CLL;
}

uint64_t sub_23649F8A4()
{
  return 0x79636167654C7369;
}

uint64_t sub_23649F8BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2364A6648(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23649F8E0()
{
  sub_2364A5B88();
  return sub_2365B0AD0();
}

uint64_t sub_23649F908()
{
  sub_2364A5B88();
  return sub_2365B0ADC();
}

uint64_t IdMSAccount.DeviceInfo.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6C08);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 16);
  v21 = *(_QWORD *)(v1 + 24);
  v22 = v7;
  v8 = *(_QWORD *)(v1 + 32);
  v19 = *(_QWORD *)(v1 + 40);
  v20 = v8;
  v9 = *(_QWORD *)(v1 + 48);
  v17 = *(_QWORD *)(v1 + 56);
  v18 = v9;
  v28 = *(unsigned __int8 *)(v1 + 64);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2364A5B88();
  sub_2365B0AAC();
  LOBYTE(v24) = 0;
  v10 = v23;
  sub_2365B0800();
  if (!v10)
  {
    v11 = v17;
    v12 = v18;
    v14 = v19;
    v13 = v20;
    LOBYTE(v24) = 1;
    sub_2365B0800();
    v24 = v13;
    v25 = v14;
    v26 = v12;
    v27 = v11;
    v29 = 2;
    sub_2364A5BCC();
    sub_2365B07E8();
    LOBYTE(v24) = 3;
    sub_2365B080C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t IdMSAccount.DeviceInfo.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  sub_2365B09E0();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A04();
  if (v1)
    SetupReport.LocaleInfo.hash(into:)();
  sub_2365B0A04();
  return sub_2365B0A34();
}

uint64_t IdMSAccount.DeviceInfo.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6C20);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2364A5B88();
  sub_2365B0A7C();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    v16 = 0;
    v24 = 0;
  }
  else
  {
    LOBYTE(v33) = 0;
    v9 = sub_2365B074C();
    v12 = v11;
    v31 = v9;
    LOBYTE(v33) = 1;
    swift_bridgeObjectRetain();
    v13 = sub_2365B074C();
    v32 = v14;
    v28 = v13;
    v30 = v12;
    v37 = 2;
    sub_2364A5C10();
    swift_bridgeObjectRetain();
    v29 = 0;
    sub_2365B0734();
    v26 = a2;
    v15 = v33;
    v16 = v34;
    v18 = v35;
    v17 = v36;
    LOBYTE(v33) = 3;
    v27 = v15;
    sub_23648DC24(v15, v34);
    v19 = sub_2365B0758();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v20 = v30;
    swift_bridgeObjectRetain();
    v21 = v32;
    swift_bridgeObjectRetain();
    v22 = v27;
    sub_23648DC24(v27, v16);
    sub_23648DD50(v22, v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v23 = v26;
    *v26 = v31;
    v23[1] = v20;
    v23[2] = v28;
    v23[3] = v21;
    v23[4] = v22;
    v23[5] = v16;
    v23[6] = v18;
    v23[7] = v17;
    *((_BYTE *)v23 + 64) = v19 & 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v24 = v22;
  }
  return sub_23648DD50(v24, v16);
}

uint64_t sub_23649FF54@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return IdMSAccount.DeviceInfo.init(from:)(a1, a2);
}

uint64_t sub_23649FF68(_QWORD *a1)
{
  return IdMSAccount.DeviceInfo.encode(to:)(a1);
}

uint64_t sub_23649FF88()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  sub_2365B09E0();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A04();
  if (v1)
    SetupReport.LocaleInfo.hash(into:)();
  sub_2365B0A04();
  return sub_2365B0A34();
}

uint64_t static Constants.GlobalUserDefaultsKeys.appleKeyboards.getter()
{
  return 0x79654B656C707041;
}

uint64_t IdMSAccount.Credential.CompanionKeyEnvelope.continuationKey.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IdMSAccount.Credential.CompanionKeyEnvelope.passwordResetKey.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IdMSAccount.Credential.CompanionKeyEnvelope.anisettePackage.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[5];
  v3 = v1[6];
  v4 = v1[7];
  v5 = v1[8];
  *a1 = v1[4];
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  a1[4] = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 IdMSAccount.Credential.CompanionKeyEnvelope.init(continuationKey:passwordResetKey:anisettePackage:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __n128 result;
  __int128 v7;
  uint64_t v8;

  result = *(__n128 *)a5;
  v7 = *(_OWORD *)(a5 + 16);
  v8 = *(_QWORD *)(a5 + 32);
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  *(__n128 *)(a6 + 32) = result;
  *(_OWORD *)(a6 + 48) = v7;
  *(_QWORD *)(a6 + 64) = v8;
  return result;
}

unint64_t IdMSAccount.Credential.CompanionKeyEnvelope.description.getter()
{
  sub_2365B0578();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  swift_bridgeObjectRetain();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  IdMSAccount.AnisettePackage.description.getter();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  return 0xD000000000000018;
}

unint64_t IdMSAccount.Credential.CompanionKeyEnvelope.debugDescription.getter()
{
  return IdMSAccount.Credential.CompanionKeyEnvelope.description.getter();
}

uint64_t IdMSAccount.Credential.CompanionKeyEnvelope.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A28();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2364A03CC()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000010;
  if (*v0 != 1)
    v1 = 0x6574746573696E61;
  if (*v0)
    return v1;
  else
    return 0x61756E69746E6F63;
}

uint64_t sub_2364A0444@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2364A6804(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2364A0468()
{
  sub_2364A5C54();
  return sub_2365B0AD0();
}

uint64_t sub_2364A0490()
{
  sub_2364A5C54();
  return sub_2365B0ADC();
}

uint64_t IdMSAccount.Credential.CompanionKeyEnvelope.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6C30);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[2];
  v22 = v1[3];
  v23 = v7;
  v8 = v1[4];
  v20 = v1[5];
  v21 = v8;
  v9 = v1[6];
  v18 = v1[7];
  v19 = v9;
  v17 = v1[8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2364A5C54();
  sub_2365B0AAC();
  LOBYTE(v25) = 0;
  v10 = v24;
  sub_2365B0800();
  if (!v10)
  {
    v12 = v18;
    v11 = v19;
    v14 = v20;
    v13 = v21;
    LOBYTE(v25) = 1;
    sub_2365B0800();
    v25 = v13;
    v26 = v14;
    v27 = v11;
    v28 = v12;
    v29 = v17;
    v30 = 2;
    sub_2364A5C98();
    sub_2365B0824();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t IdMSAccount.Credential.CompanionKeyEnvelope.hashValue.getter()
{
  sub_2365B09E0();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A28();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_2365B0A34();
}

uint64_t IdMSAccount.Credential.CompanionKeyEnvelope.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6C48);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2364A5C54();
  sub_2365B0A7C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  LOBYTE(v26) = 0;
  v9 = sub_2365B074C();
  v11 = v10;
  v25 = v9;
  LOBYTE(v26) = 1;
  swift_bridgeObjectRetain();
  v12 = sub_2365B074C();
  v14 = v13;
  v23 = v12;
  v31 = 2;
  sub_2364A5CDC();
  swift_bridgeObjectRetain();
  v24 = v14;
  sub_2365B0770();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = v27;
  v22 = v26;
  v17 = v28;
  v16 = v29;
  v18 = v30;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = v24;
  *a2 = v25;
  a2[1] = v11;
  a2[2] = v23;
  a2[3] = v19;
  a2[4] = v22;
  a2[5] = v15;
  a2[6] = v17;
  a2[7] = v16;
  a2[8] = v18;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t sub_2364A09E8()
{
  return IdMSAccount.Credential.CompanionKeyEnvelope.description.getter();
}

uint64_t sub_2364A0A30@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return IdMSAccount.Credential.CompanionKeyEnvelope.init(from:)(a1, a2);
}

uint64_t sub_2364A0A44(_QWORD *a1)
{
  return IdMSAccount.Credential.CompanionKeyEnvelope.encode(to:)(a1);
}

uint64_t sub_2364A0A60()
{
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A28();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2364A0B54()
{
  sub_2365B09E0();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A28();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_2365B0A34();
}

Swift::Void __swiftcall IdMSAccount.Credential.apply(to:with:)(AKAppleIDAuthenticationContext *to, AppleIDSetup::IdMSAccount::ID *with)
{
  __asm { BR              X10 }
}

void sub_2364A0CA8(int a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;

  v28 = *(_QWORD *)(a2 + 16);
  v27 = *(_QWORD *)(a2 + 24);
  v29 = objc_allocWithZone(MEMORY[0x24BE0AD58]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v30 = sub_2364A405C(v28, v27);
  objc_msgSend(v24, sel_setCompanionKeyEnvelope_, v26, v25);

}

id IdMSAccount.Credential.CompanionKeyEnvelope.into(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v3 = objc_allocWithZone(MEMORY[0x24BE0AD58]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_2364A405C(v1, v2);
}

uint64_t sub_2364A0E9C()
{
  sub_23644F0B8(&qword_2563E4530, (uint64_t (*)(uint64_t))type metadata accessor for AIDAServiceType, (uint64_t)&unk_2365B203C);
  return sub_2365B014C();
}

uint64_t sub_2364A0F10()
{
  sub_23644F0B8(&qword_2563E4530, (uint64_t (*)(uint64_t))type metadata accessor for AIDAServiceType, (uint64_t)&unk_2365B203C);
  return sub_2365B0110();
}

id IdMSAccount.into(with:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v8[3];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 72);
  v8[0] = *(_QWORD *)v1;
  v8[1] = v3;
  v8[2] = v4;
  v9 = *(_OWORD *)(v1 + 24);
  v10 = *(_OWORD *)(v1 + 40);
  v11 = *(_OWORD *)(v1 + 56);
  v12 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = sub_2364A6998(v8, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

id static ACAccount.fetchIdMS(for:with:)(uint64_t *a1, void *a2)
{
  return sub_2364A6998(a1, a2);
}

void static IdMSAccount.fetch(for:with:)(uint64_t a1@<X0>, void *a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  id v9;
  void *v10;
  uint64_t v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v6 = *(_QWORD *)(a1 + 8);
  v11[0] = *(_QWORD *)a1;
  v11[1] = v6;
  v7 = *(_OWORD *)(a1 + 32);
  v12 = *(_OWORD *)(a1 + 16);
  v13 = v7;
  v8 = *(_OWORD *)(a1 + 64);
  v14 = *(_OWORD *)(a1 + 48);
  v15 = v8;
  v9 = sub_2364A6998(v11, a2);
  if (!v3)
  {
    v10 = v9;
    ACAccount.into(with:)(a2, a3);

  }
}

void ACAccount.into(with:)(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  int v19;
  int v20;
  char v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t *v34;
  id v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  char *v47;
  _QWORD v48[2];
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68[40];
  _OWORD v69[2];
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v6 = sub_2365AF8D0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v48 - v11;
  ACAccount.id(with:)(a1, (uint64_t)&v72);
  if (!v3)
  {
    v63 = v10;
    v60 = *((_QWORD *)&v72 + 1);
    v61 = v72;
    v58 = *((_QWORD *)&v73 + 1);
    v59 = v73;
    v57 = v74;
    v56 = v75;
    v55 = v76;
    v54 = v77;
    v53 = v78;
    v52 = v79;
    v62 = v12;
    ACAccount.name(with:)(a1);
    v13 = objc_msgSend(a1, sel_servicesUsingAccount_, v2);
    v14 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (!v13)
    {
LABEL_31:
      v38 = v62;
      v39 = v63;
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v63, v62, v6);
      v40 = sub_2364A6C28((uint64_t)v14);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v38, v6);
      v41 = v60;
      *(_QWORD *)a2 = v61;
      *((_QWORD *)a2 + 1) = v41;
      v42 = v58;
      *((_QWORD *)a2 + 2) = v59;
      *((_QWORD *)a2 + 3) = v42;
      v43 = v56;
      *((_QWORD *)a2 + 4) = v57;
      *((_QWORD *)a2 + 5) = v43;
      v44 = v54;
      *((_QWORD *)a2 + 6) = v55;
      *((_QWORD *)a2 + 7) = v44;
      v45 = v52;
      *((_QWORD *)a2 + 8) = v53;
      *((_QWORD *)a2 + 9) = v45;
      v46 = (int *)type metadata accessor for IdMSAccount();
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&a2[v46[5]], v39, v6);
      v47 = &a2[v46[6]];
      *((_QWORD *)v47 + 8) = 0;
      *((_OWORD *)v47 + 2) = 0u;
      *((_OWORD *)v47 + 3) = 0u;
      *(_OWORD *)v47 = 0u;
      *((_OWORD *)v47 + 1) = 0u;
      v47[72] = 3;
      *(_QWORD *)&a2[v46[7]] = v40;
      return;
    }
    v15 = v13;
    v48[1] = 0;
    v49 = v7;
    v50 = v6;
    v51 = a2;
    v16 = sub_2365B0320();

    v17 = *(_QWORD *)(v16 + 16);
    if (v17)
    {
      v80 = v14;
      sub_2364A4288(0, v17, 0);
      v18 = sub_2364A4718(v16);
      v20 = v19;
      v22 = v21 & 1;
      v67 = v16 + 56;
      do
      {
        if (v18 < 0 || v18 >= 1 << *(_BYTE *)(v16 + 32))
        {
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          sub_2365B068C();
          __break(1u);
          JUMPOUT(0x2364A1710);
        }
        if (((*(_QWORD *)(v67 + (((unint64_t)v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
          goto LABEL_34;
        if (*(_DWORD *)(v16 + 36) != v20)
          goto LABEL_35;
        sub_23646C3E8(*(_QWORD *)(v16 + 48) + 40 * v18, (uint64_t)&v72);
        v69[0] = v72;
        v69[1] = v73;
        v70 = v74;
        sub_23646C3E8((uint64_t)v69, (uint64_t)v68);
        swift_dynamicCast();
        sub_23646A464((uint64_t)v69);
        v23 = v71;
        v24 = v80;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_2364A4288(0, v24[2] + 1, 1);
          v24 = v80;
        }
        v26 = v24[2];
        v25 = v24[3];
        if (v26 >= v25 >> 1)
        {
          sub_2364A4288(v25 > 1, v26 + 1, 1);
          v24 = v80;
        }
        v24[2] = v26 + 1;
        v24[v26 + 4] = v23;
        v27 = sub_2364A47BC(v18, v20, v22 & 1, v16);
        v18 = v27;
        v20 = v28;
        v22 = v29 & 1;
        --v17;
      }
      while (v17);
      sub_2364A6CC8(v27, v28, v29 & 1);
      swift_bridgeObjectRelease();
      v30 = v24[2];
      if (v30)
        goto LABEL_15;
    }
    else
    {
      swift_bridgeObjectRelease();
      v24 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v30 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      if (v30)
      {
LABEL_15:
        swift_bridgeObjectRetain();
        v31 = 0;
        v32 = (void *)*MEMORY[0x24BE06080];
        v67 = *MEMORY[0x24BE06088];
        v66 = *MEMORY[0x24BE06098];
        v65 = *MEMORY[0x24BE06090];
        v64 = *MEMORY[0x24BE060A0];
        v14 = (_QWORD *)MEMORY[0x24BEE4AF8];
        while (2)
        {
          v33 = v32;
          switch(v24[v31 + 4])
          {
            case 1:
            case 7:
              goto LABEL_22;
            case 2:
              v34 = &v81;
              goto LABEL_21;
            case 4:
              v34 = &v83;
              goto LABEL_21;
            case 5:
              v34 = &v84;
              goto LABEL_21;
            case 6:
              v34 = &v82;
LABEL_21:
              v33 = (void *)*(v34 - 32);
LABEL_22:
              v35 = v33;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v14 = sub_2364A417C(0, v14[2] + 1, 1, v14);
              v37 = v14[2];
              v36 = v14[3];
              if (v37 >= v36 >> 1)
                v14 = sub_2364A417C((_QWORD *)(v36 > 1), v37 + 1, 1, v14);
              ++v31;
              v14[2] = v37 + 1;
              v14[v37 + 4] = v35;
              if (v30 != v31)
                continue;
              swift_bridgeObjectRelease();
              break;
            default:
              goto LABEL_36;
          }
          goto LABEL_30;
        }
      }
    }
    v14 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_30:
    swift_bridgeObjectRelease();
    a2 = v51;
    v6 = v50;
    v7 = v49;
    goto LABEL_31;
  }
}

void static IdMSAccount.fetchPrimary(with:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E45E0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(a1, sel_primaryAuthKitAccount);
  if (v8)
  {
    v9 = v8;
    ACAccount.into(with:)(a1, v7);

    if (v2)
    {

    }
    else
    {
      v11 = type metadata accessor for IdMSAccount();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v7, 0, 1, v11);

      sub_236487E14((uint64_t)v7, a2);
    }
  }
  else
  {
    v10 = type metadata accessor for IdMSAccount();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v7, 1, 1, v10);
    sub_2364A6CD4((uint64_t)v7);
    sub_2364A6D14();
    swift_allocError();
    swift_willThrow();
  }
}

uint64_t IdMSAccount.companionKeyEnvelope(with:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t sub_2364A1890()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v10[3];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v2 = *(void **)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 72);
  v10[0] = *(_QWORD *)v1;
  v10[1] = v3;
  v10[2] = v4;
  v11 = *(_OWORD *)(v1 + 24);
  v12 = *(_OWORD *)(v1 + 40);
  v13 = *(_OWORD *)(v1 + 56);
  v14 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = sub_2364A6998(v10, v2);
  *(_QWORD *)(v0 + 48) = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v7;
  *(_QWORD *)v7 = v0;
  *(_QWORD *)(v7 + 8) = sub_2364A19E0;
  v8 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v7 + 144) = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v7 + 152) = v6;
  *(_OWORD *)(v7 + 128) = v8;
  return swift_task_switch();
}

uint64_t sub_2364A19E0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2364A1A44()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2364A1A78()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ACAccount.companionKeyEnvelope(with:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[18] = a3;
  v4[19] = v3;
  v4[16] = a1;
  v4[17] = a2;
  return swift_task_switch();
}

uint64_t sub_2364A1AC8()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  void *v21;
  uint8_t *v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = objc_msgSend(*(id *)(v0 + 144), sel_continuationTokenForAccount_, *(_QWORD *)(v0 + 152));
  if (v1)
  {
    v2 = v1;
    v4 = *(void **)(v0 + 144);
    v3 = *(_QWORD *)(v0 + 152);
    v5 = sub_2365B005C();
    v7 = v6;

    *(_QWORD *)(v0 + 160) = v5;
    *(_QWORD *)(v0 + 168) = v7;
    v8 = objc_msgSend(v4, sel_passwordResetTokenForAccount_, v3);
    if (v8)
    {
      v9 = v8;
      v10 = *(void **)(v0 + 136);
      v11 = sub_2365B005C();
      v13 = v12;

      *(_QWORD *)(v0 + 176) = v11;
      *(_QWORD *)(v0 + 184) = v13;
      *(_QWORD *)(v0 + 56) = v0 + 120;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_2364A1DEC;
      *(_QWORD *)(v0 + 112) = swift_continuation_init();
      *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
      *(_QWORD *)(v0 + 88) = 0x40000000;
      *(_QWORD *)(v0 + 96) = sub_2364A2AF8;
      *(_QWORD *)(v0 + 104) = &block_descriptor_0;
      objc_msgSend(v10, sel_anisetteDataWithCompletion_, v0 + 80);
      return swift_continuation_await();
    }
    swift_bridgeObjectRelease();
  }
  if (qword_2542A79D8 != -1)
    swift_once();
  v15 = *(void **)(v0 + 152);
  v16 = sub_2365AFC00();
  __swift_project_value_buffer(v16, (uint64_t)qword_2542A79C0);
  v17 = v15;
  v18 = sub_2365AFBE8();
  v19 = sub_2365B0398();
  v20 = os_log_type_enabled(v18, v19);
  v21 = *(void **)(v0 + 152);
  if (v20)
  {
    v22 = (uint8_t *)swift_slowAlloc();
    v23 = swift_slowAlloc();
    v30 = v23;
    *(_DWORD *)v22 = 136315138;
    v24 = v21;
    v25 = objc_msgSend(v24, sel_description);
    v26 = sub_2365B005C();
    v28 = v27;

    *(_QWORD *)(v0 + 80) = sub_236468D88(v26, v28, &v30);
    sub_2365B04A0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_23644B000, v18, v19, "Unable to generate companion key envelope for account (%s, missing CK and/or PRK.", v22, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v23, -1, -1);
    MEMORY[0x23B7F5254](v22, -1, -1);
  }
  else
  {

  }
  sub_2364A6D58();
  swift_allocError();
  *(_QWORD *)v29 = 0xD000000000000015;
  *(_QWORD *)(v29 + 8) = 0x80000002365CBD90;
  *(_BYTE *)(v29 + 16) = 3;
  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2364A1DEC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 192) = v1;
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

id sub_2364A1E60()
{
  uint64_t v0;
  void *v1;
  id result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t (*v30)(void);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *log;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[11];

  v1 = *(void **)(v0 + 120);
  if (!v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_2542A79D8 != -1)
      swift_once();
    v25 = sub_2365AFC00();
    __swift_project_value_buffer(v25, (uint64_t)qword_2542A79C0);
    v26 = sub_2365AFBE8();
    v27 = sub_2365B0398();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_23644B000, v26, v27, "Unable to generate CK envelope, no anisette data", v28, 2u);
      MEMORY[0x23B7F5254](v28, -1, -1);
    }

    sub_2364A6D58();
    swift_allocError();
    *(_QWORD *)v29 = 0xD000000000000015;
    *(_QWORD *)(v29 + 8) = 0x80000002365CBDE0;
    *(_BYTE *)(v29 + 16) = 3;
    swift_willThrow();
    v30 = *(uint64_t (**)(void))(v0 + 8);
    return (id)v30();
  }
  result = objc_msgSend(*(id *)(v0 + 120), sel_machineID);
  if (result)
  {
    v3 = result;
    v40 = sub_2365B005C();
    v5 = v4;

    result = objc_msgSend(v1, sel_oneTimePassword);
    if (result)
    {
      v6 = result;
      v39 = sub_2365B005C();
      v8 = v7;

      v38 = objc_msgSend(v1, sel_routingInfo);
      if (qword_2542A79D8 != -1)
        swift_once();
      v9 = sub_2365AFC00();
      __swift_project_value_buffer(v9, (uint64_t)qword_2542A79C0);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v10 = sub_2365AFBE8();
      v11 = sub_2365B038C();
      v12 = os_log_type_enabled(v10, v11);
      v13 = v8;
      v14 = *(_QWORD *)(v0 + 184);
      if (v12)
      {
        log = v10;
        v15 = *(_QWORD *)(v0 + 168);
        v34 = *(_QWORD *)(v0 + 176);
        v16 = v5;
        v17 = *(_QWORD *)(v0 + 160);
        v18 = (uint8_t *)swift_slowAlloc();
        v36 = swift_slowAlloc();
        *(_DWORD *)v18 = 136642819;
        v41[0] = v36;
        v41[1] = v17;
        v5 = v16;
        v41[2] = v15;
        v41[3] = v34;
        v41[4] = v14;
        v41[5] = v40;
        v19 = v13;
        v35 = v13;
        v20 = v39;
        v41[6] = v16;
        v41[7] = v39;
        v21 = v38;
        v41[8] = v19;
        v41[9] = (uint64_t)v38;
        v22 = IdMSAccount.Credential.CompanionKeyEnvelope.description.getter();
        *(_QWORD *)(v0 + 80) = sub_236468D88(v22, v23, v41);
        sub_2365B04A0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        v24 = v35;
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_23644B000, log, v11, "Built CK envelope: %{sensitive}s", v18, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x23B7F5254](v36, -1, -1);
        MEMORY[0x23B7F5254](v18, -1, -1);

      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();

        v24 = v13;
        v21 = v38;
        v20 = v39;
      }
      v32 = *(_QWORD *)(v0 + 176);
      v31 = *(_QWORD *)(v0 + 184);
      v33 = *(_QWORD *)(v0 + 128);
      *(_OWORD *)v33 = *(_OWORD *)(v0 + 160);
      *(_QWORD *)(v33 + 16) = v32;
      *(_QWORD *)(v33 + 24) = v31;
      *(_QWORD *)(v33 + 32) = v40;
      *(_QWORD *)(v33 + 40) = v5;
      *(_QWORD *)(v33 + 48) = v20;
      *(_QWORD *)(v33 + 56) = v24;
      *(_QWORD *)(v33 + 64) = v21;
      v30 = *(uint64_t (**)(void))(v0 + 8);
      return (id)v30();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_2364A22B4()
{
  uint64_t v0;

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id static ACAccount.fetch(for:withAccountTypeIdentifier:from:)(__int128 *a1, uint64_t a2, uint64_t a3, void *a4)
{
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  unint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  _OWORD v19[5];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v7 = a1[3];
  v22 = a1[2];
  v23 = v7;
  v24 = a1[4];
  v8 = a1[1];
  v20 = *a1;
  v21 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6C78);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_2365B6A20;
  *(_QWORD *)(v9 + 32) = a2;
  *(_QWORD *)(v9 + 40) = a3;
  swift_bridgeObjectRetain();
  v10 = (void *)sub_2365B0164();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v19[0] = 0;
  v11 = objc_msgSend(a4, sel_accountsWithAccountTypeIdentifiers_error_, v10, v19);

  v12 = *(void **)&v19[0];
  if (!v11)
  {
    v17 = *(id *)&v19[0];
    sub_2365AF8F4();

    goto LABEL_5;
  }
  sub_236465960(0, (unint64_t *)&qword_2563E6C80);
  v13 = sub_2365B0170();
  v14 = v12;

  sub_2364A7000((uint64_t)&v20);
  v11 = sub_2364A6D9C(v13, &v20);
  sub_2364A7068((uint64_t)&v20);
  swift_bridgeObjectRelease();
  if (!v11)
  {
    *(_QWORD *)&v19[0] = 0;
    *((_QWORD *)&v19[0] + 1) = 0xE000000000000000;
    sub_2365B0578();
    swift_bridgeObjectRelease();
    v19[2] = v22;
    v19[3] = v23;
    v19[4] = v24;
    v19[0] = v20;
    v19[1] = v21;
    IdMSAccount.ID.description.getter();
    v11 = v15;
    sub_2365B00B0();
    swift_bridgeObjectRelease();
    sub_2365B00B0();
    sub_2365B00B0();
    sub_2364A6D58();
    swift_allocError();
    *(_QWORD *)v16 = 0xD00000000000001ELL;
    *(_QWORD *)(v16 + 8) = 0x80000002365CBE00;
    *(_BYTE *)(v16 + 16) = 2;
LABEL_5:
    swift_willThrow();
  }
  return v11;
}

void ACAccount.id(with:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  void *v3;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = v2;
  v6 = objc_msgSend(v3, sel_accountType);
  if (!v6)
  {
    __break(1u);
    goto LABEL_26;
  }
  v7 = v6;
  v8 = objc_msgSend(v6, sel_identifier);

  if (!v8)
  {
    sub_2365B005C();
    goto LABEL_11;
  }
  v9 = sub_2365B005C();
  v11 = v10;

  v12 = sub_2365B005C();
  if (!v11)
  {
LABEL_11:
    swift_bridgeObjectRelease();
LABEL_12:
    v16 = objc_msgSend(v3, sel_accountType);
    if (v16)
    {
      v17 = v16;
      sub_2364A6D58();
      swift_allocError();
      *(_QWORD *)v18 = v17;
      *(_QWORD *)(v18 + 8) = 0;
      *(_BYTE *)(v18 + 16) = 0;
LABEL_14:
      swift_willThrow();
      return;
    }
LABEL_26:
    __break(1u);
    return;
  }
  if (v9 == v12 && v11 == v13)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_16;
  }
  v15 = sub_2365B08CC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v15 & 1) == 0)
    goto LABEL_12;
LABEL_16:
  v19 = objc_msgSend(a1, sel_altDSIDForAccount_, v3);
  if (!v19)
  {
    sub_2364A6D58();
    swift_allocError();
    *(_QWORD *)v30 = 0;
    *(_QWORD *)(v30 + 8) = 0;
    *(_BYTE *)(v30 + 16) = 4;
    goto LABEL_14;
  }
  v20 = v19;
  v21 = sub_2365B005C();
  v23 = v22;

  v24 = objc_msgSend(a1, sel_DSIDForAccount_, v3);
  if (v24)
  {
    v25 = v24;
    v26 = objc_msgSend(v24, sel_stringValue);
    v27 = sub_2365B005C();
    v29 = v28;

  }
  else
  {
    v27 = 0;
    v29 = 0;
  }
  v31 = objc_msgSend(v3, sel_username);
  if (v31)
  {
    v32 = v31;
    v33 = sub_2365B005C();
    v35 = v34;

  }
  else
  {
    v33 = 0;
    v35 = 0;
  }
  *(_QWORD *)a2 = v21;
  *(_QWORD *)(a2 + 8) = v23;
  *(_QWORD *)(a2 + 16) = v33;
  *(_QWORD *)(a2 + 24) = v35;
  *(_QWORD *)(a2 + 32) = v27;
  *(_QWORD *)(a2 + 40) = v29;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
}

uint64_t ACAccount.name(with:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v13;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6C88);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(a1, sel_givenNameForAccount_, v2);
  if (v7)
  {
    v8 = v7;
    sub_2365B005C();

  }
  v9 = objc_msgSend(a1, sel_familyNameForAccount_, v2);
  if (v9)
  {
    v10 = v9;
    sub_2365B005C();

  }
  v11 = sub_2365AF8D0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v6, 1, 1, v11);
  return sub_2365AF8A0();
}

__C::AIDAServiceType __swiftcall AKAppleIDServiceType.into()()
{
  uint64_t v0;
  uint64_t v1;
  __C::AIDAServiceType result;

  v1 = v0 - 1;
  if ((unint64_t)(v0 - 1) < 7 && ((0x7Bu >> v1) & 1) != 0)
    return (__C::AIDAServiceType)**((id **)&unk_2507D2CD0 + v1);
  result._rawValue = (NSString)sub_2365B068C();
  __break(1u);
  return result;
}

unint64_t sub_2364A29B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t result;
  unint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE v11[8];
  unint64_t v12;
  unint64_t v13;
  _OWORD v14[4];
  _OWORD v15[3];

  v3 = *(_QWORD *)(a2 + 16);
  sub_2364AA56C();
  result = sub_2365B0338();
  v13 = result;
  if (v3)
  {
    v5 = 0;
    v6 = 32;
    while (v5 < *(_QWORD *)(a2 + 16))
    {
      v7 = *(_OWORD *)(a2 + v6 + 48);
      v14[2] = *(_OWORD *)(a2 + v6 + 32);
      v14[3] = v7;
      v15[0] = *(_OWORD *)(a2 + v6 + 64);
      *(_OWORD *)((char *)v15 + 9) = *(_OWORD *)(a2 + v6 + 73);
      v8 = *(_OWORD *)(a2 + v6 + 16);
      v14[0] = *(_OWORD *)(a2 + v6);
      v14[1] = v8;
      ++v5;
      sub_2364AA5B0((uint64_t)v14);
      sub_2364D669C((uint64_t)v11, (unint64_t)v14);
      v9 = v12;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = sub_236487E68(v9);
      v6 += 96;
      if (v3 == v5)
      {
        swift_release();
        swift_release();
        return v13;
      }
    }
    __break(1u);
  }
  else
  {
    v10 = result;
    swift_release();
    swift_release();
    return v10;
  }
  return result;
}

uint64_t sub_2364A2AF8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  _QWORD *v5;
  id v6;
  uint64_t v8;
  id v9;
  void *v10;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542A8310);
    swift_allocError();
    *v5 = a3;
    v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    v10 = a2;
    v8 = *(_QWORD *)(*(_QWORD *)(v3 + 64) + 40);
    v9 = a2;
    sub_2364AA624((uint64_t)&v10, v8);
    return swift_continuation_throwingResume();
  }
}

uint64_t ACAccount.directFromCredentialItemCompanionKeyEnvelope(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  return swift_task_switch();
}

uint64_t sub_2364A2BB4()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  void *v22;
  uint8_t *v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = objc_msgSend(*(id *)(v0 + 144), sel_credential);
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, sel_credentialItemForKey_, *MEMORY[0x24BDB41A8]);

    if (v3)
    {
      v4 = *(void **)(v0 + 144);
      v5 = sub_2365B005C();
      v7 = v6;

      *(_QWORD *)(v0 + 152) = v5;
      *(_QWORD *)(v0 + 160) = v7;
      v8 = objc_msgSend(v4, sel_credential);
      if (v8)
      {
        v9 = v8;
        v10 = objc_msgSend(v8, sel_credentialItemForKey_, *MEMORY[0x24BDB4290]);

        if (v10)
        {
          v11 = *(void **)(v0 + 136);
          v12 = sub_2365B005C();
          v14 = v13;

          *(_QWORD *)(v0 + 168) = v12;
          *(_QWORD *)(v0 + 176) = v14;
          *(_QWORD *)(v0 + 56) = v0 + 120;
          *(_QWORD *)(v0 + 16) = v0;
          *(_QWORD *)(v0 + 24) = sub_2364A2F2C;
          *(_QWORD *)(v0 + 112) = swift_continuation_init();
          *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
          *(_QWORD *)(v0 + 88) = 0x40000000;
          *(_QWORD *)(v0 + 96) = sub_2364A2AF8;
          *(_QWORD *)(v0 + 104) = &block_descriptor_4;
          objc_msgSend(v11, sel_anisetteDataWithCompletion_, v0 + 80);
          return swift_continuation_await();
        }
      }
      swift_bridgeObjectRelease();
    }
  }
  if (qword_2542A79D8 != -1)
    swift_once();
  v16 = *(void **)(v0 + 144);
  v17 = sub_2365AFC00();
  __swift_project_value_buffer(v17, (uint64_t)qword_2542A79C0);
  v18 = v16;
  v19 = sub_2365AFBE8();
  v20 = sub_2365B0398();
  v21 = os_log_type_enabled(v19, v20);
  v22 = *(void **)(v0 + 144);
  if (v21)
  {
    v23 = (uint8_t *)swift_slowAlloc();
    v24 = swift_slowAlloc();
    v31 = v24;
    *(_DWORD *)v23 = 136315138;
    v25 = v22;
    v26 = objc_msgSend(v25, sel_description);
    v27 = sub_2365B005C();
    v29 = v28;

    *(_QWORD *)(v0 + 80) = sub_236468D88(v27, v29, &v31);
    sub_2365B04A0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_23644B000, v19, v20, "Unable to generate companion key envelope for account (%s, missing CK and/or PRK.", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v24, -1, -1);
    MEMORY[0x23B7F5254](v23, -1, -1);
  }
  else
  {

  }
  sub_2364A6D58();
  swift_allocError();
  *(_QWORD *)v30 = 0xD000000000000015;
  *(_QWORD *)(v30 + 8) = 0x80000002365CBD90;
  *(_BYTE *)(v30 + 16) = 3;
  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2364A2F2C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 184) = v1;
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

id sub_2364A2FA0()
{
  uint64_t v0;
  void *v1;
  id result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t (*v32)(void);
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *log;
  id v45;
  uint64_t v46;
  uint64_t v47[12];

  v1 = *(void **)(v0 + 120);
  if (!v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_2542A79D8 != -1)
      swift_once();
    v27 = sub_2365AFC00();
    __swift_project_value_buffer(v27, (uint64_t)qword_2542A79C0);
    v28 = sub_2365AFBE8();
    v29 = sub_2365B0398();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      _os_log_impl(&dword_23644B000, v28, v29, "Unable to generate CK envelope, no anisette data", v30, 2u);
      MEMORY[0x23B7F5254](v30, -1, -1);
    }

    sub_2364A6D58();
    swift_allocError();
    *(_QWORD *)v31 = 0xD000000000000015;
    *(_QWORD *)(v31 + 8) = 0x80000002365CBDE0;
    *(_BYTE *)(v31 + 16) = 3;
    swift_willThrow();
    v32 = *(uint64_t (**)(void))(v0 + 8);
    return (id)v32();
  }
  result = objc_msgSend(*(id *)(v0 + 120), sel_machineID);
  if (result)
  {
    v3 = result;
    v4 = sub_2365B005C();
    v6 = v5;

    result = objc_msgSend(v1, sel_oneTimePassword);
    if (result)
    {
      v7 = result;
      v46 = sub_2365B005C();
      v9 = v8;

      v45 = objc_msgSend(v1, sel_routingInfo);
      if (qword_2542A79D8 != -1)
        swift_once();
      v10 = *(void **)(v0 + 144);
      v11 = sub_2365AFC00();
      __swift_project_value_buffer(v11, (uint64_t)qword_2542A79C0);
      v12 = v10;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v13 = v12;
      v14 = sub_2365AFBE8();
      v15 = sub_2365B038C();
      log = v14;
      v16 = os_log_type_enabled(v14, v15);
      v17 = v9;
      v18 = *(_QWORD *)(v0 + 176);
      if (v16)
      {
        v38 = *(_QWORD *)(v0 + 160);
        v39 = *(_QWORD *)(v0 + 168);
        v37 = *(_QWORD *)(v0 + 152);
        v42 = v6;
        v19 = *(void **)(v0 + 144);
        v43 = v4;
        v20 = swift_slowAlloc();
        v40 = (_QWORD *)swift_slowAlloc();
        v41 = swift_slowAlloc();
        v47[0] = v41;
        *(_DWORD *)v20 = 138412547;
        *(_QWORD *)(v0 + 80) = v19;
        v21 = v19;
        sub_2365B04A0();
        *v40 = v19;
        v6 = v42;

        *(_WORD *)(v20 + 12) = 2085;
        v47[1] = v37;
        v47[2] = v38;
        v47[3] = v39;
        v47[4] = v18;
        v47[5] = v43;
        v47[6] = v42;
        v22 = v45;
        v23 = v46;
        v47[7] = v46;
        v47[8] = v17;
        v47[9] = (uint64_t)v45;
        v24 = IdMSAccount.Credential.CompanionKeyEnvelope.description.getter();
        *(_QWORD *)(v0 + 80) = sub_236468D88(v24, v25, v47);
        sub_2365B04A0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_23644B000, log, v15, "Built CK envelope directly from %@: %{sensitive}s", (uint8_t *)v20, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9960);
        swift_arrayDestroy();
        MEMORY[0x23B7F5254](v40, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x23B7F5254](v41, -1, -1);
        v26 = v20;
        v4 = v43;
        MEMORY[0x23B7F5254](v26, -1, -1);

      }
      else
      {
        v33 = *(void **)(v0 + 144);

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();

        v22 = v45;
        v23 = v46;
      }
      v35 = *(_QWORD *)(v0 + 168);
      v34 = *(_QWORD *)(v0 + 176);
      v36 = *(_QWORD *)(v0 + 128);
      *(_OWORD *)v36 = *(_OWORD *)(v0 + 152);
      *(_QWORD *)(v36 + 16) = v35;
      *(_QWORD *)(v36 + 24) = v34;
      *(_QWORD *)(v36 + 32) = v4;
      *(_QWORD *)(v36 + 40) = v6;
      *(_QWORD *)(v36 + 48) = v23;
      *(_QWORD *)(v36 + 56) = v17;
      *(_QWORD *)(v36 + 64) = v22;
      v32 = *(uint64_t (**)(void))(v0 + 8);
      return (id)v32();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_2364A34AC()
{
  uint64_t v0;

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id AKAnisetteData.into()@<X0>(uint64_t *a1@<X8>)
{
  void *v1;
  id result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = objc_msgSend(v1, sel_machineID);
  if (result)
  {
    v4 = result;
    v5 = sub_2365B005C();
    v7 = v6;

    result = objc_msgSend(v1, sel_oneTimePassword);
    if (result)
    {
      v8 = result;
      v9 = sub_2365B005C();
      v11 = v10;

      result = objc_msgSend(v1, sel_routingInfo);
      *a1 = v5;
      a1[1] = v7;
      a1[2] = v9;
      a1[3] = v11;
      a1[4] = (uint64_t)result;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id IdMSAccount.AnisettePackage.into()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  void *v4;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE0ACA8]), sel_init);
  v3 = (void *)sub_2365B0038();
  objc_msgSend(v2, sel_setMachineID_, v3);

  v4 = (void *)sub_2365B0038();
  objc_msgSend(v2, sel_setOneTimePassword_, v4);

  objc_msgSend(v2, sel_setRoutingInfo_, v1);
  return v2;
}

id IdMSAccount.DeviceInfo.into(with:)()
{
  id v0;
  void *v1;
  void *v2;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE0AD68]), sel_init);
  objc_msgSend(v0, sel_setLinkType_, 3);
  v1 = (void *)sub_2365B0038();
  objc_msgSend(v0, sel_setUniqueDeviceIdentifier_, v1);

  v2 = (void *)sub_2365B0038();
  objc_msgSend(v0, sel_setServerFriendlyDescription_, v2);

  return v0;
}

uint64_t UserProfileInfo.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UserProfileInfo.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UserProfileInfo.shortName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

void __swiftcall UserProfileInfo.init(identifier:name:shortName:)(AppleIDSetup::UserProfileInfo *__return_ptr retstr, Swift::String identifier, Swift::String_optional name, Swift::String_optional shortName)
{
  retstr->identifier = identifier;
  retstr->name = name;
  retstr->shortName = shortName;
}

uint64_t UserProfileInfo.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  if (v1)
  {
    sub_2365B0A04();
    swift_bridgeObjectRetain();
    sub_2365B008C();
    swift_bridgeObjectRelease();
    if (v2)
    {
LABEL_3:
      sub_2365B0A04();
      swift_bridgeObjectRetain();
      sub_2365B008C();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_2365B0A04();
    if (v2)
      goto LABEL_3;
  }
  return sub_2365B0A04();
}

uint64_t sub_2364A3890()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1701667182;
  if (*v0 != 1)
    v1 = 0x6D614E74726F6873;
  if (*v0)
    return v1;
  else
    return 0x696669746E656469;
}

uint64_t sub_2364A38EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2364AA410(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2364A3910()
{
  sub_2364A70D0();
  return sub_2365B0AD0();
}

uint64_t sub_2364A3938()
{
  sub_2364A70D0();
  return sub_2365B0ADC();
}

uint64_t UserProfileInfo.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];
  char v12;
  char v13;
  char v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6C98);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[2];
  v11[3] = v1[3];
  v11[4] = v7;
  v8 = v1[4];
  v11[1] = v1[5];
  v11[2] = v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2364A70D0();
  sub_2365B0AAC();
  v14 = 0;
  v9 = v11[5];
  sub_2365B0800();
  if (!v9)
  {
    v13 = 1;
    sub_2365B07C4();
    v12 = 2;
    sub_2365B07C4();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t UserProfileInfo.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 40);
  sub_2365B09E0();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  if (!v1)
  {
    sub_2365B0A04();
    if (v2)
      goto LABEL_3;
LABEL_5:
    sub_2365B0A04();
    return sub_2365B0A34();
  }
  sub_2365B0A04();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  if (!v2)
    goto LABEL_5;
LABEL_3:
  sub_2365B0A04();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  return sub_2365B0A34();
}

uint64_t UserProfileInfo.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6CA8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2364A70D0();
  sub_2365B0A7C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v27 = 0;
  v9 = sub_2365B074C();
  v11 = v10;
  v24 = v9;
  v26 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_2365B0710();
  v14 = v13;
  v22 = v12;
  v25 = 2;
  swift_bridgeObjectRetain();
  v23 = v14;
  v15 = sub_2365B0710();
  v17 = v16;
  v18 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain();
  v19 = v23;
  *a2 = v24;
  a2[1] = v11;
  a2[2] = v22;
  a2[3] = v19;
  a2[4] = v18;
  a2[5] = v17;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2364A3DE8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return UserProfileInfo.init(from:)(a1, a2);
}

uint64_t sub_2364A3DFC(_QWORD *a1)
{
  return UserProfileInfo.encode(to:)(a1);
}

uint64_t sub_2364A3E1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 40);
  sub_2365B09E0();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  if (!v1)
  {
    sub_2365B0A04();
    if (v2)
      goto LABEL_3;
LABEL_5:
    sub_2365B0A04();
    return sub_2365B0A34();
  }
  sub_2365B0A04();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  if (!v2)
    goto LABEL_5;
LABEL_3:
  sub_2365B0A04();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  return sub_2365B0A34();
}

void FAFamilyMember.accountID.getter(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;

  v2 = v1;
  v4 = objc_msgSend(v2, sel_altDSID);
  if (v4)
  {
    v5 = v4;
    v6 = sub_2365B005C();
    v8 = v7;

    v9 = objc_msgSend(v2, sel_appleID);
    if (v9)
    {
      v10 = v9;
      v11 = sub_2365B005C();
      v13 = v12;

    }
    else
    {
      v11 = 0;
      v13 = 0;
    }
    v14 = objc_msgSend(v2, sel_dsid);
    v15 = v14;
    if (v14)
    {
      v16 = objc_msgSend(v14, sel_stringValue);

      v15 = (void *)sub_2365B005C();
      v18 = v17;

    }
    else
    {
      v18 = 0;
    }
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v11;
    *(_QWORD *)(a1 + 24) = v13;
    *(_QWORD *)(a1 + 32) = v15;
    *(_QWORD *)(a1 + 40) = v18;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
  }
  else
  {
    sub_2364A7114();
    swift_allocError();
    swift_willThrow();
  }
}

id sub_2364A405C(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v9;

  if (a2)
  {
    v2 = (void *)sub_2365B0038();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = 0;
  }
  v3 = (void *)sub_2365B0038();
  swift_bridgeObjectRelease();
  v4 = (void *)sub_2365B0038();
  swift_bridgeObjectRelease();
  v5 = (void *)sub_2365B0038();
  swift_bridgeObjectRelease();
  v6 = (void *)sub_2365B0038();
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v9, sel_initWithUsername_altDSID_machineID_continuationKey_passwordResetKey_, v2, v3, v4, v5, v6);

  return v7;
}

_QWORD *sub_2364A417C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542A8308);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2364A6B24(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_2364A4288(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2364A42DC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_2364A42A4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2364A4438(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_2364A42C0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2364A4594(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_2364A42DC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542A8300);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2365B06C8();
  __break(1u);
  return result;
}

uint64_t sub_2364A4438(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2563EC780);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2365B06C8();
  __break(1u);
  return result;
}

uint64_t sub_2364A4594(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6ED8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[80 * v8])
      memmove(v12, v13, 80 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[80 * v8] || v12 >= &v13[80 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2365B06C8();
  __break(1u);
  return result;
}

uint64_t sub_2364A4718(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_2364A47BC(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t _s12AppleIDSetup15UserProfileInfoV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  char v12;

  v2 = a1[2];
  v4 = a1[3];
  v3 = a1[4];
  v5 = a1[5];
  v7 = a2[2];
  v6 = a2[3];
  v9 = a2[4];
  v8 = a2[5];
  if (*a1 == *a2 && a1[1] == a2[1] || (v10 = sub_2365B08CC(), result = 0, (v10 & 1) != 0))
  {
    if (v4)
    {
      if (!v6)
        return 0;
      if (v2 != v7 || v4 != v6)
      {
        v12 = sub_2365B08CC();
        result = 0;
        if ((v12 & 1) == 0)
          return result;
      }
    }
    else if (v6)
    {
      return 0;
    }
    if (v5)
    {
      if (v8 && (v3 == v9 && v5 == v8 || (sub_2365B08CC() & 1) != 0))
        return 1;
    }
    else if (!v8)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

void _s12AppleIDSetup11IdMSAccountV10CredentialO2eeoiySbAE_AEtFZ_0(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2364A4A44@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[264];

  if (a1)
  {
    v22 = v7;
    v23 = v3;
    v24 = v4;
    v25 = v5;
    v26 = v1;
    v27 = v2;
    sub_23645F8F8(v11, v22, v8, v24, v6, v13, v25, v12, v10, a1);
    sub_23645F8F8(v27, v26, v41, v23, v40, v39, v38, v37, v36, v9);
LABEL_16:
    sub_2364AA66C((uint64_t)v42);
    goto LABEL_17;
  }
  v34 = v2;
  v35 = v3;
  v14 = v41;
  if (v2 != v11 || v1 != v7)
  {
    v15 = v1;
    v16 = sub_2365B08CC();
    v1 = v15;
    v14 = v41;
    if ((v16 & 1) == 0)
      goto LABEL_19;
  }
  if (v14 != v8 || v35 != v4)
  {
    v17 = v1;
    v18 = sub_2365B08CC();
    v1 = v17;
    v14 = v41;
    if ((v18 & 1) == 0)
      goto LABEL_19;
  }
  if (v40 != v6 || v39 != v13)
  {
    v19 = v1;
    v20 = sub_2365B08CC();
    v1 = v19;
    v14 = v41;
    if ((v20 & 1) == 0)
    {
LABEL_19:
      v30 = v4;
      v31 = v1;
      sub_23645F8F8(v11, v7, v8, v30, v6, v13, v5, v12, v10, 0);
      sub_23645F8F8(v34, v31, v14, v35, v40, v39, v38, v37, v36, 0);
      goto LABEL_16;
    }
  }
  if (v38 == v5 && v37 == v12)
  {
    v21 = v1;
    sub_23645F8F8(v11, v7, v8, v4, v6, v13, v38, v37, v10, 0);
    sub_23645F8F8(v34, v21, v41, v35, v40, v39, v38, v37, v36, 0);
    sub_2364AA66C((uint64_t)v42);
    if (v36 == v10)
    {
LABEL_22:
      v28 = 1;
      return v28 & 1;
    }
  }
  else
  {
    v33 = v1;
    sub_2365B08CC();
    sub_23645F8F8(v11, v7, v8, v4, v6, v13, v5, v12, v10, 0);
    sub_23645F8F8(v34, v33, v41, v35, v40, v39, v38, v37, v36, 0);
    sub_2364AA66C((uint64_t)v42);
    if ((v32 & 1) != 0 && v36 == v10)
      goto LABEL_22;
  }
LABEL_17:
  v28 = 0;
  return v28 & 1;
}

uint64_t _s12AppleIDSetup11IdMSAccountV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  __int128 v10;
  char v11;
  _OWORD v13[4];
  uint64_t v14;
  char v15;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (!v4 && (sub_2365B08CC() & 1) == 0)
    return 0;
  v5 = type metadata accessor for IdMSAccount();
  if ((sub_2365AF8B8() & 1) == 0)
    return 0;
  v6 = (char *)a1 + *(int *)(v5 + 24);
  v7 = *((_QWORD *)v6 + 8);
  v8 = v6[72];
  v9 = *((_OWORD *)v6 + 1);
  v13[0] = *(_OWORD *)v6;
  v13[1] = v9;
  v10 = *((_OWORD *)v6 + 3);
  v13[2] = *((_OWORD *)v6 + 2);
  v13[3] = v10;
  v14 = v7;
  v15 = v8;
  _s12AppleIDSetup11IdMSAccountV10CredentialO2eeoiySbAE_AEtFZ_0((uint64_t)v13);
  if ((v11 & 1) != 0)
    return sub_2365A28C4(*(_QWORD *)((char *)a1 + *(int *)(v5 + 28)), *(_QWORD *)((char *)a2 + *(int *)(v5 + 28)));
  else
    return 0;
}

uint64_t type metadata accessor for IdMSAccount()
{
  uint64_t result;

  result = qword_2563E6D80;
  if (!qword_2563E6D80)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_2364A5164()
{
  unint64_t result;

  result = qword_2563E6AD8;
  if (!qword_2563E6AD8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B9700, &type metadata for IdMSAccount.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6AD8);
  }
  return result;
}

unint64_t sub_2364A51A8()
{
  unint64_t result;

  result = qword_2563E6AE0;
  if (!qword_2563E6AE0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for IdMSAccount.ID, &type metadata for IdMSAccount.ID);
    atomic_store(result, (unint64_t *)&qword_2563E6AE0);
  }
  return result;
}

unint64_t sub_2364A51EC()
{
  unint64_t result;

  result = qword_2563E6AF0;
  if (!qword_2563E6AF0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for IdMSAccount.Credential, &type metadata for IdMSAccount.Credential);
    atomic_store(result, (unint64_t *)&qword_2563E6AF0);
  }
  return result;
}

unint64_t sub_2364A5230()
{
  unint64_t result;

  result = qword_2563E6B00;
  if (!qword_2563E6B00)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for IdMSAccount.ID, &type metadata for IdMSAccount.ID);
    atomic_store(result, (unint64_t *)&qword_2563E6B00);
  }
  return result;
}

unint64_t sub_2364A5274()
{
  unint64_t result;

  result = qword_2563E6B10;
  if (!qword_2563E6B10)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for IdMSAccount.Credential, &type metadata for IdMSAccount.Credential);
    atomic_store(result, (unint64_t *)&qword_2563E6B10);
  }
  return result;
}

uint64_t sub_2364A52B8(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2563E5E50);
    v10 = sub_23644F0B8(a2, (uint64_t (*)(uint64_t))type metadata accessor for AIDAServiceType, a3);
    result = MEMORY[0x23B7F5164](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2364A533C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for IdMSAccount();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL _s12AppleIDSetup11IdMSAccountV10SRPResultsV2eeoiySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  _BOOL8 result;
  char v9;
  char v10;

  v3 = a1[10];
  v2 = a1[11];
  v5 = a2[10];
  v4 = a2[11];
  v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = sub_2365B08CC(), result = 0, (v7 & 1) != 0))
  {
    if (v2 >> 60 == 15)
    {
      if (v4 >> 60 == 15)
        return 1;
    }
    else if (v4 >> 60 != 15)
    {
      sub_23646A418(v3, v2);
      sub_23646A418(v5, v4);
      sub_2364B7E28(v3, v2);
      v10 = v9;
      sub_23646A42C(v5, v4);
      sub_23646A42C(v3, v2);
      return (v10 & 1) != 0;
    }
    sub_23646A418(v3, v2);
    sub_23646A418(v5, v4);
    sub_23646A42C(v3, v2);
    sub_23646A42C(v5, v4);
    return 0;
  }
  return result;
}

BOOL _s12AppleIDSetup11IdMSAccountV10CredentialO20CompanionKeyEnvelopeV2eeoiySbAG_AGtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BOOL8 result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = a1[2];
  v4 = a1[3];
  v3 = a1[4];
  v5 = a1[5];
  v17 = a1[6];
  v18 = a1[7];
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  v11 = a2[6];
  v10 = a2[7];
  v15 = a2[8];
  v16 = a1[8];
  if (*a1 == *a2 && a1[1] == a2[1] || (v12 = sub_2365B08CC(), result = 0, (v12 & 1) != 0))
  {
    if (v2 == v6 && v4 == v7)
      return (v3 == v8 && v5 == v9 || (sub_2365B08CC() & 1) != 0)
          && (v17 == v11 && v18 == v10 || (sub_2365B08CC() & 1) != 0)
          && v16 == v15;
    v14 = sub_2365B08CC();
    result = 0;
    if ((v14 & 1) != 0)
      return (v3 == v8 && v5 == v9 || (sub_2365B08CC() & 1) != 0)
          && (v17 == v11 && v18 == v10 || (sub_2365B08CC() & 1) != 0)
          && v16 == v15;
  }
  return result;
}

unint64_t sub_2364A55CC()
{
  unint64_t result;

  result = qword_2563E6B40;
  if (!qword_2563E6B40)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B96B0, &type metadata for IdMSAccount.Credential.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6B40);
  }
  return result;
}

unint64_t sub_2364A5610()
{
  unint64_t result;

  result = qword_2563E6B48;
  if (!qword_2563E6B48)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B9660, &type metadata for IdMSAccount.Credential.RawPasswordCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6B48);
  }
  return result;
}

unint64_t sub_2364A5654()
{
  unint64_t result;

  result = qword_2563E6B50;
  if (!qword_2563E6B50)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B9610, &type metadata for IdMSAccount.Credential.PasswordlessTokenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6B50);
  }
  return result;
}

unint64_t sub_2364A5698()
{
  unint64_t result;

  result = qword_2563E6B58;
  if (!qword_2563E6B58)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B95C0, &type metadata for IdMSAccount.Credential.CompanionKeysCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6B58);
  }
  return result;
}

unint64_t sub_2364A56DC()
{
  unint64_t result;

  result = qword_2563E6B60;
  if (!qword_2563E6B60)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for IdMSAccount.Credential.CompanionKeyEnvelope, &type metadata for IdMSAccount.Credential.CompanionKeyEnvelope);
    atomic_store(result, (unint64_t *)&qword_2563E6B60);
  }
  return result;
}

unint64_t sub_2364A5720()
{
  unint64_t result;

  result = qword_2563E6B68;
  if (!qword_2563E6B68)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B9570, &type metadata for IdMSAccount.Credential.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6B68);
  }
  return result;
}

unint64_t sub_2364A5764()
{
  unint64_t result;

  result = qword_2563E6B98;
  if (!qword_2563E6B98)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for IdMSAccount.Credential.CompanionKeyEnvelope, &type metadata for IdMSAccount.Credential.CompanionKeyEnvelope);
    atomic_store(result, (unint64_t *)&qword_2563E6B98);
  }
  return result;
}

unint64_t sub_2364A57A8()
{
  unint64_t result;

  result = qword_2563E6BA8;
  if (!qword_2563E6BA8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B9520, &type metadata for IdMSAccount.ID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6BA8);
  }
  return result;
}

unint64_t sub_2364A57EC()
{
  unint64_t result;

  result = qword_2563E6BB8;
  if (!qword_2563E6BB8)
  {
    result = MEMORY[0x23B7F5164](MEMORY[0x24BDCDE60], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_2563E6BB8);
  }
  return result;
}

unint64_t sub_2364A5830()
{
  unint64_t result;

  result = qword_2563E6BC8;
  if (!qword_2563E6BC8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B94D0, &type metadata for IdMSAccount.SRPResults.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6BC8);
  }
  return result;
}

unint64_t sub_2364A5874()
{
  unint64_t result;

  result = qword_2563EA380;
  if (!qword_2563EA380)
  {
    result = MEMORY[0x23B7F5164](MEMORY[0x24BDCDDF8], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_2563EA380);
  }
  return result;
}

unint64_t sub_2364A58B8()
{
  unint64_t result;

  result = qword_2563E6BD8;
  if (!qword_2563E6BD8)
  {
    result = MEMORY[0x23B7F5164](MEMORY[0x24BDCDE38], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_2563E6BD8);
  }
  return result;
}

uint64_t _s12AppleIDSetup11IdMSAccountV10DeviceInfoV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  uint64_t result;
  char v14;
  char v15;
  int v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD **)(a1 + 48);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD **)(a2 + 48);
  v18 = *(_QWORD **)(a2 + 56);
  v19 = *(_QWORD **)(a1 + 56);
  v16 = *(unsigned __int8 *)(a2 + 64);
  v17 = *(unsigned __int8 *)(a1 + 64);
  if (*(_QWORD *)a1 != *(_QWORD *)a2 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
  {
    v12 = sub_2365B08CC();
    result = 0;
    if ((v12 & 1) == 0)
      return result;
  }
  if (v2 != v7 || v4 != v8)
  {
    v14 = sub_2365B08CC();
    result = 0;
    if ((v14 & 1) == 0)
      return result;
  }
  if (!v6)
  {
    if (!v9)
      return v17 ^ v16 ^ 1u;
LABEL_18:
    sub_23648DC24(v10, v9);
    sub_23648DD50(v3, v6);
    sub_23648DD50(v10, v9);
    return 0;
  }
  if (!v9)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_18;
  }
  if (v3 == v10 && v6 == v9 || (v15 = sub_2365B08CC(), result = 0, (v15 & 1) != 0))
  {
    if ((sub_23654B6A0(v5, v11) & 1) == 0 || (sub_23654B6A0(v19, v18) & 1) == 0)
      return 0;
    return v17 ^ v16 ^ 1u;
  }
  return result;
}

BOOL _s12AppleIDSetup11IdMSAccountV15AnisettePackageV2eeoiySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  _BOOL8 result;
  char v12;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = *a1 == *a2 && a1[1] == a2[1];
  if (v8 || (v9 = sub_2365B08CC(), result = 0, (v9 & 1) != 0))
  {
    if (v2 == v5 && v3 == v6)
      return v4 == v7;
    v12 = sub_2365B08CC();
    result = 0;
    if ((v12 & 1) != 0)
      return v4 == v7;
  }
  return result;
}

unint64_t sub_2364A5B44()
{
  unint64_t result;

  result = qword_2563E6BE8;
  if (!qword_2563E6BE8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B9480, &type metadata for IdMSAccount.AnisettePackage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6BE8);
  }
  return result;
}

unint64_t sub_2364A5B88()
{
  unint64_t result;

  result = qword_2563E6C10;
  if (!qword_2563E6C10)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B9430, &type metadata for IdMSAccount.DeviceInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6C10);
  }
  return result;
}

unint64_t sub_2364A5BCC()
{
  unint64_t result;

  result = qword_2563E6C18;
  if (!qword_2563E6C18)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for SetupReport.LocaleInfo, &type metadata for SetupReport.LocaleInfo);
    atomic_store(result, (unint64_t *)&qword_2563E6C18);
  }
  return result;
}

unint64_t sub_2364A5C10()
{
  unint64_t result;

  result = qword_2563E6C28;
  if (!qword_2563E6C28)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for SetupReport.LocaleInfo, &type metadata for SetupReport.LocaleInfo);
    atomic_store(result, (unint64_t *)&qword_2563E6C28);
  }
  return result;
}

unint64_t sub_2364A5C54()
{
  unint64_t result;

  result = qword_2563E6C38;
  if (!qword_2563E6C38)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B93E0, &type metadata for IdMSAccount.Credential.CompanionKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6C38);
  }
  return result;
}

unint64_t sub_2364A5C98()
{
  unint64_t result;

  result = qword_2563E6C40;
  if (!qword_2563E6C40)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for IdMSAccount.AnisettePackage, &type metadata for IdMSAccount.AnisettePackage);
    atomic_store(result, (unint64_t *)&qword_2563E6C40);
  }
  return result;
}

unint64_t sub_2364A5CDC()
{
  unint64_t result;

  result = qword_2563E6C50;
  if (!qword_2563E6C50)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for IdMSAccount.AnisettePackage, &type metadata for IdMSAccount.AnisettePackage);
    atomic_store(result, (unint64_t *)&qword_2563E6C50);
  }
  return result;
}

uint64_t sub_2364A5D20(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x69746E6564657263 && a2 == 0xEA00000000006C61 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7365636976726573 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_2364A5EBC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701736302 && a2 == 0xE400000000000000;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F696E61706D6F63 && a2 == 0xED00007379654B6ELL || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002365CBE20 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7773736150776172 && a2 == 0xEB0000000064726FLL)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_2364A6098(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000011 && a2 == 0x80000002365CBE20 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x61746144736D6469 && a2 == 0xED00006E656B6F54)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_2364A61A8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x64697344746C61 && a2 == 0xE700000000000000;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D616E72657375 && a2 == 0xE800000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1684632420 && a2 == 0xE400000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7355656369766564 && a2 == 0xEC00000064497265)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_2364A63BC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6465766968637261 && a2 == 0xEC00000061746144)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_2364A64AC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x49656E696863616DLL && a2 == 0xE900000000000044;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x50656D6954656E6FLL && a2 == 0xEF64726F77737361 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x49676E6974756F72 && a2 == 0xEB000000006F666ELL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_2364A6648(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000010 && a2 == 0x80000002365CBE40 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x80000002365CBE60 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E49656C61636F6CLL && a2 == 0xEA00000000006F66 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x79636167654C7369 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v5 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_2364A6804(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x61756E69746E6F63 && a2 == 0xEF79654B6E6F6974;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002365CBE80 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6574746573696E61 && a2 == 0xEF6567616B636150)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

id sub_2364A6998(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[3];
  v6 = a1[5];
  v7 = (void *)sub_2365B0038();
  v8 = objc_msgSend(a2, sel_authKitAccountWithAltDSID_, v7);

  if (!v8)
  {
    if (!v5
      || (v10 = (void *)sub_2365B0038(),
          v8 = objc_msgSend(a2, sel_authKitAccountWithAppleID_, v10),
          v10,
          !v8))
    {
      if (!v6
        || (v11 = (void *)sub_2365B0038(),
            sub_236465960(0, &qword_2563EA3A0),
            objc_msgSend(v11, sel_integerValue),
            v12 = (void *)sub_2365B0440(),
            v8 = objc_msgSend(a2, sel_authKitAccountWithDSID_, v12),
            v12,
            v11,
            !v8))
      {
        sub_2364A6D58();
        swift_allocError();
        *(_QWORD *)v13 = v3;
        *(_QWORD *)(v13 + 8) = v4;
        *(_BYTE *)(v13 + 16) = 1;
        swift_bridgeObjectRetain();
        swift_willThrow();
      }
    }
  }
  return v8;
}

uint64_t sub_2364A6B24(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      type metadata accessor for AIDAServiceType(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2365B06C8();
  __break(1u);
  return result;
}

uint64_t sub_2364A6C28(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  void **v4;
  void *v5;
  id v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  type metadata accessor for AIDAServiceType(0);
  sub_23644F0B8((unint64_t *)&qword_2542A82D0, (uint64_t (*)(uint64_t))type metadata accessor for AIDAServiceType, (uint64_t)&unk_2365B23B4);
  result = sub_2365B0338();
  v7 = result;
  if (v2)
  {
    v4 = (void **)(a1 + 32);
    do
    {
      v5 = *v4++;
      sub_2364D6474(&v6, v5);

      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_2364A6CC8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_2364A6CD4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E45E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_2364A6D14()
{
  unint64_t result;

  result = qword_2563E6C58;
  if (!qword_2563E6C58)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B93A0, &type metadata for IdMSAccount.NoPrimaryAccountFound);
    atomic_store(result, (unint64_t *)&qword_2563E6C58);
  }
  return result;
}

unint64_t sub_2364A6D58()
{
  unint64_t result;

  result = qword_2563E6C70;
  if (!qword_2563E6C70)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B9360, &_s17ConversionFailureON);
    atomic_store(result, (unint64_t *)&qword_2563E6C70);
  }
  return result;
}

void *sub_2364A6D9C(unint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v25;
  unint64_t v26;

  v2 = a1;
  if (a1 >> 62)
  {
LABEL_33:
    swift_bridgeObjectRetain();
    v3 = sub_2365B0698();
    if (v3)
      goto LABEL_3;
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3)
    {
LABEL_3:
      v25 = v3;
      v26 = v2 & 0xC000000000000001;
      v4 = 4;
      while (1)
      {
        if (v26)
          v5 = (id)MEMORY[0x23B7F45A0](v4 - 4, v2);
        else
          v5 = *(id *)(v2 + 8 * v4);
        v6 = v5;
        v7 = v4 - 3;
        if (__OFADD__(v4 - 4, 1))
        {
          __break(1u);
          goto LABEL_33;
        }
        v8 = objc_msgSend(v5, sel_aa_altDSID);
        if (v8)
        {
          v9 = v8;
          v10 = sub_2365B005C();
          v12 = v11;

          if (v10 == *a2 && v12 == a2[1])
          {
            swift_bridgeObjectRelease();
LABEL_31:
            swift_bridgeObjectRelease();
            return v6;
          }
          v14 = sub_2365B08CC();
          swift_bridgeObjectRelease();
          if ((v14 & 1) != 0)
            goto LABEL_31;
        }
        v15 = v2;
        v17 = a2[2];
        v16 = a2[3];
        swift_bridgeObjectRetain();
        v18 = objc_msgSend(v6, sel_username);
        if (!v18)
          break;
        v19 = v18;
        v20 = sub_2365B005C();
        v22 = v21;

        if (!v16)
        {
          if (!v22)
            goto LABEL_31;
          goto LABEL_5;
        }
        if (!v22)
          goto LABEL_5;
        if (v17 == v20 && v16 == v22)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_31;
        }
        v23 = sub_2365B08CC();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v23 & 1) != 0)
          goto LABEL_31;

LABEL_6:
        v2 = v15;
        ++v4;
        if (v7 == v25)
          goto LABEL_34;
      }
      if (!v16)
        goto LABEL_31;
LABEL_5:

      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
LABEL_34:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_2364A7000(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_2364A7068(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_2364A70D0()
{
  unint64_t result;

  result = qword_2563E6CA0;
  if (!qword_2563E6CA0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B9310, &type metadata for UserProfileInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6CA0);
  }
  return result;
}

unint64_t sub_2364A7114()
{
  unint64_t result;

  result = qword_2563E6CB0;
  if (!qword_2563E6CB0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B92D0, &_s14MissingAltDsidVN);
    atomic_store(result, (unint64_t *)&qword_2563E6CB0);
  }
  return result;
}

uint64_t sub_2364A7158(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_23644F0B8(&qword_2563E4640, (uint64_t (*)(uint64_t))type metadata accessor for IdMSAccount, (uint64_t)&protocol conformance descriptor for IdMSAccount);
  a1[2] = sub_23644F0B8(&qword_2563E45F8, (uint64_t (*)(uint64_t))type metadata accessor for IdMSAccount, (uint64_t)&protocol conformance descriptor for IdMSAccount);
  result = sub_23644F0B8(&qword_2563E6CB8, (uint64_t (*)(uint64_t))type metadata accessor for IdMSAccount, (uint64_t)&protocol conformance descriptor for IdMSAccount);
  a1[3] = result;
  return result;
}

uint64_t sub_2364A71D0()
{
  return sub_23644F0B8(&qword_2563E6CC0, (uint64_t (*)(uint64_t))type metadata accessor for IdMSAccount, (uint64_t)&protocol conformance descriptor for IdMSAccount);
}

uint64_t sub_2364A71FC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_23645EB14(a1, a2, a3, (uint64_t (*)(void))sub_2364A5274, (uint64_t (*)(void))sub_2364A51EC, (uint64_t (*)(void))sub_2364A7218);
}

unint64_t sub_2364A7218()
{
  unint64_t result;

  result = qword_2563E6CC8;
  if (!qword_2563E6CC8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for IdMSAccount.Credential, &type metadata for IdMSAccount.Credential);
    atomic_store(result, (unint64_t *)&qword_2563E6CC8);
  }
  return result;
}

unint64_t sub_2364A7260()
{
  unint64_t result;

  result = qword_2563E6CD0;
  if (!qword_2563E6CD0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for IdMSAccount.Credential, &type metadata for IdMSAccount.Credential);
    atomic_store(result, (unint64_t *)&qword_2563E6CD0);
  }
  return result;
}

uint64_t sub_2364A72A4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_23645EB14(a1, a2, a3, (uint64_t (*)(void))sub_2364A5230, (uint64_t (*)(void))sub_2364A51A8, (uint64_t (*)(void))sub_2364A72C0);
}

unint64_t sub_2364A72C0()
{
  unint64_t result;

  result = qword_2542A7EF0;
  if (!qword_2542A7EF0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for IdMSAccount.ID, &type metadata for IdMSAccount.ID);
    atomic_store(result, (unint64_t *)&qword_2542A7EF0);
  }
  return result;
}

unint64_t sub_2364A7308()
{
  unint64_t result;

  result = qword_2542A7EF8;
  if (!qword_2542A7EF8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for IdMSAccount.ID, &type metadata for IdMSAccount.ID);
    atomic_store(result, (unint64_t *)&qword_2542A7EF8);
  }
  return result;
}

uint64_t sub_2364A734C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_23645EB14(a1, a2, a3, (uint64_t (*)(void))sub_2364908A8, (uint64_t (*)(void))sub_2364907A4, (uint64_t (*)(void))sub_2364906D8);
}

uint64_t sub_2364A736C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_23645EB14(a1, a2, a3, (uint64_t (*)(void))sub_2364A5CDC, (uint64_t (*)(void))sub_2364A5C98, (uint64_t (*)(void))sub_2364A7388);
}

unint64_t sub_2364A7388()
{
  unint64_t result;

  result = qword_2563E6CD8;
  if (!qword_2563E6CD8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for IdMSAccount.AnisettePackage, &type metadata for IdMSAccount.AnisettePackage);
    atomic_store(result, (unint64_t *)&qword_2563E6CD8);
  }
  return result;
}

unint64_t sub_2364A73D0()
{
  unint64_t result;

  result = qword_2563E6CE0;
  if (!qword_2563E6CE0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for IdMSAccount.AnisettePackage, &type metadata for IdMSAccount.AnisettePackage);
    atomic_store(result, (unint64_t *)&qword_2563E6CE0);
  }
  return result;
}

uint64_t sub_2364A7414(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_23645EB14(a1, a2, a3, (uint64_t (*)(void))sub_236490580, (uint64_t (*)(void))sub_23649053C, (uint64_t (*)(void))sub_2364A7430);
}

unint64_t sub_2364A7430()
{
  unint64_t result;

  result = qword_2563E6CE8;
  if (!qword_2563E6CE8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for IdMSAccount.DeviceInfo, &type metadata for IdMSAccount.DeviceInfo);
    atomic_store(result, (unint64_t *)&qword_2563E6CE8);
  }
  return result;
}

unint64_t sub_2364A7478()
{
  unint64_t result;

  result = qword_2563E6CF0;
  if (!qword_2563E6CF0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for IdMSAccount.DeviceInfo, &type metadata for IdMSAccount.DeviceInfo);
    atomic_store(result, (unint64_t *)&qword_2563E6CF0);
  }
  return result;
}

uint64_t sub_2364A74BC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_23645EB14(a1, a2, a3, (uint64_t (*)(void))sub_2364A5764, (uint64_t (*)(void))sub_2364A56DC, (uint64_t (*)(void))sub_2364A74D8);
}

unint64_t sub_2364A74D8()
{
  unint64_t result;

  result = qword_2563E6CF8;
  if (!qword_2563E6CF8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for IdMSAccount.Credential.CompanionKeyEnvelope, &type metadata for IdMSAccount.Credential.CompanionKeyEnvelope);
    atomic_store(result, (unint64_t *)&qword_2563E6CF8);
  }
  return result;
}

unint64_t sub_2364A7520()
{
  unint64_t result;

  result = qword_2563E6D00;
  if (!qword_2563E6D00)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for IdMSAccount.Credential.CompanionKeyEnvelope, &type metadata for IdMSAccount.Credential.CompanionKeyEnvelope);
    atomic_store(result, (unint64_t *)&qword_2563E6D00);
  }
  return result;
}

uint64_t sub_2364A7564(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_23645EB14(a1, a2, a3, (uint64_t (*)(void))sub_2364A7580, (uint64_t (*)(void))sub_2364A75C4, (uint64_t (*)(void))sub_2364A7608);
}

unint64_t sub_2364A7580()
{
  unint64_t result;

  result = qword_2563E6D08;
  if (!qword_2563E6D08)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for UserProfileInfo, &type metadata for UserProfileInfo);
    atomic_store(result, (unint64_t *)&qword_2563E6D08);
  }
  return result;
}

unint64_t sub_2364A75C4()
{
  unint64_t result;

  result = qword_2563E6D10;
  if (!qword_2563E6D10)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for UserProfileInfo, &type metadata for UserProfileInfo);
    atomic_store(result, (unint64_t *)&qword_2563E6D10);
  }
  return result;
}

unint64_t sub_2364A7608()
{
  unint64_t result;

  result = qword_2563E6D18;
  if (!qword_2563E6D18)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for UserProfileInfo, &type metadata for UserProfileInfo);
    atomic_store(result, (unint64_t *)&qword_2563E6D18);
  }
  return result;
}

unint64_t sub_2364A7650()
{
  unint64_t result;

  result = qword_2563E6D20;
  if (!qword_2563E6D20)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for UserProfileInfo, &type metadata for UserProfileInfo);
    atomic_store(result, (unint64_t *)&qword_2563E6D20);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for IdMSAccount(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v25 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    v9 = a2[7];
    a1[6] = a2[6];
    a1[7] = v9;
    v10 = a2[9];
    v11 = a3[5];
    v28 = (char *)a2 + v11;
    v30 = (char *)a1 + v11;
    a1[8] = a2[8];
    a1[9] = v10;
    v13 = sub_2365AF8D0();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v30, v28, v13);
    v15 = a3[6];
    v16 = (char *)v4 + v15;
    v17 = (char *)a2 + v15;
    v18 = *(_QWORD *)v17;
    v19 = *((_QWORD *)v17 + 1);
    v20 = *((_QWORD *)v17 + 2);
    v21 = *((_QWORD *)v17 + 3);
    v22 = *((_QWORD *)v17 + 4);
    v23 = *((_QWORD *)v17 + 5);
    v24 = *((_QWORD *)v17 + 6);
    v27 = *((_QWORD *)v17 + 7);
    v29 = *((_QWORD *)v17 + 8);
    LOBYTE(v30) = v17[72];
    sub_23645F8F8(*(_QWORD *)v17, v19, v20, v21, v22, v23, v24, v27, v29, (char)v30);
    *(_QWORD *)v16 = v18;
    *((_QWORD *)v16 + 1) = v19;
    *((_QWORD *)v16 + 2) = v20;
    *((_QWORD *)v16 + 3) = v21;
    *((_QWORD *)v16 + 4) = v22;
    *((_QWORD *)v16 + 5) = v23;
    *((_QWORD *)v16 + 6) = v24;
    *((_QWORD *)v16 + 7) = v27;
    *((_QWORD *)v16 + 8) = v29;
    v16[72] = (char)v30;
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for IdMSAccount(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_2365AF8D0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  sub_23645FAF8(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24), *(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40), *(_QWORD *)(v6 + 48), *(_QWORD *)(v6 + 56), *(_QWORD *)(v6 + 64), *(_BYTE *)(v6 + 72));
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for IdMSAccount(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  v10 = a2[9];
  v11 = a3[5];
  v28 = (char *)a1 + v11;
  v26 = (char *)a2 + v11;
  a1[8] = a2[8];
  a1[9] = v10;
  v12 = sub_2365AF8D0();
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v28, v26, v12);
  v14 = a3[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *((_QWORD *)v16 + 1);
  v18 = *((_QWORD *)v16 + 2);
  v19 = *((_QWORD *)v16 + 3);
  v20 = *((_QWORD *)v16 + 4);
  v21 = *((_QWORD *)v16 + 5);
  v22 = *((_QWORD *)v16 + 6);
  v23 = *((_QWORD *)v16 + 7);
  v25 = *(_QWORD *)v16;
  v27 = *((_QWORD *)v16 + 8);
  LOBYTE(v28) = v16[72];
  sub_23645F8F8(*(_QWORD *)v16, v17, v18, v19, v20, v21, v22, v23, v27, (char)v28);
  *(_QWORD *)v15 = v25;
  *((_QWORD *)v15 + 1) = v17;
  *((_QWORD *)v15 + 2) = v18;
  *((_QWORD *)v15 + 3) = v19;
  *((_QWORD *)v15 + 4) = v20;
  *((_QWORD *)v15 + 5) = v21;
  *((_QWORD *)v15 + 6) = v22;
  *((_QWORD *)v15 + 7) = v23;
  *((_QWORD *)v15 + 8) = v27;
  v15[72] = (char)v28;
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for IdMSAccount(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v31;
  uint64_t v32;
  char v33;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2365AF8D0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = *(_QWORD *)v12;
  v14 = *((_QWORD *)v12 + 1);
  v15 = *((_QWORD *)v12 + 2);
  v16 = *((_QWORD *)v12 + 3);
  v17 = *((_QWORD *)v12 + 4);
  v18 = *((_QWORD *)v12 + 5);
  v19 = *((_QWORD *)v12 + 6);
  v31 = *((_QWORD *)v12 + 7);
  v32 = *((_QWORD *)v12 + 8);
  v33 = v12[72];
  sub_23645F8F8(*(_QWORD *)v12, v14, v15, v16, v17, v18, v19, v31, v32, v33);
  v20 = *(_QWORD *)v11;
  v21 = *((_QWORD *)v11 + 1);
  v22 = *((_QWORD *)v11 + 2);
  v23 = *((_QWORD *)v11 + 3);
  v24 = *((_QWORD *)v11 + 4);
  v25 = *((_QWORD *)v11 + 5);
  v26 = *((_QWORD *)v11 + 6);
  v27 = *((_QWORD *)v11 + 7);
  v28 = *((_QWORD *)v11 + 8);
  v29 = v11[72];
  *(_QWORD *)v11 = v13;
  *((_QWORD *)v11 + 1) = v14;
  *((_QWORD *)v11 + 2) = v15;
  *((_QWORD *)v11 + 3) = v16;
  *((_QWORD *)v11 + 4) = v17;
  *((_QWORD *)v11 + 5) = v18;
  *((_QWORD *)v11 + 6) = v19;
  *((_QWORD *)v11 + 7) = v31;
  *((_QWORD *)v11 + 8) = v32;
  v11[72] = v33;
  sub_23645FAF8(v20, v21, v22, v23, v24, v25, v26, v27, v28, v29);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for IdMSAccount(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;

  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  a1[4] = a2[4];
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_2365AF8D0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[6];
  v13 = a3[7];
  v14 = (_OWORD *)((char *)a1 + v12);
  v15 = (_OWORD *)((char *)a2 + v12);
  v16 = v15[3];
  v14[2] = v15[2];
  v14[3] = v16;
  *(_OWORD *)((char *)v14 + 57) = *(_OWORD *)((char *)v15 + 57);
  v17 = v15[1];
  *v14 = *v15;
  v14[1] = v17;
  *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);
  return a1;
}

_QWORD *assignWithTake for IdMSAccount(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease();
  v10 = a2[9];
  a1[8] = a2[8];
  a1[9] = v10;
  swift_bridgeObjectRelease();
  v11 = a3[5];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = sub_2365AF8D0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[6];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = *((_QWORD *)v17 + 8);
  v19 = v17[72];
  v20 = *(_QWORD *)v16;
  v21 = *((_QWORD *)v16 + 1);
  v22 = *((_QWORD *)v16 + 2);
  v23 = *((_QWORD *)v16 + 3);
  v24 = *((_QWORD *)v16 + 4);
  v25 = *((_QWORD *)v16 + 5);
  v26 = *((_QWORD *)v16 + 6);
  v27 = *((_QWORD *)v16 + 7);
  v28 = *((_QWORD *)v16 + 8);
  v29 = v16[72];
  v30 = *((_OWORD *)v17 + 1);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v30;
  v31 = *((_OWORD *)v17 + 3);
  *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
  *((_OWORD *)v16 + 3) = v31;
  *((_QWORD *)v16 + 8) = v18;
  v16[72] = v19;
  sub_23645FAF8(v20, v21, v22, v23, v24, v25, v26, v27, v28, v29);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IdMSAccount()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2364A7DE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_2365AF8D0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for IdMSAccount()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2364A7E68(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_2365AF8D0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_2364A7EDC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2365AF8D0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for IdMSAccount.Credential(uint64_t a1)
{
  return sub_23645FAF8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
}

uint64_t initializeWithCopy for IdMSAccount.Credential(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  sub_23645F8F8(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, *(_BYTE *)(a2 + 72));
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 72) = v13;
  return a1;
}

uint64_t assignWithCopy for IdMSAccount.Credential(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v23;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  sub_23645F8F8(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, *(_BYTE *)(a2 + 72));
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 72) = v23;
  sub_23645FAF8(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  return a1;
}

__n128 __swift_memcpy73_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for IdMSAccount.Credential(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;

  v3 = *(_QWORD *)(a2 + 64);
  v4 = *(_BYTE *)(a2 + 72);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(_BYTE *)(a1 + 72);
  v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 64) = v3;
  *(_BYTE *)(a1 + 72) = v4;
  sub_23645FAF8(v5, v7, v6, v8, v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for IdMSAccount.Credential(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 73))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IdMSAccount.Credential(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 73) = 0;
    if (a2)
      *(_BYTE *)(result + 72) = -(char)a2;
  }
  return result;
}

uint64_t sub_2364A8258(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 72) <= 2u)
    return *(unsigned __int8 *)(a1 + 72);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_2364A8270(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 72) = a2;
  return result;
}

ValueMetadata *type metadata accessor for IdMSAccount.Credential()
{
  return &type metadata for IdMSAccount.Credential;
}

uint64_t destroy for IdMSAccount.ID()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for IdMSAccount.ID(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for IdMSAccount.ID(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for IdMSAccount.ID(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IdMSAccount.ID(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IdMSAccount.ID(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IdMSAccount.ID()
{
  return &type metadata for IdMSAccount.ID;
}

uint64_t destroy for IdMSAccount.SRPResults(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(a1 + 88);
  if (v3 >> 60 != 15)
    return sub_236468D44(*(_QWORD *)(a1 + 80), v3);
  return result;
}

uint64_t initializeWithCopy for IdMSAccount.SRPResults(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;

  v3 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v4;
  v5 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v5;
  v6 = a2[7];
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = v6;
  v7 = a2[9];
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_QWORD *)(a1 + 72) = v7;
  v8 = a2 + 10;
  v9 = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v8;
  }
  else
  {
    v10 = *v8;
    sub_236468CBC(*v8, v9);
    *(_QWORD *)(a1 + 80) = v10;
    *(_QWORD *)(a1 + 88) = v9;
  }
  return a1;
}

_QWORD *assignWithCopy for IdMSAccount.SRPResults(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2 + 10;
  v5 = a2[11];
  if (a1[11] >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      v7 = *v4;
      sub_236468CBC(*v4, v5);
      v8 = a1[10];
      v9 = a1[11];
      a1[10] = v7;
      a1[11] = v5;
      sub_236468D44(v8, v9);
      return a1;
    }
    sub_2364A87BC((uint64_t)(a1 + 10));
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 5) = *(_OWORD *)v4;
    return a1;
  }
  v6 = *v4;
  sub_236468CBC(*v4, v5);
  a1[10] = v6;
  a1[11] = v5;
  return a1;
}

uint64_t sub_2364A87BC(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BDCDDE8] - 8) + 8))();
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

_QWORD *assignWithTake for IdMSAccount.SRPResults(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  v9 = a2 + 10;
  v10 = a1[11];
  if (v10 >> 60 != 15)
  {
    v11 = a2[11];
    if (v11 >> 60 != 15)
    {
      v12 = a1[10];
      a1[10] = *v9;
      a1[11] = v11;
      sub_236468D44(v12, v10);
      return a1;
    }
    sub_2364A87BC((uint64_t)(a1 + 10));
  }
  *((_OWORD *)a1 + 5) = *(_OWORD *)v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for IdMSAccount.SRPResults(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IdMSAccount.SRPResults(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IdMSAccount.SRPResults()
{
  return &type metadata for IdMSAccount.SRPResults;
}

uint64_t destroy for IdMSAccount.AnisettePackage()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for IdMSAccount.AnisettePackage(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for IdMSAccount.AnisettePackage(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

_QWORD *assignWithTake for IdMSAccount.AnisettePackage(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

uint64_t getEnumTagSinglePayload for IdMSAccount.AnisettePackage(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IdMSAccount.AnisettePackage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IdMSAccount.AnisettePackage()
{
  return &type metadata for IdMSAccount.AnisettePackage;
}

uint64_t destroy for IdMSAccount.DeviceInfo(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 40);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for IdMSAccount.DeviceInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v6;
    v7 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v8;
  }
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t assignWithCopy for IdMSAccount.DeviceInfo(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 32);
  v5 = (_OWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_2364915D0(a1 + 32);
      v7 = *(_OWORD *)(a2 + 48);
      *v4 = *v5;
      *(_OWORD *)(a1 + 48) = v7;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 48);
    *v4 = *v5;
    *(_OWORD *)(a1 + 48) = v8;
  }
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

__n128 __swift_memcpy65_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for IdMSAccount.DeviceInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 40))
    goto LABEL_5;
  v6 = *(_QWORD *)(a2 + 40);
  if (!v6)
  {
    sub_2364915D0(a1 + 32);
LABEL_5:
    v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
LABEL_6:
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for IdMSAccount.DeviceInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 65))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IdMSAccount.DeviceInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IdMSAccount.DeviceInfo()
{
  return &type metadata for IdMSAccount.DeviceInfo;
}

ValueMetadata *type metadata accessor for Constants.GlobalUserDefaultsKeys()
{
  return &type metadata for Constants.GlobalUserDefaultsKeys;
}

uint64_t destroy for IdMSAccount.Credential.CompanionKeyEnvelope()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for IdMSAccount.Credential.CompanionKeyEnvelope(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for IdMSAccount.Credential.CompanionKeyEnvelope(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

_QWORD *assignWithTake for IdMSAccount.Credential.CompanionKeyEnvelope(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for IdMSAccount.Credential.CompanionKeyEnvelope(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IdMSAccount.Credential.CompanionKeyEnvelope(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IdMSAccount.Credential.CompanionKeyEnvelope()
{
  return &type metadata for IdMSAccount.Credential.CompanionKeyEnvelope;
}

uint64_t destroy for UserProfileInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for UserProfileInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for UserProfileInfo(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for UserProfileInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UserProfileInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UserProfileInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UserProfileInfo()
{
  return &type metadata for UserProfileInfo;
}

ValueMetadata *_s14MissingAltDsidVMa()
{
  return &_s14MissingAltDsidVN;
}

ValueMetadata *type metadata accessor for UserProfileInfo.CodingKeys()
{
  return &type metadata for UserProfileInfo.CodingKeys;
}

id sub_2364A93C4(id result, id a2, char a3)
{
  switch(a3)
  {
    case 0:
      result = result;
      break;
    case 1:
    case 2:
    case 3:
      result = (id)swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

void _s17ConversionFailureOwxx(uint64_t a1)
{
  sub_2364A940C(*(void **)a1, *(id *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

void sub_2364A940C(void *a1, id a2, char a3)
{
  switch(a3)
  {
    case 0:

      break;
    case 1:
    case 2:
    case 3:
      swift_bridgeObjectRelease();
      break;
    default:
      return;
  }
}

uint64_t _s17ConversionFailureOwCP_0(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  char v5;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_2364A93C4(*(id *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s17ConversionFailureOwca(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_2364A93C4(*(id *)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_2364A940C(v6, v7, v8);
  return a1;
}

uint64_t _s17ConversionFailureOwta(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  void *v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_2364A940C(v4, v5, v6);
  return a1;
}

uint64_t _s17ConversionFailureOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s17ConversionFailureOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 252;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_2364A95B0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 3u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t sub_2364A95C8(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(_QWORD *)result = a2 - 4;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 4;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *_s17ConversionFailureOMa()
{
  return &_s17ConversionFailureON;
}

ValueMetadata *type metadata accessor for IdMSAccount.NoPrimaryAccountFound()
{
  return &type metadata for IdMSAccount.NoPrimaryAccountFound;
}

ValueMetadata *type metadata accessor for IdMSAccount.Credential.CompanionKeyEnvelope.CodingKeys()
{
  return &type metadata for IdMSAccount.Credential.CompanionKeyEnvelope.CodingKeys;
}

ValueMetadata *type metadata accessor for IdMSAccount.DeviceInfo.CodingKeys()
{
  return &type metadata for IdMSAccount.DeviceInfo.CodingKeys;
}

uint64_t _s12AppleIDSetup15UserProfileInfoV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2364A9670 + 4 * byte_2365B7F86[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2364A96A4 + 4 * byte_2365B7F81[v4]))();
}

uint64_t sub_2364A96A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364A96AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2364A96B4);
  return result;
}

uint64_t sub_2364A96C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2364A96C8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2364A96CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364A96D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IdMSAccount.AnisettePackage.CodingKeys()
{
  return &type metadata for IdMSAccount.AnisettePackage.CodingKeys;
}

ValueMetadata *type metadata accessor for IdMSAccount.SRPResults.CodingKeys()
{
  return &type metadata for IdMSAccount.SRPResults.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for IdMSAccount.ID.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_2364A9750 + 4 * byte_2365B7F90[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_2364A9784 + 4 * byte_2365B7F8B[v4]))();
}

uint64_t sub_2364A9784(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364A978C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2364A9794);
  return result;
}

uint64_t sub_2364A97A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2364A97A8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_2364A97AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364A97B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IdMSAccount.ID.CodingKeys()
{
  return &type metadata for IdMSAccount.ID.CodingKeys;
}

ValueMetadata *type metadata accessor for IdMSAccount.Credential.CodingKeys()
{
  return &type metadata for IdMSAccount.Credential.CodingKeys;
}

ValueMetadata *type metadata accessor for IdMSAccount.Credential.NoneCodingKeys()
{
  return &type metadata for IdMSAccount.Credential.NoneCodingKeys;
}

ValueMetadata *type metadata accessor for IdMSAccount.Credential.CompanionKeysCodingKeys()
{
  return &type metadata for IdMSAccount.Credential.CompanionKeysCodingKeys;
}

uint64_t _s12AppleIDSetup11IdMSAccountV10SRPResultsV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2364A9850 + 4 * byte_2365B7F9A[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2364A9884 + 4 * byte_2365B7F95[v4]))();
}

uint64_t sub_2364A9884(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364A988C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2364A9894);
  return result;
}

uint64_t sub_2364A98A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2364A98A8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2364A98AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364A98B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IdMSAccount.Credential.PasswordlessTokenCodingKeys()
{
  return &type metadata for IdMSAccount.Credential.PasswordlessTokenCodingKeys;
}

uint64_t _s12AppleIDSetup11IdMSAccountV10CredentialO23CompanionKeysCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2364A9910 + 4 * byte_2365B7F9F[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2364A9930 + 4 * byte_2365B7FA4[v4]))();
}

_BYTE *sub_2364A9910(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2364A9930(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2364A9938(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2364A9940(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2364A9948(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2364A9950(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for IdMSAccount.Credential.RawPasswordCodingKeys()
{
  return &type metadata for IdMSAccount.Credential.RawPasswordCodingKeys;
}

uint64_t _s12AppleIDSetup11IdMSAccountV10DeviceInfoV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_2364A99B8 + 4 * byte_2365B7FAE[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_2364A99EC + 4 * byte_2365B7FA9[v4]))();
}

uint64_t sub_2364A99EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364A99F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2364A99FCLL);
  return result;
}

uint64_t sub_2364A9A08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2364A9A10);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_2364A9A14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364A9A1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IdMSAccount.CodingKeys()
{
  return &type metadata for IdMSAccount.CodingKeys;
}

unint64_t sub_2364A9A3C()
{
  unint64_t result;

  result = qword_2563E6DC0;
  if (!qword_2563E6DC0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B8B28, &type metadata for IdMSAccount.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6DC0);
  }
  return result;
}

unint64_t sub_2364A9A84()
{
  unint64_t result;

  result = qword_2563E6DC8;
  if (!qword_2563E6DC8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B8BE0, &type metadata for IdMSAccount.Credential.RawPasswordCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6DC8);
  }
  return result;
}

unint64_t sub_2364A9ACC()
{
  unint64_t result;

  result = qword_2563E6DD0;
  if (!qword_2563E6DD0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B8C98, &type metadata for IdMSAccount.Credential.PasswordlessTokenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6DD0);
  }
  return result;
}

unint64_t sub_2364A9B14()
{
  unint64_t result;

  result = qword_2563E6DD8;
  if (!qword_2563E6DD8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B8D50, &type metadata for IdMSAccount.Credential.CompanionKeysCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6DD8);
  }
  return result;
}

unint64_t sub_2364A9B5C()
{
  unint64_t result;

  result = qword_2563E6DE0;
  if (!qword_2563E6DE0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B8E58, &type metadata for IdMSAccount.Credential.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6DE0);
  }
  return result;
}

unint64_t sub_2364A9BA4()
{
  unint64_t result;

  result = qword_2563E6DE8;
  if (!qword_2563E6DE8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B8F10, &type metadata for IdMSAccount.ID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6DE8);
  }
  return result;
}

unint64_t sub_2364A9BEC()
{
  unint64_t result;

  result = qword_2563E6DF0;
  if (!qword_2563E6DF0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B8FC8, &type metadata for IdMSAccount.SRPResults.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6DF0);
  }
  return result;
}

unint64_t sub_2364A9C34()
{
  unint64_t result;

  result = qword_2563E6DF8;
  if (!qword_2563E6DF8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B9080, &type metadata for IdMSAccount.AnisettePackage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6DF8);
  }
  return result;
}

unint64_t sub_2364A9C7C()
{
  unint64_t result;

  result = qword_2563E6E00;
  if (!qword_2563E6E00)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B9138, &type metadata for IdMSAccount.DeviceInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6E00);
  }
  return result;
}

unint64_t sub_2364A9CC4()
{
  unint64_t result;

  result = qword_2563E6E08;
  if (!qword_2563E6E08)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B91F0, &type metadata for IdMSAccount.Credential.CompanionKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6E08);
  }
  return result;
}

unint64_t sub_2364A9D0C()
{
  unint64_t result;

  result = qword_2563E6E10;
  if (!qword_2563E6E10)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B92A8, &type metadata for UserProfileInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6E10);
  }
  return result;
}

unint64_t sub_2364A9D54()
{
  unint64_t result;

  result = qword_2563E6E18;
  if (!qword_2563E6E18)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B9218, &type metadata for UserProfileInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6E18);
  }
  return result;
}

unint64_t sub_2364A9D9C()
{
  unint64_t result;

  result = qword_2563E6E20;
  if (!qword_2563E6E20)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B9240, &type metadata for UserProfileInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6E20);
  }
  return result;
}

unint64_t sub_2364A9DE4()
{
  unint64_t result;

  result = qword_2563E6E28;
  if (!qword_2563E6E28)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B9160, &type metadata for IdMSAccount.Credential.CompanionKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6E28);
  }
  return result;
}

unint64_t sub_2364A9E2C()
{
  unint64_t result;

  result = qword_2563E6E30;
  if (!qword_2563E6E30)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B9188, &type metadata for IdMSAccount.Credential.CompanionKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6E30);
  }
  return result;
}

unint64_t sub_2364A9E74()
{
  unint64_t result;

  result = qword_2563E6E38;
  if (!qword_2563E6E38)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B90A8, &type metadata for IdMSAccount.DeviceInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6E38);
  }
  return result;
}

unint64_t sub_2364A9EBC()
{
  unint64_t result;

  result = qword_2563E6E40;
  if (!qword_2563E6E40)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B90D0, &type metadata for IdMSAccount.DeviceInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6E40);
  }
  return result;
}

unint64_t sub_2364A9F04()
{
  unint64_t result;

  result = qword_2563E6E48;
  if (!qword_2563E6E48)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B8FF0, &type metadata for IdMSAccount.AnisettePackage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6E48);
  }
  return result;
}

unint64_t sub_2364A9F4C()
{
  unint64_t result;

  result = qword_2563E6E50;
  if (!qword_2563E6E50)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B9018, &type metadata for IdMSAccount.AnisettePackage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6E50);
  }
  return result;
}

unint64_t sub_2364A9F94()
{
  unint64_t result;

  result = qword_2563E6E58;
  if (!qword_2563E6E58)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B8F38, &type metadata for IdMSAccount.SRPResults.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6E58);
  }
  return result;
}

unint64_t sub_2364A9FDC()
{
  unint64_t result;

  result = qword_2563E6E60;
  if (!qword_2563E6E60)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B8F60, &type metadata for IdMSAccount.SRPResults.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6E60);
  }
  return result;
}

unint64_t sub_2364AA024()
{
  unint64_t result;

  result = qword_2563E6E68;
  if (!qword_2563E6E68)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B8E80, &type metadata for IdMSAccount.ID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6E68);
  }
  return result;
}

unint64_t sub_2364AA06C()
{
  unint64_t result;

  result = qword_2563E6E70;
  if (!qword_2563E6E70)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B8EA8, &type metadata for IdMSAccount.ID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6E70);
  }
  return result;
}

unint64_t sub_2364AA0B4()
{
  unint64_t result;

  result = qword_2563E6E78;
  if (!qword_2563E6E78)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B8D78, &type metadata for IdMSAccount.Credential.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6E78);
  }
  return result;
}

unint64_t sub_2364AA0FC()
{
  unint64_t result;

  result = qword_2563E6E80;
  if (!qword_2563E6E80)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B8DA0, &type metadata for IdMSAccount.Credential.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6E80);
  }
  return result;
}

unint64_t sub_2364AA144()
{
  unint64_t result;

  result = qword_2563E6E88;
  if (!qword_2563E6E88)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B8CC0, &type metadata for IdMSAccount.Credential.CompanionKeysCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6E88);
  }
  return result;
}

unint64_t sub_2364AA18C()
{
  unint64_t result;

  result = qword_2563E6E90;
  if (!qword_2563E6E90)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B8CE8, &type metadata for IdMSAccount.Credential.CompanionKeysCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6E90);
  }
  return result;
}

unint64_t sub_2364AA1D4()
{
  unint64_t result;

  result = qword_2563E6E98;
  if (!qword_2563E6E98)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B8C08, &type metadata for IdMSAccount.Credential.PasswordlessTokenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6E98);
  }
  return result;
}

unint64_t sub_2364AA21C()
{
  unint64_t result;

  result = qword_2563E6EA0;
  if (!qword_2563E6EA0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B8C30, &type metadata for IdMSAccount.Credential.PasswordlessTokenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6EA0);
  }
  return result;
}

unint64_t sub_2364AA264()
{
  unint64_t result;

  result = qword_2563E6EA8;
  if (!qword_2563E6EA8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B8B50, &type metadata for IdMSAccount.Credential.RawPasswordCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6EA8);
  }
  return result;
}

unint64_t sub_2364AA2AC()
{
  unint64_t result;

  result = qword_2563E6EB0;
  if (!qword_2563E6EB0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B8B78, &type metadata for IdMSAccount.Credential.RawPasswordCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6EB0);
  }
  return result;
}

unint64_t sub_2364AA2F4()
{
  unint64_t result;

  result = qword_2563E6EB8;
  if (!qword_2563E6EB8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B8DC8, &type metadata for IdMSAccount.Credential.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6EB8);
  }
  return result;
}

unint64_t sub_2364AA33C()
{
  unint64_t result;

  result = qword_2563E6EC0;
  if (!qword_2563E6EC0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B8DF0, &type metadata for IdMSAccount.Credential.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6EC0);
  }
  return result;
}

unint64_t sub_2364AA384()
{
  unint64_t result;

  result = qword_2563E6EC8;
  if (!qword_2563E6EC8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B8A98, &type metadata for IdMSAccount.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6EC8);
  }
  return result;
}

unint64_t sub_2364AA3CC()
{
  unint64_t result;

  result = qword_2563E6ED0;
  if (!qword_2563E6ED0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B8AC0, &type metadata for IdMSAccount.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E6ED0);
  }
  return result;
}

uint64_t sub_2364AA410(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D614E74726F6873 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

unint64_t sub_2364AA56C()
{
  unint64_t result;

  result = qword_2563E6EE0;
  if (!qword_2563E6EE0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for Symptom, &type metadata for Symptom);
    atomic_store(result, (unint64_t *)&qword_2563E6EE0);
  }
  return result;
}

uint64_t sub_2364AA5B0(uint64_t a1)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a1 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_236487E58(v2);
  return a1;
}

uint64_t sub_2364AA624(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6EE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2364AA66C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 88);
  v12 = *(_QWORD *)(a1 + 80);
  v3 = *(_QWORD *)(a1 + 96);
  v4 = *(_QWORD *)(a1 + 104);
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  v8 = *(_QWORD *)(a1 + 136);
  v9 = *(_QWORD *)(a1 + 144);
  v10 = *(_BYTE *)(a1 + 152);
  sub_23645FAF8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
  sub_23645FAF8(v12, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t static AISBiome.shared.getter()
{
  type metadata accessor for AISBiome();
  return swift_initStaticObject();
}

uint64_t type metadata accessor for AISBiome()
{
  return objc_opt_self();
}

uint64_t AISBiome.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t AISBiome.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t AISBiomeProtocol.biomeEvent(from:familyCircleProvider:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return swift_task_switch();
}

uint64_t sub_2364AA790()
{
  uint64_t v0;
  _BYTE *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);

  v1 = (_BYTE *)(*(_QWORD *)(v0 + 48) + OBJC_IVAR____TtC12AppleIDSetup27AISChildSetupAnalyticsEvent_completedSetup);
  swift_beginAccess();
  if (*v1 == 1)
  {
    v2 = *(_QWORD **)(v0 + 56);
    v3 = v2[3];
    v4 = v2[4];
    __swift_project_boxed_opaque_existential_1(v2, v3);
    v12 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v4 + 8) + *(_QWORD *)(v4 + 8));
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 64) = v5;
    *v5 = v0;
    v5[1] = sub_2364AA910;
    return v12(v3, v4);
  }
  else
  {
    if (qword_2542A79D8 != -1)
      swift_once();
    v7 = sub_2365AFC00();
    __swift_project_value_buffer(v7, (uint64_t)qword_2542A79C0);
    v8 = sub_2365AFBE8();
    v9 = sub_2365B038C();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_23644B000, v8, v9, "AISBiomeEventProvider setup aborted not fetching family", v10, 2u);
      MEMORY[0x23B7F5254](v10, -1, -1);
    }

    v11 = sub_2364AAC98(0, 1);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v11);
  }
}

uint64_t sub_2364AA910(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 72) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 80) = a1;
  return swift_task_switch();
}

uint64_t sub_2364AA984()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;

  v1 = *(void **)(v0 + 80);
  v2 = objc_msgSend(v1, sel_me);

  if (v2)
  {
    v3 = objc_msgSend(v2, sel_age);
  }
  else
  {
    if (qword_2542A79D8 != -1)
      swift_once();
    v4 = sub_2365AFC00();
    __swift_project_value_buffer(v4, (uint64_t)qword_2542A79C0);
    v5 = sub_2365AFBE8();
    v6 = sub_2365B0398();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23644B000, v5, v6, "AISBiomeEventProvider childMember == nil. This should not happen", v7, 2u);
      MEMORY[0x23B7F5254](v7, -1, -1);
    }

    v3 = 0;
  }
  v8 = sub_2364AAC98((uint64_t)v3, v2 == 0);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
}

uint64_t sub_2364AAABC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint8_t *v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;

  if (qword_2542A79D8 != -1)
    swift_once();
  v1 = *(void **)(v0 + 72);
  v2 = sub_2365AFC00();
  __swift_project_value_buffer(v2, (uint64_t)qword_2542A79C0);
  v3 = v1;
  v4 = v1;
  v5 = sub_2365AFBE8();
  v6 = sub_2365B0398();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 72);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v9 = 138412290;
    v11 = v8;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 40) = v12;
    sub_2365B04A0();
    *v10 = v12;

    _os_log_impl(&dword_23644B000, v5, v6, "AISBiomeEventProvider error fetching family %@", v9, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9960);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v10, -1, -1);
    MEMORY[0x23B7F5254](v9, -1, -1);

  }
  else
  {

  }
  v13 = sub_2364AAC98(0, 1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v13);
}

uint64_t sub_2364AAC98(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  id v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  id v23;
  int v24;
  unsigned __int8 *v25;
  id v26;
  int v27;
  unsigned __int8 *v28;
  id v29;
  int v30;
  unsigned __int8 *v31;
  id v32;
  int v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  int v50;
  id v51;
  uint64_t v52;

  v3 = v2;
  v50 = a2;
  v47 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6FA0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v46 - v8;
  swift_beginAccess();
  v10 = 0;
  v11 = *(unsigned __int8 *)(v3 + 16);
  if (v11 != 2)
    v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithBool_, v11 & 1);
  v51 = v10;
  v12 = v3 + OBJC_IVAR____TtC12AppleIDSetup27AISChildSetupAnalyticsEvent_startDate;
  swift_beginAccess();
  sub_2364AB468(v12, (uint64_t)v9);
  v13 = sub_2365AF9A8();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = 0;
  if (v15(v9, 1, v13) != 1)
  {
    v16 = sub_2365AF978();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v13);
  }
  v49 = (void *)v16;
  v17 = v3 + OBJC_IVAR____TtC12AppleIDSetup27AISChildSetupAnalyticsEvent_endDate;
  swift_beginAccess();
  sub_2364AB468(v17, (uint64_t)v7);
  v18 = 0;
  if (v15(v7, 1, v13) != 1)
  {
    v18 = (void *)sub_2365AF978();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v7, v13);
  }
  v19 = (unsigned __int8 *)(v3 + OBJC_IVAR____TtC12AppleIDSetup27AISChildSetupAnalyticsEvent_completedSetup);
  swift_beginAccess();
  v48 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithBool_, *v19);
  v20 = (unsigned __int8 *)(v3 + OBJC_IVAR____TtC12AppleIDSetup27AISChildSetupAnalyticsEvent_lastViewedScreen);
  swift_beginAccess();
  v21 = *v20;
  v22 = (unsigned __int8 *)(v3 + OBJC_IVAR____TtC12AppleIDSetup27AISChildSetupAnalyticsEvent_appUsage);
  swift_beginAccess();
  v23 = 0;
  v24 = *v22;
  if (v24 != 2)
    v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithBool_, v24 & 1);
  v25 = (unsigned __int8 *)(v3 + OBJC_IVAR____TtC12AppleIDSetup27AISChildSetupAnalyticsEvent_askToBuy);
  swift_beginAccess();
  v26 = 0;
  v27 = *v25;
  if (v27 != 2)
    v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithBool_, v27 & 1);
  v28 = (unsigned __int8 *)(v3 + OBJC_IVAR____TtC12AppleIDSetup27AISChildSetupAnalyticsEvent_commSafety);
  swift_beginAccess();
  v29 = 0;
  v30 = *v28;
  if (v30 != 2)
    v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), (SEL)&stru_2507E40E0.align + 2, v30 & 1);
  v31 = (unsigned __int8 *)(v3 + OBJC_IVAR____TtC12AppleIDSetup27AISChildSetupAnalyticsEvent_screenDistance);
  swift_beginAccess();
  v32 = 0;
  v33 = *v31;
  if (v33 != 2)
    v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), (SEL)&stru_2507E40E0.align + 2, v33 & 1);
  if ((v50 & 1) != 0)
  {
    v35 = 0;
  }
  else
  {
    v34 = objc_allocWithZone(MEMORY[0x24BDD16E0]);
    v35 = objc_msgSend(v34, sel_initWithInteger_, v47);
  }
  v36 = v3 + OBJC_IVAR____TtC12AppleIDSetup27AISChildSetupAnalyticsEvent_flowType;
  swift_beginAccess();
  v37 = 0;
  if ((*(_BYTE *)(v36 + 8) & 1) == 0)
  {
    v37 = *(_QWORD *)v36;
    if (*(_QWORD *)v36 != 1)
    {
      if (v37)
      {
        v52 = *(_QWORD *)v36;
        result = sub_2365B0920();
        __break(1u);
        return result;
      }
      v37 = 2;
    }
  }
  if ((_DWORD)v21 == 8)
    v38 = 0;
  else
    v38 = v21 + 1;
  v39 = (void *)objc_opt_self();
  v45 = v37;
  v40 = v51;
  v41 = v49;
  v42 = v48;
  v43 = objc_msgSend(v39, sel_biomeEventWithIsNewChildAccount_startDate_endDate_completedSetup_lastViewedScreen_appUsage_askToBuy_commSafety_screenDistance_age_flowType_, v51, v49, v18, v48, v38, v23, v26, v29, v32, v35, v45);

  return (uint64_t)v43;
}

uint64_t sub_2364AB160(void (*a1)(void))
{
  a1();
  return _swift_stdlib_bridgeErrorToNSError();
}

void sub_2364AB180(void *a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  NSObject *oslog;

  v2 = objc_msgSend((id)objc_opt_self(), sel_ais_appleIDChildSetupSource);
  if (v2)
  {
    v3 = v2;
    v4 = swift_dynamicCastObjCProtocolConditional();
    if (v4)
    {
      v5 = v4;
      v6 = a1;
      objc_msgSend(v3, sel_sendEvent_, v5);
      if (qword_2542A79D8 != -1)
        swift_once();
      v7 = sub_2365AFC00();
      __swift_project_value_buffer(v7, (uint64_t)qword_2542A79C0);
      v8 = sub_2365AFBE8();
      v9 = sub_2365B038C();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v10 = 0;
        _os_log_impl(&dword_23644B000, v8, v9, "AISBiomeController wrote biome event for child setup", v10, 2u);
        MEMORY[0x23B7F5254](v10, -1, -1);
      }

    }
    else
    {
      if (qword_2542A79D8 != -1)
        swift_once();
      v14 = sub_2365AFC00();
      __swift_project_value_buffer(v14, (uint64_t)qword_2542A79C0);
      v15 = sub_2365AFBE8();
      v16 = sub_2365B038C();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v17 = 0;
        _os_log_impl(&dword_23644B000, v15, v16, "AISBiomeController biomeEvent is not the correct type", v17, 2u);
        MEMORY[0x23B7F5254](v17, -1, -1);
      }

    }
  }
  else
  {
    if (qword_2542A79D8 != -1)
      swift_once();
    v11 = sub_2365AFC00();
    __swift_project_value_buffer(v11, (uint64_t)qword_2542A79C0);
    oslog = sub_2365AFBE8();
    v12 = sub_2365B038C();
    if (os_log_type_enabled(oslog, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_23644B000, oslog, v12, "AISBiomeController failed to get biome source", v13, 2u);
      MEMORY[0x23B7F5254](v13, -1, -1);
    }

  }
}

uint64_t method lookup function for AISBiome()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AISBiome.write(biomeEvent:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t dispatch thunk of AISBiomeProtocol.write(biomeEvent:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_2364AB468(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6FA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t SignInCommand.Request.account.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23648DFF8(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for IdMSAccount);
}

uint64_t SignInCommand.Request.account.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_23648DAF4(a1, v1);
}

uint64_t (*SignInCommand.Request.account.modify())()
{
  return nullsub_1;
}

uint64_t SignInCommand.Request.srpResults.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = v1 + *(int *)(type metadata accessor for SignInCommand.Request(0) + 20);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(_QWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 72);
  v7 = *(_QWORD *)(v3 + 80);
  v8 = *(_QWORD *)(v3 + 88);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v3 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v3 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v3 + 56);
  *(_QWORD *)(a1 + 72) = v6;
  *(_QWORD *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 88) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_23646A418(v7, v8);
}

uint64_t type metadata accessor for SignInCommand.Request(uint64_t a1)
{
  return sub_2364905D8(a1, qword_2563E7228);
}

__n128 SignInCommand.Request.srpResults.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 result;
  __n128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v11 = a1[1];
  v12 = *a1;
  v9 = a1[3];
  v10 = a1[2];
  v8 = (__n128)a1[4];
  v2 = *((_QWORD *)a1 + 10);
  v3 = *((_QWORD *)a1 + 11);
  v4 = v1 + *(int *)(type metadata accessor for SignInCommand.Request(0) + 20);
  v5 = *(_QWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 88);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23646A42C(v5, v6);
  *(_OWORD *)v4 = v12;
  *(_OWORD *)(v4 + 16) = v11;
  *(_OWORD *)(v4 + 32) = v10;
  *(_OWORD *)(v4 + 48) = v9;
  result = v8;
  *(__n128 *)(v4 + 64) = v8;
  *(_QWORD *)(v4 + 80) = v2;
  *(_QWORD *)(v4 + 88) = v3;
  return result;
}

uint64_t (*SignInCommand.Request.srpResults.modify())()
{
  type metadata accessor for SignInCommand.Request(0);
  return nullsub_1;
}

uint64_t SignInCommand.Request.isFinal.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SignInCommand.Request(0) + 24));
}

uint64_t SignInCommand.Request.isFinal.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for SignInCommand.Request(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*SignInCommand.Request.isFinal.modify())()
{
  type metadata accessor for SignInCommand.Request(0);
  return nullsub_1;
}

uint64_t SignInCommand.Request.isTerminal.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SignInCommand.Request(0) + 28));
}

uint64_t SignInCommand.Request.isTerminal.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for SignInCommand.Request(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*SignInCommand.Request.isTerminal.modify())()
{
  type metadata accessor for SignInCommand.Request(0);
  return nullsub_1;
}

__n128 SignInCommand.Request.init(account:srpResults:isFinal:isTerminal:)@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v16 = a2[1];
  v17 = *a2;
  v14 = a2[3];
  v15 = a2[2];
  v13 = (__n128)a2[4];
  v8 = *((_QWORD *)a2 + 10);
  v9 = *((_QWORD *)a2 + 11);
  sub_23646591C(a1, a5, (uint64_t (*)(_QWORD))type metadata accessor for IdMSAccount);
  v10 = (int *)type metadata accessor for SignInCommand.Request(0);
  v11 = a5 + v10[5];
  *(_OWORD *)v11 = v17;
  *(_OWORD *)(v11 + 16) = v16;
  *(_OWORD *)(v11 + 32) = v15;
  *(_OWORD *)(v11 + 48) = v14;
  result = v13;
  *(__n128 *)(v11 + 64) = v13;
  *(_QWORD *)(v11 + 80) = v8;
  *(_QWORD *)(v11 + 88) = v9;
  *(_BYTE *)(a5 + v10[6]) = a3;
  *(_BYTE *)(a5 + v10[7]) = a4;
  return result;
}

uint64_t SignInCommand.Request.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for V1Command(0);
  if (swift_getEnumCaseMultiPayload())
  {
    v4 = type metadata accessor for V1Command;
LABEL_6:
    sub_236465A18(a1, v4);
    v5 = type metadata accessor for SignInCommand.Request(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 1;
    return v6(v7, v8, 1, v5);
  }
  type metadata accessor for V1Command.Request(0);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v4 = type metadata accessor for V1Command.Request;
    goto LABEL_6;
  }
  sub_23646591C(a1, a2, type metadata accessor for SignInCommand.Request);
  v5 = type metadata accessor for SignInCommand.Request(0);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v7 = a2;
  v8 = 0;
  return v6(v7, v8, 1, v5);
}

uint64_t SignInCommand.Request.into()@<X0>(uint64_t a1@<X8>)
{
  return sub_2364AD2FC(type metadata accessor for SignInCommand.Request, (void (*)(_QWORD))type metadata accessor for V1Command.Request, a1);
}

double static SignInCommand.Request.terminal.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  double result;

  v2 = type metadata accessor for IdMSAccount();
  sub_2365AF8C4();
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v3 = a1 + *(int *)(v2 + 24);
  *(_QWORD *)(v3 + 64) = 0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_BYTE *)(v3 + 72) = 3;
  *(_QWORD *)(a1 + *(int *)(v2 + 28)) = MEMORY[0x24BEE4B08];
  v4 = (int *)type metadata accessor for SignInCommand.Request(0);
  v5 = a1 + v4[5];
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0xE000000000000000;
  result = 0.0;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0xF000000000000000;
  *(_BYTE *)(a1 + v4[6]) = 0;
  *(_BYTE *)(a1 + v4[7]) = 1;
  return result;
}

void SignInCommand.Request.hash(into:)()
{
  uint64_t v1;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for IdMSAccount();
  sub_2365AF8D0();
  sub_23644F0B8(&qword_2563E4D80, (uint64_t (*)(uint64_t))MEMORY[0x24BDCCC10], MEMORY[0x24BDCCC28]);
  sub_2365AFFD8();
  __asm { BR              X10 }
}

uint64_t sub_2364ABB0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  sub_2365B09F8();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A28();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v0 + *(int *)(v1 + 28));
  swift_bridgeObjectRetain();
  sub_2364830F0(v2, v3);
  swift_bridgeObjectRelease();
  v4 = v0 + *(int *)(type metadata accessor for SignInCommand.Request(0) + 20);
  v5 = *(_QWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23646A418(v5, v6);
  sub_2365B008C();
  sub_2365B0A04();
  if (v6 >> 60 != 15)
  {
    sub_236468CBC(v5, v6);
    sub_2365AF954();
    sub_23646A42C(v5, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23646A42C(v5, v6);
  sub_2365B0A04();
  return sub_2365B0A04();
}

uint64_t sub_2364ABE54()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2364ABE84 + 4 * byte_2365B97CC[*v0]))(0x746E756F636361, 0xE700000000000000);
}

uint64_t sub_2364ABE84()
{
  return 0x6C75736552707273;
}

uint64_t sub_2364ABEA4()
{
  return 0x6C616E69467369;
}

uint64_t sub_2364ABEB8()
{
  return 0x6E696D7265547369;
}

uint64_t sub_2364ABED4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2364B1138(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2364ABEF8()
{
  sub_2364AF0AC();
  return sub_2365B0AD0();
}

uint64_t sub_2364ABF20()
{
  sub_2364AF0AC();
  return sub_2365B0ADC();
}

uint64_t SignInCommand.Request.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7010);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2364AF0AC();
  sub_2365B0AAC();
  LOBYTE(v15) = 0;
  type metadata accessor for IdMSAccount();
  sub_23644F0B8(&qword_2563E45F8, (uint64_t (*)(uint64_t))type metadata accessor for IdMSAccount, (uint64_t)&protocol conformance descriptor for IdMSAccount);
  sub_2365B0824();
  if (!v2)
  {
    v9 = (uint64_t *)(v3 + *(int *)(type metadata accessor for SignInCommand.Request(0) + 20));
    v10 = v9[1];
    v15 = *v9;
    v16 = v10;
    v11 = *((_OWORD *)v9 + 2);
    v17 = *((_OWORD *)v9 + 1);
    v18 = v11;
    v12 = *((_OWORD *)v9 + 4);
    v19 = *((_OWORD *)v9 + 3);
    v20 = v12;
    v21 = *((_OWORD *)v9 + 5);
    v14[15] = 1;
    sub_2364907A4();
    sub_2365B0824();
    LOBYTE(v15) = 2;
    sub_2365B080C();
    LOBYTE(v15) = 3;
    sub_2365B080C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

void SignInCommand.Request.hashValue.getter()
{
  uint64_t v1;

  sub_2365B09E0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for IdMSAccount();
  sub_2365AF8D0();
  sub_23644F0B8(&qword_2563E4D80, (uint64_t (*)(uint64_t))MEMORY[0x24BDCCC10], MEMORY[0x24BDCCC28]);
  sub_2365AFFD8();
  __asm { BR              X10 }
}

uint64_t sub_2364AC254()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;

  sub_2365B09F8();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A28();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v0 + *(int *)(v1 + 28));
  swift_bridgeObjectRetain();
  sub_2364830F0((uint64_t)&v7, v2);
  swift_bridgeObjectRelease();
  v3 = v0 + *(int *)(type metadata accessor for SignInCommand.Request(0) + 20);
  v4 = *(_QWORD *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 88);
  sub_2365B008C();
  sub_2365B0A04();
  if (v5 >> 60 != 15)
  {
    sub_236468CBC(v4, v5);
    sub_2365AF954();
    sub_23646A42C(v4, v5);
  }
  sub_2365B0A04();
  sub_2365B0A04();
  return sub_2365B0A34();
}

uint64_t SignInCommand.Request.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  char v21;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;

  v24 = a2;
  v3 = type metadata accessor for IdMSAccount();
  MEMORY[0x24BDAC7A8](v3);
  v25 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7020);
  v5 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for SignInCommand.Request(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v27 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v11);
  sub_2364AF0AC();
  v12 = v28;
  sub_2365B0A7C();
  if (v12)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  v13 = v5;
  v14 = (uint64_t)v10;
  LOBYTE(v29) = 0;
  sub_23644F0B8(&qword_2563E4640, (uint64_t (*)(uint64_t))type metadata accessor for IdMSAccount, (uint64_t)&protocol conformance descriptor for IdMSAccount);
  v16 = (uint64_t)v25;
  v15 = v26;
  sub_2365B0770();
  sub_23646591C(v16, v14, (uint64_t (*)(_QWORD))type metadata accessor for IdMSAccount);
  v36 = 1;
  sub_2364908A8();
  sub_2365B0770();
  v17 = v30;
  v18 = v14 + v8[5];
  *(_QWORD *)v18 = v29;
  *(_QWORD *)(v18 + 8) = v17;
  v19 = v32;
  *(_OWORD *)(v18 + 16) = v31;
  *(_OWORD *)(v18 + 32) = v19;
  v20 = v34;
  *(_OWORD *)(v18 + 48) = v33;
  *(_OWORD *)(v18 + 64) = v20;
  *(_OWORD *)(v18 + 80) = v35;
  LOBYTE(v29) = 2;
  *(_BYTE *)(v14 + v8[6]) = sub_2365B0758() & 1;
  LOBYTE(v29) = 3;
  v21 = sub_2365B0758();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v7, v15);
  *(_BYTE *)(v14 + v8[7]) = v21 & 1;
  sub_23648DFF8(v14, v24, type metadata accessor for SignInCommand.Request);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  return sub_236465A18(v14, type metadata accessor for SignInCommand.Request);
}

uint64_t sub_2364AC884@<X0>(uint64_t a1@<X8>)
{
  return sub_2364ADF18(type metadata accessor for SignInCommand.Request, (void (*)(_QWORD))type metadata accessor for V1Command.Request, a1);
}

uint64_t sub_2364AC89C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t (*v6)(uint64_t);
  uint64_t v7;

  type metadata accessor for V1Command(0);
  if (swift_getEnumCaseMultiPayload())
  {
    v6 = type metadata accessor for V1Command;
LABEL_6:
    sub_236465A18(a1, v6);
    v7 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, v7, 1, a2);
  }
  type metadata accessor for V1Command.Request(0);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v6 = type metadata accessor for V1Command.Request;
    goto LABEL_6;
  }
  sub_23646591C(a1, a3, type metadata accessor for SignInCommand.Request);
  v7 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, v7, 1, a2);
}

uint64_t sub_2364AC94C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SignInCommand.Request.init(from:)(a1, a2);
}

uint64_t sub_2364AC960(_QWORD *a1)
{
  return SignInCommand.Request.encode(to:)(a1);
}

void sub_2364AC97C()
{
  uint64_t v1;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for IdMSAccount();
  sub_2365AF8D0();
  sub_23644F0B8(&qword_2563E4D80, (uint64_t (*)(uint64_t))MEMORY[0x24BDCCC10], MEMORY[0x24BDCCC28]);
  sub_2365AFFD8();
  __asm { BR              X10 }
}

uint64_t sub_2364ACAA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;

  sub_2365B09F8();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A28();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v1 + *(int *)(v2 + 28));
  swift_bridgeObjectRetain();
  sub_2364830F0(v0, v3);
  swift_bridgeObjectRelease();
  v4 = v1 + *(int *)(v8 + 20);
  v5 = *(_QWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 88);
  sub_2365B008C();
  sub_2365B0A04();
  if (v6 >> 60 != 15)
  {
    sub_236468CBC(v5, v6);
    sub_2365AF954();
    sub_23646A42C(v5, v6);
  }
  sub_2365B0A04();
  return sub_2365B0A04();
}

void sub_2364ACD58()
{
  uint64_t v1;

  sub_2365B09E0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for IdMSAccount();
  sub_2365AF8D0();
  sub_23644F0B8(&qword_2563E4D80, (uint64_t (*)(uint64_t))MEMORY[0x24BDCCC10], MEMORY[0x24BDCCC28]);
  sub_2365AFFD8();
  __asm { BR              X10 }
}

uint64_t sub_2364ACE84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;

  sub_2365B09F8();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A28();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v0 + *(int *)(v1 + 28));
  swift_bridgeObjectRetain();
  sub_2364830F0((uint64_t)&v8, v2);
  swift_bridgeObjectRelease();
  v3 = v0 + *(int *)(v7 + 20);
  v4 = *(_QWORD *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 88);
  sub_2365B008C();
  sub_2365B0A04();
  if (v5 >> 60 != 15)
  {
    sub_236468CBC(v4, v5);
    sub_2365AF954();
    sub_23646A42C(v4, v5);
  }
  sub_2365B0A04();
  sub_2365B0A04();
  return sub_2365B0A34();
}

uint64_t (*SignInCommand.Response.account.modify())()
{
  return nullsub_1;
}

uint64_t SignInCommand.Response.resultsByService.getter()
{
  type metadata accessor for SignInCommand.Response(0);
  return swift_bridgeObjectRetain();
}

uint64_t SignInCommand.Response.resultsByService.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for SignInCommand.Response(0) + 20);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*SignInCommand.Response.resultsByService.modify())()
{
  type metadata accessor for SignInCommand.Response(0);
  return nullsub_1;
}

uint64_t SignInCommand.Response.init(account:resultsByService:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  sub_23646591C(a1, a3, (uint64_t (*)(_QWORD))type metadata accessor for IdMSAccount);
  result = type metadata accessor for SignInCommand.Response(0);
  *(_QWORD *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t SignInCommand.Response.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);

  type metadata accessor for V1Command(0);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v8 = type metadata accessor for V1Command;
LABEL_6:
    sub_236465A18(a1, v8);
    v4 = type metadata accessor for SignInCommand.Response(0);
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
    v6 = a2;
    v7 = 1;
    return v5(v6, v7, 1, v4);
  }
  type metadata accessor for V1Command.Response(0);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v8 = type metadata accessor for V1Command.Response;
    goto LABEL_6;
  }
  sub_23646591C(a1, a2, type metadata accessor for SignInCommand.Response);
  v4 = type metadata accessor for SignInCommand.Response(0);
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
  v6 = a2;
  v7 = 0;
  return v5(v6, v7, 1, v4);
}

uint64_t SignInCommand.Response.into()@<X0>(uint64_t a1@<X8>)
{
  return sub_2364AD2FC(type metadata accessor for SignInCommand.Response, (void (*)(_QWORD))type metadata accessor for V1Command.Response, a1);
}

uint64_t sub_2364AD2FC@<X0>(uint64_t (*a1)(_QWORD)@<X0>, void (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  sub_23646591C(v3, a3, a1);
  a2(0);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for V1Command(0);
  return swift_storeEnumTagMultiPayload();
}

void SignInCommand.Response.hash(into:)()
{
  uint64_t v1;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for IdMSAccount();
  sub_2365AF8D0();
  sub_23644F0B8(&qword_2563E4D80, (uint64_t (*)(uint64_t))MEMORY[0x24BDCCC10], MEMORY[0x24BDCCC28]);
  sub_2365AFFD8();
  __asm { BR              X10 }
}

uint64_t sub_2364AD48C()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_2365B09F8();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A28();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v1 + *(int *)(v2 + 28));
  swift_bridgeObjectRetain();
  sub_2364830F0((uint64_t)v0, v3);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for SignInCommand.Response(0) + 20));
  swift_bridgeObjectRetain();
  sub_2364AE740(v0, v4);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2364AD6E0()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000010;
  else
    return 0x746E756F636361;
}

uint64_t sub_2364AD720@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2364B1300(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2364AD744()
{
  sub_2364AF218();
  return sub_2365B0AD0();
}

uint64_t sub_2364AD76C()
{
  sub_2364AF218();
  return sub_2365B0ADC();
}

uint64_t SignInCommand.Response.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  uint64_t v11;
  char v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7028);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2364AF218();
  sub_2365B0AAC();
  v12 = 0;
  type metadata accessor for IdMSAccount();
  sub_23644F0B8(&qword_2563E45F8, (uint64_t (*)(uint64_t))type metadata accessor for IdMSAccount, (uint64_t)&protocol conformance descriptor for IdMSAccount);
  sub_2365B0824();
  if (!v2)
  {
    v11 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for SignInCommand.Response(0) + 20));
    v10[15] = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7038);
    sub_2364AF25C();
    sub_2365B0824();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

void SignInCommand.Response.hashValue.getter()
{
  uint64_t v1;

  sub_2365B09E0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for IdMSAccount();
  sub_2365AF8D0();
  sub_23644F0B8(&qword_2563E4D80, (uint64_t (*)(uint64_t))MEMORY[0x24BDCCC10], MEMORY[0x24BDCCC28]);
  sub_2365AFFD8();
  __asm { BR              X10 }
}

uint64_t sub_2364ADA34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5[10];

  sub_2365B09F8();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A28();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v0 + *(int *)(v1 + 28));
  swift_bridgeObjectRetain();
  sub_2364830F0((uint64_t)v5, v2);
  swift_bridgeObjectRelease();
  v3 = type metadata accessor for SignInCommand.Response(0);
  sub_2364AE740(v5, *(_QWORD *)(v0 + *(int *)(v3 + 20)));
  return sub_2365B0A34();
}

uint64_t SignInCommand.Response.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;

  v17 = a2;
  v18 = type metadata accessor for IdMSAccount();
  MEMORY[0x24BDAC7A8](v18);
  v19 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7058);
  v5 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SignInCommand.Response(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2364AF218();
  sub_2365B0A7C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v16 = v8;
  v11 = (uint64_t)v10;
  v23 = 0;
  sub_23644F0B8(&qword_2563E4640, (uint64_t (*)(uint64_t))type metadata accessor for IdMSAccount, (uint64_t)&protocol conformance descriptor for IdMSAccount);
  v12 = (uint64_t)v19;
  v13 = v20;
  sub_2365B0770();
  sub_23646591C(v12, v11, (uint64_t (*)(_QWORD))type metadata accessor for IdMSAccount);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7038);
  v22 = 1;
  sub_2364AF300();
  sub_2365B0770();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v13);
  v14 = v17;
  *(_QWORD *)(v11 + *(int *)(v16 + 20)) = v21;
  sub_23648DFF8(v11, v14, type metadata accessor for SignInCommand.Response);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_236465A18(v11, type metadata accessor for SignInCommand.Response);
}

uint64_t sub_2364ADF00@<X0>(uint64_t a1@<X8>)
{
  return sub_2364ADF18(type metadata accessor for SignInCommand.Response, (void (*)(_QWORD))type metadata accessor for V1Command.Response, a1);
}

uint64_t sub_2364ADF18@<X0>(uint64_t (*a1)(_QWORD)@<X2>, void (*a2)(_QWORD)@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;

  sub_23646591C(v3, a3, a1);
  a2(0);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for V1Command(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_2364ADF7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t);

  type metadata accessor for V1Command(0);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v7 = type metadata accessor for V1Command;
LABEL_6:
    sub_236465A18(a1, v7);
    v6 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, v6, 1, a2);
  }
  type metadata accessor for V1Command.Response(0);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v7 = type metadata accessor for V1Command.Response;
    goto LABEL_6;
  }
  sub_23646591C(a1, a3, type metadata accessor for SignInCommand.Response);
  v6 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, v6, 1, a2);
}

uint64_t sub_2364AE030@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SignInCommand.Response.init(from:)(a1, a2);
}

uint64_t sub_2364AE044(_QWORD *a1)
{
  return SignInCommand.Response.encode(to:)(a1);
}

void sub_2364AE060()
{
  uint64_t v1;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for IdMSAccount();
  sub_2365AF8D0();
  sub_23644F0B8(&qword_2563E4D80, (uint64_t (*)(uint64_t))MEMORY[0x24BDCCC10], MEMORY[0x24BDCCC28]);
  sub_2365AFFD8();
  __asm { BR              X10 }
}

uint64_t sub_2364AE188()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  sub_2365B09F8();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A28();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v1 + *(int *)(v2 + 28));
  swift_bridgeObjectRetain();
  sub_2364830F0((uint64_t)v0, v3);
  swift_bridgeObjectRelease();
  return sub_2364AE740(v0, *(_QWORD *)(v1 + *(int *)(v5 + 20)));
}

void sub_2364AE3C4()
{
  uint64_t v1;

  sub_2365B09E0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for IdMSAccount();
  sub_2365AF8D0();
  sub_23644F0B8(&qword_2563E4D80, (uint64_t (*)(uint64_t))MEMORY[0x24BDCCC10], MEMORY[0x24BDCCC28]);
  sub_2365AFFD8();
  __asm { BR              X10 }
}

uint64_t sub_2364AE4F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5[10];

  sub_2365B09F8();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B0A28();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v0 + *(int *)(v1 + 28));
  swift_bridgeObjectRetain();
  sub_2364830F0((uint64_t)v5, v2);
  swift_bridgeObjectRelease();
  sub_2364AE740(v5, *(_QWORD *)(v0 + *(int *)(v4 + 20)));
  return sub_2365B0A34();
}

uint64_t sub_2364AE740(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  int64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  char *v42;
  int64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7050);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v42 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7328);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (void **)((char *)&v38 - v11);
  v13 = *(_QWORD *)(a2 + 64);
  v39 = a2 + 64;
  v14 = 1 << *(_BYTE *)(a2 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v40 = (unint64_t)(v14 + 63) >> 6;
  v41 = a2;
  v38 = v40 - 1;
  result = swift_bridgeObjectRetain();
  v18 = 0;
  v43 = 0;
  if (!v16)
    goto LABEL_6;
LABEL_4:
  v19 = v18;
  v20 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  v21 = v20 | (v43 << 6);
LABEL_5:
  v22 = *(void **)(*(_QWORD *)(v41 + 48) + 8 * v21);
  v23 = *(_QWORD *)(v41 + 56) + *(_QWORD *)(v5 + 72) * v21;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7330);
  (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(&v10[*(int *)(v24 + 48)], v23, v4);
  *(_QWORD *)v10 = v22;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v10, 0, 1, v24);
  v25 = v22;
  v18 = v19;
  while (1)
  {
    sub_2364B13EC((uint64_t)v10, (uint64_t)v12);
    v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7330);
    if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v12, 1, v31) == 1)
    {
      swift_release();
      return sub_2365B09F8();
    }
    v32 = (char *)v12 + *(int *)(v31 + 48);
    v33 = *v12;
    v34 = v42;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v42, v32, v4);
    v35 = *((_QWORD *)a1 + 8);
    v36 = a1[1];
    v44 = *a1;
    v45 = v36;
    v37 = a1[3];
    v46 = a1[2];
    v47 = v37;
    v48 = v35;
    sub_2365B005C();
    sub_2365B008C();

    swift_bridgeObjectRelease();
    sub_2364B1434(&qword_2563E7338, (uint64_t (*)(void))sub_23649071C, MEMORY[0x24BEE1338], MEMORY[0x24BDFC460]);
    sub_2365AFFD8();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v34, v4);
    result = sub_2365B0A34();
    v18 ^= result;
    if (v16)
      goto LABEL_4;
LABEL_6:
    v26 = v43 + 1;
    if (__OFADD__(v43, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 < v40)
    {
      v27 = *(_QWORD *)(v39 + 8 * v26);
      if (v27)
        goto LABEL_9;
      v28 = v43 + 2;
      ++v43;
      if (v26 + 1 < v40)
      {
        v27 = *(_QWORD *)(v39 + 8 * v28);
        if (v27)
        {
          ++v26;
LABEL_9:
          v19 = v18;
          v16 = (v27 - 1) & v27;
          v21 = __clz(__rbit64(v27)) + (v26 << 6);
          v43 = v26;
          goto LABEL_5;
        }
        v29 = v26 + 2;
        v43 = v26 + 1;
        if (v26 + 2 < v40)
          break;
      }
    }
LABEL_21:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7330);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v10, 1, 1, v30);
    v16 = 0;
  }
  v27 = *(_QWORD *)(v39 + 8 * v29);
  if (v27)
  {
    v26 += 2;
    goto LABEL_9;
  }
  while (1)
  {
    v26 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v26 >= v40)
    {
      v43 = v38;
      goto LABEL_21;
    }
    v27 = *(_QWORD *)(v39 + 8 * v26);
    ++v29;
    if (v27)
      goto LABEL_9;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_2364AEB08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  id v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  int64_t v19;

  v17 = a2 + 64;
  v2 = 1 << *(_BYTE *)(a2 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a2 + 64);
  v16 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v6 = 0;
  v7 = 0;
  while (1)
  {
    if (v4)
    {
      v8 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      v19 = v7;
      v9 = v8 | (v7 << 6);
      goto LABEL_5;
    }
    v12 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v12 >= v16)
      goto LABEL_19;
    v13 = *(_QWORD *)(v17 + 8 * v12);
    v14 = v7 + 1;
    if (!v13)
    {
      v14 = v7 + 2;
      if (v7 + 2 >= v16)
        goto LABEL_19;
      v13 = *(_QWORD *)(v17 + 8 * v14);
      if (!v13)
        break;
    }
LABEL_18:
    v4 = (v13 - 1) & v13;
    v19 = v14;
    v9 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_5:
    v10 = *(void **)(*(_QWORD *)(a2 + 48) + 8 * v9);
    sub_2365B005C();
    swift_bridgeObjectRetain();
    v11 = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_2365B008C();

    swift_bridgeObjectRelease();
    sub_2365B008C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = sub_2365B0A34();
    v7 = v19;
    v6 ^= result;
  }
  v15 = v7 + 3;
  if (v7 + 3 >= v16)
  {
LABEL_19:
    swift_release();
    return sub_2365B09F8();
  }
  v13 = *(_QWORD *)(v17 + 8 * v15);
  if (v13)
  {
    v14 = v7 + 3;
    goto LABEL_18;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v16)
      goto LABEL_19;
    v13 = *(_QWORD *)(v17 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_18;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_2364AED44(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;

  v17 = a2 + 64;
  v3 = 1 << *(_BYTE *)(a2 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a2 + 64);
  v16 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v13 >= v16)
      goto LABEL_19;
    v14 = *(_QWORD *)(v17 + 8 * v13);
    ++v8;
    if (!v14)
    {
      v8 = v13 + 1;
      if (v13 + 1 >= v16)
        goto LABEL_19;
      v14 = *(_QWORD *)(v17 + 8 * v8);
      if (!v14)
        break;
    }
LABEL_18:
    v5 = (v14 - 1) & v14;
    v10 = __clz(__rbit64(v14)) + (v8 << 6);
LABEL_5:
    v11 = *(void **)(*(_QWORD *)(a2 + 48) + 8 * v10);
    sub_2365B005C();
    v12 = v11;
    swift_bridgeObjectRetain();
    sub_2365B008C();

    swift_bridgeObjectRelease();
    sub_2365B008C();
    swift_bridgeObjectRelease();
    result = sub_2365B0A34();
    v7 ^= result;
  }
  v15 = v13 + 2;
  if (v15 >= v16)
  {
LABEL_19:
    swift_release();
    return sub_2365B09F8();
  }
  v14 = *(_QWORD *)(v17 + 8 * v15);
  if (v14)
  {
    v8 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v8 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v8 >= v16)
      goto LABEL_19;
    v14 = *(_QWORD *)(v17 + 8 * v8);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t _s12AppleIDSetup13SignInCommandV7RequestV2eeoiySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  char v5;
  char v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  char v18;
  int *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = sub_2365B08CC(), v6 = 0, (v5 & 1) != 0))
  {
    v7 = type metadata accessor for IdMSAccount();
    if ((sub_2365AF8B8() & 1) == 0)
      goto LABEL_11;
    v8 = (char *)a1 + *(int *)(v7 + 24);
    v9 = *((_QWORD *)v8 + 8);
    v10 = v8[72];
    v11 = *((_OWORD *)v8 + 1);
    v35 = *(_OWORD *)v8;
    v36 = v11;
    v12 = *((_OWORD *)v8 + 3);
    v37 = *((_OWORD *)v8 + 2);
    v38 = v12;
    *(_QWORD *)&v39 = v9;
    BYTE8(v39) = v10;
    v13 = (char *)a2 + *(int *)(v7 + 24);
    v14 = *((_QWORD *)v13 + 8);
    v15 = v13[72];
    v16 = *((_OWORD *)v13 + 1);
    v29 = *(_OWORD *)v13;
    v30 = v16;
    v17 = *((_OWORD *)v13 + 3);
    v31 = *((_OWORD *)v13 + 2);
    v32 = v17;
    *(_QWORD *)&v33 = v14;
    BYTE8(v33) = v15;
    _s12AppleIDSetup11IdMSAccountV10CredentialO2eeoiySbAE_AEtFZ_0((uint64_t)&v35);
    if ((v18 & 1) == 0)
      goto LABEL_11;
    if ((sub_2365A28C4(*(_QWORD *)((char *)a1 + *(int *)(v7 + 28)), *(_QWORD *)((char *)a2 + *(int *)(v7 + 28))) & 1) == 0)
      goto LABEL_11;
    v19 = (int *)type metadata accessor for SignInCommand.Request(0);
    v20 = (char *)a1 + v19[5];
    v21 = *((_QWORD *)v20 + 1);
    *(_QWORD *)&v35 = *(_QWORD *)v20;
    *((_QWORD *)&v35 + 1) = v21;
    v22 = *((_OWORD *)v20 + 2);
    v36 = *((_OWORD *)v20 + 1);
    v37 = v22;
    v23 = *((_OWORD *)v20 + 4);
    v38 = *((_OWORD *)v20 + 3);
    v39 = v23;
    v40 = *((_OWORD *)v20 + 5);
    v24 = (char *)a2 + v19[5];
    v25 = *((_QWORD *)v24 + 1);
    *(_QWORD *)&v29 = *(_QWORD *)v24;
    *((_QWORD *)&v29 + 1) = v25;
    v26 = *((_OWORD *)v24 + 2);
    v30 = *((_OWORD *)v24 + 1);
    v31 = v26;
    v27 = *((_OWORD *)v24 + 4);
    v32 = *((_OWORD *)v24 + 3);
    v33 = v27;
    v34 = *((_OWORD *)v24 + 5);
    if (!_s12AppleIDSetup11IdMSAccountV10SRPResultsV2eeoiySbAE_AEtFZ_0(&v35, &v29))
      goto LABEL_11;
    if (*((unsigned __int8 *)a1 + v19[6]) == *((unsigned __int8 *)a2 + v19[6]))
      v6 = *((_BYTE *)a1 + v19[7]) ^ *((_BYTE *)a2 + v19[7]) ^ 1;
    else
LABEL_11:
      v6 = 0;
  }
  return v6 & 1;
}

unint64_t sub_2364AF0AC()
{
  unint64_t result;

  result = qword_2563E7018;
  if (!qword_2563E7018)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B9CAC, &type metadata for SignInCommand.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E7018);
  }
  return result;
}

uint64_t type metadata accessor for SignInCommand.Response(uint64_t a1)
{
  return sub_2364905D8(a1, qword_2563E72C0);
}

uint64_t _s12AppleIDSetup13SignInCommandV8ResponseV2eeoiySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  __int128 v10;
  char v11;
  uint64_t v12;
  _OWORD v14[4];
  uint64_t v15;
  char v16;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (!v4 && (sub_2365B08CC() & 1) == 0)
    return 0;
  v5 = type metadata accessor for IdMSAccount();
  if ((sub_2365AF8B8() & 1) == 0)
    return 0;
  v6 = (char *)a1 + *(int *)(v5 + 24);
  v7 = *((_QWORD *)v6 + 8);
  v8 = v6[72];
  v9 = *((_OWORD *)v6 + 1);
  v14[0] = *(_OWORD *)v6;
  v14[1] = v9;
  v10 = *((_OWORD *)v6 + 3);
  v14[2] = *((_OWORD *)v6 + 2);
  v14[3] = v10;
  v15 = v7;
  v16 = v8;
  _s12AppleIDSetup11IdMSAccountV10CredentialO2eeoiySbAE_AEtFZ_0((uint64_t)v14);
  if ((v11 & 1) == 0
    || (sub_2365A28C4(*(_QWORD *)((char *)a1 + *(int *)(v5 + 28)), *(_QWORD *)((char *)a2 + *(int *)(v5 + 28))) & 1) == 0)
  {
    return 0;
  }
  v12 = type metadata accessor for SignInCommand.Response(0);
  return sub_23654B984(*(_QWORD *)((char *)a1 + *(int *)(v12 + 20)), *(_QWORD *)((char *)a2 + *(int *)(v12 + 20)));
}

unint64_t sub_2364AF218()
{
  unint64_t result;

  result = qword_2563E7030;
  if (!qword_2563E7030)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B9C5C, &type metadata for SignInCommand.Response.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E7030);
  }
  return result;
}

unint64_t sub_2364AF25C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_2563E7040;
  if (!qword_2563E7040)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2563E7038);
    v2[0] = sub_23644F0B8(&qword_2563E4630, (uint64_t (*)(uint64_t))type metadata accessor for AIDAServiceType, (uint64_t)&protocol conformance descriptor for AIDAServiceType);
    v2[1] = sub_2364B1434(&qword_2563E7048, (uint64_t (*)(void))sub_2364907E8, MEMORY[0x24BEE1330], MEMORY[0x24BDFC458]);
    result = MEMORY[0x23B7F5164](MEMORY[0x24BEE04C0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_2563E7040);
  }
  return result;
}

unint64_t sub_2364AF300()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_2563E7060;
  if (!qword_2563E7060)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2563E7038);
    v2[0] = sub_23644F0B8(&qword_2563E4660, (uint64_t (*)(uint64_t))type metadata accessor for AIDAServiceType, (uint64_t)&protocol conformance descriptor for AIDAServiceType);
    v2[1] = sub_2364B1434(&qword_2563E7068, (uint64_t (*)(void))sub_2364908EC, MEMORY[0x24BEE1348], MEMORY[0x24BDFC470]);
    result = MEMORY[0x23B7F5164](MEMORY[0x24BEE04E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_2563E7060);
  }
  return result;
}

unint64_t sub_2364AF3A8()
{
  unint64_t result;

  result = qword_2563E7070;
  if (!qword_2563E7070)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for SignInCommand, &type metadata for SignInCommand);
    atomic_store(result, (unint64_t *)&qword_2563E7070);
  }
  return result;
}

uint64_t sub_2364AF3EC(uint64_t a1)
{
  uint64_t result;

  result = sub_23644F0B8(&qword_2563E70A0, type metadata accessor for SignInCommand.Request, (uint64_t)&protocol conformance descriptor for SignInCommand.Request);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_2364AF42C()
{
  unint64_t result;

  result = qword_2563E70A8;
  if (!qword_2563E70A8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for SignInCommand, &type metadata for SignInCommand);
    atomic_store(result, (unint64_t *)&qword_2563E70A8);
  }
  return result;
}

uint64_t sub_2364AF470(uint64_t a1)
{
  uint64_t result;

  result = sub_23644F0B8(&qword_2563E70D0, type metadata accessor for SignInCommand.Request, (uint64_t)&protocol conformance descriptor for SignInCommand.Request);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2364AF4AC(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_23644F0B8(&qword_2563E70D8, type metadata accessor for SignInCommand.Request, (uint64_t)&protocol conformance descriptor for SignInCommand.Request);
  a1[2] = sub_23644F0B8(&qword_2563E70E0, type metadata accessor for SignInCommand.Request, (uint64_t)&protocol conformance descriptor for SignInCommand.Request);
  result = sub_23644F0B8(&qword_2563E70E8, type metadata accessor for SignInCommand.Request, (uint64_t)&protocol conformance descriptor for SignInCommand.Request);
  a1[3] = result;
  return result;
}

uint64_t sub_2364AF524()
{
  return sub_23644F0B8(&qword_2563E70F0, type metadata accessor for SignInCommand.Request, (uint64_t)&protocol conformance descriptor for SignInCommand.Request);
}

uint64_t sub_2364AF550(uint64_t a1)
{
  uint64_t result;

  result = sub_23644F0B8(&qword_2563E7120, type metadata accessor for SignInCommand.Response, (uint64_t)&protocol conformance descriptor for SignInCommand.Response);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2364AF58C(uint64_t a1)
{
  uint64_t result;

  result = sub_23644F0B8(&qword_2563E7148, type metadata accessor for SignInCommand.Response, (uint64_t)&protocol conformance descriptor for SignInCommand.Response);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2364AF5C8(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_23644F0B8(&qword_2563E7150, type metadata accessor for SignInCommand.Response, (uint64_t)&protocol conformance descriptor for SignInCommand.Response);
  a1[2] = sub_23644F0B8(&qword_2563E7158, type metadata accessor for SignInCommand.Response, (uint64_t)&protocol conformance descriptor for SignInCommand.Response);
  result = sub_23644F0B8(&qword_2563E7160, type metadata accessor for SignInCommand.Response, (uint64_t)&protocol conformance descriptor for SignInCommand.Response);
  a1[3] = result;
  return result;
}

uint64_t sub_2364AF640()
{
  return sub_23644F0B8(&qword_2563E7168, type metadata accessor for SignInCommand.Response, (uint64_t)&protocol conformance descriptor for SignInCommand.Response);
}

uint64_t sub_2364AF66C()
{
  return sub_23644F0B8(&qword_2563E7170, type metadata accessor for SignInCommand.Request, (uint64_t)&protocol conformance descriptor for SignInCommand.Request);
}

uint64_t sub_2364AF698()
{
  return sub_23644F0B8(&qword_2563E7178, type metadata accessor for SignInCommand.Response, (uint64_t)&protocol conformance descriptor for SignInCommand.Response);
}

unint64_t sub_2364AF6C4(uint64_t a1)
{
  unint64_t result;

  result = sub_2364AF42C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2364AF6E8()
{
  return sub_23644F0B8(&qword_2563E70A0, type metadata accessor for SignInCommand.Request, (uint64_t)&protocol conformance descriptor for SignInCommand.Request);
}

uint64_t sub_2364AF714()
{
  return sub_23644F0B8(&qword_2563E7120, type metadata accessor for SignInCommand.Response, (uint64_t)&protocol conformance descriptor for SignInCommand.Response);
}

ValueMetadata *type metadata accessor for SignInCommand()
{
  return &type metadata for SignInCommand;
}

_QWORD *initializeBufferWithCopyOfBuffer for SignInCommand.Request(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v35 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v35 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    v9 = a2[7];
    a1[6] = a2[6];
    a1[7] = v9;
    v10 = a2[9];
    a1[8] = a2[8];
    a1[9] = v10;
    v11 = type metadata accessor for IdMSAccount();
    v12 = *(int *)(v11 + 20);
    v42 = (char *)v4 + v12;
    v43 = v11;
    v40 = (char *)a2 + v12;
    v13 = sub_2365AF8D0();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v42, v40, v13);
    v15 = *(int *)(v11 + 24);
    v16 = (char *)v4 + v15;
    v17 = (char *)a2 + v15;
    v18 = *((_QWORD *)v17 + 1);
    v19 = *((_QWORD *)v17 + 2);
    v20 = *((_QWORD *)v17 + 3);
    v21 = *((_QWORD *)v17 + 4);
    v22 = *((_QWORD *)v17 + 5);
    v24 = *((_QWORD *)v17 + 6);
    v23 = *((_QWORD *)v17 + 7);
    v39 = *(_QWORD *)v17;
    v41 = *((_QWORD *)v17 + 8);
    LOBYTE(v42) = v17[72];
    sub_23645F8F8(*(_QWORD *)v17, v18, v19, v20, v21, v22, v24, v23, v41, (char)v42);
    *(_QWORD *)v16 = v39;
    *((_QWORD *)v16 + 1) = v18;
    *((_QWORD *)v16 + 2) = v19;
    *((_QWORD *)v16 + 3) = v20;
    *((_QWORD *)v16 + 4) = v21;
    *((_QWORD *)v16 + 5) = v22;
    *((_QWORD *)v16 + 6) = v24;
    *((_QWORD *)v16 + 7) = v23;
    *((_QWORD *)v16 + 8) = v41;
    v16[72] = (char)v42;
    *(_QWORD *)((char *)v4 + *(int *)(v43 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(v43 + 28));
    v25 = a3[5];
    v26 = (char *)v4 + v25;
    v27 = (_QWORD *)((char *)a2 + v25);
    v28 = v27[1];
    *(_QWORD *)v26 = *v27;
    *((_QWORD *)v26 + 1) = v28;
    v29 = v27[3];
    *((_QWORD *)v26 + 2) = v27[2];
    *((_QWORD *)v26 + 3) = v29;
    v30 = v27[5];
    *((_QWORD *)v26 + 4) = v27[4];
    *((_QWORD *)v26 + 5) = v30;
    v31 = v27[7];
    *((_QWORD *)v26 + 6) = v27[6];
    *((_QWORD *)v26 + 7) = v31;
    v32 = v27[9];
    *((_QWORD *)v26 + 8) = v27[8];
    *((_QWORD *)v26 + 9) = v32;
    v33 = v27 + 10;
    v34 = v27[11];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v34 >> 60 == 15)
    {
      *((_OWORD *)v26 + 5) = *(_OWORD *)v33;
    }
    else
    {
      v36 = *v33;
      sub_236468CBC(*v33, v34);
      *((_QWORD *)v26 + 10) = v36;
      *((_QWORD *)v26 + 11) = v34;
    }
    v37 = a3[7];
    *((_BYTE *)v4 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    *((_BYTE *)v4 + v37) = *((_BYTE *)a2 + v37);
  }
  return v4;
}

uint64_t destroy for SignInCommand.Request(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = type metadata accessor for IdMSAccount();
  v5 = a1 + *(int *)(v4 + 20);
  v6 = sub_2365AF8D0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(v4 + 24);
  sub_23645FAF8(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), *(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 40), *(_QWORD *)(v7 + 48), *(_QWORD *)(v7 + 56), *(_QWORD *)(v7 + 64), *(_BYTE *)(v7 + 72));
  swift_bridgeObjectRelease();
  v8 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(v8 + 88);
  if (v10 >> 60 != 15)
    return sub_236468D44(*(_QWORD *)(v8 + 80), v10);
  return result;
}

_QWORD *initializeWithCopy for SignInCommand.Request(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  v8 = a2[7];
  a1[6] = a2[6];
  a1[7] = v8;
  v9 = a2[9];
  a1[8] = a2[8];
  a1[9] = v9;
  v10 = type metadata accessor for IdMSAccount();
  v11 = *(int *)(v10 + 20);
  v40 = (char *)a1 + v11;
  v41 = v10;
  v38 = (char *)a2 + v11;
  v12 = sub_2365AF8D0();
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v40, v38, v12);
  v14 = *(int *)(v10 + 24);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *((_QWORD *)v16 + 1);
  v18 = *((_QWORD *)v16 + 2);
  v19 = *((_QWORD *)v16 + 3);
  v20 = *((_QWORD *)v16 + 4);
  v21 = *((_QWORD *)v16 + 5);
  v23 = *((_QWORD *)v16 + 6);
  v22 = *((_QWORD *)v16 + 7);
  v37 = *(_QWORD *)v16;
  v39 = *((_QWORD *)v16 + 8);
  LOBYTE(v40) = v16[72];
  sub_23645F8F8(*(_QWORD *)v16, v17, v18, v19, v20, v21, v23, v22, v39, (char)v40);
  *(_QWORD *)v15 = v37;
  *((_QWORD *)v15 + 1) = v17;
  *((_QWORD *)v15 + 2) = v18;
  *((_QWORD *)v15 + 3) = v19;
  *((_QWORD *)v15 + 4) = v20;
  *((_QWORD *)v15 + 5) = v21;
  *((_QWORD *)v15 + 6) = v23;
  *((_QWORD *)v15 + 7) = v22;
  *((_QWORD *)v15 + 8) = v39;
  v15[72] = (char)v40;
  *(_QWORD *)((char *)a1 + *(int *)(v41 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(v41 + 28));
  v24 = a3[5];
  v25 = (char *)a1 + v24;
  v26 = (_QWORD *)((char *)a2 + v24);
  v27 = v26[1];
  *(_QWORD *)v25 = *v26;
  *((_QWORD *)v25 + 1) = v27;
  v28 = v26[3];
  *((_QWORD *)v25 + 2) = v26[2];
  *((_QWORD *)v25 + 3) = v28;
  v29 = v26[5];
  *((_QWORD *)v25 + 4) = v26[4];
  *((_QWORD *)v25 + 5) = v29;
  v30 = v26[7];
  *((_QWORD *)v25 + 6) = v26[6];
  *((_QWORD *)v25 + 7) = v30;
  v31 = v26[9];
  *((_QWORD *)v25 + 8) = v26[8];
  *((_QWORD *)v25 + 9) = v31;
  v32 = v26 + 10;
  v33 = v26[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v33 >> 60 == 15)
  {
    *((_OWORD *)v25 + 5) = *(_OWORD *)v32;
  }
  else
  {
    v34 = *v32;
    sub_236468CBC(*v32, v33);
    *((_QWORD *)v25 + 10) = v34;
    *((_QWORD *)v25 + 11) = v33;
  }
  v35 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *((_BYTE *)a1 + v35) = *((_BYTE *)a2 + v35);
  return a1;
}

_QWORD *assignWithCopy for SignInCommand.Request(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = type metadata accessor for IdMSAccount();
  v6 = *(int *)(v5 + 20);
  v7 = v5;
  v44 = v5;
  v8 = (char *)a1 + v6;
  v9 = (char *)a2 + v6;
  v10 = sub_2365AF8D0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(v7 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = *(_QWORD *)v13;
  v15 = *((_QWORD *)v13 + 1);
  v16 = *((_QWORD *)v13 + 2);
  v17 = *((_QWORD *)v13 + 3);
  v18 = *((_QWORD *)v13 + 4);
  v19 = *((_QWORD *)v13 + 5);
  v20 = *((_QWORD *)v13 + 7);
  v41 = *((_QWORD *)v13 + 6);
  v42 = *((_QWORD *)v13 + 8);
  v43 = v13[72];
  sub_23645F8F8(*(_QWORD *)v13, v15, v16, v17, v18, v19, v41, v20, v42, v43);
  v21 = *(_QWORD *)v12;
  v22 = *((_QWORD *)v12 + 1);
  v23 = *((_QWORD *)v12 + 2);
  v24 = *((_QWORD *)v12 + 3);
  v25 = *((_QWORD *)v12 + 4);
  v26 = *((_QWORD *)v12 + 5);
  v27 = *((_QWORD *)v12 + 6);
  v28 = *((_QWORD *)v12 + 7);
  v29 = *((_QWORD *)v12 + 8);
  v30 = v12[72];
  *(_QWORD *)v12 = v14;
  *((_QWORD *)v12 + 1) = v15;
  *((_QWORD *)v12 + 2) = v16;
  *((_QWORD *)v12 + 3) = v17;
  *((_QWORD *)v12 + 4) = v18;
  *((_QWORD *)v12 + 5) = v19;
  *((_QWORD *)v12 + 6) = v41;
  *((_QWORD *)v12 + 7) = v20;
  *((_QWORD *)v12 + 8) = v42;
  v12[72] = v43;
  sub_23645FAF8(v21, v22, v23, v24, v25, v26, v27, v28, v29, v30);
  *(_QWORD *)((char *)a1 + *(int *)(v44 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(v44 + 28));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v31 = a3[5];
  v32 = (_QWORD *)((char *)a1 + v31);
  v33 = (_QWORD *)((char *)a2 + v31);
  *v32 = *(_QWORD *)((char *)a2 + v31);
  v32[1] = *(_QWORD *)((char *)a2 + v31 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32[2] = v33[2];
  v32[3] = v33[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32[4] = v33[4];
  v32[5] = v33[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32[6] = v33[6];
  v32[7] = v33[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32[8] = v33[8];
  v32[9] = v33[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v34 = v33 + 10;
  v35 = v33[11];
  if (v32[11] >> 60 != 15)
  {
    if (v35 >> 60 != 15)
    {
      v37 = *v34;
      sub_236468CBC(v37, v35);
      v38 = v32[10];
      v39 = v32[11];
      v32[10] = v37;
      v32[11] = v35;
      sub_236468D44(v38, v39);
      goto LABEL_8;
    }
    sub_2364A87BC((uint64_t)(v32 + 10));
    goto LABEL_6;
  }
  if (v35 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)v32 + 5) = *(_OWORD *)v34;
    goto LABEL_8;
  }
  v36 = *v34;
  sub_236468CBC(v36, v35);
  v32[10] = v36;
  v32[11] = v35;
LABEL_8:
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  return a1;
}

_OWORD *initializeWithTake for SignInCommand.Request(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  a1[4] = a2[4];
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  v8 = (int *)type metadata accessor for IdMSAccount();
  v9 = v8[5];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = sub_2365AF8D0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  v13 = v8[6];
  v14 = (_OWORD *)((char *)a1 + v13);
  v15 = (_OWORD *)((char *)a2 + v13);
  v16 = v15[3];
  v14[2] = v15[2];
  v14[3] = v16;
  *(_OWORD *)((char *)v14 + 57) = *(_OWORD *)((char *)v15 + 57);
  v17 = v15[1];
  *v14 = *v15;
  v14[1] = v17;
  *(_QWORD *)((char *)a1 + v8[7]) = *(_QWORD *)((char *)a2 + v8[7]);
  v18 = a3[5];
  v19 = a3[6];
  v20 = (_OWORD *)((char *)a1 + v18);
  v21 = (_OWORD *)((char *)a2 + v18);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = v21[5];
  v20[4] = v21[4];
  v20[5] = v23;
  v24 = v21[3];
  v20[2] = v21[2];
  v20[3] = v24;
  *((_BYTE *)a1 + v19) = *((_BYTE *)a2 + v19);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  return a1;
}

_QWORD *assignWithTake for SignInCommand.Request(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease();
  v10 = a2[9];
  a1[8] = a2[8];
  a1[9] = v10;
  swift_bridgeObjectRelease();
  v11 = (int *)type metadata accessor for IdMSAccount();
  v12 = v11[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_2365AF8D0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = v11[6];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *((_QWORD *)v18 + 8);
  v20 = v18[72];
  v21 = *(_QWORD *)v17;
  v22 = *((_QWORD *)v17 + 1);
  v23 = *((_QWORD *)v17 + 2);
  v24 = *((_QWORD *)v17 + 3);
  v25 = *((_QWORD *)v17 + 4);
  v26 = *((_QWORD *)v17 + 5);
  v27 = *((_QWORD *)v17 + 6);
  v28 = *((_QWORD *)v17 + 7);
  v29 = *((_QWORD *)v17 + 8);
  v30 = v17[72];
  v31 = *((_OWORD *)v18 + 1);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v31;
  v32 = *((_OWORD *)v18 + 3);
  *((_OWORD *)v17 + 2) = *((_OWORD *)v18 + 2);
  *((_OWORD *)v17 + 3) = v32;
  *((_QWORD *)v17 + 8) = v19;
  v17[72] = v20;
  sub_23645FAF8(v21, v22, v23, v24, v25, v26, v27, v28, v29, v30);
  *(_QWORD *)((char *)a1 + v11[7]) = *(_QWORD *)((char *)a2 + v11[7]);
  swift_bridgeObjectRelease();
  v33 = a3[5];
  v34 = (_QWORD *)((char *)a1 + v33);
  v35 = (_QWORD *)((char *)a2 + v33);
  v36 = *(_QWORD *)((char *)a2 + v33 + 8);
  *v34 = *(_QWORD *)((char *)a2 + v33);
  v34[1] = v36;
  swift_bridgeObjectRelease();
  v37 = v35[3];
  v34[2] = v35[2];
  v34[3] = v37;
  swift_bridgeObjectRelease();
  v38 = v35[5];
  v34[4] = v35[4];
  v34[5] = v38;
  swift_bridgeObjectRelease();
  v39 = v35[7];
  v34[6] = v35[6];
  v34[7] = v39;
  swift_bridgeObjectRelease();
  v40 = v35[9];
  v34[8] = v35[8];
  v34[9] = v40;
  swift_bridgeObjectRelease();
  v41 = v35 + 10;
  v42 = v34[11];
  if (v42 >> 60 != 15)
  {
    v43 = v35[11];
    if (v43 >> 60 != 15)
    {
      v44 = v34[10];
      v34[10] = *v41;
      v34[11] = v43;
      sub_236468D44(v44, v42);
      goto LABEL_6;
    }
    sub_2364A87BC((uint64_t)(v34 + 10));
  }
  *((_OWORD *)v34 + 5) = *(_OWORD *)v41;
LABEL_6:
  v45 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *((_BYTE *)a1 + v45) = *((_BYTE *)a2 + v45);
  return a1;
}

uint64_t getEnumTagSinglePayload for SignInCommand.Request()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2364B02E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for IdMSAccount();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for SignInCommand.Request()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2364B0370(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for IdMSAccount();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_2364B03EC()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for IdMSAccount();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SignInCommand.Response(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v26 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    v9 = a2[7];
    a1[6] = a2[6];
    a1[7] = v9;
    v10 = a2[9];
    a1[8] = a2[8];
    a1[9] = v10;
    v11 = type metadata accessor for IdMSAccount();
    v12 = *(int *)(v11 + 20);
    v13 = v11;
    v31 = (char *)v4 + v12;
    v32 = v11;
    v29 = (char *)a2 + v12;
    v14 = sub_2365AF8D0();
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15(v31, v29, v14);
    v16 = *(int *)(v13 + 24);
    v17 = (char *)v4 + v16;
    v18 = (char *)a2 + v16;
    v19 = *(_QWORD *)v18;
    v20 = *((_QWORD *)v18 + 1);
    v21 = *((_QWORD *)v18 + 2);
    v22 = *((_QWORD *)v18 + 3);
    v23 = *((_QWORD *)v18 + 4);
    v24 = *((_QWORD *)v18 + 5);
    v25 = *((_QWORD *)v18 + 7);
    v28 = *((_QWORD *)v18 + 6);
    v30 = *((_QWORD *)v18 + 8);
    LOBYTE(v31) = v18[72];
    sub_23645F8F8(*(_QWORD *)v18, v20, v21, v22, v23, v24, v28, v25, v30, (char)v31);
    *(_QWORD *)v17 = v19;
    *((_QWORD *)v17 + 1) = v20;
    *((_QWORD *)v17 + 2) = v21;
    *((_QWORD *)v17 + 3) = v22;
    *((_QWORD *)v17 + 4) = v23;
    *((_QWORD *)v17 + 5) = v24;
    *((_QWORD *)v17 + 6) = v28;
    *((_QWORD *)v17 + 7) = v25;
    *((_QWORD *)v17 + 8) = v30;
    v17[72] = (char)v31;
    *(uint64_t *)((char *)v4 + *(int *)(v32 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(v32 + 28));
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for SignInCommand.Response(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = type metadata accessor for IdMSAccount();
  v3 = a1 + *(int *)(v2 + 20);
  v4 = sub_2365AF8D0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = a1 + *(int *)(v2 + 24);
  sub_23645FAF8(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56), *(_QWORD *)(v5 + 64), *(_BYTE *)(v5 + 72));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for SignInCommand.Response(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  v8 = a2[7];
  a1[6] = a2[6];
  a1[7] = v8;
  v9 = a2[9];
  a1[8] = a2[8];
  a1[9] = v9;
  v10 = type metadata accessor for IdMSAccount();
  v11 = *(int *)(v10 + 20);
  v28 = (char *)a1 + v11;
  v29 = v10;
  v26 = (char *)a2 + v11;
  v12 = sub_2365AF8D0();
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v28, v26, v12);
  v14 = *(int *)(v10 + 24);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *((_QWORD *)v16 + 1);
  v18 = *((_QWORD *)v16 + 2);
  v19 = *((_QWORD *)v16 + 3);
  v20 = *((_QWORD *)v16 + 4);
  v21 = *((_QWORD *)v16 + 5);
  v23 = *((_QWORD *)v16 + 6);
  v22 = *((_QWORD *)v16 + 7);
  v25 = *(_QWORD *)v16;
  v27 = *((_QWORD *)v16 + 8);
  LOBYTE(v28) = v16[72];
  sub_23645F8F8(*(_QWORD *)v16, v17, v18, v19, v20, v21, v23, v22, v27, (char)v28);
  *(_QWORD *)v15 = v25;
  *((_QWORD *)v15 + 1) = v17;
  *((_QWORD *)v15 + 2) = v18;
  *((_QWORD *)v15 + 3) = v19;
  *((_QWORD *)v15 + 4) = v20;
  *((_QWORD *)v15 + 5) = v21;
  *((_QWORD *)v15 + 6) = v23;
  *((_QWORD *)v15 + 7) = v22;
  *((_QWORD *)v15 + 8) = v27;
  v15[72] = (char)v28;
  *(_QWORD *)((char *)a1 + *(int *)(v29 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(v29 + 28));
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SignInCommand.Response(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = type metadata accessor for IdMSAccount();
  v6 = *(int *)(v5 + 20);
  v7 = v5;
  v35 = v5;
  v8 = (char *)a1 + v6;
  v9 = (char *)a2 + v6;
  v10 = sub_2365AF8D0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(v7 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = *(_QWORD *)v13;
  v15 = *((_QWORD *)v13 + 1);
  v16 = *((_QWORD *)v13 + 2);
  v17 = *((_QWORD *)v13 + 3);
  v18 = *((_QWORD *)v13 + 4);
  v19 = *((_QWORD *)v13 + 5);
  v20 = *((_QWORD *)v13 + 7);
  v32 = *((_QWORD *)v13 + 6);
  v33 = *((_QWORD *)v13 + 8);
  v34 = v13[72];
  sub_23645F8F8(*(_QWORD *)v13, v15, v16, v17, v18, v19, v32, v20, v33, v34);
  v21 = *(_QWORD *)v12;
  v22 = *((_QWORD *)v12 + 1);
  v23 = *((_QWORD *)v12 + 2);
  v24 = *((_QWORD *)v12 + 3);
  v25 = *((_QWORD *)v12 + 4);
  v26 = *((_QWORD *)v12 + 5);
  v27 = *((_QWORD *)v12 + 6);
  v28 = *((_QWORD *)v12 + 7);
  v29 = *((_QWORD *)v12 + 8);
  v30 = v12[72];
  *(_QWORD *)v12 = v14;
  *((_QWORD *)v12 + 1) = v15;
  *((_QWORD *)v12 + 2) = v16;
  *((_QWORD *)v12 + 3) = v17;
  *((_QWORD *)v12 + 4) = v18;
  *((_QWORD *)v12 + 5) = v19;
  *((_QWORD *)v12 + 6) = v32;
  *((_QWORD *)v12 + 7) = v20;
  *((_QWORD *)v12 + 8) = v33;
  v12[72] = v34;
  sub_23645FAF8(v21, v22, v23, v24, v25, v26, v27, v28, v29, v30);
  *(_QWORD *)((char *)a1 + *(int *)(v35 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(v35 + 28));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for SignInCommand.Response(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;

  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  a1[4] = a2[4];
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  v8 = (int *)type metadata accessor for IdMSAccount();
  v9 = v8[5];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = sub_2365AF8D0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  v13 = v8[6];
  v14 = (_OWORD *)((char *)a1 + v13);
  v15 = (_OWORD *)((char *)a2 + v13);
  v16 = v15[3];
  v14[2] = v15[2];
  v14[3] = v16;
  *(_OWORD *)((char *)v14 + 57) = *(_OWORD *)((char *)v15 + 57);
  v17 = v15[1];
  *v14 = *v15;
  v14[1] = v17;
  *(_QWORD *)((char *)a1 + v8[7]) = *(_QWORD *)((char *)a2 + v8[7]);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

_QWORD *assignWithTake for SignInCommand.Response(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease();
  v10 = a2[9];
  a1[8] = a2[8];
  a1[9] = v10;
  swift_bridgeObjectRelease();
  v11 = (int *)type metadata accessor for IdMSAccount();
  v12 = v11[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_2365AF8D0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = v11[6];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *((_QWORD *)v18 + 8);
  v20 = v18[72];
  v21 = *(_QWORD *)v17;
  v22 = *((_QWORD *)v17 + 1);
  v23 = *((_QWORD *)v17 + 2);
  v24 = *((_QWORD *)v17 + 3);
  v25 = *((_QWORD *)v17 + 4);
  v26 = *((_QWORD *)v17 + 5);
  v27 = *((_QWORD *)v17 + 6);
  v28 = *((_QWORD *)v17 + 7);
  v29 = *((_QWORD *)v17 + 8);
  v30 = v17[72];
  v31 = *((_OWORD *)v18 + 1);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v31;
  v32 = *((_OWORD *)v18 + 3);
  *((_OWORD *)v17 + 2) = *((_OWORD *)v18 + 2);
  *((_OWORD *)v17 + 3) = v32;
  *((_QWORD *)v17 + 8) = v19;
  v17[72] = v20;
  sub_23645FAF8(v21, v22, v23, v24, v25, v26, v27, v28, v29, v30);
  *(_QWORD *)((char *)a1 + v11[7]) = *(_QWORD *)((char *)a2 + v11[7]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SignInCommand.Response()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2364B0C7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for IdMSAccount();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for SignInCommand.Response()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2364B0D04(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for IdMSAccount();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_2364B0D7C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for IdMSAccount();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SignInCommand.Response.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2364B0E3C + 4 * byte_2365B97F1[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2364B0E70 + 4 * byte_2365B97EC[v4]))();
}

uint64_t sub_2364B0E70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364B0E78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2364B0E80);
  return result;
}

uint64_t sub_2364B0E8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2364B0E94);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2364B0E98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364B0EA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SignInCommand.Response.CodingKeys()
{
  return &type metadata for SignInCommand.Response.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SignInCommand.Request.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_2364B0F08 + 4 * byte_2365B97FB[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_2364B0F3C + 4 * byte_2365B97F6[v4]))();
}

uint64_t sub_2364B0F3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364B0F44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2364B0F4CLL);
  return result;
}

uint64_t sub_2364B0F58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2364B0F60);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_2364B0F64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364B0F6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SignInCommand.Request.CodingKeys()
{
  return &type metadata for SignInCommand.Request.CodingKeys;
}

unint64_t sub_2364B0F8C()
{
  unint64_t result;

  result = qword_2563E72F8;
  if (!qword_2563E72F8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B9B7C, &type metadata for SignInCommand.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E72F8);
  }
  return result;
}

unint64_t sub_2364B0FD4()
{
  unint64_t result;

  result = qword_2563E7300;
  if (!qword_2563E7300)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B9C34, &type metadata for SignInCommand.Response.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E7300);
  }
  return result;
}

unint64_t sub_2364B101C()
{
  unint64_t result;

  result = qword_2563E7308;
  if (!qword_2563E7308)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B9BA4, &type metadata for SignInCommand.Response.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E7308);
  }
  return result;
}

unint64_t sub_2364B1064()
{
  unint64_t result;

  result = qword_2563E7310;
  if (!qword_2563E7310)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B9BCC, &type metadata for SignInCommand.Response.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E7310);
  }
  return result;
}

unint64_t sub_2364B10AC()
{
  unint64_t result;

  result = qword_2563E7318;
  if (!qword_2563E7318)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B9AEC, &type metadata for SignInCommand.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E7318);
  }
  return result;
}

unint64_t sub_2364B10F4()
{
  unint64_t result;

  result = qword_2563E7320;
  if (!qword_2563E7320)
  {
    result = MEMORY[0x23B7F5164](&unk_2365B9B14, &type metadata for SignInCommand.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E7320);
  }
  return result;
}

uint64_t sub_2364B1138(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746E756F636361 && a2 == 0xE700000000000000;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C75736552707273 && a2 == 0xEA00000000007374 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C616E69467369 && a2 == 0xE700000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E696D7265547369 && a2 == 0xEA00000000006C61)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_2364B1300(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746E756F636361 && a2 == 0xE700000000000000;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002365CBF00)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_2364B13EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7328);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2364B1434(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2563E7050);
    v10[0] = a3;
    v10[1] = a2();
    result = MEMORY[0x23B7F5164](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t Building.map(_:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;

  return a1(v1);
}

uint64_t Building.then(if:_:)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(uint64_t)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v4;

  if ((a1() & 1) != 0)
    return a2(v4);
  else
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a4, v4, a3);
}

uint64_t Building.then(if:_:or:)(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v5;

  if ((a1() & 1) != 0)
    return a3(v5);
  else
    return a5(v5);
}

uint64_t dispatch thunk of Building.build()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DefaultBuilding.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t CryptographicIdentity<>.signature<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2364B1990(v15, (uint64_t)v14);
  if (!v6)
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 16))(a1, a3, a5, v11, a4);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  return v5;
}

uint64_t CryptographicIdentity<>.isValidSignature<A>(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD v19[2];

  v19[0] = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v17 = (char *)v19 - v16;
  sub_2364B1AB4(a4, (uint64_t)v19 - v16);
  LOBYTE(a8) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(a8 + 24))(a1, a2, a3, a5, v19[0], AssociatedTypeWitness, a8);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, AssociatedTypeWitness);
  return a8 & 1;
}

uint64_t sub_2364B17EC@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *);
  uint64_t v28;

  v25 = a5;
  v26 = a2;
  v28 = a4;
  v27 = a1;
  v24 = a3;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v10);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v25, v12, v24);
    v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a6, v22, 1);
}

uint64_t CryptographicIdentity.info.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_2364B1990@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = sub_2365B047C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v14 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v14 - v8, v2 + *(int *)(a1 + 36), v6);
  v10 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v5) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v9, v5);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v12 = type metadata accessor for CryptographicIdentity.MissingPrivateKey(0, v5, *(_QWORD *)(a1 + 24), v11);
  MEMORY[0x23B7F5164](&unk_2365BAA58, v12);
  swift_allocError();
  return swift_willThrow();
}

uint64_t sub_2364B1AB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v16 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = sub_2365B047C();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v15 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v15 - v9, v2 + *(int *)(a1 + 40), v7);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(v16, v10, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v13 = type metadata accessor for CryptographicIdentity.MissingPublicKey(0, v4, v5, v12);
  MEMORY[0x23B7F5164](&unk_2365BAA98, v13);
  swift_allocError();
  return swift_willThrow();
}

uint64_t sub_2364B1C04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(qword_2563E4E68);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2364B3924(v2 + *(int *)(a1 + 44), (uint64_t)v7);
  v8 = sub_2365AFE88();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v7, v8);
  sub_236465998((uint64_t)v7, qword_2563E4E68);
  v11 = type metadata accessor for CryptographicIdentity.MissingSymmetricKey(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v10);
  MEMORY[0x23B7F5164](&unk_2365BAAD8, v11);
  swift_allocError();
  return swift_willThrow();
}

BOOL CryptographicIdentity.isForSigning.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _BOOL8 v8;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = sub_2365B047C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v10 - v6, v1 + *(int *)(a1 + 36), v4);
  v8 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v7, 1, v3) != 1;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

BOOL CryptographicIdentity.isForSignatureValidation.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v21;
  uint64_t v22;

  v2 = v1;
  v4 = *(_QWORD *)(a1 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = sub_2365B047C();
  v21 = *(_QWORD *)(v6 - 8);
  v22 = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v21 - v8;
  v10 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_2365B047C();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v21 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v21 - v15, v2 + *(int *)(a1 + 36), v13);
  LODWORD(v4) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v16, 1, v4);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v2, a1);
  if ((_DWORD)v4 == 1)
  {
    v18 = v21;
    v17 = v22;
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v9, &v12[*(int *)(a1 + 40)], v22);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a1);
    v19 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v9, 1, AssociatedTypeWitness) != 1;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v17);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a1);
    return 0;
  }
  return v19;
}

uint64_t sub_2364B1FB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  char v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a7 = *(_QWORD *)a1;
  *(_QWORD *)(a7 + 8) = v11;
  *(_BYTE *)(a7 + 16) = v12;
  v13 = (int *)type metadata accessor for CryptographicIdentity(0, a5, a6, a4);
  v14 = a7 + v13[9];
  v15 = sub_2365B047C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, a2, v15);
  v16 = a7 + v13[10];
  swift_getAssociatedTypeWitness();
  v17 = sub_2365B047C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v16, a3, v17);
  return sub_2364B2248(a4, a7 + v13[11]);
}

uint64_t CryptographicIdentity.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  char v27;

  v25 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(qword_2563E4E68);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = a3;
  swift_getAssociatedTypeWitness();
  v10 = sub_2365B047C();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v23 - v12;
  v14 = sub_2365B047C();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v23 - v16;
  v18 = *(_QWORD *)(a1 + 8);
  v19 = *(_BYTE *)(a1 + 16);
  v26[0] = *(_QWORD *)a1;
  v26[1] = v18;
  v27 = v19;
  v21 = (int *)type metadata accessor for CryptographicIdentity(0, a2, a3, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v17, a1 + v21[9], v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v13, a1 + v21[10], v10);
  sub_2364B2248(a1 + v21[11], (uint64_t)v9);
  return sub_2364B1FB4((uint64_t)v26, (uint64_t)v17, (uint64_t)v13, (uint64_t)v9, a2, v24, v25);
}

uint64_t type metadata accessor for CryptographicIdentity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CryptographicIdentity);
}

uint64_t sub_2364B2248(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_2563E4E68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t static CryptographicIdentity.newIdentity(ofKind:withID:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _QWORD v33[2];
  char v34;
  uint64_t v35;

  v31 = a3;
  v29 = a2;
  v35 = a6;
  v10 = __swift_instantiateConcreteTypeFromMangledName(qword_2563E4E68);
  MEMORY[0x24BDAC7A8](v10);
  v32 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = *(_QWORD *)(a5 + 8);
  swift_getAssociatedTypeWitness();
  v12 = sub_2365B047C();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v28 - v13;
  v15 = sub_2365B047C();
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v28 - v17;
  v19 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)&v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *a1;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
  if (!v6)
  {
    v33[0] = v29;
    v33[1] = v31;
    v34 = v22;
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v18, v21, a4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v18, 0, 1, a4);
    v24 = v30;
    v25 = *(void (**)(uint64_t, uint64_t))(v30 + 32);
    swift_bridgeObjectRetain();
    v25(a4, v24);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, a4);
    v26 = sub_2365AFE88();
    v27 = (uint64_t)v32;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v32, 1, 1, v26);
    return sub_2364B1FB4((uint64_t)v33, (uint64_t)v18, (uint64_t)v14, v27, a4, a5, v35);
  }
  return result;
}

uint64_t CryptographicIdentity.Info.init(id:kind:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  char v4;

  v4 = *a3;
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 16) = v4;
  return result;
}

uint64_t CryptographicIdentity.exportedPublicKeyMaterial()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  char v30;

  v28 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_2563E4E68);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v27 = *(_QWORD *)(a1 + 24);
  swift_getAssociatedTypeWitness();
  v8 = sub_2365B047C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v26 - v10;
  v12 = sub_2365B047C();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v26 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v2 + 8);
  v19 = *(_BYTE *)(v2 + 16);
  v29[0] = *(_QWORD *)v2;
  v29[1] = v18;
  v30 = v19;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v15, 1, 1, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v2 + *(int *)(a1 + 40), v8);
  v20 = sub_2365AFE88();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v6, 1, 1, v20);
  v21 = (uint64_t)v15;
  v22 = v27;
  sub_2364B1FB4((uint64_t)v29, v21, (uint64_t)v11, (uint64_t)v6, v7, v27, (uint64_t)v17);
  v24 = type metadata accessor for CryptographicIdentity(0, v7, v22, v23);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v28, v17, v24);
  return swift_bridgeObjectRetain();
}

uint64_t sub_2364B26C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;

  v7 = type metadata accessor for CryptographicIdentity(0, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a5, a1, v7);
}

uint64_t CryptographicIdentity.exportedFullKeyMaterial()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v6 + 16))(v5);
  v8 = type metadata accessor for CryptographicIdentity(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a2, v5, v8);
}

uint64_t sub_2364B2794()
{
  unint64_t v0;

  v0 = sub_2365B06E0();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t sub_2364B27E0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2364B280C + 4 * byte_2365B9D60[a1]))(1868983913, 0xE400000000000000);
}

uint64_t sub_2364B280C()
{
  return 0x4B65746176697270;
}

uint64_t sub_2364B2828()
{
  return 0x654B63696C627570;
}

uint64_t sub_2364B2844()
{
  return 0x697274656D6D7973;
}

uint64_t sub_2364B2864(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2364B2890 + 4 * byte_2365B9D64[a1]))(1868983913, 0xE400000000000000);
}

uint64_t sub_2364B2890()
{
  return 0x4B65746176697270;
}

uint64_t sub_2364B28AC()
{
  return 0x654B63696C627570;
}

uint64_t sub_2364B28C8()
{
  return 0x697274656D6D7973;
}

uint64_t sub_2364B28E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7F5164](&unk_2365BA3E8, a3);
  return sub_2365B0908();
}

uint64_t sub_2364B293C(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BA3E8, a1);
  return sub_2365B0128();
}

uint64_t sub_2364B2988()
{
  MEMORY[0x23B7F5164](&unk_2365BA3E8);
  return sub_2365B0140();
}

uint64_t sub_2364B29D8()
{
  MEMORY[0x23B7F5164](&unk_2365BA3E8);
  return sub_2365B0134();
}

uint64_t sub_2364B2A28@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2364B2794();
  *a1 = result;
  return result;
}

uint64_t sub_2364B2A5C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_2364B27E0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2364B2A88()
{
  unsigned __int8 *v0;

  return sub_2364B2864(*v0);
}

uint64_t sub_2364B2A94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t result;

  result = sub_2364B27DC(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
  *a4 = result;
  return result;
}

uint64_t sub_2364B2AC0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23647A7C4();
  *a1 = result;
  return result;
}

uint64_t sub_2364B2AE8(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BA980, a1);
  return sub_2365B0AD0();
}

uint64_t sub_2364B2B1C(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BA980, a1);
  return sub_2365B0ADC();
}

uint64_t CryptographicIdentity.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[4];
  int v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t AssociatedTypeWitness;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _BYTE *v74;
  __int128 v75;
  __int128 v76;
  unsigned __int8 v77;
  uint64_t v78;

  v63 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(qword_2563E4E68);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v64 = &v52[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v8);
  v62 = &v52[-v10];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = sub_2365B047C();
  v12 = *(_QWORD *)(v11 - 8);
  v65 = v11;
  v66 = v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v61 = &v52[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v13);
  v68 = &v52[-v15];
  v16 = sub_2365B047C();
  v69 = *(_QWORD *)(v16 - 8);
  v70 = v16;
  v17 = MEMORY[0x24BDAC7A8](v16);
  v60 = &v52[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v17);
  v20 = &v52[-v19];
  v71 = a3;
  v72 = a2;
  v22 = type metadata accessor for CryptographicIdentity.CodingKeys(255, a2, a3, v21);
  MEMORY[0x23B7F5164](&unk_2365BA980, v22);
  v23 = sub_2365B07AC();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v26 = &v52[-v25];
  v27 = a1[3];
  v73 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v27);
  v28 = (uint64_t)v74;
  sub_2365B0A7C();
  if (!v28)
  {
    v30 = v24;
    v74 = v20;
    v31 = v71;
    v32 = type metadata accessor for CryptographicIdentity.Info(0, v72, v71, v29);
    LOBYTE(v75) = 0;
    MEMORY[0x23B7F5164](&protocol conformance descriptor for CryptographicIdentity<A>.Info, v32);
    sub_2365B0770();
    v33 = v76;
    v34 = v77;
    LOBYTE(v75) = 1;
    sub_2364A58B8();
    v35 = sub_2365B0734();
    v53 = v34;
    v54 = v33;
    v55 = v30;
    v57 = *((_QWORD *)&v33 + 1);
    v58 = v26;
    v59 = v23;
    v56 = v52;
    v75 = v76;
    MEMORY[0x24BDAC7A8](v35);
    v36 = v72;
    *(_QWORD *)&v52[-16] = v72;
    *(_QWORD *)&v52[-8] = v31;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7340);
    v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542A8310);
    sub_2364B17EC((void (*)(char *, char *))sub_2364B330C, (uint64_t)&v52[-32], v37, v36, (uint64_t)&v78, (uint64_t)v74);
    sub_23646A42C(v75, *((unint64_t *)&v75 + 1));
    LOBYTE(v75) = 2;
    v39 = sub_2365B0734();
    v75 = v76;
    MEMORY[0x24BDAC7A8](v39);
    *(_QWORD *)&v52[-16] = v36;
    *(_QWORD *)&v52[-8] = v31;
    sub_2364B17EC((void (*)(char *, char *))sub_2364B33FC, (uint64_t)&v52[-32], v37, AssociatedTypeWitness, (uint64_t)&v78, (uint64_t)v68);
    sub_23646A42C(v75, *((unint64_t *)&v75 + 1));
    LOBYTE(v75) = 3;
    sub_2365B0734();
    v40 = *((_QWORD *)&v76 + 1);
    v41 = v65;
    if (*((_QWORD *)&v76 + 1) >> 60 == 15)
    {
      v42 = sub_2365AFE88();
      v43 = (uint64_t)v62;
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v62, 1, 1, v42);
    }
    else
    {
      v44 = v76;
      v75 = v76;
      sub_236468CBC(v76, *((unint64_t *)&v76 + 1));
      v43 = (uint64_t)v62;
      sub_2365AFE7C();
      v45 = sub_2365AFE88();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v43, 0, 1, v45);
      sub_23646A42C(v44, v40);
    }
    v46 = v63;
    v47 = (uint64_t)v64;
    v48 = v70;
    v49 = v54;
    (*(void (**)(_BYTE *, uint64_t))(v55 + 8))(v58, v59);
    *(_QWORD *)&v76 = v49;
    *((_QWORD *)&v76 + 1) = v57;
    v77 = v53;
    v50 = (uint64_t)v60;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v69 + 32))(v60, v74, v48);
    v51 = (uint64_t)v61;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v66 + 32))(v61, v68, v41);
    sub_2364B2248(v43, v47);
    sub_2364B1FB4((uint64_t)&v76, v50, v51, v47, v36, v31, v46);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
}

uint64_t type metadata accessor for CryptographicIdentity.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CryptographicIdentity.CodingKeys);
}

uint64_t type metadata accessor for CryptographicIdentity.Info(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CryptographicIdentity.Info);
}

uint64_t sub_2364B3288(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t result;

  v7 = *a1;
  v8 = a1[1];
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8);
  v10 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v9 + 16);
  sub_236468CBC(*a1, v8);
  result = v10(v7, v8, a2, v9);
  if (v4)
    *a4 = v4;
  return result;
}

uint64_t sub_2364B330C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_2364B3288(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_2364B3328(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t result;

  v6 = *a1;
  v7 = a1[1];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v10 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v9 + 16);
  sub_236468CBC(v6, v7);
  result = v10(v6, v7, AssociatedTypeWitness, v9);
  if (v4)
    *a4 = v4;
  return result;
}

uint64_t sub_2364B33FC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_2364B3328(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t CryptographicIdentity.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t AssociatedConformanceWitness;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t AssociatedTypeWitness;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  char v70;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_2563E4E68);
  MEMORY[0x24BDAC7A8](v4);
  v53 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v62 = (int *)a2;
  v57 = *(_QWORD *)(v6 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = sub_2365B047C();
  v54 = *(_QWORD *)(v8 - 8);
  v55 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v58 = (char *)&v52 - v9;
  v10 = sub_2365B047C();
  v60 = *(_QWORD *)(v10 - 8);
  v61 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v59 = (char *)&v52 - v11;
  v13 = type metadata accessor for CryptographicIdentity.CodingKeys(255, v7, v6, v12);
  MEMORY[0x23B7F5164](&unk_2365BA980, v13);
  v14 = sub_2365B0854();
  v63 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v52 - v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v17 = v65;
  sub_2365B0AAC();
  v18 = *(_QWORD *)(v17 + 8);
  v19 = *(_BYTE *)(v17 + 16);
  v67 = *(_QWORD *)v17;
  v68 = v18;
  v69 = v19;
  v70 = 0;
  v21 = type metadata accessor for CryptographicIdentity.Info(0, v7, v6, v20);
  MEMORY[0x23B7F5164](&protocol conformance descriptor for CryptographicIdentity<A>.Info, v21);
  v66 = v16;
  v22 = v64;
  sub_2365B0824();
  if (v22)
  {
    v23 = v63;
  }
  else
  {
    v52 = v6;
    v64 = v14;
    v24 = v61;
    v25 = v59;
    v26 = v60;
    (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v59, v17 + v62[9], v61);
    v27 = *(_QWORD *)(v7 - 8);
    v28 = v17;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v7) == 1)
    {
      v29 = v24;
      v30 = v26;
      v31 = 0;
      v32 = 0xF000000000000000;
    }
    else
    {
      v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v57 + 8) + 8))(v7);
      v32 = v33;
      v30 = v27;
      v29 = v7;
    }
    v14 = v64;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v25, v29);
    v67 = v31;
    v68 = v32;
    v70 = 1;
    sub_2364A5874();
    sub_2365B07E8();
    v64 = v7;
    sub_23646A42C(v31, v32);
    v34 = v54;
    v35 = v55;
    v36 = v58;
    (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v58, v28 + v62[10], v55);
    v37 = AssociatedTypeWitness;
    v38 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, AssociatedTypeWitness) == 1)
    {
      v39 = 0;
      v40 = v52;
      v23 = v63;
      v41 = v35;
      v42 = v34;
      v43 = 0xF000000000000000;
    }
    else
    {
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 8))(v37);
      v36 = v58;
      v39 = v45;
      v43 = v46;
      v42 = v38;
      v41 = v37;
      v40 = v52;
      v23 = v63;
    }
    v47 = (uint64_t)v53;
    (*(void (**)(char *, uint64_t))(v42 + 8))(v36, v41);
    v67 = v39;
    v68 = v43;
    v70 = 2;
    sub_2365B07E8();
    sub_23646A42C(v39, v43);
    sub_2364B3924(v65 + v62[11], v47);
    v48 = sub_2365AFE88();
    v49 = *(_QWORD *)(v48 - 8);
    v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48);
    if ((_DWORD)v50 == 1)
    {
      sub_236465998(v47, qword_2563E4E68);
    }
    else
    {
      MEMORY[0x24BDAC7A8](v50);
      *(&v52 - 4) = v64;
      *(&v52 - 3) = v40;
      *(&v52 - 2) = (uint64_t)v66;
      sub_2365AFE70();
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v47, v48);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v66, v14);
}

uint64_t sub_2364B3924(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_2563E4E68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2364B396C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7 = sub_2364B3A54(a1, a2);
  v9 = v8;
  v11 = type metadata accessor for CryptographicIdentity.CodingKeys(255, a4, a5, v10);
  MEMORY[0x23B7F5164](&unk_2365BA980, v11);
  sub_2365B0854();
  sub_2364A5874();
  sub_2365B0824();
  return sub_236468D44(v7, v9);
}

uint64_t sub_2364B3A38(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_2364B396C(a1, a2, v2[4], v2[2], v2[3]);
}

uint64_t sub_2364B3A54(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];

  v8[3] = MEMORY[0x24BEE0F88];
  v8[4] = MEMORY[0x24BDCFB90];
  v8[0] = a1;
  v8[1] = a2;
  v2 = __swift_project_boxed_opaque_existential_1(v8, MEMORY[0x24BEE0F88]);
  v3 = (_BYTE *)*v2;
  if (*v2 && (v4 = (_BYTE *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      v6 = sub_2364B8128(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      v6 = sub_2364B8268((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      v6 = sub_2364B81E8((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    v6 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v6;
}

uint64_t sub_2364B3B0C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v14[2];
  uint64_t v15;
  __int128 v16;
  _QWORD v17[7];

  v17[5] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v16 = a1;
  *((_QWORD *)&v16 + 1) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E77F0);
  if (!swift_dynamicCast())
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    sub_236465998((uint64_t)v14, qword_2563E77F8);
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_20;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v17[0] = a1;
      v17[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v4 = (char *)v17 + (HIBYTE(a2) & 0xF);
      v5 = v17;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        v2 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v3 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v2 = sub_2365B05D8();
      }
      if (v2)
        v4 = (_BYTE *)(v2 + v3);
      else
        v4 = 0;
      v5 = (_BYTE *)v2;
    }
    v6 = sub_2364B82E0(v5, v4);
    v8 = v7;
    if (v7 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)&v14[0] = v6;
      *((_QWORD *)&v14[0] + 1) = v8;
      return *(_QWORD *)&v14[0];
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_20:
      v9 = sub_2365B00BC();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v9 = HIBYTE(a2) & 0xF;
    }
    else
    {
      v9 = a1 & 0xFFFFFFFFFFFFLL;
    }
    *(_QWORD *)&v14[0] = sub_2364B8344(v9);
    *((_QWORD *)&v14[0] + 1) = v10;
    MEMORY[0x24BDAC7A8](*(_QWORD *)&v14[0]);
    sub_2364B74FC();
    __asm { BR              X12 }
  }
  sub_23646A440(v14, (uint64_t)v17);
  __swift_project_boxed_opaque_existential_1(v17, v17[3]);
  sub_2365AF894();
  swift_bridgeObjectRelease();
  v14[0] = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return *(_QWORD *)&v14[0];
}

uint64_t static CryptographicIdentity.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, int *);
  void (*v52)(char *, char *, uint64_t);
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, int *);
  uint64_t AssociatedConformanceWitness;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int (*v82)(uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  uint64_t v88;
  uint64_t v89;
  char v90;
  char v91;
  char *v92;
  void (*v93)(char *, uint64_t);
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t AssociatedTypeWitness;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;

  v114 = a2;
  v100 = sub_2365AFE88();
  v98 = *(_QWORD *)(v100 - 8);
  MEMORY[0x24BDAC7A8](v100);
  v95 = (char *)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(qword_2563E4E68);
  MEMORY[0x24BDAC7A8](v8);
  v96 = (uint64_t)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7348);
  MEMORY[0x24BDAC7A8](v97);
  v99 = (uint64_t)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v102 = sub_2365B047C();
  v108 = *(_QWORD *)(v102 - 8);
  v12 = MEMORY[0x24BDAC7A8](v102);
  v103 = (char *)&v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v101 = (char *)&v94 - v14;
  v16 = (int *)type metadata accessor for CryptographicIdentity(0, a3, a4, v15);
  v111 = *((_QWORD *)v16 - 1);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v107 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v112 = (char *)&v94 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v113 = (char *)&v94 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v110 = (char *)&v94 - v23;
  v24 = sub_2365B047C();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v94 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v94 - v29;
  v31 = v16[9];
  v109 = a1;
  v32 = a1 + v31;
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  v33((char *)&v94 - v29, v32, v24);
  v34 = *(_QWORD *)(a3 - 8);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v30, 1, a3);
  v105 = v11;
  if (v36 == 1)
  {
    v104 = 0;
    v37 = 0xF000000000000000;
    v38 = v25;
    v39 = v24;
  }
  else
  {
    v104 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v11 + 8) + 8))(a3);
    v37 = v40;
    v38 = v34;
    v39 = a3;
  }
  (*(void (**)(char *, uint64_t))(v38 + 8))(v30, v39);
  v33(v28, v114 + v16[9], v24);
  if (v35(v28, 1, a3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v24);
    v41 = v111;
    if (v37 >> 60 == 15)
    {
      v42 = 1;
      v44 = v112;
      v43 = v113;
      goto LABEL_13;
    }
    v45 = 0;
    v47 = 0xF000000000000000;
    v44 = v112;
    v43 = v113;
    goto LABEL_12;
  }
  v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v105 + 8) + 8))(a3);
  v47 = v46;
  (*(void (**)(char *, uint64_t))(v34 + 8))(v28, a3);
  v41 = v111;
  if (v37 >> 60 == 15)
  {
    v44 = v112;
    v43 = v113;
    if (v47 >> 60 == 15)
    {
      v42 = 1;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v44 = v112;
  v43 = v113;
  if (v47 >> 60 == 15)
  {
LABEL_12:
    sub_23646A42C(v104, v37);
    sub_23646A42C(v45, v47);
    v42 = 0;
    goto LABEL_13;
  }
  v85 = v104;
  sub_23646A418(v104, v37);
  sub_2364B7E28(v85, v37);
  v42 = v86;
  sub_23646A42C(v45, v47);
  sub_23646A42C(v85, v37);
  sub_23646A42C(v85, v37);
LABEL_13:
  v48 = v109;
  v49 = v110;
  v50 = v108;
  v51 = *(void (**)(char *, uint64_t, int *))(v41 + 16);
  v51(v110, v109, v16);
  v51(v43, v114, v16);
  if ((v42 & 1) == 0)
  {
    v60 = *(void (**)(char *, int *))(v41 + 8);
    v60(v43, v16);
    v60(v49, v16);
LABEL_33:
    v76 = v107;
    v51(v44, v48, v16);
    v51(v76, v114, v16);
LABEL_34:
    v60(v76, v16);
    v60(v44, v16);
LABEL_35:
    v84 = 0;
    return v84 & 1;
  }
  v52 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
  v53 = v101;
  v54 = v102;
  v52(v101, &v49[v16[10]], v102);
  v55 = AssociatedTypeWitness;
  v56 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48);
  if (v57(v53, 1, AssociatedTypeWitness) == 1)
  {
    v94 = 0;
    v104 = 0xF000000000000000;
    v58 = v50;
    v59 = v54;
  }
  else
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 8))(AssociatedTypeWitness);
    v55 = AssociatedTypeWitness;
    v94 = v62;
    v104 = v63;
    v58 = v56;
    v59 = AssociatedTypeWitness;
  }
  v64 = v54;
  (*(void (**)(char *, uint64_t))(v58 + 8))(v53, v59);
  v65 = v103;
  v52(v103, &v113[v16[10]], v64);
  if (v57(v65, 1, v55) == 1)
  {
    (*(void (**)(char *, uint64_t))(v108 + 8))(v65, v64);
    v66 = 0;
    v67 = 0xF000000000000000;
    v68 = v104;
    v48 = v109;
    v44 = v112;
    v69 = v113;
    v70 = v111;
    v71 = v94;
    if (v104 >> 60 != 15)
      goto LABEL_31;
    goto LABEL_23;
  }
  v72 = swift_getAssociatedConformanceWitness();
  v73 = v55;
  v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v72 + 8) + 8))(v55);
  v74 = v65;
  v67 = v75;
  (*(void (**)(char *, uint64_t))(v56 + 8))(v74, v73);
  v68 = v104;
  v70 = v111;
  v44 = v112;
  if (v104 >> 60 == 15)
  {
    v48 = v109;
    v69 = v113;
    v71 = v94;
LABEL_23:
    v60 = *(void (**)(char *, int *))(v70 + 8);
    v60(v69, v16);
    v60(v110, v16);
    if (v67 >> 60 != 15)
    {
LABEL_32:
      sub_23646A42C(v71, v68);
      sub_23646A42C(v66, v67);
      goto LABEL_33;
    }
    sub_23646A42C(v71, v68);
    v51(v44, v48, v16);
    v76 = v107;
    v51(v107, v114, v16);
    goto LABEL_25;
  }
  if (v67 >> 60 == 15)
  {
    v48 = v109;
    v69 = v113;
    v71 = v94;
LABEL_31:
    sub_236468CBC(v71, v68);
    v60 = *(void (**)(char *, int *))(v70 + 8);
    v60(v69, v16);
    v60(v110, v16);
    sub_23646A42C(v71, v68);
    goto LABEL_32;
  }
  v89 = v94;
  sub_23646A418(v94, v104);
  sub_2364B7E28(v89, v68);
  v91 = v90;
  sub_23646A42C(v66, v67);
  sub_23646A42C(v89, v68);
  v60 = *(void (**)(char *, int *))(v70 + 8);
  v60(v113, v16);
  v60(v110, v16);
  sub_23646A42C(v89, v68);
  v51(v44, v109, v16);
  v76 = v107;
  v51(v107, v114, v16);
  if ((v91 & 1) == 0)
    goto LABEL_34;
LABEL_25:
  v77 = v16[11];
  v78 = (uint64_t)&v76[v77];
  v79 = v99;
  v80 = v99 + *(int *)(v97 + 48);
  sub_2364B3924((uint64_t)&v44[v77], v99);
  sub_2364B3924(v78, v80);
  v81 = v98;
  v82 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v98 + 48);
  v83 = v100;
  if (v82(v79, 1, v100) != 1)
  {
    v88 = v96;
    sub_2364B3924(v79, v96);
    if (v82(v80, 1, v83) != 1)
    {
      v92 = v95;
      (*(void (**)(char *, uint64_t, uint64_t))(v81 + 32))(v95, v80, v83);
      sub_23644F0B8(&qword_2563E7350, (uint64_t (*)(uint64_t))MEMORY[0x24BDC63E0], MEMORY[0x24BDC6400]);
      v84 = sub_2365B0014();
      v93 = *(void (**)(char *, uint64_t))(v81 + 8);
      v93(v92, v83);
      v60(v107, v16);
      v60(v44, v16);
      v93((char *)v88, v83);
      sub_236465998(v79, qword_2563E4E68);
      return v84 & 1;
    }
    v60(v107, v16);
    v60(v44, v16);
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v88, v83);
    goto LABEL_39;
  }
  v60(v76, v16);
  v60(v44, v16);
  if (v82(v80, 1, v83) != 1)
  {
LABEL_39:
    sub_236465998(v79, &qword_2563E7348);
    goto LABEL_35;
  }
  sub_236465998(v79, qword_2563E4E68);
  v84 = 1;
  return v84 & 1;
}

uint64_t CryptographicIdentity.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t AssociatedConformanceWitness;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v41 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_2563E4E68);
  MEMORY[0x24BDAC7A8](v4);
  v40 = (uint64_t)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = sub_2365B047C();
  v37 = *(_QWORD *)(v9 - 8);
  v38 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v36 - v10;
  v12 = sub_2365B047C();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v36 - v14;
  v16 = *(int *)(a2 + 36);
  v39 = v2;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v2 + v16, v12);
  v17 = *(_QWORD *)(v6 - 8);
  v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v6);
  v36[1] = v7;
  if (v18 == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    sub_2365B0A04();
  }
  else
  {
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 8) + 8))(v6);
    v21 = v20;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v15, v6);
    sub_2365B0A04();
    sub_236468CBC(v19, v21);
    sub_2365AF954();
    sub_236468D44(v19, v21);
    sub_236468D44(v19, v21);
  }
  v22 = v38;
  v23 = v39;
  v24 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v11, v39 + *(int *)(a2 + 40), v38);
  v25 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v11, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v22);
    v26 = v41;
    sub_2365B0A04();
  }
  else
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 8))(AssociatedTypeWitness);
    v30 = v29;
    (*(void (**)(char *, uint64_t))(v25 + 8))(v11, AssociatedTypeWitness);
    v26 = v41;
    sub_2365B0A04();
    sub_236468CBC(v28, v30);
    sub_2365AF954();
    sub_236468D44(v28, v30);
    sub_236468D44(v28, v30);
  }
  v31 = v40;
  sub_2364B3924(v23 + *(int *)(a2 + 44), v40);
  v32 = sub_2365AFE88();
  v33 = *(_QWORD *)(v32 - 8);
  v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32);
  if ((_DWORD)v34 == 1)
    return sub_236465998(v31, qword_2563E4E68);
  MEMORY[0x24BDAC7A8](v34);
  v36[-2] = v26;
  sub_2365AFE70();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
}

uint64_t CryptographicIdentity.hashValue.getter(uint64_t a1)
{
  _BYTE v3[72];

  sub_2365B09E0();
  CryptographicIdentity.hash(into:)((uint64_t)v3, a1);
  return sub_2365B0A34();
}

uint64_t sub_2364B4D28@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return CryptographicIdentity.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t sub_2364B4D44(_QWORD *a1, uint64_t a2)
{
  return CryptographicIdentity.encode(to:)(a1, a2);
}

uint64_t sub_2364B4D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static CryptographicIdentity.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t sub_2364B4D6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2364B6914(a1, a2, a3, (void (*)(_BYTE *, uint64_t))CryptographicIdentity.hash(into:));
}

uint64_t CryptographicIdentity.Info.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void CryptographicIdentity.Info.kind.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

BOOL static CryptographicIdentity.Info.Kind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t CryptographicIdentity.Info.Kind.hash(into:)()
{
  return sub_2365B09F8();
}

uint64_t sub_2364B4DEC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C616E756D6D6F63 && a2 == 0xE800000000000000;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C616E6F73726570 && a2 == 0xE800000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x646E756F42706573 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_2364B4F40(char a1)
{
  return *(_QWORD *)&aCommunalperson[8 * a1];
}

BOOL sub_2364B4F58(char *a1, char *a2)
{
  return sub_236473D68(*a1, *a2);
}

uint64_t sub_2364B4F6C()
{
  return sub_2364742C8();
}

uint64_t sub_2364B4F78()
{
  return sub_236473D78();
}

uint64_t sub_2364B4F84()
{
  sub_2365B09E0();
  sub_236473D78();
  return sub_2365B0A34();
}

uint64_t sub_2364B4FC8()
{
  char *v0;

  return sub_2364B4F40(*v0);
}

uint64_t sub_2364B4FD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2364B4DEC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2364B5000@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23647A7CC();
  *a1 = result;
  return result;
}

uint64_t sub_2364B5028(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BA840, a1);
  return sub_2365B0AD0();
}

uint64_t sub_2364B505C(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BA840, a1);
  return sub_2365B0ADC();
}

uint64_t sub_2364B5090@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  return sub_2364B516C(a1, (uint64_t (*)(_QWORD, _QWORD))sub_236452AEC, a2);
}

uint64_t sub_2364B509C(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BA890, a1);
  return sub_2365B0AD0();
}

uint64_t sub_2364B50D0(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BA890, a1);
  return sub_2365B0ADC();
}

uint64_t sub_2364B5104(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BA8E0, a1);
  return sub_2365B0AD0();
}

uint64_t sub_2364B5138(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BA8E0, a1);
  return sub_2365B0ADC();
}

uint64_t sub_2364B516C@<X0>(uint64_t a1@<X2>, uint64_t (*a2)(_QWORD, _QWORD)@<X4>, _BYTE *a3@<X8>)
{
  char v4;
  uint64_t result;

  v4 = a2(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  result = swift_bridgeObjectRelease();
  *a3 = v4 & 1;
  return result;
}

uint64_t sub_2364B51B0(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BA930, a1);
  return sub_2365B0AD0();
}

uint64_t sub_2364B51E4(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BA930, a1);
  return sub_2365B0ADC();
}

uint64_t CryptographicIdentity.Info.Kind.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  char v48;

  v5 = v4;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = type metadata accessor for CryptographicIdentity.Info.Kind.SepBoundCodingKeys(255, v7, v8, a4);
  v43 = MEMORY[0x23B7F5164](&unk_2365BA930, v9);
  v44 = v9;
  v10 = sub_2365B0854();
  v41 = *(_QWORD *)(v10 - 8);
  v42 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v40 = (char *)&v31 - v11;
  v13 = type metadata accessor for CryptographicIdentity.Info.Kind.PersonalCodingKeys(255, v7, v8, v12);
  v38 = MEMORY[0x23B7F5164](&unk_2365BA8E0, v13);
  v39 = v13;
  v14 = sub_2365B0854();
  v36 = *(_QWORD *)(v14 - 8);
  v37 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v35 = (char *)&v31 - v15;
  v17 = type metadata accessor for CryptographicIdentity.Info.Kind.CommunalCodingKeys(255, v7, v8, v16);
  v34 = MEMORY[0x23B7F5164](&unk_2365BA890, v17);
  v18 = sub_2365B0854();
  v32 = *(_QWORD *)(v18 - 8);
  v33 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v31 = (char *)&v31 - v19;
  v21 = type metadata accessor for CryptographicIdentity.Info.Kind.CodingKeys(255, v7, v8, v20);
  MEMORY[0x23B7F5164](&unk_2365BA840, v21);
  v22 = sub_2365B0854();
  v45 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v31 - v23;
  v25 = *v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2365B0AAC();
  if (v25)
  {
    if (v25 == 1)
    {
      v47 = 1;
      v26 = v35;
      sub_2365B07B8();
      v28 = v36;
      v27 = v37;
    }
    else
    {
      v48 = 2;
      v26 = v40;
      sub_2365B07B8();
      v28 = v41;
      v27 = v42;
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v26, v27);
  }
  else
  {
    v46 = 0;
    v29 = v31;
    sub_2365B07B8();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v29, v33);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v24, v22);
}

uint64_t CryptographicIdentity.Info.Kind.hashValue.getter()
{
  sub_2365B09E0();
  sub_2365B09F8();
  return sub_2365B0A34();
}

uint64_t CryptographicIdentity.Info.Kind.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;

  v69 = a5;
  v67 = type metadata accessor for CryptographicIdentity.Info.Kind.SepBoundCodingKeys(255, a2, a3, a4);
  v68 = MEMORY[0x23B7F5164](&unk_2365BA930, v67);
  v61 = sub_2365B07AC();
  v60 = *(_QWORD *)(v61 - 8);
  MEMORY[0x24BDAC7A8](v61);
  v63 = (char *)&v51 - v8;
  v10 = type metadata accessor for CryptographicIdentity.Info.Kind.PersonalCodingKeys(255, a2, a3, v9);
  v65 = MEMORY[0x23B7F5164](&unk_2365BA8E0, v10);
  v66 = v10;
  v59 = sub_2365B07AC();
  v58 = *(_QWORD *)(v59 - 8);
  MEMORY[0x24BDAC7A8](v59);
  v64 = (char *)&v51 - v11;
  v13 = type metadata accessor for CryptographicIdentity.Info.Kind.CommunalCodingKeys(255, a2, a3, v12);
  v62 = MEMORY[0x23B7F5164](&unk_2365BA890, v13);
  v57 = sub_2365B07AC();
  v56 = *(_QWORD *)(v57 - 8);
  MEMORY[0x24BDAC7A8](v57);
  v71 = (char *)&v51 - v14;
  v72 = a2;
  v70 = a3;
  v16 = type metadata accessor for CryptographicIdentity.Info.Kind.CodingKeys(255, a2, a3, v15);
  MEMORY[0x23B7F5164](&unk_2365BA840, v16);
  v17 = sub_2365B07AC();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v51 - v19;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v21 = v77;
  sub_2365B0A7C();
  if (v21)
    goto LABEL_11;
  v22 = v71;
  v52 = v13;
  v23 = v72;
  v55 = v18;
  v53 = 0;
  v54 = a1;
  v77 = v17;
  *(_QWORD *)&v73 = sub_2365B07A0();
  v24 = sub_2365B01A0();
  MEMORY[0x23B7F5164](MEMORY[0x24BEE12C8], v24);
  *(_QWORD *)&v75 = sub_2365B04DC();
  *((_QWORD *)&v75 + 1) = v25;
  *(_QWORD *)&v76 = v26;
  *((_QWORD *)&v76 + 1) = v27;
  v28 = sub_2365B04D0();
  MEMORY[0x23B7F5164](MEMORY[0x24BEE2190], v28);
  sub_2365B0368();
  v29 = v73;
  v30 = v20;
  if (v73 == 3 || (v51 = v75, v73 = v75, v74 = v76, (sub_2365B0374() & 1) == 0))
  {
    v35 = sub_2365B05B4();
    swift_allocError();
    v37 = v36;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E47A8);
    *v37 = type metadata accessor for CryptographicIdentity.Info.Kind(0, v23, v70, v38);
    v39 = v77;
    sub_2365B0704();
    sub_2365B059C();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v37, *MEMORY[0x24BEE26D0], v35);
    swift_willThrow();
    swift_unknownObjectRelease();
    v40 = *(void (**)(char *, uint64_t))(v55 + 8);
    v41 = v30;
    v42 = v39;
LABEL_9:
    v40(v41, v42);
    goto LABEL_10;
  }
  if (!v29)
  {
    LOBYTE(v73) = 0;
    v45 = v77;
    v46 = v53;
    sub_2365B06F8();
    if (!v46)
    {
      (*(void (**)(char *, uint64_t))(v56 + 8))(v22, v57);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v20, v45);
      goto LABEL_20;
    }
    swift_unknownObjectRelease();
    v40 = *(void (**)(char *, uint64_t))(v55 + 8);
    goto LABEL_17;
  }
  if (v29 != 1)
  {
    LOBYTE(v73) = 2;
    v47 = v63;
    v45 = v77;
    v48 = v53;
    sub_2365B06F8();
    v49 = v69;
    v50 = v55;
    if (!v48)
    {
      (*(void (**)(char *, uint64_t))(v60 + 8))(v47, v61);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v30, v45);
      goto LABEL_22;
    }
    swift_unknownObjectRelease();
    v40 = *(void (**)(char *, uint64_t))(v50 + 8);
LABEL_17:
    v41 = v30;
    v42 = v45;
    goto LABEL_9;
  }
  LOBYTE(v73) = 1;
  v31 = v64;
  v32 = v77;
  v33 = v53;
  sub_2365B06F8();
  v34 = v55;
  if (!v33)
  {
    (*(void (**)(char *, uint64_t))(v58 + 8))(v31, v59);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v30, v32);
LABEL_20:
    v49 = v69;
LABEL_22:
    *v49 = v29;
    v43 = (uint64_t)v54;
    return __swift_destroy_boxed_opaque_existential_1(v43);
  }
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v30, v32);
LABEL_10:
  a1 = v54;
LABEL_11:
  v43 = (uint64_t)a1;
  return __swift_destroy_boxed_opaque_existential_1(v43);
}

uint64_t sub_2364B5B54()
{
  sub_2365B09E0();
  CryptographicIdentity.Info.Kind.hash(into:)();
  return sub_2365B0A34();
}

uint64_t sub_2364B5B8C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  return CryptographicIdentity.Info.Kind.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4);
}

uint64_t sub_2364B5BA8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CryptographicIdentity.Info.Kind.encode(to:)(a1, a2, a3, a4);
}

uint64_t CryptographicIdentity.Info.intoSalt()()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *v0;
  v2 = v0[1];
  swift_bridgeObjectRetain();
  return sub_2364B3B0C(v1, v2);
}

BOOL static CryptographicIdentity.Info.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  char v5;
  _BOOL8 result;

  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = *(unsigned __int8 *)(a2 + 16);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
    return v2 == v3;
  v5 = sub_2365B08CC();
  result = 0;
  if ((v5 & 1) != 0)
    return v2 == v3;
  return result;
}

uint64_t CryptographicIdentity.Info.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  return sub_2365B09F8();
}

BOOL sub_2364B5C9C(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_2364B5CAC()
{
  return sub_2365B09F8();
}

uint64_t sub_2364B5CD0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1684957547 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_2364B5D98()
{
  sub_2365B09E0();
  sub_2365B09F8();
  return sub_2365B0A34();
}

uint64_t sub_2364B5DDC(char a1)
{
  if ((a1 & 1) != 0)
    return 1684957547;
  else
    return 25705;
}

BOOL sub_2364B5E00(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_2364B5C9C(*a1, *a2);
}

uint64_t sub_2364B5E14()
{
  return sub_2364B5D98();
}

uint64_t sub_2364B5E24()
{
  return sub_2364B5CAC();
}

uint64_t sub_2364B5E34()
{
  sub_2365B09E0();
  sub_2364B5CAC();
  return sub_2365B0A34();
}

uint64_t sub_2364B5E78()
{
  char *v0;

  return sub_2364B5DDC(*v0);
}

uint64_t sub_2364B5E88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2364B5CD0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2364B5EB4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2364B83E0();
  *a1 = result;
  return result;
}

uint64_t sub_2364B5EDC(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BA7F0, a1);
  return sub_2365B0AD0();
}

uint64_t sub_2364B5F10(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BA7F0, a1);
  return sub_2365B0ADC();
}

uint64_t CryptographicIdentity.Info.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  char v24;
  char v25;

  v6 = *(_QWORD *)(a2 + 16);
  v17 = *(_QWORD *)(a2 + 24);
  v18 = v6;
  v7 = type metadata accessor for CryptographicIdentity.Info.CodingKeys(255, v6, v17, a4);
  MEMORY[0x23B7F5164](&unk_2365BA7F0, v7);
  v8 = sub_2365B0854();
  v20 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v16 - v9;
  v19 = *v4;
  v22 = *((unsigned __int8 *)v4 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2365B0AAC();
  v25 = 0;
  v11 = v21;
  sub_2365B0800();
  if (v11)
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v10, v8);
  v14 = v20;
  v24 = v22;
  v23 = 1;
  v15 = type metadata accessor for CryptographicIdentity.Info.Kind(0, v18, v17, v12);
  MEMORY[0x23B7F5164](&protocol conformance descriptor for CryptographicIdentity<A>.Info.Kind, v15);
  sub_2365B0824();
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v10, v8);
}

uint64_t CryptographicIdentity.Info.hashValue.getter()
{
  sub_2365B09E0();
  CryptographicIdentity.Info.hash(into:)();
  return sub_2365B0A34();
}

uint64_t CryptographicIdentity.Info.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;

  v24 = a5;
  v25 = a3;
  v8 = type metadata accessor for CryptographicIdentity.Info.CodingKeys(255, a2, a3, a4);
  MEMORY[0x23B7F5164](&unk_2365BA7F0, v8);
  v26 = sub_2365B07AC();
  v9 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v11 = (char *)&v23 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2365B0A7C();
  if (v5)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v12 = v9;
  v29 = 0;
  v13 = v25;
  v14 = v26;
  v15 = sub_2365B074C();
  v17 = v16;
  v23 = v15;
  v19 = type metadata accessor for CryptographicIdentity.Info.Kind(0, a2, v13, v18);
  v27 = 1;
  swift_bridgeObjectRetain();
  MEMORY[0x23B7F5164](&protocol conformance descriptor for CryptographicIdentity<A>.Info.Kind, v19);
  sub_2365B0770();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v11, v14);
  v20 = v28;
  v21 = v24;
  *v24 = v23;
  v21[1] = v17;
  *((_BYTE *)v21 + 16) = v20;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2364B6310@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  return CryptographicIdentity.Info.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4);
}

uint64_t sub_2364B632C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CryptographicIdentity.Info.encode(to:)(a1, a2, a3, a4);
}

uint64_t sub_2364B634C()
{
  sub_2365B09E0();
  CryptographicIdentity.Info.hash(into:)();
  return sub_2365B0A34();
}

uint64_t CryptographicIdentity.ExportedMaterial.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for CryptographicIdentity(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  return CryptographicIdentity.hash(into:)(a1, v5);
}

uint64_t sub_2364B63BC(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x797469746E656469 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_2364B6440()
{
  return 0x797469746E656469;
}

uint64_t sub_2364B6458@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2364B63BC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_2364B6488@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_236452AEC();
  *a1 = result & 1;
  return result;
}

uint64_t sub_2364B64B4(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BA7A0, a1);
  return sub_2365B0AD0();
}

uint64_t sub_2364B64E8(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BA7A0, a1);
  return sub_2365B0ADC();
}

uint64_t CryptographicIdentity.ExportedMaterial.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = type metadata accessor for CryptographicIdentity.ExportedMaterial.CodingKeys(255, v5, v6, a4);
  MEMORY[0x23B7F5164](&unk_2365BA7A0, v7);
  v8 = sub_2365B0854();
  v14 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v14 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2365B0AAC();
  v12 = type metadata accessor for CryptographicIdentity(0, v5, v6, v11);
  MEMORY[0x23B7F5164](&protocol conformance descriptor for CryptographicIdentity<A>, v12);
  sub_2365B0824();
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v10, v8);
}

uint64_t CryptographicIdentity.ExportedMaterial.hashValue.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[72];

  sub_2365B09E0();
  v3 = type metadata accessor for CryptographicIdentity(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v2);
  CryptographicIdentity.hash(into:)((uint64_t)v5, v3);
  return sub_2365B0A34();
}

uint64_t CryptographicIdentity.ExportedMaterial.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;

  v28 = a5;
  v29 = type metadata accessor for CryptographicIdentity(0, a2, a3, a4);
  v27 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v30 = (char *)&v24 - v8;
  v10 = type metadata accessor for CryptographicIdentity.ExportedMaterial.CodingKeys(255, a2, a3, v9);
  MEMORY[0x23B7F5164](&unk_2365BA7A0, v10);
  v31 = sub_2365B07AC();
  v25 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v12 = (char *)&v24 - v11;
  v24 = type metadata accessor for CryptographicIdentity.ExportedMaterial(0, a2, a3, v13);
  v14 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v16 = (char *)&v24 - v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v26 = v12;
  v17 = v32;
  sub_2365B0A7C();
  if (!v17)
  {
    v32 = v14;
    v18 = v25;
    v20 = v27;
    v19 = v28;
    v21 = v29;
    MEMORY[0x23B7F5164](&protocol conformance descriptor for CryptographicIdentity<A>, v29);
    v22 = v26;
    sub_2365B0770();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v22, v31);
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v16, v30, v21);
    (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(v19, v16, v24);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_2364B68C4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return CryptographicIdentity.ExportedMaterial.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4);
}

uint64_t sub_2364B68E0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CryptographicIdentity.ExportedMaterial.encode(to:)(a1, a2, a3, a4);
}

uint64_t sub_2364B68F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static CryptographicIdentity.ExportedMaterial.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t sub_2364B6908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2364B6914(a1, a2, a3, (void (*)(_BYTE *, uint64_t))CryptographicIdentity.ExportedMaterial.hash(into:));
}

uint64_t sub_2364B6914(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, uint64_t))
{
  _BYTE v7[72];

  sub_2365B09E0();
  a4(v7, a2);
  return sub_2365B0A34();
}

uint64_t CryptographicIdentity<>.encrypt<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];

  v20[3] = a3;
  v20[1] = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7358);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_2365AFE88();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_2364B1C04(a1, (uint64_t)v13);
  if (!v4)
  {
    v15 = a4;
    v16 = sub_2365AFD98();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v9, 1, 1, v16);
    v17 = sub_2365AFD8C();
    v19 = v18;
    sub_236465998((uint64_t)v9, &qword_2563E7358);
    result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    *v15 = v17;
    v15[1] = v19;
  }
  return result;
}

uint64_t CryptographicIdentity<>.decrypt<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v22[1] = a4;
  v10 = sub_2365AFE88();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_2364B1C04(a2, (uint64_t)v13);
  if (!v5)
  {
    v15 = a5;
    v16 = sub_2364B83E8(a1, a3);
    v18 = v17;
    v19 = sub_2365AFD80();
    v21 = v20;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    result = sub_236468D44(v16, v18);
    *v15 = v19;
    v15[1] = v21;
  }
  return result;
}

uint64_t CryptographicIdentity<>.derived(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t AssociatedConformanceWitness;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;

  v83 = a1;
  v80 = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(qword_2563E4E68);
  MEMORY[0x24BDAC7A8](v6);
  v79 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = a3;
  v78 = *(_QWORD *)(a3 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v81 = *(_QWORD *)(v78 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = sub_2365B047C();
  v74 = *(_QWORD *)(v10 - 8);
  v75 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v77 = (char *)&v64 - v11;
  v12 = sub_2365B047C();
  MEMORY[0x24BDAC7A8](v12);
  v76 = (char *)&v64 - v13;
  v14 = sub_2365AFE88();
  v72 = *(_QWORD *)(v14 - 8);
  v73 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v71 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_2365AFE64();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = AssociatedTypeWitness;
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v22 = MEMORY[0x24BDAC7A8](v18);
  v85 = v8;
  v86 = (uint64_t)&v64 - v23;
  v24 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = v93;
  v28 = v87;
  sub_2364B1990(a2, (uint64_t)v26);
  if (v28)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(v27, a2);
  v68 = v20;
  v66 = v17;
  v67 = v16;
  v69 = v21;
  v70 = v26;
  v87 = v24;
  v30 = v84;
  v29 = v85;
  sub_2364B1AB4(a2, v86);
  v64 = a2;
  v32 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(v81 + 8) + 8);
  v83 = 0;
  v33 = v32(v29);
  v35 = v34;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(AssociatedConformanceWitness + 8) + 8) + 8))(v30);
  v39 = v38;
  v88 = v33;
  v89 = v35;
  sub_236468CBC(v33, v35);
  sub_2364B79F8(v37, v39);
  v40 = v39;
  v41 = v93;
  sub_236468D44(v37, v40);
  sub_236468D44(v33, v35);
  v65 = v88;
  v81 = v89;
  v43 = *(_QWORD *)v41;
  v42 = *(_QWORD *)(v41 + 8);
  swift_bridgeObjectRetain();
  v44 = sub_2364B3B0C(v43, v42);
  v46 = v45;
  v47 = v68;
  v48 = v83;
  sub_2365AFED0();
  v49 = v87;
  if (v48)
  {
    sub_236468D44(v44, v46);
    sub_236468D44(v65, v81);
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v86, v84);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v70, v85);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 8))(v41, v64);
  }
  else
  {
    sub_2365AFF3C();
    v50 = v47;
    v83 = 0;
    v51 = v65;
    v88 = v65;
    v89 = v81;
    v91 = v44;
    v92 = v46;
    v52 = v46;
    sub_23644F0B8(qword_2563E7360, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
    sub_23646C3A4();
    v53 = v71;
    sub_2365AFE58();
    (*(void (**)(char *, uint64_t))(v66 + 8))(v50, v67);
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v86, v84);
    sub_236468D44(v44, v52);
    sub_236468D44(v51, v81);
    v54 = *(_QWORD *)(v41 + 8);
    v55 = *(_BYTE *)(v41 + 16);
    v88 = *(_QWORD *)v41;
    v89 = v54;
    v90 = v55;
    v56 = (uint64_t)v76;
    v57 = v85;
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v76, v70, v85);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v49 + 56))(v56, 0, 1, v57);
    v58 = v64;
    v59 = (uint64_t)v77;
    (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v77, v41 + *(int *)(v64 + 40), v75);
    v60 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 8);
    swift_bridgeObjectRetain();
    v60(v41, v58);
    v62 = v72;
    v61 = v73;
    v63 = (uint64_t)v79;
    (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v79, v53, v73);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v62 + 56))(v63, 0, 1, v61);
    return sub_2364B1FB4((uint64_t)&v88, v56, v59, v63, v57, v78, v80);
  }
}

void sub_2364B721C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_2364B727C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x2364B7460);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_2364B7484(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = sub_2365B00EC();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x23B7F40E4](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

void sub_2364B74FC()
{
  __asm { BR              X11 }
}

_QWORD *sub_2364B755C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;

  v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  v10 = BYTE4(a1);
  v11 = BYTE5(a1);
  v12 = BYTE6(a1);
  result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2)
    result = v7;
  v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *v1 = v8;
  v1[1] = v6;
  return result;
}

_BYTE *sub_2364B77EC@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_2364B8128(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_2364B8268((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_2364B81E8((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

_QWORD *sub_2364B7860(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a3)
  {
    result = a1(&v6, a3, a4 - a3);
    if (v4)
      return result;
    return (_QWORD *)v6;
  }
  result = a1(&v6, 0, 0);
  if (!v4)
    return (_QWORD *)v6;
  return result;
}

char *sub_2364B78C4(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)sub_2365AF858();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)sub_2365AF87C();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = sub_2365AF870();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

uint64_t sub_2364B7970@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  char v3;
  uint64_t v4;

  if (result)
  {
    swift_bridgeObjectRetain();
    result = sub_2365B0584();
    if ((v3 & 1) == 0)
    {
      v4 = result;
      result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_2364B79F8(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x24BDAC8D0];
  v3[3] = MEMORY[0x24BDCDDE8];
  v3[4] = MEMORY[0x24BDCDDC8];
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_2364B7A5C
     + *((int *)qword_2364B7C00 + (__swift_project_boxed_opaque_existential_1(v3, MEMORY[0x24BDCDDE8])[1] >> 62));
  __asm { BR              X10 }
}

uint64_t sub_2364B7A6C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v3;

  sub_236468CBC(v1, v0);
  sub_2365AF930();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v3);
}

uint64_t sub_2364B7C10(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_2365AF858();
  if (!result || (result = sub_2365AF87C(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_2365AF870();
      return sub_2365AF930();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_2364B7CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_2364B721C((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_2364B7D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = sub_2365AF858();
  v11 = result;
  if (result)
  {
    result = sub_2365AF87C();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = sub_2365AF870();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_2364B721C(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_2364B7E28(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_2364B7E74()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_2364B7EA8 + *((int *)qword_2364B8080 + (v0 >> 62))))();
}

uint64_t sub_2364B7EB8@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t sub_2364B80A0()
{
  return sub_2365B09EC();
}

uint64_t type metadata accessor for CryptographicIdentity.Info.Kind.SepBoundCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CryptographicIdentity.Info.Kind.SepBoundCodingKeys);
}

uint64_t type metadata accessor for CryptographicIdentity.Info.Kind.PersonalCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CryptographicIdentity.Info.Kind.PersonalCodingKeys);
}

uint64_t type metadata accessor for CryptographicIdentity.Info.Kind.CommunalCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CryptographicIdentity.Info.Kind.CommunalCodingKeys);
}

uint64_t type metadata accessor for CryptographicIdentity.Info.Kind.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CryptographicIdentity.Info.Kind.CodingKeys);
}

uint64_t type metadata accessor for CryptographicIdentity.Info.Kind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CryptographicIdentity.Info.Kind);
}

uint64_t type metadata accessor for CryptographicIdentity.Info.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CryptographicIdentity.Info.CodingKeys);
}

uint64_t type metadata accessor for CryptographicIdentity.ExportedMaterial.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CryptographicIdentity.ExportedMaterial.CodingKeys);
}

uint64_t type metadata accessor for CryptographicIdentity.ExportedMaterial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CryptographicIdentity.ExportedMaterial);
}

uint64_t sub_2364B8128(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_2364B81E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_2365AF888();
  swift_allocObject();
  result = sub_2365AF84C();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_2364B8268(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_2365AF888();
  swift_allocObject();
  result = sub_2365AF84C();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_2365AF918();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

_BYTE *sub_2364B82E0(_BYTE *result, _BYTE *a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (_BYTE *)sub_2364B8128(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (_BYTE *)sub_2364B8268((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (_BYTE *)sub_2364B81E8((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t sub_2364B8344(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      sub_2365AF888();
      swift_allocObject();
      sub_2365AF864();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_2365AF918();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t sub_2364B83E0()
{
  return 2;
}

uint64_t sub_2364B83E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_2365B035C() >= 28)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
    return sub_2365AF960();
  }
  else
  {
    v7 = sub_2365AFDA4();
    sub_23644F0B8(&qword_2563E77E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDC61A8], MEMORY[0x24BDC61C0]);
    swift_allocError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v8, *MEMORY[0x24BDC61A0], v7);
    return swift_willThrow();
  }
}

uint64_t sub_2364B8500(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2364B85A0(a1, a2, a3, (uint64_t)&protocol conformance descriptor for CryptographicIdentity<A>, (uint64_t)&protocol conformance descriptor for CryptographicIdentity<A>, (uint64_t)&protocol conformance descriptor for CryptographicIdentity<A>);
}

void sub_2364B851C()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364B852C()
{
  JUMPOUT(0x23B7F5164);
}

uint64_t sub_2364B853C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2364B85A0(a1, a2, a3, (uint64_t)&protocol conformance descriptor for CryptographicIdentity<A>.Info.Kind, (uint64_t)&protocol conformance descriptor for CryptographicIdentity<A>.Info.Kind, (uint64_t)&protocol conformance descriptor for CryptographicIdentity<A>.Info.Kind);
}

uint64_t sub_2364B8558(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2364B85A0(a1, a2, a3, (uint64_t)&protocol conformance descriptor for CryptographicIdentity<A>.Info, (uint64_t)&protocol conformance descriptor for CryptographicIdentity<A>.Info, (uint64_t)&protocol conformance descriptor for CryptographicIdentity<A>.Info);
}

void sub_2364B8574()
{
  JUMPOUT(0x23B7F5164);
}

uint64_t sub_2364B8584(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2364B85A0(a1, a2, a3, (uint64_t)&protocol conformance descriptor for CryptographicIdentity<A>.ExportedMaterial, (uint64_t)&protocol conformance descriptor for CryptographicIdentity<A>.ExportedMaterial, (uint64_t)&protocol conformance descriptor for CryptographicIdentity<A>.ExportedMaterial);
}

uint64_t sub_2364B85A0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  a1[1] = MEMORY[0x23B7F5164](a4);
  a1[2] = MEMORY[0x23B7F5164](a5, a2);
  result = MEMORY[0x23B7F5164](a6, a2);
  a1[3] = result;
  return result;
}

void sub_2364B85FC()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364B860C()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_2365B047C();
  if (v0 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    sub_2365B047C();
    if (v1 <= 0x3F)
    {
      sub_2364B8CFC();
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t sub_2364B86FC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t AssociatedTypeWitness;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  if ((_DWORD)v7)
    v8 = v7 - 1;
  else
    v8 = 0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if ((_DWORD)v10)
    v11 = v10 - 1;
  else
    v11 = 0;
  if (v8 <= v11)
    v12 = v11;
  else
    v12 = v8;
  v13 = sub_2365AFE88();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int *)(v14 + 84);
  v16 = v15 - 1;
  if (!(_DWORD)v15)
    v16 = 0;
  if (v12 <= v16)
    v17 = v16;
  else
    v17 = v12;
  if (v17 <= 0x7FFFFFFF)
    v18 = 0x7FFFFFFF;
  else
    v18 = v17;
  v19 = *(_QWORD *)(v6 + 64);
  if (!(_DWORD)v7)
    ++v19;
  if ((_DWORD)v10)
    v20 = *(_QWORD *)(v9 + 64);
  else
    v20 = *(_QWORD *)(v9 + 64) + 1;
  if ((_DWORD)v15)
    v21 = *(_QWORD *)(v14 + 64);
  else
    v21 = *(_QWORD *)(v14 + 64) + 1;
  if (!a2)
    return 0;
  v22 = v13;
  v23 = *(unsigned __int8 *)(v6 + 80);
  v24 = *(unsigned __int8 *)(v9 + 80);
  v25 = *(unsigned __int8 *)(v14 + 80);
  v26 = v20 + v25;
  if (a2 <= v18)
    goto LABEL_45;
  v27 = v21 + ((v26 + ((v19 + ((v23 + 17) & ~v23) + v24) & ~v24)) & ~v25);
  v28 = 8 * v27;
  if (v27 <= 3)
  {
    v30 = ((a2 - v18 + ~(-1 << v28)) >> v28) + 1;
    if (HIWORD(v30))
    {
      v29 = *(_DWORD *)(a1 + v27);
      if (!v29)
        goto LABEL_45;
      goto LABEL_36;
    }
    if (v30 > 0xFF)
    {
      v29 = *(unsigned __int16 *)(a1 + v27);
      if (!*(_WORD *)(a1 + v27))
        goto LABEL_45;
      goto LABEL_36;
    }
    if (v30 < 2)
    {
LABEL_45:
      if ((v17 & 0x80000000) == 0)
      {
        v33 = *(_QWORD *)(a1 + 8);
        if (v33 >= 0xFFFFFFFF)
          LODWORD(v33) = -1;
        return (v33 + 1);
      }
      v34 = (a1 + v23 + 17) & ~v23;
      if (v8 == v18)
      {
        if (v7 >= 2)
        {
          v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v34, v7, v5);
          goto LABEL_58;
        }
        return 0;
      }
      v36 = (v34 + v19 + v24) & ~v24;
      if (v11 == v18)
      {
        if (v10 < 2)
          return 0;
        v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v36, v10, AssociatedTypeWitness);
      }
      else
      {
        if (v15 < 2)
          return 0;
        v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))((v26 + v36) & ~v25, v15, v22);
      }
LABEL_58:
      if (v35 >= 2)
        return v35 - 1;
      else
        return 0;
    }
  }
  v29 = *(unsigned __int8 *)(a1 + v27);
  if (!*(_BYTE *)(a1 + v27))
    goto LABEL_45;
LABEL_36:
  v31 = (v29 - 1) << v28;
  if (v27 > 3)
    v31 = 0;
  if ((_DWORD)v27)
  {
    if (v27 <= 3)
      v32 = v27;
    else
      v32 = 4;
    __asm { BR              X12 }
  }
  return v18 + v31 + 1;
}

void sub_2364B89A0(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7)
    v8 = v7 - 1;
  else
    v8 = 0;
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10)
    v11 = v10 - 1;
  else
    v11 = 0;
  if (v8 <= v11)
    v12 = v11;
  else
    v12 = v8;
  v13 = sub_2365AFE88();
  v14 = 0;
  v15 = *(_QWORD *)(v13 - 8);
  v16 = *(_DWORD *)(v15 + 84);
  v17 = v16 - 1;
  if (!v16)
    v17 = 0;
  if (v12 <= v17)
    v18 = v17;
  else
    v18 = v12;
  if (v18 <= 0x7FFFFFFF)
    v19 = 0x7FFFFFFF;
  else
    v19 = v18;
  v20 = *(_QWORD *)(v6 + 64);
  if (!v7)
    ++v20;
  v21 = *(_QWORD *)(v9 + 64);
  if (!v10)
    ++v21;
  v22 = *(unsigned __int8 *)(v15 + 80);
  v23 = v21 + v22;
  v24 = *(_QWORD *)(v15 + 64);
  if (!v16)
    ++v24;
  v25 = v24
      + ((v23
        + ((v20
          + ((*(unsigned __int8 *)(v6 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
          + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))) & ~v22);
  if (a3 > v19)
  {
    if (v25 > 3)
    {
      v14 = 1u;
      if (v19 >= a2)
LABEL_40:
        __asm { BR              X4 }
LABEL_33:
      v27 = ~v19 + a2;
      if (v25 < 4)
      {
        if ((_DWORD)v25)
        {
          v29 = v14;
          v30 = v27 & ~(-1 << (8 * v25));
          bzero(a1, v25);
          if ((_DWORD)v25 == 3)
          {
            *(_WORD *)a1 = v30;
            a1[2] = BYTE2(v30);
            v14 = v29;
          }
          else
          {
            v14 = v29;
            if ((_DWORD)v25 == 2)
              *(_WORD *)a1 = v30;
            else
              *a1 = v30;
          }
        }
      }
      else
      {
        v28 = v14;
        bzero(a1, v25);
        v14 = v28;
        *(_DWORD *)a1 = v27;
      }
      __asm { BR              X10 }
    }
    v26 = ((a3 - v19 + ~(-1 << (8 * v25))) >> (8 * v25)) + 1;
    if (HIWORD(v26))
    {
      v14 = 4u;
      if (v19 >= a2)
        goto LABEL_40;
      goto LABEL_33;
    }
    if (v26 >= 0x100)
      v14 = 2;
    else
      v14 = v26 > 1;
  }
  if (v19 >= a2)
    goto LABEL_40;
  goto LABEL_33;
}

void sub_2364B8C8C()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = v0;
}

void sub_2364B8C94()
{
  __int16 v0;
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = v0;
}

void sub_2364B8CFC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2542A82B0)
  {
    sub_2365AFE88();
    v0 = sub_2365B047C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2542A82B0);
  }
}

uint64_t sub_2364B8D54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for CryptographicIdentity(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_2364B8DC0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  size_t v19;
  unint64_t v20;
  int v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char *v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  int v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void *v37;
  const void *v38;
  size_t v39;
  void *v40;
  const void *v41;
  size_t v43;
  unint64_t v44;
  uint64_t v45;
  size_t __n;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  uint64_t v50;
  uint64_t v51;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (*(_DWORD *)(v5 + 84))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v5 + 64) + 1;
  v45 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10;
  __n = v7;
  v12 = (v7 + ((v6 + 17) & ~(unint64_t)v6) + v11) & ~v11;
  v47 = v9;
  v48 = AssociatedTypeWitness;
  if (*(_DWORD *)(v9 + 84))
    v13 = *(_QWORD *)(v9 + 64);
  else
    v13 = *(_QWORD *)(v9 + 64) + 1;
  v14 = sub_2365AFE88();
  v15 = *(_QWORD *)(v14 - 8);
  v17 = *(_DWORD *)(v15 + 80);
  v16 = *(_DWORD *)(v15 + 84);
  v18 = v17;
  v49 = v13;
  v50 = v15;
  v51 = v14;
  v19 = *(_QWORD *)(v15 + 64);
  if (!v16)
    ++v19;
  v20 = v10 | v6 | (unint64_t)v17;
  v21 = (v10 | v6 | v17) & 0x100000;
  if (v20 > 7 || v21 != 0 || v19 + ((v13 + v18 + v12) & ~v18) > 0x18)
  {
    v24 = *a2;
    *(_QWORD *)a1 = *a2;
    v25 = v24 + ((v20 & 0xF8 ^ 0x1F8) & (v20 + 16));
    swift_retain();
  }
  else
  {
    v43 = v19;
    v44 = ~(unint64_t)v10;
    v26 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v26;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v27 = (uint64_t)a2 + v6;
    v28 = (void *)((a1 + v6 + 17) & ~(unint64_t)v6);
    v29 = (char *)((v27 + 17) & ~(unint64_t)v6);
    v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
    swift_bridgeObjectRetain();
    v31 = v30(v29, 1, v45);
    v25 = a1;
    if (v31)
    {
      v32 = __n;
      memcpy(v28, v29, __n);
      v34 = v47;
      v33 = v48;
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v5 + 16))(v28, v29, v45);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v28, 0, 1, v45);
      v34 = v47;
      v33 = v48;
      v32 = __n;
    }
    v35 = ~v18;
    v36 = &v29[v32];
    v37 = (void *)(((unint64_t)v28 + v32 + v11) & v44);
    v38 = (const void *)((unint64_t)&v36[v11] & v44);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v34 + 48))(v38, 1, v33))
    {
      v39 = v49;
      memcpy(v37, v38, v49);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v34 + 16))(v37, v38, v33);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v37, 0, 1, v33);
      v39 = v49;
    }
    v40 = (void *)(((unint64_t)v37 + v39 + v18) & v35);
    v41 = (const void *)(((unint64_t)v38 + v39 + v18) & v35);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v50 + 48))(v41, 1, v51))
    {
      memcpy(v40, v41, v43);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v50 + 16))(v40, v41, v51);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v40, 0, 1, v51);
    }
  }
  return v25;
}

uint64_t sub_2364B9098(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;

  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (a1 + *(unsigned __int8 *)(v5 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4))
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v6, v4);
  v7 = *(_DWORD *)(v5 + 84);
  v8 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = v8 + v6;
  if (!v7)
    ++v11;
  v12 = (v11 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))(v12, 1, AssociatedTypeWitness))
    (*(void (**)(unint64_t, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  v13 = *(_DWORD *)(v10 + 84);
  v14 = *(_QWORD *)(v10 + 64);
  v15 = sub_2365AFE88();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = v14 + v12;
  if (!v13)
    ++v17;
  v18 = (v17 + *(unsigned __int8 *)(v16 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v16 + 48))(v18, 1, v15);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v16 + 8))(v18, v15);
  return result;
}

uint64_t sub_2364B91E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  unsigned int (*v10)(const void *, uint64_t, uint64_t);
  int v11;
  size_t v12;
  size_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  int v19;
  size_t v20;
  size_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  size_t v28;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (void *)((v7 + 17 + a1) & ~v7);
  v9 = (const void *)((v7 + 17 + a2) & ~v7);
  v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  swift_bridgeObjectRetain();
  if (v10(v9, 1, v5))
  {
    v11 = *(_DWORD *)(v6 + 84);
    v12 = *(_QWORD *)(v6 + 64);
    if (v11)
      v13 = v12;
    else
      v13 = v12 + 1;
    memcpy(v8, v9, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v8, v9, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, v5);
    v11 = *(_DWORD *)(v6 + 84);
    v12 = *(_QWORD *)(v6 + 64);
  }
  if (!v11)
    ++v12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = (void *)(((unint64_t)v8 + v12 + v16) & ~v16);
  v18 = (const void *)(((unint64_t)v9 + v12 + v16) & ~v16);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v18, 1, AssociatedTypeWitness))
  {
    v19 = *(_DWORD *)(v15 + 84);
    v20 = *(_QWORD *)(v15 + 64);
    if (v19)
      v21 = v20;
    else
      v21 = v20 + 1;
    memcpy(v17, v18, v21);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v17, v18, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v17, 0, 1, AssociatedTypeWitness);
    v19 = *(_DWORD *)(v15 + 84);
    v20 = *(_QWORD *)(v15 + 64);
  }
  if (v19)
    v22 = v20;
  else
    v22 = v20 + 1;
  v23 = sub_2365AFE88();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v26 = (void *)(((unint64_t)v17 + v22 + v25) & ~v25);
  v27 = (const void *)(((unint64_t)v18 + v22 + v25) & ~v25);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48))(v27, 1, v23))
  {
    if (*(_DWORD *)(v24 + 84))
      v28 = *(_QWORD *)(v24 + 64);
    else
      v28 = *(_QWORD *)(v24 + 64) + 1;
    memcpy(v26, v27, v28);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v24 + 16))(v26, v27, v23);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v26, 0, 1, v23);
  }
  return a1;
}

uint64_t sub_2364B940C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  size_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  int v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t (*v31)(void *, uint64_t, uint64_t);
  int v32;
  int v33;
  size_t v34;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)((v8 + 17 + a1) & ~v8);
  v10 = (void *)((v8 + 17 + a2) & ~v8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v12 = v11(v9, 1, v6);
  v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v9, v10, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(v9, v10, v6);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v14 = *(_QWORD *)(v7 + 64);
  else
    v14 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(v9, v10, v14);
LABEL_10:
  if (*(_DWORD *)(v7 + 84))
    v15 = *(_QWORD *)(v7 + 64);
  else
    v15 = *(_QWORD *)(v7 + 64) + 1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (void *)(((unint64_t)v9 + v15 + v18) & ~v18);
  v20 = (void *)(((unint64_t)v10 + v15 + v18) & ~v18);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  v22 = v21(v19, 1, AssociatedTypeWitness);
  v23 = v21(v20, 1, AssociatedTypeWitness);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 16))(v19, v20, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, AssociatedTypeWitness);
      goto LABEL_22;
    }
  }
  else
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 24))(v19, v20, AssociatedTypeWitness);
      goto LABEL_22;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v19, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v17 + 84))
    v24 = *(_QWORD *)(v17 + 64);
  else
    v24 = *(_QWORD *)(v17 + 64) + 1;
  memcpy(v19, v20, v24);
LABEL_22:
  if (*(_DWORD *)(v17 + 84))
    v25 = *(_QWORD *)(v17 + 64);
  else
    v25 = *(_QWORD *)(v17 + 64) + 1;
  v26 = sub_2365AFE88();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(unsigned __int8 *)(v27 + 80);
  v29 = (void *)(((unint64_t)v19 + v25 + v28) & ~v28);
  v30 = (void *)(((unint64_t)v20 + v25 + v28) & ~v28);
  v31 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
  v32 = v31(v29, 1, v26);
  v33 = v31(v30, 1, v26);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 16))(v29, v30, v26);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v29, 0, 1, v26);
      return a1;
    }
  }
  else
  {
    if (!v33)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 24))(v29, v30, v26);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v27 + 8))(v29, v26);
  }
  if (*(_DWORD *)(v27 + 84))
    v34 = *(_QWORD *)(v27 + 64);
  else
    v34 = *(_QWORD *)(v27 + 64) + 1;
  memcpy(v29, v30, v34);
  return a1;
}

uint64_t sub_2364B9714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  int v9;
  size_t v10;
  size_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  int v17;
  size_t v18;
  size_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  size_t v26;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)((v6 + 17 + a1) & ~v6);
  v8 = (const void *)((v6 + 17 + a2) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
    if (v9)
      v11 = v10;
    else
      v11 = v10 + 1;
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
  }
  if (!v9)
    ++v10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = (void *)(((unint64_t)v7 + v10 + v14) & ~v14);
  v16 = (const void *)(((unint64_t)v8 + v10 + v14) & ~v14);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v16, 1, AssociatedTypeWitness))
  {
    v17 = *(_DWORD *)(v13 + 84);
    v18 = *(_QWORD *)(v13 + 64);
    if (v17)
      v19 = v18;
    else
      v19 = v18 + 1;
    memcpy(v15, v16, v19);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v15, v16, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, AssociatedTypeWitness);
    v17 = *(_DWORD *)(v13 + 84);
    v18 = *(_QWORD *)(v13 + 64);
  }
  if (v17)
    v20 = v18;
  else
    v20 = v18 + 1;
  v21 = sub_2365AFE88();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(unsigned __int8 *)(v22 + 80);
  v24 = (void *)(((unint64_t)v15 + v20 + v23) & ~v23);
  v25 = (const void *)(((unint64_t)v16 + v20 + v23) & ~v23);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v25, 1, v21))
  {
    if (*(_DWORD *)(v22 + 84))
      v26 = *(_QWORD *)(v22 + 64);
    else
      v26 = *(_QWORD *)(v22 + 64) + 1;
    memcpy(v24, v25, v26);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v24, v25, v21);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v24, 0, 1, v21);
  }
  return a1;
}

uint64_t sub_2364B9934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  size_t v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t (*v22)(void *, uint64_t, uint64_t);
  int v23;
  int v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t (*v32)(void *, uint64_t, uint64_t);
  int v33;
  int v34;
  size_t v35;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)((v9 + 17 + a1) & ~v9);
  v11 = (void *)((v9 + 17 + a2) & ~v9);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  v13 = v12(v10, 1, v7);
  v14 = v12(v11, 1, v7);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v10, v11, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 40))(v10, v11, v7);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  }
  if (*(_DWORD *)(v8 + 84))
    v15 = *(_QWORD *)(v8 + 64);
  else
    v15 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(v10, v11, v15);
LABEL_10:
  if (*(_DWORD *)(v8 + 84))
    v16 = *(_QWORD *)(v8 + 64);
  else
    v16 = *(_QWORD *)(v8 + 64) + 1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = (void *)(((unint64_t)v10 + v16 + v19) & ~v19);
  v21 = (void *)(((unint64_t)v11 + v16 + v19) & ~v19);
  v22 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  v23 = v22(v20, 1, AssociatedTypeWitness);
  v24 = v22(v21, 1, AssociatedTypeWitness);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 32))(v20, v21, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v20, 0, 1, AssociatedTypeWitness);
      goto LABEL_22;
    }
  }
  else
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 40))(v20, v21, AssociatedTypeWitness);
      goto LABEL_22;
    }
    (*(void (**)(void *, uint64_t))(v18 + 8))(v20, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v18 + 84))
    v25 = *(_QWORD *)(v18 + 64);
  else
    v25 = *(_QWORD *)(v18 + 64) + 1;
  memcpy(v20, v21, v25);
LABEL_22:
  if (*(_DWORD *)(v18 + 84))
    v26 = *(_QWORD *)(v18 + 64);
  else
    v26 = *(_QWORD *)(v18 + 64) + 1;
  v27 = sub_2365AFE88();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(unsigned __int8 *)(v28 + 80);
  v30 = (void *)(((unint64_t)v20 + v26 + v29) & ~v29);
  v31 = (void *)(((unint64_t)v21 + v26 + v29) & ~v29);
  v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
  v33 = v32(v30, 1, v27);
  v34 = v32(v31, 1, v27);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 32))(v30, v31, v27);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v30, 0, 1, v27);
      return a1;
    }
  }
  else
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 40))(v30, v31, v27);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v28 + 8))(v30, v27);
  }
  if (*(_DWORD *)(v28 + 84))
    v35 = *(_QWORD *)(v28 + 64);
  else
    v35 = *(_QWORD *)(v28 + 64) + 1;
  memcpy(v30, v31, v35);
  return a1;
}

uint64_t sub_2364B9C2C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t AssociatedTypeWitness;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  if ((_DWORD)v7)
    v8 = v7 - 1;
  else
    v8 = 0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if ((_DWORD)v10)
    v11 = v10 - 1;
  else
    v11 = 0;
  if (v8 <= v11)
    v12 = v11;
  else
    v12 = v8;
  v13 = sub_2365AFE88();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int *)(v14 + 84);
  v16 = v15 - 1;
  if (!(_DWORD)v15)
    v16 = 0;
  if (v12 <= v16)
    v17 = v16;
  else
    v17 = v12;
  if (v17 <= 0x7FFFFFFF)
    v18 = 0x7FFFFFFF;
  else
    v18 = v17;
  v19 = *(_QWORD *)(v6 + 64);
  if (!(_DWORD)v7)
    ++v19;
  if ((_DWORD)v10)
    v20 = *(_QWORD *)(v9 + 64);
  else
    v20 = *(_QWORD *)(v9 + 64) + 1;
  if ((_DWORD)v15)
    v21 = *(_QWORD *)(v14 + 64);
  else
    v21 = *(_QWORD *)(v14 + 64) + 1;
  if (!a2)
    return 0;
  v22 = v13;
  v23 = *(unsigned __int8 *)(v6 + 80);
  v24 = *(unsigned __int8 *)(v9 + 80);
  v25 = *(unsigned __int8 *)(v14 + 80);
  v26 = v20 + v25;
  if (a2 <= v18)
    goto LABEL_45;
  v27 = v21 + ((v26 + ((v19 + ((v23 + 17) & ~v23) + v24) & ~v24)) & ~v25);
  v28 = 8 * v27;
  if (v27 <= 3)
  {
    v30 = ((a2 - v18 + ~(-1 << v28)) >> v28) + 1;
    if (HIWORD(v30))
    {
      v29 = *(_DWORD *)(a1 + v27);
      if (!v29)
        goto LABEL_45;
      goto LABEL_36;
    }
    if (v30 > 0xFF)
    {
      v29 = *(unsigned __int16 *)(a1 + v27);
      if (!*(_WORD *)(a1 + v27))
        goto LABEL_45;
      goto LABEL_36;
    }
    if (v30 < 2)
    {
LABEL_45:
      if ((v17 & 0x80000000) == 0)
      {
        v33 = *(_QWORD *)(a1 + 8);
        if (v33 >= 0xFFFFFFFF)
          LODWORD(v33) = -1;
        return (v33 + 1);
      }
      v34 = (a1 + v23 + 17) & ~v23;
      if (v8 == v18)
      {
        if (v7 >= 2)
        {
          v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v34, v7, v5);
          goto LABEL_58;
        }
        return 0;
      }
      v36 = (v34 + v19 + v24) & ~v24;
      if (v11 == v18)
      {
        if (v10 < 2)
          return 0;
        v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v36, v10, AssociatedTypeWitness);
      }
      else
      {
        if (v15 < 2)
          return 0;
        v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))((v26 + v36) & ~v25, v15, v22);
      }
LABEL_58:
      if (v35 >= 2)
        return v35 - 1;
      else
        return 0;
    }
  }
  v29 = *(unsigned __int8 *)(a1 + v27);
  if (!*(_BYTE *)(a1 + v27))
    goto LABEL_45;
LABEL_36:
  v31 = (v29 - 1) << v28;
  if (v27 > 3)
    v31 = 0;
  if ((_DWORD)v27)
  {
    if (v27 <= 3)
      v32 = v27;
    else
      v32 = 4;
    __asm { BR              X12 }
  }
  return v18 + v31 + 1;
}

void sub_2364B9ED0(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7)
    v8 = v7 - 1;
  else
    v8 = 0;
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10)
    v11 = v10 - 1;
  else
    v11 = 0;
  if (v8 <= v11)
    v12 = v11;
  else
    v12 = v8;
  v13 = sub_2365AFE88();
  v14 = 0;
  v15 = *(_QWORD *)(v13 - 8);
  v16 = *(_DWORD *)(v15 + 84);
  v17 = v16 - 1;
  if (!v16)
    v17 = 0;
  if (v12 <= v17)
    v18 = v17;
  else
    v18 = v12;
  if (v18 <= 0x7FFFFFFF)
    v19 = 0x7FFFFFFF;
  else
    v19 = v18;
  v20 = *(_QWORD *)(v6 + 64);
  if (!v7)
    ++v20;
  v21 = *(_QWORD *)(v9 + 64);
  if (!v10)
    ++v21;
  v22 = *(unsigned __int8 *)(v15 + 80);
  v23 = v21 + v22;
  v24 = *(_QWORD *)(v15 + 64);
  if (!v16)
    ++v24;
  v25 = v24
      + ((v23
        + ((v20
          + ((*(unsigned __int8 *)(v6 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
          + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))) & ~v22);
  if (a3 > v19)
  {
    if (v25 > 3)
    {
      v14 = 1u;
      if (v19 >= a2)
LABEL_40:
        __asm { BR              X4 }
LABEL_33:
      v27 = ~v19 + a2;
      if (v25 < 4)
      {
        if ((_DWORD)v25)
        {
          v29 = v14;
          v30 = v27 & ~(-1 << (8 * v25));
          bzero(a1, v25);
          if ((_DWORD)v25 == 3)
          {
            *(_WORD *)a1 = v30;
            a1[2] = BYTE2(v30);
            v14 = v29;
          }
          else
          {
            v14 = v29;
            if ((_DWORD)v25 == 2)
              *(_WORD *)a1 = v30;
            else
              *a1 = v30;
          }
        }
      }
      else
      {
        v28 = v14;
        bzero(a1, v25);
        v14 = v28;
        *(_DWORD *)a1 = v27;
      }
      __asm { BR              X10 }
    }
    v26 = ((a3 - v19 + ~(-1 << (8 * v25))) >> (8 * v25)) + 1;
    if (HIWORD(v26))
    {
      v14 = 4u;
      if (v19 >= a2)
        goto LABEL_40;
      goto LABEL_33;
    }
    if (v26 >= 0x100)
      v14 = 2;
    else
      v14 = v26 > 1;
  }
  if (v19 >= a2)
    goto LABEL_40;
  goto LABEL_33;
}

void sub_2364BA1BC()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = v0;
}

void sub_2364BA1C4()
{
  __int16 v0;
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = v0;
}

uint64_t dispatch thunk of RawCryptoRepresentation.rawRepresentation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of RawCryptoRepresentation.init(rawRepresentation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of AsymmetricKey.complimentaryKey.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of PrivateAsymmetricKey.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PrivateSigningKey.signature<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of PublicSigningKey.isValidSignature<A>(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 24))();
}

uint64_t sub_2364BA290(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2364BA2D0 + 4 * byte_2365B9D84[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2364BA2F0 + 4 * byte_2365B9D89[v4]))();
}

_BYTE *sub_2364BA2D0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2364BA2F0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2364BA2F8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2364BA300(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2364BA308(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2364BA310(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_2364BA31C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2364BA368 + 4 * byte_2365B9D93[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2364BA39C + 4 * byte_2365B9D8E[v4]))();
}

uint64_t sub_2364BA39C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364BA3A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2364BA3ACLL);
  return result;
}

uint64_t sub_2364BA3B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2364BA3C0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2364BA3C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364BA3CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364BA3D8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2364BA424 + 4 * byte_2365B9D9D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2364BA458 + 4 * byte_2365B9D98[v4]))();
}

uint64_t sub_2364BA458(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364BA460(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2364BA468);
  return result;
}

uint64_t sub_2364BA474(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2364BA47CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2364BA480(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364BA488(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364BA494(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_2364BA4E0 + 4 * byte_2365B9DA7[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_2364BA514 + 4 * byte_2365B9DA2[v4]))();
}

uint64_t sub_2364BA514(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364BA51C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2364BA524);
  return result;
}

uint64_t sub_2364BA530(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2364BA538);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_2364BA53C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364BA544(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_2364BA550()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364BA560()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364BA570()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364BA580()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364BA590()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364BA5A0()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364BA5B0()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364BA5C0()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364BA5D0()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364BA5E0()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364BA5F0()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364BA600()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364BA610()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364BA620()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364BA630()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364BA640()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364BA650()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364BA660()
{
  JUMPOUT(0x23B7F5164);
}

uint64_t type metadata accessor for CryptographicIdentity.MissingSymmetricKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CryptographicIdentity.MissingSymmetricKey);
}

_QWORD *sub_2364BA67C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[2];

  v5 = *(uint64_t **)(v3 + 16);
  v7 = *v5;
  v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  result = sub_2364B7860((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_2364BA6D8, (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_2364BA6D8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_2364B7970(a1, a2);
}

uint64_t type metadata accessor for CryptographicIdentity.MissingPublicKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CryptographicIdentity.MissingPublicKey);
}

uint64_t type metadata accessor for CryptographicIdentity.MissingPrivateKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CryptographicIdentity.MissingPrivateKey);
}

void sub_2364BA710()
{
  sub_2364BA728("Connection to %s interrupted!");
}

void sub_2364BA71C()
{
  sub_2364BA728("Connection to %s invalidated!");
}

void sub_2364BA728(const char *a1)
{
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  NSObject *oslog;
  uint64_t v7;

  if (qword_2542A79D8 != -1)
    swift_once();
  v2 = sub_2365AFC00();
  __swift_project_value_buffer(v2, (uint64_t)qword_2542A79C0);
  oslog = sub_2365AFBE8();
  v3 = sub_2365B0398();
  if (os_log_type_enabled(oslog, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v7 = v5;
    *(_DWORD *)v4 = 136315138;
    sub_236468D88(0xD00000000000001ALL, 0x80000002365CBF90, &v7);
    sub_2365B04A0();
    _os_log_impl(&dword_23644B000, oslog, v3, a1, v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v5, -1, -1);
    MEMORY[0x23B7F5254](v4, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_2364BA8B0()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 24);
  if (v1)
    objc_msgSend(v1, sel_invalidate);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AISDaemonConnection()
{
  return objc_opt_self();
}

uint64_t sub_2364BA910()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  return swift_task_switch();
}

uint64_t sub_2364BA928()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  id v3;
  _QWORD *v4;

  v0[2] = 0;
  v1 = (void *)sub_2364BABCC();
  v0[4] = v1;
  v2 = swift_task_alloc();
  v0[5] = v2;
  *(_QWORD *)(v2 + 16) = v0 + 2;
  *(_QWORD *)(v2 + 24) = v1;
  v3 = v1;
  v4 = (_QWORD *)swift_task_alloc();
  v0[6] = v4;
  *v4 = v0;
  v4[1] = sub_2364BA9E4;
  return sub_2365B0914();
}

uint64_t sub_2364BA9E4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2364BAA50()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_2364BAA84()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2364BAAC8(int a1, _QWORD *a2, id a3)
{
  id v4;
  int v5;
  uint64_t v6;
  uint64_t v8;

  if (a3)
  {
    v4 = objc_msgSend(a3, sel_remoteObjectProxy);
    sub_2365B04C4();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7A80);
    v5 = swift_dynamicCast();
    v6 = v8;
    if (!v5)
      v6 = 0;
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  swift_unknownObjectRelease();
  if (*a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E50D8);
    return sub_2365B01C4();
  }
  else
  {
    sub_2364BADEC();
    swift_allocError();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E50D8);
    return sub_2365B01B8();
  }
}

uint64_t sub_2364BABCC()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  uint64_t inited;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t aBlock;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  void (*v17)();
  uint64_t v18;

  result = *(_QWORD *)(v0 + 24);
  if (!result)
  {
    v2 = v0;
    v3 = *(_QWORD *)(v0 + 16);
    if (v3)
    {
      v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1988]), sel_initWithListenerEndpoint_, v3);
    }
    else
    {
      v5 = objc_allocWithZone(MEMORY[0x24BDD1988]);
      v6 = (void *)sub_2365B0038();
      v4 = objc_msgSend(v5, sel_initWithMachServiceName_options_, v6, 4096);

    }
    v7 = objc_msgSend((id)objc_opt_self(), sel_interfaceWithProtocol_, &unk_25642A238);
    sub_236531DE8();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2365B6A20;
    *(_QWORD *)(inited + 32) = type metadata accessor for SignOutContext();
    sub_236531B64(inited);
    swift_setDeallocating();
    objc_msgSend(v4, sel_setRemoteObjectInterface_, v7);

    v17 = sub_2364BA710;
    v18 = 0;
    v9 = MEMORY[0x24BDAC760];
    aBlock = MEMORY[0x24BDAC760];
    v14 = 1107296256;
    v15 = sub_2364BF6CC;
    v16 = &block_descriptor_1;
    v10 = _Block_copy(&aBlock);
    objc_msgSend(v4, sel_setInterruptionHandler_, v10);
    _Block_release(v10);
    v17 = sub_2364BA71C;
    v18 = 0;
    aBlock = v9;
    v14 = 1107296256;
    v15 = sub_2364BF6CC;
    v16 = &block_descriptor_5;
    v11 = _Block_copy(&aBlock);
    objc_msgSend(v4, sel_setInvalidationHandler_, v11);
    _Block_release(v11);
    objc_msgSend(v4, sel_resume);
    v12 = *(void **)(v2 + 24);
    *(_QWORD *)(v2 + 24) = v4;

    return *(_QWORD *)(v2 + 24);
  }
  return result;
}

uint64_t sub_2364BADE4(int a1)
{
  uint64_t v1;

  return sub_2364BAAC8(a1, *(_QWORD **)(v1 + 16), *(id *)(v1 + 24));
}

unint64_t sub_2364BADEC()
{
  unint64_t result;

  result = qword_2563E7A78;
  if (!qword_2563E7A78)
  {
    result = MEMORY[0x23B7F5164](&unk_2365BAC24, &type metadata for AISDaemonConnection.AISDaemonConnectionError);
    atomic_store(result, (unint64_t *)&qword_2563E7A78);
  }
  return result;
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t storeEnumTagSinglePayload for AISDaemonConnection.AISDaemonConnectionError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2364BAE88 + 4 * byte_2365BAB50[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2364BAEA8 + 4 * byte_2365BAB55[v4]))();
}

_BYTE *sub_2364BAE88(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2364BAEA8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2364BAEB0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2364BAEB8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2364BAEC0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2364BAEC8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AISDaemonConnection.AISDaemonConnectionError()
{
  return &type metadata for AISDaemonConnection.AISDaemonConnectionError;
}

unint64_t sub_2364BAEE8()
{
  unint64_t result;

  result = qword_2563E7A88;
  if (!qword_2563E7A88)
  {
    result = MEMORY[0x23B7F5164](&unk_2365BABFC, &type metadata for AISDaemonConnection.AISDaemonConnectionError);
    atomic_store(result, (unint64_t *)&qword_2563E7A88);
  }
  return result;
}

id SimpleSetupModelExchange.queue.getter()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

uint64_t SimpleSetupModelExchange.init(queue:_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t SimpleSetupModelExchange.receiveModelUpdate(_:with:)(uint64_t *a1)
{
  uint64_t v1;
  char v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  char v6;
  __int128 v7;

  v2 = *((_BYTE *)a1 + 8);
  v3 = *(uint64_t (**)(uint64_t *))(v1 + 8);
  v5 = *a1;
  v6 = v2;
  v7 = *((_OWORD *)a1 + 1);
  return v3(&v5);
}

id sub_2364BAFA8()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

uint64_t sub_2364BAFCC(uint64_t *a1)
{
  uint64_t v1;
  char v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  char v6;
  __int128 v7;

  v2 = *((_BYTE *)a1 + 8);
  v3 = *(uint64_t (**)(uint64_t *))(v1 + 8);
  v5 = *a1;
  v6 = v2;
  v7 = *((_OWORD *)a1 + 1);
  return v3(&v5);
}

uint64_t dispatch thunk of SetupModelExchange.queue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SetupModelExchange.receiveModelUpdate(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t initializeBufferWithCopyOfBuffer for SimpleSetupModelExchange(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  id v5;

  v3 = *((_QWORD *)a2 + 2);
  v4 = *a2;
  *(_OWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = v3;
  v5 = (id)v4;
  swift_retain();
  return a1;
}

uint64_t destroy for SimpleSetupModelExchange(id *a1)
{

  return swift_release();
}

uint64_t assignWithCopy for SimpleSetupModelExchange(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v7;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SimpleSetupModelExchange(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SimpleSetupModelExchange(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SimpleSetupModelExchange(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SimpleSetupModelExchange()
{
  return &type metadata for SimpleSetupModelExchange;
}

id sub_2364BB1D4()
{
  id *v0;

  return objc_msgSend(*v0, sel_disablePSCreateAndForgetLink);
}

uint64_t dispatch thunk of AISAKURLBagProtocol.disablePSCreateAndForgetLink.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of BluetoothBase.activate()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 32) + *(_QWORD *)(a2 + 32));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_236477420;
  return v7(a1, a2);
}

uint64_t dispatch thunk of BluetoothBase.invalidate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t sub_2364BB270()
{
  uint64_t result;
  unint64_t v1;

  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542A8310);
  result = sub_2365B0A40();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

char *sub_2364BB310(char *__dst, char *__src, uint64_t a3)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v13;
  char *v16;
  uint64_t v18;
  unsigned int v19;
  id v20;
  id v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  unsigned int v34;
  id v35;
  id v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  unsigned int v45;
  id v46;
  id v47;
  char v48;
  unsigned int v49;

  v4 = __dst;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  if ((unint64_t)(v6 + 1) > 0x51)
    v7 = v6 + 1;
  else
    v7 = 81;
  if (v7 <= 3)
  {
    v11 = ((1 << (8 * v7)) | 6u) >> (8 * v7);
    v9 = *(_DWORD *)(v5 + 80);
    if (v11 > 0xFFFB)
    {
      if ((unint64_t)(v7 + 4) > 0x18 || (v9 & 0x1000F8) != 0)
        goto LABEL_30;
      v13 = *(_DWORD *)&__src[v7];
      if (v13 < 4)
        goto LABEL_37;
      goto LABEL_33;
    }
    v10 = v9 & 0x1000F8;
    if (v11 > 0xFB)
    {
      if ((unint64_t)(v7 + 2) > 0x18 || v10 != 0)
        goto LABEL_30;
      v13 = *(unsigned __int16 *)&__src[v7];
      if (v13 < 4)
        goto LABEL_37;
      goto LABEL_33;
    }
    v8 = v7 + 1;
  }
  else
  {
    v8 = v7 + 1;
    v9 = *(_DWORD *)(v5 + 80);
    v10 = v9 & 0x1000F8;
  }
  if (v8 <= 0x18 && v10 == 0)
  {
    v13 = __src[v7];
    if (v13 < 4)
    {
LABEL_37:
      switch(v13)
      {
        case 0u:
          v19 = __src[8];
          if (v19 >= 2)
            v19 = *(_DWORD *)__src + 2;
          if (v19 == 1)
          {
            v20 = *(id *)__src;
            v21 = *(id *)__src;
            *(_QWORD *)v4 = v20;
            v22 = 1;
          }
          else
          {
            v22 = 0;
          }
          v4[8] = v22;
          if (v7 > 3)
            goto LABEL_66;
          v37 = ((1 << (8 * v7)) | 6u) >> (8 * v7);
          if (v37 > 0xFFFB)
          {
            *(_DWORD *)&v4[v7] = 0;
          }
          else
          {
            if (v37 > 0xFB)
            {
              *(_WORD *)&v4[v7] = 0;
              return v4;
            }
LABEL_66:
            v4[v7] = 0;
          }
          return v4;
        case 1u:
          v27 = *(id *)__src;
          v28 = *((_QWORD *)__src + 1);
          v29 = *((_QWORD *)__src + 2);
          v30 = *((_QWORD *)__src + 3);
          v31 = *((_QWORD *)__src + 4);
          v32 = __src[40];
          sub_2364BB840(*(_QWORD *)__src, v28, v29, v30, v31, v32);
          *(_QWORD *)v4 = v27;
          *((_QWORD *)v4 + 1) = v28;
          *((_QWORD *)v4 + 2) = v29;
          *((_QWORD *)v4 + 3) = v30;
          *((_QWORD *)v4 + 4) = v31;
          v4[40] = v32;
          if (v7 > 3)
            goto LABEL_56;
          v33 = ((1 << (8 * v7)) | 6u) >> (8 * v7);
          if (v33 > 0xFFFB)
          {
            *(_DWORD *)&v4[v7] = 1;
          }
          else
          {
            if (v33 > 0xFB)
            {
              *(_WORD *)&v4[v7] = 1;
              return v4;
            }
LABEL_56:
            v4[v7] = 1;
          }
          return v4;
        case 2u:
          v23 = __src[v6];
          if (v23 >= 2)
          {
            if (v6 <= 3)
              v24 = v6;
            else
              v24 = 4;
            __asm { BR              X13 }
          }
          if (v23 == 1)
          {
            v46 = *(id *)__src;
            v47 = *(id *)__src;
            *(_QWORD *)v4 = v46;
            v48 = 1;
          }
          else
          {
            (*(void (**)(char *, char *))(v5 + 16))(__dst, __src);
            v48 = 0;
          }
          v4[v6] = v48;
          if (v7 > 3)
            goto LABEL_84;
          v49 = ((1 << (8 * v7)) | 6u) >> (8 * v7);
          if (v49 > 0xFFFB)
          {
            *(_DWORD *)&v4[v7] = 2;
            return v4;
          }
          if (v49 <= 0xFB)
LABEL_84:
            v4[v7] = 2;
          else
            *(_WORD *)&v4[v7] = 2;
          return v4;
        case 3u:
          v34 = __src[80];
          if (v34 >= 2)
            v34 = *(_DWORD *)__src + 2;
          v35 = *(id *)__src;
          if (v34 == 1)
          {
            v36 = v35;
            *(_QWORD *)v4 = v35;
            v4[80] = 1;
            if (v7 > 3)
            {
LABEL_75:
              v4[v7] = 3;
              return v4;
            }
          }
          else
          {
            v38 = *((_QWORD *)__src + 1);
            v39 = *((_QWORD *)__src + 2);
            *(_QWORD *)__dst = v35;
            *((_QWORD *)__dst + 1) = v38;
            v40 = *((_QWORD *)__src + 3);
            v41 = *((_QWORD *)__src + 4);
            *((_QWORD *)__dst + 2) = v39;
            *((_QWORD *)__dst + 3) = v40;
            *((_QWORD *)__dst + 4) = v41;
            v42 = *((_QWORD *)__src + 6);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v42)
            {
              *((_QWORD *)v4 + 5) = *((_QWORD *)__src + 5);
              *((_QWORD *)v4 + 6) = v42;
              v43 = *((_QWORD *)__src + 8);
              *((_QWORD *)v4 + 7) = *((_QWORD *)__src + 7);
              *((_QWORD *)v4 + 8) = v43;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              v44 = *(_OWORD *)(__src + 56);
              *(_OWORD *)(v4 + 40) = *(_OWORD *)(__src + 40);
              *(_OWORD *)(v4 + 56) = v44;
            }
            *((_QWORD *)v4 + 9) = *((_QWORD *)__src + 9);
            v4[80] = 0;
            swift_bridgeObjectRetain();
            if (v7 > 3)
              goto LABEL_75;
          }
          v45 = ((1 << (8 * v7)) | 6u) >> (8 * v7);
          if (v45 > 0xFFFB)
          {
            *(_DWORD *)&v4[v7] = 3;
            return v4;
          }
          if (v45 > 0xFB)
          {
            *(_WORD *)&v4[v7] = 3;
            return v4;
          }
          goto LABEL_75;
        default:
          if (v7 > 3)
            goto LABEL_51;
          v25 = ((1 << (8 * v7)) | 6u) >> (8 * v7);
          v26 = 2;
          if (v25 > 0xFFFB)
            v26 = 4;
          if (v25 <= 0xFB)
LABEL_51:
            v26 = 1;
          memcpy(__dst, __src, v26 + v7);
          return v4;
      }
    }
LABEL_33:
    if (v7 <= 3)
      v18 = v7;
    else
      v18 = 4;
    __asm { BR              X13 }
  }
LABEL_30:
  v16 = *(char **)__src;
  *(_QWORD *)v4 = *(_QWORD *)__src;
  v4 = &v16[((v9 & 0xF8 | 7u) + 16) & ~(unint64_t)(v9 & 0xF8 | 7u)];
  swift_retain();
  return v4;
}

uint64_t sub_2364BB840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a6 & 1) != 0)
    return swift_retain();
  else
    return swift_bridgeObjectRetain();
}

void sub_2364BB854(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  void *v13;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  if (v4 <= 8)
    v4 = 8;
  v5 = 81;
  if (v4 + 1 > 0x51)
    v5 = v4 + 1;
  if (v5 > 3)
    goto LABEL_8;
  v6 = ((1 << (8 * v5)) | 6u) >> (8 * v5);
  if (v6 <= 0xFFFB)
  {
    if (v6 > 0xFB)
    {
      v7 = *(unsigned __int16 *)(a1 + v5);
      if (v7 < 4)
        goto LABEL_17;
      goto LABEL_13;
    }
LABEL_8:
    v7 = *(unsigned __int8 *)(a1 + v5);
    if (v7 < 4)
      goto LABEL_17;
LABEL_13:
    if (v5 <= 3)
      v8 = v5;
    else
      v8 = 4;
    __asm { BR              X15 }
  }
  v7 = *(_DWORD *)(a1 + v5);
  if (v7 >= 4)
    goto LABEL_13;
LABEL_17:
  switch(v7)
  {
    case 0u:
      v9 = *(unsigned __int8 *)(a1 + 8);
      if (v9 >= 2)
        v9 = *(_DWORD *)a1 + 2;
      if (v9 == 1)
        goto LABEL_35;
      break;
    case 1u:
      sub_2364BBAB0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
      break;
    case 2u:
      v10 = *(unsigned __int8 *)(a1 + v4);
      if (v10 >= 2)
      {
        if (v4 <= 3)
          v11 = v4;
        else
          v11 = 4;
        __asm { BR              X14 }
      }
      if (v10 == 1)
      {
LABEL_35:
        v13 = *(void **)a1;
        goto LABEL_36;
      }
      (*(void (**)(uint64_t))(v3 + 8))(a1);
      break;
    case 3u:
      v12 = *(unsigned __int8 *)(a1 + 80);
      if (v12 >= 2)
        v12 = *(_DWORD *)a1 + 2;
      v13 = *(void **)a1;
      if (v12 == 1)
      {
LABEL_36:

      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a1 + 48))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
      }
      break;
    default:
      return;
  }
}

uint64_t sub_2364BBAB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a6 & 1) != 0)
    return swift_release();
  else
    return swift_bridgeObjectRelease();
}

char *sub_2364BBAC4(char *__dst, char *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  id v12;
  id v13;
  char v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  id v28;
  id v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  unsigned int v38;
  id v39;
  id v40;
  char v41;
  unsigned int v42;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  if ((unint64_t)(v6 + 1) > 0x51)
    v7 = v6 + 1;
  else
    v7 = 81;
  if (v7 > 3)
    goto LABEL_10;
  v8 = ((1 << (8 * v7)) | 6u) >> (8 * v7);
  if (v8 > 0xFFFB)
  {
    v9 = *(_DWORD *)&__src[v7];
    if (v9 < 4)
      goto LABEL_19;
    goto LABEL_15;
  }
  if (v8 <= 0xFB)
  {
LABEL_10:
    v9 = __src[v7];
    if (v9 < 4)
      goto LABEL_19;
LABEL_15:
    if (v7 <= 3)
      v10 = v7;
    else
      v10 = 4;
    __asm { BR              X13 }
  }
  v9 = *(unsigned __int16 *)&__src[v7];
  if (v9 >= 4)
    goto LABEL_15;
LABEL_19:
  switch(v9)
  {
    case 0u:
      v11 = __src[8];
      if (v11 >= 2)
        v11 = *(_DWORD *)__src + 2;
      if (v11 == 1)
      {
        v12 = *(id *)__src;
        v13 = *(id *)__src;
        *(_QWORD *)__dst = v12;
        v14 = 1;
      }
      else
      {
        v14 = 0;
      }
      __dst[8] = v14;
      if (v7 > 3)
        goto LABEL_48;
      v30 = ((1 << (8 * v7)) | 6u) >> (8 * v7);
      if (v30 > 0xFFFB)
      {
        *(_DWORD *)&__dst[v7] = 0;
      }
      else
      {
        if (v30 > 0xFB)
        {
          *(_WORD *)&__dst[v7] = 0;
          return __dst;
        }
LABEL_48:
        __dst[v7] = 0;
      }
      return __dst;
    case 1u:
      v19 = *(id *)__src;
      v20 = *((_QWORD *)__src + 1);
      v21 = *((_QWORD *)__src + 2);
      v22 = *((_QWORD *)__src + 3);
      v23 = *((_QWORD *)__src + 4);
      v24 = __src[40];
      sub_2364BB840(*(_QWORD *)__src, v20, v21, v22, v23, v24);
      *(_QWORD *)__dst = v19;
      *((_QWORD *)__dst + 1) = v20;
      *((_QWORD *)__dst + 2) = v21;
      *((_QWORD *)__dst + 3) = v22;
      *((_QWORD *)__dst + 4) = v23;
      __dst[40] = v24;
      if (v7 > 3)
        goto LABEL_38;
      v25 = 1;
      v26 = ((1 << (8 * v7)) | 6u) >> (8 * v7);
      if (v26 > 0xFFFB)
        goto LABEL_70;
      if (v26 > 0xFB)
        *(_WORD *)&__dst[v7] = 1;
      else
LABEL_38:
        __dst[v7] = 1;
      return __dst;
    case 2u:
      v15 = __src[v6];
      if (v15 >= 2)
      {
        if (v6 <= 3)
          v16 = v6;
        else
          v16 = 4;
        __asm { BR              X13 }
      }
      if (v15 == 1)
      {
        v39 = *(id *)__src;
        v40 = *(id *)__src;
        *(_QWORD *)__dst = v39;
        v41 = 1;
      }
      else
      {
        (*(void (**)(char *, char *))(v5 + 16))(__dst, __src);
        v41 = 0;
      }
      __dst[v6] = v41;
      if (v7 > 3)
        goto LABEL_65;
      v42 = ((1 << (8 * v7)) | 6u) >> (8 * v7);
      if (v42 > 0xFFFB)
      {
        v25 = 2;
        goto LABEL_70;
      }
      if (v42 <= 0xFB)
LABEL_65:
        __dst[v7] = 2;
      else
        *(_WORD *)&__dst[v7] = 2;
      return __dst;
    case 3u:
      v27 = __src[80];
      if (v27 >= 2)
        v27 = *(_DWORD *)__src + 2;
      v28 = *(id *)__src;
      if (v27 == 1)
      {
        v29 = v28;
        *(_QWORD *)__dst = v28;
        __dst[80] = 1;
        if (v7 > 3)
        {
LABEL_56:
          __dst[v7] = 3;
          return __dst;
        }
      }
      else
      {
        v31 = *((_QWORD *)__src + 1);
        v32 = *((_QWORD *)__src + 2);
        *(_QWORD *)__dst = v28;
        *((_QWORD *)__dst + 1) = v31;
        v33 = *((_QWORD *)__src + 3);
        v34 = *((_QWORD *)__src + 4);
        *((_QWORD *)__dst + 2) = v32;
        *((_QWORD *)__dst + 3) = v33;
        *((_QWORD *)__dst + 4) = v34;
        v35 = *((_QWORD *)__src + 6);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v35)
        {
          *((_QWORD *)__dst + 5) = *((_QWORD *)__src + 5);
          *((_QWORD *)__dst + 6) = v35;
          v36 = *((_QWORD *)__src + 8);
          *((_QWORD *)__dst + 7) = *((_QWORD *)__src + 7);
          *((_QWORD *)__dst + 8) = v36;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v37 = *(_OWORD *)(__src + 56);
          *(_OWORD *)(__dst + 40) = *(_OWORD *)(__src + 40);
          *(_OWORD *)(__dst + 56) = v37;
        }
        *((_QWORD *)__dst + 9) = *((_QWORD *)__src + 9);
        __dst[80] = 0;
        swift_bridgeObjectRetain();
        if (v7 > 3)
          goto LABEL_56;
      }
      v38 = ((1 << (8 * v7)) | 6u) >> (8 * v7);
      if (v38 <= 0xFFFB)
      {
        if (v38 > 0xFB)
        {
          *(_WORD *)&__dst[v7] = 3;
          return __dst;
        }
        goto LABEL_56;
      }
      v25 = 3;
LABEL_70:
      *(_DWORD *)&__dst[v7] = v25;
      return __dst;
    default:
      if (v7 > 3)
        goto LABEL_33;
      v17 = ((1 << (8 * v7)) | 6u) >> (8 * v7);
      v18 = 2;
      if (v17 > 0xFFFB)
        v18 = 4;
      if (v17 <= 0xFB)
LABEL_33:
        v18 = 1;
      memcpy(__dst, __src, v18 + v7);
      return __dst;
  }
}

char *sub_2364BBF84(char *__dst, char *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  void *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  void *v21;
  id v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  void *v37;
  id v38;
  unsigned int v39;
  uint64_t v40;
  __int128 v41;
  unsigned int v42;
  void *v43;
  id v44;
  char v45;
  unsigned int v46;
  char *result;

  if (__dst == __src)
    return __dst;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) <= 8uLL)
    v7 = 8;
  else
    v7 = *(_QWORD *)(v6 + 64);
  if ((unint64_t)(v7 + 1) > 0x51)
    v8 = v7 + 1;
  else
    v8 = 81;
  if (v8 > 3)
    goto LABEL_11;
  v9 = ((1 << (8 * v8)) | 6u) >> (8 * v8);
  if (v9 > 0xFFFB)
  {
    v10 = *(_DWORD *)&__dst[v8];
    if (v10 < 4)
      goto LABEL_20;
    goto LABEL_16;
  }
  if (v9 <= 0xFB)
  {
LABEL_11:
    v10 = __dst[v8];
    if (v10 < 4)
      goto LABEL_20;
LABEL_16:
    if (v8 <= 3)
      v11 = v8;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  v10 = *(unsigned __int16 *)&__dst[v8];
  if (v10 >= 4)
    goto LABEL_16;
LABEL_20:
  switch(v10)
  {
    case 0u:
      v12 = __dst[8];
      if (v12 >= 2)
        v12 = *(_DWORD *)__dst + 2;
      if (v12 != 1)
        goto LABEL_24;
      goto LABEL_41;
    case 1u:
      sub_2364BBAB0(*(_QWORD *)__dst, *((_QWORD *)__dst + 1), *((_QWORD *)__dst + 2), *((_QWORD *)__dst + 3), *((_QWORD *)__dst + 4), __dst[40]);
      if (v8 > 3)
        goto LABEL_47;
      goto LABEL_45;
    case 2u:
      v13 = __dst[v7];
      if (v13 >= 2)
      {
        if (v7 <= 3)
          v14 = v7;
        else
          v14 = 4;
        __asm { BR              X12 }
      }
      if (v13 == 1)
      {
LABEL_41:
        v16 = *(void **)__dst;
LABEL_42:

        if (v8 > 3)
          goto LABEL_47;
      }
      else
      {
        (*(void (**)(char *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
        if (v8 > 3)
          goto LABEL_47;
      }
LABEL_45:
      v17 = ((1 << (8 * v8)) | 6u) >> (8 * v8);
      if (v17 > 0xFFFB)
      {
        v18 = *(_DWORD *)&__src[v8];
        if (v18 >= 4)
          goto LABEL_52;
        break;
      }
      if (v17 > 0xFB)
      {
        v18 = *(unsigned __int16 *)&__src[v8];
        if (v18 >= 4)
          goto LABEL_52;
        break;
      }
LABEL_47:
      v18 = __src[v8];
      if (v18 >= 4)
      {
LABEL_52:
        if (v8 <= 3)
          v19 = v8;
        else
          v19 = 4;
        __asm { BR              X12 }
      }
      return result;
    case 3u:
      v15 = __dst[80];
      if (v15 >= 2)
        v15 = *(_DWORD *)__dst + 2;
      v16 = *(void **)__dst;
      if (v15 == 1)
        goto LABEL_42;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*((_QWORD *)__dst + 6))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      if (v8 > 3)
        goto LABEL_47;
      goto LABEL_45;
    default:
LABEL_24:
      if (v8 <= 3)
        goto LABEL_45;
      goto LABEL_47;
  }
  switch(v18)
  {
    case 0u:
      v20 = __src[8];
      if (v20 >= 2)
        v20 = *(_DWORD *)__src + 2;
      if (v20 == 1)
      {
        v21 = *(void **)__src;
        v22 = v21;
        *(_QWORD *)__dst = v21;
        v23 = 1;
      }
      else
      {
        v23 = 0;
      }
      __dst[8] = v23;
      if (v8 > 3)
        goto LABEL_85;
      v39 = ((1 << (8 * v8)) | 6u) >> (8 * v8);
      if (v39 > 0xFFFB)
      {
        *(_DWORD *)&__dst[v8] = 0;
      }
      else
      {
        if (v39 > 0xFB)
        {
          *(_WORD *)&__dst[v8] = 0;
          return __dst;
        }
LABEL_85:
        __dst[v8] = 0;
      }
      return __dst;
    case 1u:
      v28 = *(_QWORD *)__src;
      v29 = *((_QWORD *)__src + 1);
      v30 = *((_QWORD *)__src + 2);
      v31 = *((_QWORD *)__src + 3);
      v32 = *((_QWORD *)__src + 4);
      v33 = __src[40];
      sub_2364BB840(v28, v29, v30, v31, v32, v33);
      *(_QWORD *)__dst = v28;
      *((_QWORD *)__dst + 1) = v29;
      *((_QWORD *)__dst + 2) = v30;
      *((_QWORD *)__dst + 3) = v31;
      *((_QWORD *)__dst + 4) = v32;
      __dst[40] = v33;
      if (v8 > 3)
        goto LABEL_75;
      v34 = 1;
      v35 = ((1 << (8 * v8)) | 6u) >> (8 * v8);
      if (v35 > 0xFFFB)
        goto LABEL_107;
      if (v35 > 0xFB)
        *(_WORD *)&__dst[v8] = 1;
      else
LABEL_75:
        __dst[v8] = 1;
      return __dst;
    case 2u:
      v24 = __src[v7];
      if (v24 >= 2)
      {
        if (v7 <= 3)
          v25 = v7;
        else
          v25 = 4;
        __asm { BR              X12 }
      }
      if (v24 == 1)
      {
        v43 = *(void **)__src;
        v44 = v43;
        *(_QWORD *)__dst = v43;
        v45 = 1;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v6 + 16))(__dst, __src, v5);
        v45 = 0;
      }
      __dst[v7] = v45;
      if (v8 > 3)
        goto LABEL_102;
      v46 = ((1 << (8 * v8)) | 6u) >> (8 * v8);
      if (v46 > 0xFFFB)
      {
        v34 = 2;
        goto LABEL_107;
      }
      if (v46 <= 0xFB)
LABEL_102:
        __dst[v8] = 2;
      else
        *(_WORD *)&__dst[v8] = 2;
      return __dst;
    case 3u:
      v36 = __src[80];
      if (v36 >= 2)
        v36 = *(_DWORD *)__src + 2;
      v37 = *(void **)__src;
      if (v36 == 1)
      {
        v38 = v37;
        *(_QWORD *)__dst = v37;
        __dst[80] = 1;
        if (v8 > 3)
        {
LABEL_93:
          __dst[v8] = 3;
          return __dst;
        }
      }
      else
      {
        *(_QWORD *)__dst = v37;
        *((_QWORD *)__dst + 1) = *((_QWORD *)__src + 1);
        *((_QWORD *)__dst + 2) = *((_QWORD *)__src + 2);
        *((_QWORD *)__dst + 3) = *((_QWORD *)__src + 3);
        *((_QWORD *)__dst + 4) = *((_QWORD *)__src + 4);
        v40 = *((_QWORD *)__src + 6);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v40)
        {
          *((_QWORD *)__dst + 5) = *((_QWORD *)__src + 5);
          *((_QWORD *)__dst + 6) = *((_QWORD *)__src + 6);
          *((_QWORD *)__dst + 7) = *((_QWORD *)__src + 7);
          *((_QWORD *)__dst + 8) = *((_QWORD *)__src + 8);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v41 = *(_OWORD *)(__src + 56);
          *(_OWORD *)(__dst + 40) = *(_OWORD *)(__src + 40);
          *(_OWORD *)(__dst + 56) = v41;
        }
        *((_QWORD *)__dst + 9) = *((_QWORD *)__src + 9);
        __dst[80] = 0;
        swift_bridgeObjectRetain();
        if (v8 > 3)
          goto LABEL_93;
      }
      v42 = ((1 << (8 * v8)) | 6u) >> (8 * v8);
      if (v42 <= 0xFFFB)
      {
        if (v42 > 0xFB)
        {
          *(_WORD *)&__dst[v8] = 3;
          return __dst;
        }
        goto LABEL_93;
      }
      v34 = 3;
LABEL_107:
      *(_DWORD *)&__dst[v8] = v34;
      break;
    default:
      if (v8 > 3)
        goto LABEL_70;
      v26 = ((1 << (8 * v8)) | 6u) >> (8 * v8);
      v27 = 2;
      if (v26 > 0xFFFB)
        v27 = 4;
      if (v26 <= 0xFB)
LABEL_70:
        v27 = 1;
      memcpy(__dst, __src, v27 + v8);
      return __dst;
  }
  return __dst;
}

char *sub_2364BC68C(char *__dst, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  char v25;
  unsigned int v26;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  if ((unint64_t)(v5 + 1) > 0x51)
    v6 = v5 + 1;
  else
    v6 = 81;
  if (v6 > 3)
    goto LABEL_10;
  v7 = ((1 << (8 * v6)) | 6u) >> (8 * v6);
  if (v7 > 0xFFFB)
  {
    v8 = *(_DWORD *)((char *)a2 + v6);
    if (v8 < 4)
      goto LABEL_19;
    goto LABEL_15;
  }
  if (v7 <= 0xFB)
  {
LABEL_10:
    v8 = *((unsigned __int8 *)a2 + v6);
    if (v8 < 4)
      goto LABEL_19;
LABEL_15:
    if (v6 <= 3)
      v9 = v6;
    else
      v9 = 4;
    __asm { BR              X13 }
  }
  v8 = *(unsigned __int16 *)((char *)a2 + v6);
  if (v8 >= 4)
    goto LABEL_15;
LABEL_19:
  switch(v8)
  {
    case 0u:
      v10 = *((unsigned __int8 *)a2 + 8);
      if (v10 >= 2)
        v10 = *(_DWORD *)a2 + 2;
      if (v10 == 1)
      {
        *(_QWORD *)__dst = *(_QWORD *)a2;
        v11 = 1;
      }
      else
      {
        v11 = 0;
      }
      __dst[8] = v11;
      if (v6 <= 3)
      {
        v21 = ((1 << (8 * v6)) | 6u) >> (8 * v6);
        if (v21 > 0xFFFB)
        {
          *(_DWORD *)&__dst[v6] = 0;
          return __dst;
        }
        if (v21 > 0xFB)
        {
          *(_WORD *)&__dst[v6] = 0;
          return __dst;
        }
      }
      __dst[v6] = 0;
      return __dst;
    case 1u:
      v16 = a2[1];
      *(_OWORD *)__dst = *a2;
      *((_OWORD *)__dst + 1) = v16;
      *(_OWORD *)(__dst + 25) = *(_OWORD *)((char *)a2 + 25);
      if (v6 > 3)
        goto LABEL_38;
      v17 = 1;
      v18 = ((1 << (8 * v6)) | 6u) >> (8 * v6);
      if (v18 > 0xFFFB)
        goto LABEL_67;
      if (v18 > 0xFB)
        *(_WORD *)&__dst[v6] = 1;
      else
LABEL_38:
        __dst[v6] = 1;
      return __dst;
    case 2u:
      v12 = *((unsigned __int8 *)a2 + v5);
      if (v12 >= 2)
      {
        if (v5 <= 3)
          v13 = v5;
        else
          v13 = 4;
        __asm { BR              X13 }
      }
      if (v12 == 1)
      {
        *(_QWORD *)__dst = *(_QWORD *)a2;
        v25 = 1;
      }
      else
      {
        (*(void (**)(char *))(v4 + 32))(__dst);
        v25 = 0;
      }
      __dst[v5] = v25;
      if (v6 > 3)
        goto LABEL_62;
      v26 = ((1 << (8 * v6)) | 6u) >> (8 * v6);
      if (v26 > 0xFFFB)
      {
        v17 = 2;
        goto LABEL_67;
      }
      if (v26 <= 0xFB)
LABEL_62:
        __dst[v6] = 2;
      else
        *(_WORD *)&__dst[v6] = 2;
      return __dst;
    case 3u:
      v19 = *((unsigned __int8 *)a2 + 80);
      if (v19 >= 2)
        v19 = *(_DWORD *)a2 + 2;
      if (v19 == 1)
      {
        *(_QWORD *)__dst = *(_QWORD *)a2;
        v20 = 1;
      }
      else
      {
        v20 = 0;
        v22 = a2[3];
        *((_OWORD *)__dst + 2) = a2[2];
        *((_OWORD *)__dst + 3) = v22;
        *((_OWORD *)__dst + 4) = a2[4];
        v23 = a2[1];
        *(_OWORD *)__dst = *a2;
        *((_OWORD *)__dst + 1) = v23;
      }
      __dst[80] = v20;
      if (v6 > 3)
        goto LABEL_52;
      v24 = ((1 << (8 * v6)) | 6u) >> (8 * v6);
      if (v24 <= 0xFFFB)
      {
        if (v24 > 0xFB)
        {
          *(_WORD *)&__dst[v6] = 3;
          return __dst;
        }
LABEL_52:
        __dst[v6] = 3;
        return __dst;
      }
      v17 = 3;
LABEL_67:
      *(_DWORD *)&__dst[v6] = v17;
      return __dst;
    default:
      if (v6 > 3)
        goto LABEL_33;
      v14 = ((1 << (8 * v6)) | 6u) >> (8 * v6);
      v15 = 2;
      if (v14 > 0xFFFB)
        v15 = 4;
      if (v14 <= 0xFB)
LABEL_33:
        v15 = 1;
      memcpy(__dst, a2, v15 + v6);
      return __dst;
  }
}

char *sub_2364BCA80(char *__dst, char *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  void *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  unsigned int v31;
  __int128 v32;
  __int128 v33;
  unsigned int v34;
  char v35;
  unsigned int v36;
  char *result;

  if (__dst == __src)
    return __dst;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) <= 8uLL)
    v7 = 8;
  else
    v7 = *(_QWORD *)(v6 + 64);
  if ((unint64_t)(v7 + 1) > 0x51)
    v8 = v7 + 1;
  else
    v8 = 81;
  if (v8 > 3)
    goto LABEL_11;
  v9 = ((1 << (8 * v8)) | 6u) >> (8 * v8);
  if (v9 > 0xFFFB)
  {
    v10 = *(_DWORD *)&__dst[v8];
    if (v10 < 4)
      goto LABEL_20;
    goto LABEL_16;
  }
  if (v9 <= 0xFB)
  {
LABEL_11:
    v10 = __dst[v8];
    if (v10 < 4)
      goto LABEL_20;
LABEL_16:
    if (v8 <= 3)
      v11 = v8;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  v10 = *(unsigned __int16 *)&__dst[v8];
  if (v10 >= 4)
    goto LABEL_16;
LABEL_20:
  switch(v10)
  {
    case 0u:
      v12 = __dst[8];
      if (v12 >= 2)
        v12 = *(_DWORD *)__dst + 2;
      if (v12 != 1)
        goto LABEL_24;
      goto LABEL_41;
    case 1u:
      sub_2364BBAB0(*(_QWORD *)__dst, *((_QWORD *)__dst + 1), *((_QWORD *)__dst + 2), *((_QWORD *)__dst + 3), *((_QWORD *)__dst + 4), __dst[40]);
      if (v8 > 3)
        goto LABEL_47;
      goto LABEL_45;
    case 2u:
      v13 = __dst[v7];
      if (v13 >= 2)
      {
        if (v7 <= 3)
          v14 = v7;
        else
          v14 = 4;
        __asm { BR              X12 }
      }
      if (v13 == 1)
      {
LABEL_41:
        v16 = *(void **)__dst;
LABEL_42:

        if (v8 > 3)
          goto LABEL_47;
      }
      else
      {
        (*(void (**)(char *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
        if (v8 > 3)
          goto LABEL_47;
      }
LABEL_45:
      v17 = ((1 << (8 * v8)) | 6u) >> (8 * v8);
      if (v17 > 0xFFFB)
      {
        v18 = *(_DWORD *)&__src[v8];
        if (v18 >= 4)
          goto LABEL_52;
        break;
      }
      if (v17 > 0xFB)
      {
        v18 = *(unsigned __int16 *)&__src[v8];
        if (v18 >= 4)
          goto LABEL_52;
        break;
      }
LABEL_47:
      v18 = __src[v8];
      if (v18 >= 4)
      {
LABEL_52:
        if (v8 <= 3)
          v19 = v8;
        else
          v19 = 4;
        __asm { BR              X12 }
      }
      return result;
    case 3u:
      v15 = __dst[80];
      if (v15 >= 2)
        v15 = *(_DWORD *)__dst + 2;
      v16 = *(void **)__dst;
      if (v15 == 1)
        goto LABEL_42;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*((_QWORD *)__dst + 6))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      if (v8 > 3)
        goto LABEL_47;
      goto LABEL_45;
    default:
LABEL_24:
      if (v8 <= 3)
        goto LABEL_45;
      goto LABEL_47;
  }
  switch(v18)
  {
    case 0u:
      v20 = __src[8];
      if (v20 >= 2)
        v20 = *(_DWORD *)__src + 2;
      if (v20 == 1)
      {
        *(_QWORD *)__dst = *(_QWORD *)__src;
        v21 = 1;
      }
      else
      {
        v21 = 0;
      }
      __dst[8] = v21;
      if (v8 <= 3)
      {
        v31 = ((1 << (8 * v8)) | 6u) >> (8 * v8);
        if (v31 > 0xFFFB)
        {
          *(_DWORD *)&__dst[v8] = 0;
          return __dst;
        }
        if (v31 > 0xFB)
        {
          *(_WORD *)&__dst[v8] = 0;
          return __dst;
        }
      }
      __dst[v8] = 0;
      return __dst;
    case 1u:
      v26 = *((_OWORD *)__src + 1);
      *(_OWORD *)__dst = *(_OWORD *)__src;
      *((_OWORD *)__dst + 1) = v26;
      *(_OWORD *)(__dst + 25) = *(_OWORD *)(__src + 25);
      if (v8 > 3)
        goto LABEL_75;
      v27 = 1;
      v28 = ((1 << (8 * v8)) | 6u) >> (8 * v8);
      if (v28 > 0xFFFB)
        goto LABEL_104;
      if (v28 > 0xFB)
        *(_WORD *)&__dst[v8] = 1;
      else
LABEL_75:
        __dst[v8] = 1;
      return __dst;
    case 2u:
      v22 = __src[v7];
      if (v22 >= 2)
      {
        if (v7 <= 3)
          v23 = v7;
        else
          v23 = 4;
        __asm { BR              X12 }
      }
      if (v22 == 1)
      {
        *(_QWORD *)__dst = *(_QWORD *)__src;
        v35 = 1;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v6 + 32))(__dst, __src, v5);
        v35 = 0;
      }
      __dst[v7] = v35;
      if (v8 > 3)
        goto LABEL_99;
      v36 = ((1 << (8 * v8)) | 6u) >> (8 * v8);
      if (v36 > 0xFFFB)
      {
        v27 = 2;
        goto LABEL_104;
      }
      if (v36 <= 0xFB)
LABEL_99:
        __dst[v8] = 2;
      else
        *(_WORD *)&__dst[v8] = 2;
      return __dst;
    case 3u:
      v29 = __src[80];
      if (v29 >= 2)
        v29 = *(_DWORD *)__src + 2;
      if (v29 == 1)
      {
        *(_QWORD *)__dst = *(_QWORD *)__src;
        v30 = 1;
      }
      else
      {
        v30 = 0;
        v32 = *((_OWORD *)__src + 3);
        *((_OWORD *)__dst + 2) = *((_OWORD *)__src + 2);
        *((_OWORD *)__dst + 3) = v32;
        *((_OWORD *)__dst + 4) = *((_OWORD *)__src + 4);
        v33 = *((_OWORD *)__src + 1);
        *(_OWORD *)__dst = *(_OWORD *)__src;
        *((_OWORD *)__dst + 1) = v33;
      }
      __dst[80] = v30;
      if (v8 > 3)
        goto LABEL_89;
      v34 = ((1 << (8 * v8)) | 6u) >> (8 * v8);
      if (v34 <= 0xFFFB)
      {
        if (v34 > 0xFB)
        {
          *(_WORD *)&__dst[v8] = 3;
          return __dst;
        }
LABEL_89:
        __dst[v8] = 3;
        return __dst;
      }
      v27 = 3;
LABEL_104:
      *(_DWORD *)&__dst[v8] = v27;
      break;
    default:
      if (v8 > 3)
        goto LABEL_70;
      v24 = ((1 << (8 * v8)) | 6u) >> (8 * v8);
      v25 = 2;
      if (v24 > 0xFFFB)
        v25 = 4;
      if (v24 <= 0xFB)
LABEL_70:
        v25 = 1;
      memcpy(__dst, __src, v25 + v8);
      return __dst;
  }
  return __dst;
}

uint64_t sub_2364BD0B4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  char v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v14;
  int v15;
  int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (v3 <= 8)
    v3 = 8;
  if (v3 + 1 > 0x51)
    v4 = v3 + 1;
  else
    v4 = 81;
  if (v4 > 3)
  {
    v5 = 5;
LABEL_10:
    v7 = 8;
    goto LABEL_11;
  }
  v6 = ((1 << (8 * v4)) | 6u) >> (8 * v4);
  if (v6 > 0xFFFB)
    goto LABEL_14;
  v5 = v6 + 4;
  if (v6 <= 0xFB)
    goto LABEL_10;
  v7 = 16;
LABEL_11:
  v8 = (1 << v7) - v5;
  if ((v8 & 0x80000000) == 0)
  {
    if (v4 > 3)
      goto LABEL_18;
LABEL_15:
    v9 = ((1 << (8 * v4)) | 6u) >> (8 * v4);
    v10 = 2;
    if (v9 > 0xFFFB)
      v10 = 4;
    if (v9 > 0xFB)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_14:
  v8 = 0x7FFFFFFF;
  if (v4 <= 3)
    goto LABEL_15;
LABEL_18:
  v10 = 1;
LABEL_19:
  if (!a2)
    return 0;
  if (a2 <= v8)
    goto LABEL_37;
  v11 = v10 + v4;
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v14 = ((a2 - v8 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v14))
    {
      v13 = *(_DWORD *)(a1 + v11);
      if (!v13)
        goto LABEL_37;
      goto LABEL_30;
    }
    if (v14 > 0xFF)
    {
      v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11))
        goto LABEL_37;
      goto LABEL_30;
    }
    if (v14 < 2)
    {
LABEL_37:
      if (v8)
      {
        if (v4 <= 3)
        {
          v22 = ((1 << (8 * v4)) | 6u) >> (8 * v4);
          if (v22 > 0xFFFB)
          {
            v18 = *(_DWORD *)(a1 + v4);
            v19 = ~v18;
LABEL_47:
            v25 = 0x7FFFFFFF;
LABEL_48:
            if (v25 > v19)
              return -v18;
            else
              return 0;
          }
          v21 = v22 + 4;
          if (v22 > 0xFB)
          {
            v24 = *(unsigned __int16 *)(a1 + v4);
            v18 = v24 | 0xFFFF0000;
            v19 = v24 ^ 0xFFFF;
            v20 = 16;
          }
          else
          {
            v23 = *(unsigned __int8 *)(a1 + v4);
            v18 = v23 | 0xFFFFFF00;
            v19 = v23 ^ 0xFF;
            v20 = 8;
          }
        }
        else
        {
          v17 = *(unsigned __int8 *)(a1 + v4);
          v18 = v17 | 0xFFFFFF00;
          v19 = v17 ^ 0xFF;
          v20 = 8;
          v21 = 5;
        }
        v25 = (1 << v20) - v21;
        if ((v25 & 0x80000000) == 0)
          goto LABEL_48;
        goto LABEL_47;
      }
      return 0;
    }
  }
  v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(_BYTE *)(a1 + v11))
    goto LABEL_37;
LABEL_30:
  v15 = (v13 - 1) << v12;
  if (v11 > 3)
    v15 = 0;
  if (!(_DWORD)v11)
    return v8 + v15 + 1;
  if (v11 > 3)
    LODWORD(v11) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2364BD220 + 4 * byte_2365BADA0[(v11 - 1)]))();
}

void sub_2364BD304(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  size_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 8)
    v5 = 8;
  if (v5 + 1 > 0x51)
    v6 = v5 + 1;
  else
    v6 = 81;
  v7 = 8 * v6;
  if (v6 <= 3)
  {
    v11 = ((1 << v7) | 6u) >> v7;
    if (v11 > 0xFFFB)
      goto LABEL_15;
    v8 = v11 + 4;
    if (v11 > 0xFB)
    {
      v9 = 16;
LABEL_9:
      v10 = (1 << v9) - v8;
      if ((v10 & 0x80000000) == 0)
      {
        if (v6 > 3)
          goto LABEL_19;
LABEL_16:
        v12 = ((1 << v7) | 6u) >> v7;
        v13 = 2;
        if (v12 > 0xFFFB)
          v13 = 4;
        if (v12 > 0xFB)
        {
LABEL_20:
          v14 = v13 + v6;
          if (a3 <= v10)
          {
            v15 = 0;
          }
          else if (v14 <= 3)
          {
            v17 = ((a3 - v10 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
            if (HIWORD(v17))
            {
              v15 = 4u;
            }
            else if (v17 >= 0x100)
            {
              v15 = 2;
            }
            else
            {
              v15 = v17 > 1;
            }
          }
          else
          {
            v15 = 1u;
          }
          if (v10 < a2)
          {
            v16 = ~v10 + a2;
            if (v14 < 4)
            {
              if ((_DWORD)v14)
              {
                v18 = v16 & ~(-1 << (8 * v14));
                bzero(a1, v14);
                if ((_DWORD)v14 == 3)
                {
                  *a1 = v18;
                  *((_BYTE *)a1 + 2) = BYTE2(v18);
                }
                else if ((_DWORD)v14 == 2)
                {
                  *a1 = v18;
                }
                else
                {
                  *(_BYTE *)a1 = v18;
                }
              }
            }
            else
            {
              bzero(a1, v14);
              *(_DWORD *)a1 = v16;
            }
            __asm { BR              X10 }
          }
          __asm { BR              X12 }
        }
LABEL_19:
        v13 = 1;
        goto LABEL_20;
      }
LABEL_15:
      v10 = 0x7FFFFFFF;
      if (v6 > 3)
        goto LABEL_19;
      goto LABEL_16;
    }
  }
  else
  {
    v8 = 5;
  }
  v9 = 8;
  goto LABEL_9;
}

uint64_t sub_2364BD594(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (v2 <= 8)
    v2 = 8;
  v3 = 81;
  if (v2 + 1 > 0x51)
    v3 = v2 + 1;
  if (v3 > 3)
    goto LABEL_6;
  v5 = ((1 << (8 * v3)) | 6u) >> (8 * v3);
  if (v5 > 0xFFFB)
  {
    v4 = *(unsigned int *)(a1 + v3);
  }
  else
  {
    if (v5 <= 0xFB)
    {
LABEL_6:
      v4 = *(unsigned __int8 *)(a1 + v3);
      goto LABEL_11;
    }
    v4 = *(unsigned __int16 *)(a1 + v3);
  }
LABEL_11:
  if (v4 < 4)
    return v4;
  if (v3 <= 3)
    v6 = v3;
  else
    v6 = 4;
  return ((uint64_t (*)(void))((char *)&loc_2364BD62C + 4 * byte_2365BADAE[v6]))();
}

_BYTE *sub_2364BD674(_BYTE *result, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  int v10;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (v4 <= 8)
    v4 = 8;
  if (v4 + 1 > 0x51)
    v5 = v4 + 1;
  else
    v5 = 81;
  if (a2 > 3)
  {
    if (v5 < 4)
    {
      v7 = ((a2 - 4) >> (8 * v5)) + 4;
      v8 = (unsigned int *)&result[v5];
      v9 = ((1 << (8 * v5)) | 6u) >> (8 * v5);
      if (v9 > 0xFFFB)
      {
        *v8 = v7;
      }
      else if (v9 > 0xFB)
      {
        *(_WORD *)v8 = v7;
      }
      else
      {
        *(_BYTE *)v8 = v7;
      }
    }
    else
    {
      result[v5] = 4;
    }
    if (v5 <= 3)
      v10 = v5;
    else
      v10 = 4;
    bzero(result, v5);
    __asm { BR              X10 }
  }
  if (v5 > 3)
    goto LABEL_8;
  v6 = ((1 << (8 * v5)) | 6u) >> (8 * v5);
  if (v6 > 0xFFFB)
  {
    *(_DWORD *)&result[v5] = a2;
  }
  else
  {
    if (v6 <= 0xFB)
    {
LABEL_8:
      result[v5] = a2;
      return result;
    }
    *(_WORD *)&result[v5] = a2;
  }
  return result;
}

uint64_t type metadata accessor for BluetoothBaseState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BluetoothBaseState);
}

uint64_t destroy for BluetoothBasePairingState(uint64_t a1)
{
  return sub_2364BBAB0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

uint64_t initializeWithCopy for BluetoothBasePairingState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  sub_2364BB840(*(_QWORD *)a2, v4, v5, v6, v7, v8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  return a1;
}

uint64_t assignWithCopy for BluetoothBasePairingState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  sub_2364BB840(*(_QWORD *)a2, v4, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  sub_2364BBAB0(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for BluetoothBasePairingState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_BYTE *)(a1 + 40);
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 40) = v4;
  sub_2364BBAB0(v5, v7, v6, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for BluetoothBasePairingState(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BluetoothBasePairingState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t sub_2364BD9E0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_2364BD9E8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 40) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for BluetoothBasePairingState()
{
  return &type metadata for BluetoothBasePairingState;
}

uint64_t RepairReport.accountID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 56);
  *(_QWORD *)(a1 + 72) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t RepairReport.altDSID.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RepairReport.repairedSymptoms.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RepairReport.newSymptomReport.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[11];
  v3 = v1[12];
  v4 = v1[13];
  v5 = v1[14];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return sub_236485214(v2, v3);
}

__n128 RepairReport.init(accountID:repairedSymptoms:newSymptomReport:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a4 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a4 + 32) = v4;
  v5 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a4 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a4 + 64) = v5;
  result = *(__n128 *)a3;
  v7 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a4 + 88) = *(_OWORD *)a3;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_QWORD *)(a4 + 8) = v8;
  *(_QWORD *)(a4 + 80) = a2;
  *(_OWORD *)(a4 + 104) = v7;
  return result;
}

__n128 RepairReport.init(altDSID:repairedSymptoms:newSymptomReport:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __n128 result;
  __int128 v6;

  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  result = *(__n128 *)a4;
  v6 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a5 + 88) = *(_OWORD *)a4;
  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 80) = a3;
  *(_OWORD *)(a5 + 104) = v6;
  return result;
}

uint64_t RepairReport.hash(into:)(__int128 *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = v1[10];
  v4 = v1[11];
  v5 = v1[12];
  v6 = v1[14];
  v8 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_236483858(a1, v3);
  swift_bridgeObjectRelease();
  if (!v5)
    return sub_2365B0A04();
  sub_2365B0A04();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  sub_236483B50((uint64_t)a1, v6);
  return sub_236484E1C(v8, v5);
}

uint64_t sub_2364BDC88()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000010;
  else
    return 0x49746E756F636361;
}

uint64_t sub_2364BDCF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2364BF448(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2364BDD14()
{
  sub_2364BEC0C();
  return sub_2365B0AD0();
}

uint64_t sub_2364BDD3C()
{
  sub_2364BEC0C();
  return sub_2365B0ADC();
}

uint64_t RepairReport.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  char v38;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7B18);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v30 = v1[1];
  v31 = v8;
  v9 = v1[2];
  v28 = v1[3];
  v29 = v9;
  v11 = *((_QWORD *)v1 + 8);
  v10 = *((_QWORD *)v1 + 9);
  v12 = *((_QWORD *)v1 + 10);
  v26 = *((_QWORD *)v1 + 11);
  v27 = v12;
  v25 = *((_QWORD *)v1 + 12);
  v24 = *((_QWORD *)v1 + 13);
  v23 = *((_QWORD *)v1 + 14);
  v13 = a1[3];
  v14 = a1;
  v16 = v15;
  __swift_project_boxed_opaque_existential_1(v14, v13);
  sub_2364BEC0C();
  sub_2365B0AAC();
  v32 = v31;
  v33 = v30;
  v34 = v29;
  v35 = v28;
  v36 = v11;
  v37 = v10;
  v38 = 0;
  sub_2364A51A8();
  sub_2365B0824();
  if (!v2)
  {
    v17 = v23;
    v18 = v24;
    v19 = v25;
    v20 = v26;
    *(_QWORD *)&v32 = v27;
    v38 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7B28);
    sub_2364BEC50(&qword_2563E7B30, (uint64_t (*)(void))sub_23648B5BC, MEMORY[0x24BEE1700]);
    sub_2365B0824();
    *(_QWORD *)&v32 = v20;
    *((_QWORD *)&v32 + 1) = v19;
    *(_QWORD *)&v33 = v18;
    *((_QWORD *)&v33 + 1) = v17;
    v38 = 2;
    sub_23648518C();
    sub_2365B07E8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v16);
}

uint64_t RepairReport.hashValue.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __int128 v6[4];

  v1 = v0[10];
  v2 = v0[12];
  v3 = v0[14];
  v5 = v0[11];
  sub_2365B09E0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_236483858(v6, v1);
  swift_bridgeObjectRelease();
  sub_2365B0A04();
  if (v2)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_2365B008C();
    sub_236483B50((uint64_t)v6, v3);
    sub_236484E1C(v5, v2);
  }
  return sub_2365B0A34();
}

uint64_t RepairReport.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7B38);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2364BEC0C();
  sub_2365B0A7C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v51 = 0;
  sub_2364A5230();
  sub_2365B0770();
  v9 = v42;
  v35 = v43;
  v36 = v41;
  v37 = v44;
  v10 = v46;
  v33 = v47;
  v34 = v45;
  v40 = v48;
  v31 = a2;
  v32 = v49;
  v11 = v50;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7B28);
  v51 = 1;
  sub_2364BEC50(&qword_2563E7B40, (uint64_t (*)(void))sub_23648B644, MEMORY[0x24BEE1720]);
  v39 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v38 = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2365B0770();
  v30 = v11;
  v12 = v41;
  v51 = 2;
  sub_2364854A0();
  v29 = v12;
  swift_bridgeObjectRetain();
  v28 = 0;
  sub_2365B0734();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v13 = v41;
  v14 = v42;
  v28 = v42;
  v15 = v43;
  v27 = v44;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = v30;
  swift_bridgeObjectRetain();
  v17 = v29;
  swift_bridgeObjectRetain();
  v26 = v13;
  v25[1] = v15;
  sub_236485214(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = v38;
  swift_bridgeObjectRelease();
  v19 = v37;
  swift_bridgeObjectRelease();
  v20 = v39;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21 = v31;
  *v31 = v36;
  v21[1] = v20;
  v21[2] = v35;
  v21[3] = v19;
  v21[4] = v34;
  v21[5] = v18;
  v22 = v40;
  v21[6] = v33;
  v21[7] = v22;
  v21[8] = v32;
  v21[9] = v16;
  v21[10] = v17;
  v21[11] = v13;
  v23 = v28;
  v21[12] = v28;
  v21[13] = v15;
  v21[14] = v27;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_236484E1C(v26, v23);
}

uint64_t sub_2364BE5A0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return RepairReport.init(from:)(a1, a2);
}

uint64_t sub_2364BE5B4(_QWORD *a1)
{
  return RepairReport.encode(to:)(a1);
}

uint64_t sub_2364BE5D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __int128 v6[4];

  v1 = v0[10];
  v2 = v0[12];
  v3 = v0[14];
  v5 = v0[11];
  sub_2365B09E0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_236483858(v6, v1);
  swift_bridgeObjectRelease();
  sub_2365B0A04();
  if (v2)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_2365B008C();
    sub_236483B50((uint64_t)v6, v3);
    sub_236484E1C(v5, v2);
  }
  return sub_2365B0A34();
}

void __swiftcall RepairReport.into()(AISRepairReport *__return_ptr retstr)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  uint64_t v23;

  v2 = *(_QWORD *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 96);
  v4 = *(_QWORD *)(v2 + 16);
  if (v4)
  {
    v23 = *(_QWORD *)(v1 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_2365B0608();
    v5 = sub_2364A4714(v2);
    v7 = v6;
    v9 = v8 & 1;
    do
    {
      if (v5 < 0 || v5 >= 1 << *(_BYTE *)(v2 + 32))
      {
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
        return;
      }
      if (((*(_QWORD *)(v2 + 56 + (((unint64_t)v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
        goto LABEL_17;
      if (*(_DWORD *)(v2 + 36) != (_DWORD)v7)
        goto LABEL_18;
      v17 = *(_QWORD *)(v2 + 48) + 96 * v5;
      v18 = *(_QWORD *)(v17 + 80);
      if (v18 <= 3)
        v10 = qword_2365BB0E8[v18];
      else
        v10 = 0;
      v11 = *(unsigned __int8 *)(v17 + 88);
      v12 = objc_allocWithZone((Class)AISSymptom);
      swift_bridgeObjectRetain();
      v13 = (void *)sub_2365B0038();
      swift_bridgeObjectRelease();
      objc_msgSend(v12, sel_initWithAltDSID_priority_problemFlag_errorInfo_, v13, v11, v10, sub_2365B092C());
      swift_unknownObjectRelease();

      sub_2365B05F0();
      sub_2365B0614();
      sub_2365B0620();
      sub_2365B05FC();
      v14 = sub_2364A47B8(v5, v7, v9 & 1, v2);
      v5 = v14;
      v7 = v15;
      v9 = v16 & 1;
      --v4;
    }
    while (v4);
    sub_2364A6CC8(v14, v15, v16 & 1);
    swift_bridgeObjectRelease();
    if (!v23)
      goto LABEL_14;
  }
  else
  {
    swift_bridgeObjectRetain();
    if (!v3)
    {
LABEL_14:
      v19 = 0;
      goto LABEL_15;
    }
  }
  v19 = (void *)SymptomReport.into()();
LABEL_15:
  v20 = objc_allocWithZone((Class)AISRepairReport);
  v21 = (void *)sub_2365B0038();
  swift_bridgeObjectRelease();
  sub_2364BECB8();
  v22 = (void *)sub_2365B0164();
  swift_bridgeObjectRelease();
  objc_msgSend(v20, sel_initWithAltDSID_repairedSymptoms_symptomReport_, v21, v22, v19);

}

BOOL _s12AppleIDSetup12RepairReportV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BOOL8 result;
  char v14;
  uint64_t v15;
  uint64_t v16;

  v3 = a1[10];
  v2 = a1[11];
  v5 = a1[12];
  v4 = a1[13];
  v6 = a1[14];
  v8 = a2[10];
  v7 = a2[11];
  v10 = a2[12];
  v9 = a2[13];
  v11 = a2[14];
  if (*a1 == *a2 && a1[1] == a2[1] || (v12 = sub_2365B08CC(), result = 0, (v12 & 1) != 0))
  {
    if ((sub_2365A2BD4(v3, v8) & 1) == 0)
      return 0;
    if (v5)
    {
      if (v10)
      {
        if (v2 == v7 && v5 == v10 || (sub_2365B08CC() & 1) != 0)
        {
          sub_236485214(v2, v5);
          sub_236485214(v2, v5);
          sub_236485214(v7, v10);
          v14 = sub_23651F4EC(v9, v11, v4, v6);
          sub_236484E1C(v7, v10);
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          sub_236484E1C(v2, v5);
          return (v14 & 1) != 0;
        }
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        v15 = v2;
        v16 = v5;
        goto LABEL_16;
      }
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
    }
    else if (!v10)
    {
      return 1;
    }
    sub_236485214(v7, v10);
    sub_236484E1C(v2, v5);
    v15 = v7;
    v16 = v10;
LABEL_16:
    sub_236484E1C(v15, v16);
    return 0;
  }
  return result;
}

unint64_t sub_2364BEC0C()
{
  unint64_t result;

  result = qword_2563E7B20;
  if (!qword_2563E7B20)
  {
    result = MEMORY[0x23B7F5164](&unk_2365BB098, &type metadata for RepairReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E7B20);
  }
  return result;
}

uint64_t sub_2364BEC50(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2563E7B28);
    v8 = a2();
    result = MEMORY[0x23B7F5164](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_2364BECB8()
{
  unint64_t result;

  result = qword_2563E7B48;
  if (!qword_2563E7B48)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2563E7B48);
  }
  return result;
}

unint64_t sub_2364BECF4(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_2364854FC();
  a1[2] = sub_236485294();
  result = sub_2364BED28();
  a1[3] = result;
  return result;
}

unint64_t sub_2364BED28()
{
  unint64_t result;

  result = qword_2563E7B50;
  if (!qword_2563E7B50)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairReport, &type metadata for RepairReport);
    atomic_store(result, (unint64_t *)&qword_2563E7B50);
  }
  return result;
}

unint64_t sub_2364BED70()
{
  unint64_t result;

  result = qword_2563E7B58;
  if (!qword_2563E7B58)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairReport, &type metadata for RepairReport);
    atomic_store(result, (unint64_t *)&qword_2563E7B58);
  }
  return result;
}

uint64_t destroy for RepairReport(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 96);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

_QWORD *initializeWithCopy for RepairReport(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  a1[10] = a2[10];
  v9 = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v9)
  {
    a1[11] = a2[11];
    a1[12] = v9;
    v11 = a2[13];
    v10 = a2[14];
    a1[13] = v11;
    a1[14] = v10;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 13);
    *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
    *(_OWORD *)(a1 + 13) = v12;
  }
  return a1;
}

_QWORD *assignWithCopy for RepairReport(_QWORD *a1, _QWORD *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a1 + 11;
  v5 = a2 + 11;
  v6 = a2[12];
  if (a1[12])
  {
    if (v6)
    {
      a1[11] = a2[11];
      a1[12] = a2[12];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[13] = a2[13];
      swift_retain();
      swift_release();
      a1[14] = a2[14];
      swift_retain();
      swift_release();
    }
    else
    {
      sub_2364BF0AC((uint64_t)(a1 + 11));
      v7 = *(_OWORD *)(a2 + 13);
      *v4 = *v5;
      *(_OWORD *)(a1 + 13) = v7;
    }
  }
  else if (v6)
  {
    a1[11] = a2[11];
    a1[12] = a2[12];
    a1[13] = a2[13];
    a1[14] = a2[14];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 13);
    *v4 = *v5;
    *(_OWORD *)(a1 + 13) = v8;
  }
  return a1;
}

uint64_t sub_2364BF0AC(uint64_t a1)
{
  destroy for SymptomReport();
  return a1;
}

__n128 __swift_memcpy120_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for RepairReport(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 96))
    goto LABEL_5;
  v9 = *(_QWORD *)(a2 + 96);
  if (!v9)
  {
    sub_2364BF0AC(a1 + 88);
LABEL_5:
    v10 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v10;
    return a1;
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v9;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_release();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for RepairReport(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RepairReport(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RepairReport()
{
  return &type metadata for RepairReport;
}

uint64_t storeEnumTagSinglePayload for RepairReport.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2364BF2F0 + 4 * byte_2365BAECD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2364BF324 + 4 * byte_2365BAEC8[v4]))();
}

uint64_t sub_2364BF324(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364BF32C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2364BF334);
  return result;
}

uint64_t sub_2364BF340(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2364BF348);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2364BF34C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364BF354(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RepairReport.CodingKeys()
{
  return &type metadata for RepairReport.CodingKeys;
}

unint64_t sub_2364BF374()
{
  unint64_t result;

  result = qword_2563E7B60;
  if (!qword_2563E7B60)
  {
    result = MEMORY[0x23B7F5164](&unk_2365BB070, &type metadata for RepairReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E7B60);
  }
  return result;
}

unint64_t sub_2364BF3BC()
{
  unint64_t result;

  result = qword_2563E7B68;
  if (!qword_2563E7B68)
  {
    result = MEMORY[0x23B7F5164](&unk_2365BAFE0, &type metadata for RepairReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E7B68);
  }
  return result;
}

unint64_t sub_2364BF404()
{
  unint64_t result;

  result = qword_2563E7B70;
  if (!qword_2563E7B70)
  {
    result = MEMORY[0x23B7F5164](&unk_2365BB008, &type metadata for RepairReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563E7B70);
  }
  return result;
}

uint64_t sub_2364BF448(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x49746E756F636361 && a2 == 0xE900000000000044;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002365CBFB0 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002365CBFD0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_2364BF59C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_2365B0218();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_2365B020C();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  sub_236465998(a1, &qword_2563E9790);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_2365B01AC();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_2364BF6CC(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t sub_2364BF6F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_2365AFC00();
  __swift_allocate_value_buffer(v0, qword_2563E7B78);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_2563E7B78);
  if (qword_2563E42D0 != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)qword_2563E60D8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t SharingBaseServiceType.rawValue.getter()
{
  return sub_2365B005C();
}

uint64_t SharingBaseServiceType.init(rawValue:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_2365B06E0();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_2364BF7EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_2365B005C();
  v2 = v1;
  if (v0 == sub_2365B005C() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_2365B08CC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_2364BF87C()
{
  sub_2365B09E0();
  sub_2365B005C();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  return sub_2365B0A34();
}

uint64_t sub_2364BF8E0()
{
  sub_2365B005C();
  sub_2365B008C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2364BF928()
{
  sub_2365B09E0();
  sub_2365B005C();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  return sub_2365B0A34();
}

uint64_t sub_2364BF988@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_2365B06E0();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_2364BF9D8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_2365B005C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_2364BFA08()
{
  uint64_t v0;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7FB0);
  v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7FB8);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(v0 + 16) = result;
  qword_2563E7B90 = v0;
  return result;
}

void *sub_2364BFA68()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 112) + 24);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  v2 = *(void **)(v1 + 16);
  v3 = v2;
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  swift_release();
  swift_release();
  return v2;
}

uint64_t SharingServerBase.advertisementRate.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 128);
}

uint64_t SharingServerBase.fixedPin.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SharingServerBase.targetAuthTag.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 152);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_2364BFB30()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned int *)(v0 + 168);
}

uint64_t sub_2364BFB60(int a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_DWORD *)(v1 + 168) = a1;
  return result;
}

uint64_t (*sub_2364BFB9C())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t SharingServerBase.deviceActionType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 172);
}

uint64_t SharingServerBase.legacySymptomReport.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[22];
  v3 = v1[23];
  v4 = v1[24];
  v5 = v1[25];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return sub_236485214(v2, v3);
}

uint64_t SharingServerBase.stateHandler.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 208);
  swift_retain();
  return v1;
}

uint64_t SharingServerBase.tags.getter()
{
  return swift_bridgeObjectRetain();
}

void sub_2364BFC2C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  _QWORD *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  os_log_type_t v21;

  swift_beginAccess();
  v1 = *(void **)(v0 + 232);
  if (v1)
  {
    v2 = qword_2563E4300;
    v3 = v1;
    if (v2 != -1)
      swift_once();
    v4 = sub_2365AFC00();
    __swift_project_value_buffer(v4, (uint64_t)qword_2563E7B78);
    v5 = v3;
    swift_retain();
    v6 = sub_2365AFBE8();
    v7 = sub_2365B038C();
    if (os_log_type_enabled(v6, v7))
    {
      v21 = v7;
      v8 = swift_slowAlloc();
      v9 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v8 = 138412546;
      v10 = sub_2364BFA68();
      sub_2365B04A0();
      *v9 = v10;
      swift_release();
      *(_WORD *)(v8 + 12) = 2112;
      v17 = v5;
      sub_2365B04A0();
      v9[1] = v1;

      _os_log_impl(&dword_23644B000, v6, v21, "Disabling needs setup on service: %@ with session: %@", (uint8_t *)v8, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9960);
      swift_arrayDestroy();
      MEMORY[0x23B7F5254](v9, -1, -1);
      MEMORY[0x23B7F5254](v8, -1, -1);

    }
    else
    {

      swift_release();
    }
    v18 = sub_2364BFA68();
    if (v18)
    {
      v19 = v18;
      objc_msgSend(v18, sel_setNeedsSetup_, 0);

    }
    goto LABEL_16;
  }
  if (qword_2563E4300 != -1)
    swift_once();
  v11 = sub_2365AFC00();
  __swift_project_value_buffer(v11, (uint64_t)qword_2563E7B78);
  swift_retain();
  v12 = sub_2365AFBE8();
  v13 = sub_2365B038C();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    v15 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v14 = 138412290;
    v16 = sub_2364BFA68();
    sub_2365B04A0();
    *v15 = v16;
    swift_release();
    _os_log_impl(&dword_23644B000, v12, v13, "Enabling needs setup on service: %@", v14, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9960);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v15, -1, -1);
    MEMORY[0x23B7F5254](v14, -1, -1);

  }
  else
  {

    swift_release();
  }
  v20 = sub_2364BFA68();
  if (v20)
  {
    v5 = v20;
    objc_msgSend(v20, sel_setNeedsSetup_, 1);
LABEL_16:

  }
}

void *sub_2364C0008()
{
  void *v0;
  id v1;

  v0 = (void *)sub_2364C7FB8();
  v1 = v0;
  return v0;
}

uint64_t sub_2364C0030(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  void (*v4)(uint64_t *, uint64_t, _BYTE *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[88];

  v3 = *v1;
  v4 = (void (*)(uint64_t *, uint64_t, _BYTE *))v1[26];
  swift_beginAccess();
  v6 = type metadata accessor for AnyTransportBuilder(255, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v5);
  v9 = type metadata accessor for BluetoothBaseState(0, v6, v7, v8);
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v10 + 16))(v12, v1 + 30, v9);
  v4(v1, a1, v12);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_2364C00E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *v1;
  swift_beginAccess();
  v5 = type metadata accessor for AnyTransportBuilder(255, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v4);
  v8 = type metadata accessor for BluetoothBaseState(0, v5, v6, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, v1 + 30, v8);
}

uint64_t SharingServerBase.__allocating_init(queue:advertisementRate:fixedPin:targetAuthTag:pinType:serviceType:deviceActionType:legacySymptomReport:service:tags:stateHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, char a9, uint64_t *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v19;

  swift_allocObject();
  v19 = sub_2364C8108(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)a11, a12, a13, a14);

  return v19;
}

uint64_t SharingServerBase.init(queue:advertisementRate:fixedPin:targetAuthTag:pinType:serviceType:deviceActionType:legacySymptomReport:service:tags:stateHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, char a9, uint64_t *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  v14 = sub_2364C8108(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)a11, a12, a13, a14);

  return v14;
}

id sub_2364C027C(id *a1)
{
  return objc_msgSend(*a1, sel_invalidate);
}

_QWORD *SharingServerBase.deinit()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = *v0;
  if (qword_2563E4300 != -1)
    swift_once();
  v3 = sub_2365AFC00();
  __swift_project_value_buffer(v3, (uint64_t)qword_2563E7B78);
  v4 = sub_2365AFBE8();
  v5 = sub_2365B0380();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_23644B000, v4, v5, "SharingServerBase deallocated", v6, 2u);
    MEMORY[0x23B7F5254](v6, -1, -1);
  }

  sub_2364C25AC(1);
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_236484E1C(v1[22], v1[23]);
  swift_release();
  swift_bridgeObjectRelease();

  v8 = type metadata accessor for AnyTransportBuilder(255, *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88), v7);
  v11 = type metadata accessor for BluetoothBaseState(0, v8, v9, v10);
  (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v1 + 30, v11);

  swift_defaultActor_destroy();
  return v1;
}

uint64_t SharingServerBase.__deallocating_deinit()
{
  SharingServerBase.deinit();
  return swift_defaultActor_deallocate();
}

uint64_t sub_2364C0414()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 1056) = v0;
  *(_QWORD *)(v1 + 1064) = *v0;
  return swift_task_switch();
}

uint64_t sub_2364C0434()
{
  uint64_t v0;
  uint64_t v1;
  int8x16_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t (*v31)(void);
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t inited;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  _QWORD *v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  _QWORD *v66;
  void *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  _QWORD *v71;
  void *v72;
  void *v73;
  void *v74;
  uint64_t v75;
  _QWORD *v76;
  void *v77;
  void *v78;
  void *v79;
  uint64_t v80;
  _QWORD *v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  _QWORD *v86;
  void *v87;
  void *v88;
  void *v89;
  uint64_t v90;
  _QWORD *v91;
  void *v92;
  void *v93;
  void *v94;
  uint64_t v95;
  _QWORD *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  uint64_t v106;
  _QWORD *v107;
  void *v108;
  void *v109;
  void *v110;
  void (*v111)(uint64_t, uint64_t);
  uint64_t v112;

  sub_2364C00E4(v0 + 272);
  if (*(_BYTE *)(v0 + 353) != 4
    || *(_BYTE *)(v0 + 352)
    || (v2 = vorrq_s8(vorrq_s8(*(int8x16_t *)(v0 + 288), *(int8x16_t *)(v0 + 320)), vorrq_s8(*(int8x16_t *)(v0 + 304), *(int8x16_t *)(v0 + 336))), *(_QWORD *)&vorr_s8(*(int8x8_t *)v2.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL)) | *(_QWORD *)(v0 + 280) | *(_QWORD *)(v0 + 272)))
  {
    v21 = *(_QWORD *)(v0 + 1064);
    v23 = *(_QWORD *)(v21 + 80);
    v22 = *(_QWORD *)(v21 + 88);
    v24 = type metadata accessor for AnyTransportBuilder(255, v23, v22, v1);
    v27 = type metadata accessor for BluetoothBaseState(0, v24, v25, v26);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v0 + 272, v27);
    v29 = type metadata accessor for SharingServerBase.Failure(0, v23, v22, v28);
    MEMORY[0x23B7F5164](&unk_2365BB608, v29);
    swift_allocError();
    *v30 = 3;
    swift_willThrow();
    v31 = *(uint64_t (**)(void))(v0 + 8);
    return v31();
  }
  v3 = *(_QWORD *)(v0 + 1064);
  v4 = *(_QWORD *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 88);
  v6 = type metadata accessor for AnyTransportBuilder(255, v4, v5, v1);
  v9 = type metadata accessor for BluetoothBaseState(0, v6, v7, v8);
  *(_QWORD *)(v0 + 1072) = v9;
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  *(_QWORD *)(v0 + 1080) = v10;
  v10(v0 + 272, v9);
  *(_QWORD *)(v0 + 360) = 1;
  *(_OWORD *)(v0 + 368) = 0u;
  *(_OWORD *)(v0 + 384) = 0u;
  *(_OWORD *)(v0 + 400) = 0u;
  *(_OWORD *)(v0 + 416) = 0u;
  *(_OWORD *)(v0 + 425) = 0u;
  *(_BYTE *)(v0 + 441) = 4;
  sub_2364C803C(v0 + 360);
  v10(v0 + 360, v9);
  v11 = sub_2364BFA68();
  if (v11)
  {
    v12 = v11;
    objc_msgSend(v11, sel_setDispatchQueue_, *(_QWORD *)(*(_QWORD *)(v0 + 1056) + 120));

  }
  v13 = sub_2364BFA68();
  if (v13)
  {
    v14 = v13;
    sub_2365B005C();
    v15 = (void *)sub_2365B0038();
    swift_bridgeObjectRelease();
    objc_msgSend(v14, sel_setLabel_, v15);

  }
  v16 = sub_2364BFA68();
  if (v16)
  {
    v17 = v16;
    objc_msgSend(v16, sel_setAdvertiseRate_, *(_QWORD *)(*(_QWORD *)(v0 + 1056) + 128));

  }
  v18 = sub_2364BFA68();
  if (v18)
  {
    v19 = v18;
    if (*(_QWORD *)(*(_QWORD *)(v0 + 1056) + 144))
      v20 = (void *)sub_2365B0038();
    else
      v20 = 0;
    objc_msgSend(v19, sel_setFixedPIN_, v20);

  }
  v33 = sub_2364BFA68();
  if (v33)
  {
    v34 = v33;
    v35 = *(_QWORD *)(v0 + 1056);
    v36 = *(void **)(v35 + 160);
    if (v36)
    {
      v37 = *(_QWORD *)(v35 + 152);
      swift_bridgeObjectRetain();
      v38 = sub_2364B3B0C(v37, (unint64_t)v36);
      v40 = v39;
      v36 = (void *)sub_2365AF93C();
      sub_236468D44(v38, v40);
    }
    objc_msgSend(v34, sel_setTargetAuthTag_, v36);

  }
  v41 = sub_2364BFA68();
  if (v41)
  {
    v42 = v41;
    sub_2365B005C();
    v43 = (void *)sub_2365B0038();
    swift_bridgeObjectRelease();
    objc_msgSend(v42, sel_setIdentifier_, v43);

  }
  v44 = sub_2364BFA68();
  if (v44)
  {
    v45 = v44;
    objc_msgSend(v44, sel_setNeedsSetup_, 1);

  }
  v46 = sub_2364BFA68();
  if (v46)
  {
    v47 = v46;
    objc_msgSend(v46, sel_setDeviceActionType_, *(unsigned __int8 *)(*(_QWORD *)(v0 + 1056) + 172));

  }
  v48 = sub_2364BFA68();
  if (v48)
  {
    v49 = v48;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7BA0);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2365B6A20;
    *(_QWORD *)(v0 + 1040) = 0x6C7070612E6D6F63;
    *(_QWORD *)(v0 + 1048) = 0xEF6E696D64612E65;
    sub_2365B0548();
    *(_QWORD *)(inited + 96) = MEMORY[0x24BEE1328];
    *(_BYTE *)(inited + 72) = 1;
    sub_236466CE4(inited);
    v51 = (void *)sub_2365AFF48();
    swift_bridgeObjectRelease();
    objc_msgSend(v49, sel_setPairSetupACL_, v51);

  }
  v52 = sub_2364BFA68();
  if (!v52)
  {
LABEL_32:
    v55 = sub_2364BFA68();
    if (v55)
    {
      v56 = v55;
      objc_msgSend(v55, sel_setSessionFlags_, 1);

    }
    v57 = sub_2364BFA68();
    v58 = MEMORY[0x24BDAC760];
    if (v57)
    {
      v59 = v57;
      v60 = swift_allocObject();
      swift_weakInit();
      v61 = (_QWORD *)swift_allocObject();
      v61[2] = v4;
      v61[3] = v5;
      v61[4] = v60;
      *(_QWORD *)(v0 + 480) = sub_2364C8298;
      *(_QWORD *)(v0 + 488) = v61;
      *(_QWORD *)(v0 + 448) = v58;
      *(_QWORD *)(v0 + 456) = 1107296256;
      *(_QWORD *)(v0 + 464) = sub_2364C135C;
      *(_QWORD *)(v0 + 472) = &block_descriptor_2;
      v62 = _Block_copy((const void *)(v0 + 448));
      swift_release();
      objc_msgSend(v59, sel_setShowPINHandlerEx_, v62);
      _Block_release(v62);

    }
    v63 = sub_2364BFA68();
    if (v63)
    {
      v64 = v63;
      v65 = swift_allocObject();
      swift_weakInit();
      v66 = (_QWORD *)swift_allocObject();
      v66[2] = v4;
      v66[3] = v5;
      v66[4] = v65;
      *(_QWORD *)(v0 + 528) = sub_2364C82DC;
      *(_QWORD *)(v0 + 536) = v66;
      *(_QWORD *)(v0 + 496) = v58;
      *(_QWORD *)(v0 + 504) = 1107296256;
      *(_QWORD *)(v0 + 512) = sub_2364BF6CC;
      *(_QWORD *)(v0 + 520) = &block_descriptor_10;
      v67 = _Block_copy((const void *)(v0 + 496));
      swift_release();
      objc_msgSend(v64, sel_setHidePINHandler_, v67);
      _Block_release(v67);

    }
    v68 = sub_2364BFA68();
    if (v68)
    {
      v69 = v68;
      v70 = swift_allocObject();
      swift_weakInit();
      v71 = (_QWORD *)swift_allocObject();
      v71[2] = v4;
      v71[3] = v5;
      v71[4] = v70;
      *(_QWORD *)(v0 + 576) = sub_2364C8318;
      *(_QWORD *)(v0 + 584) = v71;
      *(_QWORD *)(v0 + 544) = v58;
      *(_QWORD *)(v0 + 552) = 1107296256;
      *(_QWORD *)(v0 + 560) = sub_2364C141C;
      *(_QWORD *)(v0 + 568) = &block_descriptor_17;
      v72 = _Block_copy((const void *)(v0 + 544));
      swift_release();
      objc_msgSend(v69, sel_setSessionStartedHandler_, v72);
      _Block_release(v72);

    }
    v73 = sub_2364BFA68();
    if (v73)
    {
      v74 = v73;
      v75 = swift_allocObject();
      swift_weakInit();
      v76 = (_QWORD *)swift_allocObject();
      v76[2] = v4;
      v76[3] = v5;
      v76[4] = v75;
      *(_QWORD *)(v0 + 624) = sub_2364C834C;
      *(_QWORD *)(v0 + 632) = v76;
      *(_QWORD *)(v0 + 592) = v58;
      *(_QWORD *)(v0 + 600) = 1107296256;
      *(_QWORD *)(v0 + 608) = sub_2364C17E0;
      *(_QWORD *)(v0 + 616) = &block_descriptor_24;
      v77 = _Block_copy((const void *)(v0 + 592));
      swift_release();
      objc_msgSend(v74, sel_setSessionEndedHandler_, v77);
      _Block_release(v77);

    }
    v78 = sub_2364BFA68();
    if (v78)
    {
      v79 = v78;
      v80 = swift_allocObject();
      swift_weakInit();
      v81 = (_QWORD *)swift_allocObject();
      v81[2] = v4;
      v81[3] = v5;
      v81[4] = v80;
      *(_QWORD *)(v0 + 672) = sub_2364C8358;
      *(_QWORD *)(v0 + 680) = v81;
      *(_QWORD *)(v0 + 640) = v58;
      *(_QWORD *)(v0 + 648) = 1107296256;
      *(_QWORD *)(v0 + 656) = sub_2364C141C;
      *(_QWORD *)(v0 + 664) = &block_descriptor_31;
      v82 = _Block_copy((const void *)(v0 + 640));
      swift_release();
      objc_msgSend(v79, sel_setSessionSecuredHandler_, v82);
      _Block_release(v82);

    }
    v83 = sub_2364BFA68();
    if (v83)
    {
      v84 = v83;
      v85 = swift_allocObject();
      swift_weakInit();
      v86 = (_QWORD *)swift_allocObject();
      v86[2] = v4;
      v86[3] = v5;
      v86[4] = v85;
      *(_QWORD *)(v0 + 720) = sub_2364C838C;
      *(_QWORD *)(v0 + 728) = v86;
      *(_QWORD *)(v0 + 688) = v58;
      *(_QWORD *)(v0 + 696) = 1107296256;
      *(_QWORD *)(v0 + 704) = sub_2364BF6CC;
      *(_QWORD *)(v0 + 712) = &block_descriptor_38;
      v87 = _Block_copy((const void *)(v0 + 688));
      swift_release();
      objc_msgSend(v84, sel_setInvalidationHandler_, v87);
      _Block_release(v87);

    }
    v88 = sub_2364BFA68();
    if (v88)
    {
      v89 = v88;
      v90 = swift_allocObject();
      swift_weakInit();
      v91 = (_QWORD *)swift_allocObject();
      v91[2] = v4;
      v91[3] = v5;
      v91[4] = v90;
      *(_QWORD *)(v0 + 768) = sub_2364C83C8;
      *(_QWORD *)(v0 + 776) = v91;
      *(_QWORD *)(v0 + 736) = v58;
      *(_QWORD *)(v0 + 744) = 1107296256;
      *(_QWORD *)(v0 + 752) = sub_2364BF6CC;
      *(_QWORD *)(v0 + 760) = &block_descriptor_45;
      v92 = _Block_copy((const void *)(v0 + 736));
      swift_release();
      objc_msgSend(v89, sel_setInterruptionHandler_, v92);
      _Block_release(v92);

    }
    v93 = sub_2364BFA68();
    if (v93)
    {
      v94 = v93;
      v95 = swift_allocObject();
      swift_weakInit();
      v96 = (_QWORD *)swift_allocObject();
      v96[2] = v4;
      v96[3] = v5;
      v96[4] = v95;
      *(_QWORD *)(v0 + 816) = sub_2364C8404;
      *(_QWORD *)(v0 + 824) = v96;
      *(_QWORD *)(v0 + 784) = v58;
      *(_QWORD *)(v0 + 792) = 1107296256;
      *(_QWORD *)(v0 + 800) = sub_2364C1C48;
      *(_QWORD *)(v0 + 808) = &block_descriptor_52;
      v97 = _Block_copy((const void *)(v0 + 784));
      swift_release();
      objc_msgSend(v94, sel_setErrorHandler_, v97);
      _Block_release(v97);

    }
    v98 = sub_2364BFA68();
    if (v98)
    {
      v99 = v98;
      *(_QWORD *)(v0 + 864) = sub_2364C1C9C;
      *(_QWORD *)(v0 + 872) = 0;
      *(_QWORD *)(v0 + 832) = v58;
      *(_QWORD *)(v0 + 840) = 1107296256;
      *(_QWORD *)(v0 + 848) = sub_2364C1F94;
      *(_QWORD *)(v0 + 856) = &block_descriptor_55;
      v100 = _Block_copy((const void *)(v0 + 832));
      objc_msgSend(v99, sel_setPeerDisconnectedHandler_, v100);
      _Block_release(v100);

    }
    v101 = sub_2364BFA68();
    if (v101)
    {
      v102 = v101;
      *(_QWORD *)(v0 + 912) = sub_2364C2058;
      *(_QWORD *)(v0 + 920) = 0;
      *(_QWORD *)(v0 + 880) = v58;
      *(_QWORD *)(v0 + 888) = 1107296256;
      *(_QWORD *)(v0 + 896) = sub_2364C1C48;
      *(_QWORD *)(v0 + 904) = &block_descriptor_58;
      v103 = _Block_copy((const void *)(v0 + 880));
      objc_msgSend(v102, sel_setPairSetupCompletionHandler_, v103);
      _Block_release(v103);

    }
    v104 = sub_2364BFA68();
    if (v104)
    {
      v105 = v104;
      v106 = swift_allocObject();
      swift_weakInit();
      v107 = (_QWORD *)swift_allocObject();
      v107[2] = v4;
      v107[3] = v5;
      v107[4] = v106;
      *(_QWORD *)(v0 + 960) = sub_2364C8430;
      *(_QWORD *)(v0 + 968) = v107;
      *(_QWORD *)(v0 + 928) = v58;
      *(_QWORD *)(v0 + 936) = 1107296256;
      *(_QWORD *)(v0 + 944) = sub_2364C23AC;
      *(_QWORD *)(v0 + 952) = &block_descriptor_65;
      v108 = _Block_copy((const void *)(v0 + 928));
      swift_release();
      objc_msgSend(v105, sel_setReceivedRequestHandler_, v108);
      _Block_release(v108);

    }
    v109 = sub_2364BFA68();
    *(_QWORD *)(v0 + 1088) = v109;
    if (v109)
    {
      v110 = v109;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_2364C11E8;
      *(_QWORD *)(v0 + 1008) = swift_continuation_init();
      *(_QWORD *)(v0 + 976) = v58;
      *(_QWORD *)(v0 + 984) = 0x40000000;
      *(_QWORD *)(v0 + 992) = sub_2364C2530;
      *(_QWORD *)(v0 + 1000) = &block_descriptor_66;
      objc_msgSend(v110, sel_activateWithCompletion_, v0 + 976);
      return swift_continuation_await();
    }
    v111 = *(void (**)(uint64_t, uint64_t))(v0 + 1080);
    v112 = *(_QWORD *)(v0 + 1072);
    *(_QWORD *)(v0 + 184) = 2;
    *(_OWORD *)(v0 + 192) = 0u;
    *(_OWORD *)(v0 + 208) = 0u;
    *(_OWORD *)(v0 + 224) = 0u;
    *(_OWORD *)(v0 + 240) = 0u;
    *(_OWORD *)(v0 + 249) = 0u;
    *(_BYTE *)(v0 + 265) = 4;
    sub_2364C803C(v0 + 184);
    v111(v0 + 184, v112);
    v31 = *(uint64_t (**)(void))(v0 + 8);
    return v31();
  }
  v53 = v52;
  v54 = *(_QWORD *)(v0 + 1056);
  swift_beginAccess();
  if ((*(_DWORD *)(v54 + 168) & 0x80000000) == 0)
  {
    objc_msgSend(v53, sel_setPinType_);

    goto LABEL_32;
  }
  return sub_2365B0680();
}

uint64_t sub_2364C11E8()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 1096) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_2364C1248()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 1080);
  v2 = *(_QWORD *)(v0 + 1072);
  *(_QWORD *)(v0 + 184) = 2;
  *(_OWORD *)(v0 + 192) = 0u;
  *(_OWORD *)(v0 + 208) = 0u;
  *(_OWORD *)(v0 + 224) = 0u;
  *(_OWORD *)(v0 + 240) = 0u;
  *(_OWORD *)(v0 + 249) = 0u;
  *(_BYTE *)(v0 + 265) = 4;
  sub_2364C803C(v0 + 184);
  v1(v0 + 184, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2364C12C8()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 1088);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2364C130C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[3] = a6;
  v7[4] = a7;
  v7[2] = a4;
  return swift_task_switch();
}

uint64_t sub_2364C1328()
{
  uint64_t v0;

  sub_2364C8448(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2364C135C(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  v4 = sub_2365B005C();
  v6 = v5;
  swift_retain();
  v3(a2, v4, v6);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2364C13C0()
{
  return swift_task_switch();
}

uint64_t sub_2364C13D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch();
}

uint64_t sub_2364C13EC()
{
  uint64_t v0;

  sub_2364C28B8(*(void **)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_2364C141C(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t sub_2364C146C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  id v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9790);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2563E4300 != -1)
    swift_once();
  v9 = sub_2365AFC00();
  __swift_project_value_buffer(v9, (uint64_t)qword_2563E7B78);
  v10 = a1;
  v11 = a2;
  v12 = v10;
  v13 = a2;
  v14 = sub_2365AFBE8();
  v15 = sub_2365B038C();
  if (os_log_type_enabled(v14, v15))
  {
    v27 = a3 + 16;
    v28 = v8;
    v16 = swift_slowAlloc();
    v17 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v16 = 138412546;
    v29 = (uint64_t)v12;
    v18 = v12;
    sub_2365B04A0();
    *v17 = v12;

    *(_WORD *)(v16 + 12) = 2112;
    if (a2)
    {
      v19 = a2;
      v20 = _swift_stdlib_bridgeErrorToNSError();
      v29 = v20;
      sub_2365B04A0();
    }
    else
    {
      v29 = 0;
      sub_2365B04A0();
      v20 = 0;
    }
    v17[1] = v20;

    _os_log_impl(&dword_23644B000, v14, v15, "sessionEndedHandler called with session: %@ and error: %@", (uint8_t *)v16, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9960);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v17, -1, -1);
    MEMORY[0x23B7F5254](v16, -1, -1);

    v8 = v28;
  }
  else
  {

  }
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v22 = result;
    v23 = sub_2365B0218();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v8, 1, 1, v23);
    v24 = (_QWORD *)swift_allocObject();
    v24[2] = 0;
    v24[3] = 0;
    v24[4] = v22;
    v24[5] = v12;
    v24[6] = a2;
    v25 = v12;
    v26 = a2;
    sub_23649225C((uint64_t)v8, (uint64_t)&unk_2563E7F50, (uint64_t)v24);
    return swift_release();
  }
  return result;
}

uint64_t sub_2364C1798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t sub_2364C17B0()
{
  uint64_t v0;

  sub_2364C84E8();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_2364C17E0(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(id, void *);
  id v6;
  id v7;

  v5 = *(void (**)(id, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(v7, a3);
  swift_release();

}

uint64_t sub_2364C1854(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  char *v24;
  id v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  id v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;

  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9790);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2563E4300 != -1)
    swift_once();
  v15 = sub_2365AFC00();
  __swift_project_value_buffer(v15, (uint64_t)qword_2563E7B78);
  v16 = a1;
  v17 = sub_2365AFBE8();
  v18 = sub_2365B038C();
  if (os_log_type_enabled(v17, v18))
  {
    v34 = a7;
    v19 = swift_slowAlloc();
    v35 = a6;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc();
    v32 = a5;
    v22 = (_QWORD *)v21;
    *(_DWORD *)v20 = 138412290;
    v36 = v16;
    v23 = v16;
    v33 = a2 + 16;
    v24 = v14;
    v25 = v23;
    a7 = v34;
    sub_2365B04A0();
    *v22 = v16;

    v14 = v24;
    _os_log_impl(&dword_23644B000, v17, v18, v32, v20, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9960);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v22, -1, -1);
    MEMORY[0x23B7F5254](v20, -1, -1);
  }
  else
  {

  }
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v27 = result;
    v28 = sub_2365B0218();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v14, 1, 1, v28);
    v29 = (_QWORD *)swift_allocObject();
    v29[2] = 0;
    v29[3] = 0;
    v29[4] = v27;
    v29[5] = v16;
    v30 = v16;
    sub_23649225C((uint64_t)v14, a7, (uint64_t)v29);
    return swift_release();
  }
  return result;
}

uint64_t sub_2364C1AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch();
}

uint64_t sub_2364C1AE0()
{
  uint64_t v0;

  sub_2364C337C(*(void **)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2364C1B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t sub_2364C1B28(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  *(_QWORD *)(v4 + 24) = *a4;
  return swift_task_switch();
}

uint64_t sub_2364C1B48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;

  v5 = type metadata accessor for SharingServerBase.Failure(0, *(_QWORD *)(*(_QWORD *)(v4 + 24) + 80), *(_QWORD *)(*(_QWORD *)(v4 + 24) + 88), a4);
  MEMORY[0x23B7F5164](&unk_2365BB608, v5);
  *(_QWORD *)(v4 + 32) = swift_allocError();
  *v6 = 4;
  return swift_task_switch();
}

uint64_t sub_2364C1BC0()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 32);
  sub_2364C3848(v1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2364C1C00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch();
}

uint64_t sub_2364C1C18()
{
  uint64_t v0;

  sub_2364C3848(*(void **)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_2364C1C48(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

void sub_2364C1C9C(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[2];

  v24[1] = *MEMORY[0x24BDAC8D0];
  v4 = sub_2365AF9FC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2563E4300 != -1)
    swift_once();
  v8 = sub_2365AFC00();
  __swift_project_value_buffer(v8, (uint64_t)qword_2563E7B78);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v9 = a2;
  v10 = a2;
  v11 = sub_2365AFBE8();
  v12 = sub_2365B038C();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc();
    v21 = (_QWORD *)swift_slowAlloc();
    v22 = swift_slowAlloc();
    v24[0] = v22;
    *(_DWORD *)v13 = 136315394;
    sub_2364C9B6C();
    v14 = sub_2365B0860();
    v23 = sub_236468D88(v14, v15, v24);
    sub_2365B04A0();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *(_WORD *)(v13 + 12) = 2112;
    if (a2)
    {
      v16 = a2;
      v17 = _swift_stdlib_bridgeErrorToNSError();
      v23 = v17;
      sub_2365B04A0();
    }
    else
    {
      v23 = 0;
      sub_2365B04A0();
      v17 = 0;
    }
    v18 = v21;
    *v21 = v17;

    _os_log_impl(&dword_23644B000, v11, v12, "peerDisconnectedHandler called for peer: %s with error: %@", (uint8_t *)v13, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9960);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v18, -1, -1);
    v19 = v22;
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v19, -1, -1);
    MEMORY[0x23B7F5254](v13, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);

  }
}

uint64_t sub_2364C1F94(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, void *);
  id v10;
  uint64_t v12;

  v5 = sub_2365AF9FC();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *, void *))(a1 + 32);
  sub_2365AF9E4();
  swift_retain();
  v10 = a3;
  v9(v8, a3);
  swift_release();

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_2364C2058(void *a1)
{
  sub_2364C57DC(a1);
}

void sub_2364C209C(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;

  if (qword_2563E4300 != -1)
    swift_once();
  v2 = sub_2365AFC00();
  __swift_project_value_buffer(v2, (uint64_t)qword_2563E7B78);
  v3 = a1;
  swift_bridgeObjectRetain_n();
  v4 = v3;
  v5 = sub_2365AFBE8();
  v6 = sub_2365B0398();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc();
    v8 = (_QWORD *)swift_slowAlloc();
    v16 = swift_slowAlloc();
    v17 = v16;
    *(_DWORD *)v7 = 138412802;
    v9 = v4;
    sub_2365B04A0();
    *v8 = v4;

    *(_WORD *)(v7 + 12) = 1024;
    sub_2365B04A0();
    *(_WORD *)(v7 + 18) = 2080;
    swift_bridgeObjectRetain();
    v10 = sub_2365AFF6C();
    v12 = v11;
    swift_bridgeObjectRelease();
    sub_236468D88(v10, v12, &v17);
    sub_2365B04A0();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23644B000, v5, v6, "receivedRequestHandler called: %@ flags: %u request: %s", (uint8_t *)v7, 0x1Cu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9960);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v8, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v16, -1, -1);
    MEMORY[0x23B7F5254](v7, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v13 = sub_2365AFBE8();
  v14 = sub_2365B038C();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_23644B000, v13, v14, "Interacting with modern device, ignoring received sharing request", v15, 2u);
    MEMORY[0x23B7F5254](v15, -1, -1);
  }

}

uint64_t SFSession.peerSupportsAppleIDSetup.getter()
{
  return 1;
}

void sub_2364C23AC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  void (*v7)(void);
  void *v8;
  id v9;

  v7 = *(void (**)(void))(a1 + 32);
  sub_2365AFF60();
  v8 = _Block_copy(a5);
  *(_QWORD *)(swift_allocObject() + 16) = v8;
  swift_retain();
  v9 = a2;
  v7();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

}

void sub_2364C2490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  id v9;

  if (!a2)
  {
    v7 = 0;
    if (a3)
      goto LABEL_3;
LABEL_5:
    v8 = 0;
    goto LABEL_6;
  }
  v7 = (void *)sub_2365AF8E8();
  if (!a3)
    goto LABEL_5;
LABEL_3:
  v8 = sub_2365AFF48();
LABEL_6:
  v9 = (id)v8;
  (*(void (**)(uint64_t, uint64_t, void *))(a4 + 16))(a4, a1, v7);

}

uint64_t sub_2364C2530(uint64_t a1, void *a2)
{
  _QWORD *v3;
  id v4;

  if (!a2)
    return swift_continuation_throwingResume();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542A8310);
  swift_allocError();
  *v3 = a2;
  v4 = a2;
  return swift_continuation_throwingResumeWithError();
}

void sub_2364C25A4()
{
  sub_2364C25AC(0);
}

void sub_2364C25AC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9790);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2563E4300 != -1)
    swift_once();
  v7 = sub_2365AFC00();
  __swift_project_value_buffer(v7, (uint64_t)qword_2563E7B78);
  v8 = sub_2365AFBE8();
  v9 = sub_2365B0380();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc();
    v11 = swift_slowAlloc();
    v20 = v11;
    *(_DWORD *)v10 = 136315394;
    v12 = sub_2365B0AE8();
    v19 = sub_236468D88(v12, v13, &v20);
    sub_2365B04A0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 1024;
    LODWORD(v19) = a1 & 1;
    sub_2365B04A0();
    _os_log_impl(&dword_23644B000, v8, v9, "Invalidating %s for deinit: %{BOOL}d", (uint8_t *)v10, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v11, -1, -1);
    MEMORY[0x23B7F5254](v10, -1, -1);
  }

  if ((a1 & 1) != 0)
  {
    v14 = sub_2365AFBE8();
    v15 = sub_2365B038C();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_23644B000, v14, v15, "Not changing to invalidated state, we are deinitialized", v16, 2u);
      MEMORY[0x23B7F5254](v16, -1, -1);
    }

  }
  else
  {
    v17 = sub_2365B0218();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v6, 1, 1, v17);
    v18 = (_QWORD *)swift_allocObject();
    v18[2] = 0;
    v18[3] = 0;
    v18[4] = v2;
    swift_retain();
    sub_23649225C((uint64_t)v6, (uint64_t)&unk_2563E7F90, (uint64_t)v18);
    swift_release();
  }
}

uint64_t sub_2364C2870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t sub_2364C2888()
{
  uint64_t v0;

  sub_2364C38B4();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2364C28B8(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[32];

  v3 = *v1;
  v4 = a1;
  sub_2364C7FE8(a1);

  if (qword_2563E4300 != -1)
    swift_once();
  v5 = sub_2365AFC00();
  __swift_project_value_buffer(v5, (uint64_t)qword_2563E7B78);
  v6 = v4;
  v7 = sub_2365AFBE8();
  v8 = sub_2365B0380();
  if (os_log_type_enabled(v7, v8))
  {
    v18 = v3;
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v9 = 138412290;
    v19 = (uint64_t)v6;
    v11 = v6;
    sub_2365B04A0();
    *v10 = a1;

    v3 = v18;
    _os_log_impl(&dword_23644B000, v7, v8, "Communicating with modern OS, running tag exchange with session: %@", v9, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9960);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v10, -1, -1);
    MEMORY[0x23B7F5254](v9, -1, -1);
  }
  else
  {

  }
  sub_2364C2AD0(v6);
  v19 = 3;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  memset(v23, 0, 25);
  v23[25] = 4;
  sub_2364C803C((uint64_t)&v19);
  v13 = type metadata accessor for AnyTransportBuilder(255, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v12);
  v16 = type metadata accessor for BluetoothBaseState(0, v13, v14, v15);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(&v19, v16);
}

uint64_t sub_2364C2AD0(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  uint64_t v14;

  v3 = *v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9790);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_2365B0218();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v9 = type metadata accessor for SharingServerBase(255, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v8);
  v10 = MEMORY[0x23B7F5164](&protocol conformance descriptor for SharingServerBase<A>, v9);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v1;
  v11[3] = v10;
  v11[4] = v1;
  v11[5] = a1;
  swift_retain_n();
  v12 = a1;
  sub_2364BF59C((uint64_t)v6, (uint64_t)&unk_2563E7E80, (uint64_t)v11);
  return swift_release();
}

uint64_t sub_2364C2BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t sub_2364C2BE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int8x16_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 224);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v2;
  *(_QWORD *)v2 = v0;
  *(_QWORD *)(v2 + 8) = sub_2364C2C5C;
  v3 = *(int8x16_t *)(v0 + 24);
  *(int8x16_t *)(v2 + 24) = vextq_s8(v3, v3, 8uLL);
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 40) = *(_QWORD *)v3.i64[0];
  return swift_task_switch();
}

uint64_t sub_2364C2C5C(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_BYTE *)(v4 + 48) = a1 & 1;
  return swift_task_switch();
}

uint64_t sub_2364C2CDC()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_BYTE *)(v0 + 48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2364C2CF4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *v2;
  return swift_task_switch();
}

uint64_t sub_2364C2D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;

  v5 = *(_QWORD *)(v4 + 32);
  v6 = type metadata accessor for SharingServerBase(255, *(_QWORD *)(*(_QWORD *)(v4 + 40) + 80), *(_QWORD *)(*(_QWORD *)(v4 + 40) + 88), a4);
  MEMORY[0x23B7F5164](&protocol conformance descriptor for SharingServerBase<A>, v6);
  v7 = swift_task_alloc();
  *(_QWORD *)(v4 + 48) = v7;
  v8 = *(_OWORD *)(v4 + 16);
  *(_QWORD *)(v7 + 16) = v5;
  *(_OWORD *)(v7 + 24) = v8;
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 56) = v9;
  *v9 = v4;
  v9[1] = sub_2364C2DE8;
  return sub_2365B0914();
}

uint64_t sub_2364C2DE8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2364C2E5C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 72));
}

uint64_t sub_2364C2E6C()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_2364C2EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  int v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[5];
  __int128 v24;
  __int128 v25;

  if (qword_2563E4300 != -1)
    swift_once();
  v4 = sub_2365AFC00();
  __swift_project_value_buffer(v4, (uint64_t)qword_2563E7B78);
  swift_bridgeObjectRetain_n();
  v5 = sub_2365AFBE8();
  v6 = sub_2365B038C();
  if (!os_log_type_enabled(v5, v6))
  {

    swift_bridgeObjectRelease_n();
    if (a3)
      goto LABEL_5;
LABEL_9:
    v24 = 0u;
    v25 = 0u;
LABEL_16:
    sub_236465998((uint64_t)&v24, (uint64_t *)&unk_2542A8320);
    goto LABEL_17;
  }
  v7 = (uint8_t *)swift_slowAlloc();
  v8 = swift_slowAlloc();
  v23[0] = v8;
  *(_DWORD *)v7 = 136315138;
  *(_QWORD *)&v24 = a3;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7E70);
  v9 = sub_2365B0080();
  *(_QWORD *)&v24 = sub_236468D88(v9, v10, v23);
  sub_2365B04A0();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  _os_log_impl(&dword_23644B000, v5, v6, "Received tag exchange response: %s", v7, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x23B7F5254](v8, -1, -1);
  MEMORY[0x23B7F5254](v7, -1, -1);

  if (!a3)
    goto LABEL_9;
LABEL_5:
  sub_2365B0548();
  if (*(_QWORD *)(a3 + 16) && (v11 = sub_2364685F8((uint64_t)v23), (v12 & 1) != 0))
  {
    sub_23646A9F4(*(_QWORD *)(a3 + 56) + 32 * v11, (uint64_t)&v24);
  }
  else
  {
    v24 = 0u;
    v25 = 0u;
  }
  sub_23646A464((uint64_t)v23);
  if (!*((_QWORD *)&v25 + 1))
    goto LABEL_16;
  if ((swift_dynamicCast() & 1) != 0)
  {
    v13 = LOBYTE(v23[0]);
    v14 = sub_2365AFBE8();
    v15 = sub_2365B0380();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v16 = 67109120;
      LODWORD(v23[0]) = v13;
      sub_2365B04A0();
      _os_log_impl(&dword_23644B000, v14, v15, "Tag exchange resulted in peer deciding to accept: %{BOOL}d", v16, 8u);
      MEMORY[0x23B7F5254](v16, -1, -1);
    }

    LOBYTE(v23[0]) = v13;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7E68);
    return sub_2365B01C4();
  }
LABEL_17:
  v18 = sub_2365AFBE8();
  v19 = sub_2365B0398();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v20 = 0;
    _os_log_impl(&dword_23644B000, v18, v19, "Failed to parse tag exchange response", v20, 2u);
    MEMORY[0x23B7F5254](v20, -1, -1);
  }

  sub_2364858F4();
  v21 = swift_allocError();
  *(_OWORD *)v22 = 0u;
  *(_OWORD *)(v22 + 16) = 0u;
  *(_OWORD *)(v22 + 32) = 0u;
  *(_BYTE *)(v22 + 48) = 4;
  v23[0] = v21;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7E68);
  return sub_2365B01B8();
}

uint64_t sub_2364C32B0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void (*v6)(void *, uint64_t, uint64_t);
  uint64_t v7;
  id v8;

  v4 = a4;
  v6 = *(void (**)(void *, uint64_t, uint64_t))(a1 + 32);
  if (!a3)
  {
    v7 = 0;
    if (!a4)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = sub_2365AFF60();
  if (v4)
LABEL_3:
    v4 = sub_2365AFF60();
LABEL_4:
  swift_retain();
  v8 = a2;
  v6(a2, v7, v4);
  swift_release();

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2364C337C(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[88];

  v3 = *v1;
  v4 = a1;
  sub_2364C7FE8(a1);

  v6 = type metadata accessor for AnyTransportBuilder(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v5);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542A8310);
  sub_23657FC20((void (*)(_BYTE *))sub_2364C95F0, (uint64_t)v11);
  v11[81] = 2;
  sub_2364C803C((uint64_t)v11);
  v9 = type metadata accessor for BluetoothBaseState(0, v6, v7, v8);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v11, v9);
}

void sub_2364C3438(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  _BYTE *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  unint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a4;
  v44 = a5;
  v8 = type metadata accessor for MessageSessionTransport(255, a2, a3, (uint64_t)a4);
  v9 = sub_2365B047C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v41 - v12;
  v14 = *(_QWORD *)(v8 - 8);
  v15 = MEMORY[0x24BDAC7A8](v11);
  v43 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v41 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v45 = (char *)&v41 - v20;
  v21 = objc_msgSend(a1, sel_messageSessionTemplate);
  if (!v21)
  {
    v28 = type metadata accessor for SharingServerBase.Failure(0, a2, a3, v22);
    MEMORY[0x23B7F5164](&unk_2365BB608, v28);
    v26 = swift_allocError();
    *v29 = 1;
    swift_willThrow();
    goto LABEL_5;
  }
  v23 = v21;
  MessageSessionTransport.init(templateSession:identifier:)(v23, 0xD000000000000040, 0x80000002365CC2F0, a2, a3, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    v25 = type metadata accessor for SharingServerBase.Failure(0, a2, a3, v24);
    MEMORY[0x23B7F5164](&unk_2365BB608, v25);
    v26 = swift_allocError();
    *v27 = 2;
    swift_willThrow();

LABEL_5:
    *v46 = v26;
    return;
  }
  v46 = (uint64_t *)v23;
  v30 = v45;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v45, v13, v8);
  if (qword_2563E4300 != -1)
    swift_once();
  v31 = sub_2365AFC00();
  __swift_project_value_buffer(v31, (uint64_t)qword_2563E7B78);
  v32 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v32(v19, v30, v8);
  v33 = sub_2365AFBE8();
  v34 = sub_2365B0380();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc();
    v42 = swift_slowAlloc();
    v48 = v42;
    *(_DWORD *)v35 = 136315138;
    v41 = v35 + 4;
    v32(v43, v19, v8);
    v36 = sub_2365B0080();
    v47 = sub_236468D88(v36, v37, &v48);
    sub_2365B04A0();
    swift_bridgeObjectRelease();
    v38 = *(void (**)(char *, uint64_t))(v14 + 8);
    v38(v19, v8);
    _os_log_impl(&dword_23644B000, v33, v34, "Created transport for message session: %s", v35, 0xCu);
    v39 = v42;
    swift_arrayDestroy();
    v30 = v45;
    MEMORY[0x23B7F5254](v39, -1, -1);
    MEMORY[0x23B7F5254](v35, -1, -1);
  }
  else
  {
    v38 = *(void (**)(char *, uint64_t))(v14 + 8);
    v38(v19, v8);
  }

  v40 = MEMORY[0x23B7F5164](&protocol conformance descriptor for MessageSessionTransport<A>, v8);
  TransportBuilding.into()(v8, v40, v44);

  v38(v30, v8);
}

uint64_t sub_2364C3848(void *a1)
{
  uint64_t *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v10;
  char v11;
  char v12;

  v2 = *v1;
  v10 = a1;
  v11 = 1;
  v12 = 0;
  v3 = a1;
  sub_2364C803C((uint64_t)&v10);
  v5 = type metadata accessor for AnyTransportBuilder(255, *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88), v4);
  v8 = type metadata accessor for BluetoothBaseState(0, v5, v6, v7);
  return (*(uint64_t (**)(void **, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(&v10, v8);
}

uint64_t sub_2364C38B4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[32];

  v1 = *v0;
  if (qword_2563E4300 != -1)
    swift_once();
  v2 = sub_2365AFC00();
  __swift_project_value_buffer(v2, (uint64_t)qword_2563E7B78);
  v3 = sub_2365AFBE8();
  v4 = sub_2365B038C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_23644B000, v3, v4, "Invalidating sharing service.", v5, 2u);
    MEMORY[0x23B7F5254](v5, -1, -1);
  }

  v6 = sub_2364BFA68();
  objc_msgSend(v6, sel_invalidate);

  v13 = 6;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  memset(v17, 0, 25);
  v17[25] = 4;
  sub_2364C803C((uint64_t)&v13);
  v8 = type metadata accessor for AnyTransportBuilder(255, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v7);
  v11 = type metadata accessor for BluetoothBaseState(0, v8, v9, v10);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(&v13, v11);
}

unint64_t sub_2364C3A0C()
{
  return 0xD000000000000022;
}

unint64_t sub_2364C3A28(unint64_t result)
{
  if (result >= 0xF)
    return 15;
  return result;
}

uint64_t sub_2364C3A38(uint64_t result)
{
  return result;
}

uint64_t sub_2364C3A40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7F5164](&unk_2365BB4C0, a3);
  return sub_2365B0908();
}

uint64_t sub_2364C3A94(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BB4C0, a1);
  return sub_2365B0128();
}

uint64_t sub_2364C3AE0()
{
  MEMORY[0x23B7F5164](&unk_2365BB4C0);
  return sub_2365B0140();
}

uint64_t sub_2364C3B30()
{
  MEMORY[0x23B7F5164](&unk_2365BB4C0);
  return sub_2365B0134();
}

unint64_t sub_2364C3B80@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_2364C3A28(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_2364C3BA8@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;

  result = sub_2364C3A38(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_2364C3BD0(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BB480, a1);
  return sub_2365B0980();
}

uint64_t sub_2364C3C04(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BB480, a1);
  MEMORY[0x23B7F5164](&unk_2365BB4C0, a1);
  sub_2364C9528();
  return sub_2365B0968();
}

unint64_t sub_2364C3C64()
{
  sub_2364C3A0C();
  return 0xD000000000000022;
}

uint64_t sub_2364C3C80(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BB4C0, a1);
  sub_2364C9528();
  return sub_2365AF834();
}

uint64_t sub_2364C3CD4()
{
  _QWORD **v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v2 = *v0;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23647E274;
  v3[132] = v2;
  v3[133] = *v2;
  return swift_task_switch();
}

void sub_2364C3D3C()
{
  sub_2364C25A4();
}

id SharingClientBase.base.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 112);
}

id SharingClientBase.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 120);
}

uint64_t SharingClientBase.fixedPin.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRetain();
  return v1;
}

id SharingClientBase.peerDevice.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 144);
}

uint64_t SharingClientBase.filter.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 152);
  sub_23645063C(v1);
  return v1;
}

uint64_t SharingClientBase.stateHandler.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 168);
  swift_retain();
  return v1;
}

uint64_t sub_2364C3E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(_QWORD *, uint64_t, char *);
  char *v15;
  uint64_t v17;

  v6 = *v4;
  v7 = type metadata accessor for MessageSessionTransport(255, *(_QWORD *)(*v4 + 80), *(_QWORD *)(*v4 + 88), a4);
  v10 = type metadata accessor for BluetoothBaseState(0, v7, v8, v9);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v17 - v12;
  v14 = (void (*)(_QWORD *, uint64_t, char *))v4[21];
  v15 = (char *)v4 + *(_QWORD *)(v6 + 160);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v15, v10);
  v14(v4, a1, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_2364C3EDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 160);
  swift_beginAccess();
  v6 = type metadata accessor for MessageSessionTransport(255, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v5);
  v9 = type metadata accessor for BluetoothBaseState(0, v6, v7, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, v4, v9);
}

uint64_t SharingClientBase.__allocating_init(base:queue:fixedPin:serviceType:peerDevice:filter:stateHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;

  v17 = swift_allocObject();
  SharingClientBase.init(base:queue:fixedPin:serviceType:peerDevice:filter:stateHandler:)(a1, a2, a3, a4, v18, a6, a7, a8, a9, a10);
  return v17;
}

uint64_t *SharingClientBase.init(base:queue:fixedPin:serviceType:peerDevice:filter:stateHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v16 = *v10;
  swift_defaultActor_initialize();
  v18 = type metadata accessor for MessageSessionTransport(255, *(_QWORD *)(v16 + 80), *(_QWORD *)(v16 + 88), v17);
  type metadata accessor for BluetoothBaseState(0, v18, v19, v20);
  swift_storeEnumTagMultiPayload();
  v10[14] = a1;
  v10[15] = a2;
  v10[16] = a3;
  v10[17] = a4;
  v10[18] = a6;
  v10[19] = a7;
  v10[20] = a8;
  v10[21] = a9;
  v10[22] = a10;
  return v10;
}

_QWORD *SharingClientBase.deinit()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0;
  v2 = *v0;
  if (qword_2563E4300 != -1)
    swift_once();
  v3 = sub_2365AFC00();
  __swift_project_value_buffer(v3, (uint64_t)qword_2563E7B78);
  v4 = sub_2365AFBE8();
  v5 = sub_2365B0380();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_23644B000, v4, v5, "SharingClientBase deallocated", v6, 2u);
    MEMORY[0x23B7F5254](v6, -1, -1);
  }

  sub_2364C5F98(1);
  swift_bridgeObjectRelease();

  sub_236450690(v1[19]);
  swift_release();
  v7 = (char *)v1 + *(_QWORD *)(*v1 + 160);
  v9 = type metadata accessor for MessageSessionTransport(255, *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88), v8);
  v12 = type metadata accessor for BluetoothBaseState(0, v9, v10, v11);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v7, v12);
  swift_defaultActor_destroy();
  return v1;
}

uint64_t SharingClientBase.__deallocating_deinit()
{
  SharingClientBase.deinit();
  return swift_defaultActor_deallocate();
}

uint64_t sub_2364C4224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5[63] = v4;
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 80);
  v5[64] = v7;
  v8 = *(_QWORD *)(v6 + 88);
  v5[65] = v8;
  v9 = type metadata accessor for MessageSessionTransport(255, v7, v8, a4);
  v12 = type metadata accessor for BluetoothBaseState(0, v9, v10, v11);
  v5[66] = v12;
  v5[67] = *(_QWORD *)(v12 - 8);
  v5[68] = swift_task_alloc();
  v5[69] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_2364C42B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int EnumCaseMultiPayload;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  _QWORD *v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  uint64_t v46;

  v1 = v0[69];
  v2 = v0[67];
  v3 = v0[66];
  sub_2364C3EDC(v1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v0[70] = v5;
  v5(v1, v3);
  if (EnumCaseMultiPayload == 4)
  {
    v7 = v0[68];
    v8 = v0[66];
    v9 = (_QWORD *)v0[63];
    swift_storeEnumTagMultiPayload();
    sub_2364C8A4C(v7, v10, v11, v12);
    v5(v7, v8);
    v13 = (void *)v9[14];
    objc_msgSend(v13, sel_setDispatchQueue_, v9[15]);
    sub_2365B005C();
    v14 = (void *)sub_2365B0038();
    swift_bridgeObjectRelease();
    objc_msgSend(v13, sel_setLabel_, v14);

    if (v9[17])
      v15 = (void *)sub_2365B0038();
    else
      v15 = 0;
    v19 = v0[65];
    v21 = v0[63];
    v20 = v0[64];
    objc_msgSend(v13, sel_setFixedPIN_, v15);

    objc_msgSend(v13, sel_setPeerDevice_, *(_QWORD *)(v21 + 144));
    sub_2365B005C();
    v22 = (void *)sub_2365B0038();
    swift_bridgeObjectRelease();
    objc_msgSend(v13, sel_setServiceIdentifier_, v22);

    objc_msgSend(v13, sel_setSessionFlags_, 4097);
    v23 = swift_allocObject();
    swift_weakInit();
    v24 = (_QWORD *)swift_allocObject();
    v24[2] = v20;
    v24[3] = v19;
    v24[4] = v23;
    v0[56] = sub_2364C8B40;
    v0[57] = v24;
    v25 = MEMORY[0x24BDAC760];
    v0[52] = MEMORY[0x24BDAC760];
    v0[53] = 1107296256;
    v0[54] = sub_2364C4DA8;
    v0[55] = &block_descriptor_76;
    v26 = _Block_copy(v0 + 52);
    swift_release();
    objc_msgSend(v13, sel_setPromptForPINHandler_, v26);
    _Block_release(v26);
    v27 = swift_allocObject();
    swift_weakInit();
    v28 = (_QWORD *)swift_allocObject();
    v28[2] = v20;
    v28[3] = v19;
    v28[4] = v27;
    v0[14] = sub_2364C8B4C;
    v0[15] = v28;
    v0[10] = v25;
    v0[11] = 1107296256;
    v0[12] = sub_2364C135C;
    v0[13] = &block_descriptor_83;
    v29 = _Block_copy(v0 + 10);
    swift_release();
    objc_msgSend(v13, sel_setShowPINHandlerEx_, v29);
    _Block_release(v29);
    v30 = swift_allocObject();
    swift_weakInit();
    v31 = (_QWORD *)swift_allocObject();
    v31[2] = v20;
    v31[3] = v19;
    v31[4] = v30;
    v0[20] = sub_2364C8B78;
    v0[21] = v31;
    v0[16] = v25;
    v0[17] = 1107296256;
    v0[18] = sub_2364BF6CC;
    v0[19] = &block_descriptor_90;
    v32 = _Block_copy(v0 + 16);
    swift_release();
    objc_msgSend(v13, sel_setHidePINHandler_, v32);
    _Block_release(v32);
    v33 = swift_allocObject();
    swift_weakInit();
    v34 = (_QWORD *)swift_allocObject();
    v34[2] = v20;
    v34[3] = v19;
    v34[4] = v33;
    v0[22] = v25;
    v0[26] = sub_2364C8BB4;
    v0[27] = v34;
    v0[23] = 1107296256;
    v0[24] = sub_2364BF6CC;
    v0[25] = &block_descriptor_97;
    v35 = _Block_copy(v0 + 22);
    swift_release();
    objc_msgSend(v13, sel_setSessionStartedHandler_, v35);
    _Block_release(v35);
    v36 = swift_allocObject();
    swift_weakInit();
    v37 = (_QWORD *)swift_allocObject();
    v37[2] = v20;
    v37[3] = v19;
    v37[4] = v36;
    v0[28] = v25;
    v0[32] = sub_2364C8C14;
    v0[33] = v37;
    v0[29] = 1107296256;
    v0[30] = sub_2364BF6CC;
    v0[31] = &block_descriptor_104;
    v38 = _Block_copy(v0 + 28);
    swift_release();
    objc_msgSend(v13, sel_setInvalidationHandler_, v38);
    _Block_release(v38);
    v39 = swift_allocObject();
    swift_weakInit();
    v40 = (_QWORD *)swift_allocObject();
    v40[2] = v20;
    v40[3] = v19;
    v40[4] = v39;
    v0[38] = sub_2364C8C50;
    v0[39] = v40;
    v0[34] = v25;
    v0[35] = 1107296256;
    v0[36] = sub_2364BF6CC;
    v0[37] = &block_descriptor_111;
    v41 = _Block_copy(v0 + 34);
    swift_release();
    objc_msgSend(v13, sel_setInterruptionHandler_, v41);
    _Block_release(v41);
    v42 = swift_allocObject();
    swift_weakInit();
    v43 = (_QWORD *)swift_allocObject();
    v43[2] = v20;
    v43[3] = v19;
    v43[4] = v42;
    v0[44] = sub_2364C8C8C;
    v0[45] = v43;
    v0[40] = v25;
    v0[41] = 1107296256;
    v0[42] = sub_2364C1C48;
    v0[43] = &block_descriptor_118;
    v44 = _Block_copy(v0 + 40);
    swift_release();
    objc_msgSend(v13, sel_setErrorHandler_, v44);
    _Block_release(v44);
    v0[50] = sub_2364C2058;
    v0[51] = 0;
    v0[46] = v25;
    v0[47] = 1107296256;
    v0[48] = sub_2364C1C48;
    v0[49] = &block_descriptor_121;
    v45 = _Block_copy(v0 + 46);
    objc_msgSend(v13, sel_setPairSetupCompletionHandler_, v45);
    _Block_release(v45);
    v0[2] = v0;
    v0[3] = sub_2364C49C0;
    v46 = swift_continuation_init();
    v0[58] = v25;
    v0[59] = 0x40000000;
    v0[60] = sub_2364C2530;
    v0[61] = &block_descriptor_122;
    v0[62] = v46;
    objc_msgSend(v13, sel_activateWithCompletion_, v0 + 58);
    return swift_continuation_await();
  }
  else
  {
    v16 = type metadata accessor for SharingClientBase.Failure(0, v0[64], v0[65], v6);
    MEMORY[0x23B7F5164](&unk_2365BB5C8, v16);
    swift_allocError();
    *v17 = 3;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    return ((uint64_t (*)(void))v0[1])();
  }
}

uint64_t sub_2364C49C0()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 568) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_2364C4A20()
{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = (void (*)(uint64_t, uint64_t))v0[70];
  v2 = v0[68];
  v3 = v0[66];
  swift_storeEnumTagMultiPayload();
  sub_2364C8A4C(v2, v4, v5, v6);
  v1(v2, v3);
  v7 = (_QWORD *)swift_task_alloc();
  v0[72] = v7;
  *v7 = v0;
  v7[1] = sub_2364C4AB8;
  v7[23] = v0[63];
  return swift_task_switch();
}

uint64_t sub_2364C4AB8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_2364C4B10()
{
  uint64_t v0;

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2364C4B60(int a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9790);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2563E4300 != -1)
    swift_once();
  v7 = sub_2365AFC00();
  __swift_project_value_buffer(v7, (uint64_t)qword_2563E7B78);
  v8 = sub_2365AFBE8();
  v9 = sub_2365B038C();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc();
    *(_DWORD *)v10 = 67109376;
    v16 = a1;
    sub_2365B04A0();
    *(_WORD *)(v10 + 8) = 1024;
    v16 = a2;
    sub_2365B04A0();
    _os_log_impl(&dword_23644B000, v8, v9, "promptForPINHandler called with flags: %u and throttleSeconds: %d", (uint8_t *)v10, 0xEu);
    MEMORY[0x23B7F5254](v10, -1, -1);
  }

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v12 = result;
    v13 = sub_2365B0218();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v6, 1, 1, v13);
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)(v14 + 24) = 0;
    *(_QWORD *)(v14 + 32) = v12;
    *(_DWORD *)(v14 + 40) = a1;
    *(_DWORD *)(v14 + 44) = a2;
    sub_23649225C((uint64_t)v6, (uint64_t)&unk_2563E7EF0, v14);
    return swift_release();
  }
  return result;
}

uint64_t sub_2364C4D54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6;

  *(_DWORD *)(v6 + 24) = a5;
  *(_DWORD *)(v6 + 28) = a6;
  *(_QWORD *)(v6 + 16) = a4;
  return swift_task_switch();
}

uint64_t sub_2364C4D70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_2364C6378(*(unsigned int *)(v4 + 24), *(_DWORD *)(v4 + 28), *(void **)(*(_QWORD *)(v4 + 16) + 112), a4);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_2364C4DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(uint64_t, uint64_t);

  v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);
  return swift_release();
}

uint64_t sub_2364C4DF0(int a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[3];

  v29 = a2;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9790);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a4 + 16;
  if (qword_2563E4300 != -1)
    swift_once();
  v16 = sub_2365AFC00();
  __swift_project_value_buffer(v16, (uint64_t)qword_2563E7B78);
  swift_bridgeObjectRetain_n();
  v17 = sub_2365AFBE8();
  v18 = sub_2365B038C();
  v19 = os_log_type_enabled(v17, v18);
  v28 = a1;
  if (v19)
  {
    v20 = swift_slowAlloc();
    v21 = swift_slowAlloc();
    v27[1] = v15;
    v22 = v21;
    v31[0] = v21;
    *(_DWORD *)v20 = 67109378;
    LODWORD(v30) = a1;
    sub_2365B04A0();
    *(_WORD *)(v20 + 8) = 2080;
    swift_bridgeObjectRetain();
    v30 = sub_236468D88(v29, a3, v31);
    sub_2365B04A0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23644B000, v17, v18, "showPINHandlerEx called with flags: %u and password: %s", (uint8_t *)v20, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v22, -1, -1);
    MEMORY[0x23B7F5254](v20, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v24 = result;
    v25 = sub_2365B0218();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v14, 1, 1, v25);
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = 0;
    *(_QWORD *)(v26 + 24) = 0;
    *(_QWORD *)(v26 + 32) = v24;
    *(_DWORD *)(v26 + 40) = v28;
    *(_QWORD *)(v26 + 48) = v29;
    *(_QWORD *)(v26 + 56) = a3;
    swift_bridgeObjectRetain();
    sub_23649225C((uint64_t)v14, a8, v26);
    return swift_release();
  }
  return result;
}

uint64_t sub_2364C5098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[3] = a6;
  v7[4] = a7;
  v7[2] = a4;
  return swift_task_switch();
}

uint64_t sub_2364C50B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_2364C99CC(*(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), a3, a4);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_2364C50E8()
{
  return swift_task_switch();
}

uint64_t sub_2364C50FC()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  if (qword_2563E4300 != -1)
    swift_once();
  v1 = sub_2365AFC00();
  __swift_project_value_buffer(v1, (uint64_t)qword_2563E7B78);
  v2 = sub_2365AFBE8();
  v3 = sub_2365B0398();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_23644B000, v2, v3, "Received PIN hide but not supported yet", v4, 2u);
    MEMORY[0x23B7F5254](v4, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2364C51D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t sub_2364C51F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_2364C62D0(*(void **)(*(_QWORD *)(v4 + 16) + 112), a2, a3, a4);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_2364C5224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t sub_2364C523C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), const char *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9790);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2563E4300 != -1)
    swift_once();
  v13 = sub_2365AFC00();
  __swift_project_value_buffer(v13, (uint64_t)qword_2563E7B78);
  v14 = sub_2365AFBE8();
  v15 = a4();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_23644B000, v14, v15, a5, v16, 2u);
    MEMORY[0x23B7F5254](v16, -1, -1);
  }

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v18 = result;
    v19 = sub_2365B0218();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v12, 1, 1, v19);
    v20 = (_QWORD *)swift_allocObject();
    v20[2] = 0;
    v20[3] = 0;
    v20[4] = v18;
    sub_23649225C((uint64_t)v12, a7, (uint64_t)v20);
    return swift_release();
  }
  return result;
}

uint64_t sub_2364C53E0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  *(_QWORD *)(v4 + 24) = *a4;
  return swift_task_switch();
}

uint64_t sub_2364C5400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;

  v5 = type metadata accessor for SharingClientBase.Failure(0, *(_QWORD *)(*(_QWORD *)(v4 + 24) + 80), *(_QWORD *)(*(_QWORD *)(v4 + 24) + 88), a4);
  MEMORY[0x23B7F5164](&unk_2365BB5C8, v5);
  *(_QWORD *)(v4 + 32) = swift_allocError();
  *v6 = 4;
  return swift_task_switch();
}

uint64_t sub_2364C5478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;

  v5 = *(void **)(v4 + 32);
  sub_2364C6BA0(v5, a2, a3, a4);

  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_2364C54B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  _QWORD *v19;
  id v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  id v26;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9790);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2563E4300 != -1)
    swift_once();
  v12 = sub_2365AFC00();
  __swift_project_value_buffer(v12, (uint64_t)qword_2563E7B78);
  v13 = a1;
  v14 = a1;
  v15 = sub_2365AFBE8();
  v16 = sub_2365B0398();
  if (os_log_type_enabled(v15, v16))
  {
    v27[1] = a5;
    v17 = a6;
    v18 = (uint8_t *)swift_slowAlloc();
    v19 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v18 = 138412290;
    if (a1)
    {
      v20 = a1;
      v21 = _swift_stdlib_bridgeErrorToNSError();
      v28 = v21;
      sub_2365B04A0();
    }
    else
    {
      v28 = 0;
      sub_2365B04A0();
      v21 = 0;
    }
    *v19 = v21;

    _os_log_impl(&dword_23644B000, v15, v16, "errorHandler called: %@", v18, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9960);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v19, -1, -1);
    MEMORY[0x23B7F5254](v18, -1, -1);

    a6 = v17;
  }
  else
  {

  }
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v23 = result;
    if (a1)
    {
      v24 = sub_2365B0218();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v11, 1, 1, v24);
      v25 = (_QWORD *)swift_allocObject();
      v25[2] = 0;
      v25[3] = 0;
      v25[4] = v23;
      v25[5] = a1;
      v26 = a1;
      sub_23649225C((uint64_t)v11, a6, (uint64_t)v25);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_2364C5794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch();
}

uint64_t sub_2364C57AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_2364C6BA0(*(void **)(v4 + 24), a2, a3, a4);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

void sub_2364C57DC(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  NSObject *oslog;

  if (qword_2563E4300 != -1)
    swift_once();
  v2 = sub_2365AFC00();
  __swift_project_value_buffer(v2, (uint64_t)qword_2563E7B78);
  v3 = a1;
  v4 = a1;
  oslog = sub_2365AFBE8();
  v5 = sub_2365B038C();
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v6 = 138412290;
    if (a1)
    {
      v8 = a1;
      v9 = _swift_stdlib_bridgeErrorToNSError();
      sub_2365B04A0();
    }
    else
    {
      sub_2365B04A0();
      v9 = 0;
    }
    *v7 = v9;

    _os_log_impl(&dword_23644B000, oslog, v5, "pairSetupCompletionHandler called with error: %@", v6, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9960);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v7, -1, -1);
    MEMORY[0x23B7F5254](v6, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_2364C59F4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 184) = v0;
  return swift_task_switch();
}

uint64_t sub_2364C5A0C()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint8_t *v6;
  void *v7;
  id v8;
  void *v9;
  _QWORD *v11;

  if (qword_2563E4300 != -1)
    swift_once();
  v1 = sub_2365AFC00();
  v0[24] = __swift_project_value_buffer(v1, (uint64_t)qword_2563E7B78);
  swift_retain_n();
  v2 = sub_2365AFBE8();
  v3 = sub_2365B038C();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[23];
  if (v4)
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v11 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v6 = 138412290;
    v7 = *(void **)(v5 + 112);
    v0[18] = v7;
    v8 = v7;
    sub_2365B04A0();
    *v11 = v7;
    swift_release_n();
    _os_log_impl(&dword_23644B000, v2, v3, "Attempting to pair verify base: %@", v6, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9960);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v11, -1, -1);
    MEMORY[0x23B7F5254](v6, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v9 = *(void **)(v0[23] + 112);
  v0[25] = v9;
  v0[2] = v0;
  v0[3] = sub_2364C5C2C;
  v0[22] = swift_continuation_init();
  v0[18] = MEMORY[0x24BDAC760];
  v0[19] = 0x40000000;
  v0[20] = sub_2364C2530;
  v0[21] = &block_descriptor_170;
  objc_msgSend(v9, sel_pairVerifyWithFlags_completion_, 8, v0 + 18);
  return swift_continuation_await();
}

uint64_t sub_2364C5C2C()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 208) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_2364C5C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_2364C6654(*(_QWORD *)(v4 + 200), a2, a3, a4);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_2364C5CC4()
{
  _QWORD *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  void *v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  void *v12;

  v1 = (void *)v0[26];
  swift_willThrow();
  v2 = v1;
  v3 = v1;
  v4 = sub_2365AFBE8();
  v5 = sub_2365B0398();
  v6 = os_log_type_enabled(v4, v5);
  v7 = (void *)v0[26];
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v8 = 138412290;
    v10 = v7;
    v11 = _swift_stdlib_bridgeErrorToNSError();
    v0[18] = v11;
    sub_2365B04A0();
    *v9 = v11;

    _os_log_impl(&dword_23644B000, v4, v5, "Failed to pair verify with error: %@, attempting pair setup", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9960);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v9, -1, -1);
    MEMORY[0x23B7F5254](v8, -1, -1);
  }
  else
  {

  }
  v12 = (void *)v0[25];

  v0[10] = v0;
  v0[11] = sub_2364C5EAC;
  v0[22] = swift_continuation_init();
  v0[18] = MEMORY[0x24BDAC760];
  v0[19] = 0x40000000;
  v0[20] = sub_2364C2530;
  v0[21] = &block_descriptor_171;
  objc_msgSend(v12, sel_pairSetupWithFlags_completion_, 8, v0 + 18);
  return swift_continuation_await();
}

uint64_t sub_2364C5EAC()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 216) = *(_QWORD *)(*(_QWORD *)v0 + 112);
  return swift_task_switch();
}

uint64_t sub_2364C5F0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_2364C6654(*(_QWORD *)(v0 + 200), v1, v2, v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2364C5F4C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 208);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_2364C5F90()
{
  sub_2364C5F98(0);
}

void sub_2364C5F98(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD v21[2];
  int v22;
  void *v23;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9790);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2563E4300 != -1)
    swift_once();
  v7 = sub_2365AFC00();
  v8 = __swift_project_value_buffer(v7, (uint64_t)qword_2563E7B78);
  swift_retain_n();
  v9 = sub_2365AFBE8();
  v10 = sub_2365B0380();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc();
    v21[1] = v8;
    v12 = v11;
    v21[0] = swift_slowAlloc();
    *(_DWORD *)v12 = 138412546;
    v13 = *(void **)(v2 + 112);
    v23 = v13;
    v14 = v13;
    sub_2365B04A0();
    v15 = v21[0];
    *(_QWORD *)v21[0] = v13;
    swift_release_n();
    *(_WORD *)(v12 + 12) = 1024;
    v22 = a1 & 1;
    sub_2365B04A0();
    _os_log_impl(&dword_23644B000, v9, v10, "Invalidating %@ for deinit: %{BOOL}d", (uint8_t *)v12, 0x12u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9960);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v15, -1, -1);
    MEMORY[0x23B7F5254](v12, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  objc_msgSend(*(id *)(v2 + 112), sel_invalidate);
  if ((a1 & 1) != 0)
  {
    v16 = sub_2365AFBE8();
    v17 = sub_2365B038C();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_23644B000, v16, v17, "Not changing to invalidated state, we are deinitialized", v18, 2u);
      MEMORY[0x23B7F5254](v18, -1, -1);
    }

  }
  else
  {
    v19 = sub_2365B0218();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v6, 1, 1, v19);
    v20 = (_QWORD *)swift_allocObject();
    v20[2] = 0;
    v20[3] = 0;
    v20[4] = v2;
    swift_retain();
    sub_23649225C((uint64_t)v6, (uint64_t)&unk_2563E7F00, (uint64_t)v20);
    swift_release();
  }
}

uint64_t sub_2364C6288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t sub_2364C62A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_2364C6B0C(a1, a2, a3, a4);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

void sub_2364C62D0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for MessageSessionTransport(255, *(_QWORD *)(*(_QWORD *)v4 + 80), *(_QWORD *)(*(_QWORD *)v4 + 88), a4);
  v9 = type metadata accessor for BluetoothBaseState(0, v6, v7, v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v16 - v11;
  swift_storeEnumTagMultiPayload();
  sub_2364C8A4C((uint64_t)v12, v13, v14, v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  sub_2364C6C54(a1);
}

uint64_t sub_2364C6378(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v8 = type metadata accessor for MessageSessionTransport(255, *(_QWORD *)(*(_QWORD *)v4 + 80), *(_QWORD *)(*(_QWORD *)v4 + 88), a4);
  v11 = type metadata accessor for BluetoothBaseState(0, v8, v9, v10);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v21 - v13;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a3;
  *(_QWORD *)v14 = (a1 << 32) | 1;
  *(_OWORD *)(v14 + 8) = __PAIR128__((uint64_t)a2 >> 31, a2) * 0xDE0B6B3A7640000;
  *((_QWORD *)v14 + 3) = sub_2364C95E8;
  *((_QWORD *)v14 + 4) = v15;
  v14[40] = 1;
  swift_storeEnumTagMultiPayload();
  v16 = a3;
  sub_2364C8A4C((uint64_t)v14, v17, v18, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

void sub_2364C6484(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  if (qword_2563E4300 != -1)
    swift_once();
  v6 = sub_2365AFC00();
  __swift_project_value_buffer(v6, (uint64_t)qword_2563E7B78);
  swift_bridgeObjectRetain_n();
  v7 = sub_2365AFBE8();
  v8 = sub_2365B0380();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v12 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain();
    sub_236468D88(a1, a2, &v12);
    sub_2365B04A0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23644B000, v7, v8, "Trying pair setup with pin: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v10, -1, -1);
    MEMORY[0x23B7F5254](v9, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v11 = (void *)sub_2365B0038();
  objc_msgSend(a3, sel_pairSetupTryPIN_, v11);

}

uint64_t sub_2364C6654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 88);
  v8 = type metadata accessor for MessageSessionTransport(255, v6, v7, a4);
  v11 = type metadata accessor for BluetoothBaseState(0, v8, v9, v10);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = &v19[-v13];
  v20 = v6;
  v21 = v7;
  v22 = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542A8310);
  sub_23657FC20((void (*)(_BYTE *))sub_2364C95A4, (uint64_t)v14);
  swift_storeEnumTagMultiPayload();
  sub_2364C8A4C((uint64_t)v14, v15, v16, v17);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v14, v11);
}

void sub_2364C6744(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint8_t *v37;
  char *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a5;
  v40 = a4;
  v8 = type metadata accessor for MessageSessionTransport(0, a2, a3, (uint64_t)a4);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v38 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v37 - v12;
  v14 = sub_2365B047C();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v37 - v16;
  v18 = objc_msgSend(a1, sel_messageSessionTemplate);
  if (!v18)
  {
    v26 = type metadata accessor for SharingClientBase.Failure(0, a2, a3, v19);
    MEMORY[0x23B7F5164](&unk_2365BB5C8, v26);
    v24 = swift_allocError();
    *v27 = 1;
    swift_willThrow();
    goto LABEL_5;
  }
  v20 = v18;
  MessageSessionTransport.init(templateSession:identifier:)(v20, 0xD000000000000040, 0x80000002365CC2F0, a2, a3, (uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v17, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    v22 = type metadata accessor for SharingClientBase.Failure(0, a2, a3, v21);
    v23 = v20;
    MEMORY[0x23B7F5164](&unk_2365BB5C8, v22);
    v24 = swift_allocError();
    *v25 = 2;
    swift_willThrow();

LABEL_5:
    *v40 = v24;
    return;
  }
  v28 = v39;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v39, v17, v8);
  if (qword_2563E4300 != -1)
    swift_once();
  v29 = sub_2365AFC00();
  __swift_project_value_buffer(v29, (uint64_t)qword_2563E7B78);
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v30(v13, v28, v8);
  v31 = sub_2365AFBE8();
  v32 = sub_2365B0380();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc();
    v39 = swift_slowAlloc();
    v42 = v39;
    v40 = (uint64_t *)v20;
    *(_DWORD *)v33 = 136315138;
    v37 = v33 + 4;
    v30(v38, (uint64_t)v13, v8);
    v34 = sub_2365B0080();
    v41 = sub_236468D88(v34, v35, &v42);
    sub_2365B04A0();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
    _os_log_impl(&dword_23644B000, v31, v32, "Created transport for message session: %s", v33, 0xCu);
    v36 = v39;
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v36, -1, -1);
    MEMORY[0x23B7F5254](v33, -1, -1);

  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  }
}

uint64_t sub_2364C6B0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v5 = type metadata accessor for MessageSessionTransport(255, *(_QWORD *)(*(_QWORD *)v4 + 80), *(_QWORD *)(*(_QWORD *)v4 + 88), a4);
  v8 = type metadata accessor for BluetoothBaseState(0, v5, v6, v7);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v16 - v10;
  swift_storeEnumTagMultiPayload();
  sub_2364C8A4C((uint64_t)v11, v12, v13, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_2364C6BA0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v6 = type metadata accessor for MessageSessionTransport(255, *(_QWORD *)(*(_QWORD *)v4 + 80), *(_QWORD *)(*(_QWORD *)v4 + 88), a4);
  v9 = type metadata accessor for BluetoothBaseState(0, v6, v7, v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v18 - v11;
  *(_QWORD *)v12 = a1;
  v12[8] = 1;
  swift_storeEnumTagMultiPayload();
  v13 = a1;
  sub_2364C8A4C((uint64_t)v12, v14, v15, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

void sub_2364C6C54(void *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  void *v5;
  uint64_t inited;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  unint64_t aBlock;
  unint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, const void *);
  void *v14;
  void (*v15)(uint64_t, uint64_t, void (*)(_QWORD, _QWORD, _QWORD));
  _QWORD *v16;

  v2 = v1;
  v4 = *v2;
  v5 = (void *)sub_2365B0038();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7BA0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2365B6A20;
  aBlock = 0xD000000000000010;
  v12 = 0x80000002365CC270;
  sub_2365B0548();
  *(_QWORD *)(inited + 96) = MEMORY[0x24BEE1328];
  *(_BYTE *)(inited + 72) = 1;
  sub_236466CE4(inited);
  v7 = (void *)sub_2365AFF48();
  swift_bridgeObjectRelease();
  v8 = swift_allocObject();
  swift_weakInit();
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = *(_QWORD *)(v4 + 80);
  v9[3] = *(_QWORD *)(v4 + 88);
  v9[4] = v8;
  v15 = sub_2364C956C;
  v16 = v9;
  aBlock = MEMORY[0x24BDAC760];
  v12 = 1107296256;
  v13 = sub_2364C7548;
  v14 = &block_descriptor_145;
  v10 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(a1, sel_registerRequestID_options_handler_, v5, v7, v10);
  _Block_release(v10);

}

void sub_2364C6E14(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t inited;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void (*v40)(_QWORD, _QWORD, _QWORD);
  void (*v41)(_QWORD, _QWORD, _QWORD);
  uint64_t v42[5];
  __int128 v43;
  __int128 v44;

  if (qword_2563E4300 != -1)
    swift_once();
  v5 = sub_2365AFC00();
  __swift_project_value_buffer(v5, (uint64_t)qword_2563E7B78);
  swift_bridgeObjectRetain_n();
  v6 = sub_2365AFBE8();
  v7 = sub_2365B038C();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v40 = a3;
    v9 = swift_slowAlloc();
    v42[0] = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain();
    v10 = sub_2365AFF6C();
    v12 = v11;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v43 = sub_236468D88(v10, v12, v42);
    sub_2365B04A0();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23644B000, v6, v7, "Received tag exchange request: %s", v8, 0xCu);
    swift_arrayDestroy();
    v13 = v9;
    a3 = v40;
    MEMORY[0x23B7F5254](v13, -1, -1);
    MEMORY[0x23B7F5254](v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_2365B0548();
  if (*(_QWORD *)(a2 + 16) && (v14 = sub_2364685F8((uint64_t)v42), (v15 & 1) != 0))
  {
    sub_23646A9F4(*(_QWORD *)(a2 + 56) + 32 * v14, (uint64_t)&v43);
  }
  else
  {
    v43 = 0u;
    v44 = 0u;
  }
  sub_23646A464((uint64_t)v42);
  if (*((_QWORD *)&v44 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7E60);
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        sub_2364C7704(1936154996);
        swift_bridgeObjectRetain();
        v16 = sub_2365AFBE8();
        v17 = sub_2365B038C();
        if (os_log_type_enabled(v16, v17))
        {
          v18 = swift_slowAlloc();
          v41 = a3;
          v19 = swift_slowAlloc();
          *(_QWORD *)&v43 = v19;
          *(_DWORD *)v18 = 136315394;
          v20 = swift_bridgeObjectRetain();
          v21 = MEMORY[0x23B7F418C](v20, MEMORY[0x24BDCDDE8]);
          v23 = v22;
          swift_bridgeObjectRelease();
          sub_236468D88(v21, v23, (uint64_t *)&v43);
          sub_2365B04A0();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v18 + 12) = 1024;
          sub_2365B04A0();
          _os_log_impl(&dword_23644B000, v16, v17, "Evaluated tags: %s with filter and decided: %{BOOL}d", (uint8_t *)v18, 0x12u);
          swift_arrayDestroy();
          v24 = v19;
          a3 = v41;
          MEMORY[0x23B7F5254](v24, -1, -1);
          MEMORY[0x23B7F5254](v18, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7BA0);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_2365B6A20;
        *(_QWORD *)&v43 = 0xD000000000000010;
        *((_QWORD *)&v43 + 1) = 0x80000002365CC270;
        sub_2365B0548();
        v36 = MEMORY[0x24BEE1328];
        *(_QWORD *)(inited + 96) = MEMORY[0x24BEE1328];
        *(_BYTE *)(inited + 72) = 1;
        v37 = sub_236466CE4(inited);
        v38 = swift_initStackObject();
        *(_OWORD *)(v38 + 16) = xmmword_2365B6A20;
        *(_QWORD *)&v43 = 0x747065636361;
        *((_QWORD *)&v43 + 1) = 0xE600000000000000;
        sub_2365B0548();
        *(_QWORD *)(v38 + 96) = v36;
        *(_BYTE *)(v38 + 72) = 1;
        v39 = sub_236466CE4(v38);
        a3(0, v37, v39);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_236465998((uint64_t)&v43, (uint64_t *)&unk_2542A8320);
  }
  v25 = sub_2365AFBE8();
  v26 = sub_2365B0398();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v27 = 0;
    _os_log_impl(&dword_23644B000, v25, v26, "Failed to parse tag exchange request", v27, 2u);
    MEMORY[0x23B7F5254](v27, -1, -1);
  }

  sub_2364858F4();
  v28 = (void *)swift_allocError();
  *(_OWORD *)v29 = 0u;
  *(_OWORD *)(v29 + 16) = 0u;
  *(_OWORD *)(v29 + 32) = 0u;
  *(_BYTE *)(v29 + 48) = 4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7BA0);
  v30 = swift_initStackObject();
  *(_OWORD *)(v30 + 16) = xmmword_2365B6A20;
  *(_QWORD *)&v43 = 0xD000000000000010;
  *((_QWORD *)&v43 + 1) = 0x80000002365CC270;
  sub_2365B0548();
  v31 = MEMORY[0x24BEE1328];
  *(_QWORD *)(v30 + 96) = MEMORY[0x24BEE1328];
  *(_BYTE *)(v30 + 72) = 1;
  v32 = sub_236466CE4(v30);
  v33 = swift_initStackObject();
  *(_OWORD *)(v33 + 16) = xmmword_2365B6A20;
  *(_QWORD *)&v43 = 0x747065636361;
  *((_QWORD *)&v43 + 1) = 0xE600000000000000;
  sub_2365B0548();
  *(_QWORD *)(v33 + 96) = v31;
  *(_BYTE *)(v33 + 72) = 0;
  v34 = sub_236466CE4(v33);
  a3(v28, v32, v34);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t sub_2364C7548(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  void (*v5)(uint64_t, uint64_t, void (*)(uint64_t, void *, uint64_t), uint64_t);
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v5 = *(void (**)(uint64_t, uint64_t, void (*)(uint64_t, void *, uint64_t), uint64_t))(a1 + 32);
  if (a2)
    v6 = sub_2365AFF60();
  else
    v6 = 0;
  v7 = sub_2365AFF60();
  v8 = _Block_copy(a4);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v8;
  swift_retain();
  v5(v6, v7, sub_2364C959C, v9);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_2364C7638(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  id v9;

  if (a1)
    v7 = (void *)sub_2365AF8E8();
  else
    v7 = 0;
  if (a2)
    a2 = (void *)sub_2365AFF48();
  if (a3)
    v8 = sub_2365AFF48();
  else
    v8 = 0;
  v9 = (id)v8;
  (*(void (**)(uint64_t, void *, void *))(a4 + 16))(a4, v7, a2);

}

uint64_t sub_2364C7704(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t *v5;
  char v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, unint64_t);
  uint64_t v9;
  unint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = v1;
    result = swift_bridgeObjectRetain();
    v5 = (unint64_t *)(result + 40);
    v6 = 1;
    v7 = 1 - v2;
    do
    {
      if ((v6 & 1) == 0)
      {
        v6 = 0;
LABEL_11:
        swift_bridgeObjectRelease();
        return v6 & 1;
      }
      v8 = *(uint64_t (**)(uint64_t, unint64_t))(v3 + 152);
      if (v8)
      {
        v9 = *(v5 - 1);
        v10 = *v5;
        sub_236468CBC(v9, *v5);
        v6 = v8(v9, v10);
        result = sub_236468D44(v9, v10);
        if (!v7)
          goto LABEL_11;
      }
      else
      {
        v6 = 1;
        if (!v7)
          goto LABEL_11;
      }
      v5 += 2;
      ++v7;
    }
    while (v7 != 1);
    __break(1u);
  }
  else
  {
    v6 = 1;
    return v6 & 1;
  }
  return result;
}

BOOL sub_2364C77D0(char *a1, char *a2)
{
  return sub_236473D68(*a1, *a2);
}

uint64_t sub_2364C77DC()
{
  return sub_2364742C8();
}

uint64_t sub_2364C77E4()
{
  return sub_236473D78();
}

uint64_t sub_2364C77EC()
{
  sub_2365B09E0();
  sub_236473D78();
  return sub_2365B0A34();
}

uint64_t SharingClientBase.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_2364C7834()
{
  return SharingClientBase.unownedExecutor.getter();
}

uint64_t sub_2364C784C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_236477420;
  return sub_2364C4224((uint64_t)v1, v2, v3, v4);
}

void sub_2364C7894()
{
  sub_2364C5F90();
}

id BLEDevice.into()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  id v21;
  void *v23;
  uint64_t v24;

  v1 = sub_2365AF9FC();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7BB8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7BC0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v24 - v13;
  if (!*(_QWORD *)(v0 + 8))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  sub_2365AF9B4();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
LABEL_6:
    v16 = &qword_2563E7BB8;
    v15 = (uint64_t)v7;
    goto LABEL_7;
  }
  sub_2364C8CB8((uint64_t)v7, (uint64_t)v14);
  sub_2364C8D00((uint64_t)v14, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v12, 1, v1) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v12, v1);
    v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE90108]), sel_init);
    v23 = (void *)sub_2365AF9CC();
    objc_msgSend(v21, sel_setIdentifier_, v23);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    sub_236465998((uint64_t)v14, &qword_2563E7BC0);
    return v21;
  }
  sub_236465998((uint64_t)v14, &qword_2563E7BC0);
  v15 = (uint64_t)v12;
  v16 = &qword_2563E7BC0;
LABEL_7:
  sub_236465998(v15, v16);
  if (qword_2563E4300 != -1)
    swift_once();
  v17 = sub_2365AFC00();
  __swift_project_value_buffer(v17, (uint64_t)qword_2563E7B78);
  v18 = sub_2365AFBE8();
  v19 = sub_2365B0398();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v20 = 0;
    _os_log_impl(&dword_23644B000, v18, v19, "Cannot transform BLEDevice: into SFDevice", v20, 2u);
    MEMORY[0x23B7F5254](v20, -1, -1);
  }

  return 0;
}

uint64_t DiscoveryModel.FlowKind.into()()
{
  _BYTE *v0;

  if (*v0 == 1)
    return 43;
  else
    return 32;
}

uint64_t sub_2364C7BD8(void (*a1)(uint64_t *__return_ptr, _BOOL8), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v5 = v4;
  v9 = sub_2364C7D10();
  a1(&v17, v9);
  v10 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7F98);
  v11 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7FA0);
  v12 = swift_allocObject();
  *(_DWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v12;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a3;
  *(_QWORD *)(v13 + 24) = a4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7FA8);
  v14 = swift_allocObject();
  *(_DWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 16) = sub_2364CA098;
  *(_QWORD *)(v14 + 24) = v13;
  *(_QWORD *)(v11 + 16) = v14;
  v15 = *(_QWORD *)(v5 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v15 + 24));
  swift_release();
  *(_QWORD *)(v15 + 16) = v11;
  swift_retain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v15 + 24));
  swift_release();
  swift_release();
  return v11;
}

BOOL sub_2364C7D10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 24));
  v3 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 24));
  swift_release();
  if (v3)
  {
    swift_retain();
    sub_2364C7DC4();
    v4 = *(_QWORD *)(v1 + 16);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v4 + 24));
    swift_release();
    *(_QWORD *)(v4 + 16) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 24));
    swift_release();
    swift_release();
  }
  return v3 != 0;
}

void sub_2364C7DC4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t (*v6)();
  uint64_t (*v7)();

  v1 = *(_QWORD *)(v0 + 24);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  v2 = *(void **)(v1 + 16);
  v6 = v2;
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  swift_release();
  v3 = *(_QWORD *)(v0 + 24);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));

  *(_QWORD *)(v3 + 16) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  swift_release();
  v4 = *(_QWORD *)(v0 + 16);
  swift_retain();
  swift_release();
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 32));
  sub_2364C7F20((_QWORD *)(v4 + 16), &v7);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 32));
  v5 = v7;
  swift_release();
  if (!v5)
    goto LABEL_4;
  if (v2)
  {
    v7 = v6;
    v6 = v6;
    sub_23645063C((uint64_t)v5);
    ((void (*)(uint64_t (**)()))v5)(&v7);
    sub_236450690((uint64_t)v5);
    sub_236450690((uint64_t)v5);

LABEL_4:
    return;
  }
  sub_236450690((uint64_t)v5);
}

_QWORD *sub_2364C7F20@<X0>(_QWORD *result@<X0>, uint64_t (**a2)()@<X8>)
{
  _QWORD *v2;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = result;
  v5 = *result;
  v4 = (uint64_t (*)())result[1];
  if (*result)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    *(_QWORD *)(v6 + 24) = v4;
    result = (_QWORD *)swift_allocObject();
    v4 = (uint64_t (*)())result;
    result[2] = sub_2364CA09C;
    result[3] = v6;
    v7 = sub_2364CA098;
  }
  else
  {
    v7 = 0;
  }
  *v2 = 0;
  v2[1] = 0;
  *a2 = v7;
  a2[1] = v4;
  return result;
}

uint64_t sub_2364C7FB8()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 232);
}

void sub_2364C7FE8(void *a1)
{
  uint64_t v1;
  void *v3;
  id v4;

  swift_beginAccess();
  v3 = *(void **)(v1 + 232);
  *(_QWORD *)(v1 + 232) = a1;
  v4 = a1;

  sub_2364BFC2C();
}

uint64_t sub_2364C803C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[88];

  v3 = *v1;
  swift_beginAccess();
  v5 = type metadata accessor for AnyTransportBuilder(255, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v4);
  v8 = type metadata accessor for BluetoothBaseState(0, v5, v6, v7);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v9 + 16))(v11, v1 + 30, v8);
  swift_beginAccess();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 24))(v1 + 30, a1, v8);
  swift_endAccess();
  sub_2364C0030((uint64_t)v11);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_2364C8108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, char a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[4];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;

  v33 = a7;
  v28 = a4;
  v29 = a5;
  v27 = a3;
  v34 = a14;
  v31 = a6;
  v32 = a13;
  v30 = a12;
  v18 = *a10;
  v17 = a10[1];
  v19 = a10[2];
  v20 = a10[3];
  v21 = swift_defaultActor_initialize();
  *(_OWORD *)(v14 + 232) = 0u;
  *(_OWORD *)(v14 + 305) = 0u;
  *(_OWORD *)(v14 + 280) = 0u;
  *(_OWORD *)(v14 + 296) = 0u;
  *(_OWORD *)(v14 + 248) = 0u;
  *(_OWORD *)(v14 + 264) = 0u;
  *(_BYTE *)(v14 + 321) = 4;
  *(_QWORD *)(v14 + 328) = 0;
  if (qword_2563E4308 != -1)
    v21 = swift_once();
  MEMORY[0x24BDAC7A8](v21);
  v26[2] = a11;
  *(_QWORD *)(v14 + 112) = sub_2364C7BD8((void (*)(uint64_t *__return_ptr, _BOOL8))sub_2364CA068, (uint64_t)v26, (uint64_t)sub_2364C027C, 0);
  *(_QWORD *)(v14 + 120) = a1;
  v22 = v27;
  *(_QWORD *)(v14 + 128) = a2;
  *(_QWORD *)(v14 + 136) = v22;
  v23 = v29;
  *(_QWORD *)(v14 + 144) = v28;
  *(_QWORD *)(v14 + 152) = v23;
  *(_QWORD *)(v14 + 160) = v31;
  *(_DWORD *)(v14 + 168) = v33;
  *(_BYTE *)(v14 + 172) = a9;
  *(_QWORD *)(v14 + 176) = v18;
  *(_QWORD *)(v14 + 184) = v17;
  *(_QWORD *)(v14 + 192) = v19;
  *(_QWORD *)(v14 + 200) = v20;
  v24 = v30;
  *(_QWORD *)(v14 + 208) = v32;
  *(_QWORD *)(v14 + 216) = v34;
  *(_QWORD *)(v14 + 224) = v24;
  return v14;
}

uint64_t type metadata accessor for SharingServerBase.Failure(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SharingServerBase.Failure);
}

uint64_t sub_2364C8274()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_2364C8298(int a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;

  return sub_2364C4DF0(a1, a2, a3, v3[4], v3[2], v3[3], (uint64_t)&unk_2507D4780, (uint64_t)&unk_2563E7F80);
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t sub_2364C82DC()
{
  uint64_t *v0;

  return sub_2364C523C(v0[4], v0[2], v0[3], MEMORY[0x24BEE7908], "hidePINHandler called", (uint64_t)&unk_2507D4758, (uint64_t)&unk_2563E7F70);
}

uint64_t sub_2364C8318(void *a1)
{
  uint64_t *v1;

  return sub_2364C1854(a1, v1[4], v1[2], v1[3], "sessionStartedHandler called with session: %@", (uint64_t)&unk_2507D4730, (uint64_t)&unk_2563E7F60);
}

uint64_t sub_2364C834C(void *a1, void *a2)
{
  uint64_t v2;

  return sub_2364C146C(a1, a2, *(_QWORD *)(v2 + 32));
}

uint64_t sub_2364C8358(void *a1)
{
  uint64_t *v1;

  return sub_2364C1854(a1, v1[4], v1[2], v1[3], "sessionSecuredHandler called with session: %@", (uint64_t)&unk_2507D46E0, (uint64_t)&unk_2563E7F40);
}

uint64_t sub_2364C838C()
{
  uint64_t *v0;

  return sub_2364C523C(v0[4], v0[2], v0[3], MEMORY[0x24BEE7908], "invalidationHandler called", (uint64_t)&unk_2507D46B8, (uint64_t)&unk_2563E7F30);
}

uint64_t sub_2364C83C8()
{
  uint64_t *v0;

  return sub_2364C523C(v0[4], v0[2], v0[3], MEMORY[0x24BEE7910], "interruptionHandler called", (uint64_t)&unk_2507D4690, (uint64_t)&unk_2563E7F20);
}

uint64_t sub_2364C8404(void *a1)
{
  uint64_t *v1;

  return sub_2364C54B8(a1, v1[4], v1[2], v1[3], (uint64_t)&unk_2507D4668, (uint64_t)&unk_2563E7F10);
}

void sub_2364C8430(void *a1)
{
  sub_2364C209C(a1);
}

uint64_t type metadata accessor for SharingClientBase.Failure(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SharingClientBase.Failure);
}

uint64_t sub_2364C8448(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[5];
  char v14;
  char v15;

  v5 = *v2;
  swift_beginAccess();
  v6 = *((unsigned int *)v2 + 42);
  v13[0] = a1;
  v13[1] = a2;
  v13[3] = 0;
  v13[4] = 0;
  v13[2] = v6;
  v14 = 0;
  v15 = 1;
  swift_bridgeObjectRetain();
  sub_2364C803C((uint64_t)v13);
  v8 = type metadata accessor for AnyTransportBuilder(255, *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88), v7);
  v11 = type metadata accessor for BluetoothBaseState(0, v8, v9, v10);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v13, v11);
}

uint64_t sub_2364C84E8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[32];

  v1 = *v0;
  sub_2364C7FE8(0);
  v8 = 4;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  memset(v12, 0, 25);
  v12[25] = 4;
  sub_2364C803C((uint64_t)&v8);
  v3 = type metadata accessor for AnyTransportBuilder(255, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v2);
  v6 = type metadata accessor for BluetoothBaseState(0, v3, v4, v5);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(&v8, v6);
}

void sub_2364C8564(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t inited;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  __int128 v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t (*v42)(uint64_t, void *, uint64_t, uint64_t);
  void *v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;

  v35 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7E68);
  v37 = *(_QWORD *)(v5 - 8);
  v38 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v34 = v6;
  v36 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2563E4300 != -1)
    swift_once();
  v7 = sub_2365AFC00();
  __swift_project_value_buffer(v7, (uint64_t)qword_2563E7B78);
  swift_bridgeObjectRetain_n();
  v8 = a2;
  v9 = sub_2365AFBE8();
  v10 = sub_2365B038C();
  v11 = os_log_type_enabled(v9, v10);
  v33 = v8;
  if (v11)
  {
    v12 = swift_slowAlloc();
    *(_QWORD *)&v31 = swift_slowAlloc();
    v32 = swift_slowAlloc();
    v40 = v32;
    *(_DWORD *)v12 = 136315394;
    v13 = swift_bridgeObjectRetain();
    v14 = MEMORY[0x23B7F418C](v13, MEMORY[0x24BDCDDE8]);
    v16 = v15;
    swift_bridgeObjectRelease();
    v39 = sub_236468D88(v14, v16, &v40);
    sub_2365B04A0();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2112;
    v39 = (uint64_t)v8;
    v17 = v8;
    sub_2365B04A0();
    v18 = v31;
    *(_QWORD *)v31 = v8;

    _os_log_impl(&dword_23644B000, v9, v10, "Exchanging tags: %s with session: %@", (uint8_t *)v12, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9960);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v18, -1, -1);
    v19 = v32;
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v19, -1, -1);
    MEMORY[0x23B7F5254](v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v32 = sub_2365B0038();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7BA0);
  inited = swift_initStackObject();
  v31 = xmmword_2365B6A20;
  *(_OWORD *)(inited + 16) = xmmword_2365B6A20;
  v40 = 0xD000000000000010;
  v41 = 0x80000002365CC270;
  sub_2365B0548();
  *(_QWORD *)(inited + 96) = MEMORY[0x24BEE1328];
  *(_BYTE *)(inited + 72) = 1;
  sub_236466CE4(inited);
  v21 = (void *)sub_2365AFF48();
  swift_bridgeObjectRelease();
  v22 = swift_initStackObject();
  *(_OWORD *)(v22 + 16) = v31;
  v40 = 1936154996;
  v41 = 0xE400000000000000;
  sub_2365B0548();
  *(_QWORD *)(v22 + 96) = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7E60);
  *(_QWORD *)(v22 + 72) = a1;
  swift_bridgeObjectRetain();
  sub_236466CE4(v22);
  v23 = (void *)sub_2365AFF48();
  swift_bridgeObjectRelease();
  v25 = v36;
  v24 = v37;
  v26 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v36, v35, v38);
  v27 = (*(unsigned __int8 *)(v24 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  v28 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v24 + 32))(v28 + v27, v25, v26);
  v44 = sub_2364C968C;
  v45 = v28;
  v40 = MEMORY[0x24BDAC760];
  v41 = 1107296256;
  v42 = sub_2364C32B0;
  v43 = &block_descriptor_159;
  v29 = _Block_copy(&v40);
  swift_release();
  v30 = (void *)v32;
  objc_msgSend(v33, sel_sendRequestID_options_request_responseHandler_, v32, v21, v23, v29);
  _Block_release(v29);

}

uint64_t sub_2364C8A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[24];

  v6 = *v4;
  v7 = type metadata accessor for MessageSessionTransport(255, *(_QWORD *)(*v4 + 80), *(_QWORD *)(*v4 + 88), a4);
  v10 = type metadata accessor for BluetoothBaseState(0, v7, v8, v9);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = &v19[-v12];
  v14 = (uint64_t)v4 + *(_QWORD *)(v6 + 160);
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 24))(v14, a1, v10);
  swift_endAccess();
  sub_2364C3E00((uint64_t)v13, v15, v16, v17);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_2364C8B40(int a1, int a2)
{
  return sub_2364C4B60(a1, a2);
}

uint64_t sub_2364C8B4C(int a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;

  return sub_2364C4DF0(a1, a2, a3, v3[4], v3[2], v3[3], (uint64_t)&unk_2507D45C8, (uint64_t)&unk_2563E7EE0);
}

uint64_t sub_2364C8B78()
{
  uint64_t *v0;

  return sub_2364C523C(v0[4], v0[2], v0[3], MEMORY[0x24BEE7908], "hidePINHandler called", (uint64_t)&unk_2507D45A0, (uint64_t)&unk_2563E7ED0);
}

uint64_t sub_2364C8BB4()
{
  uint64_t *v0;

  return sub_2364C523C(v0[4], v0[2], v0[3], MEMORY[0x24BEE7908], "sessionStartedHandler called", (uint64_t)&unk_2507D4578, (uint64_t)&unk_2563E7EC0);
}

uint64_t sub_2364C8BF0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2364C8C14()
{
  uint64_t *v0;

  return sub_2364C523C(v0[4], v0[2], v0[3], MEMORY[0x24BEE7908], "invalidationHandler called", (uint64_t)&unk_2507D4550, (uint64_t)&unk_2563E7EB0);
}

uint64_t sub_2364C8C50()
{
  uint64_t *v0;

  return sub_2364C523C(v0[4], v0[2], v0[3], MEMORY[0x24BEE7910], "interruptionHandler called", (uint64_t)&unk_2507D4528, (uint64_t)&unk_2563E7EA0);
}

uint64_t sub_2364C8C8C(void *a1)
{
  uint64_t *v1;

  return sub_2364C54B8(a1, v1[4], v1[2], v1[3], (uint64_t)&unk_2507D4500, (uint64_t)&unk_2563E7E90);
}

uint64_t sub_2364C8CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7BC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2364C8D00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7BC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_2364C8D4C()
{
  unint64_t result;

  result = qword_2563E7BC8[0];
  if (!qword_2563E7BC8[0])
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for SharingBaseServiceType, &type metadata for SharingBaseServiceType);
    atomic_store(result, qword_2563E7BC8);
  }
  return result;
}

void sub_2364C8D90()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364C8DA0()
{
  JUMPOUT(0x23B7F5164);
}

uint64_t sub_2364C8DB0@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = sub_2364BFB30();
  *a1 = result;
  return result;
}

uint64_t sub_2364C8DD8(int *a1)
{
  return sub_2364BFB60(*a1);
}

uint64_t sub_2364C8DFC()
{
  return 16;
}

__n128 sub_2364C8E08(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

id sub_2364C8E14@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  v2 = (void *)sub_2364C7FB8();
  *a1 = v2;
  return v2;
}

void sub_2364C8E3C(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  sub_2364C7FE8(v1);

}

uint64_t sub_2364C8E78()
{
  return 16;
}

__n128 sub_2364C8E84(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2364C8E90@<X0>(uint64_t a1@<X8>)
{
  return sub_2364C00E4(a1);
}

uint64_t sub_2364C8EB0(uint64_t a1)
{
  return sub_2364C803C(a1);
}

uint64_t sub_2364C8ED0()
{
  return 16;
}

__n128 sub_2364C8EDC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2364C8EE8@<X0>(uint64_t a1@<X8>)
{
  return sub_2364C3EDC(a1);
}

uint64_t sub_2364C8F08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2364C8A4C(a1, a2, a3, a4);
}

uint64_t sub_2364C8F28()
{
  return 16;
}

__n128 sub_2364C8F34(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t storeEnumTagSinglePayload for SharingBaseServiceType(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2364C8F80 + 4 * byte_2365BB130[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2364C8FA0 + 4 * byte_2365BB135[v4]))();
}

_BYTE *sub_2364C8F80(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2364C8FA0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2364C8FA8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2364C8FB0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2364C8FB8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2364C8FC0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SharingBaseServiceType()
{
  return &type metadata for SharingBaseServiceType;
}

uint64_t sub_2364C8FDC()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for SharingServerBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SharingServerBase);
}

uint64_t method lookup function for SharingServerBase()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SharingServerBase.pinType.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of SharingServerBase.pinType.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of SharingServerBase.pinType.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of SharingServerBase.session.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of SharingServerBase.state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of SharingServerBase.__allocating_init(queue:advertisementRate:fixedPin:targetAuthTag:pinType:serviceType:deviceActionType:legacySymptomReport:service:tags:stateHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 336))();
}

uint64_t dispatch thunk of SharingServerBase.activate()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 344) + *(_QWORD *)(*(_QWORD *)v0 + 344));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_23647E274;
  return v4();
}

uint64_t dispatch thunk of SharingServerBase.invalidate()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t sub_2364C9198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;

  v4 = type metadata accessor for MessageSessionTransport(255, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), a4);
  result = type metadata accessor for BluetoothBaseState(319, v4, v5, v6);
  if (v8 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for SharingClientBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SharingClientBase);
}

uint64_t method lookup function for SharingClientBase()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SharingClientBase.state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of SharingClientBase.__allocating_init(base:queue:fixedPin:serviceType:peerDevice:filter:stateHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of SharingClientBase.activate()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 200) + *(_QWORD *)(*(_QWORD *)v0 + 200));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_236477420;
  return v4();
}

uint64_t dispatch thunk of SharingClientBase.invalidate()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t sub_2364C92F0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_2364C933C + 4 * byte_2365BB13F[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_2364C9370 + 4 * byte_2365BB13A[v4]))();
}

uint64_t sub_2364C9370(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364C9378(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2364C9380);
  return result;
}

uint64_t sub_2364C938C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2364C9394);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_2364C9398(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364C93A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364C93AC(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF2)
    goto LABEL_17;
  if (a2 + 14 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 14) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 14;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 14;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 14;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xF;
  v8 = v6 - 15;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_2364C943C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_2364C9488 + 4 * byte_2365BB149[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_2364C94BC + 4 * byte_2365BB144[v4]))();
}

uint64_t sub_2364C94BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364C94C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2364C94CCLL);
  return result;
}

uint64_t sub_2364C94D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2364C94E0);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_2364C94E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364C94EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_2364C94F8()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364C9508()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364C9518()
{
  JUMPOUT(0x23B7F5164);
}

unint64_t sub_2364C9528()
{
  unint64_t result;

  result = qword_2563E7E58;
  if (!qword_2563E7E58)
  {
    result = MEMORY[0x23B7F5164](MEMORY[0x24BEE17C8], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_2563E7E58);
  }
  return result;
}

void sub_2364C956C(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, _QWORD, _QWORD))
{
  sub_2364C6E14(a1, a2, a3);
}

uint64_t sub_2364C9578()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_2364C959C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;

  sub_2364C7638(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

void sub_2364C95A4(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_2364C6744(*(void **)(v2 + 32), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

uint64_t sub_2364C95C4()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_2364C95E8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  sub_2364C6484(a1, a2, *(void **)(v2 + 16));
}

void sub_2364C95F0(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  sub_2364C3438(*(void **)(v2 + 32), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

void sub_2364C9610(uint64_t a1)
{
  uint64_t v1;

  sub_2364C8564(*(_QWORD *)(v1 + 24), *(void **)(v1 + 32), a1);
}

uint64_t sub_2364C9628()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7E68);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_2364C968C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7E68);
  return sub_2364C2EA4(a1, a2, a3);
}

uint64_t sub_2364C96E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;

  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_23647E274;
  *(_OWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 16) = a1;
  return swift_task_switch();
}

uint64_t sub_2364C9754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_23647E274;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch();
}

uint64_t sub_2364C97B4()
{
  return objectdestroy_178Tm();
}

uint64_t sub_2364C97BC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23647E274;
  v3[2] = v2;
  v3[3] = *v2;
  return swift_task_switch();
}

uint64_t sub_2364C9824()
{
  return objectdestroy_178Tm();
}

uint64_t sub_2364C982C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23647E274;
  v3[2] = v2;
  return swift_task_switch();
}

uint64_t sub_2364C988C()
{
  return objectdestroy_178Tm();
}

uint64_t sub_2364C9894()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23647E274;
  v3[2] = v2;
  return swift_task_switch();
}

uint64_t sub_2364C98F4()
{
  return objectdestroy_178Tm();
}

uint64_t sub_2364C98FC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_23647E274;
  return swift_task_switch();
}

uint64_t sub_2364C995C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[4];
  v4 = v0[6];
  v3 = v0[7];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_23647E274;
  v5[3] = v4;
  v5[4] = v3;
  v5[2] = v2;
  return swift_task_switch();
}

uint64_t sub_2364C99CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v7 = type metadata accessor for MessageSessionTransport(255, *(_QWORD *)(*(_QWORD *)v4 + 80), *(_QWORD *)(*(_QWORD *)v4 + 88), a4);
  v10 = type metadata accessor for BluetoothBaseState(0, v7, v8, v9);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v18 - v12;
  *(_QWORD *)v13 = a1;
  *((_QWORD *)v13 + 1) = a2;
  *((_QWORD *)v13 + 3) = 0;
  *((_QWORD *)v13 + 4) = 0;
  *((_QWORD *)v13 + 2) = 1;
  v13[40] = 0;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  sub_2364C8A4C((uint64_t)v13, v14, v15, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_2364C9A8C()
{
  return objectdestroy_178Tm();
}

uint64_t sub_2364C9A94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  v4 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23647E274;
  v3[3] = v4;
  v3[2] = v2;
  return swift_task_switch();
}

uint64_t sub_2364C9AFC()
{
  return objectdestroy_178Tm();
}

uint64_t sub_2364C9B04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_236477420;
  v3[2] = v2;
  return swift_task_switch();
}

void sub_2364C9B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_2364C2490(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

unint64_t sub_2364C9B6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2563E5130;
  if (!qword_2563E5130)
  {
    v1 = sub_2365AF9FC();
    result = MEMORY[0x23B7F5164](MEMORY[0x24BDCEAB8], v1);
    atomic_store(result, (unint64_t *)&qword_2563E5130);
  }
  return result;
}

uint64_t objectdestroy_174Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_2364C9BEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_23647E274;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch();
}

uint64_t sub_2364C9C4C()
{
  return objectdestroy_178Tm();
}

uint64_t sub_2364C9C54()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23647E274;
  v3[2] = v2;
  v3[3] = *v2;
  return swift_task_switch();
}

uint64_t sub_2364C9CBC()
{
  return objectdestroy_178Tm();
}

uint64_t sub_2364C9CC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23647E274;
  v3[2] = v2;
  return swift_task_switch();
}

uint64_t sub_2364C9D28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_23647E274;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch();
}

uint64_t sub_2364C9D88()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_2364C9DC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23647E274;
  v3[2] = v2;
  return swift_task_switch();
}

uint64_t objectdestroy_161Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_2364C9E5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_23647E274;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch();
}

uint64_t sub_2364C9EBC()
{
  return objectdestroy_178Tm();
}

uint64_t sub_2364C9EC4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_23647E274;
  return swift_task_switch();
}

uint64_t objectdestroy_194Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2364C9F58()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[4];
  v4 = v0[6];
  v3 = v0[7];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_23647E274;
  v5[3] = v4;
  v5[4] = v3;
  v5[2] = v2;
  return swift_task_switch();
}

uint64_t sub_2364C9FC8()
{
  return objectdestroy_178Tm();
}

uint64_t objectdestroy_178Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2364CA008()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23647E274;
  v3[2] = v2;
  return swift_task_switch();
}

id sub_2364CA068@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 16);
  *a1 = v2;
  return v2;
}

uint64_t sub_2364CA074()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2364CA09C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = *a1;
  return v2(&v4);
}

uint64_t sub_2364CA21C()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC12AppleIDSetup11AISFlowTask_completed);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_2364CA2A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v14;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7FC0);
  v2 = MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v14 - v5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7FC8);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_BYTE *)(v0 + OBJC_IVAR____TtC12AppleIDSetup11AISFlowTask_completed);
  swift_beginAccess();
  *v11 = 1;
  v12 = v0 + OBJC_IVAR____TtC12AppleIDSetup11AISFlowTask_cachedContinuation;
  swift_beginAccess();
  sub_2364CA45C(v12, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    return sub_2364CA4A4((uint64_t)v6);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  sub_2365B01C4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v4, 1, 1, v7);
  swift_beginAccess();
  sub_2364CA4E4((uint64_t)v4, v12);
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_2364CA45C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7FC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2364CA4A4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7FC0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2364CA4E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7FC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_2364CA560()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[5] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9790);
  v1[6] = swift_task_alloc();
  sub_2365B01F4();
  v1[7] = sub_2365B01E8();
  v1[8] = sub_2365B01AC();
  v1[9] = v2;
  return swift_task_switch();
}

uint64_t sub_2364CA5F0()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v1 = (_BYTE *)(*(_QWORD *)(v0 + 40) + OBJC_IVAR____TtC12AppleIDSetup11AISFlowTask_completed);
  swift_beginAccess();
  if ((*v1 & 1) != 0)
  {
    swift_release();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 40);
    v4 = OBJC_IVAR____TtC12AppleIDSetup11AISFlowTask_cachedTask;
    if (*(_QWORD *)(v3 + OBJC_IVAR____TtC12AppleIDSetup11AISFlowTask_cachedTask))
    {
      v5 = *(_QWORD *)(v3 + OBJC_IVAR____TtC12AppleIDSetup11AISFlowTask_cachedTask);
    }
    else
    {
      v6 = *(_QWORD *)(v0 + 48);
      v7 = sub_2365B0218();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
      v8 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v9 = (_QWORD *)swift_allocObject();
      v9[2] = 0;
      v9[3] = 0;
      v9[4] = v8;
      v5 = sub_23649225C(v6, (uint64_t)&unk_2563E7FF0, (uint64_t)v9);
      *(_QWORD *)(v3 + v4) = v5;
      swift_retain();
      swift_release();
    }
    *(_QWORD *)(v0 + 80) = v5;
    swift_retain();
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 88) = v10;
    *v10 = v0;
    v10[1] = sub_2364CA760;
    return sub_2365B02C0();
  }
}

uint64_t sub_2364CA760()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_2364CA7B4()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2364CA7EC()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_2364CA92C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = a2;
  sub_2365B01F4();
  v2[4] = sub_2365B01E8();
  sub_2365B01AC();
  return swift_task_switch();
}

uint64_t sub_2364CA998()
{
  _QWORD *v0;
  void *v1;
  const void *v2;
  id v3;
  _QWORD *v4;

  v1 = (void *)v0[3];
  v2 = (const void *)v0[2];
  swift_release();
  v0[5] = _Block_copy(v2);
  v3 = v1;
  v4 = (_QWORD *)swift_task_alloc();
  v0[6] = v4;
  *v4 = v0;
  v4[1] = sub_2364CAA00;
  return sub_2364CA560();
}

uint64_t sub_2364CAA00()
{
  uint64_t *v0;
  void (**v1)(_QWORD);
  void *v2;
  uint64_t v4;

  v1 = *(void (***)(_QWORD))(*v0 + 40);
  v2 = *(void **)(*v0 + 24);
  v4 = *v0;
  swift_task_dealloc();

  v1[2](v1);
  _Block_release(v1);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_2364CAA64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 64) = a4;
  return swift_task_switch();
}

uint64_t sub_2364CAA7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _BYTE *v4;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 64) + 16;
  swift_beginAccess();
  v2 = MEMORY[0x23B7F52FC](v1);
  *(_QWORD *)(v0 + 72) = v2;
  if (!v2)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v3 = (void *)v2;
  v4 = (_BYTE *)(v2 + OBJC_IVAR____TtC12AppleIDSetup11AISFlowTask_completed);
  swift_beginAccess();
  if (*v4 == 1)
  {

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v6 = swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v6;
  *(_QWORD *)(v6 + 16) = v3;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v7;
  *v7 = v0;
  v7[1] = sub_2364CAB84;
  return sub_2365B086C();
}

uint64_t sub_2364CAB84()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2364CABE0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2364CAC10()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2364CAC3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_236477420;
  v3[8] = v2;
  return swift_task_switch();
}

uint64_t sub_2364CAC9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7FC0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7FC8);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  v9 = a2 + OBJC_IVAR____TtC12AppleIDSetup11AISFlowTask_cachedContinuation;
  swift_beginAccess();
  sub_2364CA4E4((uint64_t)v6, v9);
  return swift_endAccess();
}

id AISFlowTask.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  if (*(_QWORD *)&v0[OBJC_IVAR____TtC12AppleIDSetup11AISFlowTask_cachedTask])
  {
    swift_retain();
    sub_2365B02B4();
    swift_release();
  }
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AISFlowTask();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for AISFlowTask()
{
  uint64_t result;

  result = qword_2563E8030;
  if (!qword_2563E8030)
    return swift_getSingletonMetadata();
  return result;
}

id AISFlowTask.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id AISFlowTask.init()()
{
  _BYTE *v0;
  char *v1;
  uint64_t v2;
  objc_super v4;

  v1 = &v0[OBJC_IVAR____TtC12AppleIDSetup11AISFlowTask_cachedContinuation];
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7FC8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(_QWORD *)&v0[OBJC_IVAR____TtC12AppleIDSetup11AISFlowTask_cachedTask] = 0;
  v0[OBJC_IVAR____TtC12AppleIDSetup11AISFlowTask_completed] = 0;
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for AISFlowTask();
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t AISFlowTaskInfoProtocol_Internal.complete(after:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9790);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2365B0218();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = a2;
  v9[5] = v2;
  v9[6] = a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_23649225C((uint64_t)v7, (uint64_t)&unk_2563E8000, (uint64_t)v9);
  return swift_release();
}

uint64_t sub_2364CB10C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 120) = a4;
  *(_QWORD *)(v5 + 128) = a5;
  return swift_task_switch();
}

uint64_t sub_2364CB124()
{
  uint64_t v0;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  if ((objc_msgSend(*(id *)(v0 + 120), sel_completed) & 1) != 0)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v2 = *(void **)(v0 + 128);
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_2364CB1D8;
  v3 = swift_continuation_init();
  *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
  v4 = (_QWORD *)(v0 + 80);
  v4[1] = 0x40000000;
  v4[2] = sub_2364CB5A8;
  v4[3] = &block_descriptor_3;
  v4[4] = v3;
  objc_msgSend(v2, sel_waitUntilLoadedWithCompletionHandler_, v4);
  return swift_continuation_await();
}

uint64_t sub_2364CB1D8()
{
  return swift_task_switch();
}

uint64_t sub_2364CB224()
{
  uint64_t v0;

  objc_msgSend(*(id *)(v0 + 120), sel_complete);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2364CB25C()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2364CB290()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_23647E274;
  *(_OWORD *)(v2 + 120) = v3;
  return swift_task_switch();
}

uint64_t sub_2364CB2F0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(*a1 + OBJC_IVAR____TtC12AppleIDSetup11AISFlowTask_completed);
  result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_2364CB340(char *a1, _QWORD *a2)
{
  char v2;
  _BYTE *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_BYTE *)(*a2 + OBJC_IVAR____TtC12AppleIDSetup11AISFlowTask_completed);
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t sub_2364CB38C()
{
  return type metadata accessor for AISFlowTask();
}

void sub_2364CB394()
{
  unint64_t v0;

  sub_2364CB4C0();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for AISFlowTask()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AISFlowTask.completed.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of AISFlowTask.complete()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of AISFlowTask.waitUntilLoaded()()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = *(int **)((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8);
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23647E274;
  return v5();
}

void sub_2364CB4C0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2563E8048)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2563E7FC8);
    v0 = sub_2365B047C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2563E8048);
  }
}

uint64_t sub_2364CB518()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t sub_2364CB544()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&dword_2563E8050 + dword_2563E8050))(v2, v3);
}

uint64_t sub_2364CB5A8()
{
  return swift_continuation_resume();
}

uint64_t sub_2364CB5B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_2563EBDE0 + dword_2563EBDE0))(v2, v3, v4);
}

uint64_t objectdestroy_17Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2364CB65C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_2563EBDE8 + dword_2563EBDE8))(a1, v4, v5, v6);
}

uint64_t sub_2364CB6E0(uint64_t a1)
{
  uint64_t v1;

  return sub_2364CAC9C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t FamilyCircleProvider.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t FamilyCircleProvider.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_2364CB700()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&dword_2563E8070 + dword_2563E8070);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_2364CB758;
  return v3();
}

uint64_t sub_2364CB758(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t sub_2364CB7AC(uint64_t result, void *a2, void *a3)
{
  _QWORD *v4;
  id v5;
  id v6;

  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542A8310);
    swift_allocError();
    *v4 = a3;
    v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(result + 32) + 64) + 40) = a2;
    v6 = a2;
    return swift_continuation_throwingResume();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t FamilyCircleProvider.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t FamilyCircleProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_2364CB850()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&dword_2563E8070 + dword_2563E8070);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_2364CBB94;
  return v3();
}

uint64_t sub_2364CB8A8()
{
  return swift_task_switch();
}

uint64_t sub_2364CB8BC()
{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE30A88]), sel_init);
  v0[16] = v1;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_2364CB974;
  v2 = swift_continuation_init();
  v0[10] = MEMORY[0x24BDAC760];
  v3 = v0 + 10;
  v3[1] = 0x40000000;
  v3[2] = sub_2364CB7AC;
  v3[3] = &block_descriptor_4;
  v3[4] = v2;
  objc_msgSend(v1, sel_startRequestWithCompletionHandler_, v3);
  return swift_continuation_await();
}

uint64_t sub_2364CB974()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 136) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_2364CB9D4()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 120));
}

uint64_t sub_2364CBA0C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 128);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t dispatch thunk of FamilyCircleProviderProtocol.fetchFamilyCircle()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 8) + *(_QWORD *)(a2 + 8));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_2364CBB98;
  return v7(a1, a2);
}

uint64_t type metadata accessor for FamilyCircleProvider()
{
  return objc_opt_self();
}

uint64_t method lookup function for FamilyCircleProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FamilyCircleProvider.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of FamilyCircleProvider.fetchFamilyCircle()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 88) + *(_QWORD *)(*(_QWORD *)v0 + 88));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_2364CBB44;
  return v4();
}

uint64_t sub_2364CBB44(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

id SimpleRepairModelExchange.queue.getter()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

uint64_t SimpleRepairModelExchange.init(queue:_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t SimpleRepairModelExchange.receiveModelUpdate(_:with:)(uint64_t *a1)
{
  uint64_t v1;
  char v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  char v6;
  __int128 v7;

  v2 = *((_BYTE *)a1 + 8);
  v3 = *(uint64_t (**)(uint64_t *))(v1 + 8);
  v5 = *a1;
  v6 = v2;
  v7 = *((_OWORD *)a1 + 1);
  return v3(&v5);
}

uint64_t dispatch thunk of RepairModelExchange.queue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of RepairModelExchange.receiveModelUpdate(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

ValueMetadata *type metadata accessor for SimpleRepairModelExchange()
{
  return &type metadata for SimpleRepairModelExchange;
}

uint64_t Message.Metrics.epochsByStage.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Message.Metrics.epochsByStage.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*Message.Metrics.epochsByStage.modify())()
{
  return nullsub_1;
}

uint64_t Message.Metrics.init(epochsByStage:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t Message.Metrics.init(sourceSendEpoch:destinationReceiveEpoch:destinationSendEpoch:sourceReceiveEpoch:)@<X0>(uint64_t a1@<X3>, uint64_t *a2@<X8>, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for Message.Metrics.EpochStage(255, a3, a4, a1);
  swift_getTupleTypeMetadata2();
  sub_2365B0188();
  MEMORY[0x23B7F5164](&protocol conformance descriptor for Message<A>.Metrics.EpochStage, v4);
  v10 = sub_2365AFF78();
  v6 = type metadata accessor for Message.Metrics(0, a3, a4, v5);
  Message.Metrics.updatingEpoch(for:to:)(v6, &v9);
  Message.Metrics.updatingEpoch(for:to:)(v6, &v10);
  Message.Metrics.updatingEpoch(for:to:)(v6, &v9);
  result = Message.Metrics.updatingEpoch(for:to:)(v6, &v10);
  *a2 = v10;
  return result;
}

uint64_t Message.Metrics.updatingEpoch(for:to:)@<X0>(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  *a2 = *v2;
  v3 = type metadata accessor for Message.Metrics.EpochStage(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a1);
  MEMORY[0x23B7F5164](&protocol conformance descriptor for Message<A>.Metrics.EpochStage, v3);
  sub_2365AFF90();
  return sub_2365AFFC0();
}

uint64_t Message.Metrics.sourceSendEpoch.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2364CBEBC(a1, 0, a3, a4);
}

uint64_t Message.Metrics.destinationReceiveEpoch.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2364CBEBC(a1, 1, a3, a4);
}

uint64_t Message.Metrics.destinationSendEpoch.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2364CBEBC(a1, 2, a3, a4);
}

uint64_t Message.Metrics.sourceReceiveEpoch.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2364CBEBC(a1, 3, a3, a4);
}

uint64_t sub_2364CBEBC(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t v10;

  v5 = *v4;
  v9 = a2;
  v6 = type metadata accessor for Message.Metrics.EpochStage(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v7 = MEMORY[0x23B7F5164](&protocol conformance descriptor for Message<A>.Metrics.EpochStage, v6);
  MEMORY[0x23B7F3FC4](&v10, &v9, v5, v6, MEMORY[0x24BEE4568], v7);
  return v10;
}

unint64_t Message.Metrics.onewaySendDuration.getter(uint64_t a1)
{
  return sub_2364CBF54(a1, (uint64_t (*)(void))Message.Metrics.sourceSendEpoch.getter, (uint64_t (*)(uint64_t))Message.Metrics.destinationReceiveEpoch.getter);
}

unint64_t Message.Metrics.onewayReceiveDuration.getter(uint64_t a1)
{
  return sub_2364CBF54(a1, (uint64_t (*)(void))Message.Metrics.destinationSendEpoch.getter, (uint64_t (*)(uint64_t))Message.Metrics.sourceReceiveEpoch.getter);
}

unint64_t sub_2364CBF54(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t result;
  char v9;

  v5 = a2();
  if ((v6 & 1) != 0)
    return 0;
  v7 = v5;
  result = a3(a1);
  if ((v9 & 1) != 0)
    return 0;
  if (result >= v7)
    return 1000000000000000 * (result - v7);
  __break(1u);
  return result;
}

unint64_t Message.Metrics.destinationProcessingDuration.getter(uint64_t a1)
{
  return sub_2364CBF54(a1, (uint64_t (*)(void))Message.Metrics.destinationReceiveEpoch.getter, (uint64_t (*)(uint64_t))Message.Metrics.destinationSendEpoch.getter);
}

uint64_t Message.Metrics.roundtripDuration.getter(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = Message.Metrics.onewaySendDuration.getter(a1);
  if ((v4 & 1) != 0)
    return 0;
  v5 = v2;
  v6 = v3;
  v7 = Message.Metrics.onewayReceiveDuration.getter(a1);
  if ((v9 & 1) != 0)
    return 0;
  else
    return MEMORY[0x23B7F4AD4](v5, v6, v7, v8);
}

uint64_t Message.Metrics.updateEpoch(for:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  result = Message.Metrics.updatingEpoch(for:to:)(a4, &v6);
  *v4 = v6;
  return result;
}

uint64_t static Message.Metrics.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for Message.Metrics.EpochStage(0, a3, a4, a4);
  MEMORY[0x23B7F5164](&protocol conformance descriptor for Message<A>.Metrics.EpochStage, v4);
  return sub_2365AFFA8();
}

uint64_t Message.Metrics.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for Message.Metrics.EpochStage(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  swift_bridgeObjectRetain();
  MEMORY[0x23B7F5164](&protocol conformance descriptor for Message<A>.Metrics.EpochStage, v4);
  sub_2365AFF9C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2364CC1CC(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x79427368636F7065 && a2 == 0xED00006567617453)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_2364CC274()
{
  return 0x79427368636F7065;
}

uint64_t sub_2364CC298@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2364CC1CC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_2364CC2C8(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BBEE8, a1);
  return sub_2365B0AD0();
}

uint64_t sub_2364CC2FC(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BBEE8, a1);
  return sub_2365B0ADC();
}

uint64_t Message.Metrics.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];

  v6 = *(_QWORD *)(a2 + 16);
  v16 = *(_QWORD *)(a2 + 24);
  v17 = v6;
  v7 = _s7MetricsV10CodingKeysOMa(255, v6, v16, a4);
  MEMORY[0x23B7F5164](&unk_2365BBEE8, v7);
  v8 = sub_2365B0854();
  v18 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v16 - v9;
  v11 = *v4;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2365B0AAC();
  v19[3] = v11;
  v13 = type metadata accessor for Message.Metrics.EpochStage(255, v17, v16, v12);
  MEMORY[0x23B7F5164](&protocol conformance descriptor for Message<A>.Metrics.EpochStage, v13);
  v14 = sub_2365AFF90();
  v19[0] = MEMORY[0x23B7F5164](&protocol conformance descriptor for Message<A>.Metrics.EpochStage, v13);
  v19[1] = MEMORY[0x24BEE4570];
  MEMORY[0x23B7F5164](MEMORY[0x24BEE04C0], v14, v19);
  sub_2365B0824();
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v10, v8);
}

uint64_t Message.Metrics.hashValue.getter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[10];

  v6[9] = *v1;
  sub_2365B09E0();
  Message.Metrics.hash(into:)((uint64_t)v6, a1, v3, v4);
  return sub_2365B0A34();
}

uint64_t Message.Metrics.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];

  v20 = a5;
  v21 = a3;
  v8 = _s7MetricsV10CodingKeysOMa(255, a2, a3, a4);
  MEMORY[0x23B7F5164](&unk_2365BBEE8, v8);
  v22 = sub_2365B07AC();
  v9 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v11 = (char *)&v19 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2365B0A7C();
  if (!v5)
  {
    v13 = v9;
    v14 = v20;
    v15 = type metadata accessor for Message.Metrics.EpochStage(255, a2, v21, v12);
    MEMORY[0x23B7F5164](&protocol conformance descriptor for Message<A>.Metrics.EpochStage, v15);
    v16 = sub_2365AFF90();
    v23[0] = MEMORY[0x23B7F5164](&protocol conformance descriptor for Message<A>.Metrics.EpochStage, v15);
    v23[1] = MEMORY[0x24BEE4598];
    MEMORY[0x23B7F5164](MEMORY[0x24BEE04E0], v16, v23);
    v17 = v22;
    sub_2365B0770();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v17);
    *v14 = v23[3];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_2364CC6D4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  return Message.Metrics.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4);
}

uint64_t sub_2364CC6F0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Message.Metrics.encode(to:)(a1, a2, a3, a4);
}

uint64_t sub_2364CC704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Message.Metrics.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t sub_2364CC718(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[72];

  sub_2365B09E0();
  Message.Metrics.hash(into:)((uint64_t)v6, a2, v3, v4);
  return sub_2365B0A34();
}

BOOL static Message.Metrics.EpochStage.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t Message.Metrics.EpochStage.hash(into:)()
{
  return sub_2365B09F8();
}

uint64_t sub_2364CC794(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6553656372756F73 && a2 == 0xEA0000000000646ELL;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002365CC4A0 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x74616E6974736564 && a2 == 0xEF646E65536E6F69 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6552656372756F73 && a2 == 0xED00006576696563)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_2364CC998(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2364CC9D0 + 4 * byte_2365BB790[a1]))(0x6553656372756F73, 0xEA0000000000646ELL);
}

unint64_t sub_2364CC9D0()
{
  return 0xD000000000000012;
}

uint64_t sub_2364CC9EC()
{
  return 0x74616E6974736564;
}

uint64_t sub_2364CCA10()
{
  return 0x6552656372756F73;
}

uint64_t sub_2364CCA34()
{
  unsigned __int8 *v0;

  return sub_2364CC998(*v0);
}

uint64_t sub_2364CCA40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2364CC794(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2364CCA6C(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BBD58, a1);
  return sub_2365B0AD0();
}

uint64_t sub_2364CCAA0(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BBD58, a1);
  return sub_2365B0ADC();
}

uint64_t sub_2364CCAD4(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BBDF8, a1);
  return sub_2365B0AD0();
}

uint64_t sub_2364CCB08(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BBDF8, a1);
  return sub_2365B0ADC();
}

uint64_t sub_2364CCB3C(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BBE48, a1);
  return sub_2365B0AD0();
}

uint64_t sub_2364CCB70(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BBE48, a1);
  return sub_2365B0ADC();
}

uint64_t sub_2364CCBA4(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BBE98, a1);
  return sub_2365B0AD0();
}

uint64_t sub_2364CCBD8(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BBE98, a1);
  return sub_2365B0ADC();
}

uint64_t sub_2364CCC0C(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BBDA8, a1);
  return sub_2365B0AD0();
}

uint64_t sub_2364CCC40(uint64_t a1)
{
  MEMORY[0x23B7F5164](&unk_2365BBDA8, a1);
  return sub_2365B0ADC();
}

void Message.Metrics.EpochStage.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[20];

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = _s7MetricsV10EpochStageO23SourceReceiveCodingKeysOMa(255, v6, v7, a4);
  v26[17] = MEMORY[0x23B7F5164](&unk_2365BBE98, v8);
  v26[18] = v8;
  v9 = sub_2365B0854();
  v26[15] = *(_QWORD *)(v9 - 8);
  v26[16] = v9;
  MEMORY[0x24BDAC7A8](v9);
  v26[14] = (char *)v26 - v10;
  v12 = _s7MetricsV10EpochStageO25DestinationSendCodingKeysOMa(255, v6, v7, v11);
  v26[12] = MEMORY[0x23B7F5164](&unk_2365BBE48, v12);
  v26[13] = v12;
  v13 = sub_2365B0854();
  v26[10] = *(_QWORD *)(v13 - 8);
  v26[11] = v13;
  MEMORY[0x24BDAC7A8](v13);
  v26[9] = (char *)v26 - v14;
  v16 = _s7MetricsV10EpochStageO28DestinationReceiveCodingKeysOMa(255, v6, v7, v15);
  v26[7] = MEMORY[0x23B7F5164](&unk_2365BBDF8, v16);
  v26[8] = v16;
  v17 = sub_2365B0854();
  v26[5] = *(_QWORD *)(v17 - 8);
  v26[6] = v17;
  MEMORY[0x24BDAC7A8](v17);
  v26[4] = (char *)v26 - v18;
  v20 = _s7MetricsV10EpochStageO20SourceSendCodingKeysOMa(255, v6, v7, v19);
  v26[3] = MEMORY[0x23B7F5164](&unk_2365BBDA8, v20);
  v21 = sub_2365B0854();
  v26[1] = *(_QWORD *)(v21 - 8);
  v26[2] = v21;
  MEMORY[0x24BDAC7A8](v21);
  v23 = _s7MetricsV10EpochStageO10CodingKeysOMa(255, v6, v7, v22);
  MEMORY[0x23B7F5164](&unk_2365BBD58, v23);
  v24 = sub_2365B0854();
  v26[19] = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v25 = *v4;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2365B0AAC();
  __asm { BR              X9 }
}

uint64_t sub_2364CCEFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v3 - 68) = 0;
  sub_2365B07B8();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 248) + 8))(v2, *(_QWORD *)(v3 - 240));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 104) + 8))(v1, v0);
}

uint64_t Message.Metrics.EpochStage.hashValue.getter()
{
  sub_2365B09E0();
  sub_2365B09F8();
  return sub_2365B0A34();
}

uint64_t Message.Metrics.EpochStage.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  char *v38;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  char *v71;

  v53 = a5;
  v64 = _s7MetricsV10EpochStageO23SourceReceiveCodingKeysOMa(255, a2, a3, a4);
  v61 = MEMORY[0x23B7F5164](&unk_2365BBE98, v64);
  v8 = sub_2365B07AC();
  v62 = *(_QWORD *)(v8 - 8);
  v63 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v60 = (char *)&v40 - v9;
  v11 = _s7MetricsV10EpochStageO25DestinationSendCodingKeysOMa(255, a2, a3, v10);
  v58 = MEMORY[0x23B7F5164](&unk_2365BBE48, v11);
  v59 = v11;
  v49 = sub_2365B07AC();
  v48 = *(_QWORD *)(v49 - 8);
  MEMORY[0x24BDAC7A8](v49);
  v52 = (char *)&v40 - v12;
  v14 = _s7MetricsV10EpochStageO28DestinationReceiveCodingKeysOMa(255, a2, a3, v13);
  v56 = MEMORY[0x23B7F5164](&unk_2365BBDF8, v14);
  v57 = v14;
  v47 = sub_2365B07AC();
  v46 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v51 = (char *)&v40 - v15;
  v17 = _s7MetricsV10EpochStageO20SourceSendCodingKeysOMa(255, a2, a3, v16);
  v54 = MEMORY[0x23B7F5164](&unk_2365BBDA8, v17);
  v55 = sub_2365B07AC();
  v45 = *(_QWORD *)(v55 - 8);
  MEMORY[0x24BDAC7A8](v55);
  v50 = (char *)&v40 - v18;
  v66 = a3;
  v20 = _s7MetricsV10EpochStageO10CodingKeysOMa(255, a2, a3, v19);
  MEMORY[0x23B7F5164](&unk_2365BBD58, v20);
  v65 = sub_2365B07AC();
  v21 = *(_QWORD *)(v65 - 8);
  MEMORY[0x24BDAC7A8](v65);
  v23 = (char *)&v40 - v22;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v24 = v71;
  sub_2365B0A7C();
  v25 = (uint64_t)a1;
  if (!v24)
  {
    v42 = a2;
    v26 = v66;
    v44 = v21;
    v41 = 0;
    v43 = v25;
    v27 = v65;
    v71 = v23;
    *(_QWORD *)&v67 = sub_2365B07A0();
    v28 = sub_2365B01A0();
    MEMORY[0x23B7F5164](MEMORY[0x24BEE12C8], v28);
    *(_QWORD *)&v69 = sub_2365B04DC();
    *((_QWORD *)&v69 + 1) = v29;
    *(_QWORD *)&v70 = v30;
    *((_QWORD *)&v70 + 1) = v31;
    v32 = sub_2365B04D0();
    MEMORY[0x23B7F5164](MEMORY[0x24BEE2190], v32);
    sub_2365B0368();
    v33 = v67;
    if (v67 != 4)
    {
      v40 = v69;
      v67 = v69;
      v68 = v70;
      if ((sub_2365B0374() & 1) != 0)
        __asm { BR              X9 }
    }
    v34 = sub_2365B05B4();
    swift_allocError();
    v36 = v35;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E47A8);
    *v36 = type metadata accessor for Message.Metrics.EpochStage(0, v42, v26, v37);
    v38 = v71;
    sub_2365B0704();
    sub_2365B059C();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v34 - 8) + 104))(v36, *MEMORY[0x24BEE26D0], v34);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v38, v27);
    v25 = v43;
  }
  return __swift_destroy_boxed_opaque_existential_1(v25);
}

void sub_2364CD56C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v3 - 160) = 1;
  v5 = *(_QWORD *)(v3 - 288);
  v6 = *(_QWORD *)(v3 - 368);
  sub_2365B06F8();
  if (!v6)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 328) + 8))(v5, *(_QWORD *)(v3 - 320));
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(a1 + 8))(v1, v2);
    JUMPOUT(0x2364CD704);
  }
  swift_unknownObjectRelease();
  JUMPOUT(0x2364CD684);
}

uint64_t sub_2364CD728()
{
  sub_2365B09E0();
  Message.Metrics.EpochStage.hash(into:)();
  return sub_2365B0A34();
}

uint64_t sub_2364CD760@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return Message.Metrics.EpochStage.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4);
}

void sub_2364CD77C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Message.Metrics.EpochStage.encode(to:)(a1, a2, a3, a4);
}

uint64_t static UInt64.epoch(for:)()
{
  uint64_t result;
  double v1;
  double v2;

  result = sub_2365AF984();
  v2 = v1 * 1000.0;
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 1.84467441e19)
    return (unint64_t)v2;
LABEL_7:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for Message.Metrics.EpochStage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Message.Metrics.EpochStage);
}

uint64_t type metadata accessor for Message.Metrics(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Message.Metrics);
}

uint64_t _s7MetricsV10CodingKeysOMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s7MetricsV10CodingKeysOMn);
}

uint64_t _s7MetricsV10EpochStageO23SourceReceiveCodingKeysOMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s7MetricsV10EpochStageO23SourceReceiveCodingKeysOMn);
}

uint64_t _s7MetricsV10EpochStageO25DestinationSendCodingKeysOMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s7MetricsV10EpochStageO25DestinationSendCodingKeysOMn);
}

uint64_t _s7MetricsV10EpochStageO28DestinationReceiveCodingKeysOMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s7MetricsV10EpochStageO28DestinationReceiveCodingKeysOMn);
}

uint64_t _s7MetricsV10EpochStageO20SourceSendCodingKeysOMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s7MetricsV10EpochStageO20SourceSendCodingKeysOMn);
}

uint64_t _s7MetricsV10EpochStageO10CodingKeysOMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s7MetricsV10EpochStageO10CodingKeysOMn);
}

uint64_t sub_2364CD85C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2364B85A0(a1, a2, a3, (uint64_t)&protocol conformance descriptor for Message<A>.Metrics, (uint64_t)&protocol conformance descriptor for Message<A>.Metrics, (uint64_t)&protocol conformance descriptor for Message<A>.Metrics);
}

void sub_2364CD878()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364CD888()
{
  JUMPOUT(0x23B7F5164);
}

uint64_t sub_2364CD898(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2364B85A0(a1, a2, a3, (uint64_t)&protocol conformance descriptor for Message<A>.Metrics.EpochStage, (uint64_t)&protocol conformance descriptor for Message<A>.Metrics.EpochStage, (uint64_t)&protocol conformance descriptor for Message<A>.Metrics.EpochStage);
}

uint64_t sub_2364CD8B8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_2364CD904 + 4 * byte_2365BB7A1[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_2364CD938 + 4 * byte_2365BB79C[v4]))();
}

uint64_t sub_2364CD938(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364CD940(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2364CD948);
  return result;
}

uint64_t sub_2364CD954(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2364CD95CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_2364CD960(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364CD968(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364CD974(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2364CD9B4 + 4 * byte_2365BB7A6[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2364CD9D4 + 4 * byte_2365BB7AB[v4]))();
}

_BYTE *sub_2364CD9B4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2364CD9D4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2364CD9DC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2364CD9E4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2364CD9EC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2364CD9F4(_DWORD *result)
{
  *result = 0;
  return result;
}

void sub_2364CDA00()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364CDA10()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364CDA20()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364CDA30()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364CDA40()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364CDA50()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364CDA60()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364CDA70()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364CDA80()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364CDA90()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364CDAA0()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364CDAB0()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364CDAC0()
{
  JUMPOUT(0x23B7F5164);
}

void sub_2364CDAD0()
{
  JUMPOUT(0x23B7F5164);
}

uint64_t TransportBuilding.into()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;

  v7 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3, a1);
  a3[3] = a1;
  a3[4] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
  return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v7 + 32))(boxed_opaque_existential_1, v9, a1);
}

uint64_t AnyTransport.wrappedValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23648D710(v1, a1);
}

uint64_t AnyTransport.wrappedValue.setter(__int128 *a1)
{
  uint64_t v1;

  __swift_destroy_boxed_opaque_existential_1(v1);
  return sub_23646A440(a1, v1);
}

uint64_t (*AnyTransport.wrappedValue.modify())()
{
  return nullsub_1;
}

uint64_t AnyTransport.messageSessionTemplate.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

uint64_t AnyTransport.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t *boxed_opaque_existential_1;

  a4[3] = a2;
  a4[4] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(boxed_opaque_existential_1, a1, a2);
}

uint64_t AnyTransport.send(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t sub_2364CDC68()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v0[4];
  v1 = (_QWORD *)v0[5];
  v4 = v1[3];
  v3 = v1[4];
  v5 = __swift_project_boxed_opaque_existential_1(v1, v4);
  v6 = (_QWORD *)swift_task_alloc();
  v0[6] = (uint64_t)v6;
  v7 = *(_QWORD *)(v2 + 16);
  v8 = *(_QWORD *)(v2 + 24);
  *v6 = v0;
  v6[1] = sub_236478150;
  return sub_2364CDCE0(v0[2], (uint64_t)v5, v0[3], v7, v4, v8, v3);
}

uint64_t sub_2364CDCE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t AssociatedTypeWitness;

  v7[6] = a5;
  v7[7] = a7;
  v7[4] = a3;
  v7[5] = a4;
  v7[2] = a1;
  v7[3] = a2;
  v7[8] = *(_QWORD *)(a4 - 8);
  v7[9] = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[10] = AssociatedTypeWitness;
  v7[11] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7[12] = swift_task_alloc();
  v7[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_2364CDD94()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD, _QWORD, _QWORD, _QWORD);

  v1 = v0[7];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[8] + 16))(v0[9], v0[4], v0[5]);
  swift_dynamicCast();
  v4 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))(**(int **)(v1 + 32) + *(_QWORD *)(v1 + 32));
  v2 = (_QWORD *)swift_task_alloc();
  v0[14] = v2;
  *v2 = v0;
  v2[1] = sub_2364CDE40;
  return v4(v0[13], v0[12], v0[6], v0[7]);
}

uint64_t sub_2364CDE40()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  if (!v0)
    (*(void (**)(_QWORD, _QWORD))(v2[11] + 8))(v2[12], v2[10]);
  return swift_task_switch();
}

uint64_t sub_2364CDEB4()
{
  uint64_t v0;

  swift_dynamicCast();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2364CDF1C()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall AnyTransport.invalidate()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 40))(v1, v2);
}

uint64_t sub_2364CDFC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_236477420;
  v8[4] = a3;
  v8[5] = v3;
  v8[2] = a1;
  v8[3] = a2;
  return swift_task_switch();
}

uint64_t Transport.into()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t *boxed_opaque_existential_1;

  a3[3] = a1;
  a3[4] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(boxed_opaque_existential_1, v3, a1);
}

uint64_t TransportBuilding.buildAny()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t AssociatedConformanceWitness;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v14;

  v6 = *(_QWORD *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v14 - v9;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(a1, v6);
  if (!v3)
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    a3[3] = AssociatedTypeWitness;
    a3[4] = AssociatedConformanceWitness;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v8 + 32))(boxed_opaque_existential_1, v10, AssociatedTypeWitness);
  }
  return result;
}

uint64_t (*AnyTransportBuilder.wrappedValue.modify())()
{
  return nullsub_1;
}

uint64_t AnyTransportBuilder.init<A>(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t *boxed_opaque_existential_1;

  a4[3] = a2;
  a4[4] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(boxed_opaque_existential_1, a1, a2);
}

__n128 AnyTransportBuilder.onReceive(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __n128 result;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v9 = *(_QWORD *)(v4 + 24);
  v10 = *(_QWORD *)(v4 + 32);
  v11 = __swift_project_boxed_opaque_existential_1((_QWORD *)v4, v9);
  v15 = v9;
  v16 = v10;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v14);
  sub_2364CE268((uint64_t)v11, a1, a2, *(_QWORD *)(a3 + 16), v9, *(_QWORD *)(a3 + 24), v10);
  __swift_destroy_boxed_opaque_existential_1(v4);
  sub_23646A440(&v14, v4);
  result = *(__n128 *)v4;
  v13 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)a4 = *(_OWORD *)v4;
  *(_OWORD *)(a4 + 16) = v13;
  *(_QWORD *)(a4 + 32) = *(_QWORD *)(v4 + 32);
  return result;
}

uint64_t sub_2364CE268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *))(v13 + 16))((char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15[2] = a2;
  v15[3] = a3;
  swift_retain();
  v15[0] = a4;
  swift_getFunctionTypeMetadata();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v15[0] = swift_getAssociatedTypeWitness();
  swift_getFunctionTypeMetadata();
  swift_dynamicCast();
  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(a7 + 24))(v15[0], v15[1], a5, a7);
  return swift_release();
}

__n128 AnyTransportBuilder.onInvalidation(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  __n128 result;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v4 = v3;
  v8 = *(_QWORD *)(v4 + 24);
  v9 = *(_QWORD *)(v4 + 32);
  v10 = __swift_project_boxed_opaque_existential_1((_QWORD *)v4, v8);
  MEMORY[0x24BDAC7A8](v10);
  (*(void (**)(char *))(v12 + 16))((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_destroy_boxed_opaque_existential_1(v4);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 32);
  v18 = v8;
  v19 = v9;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v17);
  v13(a1, a2, v8, v9);
  sub_23646A440(&v17, v4);
  result = *(__n128 *)v4;
  v15 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v4;
  *(_OWORD *)(a3 + 16) = v15;
  *(_QWORD *)(a3 + 32) = *(_QWORD *)(v4 + 32);
  return result;
}

uint64_t AnyTransportBuilder.build()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = v1[3];
  v4 = v1[4];
  v5 = __swift_project_boxed_opaque_existential_1(v1, v3);
  return sub_2364CE530((uint64_t)v5, *(_QWORD *)(a1 + 16), v3, *(_QWORD *)(a1 + 24), v4);
}

uint64_t sub_2364CE530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18[5];

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *))(v11 + 16))((char *)&v18[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = TransportBuilding.buildAny()(a3, a5, v18);
  if (!v5)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    type metadata accessor for AnyTransport(0, AssociatedTypeWitness, AssociatedConformanceWitness, v15);
    type metadata accessor for AnyTransport(0, a2, a4, v16);
    return swift_dynamicCast();
  }
  return result;
}

uint64_t sub_2364CE6AC(uint64_t a1)
{
  uint64_t v1;

  AnyTransportBuilder.build()(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t CustomTransport.onReceive(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;

  sub_236450690(*(_QWORD *)v3);
  v7 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = a2;
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(v3 + 16);
  *(_QWORD *)(a3 + 32) = v7;
  return swift_retain();
}

uint64_t CustomTransport.onInvalidation(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *v3;
  v8 = v3[1];
  sub_236450690(v3[2]);
  v9 = v3[4];
  *a3 = v7;
  a3[1] = v8;
  a3[2] = a1;
  a3[3] = a2;
  a3[4] = v9;
  return swift_retain();
}

uint64_t CustomTransport.interface(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;

  v8 = *v2;
  v5 = *((_QWORD *)v2 + 2);
  v6 = *((_QWORD *)v2 + 3);
  swift_release();
  *(_OWORD *)a2 = v8;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = a1;
  return swift_retain();
}

uint64_t CustomTransport.build()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t result;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9790);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v2[1];
  v23 = *v2;
  v24 = v8;
  v25 = *((_QWORD *)v2 + 4);
  if ((_QWORD)v23 && v25)
  {
    v9 = sub_2365B0218();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v7, 1, 1, v9);
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v10 + 32) = v11;
    *(_QWORD *)(v10 + 40) = v12;
    v13 = v24;
    *(_OWORD *)(v10 + 48) = v23;
    *(_OWORD *)(v10 + 64) = v13;
    *(_QWORD *)(v10 + 80) = v25;
    sub_2364CF37C((uint64_t *)&v23);
    v14 = sub_2364CF1E4((uint64_t)v7, (uint64_t)&unk_2563E84A8, v10);
    sub_236465998((uint64_t)v7, &qword_2563E9790);
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = v11;
    *(_QWORD *)(v15 + 24) = v12;
    v16 = v24;
    *(_OWORD *)(v15 + 32) = v23;
    *(_OWORD *)(v15 + 48) = v16;
    *(_QWORD *)(v15 + 64) = v25;
    sub_2364CF37C((uint64_t *)&v23);
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542A8310);
    sub_2365B01D0();
    swift_getTupleTypeMetadata2();
    sub_2365B0260();
    result = sub_2365B0230();
    v18 = v25;
    v19 = v24;
    *(_OWORD *)a2 = v23;
    *(_OWORD *)(a2 + 16) = v19;
    *(_QWORD *)(a2 + 32) = v18;
    *(_QWORD *)(a2 + 40) = 0;
    *(_BYTE *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = v14;
  }
  else
  {
    sub_2364CEA2C((uint64_t *)&v23);
    v21 = type metadata accessor for CustomTransport.Failure(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v20);
    MEMORY[0x23B7F5164](&unk_2365BC148, v21);
    swift_allocError();
    *v22 = 0xD00000000000001DLL;
    v22[1] = 0x80000002365CC4C0;
    return swift_willThrow();
  }
  return result;
}

uint64_t *sub_2364CEA2C(uint64_t *a1)
{
  uint64_t v2;

  v2 = a1[2];
  sub_236450690(*a1);
  sub_236450690(v2);
  swift_release();
  return a1;
}

uint64_t type metadata accessor for CustomTransport.Failure(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CustomTransport.Failure);
}

uint64_t sub_2364CEA84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[5] = a5;
  v6[6] = a6;
  v6[4] = a4;
  v6[7] = *(_QWORD *)(a5 - 8);
  v6[8] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542A8310);
  v7 = sub_2365B0A40();
  v6[9] = v7;
  v6[10] = *(_QWORD *)(v7 - 8);
  v6[11] = swift_task_alloc();
  v8 = sub_2365B01D0();
  v6[12] = v8;
  v6[13] = *(_QWORD *)(v8 - 8);
  v6[14] = swift_task_alloc();
  v6[15] = swift_getTupleTypeMetadata2();
  sub_2365B047C();
  v6[16] = swift_task_alloc();
  v9 = sub_2365B0284();
  v6[17] = v9;
  v6[18] = *(_QWORD *)(v9 - 8);
  v6[19] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_2364CEBDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(_QWORD *, uint64_t, uint64_t);
  uint64_t result;
  _QWORD *v9;

  v5 = v4[4] + 32;
  type metadata accessor for CustomTransport.Interface(255, v4[5], v4[6], a4);
  v6 = sub_2365B047C();
  v7 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(v4 + 3, v5, v6);
  result = ((uint64_t (*)(_QWORD *, _QWORD *, uint64_t))v7)(v4 + 2, v4 + 3, v6);
  if (v4[2])
  {
    sub_2365B0290();
    sub_2365B026C();
    v9 = (_QWORD *)swift_task_alloc();
    v4[20] = v9;
    *v9 = v4;
    v9[1] = sub_2364CECCC;
    return sub_2365B0278();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_2364CECCC()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2364CED20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v9;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 48))(v2, 1, v1) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 136));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 56);
    v4 = *(_QWORD *)(v0 + 64);
    v6 = *(_QWORD *)(v0 + 32);
    v9 = *(_OWORD *)(v0 + 40);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 104) + 32))(*(_QWORD *)(v0 + 112), v2 + *(int *)(v1 + 48), *(_QWORD *)(v0 + 96));
    (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 32))(v4, v2, v9);
    v7 = swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v7;
    *(_OWORD *)(v7 + 16) = v9;
    *(_QWORD *)(v7 + 32) = v6;
    *(_QWORD *)(v7 + 40) = v4;
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 176) = v8;
    *v8 = v0;
    v8[1] = sub_2364CEE74;
    return static Result<>.catching<A>(_:)(*(_QWORD *)(v0 + 88), (int *)&unk_2563E8940, v7, *(_QWORD *)(v0 + 40));
  }
}

uint64_t sub_2364CEE74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch();
}

uint64_t sub_2364CEEF0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[13];
  v1 = v0[14];
  v4 = v0[11];
  v3 = v0[12];
  v5 = v0[9];
  v6 = v0[10];
  sub_2365224D0(v4, v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v7 = (_QWORD *)swift_task_alloc();
  v0[20] = v7;
  *v7 = v0;
  v7[1] = sub_2364CECCC;
  return sub_2365B0278();
}

uint64_t sub_2364CEF94()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  if (*(_QWORD *)(v0 + 48))
    swift_release();
  if (*(_QWORD *)(v0 + 64))
    swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2364CEFE0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[4];
  v5 = v1[5];
  v6 = v1[2];
  v7 = v1[3];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_236477420;
  return sub_2364CEA84(a1, v6, v7, (uint64_t)(v1 + 6), v4, v5);
}

uint64_t sub_2364CF060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  v4[6] = *(_QWORD *)(a4 - 8);
  v4[7] = swift_task_alloc();
  return swift_task_switch();
}

void sub_2364CF0B8()
{
  uint64_t v0;
  int *v1;
  _QWORD *v2;
  int *v3;

  v1 = **(int ***)(v0 + 24);
  if (v1)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 16))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
    v3 = (int *)((char *)v1 + *v1);
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 64) = v2;
    *v2 = v0;
    v2[1] = sub_2364CF13C;
    ((void (*)(_QWORD, _QWORD))v3)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 56));
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_2364CF13C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_2364CF1B0()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2364CF1E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9790);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23646C4B0(a1, (uint64_t)v8, &qword_2563E9790);
  v9 = sub_2365B0218();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_236465998((uint64_t)v8, &qword_2563E9790);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v11 = sub_2365B01AC();
      v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_2365B020C();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v11 = 0;
  v13 = 0;
LABEL_6:
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

uint64_t *sub_2364CF37C(uint64_t *a1)
{
  uint64_t v2;

  v2 = a1[2];
  sub_23645063C(*a1);
  sub_23645063C(v2);
  swift_retain();
  return a1;
}

uint64_t sub_2364CF3C8()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 32))
    swift_release();
  if (*(_QWORD *)(v0 + 48))
    swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2364CF40C()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t result;

  v1 = *(uint64_t (**)(void))(v0 + 48);
  if (v1)
    return v1();
  return result;
}

uint64_t sub_2364CF43C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return CustomTransport.build()(a1, a2);
}

uint64_t CustomTransport.Interface.__allocating_init(receiver:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  CustomTransport.Interface.init(receiver:)(a1, a2);
  return v4;
}

uint64_t sub_2364CF49C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;

  v21 = a1;
  v22 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E8918);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E8920);
  v23 = *(_QWORD *)(v7 - 8);
  v24 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E8928);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v21 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E8910);
  v17 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
  v25 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E88F8);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BEE6A10], v3);
  sub_2365B029C();
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 96), v9, v24);
  sub_23646C4B0((uint64_t)v15, (uint64_t)v13, &qword_2563E8928);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v13, 1, v16);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 104), v13, v16);
    v19 = (_QWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 112));
    v20 = v22;
    *v19 = v21;
    v19[1] = v20;
    sub_236465998((uint64_t)v15, &qword_2563E8928);
    return v2;
  }
  return result;
}

uint64_t CustomTransport.Interface.init(receiver:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;

  v20 = a1;
  v21 = a2;
  v27 = *v2;
  v25 = *(_QWORD *)(v27 + 80);
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542A8310);
  sub_2365B01D0();
  swift_getTupleTypeMetadata2();
  v24 = sub_2365B023C();
  v22 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v4 = (char *)&v20 - v3;
  v26 = sub_2365B0290();
  v23 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v6 = (char *)&v20 - v5;
  v7 = sub_2365B0260();
  v8 = sub_2365B047C();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v20 - v13;
  v15 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))((char *)&v20 - v13, 1, 1, v7);
  v16 = *(_QWORD *)(v27 + 88);
  v28 = v25;
  v29 = v16;
  v30 = v14;
  (*(void (**)(char *, _QWORD, uint64_t))(v22 + 104))(v4, *MEMORY[0x24BEE6A10], v24);
  sub_2365B029C();
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))((uint64_t)v2 + *(_QWORD *)(*v2 + 96), v6, v26);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v7);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))((uint64_t)v2 + *(_QWORD *)(*v2 + 104), v12, v7);
    v18 = (uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 112));
    v19 = v21;
    *v18 = v20;
    v18[1] = v19;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    return (uint64_t)v2;
  }
  return result;
}

uint64_t sub_2364CF93C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_236465998(a2, &qword_2563E8928);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E8910);
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, a1, v4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
}

uint64_t sub_2364CF9B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542A8310);
  sub_2365B01D0();
  swift_getTupleTypeMetadata2();
  v4 = sub_2365B0260();
  v5 = sub_2365B047C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a2, v5);
  v6 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, a1, v4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(a2, 0, 1, v4);
}

uint64_t sub_2364CFA74(uint64_t a1)
{
  uint64_t v1;

  return sub_2364CF9B0(a1, *(_QWORD *)(v1 + 32));
}

uint64_t sub_2364CFA80(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *v2;
  return swift_task_switch();
}

uint64_t sub_2364CFAA4()
{
  uint64_t v0;
  int8x16_t *v1;
  _QWORD *v2;

  v1 = (int8x16_t *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v1;
  v1[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v2;
  *v2 = v0;
  v2[1] = sub_2364CFB44;
  return sub_2365B0914();
}

uint64_t sub_2364CFB44()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_2364CFBB8()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2364CFBEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E88F8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E8900);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = &v7[*(int *)(v5 + 48)];
  sub_23646C4B0(a3, (uint64_t)v7, &qword_2563E84E0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E8908);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v12, a1, v13);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E8910);
  sub_2365B0248();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_2364CFD1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v15;
  uint64_t v16;

  v16 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542A8310);
  v5 = sub_2365B01D0();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v8 = (char *)&v15 - v7;
  v9 = sub_2365B0224();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v15 - v11;
  v13 = &v8[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v8, a3, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v13, v16, v5);
  sub_2365B0260();
  sub_2365B0248();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_2364CFE80(uint64_t a1)
{
  uint64_t v1;

  return sub_2364CFD1C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_2364CFE88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_2364CFEA4()
{
  _QWORD *v0;
  int **v1;
  int *v2;
  _QWORD *v3;
  int *v5;

  v1 = (int **)(v0[4] + *(_QWORD *)(*(_QWORD *)v0[4] + 112));
  v2 = *v1;
  v0[5] = v1[1];
  v5 = (int *)((char *)v2 + *v2);
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc();
  v0[6] = v3;
  *v3 = v0;
  v3[1] = sub_2364CFF24;
  return ((uint64_t (*)(_QWORD, _QWORD))v5)(v0[2], v0[3]);
}

uint64_t sub_2364CFF24()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2364CFF88()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2364CFFBC()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CustomTransport.Interface.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 96);
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542A8310);
  sub_2365B01D0();
  swift_getTupleTypeMetadata2();
  v2 = sub_2365B0290();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 104);
  v4 = sub_2365B0260();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_release();
  return v0;
}

uint64_t CustomTransport.Interface.__deallocating_deinit()
{
  CustomTransport.Interface.deinit();
  return swift_deallocClassInstance();
}

uint64_t CustomTransport.Interface<>.init(receiver:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E84D0);
  swift_allocObject();
  return sub_2364CF49C((uint64_t)&unk_2563E84C8, v4);
}

uint64_t sub_2364D0158(uint64_t a1, uint64_t a2, int *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t);

  v3[2] = a1;
  v6 = sub_2365AF9A8();
  v3[3] = v6;
  v3[4] = *(_QWORD *)(v6 - 8);
  v3[5] = swift_task_alloc();
  v7 = sub_2365AF9FC();
  v3[6] = v7;
  v3[7] = *(_QWORD *)(v7 - 8);
  v3[8] = swift_task_alloc();
  type metadata accessor for V1Command(0);
  v8 = swift_task_alloc();
  v3[9] = v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E84E0);
  v3[10] = v9;
  v10 = a2 + *(int *)(v9 + 44);
  v13 = (uint64_t (*)(uint64_t, uint64_t))((char *)a3 + *a3);
  v11 = (_QWORD *)swift_task_alloc();
  v3[11] = v11;
  *v11 = v3;
  v11[1] = sub_2364D025C;
  return v13(v8, v10);
}

uint64_t sub_2364D025C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2364D02C0()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  double v11;
  double v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  unint64_t v22;

  sub_2365AF9F0();
  v2 = sub_23646A4A4(MEMORY[0x24BEE4AF8]);
  v3 = sub_23646868C(0);
  if ((v4 & 1) == 0)
    goto LABEL_4;
  v0 = v3;
  v22 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_23;
  while (1)
  {
    sub_2364D0F64(v0, v2);
    swift_bridgeObjectRelease();
LABEL_4:
    v5 = sub_23646868C(1u);
    if ((v6 & 1) != 0)
    {
      v0 = v5;
      v22 = v2;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_2364D14C0();
      sub_2364D0F64(v0, v2);
      swift_bridgeObjectRelease();
    }
    v7 = sub_23646868C(2u);
    if ((v8 & 1) != 0)
    {
      v0 = v7;
      v22 = v2;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_2364D14C0();
      sub_2364D0F64(v0, v2);
      swift_bridgeObjectRelease();
    }
    v9 = sub_23646868C(3u);
    if ((v10 & 1) != 0)
    {
      v0 = v9;
      v22 = v2;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_2364D14C0();
      sub_2364D0F64(v0, v2);
      swift_bridgeObjectRelease();
    }
    sub_2365AF990();
    sub_2365AF984();
    v12 = v11 * 1000.0;
    if ((~*(_QWORD *)&v12 & 0x7FF0000000000000) == 0)
    {
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    if (v12 <= -1.0)
      goto LABEL_21;
    if (v12 < 1.84467441e19)
      break;
LABEL_22:
    __break(1u);
LABEL_23:
    sub_2364D14C0();
    v2 = v22;
  }
  v13 = *(_QWORD *)(v1 + 72);
  v14 = *(int **)(v1 + 80);
  v16 = *(_QWORD *)(v1 + 56);
  v15 = *(_QWORD *)(v1 + 64);
  v21 = *(_QWORD *)(v1 + 48);
  v17 = *(_QWORD *)(v1 + 16);
  v18 = (unint64_t)v12;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 32) + 8))(*(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 24));
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_236469FEC(v18, 0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  sub_2364D2280(v13, v17 + v14[11]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v17, v15, v21);
  *(_BYTE *)(v17 + v14[9]) = 1;
  *(_QWORD *)(v17 + v14[10]) = v2;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_2364D0540()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CustomTransport.Interface<>.receiveIncoming(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = sub_2365AF9A8();
  v3[5] = v4;
  v3[6] = *(_QWORD *)(v4 - 8);
  v3[7] = swift_task_alloc();
  v5 = sub_2365AF9FC();
  v3[8] = v5;
  v3[9] = *(_QWORD *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[11] = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E84E0);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_2364D064C()
{
  unint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  unint64_t v25;

  sub_2365AF9F0();
  v2 = sub_23646A4A4(MEMORY[0x24BEE4AF8]);
  v3 = sub_23646868C(0);
  if ((v4 & 1) == 0)
    goto LABEL_4;
  v0 = v3;
  v25 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_23;
  while (1)
  {
    sub_2364D0F64(v0, v2);
    swift_bridgeObjectRelease();
LABEL_4:
    v5 = sub_23646868C(1u);
    if ((v6 & 1) != 0)
    {
      v0 = v5;
      v25 = v2;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_2364D14C0();
      sub_2364D0F64(v0, v2);
      swift_bridgeObjectRelease();
    }
    v7 = sub_23646868C(2u);
    if ((v8 & 1) != 0)
    {
      v0 = v7;
      v25 = v2;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_2364D14C0();
      sub_2364D0F64(v0, v2);
      swift_bridgeObjectRelease();
    }
    v9 = sub_23646868C(3u);
    if ((v10 & 1) != 0)
    {
      v0 = v9;
      v25 = v2;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_2364D14C0();
      sub_2364D0F64(v0, v2);
      swift_bridgeObjectRelease();
    }
    sub_2365AF990();
    sub_2365AF984();
    v12 = v11 * 1000.0;
    if ((~*(_QWORD *)&v12 & 0x7FF0000000000000) == 0)
    {
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    if (v12 <= -1.0)
      goto LABEL_21;
    if (v12 < 1.84467441e19)
      break;
LABEL_22:
    __break(1u);
LABEL_23:
    sub_2364D14C0();
    v2 = v25;
  }
  v13 = v1[13];
  v14 = v1[10];
  v15 = (int *)v1[11];
  v16 = v1[8];
  v17 = v1[9];
  v24 = v1[4];
  v18 = v1[3];
  v19 = (unint64_t)v12;
  (*(void (**)(_QWORD, _QWORD))(v1[6] + 8))(v1[7], v1[5]);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_236469FEC(v19, 0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  sub_2364D16E4(v18, v13 + v15[11]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v13, v14, v16);
  *(_BYTE *)(v13 + v15[9]) = 1;
  *(_QWORD *)(v13 + v15[10]) = v2;
  v21 = swift_task_alloc();
  v1[14] = v21;
  *(_QWORD *)(v21 + 16) = v24;
  *(_QWORD *)(v21 + 24) = v13;
  v22 = (_QWORD *)swift_task_alloc();
  v1[15] = v22;
  *v22 = v1;
  v22[1] = sub_2364D091C;
  return sub_2365B0914();
}

uint64_t sub_2364D091C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2364D0988()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 16);
  sub_236465998(*(_QWORD *)(v0 + 104), &qword_2563E84E0);
  sub_2364D16E4(v1 + *(int *)(v2 + 44), v3);
  sub_236465998(v1, &qword_2563E84E0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2364D0A2C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc();
  sub_236465998(v1, &qword_2563E84E0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CustomTransport.Activated.base.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  sub_23645063C(v2);
  sub_23645063C(v4);
  return swift_retain();
}

void *CustomTransport.Activated.messageSessionTemplate.getter()
{
  void *v0;
  id v1;

  v0 = (void *)sub_2364D164C();
  v1 = v0;
  return v0;
}

void CustomTransport.Activated.messageSessionTemplate.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = a1;
}

uint64_t (*CustomTransport.Activated.messageSessionTemplate.modify())()
{
  return nullsub_1;
}

uint64_t CustomTransport.Activated.send(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  v5 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v4 + 32) = a3;
  *(_QWORD *)(v4 + 40) = v5;
  *(_BYTE *)(v4 + 56) = *(_BYTE *)(v3 + 48);
  return swift_task_switch();
}

void sub_2364D0B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  if ((*(_BYTE *)(v4 + 56) & 1) != 0)
  {
    v5 = type metadata accessor for CustomTransport.Failure(0, *(_QWORD *)(*(_QWORD *)(v4 + 32) + 16), *(_QWORD *)(*(_QWORD *)(v4 + 32) + 24), a4);
    MEMORY[0x23B7F5164](&unk_2365BC148, v5);
    swift_allocError();
    *v6 = 0;
    v6[1] = 0;
    swift_willThrow();
    (*(void (**)(void))(v4 + 8))();
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 40);
    if (v7)
    {
      v8 = swift_task_alloc();
      *(_QWORD *)(v4 + 48) = v8;
      *(_QWORD *)v8 = v4;
      *(_QWORD *)(v8 + 8) = sub_236478150;
      v9 = *(_OWORD *)(v4 + 16);
      *(_QWORD *)(v8 + 32) = v7;
      *(_OWORD *)(v8 + 16) = v9;
      swift_task_switch();
    }
    else
    {
      __break(1u);
    }
  }
}

Swift::Void __swiftcall CustomTransport.Activated.invalidate()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  if (v0[4])
  {
    v1 = *v0;
    v2 = v0[2];
    v4 = (id)v0[5];
    v3 = v0[7];
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542A8310);
    sub_2365B01D0();
    swift_getTupleTypeMetadata2();
    sub_2365B0260();
    sub_2365B0254();
    if (v3)
    {
      swift_retain();
      sub_2365B02B4();
      swift_release_n();
    }
    sub_236450690(v1);
    sub_236450690(v2);
    swift_release();

  }
  else
  {
    __break(1u);
  }
}

void *sub_2364D0D68()
{
  void *v0;
  id v1;

  v0 = (void *)sub_2364D164C();
  v1 = v0;
  return v0;
}

uint64_t sub_2364D0D90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *(_QWORD *)v8 = v4;
  *(_QWORD *)(v8 + 8) = sub_23647E274;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v9 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 40) = v9;
  *(_BYTE *)(v8 + 56) = *(_BYTE *)(v3 + 48);
  return swift_task_switch();
}

void sub_2364D0E10()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  id v3;

  v1 = v0[2];
  v2 = (void *)v0[5];
  sub_23645063C(*v0);
  sub_23645063C(v1);
  swift_retain();
  swift_retain();
  v3 = v2;
  CustomTransport.Activated.invalidate()();
}

uint64_t sub_2364D0E9C(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_2364725C8;
  return v6(a1);
}

uint64_t sub_2364D0F00(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_2364D23B4;
  return v6(a1);
}

unint64_t sub_2364D0F64(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_2365B0500();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_2365B09E0();
        sub_2365B09F8();
        result = sub_2365B0A34();
        v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 < v8)
            goto LABEL_5;
        }
        else if (v9 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v9)
        {
LABEL_11:
          v10 = *(_QWORD *)(a2 + 48);
          v11 = (_BYTE *)(v10 + v3);
          v12 = (_BYTE *)(v10 + v6);
          if (v3 != v6 || v11 >= v12 + 1)
            *v11 = *v12;
          v13 = *(_QWORD *)(a2 + 56);
          v14 = (_QWORD *)(v13 + 8 * v3);
          v15 = (_QWORD *)(v13 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v14 >= v15 + 1))
          {
            *v14 = *v15;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v17 = *v16;
    v18 = (-1 << v3) - 1;
  }
  else
  {
    v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    v18 = *v16;
    v17 = (-1 << result) - 1;
  }
  *v16 = v18 & v17;
  v19 = *(_QWORD *)(a2 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void *sub_2364D111C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  _OWORD v29[2];
  uint64_t v30;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5038);
  v2 = *v0;
  v3 = sub_2365B06A4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v28 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 40 * v15;
    sub_23646C3E8(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v29);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    v22 = *(_QWORD *)(v4 + 56) + v20;
    v23 = v30;
    v24 = v29[1];
    *(_OWORD *)v22 = v29[0];
    *(_OWORD *)(v22 + 16) = v24;
    *(_QWORD *)(v22 + 32) = v23;
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v28;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_2364D1310()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4FF8);
  v2 = *v0;
  v3 = sub_2365B06A4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2364D14C0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5018);
  v2 = *v0;
  v3 = sub_2365B06A4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_2364D164C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t sub_2364D1654()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2364D1678(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23647E274;
  return sub_2364D0158(a1, a2, v6);
}

uint64_t sub_2364D16E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for V1Command(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2364D1728(uint64_t a1)
{
  uint64_t v1;

  return sub_2364CFBEC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_2364D1730()
{
  JUMPOUT(0x23B7F5164);
}

uint64_t sub_2364D1740(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AnyTransportBuilder<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_2364D176C()
{
  JUMPOUT(0x23B7F5164);
}

uint64_t sub_2364D177C(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7F5164](&protocol conformance descriptor for CustomTransport<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of Transport.messageSessionTemplate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Transport.send(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 32) + *(_QWORD *)(a4 + 32));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_23647E274;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of Transport.invalidate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of TransportBuilding.onReceive(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of TransportBuilding.onInvalidation(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t sub_2364D1854(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *sub_2364D188C(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  return a1;
}

uint64_t sub_2364D18B0(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t type metadata accessor for AnyTransport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyTransport);
}

uint64_t sub_2364D18FC(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_2364D1944(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for AnyTransportBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyTransportBuilder);
}

uint64_t sub_2364D1998(_QWORD *a1)
{
  if (*a1)
    swift_release();
  if (a1[2])
    swift_release();
  return swift_release();
}

_QWORD *sub_2364D19D8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*a2)
  {
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v5 = a2[2];
  if (v5)
  {
    v6 = a2[3];
    a1[2] = v5;
    a1[3] = v6;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  }
  a1[4] = a2[4];
  swift_retain();
  return a1;
}

_QWORD *sub_2364D1A50(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *a1 = v4;
      a1[1] = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[1];
    *a1 = v4;
    a1[1] = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v7 = a2[2];
  if (!a1[2])
  {
    if (v7)
    {
      v9 = a2[3];
      a1[2] = v7;
      a1[3] = v9;
      swift_retain();
      goto LABEL_15;
    }
LABEL_14:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    goto LABEL_15;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  v8 = a2[3];
  a1[2] = v7;
  a1[3] = v8;
  swift_retain();
  swift_release();
LABEL_15:
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *sub_2364D1B3C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *a1 = v4;
      a1[1] = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[1];
    *a1 = v4;
    a1[1] = v6;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v7 = a2[2];
  if (!a1[2])
  {
    if (v7)
    {
      v9 = a2[3];
      a1[2] = v7;
      a1[3] = v9;
      goto LABEL_15;
    }
LABEL_14:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    goto LABEL_15;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  v8 = a2[3];
  a1[2] = v7;
  a1[3] = v8;
  swift_release();
LABEL_15:
  a1[4] = a2[4];
  swift_release();
  return a1;
}

uint64_t type metadata accessor for CustomTransport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CustomTransport);
}

uint64_t sub_2364D1C14()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542A8310);
  sub_2365B01D0();
  swift_getTupleTypeMetadata2();
  result = sub_2365B0290();
  if (v1 <= 0x3F)
  {
    result = sub_2365B0260();
    if (v2 <= 0x3F)
    {
      result = swift_initClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for CustomTransport.Interface(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CustomTransport.Interface);
}

uint64_t method lookup function for CustomTransport.Interface()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CustomTransport.Interface.__allocating_init(receiver:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of CustomTransport.Interface.receiveIncoming(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 152) + *(_QWORD *)(*(_QWORD *)v2 + 152));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_23647E274;
  return v8(a1, a2);
}

uint64_t dispatch thunk of CustomTransport.Interface.receiveOutgoing(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 160) + *(_QWORD *)(*(_QWORD *)v2 + 160));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_23647E274;
  return v8(a1, a2);
}

uint64_t sub_2364D1DFC(uint64_t a1)
{
  if (*(_QWORD *)a1)
    swift_release();
  if (*(_QWORD *)(a1 + 16))
    swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_2364D1E4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  v7 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  v8 = v7;
  swift_retain();
  return a1;
}

uint64_t sub_2364D1EE8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;

  v4 = *a2;
  if (*(_QWORD *)a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[1];
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v7 = a2[2];
  if (!*(_QWORD *)(a1 + 16))
  {
    if (v7)
    {
      v9 = a2[3];
      *(_QWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 24) = v9;
      swift_retain();
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    goto LABEL_15;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  v8 = a2[3];
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  swift_retain();
  swift_release();
LABEL_15:
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_retain();
  swift_release();
  v10 = *(void **)(a1 + 40);
  v11 = (void *)a2[5];
  *(_QWORD *)(a1 + 40) = v11;
  v12 = v11;

  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_QWORD *)(a1 + 56) = a2[7];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_2364D201C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v4 = *a2;
  if (*(_QWORD *)a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[1];
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v6;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v7 = a2[2];
  if (!*(_QWORD *)(a1 + 16))
  {
    if (v7)
    {
      v9 = a2[3];
      *(_QWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 24) = v9;
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    goto LABEL_15;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  v8 = a2[3];
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  swift_release();
LABEL_15:
  swift_release();
  v10 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);

  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_QWORD *)(a1 + 56) = a2[7];
  swift_release();
  return a1;
}

uint64_t sub_2364D2108(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 64))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_2364D2164(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t type metadata accessor for CustomTransport.Activated(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CustomTransport.Activated);
}

uint64_t sub_2364D21D4(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t sub_2364D2224(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_2364D2278(uint64_t a1)
{
  uint64_t v1;

  return sub_2364CF93C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_2364D2280(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for V1Command(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2364D22C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_2563E8930 + dword_2563E8930))(a1, v4);
}

uint64_t sub_2364D2334(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v6 = v1[4];
  v5 = v1[5];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_236477420;
  return sub_2364CF060(a1, v6, v5, v4);
}

_UNKNOWN **sub_2364D23C4()
{
  return &off_2563E8968;
}

uint64_t sub_2364D23D0(char *a1, char *a2)
{
  return sub_23656F29C(*a1, *a2);
}

uint64_t sub_2364D23DC()
{
  sub_2365B09E0();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  return sub_2365B0A34();
}

uint64_t sub_2364D246C()
{
  sub_2365B008C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2364D24D8()
{
  sub_2365B09E0();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  return sub_2365B0A34();
}

uint64_t sub_2364D2564@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2365B06E0();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_2364D25C0(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0x4F64696C61766E69;
  if (*v1)
    v2 = 0xD000000000000014;
  v3 = 0x80000002365CB1C0;
  if (!*v1)
    v3 = 0xEE00736E6F697470;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_2364D2610(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD v15[4];
  _OWORD v16[2];
  _BYTE v17[24];
  uint64_t v18;
  __int128 v19;
  __int128 v20;

  *(_QWORD *)&v16[0] = sub_2365B005C();
  *((_QWORD *)&v16[0] + 1) = v2;
  swift_bridgeObjectRetain();
  sub_2365B0548();
  if (*(_QWORD *)(a1 + 16) && (v3 = sub_2364685F8((uint64_t)v17), (v4 & 1) != 0))
  {
    sub_23646A9F4(*(_QWORD *)(a1 + 56) + 32 * v3, (uint64_t)&v19);
  }
  else
  {
    v19 = 0u;
    v20 = 0u;
  }
  sub_23646A464((uint64_t)v17);
  v15[0] = sub_2365B005C();
  v15[1] = v5;
  sub_2365B0548();
  if (*(_QWORD *)(a1 + 16) && (v6 = sub_2364685F8((uint64_t)v17), (v7 & 1) != 0))
    sub_23646A9F4(*(_QWORD *)(a1 + 56) + 32 * v6, (uint64_t)v16);
  else
    memset(v16, 0, sizeof(v16));
  swift_bridgeObjectRelease();
  sub_23646A464((uint64_t)v17);
  v8 = *((_QWORD *)&v20 + 1);
  sub_2364D27F4((uint64_t)v16, (uint64_t)v17);
  v9 = v8 | v18;
  sub_2364D283C((uint64_t)v17);
  if (!v9)
  {
    swift_bridgeObjectRelease();
    v10 = 1;
LABEL_14:
    sub_2364D287C();
    swift_allocError();
    *v13 = v10;
    swift_willThrow();
    goto LABEL_15;
  }
  v11 = *((_QWORD *)&v20 + 1);
  sub_2364D27F4((uint64_t)v16, (uint64_t)v15);
  v12 = v15[3];
  sub_2364D283C((uint64_t)v15);
  if (v11 && v12)
  {
    swift_bridgeObjectRelease();
    v10 = 0;
    goto LABEL_14;
  }
LABEL_15:
  sub_2364D283C((uint64_t)v16);
  sub_2364D283C((uint64_t)&v19);
  return a1;
}

uint64_t sub_2364D27C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;

  result = sub_2364D2610(*v1);
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t sub_2364D27F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542A8320);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2364D283C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542A8320);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_2364D287C()
{
  unint64_t result;

  result = qword_2563E8980;
  if (!qword_2563E8980)
  {
    result = MEMORY[0x23B7F5164](&unk_2365BC2BC, &type metadata for IDSMessageOptionsError);
    atomic_store(result, (unint64_t *)&qword_2563E8980);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for IDSMessageOptionsError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2364D290C + 4 * byte_2365BC1A5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2364D2940 + 4 * byte_2365BC1A0[v4]))();
}

uint64_t sub_2364D2940(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364D2948(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2364D2950);
  return result;
}

uint64_t sub_2364D295C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2364D2964);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2364D2968(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2364D2970(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDSMessageOptionsError()
{
  return &type metadata for IDSMessageOptionsError;
}

ValueMetadata *type metadata accessor for IDSMessageOptions()
{
  return &type metadata for IDSMessageOptions;
}

ValueMetadata *type metadata accessor for IDSMessageOptions.Builder()
{
  return &type metadata for IDSMessageOptions.Builder;
}

unint64_t sub_2364D29B0()
{
  unint64_t result;

  result = qword_2563E8988;
  if (!qword_2563E8988)
  {
    result = MEMORY[0x23B7F5164](&unk_2365BC294, &type metadata for IDSMessageOptionsError);
    atomic_store(result, (unint64_t *)&qword_2563E8988);
  }
  return result;
}

uint64_t AISSetupContext.into(relaxed:)(int a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  int v16;
  __objc2_ivar *v17;
  __objc2_ivar *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  id v45;
  unsigned int v46;
  unsigned int v47;
  id v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  id v55;
  void *v56;
  id v57;
  NSObject *v58;
  os_log_type_t v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  id v64;
  id v65;
  id v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  _QWORD *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t inited;
  void *v84;
  id v85;
  void *v86;
  uint64_t v87;
  void *v88;
  void *v89;
  id v90;
  id v91;
  void *v92;
  NSObject *v93;
  NSObject *v94;
  os_log_type_t v95;
  uint8_t *v96;
  uint64_t v97;
  char *v98;
  NSObject *v99;
  os_log_type_t v100;
  uint8_t *v101;
  id v102;
  void *v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  void *v109;
  uint64_t v110;
  id v111;
  void *v112;
  uint64_t v113;
  void *v114;
  void *v115;
  id v116;
  void *v117;
  uint64_t v118;
  id v119;
  void *v120;
  uint64_t v121;
  unsigned int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  NSObject *v127;
  uint64_t v128;
  void (*v129)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v130;
  NSObject *v131;
  unsigned __int8 v132;
  uint64_t v133;
  int *v134;
  _OWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  id v141;
  uint64_t v142;
  id v143;
  uint64_t v144;
  id v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  char v150;
  BOOL v151;
  uint64_t v152;
  uint64_t v153;
  int *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  id v163;
  NSObject *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  id v168;
  uint64_t v169;
  _BOOL8 v171;
  unsigned int v172;
  id v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  id v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  _BOOL4 v188;
  NSObject *v189;
  id v190;
  char *v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  _QWORD *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  __int16 v204;
  uint64_t v205[2];
  unint64_t v206;
  unsigned int v207;
  unsigned __int16 v208;
  uint64_t v209;

  v209 = *MEMORY[0x24BDAC8D0];
  v196 = type metadata accessor for SetupModel.ModelData(0);
  MEMORY[0x24BDAC7A8](v196);
  v193 = (char *)&v171 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v195 = type metadata accessor for SignInModel();
  MEMORY[0x24BDAC7A8](v195);
  v197 = (char *)&v171 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E45E0);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v199 = (char *)&v171 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v191 = (char *)&v171 - v8;
  v192 = type metadata accessor for AuthenticationModel();
  v9 = MEMORY[0x24BDAC7A8](v192);
  v194 = (char *)&v171 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v200 = (uint64_t)&v171 - v11;
  if (qword_2563E42D0 != -1)
    swift_once();
  v12 = sub_2365AFC00();
  v13 = __swift_project_value_buffer(v12, (uint64_t)qword_2563E60D8);
  v14 = v1;
  v201 = v13;
  v15 = sub_2365AFBE8();
  v16 = sub_2365B0380();
  v17 = &stru_2507E4000;
  v18 = &stru_2507E4000;
  if (os_log_type_enabled(v15, (os_log_type_t)v16))
  {
    v188 = v16;
    v189 = v15;
    v19 = swift_slowAlloc();
    v198 = (_QWORD *)swift_slowAlloc();
    v187 = swift_slowAlloc();
    v205[0] = v187;
    *(_DWORD *)v19 = 67112962;
    LODWORD(v190) = a1;
    LODWORD(v202) = a1 & 1;
    v186 = (char *)&v202 + 4;
    sub_2365B04A0();
    *(_WORD *)(v19 + 8) = 2080;
    v20 = objc_msgSend(v14, sel_requiredServiceTypes);
    type metadata accessor for AIDAServiceType(0);
    sub_2364D6150();
    sub_2365B0320();

    v21 = sub_2365B032C();
    v23 = v22;
    swift_bridgeObjectRelease();
    v202 = sub_236468D88(v21, v23, v205);
    sub_2365B04A0();

    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 18) = 2080;
    v24 = objc_msgSend(v14, (SEL)&stru_2507E4060.size + 2);
    sub_2365B0320();

    v25 = sub_2365B032C();
    v27 = v26;
    swift_bridgeObjectRelease();
    v202 = sub_236468D88(v25, v27, v205);
    sub_2365B04A0();

    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 28) = 1024;
    LODWORD(v25) = objc_msgSend(v14, sel_shouldBackgroundDesiredServices);

    LODWORD(v202) = v25;
    sub_2365B04A0();

    *(_WORD *)(v19 + 34) = 2112;
    v28 = objc_msgSend(v14, sel_messageSessionTemplate);
    v29 = v28;
    if (v28)
      v202 = (uint64_t)v28;
    else
      v202 = 0;
    sub_2365B04A0();
    *v198 = v29;

    *(_WORD *)(v19 + 44) = 2112;
    v30 = objc_msgSend(v14, sel_bleDevice);
    v31 = v30;
    if (v30)
      v202 = (uint64_t)v30;
    else
      v202 = 0;
    sub_2365B04A0();
    v198[1] = v31;

    *(_WORD *)(v19 + 54) = 2048;
    v32 = objc_msgSend(v14, sel_localRole);

    v202 = (uint64_t)v32;
    sub_2365B04A0();

    *(_WORD *)(v19 + 64) = 2048;
    v33 = objc_msgSend(v14, sel_localRole);

    v202 = (uint64_t)v33;
    sub_2365B04A0();

    *(_WORD *)(v19 + 74) = 2080;
    v34 = objc_msgSend(v14, sel_fixedPIN);
    if (v34)
    {
      v35 = v34;
      v36 = sub_2365B005C();
      v38 = v37;

    }
    else
    {
      v38 = 0xE600000000000000;
      v36 = 0x296C6C756E28;
    }
    v202 = sub_236468D88(v36, v38, v205);
    sub_2365B04A0();

    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 84) = 2080;
    v39 = objc_msgSend(v14, sel_targetAuthTag);
    if (v39)
    {
      v40 = v39;
      v41 = sub_2365B005C();
      v43 = v42;

    }
    else
    {
      v43 = 0xE600000000000000;
      v41 = 0x296C6C756E28;
    }
    v202 = sub_236468D88(v41, v43, v205);
    sub_2365B04A0();

    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 94) = 1024;
    v44 = objc_msgSend(v14, sel_pinType);

    LODWORD(v202) = v44;
    sub_2365B04A0();

    *(_WORD *)(v19 + 100) = 2048;
    v45 = objc_msgSend(v14, sel_deviceUserKind);

    v202 = (uint64_t)v45;
    sub_2365B04A0();

    *(_WORD *)(v19 + 110) = 1024;
    v46 = objc_msgSend(v14, sel_shouldCreateDeviceUser);

    LODWORD(v202) = v46;
    sub_2365B04A0();

    *(_WORD *)(v19 + 116) = 1024;
    v47 = objc_msgSend(v14, (SEL)0x1F5C24525);

    LODWORD(v202) = v47;
    sub_2365B04A0();

    *(_WORD *)(v19 + 122) = 2080;
    v48 = objc_msgSend(v14, sel_candidateAccount);
    if (v48)
    {
      v49 = v48;
      v50 = objc_msgSend(v48, sel_altDSID);

      v17 = &stru_2507E4000;
      v18 = &stru_2507E4000;
      v51 = 0x296C6C756E28;
      if (v50)
      {
        v52 = sub_2365B005C();
        v54 = v53;

      }
      else
      {
        v54 = 0xE600000000000000;
        v52 = 0x296C6C756E28;
      }
    }
    else
    {
      v54 = 0xE600000000000000;
      v52 = 0x296C6C756E28;
      v17 = &stru_2507E4000;
      v18 = &stru_2507E4000;
      v51 = 0x296C6C756E28;
    }
    v202 = sub_236468D88(v52, v54, v205);
    sub_2365B04A0();

    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 132) = 2080;
    v55 = objc_msgSend(v14, sel_candidateAccount);
    if (v55)
    {
      v56 = v55;
      v57 = objc_msgSend(v55, sel_username);

      LOBYTE(a1) = (_BYTE)v190;
      v58 = v189;
      v59 = v188;
      if (v57)
      {
        v51 = sub_2365B005C();
        v61 = v60;

      }
      else
      {
        v61 = 0xE600000000000000;
      }
    }
    else
    {
      v61 = 0xE600000000000000;
      LOBYTE(a1) = (_BYTE)v190;
      v58 = v189;
      v59 = v188;
    }
    v202 = sub_236468D88(v51, v61, v205);
    sub_2365B04A0();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23644B000, v58, v59, "Converting objc setup context with properties (relaxed: %{BOOL}d): {\n  requiredServiceTypes:%s,\n  desiredServiceTypes:%s,\n  shouldBackgroundDesiredServices:%{BOOL}d,\n  messageSessionTemplate:%@,\n  bleDevice:%@,\n  localRole:%lu,\n  remoteRole:%lu,\n  fixedPIN:%s,\n  targetAuthTag:%s,\n  pinType:%d,\n  deviceUserKind:%lu,\n  shouldCreateDeviceUser:%{BOOL}d,\n  shouldSkipConfirmation:%{BOOL}d,\n  candidateAltDSID:%s,\n  candidateUserName:%s\n"
      "}",
      (uint8_t *)v19,
      0x8Eu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9960);
    v62 = v198;
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v62, -1, -1);
    v63 = v187;
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v63, -1, -1);
    MEMORY[0x23B7F5254](v19, -1, -1);

  }
  else
  {

  }
  v64 = objc_msgSend(v14, sel_remoteRole);
  v65 = objc_msgSend(v14, v18[111].name);
  AISSetupContextRemoteRole.into(with:)(v14, (uint64_t)objc_msgSend(v14, sel_remoteRole), (uint64_t)v205);
  if ((v206 & 0xFFFFFF00FFFF0000) == 0xFFFF00FFFF0000)
  {
    v66 = v14;
    v67 = sub_2365AFBE8();
    v68 = sub_2365B0398();
    if (os_log_type_enabled(v67, v68))
    {
      v69 = (uint8_t *)swift_slowAlloc();
      v70 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v69 = 138412290;
      v205[0] = (uint64_t)v66;
      v71 = v66;
      sub_2365B04A0();
      *v70 = v66;

      _os_log_impl(&dword_23644B000, v67, v68, "Failed to convert %@ into SetupContext, remote role is invalid", v69, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9960);
      swift_arrayDestroy();
      MEMORY[0x23B7F5254](v70, -1, -1);
      MEMORY[0x23B7F5254](v69, -1, -1);

    }
    else
    {

    }
    return 0;
  }
  v171 = (_BOOL8)v65;
  v187 = (uint64_t)v64;
  v188 = v65 != 0;
  v198 = (_QWORD *)v206;
  v190 = (id)v205[0];
  v189 = v205[1];
  v72 = v208;
  v73 = v207;
  if ((a1 & 1) != 0)
  {
    v74 = objc_msgSend(v14, sel_requiredServiceTypes);
    type metadata accessor for AIDAServiceType(0);
    sub_2364D6150();
    v75 = sub_2365B0320();

    v76 = *(_QWORD *)(v75 + 16);
    swift_bridgeObjectRelease();
    if (!v76)
    {
      v77 = objc_msgSend(v14, v17[113].type);
      v78 = sub_2365B0320();

      v79 = *(_QWORD *)(v78 + 16);
      swift_bridgeObjectRelease();
      if (!v79)
      {
        v80 = sub_2365AFBE8();
        v81 = sub_2365B03A4();
        if (os_log_type_enabled(v80, v81))
        {
          v82 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v82 = 0;
          _os_log_impl(&dword_23644B000, v80, v81, "Invalid AISSetupContext provided, no required/desired services specified. Defaulting for now (will be an error in the future).", v82, 2u);
          MEMORY[0x23B7F5254](v82, -1, -1);
        }

        __swift_instantiateConcreteTypeFromMangledName(&qword_2542A8308);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_2365B6A20;
        v84 = (void *)*MEMORY[0x24BE06080];
        *(_QWORD *)(inited + 32) = *MEMORY[0x24BE06080];
        v85 = v84;
        sub_2364D909C(inited);
        swift_setDeallocating();
        swift_arrayDestroy();
        v86 = (void *)sub_2365B0308();
        swift_bridgeObjectRelease();
        objc_msgSend(v14, sel_setRequiredServiceTypes_, v86);

        v87 = swift_initStackObject();
        *(_OWORD *)(v87 + 16) = xmmword_2365B48E0;
        v88 = (void *)*MEMORY[0x24BE060A0];
        *(_QWORD *)(v87 + 32) = *MEMORY[0x24BE060A0];
        v89 = (void *)*MEMORY[0x24BE06090];
        *(_QWORD *)(v87 + 40) = *MEMORY[0x24BE06090];
        v90 = v88;
        v91 = v89;
        sub_2364D909C(v87);
        swift_setDeallocating();
        swift_arrayDestroy();
        v92 = (void *)sub_2365B0308();
        swift_bridgeObjectRelease();
        objc_msgSend(v14, sel_setDesiredServiceTypes_, v92);

      }
    }
  }
  v93 = v14;
  v94 = sub_2365AFBE8();
  v95 = sub_2365B038C();
  if (os_log_type_enabled(v94, v95))
  {
    v96 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v96 = 67109120;
    LODWORD(v205[0]) = objc_msgSend(v93, (SEL)0x1F64A1238);
    sub_2365B04A0();

    _os_log_impl(&dword_23644B000, v94, v95, "supportsSplitAccounts: %{BOOL}d", v96, 8u);
    MEMORY[0x23B7F5254](v96, -1, -1);
  }
  else
  {

    v94 = v93;
  }
  v98 = (char *)(v73 | (v72 << 32));

  if (-[NSObject shouldCreateDeviceUser](v93, sel_shouldCreateDeviceUser)
    && !-[NSObject deviceUserKind](v93, sel_deviceUserKind))
  {
    v99 = sub_2365AFBE8();
    v100 = sub_2365B0380();
    if (os_log_type_enabled(v99, v100))
    {
      v101 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v101 = 0;
      _os_log_impl(&dword_23644B000, v99, v100, "When asked to create user and user kind is specified as none, we will default to auto.", v101, 2u);
      MEMORY[0x23B7F5254](v101, -1, -1);
    }

    -[NSObject setDeviceUserKind:](v93, sel_setDeviceUserKind_, 1);
  }
  v102 = -[NSObject candidateAccount](v93, sel_candidateAccount, v171);
  if (!v102)
    goto LABEL_57;
  v103 = v102;
  v104 = objc_msgSend(v102, sel_altDSID);

  if (!v104)
    goto LABEL_60;
  v105 = sub_2365B005C();
  v107 = v106;

  v108 = -[NSObject candidateAccount](v93, sel_candidateAccount);
  if (!v108)
  {
    swift_bridgeObjectRelease();
LABEL_57:
    v105 = 0;
    v107 = 0;
    v184 = 0;
    v183 = 0;
    goto LABEL_58;
  }
  v109 = v108;
  v104 = objc_msgSend(v108, sel_username);

  if (v104)
  {
    v184 = sub_2365B005C();
    v183 = v110;

    v111 = -[NSObject candidateAccount](v93, sel_candidateAccount);
    if (v111)
    {
      v112 = v111;
      v104 = objc_msgSend(v111, sel_formattedShortName);

      if (v104)
      {
        v113 = sub_2365B005C();
        v115 = v114;

        v104 = v115;
        goto LABEL_62;
      }
      goto LABEL_61;
    }
LABEL_58:
    v113 = 0;
    v104 = 0;
    goto LABEL_62;
  }
  swift_bridgeObjectRelease();
LABEL_60:
  v105 = 0;
  v107 = 0;
  v184 = 0;
  v183 = 0;
LABEL_61:
  v113 = 0;
LABEL_62:
  sub_236499054(v190, v189, (unint64_t)v198);
  v116 = -[NSObject fixedPIN](v93, sel_fixedPIN);
  if (v116)
  {
    v117 = v116;
    v180 = sub_2365B005C();
    v179 = v118;

  }
  else
  {
    v180 = 0;
    v179 = 0;
  }
  v119 = -[NSObject targetAuthTag](v93, sel_targetAuthTag);
  if (v119)
  {
    v120 = v119;
    v178 = sub_2365B005C();
    v177 = v121;

  }
  else
  {
    v178 = 0;
    v177 = 0;
  }
  v122 = -[NSObject pinType](v93, sel_pinType);
  v123 = 0;
  v124 = v122;
  v125 = 4;
  switch(v122)
  {
    case 1u:
      goto LABEL_74;
    case 2u:
      v125 = 6;
      goto LABEL_74;
    case 3u:
      v125 = 8;
LABEL_74:
      v123 = 1;
      v124 = v125;
      break;
    case 4u:
      break;
    case 5u:
      v124 = 0;
      v123 = 0;
      break;
    case 8u:
      v124 = 2;
      v123 = 2;
      break;
    default:
      v123 = 2;
      v124 = 1;
      break;
  }
  v175 = v124;
  v126 = -[NSObject shouldSkipConfirmation](v93, sel_shouldSkipConfirmation);
  v186 = v98;
  v201 = v107;
  v185 = v105;
  v182 = v113;
  v181 = v104;
  v176 = v123;
  v172 = v126;
  v127 = v93;
  if (v107)
  {
    swift_bridgeObjectRetain();
    v174 = v113;
    v173 = v104;
  }
  else
  {
    v174 = 0;
    v173 = 0;
  }
  v171 = !v171;
  v128 = type metadata accessor for IdMSAccount();
  v129 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v128 - 8) + 56);
  v130 = (uint64_t)v191;
  v129(v191, 1, 1, v128);
  v131 = v127;
  v132 = objc_msgSend(v127, (SEL)0x1F64A1238);
  v133 = (uint64_t)v194;
  v129(v194, 1, 1, v128);
  v134 = (int *)v192;
  v135 = (_OWORD *)(v133 + *(int *)(v192 + 20));
  v135[3] = 0u;
  v135[4] = 0u;
  v135[1] = 0u;
  v135[2] = 0u;
  *v135 = 0u;
  v136 = (_QWORD *)(v133 + v134[8]);
  *v136 = 0;
  v136[1] = 0;
  v137 = v134[9];
  *(_QWORD *)(v133 + v137) = MEMORY[0x24BEE4AF8];
  v138 = v134[10];
  *(_BYTE *)(v133 + v138) = 0;
  v139 = (_QWORD *)(v133 + v134[11]);
  *v139 = 0;
  v139[1] = 0;
  sub_23644F344(v130, v133);
  *(_BYTE *)(v133 + v134[6]) = 1;
  v140 = v133 + v134[7];
  *(_OWORD *)(v140 + 48) = 0u;
  *(_OWORD *)(v140 + 64) = 0u;
  *(_OWORD *)(v140 + 16) = 0u;
  *(_OWORD *)(v140 + 32) = 0u;
  *(_OWORD *)v140 = 0u;
  *(_BYTE *)(v140 + 80) = 8;
  swift_bridgeObjectRelease();
  *v136 = 0;
  v136[1] = 0;
  *(_BYTE *)(v133 + v138) = v132;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v133 + v137) = MEMORY[0x24BEE4AF8];
  sub_236499BE8(v133, v200);
  v129(v199, 1, 1, v128);
  v141 = -[NSObject requiredServiceTypes](v131, sel_requiredServiceTypes);
  type metadata accessor for AIDAServiceType(0);
  sub_2364D6150();
  v142 = sub_2365B0320();

  v143 = -[NSObject desiredServiceTypes](v131, sel_desiredServiceTypes);
  v144 = sub_2365B0320();

  LODWORD(v143) = -[NSObject shouldBackgroundDesiredServices](v131, sel_shouldBackgroundDesiredServices);
  v145 = -[NSObject deviceUserKind](v131, sel_deviceUserKind);
  v146 = -[NSObject shouldCreateDeviceUser](v131, sel_shouldCreateDeviceUser);
  LODWORD(v192) = (_DWORD)v143;
  v147 = v144;
  v148 = v142;
  v149 = 0;
  v194 = (char *)(v171 | 0x200);
  v150 = 3;
  switch((unint64_t)v145)
  {
    case 0uLL:
      goto LABEL_83;
    case 1uLL:
      v150 = 1;
      goto LABEL_82;
    case 2uLL:
      v149 = 1;
      goto LABEL_83;
    case 3uLL:
      v150 = 2;
LABEL_82:
      v149 = v146 ^ 1;
LABEL_83:
      v151 = ((v187 - 1) & 0xFFFFFFFFFFFFFFFDLL) != 0;
      v152 = v149;
      v153 = (uint64_t)v197;
      v129(v197, 1, 1, v128);
      v154 = (int *)v195;
      v155 = v153 + *(int *)(v195 + 20);
      *(_OWORD *)(v155 + 64) = 0u;
      *(_OWORD *)(v155 + 80) = 0u;
      *(_OWORD *)(v155 + 32) = 0u;
      *(_OWORD *)(v155 + 48) = 0u;
      *(_OWORD *)v155 = 0u;
      *(_OWORD *)(v155 + 16) = 0u;
      v156 = v153 + v154[10];
      *(_OWORD *)v156 = 0u;
      *(_OWORD *)(v156 + 16) = 0u;
      *(_QWORD *)(v153 + v154[11]) = 0;
      v157 = (_QWORD *)(v153 + v154[13]);
      *v157 = 0;
      v157[1] = 0;
      *(_BYTE *)(v153 + v154[14]) = 0;
      sub_23644F344((uint64_t)v199, v153);
      sub_236499C2C(*(_QWORD *)v155, *(_QWORD *)(v155 + 8), *(_QWORD *)(v155 + 16), *(_QWORD *)(v155 + 24), *(_QWORD *)(v155 + 32), *(_QWORD *)(v155 + 40), *(_QWORD *)(v155 + 48), *(_QWORD *)(v155 + 56), *(_QWORD *)(v155 + 64), *(_QWORD *)(v155 + 72), *(_QWORD *)(v155 + 80), *(_QWORD *)(v155 + 88));
      *(_OWORD *)(v155 + 64) = 0u;
      *(_OWORD *)(v155 + 80) = 0u;
      *(_OWORD *)(v155 + 32) = 0u;
      *(_OWORD *)(v155 + 48) = 0u;
      *(_OWORD *)v155 = 0u;
      *(_OWORD *)(v155 + 16) = 0u;
      *(_QWORD *)(v153 + v154[6]) = v148;
      *(_QWORD *)(v153 + v154[7]) = v147;
      *(_BYTE *)(v153 + v154[8]) = 0;
      *(_BYTE *)(v153 + v154[9]) = v192;
      v158 = v153 + v154[12];
      *(_QWORD *)v158 = v152;
      *(_QWORD *)(v158 + 8) = 0;
      *(_BYTE *)(v158 + 16) = v150;
      v159 = v153 + v154[15];
      *(_BYTE *)(v159 + 32) = 0;
      *(_OWORD *)v159 = 0u;
      *(_OWORD *)(v159 + 16) = 0u;
      sub_23648DD50(*(_QWORD *)v156, *(_QWORD *)(v156 + 8));
      type metadata accessor for SetupModel(0);
      *(_OWORD *)v156 = 0u;
      *(_OWORD *)(v156 + 16) = 0u;
      v97 = swift_allocObject();
      sub_2365AFA50();
      v160 = v196;
      v161 = (uint64_t)v193;
      v162 = v200;
      sub_23648DFF8(v200, (uint64_t)&v193[*(int *)(v196 + 32)], (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
      sub_23648DFF8(v153, v161 + *(int *)(v160 + 36), (uint64_t (*)(_QWORD))type metadata accessor for SignInModel);
      *(_BYTE *)v161 = v188;
      v163 = v190;
      v164 = v189;
      *(_QWORD *)(v161 + 8) = v190;
      *(_QWORD *)(v161 + 16) = v164;
      v165 = (unint64_t)v198;
      *(_QWORD *)(v161 + 24) = v198;
      LODWORD(v155) = (_DWORD)v186;
      *(_WORD *)(v161 + 36) = WORD2(v186);
      *(_DWORD *)(v161 + 32) = v155;
      *(_OWORD *)(v161 + 40) = 0u;
      *(_OWORD *)(v161 + 56) = 0u;
      *(_OWORD *)(v161 + 72) = 0u;
      *(_BYTE *)(v161 + 88) = -1;
      *(_BYTE *)(v161 + 96) = 0;
      *(_BYTE *)(v161 + 97) = v151;
      *(_DWORD *)(v161 + 98) = v202;
      *(_WORD *)(v161 + 102) = WORD2(v202);
      v166 = v177;
      *(_QWORD *)(v161 + 104) = v178;
      *(_QWORD *)(v161 + 112) = v166;
      v167 = v179;
      *(_QWORD *)(v161 + 120) = v180;
      *(_QWORD *)(v161 + 128) = v167;
      *(_QWORD *)(v161 + 136) = v175;
      *(_BYTE *)(v161 + 144) = v176;
      *(_BYTE *)(v161 + 145) = v172;
      *(_DWORD *)(v161 + 146) = v203;
      *(_WORD *)(v161 + 150) = v204;
      *(_QWORD *)(v161 + 152) = 0;
      *(_QWORD *)(v161 + 160) = 0;
      *(_QWORD *)(v161 + 168) = v194;
      *(_QWORD *)(v161 + 176) = 0;
      *(_QWORD *)(v161 + 184) = 0;
      *(_QWORD *)(v161 + 192) = 0;
      *(_OWORD *)(v161 + 200) = xmmword_2365B7D10;
      *(_BYTE *)(v161 + 216) = 0;
      *(_DWORD *)(v161 + 217) = v205[0];
      *(_DWORD *)(v161 + 220) = *(_DWORD *)((char *)v205 + 3);
      *(_OWORD *)(v161 + 224) = 0u;
      *(_OWORD *)(v161 + 240) = 0u;
      v168 = v173;
      *(_QWORD *)(v161 + 256) = v174;
      *(_QWORD *)(v161 + 264) = v168;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6AC8);
      v169 = swift_allocObject();
      *(_DWORD *)(v169 + ((*(unsigned int *)(*(_QWORD *)v169 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
      sub_23648DFF8(v161, v169 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v169 + 16), type metadata accessor for SetupModel.ModelData);
      sub_236465A18(v153, (uint64_t (*)(_QWORD))type metadata accessor for SignInModel);
      sub_236465A18(v162, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
      sub_236465A18(v161, type metadata accessor for SetupModel.ModelData);
      sub_2364D6198(v163, v164, v165);
      *(_QWORD *)(v97 + 16) = v169;
      sub_23644F52C(v185, v201);
      break;
    default:
      sub_2365B068C();
      __break(1u);
      JUMPOUT(0x2364D43C0);
  }
  return v97;
}

uint64_t SetupContext.Builder.MissingExpectedValue.description.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

double SetupContext.Builder.init()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  double result;

  v2 = MEMORY[0x24BEE4B08];
  *(_QWORD *)a1 = MEMORY[0x24BEE4B08];
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0xC000000000000000;
  *(_WORD *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 1;
  *(_WORD *)(a1 + 120) = 2;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 160) = &type metadata for AutomaticSetupModelExchange;
  *(_QWORD *)(a1 + 168) = &protocol witness table for AutomaticSetupModelExchange;
  v3 = (_QWORD *)swift_allocObject();
  v3[22] = 0;
  v3[23] = &unk_2563ED5A0;
  v3[24] = 0;
  v3[25] = &unk_2563ED5A8;
  v3[26] = 0;
  v3[27] = &unk_2563ED5B0;
  v3[28] = 0;
  v3[29] = &unk_2563ED5B8;
  v3[30] = 0;
  v3[31] = &unk_2563ED5C0;
  v3[32] = 0;
  v3[33] = &unk_2563ED5C8;
  v3[34] = 0;
  v3[35] = &unk_2563ED5D0;
  v3[36] = 0;
  v3[37] = &unk_2563ED5D8;
  v3[38] = 0;
  v3[39] = &unk_2563ED5E0;
  *(_QWORD *)(a1 + 136) = v3;
  v3[40] = 0;
  v3[41] = &unk_2563ED5E8;
  v3[2] = &unk_2563ED550;
  v3[3] = 0;
  v3[42] = 0;
  v3[43] = &unk_2563ED5F0;
  v3[4] = &unk_2563ED558;
  v3[5] = 0;
  v3[44] = 0;
  v3[45] = &unk_2563ED5F8;
  v3[6] = &unk_2563ED560;
  v3[7] = 0;
  v3[46] = 0;
  v3[47] = &unk_2563ED600;
  v3[8] = &unk_2563ED568;
  v3[9] = 0;
  v3[48] = 0;
  v3[49] = &unk_2563ED608;
  v3[10] = &unk_2563ED570;
  v3[11] = 0;
  v3[50] = 0;
  v3[51] = &unk_2563ED610;
  v3[12] = &unk_2563ED578;
  v3[13] = 0;
  v3[52] = 0;
  v3[53] = &unk_2563ED618;
  v3[14] = &unk_2563ED580;
  v3[15] = 0;
  v3[54] = 0;
  v3[55] = &unk_2563ED620;
  v3[16] = &unk_2563ED588;
  v3[17] = 0;
  v3[56] = 0;
  v3[57] = &unk_2563ED628;
  v3[18] = &unk_2563ED590;
  v3[19] = 0;
  v3[58] = 0;
  v3[59] = &unk_2563ED630;
  v3[20] = &unk_2563ED598;
  v3[21] = 0;
  v3[60] = 0;
  v3[61] = &unk_2563ED638;
  v3[62] = 0;
  v3[63] = &unk_2563ED640;
  v3[64] = 0;
  v3[65] = &unk_2563ED648;
  v3[66] = 0;
  v3[67] = &unk_2563ED650;
  v3[68] = 0;
  v3[69] = &unk_2563ED658;
  v3[70] = 0;
  v3[71] = &unk_2563ED660;
  v3[72] = 0;
  v3[73] = &unk_2563ED668;
  v3[74] = 0;
  v3[75] = &unk_2563ED670;
  v3[76] = 0;
  v3[77] = &unk_2563ED678;
  v3[78] = 0;
  *(_BYTE *)(a1 + 256) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  return result;
}

void *SetupContext.Builder.requireServices(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  const void *v2;
  uint64_t v5;

  v5 = swift_bridgeObjectRetain();
  sub_2364D46F4(v5);
  sub_2364D8B2C(a1);
  return memcpy(a2, v2, 0x101uLL);
}

void sub_2364D46F4(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  id v13;

  v2 = 0;
  v3 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v7)
      goto LABEL_23;
    v11 = *(_QWORD *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      v2 = v10 + 1;
      if (v10 + 1 >= v7)
        goto LABEL_23;
      v11 = *(_QWORD *)(v3 + 8 * v2);
      if (!v11)
      {
        v2 = v10 + 2;
        if (v10 + 2 >= v7)
          goto LABEL_23;
        v11 = *(_QWORD *)(v3 + 8 * v2);
        if (!v11)
        {
          v2 = v10 + 3;
          if (v10 + 3 >= v7)
            goto LABEL_23;
          v11 = *(_QWORD *)(v3 + 8 * v2);
          if (!v11)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    sub_2364D6474(&v13, *(id *)(*(_QWORD *)(a1 + 48) + 8 * v9));

  }
  v12 = v10 + 4;
  if (v12 >= v7)
  {
LABEL_23:
    swift_release();
    return;
  }
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
  {
    v2 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v2 >= v7)
      goto LABEL_23;
    v11 = *(_QWORD *)(v3 + 8 * v2);
    ++v12;
    if (v11)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

void *SetupContext.Builder.desireServices(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  const void *v2;
  uint64_t v5;

  v5 = swift_bridgeObjectRetain();
  sub_2364D46F4(v5);
  sub_2364D8B2C(a1);
  return memcpy(a2, v2, 0x101uLL);
}

void *SetupContext.Builder.requireService(_:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  const void *v2;
  id v5;

  sub_2364D6474(&v5, a1);

  return memcpy(a2, v2, 0x101uLL);
}

void *SetupContext.Builder.desireService(_:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  const void *v2;
  id v5;

  sub_2364D6474(&v5, a1);

  return memcpy(a2, v2, 0x101uLL);
}

void *SetupContext.Builder.backgroundDesiredServices(_:)@<X0>(char a1@<W0>, void *a2@<X8>)
{
  _BYTE *v2;

  v2[16] = a1;
  return memcpy(a2, v2, 0x101uLL);
}

void *SetupContext.Builder.candidateAccountID(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = a1[1];
  v4 = a1[3];
  v14 = a1[2];
  v15 = *a1;
  v5 = a1[5];
  v6 = a1[7];
  v12 = a1[6];
  v13 = a1[4];
  v7 = a1[9];
  v8 = v2[23];
  v10 = v2[22];
  v11 = a1[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23644F52C(v10, v8);
  v2[22] = v15;
  v2[23] = v3;
  v2[24] = v14;
  v2[25] = v4;
  v2[26] = v13;
  v2[27] = v5;
  v2[28] = v12;
  v2[29] = v6;
  v2[30] = v11;
  v2[31] = v7;
  return memcpy(a2, v2, 0x101uLL);
}

void *SetupContext.Builder.enableManualSetup()@<X0>(void *a1@<X8>)
{
  _BYTE *v1;

  v1[41] = 0;
  return memcpy(a1, v1, 0x101uLL);
}

void *SetupContext.Builder.restrictManualSetup()@<X0>(void *a1@<X8>)
{
  _BYTE *v1;

  v1[41] = 1;
  return memcpy(a1, v1, 0x101uLL);
}

void *SetupContext.Builder.enableProximitySetup()@<X0>(void *a1@<X8>)
{
  uint64_t v1;

  sub_2364984F8(*(void **)(v1 + 48), *(id *)(v1 + 56), *(_QWORD *)(v1 + 64));
  *(_OWORD *)(v1 + 48) = xmmword_2365B48C0;
  *(_QWORD *)(v1 + 64) = 0xC000000000000000;
  *(_WORD *)(v1 + 76) = 0;
  *(_DWORD *)(v1 + 72) = 0;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 96) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  *(_QWORD *)(v1 + 112) = 1;
  *(_BYTE *)(v1 + 120) = 2;
  return memcpy(a1, (const void *)v1, 0x101uLL);
}

void *SetupContext.Builder._enableProximitySetup(withTargetAuthTag:withCodeType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  char v9;

  v8 = *a3;
  v9 = *((_BYTE *)a3 + 8);
  sub_2364984F8(*(void **)(v4 + 48), *(id *)(v4 + 56), *(_QWORD *)(v4 + 64));
  *(_OWORD *)(v4 + 48) = xmmword_2365B48C0;
  *(_QWORD *)(v4 + 64) = 0xC000000000000000;
  *(_WORD *)(v4 + 76) = 0;
  *(_DWORD *)(v4 + 72) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 96) = a1;
  *(_QWORD *)(v4 + 104) = a2;
  *(_QWORD *)(v4 + 112) = v8;
  *(_BYTE *)(v4 + 120) = v9;
  return memcpy(a4, (const void *)v4, 0x101uLL);
}

void *SetupContext.Builder.preEstablishedServer(with:shouldSkipConfirmation:)@<X0>(void *a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  return sub_2364D4BF8(a1, a2, a3, (__n128)xmmword_2365BC310);
}

void *SetupContext.Builder.preEstablishedClient(with:shouldSkipConfirmation:)@<X0>(void *a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  return sub_2364D4BF8(a1, a2, a3, (__n128)xmmword_2365BC320);
}

void *sub_2364D4BF8@<X0>(void *a1@<X0>, char a2@<W1>, void *a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v4;
  void *v8;
  void *v9;
  unint64_t v10;
  id v11;

  v8 = *(void **)(v4 + 48);
  v9 = *(void **)(v4 + 56);
  v10 = *(_QWORD *)(v4 + 64);
  v11 = a1;
  sub_2364984F8(v8, v9, v10);
  *(_QWORD *)(v4 + 48) = a1;
  *(__n128 *)(v4 + 56) = a4;
  *(_WORD *)(v4 + 76) = 0;
  *(_DWORD *)(v4 + 72) = 0;
  *(_BYTE *)(v4 + 121) = a2;
  return memcpy(a3, (const void *)v4, 0x101uLL);
}

void *SetupContext.Builder.restrictProximitySetup()@<X0>(void *a1@<X8>)
{
  uint64_t v1;

  sub_2364984F8(*(void **)(v1 + 48), *(id *)(v1 + 56), *(_QWORD *)(v1 + 64));
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 64) = 0xC000000000000000;
  *(_WORD *)(v1 + 76) = 0;
  *(_DWORD *)(v1 + 72) = 0;
  return memcpy(a1, (const void *)v1, 0x101uLL);
}

void *SetupContext.Builder.shouldSkipConfirmation(_:)@<X0>(char a1@<W0>, void *a2@<X8>)
{
  _BYTE *v2;

  v2[121] = a1;
  return memcpy(a2, v2, 0x101uLL);
}

void *SetupContext.Builder.supportsSplitAccounts(_:)@<X0>(char a1@<W0>, void *a2@<X8>)
{
  _BYTE *v2;

  v2[256] = a1;
  return memcpy(a2, v2, 0x101uLL);
}

void *SetupContext.Builder._userKind(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(v2 + 32);
  v8 = *(_BYTE *)(a1 + 16);
  v9 = *(_BYTE *)(v2 + 40);
  sub_2364D941C(*(_QWORD *)a1, v5, v8);
  sub_236498C2C(v6, v7, v9);
  *(_QWORD *)(v2 + 24) = v4;
  *(_QWORD *)(v2 + 32) = v5;
  *(_BYTE *)(v2 + 40) = v8;
  return memcpy(a2, (const void *)v2, 0x101uLL);
}

void *SetupContext.Builder._fixedPin(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  _QWORD *v3;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v3[10] = a1;
  v3[11] = a2;
  return memcpy(a3, v3, 0x101uLL);
}

void *SetupContext.Builder._proximitySetupClient(for:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  unint64_t v10;
  _QWORD *v11;
  int v13;

  v3 = v2;
  v5 = *a1;
  v4 = a1[1];
  v13 = *((_DWORD *)a1 + 6);
  v6 = *((unsigned __int16 *)a1 + 8) | ((unint64_t)*((unsigned __int8 *)a1 + 20) << 32);
  v7 = ((unint64_t)*((unsigned __int8 *)a1 + 29) << 40) | ((unint64_t)*((unsigned __int8 *)a1 + 28) << 32);
  v8 = (void *)v2[6];
  v9 = (void *)v2[7];
  v10 = v2[8];
  v11 = v2 + 9;
  swift_bridgeObjectRetain();
  sub_2364984F8(v8, v9, v10);
  v3[6] = v5;
  v3[7] = v4;
  v3[8] = v6;
  *((_WORD *)v11 + 2) = WORD2(v7);
  *(_DWORD *)v11 = v13;
  return memcpy(a2, v3, 0x101uLL);
}

