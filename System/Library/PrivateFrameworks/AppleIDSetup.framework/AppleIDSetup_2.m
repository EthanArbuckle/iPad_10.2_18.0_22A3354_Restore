void static NSXPCListenerEndpoint.intermediateUnarchive(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  id v5;

  v4 = (void *)sub_2365B0038();
  v5 = objc_msgSend(a1, sel_decodeIntegerForKey_, v4);

  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = 0;
}

uint64_t sub_23655E418(void *a1, _QWORD *a2)
{
  return sub_23655DB98(a1, a2);
}

void sub_23655E490(void *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  id v5;

  v4 = (void *)sub_2365B0038();
  v5 = objc_msgSend(a1, sel_decodeIntegerForKey_, v4);

  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = 0;
}

__int128 *sub_23655E4FC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, __int128 **a3@<X8>)
{
  uint64_t v3;
  __int128 *result;

  result = static NSXPCListenerEndpoint.developedUnarchive(from:backing:)(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

unint64_t sub_23655E524()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2563EBE08;
  if (!qword_2563EBE08)
  {
    v1 = type metadata accessor for CodingUserInfoKeyNotFound();
    result = MEMORY[0x23B7F5164](&unk_2365CB044, v1);
    atomic_store(result, (unint64_t *)&qword_2563EBE08);
  }
  return result;
}

ValueMetadata *type metadata accessor for NSXPCListenerEndpoint.UnarchivalIntermediate()
{
  return &type metadata for NSXPCListenerEndpoint.UnarchivalIntermediate;
}

uint64_t AnisetteCommand.Request.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v4)(uint64_t);
  uint64_t result;
  char v6;
  __int128 v7;

  type metadata accessor for V1Command(0);
  if (swift_getEnumCaseMultiPayload())
  {
    v4 = type metadata accessor for V1Command;
LABEL_6:
    result = sub_236465A18(a1, v4);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0x3000000000000000;
    v6 = -1;
    goto LABEL_7;
  }
  type metadata accessor for V1Command.Request(0);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result != 2)
  {
    v4 = type metadata accessor for V1Command.Request;
    goto LABEL_6;
  }
  v6 = *(_BYTE *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v7;
LABEL_7:
  *(_BYTE *)(a2 + 32) = v6;
  return result;
}

uint64_t AnisetteCommand.Request.into()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v3;
  __int128 v4;

  v3 = *(_BYTE *)(v1 + 32);
  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v3;
  type metadata accessor for V1Command.Request(0);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for V1Command(0);
  return swift_storeEnumTagMultiPayload();
}

void AnisetteCommand.Request.hash(into:)()
{
  uint64_t v0;
  int v1;

  if (*(_BYTE *)(v0 + 32))
    v1 = 4;
  else
    v1 = 0;
  __asm { BR              X10 }
}

uint64_t sub_23655E6C4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;

  sub_2365B09F8();
  sub_236468CBC(v0, v1);
  sub_2365AF954();
  return sub_23653D530(v0, v1, v2, v3, v4);
}

uint64_t sub_23655E718()
{
  sub_2365B09F8();
  return sub_2365B0A04();
}

uint64_t sub_23655E7F8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23655E830 + 4 * byte_2365C5735[*v0]))(0x6F697369766F7270, 0xE90000000000006ELL);
}

uint64_t sub_23655E830()
{
  return 1668184435;
}

uint64_t sub_23655E840()
{
  return 0x6573617265;
}

uint64_t sub_23655E854()
{
  return 0x7461446863746566;
}

uint64_t sub_23655E870()
{
  return 0x614479636167656CLL;
}

unint64_t sub_23655E88C()
{
  return 0xD000000000000017;
}

uint64_t sub_23655E8A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_236564724(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23655E8CC()
{
  sub_23656248C();
  return sub_2365B0AD0();
}

uint64_t sub_23655E8F4()
{
  sub_23656248C();
  return sub_2365B0ADC();
}

uint64_t sub_23655E91C()
{
  sub_23656259C();
  return sub_2365B0AD0();
}

uint64_t sub_23655E944()
{
  sub_23656259C();
  return sub_2365B0ADC();
}

uint64_t sub_23655E96C()
{
  _BYTE *v0;

  if (*v0)
    return 0x79646F4270747468;
  else
    return 7107189;
}

uint64_t sub_23655E9A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2365645C0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23655E9C4()
{
  sub_2365624D0();
  return sub_2365B0AD0();
}

uint64_t sub_23655E9EC()
{
  sub_2365624D0();
  return sub_2365B0ADC();
}

unint64_t sub_23655EA14()
{
  return 0xD000000000000011;
}

uint64_t sub_23655EA30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2365646A0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23655EA58()
{
  sub_236562558();
  return sub_2365B0AD0();
}

uint64_t sub_23655EA80()
{
  sub_236562558();
  return sub_2365B0ADC();
}

uint64_t sub_23655EAA8()
{
  return 1684632420;
}

uint64_t sub_23655EAB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 1684632420 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_2365B08CC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23655EB3C()
{
  sub_236562514();
  return sub_2365B0AD0();
}

uint64_t sub_23655EB64()
{
  sub_236562514();
  return sub_2365B0ADC();
}

uint64_t sub_23655EB8C()
{
  sub_236562624();
  return sub_2365B0AD0();
}

uint64_t sub_23655EBB4()
{
  sub_236562624();
  return sub_2365B0ADC();
}

uint64_t sub_23655EBDC()
{
  return 0x617461446D6973;
}

uint64_t sub_23655EBF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x617461446D6973 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_2365B08CC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23655EC88()
{
  sub_2365625E0();
  return sub_2365B0AD0();
}

uint64_t sub_23655ECB0()
{
  sub_2365625E0();
  return sub_2365B0ADC();
}

void AnisetteCommand.Request.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  _QWORD v17[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EBE38);
  v17[13] = *(_QWORD *)(v3 - 8);
  v17[14] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v17[12] = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EBE40);
  v17[10] = *(_QWORD *)(v5 - 8);
  v17[11] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v17[9] = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EBE48);
  v17[7] = *(_QWORD *)(v7 - 8);
  v17[8] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v17[6] = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EBE50);
  v17[2] = *(_QWORD *)(v9 - 8);
  v17[3] = v9;
  MEMORY[0x24BDAC7A8](v9);
  v17[1] = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EBE58);
  v17[4] = *(_QWORD *)(v11 - 8);
  v17[5] = v11;
  MEMORY[0x24BDAC7A8](v11);
  v17[0] = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EBE60);
  MEMORY[0x24BDAC7A8](v17[0]);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EBE68);
  v17[17] = *(_QWORD *)(v12 - 8);
  v17[18] = v12;
  MEMORY[0x24BDAC7A8](v12);
  v17[20] = *(_QWORD *)v1;
  v13 = *(_QWORD *)(v1 + 8);
  v14 = *(_QWORD *)(v1 + 24);
  v17[15] = *(_QWORD *)(v1 + 16);
  v17[16] = v13;
  v15 = *(unsigned __int8 *)(v1 + 32);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23656248C();
  sub_2365B0AAC();
  if (v15)
    v16 = 4;
  else
    v16 = 0;
  __asm { BR              X10 }
}

uint64_t sub_23655EF3C()
{
  uint64_t v0;
  char v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v4 - 104) = 1;
  v5 = *(_QWORD *)(v4 - 112);
  v6 = *(_QWORD *)(v4 - 144);
  sub_236468CBC(v5, v6);
  sub_2365625E0();
  v7 = *(_QWORD *)(v4 - 128);
  sub_2365B07B8();
  *(_QWORD *)(v4 - 104) = v5;
  *(_QWORD *)(v4 - 96) = v6;
  sub_2364A5874();
  v8 = *(_QWORD *)(v4 - 232);
  sub_2365B0824();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 240) + 8))(v3, v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 136) + 8))(v0, v7);
  return sub_23653D530(v5, v6, *(_QWORD *)(v4 - 152), v2, v1);
}

uint64_t AnisetteCommand.Request.hashValue.getter()
{
  sub_2365B09E0();
  AnisetteCommand.Request.hash(into:)();
  return sub_2365B0A34();
}

uint64_t AnisetteCommand.Request.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD v23[4];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;

  v35 = a2;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EBEA8);
  v32 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v38 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EBEB0);
  v31 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v37 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EBEB8);
  v29 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v36 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EBEC0);
  v23[3] = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v33 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EBEC8);
  v25 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v34 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EBED0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EBED8);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v39 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  sub_23656248C();
  v17 = v40;
  sub_2365B0A7C();
  if (!v17)
  {
    v23[2] = v11;
    v23[1] = v9;
    v40 = v13;
    v18 = sub_2365B07A0();
    if (*(_QWORD *)(v18 + 16) == 1)
      __asm { BR              X10 }
    v19 = sub_2365B05B4();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E47A8);
    *v21 = &type metadata for AnisetteCommand.Request;
    sub_2365B0704();
    sub_2365B059C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v15, v12);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
}

uint64_t sub_23655FB88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v3;
  __int128 v4;

  v3 = *(_BYTE *)(v1 + 32);
  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v3;
  type metadata accessor for V1Command.Request(0);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for V1Command(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_23655FBE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v4)(uint64_t);
  uint64_t result;
  char v6;
  __int128 v7;

  type metadata accessor for V1Command(0);
  if (swift_getEnumCaseMultiPayload())
  {
    v4 = type metadata accessor for V1Command;
LABEL_6:
    result = sub_236465A18(a1, v4);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0x3000000000000000;
    v6 = -1;
    goto LABEL_7;
  }
  type metadata accessor for V1Command.Request(0);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result != 2)
  {
    v4 = type metadata accessor for V1Command.Request;
    goto LABEL_6;
  }
  v6 = *(_BYTE *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v7;
LABEL_7:
  *(_BYTE *)(a2 + 32) = v6;
  return result;
}

uint64_t sub_23655FC74@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AnisetteCommand.Request.init(from:)(a1, a2);
}

void sub_23655FC88(_QWORD *a1)
{
  AnisetteCommand.Request.encode(to:)(a1);
}

uint64_t sub_23655FCA0()
{
  sub_2365B09E0();
  AnisetteCommand.Request.hash(into:)();
  return sub_2365B0A34();
}

uint64_t sub_23655FCF4()
{
  sub_2365B09E0();
  AnisetteCommand.Request.hash(into:)();
  return sub_2365B0A34();
}

uint64_t AnisetteCommand.Response.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);

  type metadata accessor for V1Command(0);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v8 = type metadata accessor for V1Command;
LABEL_6:
    sub_236465A18(a1, v8);
    v4 = type metadata accessor for AnisetteCommand.Response();
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
    v6 = a2;
    v7 = 1;
    return v5(v6, v7, 1, v4);
  }
  type metadata accessor for V1Command.Response(0);
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    v8 = type metadata accessor for V1Command.Response;
    goto LABEL_6;
  }
  sub_2365626A4(a1, a2);
  v4 = type metadata accessor for AnisetteCommand.Response();
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
  v6 = a2;
  v7 = 0;
  return v5(v6, v7, 1, v4);
}

uint64_t AnisetteCommand.Response.into()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_2365626A4(v1, a1);
  type metadata accessor for V1Command.Response(0);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for V1Command(0);
  return swift_storeEnumTagMultiPayload();
}

void AnisetteCommand.Response.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD v8[4];

  v8[3] = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EB240);
  v8[1] = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EB238);
  v8[2] = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7050);
  MEMORY[0x24BDAC7A8](v4);
  v5 = type metadata accessor for AnisetteCommand.Response();
  MEMORY[0x24BDAC7A8](v5);
  sub_2365626E8(v1, (uint64_t)v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = (char *)sub_23655FFA8 + 4 * byte_2365C5746[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23655FFA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v2, v3, v0);
  sub_2365B09F8();
  sub_2364B1434(&qword_2563E7338, (uint64_t (*)(void))sub_23649071C, MEMORY[0x24BEE1338], MEMORY[0x24BDFC460]);
  sub_2365AFFD8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_23656014C()
{
  sub_23656282C();
  return sub_2365B0AD0();
}

uint64_t sub_236560174()
{
  sub_23656282C();
  return sub_2365B0ADC();
}

uint64_t sub_23656019C()
{
  sub_2365629C0();
  return sub_2365B0AD0();
}

uint64_t sub_2365601C4()
{
  sub_2365629C0();
  return sub_2365B0ADC();
}

uint64_t sub_2365601EC()
{
  sub_236562870();
  return sub_2365B0AD0();
}

uint64_t sub_236560214()
{
  sub_236562870();
  return sub_2365B0ADC();
}

uint64_t sub_23656023C()
{
  sub_23656297C();
  return sub_2365B0AD0();
}

uint64_t sub_236560264()
{
  sub_23656297C();
  return sub_2365B0ADC();
}

uint64_t sub_23656028C()
{
  sub_236562938();
  return sub_2365B0AD0();
}

uint64_t sub_2365602B4()
{
  sub_236562938();
  return sub_2365B0ADC();
}

uint64_t sub_2365602DC()
{
  sub_236562A48();
  return sub_2365B0AD0();
}

uint64_t sub_236560304()
{
  sub_236562A48();
  return sub_2365B0ADC();
}

uint64_t sub_23656032C()
{
  sub_236562A04();
  return sub_2365B0AD0();
}

uint64_t sub_236560354()
{
  sub_236562A04();
  return sub_2365B0ADC();
}

void AnisetteCommand.Response.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  _QWORD v25[3];
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EBEF8);
  v45 = *(_QWORD *)(v2 - 8);
  v46 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v43 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EB240);
  v42 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v41 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EBF00);
  v39 = *(_QWORD *)(v5 - 8);
  v40 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v38 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EBF08);
  v36 = *(_QWORD *)(v7 - 8);
  v37 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v35 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EB238);
  v47 = *(_QWORD *)(v9 - 8);
  v48 = v9;
  v10 = MEMORY[0x24BDAC7A8](v9);
  v34 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v33 = (char *)v25 - v12;
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EBF10);
  v31 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v30 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EBF18);
  v28 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v27 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EBF20);
  v25[2] = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v25[1] = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7050);
  v49 = *(_QWORD *)(v16 - 8);
  v50 = v16;
  v17 = MEMORY[0x24BDAC7A8](v16);
  v18 = MEMORY[0x24BDAC7A8](v17);
  MEMORY[0x24BDAC7A8](v18);
  v19 = type metadata accessor for AnisetteCommand.Response();
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EBF28);
  v51 = *(_QWORD *)(v53 - 8);
  MEMORY[0x24BDAC7A8](v53);
  v23 = (char *)v25 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23656282C();
  v52 = v23;
  sub_2365B0AAC();
  sub_2365626E8(v54, (uint64_t)v21);
  v24 = (char *)sub_23656075C + 4 * byte_2365C574C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23656075C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(v2 - 144);
  v3 = *(_QWORD *)(v2 - 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v0, v1, v3);
  *(_BYTE *)(v2 - 70) = 0;
  sub_236562A48();
  v5 = *(_QWORD *)(v2 - 344);
  v7 = *(_QWORD *)(v2 - 120);
  v6 = *(_QWORD *)(v2 - 112);
  sub_2365B07B8();
  sub_2364B1434(&qword_2563E7048, (uint64_t (*)(void))sub_2364907E8, MEMORY[0x24BEE1330], MEMORY[0x24BDFC458]);
  v8 = *(_QWORD *)(v2 - 328);
  sub_2365B0824();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 336) + 8))(v5, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 128) + 8))(v7, v6);
}

uint64_t AnisetteCommand.Response.hashValue.getter()
{
  _BYTE v1[72];

  sub_2365B09E0();
  AnisetteCommand.Response.hash(into:)((uint64_t)v1);
  return sub_2365B0A34();
}

uint64_t AnisetteCommand.Response.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  _QWORD v39[7];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;

  v51 = a2;
  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EBF80);
  v50 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v55 = (char *)v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EBF88);
  v48 = *(_QWORD *)(v4 - 8);
  v49 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v58 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EBF90);
  v45 = *(_QWORD *)(v6 - 8);
  v46 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v54 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EBF98);
  v43 = *(_QWORD *)(v8 - 8);
  v44 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v53 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EBFA0);
  v42 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v52 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EBFA8);
  v39[6] = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v57 = (char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EBFB0);
  v56 = *(_QWORD *)(v61 - 8);
  MEMORY[0x24BDAC7A8](v61);
  v13 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for AnisetteCommand.Response();
  v14 = MEMORY[0x24BDAC7A8](v60);
  v39[4] = (char *)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v39[5] = (char *)v39 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)v39 - v19;
  v21 = MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)v39 - v22;
  v24 = MEMORY[0x24BDAC7A8](v21);
  v26 = (char *)v39 - v25;
  v27 = MEMORY[0x24BDAC7A8](v24);
  v29 = (char *)v39 - v28;
  MEMORY[0x24BDAC7A8](v27);
  v30 = a1[3];
  v62 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v30);
  sub_23656282C();
  v59 = v13;
  v31 = v63;
  sub_2365B0A7C();
  if (!v31)
  {
    v39[0] = v26;
    v39[1] = v23;
    v39[2] = v20;
    v39[3] = v29;
    v63 = 0;
    v32 = v61;
    v33 = v59;
    v34 = sub_2365B07A0();
    if (*(_QWORD *)(v34 + 16) == 1)
      __asm { BR              X10 }
    v35 = sub_2365B05B4();
    swift_allocError();
    v37 = v36;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E47A8);
    *v37 = v60;
    sub_2365B0704();
    sub_2365B059C();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v37, *MEMORY[0x24BEE26D0], v35);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v33, v32);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
}

uint64_t sub_236561760@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_2365626A4(v1, a1);
  type metadata accessor for V1Command.Response(0);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for V1Command(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_2365617B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t);

  type metadata accessor for V1Command(0);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v7 = type metadata accessor for V1Command;
LABEL_6:
    sub_236465A18(a1, v7);
    v6 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, v6, 1, a2);
  }
  type metadata accessor for V1Command.Response(0);
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    v7 = type metadata accessor for V1Command.Response;
    goto LABEL_6;
  }
  sub_2365626A4(a1, a3);
  v6 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, v6, 1, a2);
}

uint64_t sub_236561860@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AnisetteCommand.Response.init(from:)(a1, a2);
}

void sub_236561874(_QWORD *a1)
{
  AnisetteCommand.Response.encode(to:)(a1);
}

uint64_t sub_23656188C()
{
  _BYTE v1[72];

  sub_2365B09E0();
  AnisetteCommand.Response.hash(into:)((uint64_t)v1);
  return sub_2365B0A34();
}

uint64_t sub_2365618CC()
{
  _BYTE v1[72];

  sub_2365B09E0();
  AnisetteCommand.Response.hash(into:)((uint64_t)v1);
  return sub_2365B0A34();
}

void _s12AppleIDSetup15AnisetteCommandV7RequestO2eeoiySbAE_AEtFZ_0(uint64_t a1)
{
  int v1;

  if (*(_BYTE *)(a1 + 32))
    v1 = 4;
  else
    v1 = 0;
  __asm { BR              X10 }
}

uint64_t sub_236561968()
{
  int v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  char v13;

  if (v0)
    v10 = 4;
  else
    v10 = 0;
  if ((v1 >> 60) & 3 | v10)
  {
    sub_236468CBC(v9, v8);
    sub_23653FF70(v3, v4, v2, v1, v0);
    sub_23653D530(v9, v8, v7, v6, v5);
    sub_23653D530(v3, v4, v2, v1, v0);
    return 0;
  }
  else
  {
    sub_23653FF70(v3, v4, v2, v1, v0);
    sub_23653FF70(v9, v8, v7, v6, v5);
    sub_2364B7E28(v9, v8);
    v11 = v7;
    v13 = v12;
    sub_23653D530(v9, v8, v11, v6, v5);
    sub_23653D530(v3, v4, v2, v1, v0);
    return v13 & 1;
  }
}

void _s12AppleIDSetup15AnisetteCommandV8ResponseO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  _QWORD v24[12];
  uint64_t v25;
  uint64_t v26;

  v25 = a1;
  v26 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EB240);
  v24[6] = *(_QWORD *)(v2 - 8);
  v24[7] = v2;
  MEMORY[0x24BDAC7A8](v2);
  v24[5] = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EB238);
  v24[8] = *(_QWORD *)(v4 - 8);
  v24[9] = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v24[4] = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v24[3] = (char *)v24 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E7050);
  v24[10] = *(_QWORD *)(v8 - 8);
  v24[11] = v8;
  v9 = MEMORY[0x24BDAC7A8](v8);
  v24[2] = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v24[1] = (char *)v24 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v13 = type metadata accessor for AnisetteCommand.Response();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v18 = MEMORY[0x24BDAC7A8](v17);
  MEMORY[0x24BDAC7A8](v18);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC250);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)v24 + *(int *)(v20 + 48) - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2365626E8(v25, (uint64_t)v24 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2365626E8(v26, (uint64_t)v22);
  v23 = (char *)sub_236562050 + 4 * byte_2365C5763[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_236562050()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  sub_2365626E8(v0, v1);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 112) + 8))(v1, *(_QWORD *)(v4 - 104));
    sub_2365649A8(v0);
    v5 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(v4 - 112);
    v8 = *(_QWORD *)(v4 - 104);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v2, v3, v8);
    sub_236490650();
    sub_236490694();
    v5 = sub_2365AFB10();
    v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v9(v2, v8);
    v9(v1, v8);
    sub_236465A18(v0, (uint64_t (*)(_QWORD))type metadata accessor for AnisetteCommand.Response);
  }
  return v5 & 1;
}

unint64_t sub_23656248C()
{
  unint64_t result;

  result = qword_2563EBE70;
  if (!qword_2563EBE70)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C6854, &type metadata for AnisetteCommand.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EBE70);
  }
  return result;
}

unint64_t sub_2365624D0()
{
  unint64_t result;

  result = qword_2563EBE78;
  if (!qword_2563EBE78)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C6804, &type metadata for AnisetteCommand.Request.FetchAttestationHeadersCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EBE78);
  }
  return result;
}

unint64_t sub_236562514()
{
  unint64_t result;

  result = qword_2563EBE80;
  if (!qword_2563EBE80)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C67B4, &type metadata for AnisetteCommand.Request.LegacyDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EBE80);
  }
  return result;
}

unint64_t sub_236562558()
{
  unint64_t result;

  result = qword_2563EBE88;
  if (!qword_2563EBE88)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C6764, &type metadata for AnisetteCommand.Request.FetchDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EBE88);
  }
  return result;
}

unint64_t sub_23656259C()
{
  unint64_t result;

  result = qword_2563EBE90;
  if (!qword_2563EBE90)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C6714, &type metadata for AnisetteCommand.Request.EraseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EBE90);
  }
  return result;
}

unint64_t sub_2365625E0()
{
  unint64_t result;

  result = qword_2563EBE98;
  if (!qword_2563EBE98)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C66C4, &type metadata for AnisetteCommand.Request.SyncCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EBE98);
  }
  return result;
}

unint64_t sub_236562624()
{
  unint64_t result;

  result = qword_2563EBEA0;
  if (!qword_2563EBEA0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C6674, &type metadata for AnisetteCommand.Request.ProvisionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EBEA0);
  }
  return result;
}

uint64_t type metadata accessor for AnisetteCommand.Response()
{
  uint64_t result;

  result = qword_2542A7F88;
  if (!qword_2542A7F88)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_2365626A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AnisetteCommand.Response();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2365626E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AnisetteCommand.Response();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_23656272C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_2563EBEE0;
  if (!qword_2563EBEE0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2563EB240);
    v2[0] = sub_2365649E8(&qword_2563EBEE8, MEMORY[0x24BEE0D10], MEMORY[0x24BEE04C8]);
    v2[1] = sub_23649071C();
    result = MEMORY[0x23B7F5164](MEMORY[0x24BDFC460], v1, v2);
    atomic_store(result, (unint64_t *)&qword_2563EBEE0);
  }
  return result;
}

uint64_t sub_2365627B0(unint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2563EB238);
    v10[0] = a2();
    v10[1] = a3();
    result = MEMORY[0x23B7F5164](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23656282C()
{
  unint64_t result;

  result = qword_2563EBF30;
  if (!qword_2563EBF30)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C6624, &type metadata for AnisetteCommand.Response.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EBF30);
  }
  return result;
}

unint64_t sub_236562870()
{
  unint64_t result;

  result = qword_2563EBF38;
  if (!qword_2563EBF38)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C65D4, &type metadata for AnisetteCommand.Response.FetchAttestationHeadersCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EBF38);
  }
  return result;
}

unint64_t sub_2365628B4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_2563EBF40;
  if (!qword_2563EBF40)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2563EB240);
    v2[0] = sub_236562B10(&qword_2563EBF48, MEMORY[0x24BEE0D08], MEMORY[0x24BEE04C0]);
    v2[1] = sub_2364907E8();
    result = MEMORY[0x23B7F5164](MEMORY[0x24BDFC458], v1, v2);
    atomic_store(result, (unint64_t *)&qword_2563EBF40);
  }
  return result;
}

unint64_t sub_236562938()
{
  unint64_t result;

  result = qword_2563EBF50;
  if (!qword_2563EBF50)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C6584, &type metadata for AnisetteCommand.Response.LegacyDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EBF50);
  }
  return result;
}

unint64_t sub_23656297C()
{
  unint64_t result;

  result = qword_2563EBF60;
  if (!qword_2563EBF60)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C6534, &type metadata for AnisetteCommand.Response.FetchDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EBF60);
  }
  return result;
}

unint64_t sub_2365629C0()
{
  unint64_t result;

  result = qword_2563EBF68;
  if (!qword_2563EBF68)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C64E4, &type metadata for AnisetteCommand.Response.EraseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EBF68);
  }
  return result;
}

unint64_t sub_236562A04()
{
  unint64_t result;

  result = qword_2563EBF70;
  if (!qword_2563EBF70)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C6494, &type metadata for AnisetteCommand.Response.SyncCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EBF70);
  }
  return result;
}

unint64_t sub_236562A48()
{
  unint64_t result;

  result = qword_2563EBF78;
  if (!qword_2563EBF78)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C6444, &type metadata for AnisetteCommand.Response.ProvisionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EBF78);
  }
  return result;
}

unint64_t sub_236562A8C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_2563EBFB8;
  if (!qword_2563EBFB8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2563EB240);
    v2[0] = sub_236562B10(&qword_2563EBFC0, MEMORY[0x24BEE0D38], MEMORY[0x24BEE04E0]);
    v2[1] = sub_2364908EC();
    result = MEMORY[0x23B7F5164](MEMORY[0x24BDFC470], v1, v2);
    atomic_store(result, (unint64_t *)&qword_2563EBFB8);
  }
  return result;
}

uint64_t sub_236562B10(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542A82B8);
    v8[0] = a2;
    v8[1] = a2;
    result = MEMORY[0x23B7F5164](a3, v7, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_236562B74()
{
  unint64_t result;

  result = qword_2563EBFD0;
  if (!qword_2563EBFD0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AnisetteCommand, &type metadata for AnisetteCommand);
    atomic_store(result, (unint64_t *)&qword_2563EBFD0);
  }
  return result;
}

unint64_t sub_236562BB8(uint64_t a1)
{
  unint64_t result;

  result = sub_236562BDC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_236562BDC()
{
  unint64_t result;

  result = qword_2563EC000;
  if (!qword_2563EC000)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AnisetteCommand.Request, &type metadata for AnisetteCommand.Request);
    atomic_store(result, (unint64_t *)&qword_2563EC000);
  }
  return result;
}

unint64_t sub_236562C24()
{
  unint64_t result;

  result = qword_2563EC008;
  if (!qword_2563EC008)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AnisetteCommand, &type metadata for AnisetteCommand);
    atomic_store(result, (unint64_t *)&qword_2563EC008);
  }
  return result;
}

unint64_t sub_236562C68(uint64_t a1)
{
  unint64_t result;

  result = sub_236562C8C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_236562C8C()
{
  unint64_t result;

  result = qword_2563EC030;
  if (!qword_2563EC030)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AnisetteCommand.Request, &type metadata for AnisetteCommand.Request);
    atomic_store(result, (unint64_t *)&qword_2563EC030);
  }
  return result;
}

unint64_t sub_236562CD0(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_23653D774();
  a1[2] = sub_23653D6A8();
  result = sub_236562D04();
  a1[3] = result;
  return result;
}

unint64_t sub_236562D04()
{
  unint64_t result;

  result = qword_2563EC038;
  if (!qword_2563EC038)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AnisetteCommand.Request, &type metadata for AnisetteCommand.Request);
    atomic_store(result, (unint64_t *)&qword_2563EC038);
  }
  return result;
}

unint64_t sub_236562D4C()
{
  unint64_t result;

  result = qword_2563EC040;
  if (!qword_2563EC040)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AnisetteCommand.Request, &type metadata for AnisetteCommand.Request);
    atomic_store(result, (unint64_t *)&qword_2563EC040);
  }
  return result;
}

uint64_t sub_236562D90(uint64_t a1)
{
  uint64_t result;

  result = sub_236562EEC(&qword_2563EC070, (uint64_t)&protocol conformance descriptor for AnisetteCommand.Response);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_236562DC4(uint64_t a1)
{
  uint64_t result;

  result = sub_236562EEC(&qword_2563EC098, (uint64_t)&protocol conformance descriptor for AnisetteCommand.Response);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_236562DF8(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_236562EEC(&qword_2563EAF38, (uint64_t)&protocol conformance descriptor for AnisetteCommand.Response);
  a1[2] = sub_236562EEC(&qword_2563EAEF0, (uint64_t)&protocol conformance descriptor for AnisetteCommand.Response);
  result = sub_236562EEC(&qword_2563EC0A0, (uint64_t)&protocol conformance descriptor for AnisetteCommand.Response);
  a1[3] = result;
  return result;
}

uint64_t sub_236562E5C()
{
  return sub_236562EEC(&qword_2563EC0A8, (uint64_t)&protocol conformance descriptor for AnisetteCommand.Response);
}

unint64_t sub_236562E84()
{
  unint64_t result;

  result = qword_2563EC0B0;
  if (!qword_2563EC0B0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for AnisetteCommand.Request, &type metadata for AnisetteCommand.Request);
    atomic_store(result, (unint64_t *)&qword_2563EC0B0);
  }
  return result;
}

uint64_t sub_236562EC8()
{
  return sub_236562EEC(&qword_2563EC0B8, (uint64_t)&protocol conformance descriptor for AnisetteCommand.Response);
}

uint64_t sub_236562EEC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for AnisetteCommand.Response();
    result = MEMORY[0x23B7F5164](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_236562F2C(uint64_t a1)
{
  unint64_t result;

  result = sub_236562C24();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_236562F54()
{
  return sub_236562EEC(&qword_2563EC070, (uint64_t)&protocol conformance descriptor for AnisetteCommand.Response);
}

ValueMetadata *type metadata accessor for AnisetteCommand()
{
  return &type metadata for AnisetteCommand;
}

uint64_t destroy for AnisetteCommand.Request(uint64_t a1)
{
  return sub_23653D530(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for AnisetteCommand.Request(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_23653FF70(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for AnisetteCommand.Request(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_23653FF70(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  sub_23653D530(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for AnisetteCommand.Request(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  __int128 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 32) = v3;
  sub_23653D530(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnisetteCommand.Request(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3FC && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 1020);
  v3 = ((*(_QWORD *)(a1 + 24) >> 60) & 3 | (4 * *(unsigned __int8 *)(a1 + 32))) ^ 0x3FF;
  if (v3 >= 0x3FB)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AnisetteCommand.Request(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3FB)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 1020;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x3FC)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0x3FC)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = (-a2 & 3) << 60;
      *(_BYTE *)(result + 32) = -a2 >> 2;
    }
  }
  return result;
}

uint64_t sub_236563160(uint64_t a1)
{
  int v1;
  unsigned int v2;

  if (*(_BYTE *)(a1 + 32))
    v1 = 4;
  else
    v1 = 0;
  v2 = (*(_QWORD *)(a1 + 24) >> 60) & 3 | v1;
  if (v2 <= 3)
    return v2;
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t sub_236563190(uint64_t result)
{
  *(_QWORD *)(result + 24) &= 0xCFFFFFFFFFFFFFFFLL;
  return result;
}

uint64_t sub_2365631A0(uint64_t result, uint64_t a2)
{
  if (a2 < 4)
  {
    *(_QWORD *)(result + 24) = *(_QWORD *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL | (a2 << 60);
  }
  else
  {
    *(_QWORD *)result = (a2 - 4);
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_BYTE *)(result + 32) = a2 > 3;
  return result;
}

ValueMetadata *type metadata accessor for AnisetteCommand.Request()
{
  return &type metadata for AnisetteCommand.Request;
}

uint64_t initializeBufferWithCopyOfBuffer for AnisetteCommand.Response(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_236563234 + 4 * byte_2365C5769[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for AnisetteCommand.Response(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if (result <= 5)
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(off_2507DC3E0[(int)result]);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

uint64_t initializeWithCopy for AnisetteCommand.Response(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = __swift_instantiateConcreteTypeFromMangledName(off_2507DC3E0[EnumCaseMultiPayload]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for AnisetteCommand.Response(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;

  if (a1 != a2)
  {
    sub_236465A18(a1, (uint64_t (*)(_QWORD))type metadata accessor for AnisetteCommand.Response);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v5 = __swift_instantiateConcreteTypeFromMangledName(off_2507DC3E0[EnumCaseMultiPayload]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for AnisetteCommand.Response(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = __swift_instantiateConcreteTypeFromMangledName(off_2507DC3E0[EnumCaseMultiPayload]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for AnisetteCommand.Response(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;

  if (a1 != a2)
  {
    sub_236465A18(a1, (uint64_t (*)(_QWORD))type metadata accessor for AnisetteCommand.Response);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v5 = __swift_instantiateConcreteTypeFromMangledName(off_2507DC3E0[EnumCaseMultiPayload]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void sub_236563604()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_2365636C4(319, &qword_2542A82A8);
  if (v0 <= 0x3F)
  {
    sub_2365636C4(319, &qword_2542A8298);
    if (v1 <= 0x3F)
    {
      sub_236563724();
      if (v2 <= 0x3F)
        swift_initEnumMetadataMultiPayload();
    }
  }
}

void sub_2365636C4(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    sub_236490694();
    v3 = sub_2365AFB1C();
    if (!v4)
      atomic_store(v3, a2);
  }
}

void sub_236563724()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2542A82A0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542A82B8);
    sub_236490694();
    v0 = sub_2365AFB1C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2542A82A0);
  }
}

ValueMetadata *type metadata accessor for AnisetteCommand.Response.CodingKeys()
{
  return &type metadata for AnisetteCommand.Response.CodingKeys;
}

ValueMetadata *type metadata accessor for AnisetteCommand.Response.ProvisionCodingKeys()
{
  return &type metadata for AnisetteCommand.Response.ProvisionCodingKeys;
}

ValueMetadata *type metadata accessor for AnisetteCommand.Response.SyncCodingKeys()
{
  return &type metadata for AnisetteCommand.Response.SyncCodingKeys;
}

ValueMetadata *type metadata accessor for AnisetteCommand.Response.EraseCodingKeys()
{
  return &type metadata for AnisetteCommand.Response.EraseCodingKeys;
}

ValueMetadata *type metadata accessor for AnisetteCommand.Response.FetchDataCodingKeys()
{
  return &type metadata for AnisetteCommand.Response.FetchDataCodingKeys;
}

ValueMetadata *type metadata accessor for AnisetteCommand.Response.LegacyDataCodingKeys()
{
  return &type metadata for AnisetteCommand.Response.LegacyDataCodingKeys;
}

ValueMetadata *type metadata accessor for AnisetteCommand.Response.FetchAttestationHeadersCodingKeys()
{
  return &type metadata for AnisetteCommand.Response.FetchAttestationHeadersCodingKeys;
}

uint64_t _s12AppleIDSetup15AnisetteCommandV8ResponseO10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_236563858 + 4 * byte_2365C5774[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23656388C + 4 * byte_2365C576F[v4]))();
}

uint64_t sub_23656388C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_236563894(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23656389CLL);
  return result;
}

uint64_t sub_2365638A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2365638B0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_2365638B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2365638BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnisetteCommand.Request.CodingKeys()
{
  return &type metadata for AnisetteCommand.Request.CodingKeys;
}

ValueMetadata *type metadata accessor for AnisetteCommand.Request.ProvisionCodingKeys()
{
  return &type metadata for AnisetteCommand.Request.ProvisionCodingKeys;
}

ValueMetadata *type metadata accessor for AnisetteCommand.Request.SyncCodingKeys()
{
  return &type metadata for AnisetteCommand.Request.SyncCodingKeys;
}

ValueMetadata *type metadata accessor for AnisetteCommand.Request.EraseCodingKeys()
{
  return &type metadata for AnisetteCommand.Request.EraseCodingKeys;
}

ValueMetadata *type metadata accessor for AnisetteCommand.Request.FetchDataCodingKeys()
{
  return &type metadata for AnisetteCommand.Request.FetchDataCodingKeys;
}

uint64_t _s12AppleIDSetup15AnisetteCommandV8ResponseO19ProvisionCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_236563958 + 4 * byte_2365C5779[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_236563978 + 4 * byte_2365C577E[v4]))();
}

_BYTE *sub_236563958(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_236563978(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_236563980(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_236563988(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_236563990(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_236563998(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AnisetteCommand.Request.LegacyDataCodingKeys()
{
  return &type metadata for AnisetteCommand.Request.LegacyDataCodingKeys;
}

uint64_t storeEnumTagSinglePayload for AnisetteCommand.Request.FetchAttestationHeadersCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_236563A00 + 4 * byte_2365C5788[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_236563A34 + 4 * byte_2365C5783[v4]))();
}

uint64_t sub_236563A34(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_236563A3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x236563A44);
  return result;
}

uint64_t sub_236563A50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x236563A58);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_236563A5C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236563A64(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnisetteCommand.Request.FetchAttestationHeadersCodingKeys()
{
  return &type metadata for AnisetteCommand.Request.FetchAttestationHeadersCodingKeys;
}

unint64_t sub_236563A84()
{
  unint64_t result;

  result = qword_2563EC110;
  if (!qword_2563EC110)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C5B94, &type metadata for AnisetteCommand.Request.FetchAttestationHeadersCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC110);
  }
  return result;
}

unint64_t sub_236563ACC()
{
  unint64_t result;

  result = qword_2563EC118;
  if (!qword_2563EC118)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C5C4C, &type metadata for AnisetteCommand.Request.LegacyDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC118);
  }
  return result;
}

unint64_t sub_236563B14()
{
  unint64_t result;

  result = qword_2563EC120;
  if (!qword_2563EC120)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C5D04, &type metadata for AnisetteCommand.Request.FetchDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC120);
  }
  return result;
}

unint64_t sub_236563B5C()
{
  unint64_t result;

  result = qword_2563EC128;
  if (!qword_2563EC128)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C5E0C, &type metadata for AnisetteCommand.Request.SyncCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC128);
  }
  return result;
}

unint64_t sub_236563BA4()
{
  unint64_t result;

  result = qword_2563EC130;
  if (!qword_2563EC130)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C5F14, &type metadata for AnisetteCommand.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC130);
  }
  return result;
}

unint64_t sub_236563BEC()
{
  unint64_t result;

  result = qword_2563EC138;
  if (!qword_2563EC138)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C5FCC, &type metadata for AnisetteCommand.Response.FetchAttestationHeadersCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC138);
  }
  return result;
}

unint64_t sub_236563C34()
{
  unint64_t result;

  result = qword_2563EC140;
  if (!qword_2563EC140)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C6084, &type metadata for AnisetteCommand.Response.LegacyDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC140);
  }
  return result;
}

unint64_t sub_236563C7C()
{
  unint64_t result;

  result = qword_2563EC148;
  if (!qword_2563EC148)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C613C, &type metadata for AnisetteCommand.Response.FetchDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC148);
  }
  return result;
}

unint64_t sub_236563CC4()
{
  unint64_t result;

  result = qword_2563EC150;
  if (!qword_2563EC150)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C61F4, &type metadata for AnisetteCommand.Response.EraseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC150);
  }
  return result;
}

unint64_t sub_236563D0C()
{
  unint64_t result;

  result = qword_2563EC158;
  if (!qword_2563EC158)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C62AC, &type metadata for AnisetteCommand.Response.SyncCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC158);
  }
  return result;
}

unint64_t sub_236563D54()
{
  unint64_t result;

  result = qword_2563EC160;
  if (!qword_2563EC160)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C6364, &type metadata for AnisetteCommand.Response.ProvisionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC160);
  }
  return result;
}

unint64_t sub_236563D9C()
{
  unint64_t result;

  result = qword_2563EC168;
  if (!qword_2563EC168)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C641C, &type metadata for AnisetteCommand.Response.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC168);
  }
  return result;
}

unint64_t sub_236563DE4()
{
  unint64_t result;

  result = qword_2563EC170;
  if (!qword_2563EC170)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C62D4, &type metadata for AnisetteCommand.Response.ProvisionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC170);
  }
  return result;
}

unint64_t sub_236563E2C()
{
  unint64_t result;

  result = qword_2563EC178;
  if (!qword_2563EC178)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C62FC, &type metadata for AnisetteCommand.Response.ProvisionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC178);
  }
  return result;
}

unint64_t sub_236563E74()
{
  unint64_t result;

  result = qword_2563EC180;
  if (!qword_2563EC180)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C621C, &type metadata for AnisetteCommand.Response.SyncCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC180);
  }
  return result;
}

unint64_t sub_236563EBC()
{
  unint64_t result;

  result = qword_2563EC188;
  if (!qword_2563EC188)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C6244, &type metadata for AnisetteCommand.Response.SyncCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC188);
  }
  return result;
}

unint64_t sub_236563F04()
{
  unint64_t result;

  result = qword_2563EC190;
  if (!qword_2563EC190)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C6164, &type metadata for AnisetteCommand.Response.EraseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC190);
  }
  return result;
}

unint64_t sub_236563F4C()
{
  unint64_t result;

  result = qword_2563EC198;
  if (!qword_2563EC198)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C618C, &type metadata for AnisetteCommand.Response.EraseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC198);
  }
  return result;
}

unint64_t sub_236563F94()
{
  unint64_t result;

  result = qword_2563EC1A0;
  if (!qword_2563EC1A0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C60AC, &type metadata for AnisetteCommand.Response.FetchDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC1A0);
  }
  return result;
}

unint64_t sub_236563FDC()
{
  unint64_t result;

  result = qword_2563EC1A8;
  if (!qword_2563EC1A8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C60D4, &type metadata for AnisetteCommand.Response.FetchDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC1A8);
  }
  return result;
}

unint64_t sub_236564024()
{
  unint64_t result;

  result = qword_2563EC1B0;
  if (!qword_2563EC1B0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C5FF4, &type metadata for AnisetteCommand.Response.LegacyDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC1B0);
  }
  return result;
}

unint64_t sub_23656406C()
{
  unint64_t result;

  result = qword_2563EC1B8;
  if (!qword_2563EC1B8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C601C, &type metadata for AnisetteCommand.Response.LegacyDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC1B8);
  }
  return result;
}

unint64_t sub_2365640B4()
{
  unint64_t result;

  result = qword_2563EC1C0;
  if (!qword_2563EC1C0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C5F3C, &type metadata for AnisetteCommand.Response.FetchAttestationHeadersCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC1C0);
  }
  return result;
}

unint64_t sub_2365640FC()
{
  unint64_t result;

  result = qword_2563EC1C8;
  if (!qword_2563EC1C8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C5F64, &type metadata for AnisetteCommand.Response.FetchAttestationHeadersCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC1C8);
  }
  return result;
}

unint64_t sub_236564144()
{
  unint64_t result;

  result = qword_2563EC1D0;
  if (!qword_2563EC1D0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C638C, &type metadata for AnisetteCommand.Response.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC1D0);
  }
  return result;
}

unint64_t sub_23656418C()
{
  unint64_t result;

  result = qword_2563EC1D8;
  if (!qword_2563EC1D8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C63B4, &type metadata for AnisetteCommand.Response.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC1D8);
  }
  return result;
}

unint64_t sub_2365641D4()
{
  unint64_t result;

  result = qword_2563EC1E0;
  if (!qword_2563EC1E0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C5E34, &type metadata for AnisetteCommand.Request.ProvisionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC1E0);
  }
  return result;
}

unint64_t sub_23656421C()
{
  unint64_t result;

  result = qword_2563EC1E8;
  if (!qword_2563EC1E8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C5E5C, &type metadata for AnisetteCommand.Request.ProvisionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC1E8);
  }
  return result;
}

unint64_t sub_236564264()
{
  unint64_t result;

  result = qword_2563EC1F0;
  if (!qword_2563EC1F0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C5D7C, &type metadata for AnisetteCommand.Request.SyncCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC1F0);
  }
  return result;
}

unint64_t sub_2365642AC()
{
  unint64_t result;

  result = qword_2563EC1F8;
  if (!qword_2563EC1F8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C5DA4, &type metadata for AnisetteCommand.Request.SyncCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC1F8);
  }
  return result;
}

unint64_t sub_2365642F4()
{
  unint64_t result;

  result = qword_2563EC200;
  if (!qword_2563EC200)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C5D2C, &type metadata for AnisetteCommand.Request.EraseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC200);
  }
  return result;
}

unint64_t sub_23656433C()
{
  unint64_t result;

  result = qword_2563EC208;
  if (!qword_2563EC208)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C5D54, &type metadata for AnisetteCommand.Request.EraseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC208);
  }
  return result;
}

unint64_t sub_236564384()
{
  unint64_t result;

  result = qword_2563EC210;
  if (!qword_2563EC210)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C5C74, &type metadata for AnisetteCommand.Request.FetchDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC210);
  }
  return result;
}

unint64_t sub_2365643CC()
{
  unint64_t result;

  result = qword_2563EC218;
  if (!qword_2563EC218)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C5C9C, &type metadata for AnisetteCommand.Request.FetchDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC218);
  }
  return result;
}

unint64_t sub_236564414()
{
  unint64_t result;

  result = qword_2563EC220;
  if (!qword_2563EC220)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C5BBC, &type metadata for AnisetteCommand.Request.LegacyDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC220);
  }
  return result;
}

unint64_t sub_23656445C()
{
  unint64_t result;

  result = qword_2563EC228;
  if (!qword_2563EC228)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C5BE4, &type metadata for AnisetteCommand.Request.LegacyDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC228);
  }
  return result;
}

unint64_t sub_2365644A4()
{
  unint64_t result;

  result = qword_2563EC230;
  if (!qword_2563EC230)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C5B04, &type metadata for AnisetteCommand.Request.FetchAttestationHeadersCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC230);
  }
  return result;
}

unint64_t sub_2365644EC()
{
  unint64_t result;

  result = qword_2563EC238;
  if (!qword_2563EC238)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C5B2C, &type metadata for AnisetteCommand.Request.FetchAttestationHeadersCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC238);
  }
  return result;
}

unint64_t sub_236564534()
{
  unint64_t result;

  result = qword_2563EC240;
  if (!qword_2563EC240)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C5E84, &type metadata for AnisetteCommand.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC240);
  }
  return result;
}

unint64_t sub_23656457C()
{
  unint64_t result;

  result = qword_2563EC248;
  if (!qword_2563EC248)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C5EAC, &type metadata for AnisetteCommand.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC248);
  }
  return result;
}

uint64_t sub_2365645C0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 7107189 && a2 == 0xE300000000000000;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x79646F4270747468 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_2365646A0(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000011 && a2 == 0x80000002365CDBC0)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_236564724(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0x6F697369766F7270 && a2 == 0xE90000000000006ELL || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1668184435 && a2 == 0xE400000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6573617265 && a2 == 0xE500000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7461446863746566 && a2 == 0xE900000000000061 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x614479636167656CLL && a2 == 0xEA00000000006174 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000002365CDBA0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v5 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_2365649A8(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC250);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2365649E8(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542A82B8);
    v8 = a2;
    result = MEMORY[0x23B7F5164](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_236564A50()
{
  uint64_t v0;

  v0 = sub_2365AFBA0();
  __swift_allocate_value_buffer(v0, qword_2563EC260);
  __swift_project_value_buffer(v0, (uint64_t)qword_2563EC260);
  return sub_2365AFB94();
}

uint64_t Signpost.__allocating_init(name:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = "com.apple.appleidsetup.signpost";
  *(_QWORD *)(v4 + 24) = 31;
  *(_BYTE *)(v4 + 32) = 2;
  v5 = v4 + OBJC_IVAR____TtC12AppleIDSetup8Signpost_identifier;
  v6 = sub_2365AFB7C();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC12AppleIDSetup8Signpost_intervalState) = 0;
  v7 = v4 + OBJC_IVAR____TtC12AppleIDSetup8Signpost_startTime;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  *(_QWORD *)(v4 + 40) = a1;
  *(_QWORD *)(v4 + 48) = a2;
  return v4;
}

uint64_t Signpost.init(name:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v2 + 16) = "com.apple.appleidsetup.signpost";
  *(_QWORD *)(v2 + 24) = 31;
  *(_BYTE *)(v2 + 32) = 2;
  v5 = v2 + OBJC_IVAR____TtC12AppleIDSetup8Signpost_identifier;
  v6 = sub_2365AFB7C();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC12AppleIDSetup8Signpost_intervalState) = 0;
  v7 = v2 + OBJC_IVAR____TtC12AppleIDSetup8Signpost_startTime;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return v2;
}

void sub_236564C20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  const char *v38;
  char v39;
  NSObject *v40;
  os_signpost_type_t v41;
  char v42;
  void (*v43)(char *, char *, uint64_t);
  void (*v44)(char *, uint64_t);
  uint8_t *v45;
  os_signpost_id_t v46;
  CFAbsoluteTime Current;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  uint64_t v55[3];
  char v56;

  v1 = v0;
  v2 = sub_2365AFB7C();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v49 - v8;
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v49 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC290);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v49 - v16;
  if (qword_2563E4340 != -1)
    swift_once();
  v18 = sub_2365AFBA0();
  v19 = __swift_project_value_buffer(v18, (uint64_t)qword_2563EC260);
  sub_2365AFB88();
  sub_2365AFB64();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v17, 0, 1, v2);
  v20 = v0 + OBJC_IVAR____TtC12AppleIDSetup8Signpost_identifier;
  swift_beginAccess();
  sub_236565268((uint64_t)v17, v20);
  swift_endAccess();
  sub_2365652B0(v20, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v15, 1, v2) != 1)
  {
    v51 = v6;
    v52 = v19;
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v11, v15, v2);
    if (qword_2563E42E0 != -1)
      swift_once();
    v25 = sub_2365AFC00();
    __swift_project_value_buffer(v25, (uint64_t)qword_2563E6108);
    v53 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    v53(v9, v11, v2);
    swift_retain_n();
    v26 = sub_2365AFBE8();
    v27 = sub_2365B03B0();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc();
      v49 = swift_slowAlloc();
      v55[0] = v49;
      *(_DWORD *)v28 = 136315394;
      v50 = (void (*)(char *, uint64_t))(v28 + 4);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC298);
      v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = xmmword_2365B6A20;
      v30 = sub_2365AFB70();
      v31 = MEMORY[0x24BEE45B8];
      *(_QWORD *)(v29 + 56) = MEMORY[0x24BEE4568];
      *(_QWORD *)(v29 + 64) = v31;
      *(_QWORD *)(v29 + 32) = v30;
      v32 = sub_2365B0068();
      v54 = sub_236468D88(v32, v33, v55);
      sub_2365B04A0();
      swift_bridgeObjectRelease();
      v50 = *(void (**)(char *, uint64_t))(v3 + 8);
      v50(v9, v2);
      *(_WORD *)(v28 + 12) = 2080;
      v35 = *(_QWORD *)(v1 + 40);
      v34 = *(_QWORD *)(v1 + 48);
      swift_bridgeObjectRetain();
      v54 = sub_236468D88(v35, v34, v55);
      sub_2365B04A0();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23644B000, v26, v27, "BEGIN [%s]: %s", (uint8_t *)v28, 0x16u);
      v36 = v49;
      swift_arrayDestroy();
      MEMORY[0x23B7F5254](v36, -1, -1);
      MEMORY[0x23B7F5254](v28, -1, -1);

    }
    else
    {
      v50 = *(void (**)(char *, uint64_t))(v3 + 8);
      v50(v9, v2);

      swift_release_n();
    }
    v37 = v51;
    v38 = *(const char **)(v1 + 16);
    v39 = *(_BYTE *)(v1 + 32);
    v40 = sub_2365AFB88();
    v41 = sub_2365B0410();
    v42 = sub_2365B0464();
    v43 = v53;
    if ((v42 & 1) == 0)
      goto LABEL_18;
    if ((v39 & 1) == 0)
    {
      if (!v38)
      {
        __break(1u);
LABEL_18:

        v44 = v50;
LABEL_24:
        v43(v37, v11, v2);
        sub_2365AFBD0();
        swift_allocObject();
        *(_QWORD *)(v1 + OBJC_IVAR____TtC12AppleIDSetup8Signpost_intervalState) = sub_2365AFBC4();
        swift_release();
        Current = CFAbsoluteTimeGetCurrent();
        v44(v11, v2);
        v48 = v1 + OBJC_IVAR____TtC12AppleIDSetup8Signpost_startTime;
        *(CFAbsoluteTime *)v48 = Current;
        *(_BYTE *)(v48 + 8) = 0;
        return;
      }
LABEL_23:
      v53(v37, v11, v2);
      v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v45 = 0;
      v46 = sub_2365AFB70();
      _os_signpost_emit_with_name_impl(&dword_23644B000, v40, v41, v46, v38, "", v45, 2u);
      MEMORY[0x23B7F5254](v45, -1, -1);

      v44 = v50;
      v50(v37, v2);
      goto LABEL_24;
    }
    if ((unint64_t)v38 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (v38 >> 11 == 27)
      {
LABEL_27:
        __break(1u);
        return;
      }
      if (v38 >> 16 <= 0x10)
      {
        v38 = &v56;
        goto LABEL_23;
      }
    }
    __break(1u);
    goto LABEL_27;
  }
  sub_2365652F8((uint64_t)v15);
  if (qword_2542A79D8 != -1)
    swift_once();
  v21 = sub_2365AFC00();
  __swift_project_value_buffer(v21, (uint64_t)qword_2542A79C0);
  v22 = sub_2365AFBE8();
  v23 = sub_2365B0398();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v24 = 0;
    _os_log_impl(&dword_23644B000, v22, v23, "Could not generate a signpost identifier. Cannot start a sign post.", v24, 2u);
    MEMORY[0x23B7F5254](v24, -1, -1);
  }

}

uint64_t sub_236565268(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC290);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_2365652B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC290);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2365652F8(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC290);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_236565338()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  NSObject *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE *v22;
  char v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint8_t *v34;
  uint8_t *v35;
  unint64_t v36;
  double v37;
  CFAbsoluteTime v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  os_log_type_t v49;
  uint8_t *v50;
  NSObject *v51;
  uint64_t v52;
  _BYTE *v53;
  char v54;
  NSObject *v55;
  const char *v56;
  uint64_t v57;
  void (*v58)(_BYTE *, uint64_t);
  _BYTE *v59;
  _BYTE *v60;
  _BYTE *v61;
  const char *v62;
  uint64_t v63;
  _BYTE *v64;
  uint8_t *v65;
  os_signpost_id_t v66;
  uint64_t v67;
  unint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  int v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  NSObject *v81;
  _BYTE *v82;
  _BYTE v83[12];
  int v84;
  _BYTE *v85;
  const char *v86;
  _BYTE *v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  unint64_t v92;
  _BYTE *v93;
  Class isa;
  NSObject *v95;
  uint64_t v96;
  NSObject *v97;
  char v98;

  v1 = v0;
  v91 = (const char *)sub_2365AFBAC();
  v89 = *((_QWORD *)v91 - 1);
  MEMORY[0x24BDAC7A8](v91);
  v3 = &v83[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = sub_2365AFBA0();
  isa = v4[-1].isa;
  v95 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v83[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC290);
  MEMORY[0x24BDAC7A8](v7);
  v9 = &v83[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_2365AFB7C();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = &v83[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = &v83[-v16];
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = &v83[-v19];
  MEMORY[0x24BDAC7A8](v18);
  v22 = &v83[-v21];
  v23 = *(_BYTE *)(v1 + OBJC_IVAR____TtC12AppleIDSetup8Signpost_startTime + 8);
  v93 = v6;
  v88 = v3;
  if ((v23 & 1) != 0)
  {
    if (qword_2542A79D8 != -1)
      swift_once();
    v90 = 2960685;
    v24 = sub_2365AFC00();
    __swift_project_value_buffer(v24, (uint64_t)qword_2542A79C0);
    v25 = sub_2365AFBE8();
    v26 = sub_2365B0398();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v92 = v1;
      v28 = v11;
      v29 = v20;
      v30 = v17;
      v31 = v10;
      v32 = v14;
      v33 = v22;
      v34 = v27;
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_23644B000, v25, v26, "Could not determine time elapsed for signpost", v27, 2u);
      v35 = v34;
      v22 = v33;
      v14 = v32;
      v10 = v31;
      v17 = v30;
      v20 = v29;
      v11 = v28;
      v1 = v92;
      MEMORY[0x23B7F5254](v35, -1, -1);
    }

    v36 = 0xE300000000000000;
  }
  else
  {
    v37 = *(double *)(v1 + OBJC_IVAR____TtC12AppleIDSetup8Signpost_startTime);
    v38 = CFAbsoluteTimeGetCurrent() - v37;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC298);
    v39 = swift_allocObject();
    v40 = MEMORY[0x24BEE13C8];
    *(_OWORD *)(v39 + 16) = xmmword_2365B6A20;
    v41 = MEMORY[0x24BEE1448];
    *(_QWORD *)(v39 + 56) = v40;
    *(_QWORD *)(v39 + 64) = v41;
    *(CFAbsoluteTime *)(v39 + 32) = v38;
    v90 = sub_2365B0068();
  }
  v42 = OBJC_IVAR____TtC12AppleIDSetup8Signpost_intervalState;
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC12AppleIDSetup8Signpost_intervalState))
  {
    v92 = v36;
    v43 = v1 + OBJC_IVAR____TtC12AppleIDSetup8Signpost_identifier;
    swift_beginAccess();
    sub_2365652B0(v43, (uint64_t)v9);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      swift_bridgeObjectRelease();
      sub_2365652F8((uint64_t)v9);
      if (qword_2542A79D8 != -1)
        swift_once();
      v44 = sub_2365AFC00();
      __swift_project_value_buffer(v44, (uint64_t)qword_2542A79C0);
      v45 = sub_2365AFBE8();
      v46 = sub_2365B0398();
      if (os_log_type_enabled(v45, v46))
      {
        v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v47 = 0;
        _os_log_impl(&dword_23644B000, v45, v46, "We do not have a signpost identifier. Calling an end, but we don't have a beginning.", v47, 2u);
        MEMORY[0x23B7F5254](v47, -1, -1);
      }

      return;
    }
    v85 = v17;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v22, v9, v10);
    if (qword_2563E4340 != -1)
      swift_once();
    v87 = v22;
    v51 = v95;
    v52 = __swift_project_value_buffer((uint64_t)v95, (uint64_t)qword_2563EC260);
    v53 = v93;
    (*((void (**)(_BYTE *, uint64_t, NSObject *))isa + 2))(v93, v52, v51);
    if (!*(_QWORD *)(v1 + v42))
    {
LABEL_46:
      __break(1u);
      return;
    }
    v86 = *(const char **)(v1 + 16);
    v54 = *(_BYTE *)(v1 + 32);
    swift_retain();
    v55 = sub_2365AFB88();
    sub_2365AFBB8();
    v84 = sub_2365B0404();
    if ((sub_2365B0464() & 1) == 0)
    {
      swift_release();

      v58 = *(void (**)(_BYTE *, uint64_t))(v11 + 8);
      v58(v20, v10);
      (*((void (**)(_BYTE *, NSObject *))isa + 1))(v53, v95);
      v59 = v87;
LABEL_36:
      if (qword_2563E42E0 != -1)
        swift_once();
      v67 = sub_2365AFC00();
      __swift_project_value_buffer(v67, (uint64_t)qword_2563E6108);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 16))(v14, v59, v10);
      swift_retain_n();
      v68 = v92;
      swift_bridgeObjectRetain();
      v69 = sub_2365AFBE8();
      v70 = sub_2365B03B0();
      v71 = v70;
      if (os_log_type_enabled(v69, v70))
      {
        v72 = v14;
        v73 = swift_slowAlloc();
        v95 = swift_slowAlloc();
        v97 = v95;
        *(_DWORD *)v73 = 136315650;
        __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC298);
        v74 = swift_allocObject();
        *(_OWORD *)(v74 + 16) = xmmword_2365B6A20;
        LODWORD(isa) = v71;
        v75 = sub_2365AFB70();
        v76 = MEMORY[0x24BEE45B8];
        *(_QWORD *)(v74 + 56) = MEMORY[0x24BEE4568];
        *(_QWORD *)(v74 + 64) = v76;
        *(_QWORD *)(v74 + 32) = v75;
        v77 = sub_2365B0068();
        v96 = sub_236468D88(v77, v78, (uint64_t *)&v97);
        sub_2365B04A0();
        swift_bridgeObjectRelease();
        v58(v72, v10);
        *(_WORD *)(v73 + 12) = 2080;
        swift_bridgeObjectRetain();
        v96 = sub_236468D88(v90, v68, (uint64_t *)&v97);
        sub_2365B04A0();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v73 + 22) = 2080;
        v79 = *(_QWORD *)(v1 + 40);
        v80 = *(_QWORD *)(v1 + 48);
        swift_bridgeObjectRetain();
        v96 = sub_236468D88(v79, v80, (uint64_t *)&v97);
        sub_2365B04A0();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_23644B000, v69, (os_log_type_t)isa, "END [%s] %ss: %s", (uint8_t *)v73, 0x20u);
        v81 = v95;
        swift_arrayDestroy();
        MEMORY[0x23B7F5254](v81, -1, -1);
        MEMORY[0x23B7F5254](v73, -1, -1);

        v82 = v87;
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_release_n();

        v58(v14, v10);
        v82 = v59;
      }
      v58(v82, v10);
      return;
    }
    if ((v54 & 1) != 0)
    {
      v56 = v91;
      if (!((unint64_t)v86 >> 32))
      {
        v57 = v89;
        if (v86 >> 11 == 27)
        {
LABEL_45:
          __break(1u);
          goto LABEL_46;
        }
        if (v86 >> 16 <= 0x10)
        {
          v86 = &v98;
          goto LABEL_32;
        }
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
    }
    else
    {
      v56 = v91;
      if (v86)
      {
        v57 = v89;
LABEL_32:
        swift_retain();
        v60 = v88;
        sub_2365AFBDC();
        swift_release();
        if ((*(unsigned int (**)(_BYTE *, const char *))(v57 + 88))(v60, v56) == *MEMORY[0x24BEE7810])
        {
          v61 = v14;
          v62 = "[Error] Interval already ended";
        }
        else
        {
          v63 = v57;
          v61 = v14;
          (*(void (**)(_BYTE *, const char *))(v63 + 8))(v60, v56);
          v62 = "";
        }
        v91 = v62;
        v59 = v87;
        v64 = v85;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 16))(v85, v20, v10);
        v65 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v65 = 0;
        v66 = sub_2365AFB70();
        _os_signpost_emit_with_name_impl(&dword_23644B000, v55, (os_signpost_type_t)v84, v66, v86, v91, v65, 2u);
        MEMORY[0x23B7F5254](v65, -1, -1);
        swift_release();

        v58 = *(void (**)(_BYTE *, uint64_t))(v11 + 8);
        v58(v20, v10);
        (*((void (**)(_BYTE *, NSObject *))isa + 1))(v93, v95);
        v58(v64, v10);
        v14 = v61;
        goto LABEL_36;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_44;
  }
  swift_bridgeObjectRelease();
  if (qword_2542A79D8 != -1)
    swift_once();
  v48 = sub_2365AFC00();
  __swift_project_value_buffer(v48, (uint64_t)qword_2542A79C0);
  v95 = sub_2365AFBE8();
  v49 = sub_2365B0398();
  if (os_log_type_enabled(v95, v49))
  {
    v50 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v50 = 0;
    _os_log_impl(&dword_23644B000, v95, v49, "Could not find non nil interval state, make sure begin() is being called before end().", v50, 2u);
    MEMORY[0x23B7F5254](v50, -1, -1);
  }

}

uint64_t Signpost.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_2365652F8(v0 + OBJC_IVAR____TtC12AppleIDSetup8Signpost_identifier);
  swift_release();
  return v0;
}

uint64_t Signpost.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_2365652F8(v0 + OBJC_IVAR____TtC12AppleIDSetup8Signpost_identifier);
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_236565DAC()
{
  return type metadata accessor for Signpost();
}

uint64_t type metadata accessor for Signpost()
{
  uint64_t result;

  result = qword_2563EC2C8;
  if (!qword_2563EC2C8)
    return swift_getSingletonMetadata();
  return result;
}

void sub_236565DF0()
{
  unint64_t v0;

  sub_236565EB0();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for Signpost()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Signpost.__allocating_init(name:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of Signpost.begin()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of Signpost.end()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

void sub_236565EB0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2563EC2D8[0])
  {
    sub_2365AFB7C();
    v0 = sub_2365B047C();
    if (!v1)
      atomic_store(v0, qword_2563EC2D8);
  }
}

uint64_t RemoteError.domain.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RemoteError.code.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

AppleIDSetup::RemoteError __swiftcall RemoteError.init(domain:code:)(Swift::String domain, Swift::Int code)
{
  Swift::String *v2;
  AppleIDSetup::RemoteError result;

  *v2 = domain;
  v2[1]._countAndFlagsBits = code;
  result.domain = domain;
  result.code = code;
  return result;
}

BOOL static RemoteError.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  _BOOL8 result;

  v2 = a1[2];
  v3 = a2[2];
  if (*a1 == *a2 && a1[1] == a2[1])
    return v2 == v3;
  v5 = sub_2365B08CC();
  result = 0;
  if ((v5 & 1) != 0)
    return v2 == v3;
  return result;
}

uint64_t RemoteError.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  return sub_2365B09F8();
}

uint64_t sub_236565FF4()
{
  sub_236566174();
  return sub_2365B0AD0();
}

uint64_t sub_23656601C()
{
  sub_236566174();
  return sub_2365B0ADC();
}

uint64_t RemoteError.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC3D0);
  v9 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_236566174();
  sub_2365B0AAC();
  v11 = 0;
  sub_2365B0800();
  if (!v2)
  {
    v10 = 1;
    sub_2365B0818();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v6, v4);
}

unint64_t sub_236566174()
{
  unint64_t result;

  result = qword_2563EC3D8;
  if (!qword_2563EC3D8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C6B50, &type metadata for RemoteError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC3D8);
  }
  return result;
}

uint64_t RemoteError.hashValue.getter()
{
  sub_2365B09E0();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B09F8();
  return sub_2365B0A34();
}

uint64_t RemoteError.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  char v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC3E0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_236566174();
  sub_2365B0A7C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v16 = 0;
  v9 = sub_2365B074C();
  v11 = v10;
  v15 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_2365B0764();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *a2 = v9;
  a2[1] = v11;
  a2[2] = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2365663AC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return RemoteError.init(from:)(a1, a2);
}

uint64_t sub_2365663C0(_QWORD *a1)
{
  return RemoteError.encode(to:)(a1);
}

BOOL sub_2365663D4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  _BOOL8 result;

  v2 = a1[2];
  v3 = a2[2];
  if (*a1 == *a2 && a1[1] == a2[1])
    return v2 == v3;
  v5 = sub_2365B08CC();
  result = 0;
  if ((v5 & 1) != 0)
    return v2 == v3;
  return result;
}

uint64_t sub_23656642C()
{
  sub_2365B09E0();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B09F8();
  return sub_2365B0A34();
}

uint64_t sub_23656649C()
{
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  return sub_2365B09F8();
}

uint64_t sub_2365664F4()
{
  sub_2365B09E0();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  sub_2365B09F8();
  return sub_2365B0A34();
}

AppleIDSetup::RemoteError __swiftcall Error.into()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  Swift::Int v4;
  AppleIDSetup::RemoteError result;

  v1 = v0;
  v2 = sub_2365B0998();
  *v1 = v2;
  v1[1] = (uint64_t)v3;
  v1[2] = 0;
  result.code = v4;
  result.domain._object = v3;
  result.domain._countAndFlagsBits = v2;
  return result;
}

uint64_t Result<>.into()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[10];

  v5 = v4;
  v20[1] = a4;
  v9 = *(_QWORD *)(a1 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v10 + 16);
  sub_236490694();
  v14 = sub_2365B0A40();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v20 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v5, a1);
  v17 = *(_QWORD *)(a1 + 24);
  v18 = *(_QWORD *)(a1 + 32);
  v20[4] = v13;
  v20[5] = v17;
  v20[6] = a2;
  v20[7] = a3;
  v20[8] = v18;
  sub_2365666F0((void (*)(char *))sub_2365666B8, a1, (uint64_t)v16);
  return sub_2365AFB04();
}

uint64_t sub_2365666B8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_2365B0998();
  *a1 = result;
  a1[1] = v3;
  a1[2] = 0;
  return result;
}

uint64_t sub_2365666F0@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v10, v3, v7);
    a1(v10);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 32))(a3, v3, *(_QWORD *)(a2 + 16));
  }
  sub_2365B0A40();
  return swift_storeEnumTagMultiPayload();
}

uint64_t Result<>.into()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  return sub_2365AFB04();
}

unint64_t sub_2365668BC(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_2364908EC();
  a1[2] = sub_2364907E8();
  result = sub_23649071C();
  a1[3] = result;
  return result;
}

_QWORD *sub_2365668F8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for RemoteError(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

_QWORD *assignWithTake for RemoteError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

ValueMetadata *type metadata accessor for RemoteError()
{
  return &type metadata for RemoteError;
}

uint64_t storeEnumTagSinglePayload for RemoteError.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_236566A18 + 4 * byte_2365C694D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_236566A4C + 4 * byte_2365C6948[v4]))();
}

uint64_t sub_236566A4C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_236566A54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x236566A5CLL);
  return result;
}

uint64_t sub_236566A68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x236566A70);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_236566A74(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236566A7C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RemoteError.CodingKeys()
{
  return &type metadata for RemoteError.CodingKeys;
}

unint64_t sub_236566A9C()
{
  unint64_t result;

  result = qword_2563EC3E8;
  if (!qword_2563EC3E8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C6B28, &type metadata for RemoteError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC3E8);
  }
  return result;
}

unint64_t sub_236566AE4()
{
  unint64_t result;

  result = qword_2563EC3F0;
  if (!qword_2563EC3F0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C6A98, &type metadata for RemoteError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC3F0);
  }
  return result;
}

unint64_t sub_236566B2C()
{
  unint64_t result;

  result = qword_2563EC3F8;
  if (!qword_2563EC3F8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C6AC0, &type metadata for RemoteError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC3F8);
  }
  return result;
}

uint64_t RepairModel.__allocating_init(accountID:setupModel:state:)(__int128 *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v6 = swift_allocObject();
  v14 = a1[1];
  v15 = *a1;
  v12 = a1[3];
  v13 = a1[2];
  v8 = *((_QWORD *)a1 + 8);
  v7 = *((_QWORD *)a1 + 9);
  v17 = *a3;
  v16 = a3[1];
  v9 = *((_QWORD *)a3 + 4);
  LOBYTE(a3) = *((_BYTE *)a3 + 40);
  sub_2365AFA50();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6A88);
  v10 = swift_allocObject();
  *(_DWORD *)(v10 + 148) = 0;
  *(_OWORD *)(v10 + 16) = v15;
  *(_OWORD *)(v10 + 32) = v14;
  *(_OWORD *)(v10 + 48) = v13;
  *(_OWORD *)(v10 + 64) = v12;
  *(_QWORD *)(v10 + 80) = v8;
  *(_QWORD *)(v10 + 88) = v7;
  *(_QWORD *)(v10 + 96) = a2;
  *(_OWORD *)(v10 + 104) = v17;
  *(_OWORD *)(v10 + 120) = v16;
  *(_QWORD *)(v10 + 136) = v9;
  *(_BYTE *)(v10 + 144) = (_BYTE)a3;
  *(_QWORD *)(v6 + 16) = v10;
  return v6;
}

uint64_t sub_236566C64(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_23656F5F8(*a1, *a2);
}

uint64_t sub_236566C70()
{
  sub_2365B09E0();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  return sub_2365B0A34();
}

uint64_t sub_236566D14()
{
  sub_2365B008C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_236566D94()
{
  sub_2365B09E0();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  return sub_2365B0A34();
}

uint64_t sub_236566E34@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23656C3E4();
  *a1 = result;
  return result;
}

void sub_236566E60(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE900000000000044;
  v4 = 0xEA00000000006C65;
  v5 = 0x646F4D7075746573;
  if (v2 != 1)
  {
    v5 = 0x6574617473;
    v4 = 0xE500000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x49746E756F636361;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_236566EC4()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x646F4D7075746573;
  if (*v0 != 1)
    v1 = 0x6574617473;
  if (*v0)
    return v1;
  else
    return 0x49746E756F636361;
}

uint64_t sub_236566F24@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23656C3E4();
  *a1 = result;
  return result;
}

uint64_t sub_236566F48()
{
  sub_23656C118();
  return sub_2365B0AD0();
}

uint64_t sub_236566F70()
{
  sub_23656C118();
  return sub_2365B0ADC();
}

uint64_t sub_236566F98()
{
  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  sub_2365AFA44();
  swift_release();
  return swift_retain();
}

uint64_t sub_236567020(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = a2;
  swift_retain();
  return swift_release();
}

double sub_236567058@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  double result;
  __int128 v5;
  _QWORD v6[2];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  sub_23656716C((uint64_t)v6);
  v2 = v6[1];
  *(_QWORD *)a1 = v6[0];
  *(_QWORD *)(a1 + 8) = v2;
  v3 = v8;
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(double *)&v9;
  v5 = v10;
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t sub_2365670A0(_OWORD *a1)
{
  __int128 v1;
  __int128 v2;
  _OWORD v4[5];

  v1 = a1[3];
  v4[2] = a1[2];
  v4[3] = v1;
  v4[4] = a1[4];
  v2 = a1[1];
  v4[0] = *a1;
  v4[1] = v2;
  swift_getKeyPath();
  sub_2364A7000((uint64_t)v4);
  sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  sub_2365AFA38();
  sub_2364A7068((uint64_t)v4);
  return swift_release();
}

uint64_t sub_23656716C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  os_unfair_lock_s *v3;

  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  sub_2365AFA44();
  swift_release();
  swift_getKeyPath();
  sub_2365AFA44();
  swift_release();
  v3 = *(os_unfair_lock_s **)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock(v3 + 37);
  sub_236567268((uint64_t)&v3[4], a1);
  os_unfair_lock_unlock(v3 + 37);
  return swift_release();
}

uint64_t sub_236567268@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_2365672EC(_OWORD *a1)
{
  __int128 v1;
  __int128 v2;
  _OWORD v4[5];

  v1 = a1[3];
  v4[2] = a1[2];
  v4[3] = v1;
  v4[4] = a1[4];
  v2 = a1[1];
  v4[0] = *a1;
  v4[1] = v2;
  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  sub_2365AFA38();
  sub_2364A7068((uint64_t)v4);
  return swift_release();
}

void sub_2365673B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  os_unfair_lock_s *v5;

  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  sub_2365AFA44();
  swift_release();
  v5 = *(os_unfair_lock_s **)(a1 + 16);
  swift_retain();
  os_unfair_lock_lock(v5 + 37);
  sub_23656749C((uint64_t)&v5[4], a2);
  os_unfair_lock_unlock(v5 + 37);
  if (v2)
    __break(1u);
  else
    swift_release();
}

__n128 sub_23656749C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __n128 result;

  sub_2364A7000(a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  result = *(__n128 *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

void (*sub_236567538(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  os_unfair_lock_s *v5;

  v2 = v1;
  v4 = malloc(0x118uLL);
  *a1 = v4;
  v4[31] = v2;
  swift_getKeyPath();
  v4[30] = v2;
  v4 += 30;
  v4[2] = OBJC_IVAR____TtC12AppleIDSetup11RepairModel___observationRegistrar;
  v4[3] = sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  sub_2365AFA44();
  swift_release();
  swift_getKeyPath();
  *v4 = v2;
  sub_2365AFA44();
  swift_release();
  v5 = *(os_unfair_lock_s **)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock(v5 + 37);
  sub_236567268((uint64_t)&v5[4], (uint64_t)(v4 - 10));
  v4[4] = 0;
  os_unfair_lock_unlock(v5 + 37);
  swift_release();
  return sub_236567664;
}

void sub_236567664(uint64_t a1, char a2)
{
  _OWORD *v2;
  _OWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t KeyPath;
  __int128 v9;
  uint64_t v10;

  v2 = *(_OWORD **)a1;
  v3 = (_OWORD *)(*(_QWORD *)a1 + 160);
  v4 = (_QWORD *)(*(_QWORD *)a1 + 240);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 248);
  v6 = *(_OWORD *)(*(_QWORD *)a1 + 208);
  if ((a2 & 1) != 0)
  {
    v2[2] = *(_OWORD *)(*(_QWORD *)a1 + 192);
    v2[3] = v6;
    v2[4] = v3[4];
    v7 = v3[1];
    *v2 = *v3;
    v2[1] = v7;
    KeyPath = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](KeyPath);
    *((_QWORD *)v2 + 30) = v5;
    sub_2364A7000((uint64_t)v2);
    sub_2365AFA38();
    sub_2364A7068((uint64_t)v2);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2[7] = *(_OWORD *)(*(_QWORD *)a1 + 192);
    v2[8] = v6;
    v2[9] = v3[4];
    v9 = v3[1];
    v2[5] = *v3;
    v2[6] = v9;
    v10 = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](v10);
    *v4 = v5;
    sub_2365AFA38();
    sub_2364A7068((uint64_t)(v2 + 5));
    swift_release();
  }
  free(v2);
}

uint64_t sub_236567824@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_236567904();
  *a1 = result;
  return result;
}

uint64_t sub_23656784C()
{
  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  swift_retain();
  sub_2365AFA38();
  swift_release();
  return swift_release();
}

uint64_t sub_236567904()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  sub_2365AFA44();
  swift_release();
  swift_getKeyPath();
  sub_2365AFA44();
  swift_release();
  v1 = *(_QWORD *)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 148));
  v2 = *(_QWORD *)(v1 + 96);
  swift_retain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 148));
  swift_release();
  return v2;
}

uint64_t sub_2365679EC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 80);
  return swift_retain();
}

uint64_t sub_236567A08()
{
  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  sub_2365AFA38();
  swift_release();
  return swift_release();
}

void sub_236567AB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  sub_2365AFA44();
  swift_release();
  v5 = *(_QWORD *)(a1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 148));
  swift_retain();
  swift_release();
  *(_QWORD *)(v5 + 96) = a2;
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 148));
  if (v2)
    __break(1u);
  else
    swift_release();
}

void (*sub_236567B8C(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v1;
  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[2] = v2;
  swift_getKeyPath();
  v4[3] = OBJC_IVAR____TtC12AppleIDSetup11RepairModel___observationRegistrar;
  v4[1] = v2;
  v4[4] = sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  sub_2365AFA44();
  swift_release();
  swift_getKeyPath();
  v4[1] = v2;
  sub_2365AFA44();
  swift_release();
  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 148));
  v6 = *(_QWORD *)(v5 + 96);
  swift_retain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 148));
  swift_release();
  *v4 = v6;
  return sub_236567CA4;
}

void sub_236567CA4(_QWORD **a1, char a2)
{
  _QWORD *v3;

  v3 = *a1;
  swift_getKeyPath();
  v3[1] = v3[2];
  if ((a2 & 1) != 0)
  {
    swift_retain();
    sub_2365AFA38();
    swift_release();
  }
  else
  {
    sub_2365AFA38();
  }
  swift_release();
  swift_release();
  free(v3);
}

double sub_236567DB8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;
  char v8;

  sub_236567ED0((uint64_t)v6);
  v2 = v7;
  v3 = v8;
  result = *(double *)v6;
  v5 = v6[1];
  *(_OWORD *)a1 = v6[0];
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = v2;
  *(_BYTE *)(a1 + 40) = v3;
  return result;
}

uint64_t sub_236567E00(__int128 *a1)
{
  _OWORD v2[3];

  sub_23656C0B4(a1, v2);
  swift_getKeyPath();
  sub_23656C0CC((uint64_t)v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23656C104);
  sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  sub_2365AFA38();
  sub_23656C0CC((uint64_t)v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_236484C6C);
  return swift_release();
}

uint64_t sub_236567ED0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  sub_2365AFA44();
  swift_release();
  swift_getKeyPath();
  sub_2365AFA44();
  swift_release();
  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 148));
  v4 = *(_QWORD *)(v3 + 104);
  v5 = *(_QWORD *)(v3 + 112);
  v6 = *(_QWORD *)(v3 + 120);
  v7 = *(_QWORD *)(v3 + 128);
  v8 = *(_QWORD *)(v3 + 136);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  v9 = *(_BYTE *)(v3 + 144);
  *(_BYTE *)(a1 + 40) = v9;
  sub_23656C104(v4, v5, v6, v7, v8, v9);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 148));
  return swift_release();
}

uint64_t sub_236567FD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)(a1 + 88);
  v2 = *(_QWORD *)(a1 + 96);
  v4 = *(_QWORD *)(a1 + 104);
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = v6;
  v7 = *(_BYTE *)(a1 + 128);
  *(_BYTE *)(a2 + 40) = v7;
  return sub_23656C104(v3, v2, v4, v5, v6, v7);
}

uint64_t sub_236568020(__int128 *a1)
{
  _OWORD v2[3];

  sub_23656C0B4(a1, v2);
  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  sub_2365AFA38();
  sub_23656C0CC((uint64_t)v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_236484C6C);
  return swift_release();
}

void sub_2365680DC(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  os_unfair_lock_s *v5;
  _OWORD v6[3];

  sub_23656C0B4(a2, v6);
  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  sub_2365AFA44();
  swift_release();
  v5 = *(os_unfair_lock_s **)(a1 + 16);
  swift_retain();
  os_unfair_lock_lock(v5 + 37);
  sub_2365681D4((uint64_t)&v5[4], a2);
  os_unfair_lock_unlock(v5 + 37);
  if (v2)
    __break(1u);
  else
    swift_release();
}

_OWORD *sub_2365681D4(uint64_t a1, __int128 *a2)
{
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  v3 = (_OWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 120);
  v9 = *(_BYTE *)(a1 + 128);
  sub_23656C0CC((uint64_t)a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23656C104);
  sub_236484C6C(v4, v5, v6, v7, v8, v9);
  return sub_23656C0B4(a2, v3);
}

void (*sub_236568264(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v2 = v1;
  v4 = malloc(0xB0uLL);
  *a1 = v4;
  v4[19] = v2;
  swift_getKeyPath();
  v4[20] = OBJC_IVAR____TtC12AppleIDSetup11RepairModel___observationRegistrar;
  v4[18] = v2;
  v4[21] = sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  sub_2365AFA44();
  swift_release();
  swift_getKeyPath();
  v4[18] = v2;
  sub_2365AFA44();
  swift_release();
  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 148));
  v6 = *(_QWORD *)(v5 + 104);
  v7 = *(_QWORD *)(v5 + 112);
  v8 = *(_QWORD *)(v5 + 120);
  v9 = *(_QWORD *)(v5 + 128);
  v10 = *(_QWORD *)(v5 + 136);
  v4[12] = v6;
  v4[13] = v7;
  v4 += 12;
  v4[2] = v8;
  v4[3] = v9;
  v4[4] = v10;
  v11 = *(_BYTE *)(v5 + 144);
  *((_BYTE *)v4 + 40) = v11;
  sub_23656C104(v6, v7, v8, v9, v10, v11);
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 148));
  swift_release();
  return sub_236568390;
}

void sub_236568390(uint64_t *a1, char a2)
{
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;

  v2 = *a1;
  v3 = (__int128 *)(*a1 + 96);
  v4 = *(_QWORD *)(v2 + 152);
  if ((a2 & 1) != 0)
  {
    sub_23656C0B4(v3, (_OWORD *)v2);
    KeyPath = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](KeyPath);
    *(_QWORD *)(v2 + 144) = v4;
    sub_23656C0CC(v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23656C104);
    sub_2365AFA38();
    sub_23656C0CC(v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_236484C6C);
    swift_release();
    sub_236484C6C(*(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 104), *(_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 120), *(_QWORD *)(v2 + 128), *(_BYTE *)(v2 + 136));
  }
  else
  {
    sub_23656C0B4(v3, (_OWORD *)(v2 + 48));
    v6 = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](v6);
    *(_QWORD *)(v2 + 144) = v4;
    sub_2365AFA38();
    sub_23656C0CC(v2 + 48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_236484C6C);
    swift_release();
  }
  free((void *)v2);
}

uint64_t RepairModel.init(accountID:setupModel:state:)(__int128 *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v13 = a1[1];
  v14 = *a1;
  v11 = a1[3];
  v12 = a1[2];
  v5 = *((_QWORD *)a1 + 8);
  v6 = *((_QWORD *)a1 + 9);
  v16 = *a3;
  v15 = a3[1];
  v7 = *((_QWORD *)a3 + 4);
  v8 = *((_BYTE *)a3 + 40);
  sub_2365AFA50();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6A88);
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 148) = 0;
  *(_OWORD *)(v9 + 16) = v14;
  *(_OWORD *)(v9 + 32) = v13;
  *(_OWORD *)(v9 + 48) = v12;
  *(_OWORD *)(v9 + 64) = v11;
  *(_QWORD *)(v9 + 80) = v5;
  *(_QWORD *)(v9 + 88) = v6;
  *(_QWORD *)(v9 + 96) = a2;
  *(_OWORD *)(v9 + 104) = v16;
  *(_OWORD *)(v9 + 120) = v15;
  *(_QWORD *)(v9 + 136) = v7;
  *(_BYTE *)(v9 + 144) = v8;
  *(_QWORD *)(v3 + 16) = v9;
  return v3;
}

uint64_t sub_2365685FC(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28;

  swift_getKeyPath();
  *(_QWORD *)&v20 = v1;
  sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  sub_2365AFA44();
  swift_release();
  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 148));
  v4 = *(_OWORD *)(v3 + 96);
  v5 = *(_OWORD *)(v3 + 112);
  v6 = *(_OWORD *)(v3 + 128);
  v28 = *(_BYTE *)(v3 + 144);
  v26 = v5;
  v27 = v6;
  v7 = *(_OWORD *)(v3 + 32);
  v8 = *(_OWORD *)(v3 + 48);
  v9 = *(_OWORD *)(v3 + 80);
  v23 = *(_OWORD *)(v3 + 64);
  v24 = v9;
  v21 = v7;
  v22 = v8;
  v25 = v4;
  v20 = *(_OWORD *)(v3 + 16);
  v17 = *(_OWORD *)(v3 + 112);
  v18 = *(_OWORD *)(v3 + 128);
  v19 = *(_BYTE *)(v3 + 144);
  v13 = *(_OWORD *)(v3 + 48);
  v14 = *(_OWORD *)(v3 + 64);
  v15 = *(_OWORD *)(v3 + 80);
  v16 = *(_OWORD *)(v3 + 96);
  v11 = *(_OWORD *)(v3 + 16);
  v12 = *(_OWORD *)(v3 + 32);
  sub_23656DA64((uint64_t)&v20);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 148));
  swift_release();
  v26 = v17;
  v27 = v18;
  v22 = v13;
  v23 = v14;
  v24 = v15;
  v25 = v16;
  v20 = v11;
  v21 = v12;
  v28 = v19;
  sub_2365687F8(a1);
  return sub_236484BB0((uint64_t)&v20);
}

uint64_t sub_236568774@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21;

  v2 = *(_OWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 112);
  v19 = *(_OWORD *)(a1 + 96);
  v20 = v3;
  v4 = *(_OWORD *)(a1 + 16);
  v5 = *(_OWORD *)(a1 + 48);
  v15 = *(_OWORD *)(a1 + 32);
  v6 = v15;
  v16 = v5;
  v7 = *(_OWORD *)(a1 + 48);
  v8 = *(_OWORD *)(a1 + 80);
  v17 = *(_OWORD *)(a1 + 64);
  v9 = v17;
  v18 = v8;
  v10 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v11 = v14[0];
  v14[1] = v10;
  v12 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = v19;
  *(_OWORD *)(a2 + 112) = v12;
  *(_OWORD *)(a2 + 32) = v6;
  *(_OWORD *)(a2 + 48) = v7;
  *(_OWORD *)(a2 + 64) = v9;
  *(_OWORD *)(a2 + 80) = v2;
  v21 = *(_BYTE *)(a1 + 128);
  *(_BYTE *)(a2 + 128) = *(_BYTE *)(a1 + 128);
  *(_OWORD *)a2 = v11;
  *(_OWORD *)(a2 + 16) = v4;
  return sub_23656DA64((uint64_t)v14);
}

void sub_2365687F8(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v28 = type metadata accessor for SetupModel.ModelData(0);
  MEMORY[0x24BDAC7A8](v28);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v1 + 80);
  v27 = *(_QWORD *)(v1 + 88);
  v26 = *(_QWORD *)(v1 + 96);
  v25 = *(_QWORD *)(v1 + 104);
  v24 = *(_QWORD *)(v1 + 112);
  v23 = *(_QWORD *)(v1 + 120);
  v29 = *(unsigned __int8 *)(v1 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  *(_QWORD *)&v30 = v5;
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  swift_retain();
  sub_2365AFA44();
  swift_release();
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v6 + 16);
  v8 = (os_unfair_lock_s *)(v6 + ((*(unsigned int *)(*(_QWORD *)v6 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v8);
  sub_23657FBD0(v7, (uint64_t)v4);
  os_unfair_lock_unlock(v8);
  swift_release();
  sub_2365B09F8();
  v9 = *((_QWORD *)v4 + 3);
  v10 = *((_DWORD *)v4 + 8);
  v11 = *((_WORD *)v4 + 18);
  v30 = *(_OWORD *)(v4 + 8);
  *(_QWORD *)&v31 = v9;
  WORD6(v31) = v11;
  DWORD2(v31) = v10;
  SetupModel.RemoteRole.hash(into:)();
  v12 = v4[88];
  switch(v12)
  {
    case -6:
    case -5:
    case -4:
    case -3:
    case -2:
    case -1:
      sub_2365B09F8();
      break;
    default:
      v14 = *((_QWORD *)v4 + 9);
      v13 = *((_QWORD *)v4 + 10);
      v22 = *(_OWORD *)(v4 + 56);
      v21 = *(_OWORD *)(v4 + 40);
      sub_2365B09F8();
      v30 = v21;
      v31 = v22;
      *(_QWORD *)&v32 = v14;
      *((_QWORD *)&v32 + 1) = v13;
      LOBYTE(v33) = v12;
      SetupError.hash(into:)();
      break;
  }
  v15 = v29;
  v16 = *((_OWORD *)v4 + 15);
  v38 = *((_OWORD *)v4 + 14);
  v39 = v16;
  v40 = *((_OWORD *)v4 + 16);
  v17 = *((_OWORD *)v4 + 11);
  v34 = *((_OWORD *)v4 + 10);
  v35 = v17;
  v18 = *((_OWORD *)v4 + 13);
  v36 = *((_OWORD *)v4 + 12);
  v37 = v18;
  v19 = *((_OWORD *)v4 + 7);
  v30 = *((_OWORD *)v4 + 6);
  v20 = *((_OWORD *)v4 + 8);
  v33 = *((_OWORD *)v4 + 9);
  v31 = v19;
  v32 = v20;
  DiscoveryModel.hash(into:)(a1);
  AuthenticationModel.hash(into:)();
  SignInModel.hash(into:)((uint64_t)a1);
  sub_23656D9E4((uint64_t)v4);
  swift_release();
  switch(v15)
  {
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
      sub_2365B09F8();
      break;
    default:
      sub_2365B09F8();
      *(_QWORD *)&v30 = v27;
      *((_QWORD *)&v30 + 1) = v26;
      *(_QWORD *)&v31 = v25;
      *((_QWORD *)&v31 + 1) = v24;
      *(_QWORD *)&v32 = v23;
      BYTE8(v32) = v15;
      RepairError.hash(into:)();
      break;
  }
}

void sub_236568C24(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  _BYTE v27[24];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unsigned __int8 v40;
  __int128 v41;
  _BYTE v42[64];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  unsigned __int8 v46;
  uint64_t v47;

  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC408);
  v25 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  *(_QWORD *)&v41 = v1;
  sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  sub_2365AFA44();
  swift_release();
  v6 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 148));
  v7 = *(_OWORD *)(v6 + 96);
  v8 = *(_OWORD *)(v6 + 112);
  v9 = *(_OWORD *)(v6 + 128);
  v46 = *(_BYTE *)(v6 + 144);
  v44 = v8;
  v45 = v9;
  v10 = *(_OWORD *)(v6 + 32);
  v11 = *(_OWORD *)(v6 + 48);
  v12 = *(_OWORD *)(v6 + 80);
  *(_OWORD *)&v42[32] = *(_OWORD *)(v6 + 64);
  *(_OWORD *)&v42[48] = v12;
  *(_OWORD *)v42 = v10;
  *(_OWORD *)&v42[16] = v11;
  v43 = v7;
  v41 = *(_OWORD *)(v6 + 16);
  v13 = *(_OWORD *)(v6 + 112);
  v14 = *(_OWORD *)(v6 + 128);
  v15 = *(_OWORD *)(v6 + 80);
  v37 = *(_OWORD *)(v6 + 96);
  v38 = v13;
  v39 = v14;
  v40 = *(_BYTE *)(v6 + 144);
  v16 = *(_OWORD *)(v6 + 48);
  v35 = *(_OWORD *)(v6 + 64);
  v36 = v15;
  v17 = *(_OWORD *)(v6 + 16);
  v33 = *(_OWORD *)(v6 + 32);
  v34 = v16;
  v32 = v17;
  sub_23656DA64((uint64_t)&v41);
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 148));
  if (v2)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    v44 = v38;
    v45 = v39;
    *(_OWORD *)&v42[16] = v34;
    *(_OWORD *)&v42[32] = v35;
    v46 = v40;
    *(_OWORD *)&v42[48] = v36;
    v43 = v37;
    v41 = v32;
    *(_OWORD *)v42 = v33;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_23656C118();
    sub_2365B0AAC();
    *(_OWORD *)v27 = v41;
    *(_QWORD *)&v27[16] = *(_QWORD *)v42;
    v28 = *(_OWORD *)&v42[8];
    v29 = *(_OWORD *)&v42[24];
    v30 = *(_OWORD *)&v42[40];
    v31 = *(_QWORD *)&v42[56];
    v26 = 0;
    sub_2364A51A8();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24 = v5;
    sub_2365B0824();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)v27 = v43;
    v26 = 1;
    type metadata accessor for SetupModel(0);
    sub_23644F0B8(&qword_2563EC418, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
    swift_retain();
    v18 = v24;
    sub_2365B0824();
    swift_release();
    v19 = *((_QWORD *)&v43 + 1);
    v20 = v44;
    v21 = v45;
    HIDWORD(v23) = v46;
    *(_QWORD *)v27 = *((_QWORD *)&v43 + 1);
    *(_OWORD *)&v27[8] = v44;
    v28 = v45;
    LOBYTE(v29) = v46;
    v26 = 2;
    sub_23656C104(*((uint64_t *)&v43 + 1), v44, *((uint64_t *)&v44 + 1), v45, *((uint64_t *)&v45 + 1), v46);
    sub_23656C15C();
    v22 = v47;
    sub_2365B0824();
    sub_236484BB0((uint64_t)&v41);
    sub_236484C6C(v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), SBYTE4(v23));
    (*(void (**)(char *, uint64_t))(v25 + 8))(v18, v22);
  }
}

uint64_t RepairModel.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  RepairModel.init(from:)(a1);
  return v2;
}

uint64_t RepairModel.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  char v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC428);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v36 = v1 + OBJC_IVAR____TtC12AppleIDSetup11RepairModel___observationRegistrar;
  sub_2365AFA50();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23656C118();
  sub_2365B0A7C();
  if (v2)
  {
    v14 = v36;
    v15 = sub_2365AFA5C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
    type metadata accessor for RepairModel();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v35 = v6;
    LOBYTE(v38) = 0;
    sub_2364A5230();
    v9 = v5;
    sub_2365B0770();
    v10 = v43;
    v32 = v42;
    v11 = v45;
    v31 = v44;
    v12 = v47;
    v30 = v46;
    v29 = v48;
    v34 = v49;
    v28 = v50;
    v33 = v51;
    type metadata accessor for SetupModel(0);
    LOBYTE(v38) = 1;
    sub_23644F0B8(&qword_2563EC430, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
    sub_2365B0770();
    v25 = v10;
    v26 = v11;
    v27 = v12;
    v13 = v52;
    v37 = 2;
    sub_23656C1A0();
    sub_2365B0770();
    v36 = v38;
    v24 = v39;
    v17 = v40;
    LOBYTE(v11) = v41;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6A88);
    v18 = swift_allocObject();
    *(_DWORD *)(v18 + 148) = 0;
    v19 = v25;
    *(_QWORD *)(v18 + 16) = v32;
    *(_QWORD *)(v18 + 24) = v19;
    v20 = v26;
    *(_QWORD *)(v18 + 32) = v31;
    *(_QWORD *)(v18 + 40) = v20;
    v21 = v27;
    *(_QWORD *)(v18 + 48) = v30;
    *(_QWORD *)(v18 + 56) = v21;
    v22 = v34;
    *(_QWORD *)(v18 + 64) = v29;
    *(_QWORD *)(v18 + 72) = v22;
    v23 = v33;
    *(_QWORD *)(v18 + 80) = v28;
    *(_QWORD *)(v18 + 88) = v23;
    *(_QWORD *)(v18 + 96) = v13;
    *(_OWORD *)(v18 + 104) = v36;
    *(_OWORD *)(v18 + 120) = v24;
    *(_QWORD *)(v18 + 136) = v17;
    *(_BYTE *)(v18 + 144) = v11;
    (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v9);
    *(_QWORD *)(v3 + 16) = v18;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v3;
}

uint64_t sub_236569454()
{
  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  sub_2365AFA38();
  return swift_release();
}

uint64_t sub_236569508(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char v27;
  _OWORD v28[5];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char v41;

  swift_getKeyPath();
  *(_QWORD *)&v33 = a1;
  sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  sub_2365AFA44();
  swift_release();
  v4 = *(_QWORD *)(a1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 148));
  v5 = *(_OWORD *)(v4 + 96);
  v6 = *(_OWORD *)(v4 + 112);
  v7 = *(_OWORD *)(v4 + 128);
  v41 = *(_BYTE *)(v4 + 144);
  v39 = v6;
  v40 = v7;
  v8 = *(_OWORD *)(v4 + 32);
  v9 = *(_OWORD *)(v4 + 48);
  v10 = *(_OWORD *)(v4 + 80);
  v36 = *(_OWORD *)(v4 + 64);
  v37 = v10;
  v34 = v8;
  v35 = v9;
  v38 = v5;
  v33 = *(_OWORD *)(v4 + 16);
  v25 = *(_OWORD *)(v4 + 112);
  v26 = *(_OWORD *)(v4 + 128);
  v27 = *(_BYTE *)(v4 + 144);
  v21 = *(_OWORD *)(v4 + 48);
  v22 = *(_OWORD *)(v4 + 64);
  v23 = *(_OWORD *)(v4 + 80);
  v24 = *(_OWORD *)(v4 + 96);
  v19 = *(_OWORD *)(v4 + 16);
  v20 = *(_OWORD *)(v4 + 32);
  sub_23656DA64((uint64_t)&v33);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 148));
  swift_release();
  v30 = v25;
  v31 = v26;
  v32 = v27;
  v28[2] = v21;
  v28[3] = v22;
  v28[4] = v23;
  v29 = v24;
  v28[0] = v19;
  v28[1] = v20;
  swift_getKeyPath();
  *(_QWORD *)&v33 = a2;
  sub_2365AFA44();
  swift_release();
  v11 = *(_QWORD *)(a2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 148));
  v12 = *(_OWORD *)(v11 + 112);
  v38 = *(_OWORD *)(v11 + 96);
  v39 = v12;
  v40 = *(_OWORD *)(v11 + 128);
  v41 = *(_BYTE *)(v11 + 144);
  v13 = *(_OWORD *)(v11 + 48);
  v34 = *(_OWORD *)(v11 + 32);
  v35 = v13;
  v14 = *(_OWORD *)(v11 + 80);
  v36 = *(_OWORD *)(v11 + 64);
  v37 = v14;
  v33 = *(_OWORD *)(v11 + 16);
  sub_236484BB0((uint64_t)&v33);
  *(_OWORD *)(v11 + 32) = v20;
  *(_OWORD *)(v11 + 48) = v21;
  *(_OWORD *)(v11 + 64) = v22;
  v15 = v32;
  v16 = v31;
  v17 = v29;
  *(_OWORD *)(v11 + 112) = v30;
  *(_OWORD *)(v11 + 128) = v16;
  *(_BYTE *)(v11 + 144) = v15;
  *(_OWORD *)(v11 + 80) = v23;
  *(_OWORD *)(v11 + 96) = v17;
  *(_OWORD *)(v11 + 16) = v19;
  sub_23656DA64((uint64_t)v28);
  os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 148));
  sub_236484BB0((uint64_t)v28);
  return swift_release();
}

uint64_t sub_23656972C()
{
  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  sub_2365AFA38();
  return swift_release();
}

uint64_t sub_2365697F0()
{
  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  sub_2365AFA38();
  return swift_release();
}

uint64_t RepairModel.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  v1 = v0 + OBJC_IVAR____TtC12AppleIDSetup11RepairModel___observationRegistrar;
  v2 = sub_2365AFA5C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t RepairModel.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  v1 = v0 + OBJC_IVAR____TtC12AppleIDSetup11RepairModel___observationRegistrar;
  v2 = sub_2365AFA5C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_236569958()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  __int128 v18[4];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char v27;

  sub_2365B09E0();
  swift_getKeyPath();
  *(_QWORD *)&v19 = v0;
  sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  sub_2365AFA44();
  swift_release();
  v1 = *(_QWORD *)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 148));
  v2 = *(_OWORD *)(v1 + 96);
  v3 = *(_OWORD *)(v1 + 112);
  v4 = *(_OWORD *)(v1 + 128);
  v27 = *(_BYTE *)(v1 + 144);
  v25 = v3;
  v26 = v4;
  v5 = *(_OWORD *)(v1 + 32);
  v6 = *(_OWORD *)(v1 + 48);
  v7 = *(_OWORD *)(v1 + 80);
  v22 = *(_OWORD *)(v1 + 64);
  v23 = v7;
  v20 = v5;
  v21 = v6;
  v24 = v2;
  v19 = *(_OWORD *)(v1 + 16);
  v15 = *(_OWORD *)(v1 + 112);
  v16 = *(_OWORD *)(v1 + 128);
  v17 = *(_BYTE *)(v1 + 144);
  v11 = *(_OWORD *)(v1 + 48);
  v12 = *(_OWORD *)(v1 + 64);
  v13 = *(_OWORD *)(v1 + 80);
  v14 = *(_OWORD *)(v1 + 96);
  v9 = *(_OWORD *)(v1 + 16);
  v10 = *(_OWORD *)(v1 + 32);
  sub_23656DA64((uint64_t)&v19);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 148));
  swift_release();
  v25 = v15;
  v26 = v16;
  v21 = v11;
  v22 = v12;
  v23 = v13;
  v24 = v14;
  v19 = v9;
  v20 = v10;
  v27 = v17;
  sub_2365687F8(v18);
  sub_236484BB0((uint64_t)&v19);
  return sub_2365B0A34();
}

uint64_t sub_236569AD8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  type metadata accessor for RepairModel();
  v5 = swift_allocObject();
  result = RepairModel.init(from:)(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

void sub_236569B30(_QWORD *a1)
{
  sub_236568C24(a1);
}

uint64_t sub_236569B50(uint64_t *a1, uint64_t *a2)
{
  return _s12AppleIDSetup11RepairModelC2eeoiySbAC_ACtFZ_0(*a1, *a2);
}

uint64_t sub_236569B5C()
{
  return sub_236569958();
}

uint64_t sub_236569B7C(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  _OWORD v6[8];
  char v7;
  _OWORD v8[8];
  char v9;

  v3 = *v1;
  swift_getKeyPath();
  *(_QWORD *)&v8[0] = v3;
  sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  sub_2365AFA44();
  swift_release();
  v4 = *(os_unfair_lock_s **)(v3 + 16);
  swift_retain();
  os_unfair_lock_lock(v4 + 37);
  sub_236568774((uint64_t)&v4[4], (uint64_t)v8);
  os_unfair_lock_unlock(v4 + 37);
  swift_release();
  v6[6] = v8[6];
  v6[7] = v8[7];
  v6[2] = v8[2];
  v6[3] = v8[3];
  v6[4] = v8[4];
  v6[5] = v8[5];
  v6[0] = v8[0];
  v6[1] = v8[1];
  v7 = v9;
  sub_2365687F8(a1);
  return sub_236484BB0((uint64_t)v6);
}

uint64_t sub_236569CC4()
{
  uint64_t *v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  _OWORD v4[8];
  char v5;
  _OWORD v6[8];
  char v7;
  __int128 v8[4];

  sub_2365B09E0();
  v1 = *v0;
  swift_getKeyPath();
  *(_QWORD *)&v6[0] = v1;
  sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  sub_2365AFA44();
  swift_release();
  v2 = *(os_unfair_lock_s **)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock(v2 + 37);
  sub_236568774((uint64_t)&v2[4], (uint64_t)v6);
  os_unfair_lock_unlock(v2 + 37);
  swift_release();
  v4[6] = v6[6];
  v4[7] = v6[7];
  v4[2] = v6[2];
  v4[3] = v6[3];
  v4[4] = v6[4];
  v4[5] = v6[5];
  v4[0] = v6[0];
  v4[1] = v6[1];
  v5 = v7;
  sub_2365687F8(v8);
  sub_236484BB0((uint64_t)v4);
  return sub_2365B0A34();
}

void RepairModel.State.hash(into:)()
{
  uint64_t v0;

  switch(*(_BYTE *)(v0 + 40))
  {
    case 0xFB:
    case 0xFC:
    case 0xFD:
    case 0xFE:
    case 0xFF:
      sub_2365B09F8();
      break;
    default:
      sub_2365B09F8();
      RepairError.hash(into:)();
      break;
  }
}

uint64_t sub_236569ED0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_236569F00 + 4 * byte_2365C6BB0[*v0]))(0x6C616974696E69, 0xE700000000000000);
}

uint64_t sub_236569F00()
{
  return 0x7075746573;
}

uint64_t sub_236569F14()
{
  return 0x6E69726961706572;
}

uint64_t sub_236569F30()
{
  return 0x64656873696E6966;
}

uint64_t sub_236569F48()
{
  return 0x64656C696166;
}

uint64_t sub_236569F5C()
{
  return 0x7373696D736964;
}

uint64_t sub_236569F70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23656D760(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_236569F94()
{
  sub_23656C208();
  return sub_2365B0AD0();
}

uint64_t sub_236569FBC()
{
  sub_23656C208();
  return sub_2365B0ADC();
}

uint64_t sub_236569FE4()
{
  sub_23656C24C();
  return sub_2365B0AD0();
}

uint64_t sub_23656A00C()
{
  sub_23656C24C();
  return sub_2365B0ADC();
}

uint64_t sub_23656A034()
{
  sub_23656C290();
  return sub_2365B0AD0();
}

uint64_t sub_23656A05C()
{
  sub_23656C290();
  return sub_2365B0ADC();
}

uint64_t sub_23656A084()
{
  sub_23656C2D4();
  return sub_2365B0AD0();
}

uint64_t sub_23656A0AC()
{
  sub_23656C2D4();
  return sub_2365B0ADC();
}

uint64_t sub_23656A0D4()
{
  sub_23656C3A0();
  return sub_2365B0AD0();
}

uint64_t sub_23656A0FC()
{
  sub_23656C3A0();
  return sub_2365B0ADC();
}

uint64_t sub_23656A124()
{
  sub_23656C318();
  return sub_2365B0AD0();
}

uint64_t sub_23656A14C()
{
  sub_23656C318();
  return sub_2365B0ADC();
}

uint64_t sub_23656A174()
{
  sub_23656C35C();
  return sub_2365B0AD0();
}

uint64_t sub_23656A19C()
{
  sub_23656C35C();
  return sub_2365B0ADC();
}

uint64_t RepairModel.State.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC440);
  v49 = *(_QWORD *)(v3 - 8);
  v50 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v48 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC448);
  v52 = *(_QWORD *)(v5 - 8);
  v53 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v51 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC450);
  v46 = *(_QWORD *)(v7 - 8);
  v47 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v45 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC458);
  v43 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v42 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC460);
  v40 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC468);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC470);
  v58 = *(_QWORD *)(v16 - 8);
  v59 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v18 = *(_QWORD *)v1;
  v56 = *(_QWORD *)(v1 + 8);
  v57 = v18;
  v19 = *(_QWORD *)(v1 + 16);
  v54 = *(_QWORD *)(v1 + 24);
  v55 = v19;
  v39 = *(_QWORD *)(v1 + 32);
  v20 = *(unsigned __int8 *)(v1 + 40);
  v21 = a1[3];
  v22 = a1;
  v23 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(v22, v21);
  sub_23656C208();
  sub_2365B0AAC();
  switch(v20)
  {
    case 251:
      LOBYTE(v60) = 5;
      sub_23656C24C();
      v24 = v48;
      v25 = v59;
      sub_2365B07B8();
      v27 = v49;
      v26 = v50;
      goto LABEL_5;
    case 252:
      LOBYTE(v60) = 3;
      sub_23656C2D4();
      v24 = v45;
      v25 = v59;
      sub_2365B07B8();
      v27 = v46;
      v26 = v47;
LABEL_5:
      (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v26);
      goto LABEL_9;
    case 253:
      LOBYTE(v60) = 2;
      sub_23656C318();
      v37 = v42;
      v25 = v59;
      sub_2365B07B8();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v37, v44);
      goto LABEL_9;
    case 254:
      LOBYTE(v60) = 1;
      sub_23656C35C();
      v25 = v59;
      sub_2365B07B8();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v41);
LABEL_9:
      result = (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v23, v25);
      break;
    case 255:
      LOBYTE(v60) = 0;
      sub_23656C3A0();
      v38 = v59;
      sub_2365B07B8();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      result = (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v23, v38);
      break;
    default:
      LOBYTE(v60) = 4;
      v28 = v57;
      v29 = v55;
      v30 = v54;
      v31 = v39;
      sub_236484E9C(v57, v56, v55, v54, v39, v20);
      sub_23656C290();
      v32 = v51;
      v33 = v59;
      sub_2365B07B8();
      v60 = v28;
      v34 = v56;
      v61 = v56;
      v62 = v29;
      v63 = v30;
      v64 = v31;
      v65 = v20;
      sub_236484F40();
      v35 = v53;
      sub_2365B0824();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v32, v35);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v23, v33);
      result = sub_236484C6C(v57, v34, v55, v54, v31, v20);
      break;
  }
  return result;
}

uint64_t RepairModel.State.hashValue.getter()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 40);
  sub_2365B09E0();
  switch(v1)
  {
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
      sub_2365B09F8();
      break;
    default:
      sub_2365B09F8();
      RepairError.hash(into:)();
      break;
  }
  return sub_2365B0A34();
}

uint64_t RepairModel.State.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD v22[4];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;

  v33 = a2;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC4B0);
  v27 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v37 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC4B8);
  v36 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v35 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC4C0);
  v24 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v31 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC4C8);
  v25 = *(_QWORD *)(v6 - 8);
  v26 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v34 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC4D0);
  v22[3] = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v32 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC4D8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC4E0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v38 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v15);
  sub_23656C208();
  v16 = v39;
  sub_2365B0A7C();
  if (!v16)
  {
    v22[0] = v10;
    v22[1] = v9;
    v39 = v12;
    v22[2] = 0;
    v17 = sub_2365B07A0();
    if (*(_QWORD *)(v17 + 16) == 1)
      __asm { BR              X10 }
    v18 = sub_2365B05B4();
    swift_allocError();
    v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E47A8);
    *v20 = &type metadata for RepairModel.State;
    sub_2365B0704();
    sub_2365B059C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v20, *MEMORY[0x24BEE26D0], v18);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v14, v11);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
}

void sub_23656ADFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v3 - 144) = 5;
  sub_23656C24C();
  v4 = *(_QWORD *)(v3 - 288);
  sub_2365B06F8();
  if (v4)
  {
    swift_bridgeObjectRelease();
    JUMPOUT(0x23656ABC4);
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 240) + 8))(v1, *(_QWORD *)(v3 - 216));
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 72) + 8))(v2, v0);
  JUMPOUT(0x23656AEECLL);
}

uint64_t sub_23656AF40@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return RepairModel.State.init(from:)(a1, a2);
}

uint64_t sub_23656AF54(_QWORD *a1)
{
  return RepairModel.State.encode(to:)(a1);
}

void sub_23656AF70()
{
  uint64_t v0;

  switch(*(_BYTE *)(v0 + 40))
  {
    case 0xFB:
    case 0xFC:
    case 0xFD:
    case 0xFE:
    case 0xFF:
      sub_2365B09F8();
      break;
    default:
      sub_2365B09F8();
      RepairError.hash(into:)();
      break;
  }
}

uint64_t sub_23656B030()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 40);
  sub_2365B09E0();
  switch(v1)
  {
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
      sub_2365B09F8();
      break;
    default:
      sub_2365B09F8();
      RepairError.hash(into:)();
      break;
  }
  return sub_2365B0A34();
}

uint64_t sub_23656B118()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _QWORD v6[25];
  char v7;

  v1 = *(_OWORD *)(v0 + 112);
  *(_OWORD *)&v6[21] = *(_OWORD *)(v0 + 96);
  *(_OWORD *)&v6[23] = v1;
  v7 = *(_BYTE *)(v0 + 128);
  v2 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)&v6[13] = *(_OWORD *)(v0 + 32);
  *(_OWORD *)&v6[15] = v2;
  v3 = *(_OWORD *)(v0 + 80);
  *(_OWORD *)&v6[17] = *(_OWORD *)(v0 + 64);
  *(_OWORD *)&v6[19] = v3;
  v4 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)&v6[9] = *(_OWORD *)v0;
  *(_OWORD *)&v6[11] = v4;
  sub_2365B09E0();
  sub_2365687F8((__int128 *)v6);
  return sub_2365B0A34();
}

uint64_t sub_23656B188()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _QWORD v6[25];
  char v7;

  v1 = *(_OWORD *)(v0 + 112);
  *(_OWORD *)&v6[21] = *(_OWORD *)(v0 + 96);
  *(_OWORD *)&v6[23] = v1;
  v7 = *(_BYTE *)(v0 + 128);
  v2 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)&v6[13] = *(_OWORD *)(v0 + 32);
  *(_OWORD *)&v6[15] = v2;
  v3 = *(_OWORD *)(v0 + 80);
  *(_OWORD *)&v6[17] = *(_OWORD *)(v0 + 64);
  *(_OWORD *)&v6[19] = v3;
  v4 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)&v6[9] = *(_OWORD *)v0;
  *(_OWORD *)&v6[11] = v4;
  sub_2365B09E0();
  sub_2365687F8((__int128 *)v6);
  return sub_2365B0A34();
}

uint64_t RepairModel.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;

  v1 = v0;
  v13 = 0xE000000000000000;
  sub_2365B0578();
  v18 = 0;
  v19 = 0xE000000000000000;
  sub_2365B00B0();
  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  sub_2365AFA44();
  swift_release();
  swift_getKeyPath();
  v12 = v0;
  sub_2365AFA44();
  swift_release();
  v2 = *(os_unfair_lock_s **)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock(v2 + 37);
  sub_236567268((uint64_t)&v2[4], (uint64_t)&v12);
  os_unfair_lock_unlock(v2 + 37);
  swift_release();
  IdMSAccount.ID.description.getter();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  swift_getKeyPath();
  v12 = v0;
  sub_2365AFA44();
  swift_release();
  swift_getKeyPath();
  v12 = v0;
  sub_2365AFA44();
  swift_release();
  v3 = *(os_unfair_lock_s **)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock(v3 + 37);
  swift_retain();
  os_unfair_lock_unlock(v3 + 37);
  swift_release();
  SetupModel.description.getter();
  sub_2365B00B0();
  swift_release();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  swift_getKeyPath();
  v12 = v1;
  sub_2365AFA44();
  swift_release();
  swift_getKeyPath();
  v12 = v1;
  sub_2365AFA44();
  swift_release();
  v4 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 148));
  v5 = *(_QWORD *)(v4 + 104);
  v6 = *(_QWORD *)(v4 + 112);
  v7 = *(_QWORD *)(v4 + 120);
  v8 = *(_QWORD *)(v4 + 128);
  v9 = *(_QWORD *)(v4 + 136);
  v10 = *(_BYTE *)(v4 + 144);
  sub_23656C104(v5, v6, v7, v8, v9, v10);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 148));
  swift_release();
  v12 = v5;
  v13 = v6;
  v14 = v7;
  v15 = v8;
  v16 = v9;
  v17 = v10;
  sub_2365B065C();
  sub_236484C6C(v5, v6, v7, v8, v9, v10);
  sub_2365B00B0();
  return v18;
}

uint64_t sub_23656B5CC()
{
  return RepairModel.description.getter();
}

uint64_t static RepairModel._defaultModel.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = _s12AppleIDSetup10SetupModelC08_defaultD0ACvgZ_0();
  type metadata accessor for RepairModel();
  v1 = swift_allocObject();
  sub_2365AFA50();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6A88);
  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 148) = 0;
  *(_QWORD *)(v2 + 16) = 0x20746C7561666544;
  *(_QWORD *)(v2 + 24) = 0xEF44495344746C61;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_QWORD *)(v2 + 96) = v0;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_QWORD *)(v2 + 136) = 0;
  *(_BYTE *)(v2 + 144) = -1;
  *(_QWORD *)(v1 + 16) = v2;
  return v1;
}

uint64_t _s12AppleIDSetup11RepairModelC5StateO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[5];
  char v48;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_BYTE *)(a1 + 40);
  v9 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(unsigned __int8 *)(a2 + 40);
  switch(v7)
  {
    case -5:
      if (v13 != 251)
        goto LABEL_13;
      v14 = *(_QWORD *)(a2 + 16);
      v15 = *(_QWORD *)(a2 + 8);
      sub_236484C6C(*(_QWORD *)a1, v3, v5, v4, v6, 251);
      v16 = v9;
      v17 = v15;
      v18 = v14;
      v19 = v11;
      v20 = v12;
      v21 = -5;
      goto LABEL_15;
    case -4:
      if (v13 != 252)
        goto LABEL_13;
      v31 = *(_QWORD *)(a2 + 16);
      v32 = *(_QWORD *)(a2 + 8);
      sub_236484C6C(*(_QWORD *)a1, v3, v5, v4, v6, 252);
      v16 = v9;
      v17 = v32;
      v18 = v31;
      v19 = v11;
      v20 = v12;
      v21 = -4;
      goto LABEL_15;
    case -3:
      if (v13 != 253)
        goto LABEL_13;
      v33 = *(_QWORD *)(a2 + 16);
      v34 = *(_QWORD *)(a2 + 8);
      sub_236484C6C(*(_QWORD *)a1, v3, v5, v4, v6, 253);
      v16 = v9;
      v17 = v34;
      v18 = v33;
      v19 = v11;
      v20 = v12;
      v21 = -3;
      goto LABEL_15;
    case -2:
      if (v13 != 254)
        goto LABEL_13;
      v35 = *(_QWORD *)(a2 + 16);
      v36 = *(_QWORD *)(a2 + 8);
      sub_236484C6C(*(_QWORD *)a1, v3, v5, v4, v6, 254);
      v16 = v9;
      v17 = v36;
      v18 = v35;
      v19 = v11;
      v20 = v12;
      v21 = -2;
      goto LABEL_15;
    case -1:
      if (v13 != 255)
        goto LABEL_13;
      v39 = *(_QWORD *)(a2 + 16);
      v40 = *(_QWORD *)(a2 + 8);
      sub_236484C6C(*(_QWORD *)a1, v3, v5, v4, v6, 255);
      v16 = v9;
      v17 = v40;
      v18 = v39;
      v19 = v11;
      v20 = v12;
      v21 = -1;
LABEL_15:
      sub_236484C6C(v16, v17, v18, v19, v20, v21);
      v30 = 1;
      break;
    default:
      if (v13 > 0xFA)
      {
LABEL_13:
        v37 = *(_BYTE *)(a2 + 40);
        v44 = *(_QWORD *)a2;
        v46 = *(_QWORD *)(a2 + 8);
        v38 = *(_QWORD *)(a1 + 32);
        sub_23656C104(*(_QWORD *)a2, v46, v10, v11, v12, v13);
        sub_23656C104(v2, v3, v5, v4, v38, v7);
        sub_236484C6C(v2, v3, v5, v4, v38, v7);
        sub_236484C6C(v44, v46, v10, v11, v12, v37);
        v30 = 0;
      }
      else
      {
        v47[0] = *(_QWORD *)a1;
        v47[1] = v3;
        v47[2] = v5;
        v47[3] = v4;
        v22 = v6;
        v47[4] = v6;
        v48 = v7;
        v42 = v10;
        v23 = v10;
        v24 = v11;
        v25 = v11;
        v43 = v13;
        v26 = v8;
        v45 = v8;
        sub_23656C104(v9, v8, v23, v25, v12, v13);
        sub_23656C104(v2, v3, v5, v4, v22, v7);
        v27 = v26;
        v28 = v24;
        sub_23656C104(v9, v27, v42, v24, v12, v43);
        sub_23656C104(v2, v3, v5, v4, v22, v7);
        _s12AppleIDSetup11RepairErrorO2eeoiySbAC_ACtFZ_0((uint64_t)v47);
        v30 = v29;
        sub_236484C6C(v2, v3, v5, v4, v22, v7);
        sub_236484C6C(v9, v45, v42, v28, v12, v43);
        sub_236484C6C(v9, v45, v42, v28, v12, v43);
        sub_236484C6C(v2, v3, v5, v4, v22, v7);
      }
      break;
  }
  return v30 & 1;
}

uint64_t sub_23656BA54(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  char v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  os_unfair_lock_s *v27;
  uint64_t v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  _BYTE v32[4];
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _OWORD v41[2];
  uint64_t v42;
  char v43;
  _OWORD v44[2];
  uint64_t v45;
  char v46;

  v4 = type metadata accessor for SetupModel.ModelData(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = &v32[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v32[-v8];
  v10 = *a1;
  v11 = a1[1];
  v12 = a1[10];
  v13 = *(_OWORD *)(a1 + 11);
  v39 = *(_OWORD *)(a1 + 13);
  v40 = v13;
  v14 = a1[15];
  v15 = *((unsigned __int8 *)a1 + 128);
  v16 = *a2;
  v17 = a2[1];
  v18 = a2[10];
  v19 = *(_OWORD *)(a2 + 11);
  v37 = *(_OWORD *)(a2 + 13);
  v38 = v19;
  v20 = a2[15];
  v21 = *((unsigned __int8 *)a2 + 128);
  if (v10 == v16 && v11 == v17 || (v22 = sub_2365B08CC(), v23 = 0, (v22 & 1) != 0))
  {
    v33 = v21;
    v34 = v20;
    v35 = v15;
    v36 = v14;
    swift_getKeyPath();
    *(_QWORD *)&v44[0] = v12;
    sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
    sub_2365AFA44();
    swift_release();
    v24 = *(_QWORD *)(v12 + 16);
    v25 = (_QWORD *)MEMORY[0x24BEE27A8];
    v26 = v24 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v24 + 16);
    v27 = (os_unfair_lock_s *)(v24 + ((*(unsigned int *)(*(_QWORD *)v24 + 48) + 3) & 0x1FFFFFFFCLL));
    swift_retain();
    os_unfair_lock_lock(v27);
    sub_23657FBD0(v26, (uint64_t)v9);
    os_unfair_lock_unlock(v27);
    swift_release();
    swift_getKeyPath();
    *(_QWORD *)&v44[0] = v18;
    sub_2365AFA44();
    swift_release();
    v28 = *(_QWORD *)(v18 + 16);
    v29 = v28 + *(_QWORD *)(*v25 + *(_QWORD *)v28 + 16);
    v30 = (os_unfair_lock_s *)(v28 + ((*(unsigned int *)(*(_QWORD *)v28 + 48) + 3) & 0x1FFFFFFFCLL));
    swift_retain();
    os_unfair_lock_lock(v30);
    sub_236573588(v29, (uint64_t)v7);
    os_unfair_lock_unlock(v30);
    swift_release();
    LOBYTE(v29) = sub_2365792EC(v9, v7);
    sub_23656D9E4((uint64_t)v7);
    sub_23656D9E4((uint64_t)v9);
    if ((v29 & 1) != 0)
    {
      v44[0] = v40;
      v44[1] = v39;
      v45 = v36;
      v46 = v35;
      v41[0] = v38;
      v41[1] = v37;
      v42 = v34;
      v43 = v33;
      v23 = _s12AppleIDSetup11RepairModelC5StateO2eeoiySbAE_AEtFZ_0((uint64_t)v44, (uint64_t)v41);
    }
    else
    {
      v23 = 0;
    }
  }
  return v23 & 1;
}

uint64_t _s12AppleIDSetup11RepairModelC2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v27[8];
  char v28;
  _OWORD v29[8];
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;
  _OWORD v40[8];
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  char v59;

  swift_getKeyPath();
  *(_QWORD *)&v51 = a1;
  sub_23644F0B8((unint64_t *)&qword_2563E5C98, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  sub_2365AFA44();
  swift_release();
  v4 = *(_QWORD *)(a1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 148));
  v5 = *(_OWORD *)(v4 + 96);
  v6 = *(_OWORD *)(v4 + 112);
  v7 = *(_OWORD *)(v4 + 128);
  v59 = *(_BYTE *)(v4 + 144);
  v57 = v6;
  v58 = v7;
  v8 = *(_OWORD *)(v4 + 32);
  v9 = *(_OWORD *)(v4 + 48);
  v10 = *(_OWORD *)(v4 + 80);
  v54 = *(_OWORD *)(v4 + 64);
  v55 = v10;
  v52 = v8;
  v53 = v9;
  v56 = v5;
  v51 = *(_OWORD *)(v4 + 16);
  v11 = *(_OWORD *)(v4 + 128);
  v48 = *(_OWORD *)(v4 + 112);
  v49 = v11;
  v50 = *(_BYTE *)(v4 + 144);
  v12 = *(_OWORD *)(v4 + 64);
  v44 = *(_OWORD *)(v4 + 48);
  v45 = v12;
  v13 = *(_OWORD *)(v4 + 96);
  v46 = *(_OWORD *)(v4 + 80);
  v47 = v13;
  v14 = *(_OWORD *)(v4 + 32);
  v42 = *(_OWORD *)(v4 + 16);
  v43 = v14;
  sub_23656DA64((uint64_t)&v51);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 148));
  swift_release();
  v40[6] = v48;
  v40[7] = v49;
  v41 = v50;
  v40[2] = v44;
  v40[3] = v45;
  v40[4] = v46;
  v40[5] = v47;
  v40[0] = v42;
  v40[1] = v43;
  swift_getKeyPath();
  *(_QWORD *)&v51 = a2;
  sub_2365AFA44();
  swift_release();
  v15 = *(_QWORD *)(a2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v15 + 148));
  v16 = *(_OWORD *)(v15 + 96);
  v17 = *(_OWORD *)(v15 + 112);
  v18 = *(_OWORD *)(v15 + 128);
  v59 = *(_BYTE *)(v15 + 144);
  v57 = v17;
  v58 = v18;
  v19 = *(_OWORD *)(v15 + 32);
  v20 = *(_OWORD *)(v15 + 48);
  v21 = *(_OWORD *)(v15 + 80);
  v54 = *(_OWORD *)(v15 + 64);
  v55 = v21;
  v52 = v19;
  v53 = v20;
  v56 = v16;
  v51 = *(_OWORD *)(v15 + 16);
  v22 = *(_OWORD *)(v15 + 128);
  v37 = *(_OWORD *)(v15 + 112);
  v38 = v22;
  v39 = *(_BYTE *)(v15 + 144);
  v23 = *(_OWORD *)(v15 + 64);
  v33 = *(_OWORD *)(v15 + 48);
  v34 = v23;
  v24 = *(_OWORD *)(v15 + 96);
  v35 = *(_OWORD *)(v15 + 80);
  v36 = v24;
  v25 = *(_OWORD *)(v15 + 32);
  v31 = *(_OWORD *)(v15 + 16);
  v32 = v25;
  sub_23656DA64((uint64_t)&v51);
  os_unfair_lock_unlock((os_unfair_lock_t)(v15 + 148));
  swift_release();
  v57 = v37;
  v58 = v38;
  v53 = v33;
  v54 = v34;
  v55 = v35;
  v56 = v36;
  v51 = v31;
  v52 = v32;
  v29[6] = v48;
  v29[7] = v49;
  v29[2] = v44;
  v29[3] = v45;
  v29[4] = v46;
  v29[5] = v47;
  v29[0] = v42;
  v29[1] = v43;
  v27[6] = v37;
  v27[7] = v38;
  v27[2] = v33;
  v27[3] = v34;
  v27[4] = v35;
  v27[5] = v36;
  v59 = v39;
  v30 = v50;
  v28 = v39;
  v27[0] = v31;
  v27[1] = v32;
  LOBYTE(v15) = sub_23656BA54((uint64_t *)v29, (uint64_t *)v27);
  sub_236484BB0((uint64_t)&v51);
  sub_236484BB0((uint64_t)v40);
  return v15 & 1;
}

uint64_t type metadata accessor for RepairModel()
{
  uint64_t result;

  result = qword_2563EC530;
  if (!qword_2563EC530)
    return swift_getSingletonMetadata();
  return result;
}

void sub_23656C024()
{
  uint64_t v0;

  sub_2365673B0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_23656C03C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_236567904();
  *a1 = result;
  return result;
}

double sub_23656C068@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;
  char v8;

  sub_236567ED0((uint64_t)v6);
  v2 = v7;
  v3 = v8;
  result = *(double *)v6;
  v5 = v6[1];
  *(_OWORD *)a1 = v6[0];
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = v2;
  *(_BYTE *)(a1 + 40) = v3;
  return result;
}

_OWORD *sub_23656C0B4(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(__int128 *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

uint64_t sub_23656C0CC(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
  return a1;
}

uint64_t sub_23656C104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6 <= 0xFAu)
    return sub_236484E9C(a1, a2, a3, a4, a5, a6);
  return a1;
}

unint64_t sub_23656C118()
{
  unint64_t result;

  result = qword_2563EC410;
  if (!qword_2563EC410)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C7654, &type metadata for RepairModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC410);
  }
  return result;
}

unint64_t sub_23656C15C()
{
  unint64_t result;

  result = qword_2563EC420;
  if (!qword_2563EC420)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairModel.State, &type metadata for RepairModel.State);
    atomic_store(result, (unint64_t *)&qword_2563EC420);
  }
  return result;
}

unint64_t sub_23656C1A0()
{
  unint64_t result;

  result = qword_2563EC438;
  if (!qword_2563EC438)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairModel.State, &type metadata for RepairModel.State);
    atomic_store(result, (unint64_t *)&qword_2563EC438);
  }
  return result;
}

uint64_t sub_23656C1E4()
{
  uint64_t v0;

  return sub_236569508(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_23656C1EC()
{
  return sub_23656972C();
}

unint64_t sub_23656C208()
{
  unint64_t result;

  result = qword_2563EC478;
  if (!qword_2563EC478)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C7604, &type metadata for RepairModel.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC478);
  }
  return result;
}

unint64_t sub_23656C24C()
{
  unint64_t result;

  result = qword_2563EC480;
  if (!qword_2563EC480)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C75B4, &type metadata for RepairModel.State.DismissCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC480);
  }
  return result;
}

unint64_t sub_23656C290()
{
  unint64_t result;

  result = qword_2563EC488;
  if (!qword_2563EC488)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C7564, &type metadata for RepairModel.State.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC488);
  }
  return result;
}

unint64_t sub_23656C2D4()
{
  unint64_t result;

  result = qword_2563EC490;
  if (!qword_2563EC490)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C7514, &type metadata for RepairModel.State.FinishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC490);
  }
  return result;
}

unint64_t sub_23656C318()
{
  unint64_t result;

  result = qword_2563EC498;
  if (!qword_2563EC498)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C74C4, &type metadata for RepairModel.State.RepairingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC498);
  }
  return result;
}

unint64_t sub_23656C35C()
{
  unint64_t result;

  result = qword_2563EC4A0;
  if (!qword_2563EC4A0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C7474, &type metadata for RepairModel.State.SetupCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC4A0);
  }
  return result;
}

unint64_t sub_23656C3A0()
{
  unint64_t result;

  result = qword_2563EC4A8;
  if (!qword_2563EC4A8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C7424, &type metadata for RepairModel.State.InitialCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC4A8);
  }
  return result;
}

uint64_t sub_23656C3E4()
{
  unint64_t v0;

  v0 = sub_2365B06E0();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_23656C42C(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_23644F0B8(&qword_2563E5DC8, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  a1[2] = sub_23644F0B8(&qword_2563E5D20, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  result = sub_23644F0B8(&qword_2563EC4E8, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
  a1[3] = result;
  return result;
}

uint64_t sub_23656C4A4()
{
  return sub_23644F0B8(&qword_2563EC4F0, (uint64_t (*)(uint64_t))type metadata accessor for RepairModel, (uint64_t)&protocol conformance descriptor for RepairModel);
}

unint64_t sub_23656C4D0(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_23656C1A0();
  a1[2] = sub_23656C15C();
  result = sub_23656C504();
  a1[3] = result;
  return result;
}

unint64_t sub_23656C504()
{
  unint64_t result;

  result = qword_2563EC4F8;
  if (!qword_2563EC4F8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairModel.State, &type metadata for RepairModel.State);
    atomic_store(result, (unint64_t *)&qword_2563EC4F8);
  }
  return result;
}

unint64_t sub_23656C54C()
{
  unint64_t result;

  result = qword_2563EC500;
  if (!qword_2563EC500)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for RepairModel.State, &type metadata for RepairModel.State);
    atomic_store(result, (unint64_t *)&qword_2563EC500);
  }
  return result;
}

uint64_t sub_23656C590()
{
  return type metadata accessor for RepairModel();
}

uint64_t sub_23656C598()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2365AFA5C();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for RepairModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RepairModel.accountID.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of RepairModel.accountID.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of RepairModel.accountID.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of RepairModel.setupModel.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of RepairModel.setupModel.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of RepairModel.setupModel.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of RepairModel.state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of RepairModel.state.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of RepairModel.state.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of RepairModel.__allocating_init(accountID:setupModel:state:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of RepairModel.hash(into:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of RepairModel.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of RepairModel.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of RepairModel.update(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of RepairModel.hashValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t destroy for RepairModel.State(uint64_t result)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(result + 40);
  if (v1 <= 4)
    return sub_236484C80(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_QWORD *)(result + 16), *(_QWORD *)(result + 24), *(_QWORD *)(result + 32), v1);
  return result;
}

uint64_t initializeWithCopy for RepairModel.State(uint64_t a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v3 = *((unsigned __int8 *)a2 + 40);
  if (v3 > 4)
  {
    v9 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  }
  else
  {
    v4 = *a2;
    v5 = a2[1];
    v6 = a2[2];
    v7 = a2[3];
    v8 = a2[4];
    sub_236484E9C(*a2, v5, v6, v7, v8, v3);
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v8;
    *(_BYTE *)(a1 + 40) = v3;
  }
  return a1;
}

uint64_t assignWithCopy for RepairModel.State(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;

  v4 = *(unsigned __int8 *)(a1 + 40);
  v5 = *((unsigned __int8 *)a2 + 40);
  if (v4 > 4)
  {
    if (v5 <= 4)
    {
      v17 = *(_QWORD *)a2;
      v18 = *((_QWORD *)a2 + 1);
      v19 = *((_QWORD *)a2 + 2);
      v20 = *((_QWORD *)a2 + 3);
      v21 = *((_QWORD *)a2 + 4);
      sub_236484E9C(*(_QWORD *)a2, v18, v19, v20, v21, v5);
      *(_QWORD *)a1 = v17;
      *(_QWORD *)(a1 + 8) = v18;
      *(_QWORD *)(a1 + 16) = v19;
      *(_QWORD *)(a1 + 24) = v20;
      *(_QWORD *)(a1 + 32) = v21;
      *(_BYTE *)(a1 + 40) = v5;
      return a1;
    }
LABEL_7:
    v22 = *a2;
    v23 = a2[1];
    *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
    *(_OWORD *)a1 = v22;
    *(_OWORD *)(a1 + 16) = v23;
    return a1;
  }
  if (v5 > 4)
  {
    sub_236484C80(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v4);
    goto LABEL_7;
  }
  v6 = *(_QWORD *)a2;
  v7 = *((_QWORD *)a2 + 1);
  v8 = *((_QWORD *)a2 + 2);
  v9 = *((_QWORD *)a2 + 3);
  v10 = *((_QWORD *)a2 + 4);
  sub_236484E9C(*(_QWORD *)a2, v7, v8, v9, v10, v5);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  v16 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v5;
  sub_236484C80(v11, v12, v13, v14, v15, v16);
  return a1;
}

uint64_t assignWithTake for RepairModel.State(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v4 = *(unsigned __int8 *)(a1 + 40);
  if (v4 > 4)
    goto LABEL_5;
  v5 = *(unsigned __int8 *)(a2 + 40);
  if (v5 > 4)
  {
    sub_236484C80(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v4);
LABEL_5:
    v13 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v13;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    return a1;
  }
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v5;
  sub_236484C80(v7, v8, v9, v10, v11, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for RepairModel.State(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF7 && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 247);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 > 4)
    v4 = (v3 ^ 0xFF) + 1;
  else
    v4 = 0;
  if (v4 >= 6)
    return v4 - 5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for RepairModel.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF6)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 247;
    if (a3 >= 0xF7)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xF7)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -5 - a2;
  }
  return result;
}

uint64_t sub_23656C9C4(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 > 4)
    return (v1 ^ 0xFF) + 1;
  else
    return 0;
}

double sub_23656C9D8(uint64_t a1, unsigned int a2)
{
  double result;

  if (a2 > 0xFB)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_BYTE *)(a1 + 40) = 0;
    *(_QWORD *)a1 = a2 - 252;
  }
  else if (a2)
  {
    *(_BYTE *)(a1 + 40) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RepairModel.State()
{
  return &type metadata for RepairModel.State;
}

uint64_t storeEnumTagSinglePayload for RepairModel.State.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23656CA68 + 4 * byte_2365C6BE2[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23656CA9C + 4 * byte_2365C6BDD[v4]))();
}

uint64_t sub_23656CA9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23656CAA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23656CAACLL);
  return result;
}

uint64_t sub_23656CAB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23656CAC0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23656CAC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23656CACC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RepairModel.State.CodingKeys()
{
  return &type metadata for RepairModel.State.CodingKeys;
}

ValueMetadata *type metadata accessor for RepairModel.State.InitialCodingKeys()
{
  return &type metadata for RepairModel.State.InitialCodingKeys;
}

ValueMetadata *type metadata accessor for RepairModel.State.SetupCodingKeys()
{
  return &type metadata for RepairModel.State.SetupCodingKeys;
}

ValueMetadata *type metadata accessor for RepairModel.State.RepairingCodingKeys()
{
  return &type metadata for RepairModel.State.RepairingCodingKeys;
}

ValueMetadata *type metadata accessor for RepairModel.State.FinishedCodingKeys()
{
  return &type metadata for RepairModel.State.FinishedCodingKeys;
}

uint64_t storeEnumTagSinglePayload for RepairModel.State.FailedCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23656CB68 + 4 * byte_2365C6BE7[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23656CB88 + 4 * byte_2365C6BEC[v4]))();
}

_BYTE *sub_23656CB68(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23656CB88(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23656CB90(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23656CB98(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23656CBA0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23656CBA8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for RepairModel.State.FailedCodingKeys()
{
  return &type metadata for RepairModel.State.FailedCodingKeys;
}

ValueMetadata *type metadata accessor for RepairModel.State.DismissCodingKeys()
{
  return &type metadata for RepairModel.State.DismissCodingKeys;
}

uint64_t storeEnumTagSinglePayload for RepairModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23656CC20 + 4 * byte_2365C6BF6[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23656CC54 + 4 * byte_2365C6BF1[v4]))();
}

uint64_t sub_23656CC54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23656CC5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23656CC64);
  return result;
}

uint64_t sub_23656CC70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23656CC78);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23656CC7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23656CC84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RepairModel.CodingKeys()
{
  return &type metadata for RepairModel.CodingKeys;
}

uint64_t destroy for RepairModel.ModelData(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_release();
  v3 = *(unsigned __int8 *)(a1 + 128);
  if (v3 <= 0xFA)
    return sub_236484C80(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), v3);
  return result;
}

uint64_t initializeWithCopy for RepairModel.ModelData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v9 = *(unsigned __int8 *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v9 <= 0xFA)
  {
    v11 = *(_QWORD *)(a2 + 88);
    v12 = *(_QWORD *)(a2 + 96);
    v13 = *(_QWORD *)(a2 + 104);
    v14 = *(_QWORD *)(a2 + 112);
    v15 = *(_QWORD *)(a2 + 120);
    sub_236484E9C(v11, v12, v13, v14, v15, v9);
    *(_QWORD *)(a1 + 88) = v11;
    *(_QWORD *)(a1 + 96) = v12;
    *(_QWORD *)(a1 + 104) = v13;
    *(_QWORD *)(a1 + 112) = v14;
    *(_QWORD *)(a1 + 120) = v15;
    *(_BYTE *)(a1 + 128) = v9;
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v10;
    *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
  }
  return a1;
}

uint64_t assignWithCopy for RepairModel.ModelData(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_retain();
  swift_release();
  v4 = (_OWORD *)(a1 + 88);
  v5 = (_OWORD *)(a2 + 88);
  v6 = *(unsigned __int8 *)(a2 + 128);
  if (*(unsigned __int8 *)(a1 + 128) <= 0xFAu)
  {
    if (v6 <= 0xFA)
    {
      v16 = *(_QWORD *)(a2 + 88);
      v17 = *(_QWORD *)(a2 + 96);
      v18 = *(_QWORD *)(a2 + 104);
      v19 = *(_QWORD *)(a2 + 112);
      v20 = *(_QWORD *)(a2 + 120);
      sub_236484E9C(v16, v17, v18, v19, v20, v6);
      v21 = *(_QWORD *)(a1 + 88);
      v22 = *(_QWORD *)(a1 + 96);
      v23 = *(_QWORD *)(a1 + 104);
      v24 = *(_QWORD *)(a1 + 112);
      v25 = *(_QWORD *)(a1 + 120);
      *(_QWORD *)(a1 + 88) = v16;
      *(_QWORD *)(a1 + 96) = v17;
      *(_QWORD *)(a1 + 104) = v18;
      *(_QWORD *)(a1 + 112) = v19;
      *(_QWORD *)(a1 + 120) = v20;
      v26 = *(_BYTE *)(a1 + 128);
      *(_BYTE *)(a1 + 128) = v6;
      sub_236484C80(v21, v22, v23, v24, v25, v26);
    }
    else
    {
      sub_23656CFDC(a1 + 88);
      v9 = *(_OWORD *)(a2 + 113);
      v10 = *(_OWORD *)(a2 + 104);
      *v4 = *v5;
      *(_OWORD *)(a1 + 104) = v10;
      *(_OWORD *)(a1 + 113) = v9;
    }
  }
  else if (v6 <= 0xFA)
  {
    v11 = *(_QWORD *)(a2 + 88);
    v12 = *(_QWORD *)(a2 + 96);
    v13 = *(_QWORD *)(a2 + 104);
    v14 = *(_QWORD *)(a2 + 112);
    v15 = *(_QWORD *)(a2 + 120);
    sub_236484E9C(v11, v12, v13, v14, v15, v6);
    *(_QWORD *)(a1 + 88) = v11;
    *(_QWORD *)(a1 + 96) = v12;
    *(_QWORD *)(a1 + 104) = v13;
    *(_QWORD *)(a1 + 112) = v14;
    *(_QWORD *)(a1 + 120) = v15;
    *(_BYTE *)(a1 + 128) = v6;
  }
  else
  {
    v7 = *v5;
    v8 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
    *v4 = v7;
    *(_OWORD *)(a1 + 104) = v8;
  }
  return a1;
}

uint64_t sub_23656CFDC(uint64_t a1)
{
  destroy for RepairError(a1);
  return a1;
}

uint64_t assignWithTake for RepairModel.ModelData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_release();
  v9 = *(unsigned __int8 *)(a1 + 128);
  if (v9 <= 0xFA)
  {
    v10 = *(unsigned __int8 *)(a2 + 128);
    if (v10 <= 0xFA)
    {
      v12 = *(_QWORD *)(a2 + 120);
      v13 = *(_QWORD *)(a1 + 88);
      v14 = *(_QWORD *)(a1 + 96);
      v15 = *(_QWORD *)(a1 + 104);
      v16 = *(_QWORD *)(a1 + 112);
      v17 = *(_QWORD *)(a1 + 120);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 120) = v12;
      *(_BYTE *)(a1 + 128) = v10;
      sub_236484C80(v13, v14, v15, v16, v17, v9);
      return a1;
    }
    sub_23656CFDC(a1 + 88);
  }
  v11 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v11;
  *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
  return a1;
}

uint64_t getEnumTagSinglePayload for RepairModel.ModelData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 129))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RepairModel.ModelData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 128) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 129) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 129) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RepairModel.ModelData()
{
  return &type metadata for RepairModel.ModelData;
}

unint64_t sub_23656D1C4()
{
  unint64_t result;

  result = qword_2563EC678;
  if (!qword_2563EC678)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C700C, &type metadata for RepairModel.ModelData);
    atomic_store(result, (unint64_t *)&qword_2563EC678);
  }
  return result;
}

unint64_t sub_23656D20C()
{
  unint64_t result;

  result = qword_2563EC680;
  if (!qword_2563EC680)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C70FC, &type metadata for RepairModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC680);
  }
  return result;
}

unint64_t sub_23656D254()
{
  unint64_t result;

  result = qword_2563EC688;
  if (!qword_2563EC688)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C7204, &type metadata for RepairModel.State.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC688);
  }
  return result;
}

unint64_t sub_23656D29C()
{
  unint64_t result;

  result = qword_2563EC690;
  if (!qword_2563EC690)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C73FC, &type metadata for RepairModel.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC690);
  }
  return result;
}

unint64_t sub_23656D2E4()
{
  unint64_t result;

  result = qword_2563EC698;
  if (!qword_2563EC698)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C731C, &type metadata for RepairModel.State.InitialCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC698);
  }
  return result;
}

unint64_t sub_23656D32C()
{
  unint64_t result;

  result = qword_2563EC6A0;
  if (!qword_2563EC6A0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C7344, &type metadata for RepairModel.State.InitialCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC6A0);
  }
  return result;
}

unint64_t sub_23656D374()
{
  unint64_t result;

  result = qword_2563EC6A8;
  if (!qword_2563EC6A8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C72CC, &type metadata for RepairModel.State.SetupCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC6A8);
  }
  return result;
}

unint64_t sub_23656D3BC()
{
  unint64_t result;

  result = qword_2563EC6B0;
  if (!qword_2563EC6B0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C72F4, &type metadata for RepairModel.State.SetupCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC6B0);
  }
  return result;
}

unint64_t sub_23656D404()
{
  unint64_t result;

  result = qword_2563EC6B8;
  if (!qword_2563EC6B8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C727C, &type metadata for RepairModel.State.RepairingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC6B8);
  }
  return result;
}

unint64_t sub_23656D44C()
{
  unint64_t result;

  result = qword_2563EC6C0;
  if (!qword_2563EC6C0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C72A4, &type metadata for RepairModel.State.RepairingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC6C0);
  }
  return result;
}

unint64_t sub_23656D494()
{
  unint64_t result;

  result = qword_2563EC6C8;
  if (!qword_2563EC6C8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C722C, &type metadata for RepairModel.State.FinishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC6C8);
  }
  return result;
}

unint64_t sub_23656D4DC()
{
  unint64_t result;

  result = qword_2563EC6D0;
  if (!qword_2563EC6D0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C7254, &type metadata for RepairModel.State.FinishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC6D0);
  }
  return result;
}

unint64_t sub_23656D524()
{
  unint64_t result;

  result = qword_2563EC6D8;
  if (!qword_2563EC6D8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C7174, &type metadata for RepairModel.State.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC6D8);
  }
  return result;
}

unint64_t sub_23656D56C()
{
  unint64_t result;

  result = qword_2563EC6E0;
  if (!qword_2563EC6E0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C719C, &type metadata for RepairModel.State.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC6E0);
  }
  return result;
}

unint64_t sub_23656D5B4()
{
  unint64_t result;

  result = qword_2563EC6E8;
  if (!qword_2563EC6E8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C7124, &type metadata for RepairModel.State.DismissCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC6E8);
  }
  return result;
}

unint64_t sub_23656D5FC()
{
  unint64_t result;

  result = qword_2563EC6F0;
  if (!qword_2563EC6F0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C714C, &type metadata for RepairModel.State.DismissCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC6F0);
  }
  return result;
}

unint64_t sub_23656D644()
{
  unint64_t result;

  result = qword_2563EC6F8;
  if (!qword_2563EC6F8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C736C, &type metadata for RepairModel.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC6F8);
  }
  return result;
}

unint64_t sub_23656D68C()
{
  unint64_t result;

  result = qword_2563EC700;
  if (!qword_2563EC700)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C7394, &type metadata for RepairModel.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC700);
  }
  return result;
}

unint64_t sub_23656D6D4()
{
  unint64_t result;

  result = qword_2563EC708;
  if (!qword_2563EC708)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C7034, &type metadata for RepairModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC708);
  }
  return result;
}

unint64_t sub_23656D71C()
{
  unint64_t result;

  result = qword_2563EC710;
  if (!qword_2563EC710)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C705C, &type metadata for RepairModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC710);
  }
  return result;
}

uint64_t sub_23656D760(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C616974696E69 && a2 == 0xE700000000000000;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7075746573 && a2 == 0xE500000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E69726961706572 && a2 == 0xE900000000000067 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x64656873696E6966 && a2 == 0xE800000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x64656C696166 && a2 == 0xE600000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x7373696D736964 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_23656D9E4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SetupModel.ModelData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23656DA20()
{
  return sub_2365697F0();
}

uint64_t sub_23656DA3C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_23656DA64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 88);
  v3 = *(_QWORD *)(a1 + 96);
  v4 = *(_QWORD *)(a1 + 104);
  v5 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 120);
  v7 = *(_BYTE *)(a1 + 128);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23656C104(v2, v3, v4, v5, v8, v7);
  return a1;
}

void sub_23656DB20()
{
  sub_23656C024();
}

void sub_23656DB34()
{
  sub_236495D88();
}

uint64_t SignOutType.init(rawValue:)()
{
  return 0;
}

_QWORD *sub_23656DB5C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;

  v2 = *result != 0;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t static SignOutContext.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t SignOutContext.accountAltDSIDsByService.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SignOutContext.shouldRemoveDeviceUser.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___AISSignOutContext_shouldRemoveDeviceUser);
}

uint64_t sub_23656DC84()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  unint64_t v3;
  char v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___AISSignOutContext_accountAltDSIDsByService);
  if (!*(_QWORD *)(v1 + 16))
    return 0;
  v2 = (id)*MEMORY[0x24BE06080];
  v3 = sub_236468578((uint64_t)v2);
  if ((v4 & 1) != 0)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 16 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t SignOutContext.machineIdToSignOut.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___AISSignOutContext_machineIdToSignOut);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignOutContext.type.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___AISSignOutContext_type);
}

void sub_23656DDC0(void *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;

  type metadata accessor for AIDAServiceType(0);
  sub_2364D6150();
  v3 = (void *)sub_2365AFF48();
  v4 = (void *)sub_2365B0038();
  objc_msgSend(a1, sel_encodeObject_forKey_, v3, v4);

  if (*(_QWORD *)(v1 + OBJC_IVAR___AISSignOutContext_machineIdToSignOut + 8))
    v5 = sub_2365B0038();
  else
    v5 = 0;
  v6 = (void *)sub_2365B0038();
  objc_msgSend(a1, sel_encodeObject_forKey_, v5, v6);
  swift_unknownObjectRelease();

  v7 = *(_QWORD *)(v1 + OBJC_IVAR___AISSignOutContext_type);
  v8 = (void *)sub_2365B0038();
  objc_msgSend(a1, sel_encodeInteger_forKey_, v7, v8);

  v9 = *(unsigned __int8 *)(v1 + OBJC_IVAR___AISSignOutContext_shouldRemoveDeviceUser);
  v10 = (id)sub_2365B0038();
  objc_msgSend(a1, sel_encodeBool_forKey_, v9, v10);

}

id SignOutContext.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_23656EF30(a1);

  return v4;
}

id SignOutContext.init(coder:)(void *a1)
{
  id v2;

  v2 = sub_23656EF30(a1);

  return v2;
}

uint64_t sub_23656E014(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  int64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  int64_t v28;
  uint64_t v29;
  _BYTE v31[72];
  void *v32;
  uint64_t v33;
  _OWORD v34[2];
  _OWORD v35[2];
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[2];
  uint64_t v39;

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC790);
    v1 = sub_2365B06BC();
  }
  else
  {
    v1 = MEMORY[0x24BEE4B00];
  }
  v29 = a1 + 64;
  v2 = -1 << *(_BYTE *)(a1 + 32);
  if (-v2 < 64)
    v3 = ~(-1 << -(char)v2);
  else
    v3 = -1;
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v2) >> 6;
  v5 = v1 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v7 = 0;
  while (1)
  {
    if (v4)
    {
      v10 = (v4 - 1) & v4;
      v11 = __clz(__rbit64(v4)) | (v7 << 6);
      v12 = v7;
      goto LABEL_28;
    }
    v13 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if (v13 >= v28)
      goto LABEL_42;
    v14 = *(_QWORD *)(v29 + 8 * v13);
    v12 = v7 + 1;
    if (!v14)
    {
      v12 = v7 + 2;
      if (v7 + 2 >= v28)
        goto LABEL_42;
      v14 = *(_QWORD *)(v29 + 8 * v12);
      if (!v14)
      {
        v12 = v7 + 3;
        if (v7 + 3 >= v28)
          goto LABEL_42;
        v14 = *(_QWORD *)(v29 + 8 * v12);
        if (!v14)
        {
          v12 = v7 + 4;
          if (v7 + 4 >= v28)
            goto LABEL_42;
          v14 = *(_QWORD *)(v29 + 8 * v12);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v10 = (v14 - 1) & v14;
    v11 = __clz(__rbit64(v14)) + (v12 << 6);
LABEL_28:
    sub_23646C3E8(*(_QWORD *)(a1 + 48) + 40 * v11, (uint64_t)v37);
    sub_23646A9F4(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)v38 + 8);
    v35[0] = v38[0];
    v35[1] = v38[1];
    v36 = v39;
    v34[0] = v37[0];
    v34[1] = v37[1];
    sub_23646C3E8((uint64_t)v34, (uint64_t)v31);
    type metadata accessor for AIDAServiceType(0);
    if (!swift_dynamicCast())
    {
      v32 = 0;
      sub_23656F25C((uint64_t)v34);
      v27 = v32;
      swift_release();

      goto LABEL_41;
    }
    v16 = v32;
    sub_23646A9F4((uint64_t)v35 + 8, (uint64_t)v31);
    sub_23656F25C((uint64_t)v34);
    if ((swift_dynamicCast() & 1) == 0)
    {
      v32 = 0;
      v33 = 0;

      swift_release();
      swift_bridgeObjectRelease();
LABEL_41:
      sub_23646C39C();
      swift_release();
      return 0;
    }
    v18 = v32;
    v17 = v33;
    sub_2365B005C();
    sub_2365B09E0();
    sub_2365B008C();
    v19 = sub_2365B0A34();
    result = swift_bridgeObjectRelease();
    v20 = -1 << *(_BYTE *)(v1 + 32);
    v21 = v19 & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v5 + 8 * (v21 >> 6))) != 0)
    {
      v8 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v5 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v5 + 8 * v22);
      }
      while (v26 == -1);
      v8 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v5 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v8) = v16;
    v9 = (_QWORD *)(*(_QWORD *)(v1 + 56) + 16 * v8);
    *v9 = v18;
    v9[1] = v17;
    ++*(_QWORD *)(v1 + 16);
    v7 = v12;
    v4 = v10;
  }
  v15 = v7 + 5;
  if (v7 + 5 >= v28)
  {
LABEL_42:
    swift_release();
    sub_23646C39C();
    return v1;
  }
  v14 = *(_QWORD *)(v29 + 8 * v15);
  if (v14)
  {
    v12 = v7 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v12 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v12 >= v28)
      goto LABEL_42;
    v14 = *(_QWORD *)(v29 + 8 * v12);
    ++v15;
    if (v14)
      goto LABEL_27;
  }
LABEL_45:
  __break(1u);
  return result;
}

id SignOutContext.__allocating_init(accountAltDSIDsByService:)(uint64_t a1)
{
  objc_class *v1;
  id v3;
  objc_class *v4;
  _BYTE *v5;
  _QWORD *v6;
  id v7;
  objc_super v9;

  v3 = objc_allocWithZone(v1);
  v4 = (objc_class *)type metadata accessor for SignOutContext();
  v5 = objc_allocWithZone(v4);
  *(_QWORD *)&v5[OBJC_IVAR___AISSignOutContext_accountAltDSIDsByService] = a1;
  v6 = &v5[OBJC_IVAR___AISSignOutContext_machineIdToSignOut];
  *v6 = 0;
  v6[1] = 0;
  *(_QWORD *)&v5[OBJC_IVAR___AISSignOutContext_type] = 0;
  v5[OBJC_IVAR___AISSignOutContext_shouldRemoveDeviceUser] = 0;
  v9.receiver = v5;
  v9.super_class = v4;
  v7 = objc_msgSendSuper2(&v9, sel_init);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v7;
}

id SignOutContext.init(accountAltDSIDsByService:)(uint64_t a1)
{
  objc_class *v2;
  _BYTE *v3;
  _QWORD *v4;
  id v5;
  objc_super v7;

  v2 = (objc_class *)type metadata accessor for SignOutContext();
  v3 = objc_allocWithZone(v2);
  *(_QWORD *)&v3[OBJC_IVAR___AISSignOutContext_accountAltDSIDsByService] = a1;
  v4 = &v3[OBJC_IVAR___AISSignOutContext_machineIdToSignOut];
  *v4 = 0;
  v4[1] = 0;
  *(_QWORD *)&v3[OBJC_IVAR___AISSignOutContext_type] = 0;
  v3[OBJC_IVAR___AISSignOutContext_shouldRemoveDeviceUser] = 0;
  v7.receiver = v3;
  v7.super_class = v2;
  v5 = objc_msgSendSuper2(&v7, sel_init);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v5;
}

id SignOutContext.__allocating_init(accountAltDSIDsByService:machineIdToSignOut:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_class *v4;
  _BYTE *v9;
  _QWORD *v10;
  objc_super v12;

  v9 = objc_allocWithZone(v4);
  *(_QWORD *)&v9[OBJC_IVAR___AISSignOutContext_accountAltDSIDsByService] = a1;
  v10 = &v9[OBJC_IVAR___AISSignOutContext_machineIdToSignOut];
  *v10 = a2;
  v10[1] = a3;
  *(_QWORD *)&v9[OBJC_IVAR___AISSignOutContext_type] = a4;
  v9[OBJC_IVAR___AISSignOutContext_shouldRemoveDeviceUser] = 0;
  v12.receiver = v9;
  v12.super_class = v4;
  return objc_msgSendSuper2(&v12, sel_init);
}

id SignOutContext.init(accountAltDSIDsByService:machineIdToSignOut:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v4;
  _QWORD *v5;
  objc_super v7;

  *(_QWORD *)&v4[OBJC_IVAR___AISSignOutContext_accountAltDSIDsByService] = a1;
  v5 = &v4[OBJC_IVAR___AISSignOutContext_machineIdToSignOut];
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)&v4[OBJC_IVAR___AISSignOutContext_type] = a4;
  v4[OBJC_IVAR___AISSignOutContext_shouldRemoveDeviceUser] = 0;
  v7.receiver = v4;
  v7.super_class = (Class)type metadata accessor for SignOutContext();
  return objc_msgSendSuper2(&v7, sel_init);
}

id SignOutContext.__allocating_init(deviceUserCloudAltDSID:machineIdToSignOut:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_class *v4;
  id v9;

  v9 = objc_allocWithZone(v4);
  return SignOutContext.init(deviceUserCloudAltDSID:machineIdToSignOut:)(a1, a2, a3, a4);
}

id SignOutContext.init(deviceUserCloudAltDSID:machineIdToSignOut:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t inited;
  void *v10;
  _BYTE *v11;
  id v12;
  _QWORD *v13;
  objc_super v15;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC748);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2365B6A20;
  v10 = (void *)*MEMORY[0x24BE06080];
  *(_QWORD *)(inited + 32) = *MEMORY[0x24BE06080];
  *(_QWORD *)(inited + 40) = a1;
  *(_QWORD *)(inited + 48) = a2;
  v11 = v4;
  v12 = v10;
  *(_QWORD *)&v11[OBJC_IVAR___AISSignOutContext_accountAltDSIDsByService] = sub_236466E24(inited);
  v13 = &v11[OBJC_IVAR___AISSignOutContext_machineIdToSignOut];
  *v13 = a3;
  v13[1] = a4;
  *(_QWORD *)&v11[OBJC_IVAR___AISSignOutContext_type] = 0;
  v11[OBJC_IVAR___AISSignOutContext_shouldRemoveDeviceUser] = 1;

  v15.receiver = v11;
  v15.super_class = (Class)type metadata accessor for SignOutContext();
  return objc_msgSendSuper2(&v15, sel_init);
}

id sub_23656E8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t inited;
  void *v11;
  id v12;
  unint64_t v13;
  objc_class *v14;
  _BYTE *v15;
  _QWORD *v16;
  id v17;
  objc_super v19;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC748);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2365B6A20;
  v11 = (void *)*MEMORY[0x24BE06080];
  *(_QWORD *)(inited + 32) = *MEMORY[0x24BE06080];
  *(_QWORD *)(inited + 40) = a1;
  *(_QWORD *)(inited + 48) = a2;
  v12 = v11;
  v13 = sub_236466E24(inited);
  v14 = (objc_class *)type metadata accessor for SignOutContext();
  v15 = objc_allocWithZone(v14);
  *(_QWORD *)&v15[OBJC_IVAR___AISSignOutContext_accountAltDSIDsByService] = v13;
  v16 = &v15[OBJC_IVAR___AISSignOutContext_machineIdToSignOut];
  *v16 = a3;
  v16[1] = a4;
  *(_QWORD *)&v15[OBJC_IVAR___AISSignOutContext_type] = a5;
  v15[OBJC_IVAR___AISSignOutContext_shouldRemoveDeviceUser] = 0;
  v19.receiver = v15;
  v19.super_class = v14;
  v17 = objc_msgSendSuper2(&v19, sel_init);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v17;
}

id _s12AppleIDSetup14SignOutContextC7altDSID4typeACSS_AA0cD4TypeOtcfC_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  id v5;
  void *v6;
  id v7;

  v5 = objc_allocWithZone(v3);
  v6 = (void *)sub_2365B0038();
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v5, sel_initWithAltDSID_machineIdToSignOut_type_, v6, 0, a3);

  return v7;
}

id _s12AppleIDSetup14SignOutContextC7altDSID4typeACSS_AA0cD4TypeOtcfc_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v5;
  id v6;

  v5 = (void *)sub_2365B0038();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v3, sel_initWithAltDSID_machineIdToSignOut_type_, v5, 0, a3);

  return v6;
}

id SignOutContext.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SignOutContext.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SignOutContext.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SignOutContext();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t SignOutContext.description.getter()
{
  sub_2365B0578();
  sub_2365B00B0();
  sub_2365B065C();
  sub_2365B00B0();
  type metadata accessor for AIDAServiceType(0);
  sub_2364D6150();
  swift_bridgeObjectRetain();
  sub_2365AFF6C();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  sub_2365B08B4();
  sub_2365B00B0();
  sub_2365B0860();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  return 0;
}

id sub_23656EF30(void *a1)
{
  void *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  void *v15;
  id v16;
  void *v17;
  objc_super v19;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2563EC780);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_2365B6A20;
  v4 = sub_23656F220();
  *(_QWORD *)(v3 + 32) = v4;
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2365B6A20;
  *(_QWORD *)(v5 + 32) = v4;
  v6 = v1;
  v7 = sub_2365B0428();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v7 || (v8 = sub_23656E014(v7), swift_bridgeObjectRelease(), !v8))
  {
    v8 = sub_236466E24(MEMORY[0x24BEE4AF8]);
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)&v6[OBJC_IVAR___AISSignOutContext_accountAltDSIDsByService] = v8;
  v9 = sub_2365B041C();
  if (v9)
  {
    v10 = (void *)v9;
    v11 = sub_2365B005C();
    v13 = v12;

  }
  else
  {
    v11 = 0;
    v13 = 0;
  }
  v14 = (uint64_t *)&v6[OBJC_IVAR___AISSignOutContext_machineIdToSignOut];
  *v14 = v11;
  v14[1] = v13;
  v15 = (void *)sub_2365B0038();
  v16 = objc_msgSend(a1, sel_decodeIntegerForKey_, v15);

  *(_QWORD *)&v6[OBJC_IVAR___AISSignOutContext_type] = v16;
  v17 = (void *)sub_2365B0038();
  LOBYTE(v16) = objc_msgSend(a1, sel_decodeBoolForKey_, v17);

  v6[OBJC_IVAR___AISSignOutContext_shouldRemoveDeviceUser] = (_BYTE)v16;
  v19.receiver = v6;
  v19.super_class = (Class)type metadata accessor for SignOutContext();
  return objc_msgSendSuper2(&v19, sel_init);
}

uint64_t type metadata accessor for SignOutContext()
{
  return objc_opt_self();
}

unint64_t sub_23656F170()
{
  unint64_t result;

  result = qword_2563EC750;
  if (!qword_2563EC750)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for SignOutType, &type metadata for SignOutType);
    atomic_store(result, (unint64_t *)&qword_2563EC750);
  }
  return result;
}

ValueMetadata *type metadata accessor for SignOutType()
{
  return &type metadata for SignOutType;
}

uint64_t method lookup function for SignOutContext()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SignOutContext.altDSID.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SignOutContext.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of SignOutContext.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of SignOutContext.__allocating_init(accountAltDSIDsByService:machineIdToSignOut:type:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of SignOutContext.__allocating_init(deviceUserCloudAltDSID:machineIdToSignOut:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

unint64_t sub_23656F220()
{
  unint64_t result;

  result = qword_2563EA398;
  if (!qword_2563EA398)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2563EA398);
  }
  return result;
}

uint64_t sub_23656F25C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC798);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23656F29C(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000014;
  else
    v3 = 0x4F64696C61766E69;
  if (v2)
    v4 = 0xEE00736E6F697470;
  else
    v4 = 0x80000002365CB1C0;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000014;
  else
    v5 = 0x4F64696C61766E69;
  if ((a2 & 1) != 0)
    v6 = 0x80000002365CB1C0;
  else
    v6 = 0xEE00736E6F697470;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2365B08CC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_23656F350(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_23656F3B4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23656F4A4 + 4 * byte_2365C77B8[a2]))(0x6950796C696D6166);
}

uint64_t sub_23656F4A4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6950796C696D6166 && v1 == 0xEC00000072656B63)
    v2 = 1;
  else
    v2 = sub_2365B08CC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_23656F5F8(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xE900000000000044;
  v3 = 0x49746E756F636361;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x646F4D7075746573;
    else
      v5 = 0x6574617473;
    if (v4 == 1)
      v6 = 0xEA00000000006C65;
    else
      v6 = 0xE500000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x49746E756F636361;
  v6 = 0xE900000000000044;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x646F4D7075746573;
    else
      v3 = 0x6574617473;
    if (v7 == 1)
      v2 = 0xEA00000000006C65;
    else
      v2 = 0xE500000000000000;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_2365B08CC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_23656F710(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_23656F76C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23656F814 + 4 * byte_2365C77C6[a2]))(0x6F5265746F6D6572);
}

uint64_t sub_23656F814(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6F5265746F6D6572 && v1 == 0xEA0000000000656CLL)
    v2 = 1;
  else
    v2 = sub_2365B08CC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_23656F910(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_23656F960(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23656FA0C + 4 * byte_2365C77D2[a2]))(0x65746E4972657375);
}

uint64_t sub_23656FA0C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x65746E4972657375 && v1 == 0xEF6E6F6974636172)
    v2 = 1;
  else
    v2 = sub_2365B08CC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_23656FB08(char a1)
{
  sub_2365B09E0();
  __asm { BR              X10 }
}

uint64_t sub_23656FB58()
{
  sub_2365B008C();
  swift_bridgeObjectRelease();
  return sub_2365B0A34();
}

void sub_23656FC10(char a1)
{
  sub_2365B09E0();
  __asm { BR              X10 }
}

uint64_t sub_23656FC64()
{
  sub_2365B008C();
  swift_bridgeObjectRelease();
  return sub_2365B0A34();
}

void sub_23656FD1C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_23656FD5C()
{
  sub_2365B008C();
  return swift_bridgeObjectRelease();
}

void sub_23656FE00(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_23656FE48()
{
  sub_2365B008C();
  return swift_bridgeObjectRelease();
}

void sub_23656FF34(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_23656FF78()
{
  sub_2365B008C();
  return swift_bridgeObjectRelease();
}

void sub_23657001C(uint64_t a1, char a2)
{
  sub_2365B09E0();
  __asm { BR              X10 }
}

uint64_t sub_23657006C()
{
  sub_2365B008C();
  swift_bridgeObjectRelease();
  return sub_2365B0A34();
}

void sub_236570124(uint64_t a1, char a2)
{
  sub_2365B09E0();
  __asm { BR              X10 }
}

uint64_t sub_236570178()
{
  sub_2365B008C();
  swift_bridgeObjectRelease();
  return sub_2365B0A34();
}

void sub_236570278(uint64_t a1, char a2)
{
  sub_2365B09E0();
  __asm { BR              X10 }
}

uint64_t sub_2365702C4()
{
  sub_2365B008C();
  swift_bridgeObjectRelease();
  return sub_2365B0A34();
}

BOOL static SetupModel.LocalRole.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t SetupModel.__allocating_init(localRole:remoteRole:state:discoveryModel:authenticationModel:signInModel:)(_BYTE *a1, __int128 *a2, __int128 *a3, _OWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;

  v12 = swift_allocObject();
  SetupModel.init(localRole:remoteRole:state:discoveryModel:authenticationModel:signInModel:)(a1, a2, a3, a4, a5, a6);
  return v12;
}

uint64_t static SetupModel.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for SetupModel.ModelData(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (unsigned __int8 *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (unsigned __int8 *)&v18 - v8;
  swift_getKeyPath();
  v19 = a1;
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA44();
  swift_release();
  v10 = *(_QWORD *)(a1 + 16);
  v11 = (_QWORD *)MEMORY[0x24BEE27A8];
  v12 = v10 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v10 + 16);
  v13 = (os_unfair_lock_s *)(v10 + ((*(unsigned int *)(*(_QWORD *)v10 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v13);
  sub_23648DFF8(v12, (uint64_t)v9, type metadata accessor for SetupModel.ModelData);
  os_unfair_lock_unlock(v13);
  swift_release();
  swift_getKeyPath();
  v19 = a2;
  sub_2365AFA44();
  swift_release();
  v14 = *(_QWORD *)(a2 + 16);
  v15 = v14 + *(_QWORD *)(*v11 + *(_QWORD *)v14 + 16);
  v16 = (os_unfair_lock_s *)(v14 + ((*(unsigned int *)(*(_QWORD *)v14 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v16);
  sub_23648DFF8(v15, (uint64_t)v7, type metadata accessor for SetupModel.ModelData);
  os_unfair_lock_unlock(v16);
  swift_release();
  LOBYTE(v14) = sub_2365792EC(v9, v7);
  sub_236465A18((uint64_t)v7, type metadata accessor for SetupModel.ModelData);
  sub_236465A18((uint64_t)v9, type metadata accessor for SetupModel.ModelData);
  return v14 & 1;
}

void sub_236570624(char *a1)
{
  sub_23656F710(*a1);
}

void sub_236570630()
{
  char *v0;

  sub_23656FC10(*v0);
}

void sub_236570638(uint64_t a1)
{
  char *v1;

  sub_23656FF34(a1, *v1);
}

void sub_236570640(uint64_t a1)
{
  char *v1;

  sub_23657001C(a1, *v1);
}

uint64_t sub_236570648@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23657F454();
  *a1 = result;
  return result;
}

uint64_t sub_236570674()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_2365706A8 + 4 * byte_2365C780C[*v0]))();
}

void sub_2365706A8(_QWORD *a1@<X8>)
{
  *a1 = 0x6F5265746F6D6572;
  a1[1] = 0xEA0000000000656CLL;
}

void sub_2365706C8(_QWORD *a1@<X8>)
{
  *a1 = 0x6574617473;
  a1[1] = 0xE500000000000000;
}

void sub_2365706E0(char *a1@<X8>)
{
  strcpy(a1, "discoveryModel");
  a1[15] = -18;
}

void sub_236570708(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000013;
  a1[1] = 0x80000002365CB280;
}

void sub_236570728(_QWORD *a1@<X8>)
{
  *a1 = 0x6F4D6E496E676973;
  a1[1] = 0xEB000000006C6564;
}

uint64_t sub_23657074C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_236570780 + 4 * byte_2365C7812[*v0]))(0x6C6F526C61636F6CLL, 0xE900000000000065);
}

uint64_t sub_236570780()
{
  return 0x6F5265746F6D6572;
}

uint64_t sub_23657079C()
{
  return 0x6574617473;
}

uint64_t sub_2365707B0()
{
  return 0x7265766F63736964;
}

unint64_t sub_2365707D4()
{
  return 0xD000000000000013;
}

uint64_t sub_2365707F0()
{
  return 0x6F4D6E496E676973;
}

uint64_t sub_236570810@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23657F454();
  *a1 = result;
  return result;
}

uint64_t sub_236570834()
{
  sub_236579B90();
  return sub_2365B0AD0();
}

uint64_t sub_23657085C()
{
  sub_236579B90();
  return sub_2365B0ADC();
}

uint64_t sub_236570884()
{
  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA44();
  swift_release();
  return swift_retain();
}

uint64_t sub_23657090C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_2365709EC(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_236570944()
{
  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA38();
  return swift_release();
}

uint64_t sub_2365709EC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;

  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA44();
  swift_release();
  swift_getKeyPath();
  sub_2365AFA44();
  swift_release();
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v5);
  *a1 = *(_BYTE *)(v3 + v4);
  os_unfair_lock_unlock(v5);
  return swift_release();
}

uint64_t sub_236570AFC()
{
  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA38();
  return swift_release();
}

void sub_236570BA4(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;

  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA44();
  swift_release();
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v5 + 16);
  v7 = (os_unfair_lock_s *)(v5 + ((*(unsigned int *)(*(_QWORD *)v5 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v7);
  *(_BYTE *)(v5 + v6) = a2 & 1;
  os_unfair_lock_unlock(v7);
  if (v2)
    __break(1u);
  else
    swift_release();
}

void (*sub_236570C90(_QWORD *a1))(_QWORD **a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;

  v2 = v1;
  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[1] = v2;
  swift_getKeyPath();
  v4[2] = OBJC_IVAR____TtC12AppleIDSetup10SetupModel___observationRegistrar;
  *v4 = v2;
  v4[3] = sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA44();
  swift_release();
  swift_getKeyPath();
  *v4 = v2;
  sub_2365AFA44();
  swift_release();
  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v5 + 16);
  v7 = (os_unfair_lock_s *)(v5 + ((*(unsigned int *)(*(_QWORD *)v5 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v7);
  *((_BYTE *)v4 + 32) = *(_BYTE *)(v5 + v6);
  os_unfair_lock_unlock(v7);
  swift_release();
  return sub_236570DC0;
}

void sub_236570DC0(_QWORD **a1)
{
  _QWORD *v1;

  v1 = *a1;
  swift_getKeyPath();
  *v1 = v1[1];
  sub_2365AFA38();
  swift_release();
  free(v1);
}

double sub_236570E78@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  int v3;
  __int16 v4;
  double result;
  __int128 v6;
  uint64_t v7;
  int v8;
  __int16 v9;

  sub_236570FC0((uint64_t)&v6);
  v2 = v7;
  v3 = v8;
  v4 = v9;
  result = *(double *)&v6;
  *(_OWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = v2;
  *(_WORD *)(a1 + 28) = v4;
  *(_DWORD *)(a1 + 24) = v3;
  return result;
}

uint64_t sub_236570EC8(uint64_t a1)
{
  void *v1;
  void *v2;
  unint64_t v3;

  v1 = *(void **)a1;
  v2 = *(void **)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  swift_getKeyPath();
  sub_236499054(v1, v2, v3);
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA38();
  sub_2364984F8(v1, v2, v3);
  return swift_release();
}

uint64_t sub_236570FC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  void *v6;
  void *v7;
  unint64_t v8;
  __int16 v9;
  int v10;

  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA44();
  swift_release();
  swift_getKeyPath();
  sub_2365AFA44();
  swift_release();
  v3 = *(_QWORD *)(v1 + 16);
  v4 = v3 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v5);
  v6 = *(void **)(v4 + 8);
  v7 = *(void **)(v4 + 16);
  v8 = *(_QWORD *)(v4 + 24);
  v9 = *(_WORD *)(v4 + 36);
  v10 = *(_DWORD *)(v4 + 32);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_WORD *)(a1 + 28) = v9;
  *(_DWORD *)(a1 + 24) = v10;
  sub_236499054(v6, v7, v8);
  os_unfair_lock_unlock(v5);
  return swift_release();
}

uint64_t sub_2365710F4(uint64_t a1)
{
  void *v1;
  void *v2;
  unint64_t v3;

  v1 = *(void **)a1;
  v2 = *(void **)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA38();
  sub_2364984F8(v1, v2, v3);
  return swift_release();
}

void sub_2365711D8(uint64_t a1, void *a2, void *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  void *v11;
  unint64_t v12;
  void *v13;
  uint64_t v16;

  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA44();
  swift_release();
  v8 = *(_QWORD *)(a1 + 16);
  v9 = v8 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v8 + 16);
  v10 = (os_unfair_lock_s *)(v8 + ((*(unsigned int *)(*(_QWORD *)v8 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v10);
  v9 += 32;
  v11 = *(void **)(v9 - 16);
  v13 = *(void **)(v9 - 24);
  v12 = *(_QWORD *)(v9 - 8);
  sub_236499054(a2, a3, a4);
  sub_2364984F8(v13, v11, v12);
  *(_QWORD *)(v9 - 24) = a2;
  *(_QWORD *)(v9 - 16) = a3;
  *(_QWORD *)(v9 - 8) = a4;
  *(_WORD *)(v9 + 4) = WORD2(a5);
  *(_DWORD *)v9 = a5;
  os_unfair_lock_unlock(v10);
  if (v16)
    __break(1u);
  else
    swift_release();
}

void (*sub_236571348(_QWORD *a1))(void ***a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  void *v8;
  void *v9;
  unint64_t v10;
  __int16 v11;
  int v12;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[5] = v2;
  swift_getKeyPath();
  v4[6] = OBJC_IVAR____TtC12AppleIDSetup10SetupModel___observationRegistrar;
  v4[4] = v2;
  v4[7] = sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA44();
  swift_release();
  swift_getKeyPath();
  v4[4] = v2;
  sub_2365AFA44();
  swift_release();
  v5 = *(_QWORD *)(v2 + 16);
  v6 = v5 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v5 + 16);
  v7 = (os_unfair_lock_s *)(v5 + ((*(unsigned int *)(*(_QWORD *)v5 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v7);
  v8 = *(void **)(v6 + 8);
  v9 = *(void **)(v6 + 16);
  v10 = *(_QWORD *)(v6 + 24);
  v11 = *(_WORD *)(v6 + 36);
  v12 = *(_DWORD *)(v6 + 32);
  *v4 = v8;
  v4[1] = v9;
  v4[2] = v10;
  *((_WORD *)v4 + 14) = v11;
  *((_DWORD *)v4 + 6) = v12;
  sub_236499054(v8, v9, v10);
  os_unfair_lock_unlock(v7);
  swift_release();
  return sub_2365714A0;
}

void sub_2365714A0(void ***a1, char a2)
{
  void **v3;
  void *v4;
  void *v5;
  void *v6;
  unint64_t v7;
  __int16 v8;
  int v9;
  _QWORD v10[8];
  int v11;
  __int16 v12;

  v3 = *a1;
  v4 = (*a1)[5];
  v6 = **a1;
  v5 = (*a1)[1];
  v7 = (unint64_t)(*a1)[2];
  v8 = *((_WORD *)*a1 + 14);
  v9 = *((_DWORD *)*a1 + 6);
  swift_getKeyPath();
  v10[1] = v10;
  v10[6] = v5;
  v10[7] = v7;
  v11 = v9;
  v12 = v8;
  v3[4] = v3[5];
  v10[4] = v4;
  v10[5] = v6;
  if ((a2 & 1) != 0)
  {
    sub_236499054(v6, v5, v7);
    sub_2365AFA38();
    sub_2364984F8(v6, v5, v7);
    swift_release();
    sub_2364984F8(*v3, v3[1], (unint64_t)v3[2]);
  }
  else
  {
    sub_2365AFA38();
    sub_2364984F8(v6, v5, v7);
    swift_release();
  }
  free(v3);
}

double sub_236571618@<D0>(uint64_t a1@<X8>)
{
  char v2;
  __int128 v3;
  double result;
  _OWORD v5[2];
  __int128 v6;
  char v7;

  sub_236571730((uint64_t)v5);
  v2 = v7;
  v3 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v3;
  result = *(double *)&v6;
  *(_OWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 48) = v2;
  return result;
}

uint64_t sub_236571660(__int128 *a1)
{
  _BYTE v2[56];

  sub_236579AA8(a1, (uint64_t)v2);
  swift_getKeyPath();
  sub_236579AF4((uint64_t)v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_236579B30);
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA38();
  sub_236579AF4((uint64_t)v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_236579AE0);
  return swift_release();
}

uint64_t sub_236571730@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;

  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA44();
  swift_release();
  swift_getKeyPath();
  sub_2365AFA44();
  swift_release();
  v3 = *(_QWORD *)(v1 + 16);
  v4 = v3 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v5);
  sub_236571850(v4, a1);
  os_unfair_lock_unlock(v5);
  return swift_release();
}

uint64_t sub_236571850@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v7;
  v8 = *(_BYTE *)(a1 + 88);
  *(_BYTE *)(a2 + 48) = v8;
  return sub_236579B30(v3, v2, v4, v5, v6, v7, v8);
}

uint64_t sub_236571898(__int128 *a1)
{
  _BYTE v2[56];

  sub_236579AA8(a1, (uint64_t)v2);
  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA38();
  sub_236579AF4((uint64_t)v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_236579AE0);
  return swift_release();
}

void sub_236571954(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  _BYTE v8[56];

  sub_236579AA8(a2, (uint64_t)v8);
  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA44();
  swift_release();
  v5 = *(_QWORD *)(a1 + 16);
  v6 = v5 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v5 + 16);
  v7 = (os_unfair_lock_s *)(v5 + ((*(unsigned int *)(*(_QWORD *)v5 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v7);
  sub_236571A70(v6, a2);
  os_unfair_lock_unlock(v7);
  if (v2)
    __break(1u);
  else
    swift_release();
}

uint64_t sub_236571A70(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v3 = a1 + 40;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(_QWORD *)(a1 + 80);
  v10 = *(_BYTE *)(a1 + 88);
  sub_236579AF4((uint64_t)a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_236579B30);
  sub_236579AE0(v4, v5, v6, v7, v8, v9, v10);
  return sub_236579AA8(a2, v3);
}

void (*sub_236571B04(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v2 = v1;
  v4 = malloc(0xC8uLL);
  *a1 = v4;
  v4[22] = v2;
  swift_getKeyPath();
  v4[23] = OBJC_IVAR____TtC12AppleIDSetup10SetupModel___observationRegistrar;
  v4[21] = v2;
  v4[24] = sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA44();
  swift_release();
  swift_getKeyPath();
  v4[21] = v2;
  sub_2365AFA44();
  swift_release();
  v5 = *(_QWORD *)(v2 + 16);
  v6 = v5 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v5 + 16);
  v7 = (os_unfair_lock_s *)(v5 + ((*(unsigned int *)(*(_QWORD *)v5 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v7);
  v8 = *(_QWORD *)(v6 + 40);
  v9 = *(_QWORD *)(v6 + 48);
  v10 = *(_QWORD *)(v6 + 56);
  v11 = *(_QWORD *)(v6 + 64);
  v12 = *(_QWORD *)(v6 + 72);
  v13 = *(_QWORD *)(v6 + 80);
  v4[14] = v8;
  v4[15] = v9;
  v4 += 14;
  v4[2] = v10;
  v4[3] = v11;
  v4[4] = v12;
  v4[5] = v13;
  v14 = *(_BYTE *)(v6 + 88);
  *((_BYTE *)v4 + 48) = v14;
  sub_236579B30(v8, v9, v10, v11, v12, v13, v14);
  os_unfair_lock_unlock(v7);
  swift_release();
  return sub_236571C58;
}

void sub_236571C58(uint64_t *a1, char a2)
{
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;

  v2 = *a1;
  v3 = (__int128 *)(*a1 + 112);
  v4 = *(_QWORD *)(v2 + 176);
  if ((a2 & 1) != 0)
  {
    sub_236579AA8(v3, v2);
    KeyPath = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](KeyPath);
    *(_QWORD *)(v2 + 168) = v4;
    sub_236579AF4(v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_236579B30);
    sub_2365AFA38();
    sub_236579AF4(v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_236579AE0);
    swift_release();
    sub_236579AE0(*(_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 120), *(_QWORD *)(v2 + 128), *(_QWORD *)(v2 + 136), *(_QWORD *)(v2 + 144), *(_QWORD *)(v2 + 152), *(_BYTE *)(v2 + 160));
  }
  else
  {
    sub_236579AA8(v3, v2 + 56);
    v6 = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](v6);
    *(_QWORD *)(v2 + 168) = v4;
    sub_2365AFA38();
    sub_236579AF4(v2 + 56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_236579AE0);
    swift_release();
  }
  free((void *)v2);
}

uint64_t sub_236571DF0@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _OWORD *v4;
  os_unfair_lock_s *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v20[11];

  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA44();
  swift_release();
  swift_getKeyPath();
  *(_QWORD *)&v20[0] = v1;
  sub_2365AFA44();
  swift_release();
  v3 = *(_QWORD *)(v1 + 16);
  v4 = (_OWORD *)(v3 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v3 + 16));
  v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v5);
  v6 = v4[6];
  v7 = v4[8];
  v20[1] = v4[7];
  v20[2] = v7;
  v20[0] = v6;
  v8 = v4[9];
  v9 = v4[10];
  v10 = v4[12];
  v20[5] = v4[11];
  v20[6] = v10;
  v20[3] = v8;
  v20[4] = v9;
  v11 = v4[13];
  v12 = v4[14];
  v13 = v4[16];
  v20[9] = v4[15];
  v20[10] = v13;
  v20[7] = v11;
  v20[8] = v12;
  v14 = v4[15];
  a1[8] = v4[14];
  a1[9] = v14;
  a1[10] = v4[16];
  v15 = v4[11];
  a1[4] = v4[10];
  a1[5] = v15;
  v16 = v4[13];
  a1[6] = v4[12];
  a1[7] = v16;
  v17 = v4[7];
  *a1 = v4[6];
  a1[1] = v17;
  v18 = v4[9];
  a1[2] = v4[8];
  a1[3] = v18;
  sub_236499A64((uint64_t)v20);
  os_unfair_lock_unlock(v5);
  return swift_release();
}

uint64_t sub_236571F64@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v2 = a1[13];
  v3 = a1[15];
  v24 = a1[14];
  v25 = v3;
  v4 = a1[15];
  v26 = a1[16];
  v5 = a1[9];
  v6 = a1[11];
  v20 = a1[10];
  v7 = v20;
  v21 = v6;
  v8 = a1[11];
  v9 = a1[13];
  v22 = a1[12];
  v10 = v22;
  v23 = v9;
  v11 = a1[7];
  v17[0] = a1[6];
  v17[1] = v11;
  v12 = a1[9];
  v14 = a1[6];
  v13 = a1[7];
  v18 = a1[8];
  v15 = v18;
  v19 = v12;
  a2[8] = v24;
  a2[9] = v4;
  a2[10] = a1[16];
  a2[4] = v7;
  a2[5] = v8;
  a2[6] = v10;
  a2[7] = v2;
  *a2 = v14;
  a2[1] = v13;
  a2[2] = v15;
  a2[3] = v5;
  return sub_236499A64((uint64_t)v17);
}

uint64_t sub_236571FF4(_OWORD *a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[11];

  v1 = a1[9];
  v7[8] = a1[8];
  v7[9] = v1;
  v7[10] = a1[10];
  v2 = a1[5];
  v7[4] = a1[4];
  v7[5] = v2;
  v3 = a1[7];
  v7[6] = a1[6];
  v7[7] = v3;
  v4 = a1[1];
  v7[0] = *a1;
  v7[1] = v4;
  v5 = a1[3];
  v7[2] = a1[2];
  v7[3] = v5;
  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA38();
  sub_236498A84((uint64_t)v7);
  return swift_release();
}

void sub_2365720D0(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  _OWORD *v6;
  os_unfair_lock_s *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[11];

  swift_getKeyPath();
  *(_QWORD *)&v24[0] = a1;
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA44();
  swift_release();
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (_OWORD *)(v5 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v5 + 16));
  v7 = (os_unfair_lock_s *)(v5 + ((*(unsigned int *)(*(_QWORD *)v5 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v7);
  v8 = v6[6];
  v9 = v6[8];
  v24[1] = v6[7];
  v24[2] = v9;
  v24[0] = v8;
  v10 = v6[9];
  v11 = v6[10];
  v12 = v6[12];
  v24[5] = v6[11];
  v24[6] = v12;
  v24[3] = v10;
  v24[4] = v11;
  v13 = v6[13];
  v14 = v6[14];
  v15 = v6[16];
  v24[9] = v6[15];
  v24[10] = v15;
  v24[7] = v13;
  v24[8] = v14;
  sub_236499A64((uint64_t)a2);
  sub_236498A84((uint64_t)v24);
  v17 = a2[1];
  v16 = a2[2];
  v6[6] = *a2;
  v6[7] = v17;
  v6[8] = v16;
  v18 = a2[6];
  v20 = a2[3];
  v19 = a2[4];
  v6[11] = a2[5];
  v6[12] = v18;
  v6[9] = v20;
  v6[10] = v19;
  v21 = a2[10];
  v23 = a2[7];
  v22 = a2[8];
  v6[15] = a2[9];
  v6[16] = v21;
  v6[13] = v23;
  v6[14] = v22;
  os_unfair_lock_unlock(v7);
  if (v2)
    __break(1u);
  else
    swift_release();
}

void (*sub_236572230(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _OWORD *v5;
  os_unfair_lock_s *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v3 = malloc(0x2E0uLL);
  *a1 = v3;
  v3[89] = v1;
  swift_getKeyPath();
  v3[90] = OBJC_IVAR____TtC12AppleIDSetup10SetupModel___observationRegistrar;
  *v3 = v1;
  v3[91] = sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA44();
  swift_release();
  swift_getKeyPath();
  *v3 = v1;
  sub_2365AFA44();
  swift_release();
  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_OWORD *)(v4 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v4 + 16));
  v6 = (os_unfair_lock_s *)(v4 + ((*(unsigned int *)(*(_QWORD *)v4 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v6);
  v7 = v5[6];
  v8 = v5[8];
  *((_OWORD *)v3 + 1) = v5[7];
  *((_OWORD *)v3 + 2) = v8;
  *(_OWORD *)v3 = v7;
  v9 = v5[9];
  v10 = v5[10];
  v11 = v5[12];
  *((_OWORD *)v3 + 5) = v5[11];
  *((_OWORD *)v3 + 6) = v11;
  *((_OWORD *)v3 + 3) = v9;
  *((_OWORD *)v3 + 4) = v10;
  v12 = v5[13];
  v13 = v5[14];
  v14 = v5[16];
  *((_OWORD *)v3 + 9) = v5[15];
  *((_OWORD *)v3 + 10) = v14;
  *((_OWORD *)v3 + 7) = v12;
  *((_OWORD *)v3 + 8) = v13;
  v15 = v5[6];
  v16 = v5[8];
  *((_OWORD *)v3 + 34) = v5[7];
  *((_OWORD *)v3 + 35) = v16;
  *((_OWORD *)v3 + 33) = v15;
  v17 = v5[9];
  v18 = v5[10];
  v19 = v5[12];
  *((_OWORD *)v3 + 38) = v5[11];
  *((_OWORD *)v3 + 39) = v19;
  *((_OWORD *)v3 + 36) = v17;
  *((_OWORD *)v3 + 37) = v18;
  v20 = v5[13];
  v21 = v5[14];
  v22 = v5[16];
  *((_OWORD *)v3 + 42) = v5[15];
  *((_OWORD *)v3 + 43) = v22;
  *((_OWORD *)v3 + 40) = v20;
  *((_OWORD *)v3 + 41) = v21;
  sub_236499A64((uint64_t)v3);
  os_unfair_lock_unlock(v6);
  swift_release();
  return sub_2365723C8;
}

void sub_2365723C8(uint64_t a1, char a2)
{
  _QWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t KeyPath;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v2 = *(_QWORD **)a1;
  v3 = (_OWORD *)(*(_QWORD *)a1 + 528);
  if ((a2 & 1) != 0)
  {
    v4 = v2[89];
    v5 = *(_OWORD *)(*(_QWORD *)a1 + 672);
    *((_OWORD *)v2 + 19) = *(_OWORD *)(*(_QWORD *)a1 + 656);
    *((_OWORD *)v2 + 20) = v5;
    *((_OWORD *)v2 + 21) = v3[10];
    v6 = v3[5];
    *((_OWORD *)v2 + 15) = v3[4];
    *((_OWORD *)v2 + 16) = v6;
    v7 = v3[7];
    *((_OWORD *)v2 + 17) = v3[6];
    *((_OWORD *)v2 + 18) = v7;
    v8 = v3[1];
    *((_OWORD *)v2 + 11) = *v3;
    *((_OWORD *)v2 + 12) = v8;
    v9 = v3[3];
    *((_OWORD *)v2 + 13) = v3[2];
    *((_OWORD *)v2 + 14) = v9;
    KeyPath = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](KeyPath);
    v2[88] = v4;
    sub_236499A64((uint64_t)(v2 + 22));
    sub_2365AFA38();
    sub_236498A84((uint64_t)(v2 + 22));
    swift_release();
    v11 = v3[9];
    *((_OWORD *)v2 + 8) = v3[8];
    *((_OWORD *)v2 + 9) = v11;
    *((_OWORD *)v2 + 10) = v3[10];
    v12 = v3[5];
    *((_OWORD *)v2 + 4) = v3[4];
    *((_OWORD *)v2 + 5) = v12;
    v13 = v3[7];
    *((_OWORD *)v2 + 6) = v3[6];
    *((_OWORD *)v2 + 7) = v13;
    v14 = v3[1];
    *(_OWORD *)v2 = *v3;
    *((_OWORD *)v2 + 1) = v14;
    v15 = v3[3];
    *((_OWORD *)v2 + 2) = v3[2];
    *((_OWORD *)v2 + 3) = v15;
    sub_236498A84((uint64_t)v2);
  }
  else
  {
    v16 = v2[89];
    v17 = *(_OWORD *)(*(_QWORD *)a1 + 672);
    *((_OWORD *)v2 + 30) = *(_OWORD *)(*(_QWORD *)a1 + 656);
    *((_OWORD *)v2 + 31) = v17;
    *((_OWORD *)v2 + 32) = v3[10];
    v18 = v3[5];
    *((_OWORD *)v2 + 26) = v3[4];
    *((_OWORD *)v2 + 27) = v18;
    v19 = v3[7];
    *((_OWORD *)v2 + 28) = v3[6];
    *((_OWORD *)v2 + 29) = v19;
    v20 = v3[1];
    *((_OWORD *)v2 + 22) = *v3;
    *((_OWORD *)v2 + 23) = v20;
    v21 = v3[3];
    *((_OWORD *)v2 + 24) = v3[2];
    *((_OWORD *)v2 + 25) = v21;
    v22 = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](v22);
    *v2 = v16;
    sub_2365AFA38();
    sub_236498A84((uint64_t)(v2 + 44));
    swift_release();
  }
  free(v2);
}

uint64_t sub_2365725D8@<X0>(uint64_t a1@<X8>)
{
  return sub_236572700(a1);
}

uint64_t sub_2365725F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v9[16];
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;

  v4 = type metadata accessor for AuthenticationModel();
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_23648DFF8(a1, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  v7 = *a2;
  swift_getKeyPath();
  v10 = v7;
  v11 = v6;
  v12 = v7;
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA38();
  swift_release();
  return sub_236465A18((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
}

uint64_t sub_236572700@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;

  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA44();
  swift_release();
  swift_getKeyPath();
  sub_2365AFA44();
  swift_release();
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v5);
  v6 = type metadata accessor for SetupModel.ModelData(0);
  sub_23648DFF8(v3 + *(int *)(v6 + 32) + v4, a1, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  os_unfair_lock_unlock(v5);
  return swift_release();
}

uint64_t sub_23657282C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for SetupModel.ModelData(0);
  return sub_23648DFF8(a1 + *(int *)(v4 + 32), a2, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
}

uint64_t sub_23657287C(uint64_t a1)
{
  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA38();
  swift_release();
  return sub_236465A18(a1, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
}

void sub_236572930(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;

  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA44();
  swift_release();
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v5 + 16);
  v7 = (os_unfair_lock_s *)(v5 + ((*(unsigned int *)(*(_QWORD *)v5 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v7);
  v8 = type metadata accessor for SetupModel.ModelData(0);
  sub_23657FB8C(a2, v5 + *(int *)(v8 + 32) + v6, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  os_unfair_lock_unlock(v7);
  if (v2)
    __break(1u);
  else
    swift_release();
}

void (*sub_236572A38(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;

  v2 = v1;
  v4 = malloc(0x48uLL);
  *a1 = v4;
  v4[4] = v1;
  v5 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AuthenticationModel() - 8) + 64);
  v4[5] = malloc(v5);
  v6 = malloc(v5);
  v4[6] = v6;
  swift_getKeyPath();
  v4[7] = OBJC_IVAR____TtC12AppleIDSetup10SetupModel___observationRegistrar;
  *v4 = v2;
  v4[8] = sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA44();
  swift_release();
  swift_getKeyPath();
  v4[1] = v2;
  sub_2365AFA44();
  swift_release();
  v7 = *(_QWORD *)(v2 + 16);
  v8 = *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v7 + 16);
  v9 = (os_unfair_lock_s *)(v7 + ((*(unsigned int *)(*(_QWORD *)v7 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v9);
  v10 = type metadata accessor for SetupModel.ModelData(0);
  sub_23648DFF8(v7 + *(int *)(v10 + 32) + v8, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  os_unfair_lock_unlock(v9);
  swift_release();
  return sub_236572BBC;
}

void sub_236572BBC(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;

  v2 = *(_QWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 40);
  v4 = *(void **)(*(_QWORD *)a1 + 48);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    sub_23648DFF8(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
    KeyPath = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](KeyPath);
    v2[2] = v5;
    sub_2365AFA38();
    swift_release();
    sub_236465A18((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  }
  else
  {
    v7 = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](v7);
    v2[3] = v5;
    sub_2365AFA38();
    swift_release();
  }
  sub_236465A18((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t sub_236572D3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;

  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA44();
  swift_release();
  swift_getKeyPath();
  sub_2365AFA44();
  swift_release();
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v5);
  v6 = type metadata accessor for SetupModel.ModelData(0);
  sub_23648DFF8(v3 + *(int *)(v6 + 36) + v4, a1, (uint64_t (*)(_QWORD))type metadata accessor for SignInModel);
  os_unfair_lock_unlock(v5);
  return swift_release();
}

uint64_t sub_236572E68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for SetupModel.ModelData(0);
  return sub_23648DFF8(a1 + *(int *)(v4 + 36), a2, (uint64_t (*)(_QWORD))type metadata accessor for SignInModel);
}

uint64_t sub_236572EB8(uint64_t a1)
{
  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA38();
  swift_release();
  return sub_236465A18(a1, (uint64_t (*)(_QWORD))type metadata accessor for SignInModel);
}

void sub_236572F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;

  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA44();
  swift_release();
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v5 + 16);
  v7 = (os_unfair_lock_s *)(v5 + ((*(unsigned int *)(*(_QWORD *)v5 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v7);
  v8 = type metadata accessor for SetupModel.ModelData(0);
  sub_23657FB8C(a2, v5 + *(int *)(v8 + 36) + v6, (uint64_t (*)(_QWORD))type metadata accessor for SignInModel);
  os_unfair_lock_unlock(v7);
  if (v2)
    __break(1u);
  else
    swift_release();
}

void (*sub_236573074(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;

  v2 = v1;
  v4 = malloc(0x48uLL);
  *a1 = v4;
  v4[4] = v1;
  v5 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for SignInModel() - 8) + 64);
  v4[5] = malloc(v5);
  v6 = malloc(v5);
  v4[6] = v6;
  swift_getKeyPath();
  v4[7] = OBJC_IVAR____TtC12AppleIDSetup10SetupModel___observationRegistrar;
  *v4 = v2;
  v4[8] = sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA44();
  swift_release();
  swift_getKeyPath();
  v4[1] = v2;
  sub_2365AFA44();
  swift_release();
  v7 = *(_QWORD *)(v2 + 16);
  v8 = *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v7 + 16);
  v9 = (os_unfair_lock_s *)(v7 + ((*(unsigned int *)(*(_QWORD *)v7 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v9);
  v10 = type metadata accessor for SetupModel.ModelData(0);
  sub_23648DFF8(v7 + *(int *)(v10 + 36) + v8, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for SignInModel);
  os_unfair_lock_unlock(v9);
  swift_release();
  return sub_2365731F8;
}

void sub_2365731F8(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;

  v2 = *(_QWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 40);
  v4 = *(void **)(*(_QWORD *)a1 + 48);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    sub_23648DFF8(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for SignInModel);
    KeyPath = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](KeyPath);
    v2[2] = v5;
    sub_2365AFA38();
    swift_release();
    sub_236465A18((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for SignInModel);
  }
  else
  {
    v7 = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](v7);
    v2[3] = v5;
    sub_2365AFA38();
    swift_release();
  }
  sub_236465A18((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SignInModel);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t SetupModel.init(localRole:remoteRole:state:discoveryModel:authenticationModel:signInModel:)(_BYTE *a1, __int128 *a2, __int128 *a3, _OWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t result;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v32 = a6;
  v31 = a5;
  v10 = type metadata accessor for SetupModel.ModelData(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a1) = *a1;
  v13 = *a2;
  v14 = *((_QWORD *)a2 + 2);
  v30 = *((unsigned int *)a2 + 6);
  LOWORD(a2) = *((_WORD *)a2 + 14);
  v28 = *a3;
  v29 = v13;
  v27 = a3[1];
  v16 = *((_QWORD *)a3 + 4);
  v15 = *((_QWORD *)a3 + 5);
  LOBYTE(a3) = *((_BYTE *)a3 + 48);
  sub_2365AFA50();
  v17 = v31;
  sub_23648DFF8(v31, (uint64_t)&v12[*(int *)(v10 + 32)], (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  v18 = (uint64_t)&v12[*(int *)(v10 + 36)];
  v19 = v32;
  sub_23648DFF8(v32, v18, (uint64_t (*)(_QWORD))type metadata accessor for SignInModel);
  *v12 = (char)a1;
  *(_OWORD *)(v12 + 8) = v29;
  *((_QWORD *)v12 + 3) = v14;
  *((_WORD *)v12 + 18) = (_WORD)a2;
  *((_DWORD *)v12 + 8) = v30;
  *(_OWORD *)(v12 + 40) = v28;
  *(_OWORD *)(v12 + 56) = v27;
  *((_QWORD *)v12 + 9) = v16;
  *((_QWORD *)v12 + 10) = v15;
  v12[88] = (char)a3;
  v20 = a4[9];
  *((_OWORD *)v12 + 14) = a4[8];
  *((_OWORD *)v12 + 15) = v20;
  *((_OWORD *)v12 + 16) = a4[10];
  v21 = a4[5];
  *((_OWORD *)v12 + 10) = a4[4];
  *((_OWORD *)v12 + 11) = v21;
  v22 = a4[7];
  *((_OWORD *)v12 + 12) = a4[6];
  *((_OWORD *)v12 + 13) = v22;
  v23 = a4[1];
  *((_OWORD *)v12 + 6) = *a4;
  *((_OWORD *)v12 + 7) = v23;
  v24 = a4[3];
  *((_OWORD *)v12 + 8) = a4[2];
  *((_OWORD *)v12 + 9) = v24;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6AC8);
  v25 = swift_allocObject();
  *(_DWORD *)(v25 + ((*(unsigned int *)(*(_QWORD *)v25 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_23648DFF8((uint64_t)v12, v25 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v25 + 16), type metadata accessor for SetupModel.ModelData);
  sub_236465A18(v19, (uint64_t (*)(_QWORD))type metadata accessor for SignInModel);
  sub_236465A18(v17, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  sub_236465A18((uint64_t)v12, type metadata accessor for SetupModel.ModelData);
  result = v33;
  *(_QWORD *)(v33 + 16) = v25;
  return result;
}

uint64_t sub_236573588@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23648DFF8(a1, a2, type metadata accessor for SetupModel.ModelData);
}

uint64_t sub_2365735B8(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v3 = type metadata accessor for SetupModel.ModelData(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  *(_QWORD *)&v23 = v1;
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA44();
  swift_release();
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v6 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v6 + 16);
  v8 = (os_unfair_lock_s *)(v6 + ((*(unsigned int *)(*(_QWORD *)v6 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v8);
  sub_23648DFF8(v7, (uint64_t)v5, type metadata accessor for SetupModel.ModelData);
  os_unfair_lock_unlock(v8);
  swift_release();
  sub_2365B09F8();
  v9 = *((_QWORD *)v5 + 3);
  v10 = *((_DWORD *)v5 + 8);
  v11 = *((_WORD *)v5 + 18);
  v23 = *(_OWORD *)(v5 + 8);
  *(_QWORD *)&v24 = v9;
  WORD6(v24) = v11;
  DWORD2(v24) = v10;
  SetupModel.RemoteRole.hash(into:)();
  v12 = v5[88];
  switch(v12)
  {
    case -6:
    case -5:
    case -4:
    case -3:
    case -2:
    case -1:
      sub_2365B09F8();
      break;
    default:
      v14 = *((_QWORD *)v5 + 9);
      v13 = *((_QWORD *)v5 + 10);
      v22 = *(_OWORD *)(v5 + 56);
      v21 = *(_OWORD *)(v5 + 40);
      sub_2365B09F8();
      v23 = v21;
      v24 = v22;
      *(_QWORD *)&v25 = v14;
      *((_QWORD *)&v25 + 1) = v13;
      LOBYTE(v26) = v12;
      SetupError.hash(into:)();
      break;
  }
  v15 = *((_OWORD *)v5 + 15);
  v31 = *((_OWORD *)v5 + 14);
  v32 = v15;
  v33 = *((_OWORD *)v5 + 16);
  v16 = *((_OWORD *)v5 + 11);
  v27 = *((_OWORD *)v5 + 10);
  v28 = v16;
  v17 = *((_OWORD *)v5 + 13);
  v29 = *((_OWORD *)v5 + 12);
  v30 = v17;
  v18 = *((_OWORD *)v5 + 7);
  v23 = *((_OWORD *)v5 + 6);
  v24 = v18;
  v19 = *((_OWORD *)v5 + 9);
  v25 = *((_OWORD *)v5 + 8);
  v26 = v19;
  DiscoveryModel.hash(into:)(a1);
  AuthenticationModel.hash(into:)();
  SignInModel.hash(into:)((uint64_t)a1);
  return sub_236465A18((uint64_t)v5, type metadata accessor for SetupModel.ModelData);
}

void sub_236573838(__int128 *a1)
{
  uint64_t v1;

  sub_2365B09F8();
  SetupModel.RemoteRole.hash(into:)();
  switch(*(_BYTE *)(v1 + 88))
  {
    case 0xFA:
    case 0xFB:
    case 0xFC:
    case 0xFD:
    case 0xFE:
    case 0xFF:
      sub_2365B09F8();
      break;
    default:
      sub_2365B09F8();
      SetupError.hash(into:)();
      break;
  }
  DiscoveryModel.hash(into:)(a1);
  type metadata accessor for SetupModel.ModelData(0);
  AuthenticationModel.hash(into:)();
  SignInModel.hash(into:)((uint64_t)a1);
}

void sub_2365739B4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  int v13;
  __int16 v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;
  uint64_t v40;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC7A0);
  v40 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for SetupModel.ModelData(0);
  MEMORY[0x24BDAC7A8](v22);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  *(_QWORD *)&v24 = v1;
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA44();
  swift_release();
  v9 = *(_QWORD *)(v1 + 16);
  v10 = v9 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v9 + 16);
  v11 = (os_unfair_lock_s *)(v9 + ((*(unsigned int *)(*(_QWORD *)v9 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v11);
  sub_23648DFF8(v10, (uint64_t)v8, type metadata accessor for SetupModel.ModelData);
  if (v2)
  {
    os_unfair_lock_unlock(v11);
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock(v11);
    swift_release();
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_236579B90();
    sub_2365B0AAC();
    LOBYTE(v24) = *v8;
    LOBYTE(v36) = 0;
    sub_236579BD4();
    sub_2365B0824();
    v12 = *((_QWORD *)v8 + 3);
    v13 = *((_DWORD *)v8 + 8);
    v14 = *((_WORD *)v8 + 18);
    v24 = *(_OWORD *)(v8 + 8);
    *(_QWORD *)&v25 = v12;
    WORD6(v25) = v14;
    DWORD2(v25) = v13;
    LOBYTE(v36) = 1;
    sub_236579C18();
    sub_2365B0824();
    v15 = v8[88];
    v16 = *(_OWORD *)(v8 + 56);
    v36 = *(_OWORD *)(v8 + 40);
    v37 = v16;
    v38 = *(_OWORD *)(v8 + 72);
    v39 = v15;
    v35 = 2;
    sub_236579C5C();
    sub_2365B0824();
    v17 = *((_OWORD *)v8 + 15);
    v32 = *((_OWORD *)v8 + 14);
    v33 = v17;
    v34 = *((_OWORD *)v8 + 16);
    v18 = *((_OWORD *)v8 + 11);
    v28 = *((_OWORD *)v8 + 10);
    v29 = v18;
    v19 = *((_OWORD *)v8 + 13);
    v30 = *((_OWORD *)v8 + 12);
    v31 = v19;
    v20 = *((_OWORD *)v8 + 7);
    v24 = *((_OWORD *)v8 + 6);
    v25 = v20;
    v21 = *((_OWORD *)v8 + 9);
    v26 = *((_OWORD *)v8 + 8);
    v27 = v21;
    v23 = 3;
    sub_2364F3C9C();
    sub_2365B0824();
    LOBYTE(v24) = 4;
    type metadata accessor for AuthenticationModel();
    sub_23644F0B8(&qword_2563E49F8, (uint64_t (*)(uint64_t))type metadata accessor for AuthenticationModel, (uint64_t)&protocol conformance descriptor for AuthenticationModel);
    sub_2365B0824();
    LOBYTE(v24) = 5;
    type metadata accessor for SignInModel();
    sub_23644F0B8(&qword_2563EB9C0, (uint64_t (*)(uint64_t))type metadata accessor for SignInModel, (uint64_t)&protocol conformance descriptor for SignInModel);
    sub_2365B0824();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v6, v4);
    sub_236465A18((uint64_t)v8, type metadata accessor for SetupModel.ModelData);
  }
}

uint64_t SetupModel.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  SetupModel.init(from:)(a1);
  return v2;
}

uint64_t SetupModel.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  char v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  char v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int8 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  unsigned __int16 v101;
  unsigned __int8 v102;
  _BYTE *v103;

  v58 = type metadata accessor for SignInModel();
  MEMORY[0x24BDAC7A8](v58);
  v59 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for AuthenticationModel();
  MEMORY[0x24BDAC7A8](v60);
  v61 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SetupModel.ModelData(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC7C8);
  v8 = *(_QWORD *)(v62 - 8);
  MEMORY[0x24BDAC7A8](v62);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = v1;
  v63 = v1 + OBJC_IVAR____TtC12AppleIDSetup10SetupModel___observationRegistrar;
  sub_2365AFA50();
  v11 = a1[3];
  v64 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v11);
  sub_236579B90();
  v12 = v103;
  sub_2365B0A7C();
  if (v12)
  {
    v15 = v63;
    v16 = (uint64_t)v64;
    v44 = v65;
    v17 = sub_2365AFA5C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v15, v17);
    type metadata accessor for SetupModel(0);
    swift_deallocPartialClassInstance();
    v43 = v16;
  }
  else
  {
    v57 = v5;
    v103 = v7;
    v13 = v8;
    LOBYTE(v79) = 0;
    sub_236579CA0();
    sub_2365B0770();
    v14 = v102;
    LOBYTE(v79) = 1;
    sub_236579CE4();
    sub_2365B0770();
    v55 = v14;
    v19 = v97;
    v20 = v98;
    v56 = v99;
    v21 = v100 | ((unint64_t)v101 << 32);
    LOBYTE(v79) = 2;
    sub_236579D28();
    sub_2365B0770();
    v53 = v20;
    v54 = v21;
    v52 = v19;
    v48 = v90;
    v49 = v91;
    v22 = v93;
    v50 = v92;
    v24 = v94;
    v23 = v95;
    v51 = v96;
    v78 = 3;
    sub_2364F3C58();
    sub_2365B0770();
    v45 = v22;
    v46 = v24;
    v47 = v23;
    v75 = v87;
    v76 = v88;
    v77 = v89;
    v71 = v83;
    v72 = v84;
    v73 = v85;
    v74 = v86;
    v67 = v79;
    v68 = v80;
    v69 = v81;
    v70 = v82;
    v66 = 4;
    sub_23644F0B8(&qword_2563E49F0, (uint64_t (*)(uint64_t))type metadata accessor for AuthenticationModel, (uint64_t)&protocol conformance descriptor for AuthenticationModel);
    v25 = (uint64_t)v61;
    v26 = v62;
    sub_2365B0770();
    v66 = 5;
    sub_23644F0B8(&qword_2563EB9B8, (uint64_t (*)(uint64_t))type metadata accessor for SignInModel, (uint64_t)&protocol conformance descriptor for SignInModel);
    v27 = v59;
    sub_2365B0770();
    v28 = v52;
    v29 = v45;
    v30 = (uint64_t)v103;
    *v103 = v55;
    v31 = v53;
    *(_QWORD *)(v30 + 8) = v28;
    *(_QWORD *)(v30 + 16) = v31;
    WORD2(v31) = WORD2(v54);
    *(_DWORD *)(v30 + 32) = v54;
    *(_WORD *)(v30 + 36) = WORD2(v31);
    v32 = v49;
    *(_QWORD *)(v30 + 40) = v48;
    *(_QWORD *)(v30 + 48) = v32;
    *(_QWORD *)(v30 + 56) = v50;
    *(_QWORD *)(v30 + 64) = v29;
    v33 = v47;
    *(_QWORD *)(v30 + 72) = v46;
    *(_QWORD *)(v30 + 80) = v33;
    *(_BYTE *)(v30 + 88) = v51;
    v34 = v76;
    *(_OWORD *)(v30 + 224) = v75;
    *(_OWORD *)(v30 + 240) = v34;
    *(_OWORD *)(v30 + 256) = v77;
    v35 = v72;
    *(_OWORD *)(v30 + 160) = v71;
    *(_OWORD *)(v30 + 176) = v35;
    v36 = v74;
    *(_OWORD *)(v30 + 192) = v73;
    *(_OWORD *)(v30 + 208) = v36;
    v37 = v68;
    *(_OWORD *)(v30 + 96) = v67;
    *(_OWORD *)(v30 + 112) = v37;
    v38 = v70;
    *(_OWORD *)(v30 + 128) = v69;
    *(_OWORD *)(v30 + 144) = v38;
    v39 = (uint64_t)v27;
    v40 = v57;
    v41 = v30 + *(int *)(v57 + 32);
    *(_QWORD *)(v30 + 24) = v56;
    sub_23646591C(v25, v41, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
    sub_23646591C(v39, v30 + *(int *)(v40 + 36), (uint64_t (*)(_QWORD))type metadata accessor for SignInModel);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6AC8);
    v42 = swift_allocObject();
    *(_DWORD *)(v42 + ((*(unsigned int *)(*(_QWORD *)v42 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
    sub_23648DFF8(v30, v42 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v42 + 16), type metadata accessor for SetupModel.ModelData);
    sub_236465A18(v30, type metadata accessor for SetupModel.ModelData);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v26);
    v43 = (uint64_t)v64;
    v44 = v65;
    *(_QWORD *)(v65 + 16) = v42;
  }
  __swift_destroy_boxed_opaque_existential_1(v43);
  return v44;
}

uint64_t sub_236574448()
{
  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA38();
  return swift_release();
}

uint64_t sub_2365744FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for SetupModel.ModelData(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  v16 = a1;
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA44();
  swift_release();
  v7 = *(_QWORD *)(a1 + 16);
  v8 = (_QWORD *)MEMORY[0x24BEE27A8];
  v9 = v7 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v7 + 16);
  v10 = (os_unfair_lock_s *)(v7 + ((*(unsigned int *)(*(_QWORD *)v7 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v10);
  sub_23648DFF8(v9, (uint64_t)v6, type metadata accessor for SetupModel.ModelData);
  os_unfair_lock_unlock(v10);
  swift_release();
  swift_getKeyPath();
  v16 = a2;
  sub_2365AFA44();
  swift_release();
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v11 + *(_QWORD *)(*v8 + *(_QWORD *)v11 + 16);
  v13 = (os_unfair_lock_s *)(v11 + ((*(unsigned int *)(*(_QWORD *)v11 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v13);
  sub_236465A18(v12, type metadata accessor for SetupModel.ModelData);
  sub_23648DFF8((uint64_t)v6, v12, type metadata accessor for SetupModel.ModelData);
  os_unfair_lock_unlock(v13);
  swift_release();
  return sub_236465A18((uint64_t)v6, type metadata accessor for SetupModel.ModelData);
}

uint64_t sub_2365746E4()
{
  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA38();
  return swift_release();
}

uint64_t sub_2365747A8()
{
  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA38();
  return swift_release();
}

uint64_t sub_23657486C()
{
  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA38();
  return swift_release();
}

uint64_t sub_236574930()
{
  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA38();
  return swift_release();
}

uint64_t sub_2365749F4()
{
  swift_getKeyPath();
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA38();
  return swift_release();
}

uint64_t SetupModel.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  v1 = v0 + OBJC_IVAR____TtC12AppleIDSetup10SetupModel___observationRegistrar;
  v2 = sub_2365AFA5C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t SetupModel.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  v1 = v0 + OBJC_IVAR____TtC12AppleIDSetup10SetupModel___observationRegistrar;
  v2 = sub_2365AFA5C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_236574B5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v8;
  __int128 v9[4];

  v1 = type metadata accessor for SetupModel.ModelData(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2365B09E0();
  swift_getKeyPath();
  v8 = v0;
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA44();
  swift_release();
  v4 = *(_QWORD *)(v0 + 16);
  v5 = v4 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v4 + 16);
  v6 = (os_unfair_lock_s *)(v4 + ((*(unsigned int *)(*(_QWORD *)v4 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v6);
  sub_23648DFF8(v5, (uint64_t)v3, type metadata accessor for SetupModel.ModelData);
  os_unfair_lock_unlock(v6);
  swift_release();
  sub_236573838(v9);
  sub_236465A18((uint64_t)v3, type metadata accessor for SetupModel.ModelData);
  return sub_2365B0A34();
}

uint64_t sub_236574CAC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  type metadata accessor for SetupModel(0);
  v5 = swift_allocObject();
  result = SetupModel.init(from:)(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

void sub_236574D04(_QWORD *a1)
{
  sub_2365739B4(a1);
}

uint64_t sub_236574D24(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v20;
  uint64_t v21;

  v4 = type metadata accessor for SetupModel.ModelData(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (unsigned __int8 *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (unsigned __int8 *)&v20 - v8;
  v10 = *a1;
  v11 = *a2;
  swift_getKeyPath();
  v21 = v10;
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA44();
  swift_release();
  v12 = *(_QWORD *)(v10 + 16);
  v13 = (_QWORD *)MEMORY[0x24BEE27A8];
  v14 = v12 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v12 + 16);
  v15 = (os_unfair_lock_s *)(v12 + ((*(unsigned int *)(*(_QWORD *)v12 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v15);
  sub_236573588(v14, (uint64_t)v9);
  os_unfair_lock_unlock(v15);
  swift_release();
  swift_getKeyPath();
  v21 = v11;
  sub_2365AFA44();
  swift_release();
  v16 = *(_QWORD *)(v11 + 16);
  v17 = v16 + *(_QWORD *)(*v13 + *(_QWORD *)v16 + 16);
  v18 = (os_unfair_lock_s *)(v16 + ((*(unsigned int *)(*(_QWORD *)v16 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v18);
  sub_236573588(v17, (uint64_t)v7);
  os_unfair_lock_unlock(v18);
  swift_release();
  LOBYTE(v17) = sub_2365792EC(v9, v7);
  sub_236465A18((uint64_t)v7, type metadata accessor for SetupModel.ModelData);
  sub_236465A18((uint64_t)v9, type metadata accessor for SetupModel.ModelData);
  return v17 & 1;
}

uint64_t sub_236574F44()
{
  return sub_236574B5C();
}

uint64_t sub_236574F64(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  _QWORD v11[2];

  v3 = type metadata accessor for SetupModel.ModelData(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v1;
  swift_getKeyPath();
  v11[1] = v6;
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA44();
  swift_release();
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v7 + 16);
  v9 = (os_unfair_lock_s *)(v7 + ((*(unsigned int *)(*(_QWORD *)v7 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v9);
  sub_236573588(v8, (uint64_t)v5);
  os_unfair_lock_unlock(v9);
  swift_release();
  sub_236573838(a1);
  return sub_236465A18((uint64_t)v5, type metadata accessor for SetupModel.ModelData);
}

uint64_t sub_2365750B0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  _QWORD v9[3];
  __int128 v10[4];

  v1 = type metadata accessor for SetupModel.ModelData(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2365B09E0();
  v4 = *v0;
  swift_getKeyPath();
  v9[2] = v4;
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA44();
  swift_release();
  v5 = *(_QWORD *)(v4 + 16);
  v6 = v5 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v5 + 16);
  v7 = (os_unfair_lock_s *)(v5 + ((*(unsigned int *)(*(_QWORD *)v5 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v7);
  sub_236573588(v6, (uint64_t)v3);
  os_unfair_lock_unlock(v7);
  swift_release();
  sub_236573838(v10);
  sub_236465A18((uint64_t)v3, type metadata accessor for SetupModel.ModelData);
  return sub_2365B0A34();
}

uint64_t sub_236575214()
{
  __int128 v1[4];

  sub_2365B09E0();
  sub_236573838(v1);
  return sub_2365B0A34();
}

uint64_t sub_236575254()
{
  __int128 v1[4];

  sub_2365B09E0();
  sub_236573838(v1);
  return sub_2365B0A34();
}

uint64_t SetupModel.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  void *v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _OWORD *v28;
  os_unfair_lock_s *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  os_unfair_lock_s *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  os_unfair_lock_s *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;

  v1 = v0;
  v59 = type metadata accessor for SignInModel();
  MEMORY[0x24BDAC7A8](v59);
  v58 = (uint64_t)&v54 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for AuthenticationModel();
  MEMORY[0x24BDAC7A8](v57);
  v56 = (uint64_t)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v85 = 0;
  *((_QWORD *)&v85 + 1) = 0xE000000000000000;
  sub_2365B0578();
  v84 = v85;
  sub_2365B00B0();
  swift_getKeyPath();
  v4 = v0 + OBJC_IVAR____TtC12AppleIDSetup10SetupModel___observationRegistrar;
  *(_QWORD *)&v85 = v0;
  v5 = sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA44();
  swift_release();
  swift_getKeyPath();
  *(_QWORD *)&v85 = v0;
  sub_2365AFA44();
  swift_release();
  v6 = *(_QWORD *)(v0 + 16);
  v7 = (_QWORD *)MEMORY[0x24BEE27A8];
  v8 = *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v6 + 16);
  v9 = (os_unfair_lock_s *)(v6 + ((*(unsigned int *)(*(_QWORD *)v6 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v9);
  LOBYTE(v8) = *(_BYTE *)(v6 + v8);
  os_unfair_lock_unlock(v9);
  swift_release();
  LOBYTE(v85) = v8;
  sub_2365B065C();
  sub_2365B00B0();
  swift_getKeyPath();
  *(_QWORD *)&v85 = v1;
  v60 = v5;
  v61 = v4;
  sub_2365AFA44();
  swift_release();
  swift_getKeyPath();
  *(_QWORD *)&v85 = v1;
  sub_2365AFA44();
  swift_release();
  v10 = *(_QWORD *)(v1 + 16);
  v11 = v10 + *(_QWORD *)(*v7 + *(_QWORD *)v10 + 16);
  v12 = (os_unfair_lock_s *)(v10 + ((*(unsigned int *)(*(_QWORD *)v10 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v12);
  v13 = *(void **)(v11 + 8);
  v14 = *(void **)(v11 + 16);
  v15 = *(_QWORD *)(v11 + 24);
  LOWORD(v7) = *(_WORD *)(v11 + 36);
  LODWORD(v11) = *(_DWORD *)(v11 + 32);
  sub_236499054(v13, v14, v15);
  os_unfair_lock_unlock(v12);
  swift_release();
  *(_QWORD *)&v85 = v13;
  *((_QWORD *)&v85 + 1) = v14;
  *(_QWORD *)&v86 = v15;
  WORD6(v86) = (_WORD)v7;
  DWORD2(v86) = v11;
  sub_2365B065C();
  sub_2364984F8(v13, v14, v15);
  sub_2365B00B0();
  swift_getKeyPath();
  *(_QWORD *)&v85 = v1;
  sub_2365AFA44();
  swift_release();
  swift_getKeyPath();
  *(_QWORD *)&v85 = v1;
  v55 = v1;
  sub_2365AFA44();
  swift_release();
  v16 = *(_QWORD *)(v1 + 16);
  v17 = v16 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v16 + 16);
  v18 = (os_unfair_lock_s *)(v16 + ((*(unsigned int *)(*(_QWORD *)v16 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v18);
  v19 = *(_QWORD *)(v17 + 40);
  v20 = *(_QWORD *)(v17 + 48);
  v21 = *(_QWORD *)(v17 + 56);
  v22 = *(_QWORD *)(v17 + 64);
  v24 = *(_QWORD *)(v17 + 72);
  v23 = *(_QWORD *)(v17 + 80);
  LOBYTE(v17) = *(_BYTE *)(v17 + 88);
  sub_236579B30(v19, v20, v21, v22, v24, v23, v17);
  os_unfair_lock_unlock(v18);
  swift_release();
  *(_QWORD *)&v85 = v19;
  *((_QWORD *)&v85 + 1) = v20;
  *(_QWORD *)&v86 = v21;
  *((_QWORD *)&v86 + 1) = v22;
  *(_QWORD *)&v87 = v24;
  *((_QWORD *)&v87 + 1) = v23;
  LOBYTE(v88) = v17;
  sub_2365B065C();
  sub_236579AE0(v19, v20, v21, v22, v24, v23, v17);
  sub_2365B00B0();
  swift_getKeyPath();
  v25 = v55;
  *(_QWORD *)&v85 = v55;
  sub_2365AFA44();
  swift_release();
  swift_getKeyPath();
  *(_QWORD *)&v85 = v25;
  sub_2365AFA44();
  swift_release();
  v26 = *(_QWORD *)(v25 + 16);
  v27 = (_QWORD *)MEMORY[0x24BEE27A8];
  v28 = (_OWORD *)(v26 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v26 + 16));
  v29 = (os_unfair_lock_s *)(v26 + ((*(unsigned int *)(*(_QWORD *)v26 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v29);
  v30 = v28[6];
  v31 = v28[8];
  v86 = v28[7];
  v87 = v31;
  v85 = v30;
  v32 = v28[9];
  v33 = v28[10];
  v34 = v28[12];
  v90 = v28[11];
  v91 = v34;
  v88 = v32;
  v89 = v33;
  v35 = v28[13];
  v36 = v28[14];
  v37 = v28[16];
  v94 = v28[15];
  v95 = v37;
  v92 = v35;
  v93 = v36;
  v38 = v28[15];
  v81 = v28[14];
  v82 = v38;
  v83 = v28[16];
  v39 = v28[11];
  v77 = v28[10];
  v78 = v39;
  v40 = v28[13];
  v79 = v28[12];
  v80 = v40;
  v41 = v28[7];
  v73 = v28[6];
  v74 = v41;
  v42 = v28[9];
  v75 = v28[8];
  v76 = v42;
  sub_236499A64((uint64_t)&v85);
  os_unfair_lock_unlock(v29);
  swift_release();
  v93 = v81;
  v94 = v82;
  v95 = v83;
  v89 = v77;
  v90 = v78;
  v91 = v79;
  v92 = v80;
  v85 = v73;
  v86 = v74;
  v87 = v75;
  v88 = v76;
  v70 = v81;
  v71 = v82;
  v72 = v83;
  v66 = v77;
  v67 = v78;
  v68 = v79;
  v69 = v80;
  v62 = v73;
  v63 = v74;
  v64 = v75;
  v65 = v76;
  sub_2365B065C();
  sub_236498A84((uint64_t)&v85);
  sub_2365B00B0();
  swift_getKeyPath();
  *(_QWORD *)&v62 = v25;
  sub_2365AFA44();
  swift_release();
  swift_getKeyPath();
  *(_QWORD *)&v62 = v25;
  sub_2365AFA44();
  swift_release();
  v43 = *(_QWORD *)(v25 + 16);
  v44 = *(_QWORD *)(*v27 + *(_QWORD *)v43 + 16);
  v45 = (os_unfair_lock_s *)(v43 + ((*(unsigned int *)(*(_QWORD *)v43 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v45);
  v46 = type metadata accessor for SetupModel.ModelData(0);
  v47 = v56;
  sub_23648DFF8(v43 + *(int *)(v46 + 32) + v44, v56, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  os_unfair_lock_unlock(v45);
  swift_release();
  sub_2365B065C();
  sub_236465A18(v47, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  sub_2365B00B0();
  swift_getKeyPath();
  *(_QWORD *)&v62 = v25;
  sub_2365AFA44();
  swift_release();
  swift_getKeyPath();
  *(_QWORD *)&v62 = v25;
  sub_2365AFA44();
  swift_release();
  v48 = *(_QWORD *)(v25 + 16);
  v49 = *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v48 + 16);
  v50 = (os_unfair_lock_s *)(v48 + ((*(unsigned int *)(*(_QWORD *)v48 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v50);
  v51 = v48 + *(int *)(v46 + 36) + v49;
  v52 = v58;
  sub_23648DFF8(v51, v58, (uint64_t (*)(_QWORD))type metadata accessor for SignInModel);
  os_unfair_lock_unlock(v50);
  swift_release();
  sub_2365B065C();
  sub_236465A18(v52, (uint64_t (*)(_QWORD))type metadata accessor for SignInModel);
  sub_2365B00B0();
  return v84;
}

uint64_t sub_236575B50()
{
  return SetupModel.description.getter();
}

void SetupModel.State.hash(into:)()
{
  uint64_t v0;

  switch(*(_BYTE *)(v0 + 48))
  {
    case 0xFA:
    case 0xFB:
    case 0xFC:
    case 0xFD:
    case 0xFE:
    case 0xFF:
      sub_2365B09F8();
      break;
    default:
      sub_2365B09F8();
      SetupError.hash(into:)();
      break;
  }
}

uint64_t sub_236575C44()
{
  sub_236579EE4();
  return sub_2365B0AD0();
}

uint64_t sub_236575C6C()
{
  sub_236579EE4();
  return sub_2365B0ADC();
}

uint64_t sub_236575C94()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_236575CC4 + 4 * byte_2365C782A[*v0]))(0x6C616974696E69, 0xE700000000000000);
}

uint64_t sub_236575CC4()
{
  return 0x7265766F63736964;
}

uint64_t sub_236575CDC()
{
  return 0x69746E6568747561;
}

uint64_t sub_236575CFC()
{
  return 0x6E496E676973;
}

uint64_t sub_236575D10()
{
  return 0x64656873696E6966;
}

uint64_t sub_236575D28()
{
  return 0x64656C696166;
}

uint64_t sub_236575D3C()
{
  return 0x7373696D736964;
}

uint64_t sub_236575D50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23657F49C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_236575D74()
{
  sub_236579D90();
  return sub_2365B0AD0();
}

uint64_t sub_236575D9C()
{
  sub_236579D90();
  return sub_2365B0ADC();
}

uint64_t sub_236575DC4()
{
  sub_236579F28();
  return sub_2365B0AD0();
}

uint64_t sub_236575DEC()
{
  sub_236579F28();
  return sub_2365B0ADC();
}

uint64_t sub_236575E14()
{
  sub_236579DD4();
  return sub_2365B0AD0();
}

uint64_t sub_236575E3C()
{
  sub_236579DD4();
  return sub_2365B0ADC();
}

uint64_t sub_236575E64()
{
  sub_236579E18();
  return sub_2365B0AD0();
}

uint64_t sub_236575E8C()
{
  sub_236579E18();
  return sub_2365B0ADC();
}

uint64_t sub_236575EB4()
{
  sub_236579E5C();
  return sub_2365B0AD0();
}

uint64_t sub_236575EDC()
{
  sub_236579E5C();
  return sub_2365B0ADC();
}

uint64_t sub_236575F04()
{
  sub_236579F6C();
  return sub_2365B0AD0();
}

uint64_t sub_236575F2C()
{
  sub_236579F6C();
  return sub_2365B0ADC();
}

uint64_t sub_236575F54()
{
  sub_236579EA0();
  return sub_2365B0AD0();
}

uint64_t sub_236575F7C()
{
  sub_236579EA0();
  return sub_2365B0ADC();
}

uint64_t SetupModel.State.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  char *v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  uint64_t *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC7E8);
  v58 = *(_QWORD *)(v3 - 8);
  v59 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v57 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC7F0);
  v61 = *(_QWORD *)(v5 - 8);
  v62 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v60 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC7F8);
  v55 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v54 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC800);
  v52 = *(_QWORD *)(v53 - 8);
  MEMORY[0x24BDAC7A8](v53);
  v51 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC808);
  v49 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v48 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC810);
  v46 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC818);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC820);
  v69 = *(_QWORD *)(v16 - 8);
  v70 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v18 = *(_QWORD *)v1;
  v67 = *(_QWORD *)(v1 + 8);
  v68 = v18;
  v19 = *(_QWORD *)(v1 + 16);
  v65 = *(_QWORD *)(v1 + 24);
  v66 = v19;
  v20 = *(_QWORD *)(v1 + 32);
  v63 = *(_QWORD *)(v1 + 40);
  v64 = v20;
  v21 = *(unsigned __int8 *)(v1 + 48);
  v22 = a1[3];
  v23 = a1;
  v24 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(v23, v22);
  sub_236579D90();
  sub_2365B0AAC();
  switch(v21)
  {
    case 250:
      LOBYTE(v71) = 6;
      sub_236579DD4();
      v25 = v57;
      v26 = v70;
      sub_2365B07B8();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v25, v59);
      goto LABEL_11;
    case 251:
      LOBYTE(v71) = 4;
      sub_236579E5C();
      v37 = v54;
      v26 = v70;
      sub_2365B07B8();
      v38 = *(void (**)(char *, uint64_t))(v55 + 8);
      v39 = v37;
      v40 = &v80;
      goto LABEL_7;
    case 252:
      LOBYTE(v71) = 3;
      sub_236579EA0();
      v41 = v51;
      v26 = v70;
      sub_2365B07B8();
      v38 = *(void (**)(char *, uint64_t))(v52 + 8);
      v39 = v41;
      v40 = &v79;
      goto LABEL_7;
    case 253:
      LOBYTE(v71) = 2;
      sub_236579EE4();
      v42 = v48;
      v26 = v70;
      sub_2365B07B8();
      v38 = *(void (**)(char *, uint64_t))(v49 + 8);
      v39 = v42;
      v40 = &v78;
LABEL_7:
      v43 = *(v40 - 32);
      goto LABEL_10;
    case 254:
      LOBYTE(v71) = 1;
      sub_236579F28();
      v44 = v70;
      sub_2365B07B8();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v11, v47);
      return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v24, v44);
    case 255:
      LOBYTE(v71) = 0;
      sub_236579F6C();
      v26 = v70;
      sub_2365B07B8();
      v38 = *(void (**)(char *, uint64_t))(v13 + 8);
      v39 = v15;
      v43 = v12;
LABEL_10:
      v38(v39, v43);
LABEL_11:
      result = (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v24, v26);
      break;
    default:
      LOBYTE(v71) = 5;
      v27 = v68;
      v28 = v66;
      v29 = v65;
      v30 = v64;
      sub_23645DC04(v68, v67, v66, v65, v64, v63, v21);
      sub_236579E18();
      v31 = v60;
      v32 = v70;
      sub_2365B07B8();
      v71 = v27;
      v33 = v67;
      v72 = v67;
      v73 = v28;
      v74 = v29;
      v75 = v30;
      v34 = v63;
      v76 = v63;
      v77 = v21;
      sub_23645E9CC();
      v35 = v62;
      sub_2365B0824();
      (*(void (**)(char *, uint64_t))(v61 + 8))(v31, v35);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v24, v32);
      result = sub_236579AE0(v68, v33, v66, v65, v64, v34, v21);
      break;
  }
  return result;
}

uint64_t SetupModel.State.hashValue.getter()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 48);
  sub_2365B09E0();
  switch(v1)
  {
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
      sub_2365B09F8();
      break;
    default:
      sub_2365B09F8();
      SetupError.hash(into:)();
      break;
  }
  return sub_2365B0A34();
}

uint64_t SetupModel.State.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD v26[4];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;

  v40 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC868);
  v37 = *(_QWORD *)(v3 - 8);
  v38 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v44 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC870);
  v6 = *(_QWORD *)(v5 - 8);
  v35 = v5;
  v36 = v6;
  MEMORY[0x24BDAC7A8](v5);
  v43 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC878);
  v31 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v42 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC880);
  v32 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v39 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC888);
  v29 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v41 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC890);
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC898);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC8A0);
  v15 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v17 = (char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v46 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v18);
  sub_236579D90();
  v19 = v47;
  sub_2365B0A7C();
  if (!v19)
  {
    v26[1] = v14;
    v26[2] = v13;
    v26[3] = v12;
    v47 = v15;
    v20 = sub_2365B07A0();
    if (*(_QWORD *)(v20 + 16) == 1)
      __asm { BR              X10 }
    v21 = sub_2365B05B4();
    swift_allocError();
    v23 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E47A8);
    *v23 = &type metadata for SetupModel.State;
    v24 = v45;
    sub_2365B0704();
    sub_2365B059C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, *MEMORY[0x24BEE26D0], v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v17, v24);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
}

uint64_t sub_236576EC4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SetupModel.State.init(from:)(a1, a2);
}

uint64_t sub_236576ED8(_QWORD *a1)
{
  return SetupModel.State.encode(to:)(a1);
}

uint64_t sub_236576EF8()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 48);
  sub_2365B09E0();
  switch(v1)
  {
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
      sub_2365B09F8();
      break;
    default:
      sub_2365B09F8();
      SetupError.hash(into:)();
      break;
  }
  return sub_2365B0A34();
}

uint64_t SetupModel.LocalRole.hash(into:)()
{
  return sub_2365B09F8();
}

uint64_t sub_236577010()
{
  _BYTE *v0;

  if (*v0)
    return 0x7463697274736572;
  else
    return 0x6C61756E616DLL;
}

uint64_t sub_23657704C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23657F788(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_236577070()
{
  sub_236579FB0();
  return sub_2365B0AD0();
}

uint64_t sub_236577098()
{
  sub_236579FB0();
  return sub_2365B0ADC();
}

uint64_t sub_2365770C0()
{
  sub_23657A038();
  return sub_2365B0AD0();
}

uint64_t sub_2365770E8()
{
  sub_23657A038();
  return sub_2365B0ADC();
}

uint64_t sub_236577110()
{
  sub_236579FF4();
  return sub_2365B0AD0();
}

uint64_t sub_236577138()
{
  sub_236579FF4();
  return sub_2365B0ADC();
}

uint64_t SetupModel.LocalRole.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC8A8);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC8B0);
  v14 = *(_QWORD *)(v6 - 8);
  v15 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC8B8);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_236579FB0();
  sub_2365B0AAC();
  if ((v12 & 1) != 0)
  {
    v20 = 1;
    sub_236579FF4();
    sub_2365B07B8();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    v19 = 0;
    sub_23657A038();
    sub_2365B07B8();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
}

uint64_t SetupModel.LocalRole.hashValue.getter()
{
  sub_2365B09E0();
  sub_2365B09F8();
  return sub_2365B0A34();
}

uint64_t SetupModel.LocalRole.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v30 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC8D8);
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC8E0);
  v4 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC8E8);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_236579FB0();
  v11 = v33;
  sub_2365B0A7C();
  if (v11)
    goto LABEL_7;
  v26 = v4;
  v27 = a1;
  v12 = v31;
  v13 = v32;
  v33 = v8;
  v14 = sub_2365B07A0();
  v15 = v7;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v19 = sub_2365B05B4();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E47A8);
    *v21 = &type metadata for SetupModel.LocalRole;
    sub_2365B0704();
    sub_2365B059C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v24);
  }
  v16 = *(_BYTE *)(v14 + 32);
  if ((v16 & 1) != 0)
  {
    LODWORD(v28) = *(unsigned __int8 *)(v14 + 32);
    v35 = 1;
    sub_236579FF4();
    sub_2365B06F8();
    v17 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
    v16 = v28;
  }
  else
  {
    v34 = 0;
    sub_23657A038();
    v22 = v6;
    sub_2365B06F8();
    v23 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v15);
  }
  *v18 = v16;
  v24 = (uint64_t)v27;
  return __swift_destroy_boxed_opaque_existential_1(v24);
}

uint64_t sub_2365776D0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return SetupModel.LocalRole.init(from:)(a1, a2);
}

uint64_t sub_2365776E4(_QWORD *a1)
{
  return SetupModel.LocalRole.encode(to:)(a1);
}

void SetupModel.RemoteRole.hash(into:)()
{
  __asm { BR              X10 }
}

uint64_t sub_236577748()
{
  unint64_t v0;
  void *v1;
  void *v2;

  sub_2365B09F8();
  sub_2365B0A04();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_2365B008C();
    sub_2364984F8(v2, v1, v0);
  }
  sub_2365B0A10();
  sub_2365B0A04();
  sub_2365B0A1C();
  sub_2365B0A04();
  return sub_2365B0A04();
}

uint64_t sub_2365778AC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2365778E4 + 4 * byte_2365C784E[a1]))(0x7463697274736572, 0xEA00000000006465);
}

uint64_t sub_2365778E4()
{
  return 0x6E65696C43656C62;
}

uint64_t sub_236577904()
{
  return 0x6576726553656C62;
}

unint64_t sub_236577920()
{
  return 0xD000000000000014;
}

unint64_t sub_236577948()
{
  return 0xD000000000000012;
}

uint64_t sub_236577968()
{
  sub_23657A1D0();
  return sub_2365B0AD0();
}

uint64_t sub_236577990()
{
  sub_23657A1D0();
  return sub_2365B0ADC();
}

uint64_t sub_2365779B8()
{
  sub_23657A0C0();
  return sub_2365B0AD0();
}

uint64_t sub_2365779E0()
{
  sub_23657A0C0();
  return sub_2365B0ADC();
}

uint64_t sub_236577A08()
{
  sub_23657A18C();
  return sub_2365B0AD0();
}

uint64_t sub_236577A30()
{
  sub_23657A18C();
  return sub_2365B0ADC();
}

uint64_t sub_236577A58()
{
  unsigned __int8 *v0;

  return sub_2365778AC(*v0);
}

uint64_t sub_236577A60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23657F87C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_236577A84()
{
  sub_23657A07C();
  return sub_2365B0AD0();
}

uint64_t sub_236577AAC()
{
  sub_23657A07C();
  return sub_2365B0ADC();
}

uint64_t sub_236577AD4()
{
  sub_23657A148();
  return sub_2365B0AD0();
}

uint64_t sub_236577AFC()
{
  sub_23657A148();
  return sub_2365B0ADC();
}

uint64_t sub_236577B24()
{
  sub_23657A104();
  return sub_2365B0AD0();
}

uint64_t sub_236577B4C()
{
  sub_23657A104();
  return sub_2365B0ADC();
}

uint64_t sub_236577B74()
{
  sub_23657A214();
  return sub_2365B0AD0();
}

uint64_t sub_236577B9C()
{
  sub_23657A214();
  return sub_2365B0ADC();
}

void SetupModel.RemoteRole.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC8F0);
  v17 = *(_QWORD *)(v3 - 8);
  v18 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v16 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC8F8);
  v26 = *(_QWORD *)(v5 - 8);
  v27 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v25 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC900);
  v23 = *(_QWORD *)(v7 - 8);
  v24 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v22 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC908);
  v14[1] = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v14[0] = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC910);
  v20 = *(_QWORD *)(v10 - 8);
  v21 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC918);
  MEMORY[0x24BDAC7A8](v19);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC920);
  v30 = *(_QWORD *)(v11 - 8);
  v31 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v12 = *(_QWORD *)(v1 + 16);
  v13 = *(unsigned int *)(v1 + 24) | ((unint64_t)*(unsigned __int16 *)(v1 + 28) << 32);
  v28 = *(_QWORD *)(v1 + 8);
  v29 = v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23657A07C();
  sub_2365B0AAC();
  __asm { BR              X10 }
}

uint64_t sub_236577E20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 - 144);
  *(_QWORD *)(v4 - 160) = HIDWORD(v5);
  *(_BYTE *)(v4 - 120) = 1;
  sub_23657A1D0();
  v6 = *(_QWORD *)(v4 - 128);
  sub_2365B07B8();
  v7 = *(_QWORD *)(v4 - 152);
  *(_QWORD *)(v4 - 120) = v1;
  *(_QWORD *)(v4 - 112) = v7;
  *(_WORD *)(v4 - 104) = v2;
  *(_BYTE *)(v4 - 100) = BYTE4(v2);
  *(_DWORD *)(v4 - 96) = v5;
  *(_BYTE *)(v4 - 92) = *(_QWORD *)(v4 - 160);
  *(_BYTE *)(v4 - 91) = BYTE5(v5);
  sub_236521E08();
  v8 = *(_QWORD *)(v4 - 208);
  sub_2365B0824();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 216) + 8))(v0, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 136) + 8))(v3, v6);
}

uint64_t SetupModel.RemoteRole.hashValue.getter()
{
  sub_2365B09E0();
  SetupModel.RemoteRole.hash(into:)();
  return sub_2365B0A34();
}

uint64_t SetupModel.RemoteRole.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD v25[5];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;

  v35 = a2;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC960);
  v39 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v38 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC968);
  v5 = *(_QWORD *)(v4 - 8);
  v27 = v4;
  v28 = v5;
  MEMORY[0x24BDAC7A8](v4);
  v34 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC970);
  v29 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v37 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC978);
  v25[3] = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v32 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC980);
  v25[4] = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v33 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC988);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EC990);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v40 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v18);
  sub_23657A07C();
  v19 = v41;
  sub_2365B0A7C();
  if (!v19)
  {
    v41 = v13;
    v25[1] = v11;
    v25[2] = v10;
    v20 = sub_2365B07A0();
    if (*(_QWORD *)(v20 + 16) == 1)
      __asm { BR              X10 }
    v21 = sub_2365B05B4();
    swift_allocError();
    v23 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E47A8);
    *v23 = &type metadata for SetupModel.RemoteRole;
    sub_2365B0704();
    sub_2365B059C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, *MEMORY[0x24BEE26D0], v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
}

uint64_t sub_2365789F0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SetupModel.RemoteRole.init(from:)(a1, a2);
}

void sub_236578A04(_QWORD *a1)
{
  SetupModel.RemoteRole.encode(to:)(a1);
}

uint64_t sub_236578A1C()
{
  sub_2365B09E0();
  SetupModel.RemoteRole.hash(into:)();
  return sub_2365B0A34();
}

uint64_t sub_236578A80()
{
  sub_2365B09E0();
  SetupModel.RemoteRole.hash(into:)();
  return sub_2365B0A34();
}

void _s12AppleIDSetup10SetupModelC10RemoteRoleO2eeoiySbAE_AEtFZ_0(uint64_t a1)
{
  __asm { BR              X10 }
}

BOOL sub_236578B40(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, __int16 a12, char a13, int a14, char a15, char a16, uint64_t a17, uint64_t a18, __int16 a19, __int16 a20,char a21,int a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  BOOL v44;
  _QWORD v46[2];
  __int16 v47;
  char v48;
  int v49;
  char v50;
  char v51;
  _QWORD v52[2];
  __int16 v53;
  char v54;
  int v55;
  char v56;
  char v57;

  if (v37 >> 62)
  {
    sub_236499054(v42, v38, v37);
    sub_236499054(v43, v41, v40);
    sub_2364984F8(v43, v41, v40);
    sub_2364984F8(v42, v38, v37);
    return 0;
  }
  else
  {
    v52[0] = v43;
    v52[1] = v41;
    v53 = v40;
    v54 = BYTE4(v40);
    v55 = v39;
    v56 = BYTE4(v39);
    v57 = BYTE5(v39);
    v46[0] = v42;
    v46[1] = v38;
    v47 = v37;
    v48 = BYTE4(v37);
    v49 = v36;
    v50 = BYTE4(v36);
    v51 = BYTE5(v36);
    v44 = _s12AppleIDSetup9BLEDeviceV2eeoiySbAC_ACtFZ_0((uint64_t)v52, (uint64_t)v46);
    sub_236499054(v42, v38, v37);
    sub_236499054(v43, v41, v40);
    sub_2364984F8(v43, v41, v40);
    sub_2364984F8(v42, v38, v37);
  }
  return v44;
}

uint64_t _s12AppleIDSetup10SetupModelC5StateO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[6];
  char v40;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_BYTE *)(a1 + 48);
  v10 = *(_QWORD *)a2;
  v9 = *(_QWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a2 + 32);
  v38 = *(_QWORD *)(a2 + 40);
  v14 = *(unsigned __int8 *)(a2 + 48);
  switch(v8)
  {
    case -6:
      if (v14 != 250)
        goto LABEL_15;
      sub_236579AE0(v2, v3, v5, v4, v6, v7, 250);
      v15 = v10;
      v16 = v9;
      v17 = v12;
      v18 = v11;
      v19 = v13;
      v20 = v38;
      v21 = -6;
      goto LABEL_17;
    case -5:
      if (v14 != 251)
        goto LABEL_15;
      sub_236579AE0(v2, v3, v5, v4, v6, v7, 251);
      v15 = v10;
      v16 = v9;
      v17 = v12;
      v18 = v11;
      v19 = v13;
      v20 = v38;
      v21 = -5;
      goto LABEL_17;
    case -4:
      if (v14 != 252)
        goto LABEL_15;
      sub_236579AE0(v2, v3, v5, v4, v6, v7, 252);
      v15 = v10;
      v16 = v9;
      v17 = v12;
      v18 = v11;
      v19 = v13;
      v20 = v38;
      v21 = -4;
      goto LABEL_17;
    case -3:
      if (v14 != 253)
        goto LABEL_15;
      sub_236579AE0(v2, v3, v5, v4, v6, v7, 253);
      v15 = v10;
      v16 = v9;
      v17 = v12;
      v18 = v11;
      v19 = v13;
      v20 = v38;
      v21 = -3;
      goto LABEL_17;
    case -2:
      if (v14 != 254)
        goto LABEL_15;
      sub_236579AE0(v2, v3, v5, v4, v6, v7, 254);
      v15 = v10;
      v16 = v9;
      v17 = v12;
      v18 = v11;
      v19 = v13;
      v20 = v38;
      v21 = -2;
      goto LABEL_17;
    case -1:
      if (v14 != 255)
        goto LABEL_15;
      sub_236579AE0(v2, v3, v5, v4, v6, v7, 255);
      v15 = v10;
      v16 = v9;
      v17 = v12;
      v18 = v11;
      v19 = v13;
      v20 = v38;
      v21 = -1;
LABEL_17:
      sub_236579AE0(v15, v16, v17, v18, v19, v20, v21);
      v26 = 1;
      break;
    default:
      if (v14 > 0xF9)
      {
LABEL_15:
        v37 = *(_QWORD *)(a2 + 16);
        v35 = *(_QWORD *)a2;
        v36 = *(_QWORD *)(a2 + 8);
        v27 = *(_BYTE *)(a1 + 48);
        v28 = *(_BYTE *)(a2 + 48);
        v29 = *(_QWORD *)a1;
        sub_236579B30(*(_QWORD *)a2, v36, v37, v11, v13, v38, v14);
        sub_236579B30(v29, v3, v5, v4, v6, v7, v27);
        sub_236579AE0(v29, v3, v5, v4, v6, v7, v27);
        sub_236579AE0(v35, v36, v37, v11, v13, v38, v28);
        v26 = 0;
      }
      else
      {
        v39[0] = *(_QWORD *)a1;
        v39[1] = v3;
        v39[2] = v5;
        v39[3] = v4;
        v39[4] = v6;
        v39[5] = v7;
        v40 = v8;
        v32 = v6;
        v33 = v13;
        v22 = v13;
        v23 = v8;
        v31 = v14;
        v24 = v2;
        v34 = v2;
        sub_236579B30(v10, v9, v12, v11, v22, v38, v14);
        sub_236579B30(v24, v3, v5, v4, v32, v7, v23);
        sub_236579B30(v10, v9, v12, v11, v33, v38, v31);
        sub_236579B30(v34, v3, v5, v4, v32, v7, v23);
        static SetupError.== infix(_:_:)((uint64_t)v39);
        v26 = v25;
        sub_236579AE0(v34, v3, v5, v4, v32, v7, v23);
        sub_236579AE0(v10, v9, v12, v11, v33, v38, v31);
        sub_236579AE0(v10, v9, v12, v11, v33, v38, v31);
        sub_236579AE0(v34, v3, v5, v4, v32, v7, v23);
      }
      break;
  }
  return v26 & 1;
}

uint64_t sub_2365792EC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  int v5;
  __int16 v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  char v10;
  unsigned __int8 v11;
  __int128 v12;
  unsigned __int8 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  if (*a1 != *a2)
    return 0;
  v4 = *((_QWORD *)a1 + 3);
  v5 = *((_DWORD *)a1 + 8);
  v6 = *((_WORD *)a1 + 18);
  v38 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)&v39 = v4;
  WORD6(v39) = v6;
  DWORD2(v39) = v5;
  v7 = *((_QWORD *)a2 + 3);
  v8 = *((_DWORD *)a2 + 8);
  v9 = *((_WORD *)a2 + 18);
  v27 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)&v28 = v7;
  WORD6(v28) = v9;
  DWORD2(v28) = v8;
  _s12AppleIDSetup10SetupModelC10RemoteRoleO2eeoiySbAE_AEtFZ_0((uint64_t)&v38);
  if ((v10 & 1) == 0)
    return 0;
  v11 = a1[88];
  v12 = *(_OWORD *)(a1 + 56);
  v38 = *(_OWORD *)(a1 + 40);
  v39 = v12;
  v40 = *(_OWORD *)(a1 + 72);
  LOBYTE(v41) = v11;
  v13 = a2[88];
  v14 = *(_OWORD *)(a2 + 56);
  v27 = *(_OWORD *)(a2 + 40);
  v28 = v14;
  v29 = *(_OWORD *)(a2 + 72);
  LOBYTE(v30) = v13;
  if ((_s12AppleIDSetup10SetupModelC5StateO2eeoiySbAE_AEtFZ_0((uint64_t)&v38, (uint64_t)&v27) & 1) == 0)
    return 0;
  v15 = *((_OWORD *)a1 + 15);
  v46 = *((_OWORD *)a1 + 14);
  v47 = v15;
  v48 = *((_OWORD *)a1 + 16);
  v16 = *((_OWORD *)a1 + 11);
  v42 = *((_OWORD *)a1 + 10);
  v43 = v16;
  v17 = *((_OWORD *)a1 + 13);
  v44 = *((_OWORD *)a1 + 12);
  v45 = v17;
  v18 = *((_OWORD *)a1 + 7);
  v38 = *((_OWORD *)a1 + 6);
  v39 = v18;
  v19 = *((_OWORD *)a1 + 9);
  v40 = *((_OWORD *)a1 + 8);
  v41 = v19;
  v20 = *((_OWORD *)a2 + 15);
  v35 = *((_OWORD *)a2 + 14);
  v36 = v20;
  v37 = *((_OWORD *)a2 + 16);
  v21 = *((_OWORD *)a2 + 11);
  v31 = *((_OWORD *)a2 + 10);
  v32 = v21;
  v22 = *((_OWORD *)a2 + 13);
  v33 = *((_OWORD *)a2 + 12);
  v34 = v22;
  v23 = *((_OWORD *)a2 + 7);
  v27 = *((_OWORD *)a2 + 6);
  v28 = v23;
  v24 = *((_OWORD *)a2 + 9);
  v29 = *((_OWORD *)a2 + 8);
  v30 = v24;
  if (!_s12AppleIDSetup14DiscoveryModelV2eeoiySbAC_ACtFZ_0((unsigned __int8 *)&v38, (unsigned __int8 *)&v27))
    return 0;
  v25 = type metadata accessor for SetupModel.ModelData(0);
  if (_s12AppleIDSetup19AuthenticationModelV2eeoiySbAC_ACtFZ_0((uint64_t)&a1[*(int *)(v25 + 32)], (uint64_t)&a2[*(int *)(v25 + 32)]))
  {
    return _s12AppleIDSetup11SignInModelV2eeoiySbAC_ACtFZ_0((uint64_t)&a1[*(int *)(v25 + 36)], (uint64_t)&a2[*(int *)(v25 + 36)]);
  }
  else
  {
    return 0;
  }
}

uint64_t _s12AppleIDSetup10SetupModelC08_defaultD0ACvgZ_0()
{
  uint64_t v0;
  char *v1;
  int *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[11];
  __int16 v37;
  int v38;
  __int16 v39;

  v35 = type metadata accessor for SetupModel.ModelData(0);
  MEMORY[0x24BDAC7A8](v35);
  v1 = (char *)&v33 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = (int *)type metadata accessor for SignInModel();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E45E0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for AuthenticationModel();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v34 = (uint64_t)&v33 - v12;
  v13 = type metadata accessor for IdMSAccount();
  v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v33 = v14;
  v14(v7, 1, 1, v13);
  v14(v11, 1, 1, v13);
  v15 = &v11[v8[5]];
  *((_OWORD *)v15 + 3) = 0u;
  *((_OWORD *)v15 + 4) = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  *((_OWORD *)v15 + 2) = 0u;
  *(_OWORD *)v15 = 0u;
  v16 = &v11[v8[8]];
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  v17 = v8[9];
  *(_QWORD *)&v11[v17] = MEMORY[0x24BEE4AF8];
  v18 = v8[10];
  v11[v18] = 0;
  v19 = &v11[v8[11]];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  sub_23644F344((uint64_t)v7, (uint64_t)v11);
  v11[v8[6]] = 1;
  v20 = &v11[v8[7]];
  *((_OWORD *)v20 + 3) = 0u;
  *((_OWORD *)v20 + 4) = 0u;
  *((_OWORD *)v20 + 1) = 0u;
  *((_OWORD *)v20 + 2) = 0u;
  *(_OWORD *)v20 = 0u;
  v20[80] = 8;
  swift_bridgeObjectRelease();
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  v11[v18] = 0;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v11[v17] = MEMORY[0x24BEE4AF8];
  v21 = v34;
  sub_23646591C((uint64_t)v11, v34, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  v22 = v33;
  v33(v7, 1, 1, v13);
  v22(v4, 1, 1, v13);
  v23 = &v4[v2[5]];
  *((_OWORD *)v23 + 4) = 0u;
  *((_OWORD *)v23 + 5) = 0u;
  *((_OWORD *)v23 + 2) = 0u;
  *((_OWORD *)v23 + 3) = 0u;
  *(_OWORD *)v23 = 0u;
  *((_OWORD *)v23 + 1) = 0u;
  v24 = &v4[v2[10]];
  *(_OWORD *)v24 = 0u;
  *((_OWORD *)v24 + 1) = 0u;
  *(_QWORD *)&v4[v2[11]] = 0;
  v25 = &v4[v2[13]];
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = 0;
  v4[v2[14]] = 0;
  sub_23644F344((uint64_t)v7, (uint64_t)v4);
  sub_236499C2C(*(_QWORD *)v23, *((_QWORD *)v23 + 1), *((_QWORD *)v23 + 2), *((_QWORD *)v23 + 3), *((_QWORD *)v23 + 4), *((_QWORD *)v23 + 5), *((_QWORD *)v23 + 6), *((_QWORD *)v23 + 7), *((_QWORD *)v23 + 8), *((_QWORD *)v23 + 9), *((_QWORD *)v23 + 10), *((_QWORD *)v23 + 11));
  *((_OWORD *)v23 + 4) = 0u;
  *((_OWORD *)v23 + 5) = 0u;
  *((_OWORD *)v23 + 2) = 0u;
  *((_OWORD *)v23 + 3) = 0u;
  *(_OWORD *)v23 = 0u;
  *((_OWORD *)v23 + 1) = 0u;
  v26 = MEMORY[0x24BEE4B08];
  *(_QWORD *)&v4[v2[6]] = MEMORY[0x24BEE4B08];
  *(_QWORD *)&v4[v2[7]] = v26;
  v4[v2[8]] = 0;
  v4[v2[9]] = 0;
  v27 = &v4[v2[12]];
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = 0;
  v27[16] = 3;
  v28 = &v4[v2[15]];
  v28[32] = 0;
  *(_OWORD *)v28 = 0u;
  *((_OWORD *)v28 + 1) = 0u;
  sub_23648DD50(*(_QWORD *)v24, *((_QWORD *)v24 + 1));
  type metadata accessor for SetupModel(0);
  *(_OWORD *)v24 = 0u;
  *((_OWORD *)v24 + 1) = 0u;
  v29 = swift_allocObject();
  sub_2365AFA50();
  v30 = v35;
  sub_23648DFF8(v21, (uint64_t)&v1[*(int *)(v35 + 32)], (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  sub_23648DFF8((uint64_t)v4, (uint64_t)&v1[*(int *)(v30 + 36)], (uint64_t (*)(_QWORD))type metadata accessor for SignInModel);
  *v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  *((_QWORD *)v1 + 2) = 0;
  *((_QWORD *)v1 + 3) = 0xC000000000000000;
  *((_WORD *)v1 + 18) = 0;
  *((_DWORD *)v1 + 8) = 0;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  v1[88] = -1;
  *((_WORD *)v1 + 48) = 256;
  *(_DWORD *)(v1 + 98) = v38;
  *((_WORD *)v1 + 51) = v39;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *((_QWORD *)v1 + 17) = 0;
  *((_WORD *)v1 + 72) = 2;
  *(_DWORD *)(v1 + 146) = *(_DWORD *)&v36[7];
  *((_WORD *)v1 + 75) = v37;
  *((_QWORD *)v1 + 19) = 0;
  *((_QWORD *)v1 + 20) = 0;
  *((_QWORD *)v1 + 21) = 512;
  *((_QWORD *)v1 + 22) = 0;
  *((_QWORD *)v1 + 23) = 0;
  *((_QWORD *)v1 + 24) = 0;
  *(_OWORD *)(v1 + 200) = xmmword_2365B7D10;
  v1[216] = 0;
  *(_DWORD *)(v1 + 217) = *(_DWORD *)v36;
  *((_DWORD *)v1 + 55) = *(_DWORD *)&v36[3];
  *((_OWORD *)v1 + 15) = 0u;
  *((_OWORD *)v1 + 16) = 0u;
  *((_OWORD *)v1 + 14) = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6AC8);
  v31 = swift_allocObject();
  *(_DWORD *)(v31 + ((*(unsigned int *)(*(_QWORD *)v31 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_23648DFF8((uint64_t)v1, v31 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v31 + 16), type metadata accessor for SetupModel.ModelData);
  sub_236465A18((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SignInModel);
  sub_236465A18(v21, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  sub_236465A18((uint64_t)v1, type metadata accessor for SetupModel.ModelData);
  *(_QWORD *)(v29 + 16) = v31;
  return v29;
}

uint64_t type metadata accessor for SetupModel.ModelData(uint64_t a1)
{
  return sub_2364905D8(a1, qword_2563ECA30);
}

uint64_t type metadata accessor for SetupModel(uint64_t a1)
{
  return sub_2364905D8(a1, (uint64_t *)&unk_2542A7EE0);
}

uint64_t sub_23657999C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_2365709EC(&v3);
  *a1 = v3;
  return result;
}

void sub_2365799D8()
{
  uint64_t v0;

  sub_236570BA4(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

double sub_2365799F4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  int v3;
  __int16 v4;
  double result;
  __int128 v6;
  uint64_t v7;
  int v8;
  __int16 v9;

  sub_236570FC0((uint64_t)&v6);
  v2 = v7;
  v3 = v8;
  v4 = v9;
  result = *(double *)&v6;
  *(_OWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = v2;
  *(_WORD *)(a1 + 28) = v4;
  *(_DWORD *)(a1 + 24) = v3;
  return result;
}

void sub_236579A48()
{
  sub_23657FB64();
}

double sub_236579A5C@<D0>(uint64_t a1@<X8>)
{
  char v2;
  __int128 v3;
  double result;
  _OWORD v5[2];
  __int128 v6;
  char v7;

  sub_236571730((uint64_t)v5);
  v2 = v7;
  v3 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v3;
  result = *(double *)&v6;
  *(_OWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 48) = v2;
  return result;
}

uint64_t sub_236579AA8(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  *(_BYTE *)(a2 + 48) = *((_BYTE *)a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v2;
  return a2;
}

void sub_236579AC8()
{
  uint64_t v0;

  sub_236571954(*(_QWORD *)(v0 + 16), *(__int128 **)(v0 + 24));
}

uint64_t sub_236579AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7 <= 0xF9u)
    return sub_23645DCB0(a1, a2, a3, a4, a5, a6, a7);
  return a1;
}

uint64_t sub_236579AF4(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  return a1;
}

uint64_t sub_236579B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7 <= 0xF9u)
    return sub_23645DC04(a1, a2, a3, a4, a5, a6, a7);
  return a1;
}

uint64_t sub_236579B4C@<X0>(uint64_t a1@<X8>)
{
  return sub_236572700(a1);
}

void sub_236579B70()
{
  uint64_t v0;

  sub_236572930(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_236579B90()
{
  unint64_t result;

  result = qword_2563EC7A8;
  if (!qword_2563EC7A8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8FB0, &type metadata for SetupModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC7A8);
  }
  return result;
}

unint64_t sub_236579BD4()
{
  unint64_t result;

  result = qword_2563EC7B0;
  if (!qword_2563EC7B0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for SetupModel.LocalRole, &type metadata for SetupModel.LocalRole);
    atomic_store(result, (unint64_t *)&qword_2563EC7B0);
  }
  return result;
}

unint64_t sub_236579C18()
{
  unint64_t result;

  result = qword_2563EC7B8;
  if (!qword_2563EC7B8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for SetupModel.RemoteRole, &type metadata for SetupModel.RemoteRole);
    atomic_store(result, (unint64_t *)&qword_2563EC7B8);
  }
  return result;
}

unint64_t sub_236579C5C()
{
  unint64_t result;

  result = qword_2563EC7C0;
  if (!qword_2563EC7C0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for SetupModel.State, &type metadata for SetupModel.State);
    atomic_store(result, (unint64_t *)&qword_2563EC7C0);
  }
  return result;
}

unint64_t sub_236579CA0()
{
  unint64_t result;

  result = qword_2563EC7D0;
  if (!qword_2563EC7D0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for SetupModel.LocalRole, &type metadata for SetupModel.LocalRole);
    atomic_store(result, (unint64_t *)&qword_2563EC7D0);
  }
  return result;
}

unint64_t sub_236579CE4()
{
  unint64_t result;

  result = qword_2563EC7D8;
  if (!qword_2563EC7D8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for SetupModel.RemoteRole, &type metadata for SetupModel.RemoteRole);
    atomic_store(result, (unint64_t *)&qword_2563EC7D8);
  }
  return result;
}

unint64_t sub_236579D28()
{
  unint64_t result;

  result = qword_2563EC7E0;
  if (!qword_2563EC7E0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for SetupModel.State, &type metadata for SetupModel.State);
    atomic_store(result, (unint64_t *)&qword_2563EC7E0);
  }
  return result;
}

uint64_t sub_236579D6C()
{
  uint64_t v0;

  return sub_2365744FC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_236579D74()
{
  return sub_2365746E4();
}

unint64_t sub_236579D90()
{
  unint64_t result;

  result = qword_2563EC828;
  if (!qword_2563EC828)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8F60, &type metadata for SetupModel.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC828);
  }
  return result;
}

unint64_t sub_236579DD4()
{
  unint64_t result;

  result = qword_2563EC830;
  if (!qword_2563EC830)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8F10, &type metadata for SetupModel.State.DismissCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC830);
  }
  return result;
}

unint64_t sub_236579E18()
{
  unint64_t result;

  result = qword_2563EC838;
  if (!qword_2563EC838)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8EC0, &type metadata for SetupModel.State.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC838);
  }
  return result;
}

unint64_t sub_236579E5C()
{
  unint64_t result;

  result = qword_2563EC840;
  if (!qword_2563EC840)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8E70, &type metadata for SetupModel.State.FinishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC840);
  }
  return result;
}

unint64_t sub_236579EA0()
{
  unint64_t result;

  result = qword_2563EC848;
  if (!qword_2563EC848)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8E20, &type metadata for SetupModel.State.SignInCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC848);
  }
  return result;
}

unint64_t sub_236579EE4()
{
  unint64_t result;

  result = qword_2563EC850;
  if (!qword_2563EC850)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8DD0, &type metadata for SetupModel.State.AuthenticateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC850);
  }
  return result;
}

unint64_t sub_236579F28()
{
  unint64_t result;

  result = qword_2563EC858;
  if (!qword_2563EC858)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8D80, &type metadata for SetupModel.State.DiscoverCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC858);
  }
  return result;
}

unint64_t sub_236579F6C()
{
  unint64_t result;

  result = qword_2563EC860;
  if (!qword_2563EC860)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8D30, &type metadata for SetupModel.State.InitialCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC860);
  }
  return result;
}

unint64_t sub_236579FB0()
{
  unint64_t result;

  result = qword_2563EC8C0;
  if (!qword_2563EC8C0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8CE0, &type metadata for SetupModel.LocalRole.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC8C0);
  }
  return result;
}

unint64_t sub_236579FF4()
{
  unint64_t result;

  result = qword_2563EC8C8;
  if (!qword_2563EC8C8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8C90, &type metadata for SetupModel.LocalRole.RestrictedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC8C8);
  }
  return result;
}

unint64_t sub_23657A038()
{
  unint64_t result;

  result = qword_2563EC8D0;
  if (!qword_2563EC8D0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8C40, &type metadata for SetupModel.LocalRole.ManualCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC8D0);
  }
  return result;
}

unint64_t sub_23657A07C()
{
  unint64_t result;

  result = qword_2563EC928;
  if (!qword_2563EC928)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8BF0, &type metadata for SetupModel.RemoteRole.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC928);
  }
  return result;
}

unint64_t sub_23657A0C0()
{
  unint64_t result;

  result = qword_2563EC930;
  if (!qword_2563EC930)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8BA0, &type metadata for SetupModel.RemoteRole.BleClientInterceptCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC930);
  }
  return result;
}

unint64_t sub_23657A104()
{
  unint64_t result;

  result = qword_2563EC938;
  if (!qword_2563EC938)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8B50, &type metadata for SetupModel.RemoteRole.PreEstablishedServerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC938);
  }
  return result;
}

unint64_t sub_23657A148()
{
  unint64_t result;

  result = qword_2563EC940;
  if (!qword_2563EC940)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8B00, &type metadata for SetupModel.RemoteRole.PreEstablishedClientCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC940);
  }
  return result;
}

unint64_t sub_23657A18C()
{
  unint64_t result;

  result = qword_2563EC948;
  if (!qword_2563EC948)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8AB0, &type metadata for SetupModel.RemoteRole.BleServerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC948);
  }
  return result;
}

unint64_t sub_23657A1D0()
{
  unint64_t result;

  result = qword_2563EC950;
  if (!qword_2563EC950)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8A60, &type metadata for SetupModel.RemoteRole.BleClientCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC950);
  }
  return result;
}

unint64_t sub_23657A214()
{
  unint64_t result;

  result = qword_2563EC958;
  if (!qword_2563EC958)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8A10, &type metadata for SetupModel.RemoteRole.RestrictedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EC958);
  }
  return result;
}

uint64_t sub_23657A258(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_23644F0B8(&qword_2563EC430, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  a1[2] = sub_23644F0B8(&qword_2563EC418, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  result = sub_23644F0B8(&qword_2563EC998, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  a1[3] = result;
  return result;
}

uint64_t sub_23657A2D0()
{
  return sub_23644F0B8(&qword_2563EC9A0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
}

uint64_t sub_23657A2FC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_23645EB14(a1, a2, a3, (uint64_t (*)(void))sub_236579D28, (uint64_t (*)(void))sub_236579C5C, (uint64_t (*)(void))sub_23657A318);
}

unint64_t sub_23657A318()
{
  unint64_t result;

  result = qword_2563EC9A8;
  if (!qword_2563EC9A8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for SetupModel.State, &type metadata for SetupModel.State);
    atomic_store(result, (unint64_t *)&qword_2563EC9A8);
  }
  return result;
}

unint64_t sub_23657A360()
{
  unint64_t result;

  result = qword_2563EC9B0;
  if (!qword_2563EC9B0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for SetupModel.State, &type metadata for SetupModel.State);
    atomic_store(result, (unint64_t *)&qword_2563EC9B0);
  }
  return result;
}

unint64_t sub_23657A3A8()
{
  unint64_t result;

  result = qword_2563EC9B8;
  if (!qword_2563EC9B8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for SetupModel.LocalRole, &type metadata for SetupModel.LocalRole);
    atomic_store(result, (unint64_t *)&qword_2563EC9B8);
  }
  return result;
}

uint64_t sub_23657A3EC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_23645EB14(a1, a2, a3, (uint64_t (*)(void))sub_236579CA0, (uint64_t (*)(void))sub_236579BD4, (uint64_t (*)(void))sub_23657A408);
}

unint64_t sub_23657A408()
{
  unint64_t result;

  result = qword_2563EC9C0;
  if (!qword_2563EC9C0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for SetupModel.LocalRole, &type metadata for SetupModel.LocalRole);
    atomic_store(result, (unint64_t *)&qword_2563EC9C0);
  }
  return result;
}

uint64_t sub_23657A44C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_23645EB14(a1, a2, a3, (uint64_t (*)(void))sub_236579CE4, (uint64_t (*)(void))sub_236579C18, (uint64_t (*)(void))sub_23657A468);
}

unint64_t sub_23657A468()
{
  unint64_t result;

  result = qword_2563EC9C8;
  if (!qword_2563EC9C8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for SetupModel.RemoteRole, &type metadata for SetupModel.RemoteRole);
    atomic_store(result, (unint64_t *)&qword_2563EC9C8);
  }
  return result;
}

unint64_t sub_23657A4B0()
{
  unint64_t result;

  result = qword_2563EC9D0;
  if (!qword_2563EC9D0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for SetupModel.RemoteRole, &type metadata for SetupModel.RemoteRole);
    atomic_store(result, (unint64_t *)&qword_2563EC9D0);
  }
  return result;
}

uint64_t sub_23657A504()
{
  return type metadata accessor for SetupModel(0);
}

uint64_t method lookup function for SetupModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SetupModel.localRole.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of SetupModel.localRole.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of SetupModel.localRole.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of SetupModel.remoteRole.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of SetupModel.remoteRole.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of SetupModel.remoteRole.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of SetupModel.state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of SetupModel.state.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of SetupModel.state.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of SetupModel.discoveryModel.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of SetupModel.discoveryModel.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of SetupModel.discoveryModel.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of SetupModel.authenticationModel.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of SetupModel.authenticationModel.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of SetupModel.authenticationModel.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of SetupModel.signInModel.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of SetupModel.signInModel.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of SetupModel.signInModel.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of SetupModel.__allocating_init(localRole:remoteRole:state:discoveryModel:authenticationModel:signInModel:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t dispatch thunk of SetupModel.hash(into:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of SetupModel.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of SetupModel.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 312))();
}

uint64_t dispatch thunk of SetupModel.update(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of SetupModel.hashValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t destroy for SetupModel.State(uint64_t result)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(result + 48);
  if (v1 <= 4)
    return sub_23645DCB0(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_QWORD *)(result + 16), *(_QWORD *)(result + 24), *(_QWORD *)(result + 32), *(_QWORD *)(result + 40), v1);
  return result;
}

uint64_t initializeWithCopy for SetupModel.State(uint64_t a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v3 = *((unsigned __int8 *)a2 + 48);
  if (v3 > 4)
  {
    v10 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  }
  else
  {
    v4 = *a2;
    v5 = a2[1];
    v6 = a2[2];
    v7 = a2[3];
    v8 = a2[4];
    v9 = a2[5];
    sub_23645DC04(*a2, v5, v6, v7, v8, v9, v3);
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v9;
    *(_BYTE *)(a1 + 48) = v3;
  }
  return a1;
}

uint64_t assignWithCopy for SetupModel.State(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v4 = *(unsigned __int8 *)(a1 + 48);
  v5 = *((unsigned __int8 *)a2 + 48);
  if (v4 > 4)
  {
    if (v5 <= 4)
    {
      v19 = *(_QWORD *)a2;
      v20 = *((_QWORD *)a2 + 1);
      v21 = *((_QWORD *)a2 + 2);
      v22 = *((_QWORD *)a2 + 3);
      v24 = *((_QWORD *)a2 + 4);
      v23 = *((_QWORD *)a2 + 5);
      sub_23645DC04(*(_QWORD *)a2, v20, v21, v22, v24, v23, v5);
      *(_QWORD *)a1 = v19;
      *(_QWORD *)(a1 + 8) = v20;
      *(_QWORD *)(a1 + 16) = v21;
      *(_QWORD *)(a1 + 24) = v22;
      *(_QWORD *)(a1 + 32) = v24;
      *(_QWORD *)(a1 + 40) = v23;
      *(_BYTE *)(a1 + 48) = v5;
      return a1;
    }
LABEL_7:
    v25 = *a2;
    v26 = a2[1];
    v27 = a2[2];
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    *(_OWORD *)(a1 + 16) = v26;
    *(_OWORD *)(a1 + 32) = v27;
    *(_OWORD *)a1 = v25;
    return a1;
  }
  if (v5 > 4)
  {
    sub_23645DCB0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v4);
    goto LABEL_7;
  }
  v6 = *(_QWORD *)a2;
  v7 = *((_QWORD *)a2 + 1);
  v8 = *((_QWORD *)a2 + 2);
  v9 = *((_QWORD *)a2 + 3);
  v11 = *((_QWORD *)a2 + 4);
  v10 = *((_QWORD *)a2 + 5);
  sub_23645DC04(*(_QWORD *)a2, v7, v8, v9, v11, v10, v5);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = v10;
  v18 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v5;
  sub_23645DCB0(v12, v13, v14, v15, v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for SetupModel.State(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v4 = *(unsigned __int8 *)(a1 + 48);
  if (v4 > 4)
    goto LABEL_5;
  v5 = *(unsigned __int8 *)(a2 + 48);
  if (v5 > 4)
  {
    sub_23645DCB0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v4);
LABEL_5:
    v13 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v13;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    return a1;
  }
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = v5;
  sub_23645DCB0(v6, v7, v8, v9, v10, v11, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SetupModel.State(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF6 && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 246);
  v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 > 4)
    v4 = (v3 ^ 0xFF) + 1;
  else
    v4 = 0;
  if (v4 >= 7)
    return v4 - 6;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SetupModel.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(_BYTE *)(result + 48) = 0;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 246;
    if (a3 >= 0xF6)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xF6)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = -6 - a2;
  }
  return result;
}

uint64_t sub_23657A950(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 48);
  if (v1 > 4)
    return (v1 ^ 0xFF) + 1;
  else
    return 0;
}

double sub_23657A964(uint64_t a1, unsigned int a2)
{
  double result;

  if (a2 > 0xFB)
  {
    *(_QWORD *)(a1 + 40) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)a1 = a2 - 252;
  }
  else if (a2)
  {
    *(_BYTE *)(a1 + 48) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SetupModel.State()
{
  return &type metadata for SetupModel.State;
}

ValueMetadata *type metadata accessor for SetupModel.LocalRole()
{
  return &type metadata for SetupModel.LocalRole;
}

void destroy for SetupModel.RemoteRole(uint64_t a1)
{
  sub_2364984F8(*(void **)a1, *(id *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t initializeWithCopy for SetupModel.RemoteRole(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  __int16 v6;
  int v7;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_WORD *)(a2 + 28);
  v7 = *(_DWORD *)(a2 + 24);
  sub_236499054(*(id *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 28) = v6;
  *(_DWORD *)(a1 + 24) = v7;
  return a1;
}

uint64_t assignWithCopy for SetupModel.RemoteRole(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  __int16 v6;
  int v7;
  void *v8;
  void *v9;
  unint64_t v10;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_WORD *)(a2 + 28);
  v7 = *(_DWORD *)(a2 + 24);
  sub_236499054(*(id *)a2, v4, v5);
  v8 = *(void **)a1;
  v9 = *(void **)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 24) = v7;
  *(_WORD *)(a1 + 28) = v6;
  sub_2364984F8(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for SetupModel.RemoteRole(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int16 v4;
  int v5;
  void *v6;
  unint64_t v7;
  void *v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_WORD *)(a2 + 28);
  v5 = *(_DWORD *)(a2 + 24);
  v6 = *(void **)a1;
  v8 = *(void **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 24) = v5;
  *(_WORD *)(a1 + 28) = v4;
  sub_2364984F8(v6, v8, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SetupModel.RemoteRole(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 30))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = (*(_QWORD *)(a1 + 16) >> 24) & 0xFFFF0000 | WORD1(*(_QWORD *)(a1 + 16));
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for SetupModel.RemoteRole(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 30) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = (-65536 * a2) | ((unint64_t)(-a2 >> 16) << 40);
      *(_WORD *)(result + 28) = 0;
      *(_DWORD *)(result + 24) = 0;
      return result;
    }
    *(_BYTE *)(result + 30) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_23657ABD8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16) >> 62;
  if ((_DWORD)v1 == 3)
    return (*(_DWORD *)a1 + 3);
  else
    return v1;
}

uint64_t sub_23657ABF4(uint64_t result)
{
  *(_QWORD *)(result + 16) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_23657AC04(uint64_t result, uint64_t a2)
{
  if (a2 < 3)
  {
    *(_QWORD *)(result + 16) = *(_QWORD *)(result + 16) & 0xFF0000FFFFLL | (a2 << 62);
  }
  else
  {
    *(_QWORD *)result = (a2 - 3);
    *(_OWORD *)(result + 8) = xmmword_2365BAB40;
    *(_WORD *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SetupModel.RemoteRole()
{
  return &type metadata for SetupModel.RemoteRole;
}

ValueMetadata *type metadata accessor for SetupModel.RemoteRole.CodingKeys()
{
  return &type metadata for SetupModel.RemoteRole.CodingKeys;
}

ValueMetadata *type metadata accessor for SetupModel.RemoteRole.RestrictedCodingKeys()
{
  return &type metadata for SetupModel.RemoteRole.RestrictedCodingKeys;
}

ValueMetadata *type metadata accessor for SetupModel.RemoteRole.BleClientCodingKeys()
{
  return &type metadata for SetupModel.RemoteRole.BleClientCodingKeys;
}

ValueMetadata *type metadata accessor for SetupModel.RemoteRole.BleServerCodingKeys()
{
  return &type metadata for SetupModel.RemoteRole.BleServerCodingKeys;
}

ValueMetadata *type metadata accessor for SetupModel.RemoteRole.PreEstablishedClientCodingKeys()
{
  return &type metadata for SetupModel.RemoteRole.PreEstablishedClientCodingKeys;
}

ValueMetadata *type metadata accessor for SetupModel.RemoteRole.PreEstablishedServerCodingKeys()
{
  return &type metadata for SetupModel.RemoteRole.PreEstablishedServerCodingKeys;
}

ValueMetadata *type metadata accessor for SetupModel.RemoteRole.BleClientInterceptCodingKeys()
{
  return &type metadata for SetupModel.RemoteRole.BleClientInterceptCodingKeys;
}

uint64_t _s12AppleIDSetup10SetupModelC9LocalRoleOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23657AD14 + 4 * byte_2365C7875[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23657AD48 + 4 * byte_2365C7870[v4]))();
}

uint64_t sub_23657AD48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23657AD50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23657AD58);
  return result;
}

uint64_t sub_23657AD64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23657AD6CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23657AD70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23657AD78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SetupModel.LocalRole.CodingKeys()
{
  return &type metadata for SetupModel.LocalRole.CodingKeys;
}

ValueMetadata *type metadata accessor for SetupModel.LocalRole.ManualCodingKeys()
{
  return &type metadata for SetupModel.LocalRole.ManualCodingKeys;
}

ValueMetadata *type metadata accessor for SetupModel.LocalRole.RestrictedCodingKeys()
{
  return &type metadata for SetupModel.LocalRole.RestrictedCodingKeys;
}

uint64_t storeEnumTagSinglePayload for SetupModel.State.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_23657AE00 + 4 * byte_2365C787F[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_23657AE34 + 4 * byte_2365C787A[v4]))();
}

uint64_t sub_23657AE34(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23657AE3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23657AE44);
  return result;
}

uint64_t sub_23657AE50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23657AE58);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_23657AE5C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23657AE64(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SetupModel.State.CodingKeys()
{
  return &type metadata for SetupModel.State.CodingKeys;
}

ValueMetadata *type metadata accessor for SetupModel.State.InitialCodingKeys()
{
  return &type metadata for SetupModel.State.InitialCodingKeys;
}

ValueMetadata *type metadata accessor for SetupModel.State.DiscoverCodingKeys()
{
  return &type metadata for SetupModel.State.DiscoverCodingKeys;
}

ValueMetadata *type metadata accessor for SetupModel.State.AuthenticateCodingKeys()
{
  return &type metadata for SetupModel.State.AuthenticateCodingKeys;
}

ValueMetadata *type metadata accessor for SetupModel.State.SignInCodingKeys()
{
  return &type metadata for SetupModel.State.SignInCodingKeys;
}

ValueMetadata *type metadata accessor for SetupModel.State.FinishedCodingKeys()
{
  return &type metadata for SetupModel.State.FinishedCodingKeys;
}

uint64_t _s12AppleIDSetup10SetupModelC10RemoteRoleO19BleClientCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23657AF10 + 4 * byte_2365C7884[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23657AF30 + 4 * byte_2365C7889[v4]))();
}

_BYTE *sub_23657AF10(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23657AF30(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23657AF38(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23657AF40(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23657AF48(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23657AF50(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SetupModel.State.FailedCodingKeys()
{
  return &type metadata for SetupModel.State.FailedCodingKeys;
}

ValueMetadata *type metadata accessor for SetupModel.State.DismissCodingKeys()
{
  return &type metadata for SetupModel.State.DismissCodingKeys;
}

uint64_t _s12AppleIDSetup10SetupModelC10RemoteRoleO10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23657AFC8 + 4 * byte_2365C7893[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23657AFFC + 4 * byte_2365C788E[v4]))();
}

uint64_t sub_23657AFFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23657B004(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23657B00CLL);
  return result;
}

uint64_t sub_23657B018(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23657B020);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23657B024(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23657B02C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SetupModel.CodingKeys()
{
  return &type metadata for SetupModel.CodingKeys;
}

_BYTE *sub_23657B048(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  _BYTE *v4;
  int v5;
  void *v6;
  void *v7;
  unint64_t v8;
  __int16 v9;
  int v10;
  unsigned int v11;
  __int128 v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(_QWORD *, uint64_t, int *);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(_QWORD *, _QWORD, uint64_t, int *);
  int *v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  int *v74;
  char *v75;
  char *v76;
  id v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(char *, char *, uint64_t);
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(_QWORD *, _QWORD, uint64_t, int *);
  int *v114;
  uint64_t v115;
  char *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  unint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  id v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  unint64_t v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v156;
  unsigned int (*v157)(_QWORD *, uint64_t, int *);
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  char v162;
  void *v163;
  char *v164;
  _QWORD *v165;
  void *v166;
  uint64_t v167;
  char *v168;
  _QWORD *v169;
  char v170;
  char *v171;
  uint64_t v172;
  char *v174;
  int *v175;
  _BYTE *v176;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *(_QWORD *)v4 = *a2;
    v14 = (_BYTE *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v6 = (void *)a2[1];
    v7 = (void *)a2[2];
    v8 = a2[3];
    v9 = *((_WORD *)a2 + 18);
    v10 = *((_DWORD *)a2 + 8);
    sub_236499054(v6, v7, v8);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v7;
    *((_QWORD *)v4 + 3) = v8;
    *((_WORD *)v4 + 18) = v9;
    *((_DWORD *)v4 + 8) = v10;
    v11 = *((unsigned __int8 *)a2 + 88);
    v176 = v4;
    if (v11 <= 0xF9)
    {
      v15 = a2[5];
      v16 = a2[6];
      v17 = a2[7];
      v18 = a2[8];
      v19 = a2[9];
      v20 = a2[10];
      sub_23645DC04(v15, v16, v17, v18, v19, v20, v11);
      *((_QWORD *)v176 + 5) = v15;
      *((_QWORD *)v176 + 6) = v16;
      *((_QWORD *)v176 + 7) = v17;
      *((_QWORD *)v176 + 8) = v18;
      v4 = v176;
      *((_QWORD *)v176 + 9) = v19;
      *((_QWORD *)v176 + 10) = v20;
      v176[88] = v11;
    }
    else
    {
      v12 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(v4 + 56) = v12;
      *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 9);
      v4[88] = *((_BYTE *)a2 + 88);
    }
    v4[96] = *((_BYTE *)a2 + 96);
    v4[97] = *((_BYTE *)a2 + 97);
    v21 = a2[14];
    *((_QWORD *)v4 + 13) = a2[13];
    *((_QWORD *)v4 + 14) = v21;
    v22 = a2[16];
    *((_QWORD *)v4 + 15) = a2[15];
    *((_QWORD *)v4 + 16) = v22;
    *((_QWORD *)v4 + 17) = a2[17];
    *((_WORD *)v4 + 72) = *((_WORD *)a2 + 72);
    v23 = a2[20];
    *((_QWORD *)v4 + 19) = a2[19];
    *((_QWORD *)v4 + 20) = v23;
    v24 = a2[21];
    v25 = a2[22];
    v26 = a2[23];
    v27 = a2[24];
    v29 = a2[25];
    v28 = a2[26];
    v30 = *((unsigned __int8 *)a2 + 216);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_236499B30(v24, v25, v26, v27, v29, v28, v30);
    *((_QWORD *)v176 + 21) = v24;
    *((_QWORD *)v176 + 22) = v25;
    *((_QWORD *)v176 + 23) = v26;
    *((_QWORD *)v176 + 24) = v27;
    *((_QWORD *)v176 + 25) = v29;
    *((_QWORD *)v176 + 26) = v28;
    v176[216] = v30;
    v31 = a2[29];
    if (v31)
    {
      *((_QWORD *)v176 + 28) = a2[28];
      *((_QWORD *)v176 + 29) = v31;
      v32 = a2[31];
      *((_QWORD *)v176 + 30) = a2[30];
      *((_QWORD *)v176 + 31) = v32;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
    }
    else
    {
      v33 = *((_OWORD *)a2 + 15);
      *((_OWORD *)v176 + 14) = *((_OWORD *)a2 + 14);
      *((_OWORD *)v176 + 15) = v33;
    }
    v34 = a2[33];
    *((_QWORD *)v176 + 32) = a2[32];
    *((_QWORD *)v176 + 33) = v34;
    v35 = *(int *)(a3 + 32);
    v36 = &v176[v35];
    v37 = (uint64_t *)((char *)a2 + v35);
    v38 = type metadata accessor for IdMSAccount();
    v39 = *(_QWORD *)(v38 - 8);
    v40 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v39 + 48);
    swift_bridgeObjectRetain();
    v157 = v40;
    v175 = (int *)v38;
    v156 = v39;
    if (v40(v37, 1, (int *)v38))
    {
      v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E45E0);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      v42 = v37[1];
      *v36 = *v37;
      v36[1] = v42;
      v43 = v37[3];
      v36[2] = v37[2];
      v36[3] = v43;
      v44 = v37[5];
      v36[4] = v37[4];
      v36[5] = v44;
      v45 = v37[7];
      v36[6] = v37[6];
      v36[7] = v45;
      v46 = v37[9];
      v36[8] = v37[8];
      v36[9] = v46;
      v47 = *(int *)(v38 + 20);
      v164 = (char *)v37 + v47;
      v168 = (char *)v36 + v47;
      v48 = sub_2365AF8D0();
      v49 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v49(v168, v164, v48);
      v50 = v175[6];
      v165 = v37;
      v169 = v36;
      v51 = (char *)v36 + v50;
      v52 = (char *)v37 + v50;
      v53 = *(_QWORD *)v52;
      v54 = *((_QWORD *)v52 + 1);
      v55 = *((_QWORD *)v52 + 2);
      v56 = *((_QWORD *)v52 + 3);
      v57 = *((_QWORD *)v52 + 4);
      v58 = *((_QWORD *)v52 + 5);
      v59 = *((_QWORD *)v52 + 6);
      v160 = *((_QWORD *)v52 + 7);
      v60 = *((_QWORD *)v52 + 8);
      v162 = v52[72];
      sub_23645F8F8(*(_QWORD *)v52, v54, v55, v56, v57, v58, v59, v160, v60, v162);
      *(_QWORD *)v51 = v53;
      *((_QWORD *)v51 + 1) = v54;
      *((_QWORD *)v51 + 2) = v55;
      *((_QWORD *)v51 + 3) = v56;
      *((_QWORD *)v51 + 4) = v57;
      *((_QWORD *)v51 + 5) = v58;
      *((_QWORD *)v51 + 6) = v59;
      *((_QWORD *)v51 + 7) = v160;
      *((_QWORD *)v51 + 8) = v60;
      v51[72] = v162;
      v37 = v165;
      v36 = v169;
      *(_QWORD *)((char *)v169 + v175[7]) = *(_QWORD *)((char *)v165 + v175[7]);
      v61 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v156 + 56);
      swift_bridgeObjectRetain();
      v61(v169, 0, 1, v175);
    }
    v62 = (int *)type metadata accessor for AuthenticationModel();
    v63 = v62[5];
    v64 = (_QWORD *)((char *)v36 + v63);
    v65 = (_QWORD *)((char *)v37 + v63);
    v66 = v65[1];
    if (v66)
    {
      *v64 = *v65;
      v64[1] = v66;
      v67 = v65[3];
      v64[2] = v65[2];
      v64[3] = v67;
      v68 = v65[5];
      v64[4] = v65[4];
      v64[5] = v68;
      v69 = v65[7];
      v64[6] = v65[6];
      v64[7] = v69;
      v70 = v65[9];
      v64[8] = v65[8];
      v64[9] = v70;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v71 = *((_OWORD *)v65 + 3);
      *((_OWORD *)v64 + 2) = *((_OWORD *)v65 + 2);
      *((_OWORD *)v64 + 3) = v71;
      *((_OWORD *)v64 + 4) = *((_OWORD *)v65 + 4);
      v72 = *((_OWORD *)v65 + 1);
      *(_OWORD *)v64 = *(_OWORD *)v65;
      *((_OWORD *)v64 + 1) = v72;
    }
    *((_BYTE *)v36 + v62[6]) = *((_BYTE *)v37 + v62[6]);
    v73 = v62[7];
    v74 = v62;
    v75 = (char *)v36 + v73;
    v76 = (char *)v37 + v73;
    v77 = *(id *)v76;
    v78 = (void *)*((_QWORD *)v76 + 2);
    v79 = (void *)*((_QWORD *)v76 + 3);
    v80 = (void *)*((_QWORD *)v76 + 4);
    v81 = (void *)*((_QWORD *)v76 + 5);
    v159 = *((_QWORD *)v76 + 6);
    v161 = (void *)*((_QWORD *)v76 + 1);
    v158 = *((_QWORD *)v76 + 7);
    v163 = (void *)*((_QWORD *)v76 + 8);
    v166 = (void *)*((_QWORD *)v76 + 9);
    v170 = v76[80];
    sub_23644F6A4(*(id *)v76, v161, v78, v79, v80, v81, v159, v158, v163, v166, v170);
    *(_QWORD *)v75 = v77;
    *((_QWORD *)v75 + 1) = v161;
    *((_QWORD *)v75 + 2) = v78;
    *((_QWORD *)v75 + 3) = v79;
    *((_QWORD *)v75 + 4) = v80;
    *((_QWORD *)v75 + 5) = v81;
    *((_QWORD *)v75 + 6) = v159;
    *((_QWORD *)v75 + 7) = v158;
    *((_QWORD *)v75 + 8) = v163;
    *((_QWORD *)v75 + 9) = v166;
    v75[80] = v170;
    v82 = v74[8];
    v83 = (_QWORD *)((char *)v36 + v82);
    v84 = (_QWORD *)((char *)v37 + v82);
    v85 = v84[1];
    *v83 = *v84;
    v83[1] = v85;
    *(_QWORD *)((char *)v36 + v74[9]) = *(_QWORD *)((char *)v37 + v74[9]);
    *((_BYTE *)v36 + v74[10]) = *((_BYTE *)v37 + v74[10]);
    v86 = v74[11];
    v87 = (_QWORD *)((char *)v36 + v86);
    v88 = (char *)v37 + v86;
    v89 = *(_QWORD *)((char *)v37 + v86);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v89)
    {
      v90 = *((_QWORD *)v88 + 1);
      *v87 = v89;
      v87[1] = v90;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v87 = *(_OWORD *)v88;
    }
    v14 = v176;
    v91 = *(int *)(a3 + 36);
    v92 = &v176[v91];
    v93 = (uint64_t *)((char *)a2 + v91);
    if (v157(v93, 1, v175))
    {
      v94 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E45E0);
      memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
    }
    else
    {
      v95 = v93[1];
      *v92 = *v93;
      v92[1] = v95;
      v96 = v93[3];
      v92[2] = v93[2];
      v92[3] = v96;
      v97 = v93[5];
      v92[4] = v93[4];
      v92[5] = v97;
      v98 = v93[7];
      v92[6] = v93[6];
      v92[7] = v98;
      v99 = v93[9];
      v92[8] = v93[8];
      v92[9] = v99;
      v100 = v175[5];
      v171 = (char *)v93 + v100;
      v174 = (char *)v92 + v100;
      v101 = sub_2365AF8D0();
      v102 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v101 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v102(v174, v171, v101);
      v103 = v175[6];
      v104 = (char *)v92 + v103;
      v105 = (char *)v93 + v103;
      v106 = *((_QWORD *)v105 + 1);
      v107 = *((_QWORD *)v105 + 2);
      v108 = *((_QWORD *)v105 + 3);
      v109 = *((_QWORD *)v105 + 4);
      v110 = *((_QWORD *)v105 + 5);
      v111 = *((_QWORD *)v105 + 6);
      v112 = *((_QWORD *)v105 + 7);
      v167 = *(_QWORD *)v105;
      v172 = *((_QWORD *)v105 + 8);
      LOBYTE(v174) = v105[72];
      sub_23645F8F8(*(_QWORD *)v105, v106, v107, v108, v109, v110, v111, v112, v172, (char)v174);
      *(_QWORD *)v104 = v167;
      *((_QWORD *)v104 + 1) = v106;
      *((_QWORD *)v104 + 2) = v107;
      *((_QWORD *)v104 + 3) = v108;
      *((_QWORD *)v104 + 4) = v109;
      *((_QWORD *)v104 + 5) = v110;
      v14 = v176;
      *((_QWORD *)v104 + 6) = v111;
      *((_QWORD *)v104 + 7) = v112;
      *((_QWORD *)v104 + 8) = v172;
      v104[72] = (char)v174;
      *(_QWORD *)((char *)v92 + v175[7]) = *(_QWORD *)((char *)v93 + v175[7]);
      v113 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v156 + 56);
      swift_bridgeObjectRetain();
      v113(v92, 0, 1, v175);
    }
    v114 = (int *)type metadata accessor for SignInModel();
    v115 = v114[5];
    v116 = (char *)v92 + v115;
    v117 = (_QWORD *)((char *)v93 + v115);
    v118 = v117[1];
    if (v118)
    {
      *(_QWORD *)v116 = *v117;
      *((_QWORD *)v116 + 1) = v118;
      v119 = v117[3];
      *((_QWORD *)v116 + 2) = v117[2];
      *((_QWORD *)v116 + 3) = v119;
      v120 = v117[5];
      *((_QWORD *)v116 + 4) = v117[4];
      *((_QWORD *)v116 + 5) = v120;
      v121 = v117[7];
      *((_QWORD *)v116 + 6) = v117[6];
      *((_QWORD *)v116 + 7) = v121;
      v122 = v117[9];
      *((_QWORD *)v116 + 8) = v117[8];
      *((_QWORD *)v116 + 9) = v122;
      v123 = v117 + 10;
      v124 = v117[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v14 = v176;
      swift_bridgeObjectRetain();
      if (v124 >> 60 == 15)
      {
        *((_OWORD *)v116 + 5) = *(_OWORD *)v123;
      }
      else
      {
        v128 = *v123;
        sub_236468CBC(*v123, v124);
        *((_QWORD *)v116 + 10) = v128;
        *((_QWORD *)v116 + 11) = v124;
      }
    }
    else
    {
      v125 = *((_OWORD *)v117 + 3);
      *((_OWORD *)v116 + 2) = *((_OWORD *)v117 + 2);
      *((_OWORD *)v116 + 3) = v125;
      v126 = *((_OWORD *)v117 + 5);
      *((_OWORD *)v116 + 4) = *((_OWORD *)v117 + 4);
      *((_OWORD *)v116 + 5) = v126;
      v127 = *((_OWORD *)v117 + 1);
      *(_OWORD *)v116 = *(_OWORD *)v117;
      *((_OWORD *)v116 + 1) = v127;
    }
    *(_QWORD *)((char *)v92 + v114[6]) = *(_QWORD *)((char *)v93 + v114[6]);
    *(_QWORD *)((char *)v92 + v114[7]) = *(_QWORD *)((char *)v93 + v114[7]);
    *((_BYTE *)v92 + v114[8]) = *((_BYTE *)v93 + v114[8]);
    *((_BYTE *)v92 + v114[9]) = *((_BYTE *)v93 + v114[9]);
    v129 = v114[10];
    v130 = (_QWORD *)((char *)v92 + v129);
    v131 = (_QWORD *)((char *)v93 + v129);
    v132 = *(_QWORD *)((char *)v93 + v129 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v132)
    {
      *v130 = *v131;
      v130[1] = v132;
      v133 = v131[2];
      v134 = v131[3];
      v130[2] = v133;
      v130[3] = v134;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v135 = *((_OWORD *)v131 + 1);
      *(_OWORD *)v130 = *(_OWORD *)v131;
      *((_OWORD *)v130 + 1) = v135;
    }
    v136 = v114[11];
    v137 = *(void **)((char *)v93 + v136);
    *(_QWORD *)((char *)v92 + v136) = v137;
    v138 = v114[12];
    v139 = (char *)v92 + v138;
    v140 = (char *)v93 + v138;
    v141 = *(_QWORD *)v140;
    v142 = *((_QWORD *)v140 + 1);
    v143 = v140[16];
    v144 = v137;
    sub_2364D941C(v141, v142, v143);
    *(_QWORD *)v139 = v141;
    *((_QWORD *)v139 + 1) = v142;
    v139[16] = v143;
    v145 = v114[13];
    v146 = (_QWORD *)((char *)v92 + v145);
    v147 = (_QWORD *)((char *)v93 + v145);
    v148 = v147[1];
    *v146 = *v147;
    v146[1] = v148;
    *((_BYTE *)v92 + v114[14]) = *((_BYTE *)v93 + v114[14]);
    v149 = v114[15];
    v150 = (char *)v92 + v149;
    v151 = (char *)v93 + v149;
    v152 = *(_QWORD *)((char *)v93 + v149 + 8);
    swift_bridgeObjectRetain();
    if (v152 >= 3)
    {
      *(_QWORD *)v150 = *(_QWORD *)v151;
      *((_QWORD *)v150 + 1) = v152;
      v154 = *((_QWORD *)v151 + 3);
      *((_QWORD *)v150 + 2) = *((_QWORD *)v151 + 2);
      *((_QWORD *)v150 + 3) = v154;
      v150[32] = v151[32];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v153 = *((_OWORD *)v151 + 1);
      *(_OWORD *)v150 = *(_OWORD *)v151;
      *((_OWORD *)v150 + 1) = v153;
      v150[32] = v151[32];
    }
  }
  return v14;
}

unint64_t sub_23657B914(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t result;

  sub_2364984F8(*(void **)(a1 + 8), *(id *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v4 = *(unsigned __int8 *)(a1 + 88);
  if (v4 <= 0xF9)
    sub_23645DCB0(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_236498B50(*(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208), *(unsigned __int8 *)(a1 + 216));
  if (*(_QWORD *)(a1 + 232))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  swift_bridgeObjectRelease();
  v5 = a1 + *(int *)(a2 + 32);
  v6 = type metadata accessor for IdMSAccount();
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48);
  if (!v7(v5, 1, v6))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v8 = v5 + *(int *)(v6 + 20);
    v9 = sub_2365AF8D0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
    v10 = v5 + *(int *)(v6 + 24);
    sub_23645FAF8(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 24), *(_QWORD *)(v10 + 32), *(_QWORD *)(v10 + 40), *(_QWORD *)(v10 + 48), *(_QWORD *)(v10 + 56), *(_QWORD *)(v10 + 64), *(_BYTE *)(v10 + 72));
    swift_bridgeObjectRelease();
  }
  v11 = (int *)type metadata accessor for AuthenticationModel();
  if (*(_QWORD *)(v5 + v11[5] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v12 = v5 + v11[7];
  sub_23644F8BC(*(void **)v12, *(void **)(v12 + 8), *(void **)(v12 + 16), *(void **)(v12 + 24), *(_QWORD *)(v12 + 32), *(_QWORD *)(v12 + 40), *(_QWORD *)(v12 + 48), *(_QWORD *)(v12 + 56), *(void **)(v12 + 64), *(void **)(v12 + 72), *(_BYTE *)(v12 + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v5 + v11[11]))
    swift_release();
  v13 = a1 + *(int *)(a2 + 36);
  if (!v7(v13, 1, v6))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = v13 + *(int *)(v6 + 20);
    v15 = sub_2365AF8D0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
    v16 = v13 + *(int *)(v6 + 24);
    sub_23645FAF8(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), *(_QWORD *)(v16 + 16), *(_QWORD *)(v16 + 24), *(_QWORD *)(v16 + 32), *(_QWORD *)(v16 + 40), *(_QWORD *)(v16 + 48), *(_QWORD *)(v16 + 56), *(_QWORD *)(v16 + 64), *(_BYTE *)(v16 + 72));
    swift_bridgeObjectRelease();
  }
  v17 = (int *)type metadata accessor for SignInModel();
  v18 = (_QWORD *)(v13 + v17[5]);
  if (v18[1])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v19 = v18[11];
    if (v19 >> 60 != 15)
      sub_236468D44(v18[10], v19);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v13 + v17[10] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  sub_236498C2C(*(_QWORD *)(v13 + v17[12]), *(_QWORD *)(v13 + v17[12] + 8), *(_BYTE *)(v13 + v17[12] + 16));
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(v13 + v17[15] + 8);
  if (result >= 3)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_BYTE *sub_23657BCC8(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v4;
  void *v5;
  void *v6;
  unint64_t v7;
  __int16 v8;
  int v9;
  unsigned int v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int (*v36)(_QWORD *, uint64_t, int *);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(_QWORD *, _QWORD, uint64_t, int *);
  int *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  int *v70;
  char *v71;
  char *v72;
  id v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(char *, char *, uint64_t);
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(_QWORD *, _QWORD, uint64_t, int *);
  int *v111;
  uint64_t v112;
  char *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  unint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  id v141;
  uint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  unint64_t v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  char v158;
  void *v159;
  char *v160;
  _QWORD *v161;
  void *v162;
  char *v163;
  _QWORD *v164;
  char v165;
  uint64_t v166;
  unsigned int (*v167)(_QWORD *, uint64_t, int *);
  char *v168;
  uint64_t v169;
  char *v171;
  int *v172;
  _BYTE *v173;

  v4 = a1;
  *a1 = *(_BYTE *)a2;
  v5 = *(void **)(a2 + 8);
  v6 = *(void **)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_WORD *)(a2 + 36);
  v9 = *(_DWORD *)(a2 + 32);
  sub_236499054(v5, v6, v7);
  *((_QWORD *)v4 + 1) = v5;
  *((_QWORD *)v4 + 2) = v6;
  *((_QWORD *)v4 + 3) = v7;
  *((_WORD *)v4 + 18) = v8;
  *((_DWORD *)v4 + 8) = v9;
  v10 = *(unsigned __int8 *)(a2 + 88);
  v173 = v4;
  if (v10 <= 0xF9)
  {
    v12 = *(_QWORD *)(a2 + 40);
    v13 = *(_QWORD *)(a2 + 48);
    v14 = *(_QWORD *)(a2 + 56);
    v15 = *(_QWORD *)(a2 + 64);
    v16 = *(_QWORD *)(a2 + 72);
    v17 = *(_QWORD *)(a2 + 80);
    sub_23645DC04(v12, v13, v14, v15, v16, v17, v10);
    *((_QWORD *)v173 + 5) = v12;
    *((_QWORD *)v173 + 6) = v13;
    *((_QWORD *)v173 + 7) = v14;
    *((_QWORD *)v173 + 8) = v15;
    v4 = v173;
    *((_QWORD *)v173 + 9) = v16;
    *((_QWORD *)v173 + 10) = v17;
    v173[88] = v10;
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(v4 + 56) = v11;
    *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 72);
    v4[88] = *(_BYTE *)(a2 + 88);
  }
  v4[96] = *(_BYTE *)(a2 + 96);
  v4[97] = *(_BYTE *)(a2 + 97);
  v18 = *(_QWORD *)(a2 + 112);
  *((_QWORD *)v4 + 13) = *(_QWORD *)(a2 + 104);
  *((_QWORD *)v4 + 14) = v18;
  v19 = *(_QWORD *)(a2 + 128);
  *((_QWORD *)v4 + 15) = *(_QWORD *)(a2 + 120);
  *((_QWORD *)v4 + 16) = v19;
  *((_QWORD *)v4 + 17) = *(_QWORD *)(a2 + 136);
  *((_WORD *)v4 + 72) = *(_WORD *)(a2 + 144);
  v20 = *(_QWORD *)(a2 + 160);
  *((_QWORD *)v4 + 19) = *(_QWORD *)(a2 + 152);
  *((_QWORD *)v4 + 20) = v20;
  v21 = *(_QWORD *)(a2 + 168);
  v22 = *(_QWORD *)(a2 + 176);
  v23 = *(_QWORD *)(a2 + 184);
  v24 = *(_QWORD *)(a2 + 192);
  v26 = *(_QWORD *)(a2 + 200);
  v25 = *(_QWORD *)(a2 + 208);
  v27 = *(unsigned __int8 *)(a2 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_236499B30(v21, v22, v23, v24, v26, v25, v27);
  *((_QWORD *)v173 + 21) = v21;
  *((_QWORD *)v173 + 22) = v22;
  *((_QWORD *)v173 + 23) = v23;
  *((_QWORD *)v173 + 24) = v24;
  *((_QWORD *)v173 + 25) = v26;
  *((_QWORD *)v173 + 26) = v25;
  v173[216] = v27;
  v28 = *(_QWORD *)(a2 + 232);
  if (v28)
  {
    *((_QWORD *)v173 + 28) = *(_QWORD *)(a2 + 224);
    *((_QWORD *)v173 + 29) = v28;
    v29 = *(_QWORD *)(a2 + 248);
    *((_QWORD *)v173 + 30) = *(_QWORD *)(a2 + 240);
    *((_QWORD *)v173 + 31) = v29;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v30 = *(_OWORD *)(a2 + 240);
    *((_OWORD *)v173 + 14) = *(_OWORD *)(a2 + 224);
    *((_OWORD *)v173 + 15) = v30;
  }
  v31 = *(_QWORD *)(a2 + 264);
  *((_QWORD *)v173 + 32) = *(_QWORD *)(a2 + 256);
  *((_QWORD *)v173 + 33) = v31;
  v32 = *(int *)(a3 + 32);
  v33 = &v173[v32];
  v34 = (_QWORD *)(a2 + v32);
  v35 = type metadata accessor for IdMSAccount();
  v153 = *(_QWORD *)(v35 - 8);
  v36 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v153 + 48);
  swift_bridgeObjectRetain();
  v167 = v36;
  v172 = (int *)v35;
  if (v36(v34, 1, (int *)v35))
  {
    v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E45E0);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    v38 = v34[1];
    *v33 = *v34;
    v33[1] = v38;
    v39 = v34[3];
    v33[2] = v34[2];
    v33[3] = v39;
    v40 = v34[5];
    v33[4] = v34[4];
    v33[5] = v40;
    v41 = v34[7];
    v33[6] = v34[6];
    v33[7] = v41;
    v42 = v34[9];
    v33[8] = v34[8];
    v33[9] = v42;
    v43 = *(int *)(v35 + 20);
    v160 = (char *)v34 + v43;
    v163 = (char *)v33 + v43;
    v44 = sub_2365AF8D0();
    v45 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v45(v163, v160, v44);
    v46 = v172[6];
    v161 = v34;
    v164 = v33;
    v47 = (char *)v33 + v46;
    v48 = (char *)v34 + v46;
    v49 = *(_QWORD *)v48;
    v50 = *((_QWORD *)v48 + 1);
    v51 = *((_QWORD *)v48 + 2);
    v52 = *((_QWORD *)v48 + 3);
    v53 = *((_QWORD *)v48 + 4);
    v54 = *((_QWORD *)v48 + 5);
    v55 = *((_QWORD *)v48 + 6);
    v156 = *((_QWORD *)v48 + 7);
    v56 = *((_QWORD *)v48 + 8);
    v158 = v48[72];
    sub_23645F8F8(*(_QWORD *)v48, v50, v51, v52, v53, v54, v55, v156, v56, v158);
    *(_QWORD *)v47 = v49;
    *((_QWORD *)v47 + 1) = v50;
    *((_QWORD *)v47 + 2) = v51;
    *((_QWORD *)v47 + 3) = v52;
    *((_QWORD *)v47 + 4) = v53;
    *((_QWORD *)v47 + 5) = v54;
    *((_QWORD *)v47 + 6) = v55;
    *((_QWORD *)v47 + 7) = v156;
    *((_QWORD *)v47 + 8) = v56;
    v47[72] = v158;
    v34 = v161;
    v33 = v164;
    *(_QWORD *)((char *)v164 + v172[7]) = *(_QWORD *)((char *)v161 + v172[7]);
    v57 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v153 + 56);
    swift_bridgeObjectRetain();
    v57(v164, 0, 1, v172);
  }
  v58 = (int *)type metadata accessor for AuthenticationModel();
  v59 = v58[5];
  v60 = (_QWORD *)((char *)v33 + v59);
  v61 = (_QWORD *)((char *)v34 + v59);
  v62 = v61[1];
  if (v62)
  {
    *v60 = *v61;
    v60[1] = v62;
    v63 = v61[3];
    v60[2] = v61[2];
    v60[3] = v63;
    v64 = v61[5];
    v60[4] = v61[4];
    v60[5] = v64;
    v65 = v61[7];
    v60[6] = v61[6];
    v60[7] = v65;
    v66 = v61[9];
    v60[8] = v61[8];
    v60[9] = v66;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v67 = *((_OWORD *)v61 + 3);
    *((_OWORD *)v60 + 2) = *((_OWORD *)v61 + 2);
    *((_OWORD *)v60 + 3) = v67;
    *((_OWORD *)v60 + 4) = *((_OWORD *)v61 + 4);
    v68 = *((_OWORD *)v61 + 1);
    *(_OWORD *)v60 = *(_OWORD *)v61;
    *((_OWORD *)v60 + 1) = v68;
  }
  *((_BYTE *)v33 + v58[6]) = *((_BYTE *)v34 + v58[6]);
  v69 = v58[7];
  v70 = v58;
  v71 = (char *)v33 + v69;
  v72 = (char *)v34 + v69;
  v73 = *(id *)v72;
  v74 = (void *)*((_QWORD *)v72 + 2);
  v75 = (void *)*((_QWORD *)v72 + 3);
  v76 = (void *)*((_QWORD *)v72 + 4);
  v77 = (void *)*((_QWORD *)v72 + 5);
  v155 = *((_QWORD *)v72 + 6);
  v157 = (void *)*((_QWORD *)v72 + 1);
  v154 = *((_QWORD *)v72 + 7);
  v159 = (void *)*((_QWORD *)v72 + 8);
  v162 = (void *)*((_QWORD *)v72 + 9);
  v165 = v72[80];
  sub_23644F6A4(*(id *)v72, v157, v74, v75, v76, v77, v155, v154, v159, v162, v165);
  *(_QWORD *)v71 = v73;
  *((_QWORD *)v71 + 1) = v157;
  *((_QWORD *)v71 + 2) = v74;
  *((_QWORD *)v71 + 3) = v75;
  *((_QWORD *)v71 + 4) = v76;
  *((_QWORD *)v71 + 5) = v77;
  *((_QWORD *)v71 + 6) = v155;
  *((_QWORD *)v71 + 7) = v154;
  *((_QWORD *)v71 + 8) = v159;
  *((_QWORD *)v71 + 9) = v162;
  v71[80] = v165;
  v78 = v70[8];
  v79 = (_QWORD *)((char *)v33 + v78);
  v80 = (_QWORD *)((char *)v34 + v78);
  v81 = v80[1];
  *v79 = *v80;
  v79[1] = v81;
  *(_QWORD *)((char *)v33 + v70[9]) = *(_QWORD *)((char *)v34 + v70[9]);
  *((_BYTE *)v33 + v70[10]) = *((_BYTE *)v34 + v70[10]);
  v82 = v70[11];
  v83 = (_QWORD *)((char *)v33 + v82);
  v84 = (char *)v34 + v82;
  v85 = *(_QWORD *)((char *)v34 + v82);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v85)
  {
    v86 = *((_QWORD *)v84 + 1);
    *v83 = v85;
    v83[1] = v86;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v83 = *(_OWORD *)v84;
  }
  v87 = v173;
  v88 = *(int *)(a3 + 36);
  v89 = &v173[v88];
  v90 = (_QWORD *)(a2 + v88);
  if (v167(v90, 1, v172))
  {
    v91 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E45E0);
    memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
  }
  else
  {
    v92 = v90[1];
    *v89 = *v90;
    v89[1] = v92;
    v93 = v90[3];
    v89[2] = v90[2];
    v89[3] = v93;
    v94 = v90[5];
    v89[4] = v90[4];
    v89[5] = v94;
    v95 = v90[7];
    v89[6] = v90[6];
    v89[7] = v95;
    v96 = v90[9];
    v89[8] = v90[8];
    v89[9] = v96;
    v97 = v172[5];
    v168 = (char *)v90 + v97;
    v171 = (char *)v89 + v97;
    v98 = sub_2365AF8D0();
    v99 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v98 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v99(v171, v168, v98);
    v100 = v172[6];
    v101 = (char *)v89 + v100;
    v102 = (char *)v90 + v100;
    v103 = *((_QWORD *)v102 + 1);
    v104 = *((_QWORD *)v102 + 2);
    v105 = *((_QWORD *)v102 + 3);
    v106 = *((_QWORD *)v102 + 4);
    v107 = *((_QWORD *)v102 + 5);
    v108 = *((_QWORD *)v102 + 6);
    v109 = *((_QWORD *)v102 + 7);
    v166 = *(_QWORD *)v102;
    v169 = *((_QWORD *)v102 + 8);
    LOBYTE(v171) = v102[72];
    sub_23645F8F8(*(_QWORD *)v102, v103, v104, v105, v106, v107, v108, v109, v169, (char)v171);
    *(_QWORD *)v101 = v166;
    *((_QWORD *)v101 + 1) = v103;
    *((_QWORD *)v101 + 2) = v104;
    *((_QWORD *)v101 + 3) = v105;
    *((_QWORD *)v101 + 4) = v106;
    *((_QWORD *)v101 + 5) = v107;
    v87 = v173;
    *((_QWORD *)v101 + 6) = v108;
    *((_QWORD *)v101 + 7) = v109;
    *((_QWORD *)v101 + 8) = v169;
    v101[72] = (char)v171;
    *(_QWORD *)((char *)v89 + v172[7]) = *(_QWORD *)((char *)v90 + v172[7]);
    v110 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v153 + 56);
    swift_bridgeObjectRetain();
    v110(v89, 0, 1, v172);
  }
  v111 = (int *)type metadata accessor for SignInModel();
  v112 = v111[5];
  v113 = (char *)v89 + v112;
  v114 = (_QWORD *)((char *)v90 + v112);
  v115 = v114[1];
  if (v115)
  {
    *(_QWORD *)v113 = *v114;
    *((_QWORD *)v113 + 1) = v115;
    v116 = v114[3];
    *((_QWORD *)v113 + 2) = v114[2];
    *((_QWORD *)v113 + 3) = v116;
    v117 = v114[5];
    *((_QWORD *)v113 + 4) = v114[4];
    *((_QWORD *)v113 + 5) = v117;
    v118 = v114[7];
    *((_QWORD *)v113 + 6) = v114[6];
    *((_QWORD *)v113 + 7) = v118;
    v119 = v114[9];
    *((_QWORD *)v113 + 8) = v114[8];
    *((_QWORD *)v113 + 9) = v119;
    v120 = v114 + 10;
    v121 = v114[11];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v121 >> 60 == 15)
    {
      *((_OWORD *)v113 + 5) = *(_OWORD *)v120;
    }
    else
    {
      v125 = *v120;
      sub_236468CBC(*v120, v121);
      *((_QWORD *)v113 + 10) = v125;
      *((_QWORD *)v113 + 11) = v121;
    }
    v87 = v173;
  }
  else
  {
    v122 = *((_OWORD *)v114 + 3);
    *((_OWORD *)v113 + 2) = *((_OWORD *)v114 + 2);
    *((_OWORD *)v113 + 3) = v122;
    v123 = *((_OWORD *)v114 + 5);
    *((_OWORD *)v113 + 4) = *((_OWORD *)v114 + 4);
    *((_OWORD *)v113 + 5) = v123;
    v124 = *((_OWORD *)v114 + 1);
    *(_OWORD *)v113 = *(_OWORD *)v114;
    *((_OWORD *)v113 + 1) = v124;
  }
  *(_QWORD *)((char *)v89 + v111[6]) = *(_QWORD *)((char *)v90 + v111[6]);
  *(_QWORD *)((char *)v89 + v111[7]) = *(_QWORD *)((char *)v90 + v111[7]);
  *((_BYTE *)v89 + v111[8]) = *((_BYTE *)v90 + v111[8]);
  *((_BYTE *)v89 + v111[9]) = *((_BYTE *)v90 + v111[9]);
  v126 = v111[10];
  v127 = (_QWORD *)((char *)v89 + v126);
  v128 = (_QWORD *)((char *)v90 + v126);
  v129 = *(_QWORD *)((char *)v90 + v126 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v129)
  {
    *v127 = *v128;
    v127[1] = v129;
    v130 = v128[2];
    v131 = v128[3];
    v127[2] = v130;
    v127[3] = v131;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v132 = *((_OWORD *)v128 + 1);
    *(_OWORD *)v127 = *(_OWORD *)v128;
    *((_OWORD *)v127 + 1) = v132;
  }
  v133 = v111[11];
  v134 = *(void **)((char *)v90 + v133);
  *(_QWORD *)((char *)v89 + v133) = v134;
  v135 = v111[12];
  v136 = (char *)v89 + v135;
  v137 = (char *)v90 + v135;
  v138 = *(_QWORD *)v137;
  v139 = *((_QWORD *)v137 + 1);
  v140 = v137[16];
  v141 = v134;
  sub_2364D941C(v138, v139, v140);
  *(_QWORD *)v136 = v138;
  *((_QWORD *)v136 + 1) = v139;
  v136[16] = v140;
  v142 = v111[13];
  v143 = (_QWORD *)((char *)v89 + v142);
  v144 = (_QWORD *)((char *)v90 + v142);
  v145 = v144[1];
  *v143 = *v144;
  v143[1] = v145;
  *((_BYTE *)v89 + v111[14]) = *((_BYTE *)v90 + v111[14]);
  v146 = v111[15];
  v147 = (char *)v89 + v146;
  v148 = (char *)v90 + v146;
  v149 = *(_QWORD *)((char *)v90 + v146 + 8);
  swift_bridgeObjectRetain();
  if (v149 >= 3)
  {
    *(_QWORD *)v147 = *(_QWORD *)v148;
    *((_QWORD *)v147 + 1) = v149;
    v151 = *((_QWORD *)v148 + 3);
    *((_QWORD *)v147 + 2) = *((_QWORD *)v148 + 2);
    *((_QWORD *)v147 + 3) = v151;
    v147[32] = v148[32];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v150 = *((_OWORD *)v148 + 1);
    *(_OWORD *)v147 = *(_OWORD *)v148;
    *((_OWORD *)v147 + 1) = v150;
    v147[32] = v148[32];
  }
  return v87;
}

uint64_t sub_23657C568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  void *v6;
  unint64_t v7;
  __int16 v8;
  int v9;
  void *v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 *v15;
  unsigned int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  _OWORD *v57;
  _OWORD *v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t (*v66)(_QWORD *, uint64_t, int *);
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  void (*v82)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v83;
  int *v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  char *v122;
  char *v123;
  id v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  void *v141;
  char v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  uint64_t v146;
  _QWORD *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  int v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  void (*v161)(char *, char *, uint64_t);
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void (*v172)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v173;
  int *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  __int128 v223;
  __int128 v224;
  uint64_t v225;
  void *v226;
  void *v227;
  id v228;
  uint64_t v229;
  char *v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  char v234;
  uint64_t v235;
  uint64_t v236;
  char v237;
  uint64_t v238;
  _QWORD *v239;
  _QWORD *v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  unint64_t v244;
  __int128 v245;
  __int128 v246;
  char v247;
  __int128 v248;
  uint64_t v250;
  void *v251;
  void *v252;
  void (*v253)(char *, char *, uint64_t);
  uint64_t v254;
  uint64_t v255;
  char v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  int *v260;
  uint64_t (*v261)(_QWORD *, uint64_t, int *);
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  _QWORD *v270;
  uint64_t v271;
  _QWORD *v272;
  char *v274;
  char v275;
  int *v276;
  _OWORD *v277;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = *(void **)(a2 + 8);
  v6 = *(void **)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_WORD *)(a2 + 36);
  v9 = *(_DWORD *)(a2 + 32);
  sub_236499054(v5, v6, v7);
  v10 = *(void **)(a1 + 8);
  v11 = *(void **)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_DWORD *)(a1 + 32) = v9;
  v13 = a2;
  *(_WORD *)(a1 + 36) = v8;
  sub_2364984F8(v10, v11, v12);
  v14 = (_OWORD *)(a1 + 40);
  v15 = (__int128 *)(a2 + 40);
  v16 = *(unsigned __int8 *)(a2 + 88);
  if (*(unsigned __int8 *)(a1 + 88) <= 0xF9u)
  {
    if (v16 <= 0xF9)
    {
      v29 = *(_QWORD *)(a2 + 40);
      v30 = *(_QWORD *)(a2 + 48);
      v31 = *(_QWORD *)(a2 + 56);
      v32 = *(_QWORD *)(a2 + 64);
      v33 = *(_QWORD *)(v13 + 72);
      v34 = *(_QWORD *)(v13 + 80);
      sub_23645DC04(*(_QWORD *)(v13 + 40), *(_QWORD *)(v13 + 48), *(_QWORD *)(v13 + 56), *(_QWORD *)(v13 + 64), v33, v34, v16);
      v35 = *(_QWORD *)(a1 + 40);
      v36 = *(_QWORD *)(a1 + 48);
      v37 = *(_QWORD *)(a1 + 56);
      v38 = *(_QWORD *)(a1 + 64);
      v39 = *(_QWORD *)(a1 + 72);
      v40 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 40) = v29;
      *(_QWORD *)(a1 + 48) = v30;
      *(_QWORD *)(a1 + 56) = v31;
      *(_QWORD *)(a1 + 64) = v32;
      *(_QWORD *)(a1 + 72) = v33;
      *(_QWORD *)(a1 + 80) = v34;
      v41 = *(_BYTE *)(a1 + 88);
      *(_BYTE *)(a1 + 88) = v16;
      sub_23645DCB0(v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      sub_236462250(a1 + 40);
      v21 = *(_OWORD *)(a2 + 56);
      v20 = *(_OWORD *)(a2 + 72);
      v22 = *v15;
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      *(_OWORD *)(a1 + 56) = v21;
      *(_OWORD *)(a1 + 72) = v20;
      *v14 = v22;
    }
  }
  else if (v16 <= 0xF9)
  {
    v23 = *(_QWORD *)(a2 + 40);
    v24 = *(_QWORD *)(a2 + 48);
    v25 = *(_QWORD *)(a2 + 56);
    v26 = *(_QWORD *)(a2 + 64);
    v27 = *(_QWORD *)(v13 + 72);
    v28 = *(_QWORD *)(v13 + 80);
    sub_23645DC04(*(_QWORD *)(v13 + 40), *(_QWORD *)(v13 + 48), *(_QWORD *)(v13 + 56), *(_QWORD *)(v13 + 64), v27, v28, v16);
    *(_QWORD *)(a1 + 40) = v23;
    *(_QWORD *)(a1 + 48) = v24;
    *(_QWORD *)(a1 + 56) = v25;
    *(_QWORD *)(a1 + 64) = v26;
    *(_QWORD *)(a1 + 72) = v27;
    *(_QWORD *)(a1 + 80) = v28;
    *(_BYTE *)(a1 + 88) = v16;
  }
  else
  {
    v17 = *v15;
    v18 = *(_OWORD *)(a2 + 56);
    v19 = *(_OWORD *)(a2 + 72);
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    *(_OWORD *)(a1 + 56) = v18;
    *(_OWORD *)(a1 + 72) = v19;
    *v14 = v17;
  }
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(v13 + 96);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(v13 + 97);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(v13 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v13 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(v13 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(v13 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v42 = *(_QWORD *)(v13 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(v13 + 144);
  *(_QWORD *)(a1 + 136) = v42;
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(v13 + 145);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(v13 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(v13 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v43 = *(_QWORD *)(v13 + 168);
  v44 = *(_QWORD *)(v13 + 176);
  v45 = *(_QWORD *)(v13 + 184);
  v46 = *(_QWORD *)(v13 + 192);
  v47 = *(_QWORD *)(v13 + 200);
  v48 = *(_QWORD *)(v13 + 208);
  v49 = *(_BYTE *)(v13 + 216);
  sub_236499B30(v43, v44, v45, v46, v47, v48, v49);
  v50 = *(_QWORD *)(a1 + 168);
  v51 = *(_QWORD *)(a1 + 176);
  v52 = *(_QWORD *)(a1 + 184);
  v53 = *(_QWORD *)(a1 + 192);
  v54 = *(_QWORD *)(a1 + 200);
  v55 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 168) = v43;
  *(_QWORD *)(a1 + 176) = v44;
  *(_QWORD *)(a1 + 184) = v45;
  *(_QWORD *)(a1 + 192) = v46;
  *(_QWORD *)(a1 + 200) = v47;
  *(_QWORD *)(a1 + 208) = v48;
  v56 = *(unsigned __int8 *)(a1 + 216);
  *(_BYTE *)(a1 + 216) = v49;
  sub_236498B50(v50, v51, v52, v53, v54, v55, v56);
  v57 = (_OWORD *)(a1 + 224);
  v58 = (_OWORD *)(v13 + 224);
  v59 = *(_QWORD *)(v13 + 232);
  if (*(_QWORD *)(a1 + 232))
  {
    if (v59)
    {
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(v13 + 224);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(v13 + 232);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(v13 + 240);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(v13 + 248);
      swift_retain();
      swift_release();
    }
    else
    {
      sub_2364BF0AC(a1 + 224);
      v60 = *(_OWORD *)(v13 + 240);
      *v57 = *v58;
      *(_OWORD *)(a1 + 240) = v60;
    }
  }
  else if (v59)
  {
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(v13 + 224);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(v13 + 232);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(v13 + 240);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(v13 + 248);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v61 = *(_OWORD *)(v13 + 240);
    *v57 = *v58;
    *(_OWORD *)(a1 + 240) = v61;
  }
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(v13 + 256);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(v13 + 264);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v62 = *(int *)(a3 + 32);
  v63 = (_QWORD *)(a1 + v62);
  v64 = (_QWORD *)(v13 + v62);
  v65 = type metadata accessor for IdMSAccount();
  v250 = *(_QWORD *)(v65 - 8);
  v66 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v250 + 48);
  v67 = v66(v63, 1, (int *)v65);
  v276 = (int *)v65;
  v261 = v66;
  v68 = v66(v64, 1, (int *)v65);
  v262 = v13;
  v265 = v64;
  if (v67)
  {
    if (!v68)
    {
      *v63 = *v64;
      v63[1] = v64[1];
      v63[2] = v64[2];
      v63[3] = v64[3];
      v63[4] = v64[4];
      v63[5] = v64[5];
      v63[6] = v64[6];
      v63[7] = v64[7];
      v63[8] = v64[8];
      v63[9] = v64[9];
      v69 = *(int *)(v65 + 20);
      v269 = (char *)v63 + v69;
      v257 = (char *)v64 + v69;
      v70 = sub_2365AF8D0();
      v253 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v253(v269, v257, v70);
      v71 = *(int *)(v65 + 24);
      v72 = (char *)v63 + v71;
      v73 = (char *)v64 + v71;
      v74 = *(_QWORD *)v73;
      v75 = *((_QWORD *)v73 + 1);
      v76 = *((_QWORD *)v73 + 2);
      v77 = *((_QWORD *)v73 + 3);
      v78 = *((_QWORD *)v73 + 4);
      v79 = *((_QWORD *)v73 + 5);
      v254 = *((_QWORD *)v73 + 7);
      v258 = *((_QWORD *)v73 + 6);
      v270 = v63;
      v80 = *((_QWORD *)v73 + 8);
      v81 = v73[72];
      sub_23645F8F8(*(_QWORD *)v73, v75, v76, v77, v78, v79, v258, v254, v80, v81);
      *(_QWORD *)v72 = v74;
      *((_QWORD *)v72 + 1) = v75;
      *((_QWORD *)v72 + 2) = v76;
      *((_QWORD *)v72 + 3) = v77;
      *((_QWORD *)v72 + 4) = v78;
      *((_QWORD *)v72 + 5) = v79;
      *((_QWORD *)v72 + 6) = v258;
      *((_QWORD *)v72 + 7) = v254;
      *((_QWORD *)v72 + 8) = v80;
      v72[72] = v81;
      v64 = v265;
      v63 = v270;
      *(_QWORD *)((char *)v270 + v276[7]) = *(_QWORD *)((char *)v265 + v276[7]);
      v82 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v250 + 56);
      swift_bridgeObjectRetain();
      v82(v270, 0, 1, v276);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v68)
  {
    sub_236465A18((uint64_t)v63, (uint64_t (*)(_QWORD))type metadata accessor for IdMSAccount);
LABEL_20:
    v83 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E45E0);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
    goto LABEL_21;
  }
  *v63 = *v64;
  v63[1] = v64[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v63[2] = v64[2];
  v63[3] = v64[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v63[4] = v64[4];
  v63[5] = v64[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v63[6] = v64[6];
  v63[7] = v64[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v63[8] = v64[8];
  v63[9] = v64[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v93 = *(int *)(v65 + 20);
  v94 = (char *)v63 + v93;
  v95 = (char *)v64 + v93;
  v96 = sub_2365AF8D0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 24))(v94, v95, v96);
  v97 = *(int *)(v65 + 24);
  v98 = (char *)v63 + v97;
  v99 = (char *)v64 + v97;
  v100 = *(_QWORD *)v99;
  v101 = *((_QWORD *)v99 + 1);
  v102 = *((_QWORD *)v99 + 2);
  v103 = *((_QWORD *)v99 + 3);
  v104 = *((_QWORD *)v99 + 4);
  v105 = *((_QWORD *)v99 + 5);
  v255 = *((_QWORD *)v99 + 7);
  v259 = *((_QWORD *)v99 + 6);
  v106 = *((_QWORD *)v99 + 8);
  v272 = v63;
  v107 = v99[72];
  sub_23645F8F8(*(_QWORD *)v99, v101, v102, v103, v104, v105, v259, v255, v106, v107);
  v108 = *(_QWORD *)v98;
  v109 = *((_QWORD *)v98 + 1);
  v110 = *((_QWORD *)v98 + 2);
  v111 = *((_QWORD *)v98 + 3);
  v112 = *((_QWORD *)v98 + 4);
  v113 = *((_QWORD *)v98 + 5);
  v114 = *((_QWORD *)v98 + 6);
  v115 = *((_QWORD *)v98 + 7);
  v116 = *((_QWORD *)v98 + 8);
  v117 = v98[72];
  *(_QWORD *)v98 = v100;
  *((_QWORD *)v98 + 1) = v101;
  *((_QWORD *)v98 + 2) = v102;
  *((_QWORD *)v98 + 3) = v103;
  *((_QWORD *)v98 + 4) = v104;
  *((_QWORD *)v98 + 5) = v105;
  *((_QWORD *)v98 + 6) = v259;
  *((_QWORD *)v98 + 7) = v255;
  *((_QWORD *)v98 + 8) = v106;
  v98[72] = v107;
  v63 = v272;
  sub_23645FAF8(v108, v109, v110, v111, v112, v113, v114, v115, v116, v117);
  v64 = v265;
  *(_QWORD *)((char *)v272 + v276[7]) = *(_QWORD *)((char *)v265 + v276[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_21:
  v84 = (int *)type metadata accessor for AuthenticationModel();
  v85 = v84[5];
  v86 = (_QWORD *)((char *)v63 + v85);
  v87 = (_QWORD *)((char *)v64 + v85);
  v88 = *(_QWORD *)((char *)v63 + v85 + 8);
  v89 = *(_QWORD *)((char *)v64 + v85 + 8);
  v271 = a1;
  if (v88)
  {
    if (v89)
    {
      *v86 = *v87;
      v86[1] = v87[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v86[2] = v87[2];
      v86[3] = v87[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v86[4] = v87[4];
      v86[5] = v87[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v86[6] = v87[6];
      v86[7] = v87[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v86[8] = v87[8];
      v86[9] = v87[9];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_236460568((uint64_t)v86);
      *(_OWORD *)v86 = *(_OWORD *)v87;
      v90 = *((_OWORD *)v87 + 4);
      v92 = *((_OWORD *)v87 + 1);
      v91 = *((_OWORD *)v87 + 2);
      *((_OWORD *)v86 + 3) = *((_OWORD *)v87 + 3);
      *((_OWORD *)v86 + 4) = v90;
      *((_OWORD *)v86 + 1) = v92;
      *((_OWORD *)v86 + 2) = v91;
    }
  }
  else if (v89)
  {
    *v86 = *v87;
    v86[1] = v87[1];
    v86[2] = v87[2];
    v86[3] = v87[3];
    v86[4] = v87[4];
    v86[5] = v87[5];
    v86[6] = v87[6];
    v86[7] = v87[7];
    v86[8] = v87[8];
    v86[9] = v87[9];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)v86 = *(_OWORD *)v87;
    v118 = *((_OWORD *)v87 + 1);
    v119 = *((_OWORD *)v87 + 2);
    v120 = *((_OWORD *)v87 + 4);
    *((_OWORD *)v86 + 3) = *((_OWORD *)v87 + 3);
    *((_OWORD *)v86 + 4) = v120;
    *((_OWORD *)v86 + 1) = v118;
    *((_OWORD *)v86 + 2) = v119;
  }
  *((_BYTE *)v63 + v84[6]) = *((_BYTE *)v64 + v84[6]);
  v121 = v84[7];
  v260 = v84;
  v122 = (char *)v63 + v121;
  v123 = (char *)v64 + v121;
  v124 = *(id *)v123;
  v125 = (void *)*((_QWORD *)v123 + 1);
  v126 = (void *)*((_QWORD *)v123 + 2);
  v127 = (void *)*((_QWORD *)v123 + 3);
  v129 = (void *)*((_QWORD *)v123 + 4);
  v128 = (void *)*((_QWORD *)v123 + 5);
  v130 = *((_QWORD *)v123 + 6);
  v131 = *((_QWORD *)v123 + 7);
  v251 = (void *)*((_QWORD *)v123 + 8);
  v252 = (void *)*((_QWORD *)v123 + 9);
  v256 = v123[80];
  sub_23644F6A4(*(id *)v123, v125, v126, v127, v129, v128, v130, v131, v251, v252, v256);
  v132 = *(void **)v122;
  v133 = (void *)*((_QWORD *)v122 + 1);
  v134 = (void *)*((_QWORD *)v122 + 2);
  v135 = (void *)*((_QWORD *)v122 + 3);
  v136 = *((_QWORD *)v122 + 4);
  v137 = *((_QWORD *)v122 + 5);
  v138 = *((_QWORD *)v122 + 6);
  v139 = *((_QWORD *)v122 + 7);
  v140 = (void *)*((_QWORD *)v122 + 8);
  v141 = (void *)*((_QWORD *)v122 + 9);
  v142 = v122[80];
  *(_QWORD *)v122 = v124;
  *((_QWORD *)v122 + 1) = v125;
  *((_QWORD *)v122 + 2) = v126;
  *((_QWORD *)v122 + 3) = v127;
  *((_QWORD *)v122 + 4) = v129;
  *((_QWORD *)v122 + 5) = v128;
  *((_QWORD *)v122 + 6) = v130;
  *((_QWORD *)v122 + 7) = v131;
  *((_QWORD *)v122 + 8) = v251;
  *((_QWORD *)v122 + 9) = v252;
  v122[80] = v256;
  sub_23644F8BC(v132, v133, v134, v135, v136, v137, v138, v139, v140, v141, v142);
  v143 = v260[8];
  v144 = (_QWORD *)((char *)v63 + v143);
  v145 = (_QWORD *)((char *)v265 + v143);
  *v144 = *v145;
  v144[1] = v145[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v63 + v260[9]) = *(_QWORD *)((char *)v265 + v260[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)v63 + v260[10]) = *((_BYTE *)v265 + v260[10]);
  v146 = v260[11];
  v147 = (_QWORD *)((char *)v63 + v146);
  v148 = (char *)v265 + v146;
  v149 = *(_QWORD *)((char *)v63 + v146);
  v150 = *(_QWORD *)((char *)v265 + v146);
  if (v149)
  {
    v151 = v271;
    if (v150)
    {
      v152 = *((_QWORD *)v148 + 1);
      *v147 = v150;
      v147[1] = v152;
      swift_retain();
      swift_release();
      goto LABEL_36;
    }
    swift_release();
  }
  else
  {
    v151 = v271;
    if (v150)
    {
      v153 = *((_QWORD *)v148 + 1);
      *v147 = v150;
      v147[1] = v153;
      swift_retain();
      goto LABEL_36;
    }
  }
  *(_OWORD *)v147 = *(_OWORD *)v148;
LABEL_36:
  v154 = *(int *)(a3 + 36);
  v155 = (_QWORD *)(v151 + v154);
  v156 = (_QWORD *)(v262 + v154);
  v157 = v261(v155, 1, v276);
  v158 = v261(v156, 1, v276);
  if (v157)
  {
    if (!v158)
    {
      *v155 = *v156;
      v155[1] = v156[1];
      v155[2] = v156[2];
      v155[3] = v156[3];
      v155[4] = v156[4];
      v155[5] = v156[5];
      v155[6] = v156[6];
      v155[7] = v156[7];
      v155[8] = v156[8];
      v155[9] = v156[9];
      v159 = v276[5];
      v274 = (char *)v155 + v159;
      v266 = (char *)v156 + v159;
      v160 = sub_2365AF8D0();
      v161 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v160 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v161(v274, v266, v160);
      v162 = v276[6];
      v163 = (char *)v155 + v162;
      v164 = (char *)v156 + v162;
      v165 = *((_QWORD *)v164 + 1);
      v166 = *((_QWORD *)v164 + 2);
      v167 = *((_QWORD *)v164 + 3);
      v168 = *((_QWORD *)v164 + 4);
      v169 = *((_QWORD *)v164 + 5);
      v170 = *((_QWORD *)v164 + 6);
      v171 = *((_QWORD *)v164 + 7);
      v263 = *(_QWORD *)v164;
      v267 = *((_QWORD *)v164 + 8);
      LOBYTE(v274) = v164[72];
      sub_23645F8F8(*(_QWORD *)v164, v165, v166, v167, v168, v169, v170, v171, v267, (char)v274);
      *(_QWORD *)v163 = v263;
      *((_QWORD *)v163 + 1) = v165;
      *((_QWORD *)v163 + 2) = v166;
      *((_QWORD *)v163 + 3) = v167;
      *((_QWORD *)v163 + 4) = v168;
      *((_QWORD *)v163 + 5) = v169;
      *((_QWORD *)v163 + 6) = v170;
      *((_QWORD *)v163 + 7) = v171;
      *((_QWORD *)v163 + 8) = v267;
      v163[72] = (char)v274;
      *(_QWORD *)((char *)v155 + v276[7]) = *(_QWORD *)((char *)v156 + v276[7]);
      v172 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v250 + 56);
      swift_bridgeObjectRetain();
      v172(v155, 0, 1, v276);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  if (v158)
  {
    sub_236465A18((uint64_t)v155, (uint64_t (*)(_QWORD))type metadata accessor for IdMSAccount);
LABEL_41:
    v173 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E45E0);
    memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v173 - 8) + 64));
    goto LABEL_42;
  }
  *v155 = *v156;
  v155[1] = v156[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v155[2] = v156[2];
  v155[3] = v156[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v155[4] = v156[4];
  v155[5] = v156[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v155[6] = v156[6];
  v155[7] = v156[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v155[8] = v156[8];
  v155[9] = v156[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v187 = v276[5];
  v188 = (char *)v155 + v187;
  v189 = (char *)v156 + v187;
  v190 = sub_2365AF8D0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v190 - 8) + 24))(v188, v189, v190);
  v191 = v276[6];
  v192 = (char *)v155 + v191;
  v193 = (char *)v156 + v191;
  v194 = *((_QWORD *)v193 + 1);
  v195 = *((_QWORD *)v193 + 2);
  v196 = *((_QWORD *)v193 + 3);
  v197 = *((_QWORD *)v193 + 4);
  v198 = *((_QWORD *)v193 + 5);
  v199 = *((_QWORD *)v193 + 6);
  v200 = *((_QWORD *)v193 + 7);
  v264 = *(_QWORD *)v193;
  v268 = *((_QWORD *)v193 + 8);
  v275 = v193[72];
  sub_23645F8F8(*(_QWORD *)v193, v194, v195, v196, v197, v198, v199, v200, v268, v275);
  v201 = *(_QWORD *)v192;
  v202 = *((_QWORD *)v192 + 1);
  v203 = *((_QWORD *)v192 + 2);
  v204 = *((_QWORD *)v192 + 3);
  v205 = *((_QWORD *)v192 + 4);
  v206 = *((_QWORD *)v192 + 5);
  v207 = *((_QWORD *)v192 + 6);
  v208 = *((_QWORD *)v192 + 7);
  v209 = *((_QWORD *)v192 + 8);
  v210 = v192[72];
  *(_QWORD *)v192 = v264;
  *((_QWORD *)v192 + 1) = v194;
  *((_QWORD *)v192 + 2) = v195;
  *((_QWORD *)v192 + 3) = v196;
  *((_QWORD *)v192 + 4) = v197;
  *((_QWORD *)v192 + 5) = v198;
  *((_QWORD *)v192 + 6) = v199;
  *((_QWORD *)v192 + 7) = v200;
  *((_QWORD *)v192 + 8) = v268;
  v192[72] = v275;
  sub_23645FAF8(v201, v202, v203, v204, v205, v206, v207, v208, v209, v210);
  *(_QWORD *)((char *)v155 + v276[7]) = *(_QWORD *)((char *)v156 + v276[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_42:
  v174 = (int *)type metadata accessor for SignInModel();
  v175 = v174[5];
  v176 = (uint64_t)v155 + v175;
  v177 = (char *)v156 + v175;
  v178 = *(_QWORD *)((char *)v155 + v175 + 8);
  v179 = *(_QWORD *)((char *)v156 + v175 + 8);
  if (!v178)
  {
    if (!v179)
    {
      v211 = *((_OWORD *)v177 + 1);
      *(_OWORD *)v176 = *(_OWORD *)v177;
      *(_OWORD *)(v176 + 16) = v211;
      v212 = *((_OWORD *)v177 + 2);
      v213 = *((_OWORD *)v177 + 3);
      v214 = *((_OWORD *)v177 + 5);
      *(_OWORD *)(v176 + 64) = *((_OWORD *)v177 + 4);
      *(_OWORD *)(v176 + 80) = v214;
      *(_OWORD *)(v176 + 32) = v212;
      *(_OWORD *)(v176 + 48) = v213;
      goto LABEL_59;
    }
    *(_QWORD *)v176 = *(_QWORD *)v177;
    *(_QWORD *)(v176 + 8) = *((_QWORD *)v177 + 1);
    *(_QWORD *)(v176 + 16) = *((_QWORD *)v177 + 2);
    *(_QWORD *)(v176 + 24) = *((_QWORD *)v177 + 3);
    *(_QWORD *)(v176 + 32) = *((_QWORD *)v177 + 4);
    *(_QWORD *)(v176 + 40) = *((_QWORD *)v177 + 5);
    *(_QWORD *)(v176 + 48) = *((_QWORD *)v177 + 6);
    *(_QWORD *)(v176 + 56) = *((_QWORD *)v177 + 7);
    *(_QWORD *)(v176 + 64) = *((_QWORD *)v177 + 8);
    *(_QWORD *)(v176 + 72) = *((_QWORD *)v177 + 9);
    v277 = v177 + 80;
    v181 = *((_QWORD *)v177 + 11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v181 >> 60 == 15)
    {
      *(_OWORD *)(v176 + 80) = *v277;
      goto LABEL_59;
    }
    v182 = *(_QWORD *)v277;
    goto LABEL_57;
  }
  if (!v179)
  {
    sub_236555A04(v176);
    v183 = *((_OWORD *)v177 + 1);
    *(_OWORD *)v176 = *(_OWORD *)v177;
    *(_OWORD *)(v176 + 16) = v183;
    v184 = *((_OWORD *)v177 + 5);
    v186 = *((_OWORD *)v177 + 2);
    v185 = *((_OWORD *)v177 + 3);
    *(_OWORD *)(v176 + 64) = *((_OWORD *)v177 + 4);
    *(_OWORD *)(v176 + 80) = v184;
    *(_OWORD *)(v176 + 32) = v186;
    *(_OWORD *)(v176 + 48) = v185;
    goto LABEL_59;
  }
  *(_QWORD *)v176 = *(_QWORD *)v177;
  *(_QWORD *)(v176 + 8) = *((_QWORD *)v177 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v176 + 16) = *((_QWORD *)v177 + 2);
  *(_QWORD *)(v176 + 24) = *((_QWORD *)v177 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v176 + 32) = *((_QWORD *)v177 + 4);
  *(_QWORD *)(v176 + 40) = *((_QWORD *)v177 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v176 + 48) = *((_QWORD *)v177 + 6);
  *(_QWORD *)(v176 + 56) = *((_QWORD *)v177 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v176 + 64) = *((_QWORD *)v177 + 8);
  *(_QWORD *)(v176 + 72) = *((_QWORD *)v177 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v180 = (uint64_t *)(v177 + 80);
  v181 = *((_QWORD *)v177 + 11);
  if (*(_QWORD *)(v176 + 88) >> 60 == 15)
  {
    if (v181 >> 60 != 15)
    {
      v182 = *v180;
LABEL_57:
      sub_236468CBC(v182, v181);
      *(_QWORD *)(v176 + 80) = v182;
      *(_QWORD *)(v176 + 88) = v181;
      goto LABEL_59;
    }
LABEL_53:
    *(_OWORD *)(v176 + 80) = *(_OWORD *)v180;
    goto LABEL_59;
  }
  if (v181 >> 60 == 15)
  {
    sub_2364A87BC(v176 + 80);
    goto LABEL_53;
  }
  v215 = *v180;
  sub_236468CBC(v215, *((_QWORD *)v177 + 11));
  v216 = *(_QWORD *)(v176 + 80);
  v217 = *(_QWORD *)(v176 + 88);
  *(_QWORD *)(v176 + 80) = v215;
  *(_QWORD *)(v176 + 88) = v181;
  sub_236468D44(v216, v217);
LABEL_59:
  *(_QWORD *)((char *)v155 + v174[6]) = *(_QWORD *)((char *)v156 + v174[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v155 + v174[7]) = *(_QWORD *)((char *)v156 + v174[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)v155 + v174[8]) = *((_BYTE *)v156 + v174[8]);
  *((_BYTE *)v155 + v174[9]) = *((_BYTE *)v156 + v174[9]);
  v218 = v174[10];
  v219 = (_QWORD *)((char *)v155 + v218);
  v220 = (_QWORD *)((char *)v156 + v218);
  v221 = *(_QWORD *)((char *)v155 + v218 + 8);
  v222 = *(_QWORD *)((char *)v156 + v218 + 8);
  if (v221)
  {
    if (v222)
    {
      *v219 = *v220;
      v219[1] = v220[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v219[2] = v220[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v219[3] = v220[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_2364915D0((uint64_t)v219);
      v223 = *((_OWORD *)v220 + 1);
      *(_OWORD *)v219 = *(_OWORD *)v220;
      *((_OWORD *)v219 + 1) = v223;
    }
  }
  else if (v222)
  {
    *v219 = *v220;
    v219[1] = v220[1];
    v219[2] = v220[2];
    v219[3] = v220[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v224 = *((_OWORD *)v220 + 1);
    *(_OWORD *)v219 = *(_OWORD *)v220;
    *((_OWORD *)v219 + 1) = v224;
  }
  v225 = v174[11];
  v226 = *(void **)((char *)v155 + v225);
  v227 = *(void **)((char *)v156 + v225);
  *(_QWORD *)((char *)v155 + v225) = v227;
  v228 = v227;

  v229 = v174[12];
  v230 = (char *)v155 + v229;
  v231 = (char *)v156 + v229;
  v232 = *(_QWORD *)v231;
  v233 = *((_QWORD *)v231 + 1);
  v234 = v231[16];
  sub_2364D941C(*(_QWORD *)v231, v233, v234);
  v235 = *(_QWORD *)v230;
  v236 = *((_QWORD *)v230 + 1);
  *(_QWORD *)v230 = v232;
  *((_QWORD *)v230 + 1) = v233;
  v237 = v230[16];
  v230[16] = v234;
  sub_236498C2C(v235, v236, v237);
  v238 = v174[13];
  v239 = (_QWORD *)((char *)v155 + v238);
  v240 = (_QWORD *)((char *)v156 + v238);
  *v239 = *v240;
  v239[1] = v240[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)v155 + v174[14]) = *((_BYTE *)v156 + v174[14]);
  v241 = v174[15];
  v242 = (uint64_t)v155 + v241;
  v243 = (char *)v156 + v241;
  v244 = *(_QWORD *)((char *)v156 + v241 + 8);
  if (*(_QWORD *)(v242 + 8) >= 3uLL)
  {
    if (v244 >= 3)
    {
      *(_QWORD *)v242 = *(_QWORD *)v243;
      *(_QWORD *)(v242 + 8) = *((_QWORD *)v243 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v242 + 16) = *((_QWORD *)v243 + 2);
      *(_QWORD *)(v242 + 24) = *((_QWORD *)v243 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v247 = v243[32];
    }
    else
    {
      sub_23657D764(v242);
      v247 = v243[32];
      v248 = *((_OWORD *)v243 + 1);
      *(_OWORD *)v242 = *(_OWORD *)v243;
      *(_OWORD *)(v242 + 16) = v248;
    }
    *(_BYTE *)(v242 + 32) = v247;
  }
  else if (v244 >= 3)
  {
    *(_QWORD *)v242 = *(_QWORD *)v243;
    *(_QWORD *)(v242 + 8) = *((_QWORD *)v243 + 1);
    *(_QWORD *)(v242 + 16) = *((_QWORD *)v243 + 2);
    *(_QWORD *)(v242 + 24) = *((_QWORD *)v243 + 3);
    *(_BYTE *)(v242 + 32) = v243[32];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v245 = *(_OWORD *)v243;
    v246 = *((_OWORD *)v243 + 1);
    *(_BYTE *)(v242 + 32) = v243[32];
    *(_OWORD *)v242 = v245;
    *(_OWORD *)(v242 + 16) = v246;
  }
  return v271;
}

uint64_t sub_23657D764(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EB9F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23657D7A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  int *v17;
  uint64_t v18;
  unsigned int (*v19)(_OWORD *, uint64_t, int *);
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  int *v32;
  uint64_t v33;
  _OWORD *v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  _OWORD *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  _OWORD *v61;
  __int128 v62;
  __int128 v63;
  int *v64;
  uint64_t v65;
  _OWORD *v66;
  _OWORD *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  _OWORD *v72;
  _OWORD *v73;
  __int128 v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  __int128 v81;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 22) = *(_OWORD *)(a2 + 22);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  v7 = *(_OWORD *)(a2 + 128);
  v8 = *(_OWORD *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v9;
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 144) = v8;
  v10 = *(_OWORD *)(a2 + 192);
  v11 = *(_OWORD *)(a2 + 208);
  v12 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v12;
  v13 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = v11;
  *(_OWORD *)(a1 + 224) = v13;
  v14 = *(int *)(a3 + 32);
  v15 = (_OWORD *)(a1 + v14);
  v16 = (_OWORD *)(a2 + v14);
  *(_OWORD *)(a1 + 192) = v10;
  v17 = (int *)type metadata accessor for IdMSAccount();
  v18 = *((_QWORD *)v17 - 1);
  v19 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v18 + 48);
  if (v19(v16, 1, v17))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E45E0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v21 = v16[3];
    v15[2] = v16[2];
    v15[3] = v21;
    v15[4] = v16[4];
    v22 = v16[1];
    *v15 = *v16;
    v15[1] = v22;
    v23 = v17[5];
    v24 = (char *)v15 + v23;
    v25 = (char *)v16 + v23;
    v26 = sub_2365AF8D0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
    v27 = v17[6];
    v28 = (_OWORD *)((char *)v15 + v27);
    v29 = (_OWORD *)((char *)v16 + v27);
    v30 = v29[3];
    v28[2] = v29[2];
    v28[3] = v30;
    *(_OWORD *)((char *)v28 + 57) = *(_OWORD *)((char *)v29 + 57);
    v31 = v29[1];
    *v28 = *v29;
    v28[1] = v31;
    *(_QWORD *)((char *)v15 + v17[7]) = *(_QWORD *)((char *)v16 + v17[7]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
  }
  v32 = (int *)type metadata accessor for AuthenticationModel();
  v33 = v32[5];
  v34 = (_OWORD *)((char *)v15 + v33);
  v35 = (_OWORD *)((char *)v16 + v33);
  v36 = v35[3];
  v34[2] = v35[2];
  v34[3] = v36;
  v34[4] = v35[4];
  v37 = v35[1];
  *v34 = *v35;
  v34[1] = v37;
  *((_BYTE *)v15 + v32[6]) = *((_BYTE *)v16 + v32[6]);
  v38 = v32[7];
  v39 = (char *)v15 + v38;
  v40 = (char *)v16 + v38;
  v41 = *((_OWORD *)v40 + 1);
  *(_OWORD *)v39 = *(_OWORD *)v40;
  *((_OWORD *)v39 + 1) = v41;
  v39[80] = v40[80];
  v42 = *((_OWORD *)v40 + 4);
  v43 = *((_OWORD *)v40 + 2);
  *((_OWORD *)v39 + 3) = *((_OWORD *)v40 + 3);
  *((_OWORD *)v39 + 4) = v42;
  *((_OWORD *)v39 + 2) = v43;
  *(_OWORD *)((char *)v15 + v32[8]) = *(_OWORD *)((char *)v16 + v32[8]);
  *(_QWORD *)((char *)v15 + v32[9]) = *(_QWORD *)((char *)v16 + v32[9]);
  *((_BYTE *)v15 + v32[10]) = *((_BYTE *)v16 + v32[10]);
  v44 = v32[11];
  v45 = (_QWORD *)((char *)v15 + v44);
  v46 = (uint64_t *)((char *)v16 + v44);
  v47 = *v46;
  if (*v46)
  {
    v48 = v46[1];
    *v45 = v47;
    v45[1] = v48;
  }
  else
  {
    *(_OWORD *)v45 = *(_OWORD *)v46;
  }
  v49 = *(int *)(a3 + 36);
  v50 = (_OWORD *)(a1 + v49);
  v51 = (_OWORD *)(a2 + v49);
  if (v19(v51, 1, v17))
  {
    v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E45E0);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    v53 = v51[3];
    v50[2] = v51[2];
    v50[3] = v53;
    v50[4] = v51[4];
    v54 = v51[1];
    *v50 = *v51;
    v50[1] = v54;
    v55 = v17[5];
    v56 = (char *)v50 + v55;
    v57 = (char *)v51 + v55;
    v58 = sub_2365AF8D0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 32))(v56, v57, v58);
    v59 = v17[6];
    v60 = (_OWORD *)((char *)v50 + v59);
    v61 = (_OWORD *)((char *)v51 + v59);
    v62 = v61[3];
    v60[2] = v61[2];
    v60[3] = v62;
    *(_OWORD *)((char *)v60 + 57) = *(_OWORD *)((char *)v61 + 57);
    v63 = v61[1];
    *v60 = *v61;
    v60[1] = v63;
    *(_QWORD *)((char *)v50 + v17[7]) = *(_QWORD *)((char *)v51 + v17[7]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v18 + 56))(v50, 0, 1, v17);
  }
  v64 = (int *)type metadata accessor for SignInModel();
  v65 = v64[5];
  v66 = (_OWORD *)((char *)v50 + v65);
  v67 = (_OWORD *)((char *)v51 + v65);
  v68 = v67[3];
  v66[2] = v67[2];
  v66[3] = v68;
  v69 = v67[5];
  v66[4] = v67[4];
  v66[5] = v69;
  v70 = v67[1];
  *v66 = *v67;
  v66[1] = v70;
  *(_QWORD *)((char *)v50 + v64[6]) = *(_QWORD *)((char *)v51 + v64[6]);
  *(_QWORD *)((char *)v50 + v64[7]) = *(_QWORD *)((char *)v51 + v64[7]);
  *((_BYTE *)v50 + v64[8]) = *((_BYTE *)v51 + v64[8]);
  *((_BYTE *)v50 + v64[9]) = *((_BYTE *)v51 + v64[9]);
  v71 = v64[10];
  v72 = (_OWORD *)((char *)v50 + v71);
  v73 = (_OWORD *)((char *)v51 + v71);
  v74 = v73[1];
  *v72 = *v73;
  v72[1] = v74;
  *(_QWORD *)((char *)v50 + v64[11]) = *(_QWORD *)((char *)v51 + v64[11]);
  v75 = v64[12];
  v76 = (char *)v50 + v75;
  v77 = (char *)v51 + v75;
  *(_OWORD *)v76 = *(_OWORD *)v77;
  v76[16] = v77[16];
  *(_OWORD *)((char *)v50 + v64[13]) = *(_OWORD *)((char *)v51 + v64[13]);
  *((_BYTE *)v50 + v64[14]) = *((_BYTE *)v51 + v64[14]);
  v78 = v64[15];
  v79 = (char *)v50 + v78;
  v80 = (char *)v51 + v78;
  v79[32] = v80[32];
  v81 = *((_OWORD *)v80 + 1);
  *(_OWORD *)v79 = *(_OWORD *)v80;
  *((_OWORD *)v79 + 1) = v81;
  return a1;
}

uint64_t sub_23657DB84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int16 v7;
  int v8;
  void *v9;
  void *v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  int *v38;
  uint64_t v39;
  uint64_t (*v40)(_QWORD *, uint64_t, int *);
  int v41;
  int v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  _OWORD *v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  char v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  int v97;
  int v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  _OWORD *v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  int *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _OWORD *v120;
  unint64_t v121;
  unint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  unint64_t v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_WORD *)(a2 + 36);
  v8 = *(_DWORD *)(a2 + 32);
  v9 = *(void **)(a1 + 8);
  v10 = *(void **)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 32) = v8;
  *(_WORD *)(a1 + 36) = v7;
  sub_2364984F8(v9, v10, v11);
  v12 = *(unsigned __int8 *)(a1 + 88);
  if (v12 > 0xF9)
    goto LABEL_4;
  v13 = *(unsigned __int8 *)(a2 + 88);
  if (v13 > 0xF9)
  {
    sub_236462250(a1 + 40);
LABEL_4:
    v14 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v14;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    goto LABEL_6;
  }
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(_QWORD *)(a1 + 56);
  v18 = *(_QWORD *)(a1 + 64);
  v19 = *(_QWORD *)(a1 + 72);
  v20 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = v13;
  sub_23645DCB0(v15, v16, v17, v18, v19, v20, v12);
LABEL_6:
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  v21 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v21;
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v22;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  v23 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v23;
  swift_bridgeObjectRelease();
  v24 = *(_BYTE *)(a2 + 216);
  v25 = *(_QWORD *)(a1 + 168);
  v26 = *(_QWORD *)(a1 + 176);
  v27 = *(_QWORD *)(a1 + 184);
  v28 = *(_QWORD *)(a1 + 192);
  v29 = *(_QWORD *)(a1 + 200);
  v30 = *(_QWORD *)(a1 + 208);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  v31 = *(unsigned __int8 *)(a1 + 216);
  *(_BYTE *)(a1 + 216) = v24;
  sub_236498B50(v25, v26, v27, v28, v29, v30, v31);
  if (*(_QWORD *)(a1 + 232))
  {
    v32 = *(_QWORD *)(a2 + 232);
    if (v32)
    {
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 232) = v32;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      swift_release();
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      swift_release();
      goto LABEL_11;
    }
    sub_2364BF0AC(a1 + 224);
  }
  v33 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v33;
LABEL_11:
  v34 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v34;
  swift_bridgeObjectRelease();
  v205 = a3;
  v35 = *(int *)(a3 + 32);
  v36 = (_QWORD *)(a1 + v35);
  v37 = (_QWORD *)(a2 + v35);
  v38 = (int *)type metadata accessor for IdMSAccount();
  v39 = *((_QWORD *)v38 - 1);
  v40 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v39 + 48);
  v41 = v40(v36, 1, v38);
  v42 = v40(v37, 1, v38);
  if (v41)
  {
    if (!v42)
    {
      v43 = *((_OWORD *)v37 + 3);
      *((_OWORD *)v36 + 2) = *((_OWORD *)v37 + 2);
      *((_OWORD *)v36 + 3) = v43;
      *((_OWORD *)v36 + 4) = *((_OWORD *)v37 + 4);
      v44 = *((_OWORD *)v37 + 1);
      *(_OWORD *)v36 = *(_OWORD *)v37;
      *((_OWORD *)v36 + 1) = v44;
      v45 = v38[5];
      v46 = (char *)v36 + v45;
      v47 = (char *)v37 + v45;
      v48 = sub_2365AF8D0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 32))(v46, v47, v48);
      v49 = v38[6];
      v50 = (_OWORD *)((char *)v36 + v49);
      v51 = (_OWORD *)((char *)v37 + v49);
      v52 = v51[3];
      v50[2] = v51[2];
      v50[3] = v52;
      *(_OWORD *)((char *)v50 + 57) = *(_OWORD *)((char *)v51 + 57);
      v53 = v51[1];
      *v50 = *v51;
      v50[1] = v53;
      *(_QWORD *)((char *)v36 + v38[7]) = *(_QWORD *)((char *)v37 + v38[7]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v39 + 56))(v36, 0, 1, v38);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v42)
  {
    sub_236465A18((uint64_t)v36, (uint64_t (*)(_QWORD))type metadata accessor for IdMSAccount);
LABEL_16:
    v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E45E0);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_17;
  }
  v152 = v37[1];
  *v36 = *v37;
  v36[1] = v152;
  swift_bridgeObjectRelease();
  v153 = v37[3];
  v36[2] = v37[2];
  v36[3] = v153;
  swift_bridgeObjectRelease();
  v154 = v37[5];
  v36[4] = v37[4];
  v36[5] = v154;
  swift_bridgeObjectRelease();
  v155 = v37[7];
  v36[6] = v37[6];
  v36[7] = v155;
  swift_bridgeObjectRelease();
  v156 = v37[9];
  v36[8] = v37[8];
  v36[9] = v156;
  swift_bridgeObjectRelease();
  v157 = v38[5];
  v158 = (char *)v36 + v157;
  v159 = (char *)v37 + v157;
  v160 = sub_2365AF8D0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v160 - 8) + 40))(v158, v159, v160);
  v161 = v38[6];
  v162 = (char *)v36 + v161;
  v163 = (char *)v37 + v161;
  v164 = *((_QWORD *)v163 + 8);
  v165 = v163[72];
  v166 = *(_QWORD *)v162;
  v167 = *((_QWORD *)v162 + 1);
  v168 = *((_QWORD *)v162 + 2);
  v169 = *((_QWORD *)v162 + 3);
  v170 = *((_QWORD *)v162 + 4);
  v171 = *((_QWORD *)v162 + 5);
  v172 = *((_QWORD *)v162 + 6);
  v173 = *((_QWORD *)v162 + 7);
  v174 = *((_QWORD *)v162 + 8);
  v175 = v162[72];
  v176 = *((_OWORD *)v163 + 1);
  *(_OWORD *)v162 = *(_OWORD *)v163;
  *((_OWORD *)v162 + 1) = v176;
  v177 = *((_OWORD *)v163 + 3);
  *((_OWORD *)v162 + 2) = *((_OWORD *)v163 + 2);
  *((_OWORD *)v162 + 3) = v177;
  *((_QWORD *)v162 + 8) = v164;
  v162[72] = v165;
  sub_23645FAF8(v166, v167, v168, v169, v170, v171, v172, v173, v174, v175);
  *(_QWORD *)((char *)v36 + v38[7]) = *(_QWORD *)((char *)v37 + v38[7]);
  swift_bridgeObjectRelease();
LABEL_17:
  v55 = (int *)type metadata accessor for AuthenticationModel();
  v56 = v55[5];
  v57 = (_QWORD *)((char *)v36 + v56);
  v58 = (_QWORD *)((char *)v37 + v56);
  if (*(_QWORD *)((char *)v36 + v56 + 8))
  {
    v59 = v58[1];
    if (v59)
    {
      *v57 = *v58;
      v57[1] = v59;
      swift_bridgeObjectRelease();
      v60 = v58[3];
      v57[2] = v58[2];
      v57[3] = v60;
      swift_bridgeObjectRelease();
      v61 = v58[5];
      v57[4] = v58[4];
      v57[5] = v61;
      swift_bridgeObjectRelease();
      v62 = v58[7];
      v57[6] = v58[6];
      v57[7] = v62;
      swift_bridgeObjectRelease();
      v63 = v58[9];
      v57[8] = v58[8];
      v57[9] = v63;
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    sub_236460568((uint64_t)v57);
  }
  v64 = *((_OWORD *)v58 + 3);
  *((_OWORD *)v57 + 2) = *((_OWORD *)v58 + 2);
  *((_OWORD *)v57 + 3) = v64;
  *((_OWORD *)v57 + 4) = *((_OWORD *)v58 + 4);
  v65 = *((_OWORD *)v58 + 1);
  *(_OWORD *)v57 = *(_OWORD *)v58;
  *((_OWORD *)v57 + 1) = v65;
LABEL_22:
  *((_BYTE *)v36 + v55[6]) = *((_BYTE *)v37 + v55[6]);
  v66 = v55[7];
  v67 = (char *)v36 + v66;
  v68 = (char *)v37 + v66;
  v69 = v68[80];
  v70 = *(void **)v67;
  v71 = (void *)*((_QWORD *)v67 + 1);
  v72 = (void *)*((_QWORD *)v67 + 2);
  v73 = (void *)*((_QWORD *)v67 + 3);
  v74 = *((_QWORD *)v67 + 4);
  v75 = *((_QWORD *)v67 + 5);
  v76 = *((_QWORD *)v67 + 6);
  v77 = *((_QWORD *)v67 + 7);
  v78 = (void *)*((_QWORD *)v67 + 8);
  v79 = (void *)*((_QWORD *)v67 + 9);
  v80 = v67[80];
  v81 = *((_OWORD *)v68 + 1);
  *(_OWORD *)v67 = *(_OWORD *)v68;
  *((_OWORD *)v67 + 1) = v81;
  v82 = *((_OWORD *)v68 + 3);
  *((_OWORD *)v67 + 2) = *((_OWORD *)v68 + 2);
  *((_OWORD *)v67 + 3) = v82;
  *((_OWORD *)v67 + 4) = *((_OWORD *)v68 + 4);
  v67[80] = v69;
  sub_23644F8BC(v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80);
  v83 = v55[8];
  v84 = (_QWORD *)((char *)v36 + v83);
  v85 = (_QWORD *)((char *)v37 + v83);
  v87 = *v85;
  v86 = v85[1];
  *v84 = v87;
  v84[1] = v86;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v36 + v55[9]) = *(_QWORD *)((char *)v37 + v55[9]);
  swift_bridgeObjectRelease();
  *((_BYTE *)v36 + v55[10]) = *((_BYTE *)v37 + v55[10]);
  v88 = v55[11];
  v89 = (_QWORD *)((char *)v36 + v88);
  v90 = (char *)v37 + v88;
  v91 = *(_QWORD *)((char *)v37 + v88);
  if (*v89)
  {
    if (v91)
    {
      v92 = *((_QWORD *)v90 + 1);
      *v89 = v91;
      v89[1] = v92;
      swift_release();
      goto LABEL_29;
    }
    swift_release();
  }
  else if (v91)
  {
    v93 = *((_QWORD *)v90 + 1);
    *v89 = v91;
    v89[1] = v93;
    goto LABEL_29;
  }
  *(_OWORD *)v89 = *(_OWORD *)v90;
LABEL_29:
  v94 = *(int *)(v205 + 36);
  v95 = (_QWORD *)(a1 + v94);
  v96 = (_QWORD *)(a2 + v94);
  v97 = v40((_QWORD *)(a1 + v94), 1, v38);
  v98 = v40(v96, 1, v38);
  if (v97)
  {
    if (!v98)
    {
      v99 = *((_OWORD *)v96 + 3);
      *((_OWORD *)v95 + 2) = *((_OWORD *)v96 + 2);
      *((_OWORD *)v95 + 3) = v99;
      *((_OWORD *)v95 + 4) = *((_OWORD *)v96 + 4);
      v100 = *((_OWORD *)v96 + 1);
      *(_OWORD *)v95 = *(_OWORD *)v96;
      *((_OWORD *)v95 + 1) = v100;
      v101 = v38[5];
      v102 = (char *)v95 + v101;
      v103 = (char *)v96 + v101;
      v104 = sub_2365AF8D0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v104 - 8) + 32))(v102, v103, v104);
      v105 = v38[6];
      v106 = (_OWORD *)((char *)v95 + v105);
      v107 = (_OWORD *)((char *)v96 + v105);
      v108 = v107[3];
      v106[2] = v107[2];
      v106[3] = v108;
      *(_OWORD *)((char *)v106 + 57) = *(_OWORD *)((char *)v107 + 57);
      v109 = v107[1];
      *v106 = *v107;
      v106[1] = v109;
      *(_QWORD *)((char *)v95 + v38[7]) = *(_QWORD *)((char *)v96 + v38[7]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v39 + 56))(v95, 0, 1, v38);
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  if (v98)
  {
    sub_236465A18((uint64_t)v95, (uint64_t (*)(_QWORD))type metadata accessor for IdMSAccount);
LABEL_34:
    v110 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E45E0);
    memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
    goto LABEL_35;
  }
  v178 = v96[1];
  *v95 = *v96;
  v95[1] = v178;
  swift_bridgeObjectRelease();
  v179 = v96[3];
  v95[2] = v96[2];
  v95[3] = v179;
  swift_bridgeObjectRelease();
  v180 = v96[5];
  v95[4] = v96[4];
  v95[5] = v180;
  swift_bridgeObjectRelease();
  v181 = v96[7];
  v95[6] = v96[6];
  v95[7] = v181;
  swift_bridgeObjectRelease();
  v182 = v96[9];
  v95[8] = v96[8];
  v95[9] = v182;
  swift_bridgeObjectRelease();
  v183 = v38[5];
  v184 = (char *)v95 + v183;
  v185 = (char *)v96 + v183;
  v186 = sub_2365AF8D0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v186 - 8) + 40))(v184, v185, v186);
  v187 = v38[6];
  v188 = (char *)v95 + v187;
  v189 = (char *)v96 + v187;
  v190 = *((_QWORD *)v189 + 8);
  v191 = v189[72];
  v192 = *(_QWORD *)v188;
  v193 = *((_QWORD *)v188 + 1);
  v194 = *((_QWORD *)v188 + 2);
  v195 = *((_QWORD *)v188 + 3);
  v196 = *((_QWORD *)v188 + 4);
  v197 = *((_QWORD *)v188 + 5);
  v198 = *((_QWORD *)v188 + 6);
  v199 = *((_QWORD *)v188 + 7);
  v200 = *((_QWORD *)v188 + 8);
  v201 = v188[72];
  v202 = *((_OWORD *)v189 + 1);
  *(_OWORD *)v188 = *(_OWORD *)v189;
  *((_OWORD *)v188 + 1) = v202;
  v203 = *((_OWORD *)v189 + 3);
  *((_OWORD *)v188 + 2) = *((_OWORD *)v189 + 2);
  *((_OWORD *)v188 + 3) = v203;
  *((_QWORD *)v188 + 8) = v190;
  v188[72] = v191;
  sub_23645FAF8(v192, v193, v194, v195, v196, v197, v198, v199, v200, v201);
  *(_QWORD *)((char *)v95 + v38[7]) = *(_QWORD *)((char *)v96 + v38[7]);
  swift_bridgeObjectRelease();
LABEL_35:
  v111 = (int *)type metadata accessor for SignInModel();
  v112 = v111[5];
  v113 = (uint64_t)v95 + v112;
  v114 = (char *)v96 + v112;
  if (!*(_QWORD *)((char *)v95 + v112 + 8))
  {
LABEL_42:
    v123 = *((_OWORD *)v114 + 3);
    *(_OWORD *)(v113 + 32) = *((_OWORD *)v114 + 2);
    *(_OWORD *)(v113 + 48) = v123;
    v124 = *((_OWORD *)v114 + 5);
    *(_OWORD *)(v113 + 64) = *((_OWORD *)v114 + 4);
    *(_OWORD *)(v113 + 80) = v124;
    v125 = *((_OWORD *)v114 + 1);
    *(_OWORD *)v113 = *(_OWORD *)v114;
    *(_OWORD *)(v113 + 16) = v125;
    goto LABEL_43;
  }
  v115 = *((_QWORD *)v114 + 1);
  if (!v115)
  {
    sub_236555A04(v113);
    goto LABEL_42;
  }
  *(_QWORD *)v113 = *(_QWORD *)v114;
  *(_QWORD *)(v113 + 8) = v115;
  swift_bridgeObjectRelease();
  v116 = *((_QWORD *)v114 + 3);
  *(_QWORD *)(v113 + 16) = *((_QWORD *)v114 + 2);
  *(_QWORD *)(v113 + 24) = v116;
  swift_bridgeObjectRelease();
  v117 = *((_QWORD *)v114 + 5);
  *(_QWORD *)(v113 + 32) = *((_QWORD *)v114 + 4);
  *(_QWORD *)(v113 + 40) = v117;
  swift_bridgeObjectRelease();
  v118 = *((_QWORD *)v114 + 7);
  *(_QWORD *)(v113 + 48) = *((_QWORD *)v114 + 6);
  *(_QWORD *)(v113 + 56) = v118;
  swift_bridgeObjectRelease();
  v119 = *((_QWORD *)v114 + 9);
  *(_QWORD *)(v113 + 64) = *((_QWORD *)v114 + 8);
  *(_QWORD *)(v113 + 72) = v119;
  swift_bridgeObjectRelease();
  v120 = v114 + 80;
  v121 = *(_QWORD *)(v113 + 88);
  if (v121 >> 60 == 15)
  {
LABEL_40:
    *(_OWORD *)(v113 + 80) = *v120;
    goto LABEL_43;
  }
  v122 = *((_QWORD *)v114 + 11);
  if (v122 >> 60 == 15)
  {
    sub_2364A87BC(v113 + 80);
    goto LABEL_40;
  }
  v204 = *(_QWORD *)(v113 + 80);
  *(_QWORD *)(v113 + 80) = *(_QWORD *)v120;
  *(_QWORD *)(v113 + 88) = v122;
  sub_236468D44(v204, v121);
LABEL_43:
  *(_QWORD *)((char *)v95 + v111[6]) = *(_QWORD *)((char *)v96 + v111[6]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v95 + v111[7]) = *(_QWORD *)((char *)v96 + v111[7]);
  swift_bridgeObjectRelease();
  *((_BYTE *)v95 + v111[8]) = *((_BYTE *)v96 + v111[8]);
  *((_BYTE *)v95 + v111[9]) = *((_BYTE *)v96 + v111[9]);
  v126 = v111[10];
  v127 = (_QWORD *)((char *)v95 + v126);
  v128 = (_QWORD *)((char *)v96 + v126);
  if (*(_QWORD *)((char *)v95 + v126 + 8))
  {
    v129 = v128[1];
    if (v129)
    {
      *v127 = *v128;
      v127[1] = v129;
      swift_bridgeObjectRelease();
      v127[2] = v128[2];
      swift_bridgeObjectRelease();
      v127[3] = v128[3];
      swift_bridgeObjectRelease();
      goto LABEL_48;
    }
    sub_2364915D0((uint64_t)v127);
  }
  v130 = *((_OWORD *)v128 + 1);
  *(_OWORD *)v127 = *(_OWORD *)v128;
  *((_OWORD *)v127 + 1) = v130;
LABEL_48:
  v131 = v111[11];
  v132 = *(void **)((char *)v95 + v131);
  *(_QWORD *)((char *)v95 + v131) = *(_QWORD *)((char *)v96 + v131);

  v133 = v111[12];
  v134 = (char *)v95 + v133;
  v135 = (char *)v96 + v133;
  v136 = v135[16];
  v137 = *(_QWORD *)v134;
  v138 = *((_QWORD *)v134 + 1);
  *(_OWORD *)v134 = *(_OWORD *)v135;
  v139 = v134[16];
  v134[16] = v136;
  sub_236498C2C(v137, v138, v139);
  v140 = v111[13];
  v141 = (_QWORD *)((char *)v95 + v140);
  v142 = (_QWORD *)((char *)v96 + v140);
  v144 = *v142;
  v143 = v142[1];
  *v141 = v144;
  v141[1] = v143;
  swift_bridgeObjectRelease();
  *((_BYTE *)v95 + v111[14]) = *((_BYTE *)v96 + v111[14]);
  v145 = v111[15];
  v146 = (uint64_t)v95 + v145;
  v147 = (char *)v96 + v145;
  if (*(_QWORD *)(v146 + 8) >= 3uLL)
  {
    v148 = *((_QWORD *)v147 + 1);
    if (v148 >= 3)
    {
      *(_QWORD *)v146 = *(_QWORD *)v147;
      *(_QWORD *)(v146 + 8) = v148;
      swift_bridgeObjectRelease();
      v150 = *((_QWORD *)v147 + 3);
      *(_QWORD *)(v146 + 16) = *((_QWORD *)v147 + 2);
      *(_QWORD *)(v146 + 24) = v150;
      swift_bridgeObjectRelease();
      goto LABEL_53;
    }
    sub_23657D764(v146);
  }
  v149 = *((_OWORD *)v147 + 1);
  *(_OWORD *)v146 = *(_OWORD *)v147;
  *(_OWORD *)(v146 + 16) = v149;
LABEL_53:
  *(_BYTE *)(v146 + 32) = v147[32];
  return a1;
}

uint64_t sub_23657E518()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23657E524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = (*(_QWORD *)(a1 + 24) >> 24) & 0xFFFF0000 | WORD1(*(_QWORD *)(a1 + 24));
    if (v4 > 0x80000000)
      return -v4;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for AuthenticationModel();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 32);
    }
    else
    {
      v10 = type metadata accessor for SignInModel();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_23657E5CC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23657E5D8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = (-65536 * a2) | ((unint64_t)(-(int)a2 >> 16) << 40);
    *(_WORD *)(result + 36) = 0;
    *(_DWORD *)(result + 32) = 0;
  }
  else
  {
    v8 = type metadata accessor for AuthenticationModel();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 32);
    }
    else
    {
      v10 = type metadata accessor for SignInModel();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_23657E68C()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for AuthenticationModel();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for SignInModel();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_23657E738()
{
  return sub_23644F0B8(&qword_2563ECA78, type metadata accessor for SetupModel.ModelData, (uint64_t)&unk_2365C8080);
}

unint64_t sub_23657E768()
{
  unint64_t result;

  result = qword_2563ECA80;
  if (!qword_2563ECA80)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8170, &type metadata for SetupModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECA80);
  }
  return result;
}

unint64_t sub_23657E7B0()
{
  unint64_t result;

  result = qword_2563ECA88;
  if (!qword_2563ECA88)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8278, &type metadata for SetupModel.State.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECA88);
  }
  return result;
}

unint64_t sub_23657E7F8()
{
  unint64_t result;

  result = qword_2563ECA90;
  if (!qword_2563ECA90)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C84C0, &type metadata for SetupModel.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECA90);
  }
  return result;
}

unint64_t sub_23657E840()
{
  unint64_t result;

  result = qword_2563ECA98;
  if (!qword_2563ECA98)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8618, &type metadata for SetupModel.LocalRole.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECA98);
  }
  return result;
}

unint64_t sub_23657E888()
{
  unint64_t result;

  result = qword_2563ECAA0;
  if (!qword_2563ECAA0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8720, &type metadata for SetupModel.RemoteRole.PreEstablishedServerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECAA0);
  }
  return result;
}

unint64_t sub_23657E8D0()
{
  unint64_t result;

  result = qword_2563ECAA8;
  if (!qword_2563ECAA8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C87D8, &type metadata for SetupModel.RemoteRole.PreEstablishedClientCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECAA8);
  }
  return result;
}

unint64_t sub_23657E918()
{
  unint64_t result;

  result = qword_2563ECAB0;
  if (!qword_2563ECAB0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C88E0, &type metadata for SetupModel.RemoteRole.BleClientCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECAB0);
  }
  return result;
}

unint64_t sub_23657E960()
{
  unint64_t result;

  result = qword_2563ECAB8;
  if (!qword_2563ECAB8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C89E8, &type metadata for SetupModel.RemoteRole.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECAB8);
  }
  return result;
}

unint64_t sub_23657E9A8()
{
  unint64_t result;

  result = qword_2563ECAC0;
  if (!qword_2563ECAC0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8908, &type metadata for SetupModel.RemoteRole.RestrictedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECAC0);
  }
  return result;
}

unint64_t sub_23657E9F0()
{
  unint64_t result;

  result = qword_2563ECAC8;
  if (!qword_2563ECAC8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8930, &type metadata for SetupModel.RemoteRole.RestrictedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECAC8);
  }
  return result;
}

unint64_t sub_23657EA38()
{
  unint64_t result;

  result = qword_2563ECAD0;
  if (!qword_2563ECAD0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8850, &type metadata for SetupModel.RemoteRole.BleClientCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECAD0);
  }
  return result;
}

unint64_t sub_23657EA80()
{
  unint64_t result;

  result = qword_2563ECAD8;
  if (!qword_2563ECAD8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8878, &type metadata for SetupModel.RemoteRole.BleClientCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECAD8);
  }
  return result;
}

unint64_t sub_23657EAC8()
{
  unint64_t result;

  result = qword_2563ECAE0;
  if (!qword_2563ECAE0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8800, &type metadata for SetupModel.RemoteRole.BleServerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECAE0);
  }
  return result;
}

unint64_t sub_23657EB10()
{
  unint64_t result;

  result = qword_2563ECAE8;
  if (!qword_2563ECAE8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8828, &type metadata for SetupModel.RemoteRole.BleServerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECAE8);
  }
  return result;
}

unint64_t sub_23657EB58()
{
  unint64_t result;

  result = qword_2563ECAF0;
  if (!qword_2563ECAF0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8748, &type metadata for SetupModel.RemoteRole.PreEstablishedClientCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECAF0);
  }
  return result;
}

unint64_t sub_23657EBA0()
{
  unint64_t result;

  result = qword_2563ECAF8;
  if (!qword_2563ECAF8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8770, &type metadata for SetupModel.RemoteRole.PreEstablishedClientCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECAF8);
  }
  return result;
}

unint64_t sub_23657EBE8()
{
  unint64_t result;

  result = qword_2563ECB00;
  if (!qword_2563ECB00)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8690, &type metadata for SetupModel.RemoteRole.PreEstablishedServerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECB00);
  }
  return result;
}

unint64_t sub_23657EC30()
{
  unint64_t result;

  result = qword_2563ECB08;
  if (!qword_2563ECB08)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C86B8, &type metadata for SetupModel.RemoteRole.PreEstablishedServerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECB08);
  }
  return result;
}

unint64_t sub_23657EC78()
{
  unint64_t result;

  result = qword_2563ECB10;
  if (!qword_2563ECB10)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8640, &type metadata for SetupModel.RemoteRole.BleClientInterceptCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECB10);
  }
  return result;
}

unint64_t sub_23657ECC0()
{
  unint64_t result;

  result = qword_2563ECB18;
  if (!qword_2563ECB18)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8668, &type metadata for SetupModel.RemoteRole.BleClientInterceptCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECB18);
  }
  return result;
}

unint64_t sub_23657ED08()
{
  unint64_t result;

  result = qword_2563ECB20;
  if (!qword_2563ECB20)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8958, &type metadata for SetupModel.RemoteRole.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECB20);
  }
  return result;
}

unint64_t sub_23657ED50()
{
  unint64_t result;

  result = qword_2563ECB28;
  if (!qword_2563ECB28)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8980, &type metadata for SetupModel.RemoteRole.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECB28);
  }
  return result;
}

unint64_t sub_23657ED98()
{
  unint64_t result;

  result = qword_2563ECB30;
  if (!qword_2563ECB30)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8538, &type metadata for SetupModel.LocalRole.ManualCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECB30);
  }
  return result;
}

unint64_t sub_23657EDE0()
{
  unint64_t result;

  result = qword_2563ECB38;
  if (!qword_2563ECB38)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8560, &type metadata for SetupModel.LocalRole.ManualCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECB38);
  }
  return result;
}

unint64_t sub_23657EE28()
{
  unint64_t result;

  result = qword_2563ECB40;
  if (!qword_2563ECB40)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C84E8, &type metadata for SetupModel.LocalRole.RestrictedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECB40);
  }
  return result;
}

unint64_t sub_23657EE70()
{
  unint64_t result;

  result = qword_2563ECB48;
  if (!qword_2563ECB48)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8510, &type metadata for SetupModel.LocalRole.RestrictedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECB48);
  }
  return result;
}

unint64_t sub_23657EEB8()
{
  unint64_t result;

  result = qword_2563ECB50;
  if (!qword_2563ECB50)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8588, &type metadata for SetupModel.LocalRole.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECB50);
  }
  return result;
}

unint64_t sub_23657EF00()
{
  unint64_t result;

  result = qword_2563ECB58;
  if (!qword_2563ECB58)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C85B0, &type metadata for SetupModel.LocalRole.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECB58);
  }
  return result;
}

unint64_t sub_23657EF48()
{
  unint64_t result;

  result = qword_2563ECB60;
  if (!qword_2563ECB60)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C83E0, &type metadata for SetupModel.State.InitialCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECB60);
  }
  return result;
}

unint64_t sub_23657EF90()
{
  unint64_t result;

  result = qword_2563ECB68;
  if (!qword_2563ECB68)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8408, &type metadata for SetupModel.State.InitialCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECB68);
  }
  return result;
}

unint64_t sub_23657EFD8()
{
  unint64_t result;

  result = qword_2563ECB70;
  if (!qword_2563ECB70)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8390, &type metadata for SetupModel.State.DiscoverCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECB70);
  }
  return result;
}

unint64_t sub_23657F020()
{
  unint64_t result;

  result = qword_2563ECB78;
  if (!qword_2563ECB78)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C83B8, &type metadata for SetupModel.State.DiscoverCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECB78);
  }
  return result;
}

unint64_t sub_23657F068()
{
  unint64_t result;

  result = qword_2563ECB80;
  if (!qword_2563ECB80)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8340, &type metadata for SetupModel.State.AuthenticateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECB80);
  }
  return result;
}

unint64_t sub_23657F0B0()
{
  unint64_t result;

  result = qword_2563ECB88;
  if (!qword_2563ECB88)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8368, &type metadata for SetupModel.State.AuthenticateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECB88);
  }
  return result;
}

unint64_t sub_23657F0F8()
{
  unint64_t result;

  result = qword_2563ECB90;
  if (!qword_2563ECB90)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C82F0, &type metadata for SetupModel.State.SignInCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECB90);
  }
  return result;
}

unint64_t sub_23657F140()
{
  unint64_t result;

  result = qword_2563ECB98;
  if (!qword_2563ECB98)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8318, &type metadata for SetupModel.State.SignInCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECB98);
  }
  return result;
}

unint64_t sub_23657F188()
{
  unint64_t result;

  result = qword_2563ECBA0;
  if (!qword_2563ECBA0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C82A0, &type metadata for SetupModel.State.FinishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECBA0);
  }
  return result;
}

unint64_t sub_23657F1D0()
{
  unint64_t result;

  result = qword_2563ECBA8;
  if (!qword_2563ECBA8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C82C8, &type metadata for SetupModel.State.FinishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECBA8);
  }
  return result;
}

unint64_t sub_23657F218()
{
  unint64_t result;

  result = qword_2563ECBB0;
  if (!qword_2563ECBB0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C81E8, &type metadata for SetupModel.State.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECBB0);
  }
  return result;
}

unint64_t sub_23657F260()
{
  unint64_t result;

  result = qword_2563ECBB8;
  if (!qword_2563ECBB8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8210, &type metadata for SetupModel.State.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECBB8);
  }
  return result;
}

unint64_t sub_23657F2A8()
{
  unint64_t result;

  result = qword_2563ECBC0;
  if (!qword_2563ECBC0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8198, &type metadata for SetupModel.State.DismissCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECBC0);
  }
  return result;
}

unint64_t sub_23657F2F0()
{
  unint64_t result;

  result = qword_2563ECBC8;
  if (!qword_2563ECBC8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C81C0, &type metadata for SetupModel.State.DismissCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECBC8);
  }
  return result;
}

unint64_t sub_23657F338()
{
  unint64_t result;

  result = qword_2563ECBD0;
  if (!qword_2563ECBD0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8430, &type metadata for SetupModel.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECBD0);
  }
  return result;
}

unint64_t sub_23657F380()
{
  unint64_t result;

  result = qword_2563ECBD8;
  if (!qword_2563ECBD8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C8458, &type metadata for SetupModel.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECBD8);
  }
  return result;
}

unint64_t sub_23657F3C8()
{
  unint64_t result;

  result = qword_2563ECBE0;
  if (!qword_2563ECBE0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C80A8, &type metadata for SetupModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECBE0);
  }
  return result;
}

unint64_t sub_23657F410()
{
  unint64_t result;

  result = qword_2563ECBE8;
  if (!qword_2563ECBE8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365C80D0, &type metadata for SetupModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563ECBE8);
  }
  return result;
}

uint64_t sub_23657F454()
{
  unint64_t v0;

  v0 = sub_2365B06E0();
  swift_bridgeObjectRelease();
  if (v0 >= 6)
    return 6;
  else
    return v0;
}

uint64_t sub_23657F49C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C616974696E69 && a2 == 0xE700000000000000;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7265766F63736964 && a2 == 0xE800000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x69746E6568747561 && a2 == 0xEC00000065746163 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E496E676973 && a2 == 0xE600000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x64656873696E6966 && a2 == 0xE800000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x64656C696166 && a2 == 0xE600000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7373696D736964 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_23657F788(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C61756E616DLL && a2 == 0xE600000000000000;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7463697274736572 && a2 == 0xEA00000000006465)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23657F87C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7463697274736572 && a2 == 0xEA00000000006465;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E65696C43656C62 && a2 == 0xE900000000000074 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6576726553656C62 && a2 == 0xE900000000000072 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000002365CDF70 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000002365CDF90 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002365CDFB0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_23657FAF4()
{
  return sub_2365747A8();
}

uint64_t sub_23657FB10()
{
  return sub_23657486C();
}

uint64_t sub_23657FB2C()
{
  return sub_236574930();
}

uint64_t sub_23657FB48()
{
  return sub_2365749F4();
}

void sub_23657FB64()
{
  uint64_t v0;

  sub_2365711D8(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(unsigned int *)(v0 + 48) | ((unint64_t)*(unsigned __int16 *)(v0 + 52) << 32));
}

uint64_t sub_23657FB8C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t sub_23657FBD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_236573588(a1, a2);
}

void sub_23657FBE4()
{
  sub_2365799D8();
}

void sub_23657FBF8()
{
  sub_236579AC8();
}

void sub_23657FC0C()
{
  sub_236579B70();
}

uint64_t sub_23657FC20@<X0>(void (*a1)(_BYTE *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE v11[16];

  MEMORY[0x24BDAC7A8](a1);
  v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_2365B0A40();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = &v11[-v8];
  a1(v5);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v7 + 32))(a2, v9, v6);
}

AppleIDSetup::SKEventType_optional __swiftcall SKEventType.init(rawValue:)(Swift::Int32 rawValue)
{
  char *v1;
  char v2;

  if (rawValue >= 0xC)
    v2 = 12;
  else
    v2 = rawValue;
  *v1 = v2;
  return (AppleIDSetup::SKEventType_optional)rawValue;
}

uint64_t SKEventType.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t sub_23657FD58()
{
  sub_2365B09E0();
  sub_2365B0A1C();
  return sub_2365B0A34();
}

uint64_t sub_23657FD9C()
{
  return sub_2365B0A1C();
}

uint64_t sub_23657FDC4()
{
  sub_2365B09E0();
  sub_2365B0A1C();
  return sub_2365B0A34();
}

AppleIDSetup::SKEventType_optional sub_23657FE04(Swift::Int32 *a1)
{
  return SKEventType.init(rawValue:)(*a1);
}

void sub_23657FE0C(_DWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

id SKEvent.init()()
{
  _BYTE *v0;
  objc_super v2;

  v0[OBJC_IVAR____TtC12AppleIDSetup7SKEvent_eventType] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC12AppleIDSetup7SKEvent_error] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SKEvent();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for SKEvent()
{
  return objc_opt_self();
}

id SKEvent.__deallocating_deinit()
{
  return sub_236549160(type metadata accessor for SKEvent);
}

id SKAuthenticationPresentEvent.init()()
{
  char *v0;
  char *v1;
  objc_class *v2;
  objc_super v4;

  *(_DWORD *)&v0[OBJC_IVAR____TtC12AppleIDSetup28SKAuthenticationPresentEvent_passwordType] = 0;
  v1 = &v0[OBJC_IVAR____TtC12AppleIDSetup28SKAuthenticationPresentEvent_password];
  v2 = (objc_class *)type metadata accessor for SKAuthenticationPresentEvent();
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  v4.receiver = v0;
  v4.super_class = v2;
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t type metadata accessor for SKAuthenticationPresentEvent()
{
  return objc_opt_self();
}

uint64_t sub_23657FFBC()
{
  return swift_bridgeObjectRelease();
}

id SKAuthenticationPresentEvent.__deallocating_deinit()
{
  return sub_236549160(type metadata accessor for SKAuthenticationPresentEvent);
}

id SKAuthenticationRequestEvent.init()()
{
  char *v0;
  objc_super v2;

  *(_DWORD *)&v0[OBJC_IVAR____TtC12AppleIDSetup28SKAuthenticationRequestEvent_passwordType] = 0;
  *(_DWORD *)&v0[OBJC_IVAR____TtC12AppleIDSetup28SKAuthenticationRequestEvent_pairingFlags] = 0;
  *(_DWORD *)&v0[OBJC_IVAR____TtC12AppleIDSetup28SKAuthenticationRequestEvent_throttleSeconds] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SKAuthenticationRequestEvent();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for SKAuthenticationRequestEvent()
{
  return objc_opt_self();
}

id SKAuthenticationRequestEvent.__deallocating_deinit()
{
  return sub_236549160(type metadata accessor for SKAuthenticationRequestEvent);
}

void SKAuthenticationResponseEvent.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_236580128()
{
  return swift_bridgeObjectRelease();
}

id SKAuthenticationResponseEvent.__deallocating_deinit()
{
  return sub_236549160(type metadata accessor for SKAuthenticationResponseEvent);
}

uint64_t type metadata accessor for SKAuthenticationResponseEvent()
{
  return objc_opt_self();
}

id SKEventBasicConfigUpdated.init()()
{
  char *v0;
  objc_super v2;

  *(_QWORD *)&v0[OBJC_IVAR____TtC12AppleIDSetup25SKEventBasicConfigUpdated_basicConfig] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SKEventBasicConfigUpdated();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for SKEventBasicConfigUpdated()
{
  return objc_opt_self();
}

uint64_t sub_236580220()
{
  return swift_bridgeObjectRelease();
}

id SKEventBasicConfigUpdated.__deallocating_deinit()
{
  return sub_236549160(type metadata accessor for SKEventBasicConfigUpdated);
}

id SKSetupBase.init()()
{
  _BYTE *v0;
  uint64_t v1;
  _BYTE *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  objc_super v8;

  *(_OWORD *)&v0[OBJC_IVAR____TtC12AppleIDSetup11SKSetupBase_authTagOverride] = xmmword_2365C9000;
  *(_DWORD *)&v0[OBJC_IVAR____TtC12AppleIDSetup11SKSetupBase_bluetoothUseCase] = 0;
  v0[OBJC_IVAR____TtC12AppleIDSetup11SKSetupBase_controlFlags] = 0;
  v1 = OBJC_IVAR____TtC12AppleIDSetup11SKSetupBase_dispatchQueue;
  sub_2364985A8();
  v2 = v0;
  *(_QWORD *)&v0[v1] = sub_2365B03E0();
  v3 = &v2[OBJC_IVAR____TtC12AppleIDSetup11SKSetupBase_eventHandler];
  *v3 = 0;
  v3[1] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC12AppleIDSetup11SKSetupBase_messageSessionTemplate] = 0;
  v4 = &v2[OBJC_IVAR____TtC12AppleIDSetup11SKSetupBase_password];
  *v4 = 0;
  v4[1] = 0;
  *(_DWORD *)&v2[OBJC_IVAR____TtC12AppleIDSetup11SKSetupBase_passwordType] = 0;
  v5 = &v2[OBJC_IVAR____TtC12AppleIDSetup11SKSetupBase_passwordTypeChangedHandler];
  *v5 = 0;
  v5[1] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC12AppleIDSetup11SKSetupBase_peerDevice] = 0;
  v2[OBJC_IVAR____TtC12AppleIDSetup11SKSetupBase_persistentPairing] = 0;
  *(_OWORD *)&v2[OBJC_IVAR____TtC12AppleIDSetup11SKSetupBase_pskData] = xmmword_2365C9000;
  v2[OBJC_IVAR____TtC12AppleIDSetup11SKSetupBase_reversePairing] = 0;
  v6 = &v2[OBJC_IVAR____TtC12AppleIDSetup11SKSetupBase_label];
  *v6 = 0;
  v6[1] = 0;

  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for SKSetupBase();
  return objc_msgSendSuper2(&v8, sel_init);
}

uint64_t type metadata accessor for SKSetupBase()
{
  return objc_opt_self();
}

uint64_t sub_2365803B4(uint64_t a1, uint64_t a2)
{
  return sub_23658045C(a1, a2, &OBJC_IVAR____TtC12AppleIDSetup11SKSetupBase_authTagOverride, (uint64_t (*)(uint64_t, uint64_t))sub_23646A42C);
}

uint64_t sub_2365803C8(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + OBJC_IVAR____TtC12AppleIDSetup11SKSetupBase_bluetoothUseCase) = result;
  return result;
}

void sub_2365803D8(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC12AppleIDSetup11SKSetupBase_dispatchQueue);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC12AppleIDSetup11SKSetupBase_dispatchQueue) = a1;

}

uint64_t sub_2365803EC(uint64_t a1, uint64_t a2)
{
  return sub_23658045C(a1, a2, &OBJC_IVAR____TtC12AppleIDSetup11SKSetupBase_eventHandler, (uint64_t (*)(uint64_t, uint64_t))sub_236450690);
}

void *sub_236580400()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC12AppleIDSetup11SKSetupBase_messageSessionTemplate);
  v2 = v1;
  return v1;
}

uint64_t sub_23658042C(uint64_t a1, uint64_t a2)
{
  return sub_2365804B8(a1, a2, &OBJC_IVAR____TtC12AppleIDSetup11SKSetupBase_password);
}

uint64_t sub_236580438(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + OBJC_IVAR____TtC12AppleIDSetup11SKSetupBase_passwordType) = result;
  return result;
}

uint64_t sub_236580448(uint64_t a1, uint64_t a2)
{
  return sub_23658045C(a1, a2, &OBJC_IVAR____TtC12AppleIDSetup11SKSetupBase_passwordTypeChangedHandler, (uint64_t (*)(uint64_t, uint64_t))sub_236582378);
}

uint64_t sub_23658045C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = (uint64_t *)(v4 + *a3);
  v6 = *v5;
  v7 = v5[1];
  *v5 = a1;
  v5[1] = a2;
  return a4(v6, v7);
}

void sub_236580478(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC12AppleIDSetup11SKSetupBase_peerDevice);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC12AppleIDSetup11SKSetupBase_peerDevice) = a1;

}

uint64_t sub_23658048C(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR____TtC12AppleIDSetup11SKSetupBase_persistentPairing) = result;
  return result;
}

uint64_t sub_23658049C(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR____TtC12AppleIDSetup11SKSetupBase_reversePairing) = result;
  return result;
}

uint64_t sub_2365804AC(uint64_t a1, uint64_t a2)
{
  return sub_2365804B8(a1, a2, &OBJC_IVAR____TtC12AppleIDSetup11SKSetupBase_label);
}

uint64_t sub_2365804B8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)(v3 + *a3);
  *v4 = a1;
  v4[1] = a2;
  return swift_bridgeObjectRelease();
}

id SKSetupBase.__deallocating_deinit()
{
  return sub_236549160(type metadata accessor for SKSetupBase);
}

id SKSetupAppleIDSignInServer.init()()
{
  return sub_23658060C(type metadata accessor for SKSetupAppleIDSignInServer);
}

uint64_t type metadata accessor for SKSetupAppleIDSignInServer()
{
  return objc_opt_self();
}

id SKSetupAppleIDSignInServer.__deallocating_deinit()
{
  return sub_236549160(type metadata accessor for SKSetupAppleIDSignInServer);
}

id SKSetupAppleIDSignInClient.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id SKSetupAppleIDSignInClient.init()()
{
  return sub_23658060C(type metadata accessor for SKSetupAppleIDSignInClient);
}

id sub_23658060C(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t type metadata accessor for SKSetupAppleIDSignInClient()
{
  return objc_opt_self();
}

id sub_236580668(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  objc_super v4;

  v4.receiver = a1;
  v4.super_class = (Class)a3();
  return objc_msgSendSuper2(&v4, sel_init);
}

id SKSetupAppleIDSignInClient.__deallocating_deinit()
{
  return sub_236549160(type metadata accessor for SKSetupAppleIDSignInClient);
}

id SKDevice.init()()
{
  char *v0;
  char *v1;
  objc_class *v2;
  objc_super v4;

  *(_WORD *)&v0[OBJC_IVAR____TtC12AppleIDSetup8SKDevice_blePSM] = 0;
  v1 = &v0[OBJC_IVAR____TtC12AppleIDSetup8SKDevice_identifier];
  v2 = (objc_class *)type metadata accessor for SKDevice();
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  v4.receiver = v0;
  v4.super_class = v2;
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t type metadata accessor for SKDevice()
{
  return objc_opt_self();
}

id SKDevice.__deallocating_deinit()
{
  return sub_236549160(type metadata accessor for SKDevice);
}

unint64_t ProximityAppleIDSetupBaseIdentifier.getter()
{
  return 0xD000000000000040;
}

id SetupBase.base.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 112);
}

id SetupBase.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 120);
}

void *SetupBase.peerDevice.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 128);
  v2 = v1;
  return v1;
}

uint64_t SetupBase.persistentPairing.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 136);
}

uint64_t SetupBase.reversePairing.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 137);
}

uint64_t SetupBase.fixedPin.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 144);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SetupBase.targetAuthTag.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 160);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SetupBase.pinType.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 176);
}

uint64_t SetupBase.stateHandler.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 184);
  swift_retain();
  return v1;
}

uint64_t sub_236580888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(_QWORD *, uint64_t, char *);
  char *v15;
  uint64_t v17;

  v6 = *v4;
  v7 = type metadata accessor for MessageSessionTransport(255, *(_QWORD *)(*v4 + 88), *(_QWORD *)(*v4 + 96), a4);
  v10 = type metadata accessor for BluetoothBaseState(0, v7, v8, v9);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v17 - v12;
  v14 = (void (*)(_QWORD *, uint64_t, char *))v4[23];
  v15 = (char *)v4 + *(_QWORD *)(v6 + 184);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v15, v10);
  v14(v4, a1, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_236580964@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 184);
  swift_beginAccess();
  v6 = type metadata accessor for MessageSessionTransport(255, *(_QWORD *)(v3 + 88), *(_QWORD *)(v3 + 96), v5);
  v9 = type metadata accessor for BluetoothBaseState(0, v6, v7, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, v4, v9);
}

uint64_t SetupBase.__allocating_init(base:queue:peerDevice:persistentPairing:reversePairing:fixedPin:targetAuthTag:pinType:stateHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17;

  v17 = swift_allocObject();
  SetupBase.init(base:queue:peerDevice:persistentPairing:reversePairing:fixedPin:targetAuthTag:pinType:stateHandler:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return v17;
}

uint64_t *SetupBase.init(base:queue:peerDevice:persistentPairing:reversePairing:fixedPin:targetAuthTag:pinType:stateHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  uint64_t *v12;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v18 = *v12;
  swift_defaultActor_initialize();
  v20 = type metadata accessor for MessageSessionTransport(255, *(_QWORD *)(v18 + 88), *(_QWORD *)(v18 + 96), v19);
  type metadata accessor for BluetoothBaseState(0, v20, v21, v22);
  swift_storeEnumTagMultiPayload();
  v12[14] = a1;
  v12[15] = a2;
  v12[16] = a3;
  *((_BYTE *)v12 + 136) = a4;
  *((_BYTE *)v12 + 137) = a5;
  v12[18] = a6;
  v12[19] = a7;
  v12[20] = a8;
  v12[21] = a9;
  *((_DWORD *)v12 + 44) = a10;
  v12[23] = a11;
  v12[24] = a12;
  return v12;
}

id *SetupBase.deinit()
{
  id *v0;
  id *v1;
  _QWORD *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0;
  v2 = *v0;
  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)v0[14]) + 0x238))();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v3 = (char *)v0 + *((_QWORD *)*v0 + 23);
  v5 = type metadata accessor for MessageSessionTransport(255, v2[11], v2[12], v4);
  v8 = type metadata accessor for BluetoothBaseState(0, v5, v6, v7);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v3, v8);
  swift_defaultActor_destroy();
  return v1;
}

uint64_t SetupBase.__deallocating_deinit()
{
  SetupBase.deinit();
  return swift_defaultActor_deallocate();
}

uint64_t sub_236580C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int EnumCaseMultiPayload;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  void (*v28)(uint64_t, uint64_t);
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  void (*v36)(void (*)(char *, uint64_t, uint64_t, uint64_t), uint64_t *);
  void (*v37)(void (*)(), uint64_t *);
  void *v38;
  void (*v39)(void *);
  id v40;
  uint64_t v41;
  uint64_t v42;

  v5 = v4;
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 88);
  v8 = *(_QWORD *)(*v4 + 96);
  v9 = type metadata accessor for MessageSessionTransport(255, v7, v8, a4);
  v12 = type metadata accessor for BluetoothBaseState(0, v9, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v42 - v17;
  sub_236580964((uint64_t)&v42 - v17);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v20 = *(void (**)(char *, uint64_t))(v13 + 8);
  v20(v18, v12);
  if (EnumCaseMultiPayload == 4)
  {
    swift_storeEnumTagMultiPayload();
    sub_23658187C((uint64_t)v16, v21, v22, v23);
    v20(v16, v12);
    v24 = (_QWORD *)v5[14];
    v25 = v5[18];
    v26 = v5[19];
    v27 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v28 = *(void (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v24) + 0x160);
    swift_bridgeObjectRetain();
    v28(v25, v26);
    v29 = v5[21];
    if (v29)
    {
      v30 = v5[20];
      swift_bridgeObjectRetain();
      v31 = sub_2364B3B0C(v30, v29);
    }
    else
    {
      v31 = 0;
      v32 = 0xF000000000000000;
    }
    (*(void (**)(uint64_t, unint64_t))((*v27 & *v24) + 0xD0))(v31, v32);
    (*(void (**)(_QWORD))((*v27 & *v24) + 0x178))(*((unsigned int *)v5 + 44));
    v36 = *(void (**)(void (*)(char *, uint64_t, uint64_t, uint64_t), uint64_t *))((*v27 & *v24) + 0x130);
    swift_retain();
    v36(sub_236581970, v5);
    v37 = *(void (**)(void (*)(), uint64_t *))((*v27 & *v24) + 0x190);
    swift_retain();
    v37(sub_236581974, v5);
    (*(void (**)(uint64_t))((*v27 & *v24) + 0xE8))(393219);
    (*(void (**)(id))((*v27 & *v24) + 0x118))((id)v5[15]);
    v38 = (void *)v5[16];
    v39 = *(void (**)(void *))((*v27 & *v24) + 0x1A8);
    v40 = v38;
    v39(v38);
    (*(void (**)(_QWORD))((*v27 & *v24) + 0x1C0))(*((unsigned __int8 *)v5 + 136));
    (*(void (**)(_QWORD))((*v27 & *v24) + 0x1F0))(*((unsigned __int8 *)v5 + 137));
    v41 = (*(uint64_t (**)(uint64_t, unint64_t))((*v27 & *v24) + 0x220))(0x7574655320534150, 0xED00006573614270);
    return (*(uint64_t (**)(uint64_t))((*v27 & *v24) + 0x230))(v41);
  }
  else
  {
    v33 = type metadata accessor for SetupBase.Failure(0, *(_QWORD *)(v6 + 80), v7, v8);
    MEMORY[0x23B7F5164](&unk_2365C9470, v33);
    swift_allocError();
    *v34 = 1;
    return swift_willThrow();
  }
}

uint64_t sub_236580F60()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 112)) + 0x238))();
}

uint64_t type metadata accessor for SetupBase.Failure(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SetupBase.Failure);
}

void sub_236580FA4(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37[2];

  v6 = type metadata accessor for MessageSessionTransport(255, *(_QWORD *)(*(_QWORD *)v4 + 88), *(_QWORD *)(*(_QWORD *)v4 + 96), a4);
  v9 = type metadata accessor for BluetoothBaseState(0, v6, v7, v8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)v37 - v15;
  switch(a1[OBJC_IVAR____TtC12AppleIDSetup7SKEvent_eventType])
  {
    case 1:
    case 3:
    case 4:
    case 5:
      goto LABEL_10;
    case 2:
      v17 = *(void **)&a1[OBJC_IVAR____TtC12AppleIDSetup7SKEvent_error];
      if (v17)
      {
        v18 = v17;
        swift_willThrow();
      }
      *(_QWORD *)v13 = v17;
      v13[8] = v17 != 0;
      swift_storeEnumTagMultiPayload();
      sub_23658187C((uint64_t)v13, v19, v20, v21);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
      return;
    case 7:
      type metadata accessor for SKAuthenticationRequestEvent();
      v22 = swift_dynamicCastClass();
      if (!v22)
        return;
      v23 = v22;
      v37[0] = a1;
      sub_2365814F0(v23, v24, v25, v26);
      break;
    case 8:
      type metadata accessor for SKAuthenticationPresentEvent();
      v27 = swift_dynamicCastClass();
      if (!v27)
        return;
      v28 = v27;
      v37[0] = a1;
      sub_236581408(v28, v29, v30, v31);
      break;
    case 10:
      MEMORY[0x24BDAC7A8](v14);
      v37[-2] = v4;
      v37[-1] = a1;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542A8310);
      sub_23657FC20((void (*)(_BYTE *))sub_2365821B8, (uint64_t)v16);
LABEL_10:
      swift_storeEnumTagMultiPayload();
      sub_23658187C((uint64_t)v16, v32, v33, v34);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
      return;
    case 11:
      type metadata accessor for SKEventBasicConfigUpdated();
      v35 = swift_dynamicCastClass();
      if (!v35)
        return;
      v36 = v35;
      v37[0] = a1;
      sub_236581DC0(v36);
      break;
    default:
      return;
  }

}

uint64_t sub_236581254@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  _BYTE *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v25 = a3;
  v23 = a5;
  v24 = a2;
  v6 = *a1;
  v7 = *(_QWORD *)(*a1 + 88);
  v8 = *(_QWORD *)(*a1 + 96);
  v9 = type metadata accessor for MessageSessionTransport(255, v7, v8, a4);
  v10 = sub_2365B047C();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v23 - v13;
  v15 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)a1[14]) + 0x140))(v12);
  if (v15)
  {
    MessageSessionTransport.init(templateSession:identifier:)(v15, 0xD000000000000040, 0x80000002365CC2F0, v7, v8, (uint64_t)v14);
    v16 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v9) != 1)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(v23, v14, v9);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  v17 = *(void **)(v24 + OBJC_IVAR____TtC12AppleIDSetup7SKEvent_error);
  if (v17)
  {
    v18 = *(_QWORD *)(v24 + OBJC_IVAR____TtC12AppleIDSetup7SKEvent_error);
  }
  else
  {
    v20 = type metadata accessor for SetupBase.Failure(0, *(_QWORD *)(v6 + 80), v7, v8);
    MEMORY[0x23B7F5164](&unk_2365C9470, v20);
    v18 = swift_allocError();
    v17 = 0;
    *v21 = 0;
  }
  v22 = v17;
  result = swift_willThrow();
  *v25 = v18;
  return result;
}

uint64_t sub_236581408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for MessageSessionTransport(255, *(_QWORD *)(*(_QWORD *)v4 + 88), *(_QWORD *)(*(_QWORD *)v4 + 96), a4);
  v9 = type metadata accessor for BluetoothBaseState(0, v6, v7, v8);
  v10 = *(_QWORD *)(v9 - 8);
  result = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v19 - v12;
  v14 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12AppleIDSetup28SKAuthenticationPresentEvent_password + 8);
  if (v14)
  {
    LODWORD(v15) = *(_DWORD *)(a1 + OBJC_IVAR____TtC12AppleIDSetup28SKAuthenticationPresentEvent_passwordType);
    if ((_DWORD)v15)
      v15 = v15;
    else
      v15 = v4[44];
    *(_QWORD *)v13 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12AppleIDSetup28SKAuthenticationPresentEvent_password);
    *((_QWORD *)v13 + 1) = v14;
    *((_QWORD *)v13 + 3) = 0;
    *((_QWORD *)v13 + 4) = 0;
    *((_QWORD *)v13 + 2) = v15;
    v13[40] = 0;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    sub_23658187C((uint64_t)v13, v16, v17, v18);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  return result;
}

uint64_t sub_2365814F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;

  v6 = *(_QWORD *)v4;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 88);
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 96);
  v9 = type metadata accessor for MessageSessionTransport(255, v7, v8, a4);
  v12 = type metadata accessor for BluetoothBaseState(0, v9, v10, v11);
  v29 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v28 - v13;
  v15 = *(_DWORD *)(a1 + OBJC_IVAR____TtC12AppleIDSetup28SKAuthenticationRequestEvent_passwordType);
  v16 = v4[44];
  v17 = *(int *)(a1 + OBJC_IVAR____TtC12AppleIDSetup28SKAuthenticationRequestEvent_throttleSeconds);
  v28 = 1000000000000000000 * v17;
  v18 = (__PAIR128__((uint64_t)(int)v17 >> 31, v17) * 0xDE0B6B3A7640000) >> 64;
  if (v15)
    v19 = v15;
  else
    v19 = v16;
  v20 = *(unsigned int *)(a1 + OBJC_IVAR____TtC12AppleIDSetup28SKAuthenticationRequestEvent_pairingFlags);
  v21 = swift_allocObject();
  swift_weakInit();
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = *(_QWORD *)(v6 + 80);
  v22[3] = v7;
  v22[4] = v8;
  v22[5] = v21;
  v23 = v28;
  *(_QWORD *)v14 = v19 | (v20 << 32);
  *((_QWORD *)v14 + 1) = v23;
  *((_QWORD *)v14 + 2) = v18;
  *((_QWORD *)v14 + 3) = sub_236581DB4;
  *((_QWORD *)v14 + 4) = v22;
  v14[40] = 1;
  swift_storeEnumTagMultiPayload();
  sub_23658187C((uint64_t)v14, v24, v25, v26);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v14, v12);
}

void sub_23658166C(uint64_t a1, uint64_t a2)
{
  uint64_t Strong;
  uint64_t v5;
  objc_class *v6;
  char *v7;
  char *v8;
  id v9;
  objc_super v10;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v5 = Strong;
    v6 = (objc_class *)type metadata accessor for SKAuthenticationResponseEvent();
    v7 = (char *)objc_allocWithZone(v6);
    v8 = &v7[OBJC_IVAR____TtC12AppleIDSetup29SKAuthenticationResponseEvent_password];
    *(_QWORD *)v8 = a1;
    *((_QWORD *)v8 + 1) = a2;
    v10.receiver = v7;
    v10.super_class = v6;
    swift_bridgeObjectRetain();
    v9 = objc_msgSendSuper2(&v10, sel_init);
    (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v5 + 112)) + 0x240))();
    swift_release();

  }
}

uint64_t sub_236581730()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 112)) + 0x240))();
}

uint64_t SetupBase.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_236581774()
{
  return SetupBase.unownedExecutor.getter();
}

uint64_t sub_23658178C()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *v0;
  return swift_task_switch();
}

uint64_t sub_2365817A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_236580C4C(a1, a2, a3, a4);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_2365817F0()
{
  return sub_236580F60();
}

char *SKDevice.__allocating_init(blePsm:identifier:)(__int16 a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  char *v7;
  char *v8;

  v7 = (char *)objc_msgSend(objc_allocWithZone(v3), sel_init);
  *(_WORD *)&v7[OBJC_IVAR____TtC12AppleIDSetup8SKDevice_blePSM] = a1;
  v8 = &v7[OBJC_IVAR____TtC12AppleIDSetup8SKDevice_identifier];
  *(_QWORD *)v8 = a2;
  *((_QWORD *)v8 + 1) = a3;
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_23658187C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[24];

  v6 = *v4;
  v7 = type metadata accessor for MessageSessionTransport(255, *(_QWORD *)(*v4 + 88), *(_QWORD *)(*v4 + 96), a4);
  v10 = type metadata accessor for BluetoothBaseState(0, v7, v8, v9);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = &v19[-v12];
  v14 = (uint64_t)v4 + *(_QWORD *)(v6 + 184);
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 24))(v14, a1, v10);
  swift_endAccess();
  sub_236580888((uint64_t)v13, v15, v16, v17);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
}

void sub_236581974()
{
  sub_2365821D4();
}

unint64_t sub_236581988()
{
  unint64_t result;

  result = qword_2563ECCB0[0];
  if (!qword_2563ECCB0[0])
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for SKEventType, &type metadata for SKEventType);
    atomic_store(result, qword_2563ECCB0);
  }
  return result;
}

uint64_t sub_2365819CC@<X0>(uint64_t a1@<X8>)
{
  return sub_236580964(a1);
}

uint64_t sub_2365819EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23658187C(a1, a2, a3, a4);
}

uint64_t sub_236581A0C()
{
  return 24;
}

__n128 sub_236581A18(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for SKSetupType()
{
  return &type metadata for SKSetupType;
}

uint64_t storeEnumTagSinglePayload for SKEventType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_236581A88 + 4 * byte_2365C9020[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_236581ABC + 4 * byte_2365C901B[v4]))();
}

uint64_t sub_236581ABC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_236581AC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x236581ACCLL);
  return result;
}

uint64_t sub_236581AD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x236581AE0);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_236581AE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236581AEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SKEventType()
{
  return &type metadata for SKEventType;
}

uint64_t method lookup function for SKEvent()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for SKAuthenticationPresentEvent()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for SKAuthenticationRequestEvent()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for SKAuthenticationResponseEvent()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for SKEventBasicConfigUpdated()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for SKSetupBase()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for SKDevice()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_236581B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;

  v4 = type metadata accessor for MessageSessionTransport(255, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), a4);
  result = type metadata accessor for BluetoothBaseState(319, v4, v5, v6);
  if (v8 <= 0x3F)
    return swift_initClassMetadata2();
  return result;
}

uint64_t type metadata accessor for SetupBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SetupBase);
}

uint64_t method lookup function for SetupBase()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SetupBase.state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of SetupBase.__allocating_init(base:queue:peerDevice:persistentPairing:reversePairing:fixedPin:targetAuthTag:pinType:stateHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of SetupBase.activate()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of SetupBase.invalidate()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t sub_236581CA0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_236581CEC + 4 * byte_2365C902A[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_236581D20 + 4 * byte_2365C9025[v4]))();
}

uint64_t sub_236581D20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_236581D28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x236581D30);
  return result;
}

uint64_t sub_236581D3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x236581D44);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_236581D48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236581D50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_236581D5C()
{
  JUMPOUT(0x23B7F5164);
}

uint64_t sub_236581D6C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_236581D90()
{
  swift_release();
  return swift_deallocObject();
}

void sub_236581DB4(uint64_t a1, uint64_t a2)
{
  sub_23658166C(a1, a2);
}

void sub_236581DC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;

  v2 = OBJC_IVAR____TtC12AppleIDSetup25SKEventBasicConfigUpdated_basicConfig;
  v3 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12AppleIDSetup25SKEventBasicConfigUpdated_basicConfig);
  if (v3)
  {
    *(_QWORD *)&v27 = 0x676E616C5FLL;
    *((_QWORD *)&v27 + 1) = 0xE500000000000000;
    swift_bridgeObjectRetain();
    sub_2365B0548();
    if (*(_QWORD *)(v3 + 16) && (v4 = sub_2364685F8((uint64_t)&v25), (v5 & 1) != 0))
    {
      sub_23646A9F4(*(_QWORD *)(v3 + 56) + 32 * v4, (uint64_t)&v27);
    }
    else
    {
      v27 = 0u;
      v28 = 0u;
    }
    sub_23646A464((uint64_t)&v25);
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v28 + 1))
    {
      v6 = swift_dynamicCast();
      if (v6)
        v7 = v25;
      else
        v7 = 0;
      if (v6)
        v8 = v26;
      else
        v8 = 0;
      v9 = *(_QWORD *)(a1 + v2);
      if (!v9)
        goto LABEL_14;
      goto LABEL_17;
    }
  }
  else
  {
    v27 = 0u;
    v28 = 0u;
  }
  sub_2364D283C((uint64_t)&v27);
  v7 = 0;
  v8 = 0;
  v9 = *(_QWORD *)(a1 + v2);
  if (!v9)
  {
LABEL_14:
    v27 = 0u;
    v28 = 0u;
LABEL_28:
    sub_2364D283C((uint64_t)&v27);
    v13 = 0;
    v14 = 0;
    goto LABEL_29;
  }
LABEL_17:
  *(_QWORD *)&v27 = 0x656C61636F6C5FLL;
  *((_QWORD *)&v27 + 1) = 0xE700000000000000;
  swift_bridgeObjectRetain();
  sub_2365B0548();
  if (*(_QWORD *)(v9 + 16) && (v10 = sub_2364685F8((uint64_t)&v25), (v11 & 1) != 0))
  {
    sub_23646A9F4(*(_QWORD *)(v9 + 56) + 32 * v10, (uint64_t)&v27);
  }
  else
  {
    v27 = 0u;
    v28 = 0u;
  }
  sub_23646A464((uint64_t)&v25);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v28 + 1))
    goto LABEL_28;
  v12 = swift_dynamicCast();
  if (v12)
    v13 = v25;
  else
    v13 = 0;
  if (v12)
    v14 = v26;
  else
    v14 = 0;
LABEL_29:
  if (qword_2542A79D8 != -1)
    swift_once();
  v15 = sub_2365AFC00();
  __swift_project_value_buffer(v15, (uint64_t)qword_2542A79C0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = sub_2365AFBE8();
  v17 = sub_2365B0380();
  if (os_log_type_enabled(v16, v17))
  {
    v24 = v13;
    v18 = swift_slowAlloc();
    v19 = swift_slowAlloc();
    *(_QWORD *)&v27 = v19;
    *(_DWORD *)v18 = 136315394;
    v25 = v7;
    v26 = v8;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E4610);
    v20 = sub_2365B0080();
    v25 = sub_236468D88(v20, v21, (uint64_t *)&v27);
    sub_2365B04A0();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    v25 = v24;
    v26 = v14;
    swift_bridgeObjectRetain();
    v22 = sub_2365B0080();
    v25 = sub_236468D88(v22, v23, (uint64_t *)&v27);
    sub_2365B04A0();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23644B000, v16, v17, "Received basic config language code (%s) and locale (%s)", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v19, -1, -1);
    MEMORY[0x23B7F5254](v18, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_2365821B8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_236581254(*(uint64_t **)(v3 + 16), *(_QWORD *)(v3 + 24), a1, a2, a3);
}

void sub_2365821D4()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  NSObject *oslog;
  uint64_t v7;

  if (qword_2563E42D0 != -1)
    swift_once();
  v0 = sub_2365AFC00();
  __swift_project_value_buffer(v0, (uint64_t)qword_2563E60D8);
  oslog = sub_2365AFBE8();
  v1 = sub_2365B0380();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    v3 = swift_slowAlloc();
    v7 = v3;
    *(_DWORD *)v2 = 136315138;
    type metadata accessor for CUPasswordType(0);
    v4 = sub_2365B0080();
    sub_236468D88(v4, v5, &v7);
    sub_2365B04A0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23644B000, oslog, v1, "Password type changed to %s", v2, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v3, -1, -1);
    MEMORY[0x23B7F5254](v2, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_23658239C()
{
  uint64_t v0;

  v0 = sub_2365AFC00();
  __swift_allocate_value_buffer(v0, qword_2563ECF60);
  __swift_project_value_buffer(v0, (uint64_t)qword_2563ECF60);
  return sub_2365AFBF4();
}

uint64_t static AISLogger.routing.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_2563E4348 != -1)
    swift_once();
  v2 = sub_2365AFC00();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_2563ECF60);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_236582480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_2365AFC00();
  __swift_allocate_value_buffer(v0, qword_2563ECF78);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_2563ECF78);
  if (qword_2563E4348 != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)qword_2563ECF60);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

BOOL static CommandRouter.Role.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t CommandRouter.Role.hash(into:)()
{
  return sub_2365B09F8();
}

uint64_t CommandRouter.Role.hashValue.getter()
{
  sub_2365B09E0();
  sub_2365B09F8();
  return sub_2365B0A34();
}

void CommandRouter.role.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 112);
}

uint64_t CommandRouter.selfAccountId.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v1[15];
  v3 = v1[16];
  v4 = v1[17];
  v5 = v1[18];
  v6 = v1[19];
  v7 = v1[20];
  v8 = v1[21];
  v9 = v1[22];
  v10 = v1[23];
  v11 = v1[24];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  return sub_23644F440(v2, v3);
}

uint64_t CommandRouter.accountIDsByService.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CommandRouter.v1CommandHandler.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 208);
  swift_retain();
  return v1;
}

uint64_t sub_236582618@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *a1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 224);
  v5 = *(_QWORD *)(v3 + 232);
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = sub_236530D9C;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return sub_23645063C(v4);
}

uint64_t sub_2365826A0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_236530D9C;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *a2;
  swift_beginAccess();
  v8 = *(_QWORD *)(v7 + 224);
  *(_QWORD *)(v7 + 224) = v6;
  *(_QWORD *)(v7 + 232) = v5;
  sub_23645063C(v3);
  return sub_236450690(v8);
}

uint64_t sub_23658274C()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 224);
  sub_23645063C(v1);
  return v1;
}

uint64_t sub_236582798(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 224);
  *(_QWORD *)(v2 + 224) = a1;
  *(_QWORD *)(v2 + 232) = a2;
  return sub_236450690(v5);
}

uint64_t (*sub_2365827E8())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t (*sub_236582824())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_236582868@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v3 = v1 + OBJC_IVAR____TtC12AppleIDSetup13CommandRouter__activeTransport;
  swift_beginAccess();
  result = sub_23646C4B0(v3, (uint64_t)&v13, &qword_2563ECF98);
  if (*((_QWORD *)&v14 + 1))
  {
    v5 = v14;
    *(_OWORD *)a1 = v13;
    *(_OWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 32) = v15;
  }
  else
  {
    sub_236465998((uint64_t)&v13, &qword_2563ECF98);
    if (qword_2563E4350 != -1)
      swift_once();
    v6 = sub_2365AFC00();
    __swift_project_value_buffer(v6, (uint64_t)qword_2563ECF78);
    v7 = sub_2365AFBE8();
    v8 = sub_2365B038C();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_23644B000, v7, v8, "Throwing error due to missing active transport", v9, 2u);
      MEMORY[0x23B7F5254](v9, -1, -1);
    }

    type metadata accessor for CommandRouter.Failure(0);
    sub_23644F0B8(&qword_2563ECFA0, type metadata accessor for CommandRouter.Failure, (uint64_t)&protocol conformance descriptor for CommandRouter.Failure);
    swift_allocError();
    v11 = v10;
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E84E0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 4, v12);
    return swift_willThrow();
  }
  return result;
}

uint64_t type metadata accessor for CommandRouter.Failure(uint64_t a1)
{
  return sub_2364905D8(a1, (uint64_t *)&unk_2563ED3B0);
}

uint64_t CommandRouter.__allocating_init(for:selfAccountId:accountIDsByService:signInPreflightHelper:v1CommandHandler:handshakeHandler:)(char *a1, __int128 *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;

  v16 = swift_allocObject();
  CommandRouter.init(for:selfAccountId:accountIDsByService:signInPreflightHelper:v1CommandHandler:handshakeHandler:)(a1, a2, a3, a4, a5, a6, a7, a8);
  return v16;
}

uint64_t CommandRouter.init(for:selfAccountId:accountIDsByService:signInPreflightHelper:v1CommandHandler:handshakeHandler:)(char *a1, __int128 *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v13 = *a1;
  v29 = a2[1];
  v30 = *a2;
  v27 = a2[3];
  v28 = a2[2];
  v15 = *((_QWORD *)a2 + 8);
  v14 = *((_QWORD *)a2 + 9);
  v31 = *a4;
  swift_defaultActor_initialize();
  *(_BYTE *)(v8 + 304) = 0;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_OWORD *)(v8 + 240) = 0u;
  *(_OWORD *)(v8 + 256) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  v16 = v8 + OBJC_IVAR____TtC12AppleIDSetup13CommandRouter_handshakeContinuation;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563ECFB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  *(_QWORD *)(v8 + OBJC_IVAR____TtC12AppleIDSetup13CommandRouter_keepAliveTask) = 0;
  v18 = v8 + OBJC_IVAR____TtC12AppleIDSetup13CommandRouter_keepAliveInterval;
  *(_QWORD *)v18 = 0;
  *(_QWORD *)(v18 + 8) = 0;
  *(_BYTE *)(v18 + 16) = 1;
  v19 = v8 + OBJC_IVAR____TtC12AppleIDSetup13CommandRouter_enforceKeepAlive;
  *(_QWORD *)v19 = 0;
  *(_QWORD *)(v19 + 8) = 0;
  *(_BYTE *)(v19 + 16) = 1;
  v20 = v8 + OBJC_IVAR____TtC12AppleIDSetup13CommandRouter__activeTransport;
  *(_OWORD *)v20 = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  *(_QWORD *)(v20 + 32) = 0;
  *(_QWORD *)(v8 + OBJC_IVAR____TtC12AppleIDSetup13CommandRouter_signInPreflightHelper) = 0;
  *(_BYTE *)(v8 + 112) = v13;
  *(_OWORD *)(v8 + 120) = v30;
  *(_OWORD *)(v8 + 136) = v29;
  *(_OWORD *)(v8 + 152) = v28;
  *(_OWORD *)(v8 + 168) = v27;
  *(_QWORD *)(v8 + 184) = v15;
  *(_QWORD *)(v8 + 192) = v14;
  *(_QWORD *)(v8 + 200) = a3;
  *(_QWORD *)(v8 + 208) = a5;
  *(_QWORD *)(v8 + 216) = a6;
  if (a7)
  {
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = a7;
    *(_QWORD *)(v21 + 24) = a8;
    v22 = &unk_2563ED000;
  }
  else
  {
    v21 = 0;
    v22 = &unk_2563ECFD8;
  }
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = v22;
  *(_QWORD *)(v23 + 24) = v21;
  v24 = (_QWORD *)(v8 + OBJC_IVAR____TtC12AppleIDSetup13CommandRouter_handshakeHandler);
  *v24 = &unk_2563ECFE8;
  v24[1] = v23;
  *(_QWORD *)(v8 + OBJC_IVAR____TtC12AppleIDSetup13CommandRouter_signInPreflightHelper) = v31;
  swift_release();
  return v8;
}

uint64_t sub_236582CA4(uint64_t a1, uint64_t *a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v7 = *a2;
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)a4 + *a4);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_23647E274;
  return v10(a1, v7, a3);
}

uint64_t sub_236582D20(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v5 = *a2;
  v6 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(v3 + 144) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(v3 + 160) = v6;
  *(_QWORD *)(v3 + 176) = *(_QWORD *)(a3 + 160);
  v7 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v3 + 80) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v3 + 96) = v7;
  v8 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(v3 + 112) = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(v3 + 128) = v8;
  v9 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)a3;
  *(_OWORD *)(v3 + 32) = v9;
  v10 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v3 + 64) = v10;
  v11 = swift_task_alloc();
  *(_QWORD *)(v3 + 184) = v11;
  *(_QWORD *)v11 = v3;
  *(_QWORD *)(v11 + 8) = sub_236582DF0;
  *(_QWORD *)(v11 + 840) = v5;
  *(_QWORD *)(v11 + 832) = a1;
  v12 = *(_OWORD *)(v3 + 128);
  v13 = *(_OWORD *)(v3 + 144);
  v14 = *(_OWORD *)(v3 + 160);
  *(_QWORD *)(v11 + 176) = *(_QWORD *)(v3 + 176);
  *(_OWORD *)(v11 + 144) = v13;
  *(_OWORD *)(v11 + 160) = v14;
  *(_OWORD *)(v11 + 128) = v12;
  v15 = *(_OWORD *)(v3 + 64);
  v16 = *(_OWORD *)(v3 + 80);
  v17 = *(_OWORD *)(v3 + 112);
  *(_OWORD *)(v11 + 96) = *(_OWORD *)(v3 + 96);
  *(_OWORD *)(v11 + 112) = v17;
  *(_OWORD *)(v11 + 64) = v15;
  *(_OWORD *)(v11 + 80) = v16;
  v18 = *(_OWORD *)(v3 + 16);
  v19 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v11 + 32) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v11 + 48) = v19;
  *(_OWORD *)(v11 + 16) = v18;
  return swift_task_switch();
}

uint64_t sub_236582DF0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 192) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_236582E5C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236582E68(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v4 + 16) = a2;
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)a4 + *a4);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v7;
  *v7 = v4;
  v7[1] = sub_236475CB8;
  return v9(a1, v4 + 16, a3);
}

uint64_t sub_236582EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 224);
  *(_QWORD *)(v2 + 224) = a1;
  *(_QWORD *)(v2 + 232) = a2;
  sub_23645063C(a1);
  return sub_236450690(v5);
}

uint64_t sub_236582F54(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v5 = v4 + OBJC_IVAR____TtC12AppleIDSetup13CommandRouter_keepAliveInterval;
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  *(_BYTE *)(v5 + 16) = 0;
  v6 = a4 & 1;
  if ((a4 & 1) != 0)
    v7 = 0;
  else
    v7 = a3;
  v8 = v4 + OBJC_IVAR____TtC12AppleIDSetup13CommandRouter_enforceKeepAlive;
  result = swift_beginAccess();
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = v7;
  *(_BYTE *)(v8 + 16) = v6;
  return result;
}

uint64_t sub_236582FC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(v1 + 248);
  if (v2)
  {
    v4 = *(_QWORD *)(v1 + 288);
    v3 = *(_QWORD *)(v1 + 296);
    v6 = *(_QWORD *)(v1 + 272);
    v5 = *(_QWORD *)(v1 + 280);
    v7 = *(_QWORD *)(v1 + 256);
    v8 = *(_QWORD *)(v1 + 264);
    v9 = *(_BYTE *)(v1 + 304) & 1;
    *(_QWORD *)a1 = *(_QWORD *)(v1 + 240);
    *(_QWORD *)(a1 + 8) = v2;
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v5;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = v3;
    *(_BYTE *)(a1 + 64) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return sub_23648DC24(v6, v5);
  }
  else
  {
    if (qword_2563E4350 != -1)
      swift_once();
    v11 = sub_2365AFC00();
    __swift_project_value_buffer(v11, (uint64_t)qword_2563ECF78);
    v12 = sub_2365AFBE8();
    v13 = sub_2365B0398();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_23644B000, v12, v13, "Failed to unwrap handshake device info", v14, 2u);
      MEMORY[0x23B7F5254](v14, -1, -1);
    }

    type metadata accessor for CommandRouter.Failure(0);
    sub_23644F0B8(&qword_2563ECFA0, type metadata accessor for CommandRouter.Failure, (uint64_t)&protocol conformance descriptor for CommandRouter.Failure);
    swift_allocError();
    v16 = v15;
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E84E0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 3, 4, v17);
    return swift_willThrow();
  }
}

uint64_t sub_236583168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[12] = a4;
  v5[13] = v4;
  v5[10] = a1;
  v5[11] = a3;
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_2365831CC()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t (*)(), uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  _QWORD *v16;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t *v25;

  if (qword_2563E4350 != -1)
    swift_once();
  v25 = (uint64_t *)(v0 + 16);
  v1 = sub_2365AFC00();
  __swift_project_value_buffer(v1, (uint64_t)qword_2563ECF78);
  v2 = sub_2365AFBE8();
  v3 = sub_2365B038C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_23644B000, v2, v3, "Registering new transport", v4, 2u);
    MEMORY[0x23B7F5254](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 88);

  v7 = swift_allocObject();
  swift_weakInit();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = &unk_2563ED018;
  *(_QWORD *)(v8 + 24) = v7;
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v5 + 24))(&unk_2563ED028, v8, v6, v5);
  swift_release();
  v9 = swift_allocObject();
  swift_weakInit();
  v10 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v5 + 32);
  swift_retain();
  v10(sub_23658D450, v9, v6, v5);
  swift_release_n();
  TransportBuilding.buildAny()(v6, v5, v25);
  v11 = *(_QWORD *)(v0 + 104);
  v12 = v11 + OBJC_IVAR____TtC12AppleIDSetup13CommandRouter__activeTransport;
  swift_beginAccess();
  sub_236595ADC((uint64_t)v25, v12, &qword_2563ECF98);
  swift_endAccess();
  if (*(_BYTE *)(v11 + 112))
  {
    if (*(_BYTE *)(v11 + 112) == 1)
    {
      v13 = sub_2365AFBE8();
      v14 = sub_2365B038C();
      if (os_log_type_enabled(v13, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v15 = 0;
        _os_log_impl(&dword_23644B000, v13, v14, "Registered server transport, will now wait for handshake from client", v15, 2u);
        MEMORY[0x23B7F5254](v15, -1, -1);
      }

      swift_retain();
      v16 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 136) = v16;
      *v16 = v0;
      v16[1] = sub_2365836C4;
      return sub_2365AFAA4();
    }
    else
    {
      v22 = sub_2365AFBE8();
      v23 = sub_2365B038C();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v24 = 0;
        _os_log_impl(&dword_23644B000, v22, v23, "Registered transport for ids channel", v24, 2u);
        MEMORY[0x23B7F5254](v24, -1, -1);
      }

      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    v18 = sub_2365AFBE8();
    v19 = sub_2365B038C();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_23644B000, v18, v19, "Register client transport, will now perform handshake with server", v20, 2u);
      MEMORY[0x23B7F5254](v20, -1, -1);
    }

    v21 = swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v21;
    *(_QWORD *)v21 = v0;
    *(_QWORD *)(v21 + 8) = sub_236583670;
    *(_QWORD *)(v21 + 752) = *(_QWORD *)(v0 + 104);
    *(_BYTE *)(v21 + 617) = 0;
    return swift_task_switch();
  }
}

uint64_t sub_236583670()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_2365836C4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

uint64_t sub_236583734()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236583770()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2365837B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E84E0);
  v3[9] = v4;
  v3[10] = *(_QWORD *)(v4 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23658382C()
{
  uint64_t v0;
  uint64_t Strong;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 104) = Strong;
  if (Strong)
  {
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 112) = v2;
    *v2 = v0;
    v2[1] = sub_236583B08;
    return sub_23658A408(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  }
  else
  {
    if (qword_2563E4350 != -1)
      swift_once();
    v4 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 56);
    v6 = sub_2365AFC00();
    __swift_project_value_buffer(v6, (uint64_t)qword_2563ECF78);
    sub_23646C4B0(v5, v4, &qword_2563E84E0);
    v7 = sub_2365AFBE8();
    v8 = sub_2365B0398();
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(_QWORD *)(v0 + 96);
    if (v9)
    {
      v11 = *(_QWORD *)(v0 + 88);
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v19 = v13;
      *(_DWORD *)v12 = 136315138;
      sub_23646C4B0(v10, v11, &qword_2563E84E0);
      v14 = sub_2365B0080();
      *(_QWORD *)(v0 + 40) = sub_236468D88(v14, v15, &v19);
      sub_2365B04A0();
      swift_bridgeObjectRelease();
      sub_236465998(v10, &qword_2563E84E0);
      _os_log_impl(&dword_23644B000, v7, v8, "Unable to receive message because router is deallocated: %s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7F5254](v13, -1, -1);
      MEMORY[0x23B7F5254](v12, -1, -1);
    }
    else
    {
      sub_236465998(*(_QWORD *)(v0 + 96), &qword_2563E84E0);
    }

    v16 = *(_QWORD *)(v0 + 72);
    v17 = *(_QWORD *)(v0 + 80);
    type metadata accessor for CommandRouter.Failure(0);
    sub_23644F0B8(&qword_2563ECFA0, type metadata accessor for CommandRouter.Failure, (uint64_t)&protocol conformance descriptor for CommandRouter.Failure);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v18, 2, 4, v16);
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_236583B08()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_236583B5C()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236583BA4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = a2;
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)a3 + *a3);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v6;
  *v6 = v3;
  v6[1] = sub_236583C18;
  return v8(a1, a2);
}

uint64_t sub_236583C18()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 16);
  v3 = *v0;
  swift_task_dealloc();
  sub_236465998(v1, &qword_2563E84E0);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_236583C70()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9790);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v4 = result;
    v5 = sub_2365B0218();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v2, 1, 1, v5);
    v6 = (_QWORD *)swift_allocObject();
    v6[2] = 0;
    v6[3] = 0;
    v6[4] = v4;
    sub_23649225C((uint64_t)v2, (uint64_t)&unk_2563ED4F0, (uint64_t)v6);
    return swift_release();
  }
  return result;
}

uint64_t sub_236583D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t sub_236583D64()
{
  uint64_t v0;

  sub_236587D0C();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236583D94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23647E274;
  v4[11] = a2;
  return swift_task_switch();
}

uint64_t sub_236583DF4(char a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 752) = v1;
  *(_BYTE *)(v2 + 617) = a1;
  return swift_task_switch();
}

uint64_t sub_236583E10()
{
  uint64_t v0;
  char *v1;
  char v2;
  __int128 v3;
  char v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD *v40;
  _OWORD v42[4];
  char v43;

  v1 = (char *)(v0 + 617);
  if ((*(_BYTE *)(v0 + 617) & 1) != 0)
  {
    v2 = 0;
    v3 = 0uLL;
    v4 = 1;
    v5 = 0uLL;
    v6 = 0uLL;
    v7 = 0uLL;
  }
  else
  {
    static IdMSAccount.DeviceInfo.current.getter((uint64_t)v42);
    v3 = v42[0];
    v5 = v42[1];
    v6 = v42[2];
    v7 = v42[3];
    v2 = v43;
    v4 = *v1;
  }
  v8 = (_OWORD *)(v0 + 16);
  v9 = *(_QWORD **)(v0 + 752);
  v10 = v9[15];
  v11 = v9[16];
  v12 = v9[17];
  v13 = v9[18];
  v14 = v9[19];
  v15 = v9[20];
  v16 = v9[21];
  v17 = v9[22];
  v18 = v9[23];
  v19 = v9[24];
  v20 = v9[25];
  *(_BYTE *)(v0 + 16) = v4;
  *(_WORD *)(v0 + 17) = 257;
  *(_OWORD *)(v0 + 24) = v3;
  *(_OWORD *)(v0 + 40) = v5;
  *(_OWORD *)(v0 + 56) = v6;
  *(_OWORD *)(v0 + 72) = v7;
  *(_BYTE *)(v0 + 88) = v2;
  *(_QWORD *)(v0 + 96) = v10;
  *(_QWORD *)(v0 + 104) = v11;
  *(_QWORD *)(v0 + 112) = v12;
  *(_QWORD *)(v0 + 120) = v13;
  *(_QWORD *)(v0 + 128) = v14;
  *(_QWORD *)(v0 + 136) = v15;
  *(_QWORD *)(v0 + 144) = v16;
  *(_QWORD *)(v0 + 152) = v17;
  *(_QWORD *)(v0 + 160) = v18;
  *(_QWORD *)(v0 + 168) = v19;
  *(_QWORD *)(v0 + 176) = v20;
  sub_23644F440(v10, v11);
  v21 = qword_2563E4350;
  swift_bridgeObjectRetain();
  if (v21 != -1)
    swift_once();
  v22 = sub_2365AFC00();
  *(_QWORD *)(v0 + 760) = __swift_project_value_buffer(v22, (uint64_t)qword_2563ECF78);
  sub_236525830((uint64_t *)(v0 + 16));
  sub_236525830((uint64_t *)(v0 + 16));
  v23 = sub_2365AFBE8();
  v24 = sub_2365B0380();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = *v1;
    v26 = swift_slowAlloc();
    v27 = swift_slowAlloc();
    *(_QWORD *)&v42[0] = v27;
    *(_DWORD *)v26 = 67109378;
    *(_DWORD *)(v0 + 620) = v25;
    sub_2365B04A0();
    *(_WORD *)(v26 + 8) = 2080;
    v28 = *(_OWORD *)(v0 + 160);
    *(_OWORD *)(v0 + 312) = *(_OWORD *)(v0 + 144);
    *(_OWORD *)(v0 + 328) = v28;
    *(_QWORD *)(v0 + 344) = *(_QWORD *)(v0 + 176);
    v29 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 248) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 264) = v29;
    v30 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 280) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 296) = v30;
    v31 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 184) = *v8;
    *(_OWORD *)(v0 + 200) = v31;
    v32 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 216) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 232) = v32;
    sub_236525830((uint64_t *)(v0 + 16));
    v33 = sub_2365B0080();
    *(_QWORD *)(v0 + 744) = sub_236468D88(v33, v34, (uint64_t *)v42);
    sub_2365B04A0();
    swift_bridgeObjectRelease();
    sub_2365258E4((uint64_t *)(v0 + 16));
    sub_2365258E4((uint64_t *)(v0 + 16));
    _os_log_impl(&dword_23644B000, v23, v24, "Performing handshake (isKeepAlive: %{BOOL}d) with command: %s", (uint8_t *)v26, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v27, -1, -1);
    MEMORY[0x23B7F5254](v26, -1, -1);
  }
  else
  {
    sub_2365258E4((uint64_t *)(v0 + 16));
    sub_2365258E4((uint64_t *)(v0 + 16));
  }

  v35 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v0 + 480) = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v0 + 496) = v35;
  *(_QWORD *)(v0 + 512) = *(_QWORD *)(v0 + 176);
  v36 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 416) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 432) = v36;
  v37 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 464) = v37;
  v38 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 352) = *v8;
  *(_OWORD *)(v0 + 368) = v38;
  v39 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 384) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 400) = v39;
  v40 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 768) = v40;
  *v40 = v0;
  v40[1] = sub_236584144;
  return sub_236584C68(v0 + 624, v0 + 352, 0, 3);
}

uint64_t sub_236584144()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 776) = v0;
  swift_task_dealloc();
  if (!v0)
    sub_2365258E4((uint64_t *)(v2 + 16));
  return swift_task_switch();
}

uint64_t sub_2365841B8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  NSObject *v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  char v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t type;
  os_log_type_t v40[8];
  uint64_t v41;
  uint64_t v42;
  NSObject *log;
  os_log_t loga;
  os_log_t logb;
  os_log_t logc;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;

  v1 = *(_BYTE *)(v0 + 624);
  v2 = *(_QWORD *)(v0 + 632);
  v3 = *(_QWORD *)(v0 + 640);
  v4 = *(_QWORD *)(v0 + 656);
  v5 = *(_QWORD *)(v0 + 672);
  v6 = *(_QWORD *)(v0 + 680);
  v64 = *(_QWORD *)(v0 + 696);
  v61 = *(_QWORD *)(v0 + 664);
  v63 = *(_QWORD *)(v0 + 704);
  v7 = *(_QWORD *)(v0 + 712);
  if (*(_BYTE *)(v0 + 625) == 1)
  {
    if (*(_BYTE *)(v0 + 617) == 1 && *(_BYTE *)(v0 + 624))
    {
      *(_QWORD *)v40 = *(_QWORD *)(v0 + 632);
      v47 = *(_BYTE *)(v0 + 648);
      v52 = *(_BYTE *)(v0 + 649);
      v41 = *(_QWORD *)(v0 + 640);
      v8 = *(_BYTE *)(v0 + 720);
      v9 = *(_QWORD *)(v0 + 688);
      swift_bridgeObjectRetain();
      sub_23648DBC0(v4, v61, v5, v6, v9, v64);
      v10 = sub_2365AFBE8();
      type = sub_2365B038C();
      log = v10;
      if (os_log_type_enabled(v10, type))
      {
        v11 = (uint8_t *)swift_slowAlloc();
        v37 = swift_slowAlloc();
        *(_DWORD *)v11 = 136315138;
        v66 = v37;
        *(_WORD *)(v0 + 520) = 257;
        *(_QWORD *)(v0 + 528) = *(_QWORD *)v40;
        *(_QWORD *)(v0 + 536) = v41;
        *(_BYTE *)(v0 + 544) = v47;
        *(_BYTE *)(v0 + 545) = v52;
        *(_QWORD *)(v0 + 552) = v4;
        *(_QWORD *)(v0 + 560) = v61;
        *(_QWORD *)(v0 + 568) = v5;
        *(_QWORD *)(v0 + 576) = v6;
        *(_QWORD *)(v0 + 584) = v9;
        *(_QWORD *)(v0 + 592) = v64;
        *(_QWORD *)(v0 + 600) = v63;
        *(_QWORD *)(v0 + 608) = v7;
        *(_BYTE *)(v0 + 616) = v8;
        swift_bridgeObjectRetain();
        sub_23648DBC0(v4, v61, v5, v6, v9, v64);
        v12 = sub_2365B0080();
        *(_QWORD *)(v0 + 736) = sub_236468D88(v12, v13, &v66);
        sub_2365B04A0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_23648DCEC(v4, v61, v5, v6, v9, v64);
        swift_bridgeObjectRelease();
        sub_23648DCEC(v4, v61, v5, v6, v9, v64);
        _os_log_impl(&dword_23644B000, log, type, "Keep alive response received: %s", v11, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x23B7F5254](v37, -1, -1);
        MEMORY[0x23B7F5254](v11, -1, -1);

      }
      else
      {
        swift_bridgeObjectRelease();
        sub_23648DCEC(v4, v61, v5, v6, v9, v64);
        swift_bridgeObjectRelease();
        sub_23648DCEC(v4, v61, v5, v6, v9, v64);

      }
LABEL_26:
      v18 = *(uint64_t (**)(void))(v0 + 8);
      return v18();
    }
    if (*(_BYTE *)(v0 + 648) == 1)
      v19 = *(_BYTE *)(v0 + 649);
    else
      v19 = 1;
    if ((v19 & 1) != 0)
    {
      v49 = *(_BYTE *)(v0 + 648);
      v54 = *(_BYTE *)(v0 + 649);
      v57 = *(_QWORD *)(v0 + 688);
      v60 = *(_BYTE *)(v0 + 720);
      logb = *(os_log_t *)(v0 + 712);
      v20 = sub_2365AFBE8();
      v21 = sub_2365B0398();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v22 = 0;
        _os_log_impl(&dword_23644B000, v20, v21, "Incompatible selected version returned", v22, 2u);
        MEMORY[0x23B7F5254](v22, -1, -1);
      }

      type metadata accessor for CommandRouter.HandshakeFailure(0);
      sub_23644F0B8(&qword_2563ED050, type metadata accessor for CommandRouter.HandshakeFailure, (uint64_t)&protocol conformance descriptor for CommandRouter.HandshakeFailure);
      swift_allocError();
      *(_BYTE *)v23 = v1;
      *(_BYTE *)(v23 + 1) = 1;
      *(_QWORD *)(v23 + 8) = v2;
      *(_QWORD *)(v23 + 16) = v3;
      *(_BYTE *)(v23 + 24) = v49;
      *(_BYTE *)(v23 + 25) = v54;
      *(_QWORD *)(v23 + 32) = v4;
      *(_QWORD *)(v23 + 40) = v61;
      *(_QWORD *)(v23 + 48) = v5;
      *(_QWORD *)(v23 + 56) = v6;
      *(_QWORD *)(v23 + 64) = v57;
      *(_QWORD *)(v23 + 72) = v64;
      *(_QWORD *)(v23 + 80) = v63;
      *(_QWORD *)(v23 + 88) = logb;
      *(_BYTE *)(v23 + 96) = v60;
    }
    else
    {
      v55 = *(_QWORD *)(v0 + 672);
      if (v61)
      {
        v50 = *(_BYTE *)(v0 + 720) & 1;
        v38 = *(_QWORD *)(v0 + 656);
        v24 = *(_QWORD *)(v0 + 688);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_23648DC24(v24, v64);
        swift_bridgeObjectRelease();
        sub_23648DCEC(v4, v61, v55, v6, v24, v64);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_23648DC24(v24, v64);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_23648DC24(v24, v64);
        v25 = sub_2365AFBE8();
        v26 = v24;
        v27 = sub_2365B0380();
        if (os_log_type_enabled(v25, v27))
        {
          v28 = (uint8_t *)swift_slowAlloc();
          v42 = swift_slowAlloc();
          *(_DWORD *)v28 = 136315138;
          v65 = v42;
          v66 = v38;
          v67 = v61;
          v68 = v55;
          v69 = v6;
          v70 = v24;
          v71 = v64;
          v72 = v63;
          v73 = v7;
          v74 = v50;
          v29 = IdMSAccount.DeviceInfo.description.getter();
          *(_QWORD *)(v0 + 728) = sub_236468D88(v29, v30, &v65);
          sub_2365B04A0();
          swift_bridgeObjectRelease();
          sub_23648DCEC(v38, v61, v55, v6, v24, v64);
          sub_23648DCEC(v38, v61, v55, v6, v24, v64);
          _os_log_impl(&dword_23644B000, v25, v27, "Successfully completed handshake! Received device info: %s", v28, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x23B7F5254](v42, -1, -1);
          MEMORY[0x23B7F5254](v28, -1, -1);

          v26 = v24;
        }
        else
        {
          sub_23648DCEC(v4, v61, v55, v6, v24, v64);
          sub_23648DCEC(v4, v61, v55, v6, v24, v64);

        }
        v66 = v38;
        v67 = v61;
        v68 = v55;
        v69 = v6;
        v70 = v26;
        v71 = v64;
        v72 = v63;
        v73 = v7;
        v74 = v50;
        sub_2365879CC(&v66);
        sub_23648DCEC(v38, v61, v55, v6, v26, v64);
        goto LABEL_26;
      }
      v51 = *(_BYTE *)(v0 + 624);
      v58 = *(_QWORD *)(v0 + 688);
      v62 = *(_QWORD *)(v0 + 680);
      logc = *(os_log_t *)(v0 + 712);
      v31 = *(_BYTE *)(v0 + 720);
      v32 = sub_2365AFBE8();
      v33 = sub_2365B0398();
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v34 = 0;
        _os_log_impl(&dword_23644B000, v32, v33, "Did not receive expected device info in handshake response", v34, 2u);
        MEMORY[0x23B7F5254](v34, -1, -1);
      }

      type metadata accessor for CommandRouter.HandshakeFailure(0);
      sub_23644F0B8(&qword_2563ED050, type metadata accessor for CommandRouter.HandshakeFailure, (uint64_t)&protocol conformance descriptor for CommandRouter.HandshakeFailure);
      swift_allocError();
      *(_BYTE *)v35 = v51;
      *(_BYTE *)(v35 + 1) = 1;
      *(_QWORD *)(v35 + 8) = v2;
      *(_QWORD *)(v35 + 16) = v3;
      *(_WORD *)(v35 + 24) = 1;
      *(_QWORD *)(v35 + 32) = v4;
      *(_QWORD *)(v35 + 40) = 0;
      *(_QWORD *)(v35 + 48) = v5;
      *(_QWORD *)(v35 + 56) = v62;
      *(_QWORD *)(v35 + 64) = v58;
      *(_QWORD *)(v35 + 72) = v64;
      *(_QWORD *)(v35 + 80) = v63;
      *(_QWORD *)(v35 + 88) = logc;
      *(_BYTE *)(v35 + 96) = v31;
    }
  }
  else
  {
    v48 = *(_BYTE *)(v0 + 648);
    v53 = *(_BYTE *)(v0 + 649);
    v59 = *(_BYTE *)(v0 + 720);
    v56 = *(_QWORD *)(v0 + 688);
    loga = *(os_log_t *)(v0 + 712);
    v14 = sub_2365AFBE8();
    v15 = sub_2365B0398();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_23644B000, v14, v15, "Handshake request was not accepted, device wants to be left alone", v16, 2u);
      MEMORY[0x23B7F5254](v16, -1, -1);
    }

    type metadata accessor for CommandRouter.HandshakeFailure(0);
    sub_23644F0B8(&qword_2563ED050, type metadata accessor for CommandRouter.HandshakeFailure, (uint64_t)&protocol conformance descriptor for CommandRouter.HandshakeFailure);
    swift_allocError();
    *(_BYTE *)v17 = v1;
    *(_BYTE *)(v17 + 1) = 0;
    *(_QWORD *)(v17 + 8) = v2;
    *(_QWORD *)(v17 + 16) = v3;
    *(_BYTE *)(v17 + 24) = v48;
    *(_BYTE *)(v17 + 25) = v53;
    *(_QWORD *)(v17 + 32) = v4;
    *(_QWORD *)(v17 + 40) = v61;
    *(_QWORD *)(v17 + 48) = v5;
    *(_QWORD *)(v17 + 56) = v6;
    *(_QWORD *)(v17 + 64) = v56;
    *(_QWORD *)(v17 + 72) = v64;
    *(_QWORD *)(v17 + 80) = v63;
    *(_QWORD *)(v17 + 88) = loga;
    *(_BYTE *)(v17 + 96) = v59;
  }
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t sub_236584C34()
{
  uint64_t v0;

  sub_2365258E4((uint64_t *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236584C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)(v5 + 408) = a4;
  *(_QWORD *)(v5 + 416) = v4;
  *(_QWORD *)(v5 + 392) = a1;
  *(_QWORD *)(v5 + 400) = a3;
  v7 = sub_2365AFAF8();
  *(_QWORD *)(v5 + 424) = v7;
  *(_QWORD *)(v5 + 432) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 440) = swift_task_alloc();
  *(_QWORD *)(v5 + 448) = swift_task_alloc();
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v5 + 144) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v5 + 160) = v8;
  *(_QWORD *)(v5 + 176) = *(_QWORD *)(a2 + 160);
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v5 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v5 + 96) = v9;
  v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v5 + 112) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v5 + 128) = v10;
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 32) = v11;
  v12 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v5 + 64) = v12;
  return swift_task_switch();
}

uint64_t sub_236584D18()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v23;

  v1 = (_OWORD *)(v0 + 16);
  if (qword_2563E4350 != -1)
    swift_once();
  v2 = sub_2365AFC00();
  *(_QWORD *)(v0 + 456) = __swift_project_value_buffer(v2, (uint64_t)qword_2563ECF78);
  sub_236525830((uint64_t *)(v0 + 16));
  sub_236525830((uint64_t *)(v0 + 16));
  v3 = sub_2365AFBE8();
  v4 = sub_2365B0380();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    *(_DWORD *)v5 = 136315138;
    v23 = v6;
    v7 = *(_OWORD *)(v0 + 160);
    *(_OWORD *)(v0 + 312) = *(_OWORD *)(v0 + 144);
    *(_OWORD *)(v0 + 328) = v7;
    *(_QWORD *)(v0 + 344) = *(_QWORD *)(v0 + 176);
    v8 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 248) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 264) = v8;
    v9 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 280) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 296) = v9;
    v10 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 184) = *v1;
    *(_OWORD *)(v0 + 200) = v10;
    v11 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 216) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 232) = v11;
    sub_236525830((uint64_t *)(v0 + 16));
    v12 = sub_2365B0080();
    *(_QWORD *)(v0 + 384) = sub_236468D88(v12, v13, &v23);
    sub_2365B04A0();
    swift_bridgeObjectRelease();
    sub_2365258E4((uint64_t *)(v0 + 16));
    sub_2365258E4((uint64_t *)(v0 + 16));
    _os_log_impl(&dword_23644B000, v3, v4, "Sending handshake command: %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v6, -1, -1);
    MEMORY[0x23B7F5254](v5, -1, -1);
  }
  else
  {
    sub_2365258E4((uint64_t *)(v0 + 16));
    sub_2365258E4((uint64_t *)(v0 + 16));
  }

  v14 = *(_QWORD *)(v0 + 416);
  v15 = swift_allocObject();
  v16 = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v15 + 136) = *(_OWORD *)(v0 + 128);
  v17 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v15 + 152) = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v15 + 168) = v17;
  v18 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v15 + 72) = *(_OWORD *)(v0 + 64);
  v19 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v15 + 88) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v15 + 104) = v19;
  *(_OWORD *)(v15 + 120) = v16;
  v20 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v15 + 24) = *v1;
  *(_OWORD *)(v15 + 40) = v20;
  *(_QWORD *)(v0 + 464) = v15;
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 184) = *(_QWORD *)(v0 + 176);
  *(_OWORD *)(v15 + 56) = v18;
  sub_236525830((uint64_t *)(v0 + 16));
  swift_retain();
  v21 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 472) = v21;
  *v21 = v0;
  v21[1] = sub_236584FDC;
  return sub_2365AFAA4();
}

uint64_t sub_236584FDC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 480) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_236585064()
{
  uint64_t v0;
  void *v1;
  id v2;
  int v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  id v30;
  _QWORD *v31;
  void *v32;
  id v33;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  void *v38;
  uint8_t *v39;
  id v40;
  uint64_t v41;
  _QWORD *v42;

  v1 = *(void **)(v0 + 480);
  swift_release();
  *(_QWORD *)(v0 + 376) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542A8310);
  v3 = swift_dynamicCast();
  v4 = *(void **)(v0 + 480);
  if (v3)
  {
    v6 = *(_QWORD *)(v0 + 440);
    v5 = *(_QWORD *)(v0 + 448);
    v7 = *(_QWORD *)(v0 + 424);
    v8 = *(_QWORD *)(v0 + 432);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v6, v5, v7);
    sub_23644F0B8(&qword_2563ED4D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDFC420], MEMORY[0x24BDFC428]);
    v9 = swift_allocError();
    *(_QWORD *)(v0 + 488) = v9;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v10, v6, v7);
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 496) = v11;
    *v11 = v0;
    v11[1] = sub_2365854CC;
    v12 = *(_QWORD *)(v0 + 408);
    v13 = *(_QWORD *)(v0 + 416);
    v14 = *(_QWORD *)(v0 + 392);
    v15 = *(_QWORD *)(v0 + 400);
    v16 = v9;
    return sub_236585704(v14, v16, v15, v12, v13, v0 + 16);
  }

  *(_QWORD *)(v0 + 352) = v4;
  v18 = v4;
  sub_236595D88();
  if (swift_dynamicCast())
  {
    v19 = *(void **)(v0 + 360);
    *(_QWORD *)(v0 + 512) = v19;
    v20 = objc_msgSend(v19, sel_domain);
    v21 = sub_2365B005C();
    v23 = v22;

    if (v21 == sub_2365B005C() && v23 == v24)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v26 = sub_2365B08CC();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v26 & 1) == 0)
      {
LABEL_16:

        goto LABEL_17;
      }
    }
    if (objc_msgSend(v19, sel_code) == (id)-6714)
    {

      v27 = sub_2365AFBE8();
      v28 = sub_2365B0398();
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v29 = 0;
        _os_log_impl(&dword_23644B000, v27, v28, "Failed to send request, handler not set up yet", v29, 2u);
        MEMORY[0x23B7F5254](v29, -1, -1);
      }

      v30 = v19;
      v31 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 520) = v31;
      *v31 = v0;
      v31[1] = sub_236585594;
      v12 = *(_QWORD *)(v0 + 408);
      v13 = *(_QWORD *)(v0 + 416);
      v14 = *(_QWORD *)(v0 + 392);
      v15 = *(_QWORD *)(v0 + 400);
      v16 = (uint64_t)v30;
      return sub_236585704(v14, v16, v15, v12, v13, v0 + 16);
    }
    goto LABEL_16;
  }
LABEL_17:
  v32 = *(void **)(v0 + 480);

  v33 = v32;
  v34 = v32;
  v35 = sub_2365AFBE8();
  v36 = sub_2365B0398();
  v37 = os_log_type_enabled(v35, v36);
  v38 = *(void **)(v0 + 480);
  if (v37)
  {
    v39 = (uint8_t *)swift_slowAlloc();
    v42 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v39 = 138412290;
    v40 = v38;
    v41 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 368) = v41;
    sub_2365B04A0();
    *v42 = v41;

    _os_log_impl(&dword_23644B000, v35, v36, "Failed to perform handshake: %@", v39, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9960);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v42, -1, -1);
    MEMORY[0x23B7F5254](v39, -1, -1);
  }
  else
  {

  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2365854CC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 504) = v0;
  swift_task_dealloc();
  if (!v0)

  return swift_task_switch();
}

uint64_t sub_236585540()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 432) + 8))(*(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 424));

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236585594()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 528) = v0;
  swift_task_dealloc();
  if (!v0)

  return swift_task_switch();
}

uint64_t sub_236585608()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236585654()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 488);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 432) + 8))(*(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 424));

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2365856B4()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 512);

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236585704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;

  v6[30] = a5;
  v6[31] = a6;
  v6[28] = a3;
  v6[29] = a4;
  v6[26] = a1;
  v6[27] = a2;
  v7 = sub_2365B0644();
  v6[32] = v7;
  v6[33] = *(_QWORD *)(v7 - 8);
  v6[34] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_236585770()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(_QWORD *)(v1 + 224);
  v3 = __CFADD__(v2, 1);
  v4 = v2 + 1;
  *(_QWORD *)(v1 + 280) = v4;
  if (v3)
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v0 = 2000000000000000000 * v4;
    v23 = ((unint64_t)(2 * v4) * (unsigned __int128)0xDE0B6B3A7640000uLL) >> 64;
    if (qword_2563E4350 == -1)
      goto LABEL_4;
    goto LABEL_14;
  }
  __break(1u);
LABEL_14:
  swift_once();
LABEL_4:
  v5 = sub_2365AFC00();
  *(_QWORD *)(v1 + 288) = __swift_project_value_buffer(v5, (uint64_t)qword_2563ECF78);
  v6 = sub_2365AFBE8();
  v7 = sub_2365B0380();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v24 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = v0;
    v11 = sub_2365B0AB8();
    *(_QWORD *)(v1 + 200) = sub_236468D88(v11, v12, &v24);
    sub_2365B04A0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23644B000, v6, v7, "Timed out attempting to send handshake, will retry in %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v9, -1, -1);
    MEMORY[0x23B7F5254](v8, -1, -1);
  }
  else
  {
    v10 = v0;
  }

  if (*(_QWORD *)(v1 + 224) >= *(_QWORD *)(v1 + 232))
  {
    v15 = sub_2365AFBE8();
    v16 = sub_2365B0398();
    if (os_log_type_enabled(v15, v16))
    {
      v18 = *(_QWORD *)(v1 + 224);
      v17 = *(_QWORD *)(v1 + 232);
      v19 = swift_slowAlloc();
      *(_DWORD *)v19 = 134218240;
      *(_QWORD *)(v1 + 184) = v18;
      sub_2365B04A0();
      *(_WORD *)(v19 + 12) = 2048;
      *(_QWORD *)(v1 + 192) = v17;
      sub_2365B04A0();
      _os_log_impl(&dword_23644B000, v15, v16, "Timed out for the %lu/%lu and final time", (uint8_t *)v19, 0x16u);
      MEMORY[0x23B7F5254](v19, -1, -1);
    }
    v20 = *(void **)(v1 + 216);

    swift_willThrow();
    v21 = v20;
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    sub_2365B0638();
    v22 = (char *)&dword_2563ED4B0 + dword_2563ED4B0;
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v1 + 296) = v13;
    *v13 = v1;
    v13[1] = sub_236585A98;
    return ((uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))v22)(v10, v23, 0, 0, 1);
  }
}

uint64_t sub_236585A98()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 304) = v0;
  swift_task_dealloc();
  (*(void (**)(_QWORD, _QWORD))(v2[33] + 8))(v2[34], v2[32]);
  return swift_task_switch();
}

uint64_t sub_236585B10()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;

  v1 = sub_2365AFBE8();
  v2 = sub_2365B038C();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_23644B000, v1, v2, "Finished sleeping before next handshake attempt", v3, 2u);
    MEMORY[0x23B7F5254](v3, -1, -1);
  }
  v4 = *(__int128 **)(v0 + 248);

  v5 = *v4;
  v6 = v4[2];
  *(_OWORD *)(v0 + 32) = v4[1];
  *(_OWORD *)(v0 + 48) = v6;
  *(_OWORD *)(v0 + 16) = v5;
  v7 = v4[3];
  v8 = v4[4];
  v9 = v4[6];
  *(_OWORD *)(v0 + 96) = v4[5];
  *(_OWORD *)(v0 + 112) = v9;
  *(_OWORD *)(v0 + 64) = v7;
  *(_OWORD *)(v0 + 80) = v8;
  v10 = v4[7];
  v11 = v4[8];
  v12 = v4[9];
  *(_QWORD *)(v0 + 176) = *((_QWORD *)v4 + 20);
  *(_OWORD *)(v0 + 144) = v11;
  *(_OWORD *)(v0 + 160) = v12;
  *(_OWORD *)(v0 + 128) = v10;
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 312) = v13;
  *v13 = v0;
  v13[1] = sub_236585C58;
  return sub_236584C68(*(_QWORD *)(v0 + 208), v0 + 16, *(_QWORD *)(v0 + 280), 3);
}

uint64_t sub_236585C24()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236585C58()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 320) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_236585CCC()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236585D00(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  sub_236525830(a3);
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_2563ED4E0 + dword_2563ED4E0);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_236477420;
  return v8(a1, (uint64_t)a3);
}

uint64_t sub_236585D84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9790);
  result = MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (uint64_t *)(v0 + OBJC_IVAR____TtC12AppleIDSetup13CommandRouter_keepAliveInterval);
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC12AppleIDSetup13CommandRouter_keepAliveInterval + 16) & 1) == 0)
  {
    v6 = *v5;
    v7 = v5[1];
    v8 = OBJC_IVAR____TtC12AppleIDSetup13CommandRouter_keepAliveTask;
    if (*(_QWORD *)(v0 + OBJC_IVAR____TtC12AppleIDSetup13CommandRouter_keepAliveTask))
    {
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542A8310);
      sub_2365B02B4();
      swift_release();
    }
    sub_2365B0200();
    v9 = sub_2365B0218();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 0, 1, v9);
    v10 = swift_allocObject();
    swift_weakInit();
    v11 = (_QWORD *)swift_allocObject();
    v11[2] = 0;
    v11[3] = 0;
    v11[4] = v10;
    v11[5] = v6;
    v11[6] = v7;
    v12 = sub_236586D08((uint64_t)v4, (uint64_t)&unk_2563ED498, (uint64_t)v11);
    sub_236465998((uint64_t)v4, &qword_2563E9790);
    *(_QWORD *)(v0 + v8) = v12;
    return swift_release();
  }
  return result;
}

uint64_t sub_236585EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[21] = a5;
  v6[22] = a6;
  v6[20] = a4;
  v7 = sub_2365B062C();
  v6[23] = v7;
  v6[24] = *(_QWORD *)(v7 - 8);
  v6[25] = swift_task_alloc();
  v6[26] = swift_task_alloc();
  v8 = sub_2365B0644();
  v6[27] = v8;
  v6[28] = *(_QWORD *)(v8 - 8);
  v6[29] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_236585F8C()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;

  if ((sub_2365B02CC() & 1) != 0
    || (swift_beginAccess(), Strong = swift_weakLoadStrong(), (*(_QWORD *)(v0 + 240) = Strong) == 0))
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 192);
    v2 = *(_QWORD *)(v0 + 200);
    v4 = *(_QWORD *)(v0 + 176);
    v5 = *(_QWORD *)(v0 + 184);
    v6 = *(_QWORD *)(v0 + 168);
    sub_2365B0638();
    *(_QWORD *)(v0 + 120) = v6;
    *(_QWORD *)(v0 + 128) = v4;
    *(_QWORD *)(v0 + 104) = 0;
    *(_QWORD *)(v0 + 96) = 0;
    *(_BYTE *)(v0 + 112) = 1;
    sub_23644F0B8(&qword_2563ED4A0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6E10], MEMORY[0x24BEE6E20]);
    sub_2365B0950();
    sub_23644F0B8(&qword_2563ED4A8, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6DC8], MEMORY[0x24BEE6E00]);
    sub_2365B0650();
    v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    *(_QWORD *)(v0 + 248) = v7;
    v7(v2, v5);
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 256) = v8;
    *v8 = v0;
    v8[1] = sub_236586134;
    return sub_2365B095C();
  }
}

uint64_t sub_236586134()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  *(_QWORD *)(*v1 + 264) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2 + 248))(*(_QWORD *)(v2 + 208), *(_QWORD *)(v2 + 184));
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 224);
    v3 = *(_QWORD *)(v2 + 232);
    v5 = *(_QWORD *)(v2 + 216);
    (*(void (**)(_QWORD, _QWORD))(v2 + 248))(*(_QWORD *)(v2 + 208), *(_QWORD *)(v2 + 184));
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  return swift_task_switch();
}

uint64_t sub_2365861D4()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  if (qword_2563E4350 != -1)
    swift_once();
  v1 = sub_2365AFC00();
  *(_QWORD *)(v0 + 272) = __swift_project_value_buffer(v1, (uint64_t)qword_2563ECF78);
  v2 = sub_2365AFBE8();
  v3 = sub_2365B038C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_23644B000, v2, v3, "Running keep alive task", v4, 2u);
    MEMORY[0x23B7F5254](v4, -1, -1);
  }

  return swift_task_switch();
}

uint64_t sub_2365862C4()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 8))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 216));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23658632C()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;

  v1 = sub_2365AFBE8();
  v2 = sub_2365B038C();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_23644B000, v1, v2, "Performing keep alive handshake", v3, 2u);
    MEMORY[0x23B7F5254](v3, -1, -1);
  }

  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 280) = v4;
  *(_QWORD *)v4 = v0;
  *(_QWORD *)(v4 + 8) = sub_236586408;
  *(_QWORD *)(v4 + 752) = *(_QWORD *)(v0 + 240);
  *(_BYTE *)(v4 + 617) = 1;
  return swift_task_switch();
}

uint64_t sub_236586408()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 288) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23658646C()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;

  swift_release();
  if ((sub_2365B02CC() & 1) != 0 || (Strong = swift_weakLoadStrong(), (*(_QWORD *)(v0 + 240) = Strong) == 0))
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 192);
    v2 = *(_QWORD *)(v0 + 200);
    v4 = *(_QWORD *)(v0 + 176);
    v5 = *(_QWORD *)(v0 + 184);
    v6 = *(_QWORD *)(v0 + 168);
    sub_2365B0638();
    *(_QWORD *)(v0 + 120) = v6;
    *(_QWORD *)(v0 + 128) = v4;
    *(_QWORD *)(v0 + 104) = 0;
    *(_QWORD *)(v0 + 96) = 0;
    *(_BYTE *)(v0 + 112) = 1;
    sub_23644F0B8(&qword_2563ED4A0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6E10], MEMORY[0x24BEE6E20]);
    sub_2365B0950();
    sub_23644F0B8(&qword_2563ED4A8, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6DC8], MEMORY[0x24BEE6E00]);
    sub_2365B0650();
    v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    *(_QWORD *)(v0 + 248) = v7;
    v7(v2, v5);
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 256) = v8;
    *v8 = v0;
    v8[1] = sub_236586134;
    return sub_2365B095C();
  }
}

uint64_t (*sub_236586604())()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint8_t *v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t (*result)();
  uint64_t v16;

  v1 = *(void **)(v0 + 288);
  v2 = v1;
  v3 = v1;
  v4 = sub_2365AFBE8();
  v5 = sub_2365B0398();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 288);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v7 = 138412290;
    v9 = v6;
    v10 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 152) = v10;
    sub_2365B04A0();
    *v8 = v10;

    _os_log_impl(&dword_23644B000, v4, v5, "Failed to perform keep alive: %@", v7, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9960);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v8, -1, -1);
    MEMORY[0x23B7F5254](v7, -1, -1);
  }
  else
  {
    v11 = *(void **)(v0 + 288);

  }
  v12 = sub_2365AFBE8();
  v13 = sub_2365B038C();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_23644B000, v12, v13, "Incrementing keep alive failure count", v14, 2u);
    MEMORY[0x23B7F5254](v14, -1, -1);
  }

  result = sub_236582824();
  if ((*(_BYTE *)(v16 + 16) & 1) != 0)
    goto LABEL_9;
  if (!__OFADD__(*(_QWORD *)v16, 1))
  {
    ++*(_QWORD *)v16;
LABEL_9:
    ((void (*)(uint64_t, _QWORD))result)(v0 + 16, 0);
    return (uint64_t (*)())swift_task_switch();
  }
  __break(1u);
  return result;
}

uint64_t sub_236586830()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 240) + OBJC_IVAR____TtC12AppleIDSetup13CommandRouter_enforceKeepAlive;
  swift_beginAccess();
  *(_QWORD *)(v0 + 296) = *(_QWORD *)v1;
  *(_QWORD *)(v0 + 304) = *(_QWORD *)(v1 + 8);
  *(_BYTE *)(v0 + 113) = *(_BYTE *)(v1 + 16);
  return swift_task_switch();
}

uint64_t sub_2365868A0()
{
  uint64_t v0;
  char v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  void *v5;
  uint8_t *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Strong;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  _QWORD *v20;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;

  v1 = *(_BYTE *)(v0 + 113);
  v2 = sub_2365AFBE8();
  if ((v1 & 1) != 0)
  {
    v3 = sub_2365B038C();
    v4 = os_log_type_enabled(v2, v3);
    v5 = *(void **)(v0 + 288);
    if (v4)
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_23644B000, v2, v3, "Either not enforcing or have not hit count", v6, 2u);
      MEMORY[0x23B7F5254](v6, -1, -1);

      swift_release();
      if ((sub_2365B02CC() & 1) != 0)
        goto LABEL_13;
    }
    else
    {
      swift_release();

      if ((sub_2365B02CC() & 1) != 0)
      {
LABEL_13:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
    }
LABEL_11:
    Strong = swift_weakLoadStrong();
    *(_QWORD *)(v0 + 240) = Strong;
    if (Strong)
    {
      v15 = *(_QWORD *)(v0 + 192);
      v14 = *(_QWORD *)(v0 + 200);
      v16 = *(_QWORD *)(v0 + 176);
      v17 = *(_QWORD *)(v0 + 184);
      v18 = *(_QWORD *)(v0 + 168);
      sub_2365B0638();
      *(_QWORD *)(v0 + 120) = v18;
      *(_QWORD *)(v0 + 128) = v16;
      *(_QWORD *)(v0 + 104) = 0;
      *(_QWORD *)(v0 + 96) = 0;
      *(_BYTE *)(v0 + 112) = 1;
      sub_23644F0B8(&qword_2563ED4A0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6E10], MEMORY[0x24BEE6E20]);
      sub_2365B0950();
      sub_23644F0B8(&qword_2563ED4A8, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6DC8], MEMORY[0x24BEE6E00]);
      sub_2365B0650();
      v19 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
      *(_QWORD *)(v0 + 248) = v19;
      v19(v14, v17);
      v20 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 256) = v20;
      *v20 = v0;
      v20[1] = sub_236586134;
      return sub_2365B095C();
    }
    goto LABEL_13;
  }
  v7 = sub_2365B0398();
  if (os_log_type_enabled(v2, v7))
  {
    v9 = *(_QWORD *)(v0 + 296);
    v8 = *(_QWORD *)(v0 + 304);
    v10 = swift_slowAlloc();
    *(_DWORD *)v10 = 134218240;
    *(_QWORD *)(v0 + 136) = v9;
    sub_2365B04A0();
    *(_WORD *)(v10 + 12) = 2048;
    *(_QWORD *)(v0 + 144) = v8;
    sub_2365B04A0();
    _os_log_impl(&dword_23644B000, v2, v7, "Failed to perform keep alive (for the %ld/%ld time)", (uint8_t *)v10, 0x16u);
    MEMORY[0x23B7F5254](v10, -1, -1);
  }
  v12 = *(_QWORD *)(v0 + 296);
  v11 = *(_QWORD *)(v0 + 304);

  if (v12 < v11)
  {

    swift_release();
    if ((sub_2365B02CC() & 1) != 0)
      goto LABEL_13;
    goto LABEL_11;
  }
  v22 = sub_2365AFBE8();
  v23 = sub_2365B038C();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v24 = 0;
    _os_log_impl(&dword_23644B000, v22, v23, "Invalidating command router to break it all down", v24, 2u);
    MEMORY[0x23B7F5254](v24, -1, -1);
  }

  return swift_task_switch();
}

uint64_t sub_236586C64()
{
  sub_236587D0C();
  return swift_task_switch();
}

uint64_t sub_236586CA0()
{
  uint64_t v0;

  swift_willThrow();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236586D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9790);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23646C4B0(a1, (uint64_t)v7, &qword_2563E9790);
  v8 = sub_2365B0218();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_236465998((uint64_t)v7, &qword_2563E9790);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
  }
  else
  {
    sub_2365B020C();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
  }
  swift_getObjectType();
  swift_unknownObjectRetain();
  v10 = sub_2365B01AC();
  v12 = v11;
  swift_unknownObjectRelease();
  if (v12 | v10)
  {
    v14[0] = 0;
    v14[1] = 0;
    v14[2] = v10;
    v14[3] = v12;
  }
  return swift_task_create();
}

uint64_t sub_236586E88()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 88) = v0;
  return swift_task_switch();
}

uint64_t sub_236586EA0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;
  void *v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[32];

  sub_2364858F4();
  v1 = (void *)swift_allocError();
  *(_QWORD *)v2 = 1;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_QWORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 48) = 4;
  v9 = v1;
  v10 = 0u;
  v11 = 0u;
  memset(v12, 0, 25);
  v12[25] = 1;
  sub_236587264((uint64_t)&v9);

  if (qword_2563E4350 != -1)
    swift_once();
  v3 = sub_2365AFC00();
  __swift_project_value_buffer(v3, (uint64_t)qword_2563ECF78);
  v4 = sub_2365AFBE8();
  v5 = sub_2365B038C();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_23644B000, v4, v5, "Starting to wait for handshake", v6, 2u);
    MEMORY[0x23B7F5254](v6, -1, -1);
  }

  sub_23644F0B8(&qword_2563ED488, type metadata accessor for CommandRouter, (uint64_t)&protocol conformance descriptor for CommandRouter);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v7;
  *v7 = v0;
  v7[1] = sub_23658706C;
  return sub_2365B0914();
}

uint64_t sub_23658706C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2365870D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10[8];
  char v11;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 72);
  v8 = *(_BYTE *)(v0 + 80);
  v10[0] = *(_QWORD *)(v0 + 16);
  v10[1] = v1;
  v10[2] = v2;
  v10[3] = v3;
  v10[4] = v4;
  v10[5] = v5;
  v10[6] = v6;
  v10[7] = v7;
  v11 = v8;
  sub_2365879CC(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23648DD50(v4, v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23658716C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236587178(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563ED070);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563ECFB0);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  v9 = a2 + OBJC_IVAR____TtC12AppleIDSetup13CommandRouter_handshakeContinuation;
  swift_beginAccess();
  sub_236595ADC((uint64_t)v6, v9, &qword_2563ED070);
  return swift_endAccess();
}

uint64_t sub_236587264(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  int v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t *v50;
  uint64_t v51;
  char v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t, uint64_t);
  char *v63;
  id v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v70;
  uint8_t *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  char v100;
  uint64_t v101;

  v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563ECFB0);
  v83 = *(_QWORD *)(v88 - 8);
  MEMORY[0x24BDAC7A8](v88);
  v75 = (char *)&v71 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563ED070);
  v3 = MEMORY[0x24BDAC7A8](v76);
  v80 = (uint64_t)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v84 = (uint64_t)&v71 - v5;
  v7 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v89 = *(_QWORD *)(a1 + 24);
  v90 = v6;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v85 = *(_QWORD *)(a1 + 56);
  v12 = *(unsigned __int8 *)(a1 + 64);
  v13 = *(unsigned __int8 *)(a1 + 65);
  if (qword_2563E4350 != -1)
    swift_once();
  v14 = sub_2365AFC00();
  v78 = __swift_project_value_buffer(v14, (uint64_t)qword_2563ECF78);
  swift_retain();
  v70 = v12;
  v86 = v12;
  v16 = v89;
  v15 = v90;
  v17 = v9;
  v18 = v11;
  v19 = v11;
  v20 = v9;
  v21 = v85;
  sub_236595BA8(v7, v90, v8, v89, v17, v10, v18, v85, v70, v13);
  swift_retain();
  v79 = v13;
  v22 = v86;
  v82 = v7;
  v81 = v8;
  v23 = v16;
  v24 = v19;
  sub_236595BA8(v7, v15, v8, v23, v20, v10, v19, v21, v86, v13);
  v25 = sub_2365AFBE8();
  v26 = sub_2365B038C();
  v27 = v26;
  v78 = v25;
  v28 = os_log_type_enabled(v25, v26);
  v74 = v20;
  v77 = v10;
  if (v28)
  {
    v29 = swift_slowAlloc();
    v73 = v27;
    v30 = v29;
    v72 = swift_slowAlloc();
    v101 = v72;
    *(_DWORD *)v30 = 136315394;
    v31 = v85;
    v32 = v87 + OBJC_IVAR____TtC12AppleIDSetup13CommandRouter_handshakeContinuation;
    swift_beginAccess();
    sub_23646C4B0(v32, v84, &qword_2563ED070);
    v33 = sub_2365B0080();
    v91 = sub_236468D88(v33, v34, &v101);
    sub_2365B04A0();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 2080;
    v71 = (uint8_t *)v30;
    v35 = v82;
    v91 = (uint64_t)v82;
    v92 = v90;
    v36 = v81;
    v93 = v81;
    v94 = v89;
    v37 = v20;
    v95 = v20;
    v96 = v77;
    v38 = v24;
    v97 = v24;
    v98 = v31;
    v99 = v86;
    v39 = v79;
    v100 = v79;
    v40 = v77;
    sub_236595BA8(v82, v90, v81, v89, v95, v77, v24, v31, v86, v79);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563ED4B8);
    v41 = sub_2365B0080();
    v91 = sub_236468D88(v41, v42, &v101);
    v43 = v89;
    v44 = v90;
    sub_2365B04A0();
    v22 = v86;
    swift_bridgeObjectRelease();
    sub_236595C20(v35, v44, v36, v43, v37, v40, v38, v31, v22, v39);
    sub_236595C20(v35, v44, v36, v43, v37, v40, v38, v31, v22, v39);
    v45 = v78;
    v46 = v71;
    _os_log_impl(&dword_23644B000, v78, (os_log_type_t)v73, "Resuming handshake continuation: %s with result: %s", v71, 0x16u);
    v47 = v72;
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v47, -1, -1);
    MEMORY[0x23B7F5254](v46, -1, -1);

    v48 = v83;
    v49 = v39;
    v50 = &qword_2563EC000;
  }
  else
  {
    v51 = v10;
    swift_release_n();
    v52 = v79;
    v53 = v82;
    v50 = &qword_2563EC000;
    v55 = v89;
    v54 = v90;
    v56 = v81;
    v57 = v24;
    v76 = v24;
    v58 = v85;
    sub_236595C20(v82, v90, v81, v89, v20, v51, v57, v85, v22, v79);
    v59 = v56;
    v38 = v76;
    sub_236595C20(v53, v54, v59, v55, v20, v51, v76, v58, v22, v52);

    v48 = v83;
    v49 = v52;
  }
  v60 = v87 + v50[501];
  swift_beginAccess();
  v61 = v80;
  sub_23646C4B0(v60, v80, &qword_2563ED070);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v61, 1, v88))
  {
    sub_236465998(v61, &qword_2563ED070);
  }
  else
  {
    v62 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 16);
    v63 = v75;
    v62(v75, v61, v88);
    sub_236465998(v61, &qword_2563ED070);
    v91 = (uint64_t)v82;
    if ((v49 & 1) != 0)
    {
      v64 = v82;
      v65 = v63;
      sub_2365B01B8();
    }
    else
    {
      v92 = v90;
      v93 = v81;
      v94 = v89;
      v66 = v74;
      v67 = v77;
      v95 = v74;
      v96 = v77;
      v97 = v38;
      v98 = v85;
      v99 = v22 & 1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23648DC24(v66, v67);
      v65 = v63;
      sub_2365B01C4();
    }
    v48 = v83;
    (*(void (**)(char *, uint64_t))(v83 + 8))(v65, v88);
  }
  v68 = v84;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(v84, 1, 1, v88);
  swift_beginAccess();
  sub_236595ADC(v68, v60, &qword_2563ED070);
  return swift_endAccess();
}

uint64_t sub_2365879CC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = v1;
  v4 = *a1;
  v3 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v9 = a1[6];
  v10 = a1[7];
  v11 = *((_BYTE *)a1 + 64);
  if (qword_2563E4350 != -1)
    swift_once();
  v27 = v11;
  v29 = v6;
  v31 = v4;
  v12 = sub_2365AFC00();
  __swift_project_value_buffer(v12, (uint64_t)qword_2563ECF78);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23648DC24(v7, v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23648DC24(v7, v8);
  v13 = sub_2365AFBE8();
  v14 = sub_2365B038C();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v26 = swift_slowAlloc();
    *(_DWORD *)v15 = 136315138;
    v33 = v26;
    v16 = IdMSAccount.DeviceInfo.description.getter();
    sub_236468D88(v16, v17, &v33);
    sub_2365B04A0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23648DD50(v7, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23648DD50(v7, v8);
    _os_log_impl(&dword_23644B000, v13, v14, "Storing received handshake device info: %s", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v26, -1, -1);
    MEMORY[0x23B7F5254](v15, -1, -1);

    v18 = v27;
    v20 = v29;
    v19 = v31;
    v21 = v3;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23648DD50(v7, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23648DD50(v7, v8);

    v21 = v3;
    v20 = v29;
    v19 = v31;
    v18 = v11;
  }
  v22 = *(_QWORD *)(v2 + 240);
  v23 = *(_QWORD *)(v2 + 248);
  v24 = *(_QWORD *)(v2 + 256);
  v32 = *(_QWORD *)(v2 + 264);
  v30 = *(_QWORD *)(v2 + 272);
  v28 = *(_QWORD *)(v2 + 280);
  *(_QWORD *)(v2 + 240) = v19;
  *(_QWORD *)(v2 + 248) = v21;
  *(_QWORD *)(v2 + 256) = v20;
  *(_QWORD *)(v2 + 264) = v5;
  *(_QWORD *)(v2 + 272) = v7;
  *(_QWORD *)(v2 + 280) = v8;
  *(_QWORD *)(v2 + 288) = v9;
  *(_QWORD *)(v2 + 296) = v10;
  *(_BYTE *)(v2 + 304) = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23648DC24(v7, v8);
  return sub_23648DCEC(v22, v23, v24, v32, v30, v28);
}

uint64_t sub_236587D0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[65];
  char v23;

  v1 = v0 + OBJC_IVAR____TtC12AppleIDSetup13CommandRouter__activeTransport;
  swift_beginAccess();
  sub_23646C4B0(v1, (uint64_t)v22, &qword_2563ECF98);
  if (*(_QWORD *)&v22[24])
  {
    sub_23646C4B0((uint64_t)v22, (uint64_t)v19, (uint64_t *)&unk_2563ED058);
    sub_236465998((uint64_t)v22, &qword_2563ECF98);
    v2 = v20;
    v3 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    (*(void (**)(uint64_t, uint64_t))(v3 + 40))(v2, v3);
    v4 = v19;
    v5 = (uint64_t *)&unk_2563ED058;
  }
  else
  {
    v5 = &qword_2563ECF98;
    v4 = v22;
  }
  sub_236465998((uint64_t)v4, v5);
  memset(v22, 0, 40);
  swift_beginAccess();
  sub_236595ADC((uint64_t)v22, v1, &qword_2563ECF98);
  swift_endAccess();
  v6 = *(_QWORD *)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 248);
  v8 = *(_QWORD *)(v0 + 256);
  v9 = *(_QWORD *)(v0 + 264);
  v10 = *(_QWORD *)(v0 + 272);
  v11 = *(_QWORD *)(v0 + 280);
  *(_OWORD *)(v0 + 240) = 0u;
  *(_OWORD *)(v0 + 256) = 0u;
  *(_OWORD *)(v0 + 272) = 0u;
  *(_OWORD *)(v0 + 288) = 0u;
  *(_BYTE *)(v0 + 304) = 0;
  sub_23648DCEC(v6, v7, v8, v9, v10, v11);
  sub_2364858F4();
  v12 = (void *)swift_allocError();
  *(_QWORD *)v13 = 1;
  *(_OWORD *)(v13 + 8) = 0u;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_QWORD *)(v13 + 40) = 0;
  *(_BYTE *)(v13 + 48) = 4;
  *(_QWORD *)v22 = v12;
  memset(&v22[8], 0, 57);
  v23 = 1;
  sub_236587264((uint64_t)v22);

  v14 = OBJC_IVAR____TtC12AppleIDSetup13CommandRouter_keepAliveTask;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC12AppleIDSetup13CommandRouter_keepAliveTask))
  {
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542A8310);
    sub_2365B02B4();
    swift_release();
  }
  *(_QWORD *)(v0 + v14) = 0;
  swift_release();
  swift_beginAccess();
  v15 = *(void (**)(uint64_t))(v0 + 224);
  if (v15)
  {
    v16 = swift_retain();
    v15(v16);
    sub_236450690((uint64_t)v15);
    v17 = *(_QWORD *)(v0 + 224);
  }
  else
  {
    v17 = 0;
  }
  *(_QWORD *)(v0 + 224) = 0;
  *(_QWORD *)(v0 + 232) = 0;
  return sub_236450690(v17);
}

uint64_t sub_236587F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[38] = a2;
  v3[39] = v2;
  v3[37] = a1;
  v3[40] = type metadata accessor for V1Command(0);
  v3[41] = swift_task_alloc();
  v3[42] = swift_task_alloc();
  v4 = sub_2365AF9A8();
  v3[43] = v4;
  v3[44] = *(_QWORD *)(v4 - 8);
  v3[45] = swift_task_alloc();
  v5 = sub_2365AF9FC();
  v3[46] = v5;
  v3[47] = *(_QWORD *)(v5 - 8);
  v3[48] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E84E0);
  v3[49] = v6;
  v3[50] = *(_QWORD *)(v6 - 8);
  v3[51] = swift_task_alloc();
  v3[52] = swift_task_alloc();
  v3[53] = swift_task_alloc();
  v3[54] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_236588080()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  unint64_t v3;
  unint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v58;
  unint64_t v59;

  v1 = *(_QWORD *)(v0 + 312) + OBJC_IVAR____TtC12AppleIDSetup13CommandRouter__activeTransport;
  swift_beginAccess();
  sub_23646C4B0(v1, v0 + 120, &qword_2563ECF98);
  if (*(_QWORD *)(v0 + 144))
  {
    v2 = *(_OWORD *)(v0 + 136);
    *(_OWORD *)(v0 + 160) = *(_OWORD *)(v0 + 120);
    *(_OWORD *)(v0 + 176) = v2;
    *(_QWORD *)(v0 + 192) = *(_QWORD *)(v0 + 152);
    sub_2365AF9F0();
    v3 = sub_23646A4A4(MEMORY[0x24BEE4AF8]);
    v4 = sub_23646868C(0);
    if ((v5 & 1) != 0)
    {
      v6 = v4;
      v59 = v3;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2364D14C0();
        v3 = v59;
      }
      sub_2364D0F64(v6, v3);
      swift_bridgeObjectRelease();
    }
    v7 = sub_23646868C(1u);
    if ((v8 & 1) != 0)
    {
      v9 = v7;
      v59 = v3;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2364D14C0();
        v3 = v59;
      }
      sub_2364D0F64(v9, v3);
      swift_bridgeObjectRelease();
    }
    v10 = sub_23646868C(2u);
    if ((v11 & 1) != 0)
    {
      v12 = v10;
      v59 = v3;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2364D14C0();
        v3 = v59;
      }
      sub_2364D0F64(v12, v3);
      swift_bridgeObjectRelease();
    }
    v13 = sub_23646868C(3u);
    if ((v14 & 1) != 0)
    {
      v15 = v13;
      v59 = v3;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2364D14C0();
        v3 = v59;
      }
      sub_2364D0F64(v15, v3);
      swift_bridgeObjectRelease();
    }
    sub_2365AF990();
    sub_2365AF984();
    v17 = v16 * 1000.0;
    if ((~*(_QWORD *)&v17 & 0x7FF0000000000000) != 0)
    {
      if (v17 > -1.0)
      {
        if (v17 < 1.84467441e19)
        {
          v18 = *(_QWORD *)(v0 + 432);
          v19 = *(int **)(v0 + 392);
          v58 = *(_QWORD *)(v0 + 384);
          v20 = *(_QWORD *)(v0 + 368);
          v21 = *(_QWORD *)(v0 + 376);
          v22 = *(_QWORD *)(v0 + 360);
          v23 = *(_QWORD *)(v0 + 344);
          v24 = *(__int128 **)(v0 + 304);
          v25 = (unint64_t)v17;
          v26 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 352) + 8);
          *(_QWORD *)(v0 + 440) = v26;
          v26(v22, v23);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v59 = v3;
          sub_236469FEC(v25, 0, isUniquelyReferenced_nonNull_native);
          swift_bridgeObjectRelease();
          v28 = v18 + v19[11];
          v29 = *v24;
          v30 = v24[2];
          *(_OWORD *)(v28 + 16) = v24[1];
          *(_OWORD *)(v28 + 32) = v30;
          *(_OWORD *)v28 = v29;
          v31 = v24[3];
          v32 = v24[4];
          v33 = v24[6];
          *(_OWORD *)(v28 + 80) = v24[5];
          *(_OWORD *)(v28 + 96) = v33;
          *(_OWORD *)(v28 + 48) = v31;
          *(_OWORD *)(v28 + 64) = v32;
          v34 = v24[7];
          v35 = v24[8];
          v36 = v24[9];
          *(_QWORD *)(v28 + 160) = *((_QWORD *)v24 + 20);
          *(_OWORD *)(v28 + 128) = v35;
          *(_OWORD *)(v28 + 144) = v36;
          *(_OWORD *)(v28 + 112) = v34;
          type metadata accessor for V1Command.Request(0);
          swift_storeEnumTagMultiPayload();
          swift_storeEnumTagMultiPayload();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v18, v58, v20);
          *(_BYTE *)(v18 + v19[9]) = 1;
          *(_QWORD *)(v18 + v19[10]) = v3;
          if (qword_2563E4350 == -1)
          {
LABEL_22:
            v37 = *(_QWORD *)(v0 + 424);
            v38 = *(_QWORD *)(v0 + 432);
            v39 = sub_2365AFC00();
            *(_QWORD *)(v0 + 448) = __swift_project_value_buffer(v39, (uint64_t)qword_2563ECF78);
            sub_23646C4B0(v38, v37, &qword_2563E84E0);
            v40 = sub_2365AFBE8();
            v41 = sub_2365B038C();
            v42 = os_log_type_enabled(v40, v41);
            v43 = *(_QWORD *)(v0 + 424);
            if (v42)
            {
              v44 = *(_QWORD *)(v0 + 416);
              v45 = (uint8_t *)swift_slowAlloc();
              v46 = swift_slowAlloc();
              v59 = v46;
              *(_DWORD *)v45 = 136315138;
              sub_23646C4B0(v43, v44, &qword_2563E84E0);
              v47 = sub_2365B0080();
              *(_QWORD *)(v0 + 288) = sub_236468D88(v47, v48, (uint64_t *)&v59);
              sub_2365B04A0();
              swift_bridgeObjectRelease();
              sub_236465998(v43, &qword_2563E84E0);
              _os_log_impl(&dword_23644B000, v40, v41, "Sending outMessage: %s", v45, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x23B7F5254](v46, -1, -1);
              MEMORY[0x23B7F5254](v45, -1, -1);
            }
            else
            {
              sub_236465998(*(_QWORD *)(v0 + 424), &qword_2563E84E0);
            }

            return swift_task_switch();
          }
LABEL_34:
          swift_once();
          goto LABEL_22;
        }
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_33;
  }
  sub_236465998(v0 + 120, &qword_2563ECF98);
  if (qword_2563E4350 != -1)
    swift_once();
  v49 = sub_2365AFC00();
  __swift_project_value_buffer(v49, (uint64_t)qword_2563ECF78);
  v50 = sub_2365AFBE8();
  v51 = sub_2365B038C();
  if (os_log_type_enabled(v50, v51))
  {
    v52 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v52 = 0;
    _os_log_impl(&dword_23644B000, v50, v51, "Throwing error due to missing active transport", v52, 2u);
    MEMORY[0x23B7F5254](v52, -1, -1);
  }
  v53 = *(_QWORD *)(v0 + 392);
  v54 = *(_QWORD *)(v0 + 400);
  v55 = *(uint64_t **)(v0 + 304);

  type metadata accessor for CommandRouter.Failure(0);
  sub_23644F0B8(&qword_2563ECFA0, type metadata accessor for CommandRouter.Failure, (uint64_t)&protocol conformance descriptor for CommandRouter.Failure);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 56))(v56, 1, 4, v53);
  swift_willThrow();
  sub_2365258E4(v55);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2365886E8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;

  v2 = v0[23];
  v1 = v0[24];
  v3 = __swift_project_boxed_opaque_existential_1(v0 + 20, v2);
  v4 = (_QWORD *)swift_task_alloc();
  v0[57] = v4;
  v5 = sub_23658D764();
  *v4 = v0;
  v4[1] = sub_23658876C;
  return sub_2364CDCE0(v0[51], (uint64_t)v3, v0[54], v0[49], v2, v5, v1);
}

uint64_t sub_23658876C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 464) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2365887D0()
{
  uint64_t v0;
  uint64_t result;
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  int EnumCaseMultiPayload;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(void);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  NSObject *v53;
  os_log_type_t v54;
  BOOL v55;
  uint8_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  char v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[3];
  char v74;
  uint64_t v75[3];
  char v76;

  sub_2365AF990();
  result = sub_2365AF984();
  v3 = v2 * 1000.0;
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v3 <= -1.0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v3 < 1.84467441e19)
  {
    v72 = v0 + 160;
    v4 = *(_QWORD *)(v0 + 408);
    v5 = *(_QWORD *)(v0 + 392);
    v6 = (unint64_t)v3;
    (*(void (**)(_QWORD, _QWORD))(v0 + 440))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 344));
    v7 = *(int *)(v5 + 40);
    v8 = *(_QWORD *)(v4 + v7);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v75[0] = v8;
    sub_236469FEC(v6, 3u, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + v7) = v8;
    v10 = sub_2365AFBE8();
    v11 = sub_2365B038C();
    if (os_log_type_enabled(v10, v11))
    {
      v13 = *(_QWORD *)(v0 + 408);
      v12 = *(_QWORD *)(v0 + 416);
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = swift_slowAlloc();
      v75[0] = v15;
      *(_DWORD *)v14 = 136315138;
      swift_beginAccess();
      sub_23646C4B0(v13, v12, &qword_2563E84E0);
      v16 = sub_2365B0080();
      *(_QWORD *)(v0 + 280) = sub_236468D88(v16, v17, v75);
      sub_2365B04A0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23644B000, v10, v11, "Received response inMessage: %s", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7F5254](v15, -1, -1);
      MEMORY[0x23B7F5254](v14, -1, -1);
    }

    v18 = *(_QWORD *)(v0 + 408);
    v19 = *(_QWORD *)(v0 + 392);
    v20 = *(_QWORD *)(v0 + 336);
    swift_beginAccess();
    v21 = v18 + *(int *)(v19 + 44);
    v22 = type metadata accessor for V1Command;
    sub_23648DFF8(v21, v20, type metadata accessor for V1Command);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v24 = *(_QWORD *)(v0 + 336);
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for V1Command.Response(0);
      if (!swift_getEnumCaseMultiPayload())
      {
        v44 = *(_QWORD *)(v24 + 16);
        v67 = *(_QWORD *)(v24 + 8);
        v65 = *(_BYTE *)(v24 + 24);
        v66 = *(_BYTE *)(v24 + 1);
        v63 = *(_BYTE *)v24;
        v64 = *(_BYTE *)(v24 + 25);
        v46 = *(_QWORD *)(v24 + 32);
        v45 = *(_QWORD *)(v24 + 40);
        v47 = *(_QWORD *)(v24 + 48);
        v48 = *(_QWORD *)(v24 + 56);
        v49 = *(_QWORD *)(v24 + 72);
        v71 = *(_QWORD *)(v24 + 64);
        v50 = *(_QWORD *)(v24 + 80);
        v51 = *(_QWORD *)(v24 + 88);
        v52 = *(_BYTE *)(v24 + 96);
        swift_bridgeObjectRetain();
        sub_23648DBC0(v46, v45, v47, v48, v71, v49);
        v69 = v44;
        swift_bridgeObjectRetain();
        v68 = v46;
        v70 = v45;
        sub_23648DBC0(v46, v45, v47, v48, v71, v49);
        v53 = sub_2365AFBE8();
        v54 = sub_2365B038C();
        v55 = os_log_type_enabled(v53, v54);
        v61 = *(_QWORD *)(v0 + 432);
        v62 = *(_QWORD *)(v0 + 408);
        if (v55)
        {
          v56 = (uint8_t *)swift_slowAlloc();
          v60 = swift_slowAlloc();
          *(_DWORD *)v56 = 136315138;
          v75[0] = v60;
          *(_BYTE *)(v0 + 16) = v63;
          *(_BYTE *)(v0 + 17) = v66;
          *(_QWORD *)(v0 + 24) = v67;
          *(_QWORD *)(v0 + 32) = v69;
          *(_BYTE *)(v0 + 40) = v65;
          *(_BYTE *)(v0 + 41) = v64;
          *(_QWORD *)(v0 + 48) = v68;
          *(_QWORD *)(v0 + 56) = v70;
          *(_QWORD *)(v0 + 64) = v47;
          *(_QWORD *)(v0 + 72) = v48;
          *(_QWORD *)(v0 + 80) = v71;
          *(_QWORD *)(v0 + 88) = v49;
          *(_QWORD *)(v0 + 96) = v50;
          *(_QWORD *)(v0 + 104) = v51;
          *(_BYTE *)(v0 + 112) = v52;
          swift_bridgeObjectRetain();
          sub_23648DBC0(v68, v70, v47, v48, v71, v49);
          v57 = sub_2365B0080();
          *(_QWORD *)(v0 + 272) = sub_236468D88(v57, v58, v75);
          sub_2365B04A0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_23648DCEC(v68, v70, v47, v48, v71, v49);
          swift_bridgeObjectRelease();
          sub_23648DCEC(v68, v70, v47, v48, v71, v49);
          _os_log_impl(&dword_23644B000, v53, v54, "Received command response: %s", v56, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x23B7F5254](v60, -1, -1);
          MEMORY[0x23B7F5254](v56, -1, -1);

        }
        else
        {
          swift_bridgeObjectRelease();

          sub_23648DCEC(v46, v70, v47, v48, v71, v49);
          swift_bridgeObjectRelease();
          sub_23648DCEC(v46, v70, v47, v48, v71, v49);
        }
        sub_236465998(v61, &qword_2563E84E0);
        sub_236465998(v72, (uint64_t *)&unk_2563ED058);
        sub_236465998(v62, &qword_2563E84E0);
        v59 = *(_QWORD *)(v0 + 296);
        *(_BYTE *)v59 = v63;
        *(_BYTE *)(v59 + 1) = v66;
        *(_QWORD *)(v59 + 8) = v67;
        *(_QWORD *)(v59 + 16) = v69;
        *(_BYTE *)(v59 + 24) = v65;
        *(_BYTE *)(v59 + 25) = v64;
        *(_QWORD *)(v59 + 32) = v68;
        *(_QWORD *)(v59 + 40) = v70;
        *(_QWORD *)(v59 + 48) = v47;
        *(_QWORD *)(v59 + 56) = v48;
        *(_QWORD *)(v59 + 64) = v71;
        *(_QWORD *)(v59 + 72) = v49;
        *(_QWORD *)(v59 + 80) = v50;
        *(_QWORD *)(v59 + 88) = v51;
        *(_BYTE *)(v59 + 96) = v52;
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        v43 = *(uint64_t (**)(void))(v0 + 8);
        return v43();
      }
      v22 = type metadata accessor for V1Command.Response;
    }
    sub_236465A18(v24, v22);
    v25 = *(_QWORD *)(v0 + 408);
    v26 = *(_QWORD *)(v0 + 392);
    v27 = *(_QWORD *)(v0 + 328);
    swift_bridgeObjectRelease();
    sub_23648DCEC(0, 0, 0, 0, 0, 0);
    sub_23648DFF8(v25 + *(int *)(v26 + 44), v27, type metadata accessor for V1Command);
    v28 = swift_getEnumCaseMultiPayload();
    v29 = *(_QWORD *)(v0 + 328);
    if (v28 == 2)
    {
      v30 = *(_QWORD *)v29;
      v31 = *(_QWORD *)(v29 + 8);
      v32 = *(_QWORD *)(v29 + 16);
      v33 = *(_BYTE *)(v29 + 24);
      v73[0] = *(_QWORD *)v29;
      v73[1] = v31;
      v73[2] = v32;
      v74 = v33;
      v75[1] = 0;
      v75[2] = 0;
      v75[0] = 4;
      v76 = 2;
      if ((static V1CommandError.== infix(_:_:)((uint64_t)v73, (uint64_t)v75) & 1) != 0)
      {
        v34 = *(_QWORD *)(v0 + 432);
        v36 = *(_QWORD *)(v0 + 400);
        v35 = *(_QWORD *)(v0 + 408);
        v37 = *(_QWORD *)(v0 + 392);
        type metadata accessor for CommandRouter.Failure(0);
        sub_23644F0B8(&qword_2563ECFA0, type metadata accessor for CommandRouter.Failure, (uint64_t)&protocol conformance descriptor for CommandRouter.Failure);
        swift_allocError();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v38, 4, 4, v37);
        swift_willThrow();
        sub_23653E4F8(v30, v31, v32, v33);
LABEL_15:
        sub_236465998(v34, &qword_2563E84E0);
        sub_236465998(v72, (uint64_t *)&unk_2563ED058);
        sub_236465998(v35, &qword_2563E84E0);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        v43 = *(uint64_t (**)(void))(v0 + 8);
        return v43();
      }
      sub_23653E4F8(v30, v31, v32, v33);
    }
    else
    {
      sub_236465A18(v29, type metadata accessor for V1Command);
    }
    v34 = *(_QWORD *)(v0 + 432);
    v39 = *(_QWORD *)(v0 + 400);
    v35 = *(_QWORD *)(v0 + 408);
    v40 = *(_QWORD *)(v0 + 392);
    type metadata accessor for CommandRouter.Failure(0);
    sub_23644F0B8(&qword_2563ECFA0, type metadata accessor for CommandRouter.Failure, (uint64_t)&protocol conformance descriptor for CommandRouter.Failure);
    swift_allocError();
    v42 = v41;
    sub_23646C4B0(v35, v41, &qword_2563E84E0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v42, 0, 4, v40);
    swift_willThrow();
    goto LABEL_15;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_236589120()
{
  uint64_t v0;

  sub_236465998(*(_QWORD *)(v0 + 432), &qword_2563E84E0);
  sub_236465998(v0 + 160, (uint64_t *)&unk_2563ED058);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2365891D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[27] = a4;
  v5[28] = v4;
  v5[25] = a2;
  v5[26] = a3;
  v5[24] = a1;
  v5[29] = type metadata accessor for V1Command(0);
  v5[30] = swift_task_alloc();
  v5[31] = swift_task_alloc();
  v5[32] = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[33] = AssociatedTypeWitness;
  v7 = sub_2365B047C();
  v5[34] = v7;
  v5[35] = *(_QWORD *)(v7 - 8);
  v5[36] = swift_task_alloc();
  v5[37] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[38] = swift_task_alloc();
  v5[39] = swift_task_alloc();
  v5[40] = swift_task_alloc();
  v8 = sub_2365AF9A8();
  v5[41] = v8;
  v5[42] = *(_QWORD *)(v8 - 8);
  v5[43] = swift_task_alloc();
  v9 = sub_2365AF9FC();
  v5[44] = v9;
  v5[45] = *(_QWORD *)(v9 - 8);
  v5[46] = swift_task_alloc();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E84E0);
  v5[47] = v10;
  v5[48] = *(_QWORD *)(v10 - 8);
  v5[49] = swift_task_alloc();
  v5[50] = swift_task_alloc();
  v5[51] = swift_task_alloc();
  v5[52] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_2365893E0()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  unint64_t v3;
  unint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;

  v1 = *(_QWORD *)(v0 + 224) + OBJC_IVAR____TtC12AppleIDSetup13CommandRouter__activeTransport;
  swift_beginAccess();
  sub_23646C4B0(v1, v0 + 56, &qword_2563ECF98);
  if (*(_QWORD *)(v0 + 80))
  {
    v2 = *(_OWORD *)(v0 + 72);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 56);
    *(_OWORD *)(v0 + 32) = v2;
    *(_QWORD *)(v0 + 48) = *(_QWORD *)(v0 + 88);
    sub_2365AF9F0();
    v3 = sub_23646A4A4(MEMORY[0x24BEE4AF8]);
    v4 = sub_23646868C(0);
    if ((v5 & 1) != 0)
    {
      v6 = v4;
      v52 = v3;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2364D14C0();
        v3 = v52;
      }
      sub_2364D0F64(v6, v3);
      swift_bridgeObjectRelease();
    }
    v7 = sub_23646868C(1u);
    if ((v8 & 1) != 0)
    {
      v9 = v7;
      v52 = v3;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2364D14C0();
        v3 = v52;
      }
      sub_2364D0F64(v9, v3);
      swift_bridgeObjectRelease();
    }
    v10 = sub_23646868C(2u);
    if ((v11 & 1) != 0)
    {
      v12 = v10;
      v52 = v3;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2364D14C0();
        v3 = v52;
      }
      sub_2364D0F64(v12, v3);
      swift_bridgeObjectRelease();
    }
    v13 = sub_23646868C(3u);
    if ((v14 & 1) != 0)
    {
      v15 = v13;
      v52 = v3;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2364D14C0();
        v3 = v52;
      }
      sub_2364D0F64(v15, v3);
      swift_bridgeObjectRelease();
    }
    sub_2365AF990();
    sub_2365AF984();
    v17 = v16 * 1000.0;
    if ((~*(_QWORD *)&v17 & 0x7FF0000000000000) != 0)
    {
      if (v17 > -1.0)
      {
        if (v17 < 1.84467441e19)
        {
          v18 = *(_QWORD *)(v0 + 416);
          v19 = *(_QWORD *)(v0 + 376);
          v20 = *(_QWORD *)(v0 + 360);
          v50 = *(_QWORD *)(v0 + 352);
          v51 = *(_QWORD *)(v0 + 368);
          v21 = *(_QWORD *)(v0 + 344);
          v22 = *(_QWORD *)(v0 + 328);
          v24 = *(_QWORD *)(v0 + 208);
          v23 = *(_QWORD *)(v0 + 216);
          v25 = (unint64_t)v17;
          v26 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 336) + 8);
          *(_QWORD *)(v0 + 424) = v26;
          v26(v21, v22);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v52 = v3;
          sub_236469FEC(v25, 0, isUniquelyReferenced_nonNull_native);
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v23 + 24))(v24, v23);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v18, v51, v50);
          *(_BYTE *)(v18 + *(int *)(v19 + 36)) = 1;
          *(_QWORD *)(v18 + *(int *)(v19 + 40)) = v3;
          if (qword_2563E4350 == -1)
          {
LABEL_22:
            v28 = *(_QWORD *)(v0 + 408);
            v29 = *(_QWORD *)(v0 + 416);
            v30 = sub_2365AFC00();
            *(_QWORD *)(v0 + 432) = __swift_project_value_buffer(v30, (uint64_t)qword_2563ECF78);
            sub_23646C4B0(v29, v28, &qword_2563E84E0);
            v31 = sub_2365AFBE8();
            v32 = sub_2365B038C();
            v33 = os_log_type_enabled(v31, v32);
            v34 = *(_QWORD *)(v0 + 408);
            if (v33)
            {
              v35 = *(_QWORD *)(v0 + 400);
              v36 = (uint8_t *)swift_slowAlloc();
              v37 = swift_slowAlloc();
              v52 = v37;
              *(_DWORD *)v36 = 136315138;
              sub_23646C4B0(v34, v35, &qword_2563E84E0);
              v38 = sub_2365B0080();
              *(_QWORD *)(v0 + 184) = sub_236468D88(v38, v39, (uint64_t *)&v52);
              sub_2365B04A0();
              swift_bridgeObjectRelease();
              sub_236465998(v34, &qword_2563E84E0);
              _os_log_impl(&dword_23644B000, v31, v32, "Sending outMessage: %s", v36, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x23B7F5254](v37, -1, -1);
              MEMORY[0x23B7F5254](v36, -1, -1);
            }
            else
            {
              sub_236465998(*(_QWORD *)(v0 + 408), &qword_2563E84E0);
            }

            return swift_task_switch();
          }
LABEL_34:
          swift_once();
          goto LABEL_22;
        }
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_33;
  }
  sub_236465998(v0 + 56, &qword_2563ECF98);
  if (qword_2563E4350 != -1)
    swift_once();
  v40 = sub_2365AFC00();
  __swift_project_value_buffer(v40, (uint64_t)qword_2563ECF78);
  v41 = sub_2365AFBE8();
  v42 = sub_2365B038C();
  if (os_log_type_enabled(v41, v42))
  {
    v43 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v43 = 0;
    _os_log_impl(&dword_23644B000, v41, v42, "Throwing error due to missing active transport", v43, 2u);
    MEMORY[0x23B7F5254](v43, -1, -1);
  }
  v44 = *(_QWORD *)(v0 + 376);
  v45 = *(_QWORD *)(v0 + 384);
  v47 = *(_QWORD *)(v0 + 200);
  v46 = *(_QWORD *)(v0 + 208);

  type metadata accessor for CommandRouter.Failure(0);
  sub_23644F0B8(&qword_2563ECFA0, type metadata accessor for CommandRouter.Failure, (uint64_t)&protocol conformance descriptor for CommandRouter.Failure);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56))(v48, 1, 4, v44);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 8))(v47, v46);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236589A40()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;

  v2 = v0[5];
  v1 = v0[6];
  v3 = __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
  v4 = (_QWORD *)swift_task_alloc();
  v0[55] = v4;
  v5 = sub_23658D764();
  *v4 = v0;
  v4[1] = sub_236589AC4;
  return sub_2364CDCE0(v0[49], (uint64_t)v3, v0[52], v0[47], v2, v5, v1);
}

uint64_t sub_236589AC4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 448) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_236589B28()
{
  uint64_t v0;

  sub_236465998(*(_QWORD *)(v0 + 416), &qword_2563E84E0);
  sub_236465998(v0 + 16, (uint64_t *)&unk_2563ED058);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236589C24()
{
  uint64_t v0;
  uint64_t result;
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int EnumCaseMultiPayload;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  NSObject *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(void);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, _QWORD, uint64_t);
  uint64_t v67;
  _QWORD v68[3];
  char v69;
  uint64_t v70[3];
  char v71;

  sub_2365AF990();
  result = sub_2365AF984();
  v3 = v2 * 1000.0;
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  if (v3 <= -1.0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v3 < 1.84467441e19)
  {
    v67 = v0 + 16;
    v4 = *(_QWORD *)(v0 + 392);
    v5 = *(_QWORD *)(v0 + 376);
    v6 = (unint64_t)v3;
    (*(void (**)(_QWORD, _QWORD))(v0 + 424))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 328));
    v7 = *(int *)(v5 + 40);
    v8 = *(_QWORD *)(v4 + v7);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v70[0] = v8;
    sub_236469FEC(v6, 3u, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + v7) = v8;
    v10 = sub_2365AFBE8();
    v11 = sub_2365B038C();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = *(_QWORD *)(v0 + 392);
      v13 = *(_QWORD *)(v0 + 400);
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = swift_slowAlloc();
      v70[0] = v15;
      *(_DWORD *)v14 = 136315138;
      swift_beginAccess();
      sub_23646C4B0(v12, v13, &qword_2563E84E0);
      v16 = sub_2365B0080();
      *(_QWORD *)(v0 + 176) = sub_236468D88(v16, v17, v70);
      sub_2365B04A0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23644B000, v10, v11, "Received response inMessage: %s", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7F5254](v15, -1, -1);
      MEMORY[0x23B7F5254](v14, -1, -1);
    }

    v18 = *(_QWORD *)(v0 + 392);
    v19 = *(_QWORD *)(v0 + 376);
    v20 = *(_QWORD *)(v0 + 288);
    v21 = *(_QWORD *)(v0 + 296);
    v22 = *(_QWORD *)(v0 + 264);
    v23 = *(_QWORD *)(v0 + 248);
    swift_beginAccess();
    sub_23648DFF8(v18 + *(int *)(v19 + 44), v23, type metadata accessor for V1Command);
    swift_getAssociatedConformanceWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v23, v22, AssociatedConformanceWitness);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v20, 1, v22) != 1)
    {
      v40 = *(_QWORD *)(v0 + 312);
      v39 = *(_QWORD *)(v0 + 320);
      v41 = *(_QWORD *)(v0 + 296);
      v42 = *(_QWORD *)(v0 + 264);
      v66 = *(void (**)(uint64_t, _QWORD, uint64_t))(v41 + 32);
      v66(v39, *(_QWORD *)(v0 + 288), v42);
      v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16);
      v43(v40, v39, v42);
      v44 = sub_2365AFBE8();
      v45 = sub_2365B038C();
      v46 = os_log_type_enabled(v44, v45);
      v47 = *(_QWORD *)(v0 + 416);
      v48 = *(_QWORD *)(v0 + 312);
      if (v46)
      {
        v65 = *(_QWORD *)(v0 + 416);
        v49 = *(_QWORD *)(v0 + 304);
        v64 = *(_QWORD *)(v0 + 296);
        v50 = *(_QWORD *)(v0 + 264);
        v51 = (uint8_t *)swift_slowAlloc();
        v52 = swift_slowAlloc();
        v70[0] = v52;
        *(_DWORD *)v51 = 136315138;
        v43(v49, v48, v50);
        v53 = sub_2365B0080();
        *(_QWORD *)(v0 + 168) = sub_236468D88(v53, v54, v70);
        sub_2365B04A0();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v48, v50);
        _os_log_impl(&dword_23644B000, v44, v45, "Received command response: %s", v51, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x23B7F5254](v52, -1, -1);
        MEMORY[0x23B7F5254](v51, -1, -1);

        v55 = v65;
      }
      else
      {
        v56 = *(_QWORD *)(v0 + 296);
        v57 = *(_QWORD *)(v0 + 264);

        (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v48, v57);
        v55 = v47;
      }
      sub_236465998(v55, &qword_2563E84E0);
      sub_236465998(v67, (uint64_t *)&unk_2563ED058);
      v58 = *(_QWORD *)(v0 + 392);
      v66(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 264));
      sub_236465998(v58, &qword_2563E84E0);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v59 = *(uint64_t (**)(void))(v0 + 8);
      return v59();
    }
    v25 = *(_QWORD *)(v0 + 392);
    v26 = *(_QWORD *)(v0 + 376);
    v27 = *(_QWORD *)(v0 + 240);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 8))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 272));
    sub_23648DFF8(v25 + *(int *)(v26 + 44), v27, type metadata accessor for V1Command);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v29 = *(_QWORD *)(v0 + 240);
    if (EnumCaseMultiPayload == 2)
    {
      v30 = *(_QWORD *)v29;
      v31 = *(_QWORD *)(v29 + 8);
      v32 = *(_QWORD *)(v29 + 16);
      v33 = *(_BYTE *)(v29 + 24);
      v68[0] = *(_QWORD *)v29;
      v68[1] = v31;
      v68[2] = v32;
      v69 = v33;
      v70[1] = 0;
      v70[2] = 0;
      v70[0] = 4;
      v71 = 2;
      if ((static V1CommandError.== infix(_:_:)((uint64_t)v68, (uint64_t)v70) & 1) != 0)
      {
        v34 = *(_QWORD *)(v0 + 416);
        v35 = *(_QWORD *)(v0 + 384);
        v36 = *(_QWORD *)(v0 + 392);
        v37 = *(_QWORD *)(v0 + 376);
        type metadata accessor for CommandRouter.Failure(0);
        sub_23644F0B8(&qword_2563ECFA0, type metadata accessor for CommandRouter.Failure, (uint64_t)&protocol conformance descriptor for CommandRouter.Failure);
        swift_allocError();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56))(v38, 4, 4, v37);
        swift_willThrow();
        sub_23653E4F8(v30, v31, v32, v33);
LABEL_17:
        sub_236465998(v34, &qword_2563E84E0);
        sub_236465998(v67, (uint64_t *)&unk_2563ED058);
        sub_236465998(v36, &qword_2563E84E0);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        v59 = *(uint64_t (**)(void))(v0 + 8);
        return v59();
      }
      sub_23653E4F8(v30, v31, v32, v33);
    }
    else
    {
      sub_236465A18(v29, type metadata accessor for V1Command);
    }
    v34 = *(_QWORD *)(v0 + 416);
    v60 = *(_QWORD *)(v0 + 384);
    v36 = *(_QWORD *)(v0 + 392);
    v61 = *(_QWORD *)(v0 + 376);
    type metadata accessor for CommandRouter.Failure(0);
    sub_23644F0B8(&qword_2563ECFA0, type metadata accessor for CommandRouter.Failure, (uint64_t)&protocol conformance descriptor for CommandRouter.Failure);
    swift_allocError();
    v63 = v62;
    sub_23646C4B0(v36, v62, &qword_2563E84E0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v60 + 56))(v63, 0, 4, v61);
    swift_willThrow();
    goto LABEL_17;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_23658A408(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  v4 = sub_2365AF9FC();
  v3[8] = v4;
  v3[9] = *(_QWORD *)(v4 - 8);
  v3[10] = swift_task_alloc();
  v3[11] = type metadata accessor for V1Command(0);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  v5 = sub_2365AF9A8();
  v3[15] = v5;
  v3[16] = *(_QWORD *)(v5 - 8);
  v3[17] = swift_task_alloc();
  v3[18] = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E84E0);
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23658A524()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;

  if (qword_2563E4350 != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = sub_2365AFC00();
  *(_QWORD *)(v0 + 184) = __swift_project_value_buffer(v3, (uint64_t)qword_2563ECF78);
  sub_23646C4B0(v2, v1, &qword_2563E84E0);
  v4 = sub_2365AFBE8();
  v5 = sub_2365B038C();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 176);
  if (v6)
  {
    v8 = *(_QWORD *)(v0 + 168);
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v28 = v10;
    *(_DWORD *)v9 = 136315138;
    sub_23646C4B0(v7, v8, &qword_2563E84E0);
    v11 = sub_2365B0080();
    *(_QWORD *)(v0 + 32) = sub_236468D88(v11, v12, &v28);
    sub_2365B04A0();
    swift_bridgeObjectRelease();
    sub_236465998(v7, &qword_2563E84E0);
    _os_log_impl(&dword_23644B000, v4, v5, "Received inMessage: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v10, -1, -1);
    MEMORY[0x23B7F5254](v9, -1, -1);
  }
  else
  {
    sub_236465998(*(_QWORD *)(v0 + 176), &qword_2563E84E0);
  }

  sub_23646C4B0(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 160), &qword_2563E84E0);
  sub_2365AF990();
  result = sub_2365AF984();
  v15 = v14 * 1000.0;
  if ((~*(_QWORD *)&v15 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v15 <= -1.0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v15 < 1.84467441e19)
  {
    v16 = *(_QWORD *)(v0 + 160);
    v17 = *(_QWORD *)(v0 + 136);
    v18 = *(_QWORD *)(v0 + 144);
    v19 = *(_QWORD *)(v0 + 120);
    v20 = (unint64_t)v15;
    v21 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 128) + 8);
    *(_QWORD *)(v0 + 192) = v21;
    v21(v17, v19);
    v22 = *(int *)(v18 + 40);
    *(_DWORD *)(v0 + 208) = v22;
    v23 = *(_QWORD *)(v16 + v22);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v28 = v23;
    sub_236469FEC(v20, 1u, isUniquelyReferenced_nonNull_native);
    v25 = v28;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v16 + v22) = v25;
    v26 = v16 + *(int *)(v18 + 44);
    v27 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 200) = v27;
    *v27 = v0;
    v27[1] = sub_23658A808;
    return sub_23658ACFC(*(_QWORD *)(v0 + 112), v26);
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_23658A808()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23658A860()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  double v13;
  double v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  sub_23648DFF8(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 104), type metadata accessor for V1Command);
  v1 = sub_2365AFBE8();
  v2 = sub_2365B038C();
  if (os_log_type_enabled(v1, v2))
  {
    v4 = *(_QWORD *)(v0 + 96);
    v3 = *(_QWORD *)(v0 + 104);
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v39 = v6;
    *(_DWORD *)v5 = 136315138;
    sub_23648DFF8(v3, v4, type metadata accessor for V1Command);
    v7 = sub_2365B0080();
    *(_QWORD *)(v0 + 24) = sub_236468D88(v7, v8, &v39);
    sub_2365B04A0();
    swift_bridgeObjectRelease();
    sub_236465A18(v3, type metadata accessor for V1Command);
    _os_log_impl(&dword_23644B000, v1, v2, "Processed request and preparing response: %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v6, -1, -1);
    MEMORY[0x23B7F5254](v5, -1, -1);
  }
  else
  {
    sub_236465A18(*(_QWORD *)(v0 + 104), type metadata accessor for V1Command);
  }

  v9 = *(int *)(v0 + 208);
  v10 = *(_QWORD *)(v0 + 160);
  sub_2365AF9F0();
  v11 = *(_QWORD *)(v10 + v9);
  swift_bridgeObjectRetain();
  sub_2365AF990();
  result = sub_2365AF984();
  v14 = v13 * 1000.0;
  if ((~*(_QWORD *)&v14 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v14 <= -1.0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v14 >= 1.84467441e19)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v15 = *(int **)(v0 + 144);
  v36 = *(_QWORD *)(v0 + 152);
  v16 = *(_QWORD *)(v0 + 112);
  v17 = *(_QWORD *)(v0 + 72);
  v18 = *(_QWORD *)(v0 + 80);
  v19 = *(_QWORD *)(v0 + 64);
  v20 = *(_QWORD *)(v0 + 40);
  v21 = (unint64_t)v14;
  (*(void (**)(_QWORD, _QWORD))(v0 + 192))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v39 = v11;
  sub_236469FEC(v21, 2u, isUniquelyReferenced_nonNull_native);
  v23 = v39;
  swift_bridgeObjectRelease();
  sub_23648DFF8(v16, v20 + v15[11], type metadata accessor for V1Command);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v20, v18, v19);
  *(_BYTE *)(v20 + v15[9]) = 1;
  *(_QWORD *)(v20 + v15[10]) = v23;
  sub_23646C4B0(v20, v36, &qword_2563E84E0);
  v24 = sub_2365AFBE8();
  v25 = sub_2365B038C();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = *(_QWORD *)(v0 + 168);
    v38 = *(_QWORD *)(v0 + 160);
    v27 = *(_QWORD *)(v0 + 152);
    v37 = *(_QWORD *)(v0 + 112);
    v28 = (uint8_t *)swift_slowAlloc();
    v29 = swift_slowAlloc();
    v39 = v29;
    *(_DWORD *)v28 = 136315138;
    sub_23646C4B0(v27, v26, &qword_2563E84E0);
    v30 = sub_2365B0080();
    *(_QWORD *)(v0 + 16) = sub_236468D88(v30, v31, &v39);
    sub_2365B04A0();
    swift_bridgeObjectRelease();
    sub_236465998(v27, &qword_2563E84E0);
    _os_log_impl(&dword_23644B000, v24, v25, "Returning outMessage as response: %s", v28, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v29, -1, -1);
    MEMORY[0x23B7F5254](v28, -1, -1);

    sub_236465A18(v37, type metadata accessor for V1Command);
    v32 = v38;
  }
  else
  {
    v34 = *(_QWORD *)(v0 + 152);
    v33 = *(_QWORD *)(v0 + 160);
    v35 = *(_QWORD *)(v0 + 112);

    sub_236465998(v34, &qword_2563E84E0);
    sub_236465A18(v35, type metadata accessor for V1Command);
    v32 = v33;
  }
  sub_236465998(v32, &qword_2563E84E0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23658ACFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  v3[19] = type metadata accessor for V1Command.Response(0);
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  type metadata accessor for V1Command.Request(0);
  v3[23] = swift_task_alloc();
  v3[24] = type metadata accessor for V1Command(0);
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23658ADD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int EnumCaseMultiPayload;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;

  if (qword_2563E4350 != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = sub_2365AFC00();
  *(_QWORD *)(v0 + 224) = __swift_project_value_buffer(v3, (uint64_t)qword_2563ECF78);
  sub_23648DFF8(v2, v1, type metadata accessor for V1Command);
  v4 = sub_2365AFBE8();
  v5 = sub_2365B038C();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 216);
  if (v6)
  {
    v8 = *(_QWORD *)(v0 + 208);
    v9 = (uint8_t *)swift_slowAlloc();
    v41 = swift_slowAlloc();
    v10 = v41;
    *(_DWORD *)v9 = 136315138;
    sub_23648DFF8(v7, v8, type metadata accessor for V1Command);
    v11 = sub_2365B0080();
    *(_QWORD *)(v0 + 120) = sub_236468D88(v11, v12, &v41);
    sub_2365B04A0();
    swift_bridgeObjectRelease();
    sub_236465A18(v7, type metadata accessor for V1Command);
    _os_log_impl(&dword_23644B000, v4, v5, "Received incoming V1 command: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v10, -1, -1);
    MEMORY[0x23B7F5254](v9, -1, -1);
  }
  else
  {
    sub_236465A18(*(_QWORD *)(v0 + 216), type metadata accessor for V1Command);
  }

  sub_23648DFF8(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 200), type metadata accessor for V1Command);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v14 = *(_QWORD *)(v0 + 168);
      v15 = *(_QWORD *)(v0 + 176);
      sub_23646591C(*(_QWORD *)(v0 + 200), v15, type metadata accessor for V1Command.Response);
      sub_23648DFF8(v15, v14, type metadata accessor for V1Command.Response);
      v16 = sub_2365AFBE8();
      v17 = sub_2365B0398();
      v18 = os_log_type_enabled(v16, v17);
      v20 = *(_QWORD *)(v0 + 168);
      v19 = *(_QWORD *)(v0 + 176);
      if (v18)
      {
        v21 = *(_QWORD *)(v0 + 160);
        v22 = (uint8_t *)swift_slowAlloc();
        v23 = swift_slowAlloc();
        v41 = v23;
        *(_DWORD *)v22 = 136315138;
        sub_23648DFF8(v20, v21, type metadata accessor for V1Command.Response);
        v24 = sub_2365B0080();
        *(_QWORD *)(v0 + 80) = sub_236468D88(v24, v25, &v41);
        sub_2365B04A0();
        swift_bridgeObjectRelease();
        sub_236465A18(v20, type metadata accessor for V1Command.Response);
        _os_log_impl(&dword_23644B000, v16, v17, "Received an unexpected response instead of request: %s", v22, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x23B7F5254](v23, -1, -1);
        MEMORY[0x23B7F5254](v22, -1, -1);

      }
      else
      {

        sub_236465A18(v20, type metadata accessor for V1Command.Response);
      }
      sub_236465A18(v19, type metadata accessor for V1Command.Response);
      v38 = *(_QWORD *)(v0 + 128);
      *(_QWORD *)(v38 + 8) = 0;
      *(_QWORD *)(v38 + 16) = 0;
      *(_QWORD *)v38 = 2;
      *(_BYTE *)(v38 + 24) = 2;
    }
    else
    {
      v28 = *(_QWORD *)(v0 + 200);
      v29 = *(_QWORD *)v28;
      v30 = *(_QWORD *)(v28 + 8);
      v31 = *(_QWORD *)(v28 + 16);
      v32 = *(_BYTE *)(v28 + 24);
      sub_23653E4D8(*(_QWORD *)v28, v30, v31, v32);
      sub_23653E4D8(v29, v30, v31, v32);
      v33 = sub_2365AFBE8();
      v34 = sub_2365B0398();
      if (os_log_type_enabled(v33, v34))
      {
        v35 = (uint8_t *)swift_slowAlloc();
        v40 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v35 = 138412290;
        sub_236595A90();
        swift_allocError();
        *(_QWORD *)v36 = v29;
        *(_QWORD *)(v36 + 8) = v30;
        *(_QWORD *)(v36 + 16) = v31;
        *(_BYTE *)(v36 + 24) = v32;
        sub_23653E4D8(v29, v30, v31, v32);
        v37 = _swift_stdlib_bridgeErrorToNSError();
        *(_QWORD *)(v0 + 96) = v37;
        sub_2365B04A0();
        *v40 = v37;
        sub_23653E4F8(v29, v30, v31, v32);
        sub_23653E4F8(v29, v30, v31, v32);
        _os_log_impl(&dword_23644B000, v33, v34, "Received an unexpected failure as a request: %@", v35, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9960);
        swift_arrayDestroy();
        MEMORY[0x23B7F5254](v40, -1, -1);
        MEMORY[0x23B7F5254](v35, -1, -1);

        sub_23653E4F8(v29, v30, v31, v32);
      }
      else
      {
        sub_23653E4F8(v29, v30, v31, v32);
        sub_23653E4F8(v29, v30, v31, v32);
        sub_23653E4F8(v29, v30, v31, v32);

      }
      v39 = *(_QWORD *)(v0 + 128);
      *(_QWORD *)(v39 + 8) = 0;
      *(_QWORD *)(v39 + 16) = 0;
      *(_QWORD *)v39 = 3;
      *(_BYTE *)(v39 + 24) = 2;
    }
    swift_storeEnumTagMultiPayload();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_23646591C(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184), type metadata accessor for V1Command.Request);
    v26 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 232) = v26;
    *v26 = v0;
    v26[1] = sub_23658B450;
    return sub_23658BA20(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 184));
  }
}

uint64_t sub_23658B450()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23658B4B4()
{
  uint64_t v0;

  sub_236465A18(*(_QWORD *)(v0 + 184), type metadata accessor for V1Command.Request);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23658B554()
{
  uint64_t v0;
  void *v1;
  id v2;
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  void *v19;
  uint8_t *v20;
  _QWORD *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD *v35;
  __int128 v36;
  uint64_t v37;
  char v38;

  v1 = *(void **)(v0 + 240);
  *(_QWORD *)(v0 + 72) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542A8310);
  v3 = swift_dynamicCast();
  v4 = *(void **)(v0 + 240);
  if ((v3 & 1) != 0)
  {

    v5 = *(_QWORD *)(v0 + 16);
    v6 = *(_QWORD *)(v0 + 24);
    v7 = *(_QWORD *)(v0 + 32);
    v8 = *(_BYTE *)(v0 + 40);
    sub_23653E4D8(v5, v6, v7, v8);
    sub_23653E4D8(v5, v6, v7, v8);
    v9 = sub_2365AFBE8();
    v10 = sub_2365B0398();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v35 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v11 = 138412290;
      sub_236595A90();
      swift_allocError();
      *(_QWORD *)v12 = v5;
      *(_QWORD *)(v12 + 8) = v6;
      *(_QWORD *)(v12 + 16) = v7;
      *(_BYTE *)(v12 + 24) = v8;
      sub_23653E4D8(v5, v6, v7, v8);
      v13 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 112) = v13;
      sub_2365B04A0();
      *v35 = v13;
      sub_23653E4F8(v5, v6, v7, v8);
      sub_23653E4F8(v5, v6, v7, v8);
      _os_log_impl(&dword_23644B000, v9, v10, "Failed to receive request with V1 command error: %@", v11, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9960);
      swift_arrayDestroy();
      MEMORY[0x23B7F5254](v35, -1, -1);
      MEMORY[0x23B7F5254](v11, -1, -1);

    }
    else
    {

      sub_23653E4F8(v5, v6, v7, v8);
      sub_23653E4F8(v5, v6, v7, v8);
    }
    v24 = *(_QWORD *)(v0 + 128);
    sub_236465A18(*(_QWORD *)(v0 + 184), type metadata accessor for V1Command.Request);
    *(_QWORD *)v24 = v5;
    *(_QWORD *)(v24 + 8) = v6;
    *(_QWORD *)(v24 + 16) = v7;
    *(_BYTE *)(v24 + 24) = v8;
    swift_storeEnumTagMultiPayload();

  }
  else
  {

    v14 = v4;
    v15 = v4;
    v16 = sub_2365AFBE8();
    v17 = sub_2365B0398();
    v18 = os_log_type_enabled(v16, v17);
    v19 = *(void **)(v0 + 240);
    if (v18)
    {
      v20 = (uint8_t *)swift_slowAlloc();
      v21 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v20 = 138412290;
      v22 = v19;
      v23 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 104) = v23;
      sub_2365B04A0();
      *v21 = v23;

      _os_log_impl(&dword_23644B000, v16, v17, "Failed to receive request with error: %@", v20, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9960);
      swift_arrayDestroy();
      MEMORY[0x23B7F5254](v21, -1, -1);
      MEMORY[0x23B7F5254](v20, -1, -1);
    }
    else
    {

    }
    v25 = *(void **)(v0 + 240);
    v26 = *(_QWORD *)(v0 + 184);
    v27 = *(_QWORD *)(v0 + 128);

    swift_getErrorValue();
    v28 = *(_QWORD *)(v0 + 48);
    v29 = *(_QWORD *)(v0 + 56);
    v30 = *(_QWORD *)(v29 - 8);
    v31 = swift_task_alloc();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v31, v28, v29);
    Error.into()(v29, (uint64_t)&v36);

    sub_236465A18(v26, type metadata accessor for V1Command.Request);
    swift_task_dealloc();
    v32 = v37;
    v33 = v38;
    *(_OWORD *)v27 = v36;
    *(_QWORD *)(v27 + 16) = v32;
    *(_BYTE *)(v27 + 24) = v33;
    swift_storeEnumTagMultiPayload();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23658BA20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[59] = a2;
  v3[60] = v2;
  v3[58] = a1;
  v3[61] = type metadata accessor for V1Command.Request(0);
  v3[62] = swift_task_alloc();
  v3[63] = swift_task_alloc();
  v3[64] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23658BA9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  int *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD *v33;
  uint64_t (*v34)(_QWORD, _QWORD, _QWORD);
  int *v35;
  uint64_t v36;

  if (qword_2563E4350 != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 512);
  v2 = *(_QWORD *)(v0 + 472);
  v3 = sub_2365AFC00();
  __swift_project_value_buffer(v3, (uint64_t)qword_2563ECF78);
  sub_23648DFF8(v2, v1, type metadata accessor for V1Command.Request);
  v4 = sub_2365AFBE8();
  v5 = sub_2365B038C();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 512);
  if (v6)
  {
    v8 = *(_QWORD *)(v0 + 504);
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v36 = v10;
    *(_DWORD *)v9 = 136315138;
    sub_23648DFF8(v7, v8, type metadata accessor for V1Command.Request);
    v11 = sub_2365B0080();
    *(_QWORD *)(v0 + 456) = sub_236468D88(v11, v12, &v36);
    sub_2365B04A0();
    swift_bridgeObjectRelease();
    sub_236465A18(v7, type metadata accessor for V1Command.Request);
    _os_log_impl(&dword_23644B000, v4, v5, "Received incoming V1 request: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v10, -1, -1);
    MEMORY[0x23B7F5254](v9, -1, -1);
  }
  else
  {
    sub_236465A18(*(_QWORD *)(v0 + 512), type metadata accessor for V1Command.Request);
  }

  sub_23648DFF8(*(_QWORD *)(v0 + 472), *(_QWORD *)(v0 + 496), type metadata accessor for V1Command.Request);
  if (swift_getEnumCaseMultiPayload())
  {
    v34 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))(**(int **)(*(_QWORD *)(v0 + 480) + 208)
                                                         + *(_QWORD *)(*(_QWORD *)(v0 + 480) + 208));
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 536) = v13;
    *v13 = v0;
    v13[1] = sub_23658BED4;
    return v34(*(_QWORD *)(v0 + 464), *(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 472));
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 496);
    v16 = *(_QWORD *)(v0 + 480);
    v18 = *(_OWORD *)(v15 + 16);
    v17 = *(_OWORD *)(v15 + 32);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)v15;
    *(_OWORD *)(v0 + 32) = v18;
    *(_OWORD *)(v0 + 48) = v17;
    v19 = *(_OWORD *)(v15 + 96);
    v21 = *(_OWORD *)(v15 + 48);
    v20 = *(_OWORD *)(v15 + 64);
    *(_OWORD *)(v0 + 96) = *(_OWORD *)(v15 + 80);
    *(_OWORD *)(v0 + 112) = v19;
    *(_OWORD *)(v0 + 64) = v21;
    *(_OWORD *)(v0 + 80) = v20;
    v23 = *(_OWORD *)(v15 + 128);
    v22 = *(_OWORD *)(v15 + 144);
    v24 = *(_QWORD *)(v15 + 160);
    v25 = *(_OWORD *)(v15 + 112);
    *(_QWORD *)(v0 + 176) = v24;
    *(_OWORD *)(v0 + 144) = v23;
    *(_OWORD *)(v0 + 160) = v22;
    *(_OWORD *)(v0 + 128) = v25;
    v26 = *(int **)(v16 + OBJC_IVAR____TtC12AppleIDSetup13CommandRouter_handshakeHandler);
    v27 = *(_OWORD *)(v0 + 144);
    v28 = *(_OWORD *)(v0 + 160);
    v29 = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 296) = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 312) = v27;
    *(_OWORD *)(v0 + 328) = v28;
    *(_QWORD *)(v0 + 344) = v24;
    v30 = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 232) = *(_OWORD *)(v0 + 64);
    v31 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 248) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 264) = v31;
    *(_OWORD *)(v0 + 280) = v29;
    v32 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 184) = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v0 + 200) = v32;
    *(_OWORD *)(v0 + 216) = v30;
    v35 = (int *)((char *)v26 + *v26);
    v33 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 520) = v33;
    *v33 = v0;
    v33[1] = sub_23658BDB8;
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t))v35)(v0 + 352, *(_QWORD *)(v0 + 480), v0 + 184);
  }
}

uint64_t sub_23658BDB8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 528) = v0;
  swift_task_dealloc();
  if (!v0)
    sub_2365258E4((uint64_t *)(v2 + 16));
  return swift_task_switch();
}

uint64_t sub_23658BE2C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v1 = *(_QWORD *)(v0 + 464);
  v2 = *(_BYTE *)(v0 + 353);
  v3 = *(_BYTE *)(v0 + 376);
  v4 = *(_BYTE *)(v0 + 377);
  v5 = *(_BYTE *)(v0 + 448);
  v6 = *(_OWORD *)(v0 + 360);
  v7 = *(_OWORD *)(v0 + 384);
  v8 = *(_OWORD *)(v0 + 400);
  v9 = *(_OWORD *)(v0 + 416);
  v10 = *(_OWORD *)(v0 + 432);
  *(_BYTE *)v1 = *(_BYTE *)(v0 + 352);
  *(_BYTE *)(v1 + 1) = v2;
  *(_OWORD *)(v1 + 8) = v6;
  *(_BYTE *)(v1 + 24) = v3;
  *(_BYTE *)(v1 + 25) = v4;
  *(_OWORD *)(v1 + 32) = v7;
  *(_OWORD *)(v1 + 48) = v8;
  *(_OWORD *)(v1 + 64) = v9;
  *(_OWORD *)(v1 + 80) = v10;
  *(_BYTE *)(v1 + 96) = v5;
  type metadata accessor for V1Command.Response(0);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23658BED4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 544) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23658BF38()
{
  uint64_t v0;

  sub_236465A18(*(_QWORD *)(v0 + 496), type metadata accessor for V1Command.Request);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23658BF90()
{
  uint64_t v0;

  sub_2365258E4((uint64_t *)(v0 + 16));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23658BFE8()
{
  uint64_t v0;

  sub_236465A18(*(_QWORD *)(v0 + 496), type metadata accessor for V1Command.Request);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23658C048(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)(v3 + 840) = v2;
  *(_QWORD *)(v3 + 832) = a1;
  v4 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v3 + 144) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v3 + 160) = v4;
  *(_QWORD *)(v3 + 176) = *(_QWORD *)(a2 + 160);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v3 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v3 + 96) = v5;
  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v3 + 112) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v3 + 128) = v6;
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v3 + 32) = v7;
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v3 + 64) = v8;
  return swift_task_switch();
}

uint64_t sub_23658C094()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint8_t *v29;
  uint64_t v30;
  unint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  unint64_t v59;
  int *v60;
  _QWORD *v61;
  unsigned int v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  os_log_type_t type;
  NSObject *log;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char v86;
  uint64_t v87;
  uint64_t (*v88)(void);
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  char v94;
  char v95;
  uint64_t v96;

  v1 = (_OWORD *)(v0 + 16);
  if (qword_2563E4350 != -1)
    swift_once();
  v2 = sub_2365AFC00();
  *(_QWORD *)(v0 + 848) = __swift_project_value_buffer(v2, (uint64_t)qword_2563ECF78);
  sub_236525830((uint64_t *)(v0 + 16));
  sub_236525830((uint64_t *)(v0 + 16));
  v3 = sub_2365AFBE8();
  v4 = sub_2365B038C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    *(_DWORD *)v5 = 136315138;
    *(_QWORD *)&v90 = v6;
    v7 = *(_OWORD *)(v0 + 160);
    *(_OWORD *)(v0 + 480) = *(_OWORD *)(v0 + 144);
    *(_OWORD *)(v0 + 496) = v7;
    *(_QWORD *)(v0 + 512) = *(_QWORD *)(v0 + 176);
    v8 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 416) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 432) = v8;
    v9 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 464) = v9;
    v10 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 352) = *v1;
    *(_OWORD *)(v0 + 368) = v10;
    v11 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 384) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 400) = v11;
    sub_236525830((uint64_t *)(v0 + 16));
    v12 = sub_2365B0080();
    *(_QWORD *)(v0 + 800) = sub_236468D88(v12, v13, (uint64_t *)&v90);
    sub_2365B04A0();
    swift_bridgeObjectRelease();
    sub_2365258E4((uint64_t *)(v0 + 16));
    sub_2365258E4((uint64_t *)(v0 + 16));
    _os_log_impl(&dword_23644B000, v3, v4, "Received handshake request: %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v6, -1, -1);
    MEMORY[0x23B7F5254](v5, -1, -1);
  }
  else
  {
    sub_2365258E4((uint64_t *)(v0 + 16));
    sub_2365258E4((uint64_t *)(v0 + 16));
  }

  v14 = *(unsigned __int8 *)(v0 + 16);
  *(_BYTE *)(v0 + 953) = v14;
  if (v14 == 1 && *(_QWORD *)(*(_QWORD *)(v0 + 840) + 248))
  {
    v15 = sub_2365AFBE8();
    v16 = sub_2365B038C();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_23644B000, v15, v16, "Request is a keep alive and handshake has been received before, keeping alive", v17, 2u);
      MEMORY[0x23B7F5254](v17, -1, -1);
    }
    v18 = *(_QWORD *)(v0 + 832);

    *(_WORD *)v18 = 257;
    *(_QWORD *)(v18 + 8) = 0;
    *(_QWORD *)(v18 + 16) = 0;
    *(_WORD *)(v18 + 24) = 256;
    *(_OWORD *)(v18 + 32) = 0u;
    *(_OWORD *)(v18 + 48) = 0u;
    *(_OWORD *)(v18 + 64) = 0u;
    *(_OWORD *)(v18 + 80) = 0u;
    *(_BYTE *)(v18 + 96) = 0;
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 24);
    v20 = *(_QWORD *)(v0 + 32);
    *(_QWORD *)(v0 + 856) = v19;
    *(_QWORD *)(v0 + 864) = v20;
    v21 = *(_QWORD *)(v0 + 40);
    v22 = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v0 + 872) = v21;
    *(_QWORD *)(v0 + 880) = v22;
    v23 = *(_QWORD *)(v0 + 56);
    v24 = *(_QWORD *)(v0 + 64);
    *(_QWORD *)(v0 + 888) = v23;
    *(_QWORD *)(v0 + 896) = v24;
    v25 = *(_QWORD *)(v0 + 72);
    v26 = *(_QWORD *)(v0 + 80);
    *(_QWORD *)(v0 + 904) = v25;
    *(_QWORD *)(v0 + 912) = v26;
    v27 = *(_BYTE *)(v0 + 88);
    *(_BYTE *)(v0 + 954) = v27;
    if (v20)
    {
      v83 = v19;
      v28 = v27;
      v84 = v21;
      sub_23648DBC0(v19, v20, v21, v22, v23, v24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23648DC24(v23, v24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23648DC24(v23, v24);
      log = sub_2365AFBE8();
      type = sub_2365B0380();
      if (os_log_type_enabled(log, type))
      {
        v29 = (uint8_t *)swift_slowAlloc();
        v80 = swift_slowAlloc();
        *(_DWORD *)v29 = 136315138;
        v96 = v80;
        *(_QWORD *)&v90 = v83;
        *((_QWORD *)&v90 + 1) = v20;
        *(_QWORD *)&v91 = v84;
        *((_QWORD *)&v91 + 1) = v22;
        *(_QWORD *)&v92 = v23;
        *((_QWORD *)&v92 + 1) = v24;
        *(_QWORD *)&v93 = v25;
        *((_QWORD *)&v93 + 1) = v26;
        v94 = v28 & 1;
        v30 = IdMSAccount.DeviceInfo.description.getter();
        *(_QWORD *)(v0 + 816) = sub_236468D88(v30, v31, &v96);
        sub_2365B04A0();
        swift_bridgeObjectRelease();
        sub_23648DCEC(v83, v20, v84, v22, v23, v24);
        sub_23648DCEC(v83, v20, v84, v22, v23, v24);
        _os_log_impl(&dword_23644B000, log, type, "Received new initial handshake request from device with info: %s", v29, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x23B7F5254](v80, -1, -1);
        MEMORY[0x23B7F5254](v29, -1, -1);
      }
      else
      {
        sub_23648DCEC(v83, v20, v84, v22, v23, v24);
        sub_23648DCEC(v83, v20, v84, v22, v23, v24);
      }

      sub_236525830((uint64_t *)(v0 + 16));
      swift_retain();
      sub_236525830((uint64_t *)(v0 + 16));
      swift_retain();
      v43 = sub_2365AFBE8();
      v44 = sub_2365B038C();
      v45 = os_log_type_enabled(v43, v44);
      v46 = *(_QWORD *)(v0 + 840);
      if (v45)
      {
        v47 = swift_slowAlloc();
        v87 = swift_slowAlloc();
        *(_QWORD *)&v90 = v87;
        *(_DWORD *)v47 = 136315394;
        if (*(_QWORD *)(v46 + OBJC_IVAR____TtC12AppleIDSetup13CommandRouter_signInPreflightHelper))
        {
          swift_retain();
          sub_2365AFAC8();
          v48 = *(_QWORD *)(v0 + 728);
          if (v48)
            v49 = *(_QWORD *)(v0 + 736);
          else
            v49 = 0;
          swift_release();
        }
        else
        {
          v48 = 0;
          v49 = 0;
        }
        *(_QWORD *)(v0 + 744) = v48;
        *(_QWORD *)(v0 + 752) = v49;
        __swift_instantiateConcreteTypeFromMangledName(&qword_2563ED478);
        v51 = sub_2365B0080();
        *(_QWORD *)(v0 + 792) = sub_236468D88(v51, v52, (uint64_t *)&v90);
        sub_2365B04A0();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v47 + 12) = 2080;
        v53 = *(_OWORD *)(v0 + 160);
        *(_OWORD *)(v0 + 648) = *(_OWORD *)(v0 + 144);
        *(_OWORD *)(v0 + 664) = v53;
        *(_QWORD *)(v0 + 680) = *(_QWORD *)(v0 + 176);
        v54 = *(_OWORD *)(v0 + 96);
        *(_OWORD *)(v0 + 584) = *(_OWORD *)(v0 + 80);
        *(_OWORD *)(v0 + 600) = v54;
        v55 = *(_OWORD *)(v0 + 128);
        *(_OWORD *)(v0 + 616) = *(_OWORD *)(v0 + 112);
        *(_OWORD *)(v0 + 632) = v55;
        v56 = *(_OWORD *)(v0 + 32);
        *(_OWORD *)(v0 + 520) = *v1;
        *(_OWORD *)(v0 + 536) = v56;
        v57 = *(_OWORD *)(v0 + 64);
        *(_OWORD *)(v0 + 552) = *(_OWORD *)(v0 + 48);
        *(_OWORD *)(v0 + 568) = v57;
        sub_236525830((uint64_t *)(v0 + 16));
        v58 = sub_2365B0080();
        *(_QWORD *)(v0 + 808) = sub_236468D88(v58, v59, (uint64_t *)&v90);
        sub_2365B04A0();
        swift_bridgeObjectRelease();
        sub_2365258E4((uint64_t *)(v0 + 16));
        sub_2365258E4((uint64_t *)(v0 + 16));
        _os_log_impl(&dword_23644B000, v43, v44, "Calling signInRequestHandler %s, with request: %s", (uint8_t *)v47, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x23B7F5254](v87, -1, -1);
        MEMORY[0x23B7F5254](v47, -1, -1);

      }
      else
      {
        swift_release_n();
        sub_2365258E4((uint64_t *)(v0 + 16));
        sub_2365258E4((uint64_t *)(v0 + 16));

      }
      if (*(_QWORD *)(*(_QWORD *)(v0 + 840) + OBJC_IVAR____TtC12AppleIDSetup13CommandRouter_signInPreflightHelper))
      {
        swift_retain();
        sub_2365AFAC8();
        v60 = *(int **)(v0 + 712);
        *(_QWORD *)(v0 + 920) = v60;
        if (v60)
        {
          *(_QWORD *)(v0 + 928) = *(_QWORD *)(v0 + 720);
          sub_23645063C((uint64_t)v60);
          swift_release();
          *(_QWORD *)(v0 + 784) = *(_QWORD *)(v0 + 176);
          v88 = (uint64_t (*)(void))((char *)v60 + *v60);
          v61 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 936) = v61;
          *v61 = v0;
          v61[1] = sub_23658CC4C;
          return v88();
        }
        swift_release();
      }
      v63 = *(unsigned __int8 *)(v0 + 18);
      if (v63 <= 1)
        LOBYTE(v63) = 1;
      v86 = v63;
      v64 = sub_2365AFBE8();
      v65 = sub_2365B038C();
      if (os_log_type_enabled(v64, v65))
      {
        v66 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v66 = 16777472;
        *(_BYTE *)(v0 + 952) = v86;
        sub_2365B04A0();
        _os_log_impl(&dword_23644B000, v64, v65, "Accepting handshake with compatible version: %hhu", v66, 5u);
        MEMORY[0x23B7F5254](v66, -1, -1);
      }
      v67 = *(_BYTE *)(v0 + 954);
      v89 = *(_QWORD *)(v0 + 912);
      v68 = *(_QWORD *)(v0 + 904);
      v69 = *(_QWORD *)(v0 + 896);
      v70 = *(_QWORD *)(v0 + 888);
      v71 = v64;
      v72 = *(_QWORD *)(v0 + 880);
      v73 = *(_QWORD *)(v0 + 872);
      v74 = *(_QWORD *)(v0 + 864);
      v75 = *(_QWORD *)(v0 + 856);
      v85 = *(_BYTE *)(v0 + 953);
      v76 = *(_QWORD *)(v0 + 832);

      *(_QWORD *)&v90 = v75;
      *((_QWORD *)&v90 + 1) = v74;
      *(_QWORD *)&v91 = v73;
      *((_QWORD *)&v91 + 1) = v72;
      *(_QWORD *)&v92 = v70;
      *((_QWORD *)&v92 + 1) = v69;
      *(_QWORD *)&v93 = v68;
      *((_QWORD *)&v93 + 1) = v89;
      v94 = v67 & 1;
      v95 = 0;
      sub_236587264((uint64_t)&v90);
      sub_23648DCEC(v75, v74, v73, v72, v70, v69);
      sub_236585D84();
      static IdMSAccount.DeviceInfo.current.getter((uint64_t)&v90);
      v77 = v94;
      *(_BYTE *)v76 = v85;
      *(_BYTE *)(v76 + 1) = 1;
      *(_QWORD *)(v76 + 8) = 0;
      *(_QWORD *)(v76 + 16) = 0;
      *(_BYTE *)(v76 + 24) = v86;
      *(_BYTE *)(v76 + 25) = 0;
      v78 = v91;
      *(_OWORD *)(v76 + 32) = v90;
      *(_OWORD *)(v76 + 48) = v78;
      v79 = v93;
      *(_OWORD *)(v76 + 64) = v92;
      *(_OWORD *)(v76 + 80) = v79;
      *(_BYTE *)(v76 + 96) = v77;
    }
    else
    {
      sub_236525830((uint64_t *)(v0 + 16));
      sub_236525830((uint64_t *)(v0 + 16));
      v32 = sub_2365AFBE8();
      v33 = sub_2365B0398();
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc();
        v35 = swift_slowAlloc();
        *(_DWORD *)v34 = 136315138;
        *(_QWORD *)&v90 = v35;
        v36 = *(_OWORD *)(v0 + 160);
        *(_OWORD *)(v0 + 312) = *(_OWORD *)(v0 + 144);
        *(_OWORD *)(v0 + 328) = v36;
        *(_QWORD *)(v0 + 344) = *(_QWORD *)(v0 + 176);
        v37 = *(_OWORD *)(v0 + 96);
        *(_OWORD *)(v0 + 248) = *(_OWORD *)(v0 + 80);
        *(_OWORD *)(v0 + 264) = v37;
        v38 = *(_OWORD *)(v0 + 128);
        *(_OWORD *)(v0 + 280) = *(_OWORD *)(v0 + 112);
        *(_OWORD *)(v0 + 296) = v38;
        v39 = *(_OWORD *)(v0 + 32);
        *(_OWORD *)(v0 + 184) = *v1;
        *(_OWORD *)(v0 + 200) = v39;
        v40 = *(_OWORD *)(v0 + 64);
        *(_OWORD *)(v0 + 216) = *(_OWORD *)(v0 + 48);
        *(_OWORD *)(v0 + 232) = v40;
        sub_236525830((uint64_t *)(v0 + 16));
        v41 = sub_2365B0080();
        *(_QWORD *)(v0 + 824) = sub_236468D88(v41, v42, (uint64_t *)&v90);
        sub_2365B04A0();
        swift_bridgeObjectRelease();
        sub_2365258E4((uint64_t *)(v0 + 16));
        sub_2365258E4((uint64_t *)(v0 + 16));
        _os_log_impl(&dword_23644B000, v32, v33, "REJECTION: Incoming handshake request did not contain expected device info: %s", v34, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x23B7F5254](v35, -1, -1);
        MEMORY[0x23B7F5254](v34, -1, -1);
      }
      else
      {
        sub_2365258E4((uint64_t *)(v0 + 16));
        sub_2365258E4((uint64_t *)(v0 + 16));
      }

      v50 = *(_QWORD *)(v0 + 832);
      *(_WORD *)v50 = 0;
      *(_QWORD *)(v50 + 8) = 0xD000000000000015;
      *(_QWORD *)(v50 + 16) = 0x80000002365CE450;
      *(_WORD *)(v50 + 24) = 256;
      *(_OWORD *)(v50 + 32) = 0u;
      *(_OWORD *)(v50 + 48) = 0u;
      *(_OWORD *)(v50 + 64) = 0u;
      *(_OWORD *)(v50 + 80) = 0u;
      *(_BYTE *)(v50 + 96) = 0;
    }
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23658CC4C()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = *v1;
  v3 = (*v1)[115];
  (*v1)[118] = v0;
  swift_task_dealloc();
  sub_236450690(v3);
  sub_236450690(v3);
  if (v0)
    sub_23648DCEC(v2[107], v2[108], v2[109], v2[110], v2[111], v2[112]);
  return swift_task_switch();
}

uint64_t sub_23658CD14()
{
  uint64_t v0;
  char v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  char v19;
  char v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;
  char v27;

  if (*(unsigned __int8 *)(v0 + 18) <= 1u)
    v1 = 1;
  else
    v1 = *(_BYTE *)(v0 + 18);
  v2 = sub_2365AFBE8();
  v3 = sub_2365B038C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v4 = 16777472;
    *(_BYTE *)(v0 + 952) = v1;
    sub_2365B04A0();
    _os_log_impl(&dword_23644B000, v2, v3, "Accepting handshake with compatible version: %hhu", v4, 5u);
    MEMORY[0x23B7F5254](v4, -1, -1);
  }
  v5 = *(_BYTE *)(v0 + 954);
  v21 = *(_QWORD *)(v0 + 912);
  v6 = *(_QWORD *)(v0 + 904);
  v7 = *(_QWORD *)(v0 + 896);
  v20 = v1;
  v8 = *(_QWORD *)(v0 + 888);
  v9 = v2;
  v10 = *(_QWORD *)(v0 + 880);
  v11 = *(_QWORD *)(v0 + 872);
  v12 = *(_QWORD *)(v0 + 864);
  v13 = *(_QWORD *)(v0 + 856);
  v19 = *(_BYTE *)(v0 + 953);
  v14 = *(_QWORD *)(v0 + 832);

  *(_QWORD *)&v22 = v13;
  *((_QWORD *)&v22 + 1) = v12;
  *(_QWORD *)&v23 = v11;
  *((_QWORD *)&v23 + 1) = v10;
  *(_QWORD *)&v24 = v8;
  *((_QWORD *)&v24 + 1) = v7;
  *(_QWORD *)&v25 = v6;
  *((_QWORD *)&v25 + 1) = v21;
  v26 = v5 & 1;
  v27 = 0;
  sub_236587264((uint64_t)&v22);
  sub_23648DCEC(v13, v12, v11, v10, v8, v7);
  sub_236585D84();
  static IdMSAccount.DeviceInfo.current.getter((uint64_t)&v22);
  v15 = v26;
  *(_BYTE *)v14 = v19;
  *(_BYTE *)(v14 + 1) = 1;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = 0;
  *(_BYTE *)(v14 + 24) = v20;
  *(_BYTE *)(v14 + 25) = 0;
  v16 = v23;
  *(_OWORD *)(v14 + 32) = v22;
  *(_OWORD *)(v14 + 48) = v16;
  v17 = v25;
  *(_OWORD *)(v14 + 64) = v24;
  *(_OWORD *)(v14 + 80) = v17;
  *(_BYTE *)(v14 + 96) = v15;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23658CEDC()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  void *v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[32];

  v1 = *(void **)(v0 + 944);
  v20 = (uint64_t)v1;
  v21 = 0u;
  v22 = 0u;
  memset(v23, 0, 25);
  v23[25] = 1;
  v2 = v1;
  sub_236587264((uint64_t)&v20);

  v3 = v1;
  v4 = v1;
  v5 = sub_2365AFBE8();
  v6 = sub_2365B0398();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(void **)(v0 + 944);
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v20 = v9;
    *(_DWORD *)v8 = 136315138;
    *(_QWORD *)(v0 + 760) = v7;
    v10 = v7;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542A8310);
    v11 = sub_2365B0080();
    *(_QWORD *)(v0 + 768) = sub_236468D88(v11, v12, &v20);
    sub_2365B04A0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_23644B000, v5, v6, "REJECTION: Incoming handshake request failed due to error: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v9, -1, -1);
    MEMORY[0x23B7F5254](v8, -1, -1);
  }
  else
  {
    v13 = *(void **)(v0 + 944);

  }
  v14 = *(void **)(v0 + 944);
  v15 = *(_QWORD *)(v0 + 832);
  swift_getErrorValue();
  v16 = sub_2365B098C();
  v18 = v17;

  *(_WORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = v16;
  *(_QWORD *)(v15 + 16) = v18;
  *(_WORD *)(v15 + 24) = 256;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_OWORD *)(v15 + 80) = 0u;
  *(_BYTE *)(v15 + 96) = 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t *CommandRouter.deinit()
{
  uint64_t *v0;

  sub_23644F52C(v0[15], v0[16]);
  swift_bridgeObjectRelease();
  swift_release();
  sub_236450690(v0[28]);
  sub_23648DCEC(v0[30], v0[31], v0[32], v0[33], v0[34], v0[35]);
  sub_236465998((uint64_t)v0 + OBJC_IVAR____TtC12AppleIDSetup13CommandRouter_handshakeContinuation, &qword_2563ED070);
  swift_release();
  swift_release();
  sub_236465998((uint64_t)v0 + OBJC_IVAR____TtC12AppleIDSetup13CommandRouter__activeTransport, &qword_2563ECF98);
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t CommandRouter.__deallocating_deinit()
{
  CommandRouter.deinit();
  return swift_defaultActor_deallocate();
}

uint64_t CommandRouter.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23658D214()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23658D238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v8;
  _QWORD *v9;

  v8 = *(int **)(v3 + 16);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_2563ECFE0 + dword_2563ECFE0))(a1, a2, a3, v8);
}

uint64_t sub_23658D2C0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v8;
  _QWORD *v9;

  v8 = *(int **)(v3 + 16);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t *, uint64_t, int *))((char *)&dword_2563ECFF8 + dword_2563ECFF8))(a1, a2, a3, v8);
}

uint64_t sub_23658D348()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23658D36C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_23647E274;
  return sub_2365837B4(a1, a2, v2);
}

uint64_t sub_23658D3D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_2563ED020 + dword_2563ED020))(a1, a2, v6);
}

uint64_t sub_23658D450()
{
  return sub_236583C70();
}

uint64_t sub_23658D458(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23647E274;
  return sub_236583D94(a1, v1);
}

uint64_t sub_23658D4AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = sub_2365B062C();
  *(_QWORD *)(v6 + 64) = v12;
  *(_QWORD *)(v6 + 72) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 80) = swift_task_alloc();
  *(_QWORD *)(v6 + 88) = swift_task_alloc();
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch();
}

uint64_t sub_23658D550()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  _QWORD *v5;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  sub_2365B0644();
  sub_23644F0B8(&qword_2563ED4A0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6E10], MEMORY[0x24BEE6E20]);
  sub_2365B0950();
  sub_23644F0B8(&qword_2563ED4A8, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6DC8], MEMORY[0x24BEE6E00]);
  sub_2365B0650();
  v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v4;
  v4(v1, v2);
  v5 = (_QWORD *)swift_task_alloc();
  v0[13] = v5;
  *v5 = v0;
  v5[1] = sub_23658D668;
  return sub_2365B095C();
}

uint64_t sub_23658D668()
{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v3 = *(_QWORD *)(*v1 + 88);
  v4 = *(_QWORD *)(*v1 + 64);
  v5 = *v1;
  *(_QWORD *)(v5 + 112) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_23658D714()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for CommandRouter.HandshakeFailure(uint64_t a1)
{
  return sub_2364905D8(a1, qword_2563ED440);
}

unint64_t sub_23658D764()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2563ED068;
  if (!qword_2563ED068)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2563E84E0);
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for Message<A>, v1);
    atomic_store(result, (unint64_t *)&qword_2563ED068);
  }
  return result;
}

unint64_t sub_23658D7B4()
{
  unint64_t result;

  result = qword_2563ED078;
  if (!qword_2563ED078)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for CommandRouter.Role, &type metadata for CommandRouter.Role);
    atomic_store(result, (unint64_t *)&qword_2563ED078);
  }
  return result;
}

uint64_t sub_23658D800()
{
  return type metadata accessor for CommandRouter(0);
}

uint64_t type metadata accessor for CommandRouter(uint64_t a1)
{
  return sub_2364905D8(a1, (uint64_t *)&unk_2563ED0A8);
}

void sub_23658D81C()
{
  unint64_t v0;

  sub_23658DB04();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for CommandRouter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CommandRouter.invalidationHandler.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of CommandRouter.invalidationHandler.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of CommandRouter.invalidationHandler.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of CommandRouter.activeTransport.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of CommandRouter.__allocating_init(for:selfAccountId:accountIDsByService:signInPreflightHelper:v1CommandHandler:handshakeHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 400))();
}

uint64_t dispatch thunk of CommandRouter.onInvalidation(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t dispatch thunk of CommandRouter.keepAliveInterval(_:enforceLimit:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 416))(a1, a2, a3, a4 & 1);
}

uint64_t dispatch thunk of CommandRouter.connectedDeviceInfo()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
}

uint64_t dispatch thunk of CommandRouter.register<A>(_:ownedBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v4 + 432)
                                                                   + *(_QWORD *)(*(_QWORD *)v4 + 432));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_23647E274;
  return v12(a1, a2, a3, a4);
}

uint64_t dispatch thunk of CommandRouter.performHandshake(forKeepingAlive:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 440) + *(_QWORD *)(*(_QWORD *)v1 + 440));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_236477420;
  return v6(a1);
}

uint64_t dispatch thunk of CommandRouter.invalidate()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 504))();
}

uint64_t dispatch thunk of CommandRouter.send<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v4 + 512)
                                                                   + *(_QWORD *)(*(_QWORD *)v4 + 512));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_23647E274;
  return v12(a1, a2, a3, a4);
}

void sub_23658DB04()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2563ED0F8[0])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2563ECFB0);
    v0 = sub_2365B047C();
    if (!v1)
      atomic_store(v0, qword_2563ED0F8);
  }
}

uint64_t storeEnumTagSinglePayload for CommandRouter.Role(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23658DBA8 + 4 * byte_2365C94B5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23658DBDC + 4 * byte_2365C94B0[v4]))();
}

uint64_t sub_23658DBDC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23658DBE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23658DBECLL);
  return result;
}

uint64_t sub_23658DBF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23658DC00);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23658DC04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23658DC0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CommandRouter.Role()
{
  return &type metadata for CommandRouter.Role;
}

uint64_t *initializeBufferWithCopyOfBuffer for CommandRouter.Failure(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int EnumCaseMultiPayload;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char *v20;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_2563E84E0);
    v8 = *((_QWORD *)v7 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v8 + 48))(a2, 4, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v10 = sub_2365AF9FC();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      *((_BYTE *)a1 + v7[9]) = *((_BYTE *)a2 + v7[9]);
      *(uint64_t *)((char *)a1 + v7[10]) = *(uint64_t *)((char *)a2 + v7[10]);
      v11 = v7[11];
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      type metadata accessor for V1Command(0);
      swift_bridgeObjectRetain();
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload != 2)
      {
        if (EnumCaseMultiPayload == 1)
        {
          type metadata accessor for V1Command.Response(0);
          v15 = (char *)&loc_23658DD6C + 4 * byte_2365C94BA[swift_getEnumCaseMultiPayload()];
          __asm { BR              X10 }
        }
        type metadata accessor for V1Command.Request(0);
        v20 = (char *)&loc_23658DE68 + 4 * word_2365C94C0[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      v16 = *(_QWORD *)v13;
      v17 = *((_QWORD *)v13 + 1);
      v18 = *((_QWORD *)v13 + 2);
      v19 = v13[24];
      sub_23653E4D8(v16, v17, v18, v19);
      *(_QWORD *)v12 = v16;
      *((_QWORD *)v12 + 1) = v17;
      *((_QWORD *)v12 + 2) = v18;
      v12[24] = v19;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v8 + 56))(a1, 0, 4, v7);
    }
  }
  return a1;
}

uint64_t destroy for CommandRouter.Failure(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E84E0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 4, v2);
  if (!(_DWORD)result)
  {
    v4 = sub_2365AF9FC();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
    swift_bridgeObjectRelease();
    v5 = a1 + *(int *)(v2 + 44);
    type metadata accessor for V1Command(0);
    result = swift_getEnumCaseMultiPayload();
    switch((_DWORD)result)
    {
      case 2:
        return sub_23653E4F8(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_BYTE *)(v5 + 24));
      case 1:
        type metadata accessor for V1Command.Response(0);
        result = swift_getEnumCaseMultiPayload();
        switch((int)result)
        {
          case 0:
            swift_bridgeObjectRelease();
            result = *(_QWORD *)(v5 + 40);
            if (result)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              result = *(_QWORD *)(v5 + 72);
              if (result)
              {
LABEL_29:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_30;
              }
            }
            break;
          case 1:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v6 = type metadata accessor for IdMSAccount();
            v7 = v5 + *(int *)(v6 + 20);
            v8 = sub_2365AF8D0();
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
            v9 = v5 + *(int *)(v6 + 24);
            sub_23645FAF8(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_QWORD *)(v9 + 16), *(_QWORD *)(v9 + 24), *(_QWORD *)(v9 + 32), *(_QWORD *)(v9 + 40), *(_QWORD *)(v9 + 48), *(_QWORD *)(v9 + 56), *(_QWORD *)(v9 + 64), *(_BYTE *)(v9 + 72));
            swift_bridgeObjectRelease();
            type metadata accessor for SignInCommand.Response(0);
LABEL_30:
            result = swift_bridgeObjectRelease();
            break;
          case 2:
            type metadata accessor for AnisetteCommand.Response();
            result = swift_getEnumCaseMultiPayload();
            switch((int)result)
            {
              case 0:
              case 1:
              case 2:
                v10 = &qword_2563E7050;
                goto LABEL_33;
              case 3:
              case 4:
                v10 = &qword_2563EB238;
                goto LABEL_33;
              case 5:
                v10 = &qword_2563EB240;
                goto LABEL_33;
              default:
                return result;
            }
          case 3:
            v10 = &qword_2563E6658;
LABEL_33:
            v22 = __swift_instantiateConcreteTypeFromMangledName(v10);
            result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v5, v22);
            break;
          case 4:
            result = sub_23648B8D8(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24));
            break;
          default:
            return result;
        }
        break;
      case 0:
        type metadata accessor for V1Command.Request(0);
        result = swift_getEnumCaseMultiPayload();
        switch((int)result)
        {
          case 0:
            if (*(_QWORD *)(v5 + 16))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (*(_QWORD *)(v5 + 48))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
            }
            if (*(_QWORD *)(v5 + 88))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            goto LABEL_30;
          case 1:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v11 = type metadata accessor for IdMSAccount();
            v12 = v5 + *(int *)(v11 + 20);
            v13 = sub_2365AF8D0();
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
            v14 = v5 + *(int *)(v11 + 24);
            sub_23645FAF8(*(_QWORD *)v14, *(_QWORD *)(v14 + 8), *(_QWORD *)(v14 + 16), *(_QWORD *)(v14 + 24), *(_QWORD *)(v14 + 32), *(_QWORD *)(v14 + 40), *(_QWORD *)(v14 + 48), *(_QWORD *)(v14 + 56), *(_QWORD *)(v14 + 64), *(_BYTE *)(v14 + 72));
            swift_bridgeObjectRelease();
            v15 = v5 + *(int *)(type metadata accessor for SignInCommand.Request(0) + 20);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
            v16 = *(_QWORD *)(v15 + 88);
            if (v16 >> 60 != 15)
              result = sub_236468D44(*(_QWORD *)(v15 + 80), v16);
            break;
          case 2:
            result = sub_23653D530(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_BYTE *)(v5 + 32));
            break;
          case 3:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v17 = type metadata accessor for IdMSAccount();
            v18 = v5 + *(int *)(v17 + 20);
            v19 = sub_2365AF8D0();
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
            v20 = v5 + *(int *)(v17 + 24);
            sub_23645FAF8(*(_QWORD *)v20, *(_QWORD *)(v20 + 8), *(_QWORD *)(v20 + 16), *(_QWORD *)(v20 + 24), *(_QWORD *)(v20 + 32), *(_QWORD *)(v20 + 40), *(_QWORD *)(v20 + 48), *(_QWORD *)(v20 + 56), *(_QWORD *)(v20 + 64), *(_BYTE *)(v20 + 72));
            swift_bridgeObjectRelease();
            v21 = v5 + *(int *)(type metadata accessor for AuthenticateCommand.Request(0) + 20);
            result = *(_QWORD *)(v21 + 8);
            if (result)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              result = *(_QWORD *)(v21 + 40);
              if (result)
                goto LABEL_29;
            }
            break;
          case 4:
            result = sub_23648C070(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56), *(_QWORD *)(v5 + 64), *(_QWORD *)(v5 + 72), *(_QWORD *)(v5 + 80), *(_BYTE *)(v5 + 88));
            break;
          default:
            return result;
        }
        break;
    }
  }
  return result;
}

char *initializeWithCopy for CommandRouter.Failure(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int EnumCaseMultiPayload;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char *v18;

  v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_2563E84E0);
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v7 + 48))(a2, 4, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = sub_2365AF9FC();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    a1[v6[9]] = a2[v6[9]];
    *(_QWORD *)&a1[v6[10]] = *(_QWORD *)&a2[v6[10]];
    v9 = v6[11];
    v10 = &a1[v9];
    v11 = &a2[v9];
    type metadata accessor for V1Command(0);
    swift_bridgeObjectRetain();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload != 2)
    {
      if (EnumCaseMultiPayload == 1)
      {
        type metadata accessor for V1Command.Response(0);
        v13 = (char *)&loc_23658EDF4 + 4 * byte_2365C94DA[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      type metadata accessor for V1Command.Request(0);
      v18 = (char *)&loc_23658EEF0 + 4 * word_2365C94E0[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v14 = *(_QWORD *)v11;
    v15 = *((_QWORD *)v11 + 1);
    v16 = *((_QWORD *)v11 + 2);
    v17 = v11[24];
    sub_23653E4D8(v14, v15, v16, v17);
    *(_QWORD *)v10 = v14;
    *((_QWORD *)v10 + 1) = v15;
    *((_QWORD *)v10 + 2) = v16;
    v10[24] = v17;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 4, v6);
  }
  return a1;
}

_BYTE *assignWithCopy for CommandRouter.Failure(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(_BYTE *, uint64_t, int *);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int EnumCaseMultiPayload;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char *v32;

  v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_2563E84E0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 4, v6);
  v10 = v8(a2, 4, v6);
  if (v9)
  {
    if (!v10)
    {
      v11 = sub_2365AF9FC();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      a1[v6[9]] = a2[v6[9]];
      *(_QWORD *)&a1[v6[10]] = *(_QWORD *)&a2[v6[10]];
      v12 = v6[11];
      v13 = &a1[v12];
      v14 = &a2[v12];
      type metadata accessor for V1Command(0);
      swift_bridgeObjectRetain();
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload != 2)
      {
        if (EnumCaseMultiPayload == 1)
        {
          type metadata accessor for V1Command.Response(0);
          v16 = (char *)&loc_23658F934 + 4 * word_2365C94EA[swift_getEnumCaseMultiPayload()];
          __asm { BR              X10 }
        }
        type metadata accessor for V1Command.Request(0);
        v27 = (char *)&loc_23658FBE0 + 4 * word_2365C94F4[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      v23 = *(_QWORD *)v14;
      v24 = *((_QWORD *)v14 + 1);
      v25 = *((_QWORD *)v14 + 2);
      v26 = v14[24];
      sub_23653E4D8(v23, v24, v25, v26);
      *(_QWORD *)v13 = v23;
      *((_QWORD *)v13 + 1) = v24;
      *((_QWORD *)v13 + 2) = v25;
      v13[24] = v26;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 4, v6);
      return a1;
    }
LABEL_8:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  if (v10)
  {
    sub_236465998((uint64_t)a1, &qword_2563E84E0);
    goto LABEL_8;
  }
  v17 = sub_2365AF9FC();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(a1, a2, v17);
  a1[v6[9]] = a2[v6[9]];
  *(_QWORD *)&a1[v6[10]] = *(_QWORD *)&a2[v6[10]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v18 = v6[11];
    v19 = &a1[v18];
    v20 = &a2[v18];
    sub_236465A18((uint64_t)&a1[v18], type metadata accessor for V1Command);
    type metadata accessor for V1Command(0);
    v21 = swift_getEnumCaseMultiPayload();
    if (v21 != 2)
    {
      if (v21 == 1)
      {
        type metadata accessor for V1Command.Response(0);
        v22 = (char *)&loc_23658FAD0 + 4 * word_2365C94FE[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      type metadata accessor for V1Command.Request(0);
      v32 = (char *)&loc_23658FCF0 + 4 * word_2365C9508[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v28 = *(_QWORD *)v20;
    v29 = *((_QWORD *)v20 + 1);
    v30 = *((_QWORD *)v20 + 2);
    v31 = v20[24];
    sub_23653E4D8(v28, v29, v30, v31);
    *(_QWORD *)v19 = v28;
    *((_QWORD *)v19 + 1) = v29;
    *((_QWORD *)v19 + 2) = v30;
    v19[24] = v31;
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_BYTE *initializeWithTake for CommandRouter.Failure(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  int EnumCaseMultiPayload;
  uint64_t v14;
  int v15;
  __int128 v16;
  __int128 v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  int *v28;
  uint64_t v29;
  _OWORD *v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  __int128 v37;
  __int128 v38;
  int *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  _OWORD *v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  int *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  _OWORD *v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  char *v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  int v68;
  uint64_t v69;

  v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_2563E84E0);
  v7 = *((_QWORD *)v6 - 1);
  if (!(*(unsigned int (**)(_BYTE *, uint64_t, int *))(v7 + 48))(a2, 4, v6))
  {
    v8 = sub_2365AF9FC();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    a1[v6[9]] = a2[v6[9]];
    *(_QWORD *)&a1[v6[10]] = *(_QWORD *)&a2[v6[10]];
    v9 = v6[11];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = type metadata accessor for V1Command(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v35 = type metadata accessor for V1Command.Response(0);
      v36 = swift_getEnumCaseMultiPayload();
      switch(v36)
      {
        case 3:
          v67 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6658);
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v67 - 8) + 32))(v10, v11, v67);
          swift_storeEnumTagMultiPayload();
          break;
        case 2:
          type metadata accessor for AnisetteCommand.Response();
          v68 = swift_getEnumCaseMultiPayload();
          v69 = __swift_instantiateConcreteTypeFromMangledName(off_2507DDAD0[v68]);
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v10, v11, v69);
          swift_storeEnumTagMultiPayload();
          swift_storeEnumTagMultiPayload();
          break;
        case 1:
          v37 = v11[3];
          v10[2] = v11[2];
          v10[3] = v37;
          v10[4] = v11[4];
          v38 = v11[1];
          *v10 = *v11;
          v10[1] = v38;
          v39 = (int *)type metadata accessor for IdMSAccount();
          v40 = v39[5];
          v41 = (char *)v10 + v40;
          v42 = (char *)v11 + v40;
          v43 = sub_2365AF8D0();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v41, v42, v43);
          v44 = v39[6];
          v45 = (_OWORD *)((char *)v10 + v44);
          v46 = (_OWORD *)((char *)v11 + v44);
          v47 = v46[3];
          v45[2] = v46[2];
          v45[3] = v47;
          *(_OWORD *)((char *)v45 + 57) = *(_OWORD *)((char *)v46 + 57);
          v48 = v46[1];
          *v45 = *v46;
          v45[1] = v48;
          *(_QWORD *)((char *)v10 + v39[7]) = *(_QWORD *)((char *)v11 + v39[7]);
          v49 = type metadata accessor for SignInCommand.Response(0);
          *(_QWORD *)((char *)v10 + *(int *)(v49 + 20)) = *(_QWORD *)((char *)v11 + *(int *)(v49 + 20));
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
          break;
      }
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
LABEL_20:
        (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 4, v6);
        return a1;
      }
      v14 = type metadata accessor for V1Command.Request(0);
      v15 = swift_getEnumCaseMultiPayload();
      if (v15 == 3)
      {
        v50 = v11[3];
        v10[2] = v11[2];
        v10[3] = v50;
        v10[4] = v11[4];
        v51 = v11[1];
        *v10 = *v11;
        v10[1] = v51;
        v52 = (int *)type metadata accessor for IdMSAccount();
        v53 = v52[5];
        v54 = (char *)v10 + v53;
        v55 = (char *)v11 + v53;
        v56 = sub_2365AF8D0();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v54, v55, v56);
        v57 = v52[6];
        v58 = (_OWORD *)((char *)v10 + v57);
        v59 = (_OWORD *)((char *)v11 + v57);
        v60 = v59[3];
        v58[2] = v59[2];
        v58[3] = v60;
        *(_OWORD *)((char *)v58 + 57) = *(_OWORD *)((char *)v59 + 57);
        v61 = v59[1];
        *v58 = *v59;
        v58[1] = v61;
        *(_QWORD *)((char *)v10 + v52[7]) = *(_QWORD *)((char *)v11 + v52[7]);
        v62 = *(int *)(type metadata accessor for AuthenticateCommand.Request(0) + 20);
        v63 = (char *)v10 + v62;
        v64 = (char *)v11 + v62;
        v65 = *((_OWORD *)v64 + 3);
        *((_OWORD *)v63 + 2) = *((_OWORD *)v64 + 2);
        *((_OWORD *)v63 + 3) = v65;
        v63[64] = v64[64];
        v66 = *((_OWORD *)v64 + 1);
        *(_OWORD *)v63 = *(_OWORD *)v64;
        *((_OWORD *)v63 + 1) = v66;
        swift_storeEnumTagMultiPayload();
      }
      else if (v15 == 1)
      {
        v16 = v11[3];
        v10[2] = v11[2];
        v10[3] = v16;
        v10[4] = v11[4];
        v17 = v11[1];
        *v10 = *v11;
        v10[1] = v17;
        v18 = (int *)type metadata accessor for IdMSAccount();
        v19 = v18[5];
        v20 = (char *)v10 + v19;
        v21 = (char *)v11 + v19;
        v22 = sub_2365AF8D0();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
        v23 = v18[6];
        v24 = (_OWORD *)((char *)v10 + v23);
        v25 = (_OWORD *)((char *)v11 + v23);
        v26 = v25[3];
        v24[2] = v25[2];
        v24[3] = v26;
        *(_OWORD *)((char *)v24 + 57) = *(_OWORD *)((char *)v25 + 57);
        v27 = v25[1];
        *v24 = *v25;
        v24[1] = v27;
        *(_QWORD *)((char *)v10 + v18[7]) = *(_QWORD *)((char *)v11 + v18[7]);
        v28 = (int *)type metadata accessor for SignInCommand.Request(0);
        v29 = v28[5];
        v30 = (_OWORD *)((char *)v10 + v29);
        v31 = (_OWORD *)((char *)v11 + v29);
        v32 = v31[3];
        v30[2] = v31[2];
        v30[3] = v32;
        v33 = v31[5];
        v30[4] = v31[4];
        v30[5] = v33;
        v34 = v31[1];
        *v30 = *v31;
        v30[1] = v34;
        *((_BYTE *)v10 + v28[6]) = *((_BYTE *)v11 + v28[6]);
        *((_BYTE *)v10 + v28[7]) = *((_BYTE *)v11 + v28[7]);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_20;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

uint64_t assignWithTake for CommandRouter.Failure(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, int *);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  int EnumCaseMultiPayload;
  uint64_t v17;
  int v18;
  __int128 v19;
  __int128 v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  int *v31;
  uint64_t v32;
  _OWORD *v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  size_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  __int128 v47;
  __int128 v48;
  int *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  _OWORD *v56;
  __int128 v57;
  __int128 v58;
  int *v59;
  uint64_t v60;
  _OWORD *v61;
  _OWORD *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  int v66;
  __int128 v67;
  __int128 v68;
  int *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  _OWORD *v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  int v80;
  __int128 v81;
  __int128 v82;
  int *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD *v89;
  _OWORD *v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  int *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  _OWORD *v102;
  _OWORD *v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  char *v107;
  char *v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  __int128 v115;
  __int128 v116;
  int *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  _OWORD *v123;
  _OWORD *v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  char *v128;
  char *v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  int v133;
  uint64_t v134;

  v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_2563E84E0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 4, v6);
  v10 = v8((uint64_t)a2, 4, v6);
  if (v9)
  {
    if (!v10)
    {
      v11 = sub_2365AF9FC();
      (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      *(_BYTE *)(a1 + v6[9]) = *((_BYTE *)a2 + v6[9]);
      *(_QWORD *)(a1 + v6[10]) = *(_QWORD *)((char *)a2 + v6[10]);
      v12 = v6[11];
      v13 = (_OWORD *)(a1 + v12);
      v14 = (_OWORD *)((char *)a2 + v12);
      v15 = type metadata accessor for V1Command(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 1)
      {
        v17 = type metadata accessor for V1Command.Response(0);
        v66 = swift_getEnumCaseMultiPayload();
        switch(v66)
        {
          case 3:
            v111 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6658);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v111 - 8) + 32))(v13, v14, v111);
            swift_storeEnumTagMultiPayload();
            goto LABEL_33;
          case 2:
            type metadata accessor for AnisetteCommand.Response();
            v112 = swift_getEnumCaseMultiPayload();
            v113 = __swift_instantiateConcreteTypeFromMangledName(off_2507DDAD0[v112]);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v113 - 8) + 32))(v13, v14, v113);
            swift_storeEnumTagMultiPayload();
            swift_storeEnumTagMultiPayload();
            goto LABEL_33;
          case 1:
            v67 = v14[3];
            v13[2] = v14[2];
            v13[3] = v67;
            v13[4] = v14[4];
            v68 = v14[1];
            *v13 = *v14;
            v13[1] = v68;
            v69 = (int *)type metadata accessor for IdMSAccount();
            v70 = v69[5];
            v71 = (char *)v13 + v70;
            v72 = (char *)v14 + v70;
            v73 = sub_2365AF8D0();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 32))(v71, v72, v73);
            v74 = v69[6];
            v75 = (_OWORD *)((char *)v13 + v74);
            v76 = (_OWORD *)((char *)v14 + v74);
            v77 = v76[3];
            v75[2] = v76[2];
            v75[3] = v77;
            *(_OWORD *)((char *)v75 + 57) = *(_OWORD *)((char *)v76 + 57);
            v78 = v76[1];
            *v75 = *v76;
            v75[1] = v78;
            *(_QWORD *)((char *)v13 + v69[7]) = *(_QWORD *)((char *)v14 + v69[7]);
            v79 = type metadata accessor for SignInCommand.Response(0);
            *(_QWORD *)((char *)v13 + *(int *)(v79 + 20)) = *(_QWORD *)((char *)v14 + *(int *)(v79 + 20));
            swift_storeEnumTagMultiPayload();
            goto LABEL_33;
        }
      }
      else
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
LABEL_34:
          (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 4, v6);
          return a1;
        }
        v17 = type metadata accessor for V1Command.Request(0);
        v18 = swift_getEnumCaseMultiPayload();
        if (v18 == 3)
        {
          v94 = v14[3];
          v13[2] = v14[2];
          v13[3] = v94;
          v13[4] = v14[4];
          v95 = v14[1];
          *v13 = *v14;
          v13[1] = v95;
          v96 = (int *)type metadata accessor for IdMSAccount();
          v97 = v96[5];
          v98 = (char *)v13 + v97;
          v99 = (char *)v14 + v97;
          v100 = sub_2365AF8D0();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 32))(v98, v99, v100);
          v101 = v96[6];
          v102 = (_OWORD *)((char *)v13 + v101);
          v103 = (_OWORD *)((char *)v14 + v101);
          v104 = v103[3];
          v102[2] = v103[2];
          v102[3] = v104;
          *(_OWORD *)((char *)v102 + 57) = *(_OWORD *)((char *)v103 + 57);
          v105 = v103[1];
          *v102 = *v103;
          v102[1] = v105;
          *(_QWORD *)((char *)v13 + v96[7]) = *(_QWORD *)((char *)v14 + v96[7]);
          v106 = *(int *)(type metadata accessor for AuthenticateCommand.Request(0) + 20);
          v107 = (char *)v13 + v106;
          v108 = (char *)v14 + v106;
          v109 = *((_OWORD *)v108 + 3);
          *((_OWORD *)v107 + 2) = *((_OWORD *)v108 + 2);
          *((_OWORD *)v107 + 3) = v109;
          v107[64] = v108[64];
          v110 = *((_OWORD *)v108 + 1);
          *(_OWORD *)v107 = *(_OWORD *)v108;
          *((_OWORD *)v107 + 1) = v110;
          swift_storeEnumTagMultiPayload();
          goto LABEL_33;
        }
        if (v18 == 1)
        {
          v19 = v14[3];
          v13[2] = v14[2];
          v13[3] = v19;
          v13[4] = v14[4];
          v20 = v14[1];
          *v13 = *v14;
          v13[1] = v20;
          v21 = (int *)type metadata accessor for IdMSAccount();
          v22 = v21[5];
          v23 = (char *)v13 + v22;
          v24 = (char *)v14 + v22;
          v25 = sub_2365AF8D0();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
          v26 = v21[6];
          v27 = (_OWORD *)((char *)v13 + v26);
          v28 = (_OWORD *)((char *)v14 + v26);
          v29 = v28[3];
          v27[2] = v28[2];
          v27[3] = v29;
          *(_OWORD *)((char *)v27 + 57) = *(_OWORD *)((char *)v28 + 57);
          v30 = v28[1];
          *v27 = *v28;
          v27[1] = v30;
          *(_QWORD *)((char *)v13 + v21[7]) = *(_QWORD *)((char *)v14 + v21[7]);
          v31 = (int *)type metadata accessor for SignInCommand.Request(0);
          v32 = v31[5];
          v33 = (_OWORD *)((char *)v13 + v32);
          v34 = (_OWORD *)((char *)v14 + v32);
          v35 = v34[3];
          v33[2] = v34[2];
          v33[3] = v35;
          v36 = v34[5];
          v33[4] = v34[4];
          v33[5] = v36;
          v37 = v34[1];
          *v33 = *v34;
          v33[1] = v37;
          *((_BYTE *)v13 + v31[6]) = *((_BYTE *)v14 + v31[6]);
          *((_BYTE *)v13 + v31[7]) = *((_BYTE *)v14 + v31[7]);
          swift_storeEnumTagMultiPayload();
LABEL_33:
          swift_storeEnumTagMultiPayload();
          goto LABEL_34;
        }
      }
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      goto LABEL_33;
    }
    goto LABEL_10;
  }
  if (!v10)
  {
    v40 = sub_2365AF9FC();
    (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)(v40 - 8) + 40))(a1, a2, v40);
    *(_BYTE *)(a1 + v6[9]) = *((_BYTE *)a2 + v6[9]);
    *(_QWORD *)(a1 + v6[10]) = *(_QWORD *)((char *)a2 + v6[10]);
    swift_bridgeObjectRelease();
    if ((_OWORD *)a1 == a2)
      return a1;
    v41 = v6[11];
    v42 = (_OWORD *)(a1 + v41);
    a2 = (_OWORD *)((char *)a2 + v41);
    sub_236465A18(a1 + v41, type metadata accessor for V1Command);
    v43 = type metadata accessor for V1Command(0);
    v44 = swift_getEnumCaseMultiPayload();
    if (v44 == 1)
    {
      v45 = type metadata accessor for V1Command.Response(0);
      v80 = swift_getEnumCaseMultiPayload();
      switch(v80)
      {
        case 3:
          v132 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6658);
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v132 - 8) + 32))(v42, a2, v132);
          swift_storeEnumTagMultiPayload();
          goto LABEL_38;
        case 2:
          type metadata accessor for AnisetteCommand.Response();
          v133 = swift_getEnumCaseMultiPayload();
          v134 = __swift_instantiateConcreteTypeFromMangledName(off_2507DDAD0[v133]);
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v134 - 8) + 32))(v42, a2, v134);
          swift_storeEnumTagMultiPayload();
          swift_storeEnumTagMultiPayload();
          goto LABEL_38;
        case 1:
          v81 = a2[3];
          v42[2] = a2[2];
          v42[3] = v81;
          v42[4] = a2[4];
          v82 = a2[1];
          *v42 = *a2;
          v42[1] = v82;
          v83 = (int *)type metadata accessor for IdMSAccount();
          v84 = v83[5];
          v85 = (char *)v42 + v84;
          v86 = (char *)a2 + v84;
          v87 = sub_2365AF8D0();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 32))(v85, v86, v87);
          v88 = v83[6];
          v89 = (_OWORD *)((char *)v42 + v88);
          v90 = (_OWORD *)((char *)a2 + v88);
          v91 = v90[3];
          v89[2] = v90[2];
          v89[3] = v91;
          *(_OWORD *)((char *)v89 + 57) = *(_OWORD *)((char *)v90 + 57);
          v92 = v90[1];
          *v89 = *v90;
          v89[1] = v92;
          *(_QWORD *)((char *)v42 + v83[7]) = *(_QWORD *)((char *)a2 + v83[7]);
          v93 = type metadata accessor for SignInCommand.Response(0);
          *(_QWORD *)((char *)v42 + *(int *)(v93 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v93 + 20));
          swift_storeEnumTagMultiPayload();
          goto LABEL_38;
      }
    }
    else
    {
      if (v44)
      {
        v38 = *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64);
        v39 = v42;
        goto LABEL_11;
      }
      v45 = type metadata accessor for V1Command.Request(0);
      v46 = swift_getEnumCaseMultiPayload();
      if (v46 == 3)
      {
        v115 = a2[3];
        v42[2] = a2[2];
        v42[3] = v115;
        v42[4] = a2[4];
        v116 = a2[1];
        *v42 = *a2;
        v42[1] = v116;
        v117 = (int *)type metadata accessor for IdMSAccount();
        v118 = v117[5];
        v119 = (char *)v42 + v118;
        v120 = (char *)a2 + v118;
        v121 = sub_2365AF8D0();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v121 - 8) + 32))(v119, v120, v121);
        v122 = v117[6];
        v123 = (_OWORD *)((char *)v42 + v122);
        v124 = (_OWORD *)((char *)a2 + v122);
        v125 = v124[3];
        v123[2] = v124[2];
        v123[3] = v125;
        *(_OWORD *)((char *)v123 + 57) = *(_OWORD *)((char *)v124 + 57);
        v126 = v124[1];
        *v123 = *v124;
        v123[1] = v126;
        *(_QWORD *)((char *)v42 + v117[7]) = *(_QWORD *)((char *)a2 + v117[7]);
        v127 = *(int *)(type metadata accessor for AuthenticateCommand.Request(0) + 20);
        v128 = (char *)v42 + v127;
        v129 = (char *)a2 + v127;
        v130 = *((_OWORD *)v129 + 3);
        *((_OWORD *)v128 + 2) = *((_OWORD *)v129 + 2);
        *((_OWORD *)v128 + 3) = v130;
        v128[64] = v129[64];
        v131 = *((_OWORD *)v129 + 1);
        *(_OWORD *)v128 = *(_OWORD *)v129;
        *((_OWORD *)v128 + 1) = v131;
        swift_storeEnumTagMultiPayload();
        goto LABEL_38;
      }
      if (v46 == 1)
      {
        v47 = a2[3];
        v42[2] = a2[2];
        v42[3] = v47;
        v42[4] = a2[4];
        v48 = a2[1];
        *v42 = *a2;
        v42[1] = v48;
        v49 = (int *)type metadata accessor for IdMSAccount();
        v50 = v49[5];
        v51 = (char *)v42 + v50;
        v52 = (char *)a2 + v50;
        v53 = sub_2365AF8D0();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v51, v52, v53);
        v54 = v49[6];
        v55 = (_OWORD *)((char *)v42 + v54);
        v56 = (_OWORD *)((char *)a2 + v54);
        v57 = v56[3];
        v55[2] = v56[2];
        v55[3] = v57;
        *(_OWORD *)((char *)v55 + 57) = *(_OWORD *)((char *)v56 + 57);
        v58 = v56[1];
        *v55 = *v56;
        v55[1] = v58;
        *(_QWORD *)((char *)v42 + v49[7]) = *(_QWORD *)((char *)a2 + v49[7]);
        v59 = (int *)type metadata accessor for SignInCommand.Request(0);
        v60 = v59[5];
        v61 = (_OWORD *)((char *)v42 + v60);
        v62 = (_OWORD *)((char *)a2 + v60);
        v63 = v62[3];
        v61[2] = v62[2];
        v61[3] = v63;
        v64 = v62[5];
        v61[4] = v62[4];
        v61[5] = v64;
        v65 = v62[1];
        *v61 = *v62;
        v61[1] = v65;
        *((_BYTE *)v42 + v59[6]) = *((_BYTE *)a2 + v59[6]);
        *((_BYTE *)v42 + v59[7]) = *((_BYTE *)a2 + v59[7]);
        swift_storeEnumTagMultiPayload();
LABEL_38:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }
    memcpy(v42, a2, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    goto LABEL_38;
  }
  sub_236465998(a1, &qword_2563E84E0);
LABEL_10:
  v38 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64);
  v39 = (void *)a1;
LABEL_11:
  memcpy(v39, a2, v38);
  return a1;
}

uint64_t getEnumTagSinglePayload for CommandRouter.Failure()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_236591DD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E84E0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 5)
    return v5 - 4;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CommandRouter.Failure()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_236591E34(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 4);
  else
    v5 = 0;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E84E0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_236591E8C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E84E0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 4, v2);
}

uint64_t sub_236591EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E84E0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 4, v4);
}

void sub_236591F0C()
{
  unint64_t v0;

  sub_236591F60(319);
  if (v0 <= 0x3F)
    swift_initEnumMetadataSinglePayload();
}

void sub_236591F60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_2563ED3C0)
  {
    v2 = type metadata accessor for V1Command(255);
    v3 = sub_23644F0B8(&qword_2563ED3C8, type metadata accessor for V1Command, (uint64_t)&protocol conformance descriptor for V1Command);
    v5 = type metadata accessor for Message(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_2563ED3C0);
  }
}

char *initializeBufferWithCopyOfBuffer for CommandRouter.HandshakeFailure(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int EnumCaseMultiPayload;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v18 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v18 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
    return a1;
  }
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v7 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v7;
      v8 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 3) = v8;
      v9 = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *((_QWORD *)a1 + 5) = v9;
      v10 = *((_QWORD *)a2 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v10)
      {
        v37 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v37;
        *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
        a1[96] = a2[96];
        v13 = *((_QWORD *)a2 + 14);
        if (v13)
          goto LABEL_5;
LABEL_23:
        v38 = *(_OWORD *)(a2 + 120);
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 120) = v38;
        v15 = *((_QWORD *)a2 + 18);
        if (v15)
          goto LABEL_6;
        goto LABEL_24;
      }
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 7) = v10;
      v11 = *((_QWORD *)a2 + 9);
      *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
      *((_QWORD *)a1 + 9) = v11;
      v12 = *((_QWORD *)a2 + 11);
      *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
      *((_QWORD *)a1 + 11) = v12;
      a1[96] = a2[96];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13 = *((_QWORD *)a2 + 14);
      if (!v13)
        goto LABEL_23;
LABEL_5:
      *((_QWORD *)a1 + 13) = *((_QWORD *)a2 + 13);
      *((_QWORD *)a1 + 14) = v13;
      v14 = *((_QWORD *)a2 + 16);
      *((_QWORD *)a1 + 15) = *((_QWORD *)a2 + 15);
      *((_QWORD *)a1 + 16) = v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v15 = *((_QWORD *)a2 + 18);
      if (v15)
      {
LABEL_6:
        *((_QWORD *)a1 + 17) = *((_QWORD *)a2 + 17);
        *((_QWORD *)a1 + 18) = v15;
        v16 = *((_QWORD *)a2 + 19);
        v17 = *((_QWORD *)a2 + 20);
        *((_QWORD *)a1 + 19) = v16;
        *((_QWORD *)a1 + 20) = v17;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_35;
      }
LABEL_24:
      v39 = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 152) = v39;
LABEL_35:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 1u:
      type metadata accessor for V1Command(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload != 2)
      {
        if (EnumCaseMultiPayload == 1)
        {
          type metadata accessor for V1Command.Response(0);
          v21 = (char *)&loc_2365921A8 + 4 * word_2365C9518[swift_getEnumCaseMultiPayload()];
          __asm { BR              X10 }
        }
        type metadata accessor for V1Command.Request(0);
        v46 = (char *)&loc_2365924C8 + 4 * word_2365C9522[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      v42 = *(_QWORD *)a2;
      v43 = *((_QWORD *)a2 + 1);
      v44 = *((_QWORD *)a2 + 2);
      v45 = a2[24];
      sub_23653E4D8(v42, v43, v44, v45);
      *(_QWORD *)a1 = v42;
      *((_QWORD *)a1 + 1) = v43;
      *((_QWORD *)a1 + 2) = v44;
      a1[24] = v45;
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      return a1;
    case 2u:
      *(_WORD *)a1 = *(_WORD *)a2;
      v22 = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a1 + 2) = v22;
      *((_WORD *)a1 + 12) = *((_WORD *)a2 + 12);
      v23 = *((_QWORD *)a2 + 5);
      swift_bridgeObjectRetain();
      if (!v23)
        goto LABEL_25;
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *((_QWORD *)a1 + 5) = v23;
      v24 = *((_QWORD *)a2 + 7);
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 7) = v24;
      v25 = *((_QWORD *)a2 + 9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v25)
      {
        *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
        *((_QWORD *)a1 + 9) = v25;
        v26 = *((_QWORD *)a2 + 11);
        *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
        *((_QWORD *)a1 + 11) = v26;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v47 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5) = v47;
      }
      a1[96] = a2[96];
      goto LABEL_35;
    case 3u:
      *(_WORD *)a1 = *(_WORD *)a2;
      v27 = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a1 + 2) = v27;
      *((_WORD *)a1 + 12) = *((_WORD *)a2 + 12);
      v28 = *((_QWORD *)a2 + 5);
      swift_bridgeObjectRetain();
      if (!v28)
        goto LABEL_25;
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *((_QWORD *)a1 + 5) = v28;
      v29 = *((_QWORD *)a2 + 7);
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 7) = v29;
      v30 = *((_QWORD *)a2 + 9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v30)
      {
        *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
        *((_QWORD *)a1 + 9) = v30;
        v31 = *((_QWORD *)a2 + 11);
        *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
        *((_QWORD *)a1 + 11) = v31;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v48 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5) = v48;
      }
      a1[96] = a2[96];
      goto LABEL_35;
    case 4u:
      *(_WORD *)a1 = *(_WORD *)a2;
      v32 = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a1 + 2) = v32;
      *((_WORD *)a1 + 12) = *((_WORD *)a2 + 12);
      v33 = *((_QWORD *)a2 + 5);
      swift_bridgeObjectRetain();
      if (v33)
      {
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        *((_QWORD *)a1 + 5) = v33;
        v34 = *((_QWORD *)a2 + 7);
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
        *((_QWORD *)a1 + 7) = v34;
        v35 = *((_QWORD *)a2 + 9);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v35)
        {
          *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
          *((_QWORD *)a1 + 9) = v35;
          v36 = *((_QWORD *)a2 + 11);
          *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
          *((_QWORD *)a1 + 11) = v36;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v49 = *((_OWORD *)a2 + 5);
          *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 5) = v49;
        }
        a1[96] = a2[96];
      }
      else
      {
LABEL_25:
        v40 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5) = v40;
        a1[96] = a2[96];
        v41 = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v41;
      }
      goto LABEL_35;
    default:
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
      return a1;
  }
}

uint64_t destroy for CommandRouter.HandshakeFailure(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(a1 + 56))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*(_QWORD *)(a1 + 112))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      result = *(_QWORD *)(a1 + 144);
      if (result)
      {
LABEL_10:
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
      break;
    case 1:
      type metadata accessor for V1Command(0);
      result = swift_getEnumCaseMultiPayload();
      switch((_DWORD)result)
      {
        case 2:
          result = sub_23653E4F8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
          break;
        case 1:
          type metadata accessor for V1Command.Response(0);
          result = swift_getEnumCaseMultiPayload();
          switch((int)result)
          {
            case 0:
              goto LABEL_2;
            case 1:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v3 = type metadata accessor for IdMSAccount();
              v4 = a1 + *(int *)(v3 + 20);
              v5 = sub_2365AF8D0();
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
              v6 = a1 + *(int *)(v3 + 24);
              sub_23645FAF8(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24), *(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40), *(_QWORD *)(v6 + 48), *(_QWORD *)(v6 + 56), *(_QWORD *)(v6 + 64), *(_BYTE *)(v6 + 72));
              swift_bridgeObjectRelease();
              type metadata accessor for SignInCommand.Response(0);
              goto LABEL_11;
            case 2:
              type metadata accessor for AnisetteCommand.Response();
              result = swift_getEnumCaseMultiPayload();
              switch((int)result)
              {
                case 0:
                case 1:
                case 2:
                  v7 = &qword_2563E7050;
                  goto LABEL_37;
                case 3:
                case 4:
                  v7 = &qword_2563EB238;
                  goto LABEL_37;
                case 5:
                  v7 = &qword_2563EB240;
                  goto LABEL_37;
                default:
                  return result;
              }
            case 3:
              v7 = &qword_2563E6658;
LABEL_37:
              v19 = __swift_instantiateConcreteTypeFromMangledName(v7);
              result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(a1, v19);
              break;
            case 4:
              result = sub_23648B8D8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
              break;
            default:
              return result;
          }
          break;
        case 0:
          type metadata accessor for V1Command.Request(0);
          result = swift_getEnumCaseMultiPayload();
          switch((int)result)
          {
            case 0:
              if (*(_QWORD *)(a1 + 16))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (*(_QWORD *)(a1 + 48))
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
              }
              if (!*(_QWORD *)(a1 + 88))
                goto LABEL_11;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_10;
            case 1:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v8 = type metadata accessor for IdMSAccount();
              v9 = a1 + *(int *)(v8 + 20);
              v10 = sub_2365AF8D0();
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
              v11 = a1 + *(int *)(v8 + 24);
              sub_23645FAF8(*(_QWORD *)v11, *(_QWORD *)(v11 + 8), *(_QWORD *)(v11 + 16), *(_QWORD *)(v11 + 24), *(_QWORD *)(v11 + 32), *(_QWORD *)(v11 + 40), *(_QWORD *)(v11 + 48), *(_QWORD *)(v11 + 56), *(_QWORD *)(v11 + 64), *(_BYTE *)(v11 + 72));
              swift_bridgeObjectRelease();
              v12 = a1 + *(int *)(type metadata accessor for SignInCommand.Request(0) + 20);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              result = swift_bridgeObjectRelease();
              v13 = *(_QWORD *)(v12 + 88);
              if (v13 >> 60 != 15)
                result = sub_236468D44(*(_QWORD *)(v12 + 80), v13);
              break;
            case 2:
              result = sub_23653D530(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
              break;
            case 3:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v14 = type metadata accessor for IdMSAccount();
              v15 = a1 + *(int *)(v14 + 20);
              v16 = sub_2365AF8D0();
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
              v17 = a1 + *(int *)(v14 + 24);
              sub_23645FAF8(*(_QWORD *)v17, *(_QWORD *)(v17 + 8), *(_QWORD *)(v17 + 16), *(_QWORD *)(v17 + 24), *(_QWORD *)(v17 + 32), *(_QWORD *)(v17 + 40), *(_QWORD *)(v17 + 48), *(_QWORD *)(v17 + 56), *(_QWORD *)(v17 + 64), *(_BYTE *)(v17 + 72));
              swift_bridgeObjectRelease();
              v18 = a1 + *(int *)(type metadata accessor for AuthenticateCommand.Request(0) + 20);
              result = *(_QWORD *)(v18 + 8);
              if (result)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                result = *(_QWORD *)(v18 + 40);
                if (result)
                  goto LABEL_4;
              }
              break;
            case 4:
              result = sub_23648C070(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88));
              break;
            default:
              return result;
          }
          break;
      }
      break;
    case 2:
    case 3:
    case 4:
LABEL_2:
      swift_bridgeObjectRelease();
      result = *(_QWORD *)(a1 + 40);
      if (result)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = *(_QWORD *)(a1 + 72);
        if (result)
        {
LABEL_4:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_11:
          result = swift_bridgeObjectRelease();
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

char *initializeWithCopy for CommandRouter.HandshakeFailure(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int EnumCaseMultiPayload;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v6 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v6;
      v7 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 3) = v7;
      v8 = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *((_QWORD *)a1 + 5) = v8;
      v9 = *((_QWORD *)a2 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v9)
      {
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
        *((_QWORD *)a1 + 7) = v9;
        v10 = *((_QWORD *)a2 + 9);
        *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
        *((_QWORD *)a1 + 9) = v10;
        v11 = *((_QWORD *)a2 + 11);
        *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
        *((_QWORD *)a1 + 11) = v11;
        a1[96] = a2[96];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v12 = *((_QWORD *)a2 + 14);
        if (v12)
          goto LABEL_4;
LABEL_20:
        v35 = *(_OWORD *)(a2 + 120);
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 120) = v35;
        v14 = *((_QWORD *)a2 + 18);
        if (v14)
          goto LABEL_5;
        goto LABEL_21;
      }
      v34 = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 4) = v34;
      *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
      a1[96] = a2[96];
      v12 = *((_QWORD *)a2 + 14);
      if (!v12)
        goto LABEL_20;
LABEL_4:
      *((_QWORD *)a1 + 13) = *((_QWORD *)a2 + 13);
      *((_QWORD *)a1 + 14) = v12;
      v13 = *((_QWORD *)a2 + 16);
      *((_QWORD *)a1 + 15) = *((_QWORD *)a2 + 15);
      *((_QWORD *)a1 + 16) = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v14 = *((_QWORD *)a2 + 18);
      if (v14)
      {
LABEL_5:
        *((_QWORD *)a1 + 17) = *((_QWORD *)a2 + 17);
        *((_QWORD *)a1 + 18) = v14;
        v15 = *((_QWORD *)a2 + 19);
        v16 = *((_QWORD *)a2 + 20);
        *((_QWORD *)a1 + 19) = v15;
        *((_QWORD *)a1 + 20) = v16;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_32;
      }
LABEL_21:
      v36 = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 152) = v36;
LABEL_32:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 1u:
      type metadata accessor for V1Command(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload != 2)
      {
        if (EnumCaseMultiPayload == 1)
        {
          type metadata accessor for V1Command.Response(0);
          v18 = (char *)&loc_2365934F4 + 4 * word_2365C9546[swift_getEnumCaseMultiPayload()];
          __asm { BR              X10 }
        }
        type metadata accessor for V1Command.Request(0);
        v43 = (char *)&loc_236593810 + 4 * word_2365C9550[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      v39 = *(_QWORD *)a2;
      v40 = *((_QWORD *)a2 + 1);
      v41 = *((_QWORD *)a2 + 2);
      v42 = a2[24];
      sub_23653E4D8(v39, v40, v41, v42);
      *(_QWORD *)a1 = v39;
      *((_QWORD *)a1 + 1) = v40;
      *((_QWORD *)a1 + 2) = v41;
      a1[24] = v42;
      swift_storeEnumTagMultiPayload();
      goto LABEL_32;
    case 2u:
      *(_WORD *)a1 = *(_WORD *)a2;
      v19 = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a1 + 2) = v19;
      *((_WORD *)a1 + 12) = *((_WORD *)a2 + 12);
      v20 = *((_QWORD *)a2 + 5);
      swift_bridgeObjectRetain();
      if (!v20)
        goto LABEL_22;
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *((_QWORD *)a1 + 5) = v20;
      v21 = *((_QWORD *)a2 + 7);
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 7) = v21;
      v22 = *((_QWORD *)a2 + 9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v22)
      {
        *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
        *((_QWORD *)a1 + 9) = v22;
        v23 = *((_QWORD *)a2 + 11);
        *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
        *((_QWORD *)a1 + 11) = v23;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v44 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5) = v44;
      }
      a1[96] = a2[96];
      goto LABEL_32;
    case 3u:
      *(_WORD *)a1 = *(_WORD *)a2;
      v24 = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a1 + 2) = v24;
      *((_WORD *)a1 + 12) = *((_WORD *)a2 + 12);
      v25 = *((_QWORD *)a2 + 5);
      swift_bridgeObjectRetain();
      if (!v25)
        goto LABEL_22;
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *((_QWORD *)a1 + 5) = v25;
      v26 = *((_QWORD *)a2 + 7);
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 7) = v26;
      v27 = *((_QWORD *)a2 + 9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v27)
      {
        *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
        *((_QWORD *)a1 + 9) = v27;
        v28 = *((_QWORD *)a2 + 11);
        *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
        *((_QWORD *)a1 + 11) = v28;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v45 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5) = v45;
      }
      a1[96] = a2[96];
      goto LABEL_32;
    case 4u:
      *(_WORD *)a1 = *(_WORD *)a2;
      v29 = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a1 + 2) = v29;
      *((_WORD *)a1 + 12) = *((_WORD *)a2 + 12);
      v30 = *((_QWORD *)a2 + 5);
      swift_bridgeObjectRetain();
      if (v30)
      {
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        *((_QWORD *)a1 + 5) = v30;
        v31 = *((_QWORD *)a2 + 7);
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
        *((_QWORD *)a1 + 7) = v31;
        v32 = *((_QWORD *)a2 + 9);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v32)
        {
          *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
          *((_QWORD *)a1 + 9) = v32;
          v33 = *((_QWORD *)a2 + 11);
          *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
          *((_QWORD *)a1 + 11) = v33;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v46 = *((_OWORD *)a2 + 5);
          *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 5) = v46;
        }
        a1[96] = a2[96];
      }
      else
      {
LABEL_22:
        v37 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5) = v37;
        a1[96] = a2[96];
        v38 = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v38;
      }
      goto LABEL_32;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
  }
}

char *assignWithCopy for CommandRouter.HandshakeFailure(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  if (a1 == a2)
    return a1;
  sub_236465A18((uint64_t)a1, type metadata accessor for CommandRouter.HandshakeFailure);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
      v6 = *((_QWORD *)a2 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v6)
      {
        v15 = *((_OWORD *)a2 + 3);
        v16 = *((_OWORD *)a2 + 4);
        v17 = *((_OWORD *)a2 + 5);
        a1[96] = a2[96];
        *((_OWORD *)a1 + 4) = v16;
        *((_OWORD *)a1 + 5) = v17;
        *((_OWORD *)a1 + 3) = v15;
        if (*((_QWORD *)a2 + 14))
          goto LABEL_5;
LABEL_21:
        v18 = *(_OWORD *)(a2 + 120);
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 120) = v18;
        if (*((_QWORD *)a2 + 18))
          goto LABEL_6;
        goto LABEL_22;
      }
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
      *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
      *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
      *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
      *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
      a1[96] = a2[96];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!*((_QWORD *)a2 + 14))
        goto LABEL_21;
LABEL_5:
      *((_QWORD *)a1 + 13) = *((_QWORD *)a2 + 13);
      *((_QWORD *)a1 + 14) = *((_QWORD *)a2 + 14);
      *((_QWORD *)a1 + 15) = *((_QWORD *)a2 + 15);
      *((_QWORD *)a1 + 16) = *((_QWORD *)a2 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (*((_QWORD *)a2 + 18))
      {
LABEL_6:
        *((_QWORD *)a1 + 17) = *((_QWORD *)a2 + 17);
        *((_QWORD *)a1 + 18) = *((_QWORD *)a2 + 18);
        *((_QWORD *)a1 + 19) = *((_QWORD *)a2 + 19);
        *((_QWORD *)a1 + 20) = *((_QWORD *)a2 + 20);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_33;
      }
LABEL_22:
      v19 = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 152) = v19;
LABEL_33:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 1u:
      type metadata accessor for V1Command(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload != 2)
      {
        if (EnumCaseMultiPayload == 1)
        {
          type metadata accessor for V1Command.Response(0);
          v8 = (char *)&loc_23659434C + 4 * word_2365C9560[swift_getEnumCaseMultiPayload()];
          __asm { BR              X10 }
        }
        type metadata accessor for V1Command.Request(0);
        v27 = (char *)&loc_236594720 + 4 * word_2365C956A[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      v23 = *(_QWORD *)a2;
      v24 = *((_QWORD *)a2 + 1);
      v25 = *((_QWORD *)a2 + 2);
      v26 = a2[24];
      sub_23653E4D8(v23, v24, v25, v26);
      *(_QWORD *)a1 = v23;
      *((_QWORD *)a1 + 1) = v24;
      *((_QWORD *)a1 + 2) = v25;
      a1[24] = v26;
      swift_storeEnumTagMultiPayload();
      goto LABEL_33;
    case 2u:
      *a1 = *a2;
      a1[1] = a2[1];
      *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_WORD *)a1 + 12) = *((_WORD *)a2 + 12);
      v9 = *((_QWORD *)a2 + 5);
      swift_bridgeObjectRetain();
      if (!v9)
        goto LABEL_23;
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
      v10 = *((_QWORD *)a2 + 9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v10)
      {
        *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
        *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
        *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
        *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v28 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5) = v28;
      }
      a1[96] = a2[96];
      goto LABEL_33;
    case 3u:
      *a1 = *a2;
      a1[1] = a2[1];
      *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_WORD *)a1 + 12) = *((_WORD *)a2 + 12);
      v11 = *((_QWORD *)a2 + 5);
      swift_bridgeObjectRetain();
      if (!v11)
        goto LABEL_23;
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
      v12 = *((_QWORD *)a2 + 9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v12)
      {
        *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
        *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
        *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
        *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v29 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5) = v29;
      }
      a1[96] = a2[96];
      goto LABEL_33;
    case 4u:
      *a1 = *a2;
      a1[1] = a2[1];
      *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_WORD *)a1 + 12) = *((_WORD *)a2 + 12);
      v13 = *((_QWORD *)a2 + 5);
      swift_bridgeObjectRetain();
      if (v13)
      {
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
        *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
        v14 = *((_QWORD *)a2 + 9);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v14)
        {
          *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
          *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
          *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
          *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v30 = *((_OWORD *)a2 + 5);
          *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 5) = v30;
        }
        a1[96] = a2[96];
      }
      else
      {
LABEL_23:
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        v20 = *((_OWORD *)a2 + 3);
        v21 = *((_OWORD *)a2 + 4);
        v22 = *((_OWORD *)a2 + 5);
        a1[96] = a2[96];
        *((_OWORD *)a1 + 4) = v21;
        *((_OWORD *)a1 + 5) = v22;
        *((_OWORD *)a1 + 3) = v20;
      }
      goto LABEL_33;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
  }
}

_OWORD *initializeWithTake for CommandRouter.HandshakeFailure(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  int v9;
  __int128 v10;
  __int128 v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  int *v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  __int128 v32;
  int *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  _OWORD *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  int *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  _OWORD *v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  char *v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  uint64_t v63;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for V1Command(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v29 = type metadata accessor for V1Command.Response(0);
      v30 = swift_getEnumCaseMultiPayload();
      switch(v30)
      {
        case 3:
          v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6658);
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(a1, a2, v61);
          swift_storeEnumTagMultiPayload();
          break;
        case 2:
          type metadata accessor for AnisetteCommand.Response();
          v62 = swift_getEnumCaseMultiPayload();
          v63 = __swift_instantiateConcreteTypeFromMangledName(off_2507DDAD0[v62]);
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v63 - 8) + 32))(a1, a2, v63);
          swift_storeEnumTagMultiPayload();
          swift_storeEnumTagMultiPayload();
          break;
        case 1:
          v31 = a2[3];
          a1[2] = a2[2];
          a1[3] = v31;
          a1[4] = a2[4];
          v32 = a2[1];
          *a1 = *a2;
          a1[1] = v32;
          v33 = (int *)type metadata accessor for IdMSAccount();
          v34 = v33[5];
          v35 = (char *)a1 + v34;
          v36 = (char *)a2 + v34;
          v37 = sub_2365AF8D0();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
          v38 = v33[6];
          v39 = (_OWORD *)((char *)a1 + v38);
          v40 = (_OWORD *)((char *)a2 + v38);
          v41 = v40[3];
          v39[2] = v40[2];
          v39[3] = v41;
          *(_OWORD *)((char *)v39 + 57) = *(_OWORD *)((char *)v40 + 57);
          v42 = v40[1];
          *v39 = *v40;
          v39[1] = v42;
          *(_QWORD *)((char *)a1 + v33[7]) = *(_QWORD *)((char *)a2 + v33[7]);
          v43 = type metadata accessor for SignInCommand.Response(0);
          *(_QWORD *)((char *)a1 + *(int *)(v43 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v43 + 20));
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
          break;
      }
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
LABEL_20:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      v8 = type metadata accessor for V1Command.Request(0);
      v9 = swift_getEnumCaseMultiPayload();
      if (v9 == 3)
      {
        v44 = a2[3];
        a1[2] = a2[2];
        a1[3] = v44;
        a1[4] = a2[4];
        v45 = a2[1];
        *a1 = *a2;
        a1[1] = v45;
        v46 = (int *)type metadata accessor for IdMSAccount();
        v47 = v46[5];
        v48 = (char *)a1 + v47;
        v49 = (char *)a2 + v47;
        v50 = sub_2365AF8D0();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v48, v49, v50);
        v51 = v46[6];
        v52 = (_OWORD *)((char *)a1 + v51);
        v53 = (_OWORD *)((char *)a2 + v51);
        v54 = v53[3];
        v52[2] = v53[2];
        v52[3] = v54;
        *(_OWORD *)((char *)v52 + 57) = *(_OWORD *)((char *)v53 + 57);
        v55 = v53[1];
        *v52 = *v53;
        v52[1] = v55;
        *(_QWORD *)((char *)a1 + v46[7]) = *(_QWORD *)((char *)a2 + v46[7]);
        v56 = *(int *)(type metadata accessor for AuthenticateCommand.Request(0) + 20);
        v57 = (char *)a1 + v56;
        v58 = (char *)a2 + v56;
        v59 = *((_OWORD *)v58 + 3);
        *((_OWORD *)v57 + 2) = *((_OWORD *)v58 + 2);
        *((_OWORD *)v57 + 3) = v59;
        v57[64] = v58[64];
        v60 = *((_OWORD *)v58 + 1);
        *(_OWORD *)v57 = *(_OWORD *)v58;
        *((_OWORD *)v57 + 1) = v60;
        swift_storeEnumTagMultiPayload();
      }
      else if (v9 == 1)
      {
        v10 = a2[3];
        a1[2] = a2[2];
        a1[3] = v10;
        a1[4] = a2[4];
        v11 = a2[1];
        *a1 = *a2;
        a1[1] = v11;
        v12 = (int *)type metadata accessor for IdMSAccount();
        v13 = v12[5];
        v14 = (char *)a1 + v13;
        v15 = (char *)a2 + v13;
        v16 = sub_2365AF8D0();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
        v17 = v12[6];
        v18 = (_OWORD *)((char *)a1 + v17);
        v19 = (_OWORD *)((char *)a2 + v17);
        v20 = v19[3];
        v18[2] = v19[2];
        v18[3] = v20;
        *(_OWORD *)((char *)v18 + 57) = *(_OWORD *)((char *)v19 + 57);
        v21 = v19[1];
        *v18 = *v19;
        v18[1] = v21;
        *(_QWORD *)((char *)a1 + v12[7]) = *(_QWORD *)((char *)a2 + v12[7]);
        v22 = (int *)type metadata accessor for SignInCommand.Request(0);
        v23 = v22[5];
        v24 = (_OWORD *)((char *)a1 + v23);
        v25 = (_OWORD *)((char *)a2 + v23);
        v26 = v25[3];
        v24[2] = v25[2];
        v24[3] = v26;
        v27 = v25[5];
        v24[4] = v25[4];
        v24[5] = v27;
        v28 = v25[1];
        *v24 = *v25;
        v24[1] = v28;
        *((_BYTE *)a1 + v22[6]) = *((_BYTE *)a2 + v22[6]);
        *((_BYTE *)a1 + v22[7]) = *((_BYTE *)a2 + v22[7]);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_20;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_OWORD *assignWithTake for CommandRouter.HandshakeFailure(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  int v9;
  __int128 v10;
  __int128 v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  int *v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  __int128 v32;
  int *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  _OWORD *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  int *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  _OWORD *v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  char *v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  uint64_t v63;

  if (a1 != a2)
  {
    sub_236465A18((uint64_t)a1, type metadata accessor for CommandRouter.HandshakeFailure);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for V1Command(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 1)
      {
        v29 = type metadata accessor for V1Command.Response(0);
        v30 = swift_getEnumCaseMultiPayload();
        switch(v30)
        {
          case 3:
            v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6658);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(a1, a2, v61);
            swift_storeEnumTagMultiPayload();
            break;
          case 2:
            type metadata accessor for AnisetteCommand.Response();
            v62 = swift_getEnumCaseMultiPayload();
            v63 = __swift_instantiateConcreteTypeFromMangledName(off_2507DDAD0[v62]);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v63 - 8) + 32))(a1, a2, v63);
            swift_storeEnumTagMultiPayload();
            swift_storeEnumTagMultiPayload();
            break;
          case 1:
            v31 = a2[3];
            a1[2] = a2[2];
            a1[3] = v31;
            a1[4] = a2[4];
            v32 = a2[1];
            *a1 = *a2;
            a1[1] = v32;
            v33 = (int *)type metadata accessor for IdMSAccount();
            v34 = v33[5];
            v35 = (char *)a1 + v34;
            v36 = (char *)a2 + v34;
            v37 = sub_2365AF8D0();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
            v38 = v33[6];
            v39 = (_OWORD *)((char *)a1 + v38);
            v40 = (_OWORD *)((char *)a2 + v38);
            v41 = v40[3];
            v39[2] = v40[2];
            v39[3] = v41;
            *(_OWORD *)((char *)v39 + 57) = *(_OWORD *)((char *)v40 + 57);
            v42 = v40[1];
            *v39 = *v40;
            v39[1] = v42;
            *(_QWORD *)((char *)a1 + v33[7]) = *(_QWORD *)((char *)a2 + v33[7]);
            v43 = type metadata accessor for SignInCommand.Response(0);
            *(_QWORD *)((char *)a1 + *(int *)(v43 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v43 + 20));
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
            break;
        }
      }
      else
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
LABEL_21:
          swift_storeEnumTagMultiPayload();
          return a1;
        }
        v8 = type metadata accessor for V1Command.Request(0);
        v9 = swift_getEnumCaseMultiPayload();
        if (v9 == 3)
        {
          v44 = a2[3];
          a1[2] = a2[2];
          a1[3] = v44;
          a1[4] = a2[4];
          v45 = a2[1];
          *a1 = *a2;
          a1[1] = v45;
          v46 = (int *)type metadata accessor for IdMSAccount();
          v47 = v46[5];
          v48 = (char *)a1 + v47;
          v49 = (char *)a2 + v47;
          v50 = sub_2365AF8D0();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v48, v49, v50);
          v51 = v46[6];
          v52 = (_OWORD *)((char *)a1 + v51);
          v53 = (_OWORD *)((char *)a2 + v51);
          v54 = v53[3];
          v52[2] = v53[2];
          v52[3] = v54;
          *(_OWORD *)((char *)v52 + 57) = *(_OWORD *)((char *)v53 + 57);
          v55 = v53[1];
          *v52 = *v53;
          v52[1] = v55;
          *(_QWORD *)((char *)a1 + v46[7]) = *(_QWORD *)((char *)a2 + v46[7]);
          v56 = *(int *)(type metadata accessor for AuthenticateCommand.Request(0) + 20);
          v57 = (char *)a1 + v56;
          v58 = (char *)a2 + v56;
          v59 = *((_OWORD *)v58 + 3);
          *((_OWORD *)v57 + 2) = *((_OWORD *)v58 + 2);
          *((_OWORD *)v57 + 3) = v59;
          v57[64] = v58[64];
          v60 = *((_OWORD *)v58 + 1);
          *(_OWORD *)v57 = *(_OWORD *)v58;
          *((_OWORD *)v57 + 1) = v60;
          swift_storeEnumTagMultiPayload();
        }
        else if (v9 == 1)
        {
          v10 = a2[3];
          a1[2] = a2[2];
          a1[3] = v10;
          a1[4] = a2[4];
          v11 = a2[1];
          *a1 = *a2;
          a1[1] = v11;
          v12 = (int *)type metadata accessor for IdMSAccount();
          v13 = v12[5];
          v14 = (char *)a1 + v13;
          v15 = (char *)a2 + v13;
          v16 = sub_2365AF8D0();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
          v17 = v12[6];
          v18 = (_OWORD *)((char *)a1 + v17);
          v19 = (_OWORD *)((char *)a2 + v17);
          v20 = v19[3];
          v18[2] = v19[2];
          v18[3] = v20;
          *(_OWORD *)((char *)v18 + 57) = *(_OWORD *)((char *)v19 + 57);
          v21 = v19[1];
          *v18 = *v19;
          v18[1] = v21;
          *(_QWORD *)((char *)a1 + v12[7]) = *(_QWORD *)((char *)a2 + v12[7]);
          v22 = (int *)type metadata accessor for SignInCommand.Request(0);
          v23 = v22[5];
          v24 = (_OWORD *)((char *)a1 + v23);
          v25 = (_OWORD *)((char *)a2 + v23);
          v26 = v25[3];
          v24[2] = v25[2];
          v24[3] = v26;
          v27 = v25[5];
          v24[4] = v25[4];
          v24[5] = v27;
          v28 = v25[1];
          *v24 = *v25;
          v24[1] = v28;
          *((_BYTE *)a1 + v22[6]) = *((_BYTE *)a2 + v22[6]);
          *((_BYTE *)a1 + v22[7]) = *((_BYTE *)a2 + v22[7]);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
        }
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_21;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_236595A14()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for V1Command(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t sub_236595A90()
{
  unint64_t result;

  result = qword_2563ED480;
  if (!qword_2563ED480)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for V1CommandError, &type metadata for V1CommandError);
    atomic_store(result, (unint64_t *)&qword_2563ED480);
  }
  return result;
}

uint64_t sub_236595AD4(uint64_t a1)
{
  uint64_t v1;

  return sub_236587178(a1, v1);
}

uint64_t sub_236595ADC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_236595B20()
{
  return objectdestroy_178Tm();
}

uint64_t sub_236595B28(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_23647E274;
  return sub_236585EF0(a1, v4, v5, v6, v7, v8);
}

id sub_236595BA8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  if ((a10 & 1) != 0)
    return a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return (id)sub_23648DC24(a5, a6);
}

void sub_236595C20(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  if ((a10 & 1) != 0)
  {

  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23648DD50(a5, a6);
  }
}

uint64_t sub_236595C98()
{
  _QWORD *v0;

  swift_release();
  if (v0[5])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v0[9])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  if (v0[14])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_236595D20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23647E274;
  return sub_236585D00(a1, v4, (uint64_t *)(v1 + 24));
}

unint64_t sub_236595D88()
{
  unint64_t result;

  result = qword_2563E4D78;
  if (!qword_2563E4D78)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2563E4D78);
  }
  return result;
}

uint64_t sub_236595DC4()
{
  return objectdestroy_178Tm();
}

uint64_t sub_236595DCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_236477420;
  v3[2] = v2;
  return swift_task_switch();
}

id sub_236595E3C()
{
  id *v0;

  return objc_msgSend(*v0, sel_isNetworkReachable);
}

uint64_t dispatch thunk of AISInternetReachabilityProvider.isNetworkReachable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

void *SignInPreflightHelper.signInRequestHandler.getter()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  sub_2365AFAC8();
  if (!v2)
    return 0;
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = v2;
  *(_QWORD *)(v0 + 24) = v3;
  return &unk_2563ED500;
}

uint64_t sub_236595ECC(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v4 = *a2;
  v7 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v5;
  *v5 = v3;
  v5[1] = sub_236477420;
  return v7(v4);
}

uint64_t sub_236595F2C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  swift_retain();
  sub_2365AFAC8();
  result = swift_release();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t sub_236595F7C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = swift_allocObject();
    v5 = &unk_2563ED548;
    *(_QWORD *)(v4 + 16) = &unk_2563ED548;
    *(_QWORD *)(v4 + 24) = v3;
  }
  else
  {
    v5 = 0;
  }
  sub_23645063C(v1);
  swift_retain();
  sub_23645063C((uint64_t)v5);
  sub_2365AFAD4();
  sub_236450690((uint64_t)v5);
  return swift_release();
}

uint64_t sub_236596058(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_236475CB8;
  return v5();
}

uint64_t sub_2365960BC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2365960E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_2563ED4F8 + dword_2563ED4F8))(a1, v4);
}

uint64_t SignInPreflightHelper.signInRequestHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a1)
  {
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = a1;
    *(_QWORD *)(v4 + 24) = a2;
  }
  sub_23645063C(a1);
  sub_2365AFAD4();
  return sub_236450690(a1);
}

uint64_t sub_2365961D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_2563ED508 + dword_2563ED508))(a1, a2, v6);
}

void (*SignInPreflightHelper.signInRequestHandler.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  v2[6] = sub_2365AFABC();
  v2[7] = v3;
  v4 = *v3;
  v5 = v3[1];
  if (*v3)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = &unk_2563ED528;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v2[4] = v7;
  v2[5] = v6;
  sub_23645063C(v4);
  return sub_2365962E4;
}

void sub_2365962E4(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  void (*v11)(uint64_t *, _QWORD);
  uint64_t v12;
  uint64_t *v13;
  void (*v14)(uint64_t *, _QWORD);
  uint64_t v15;

  v2 = *a1;
  v3 = (*a1)[4];
  if ((a2 & 1) != 0)
  {
    v4 = v2[5];
    if (v3)
    {
      v5 = swift_allocObject();
      *(_QWORD *)(v5 + 16) = v3;
      *(_QWORD *)(v5 + 24) = v4;
      v6 = &unk_2563ED518;
    }
    else
    {
      v6 = 0;
      v5 = 0;
    }
    v11 = (void (*)(uint64_t *, _QWORD))v2[6];
    v10 = (uint64_t *)v2[7];
    v12 = *v10;
    *v10 = (uint64_t)v6;
    v10[1] = v5;
    sub_23645063C(v3);
    sub_236450690(v12);
    sub_236450690(v2[4]);
    v11(v2, 0);
  }
  else
  {
    if (v3)
    {
      v7 = v2[5];
      v8 = swift_allocObject();
      *(_QWORD *)(v8 + 16) = v3;
      *(_QWORD *)(v8 + 24) = v7;
      v9 = &unk_2563ED520;
    }
    else
    {
      v9 = 0;
      v8 = 0;
    }
    v14 = (void (*)(uint64_t *, _QWORD))v2[6];
    v13 = (uint64_t *)v2[7];
    v15 = *v13;
    *v13 = (uint64_t)v9;
    v13[1] = v8;
    sub_236450690(v15);
    v14(v2, 0);
  }
  free(v2);
}

uint64_t sub_2365963E4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_236477420;
  return ((uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_2563ED508 + dword_2563ED508))(a1, a2, v6);
}

uint64_t SignInPreflightHelper.$signInRequestHandler.getter()
{
  return sub_2365AFAE0();
}

uint64_t SignInPreflightHelper.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2563ED530);
  swift_allocObject();
  result = sub_2365AFAB0();
  *a1 = result;
  return result;
}

uint64_t SignInPreflightHelper.onSignInRequest(doExtra:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a1)
  {
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = a1;
    *(_QWORD *)(v4 + 24) = a2;
  }
  swift_retain();
  sub_23645063C(a1);
  sub_2365AFAD4();
  return swift_release();
}

ValueMetadata *type metadata accessor for SignInPreflightHelper()
{
  return &type metadata for SignInPreflightHelper;
}

void (*sub_236596594())(_QWORD *, _QWORD)
{
  void (*result)(_QWORD *, _QWORD);
  _QWORD *v1;
  _QWORD v2[4];

  sub_2365AFAC8();
  if (v2[0] == -1)
  {
    v2[0] = 0;
    sub_2365AFAD4();
  }
  result = (void (*)(_QWORD *, _QWORD))sub_2365AFABC();
  if (*v1 == -1)
  {
    __break(1u);
  }
  else
  {
    ++*v1;
    result(v2, 0);
    sub_2365AFAC8();
    return (void (*)(_QWORD *, _QWORD))v2[0];
  }
  return result;
}

uint64_t AutomaticSetupModelExchange.init(queue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = &unk_2563ED550;
  a2[1] = 0;
  a2[2] = &unk_2563ED558;
  a2[3] = 0;
  a2[4] = &unk_2563ED560;
  a2[5] = 0;
  a2[6] = &unk_2563ED568;
  a2[7] = 0;
  a2[8] = &unk_2563ED570;
  a2[9] = 0;
  a2[10] = &unk_2563ED578;
  a2[11] = 0;
  a2[12] = &unk_2563ED580;
  a2[13] = 0;
  a2[14] = &unk_2563ED588;
  a2[15] = 0;
  a2[16] = &unk_2563ED590;
  a2[17] = 0;
  a2[18] = &unk_2563ED598;
  a2[19] = 0;
  a2[20] = result;
  a2[21] = &unk_2563ED5A0;
  a2[22] = 0;
  a2[23] = &unk_2563ED5A8;
  a2[24] = 0;
  a2[25] = &unk_2563ED5B0;
  a2[26] = 0;
  a2[27] = &unk_2563ED5B8;
  a2[28] = 0;
  a2[29] = &unk_2563ED5C0;
  a2[30] = 0;
  a2[31] = &unk_2563ED5C8;
  a2[32] = 0;
  a2[33] = &unk_2563ED5D0;
  a2[34] = 0;
  a2[35] = &unk_2563ED5D8;
  a2[36] = 0;
  a2[37] = &unk_2563ED5E0;
  a2[38] = 0;
  a2[39] = &unk_2563ED5E8;
  a2[40] = 0;
  a2[41] = &unk_2563ED5F0;
  a2[42] = 0;
  a2[43] = &unk_2563ED5F8;
  a2[44] = 0;
  a2[45] = &unk_2563ED600;
  a2[46] = 0;
  a2[47] = &unk_2563ED608;
  a2[48] = 0;
  a2[49] = &unk_2563ED610;
  a2[50] = 0;
  a2[51] = &unk_2563ED618;
  a2[52] = 0;
  a2[53] = &unk_2563ED620;
  a2[54] = 0;
  a2[55] = &unk_2563ED628;
  a2[56] = 0;
  a2[57] = &unk_2563ED630;
  a2[58] = 0;
  a2[59] = &unk_2563ED638;
  a2[60] = 0;
  a2[61] = &unk_2563ED640;
  a2[62] = 0;
  a2[63] = &unk_2563ED648;
  a2[64] = 0;
  a2[65] = &unk_2563ED650;
  a2[66] = 0;
  a2[67] = &unk_2563ED658;
  a2[68] = 0;
  a2[69] = &unk_2563ED660;
  a2[70] = 0;
  a2[71] = &unk_2563ED668;
  a2[72] = 0;
  a2[73] = &unk_2563ED670;
  a2[74] = 0;
  a2[75] = &unk_2563ED678;
  a2[76] = 0;
  return result;
}

uint64_t sub_2365967F8(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)(v2 + 7960) = v1;
  type metadata accessor for SignInModel();
  *(_QWORD *)(v2 + 7968) = swift_task_alloc();
  *(_QWORD *)(v2 + 7976) = swift_task_alloc();
  *(_QWORD *)(v2 + 7984) = swift_task_alloc();
  type metadata accessor for AuthenticationModel();
  *(_QWORD *)(v2 + 7992) = swift_task_alloc();
  *(_QWORD *)(v2 + 8000) = swift_task_alloc();
  v4 = swift_task_alloc();
  v5 = v1[1];
  *(_OWORD *)(v2 + 8024) = *v1;
  *(_OWORD *)(v2 + 8040) = v5;
  v6 = v1[3];
  *(_OWORD *)(v2 + 8056) = v1[2];
  *(_OWORD *)(v2 + 8072) = v6;
  v7 = v1[5];
  *(_OWORD *)(v2 + 8088) = v1[4];
  *(_OWORD *)(v2 + 8104) = v7;
  v8 = v1[7];
  *(_OWORD *)(v2 + 8120) = v1[6];
  *(_OWORD *)(v2 + 8136) = v8;
  v9 = v1[9];
  *(_OWORD *)(v2 + 8152) = v1[8];
  *(_BYTE *)(v2 + 7633) = *(_BYTE *)a1;
  *(_QWORD *)(v2 + 8008) = v4;
  *(_QWORD *)(v2 + 8016) = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 8168) = v9;
  return swift_task_switch();
}

uint64_t sub_23659692C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  const void *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  os_unfair_lock_s *v44;
  uint64_t v45;
  int *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  os_unfair_lock_s *v75;
  int *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const void *v99;
  uint64_t v100;
  uint64_t v101;
  _OWORD *v102;
  os_unfair_lock_s *v103;
  int *v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  _QWORD *v115;
  uint64_t result;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  const void *v121;
  _QWORD *v122;
  uint64_t v123;
  const void *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  os_unfair_lock_s *v129;
  uint64_t v130;
  int *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  os_unfair_lock_s *v137;
  int *v138;
  _QWORD *v139;
  uint64_t v140;
  _OWORD *v141;
  os_unfair_lock_s *v142;
  const void *v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  _QWORD *v147;
  int *v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  _QWORD *v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  uint64_t (*v164)(uint64_t);
  uint64_t v165;
  uint64_t (*v166)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v167)(uint64_t, uint64_t);
  __int128 v168;
  __int128 v169;

  v1 = *(_QWORD *)(v0 + 8016);
  swift_getKeyPath();
  *(_QWORD *)(v0 + 8184) = OBJC_IVAR____TtC12AppleIDSetup10SetupModel___observationRegistrar;
  *(_QWORD *)(v0 + 7904) = v1;
  *(_QWORD *)(v0 + 0x2000) = sub_236498A1C();
  swift_retain();
  sub_2365AFA44();
  swift_release();
  swift_getKeyPath();
  *(_QWORD *)(v0 + 7896) = v1;
  sub_2365AFA44();
  swift_release();
  v2 = *(_QWORD *)(v1 + 16);
  v3 = v2 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v2 + 16);
  v4 = (os_unfair_lock_s *)(v2 + ((*(unsigned int *)(*(_QWORD *)v2 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v4);
  sub_236571850(v3, v0 + 7696);
  *(_QWORD *)(v0 + 8200) = 0;
  os_unfair_lock_unlock(v4);
  swift_release();
  v5 = *(_QWORD *)(v0 + 7696);
  *(_QWORD *)(v0 + 8208) = v5;
  v6 = *(_QWORD *)(v0 + 7704);
  *(_QWORD *)(v0 + 8216) = v6;
  v7 = *(_QWORD *)(v0 + 7712);
  *(_QWORD *)(v0 + 8224) = v7;
  v8 = *(_QWORD *)(v0 + 7720);
  *(_QWORD *)(v0 + 8232) = v8;
  v9 = *(_QWORD *)(v0 + 7728);
  *(_QWORD *)(v0 + 8240) = v9;
  v10 = *(_QWORD *)(v0 + 7736);
  v11 = *(unsigned __int8 *)(v0 + 7744);
  *(_BYTE *)(v0 + 7634) = v11;
  *(_QWORD *)(v0 + 8248) = v10;
  switch(v11)
  {
    case 250:
      if ((*(_BYTE *)(v0 + 7633) & 1) != 0)
        goto LABEL_18;
      v12 = v0 + 3712;
      v13 = (const void *)(*(_QWORD *)(v0 + 7960) + 160);
      *(_OWORD *)(v0 + 3712) = *(_OWORD *)(v0 + 8024);
      *(_OWORD *)(v0 + 3728) = *(_OWORD *)(v0 + 8040);
      *(_OWORD *)(v0 + 3744) = *(_OWORD *)(v0 + 8056);
      *(_OWORD *)(v0 + 3760) = *(_OWORD *)(v0 + 8072);
      *(_OWORD *)(v0 + 3776) = *(_OWORD *)(v0 + 8088);
      *(_OWORD *)(v0 + 3792) = *(_OWORD *)(v0 + 8104);
      *(_OWORD *)(v0 + 3808) = *(_OWORD *)(v0 + 8120);
      *(_OWORD *)(v0 + 3824) = *(_OWORD *)(v0 + 8136);
      *(_OWORD *)(v0 + 3840) = *(_OWORD *)(v0 + 8152);
      v163 = *(_OWORD *)(v0 + 8168);
      *(_OWORD *)(v0 + 3856) = v163;
      memcpy((void *)(v0 + 3872), v13, 0x1C8uLL);
      v164 = (uint64_t (*)(uint64_t))(*(int *)v163 + (_QWORD)v163);
      v14 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 8352) = v14;
      *v14 = v0;
      v14[1] = sub_236598568;
      return v164(v12);
    case 251:
      if ((*(_BYTE *)(v0 + 7633) & 1) != 0)
      {
        v17 = *(_QWORD *)(v0 + 8016);
        *(_OWORD *)(v0 + 7640) = 0u;
        *(_OWORD *)(v0 + 7656) = 0u;
        *(_OWORD *)(v0 + 7672) = 0u;
        *(_BYTE *)(v0 + 7688) = -6;
        swift_getKeyPath();
        v18 = swift_task_alloc();
        *(_QWORD *)(v18 + 16) = v17;
        *(_QWORD *)(v18 + 24) = v0 + 7640;
        *(_QWORD *)(v0 + 7872) = v17;
        sub_2365AFA38();
        swift_release();
        goto LABEL_8;
      }
      v12 = v0 + 4944;
      v124 = (const void *)(*(_QWORD *)(v0 + 7960) + 160);
      *(_OWORD *)(v0 + 4944) = *(_OWORD *)(v0 + 8024);
      *(_OWORD *)(v0 + 4960) = *(_OWORD *)(v0 + 8040);
      *(_OWORD *)(v0 + 4976) = *(_OWORD *)(v0 + 8056);
      *(_OWORD *)(v0 + 4992) = *(_OWORD *)(v0 + 8072);
      *(_OWORD *)(v0 + 5008) = *(_OWORD *)(v0 + 8088);
      *(_OWORD *)(v0 + 5024) = *(_OWORD *)(v0 + 8104);
      *(_OWORD *)(v0 + 5040) = *(_OWORD *)(v0 + 8120);
      v168 = *(_OWORD *)(v0 + 8136);
      *(_OWORD *)(v0 + 5056) = v168;
      *(_OWORD *)(v0 + 5072) = *(_OWORD *)(v0 + 8152);
      *(_OWORD *)(v0 + 5088) = *(_OWORD *)(v0 + 8168);
      memcpy((void *)(v0 + 5104), v124, 0x1C8uLL);
      v164 = (uint64_t (*)(uint64_t))(*(int *)v168 + (_QWORD)v168);
      v125 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 8336) = v125;
      *v125 = v0;
      v125[1] = sub_23659822C;
      return v164(v12);
    case 252:
      v19 = *(_QWORD *)(v0 + 8176);
      v20 = *(_QWORD *)(v0 + 8168);
      v21 = *(_QWORD *)(v0 + 8160);
      v22 = *(_QWORD *)(v0 + 8152);
      v23 = *(_QWORD *)(v0 + 8144);
      v24 = *(_QWORD *)(v0 + 8136);
      v25 = *(_QWORD *)(v0 + 8128);
      v26 = *(_QWORD *)(v0 + 8120);
      v27 = *(_QWORD *)(v0 + 8112);
      v28 = *(_QWORD *)(v0 + 8104);
      v29 = *(_QWORD *)(v0 + 8096);
      v30 = *(_QWORD *)(v0 + 8088);
      v31 = *(_QWORD *)(v0 + 8080);
      v32 = *(_QWORD *)(v0 + 8072);
      v33 = *(_QWORD *)(v0 + 8064);
      v34 = *(_QWORD *)(v0 + 8056);
      v35 = *(_QWORD *)(v0 + 8048);
      v36 = *(_QWORD *)(v0 + 8040);
      v37 = *(_QWORD *)(v0 + 8032);
      v38 = *(_QWORD *)(v0 + 8024);
      v39 = (const void *)(*(_QWORD *)(v0 + 7960) + 160);
      v40 = *(_QWORD *)(v0 + 8016);
      if (*(_BYTE *)(v0 + 7633) == 1)
      {
        v41 = *(_QWORD *)(v0 + 7976);
        *(_QWORD *)(v0 + 1248) = v38;
        *(_QWORD *)(v0 + 1256) = v37;
        *(_QWORD *)(v0 + 1264) = v36;
        *(_QWORD *)(v0 + 1272) = v35;
        *(_QWORD *)(v0 + 1280) = v34;
        *(_QWORD *)(v0 + 1288) = v33;
        *(_QWORD *)(v0 + 1296) = v32;
        *(_QWORD *)(v0 + 1304) = v31;
        *(_QWORD *)(v0 + 1312) = v30;
        *(_QWORD *)(v0 + 1320) = v29;
        *(_QWORD *)(v0 + 1328) = v28;
        *(_QWORD *)(v0 + 1336) = v27;
        *(_QWORD *)(v0 + 1344) = v26;
        *(_QWORD *)(v0 + 1352) = v25;
        *(_QWORD *)(v0 + 1360) = v24;
        *(_QWORD *)(v0 + 1368) = v23;
        *(_QWORD *)(v0 + 1376) = v22;
        *(_QWORD *)(v0 + 1384) = v21;
        *(_QWORD *)(v0 + 1392) = v20;
        *(_QWORD *)(v0 + 1400) = v19;
        memcpy((void *)(v0 + 1408), v39, 0x1C8uLL);
        swift_getKeyPath();
        *(_QWORD *)(v0 + 7808) = v40;
        sub_2365AFA44();
        swift_release();
        swift_getKeyPath();
        *(_QWORD *)(v0 + 7936) = v40;
        sub_2365AFA44();
        swift_release();
        v42 = *(_QWORD *)(v1 + 16);
        v43 = v42 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v42 + 16);
        v44 = (os_unfair_lock_s *)(v42 + ((*(unsigned int *)(*(_QWORD *)v42 + 48) + 3) & 0x1FFFFFFFCLL));
        swift_retain();
        os_unfair_lock_lock(v44);
        sub_236572E68(v43, v41);
        *(_QWORD *)(v0 + 8312) = 0;
        v45 = v0 + 1248;
        v46 = *(int **)(v0 + 8104);
        os_unfair_lock_unlock(v44);
        swift_release();
        v166 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v46 + *v46);
        v47 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 8320) = v47;
        *v47 = v0;
        v47[1] = sub_236598040;
        v48 = *(_QWORD *)(v0 + 7984);
        v49 = *(_QWORD *)(v0 + 7976);
        goto LABEL_13;
      }
      v126 = *(_QWORD *)(v0 + 7968);
      *(_QWORD *)(v0 + 2480) = v38;
      *(_QWORD *)(v0 + 2488) = v37;
      *(_QWORD *)(v0 + 2496) = v36;
      *(_QWORD *)(v0 + 2504) = v35;
      *(_QWORD *)(v0 + 2512) = v34;
      *(_QWORD *)(v0 + 2520) = v33;
      *(_QWORD *)(v0 + 2528) = v32;
      *(_QWORD *)(v0 + 2536) = v31;
      *(_QWORD *)(v0 + 2544) = v30;
      *(_QWORD *)(v0 + 2552) = v29;
      *(_QWORD *)(v0 + 2560) = v28;
      *(_QWORD *)(v0 + 2568) = v27;
      *(_QWORD *)(v0 + 2576) = v26;
      *(_QWORD *)(v0 + 2584) = v25;
      *(_QWORD *)(v0 + 2592) = v24;
      *(_QWORD *)(v0 + 2600) = v23;
      *(_QWORD *)(v0 + 2608) = v22;
      *(_QWORD *)(v0 + 2616) = v21;
      *(_QWORD *)(v0 + 2624) = v20;
      *(_QWORD *)(v0 + 2632) = v19;
      memcpy((void *)(v0 + 2640), v39, 0x1C8uLL);
      swift_getKeyPath();
      *(_QWORD *)(v0 + 7848) = v40;
      sub_2365AFA44();
      swift_release();
      swift_getKeyPath();
      *(_QWORD *)(v0 + 7840) = v40;
      sub_2365AFA44();
      swift_release();
      v127 = *(_QWORD *)(v1 + 16);
      v128 = v127 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v127 + 16);
      v129 = (os_unfair_lock_s *)(v127 + ((*(unsigned int *)(*(_QWORD *)v127 + 48) + 3) & 0x1FFFFFFFCLL));
      swift_retain();
      os_unfair_lock_lock(v129);
      sub_236572E68(v128, v126);
      v130 = v0 + 2480;
      v131 = *(int **)(v0 + 8088);
      os_unfair_lock_unlock(v129);
      swift_release();
      v167 = (uint64_t (*)(uint64_t, uint64_t))((char *)v131 + *v131);
      v132 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 8328) = v132;
      *v132 = v0;
      v132[1] = sub_2365981C4;
      v133 = *(_QWORD *)(v0 + 7968);
      goto LABEL_23;
    case 253:
      v50 = *(_QWORD *)(v0 + 8176);
      v51 = *(_QWORD *)(v0 + 8168);
      v52 = *(_QWORD *)(v0 + 8160);
      v53 = *(_QWORD *)(v0 + 8152);
      v54 = *(_QWORD *)(v0 + 8144);
      v55 = *(_QWORD *)(v0 + 8136);
      v56 = *(_QWORD *)(v0 + 8128);
      v57 = *(_QWORD *)(v0 + 8120);
      v58 = *(_QWORD *)(v0 + 8112);
      v59 = *(_QWORD *)(v0 + 8104);
      v60 = *(_QWORD *)(v0 + 8096);
      v61 = *(_QWORD *)(v0 + 8088);
      v62 = *(_QWORD *)(v0 + 8080);
      v63 = *(_QWORD *)(v0 + 8072);
      v64 = *(_QWORD *)(v0 + 8064);
      v65 = *(_QWORD *)(v0 + 8056);
      v66 = *(_QWORD *)(v0 + 8048);
      v67 = *(_QWORD *)(v0 + 8040);
      v68 = *(_QWORD *)(v0 + 8032);
      v69 = *(_QWORD *)(v0 + 8024);
      v70 = (const void *)(*(_QWORD *)(v0 + 7960) + 160);
      v71 = *(_QWORD *)(v0 + 8016);
      if (*(_BYTE *)(v0 + 7633) == 1)
      {
        v72 = *(_QWORD *)(v0 + 8000);
        *(_QWORD *)(v0 + 632) = v69;
        *(_QWORD *)(v0 + 640) = v68;
        *(_QWORD *)(v0 + 648) = v67;
        *(_QWORD *)(v0 + 656) = v66;
        *(_QWORD *)(v0 + 664) = v65;
        *(_QWORD *)(v0 + 672) = v64;
        *(_QWORD *)(v0 + 680) = v63;
        *(_QWORD *)(v0 + 688) = v62;
        *(_QWORD *)(v0 + 696) = v61;
        *(_QWORD *)(v0 + 704) = v60;
        *(_QWORD *)(v0 + 712) = v59;
        *(_QWORD *)(v0 + 720) = v58;
        *(_QWORD *)(v0 + 728) = v57;
        *(_QWORD *)(v0 + 736) = v56;
        *(_QWORD *)(v0 + 744) = v55;
        *(_QWORD *)(v0 + 752) = v54;
        *(_QWORD *)(v0 + 760) = v53;
        *(_QWORD *)(v0 + 768) = v52;
        *(_QWORD *)(v0 + 776) = v51;
        *(_QWORD *)(v0 + 784) = v50;
        memcpy((void *)(v0 + 792), v70, 0x1C8uLL);
        swift_getKeyPath();
        *(_QWORD *)(v0 + 7816) = v71;
        sub_2365AFA44();
        swift_release();
        swift_getKeyPath();
        *(_QWORD *)(v0 + 7824) = v71;
        sub_2365AFA44();
        swift_release();
        v73 = *(_QWORD *)(v1 + 16);
        v74 = v73 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v73 + 16);
        v75 = (os_unfair_lock_s *)(v73 + ((*(unsigned int *)(*(_QWORD *)v73 + 48) + 3) & 0x1FFFFFFFCLL));
        swift_retain();
        os_unfair_lock_lock(v75);
        sub_23657282C(v74, v72);
        *(_QWORD *)(v0 + 8288) = 0;
        v45 = v0 + 632;
        v76 = *(int **)(v0 + 8072);
        os_unfair_lock_unlock(v75);
        swift_release();
        v166 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v76 + *v76);
        v77 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 8296) = v77;
        *v77 = v0;
        v77[1] = sub_236597E54;
        v48 = *(_QWORD *)(v0 + 8008);
        v49 = *(_QWORD *)(v0 + 8000);
LABEL_13:
        v78 = v45;
        goto LABEL_16;
      }
      v134 = *(_QWORD *)(v0 + 7992);
      *(_QWORD *)(v0 + 5560) = v69;
      *(_QWORD *)(v0 + 5568) = v68;
      *(_QWORD *)(v0 + 5576) = v67;
      *(_QWORD *)(v0 + 5584) = v66;
      *(_QWORD *)(v0 + 5592) = v65;
      *(_QWORD *)(v0 + 5600) = v64;
      *(_QWORD *)(v0 + 5608) = v63;
      *(_QWORD *)(v0 + 5616) = v62;
      *(_QWORD *)(v0 + 5624) = v61;
      *(_QWORD *)(v0 + 5632) = v60;
      *(_QWORD *)(v0 + 5640) = v59;
      *(_QWORD *)(v0 + 5648) = v58;
      *(_QWORD *)(v0 + 5656) = v57;
      *(_QWORD *)(v0 + 5664) = v56;
      *(_QWORD *)(v0 + 5672) = v55;
      *(_QWORD *)(v0 + 5680) = v54;
      *(_QWORD *)(v0 + 5688) = v53;
      *(_QWORD *)(v0 + 5696) = v52;
      *(_QWORD *)(v0 + 5704) = v51;
      *(_QWORD *)(v0 + 5712) = v50;
      memcpy((void *)(v0 + 5720), v70, 0x1C8uLL);
      swift_getKeyPath();
      *(_QWORD *)(v0 + 7952) = v71;
      sub_2365AFA44();
      swift_release();
      swift_getKeyPath();
      *(_QWORD *)(v0 + 7888) = v71;
      sub_2365AFA44();
      swift_release();
      v135 = *(_QWORD *)(v1 + 16);
      v136 = v135 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v135 + 16);
      v137 = (os_unfair_lock_s *)(v135 + ((*(unsigned int *)(*(_QWORD *)v135 + 48) + 3) & 0x1FFFFFFFCLL));
      swift_retain();
      os_unfair_lock_lock(v137);
      sub_23657282C(v136, v134);
      v130 = v0 + 5560;
      v138 = *(int **)(v0 + 8056);
      os_unfair_lock_unlock(v137);
      swift_release();
      v167 = (uint64_t (*)(uint64_t, uint64_t))((char *)v138 + *v138);
      v139 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 8304) = v139;
      *v139 = v0;
      v139[1] = sub_236597FD8;
      v133 = *(_QWORD *)(v0 + 7992);
LABEL_23:
      v123 = v130;
      goto LABEL_28;
    case 254:
      v79 = *(_QWORD *)(v0 + 8176);
      v80 = *(_QWORD *)(v0 + 8168);
      v81 = *(_QWORD *)(v0 + 8160);
      v82 = *(_QWORD *)(v0 + 8152);
      v83 = *(_QWORD *)(v0 + 8144);
      v84 = *(_QWORD *)(v0 + 8136);
      v85 = *(_QWORD *)(v0 + 8128);
      v86 = *(_QWORD *)(v0 + 8120);
      v87 = *(_QWORD *)(v0 + 8112);
      v88 = *(_QWORD *)(v0 + 8104);
      v89 = *(_QWORD *)(v0 + 8096);
      v90 = *(_QWORD *)(v0 + 8088);
      v91 = *(_QWORD *)(v0 + 8080);
      v92 = *(_QWORD *)(v0 + 8072);
      v93 = *(_QWORD *)(v0 + 8064);
      v94 = *(_QWORD *)(v0 + 8056);
      v95 = *(_QWORD *)(v0 + 8048);
      v96 = *(_QWORD *)(v0 + 8040);
      v97 = *(_QWORD *)(v0 + 8032);
      v98 = *(_QWORD *)(v0 + 8024);
      v99 = (const void *)(*(_QWORD *)(v0 + 7960) + 160);
      v100 = *(_QWORD *)(v0 + 8016);
      if (*(_BYTE *)(v0 + 7633) != 1)
      {
        *(_QWORD *)(v0 + 1864) = v98;
        *(_QWORD *)(v0 + 1872) = v97;
        *(_QWORD *)(v0 + 1880) = v96;
        *(_QWORD *)(v0 + 1888) = v95;
        *(_QWORD *)(v0 + 1896) = v94;
        *(_QWORD *)(v0 + 1904) = v93;
        *(_QWORD *)(v0 + 1912) = v92;
        *(_QWORD *)(v0 + 1920) = v91;
        *(_QWORD *)(v0 + 1928) = v90;
        *(_QWORD *)(v0 + 1936) = v89;
        *(_QWORD *)(v0 + 1944) = v88;
        *(_QWORD *)(v0 + 1952) = v87;
        *(_QWORD *)(v0 + 1960) = v86;
        *(_QWORD *)(v0 + 1968) = v85;
        *(_QWORD *)(v0 + 1976) = v84;
        *(_QWORD *)(v0 + 1984) = v83;
        *(_QWORD *)(v0 + 1992) = v82;
        *(_QWORD *)(v0 + 2000) = v81;
        *(_QWORD *)(v0 + 2008) = v80;
        *(_QWORD *)(v0 + 2016) = v79;
        memcpy((void *)(v0 + 2024), v99, 0x1C8uLL);
        swift_getKeyPath();
        *(_QWORD *)(v0 + 7856) = v100;
        sub_2365AFA44();
        swift_release();
        swift_getKeyPath();
        *(_QWORD *)(v0 + 7864) = v100;
        sub_2365AFA44();
        swift_release();
        v140 = *(_QWORD *)(v1 + 16);
        v141 = (_OWORD *)(v140 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v140 + 16));
        v142 = (os_unfair_lock_s *)(v140 + ((*(unsigned int *)(*(_QWORD *)v140 + 48) + 3) & 0x1FFFFFFFCLL));
        swift_retain();
        os_unfair_lock_lock(v142);
        sub_236571F64(v141, (_OWORD *)(v0 + 6704));
        v118 = v0 + 7408;
        v148 = *(int **)(v0 + 8024);
        os_unfair_lock_unlock(v142);
        swift_release();
        v149 = *(_OWORD *)(v0 + 6800);
        *(_OWORD *)(v0 + 6464) = *(_OWORD *)(v0 + 6816);
        v150 = *(_OWORD *)(v0 + 6816);
        *(_OWORD *)(v0 + 6480) = *(_OWORD *)(v0 + 6832);
        v151 = *(_OWORD *)(v0 + 6832);
        *(_OWORD *)(v0 + 6496) = *(_OWORD *)(v0 + 6848);
        v152 = *(_OWORD *)(v0 + 6848);
        *(_OWORD *)(v0 + 6512) = *(_OWORD *)(v0 + 6864);
        v153 = *(_OWORD *)(v0 + 6736);
        *(_OWORD *)(v0 + 6400) = *(_OWORD *)(v0 + 6752);
        v154 = *(_OWORD *)(v0 + 6752);
        *(_OWORD *)(v0 + 6416) = *(_OWORD *)(v0 + 6768);
        v155 = *(_OWORD *)(v0 + 6768);
        *(_OWORD *)(v0 + 6432) = *(_OWORD *)(v0 + 6784);
        v156 = *(_OWORD *)(v0 + 6784);
        *(_OWORD *)(v0 + 6448) = *(_OWORD *)(v0 + 6800);
        v157 = *(_OWORD *)(v0 + 6720);
        *(_OWORD *)(v0 + 6352) = *(_OWORD *)(v0 + 6704);
        v158 = *(_OWORD *)(v0 + 6704);
        *(_OWORD *)(v0 + 6368) = *(_OWORD *)(v0 + 6720);
        *(_OWORD *)(v0 + 6384) = *(_OWORD *)(v0 + 6736);
        *(_OWORD *)(v0 + 7520) = v150;
        *(_OWORD *)(v0 + 7536) = v151;
        *(_OWORD *)(v0 + 7552) = v152;
        *(_OWORD *)(v0 + 7568) = *(_OWORD *)(v0 + 6864);
        *(_OWORD *)(v0 + 7456) = v154;
        *(_OWORD *)(v0 + 7472) = v155;
        *(_OWORD *)(v0 + 7488) = v156;
        *(_OWORD *)(v0 + 7504) = v149;
        *(_OWORD *)(v0 + 7408) = v158;
        *(_OWORD *)(v0 + 7424) = v157;
        *(_OWORD *)(v0 + 7440) = v153;
        v167 = (uint64_t (*)(uint64_t, uint64_t))((char *)v148 + *v148);
        v159 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 8280) = v159;
        *v159 = v0;
        v159[1] = sub_236597D70;
        v123 = v0 + 1864;
        goto LABEL_27;
      }
      *(_QWORD *)(v0 + 3096) = v98;
      *(_QWORD *)(v0 + 3104) = v97;
      *(_QWORD *)(v0 + 3112) = v96;
      *(_QWORD *)(v0 + 3120) = v95;
      *(_QWORD *)(v0 + 3128) = v94;
      *(_QWORD *)(v0 + 3136) = v93;
      *(_QWORD *)(v0 + 3144) = v92;
      *(_QWORD *)(v0 + 3152) = v91;
      *(_QWORD *)(v0 + 3160) = v90;
      *(_QWORD *)(v0 + 3168) = v89;
      *(_QWORD *)(v0 + 3176) = v88;
      *(_QWORD *)(v0 + 3184) = v87;
      *(_QWORD *)(v0 + 3192) = v86;
      *(_QWORD *)(v0 + 3200) = v85;
      *(_QWORD *)(v0 + 3208) = v84;
      *(_QWORD *)(v0 + 3216) = v83;
      *(_QWORD *)(v0 + 3224) = v82;
      *(_QWORD *)(v0 + 3232) = v81;
      *(_QWORD *)(v0 + 3240) = v80;
      *(_QWORD *)(v0 + 3248) = v79;
      memcpy((void *)(v0 + 3256), v99, 0x1C8uLL);
      swift_getKeyPath();
      *(_QWORD *)(v0 + 7912) = v100;
      sub_2365AFA44();
      swift_release();
      swift_getKeyPath();
      *(_QWORD *)(v0 + 7920) = v100;
      sub_2365AFA44();
      swift_release();
      v101 = *(_QWORD *)(v1 + 16);
      v102 = (_OWORD *)(v101 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v101 + 16));
      v103 = (os_unfair_lock_s *)(v101 + ((*(unsigned int *)(*(_QWORD *)v101 + 48) + 3) & 0x1FFFFFFFCLL));
      swift_retain();
      os_unfair_lock_lock(v103);
      sub_236571F64(v102, (_OWORD *)(v0 + 6528));
      *(_QWORD *)(v0 + 8264) = 0;
      v104 = *(int **)(v0 + 8040);
      os_unfair_lock_unlock(v103);
      swift_release();
      v105 = *(_OWORD *)(v0 + 6624);
      *(_OWORD *)(v0 + 6992) = *(_OWORD *)(v0 + 6640);
      v106 = *(_OWORD *)(v0 + 6640);
      *(_OWORD *)(v0 + 7008) = *(_OWORD *)(v0 + 6656);
      v107 = *(_OWORD *)(v0 + 6656);
      *(_OWORD *)(v0 + 7024) = *(_OWORD *)(v0 + 6672);
      v108 = *(_OWORD *)(v0 + 6672);
      *(_OWORD *)(v0 + 7040) = *(_OWORD *)(v0 + 6688);
      v109 = *(_OWORD *)(v0 + 6560);
      *(_OWORD *)(v0 + 6928) = *(_OWORD *)(v0 + 6576);
      v110 = *(_OWORD *)(v0 + 6576);
      *(_OWORD *)(v0 + 6944) = *(_OWORD *)(v0 + 6592);
      v111 = *(_OWORD *)(v0 + 6592);
      *(_OWORD *)(v0 + 6960) = *(_OWORD *)(v0 + 6608);
      v112 = *(_OWORD *)(v0 + 6608);
      *(_OWORD *)(v0 + 6976) = *(_OWORD *)(v0 + 6624);
      v113 = *(_OWORD *)(v0 + 6544);
      *(_OWORD *)(v0 + 6880) = *(_OWORD *)(v0 + 6528);
      v114 = *(_OWORD *)(v0 + 6528);
      *(_OWORD *)(v0 + 6896) = *(_OWORD *)(v0 + 6544);
      *(_OWORD *)(v0 + 6912) = *(_OWORD *)(v0 + 6560);
      *(_OWORD *)(v0 + 7344) = v106;
      *(_OWORD *)(v0 + 7360) = v107;
      *(_OWORD *)(v0 + 7376) = v108;
      *(_OWORD *)(v0 + 7392) = *(_OWORD *)(v0 + 6688);
      *(_OWORD *)(v0 + 7280) = v110;
      *(_OWORD *)(v0 + 7296) = v111;
      *(_OWORD *)(v0 + 7312) = v112;
      *(_OWORD *)(v0 + 7328) = v105;
      *(_OWORD *)(v0 + 7232) = v114;
      *(_OWORD *)(v0 + 7248) = v113;
      *(_OWORD *)(v0 + 7264) = v109;
      v166 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v104 + *v104);
      v115 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 8272) = v115;
      *v115 = v0;
      v115[1] = sub_236597B9C;
      v48 = v0 + 6176;
      v78 = v0 + 3096;
      v49 = v0 + 7232;
LABEL_16:
      result = v166(v48, v78, v49);
      break;
    case 255:
      if ((*(_BYTE *)(v0 + 7633) & 1) != 0)
        goto LABEL_18;
      v143 = (const void *)(*(_QWORD *)(v0 + 7960) + 160);
      *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 8024);
      v12 = v0 + 16;
      v144 = *(_OWORD *)(v0 + 8056);
      *(_OWORD *)(v0 + 32) = *(_OWORD *)(v0 + 8040);
      *(_OWORD *)(v0 + 48) = v144;
      v145 = *(_OWORD *)(v0 + 8088);
      *(_OWORD *)(v0 + 64) = *(_OWORD *)(v0 + 8072);
      *(_OWORD *)(v0 + 80) = v145;
      v169 = *(_OWORD *)(v0 + 8120);
      *(_OWORD *)(v0 + 96) = *(_OWORD *)(v0 + 8104);
      *(_OWORD *)(v0 + 112) = v169;
      v146 = *(_OWORD *)(v0 + 8152);
      *(_OWORD *)(v0 + 128) = *(_OWORD *)(v0 + 8136);
      *(_OWORD *)(v0 + 144) = v146;
      *(_OWORD *)(v0 + 160) = *(_OWORD *)(v0 + 8168);
      memcpy((void *)(v0 + 176), v143, 0x1C8uLL);
      v164 = (uint64_t (*)(uint64_t))(*(int *)v169 + (_QWORD)v169);
      v147 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 8256) = v147;
      *v147 = v0;
      v147[1] = sub_236597B48;
      return v164(v12);
    default:
      v161 = v10;
      v162 = v9;
      v165 = v5;
      if ((*(_BYTE *)(v0 + 7633) & 1) != 0)
      {
        v15 = *(_QWORD *)(v0 + 8016);
        *(_OWORD *)(v0 + 7584) = 0u;
        *(_OWORD *)(v0 + 7600) = 0u;
        *(_OWORD *)(v0 + 7616) = 0u;
        *(_BYTE *)(v0 + 7632) = -6;
        swift_getKeyPath();
        v16 = swift_task_alloc();
        *(_QWORD *)(v16 + 16) = v15;
        *(_QWORD *)(v16 + 24) = v0 + 7584;
        *(_QWORD *)(v0 + 7880) = v15;
        sub_2365AFA38();
        swift_release();
        sub_236579AE0(v165, v6, v7, v8, v162, v161, v11);
LABEL_8:
        swift_task_dealloc();
LABEL_18:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        result = (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 8016));
      }
      else
      {
        v117 = *(_QWORD *)(v0 + 8176);
        v118 = v0 + 7752;
        v119 = *(_QWORD *)(v0 + 8168);
        v120 = *(_QWORD *)(v0 + 8144);
        v121 = (const void *)(*(_QWORD *)(v0 + 7960) + 160);
        *(_QWORD *)(v0 + 4328) = *(_QWORD *)(v0 + 8024);
        *(_OWORD *)(v0 + 4336) = *(_OWORD *)(v0 + 8032);
        *(_OWORD *)(v0 + 4352) = *(_OWORD *)(v0 + 8048);
        *(_OWORD *)(v0 + 4368) = *(_OWORD *)(v0 + 8064);
        *(_OWORD *)(v0 + 4384) = *(_OWORD *)(v0 + 8080);
        *(_OWORD *)(v0 + 4400) = *(_OWORD *)(v0 + 8096);
        *(_OWORD *)(v0 + 4416) = *(_OWORD *)(v0 + 8112);
        *(_OWORD *)(v0 + 4432) = *(_OWORD *)(v0 + 8128);
        *(_QWORD *)(v0 + 4448) = v120;
        v160 = *(_OWORD *)(v0 + 8152);
        *(_OWORD *)(v0 + 4456) = v160;
        *(_QWORD *)(v0 + 4472) = v119;
        *(_QWORD *)(v0 + 4480) = v117;
        memcpy((void *)(v0 + 4488), v121, 0x1C8uLL);
        *(_QWORD *)(v0 + 7752) = v165;
        *(_QWORD *)(v0 + 7760) = v6;
        *(_QWORD *)(v0 + 7768) = v7;
        *(_QWORD *)(v0 + 7776) = v8;
        *(_QWORD *)(v0 + 7784) = v162;
        *(_QWORD *)(v0 + 7792) = v161;
        *(_BYTE *)(v0 + 7800) = v11;
        v167 = (uint64_t (*)(uint64_t, uint64_t))(*(int *)v160 + (_QWORD)v160);
        v122 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 8344) = v122;
        *v122 = v0;
        v122[1] = sub_2365983A8;
        v123 = v0 + 4328;
LABEL_27:
        v133 = v118;
LABEL_28:
        result = v167(v123, v133);
      }
      break;
  }
  return result;
}

uint64_t sub_236597B48()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_236597B9C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *v0 + 6880;
  swift_task_dealloc();
  sub_236498A84(v1);
  return swift_task_switch();
}

uint64_t sub_236597C00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 8016);
  *(_OWORD *)(v0 + 7168) = *(_OWORD *)(v0 + 6288);
  *(_OWORD *)(v0 + 7184) = *(_OWORD *)(v0 + 6304);
  *(_OWORD *)(v0 + 7200) = *(_OWORD *)(v0 + 6320);
  *(_OWORD *)(v0 + 7216) = *(_OWORD *)(v0 + 6336);
  *(_OWORD *)(v0 + 7104) = *(_OWORD *)(v0 + 6224);
  *(_OWORD *)(v0 + 7120) = *(_OWORD *)(v0 + 6240);
  *(_OWORD *)(v0 + 7136) = *(_OWORD *)(v0 + 6256);
  *(_OWORD *)(v0 + 7152) = *(_OWORD *)(v0 + 6272);
  *(_OWORD *)(v0 + 7056) = *(_OWORD *)(v0 + 6176);
  *(_OWORD *)(v0 + 7072) = *(_OWORD *)(v0 + 6192);
  *(_OWORD *)(v0 + 7088) = *(_OWORD *)(v0 + 6208);
  swift_getKeyPath();
  v2 = swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = v0 + 7056;
  *(_QWORD *)(v0 + 7944) = v1;
  sub_2365AFA38();
  sub_236498A84(v0 + 7056);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 8016));
}

uint64_t sub_236597D70()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *v0 + 6352;
  swift_task_dealloc();
  sub_236498A84(v1);
  return swift_task_switch();
}

uint64_t sub_236597DD4()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 8016));
}

uint64_t sub_236597E54()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 8000);
  swift_task_dealloc();
  sub_236465A18(v1, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  return swift_task_switch();
}

uint64_t sub_236597EBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 8016);
  v2 = *(_QWORD *)(v0 + 8008);
  swift_getKeyPath();
  v3 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  *(_QWORD *)(v0 + 7832) = v1;
  sub_2365AFA38();
  swift_release();
  swift_task_dealloc();
  sub_236465A18(v2, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 8016));
}

uint64_t sub_236597FD8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 7992);
  swift_task_dealloc();
  sub_236465A18(v1, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  return swift_task_switch();
}

uint64_t sub_236598040()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 7976);
  swift_task_dealloc();
  sub_236465A18(v1, (uint64_t (*)(_QWORD))type metadata accessor for SignInModel);
  return swift_task_switch();
}

uint64_t sub_2365980A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 8016);
  v2 = *(_QWORD *)(v0 + 7984);
  swift_getKeyPath();
  v3 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  *(_QWORD *)(v0 + 7928) = v1;
  sub_2365AFA38();
  swift_release();
  swift_task_dealloc();
  sub_236465A18(v2, (uint64_t (*)(_QWORD))type metadata accessor for SignInModel);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 8016));
}

uint64_t sub_2365981C4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 7968);
  swift_task_dealloc();
  sub_236465A18(v1, (uint64_t (*)(_QWORD))type metadata accessor for SignInModel);
  return swift_task_switch();
}

uint64_t sub_23659822C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_236598280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 8016);
  *(_OWORD *)(v0 + 7640) = 0u;
  *(_OWORD *)(v0 + 7656) = 0u;
  *(_OWORD *)(v0 + 7672) = 0u;
  *(_BYTE *)(v0 + 7688) = -6;
  swift_getKeyPath();
  v2 = swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = v0 + 7640;
  *(_QWORD *)(v0 + 7872) = v1;
  sub_2365AFA38();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 8016));
}

uint64_t sub_2365983A8()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2365983FC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(v0 + 8240);
  v10 = *(_QWORD *)(v0 + 8248);
  v7 = *(_QWORD *)(v0 + 8224);
  v8 = *(_QWORD *)(v0 + 8232);
  v5 = *(_QWORD *)(v0 + 8208);
  v6 = *(_QWORD *)(v0 + 8216);
  v1 = *(_QWORD *)(v0 + 8016);
  *(_OWORD *)(v0 + 7584) = 0u;
  *(_OWORD *)(v0 + 7600) = 0u;
  *(_OWORD *)(v0 + 7616) = 0u;
  *(_BYTE *)(v0 + 7632) = -6;
  v2 = *(_BYTE *)(v0 + 7634);
  swift_getKeyPath();
  v3 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v0 + 7584;
  *(_QWORD *)(v0 + 7880) = v1;
  sub_2365AFA38();
  swift_release();
  sub_236579AE0(v5, v6, v7, v8, v9, v10, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 8016));
}

uint64_t sub_236598568()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t AutomaticSetupModelExchange.InternalUpdate.expectsResponse.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t AutomaticSetupModelExchange.InternalUpdate.updatedModel.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 28));
}

uint64_t sub_2365985E0(void *__src, _OWORD *a2)
{
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD *v14;

  memcpy((void *)(v2 + 16), __src, 0x268uLL);
  v4 = a2[9];
  *(_OWORD *)(v2 + 951) = a2[8];
  *(_OWORD *)(v2 + 967) = v4;
  *(_OWORD *)(v2 + 983) = a2[10];
  v5 = a2[5];
  *(_OWORD *)(v2 + 887) = a2[4];
  *(_OWORD *)(v2 + 903) = v5;
  v6 = a2[7];
  *(_OWORD *)(v2 + 919) = a2[6];
  *(_OWORD *)(v2 + 935) = v6;
  v7 = a2[1];
  *(_OWORD *)(v2 + 823) = *a2;
  *(_OWORD *)(v2 + 839) = v7;
  v8 = a2[3];
  *(_OWORD *)(v2 + 855) = a2[2];
  *(_OWORD *)(v2 + 871) = v8;
  *(_BYTE *)(v2 + 632) = 0;
  v9 = *(_OWORD *)(v2 + 960);
  *(_OWORD *)(v2 + 761) = *(_OWORD *)(v2 + 944);
  *(_OWORD *)(v2 + 777) = v9;
  *(_OWORD *)(v2 + 793) = *(_OWORD *)(v2 + 976);
  *(_QWORD *)(v2 + 808) = *(_QWORD *)(v2 + 991);
  v10 = *(_OWORD *)(v2 + 896);
  *(_OWORD *)(v2 + 697) = *(_OWORD *)(v2 + 880);
  *(_OWORD *)(v2 + 713) = v10;
  v11 = *(_OWORD *)(v2 + 928);
  *(_OWORD *)(v2 + 729) = *(_OWORD *)(v2 + 912);
  *(_OWORD *)(v2 + 745) = v11;
  v12 = *(_OWORD *)(v2 + 832);
  *(_OWORD *)(v2 + 633) = *(_OWORD *)(v2 + 816);
  *(_OWORD *)(v2 + 649) = v12;
  v13 = *(_OWORD *)(v2 + 864);
  *(_OWORD *)(v2 + 665) = *(_OWORD *)(v2 + 848);
  *(_OWORD *)(v2 + 681) = v13;
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 1352) = v14;
  *v14 = v2;
  v14[1] = sub_2365986DC;
  return static AutomaticSetupModelExchange._receiveModelUpdate(_:_:)(v2 + 1176, v2 + 16, v2 + 632);
}

uint64_t sub_2365986DC()
{
  _QWORD *v0;
  _OWORD *v1;
  _OWORD *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v1 = (_OWORD *)(*v0 + 1000);
  v2 = (_OWORD *)(*v0 + 1176);
  swift_task_dealloc();
  v3 = v2[9];
  v1[8] = v2[8];
  v1[9] = v3;
  v1[10] = v2[10];
  v4 = v2[5];
  v1[4] = v2[4];
  v1[5] = v4;
  v5 = v2[7];
  v1[6] = v2[6];
  v1[7] = v5;
  v6 = v2[1];
  *v1 = *v2;
  v1[1] = v6;
  v7 = v2[3];
  v1[2] = v2[2];
  v1[3] = v7;
  sub_236498A84((uint64_t)v1);
  return swift_task_switch();
}

uint64_t static AutomaticSetupModelExchange._receiveModelUpdate(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  *(_QWORD *)(v3 + 616) = a3;
  *(_QWORD *)(v3 + 608) = a1;
  v4 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(v3 + 624) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v3 + 640) = v4;
  v5 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v3 + 656) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(v3 + 672) = v5;
  *(_OWORD *)(v3 + 688) = *(_OWORD *)(a2 + 232);
  *(_BYTE *)(v3 + 319) = *(_BYTE *)a3;
  v6 = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(v3 + 32) = v6;
  v7 = *(_OWORD *)(a3 + 40);
  v8 = *(_OWORD *)(a3 + 56);
  v9 = *(_OWORD *)(a3 + 88);
  v10 = *(_OWORD *)(a3 + 104);
  *(_OWORD *)(v3 + 80) = *(_OWORD *)(a3 + 72);
  *(_OWORD *)(v3 + 96) = v9;
  *(_OWORD *)(v3 + 48) = v7;
  *(_OWORD *)(v3 + 64) = v8;
  v11 = *(_OWORD *)(a3 + 120);
  v12 = *(_OWORD *)(a3 + 136);
  v13 = *(_OWORD *)(a3 + 168);
  *(_OWORD *)(v3 + 160) = *(_OWORD *)(a3 + 152);
  *(_OWORD *)(v3 + 176) = v13;
  *(_OWORD *)(v3 + 128) = v11;
  *(_OWORD *)(v3 + 144) = v12;
  *(_OWORD *)(v3 + 112) = v10;
  return swift_task_switch();
}

{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_OWORD *)(v3 + 1528) = *(_OWORD *)(a2 + 248);
  v4 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(v3 + 1552) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(v3 + 1568) = v4;
  v5 = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(v3 + 1584) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(v3 + 1600) = v5;
  v6 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(v3 + 1616) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(v3 + 1632) = v6;
  v7 = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(v3 + 1648) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(v3 + 1664) = v7;
  v8 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(v3 + 1680) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(v3 + 1696) = v8;
  v9 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(v3 + 1712) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(v3 + 1728) = v9;
  v10 = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(v3 + 1744) = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(v3 + 1760) = v10;
  v11 = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(v3 + 1776) = *(_OWORD *)(a2 + 496);
  *(_QWORD *)(v3 + 1520) = a3;
  *(_QWORD *)(v3 + 1512) = a1;
  *(_QWORD *)(v3 + 1544) = *(_QWORD *)(a2 + 264);
  *(_OWORD *)(v3 + 1792) = v11;
  *(_QWORD *)(v3 + 1808) = *(_QWORD *)(a2 + 528);
  return swift_task_switch();
}

{
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a3;
  v4 = *(_OWORD *)(a2 + 552);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)(a2 + 536);
  *(_OWORD *)(v3 + 48) = v4;
  v5 = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(v3 + 64) = *(_OWORD *)(a2 + 568);
  *(_OWORD *)(v3 + 80) = v5;
  *(_OWORD *)(v3 + 96) = *(_OWORD *)(a2 + 600);
  return swift_task_switch();
}

uint64_t sub_2365987F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  int *v17;
  _QWORD *v18;
  int *v19;
  _QWORD *v20;
  int *v22;
  _QWORD *v23;
  uint64_t (*v24)(uint64_t);
  uint64_t (*v25)(void);

  v1 = *(_QWORD *)(v0 + 616);
  v2 = v0 + 16;
  v4 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v0 + 704) = v4;
  *(_QWORD *)(v0 + 712) = v3;
  v5 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 720) = v5;
  *(_QWORD *)(v0 + 728) = v6;
  v7 = *(_QWORD *)(v0 + 120);
  v8 = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v0 + 736) = v7;
  *(_QWORD *)(v0 + 744) = v8;
  v9 = *(unsigned __int8 *)(v0 + 136);
  *(_BYTE *)(v0 + 369) = v9;
  *(_OWORD *)(v0 + 192) = *(_OWORD *)(v1 + 8);
  v10 = *(_OWORD *)(v1 + 24);
  v11 = *(_OWORD *)(v1 + 40);
  v12 = *(_OWORD *)(v1 + 56);
  *(_QWORD *)(v0 + 256) = *(_QWORD *)(v1 + 72);
  *(_OWORD *)(v0 + 224) = v11;
  *(_OWORD *)(v0 + 240) = v12;
  *(_OWORD *)(v0 + 208) = v10;
  v13 = *(_OWORD *)(v0 + 137);
  v14 = *(_OWORD *)(v0 + 169);
  *(_OWORD *)(v0 + 280) = *(_OWORD *)(v0 + 153);
  *(_OWORD *)(v0 + 296) = v14;
  *(_QWORD *)(v0 + 311) = *(_QWORD *)(v0 + 184);
  v15 = (v9 >> 3) & 3;
  *(_OWORD *)(v0 + 264) = v13;
  if (!v15)
  {
    v16 = v0 + 488;
    v19 = *(int **)(v0 + 656);
    *(_BYTE *)(v0 + 488) = v4 & 1;
    *(_BYTE *)(v0 + 489) = BYTE1(v4);
    *(_QWORD *)(v0 + 496) = v3;
    *(_QWORD *)(v0 + 504) = v5;
    *(_QWORD *)(v0 + 512) = v6;
    *(_BYTE *)(v0 + 520) = v7;
    sub_236499A64(v2);
    sub_236499B30(v4, v3, v5, v6, v7, v8, v9);
    v24 = (uint64_t (*)(uint64_t))((char *)v19 + *v19);
    v20 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 760) = v20;
    *v20 = v0;
    v20[1] = sub_236598BA0;
    return v24(v16);
  }
  if (v15 == 1)
  {
    v16 = v0 + 376;
    v17 = *(int **)(v0 + 624);
    *(_QWORD *)(v0 + 376) = v4;
    *(_QWORD *)(v0 + 384) = v3;
    *(_BYTE *)(v0 + 392) = v5;
    *(_QWORD *)(v0 + 400) = v6;
    *(_QWORD *)(v0 + 408) = v7;
    *(_QWORD *)(v0 + 416) = v8;
    *(_BYTE *)(v0 + 424) = v9 & 0xE7;
    sub_236499A64(v2);
    sub_236499B30(v4, v3, v5, v6, v7, v8, v9);
    v24 = (uint64_t (*)(uint64_t))((char *)v17 + *v17);
    v18 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 752) = v18;
    *v18 = v0;
    v18[1] = sub_236598A08;
    return v24(v16);
  }
  v22 = *(int **)(v0 + 688);
  sub_236499A64(v2);
  v25 = (uint64_t (*)(void))((char *)v22 + *v22);
  v23 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 784) = v23;
  *v23 = v0;
  v23[1] = sub_236599048;
  return v25();
}

uint64_t sub_236598A08()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_236598A5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  char v4;
  _QWORD *v5;
  char v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t (*v18)(uint64_t, uint64_t);

  if (*(_BYTE *)(v0 + 319) == 1)
  {
    v1 = *(_QWORD *)(v0 + 728);
    v2 = *(_QWORD *)(v0 + 720);
    v3 = *(int **)(v0 + 640);
    v4 = *(_BYTE *)(v0 + 369) & 0xE7;
    *(_OWORD *)(v0 + 320) = *(_OWORD *)(v0 + 704);
    *(_BYTE *)(v0 + 336) = v2;
    *(_QWORD *)(v0 + 344) = v1;
    *(_OWORD *)(v0 + 352) = *(_OWORD *)(v0 + 736);
    *(_BYTE *)(v0 + 368) = v4;
    v18 = (uint64_t (*)(uint64_t, uint64_t))((char *)v3 + *v3);
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 768) = v5;
    *v5 = v0;
    v5[1] = sub_236598D38;
    return v18(v0 + 432, v0 + 320);
  }
  else
  {
    sub_236498B50(*(_QWORD *)(v0 + 704), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 736), *(_QWORD *)(v0 + 744), *(unsigned __int8 *)(v0 + 369));
    v7 = *(_BYTE *)(v0 + 369);
    v8 = *(_QWORD *)(v0 + 608);
    v9 = *(_OWORD *)(v0 + 704);
    v10 = *(_OWORD *)(v0 + 720);
    v11 = *(_OWORD *)(v0 + 736);
    v12 = *(_OWORD *)(v0 + 208);
    v13 = *(_OWORD *)(v0 + 224);
    v14 = *(_OWORD *)(v0 + 240);
    *(_QWORD *)(v8 + 64) = *(_QWORD *)(v0 + 256);
    *(_OWORD *)(v8 + 32) = v13;
    *(_OWORD *)(v8 + 48) = v14;
    *(_OWORD *)(v8 + 16) = v12;
    *(_OWORD *)v8 = *(_OWORD *)(v0 + 192);
    *(_OWORD *)(v8 + 72) = v9;
    *(_OWORD *)(v8 + 88) = v10;
    *(_OWORD *)(v8 + 104) = v11;
    *(_BYTE *)(v8 + 120) = v7;
    v15 = *(_OWORD *)(v0 + 264);
    v16 = *(_OWORD *)(v0 + 280);
    v17 = *(_OWORD *)(v0 + 296);
    *(_QWORD *)(v8 + 168) = *(_QWORD *)(v0 + 311);
    *(_OWORD *)(v8 + 153) = v17;
    *(_OWORD *)(v8 + 137) = v16;
    *(_OWORD *)(v8 + 121) = v15;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_236598BA0()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_236598BF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  _QWORD *v5;
  char v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t (*v18)(uint64_t, uint64_t);

  if (*(_BYTE *)(v0 + 319) == 1)
  {
    v1 = *(_QWORD *)(v0 + 736);
    v2 = *(_QWORD *)(v0 + 712);
    v3 = *(int **)(v0 + 672);
    v4 = *(_QWORD *)(v0 + 704) >> 8;
    *(_BYTE *)(v0 + 528) = *(_BYTE *)(v0 + 704) & 1;
    *(_BYTE *)(v0 + 529) = v4;
    *(_QWORD *)(v0 + 536) = v2;
    *(_OWORD *)(v0 + 544) = *(_OWORD *)(v0 + 720);
    *(_BYTE *)(v0 + 560) = v1;
    v18 = (uint64_t (*)(uint64_t, uint64_t))((char *)v3 + *v3);
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 776) = v5;
    *v5 = v0;
    v5[1] = sub_236598ECC;
    return v18(v0 + 568, v0 + 528);
  }
  else
  {
    sub_236498B50(*(_QWORD *)(v0 + 704), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 736), *(_QWORD *)(v0 + 744), *(unsigned __int8 *)(v0 + 369));
    v7 = *(_BYTE *)(v0 + 369);
    v8 = *(_QWORD *)(v0 + 608);
    v9 = *(_OWORD *)(v0 + 704);
    v10 = *(_OWORD *)(v0 + 720);
    v11 = *(_OWORD *)(v0 + 736);
    v12 = *(_OWORD *)(v0 + 208);
    v13 = *(_OWORD *)(v0 + 224);
    v14 = *(_OWORD *)(v0 + 240);
    *(_QWORD *)(v8 + 64) = *(_QWORD *)(v0 + 256);
    *(_OWORD *)(v8 + 32) = v13;
    *(_OWORD *)(v8 + 48) = v14;
    *(_OWORD *)(v8 + 16) = v12;
    *(_OWORD *)v8 = *(_OWORD *)(v0 + 192);
    *(_OWORD *)(v8 + 72) = v9;
    *(_OWORD *)(v8 + 88) = v10;
    *(_OWORD *)(v8 + 104) = v11;
    *(_BYTE *)(v8 + 120) = v7;
    v15 = *(_OWORD *)(v0 + 264);
    v16 = *(_OWORD *)(v0 + 280);
    v17 = *(_OWORD *)(v0 + 296);
    *(_QWORD *)(v8 + 168) = *(_QWORD *)(v0 + 311);
    *(_OWORD *)(v8 + 153) = v17;
    *(_OWORD *)(v8 + 137) = v16;
    *(_OWORD *)(v8 + 121) = v15;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_236598D38()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_236598D8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 744);
  v2 = *(_QWORD *)(v0 + 736);
  v3 = *(_QWORD *)(v0 + 728);
  v4 = *(_QWORD *)(v0 + 720);
  v5 = *(_QWORD *)(v0 + 712);
  v6 = *(_QWORD *)(v0 + 704);
  v7 = *(unsigned __int8 *)(v0 + 369);
  sub_236498B50(v6, v5, v4, v3, v2, v1, v7);
  v20 = *(_QWORD *)(v0 + 440);
  v21 = *(_QWORD *)(v0 + 432);
  v19 = *(unsigned __int8 *)(v0 + 448);
  v18 = *(_OWORD *)(v0 + 456);
  v17 = *(_QWORD *)(v0 + 472);
  v8 = *(_BYTE *)(v0 + 480) | 8;
  sub_236498B50(v6, v5, v4, v3, v2, v1, v7);
  v9 = *(_QWORD *)(v0 + 608);
  v10 = *(_OWORD *)(v0 + 208);
  v11 = *(_OWORD *)(v0 + 224);
  v12 = *(_OWORD *)(v0 + 240);
  *(_QWORD *)(v9 + 64) = *(_QWORD *)(v0 + 256);
  *(_OWORD *)(v9 + 32) = v11;
  *(_OWORD *)(v9 + 48) = v12;
  *(_OWORD *)(v9 + 16) = v10;
  *(_OWORD *)v9 = *(_OWORD *)(v0 + 192);
  *(_QWORD *)(v9 + 72) = v21;
  *(_QWORD *)(v9 + 80) = v20;
  *(_QWORD *)(v9 + 88) = v19;
  *(_OWORD *)(v9 + 96) = v18;
  *(_QWORD *)(v9 + 112) = v17;
  *(_BYTE *)(v9 + 120) = v8;
  v13 = *(_OWORD *)(v0 + 264);
  v14 = *(_OWORD *)(v0 + 280);
  v15 = *(_OWORD *)(v0 + 296);
  *(_QWORD *)(v9 + 168) = *(_QWORD *)(v0 + 311);
  *(_OWORD *)(v9 + 153) = v15;
  *(_OWORD *)(v9 + 137) = v14;
  *(_OWORD *)(v9 + 121) = v13;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236598ECC()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_236598F20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v1 = *(_QWORD *)(v0 + 744);
  v2 = *(_QWORD *)(v0 + 736);
  v3 = *(_QWORD *)(v0 + 728);
  v4 = *(_QWORD *)(v0 + 720);
  v5 = *(_QWORD *)(v0 + 712);
  v6 = *(_QWORD *)(v0 + 704);
  v7 = *(unsigned __int8 *)(v0 + 369);
  sub_236498B50(v6, v5, v4, v3, v2, v1, v7);
  v19 = *(_OWORD *)(v0 + 576);
  v17 = *(unsigned __int8 *)(v0 + 600);
  v18 = *(_QWORD *)(v0 + 592);
  v8 = *(unsigned __int8 *)(v0 + 568) | ((unint64_t)*(unsigned __int8 *)(v0 + 569) << 8);
  sub_236498B50(v6, v5, v4, v3, v2, v1, v7);
  v9 = *(_QWORD *)(v0 + 608);
  v10 = *(_OWORD *)(v0 + 208);
  v11 = *(_OWORD *)(v0 + 224);
  v12 = *(_OWORD *)(v0 + 240);
  *(_QWORD *)(v9 + 64) = *(_QWORD *)(v0 + 256);
  *(_OWORD *)(v9 + 32) = v11;
  *(_OWORD *)(v9 + 48) = v12;
  *(_OWORD *)(v9 + 16) = v10;
  *(_OWORD *)v9 = *(_OWORD *)(v0 + 192);
  *(_QWORD *)(v9 + 72) = v8;
  *(_OWORD *)(v9 + 80) = v19;
  *(_QWORD *)(v9 + 96) = v18;
  *(_QWORD *)(v9 + 104) = v17;
  *(_QWORD *)(v9 + 112) = 0;
  *(_BYTE *)(v9 + 120) = 0;
  v13 = *(_OWORD *)(v0 + 264);
  v14 = *(_OWORD *)(v0 + 280);
  v15 = *(_OWORD *)(v0 + 296);
  *(_QWORD *)(v9 + 168) = *(_QWORD *)(v0 + 311);
  *(_OWORD *)(v9 + 153) = v15;
  *(_OWORD *)(v9 + 137) = v14;
  *(_OWORD *)(v9 + 121) = v13;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236599048()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23659909C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v1 = *(_BYTE *)(v0 + 369);
  v2 = *(_QWORD *)(v0 + 608);
  v3 = *(_OWORD *)(v0 + 704);
  v4 = *(_OWORD *)(v0 + 720);
  v5 = *(_OWORD *)(v0 + 736);
  v6 = *(_OWORD *)(v0 + 208);
  v7 = *(_OWORD *)(v0 + 224);
  v8 = *(_OWORD *)(v0 + 240);
  *(_QWORD *)(v2 + 64) = *(_QWORD *)(v0 + 256);
  *(_OWORD *)(v2 + 32) = v7;
  *(_OWORD *)(v2 + 48) = v8;
  *(_OWORD *)(v2 + 16) = v6;
  *(_OWORD *)v2 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v2 + 72) = v3;
  *(_OWORD *)(v2 + 88) = v4;
  *(_OWORD *)(v2 + 104) = v5;
  *(_BYTE *)(v2 + 120) = v1;
  v9 = *(_OWORD *)(v0 + 264);
  v10 = *(_OWORD *)(v0 + 280);
  v11 = *(_OWORD *)(v0 + 296);
  *(_QWORD *)(v2 + 168) = *(_QWORD *)(v0 + 311);
  *(_OWORD *)(v2 + 153) = v11;
  *(_OWORD *)(v2 + 137) = v10;
  *(_OWORD *)(v2 + 121) = v9;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_236599104(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *a2 = &unk_2563ED9D0;
  a2[1] = v5;
  return result;
}

uint64_t AutomaticSetupModelExchange.receiveDiscoveryModel.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.receiveDiscoveryModel.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_release();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.receiveDiscoveryModel.modify())()
{
  return nullsub_1;
}

uint64_t sub_2365991D8(uint64_t a1, const void *a2, _OWORD *a3)
{
  uint64_t v3;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _QWORD *v16;

  memcpy((void *)(v3 + 16), a2, 0x268uLL);
  v6 = a3[9];
  *(_OWORD *)(v3 + 951) = a3[8];
  *(_OWORD *)(v3 + 967) = v6;
  *(_OWORD *)(v3 + 983) = a3[10];
  v7 = a3[5];
  *(_OWORD *)(v3 + 887) = a3[4];
  *(_OWORD *)(v3 + 903) = v7;
  v8 = a3[7];
  *(_OWORD *)(v3 + 919) = a3[6];
  *(_OWORD *)(v3 + 935) = v8;
  v9 = a3[1];
  *(_OWORD *)(v3 + 823) = *a3;
  *(_OWORD *)(v3 + 839) = v9;
  v10 = a3[3];
  *(_OWORD *)(v3 + 855) = a3[2];
  *(_OWORD *)(v3 + 871) = v10;
  *(_BYTE *)(v3 + 632) = 1;
  v11 = *(_OWORD *)(v3 + 960);
  *(_OWORD *)(v3 + 761) = *(_OWORD *)(v3 + 944);
  *(_OWORD *)(v3 + 777) = v11;
  *(_OWORD *)(v3 + 793) = *(_OWORD *)(v3 + 976);
  *(_QWORD *)(v3 + 808) = *(_QWORD *)(v3 + 991);
  v12 = *(_OWORD *)(v3 + 896);
  *(_OWORD *)(v3 + 697) = *(_OWORD *)(v3 + 880);
  *(_OWORD *)(v3 + 713) = v12;
  v13 = *(_OWORD *)(v3 + 928);
  *(_OWORD *)(v3 + 729) = *(_OWORD *)(v3 + 912);
  *(_OWORD *)(v3 + 745) = v13;
  v14 = *(_OWORD *)(v3 + 832);
  *(_OWORD *)(v3 + 633) = *(_OWORD *)(v3 + 816);
  *(_OWORD *)(v3 + 649) = v14;
  v15 = *(_OWORD *)(v3 + 864);
  *(_OWORD *)(v3 + 665) = *(_OWORD *)(v3 + 848);
  *(_OWORD *)(v3 + 681) = v15;
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 1000) = v16;
  *v16 = v3;
  v16[1] = sub_2365992D4;
  return static AutomaticSetupModelExchange._receiveModelUpdate(_:_:)(a1, v3 + 16, v3 + 632);
}

uint64_t sub_2365992D4()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t AutomaticSetupModelExchange.processDiscoveryModel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.processDiscoveryModel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.processDiscoveryModel.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659938C(const void *a1, uint64_t a2)
{
  _QWORD *v2;

  v2[79] = a2;
  v2[80] = __swift_instantiateConcreteTypeFromMangledName(&qword_2563ED690);
  v2[81] = swift_task_alloc();
  type metadata accessor for AuthenticationModel();
  v2[82] = swift_task_alloc();
  memcpy(v2 + 2, a1, 0x268uLL);
  return swift_task_switch();
}

uint64_t sub_236599424()
{
  uint64_t *v0;
  _BYTE *v1;
  _QWORD *v2;

  v1 = (_BYTE *)v0[81];
  sub_23648DFF8(v0[79], (uint64_t)&v1[*(int *)(v0[80] + 28)], (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  *v1 = 0;
  v2 = (_QWORD *)swift_task_alloc();
  v0[83] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = sub_2365994A0;
  return static AutomaticSetupModelExchange._receiveModelUpdate(_:_:)(v0[82], (uint64_t)(v0 + 2), v0[81]);
}

uint64_t sub_2365994A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 656);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 648);
  swift_task_dealloc();
  sub_236465998(v2, &qword_2563ED690);
  sub_236465A18(v1, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  return swift_task_switch();
}

void sub_2365995B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 1520);
  v2 = *(_QWORD *)(v0 + 1512);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563ED690);
  sub_23648DFF8(v1 + *(int *)(v3 + 28), v2, (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  v4 = *(int *)(type metadata accessor for AuthenticationModel() + 28);
  *(_DWORD *)(v0 + 100) = v4;
  v5 = (_QWORD *)(v2 + v4);
  *(_QWORD *)(v0 + 1816) = *v5;
  *(_QWORD *)(v0 + 1824) = v5[1];
  *(_QWORD *)(v0 + 1832) = v5[2];
  *(_QWORD *)(v0 + 1840) = v5[3];
  *(_QWORD *)(v0 + 1848) = v5[4];
  *(_QWORD *)(v0 + 1856) = v5[5];
  *(_QWORD *)(v0 + 1864) = v5[6];
  *(_QWORD *)(v0 + 1872) = v5[7];
  *(_QWORD *)(v0 + 1880) = v5[8];
  *(_QWORD *)(v0 + 1888) = v5[9];
  __asm { BR              X10 }
}

void sub_23659968C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  int *v16;
  id v17;
  _QWORD *v18;
  int *v19;
  id v20;
  _QWORD *v21;

  v14 = BYTE2(v11) & 1;
  v15 = HIBYTE(v11) & 1;
  if ((v12 & 1) != 0)
  {
    v16 = *(int **)(v10 + 1576);
    *(_QWORD *)(v10 + 960) = a1;
    *(_QWORD *)(v10 + 968) = v7;
    *(_QWORD *)(v10 + 976) = v9;
    *(_QWORD *)(v10 + 984) = a4;
    *(_WORD *)(v10 + 992) = v11;
    *(_BYTE *)(v10 + 994) = v14;
    *(_BYTE *)(v10 + 995) = v15;
    *(_QWORD *)(v10 + 1000) = v8;
    *(_QWORD *)(v10 + 1008) = a7;
    *(_QWORD *)(v13 - 80) = (char *)v16 + *v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = v8;
    swift_bridgeObjectRetain();
    v18 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v10 + 2136) = v18;
    *v18 = v10;
    v18[1] = sub_23659A38C;
    __asm { BR              X2 }
  }
  v19 = *(int **)(v10 + 1560);
  *(_QWORD *)(v10 + 1072) = a1;
  *(_QWORD *)(v10 + 1080) = v7;
  *(_QWORD *)(v10 + 1088) = v9;
  *(_QWORD *)(v10 + 1096) = a4;
  *(_WORD *)(v10 + 1104) = v11;
  *(_BYTE *)(v10 + 1106) = v14;
  *(_BYTE *)(v10 + 1107) = v15;
  *(_QWORD *)(v10 + 1112) = v8;
  *(_QWORD *)(v10 + 1120) = a7;
  *(_QWORD *)(v13 - 80) = (char *)v19 + *v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20 = v8;
  swift_bridgeObjectRetain();
  v21 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v10 + 2144) = v21;
  *v21 = v10;
  v21[1] = sub_23659A52C;
  __asm { BR              X1 }
}

uint64_t sub_23659A2FC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23659A344()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23659A38C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23659A3E0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  __int128 v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v16 = *(void **)(v0 + 1880);
  v17 = *(void **)(v0 + 1888);
  v21 = *(_QWORD *)(v0 + 1872);
  v19 = *(_QWORD *)(v0 + 1856);
  v20 = *(_QWORD *)(v0 + 1864);
  v18 = *(_QWORD *)(v0 + 1848);
  v1 = *(void **)(v0 + 1840);
  v2 = *(void **)(v0 + 1832);
  v3 = *(void **)(v0 + 1824);
  v4 = *(void **)(v0 + 1816);
  v5 = *(_QWORD *)(v0 + 1512) + *(int *)(v0 + 100);
  v15 = *(_OWORD *)(v0 + 1016);
  v14 = *(_QWORD *)(v0 + 1032);
  v6 = *(_QWORD *)(v0 + 1040);
  v7 = *(_QWORD *)(v0 + 1056);
  v8 = *(_QWORD *)(v0 + 1064);
  v9 = 0x10000;
  if (!*(_BYTE *)(v0 + 1050))
    v9 = 0;
  v10 = *(unsigned __int16 *)(v0 + 1048) | (unint64_t)v9;
  v11 = 0x1000000;
  if (!*(_BYTE *)(v0 + 1051))
    v11 = 0;
  v12 = v10 | v11;
  sub_23644F8BC(*(void **)v5, *(void **)(v5 + 8), *(void **)(v5 + 16), *(void **)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56), *(void **)(v5 + 64), *(void **)(v5 + 72), *(_BYTE *)(v5 + 80));
  sub_23644F8BC(v4, v3, v2, v1, v18, v19, v20, v21, v16, v17, 0);
  *(_OWORD *)v5 = v15;
  *(_QWORD *)(v5 + 16) = v14;
  *(_QWORD *)(v5 + 24) = v6;
  *(_QWORD *)(v5 + 32) = v12;
  *(_QWORD *)(v5 + 40) = v7;
  *(_QWORD *)(v5 + 48) = v8;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  *(_BYTE *)(v5 + 80) = 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23659A52C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23659A580()
{
  uint64_t v0;

  sub_23644F8BC(*(void **)(v0 + 1816), *(void **)(v0 + 1824), *(void **)(v0 + 1832), *(void **)(v0 + 1840), *(_QWORD *)(v0 + 1848), *(_QWORD *)(v0 + 1856), *(_QWORD *)(v0 + 1864), *(_QWORD *)(v0 + 1872), *(void **)(v0 + 1880), *(void **)(v0 + 1888), 0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23659A5DC()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23659A630()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v14 = *(void **)(v0 + 1880);
  v15 = *(void **)(v0 + 1888);
  v18 = *(_QWORD *)(v0 + 1864);
  v19 = *(_QWORD *)(v0 + 1872);
  v16 = *(_QWORD *)(v0 + 1848);
  v17 = *(_QWORD *)(v0 + 1856);
  v1 = *(void **)(v0 + 1840);
  v2 = *(void **)(v0 + 1832);
  v3 = *(void **)(v0 + 1824);
  v4 = *(void **)(v0 + 1816);
  v5 = *(_QWORD *)(v0 + 1512) + *(int *)(v0 + 100);
  v13 = *(_OWORD *)(v0 + 800);
  v12 = *(_QWORD *)(v0 + 816);
  v6 = *(unsigned __int8 *)(v0 + 824);
  v10 = *(_OWORD *)(v0 + 848);
  v11 = *(_OWORD *)(v0 + 832);
  v7 = *(_QWORD *)(v0 + 864);
  v8 = *(_QWORD *)(v0 + 872);
  sub_23644F8BC(*(void **)v5, *(void **)(v5 + 8), *(void **)(v5 + 16), *(void **)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56), *(void **)(v5 + 64), *(void **)(v5 + 72), *(_BYTE *)(v5 + 80));
  sub_23644F8BC(v4, v3, v2, v1, v16, v17, v18, v19, v14, v15, 1);
  *(_OWORD *)v5 = v13;
  *(_QWORD *)(v5 + 16) = v12;
  *(_QWORD *)(v5 + 24) = v6;
  *(_OWORD *)(v5 + 32) = v11;
  *(_OWORD *)(v5 + 48) = v10;
  *(_QWORD *)(v5 + 64) = v7;
  *(_QWORD *)(v5 + 72) = v8;
  *(_BYTE *)(v5 + 80) = 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23659A758()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23659A7AC()
{
  uint64_t v0;

  sub_23644F8BC(*(void **)(v0 + 1816), *(void **)(v0 + 1824), *(void **)(v0 + 1832), *(void **)(v0 + 1840), *(_QWORD *)(v0 + 1848), *(_QWORD *)(v0 + 1856), *(_QWORD *)(v0 + 1864), *(_QWORD *)(v0 + 1872), *(void **)(v0 + 1880), *(void **)(v0 + 1888), 1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23659A80C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23659A860()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(void **)(v0 + 1888);
  v2 = *(void **)(v0 + 1880);
  v15 = *(_QWORD *)(v0 + 1872);
  v13 = *(_QWORD *)(v0 + 1856);
  v14 = *(_QWORD *)(v0 + 1864);
  v12 = *(_QWORD *)(v0 + 1848);
  v3 = *(void **)(v0 + 1840);
  v4 = *(void **)(v0 + 1832);
  v5 = *(void **)(v0 + 1824);
  v6 = *(void **)(v0 + 1816);
  v7 = *(_QWORD *)(v0 + 1512) + *(int *)(v0 + 100);
  v10 = *(_OWORD *)(v0 + 1184);
  v11 = *(_OWORD *)(v0 + 1168);
  v8 = *(_QWORD *)(v0 + 1200);
  sub_23644F8BC(*(void **)v7, *(void **)(v7 + 8), *(void **)(v7 + 16), *(void **)(v7 + 24), *(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 40), *(_QWORD *)(v7 + 48), *(_QWORD *)(v7 + 56), *(void **)(v7 + 64), *(void **)(v7 + 72), *(_BYTE *)(v7 + 80));
  sub_23644F8BC(v6, v5, v4, v3, v12, v13, v14, v15, v2, v1, 2);
  *(_OWORD *)v7 = v11;
  *(_OWORD *)(v7 + 16) = v10;
  *(_QWORD *)(v7 + 32) = v8;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_QWORD *)(v7 + 72) = 0;
  *(_BYTE *)(v7 + 80) = 2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23659A96C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23659A9C0()
{
  uint64_t v0;

  sub_23644F8BC(*(void **)(v0 + 1816), *(void **)(v0 + 1824), *(void **)(v0 + 1832), *(void **)(v0 + 1840), *(_QWORD *)(v0 + 1848), *(_QWORD *)(v0 + 1856), *(_QWORD *)(v0 + 1864), *(_QWORD *)(v0 + 1872), *(void **)(v0 + 1880), *(void **)(v0 + 1888), 2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23659AA20()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23659AA74()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(void **)(v0 + 1888);
  v14 = *(_QWORD *)(v0 + 1864);
  v15 = *(_QWORD *)(v0 + 1872);
  v13 = *(_QWORD *)(v0 + 1856);
  v11 = *(void **)(v0 + 1880);
  v12 = *(_QWORD *)(v0 + 1848);
  v2 = *(void **)(v0 + 1840);
  v3 = *(void **)(v0 + 1832);
  v4 = *(void **)(v0 + 1824);
  v5 = *(void **)(v0 + 1816);
  v6 = *(_QWORD *)(v0 + 1512) + *(int *)(v0 + 100);
  v10 = *(_OWORD *)(v0 + 1280);
  v7 = *(_QWORD *)(v0 + 1296);
  v8 = *(_QWORD *)(v0 + 1304);
  sub_23644F8BC(*(void **)v6, *(void **)(v6 + 8), *(void **)(v6 + 16), *(void **)(v6 + 24), *(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40), *(_QWORD *)(v6 + 48), *(_QWORD *)(v6 + 56), *(void **)(v6 + 64), *(void **)(v6 + 72), *(_BYTE *)(v6 + 80));
  sub_23644F8BC(v5, v4, v3, v2, v12, v13, v14, v15, v11, v1, 3);
  *(_OWORD *)v6 = v10;
  *(_QWORD *)(v6 + 16) = v7;
  *(_QWORD *)(v6 + 24) = v8;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_BYTE *)(v6 + 80) = 3;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23659AB78()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23659ABCC()
{
  uint64_t v0;

  sub_23644F8BC(*(void **)(v0 + 1816), *(void **)(v0 + 1824), *(void **)(v0 + 1832), *(void **)(v0 + 1840), *(_QWORD *)(v0 + 1848), *(_QWORD *)(v0 + 1856), *(_QWORD *)(v0 + 1864), *(_QWORD *)(v0 + 1872), *(void **)(v0 + 1880), *(void **)(v0 + 1888), 3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23659AC2C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23659AC80()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(void **)(v0 + 1888);
  v14 = *(_QWORD *)(v0 + 1864);
  v15 = *(_QWORD *)(v0 + 1872);
  v13 = *(_QWORD *)(v0 + 1856);
  v11 = *(void **)(v0 + 1880);
  v12 = *(_QWORD *)(v0 + 1848);
  v2 = *(void **)(v0 + 1840);
  v3 = *(void **)(v0 + 1832);
  v4 = *(void **)(v0 + 1824);
  v5 = *(void **)(v0 + 1816);
  v6 = *(_QWORD *)(v0 + 1512) + *(int *)(v0 + 100);
  v10 = *(_OWORD *)(v0 + 1312);
  v7 = *(_QWORD *)(v0 + 1328);
  v8 = *(_QWORD *)(v0 + 1336);
  sub_23644F8BC(*(void **)v6, *(void **)(v6 + 8), *(void **)(v6 + 16), *(void **)(v6 + 24), *(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40), *(_QWORD *)(v6 + 48), *(_QWORD *)(v6 + 56), *(void **)(v6 + 64), *(void **)(v6 + 72), *(_BYTE *)(v6 + 80));
  sub_23644F8BC(v5, v4, v3, v2, v12, v13, v14, v15, v11, v1, 4);
  *(_OWORD *)v6 = v10;
  *(_QWORD *)(v6 + 16) = v7;
  *(_QWORD *)(v6 + 24) = v8;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_BYTE *)(v6 + 80) = 4;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23659AD84()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23659ADD8()
{
  uint64_t v0;

  sub_23644F8BC(*(void **)(v0 + 1816), *(void **)(v0 + 1824), *(void **)(v0 + 1832), *(void **)(v0 + 1840), *(_QWORD *)(v0 + 1848), *(_QWORD *)(v0 + 1856), *(_QWORD *)(v0 + 1864), *(_QWORD *)(v0 + 1872), *(void **)(v0 + 1880), *(void **)(v0 + 1888), 4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23659AE38()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v11;

  v1 = *(void **)(*(_QWORD *)v0 + 1888);
  v2 = *(void **)(*(_QWORD *)v0 + 1880);
  v11 = *(_QWORD *)(*(_QWORD *)v0 + 1872);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 1864);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 1856);
  v5 = *(_QWORD *)(*(_QWORD *)v0 + 1848);
  v6 = *(void **)(*(_QWORD *)v0 + 1840);
  v7 = *(void **)(*(_QWORD *)v0 + 1832);
  v8 = *(void **)(*(_QWORD *)v0 + 1824);
  v9 = *(void **)(*(_QWORD *)v0 + 1816);
  swift_task_dealloc();
  sub_23644F8BC(v9, v8, v7, v6, v5, v4, v3, v11, v2, v1, 5);
  return swift_task_switch();
}

uint64_t sub_23659AF08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 1512) + *(int *)(v0 + 100);
  v2 = *(_QWORD *)(v0 + 1440);
  v3 = *(_QWORD *)(v0 + 1448);
  v4 = *(unsigned __int8 *)(v0 + 1456);
  sub_23644F8BC(*(void **)v1, *(void **)(v1 + 8), *(void **)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(void **)(v1 + 64), *(void **)(v1 + 72), *(_BYTE *)(v1 + 80));
  *(_QWORD *)v1 = v2;
  *(_QWORD *)(v1 + 8) = v3;
  *(_QWORD *)(v1 + 16) = v4;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_QWORD *)(v1 + 72) = 0;
  *(_BYTE *)(v1 + 80) = 5;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23659AFA0()
{
  uint64_t *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;

  v1 = *(void **)(*v0 + 1888);
  v2 = *(void **)(*v0 + 1880);
  v11 = *(_QWORD *)(*v0 + 1872);
  v3 = *(_QWORD *)(*v0 + 1864);
  v4 = *(_QWORD *)(*v0 + 1856);
  v5 = *(_QWORD *)(*v0 + 1848);
  v6 = *(void **)(*v0 + 1840);
  v7 = *(void **)(*v0 + 1832);
  v8 = *(void **)(*v0 + 1824);
  v9 = *(void **)(*v0 + 1816);
  v12 = *v0;
  swift_task_dealloc();
  sub_23644F8BC(v9, v8, v7, v6, v5, v4, v3, v11, v2, v1, 5);
  return (*(uint64_t (**)(void))(v12 + 8))();
}

uint64_t sub_23659B064()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23659B0B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char v10;
  char v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  char v17;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  char v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;

  v1 = *(_QWORD *)(v0 + 456);
  v44 = *(_BYTE *)(v0 + 536);
  v52 = *(void **)(v0 + 472);
  v53 = *(void **)(v0 + 464);
  v50 = *(_QWORD *)(v0 + 488);
  v51 = *(void **)(v0 + 480);
  v48 = *(_QWORD *)(v0 + 504);
  v49 = *(_QWORD *)(v0 + 496);
  v46 = *(void **)(v0 + 520);
  v47 = *(_QWORD *)(v0 + 512);
  v45 = *(void **)(v0 + 528);
  if (v44 == 7 && *(_BYTE *)(v1 + 96) == 7)
  {
    v2 = *(_QWORD *)(v1 + 16);
    v40 = *(void **)(v2 + 24);
    v42 = *(void **)(v2 + 16);
    v3 = *(void **)(v2 + 40);
    v38 = *(void **)(v2 + 32);
    v4 = *(void **)(v2 + 48);
    v5 = *(void **)(v2 + 56);
    v6 = *(_QWORD *)(v2 + 64);
    v7 = *(_QWORD *)(v2 + 72);
    v8 = *(void **)(v2 + 80);
    v9 = *(void **)(v2 + 88);
    v10 = *(_BYTE *)(v2 + 96);
    sub_23644F6A4(v42, v40, v38, v3, v4, v5, v6, v7, v8, v9, v10);
    sub_23644F8BC((void *)v1, v53, v52, v51, v50, v49, v48, v47, v46, v45, 7);
    v1 = swift_allocObject();
    v52 = 0;
    v53 = 0;
    v50 = 0;
    v51 = 0;
    v48 = 0;
    v49 = 0;
    v46 = 0;
    v47 = 0;
    v45 = 0;
    *(_QWORD *)(v1 + 16) = v42;
    *(_QWORD *)(v1 + 24) = v40;
    *(_QWORD *)(v1 + 32) = v38;
    *(_QWORD *)(v1 + 40) = v3;
    *(_QWORD *)(v1 + 48) = v4;
    *(_QWORD *)(v1 + 56) = v5;
    *(_QWORD *)(v1 + 64) = v6;
    *(_QWORD *)(v1 + 72) = v7;
    *(_QWORD *)(v1 + 80) = v8;
    *(_QWORD *)(v1 + 88) = v9;
    *(_BYTE *)(v1 + 96) = v10;
  }
  v11 = *(_BYTE *)(v0 + 99);
  v19 = *(void **)(v0 + 2024);
  v20 = *(void **)(v0 + 2032);
  v22 = *(_QWORD *)(v0 + 2000);
  v23 = *(_QWORD *)(v0 + 2008);
  v12 = *(void **)(v0 + 1984);
  v13 = *(void **)(v0 + 1976);
  v14 = *(void **)(v0 + 1968);
  v15 = *(void **)(v0 + 1960);
  v32 = *(_QWORD *)(v0 + 1944);
  v30 = *(_QWORD *)(v0 + 1936);
  v28 = *(_QWORD *)(v0 + 1928);
  v25 = *(_QWORD *)(v0 + 2016);
  v26 = *(_QWORD *)(v0 + 1920);
  v24 = *(_QWORD *)(v0 + 1912);
  v21 = *(_QWORD *)(v0 + 1992);
  v35 = *(void **)(v0 + 1888);
  v36 = *(_QWORD *)(v0 + 1952);
  v34 = *(void **)(v0 + 1880);
  v41 = *(_QWORD *)(v0 + 1864);
  v43 = *(_QWORD *)(v0 + 1872);
  v37 = *(_QWORD *)(v0 + 1848);
  v39 = *(_QWORD *)(v0 + 1856);
  v33 = *(void **)(v0 + 1840);
  v31 = *(void **)(v0 + 1832);
  v29 = *(void **)(v0 + 1824);
  v27 = *(void **)(v0 + 1816);
  v16 = *(_QWORD *)(v0 + 1512) + *(int *)(v0 + 100);
  v17 = *(_BYTE *)(v0 + 98);
  sub_23644F8BC(*(void **)v16, *(void **)(v16 + 8), *(void **)(v16 + 16), *(void **)(v16 + 24), *(_QWORD *)(v16 + 32), *(_QWORD *)(v16 + 40), *(_QWORD *)(v16 + 48), *(_QWORD *)(v16 + 56), *(void **)(v16 + 64), *(void **)(v16 + 72), *(_BYTE *)(v16 + 80));
  sub_23644F8BC(v15, v14, v13, v12, v21, v22, v23, v25, v19, v20, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23645DC9C(v24, v26, v28, v30, v32, v36, v17);
  sub_23644F8BC(v27, v29, v31, v33, v37, v39, v41, v43, v34, v35, 6);
  *(_QWORD *)v16 = v1;
  *(_QWORD *)(v16 + 8) = v53;
  *(_QWORD *)(v16 + 16) = v52;
  *(_QWORD *)(v16 + 24) = v51;
  *(_QWORD *)(v16 + 32) = v50;
  *(_QWORD *)(v16 + 40) = v49;
  *(_QWORD *)(v16 + 48) = v48;
  *(_QWORD *)(v16 + 56) = v47;
  *(_QWORD *)(v16 + 64) = v46;
  *(_QWORD *)(v16 + 72) = v45;
  *(_BYTE *)(v16 + 80) = v44;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23659B3C0()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23659B414()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  char v7;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v14 = *(_QWORD *)(v0 + 1952);
  v10 = *(_QWORD *)(v0 + 1944);
  v1 = *(_QWORD *)(v0 + 1936);
  v2 = *(_QWORD *)(v0 + 1928);
  v3 = *(_QWORD *)(v0 + 1920);
  v4 = *(_QWORD *)(v0 + 1912);
  v13 = *(void **)(v0 + 1888);
  v12 = *(void **)(v0 + 1880);
  v18 = *(_QWORD *)(v0 + 1872);
  v17 = *(_QWORD *)(v0 + 1864);
  v16 = *(_QWORD *)(v0 + 1856);
  v15 = *(_QWORD *)(v0 + 1848);
  v11 = *(void **)(v0 + 1840);
  v9 = *(void **)(v0 + 1832);
  v5 = *(void **)(v0 + 1824);
  v6 = *(void **)(v0 + 1816);
  v7 = *(_BYTE *)(v0 + 98);
  sub_23644F8BC(*(void **)(v0 + 1960), *(void **)(v0 + 1968), *(void **)(v0 + 1976), *(void **)(v0 + 1984), *(_QWORD *)(v0 + 1992), *(_QWORD *)(v0 + 2000), *(_QWORD *)(v0 + 2008), *(_QWORD *)(v0 + 2016), *(void **)(v0 + 2024), *(void **)(v0 + 2032), *(_BYTE *)(v0 + 99));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23645DC9C(v4, v3, v2, v1, v10, v14, v7);
  sub_23644F8BC(v6, v5, v9, v11, v15, v16, v17, v18, v12, v13, 6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23659B568()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23659B5BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char v10;
  char v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  char v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;

  v1 = *(_QWORD *)(v0 + 280);
  v37 = *(_BYTE *)(v0 + 360);
  v45 = *(void **)(v0 + 296);
  v46 = *(void **)(v0 + 288);
  v43 = *(_QWORD *)(v0 + 312);
  v44 = *(void **)(v0 + 304);
  v41 = *(_QWORD *)(v0 + 328);
  v42 = *(_QWORD *)(v0 + 320);
  v39 = *(void **)(v0 + 344);
  v40 = *(_QWORD *)(v0 + 336);
  v38 = *(void **)(v0 + 352);
  if (v37 == 7 && *(_BYTE *)(v1 + 96) == 7)
  {
    v2 = *(_QWORD *)(v1 + 16);
    v33 = *(void **)(v2 + 24);
    v35 = *(void **)(v2 + 16);
    v3 = *(void **)(v2 + 40);
    v31 = *(void **)(v2 + 32);
    v5 = *(void **)(v2 + 48);
    v4 = *(void **)(v2 + 56);
    v6 = *(_QWORD *)(v2 + 64);
    v7 = *(_QWORD *)(v2 + 72);
    v8 = *(void **)(v2 + 80);
    v9 = *(void **)(v2 + 88);
    v10 = *(_BYTE *)(v2 + 96);
    sub_23644F6A4(v35, v33, v31, v3, v5, v4, v6, v7, v8, v9, v10);
    sub_23644F8BC((void *)v1, v46, v45, v44, v43, v42, v41, v40, v39, v38, 7);
    v1 = swift_allocObject();
    v45 = 0;
    v46 = 0;
    v43 = 0;
    v44 = 0;
    v41 = 0;
    v42 = 0;
    v39 = 0;
    v40 = 0;
    v38 = 0;
    *(_QWORD *)(v1 + 16) = v35;
    *(_QWORD *)(v1 + 24) = v33;
    *(_QWORD *)(v1 + 32) = v31;
    *(_QWORD *)(v1 + 40) = v3;
    *(_QWORD *)(v1 + 48) = v5;
    *(_QWORD *)(v1 + 56) = v4;
    *(_QWORD *)(v1 + 64) = v6;
    *(_QWORD *)(v1 + 72) = v7;
    *(_QWORD *)(v1 + 80) = v8;
    *(_QWORD *)(v1 + 88) = v9;
    *(_BYTE *)(v1 + 96) = v10;
  }
  v11 = *(_BYTE *)(v0 + 186);
  v12 = *(void **)(v0 + 2112);
  v20 = *(void **)(v0 + 2104);
  v22 = *(_QWORD *)(v0 + 2072);
  v13 = *(void **)(v0 + 2064);
  v14 = *(void **)(v0 + 2056);
  v15 = *(void **)(v0 + 2048);
  v16 = *(void **)(v0 + 2040);
  v28 = *(void **)(v0 + 1888);
  v26 = *(_QWORD *)(v0 + 2088);
  v27 = *(void **)(v0 + 1880);
  v34 = *(_QWORD *)(v0 + 1864);
  v36 = *(_QWORD *)(v0 + 1872);
  v30 = *(_QWORD *)(v0 + 2096);
  v32 = *(_QWORD *)(v0 + 1856);
  v29 = *(_QWORD *)(v0 + 1848);
  v24 = *(_QWORD *)(v0 + 2080);
  v25 = *(void **)(v0 + 1840);
  v23 = *(void **)(v0 + 1832);
  v21 = *(void **)(v0 + 1824);
  v17 = *(void **)(v0 + 1816);
  v18 = *(_QWORD *)(v0 + 1512) + *(int *)(v0 + 100);
  sub_23644F8BC(*(void **)v18, *(void **)(v18 + 8), *(void **)(v18 + 16), *(void **)(v18 + 24), *(_QWORD *)(v18 + 32), *(_QWORD *)(v18 + 40), *(_QWORD *)(v18 + 48), *(_QWORD *)(v18 + 56), *(void **)(v18 + 64), *(void **)(v18 + 72), *(_BYTE *)(v18 + 80));
  sub_23644F8BC(v16, v15, v14, v13, v22, v24, v26, v30, v20, v12, v11);
  sub_23644F8BC(v17, v21, v23, v25, v29, v32, v34, v36, v27, v28, 7);
  *(_QWORD *)v18 = v1;
  *(_QWORD *)(v18 + 8) = v46;
  *(_QWORD *)(v18 + 16) = v45;
  *(_QWORD *)(v18 + 24) = v44;
  *(_QWORD *)(v18 + 32) = v43;
  *(_QWORD *)(v18 + 40) = v42;
  *(_QWORD *)(v18 + 48) = v41;
  *(_QWORD *)(v18 + 56) = v40;
  *(_QWORD *)(v18 + 64) = v39;
  *(_QWORD *)(v18 + 72) = v38;
  *(_BYTE *)(v18 + 80) = v37;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23659B858()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23659B8AC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v11;

  v1 = *(void **)(v0 + 1888);
  v2 = *(void **)(v0 + 1880);
  v11 = *(_QWORD *)(v0 + 1872);
  v3 = *(_QWORD *)(v0 + 1864);
  v4 = *(_QWORD *)(v0 + 1856);
  v5 = *(_QWORD *)(v0 + 1848);
  v6 = *(void **)(v0 + 1840);
  v7 = *(void **)(v0 + 1832);
  v8 = *(void **)(v0 + 1824);
  v9 = *(void **)(v0 + 1816);
  sub_23644F8BC(*(void **)(v0 + 2040), *(void **)(v0 + 2048), *(void **)(v0 + 2056), *(void **)(v0 + 2064), *(_QWORD *)(v0 + 2072), *(_QWORD *)(v0 + 2080), *(_QWORD *)(v0 + 2088), *(_QWORD *)(v0 + 2096), *(void **)(v0 + 2104), *(void **)(v0 + 2112), *(_BYTE *)(v0 + 186));
  sub_23644F8BC(v9, v8, v7, v6, v5, v4, v3, v11, v2, v1, 7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23659B988(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 32) = &unk_2563ED9B0;
  *(_QWORD *)(a2 + 40) = v5;
  return result;
}

uint64_t AutomaticSetupModelExchange.receiveAuthenticationModel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.receiveAuthenticationModel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.receiveAuthenticationModel.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659BA5C(uint64_t a1, const void *a2, uint64_t a3)
{
  _QWORD *v3;

  v3[80] = a3;
  v3[79] = a1;
  v3[81] = __swift_instantiateConcreteTypeFromMangledName(&qword_2563ED690);
  v3[82] = swift_task_alloc();
  memcpy(v3 + 2, a2, 0x268uLL);
  return swift_task_switch();
}

uint64_t sub_23659BAD8()
{
  uint64_t *v0;
  _BYTE *v1;
  _QWORD *v2;

  v1 = (_BYTE *)v0[82];
  sub_23648DFF8(v0[80], (uint64_t)&v1[*(int *)(v0[81] + 28)], (uint64_t (*)(_QWORD))type metadata accessor for AuthenticationModel);
  *v1 = 1;
  v2 = (_QWORD *)swift_task_alloc();
  v0[83] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = sub_23659BB58;
  return static AutomaticSetupModelExchange._receiveModelUpdate(_:_:)(v0[79], (uint64_t)(v0 + 2), v0[82]);
}

uint64_t sub_23659BB58()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 656);
  v3 = *v0;
  swift_task_dealloc();
  sub_236465998(v1, &qword_2563ED690);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t AutomaticSetupModelExchange.processAuthenticationModel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.processAuthenticationModel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.processAuthenticationModel.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659BC2C(const void *a1, uint64_t a2)
{
  _QWORD *v2;

  v2[79] = a2;
  v2[80] = __swift_instantiateConcreteTypeFromMangledName(&qword_2563ED6A0);
  v2[81] = swift_task_alloc();
  type metadata accessor for SignInModel();
  v2[82] = swift_task_alloc();
  memcpy(v2 + 2, a1, 0x268uLL);
  return swift_task_switch();
}

uint64_t sub_23659BCC4()
{
  uint64_t *v0;
  _BYTE *v1;
  _QWORD *v2;

  v1 = (_BYTE *)v0[81];
  sub_23648DFF8(v0[79], (uint64_t)&v1[*(int *)(v0[80] + 28)], (uint64_t (*)(_QWORD))type metadata accessor for SignInModel);
  *v1 = 0;
  v2 = (_QWORD *)swift_task_alloc();
  v0[83] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = sub_23659BD40;
  return static AutomaticSetupModelExchange._receiveModelUpdate(_:_:)(v0[82], (uint64_t)(v0 + 2), v0[81]);
}

uint64_t sub_23659BD40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 656);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 648);
  swift_task_dealloc();
  sub_236465998(v2, &qword_2563ED6A0);
  sub_236465A18(v1, (uint64_t (*)(_QWORD))type metadata accessor for SignInModel);
  return swift_task_switch();
}

uint64_t sub_23659BDBC()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23659BE2C()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t (*v25)(void);
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(char **)(v0 + 24);
  v3 = *v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563ED6A0);
  sub_23648DFF8((uint64_t)&v1[*(int *)(v4 + 28)], v2, (uint64_t (*)(_QWORD))type metadata accessor for SignInModel);
  v5 = *(int *)(type metadata accessor for SignInModel() + 60);
  *(_DWORD *)(v0 + 184) = v5;
  v6 = (uint64_t *)(v2 + v5);
  v7 = *v6;
  *(_QWORD *)(v0 + 112) = *v6;
  v8 = v6[1];
  *(_QWORD *)(v0 + 120) = v8;
  v9 = v6[2];
  *(_QWORD *)(v0 + 128) = v9;
  v10 = v6[3];
  *(_QWORD *)(v0 + 136) = v10;
  switch(v8)
  {
    case 0:
      if ((v3 & 1) == 0)
      {
        v25 = (uint64_t (*)(void))(**(int **)(v0 + 32) + *(_QWORD *)(v0 + 32));
        v12 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 144) = v12;
        *v12 = v0;
        v12[1] = sub_23659C080;
        return v25();
      }
      return (*(uint64_t (**)(void))(v0 + 8))();
    case 1:
      if ((v3 & 1) == 0)
      {
        v25 = (uint64_t (*)(void))(**(int **)(v0 + 48) + *(_QWORD *)(v0 + 48));
        v22 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 152) = v22;
        *v22 = v0;
        v22[1] = sub_23659C0C8;
        return v25();
      }
      return (*(uint64_t (**)(void))(v0 + 8))();
    case 2:
      if ((v3 & 1) == 0)
      {
        v25 = (uint64_t (*)(void))(**(int **)(v0 + 96) + *(_QWORD *)(v0 + 96));
        v11 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 176) = v11;
        *v11 = v0;
        v11[1] = sub_23659C240;
        return v25();
      }
      return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v14 = *((_BYTE *)v6 + 32);
  if ((v3 & 1) != 0)
  {
    v15 = v14 & 1;
    v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v0 + 80)
                                                                              + *(_QWORD *)(v0 + 80));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v16;
    *v16 = v0;
    v16[1] = sub_23659C110;
    v17 = v7;
    v18 = v8;
    v19 = v9;
    v20 = v10;
    v21 = v15;
  }
  else
  {
    v23 = v14 & 1;
    v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v0 + 64)
                                                                              + *(_QWORD *)(v0 + 64));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v24;
    *v24 = v0;
    v24[1] = sub_23659C1E0;
    v17 = v7;
    v18 = v8;
    v19 = v9;
    v20 = v10;
    v21 = v23;
  }
  return v26(v17, v18, v19, v20, v21);
}

uint64_t sub_23659C080()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23659C0C8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23659C110(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 188) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23659C16C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  v1 = *(_BYTE *)(v0 + 188);
  v3 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v6 = *(_OWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 16) + *(int *)(v0 + 184);
  sub_23654FEE8(*(_QWORD *)v4, *(_QWORD *)(v4 + 8));
  *(_OWORD *)v4 = v6;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  *(_BYTE *)(v4 + 32) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23659C1E0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23659C240()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23659C288(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 64) = &unk_2563ED990;
  *(_QWORD *)(a2 + 72) = v5;
  return result;
}

uint64_t AutomaticSetupModelExchange.receiveSignInModel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.receiveSignInModel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.receiveSignInModel.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659C35C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a3;
  *(_QWORD *)(v3 + 32) = type metadata accessor for SignInModel();
  *(_QWORD *)(v3 + 40) = swift_task_alloc();
  *(_QWORD *)(v3 + 48) = __swift_instantiateConcreteTypeFromMangledName(&qword_2563ED6A0);
  *(_QWORD *)(v3 + 56) = swift_task_alloc();
  *(_OWORD *)(v3 + 64) = *(_OWORD *)(a2 + 584);
  return swift_task_switch();
}

uint64_t sub_23659C3F0()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t (*v16)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_BYTE **)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v4 = (uint64_t)&v1[*(int *)(*(_QWORD *)(v0 + 48) + 28)];
  sub_23648DFF8(*(_QWORD *)(v0 + 24), v4, (uint64_t (*)(_QWORD))type metadata accessor for SignInModel);
  *v1 = 1;
  sub_23648DFF8(v4, v2, (uint64_t (*)(_QWORD))type metadata accessor for SignInModel);
  v5 = *(int *)(v3 + 60);
  *(_DWORD *)(v0 + 120) = v5;
  v6 = (uint64_t *)(v2 + v5);
  v7 = v6[1];
  *(_QWORD *)(v0 + 80) = v7;
  if (v7 > 2)
  {
    v10 = *(int **)(v0 + 64);
    v11 = v6[3];
    *(_QWORD *)(v0 + 88) = v11;
    v12 = v6[2];
    *(_QWORD *)(v0 + 96) = v12;
    v13 = *v6;
    *(_QWORD *)(v0 + 104) = *v6;
    v14 = v6[4] & 1;
    v16 = (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 112) = v15;
    *v15 = v0;
    v15[1] = sub_23659C558;
    return v16(v13, v7, v12, v11, v14);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 56);
    sub_2365A2060(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 16));
    sub_236465998(v8, &qword_2563ED6A0);
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_23659C558(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 124) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23659C5B4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_BYTE *)(v0 + 124);
  v3 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 40) + *(int *)(v0 + 120);
  sub_23654FEE8(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v4;
  *(_BYTE *)(v6 + 32) = v1;
  v7 = *(_QWORD *)(v0 + 56);
  sub_2365A2060(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 16));
  sub_236465998(v7, &qword_2563ED6A0);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AutomaticSetupModelExchange.processSignInModel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.processSignInModel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.processSignInModel.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659C6C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 96) = &unk_2563ED978;
  *(_QWORD *)(a2 + 104) = v5;
  return result;
}

uint64_t AutomaticSetupModelExchange.receiveInitial.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.receiveInitial.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 96) = a1;
  *(_QWORD *)(v2 + 104) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.receiveInitial.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659C798(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 112) = &unk_2563ED968;
  *(_QWORD *)(a2 + 120) = v5;
  return result;
}

uint64_t AutomaticSetupModelExchange.receiveFinished.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.receiveFinished.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 112) = a1;
  *(_QWORD *)(v2 + 120) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.receiveFinished.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659C86C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 128) = &unk_2563ED950;
  *(_QWORD *)(a2 + 136) = v5;
  return result;
}

uint64_t AutomaticSetupModelExchange.receiveSetupError.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 128);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.receiveSetupError.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.receiveSetupError.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659C940(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 144) = &unk_2563ED930;
  *(_QWORD *)(a2 + 152) = v5;
  return result;
}

uint64_t AutomaticSetupModelExchange.receiveDismiss.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 144);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.receiveDismiss.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 144) = a1;
  *(_QWORD *)(v2 + 152) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.receiveDismiss.modify())()
{
  return nullsub_1;
}

void *AutomaticSetupModelExchange.queue.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 160);
  v2 = v1;
  return v1;
}

void AutomaticSetupModelExchange.queue.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 160) = a1;
}

uint64_t (*AutomaticSetupModelExchange.queue.modify())()
{
  return nullsub_1;
}

uint64_t AutomaticSetupModelExchange.receiveModelUpdate(_:with:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  const void *v4;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v19[616];

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9790);
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = *a1;
  v12 = *((_BYTE *)a1 + 8);
  v14 = a1[2];
  v13 = a1[3];
  memcpy(v19, v4, sizeof(v19));
  v15 = sub_2365B0218();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v10, 1, 1, v15);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  memcpy((void *)(v16 + 32), v19, 0x268uLL);
  *(_QWORD *)(v16 + 648) = v11;
  *(_BYTE *)(v16 + 656) = v12;
  *(_QWORD *)(v16 + 664) = v14;
  *(_QWORD *)(v16 + 672) = v13;
  *(_QWORD *)(v16 + 680) = a2;
  *(_QWORD *)(v16 + 688) = a3;
  sub_23649255C((uint64_t)v19);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_23649225C((uint64_t)v10, (uint64_t)&unk_2563ED6B0, v16);
  return swift_release();
}

uint64_t sub_23659CBB8(int a1, int a2, int a3, void *__src, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v8 + 680) = v14;
  *(_QWORD *)(v8 + 672) = v13;
  *(_QWORD *)(v8 + 664) = a8;
  *(_QWORD *)(v8 + 656) = a7;
  *(_BYTE *)(v8 + 704) = a6;
  *(_QWORD *)(v8 + 648) = a5;
  memcpy((void *)(v8 + 16), __src, 0x268uLL);
  *(_BYTE *)(v8 + 632) = a6;
  *(_QWORD *)(v8 + 640) = a7;
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 688) = v11;
  *v11 = v8;
  v11[1] = sub_23659CC54;
  return sub_2365967F8(v8 + 632);
}

uint64_t sub_23659CC54(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 696) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23659CCB0()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD v5[3];

  v1 = *(_QWORD *)(v0 + 696);
  if (*(_BYTE *)(v0 + 704) == 1)
  {
    v2 = *(void (**)(_QWORD *))(v0 + 672);
    v3 = *(_QWORD *)(v0 + 648);
    swift_retain();
    v5[0] = v3;
    v5[1] = sub_236596594();
    v5[2] = v1;
    v2(v5);
    swift_release_n();
  }
  else
  {
    swift_release();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23659CD58(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 168) = &unk_2563ED910;
  *(_QWORD *)(a2 + 176) = v5;
  return result;
}

uint64_t AutomaticSetupModelExchange.receiveDiscoveryStateDiscovered.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 168);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.receiveDiscoveryStateDiscovered.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 168) = a1;
  *(_QWORD *)(v2 + 176) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.receiveDiscoveryStateDiscovered.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659CE2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)a2;
  *(_BYTE *)(v2 + 64) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(v2 + 56) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(v2 + 65) = *(_BYTE *)(a2 + 48);
  return swift_task_switch();
}

uint64_t sub_23659CE6C()
{
  uint64_t v0;
  int v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(char *)(v0 + 65);
  if (v1 < 0)
    v2 = 1;
  else
    v2 = *(_BYTE *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)v7 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v7 + 8) = v6;
  *(_BYTE *)(v7 + 16) = v2;
  *(_QWORD *)(v7 + 24) = v5;
  *(_QWORD *)(v7 + 32) = v4;
  *(_QWORD *)(v7 + 40) = v3;
  *(_BYTE *)(v7 + 48) = v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_236499BC0(v5, v4, v3, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AutomaticSetupModelExchange.processDiscoveryStateDiscovered.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 184);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.processDiscoveryStateDiscovered.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 184) = a1;
  *(_QWORD *)(v2 + 192) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.processDiscoveryStateDiscovered.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659CF68(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 200) = &unk_2563ED8F0;
  *(_QWORD *)(a2 + 208) = v5;
  return result;
}

uint64_t AutomaticSetupModelExchange.receiveDiscoveryStateDiscovering.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 200);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.receiveDiscoveryStateDiscovering.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 200) = a1;
  *(_QWORD *)(v2 + 208) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.receiveDiscoveryStateDiscovering.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659D03C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_BYTE *)(v2 + 48) = *(_BYTE *)a2;
  *(_BYTE *)(v2 + 49) = *(_BYTE *)(a2 + 1);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(v2 + 40) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(v2 + 50) = *(_BYTE *)(a2 + 32);
  return swift_task_switch();
}

void sub_23659D07C()
{
  __asm { BR              X10 }
}

uint64_t sub_23659D0B0()
{
  char v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(_BYTE *)(v1 + 49);
  swift_bridgeObjectRetain();
  v3 = *(_QWORD *)(v1 + 40);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_OWORD *)(v1 + 24);
  *(_BYTE *)v4 = *(_BYTE *)(v1 + 48);
  *(_BYTE *)(v4 + 1) = v2;
  *(_OWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 24) = v3;
  *(_BYTE *)(v4 + 32) = v0;
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t AutomaticSetupModelExchange.processDiscoveryStateDiscovering.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 216);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.processDiscoveryStateDiscovering.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 216) = a1;
  *(_QWORD *)(v2 + 224) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.processDiscoveryStateDiscovering.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659D184(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v3;
  *v3 = v2;
  v3[1] = sub_23647E274;
  return v5();
}

uint64_t sub_23659D1D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 232) = &unk_2563ED8D8;
  *(_QWORD *)(a2 + 240) = v5;
  return result;
}

uint64_t sub_23659D23C(int *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))((char *)a1 + *a1);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_23647E274;
  return v4();
}

uint64_t AutomaticSetupModelExchange.receiveDiscoveryStatePaired.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 232);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.receiveDiscoveryStatePaired.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 232) = a1;
  *(_QWORD *)(v2 + 240) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.receiveDiscoveryStatePaired.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659D304(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 248) = &unk_2563ED8C8;
  *(_QWORD *)(a2 + 256) = v5;
  return result;
}

uint64_t AutomaticSetupModelExchange.receiveAuthenticationStateInitial.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 248);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.receiveAuthenticationStateInitial.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 248) = a1;
  *(_QWORD *)(v2 + 256) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.receiveAuthenticationStateInitial.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659D3D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 264) = &unk_2563ED8B8;
  *(_QWORD *)(a2 + 272) = v5;
  return result;
}

uint64_t AutomaticSetupModelExchange.receiveAuthenticationStateSRP.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 264);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.receiveAuthenticationStateSRP.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 264) = a1;
  *(_QWORD *)(v2 + 272) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.receiveAuthenticationStateSRP.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659D4AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 280) = &unk_2563ED8A0;
  *(_QWORD *)(a2 + 288) = v5;
  return result;
}

uint64_t AutomaticSetupModelExchange.receiveAuthenticationStateBasicLogin.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 280);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.receiveAuthenticationStateBasicLogin.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 280) = a1;
  *(_QWORD *)(v2 + 288) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.receiveAuthenticationStateBasicLogin.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659D580(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)a2;
  *(_QWORD *)(v2 + 16) = a1;
  *(_OWORD *)(v2 + 40) = v3;
  *(_WORD *)(v2 + 72) = *(_WORD *)(a2 + 32);
  *(_BYTE *)(v2 + 74) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(v2 + 75) = *(_BYTE *)(a2 + 35);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v2 + 56) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v2 + 64) = v4;
  return swift_task_switch();
}

uint64_t sub_23659D5C4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char v3;
  char v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  id v9;
  uint64_t (*v11)(void);

  v2 = *(void **)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_BYTE *)(v0 + 75);
  v4 = *(_BYTE *)(v0 + 74);
  v5 = *(_WORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 16);
  v8 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)v7 = *(_QWORD *)(v0 + 24);
  *(_OWORD *)(v7 + 8) = v8;
  *(_QWORD *)(v7 + 24) = v6;
  *(_WORD *)(v7 + 32) = v5;
  *(_BYTE *)(v7 + 34) = v4;
  *(_BYTE *)(v7 + 35) = v3;
  *(_QWORD *)(v7 + 40) = v2;
  *(_QWORD *)(v7 + 48) = v1;
  v11 = *(uint64_t (**)(void))(v0 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = v2;
  swift_bridgeObjectRetain();
  return v11();
}

uint64_t AutomaticSetupModelExchange.processAuthenticationStateBasicLogin.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 296);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.processAuthenticationStateBasicLogin.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 296) = a1;
  *(_QWORD *)(v2 + 304) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.processAuthenticationStateBasicLogin.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659D6C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 312) = &unk_2563ED880;
  *(_QWORD *)(a2 + 320) = v5;
  return result;
}

uint64_t AutomaticSetupModelExchange.receiveAuthenticationStateSecondFactor.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 312);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.receiveAuthenticationStateSecondFactor.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 312) = a1;
  *(_QWORD *)(v2 + 320) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.receiveAuthenticationStateSecondFactor.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659D794(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;

  *(_QWORD *)(v2 + 16) = a1;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)a2;
  *(_QWORD *)(v2 + 40) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 96) = *(_BYTE *)(a2 + 24);
  v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v2 + 64) = v3;
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a2 + 64);
  return swift_task_switch();
}

uint64_t sub_23659D7D4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  id v11;
  id v12;
  uint64_t (*v14)(void);

  v1 = *(void **)(v0 + 80);
  v2 = *(void **)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v7 = *(_BYTE *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 40);
  v9 = *(_QWORD *)(v0 + 16);
  v10 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)v9 = v10;
  *(_QWORD *)(v9 + 16) = v8;
  *(_BYTE *)(v9 + 24) = v7;
  *(_QWORD *)(v9 + 32) = v6;
  *(_QWORD *)(v9 + 40) = v5;
  *(_QWORD *)(v9 + 48) = v4;
  *(_QWORD *)(v9 + 56) = v3;
  *(_QWORD *)(v9 + 64) = v1;
  *(_QWORD *)(v9 + 72) = v2;
  v11 = (id)v10;
  sub_23644F7E0(v6, v5, v4, v3, v1);
  v14 = *(uint64_t (**)(void))(v0 + 8);
  v12 = v2;
  return v14();
}

uint64_t AutomaticSetupModelExchange.processAuthenticationStateSecondFactor.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 328);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.processAuthenticationStateSecondFactor.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 328) = a1;
  *(_QWORD *)(v2 + 336) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.processAuthenticationStateSecondFactor.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659D8E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 344) = &unk_2563ED860;
  *(_QWORD *)(a2 + 352) = v5;
  return result;
}

uint64_t AutomaticSetupModelExchange.receiveAuthenticationStateServerRedirect.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 344);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.receiveAuthenticationStateServerRedirect.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 344) = a1;
  *(_QWORD *)(v2 + 352) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.receiveAuthenticationStateServerRedirect.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659D9B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;

  *(_QWORD *)(v2 + 16) = a1;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)a2;
  *(_OWORD *)(v2 + 40) = v3;
  *(_QWORD *)(v2 + 56) = *(_QWORD *)(a2 + 32);
  return swift_task_switch();
}

uint64_t sub_23659D9E0()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t (*v13)(void);

  v1 = (void *)v0[6];
  v2 = (void *)v0[7];
  v4 = (void *)v0[4];
  v3 = (void *)v0[5];
  v6 = (_QWORD *)v0[2];
  v5 = (void *)v0[3];
  *v6 = v5;
  v6[1] = v4;
  v6[2] = v3;
  v6[3] = v1;
  v6[4] = v2;
  v13 = (uint64_t (*)(void))v0[1];
  v7 = v5;
  v8 = v4;
  v9 = v3;
  v10 = v1;
  v11 = v2;
  return v13();
}

uint64_t AutomaticSetupModelExchange.processAuthenticationStateServerRedirect.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 360);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.processAuthenticationStateServerRedirect.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 360) = a1;
  *(_QWORD *)(v2 + 368) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.processAuthenticationStateServerRedirect.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659DAB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 376) = &unk_2563ED840;
  *(_QWORD *)(a2 + 384) = v5;
  return result;
}

uint64_t AutomaticSetupModelExchange.receiveAuthenticationStateNativeRecovery.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 376);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.receiveAuthenticationStateNativeRecovery.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 376) = a1;
  *(_QWORD *)(v2 + 384) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.receiveAuthenticationStateNativeRecovery.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659DB8C(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  __int128 v3;

  *(_QWORD *)(v2 + 16) = a1;
  v3 = a2[1];
  *(_OWORD *)(v2 + 24) = *a2;
  *(_OWORD *)(v2 + 40) = v3;
  return swift_task_switch();
}

uint64_t AutomaticSetupModelExchange.processAuthenticationStateNativeRecovery.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 392);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.processAuthenticationStateNativeRecovery.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 392) = a1;
  *(_QWORD *)(v2 + 400) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.processAuthenticationStateNativeRecovery.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659DC20(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 408) = &unk_2563ED820;
  *(_QWORD *)(a2 + 416) = v5;
  return result;
}

uint64_t AutomaticSetupModelExchange.receiveAuthenticationStateFidoChallenge.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 408);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.receiveAuthenticationStateFidoChallenge.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 408) = a1;
  *(_QWORD *)(v2 + 416) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.receiveAuthenticationStateFidoChallenge.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659DCF4(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  __int128 v3;

  *(_QWORD *)(v2 + 16) = a1;
  v3 = a2[1];
  *(_OWORD *)(v2 + 24) = *a2;
  *(_OWORD *)(v2 + 40) = v3;
  return swift_task_switch();
}

uint64_t sub_23659DD18()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t (*v11)(void);

  v1 = (void *)v0[5];
  v2 = (void *)v0[6];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)v0[2];
  *v5 = v3;
  v5[1] = v4;
  v5[2] = v1;
  v5[3] = v2;
  v11 = (uint64_t (*)(void))v0[1];
  v6 = v3;
  v7 = v4;
  v8 = v1;
  v9 = v2;
  return v11();
}

uint64_t AutomaticSetupModelExchange.processAuthenticationStateFidoChallenge.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 424);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.processAuthenticationStateFidoChallenge.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 424) = a1;
  *(_QWORD *)(v2 + 432) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.processAuthenticationStateFidoChallenge.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659DDE4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 440) = &unk_2563ED800;
  *(_QWORD *)(a2 + 448) = v5;
  return result;
}

uint64_t AutomaticSetupModelExchange.receiveAuthenticationStateKeepUsing.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 440);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.receiveAuthenticationStateKeepUsing.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 440) = a1;
  *(_QWORD *)(v2 + 448) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.receiveAuthenticationStateKeepUsing.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659DEB8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  *(_QWORD *)(v2 + 32) = v4;
  *(_BYTE *)(v2 + 40) = *((_BYTE *)a2 + 16);
  return swift_task_switch();
}

uint64_t sub_23659DEE0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(void);

  v1 = *(_BYTE *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)v3 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v3 + 8) = v2;
  *(_BYTE *)(v3 + 16) = v1;
  v5 = *(uint64_t (**)(void))(v0 + 8);
  swift_bridgeObjectRetain();
  return v5();
}

uint64_t AutomaticSetupModelExchange.processAuthenticationStateKeepUsing.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 456);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.processAuthenticationStateKeepUsing.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 456) = a1;
  *(_QWORD *)(v2 + 464) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.processAuthenticationStateKeepUsing.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659DF98(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 472) = &unk_2563ED7E0;
  *(_QWORD *)(a2 + 480) = v5;
  return result;
}

uint64_t AutomaticSetupModelExchange.receiveAuthenticationStateAlert.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 472);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.receiveAuthenticationStateAlert.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 472) = a1;
  *(_QWORD *)(v2 + 480) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.receiveAuthenticationStateAlert.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659E06C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v3 + 24) = *(_OWORD *)a3;
  *(_OWORD *)(v3 + 40) = v4;
  v5 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(v3 + 16) = a1;
  *(_OWORD *)(v3 + 72) = v5;
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a3 + 64);
  *(_BYTE *)(v3 + 104) = *(_BYTE *)(a3 + 80);
  return swift_task_switch();
}

uint64_t sub_23659E0AC()
{
  uint64_t v0;
  char v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v1 = *(_BYTE *)(v0 + 104);
  v3 = *(void **)(v0 + 88);
  v2 = *(void **)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 80);
  v6 = *(void **)(v0 + 56);
  v7 = *(void **)(v0 + 64);
  v8 = *(void **)(v0 + 40);
  v9 = *(void **)(v0 + 48);
  v10 = *(void **)(v0 + 24);
  v11 = *(void **)(v0 + 32);
  v12 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)v12 = v10;
  *(_QWORD *)(v12 + 8) = v11;
  *(_QWORD *)(v12 + 16) = v8;
  *(_QWORD *)(v12 + 24) = v9;
  *(_QWORD *)(v12 + 32) = v6;
  *(_QWORD *)(v12 + 40) = v7;
  *(_QWORD *)(v12 + 48) = v4;
  *(_QWORD *)(v12 + 56) = v5;
  *(_QWORD *)(v12 + 64) = v3;
  *(_QWORD *)(v12 + 72) = v2;
  *(_BYTE *)(v12 + 80) = v1;
  sub_23644F6A4(v10, v11, v8, v9, v6, v7, v4, v5, v3, v2, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AutomaticSetupModelExchange.processAuthenticationStateAlert.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 488);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.processAuthenticationStateAlert.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 488) = a1;
  *(_QWORD *)(v2 + 496) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.processAuthenticationStateAlert.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659E184(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 504) = &unk_2563ED7C0;
  *(_QWORD *)(a2 + 512) = v5;
  return result;
}

uint64_t AutomaticSetupModelExchange.receiveAuthenticationStateLoading.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 504);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.receiveAuthenticationStateLoading.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 504) = a1;
  *(_QWORD *)(v2 + 512) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.receiveAuthenticationStateLoading.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659E258(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)a2;
  *(_OWORD *)(v2 + 40) = v3;
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v2 + 16) = a1;
  *(_OWORD *)(v2 + 72) = v4;
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(v2 + 104) = *(_BYTE *)(a2 + 80);
  return swift_task_switch();
}

uint64_t AutomaticSetupModelExchange.processAuthenticationStateLoading.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 520);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.processAuthenticationStateLoading.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 520) = a1;
  *(_QWORD *)(v2 + 528) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.processAuthenticationStateLoading.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659E310(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 536) = &unk_2563ED7A8;
  *(_QWORD *)(a2 + 544) = v5;
  return result;
}

uint64_t AutomaticSetupModelExchange.receiveSignInStateInitial.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 536);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.receiveSignInStateInitial.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 536) = a1;
  *(_QWORD *)(v2 + 544) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.receiveSignInStateInitial.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659E3F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 552) = &unk_2563ED798;
  *(_QWORD *)(a2 + 560) = v5;
  return result;
}

uint64_t AutomaticSetupModelExchange.receiveSignInStateSigningIn.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 552);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.receiveSignInStateSigningIn.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 552) = a1;
  *(_QWORD *)(v2 + 560) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.receiveSignInStateSigningIn.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659E4D0(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned __int8 *a4, int *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v6 = *a2;
  v7 = a2[1];
  v8 = *a3;
  v9 = a3[1];
  v10 = *a4;
  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)a5 + *a5);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_23647E274;
  return v13(v6, v7, v8, v9, v10);
}

uint64_t sub_23659E558(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 568) = &unk_2563ED780;
  *(_QWORD *)(a2 + 576) = v5;
  return result;
}

uint64_t sub_23659E5C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, int *a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(void);

  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = a3;
  *(_QWORD *)(v6 + 40) = a4;
  *(_BYTE *)(v6 + 56) = a5;
  v9 = (uint64_t (*)(void))((char *)a6 + *a6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 48) = v7;
  *v7 = v6;
  v7[1] = sub_236478150;
  return v9();
}

uint64_t AutomaticSetupModelExchange.receiveSignInStateAlert.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 568);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.receiveSignInStateAlert.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 568) = a1;
  *(_QWORD *)(v2 + 576) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.receiveSignInStateAlert.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659E6C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return sub_2365A2050(*(uint64_t (**)(uint64_t))(v5 + 8), v5, a5);
}

uint64_t sub_23659E6D4(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned __int8 *a4, int *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v5 + 16) = a1;
  v6 = *a2;
  v7 = a2[1];
  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)a5 + *a5);
  v8 = *a3;
  v9 = a3[1];
  v10 = *a4;
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 24) = v11;
  *v11 = v5;
  v11[1] = sub_23646F564;
  return v13(v6, v7, v8, v9, v10);
}

uint64_t sub_23659E760(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 584) = &unk_2563ED760;
  *(_QWORD *)(a2 + 592) = v5;
  return result;
}

uint64_t sub_23659E7C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, int *a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = a3;
  *(_QWORD *)(v6 + 40) = a4;
  *(_BYTE *)(v6 + 56) = a5;
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)a6 + *a6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 48) = v7;
  *v7 = v6;
  v7[1] = sub_23659E864;
  return v9(v6 + 57, v6 + 16, v6 + 32, v6 + 56);
}

uint64_t sub_23659E864()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *v0;
  v3 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v3 + 8))(*(unsigned __int8 *)(v1 + 57));
}

uint64_t AutomaticSetupModelExchange.processSignInStateAlert.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 584);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.processSignInStateAlert.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 584) = a1;
  *(_QWORD *)(v2 + 592) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.processSignInStateAlert.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659E924()
{
  uint64_t v0;

  sub_23644F8BC(*(void **)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(void **)(v0 + 80), *(void **)(v0 + 88), *(_BYTE *)(v0 + 96));
  return swift_deallocObject();
}

uint64_t sub_23659E970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  __int128 v10;

  v2 = v0 + 656;
  v3 = (const void *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 648);
  v5 = *(_BYTE *)(v0 + 656);
  v6 = swift_task_alloc();
  v10 = *(_OWORD *)(v2 + 8);
  v7 = *(_OWORD *)(v2 + 24);
  *(_QWORD *)(v1 + 16) = v6;
  *(_QWORD *)v6 = v1;
  *(_QWORD *)(v6 + 8) = sub_23647E274;
  *(_OWORD *)(v6 + 656) = v10;
  *(_OWORD *)(v6 + 672) = v7;
  *(_BYTE *)(v6 + 704) = v5;
  *(_QWORD *)(v6 + 648) = v4;
  memcpy((void *)(v6 + 16), v3, 0x268uLL);
  *(_BYTE *)(v6 + 632) = v5;
  *(_QWORD *)(v6 + 640) = v10;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 688) = v8;
  *v8 = v6;
  v8[1] = sub_23659CC54;
  return sub_2365967F8(v6 + 632);
}

uint64_t sub_23659EA40(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 600) = &unk_2563ED740;
  *(_QWORD *)(a2 + 608) = v5;
  return result;
}

uint64_t AutomaticSetupModelExchange.receiveSignInStateFinished.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 600);
  swift_retain();
  return v1;
}

uint64_t AutomaticSetupModelExchange.receiveSignInStateFinished.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 600) = a1;
  *(_QWORD *)(v2 + 608) = a2;
  return result;
}

uint64_t (*AutomaticSetupModelExchange.receiveSignInStateFinished.modify())()
{
  return nullsub_1;
}

uint64_t sub_23659EB20(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  const void *v4;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v19[616];

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9790);
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = *a1;
  v12 = *((_BYTE *)a1 + 8);
  v14 = a1[2];
  v13 = a1[3];
  memcpy(v19, v4, sizeof(v19));
  v15 = sub_2365B0218();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v10, 1, 1, v15);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  memcpy((void *)(v16 + 32), v19, 0x268uLL);
  *(_QWORD *)(v16 + 648) = v11;
  *(_BYTE *)(v16 + 656) = v12;
  *(_QWORD *)(v16 + 664) = v14;
  *(_QWORD *)(v16 + 672) = v13;
  *(_QWORD *)(v16 + 680) = a2;
  *(_QWORD *)(v16 + 688) = a3;
  sub_23649255C((uint64_t)v19);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_23649225C((uint64_t)v10, (uint64_t)&unk_2563ED9E8, v16);
  return swift_release();
}

uint64_t sub_23659EC68@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = &unk_2563ED9E0;
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_23659ECBC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  *a2 = v2;
  a2[1] = v3;
  return swift_retain();
}

uint64_t sub_23659ECC8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v3;
  return result;
}

uint64_t sub_23659ED08@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = &unk_2563ED9C0;
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_23659ED5C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  *a2 = v2;
  a2[1] = v3;
  return swift_retain();
}

uint64_t sub_23659ED68(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 48) = v4;
  *(_QWORD *)(a2 + 56) = v3;
  return result;
}

uint64_t sub_23659EDA8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = &unk_2563ED9A0;
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_23659EDFC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(_QWORD *)(a1 + 88);
  *a2 = v2;
  a2[1] = v3;
  return swift_retain();
}

uint64_t sub_23659EE08(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 80) = v4;
  *(_QWORD *)(a2 + 88) = v3;
  return result;
}

uint64_t sub_23659EE48@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 96);
  v3 = *(_QWORD *)(a1 + 104);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = &unk_2563ED980;
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_23659EE9C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 120);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = &unk_2563ED970;
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_23659EEF0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 128);
  v3 = *(_QWORD *)(a1 + 136);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = &unk_2563ED960;
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_23659EF44@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 144);
  v3 = *(_QWORD *)(a1 + 152);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = &unk_2563ED940;
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_23659EF98@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 168);
  v3 = *(_QWORD *)(a1 + 176);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = &unk_2563ED920;
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_23659EFEC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 184);
  v3 = *(_QWORD *)(a1 + 192);
  *a2 = v2;
  a2[1] = v3;
  return swift_retain();
}

uint64_t sub_23659EFF8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 184) = v4;
  *(_QWORD *)(a2 + 192) = v3;
  return result;
}

uint64_t sub_23659F038@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 200);
  v3 = *(_QWORD *)(a1 + 208);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = &unk_2563ED900;
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_23659F08C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 216);
  v3 = *(_QWORD *)(a1 + 224);
  *a2 = v2;
  a2[1] = v3;
  return swift_retain();
}

uint64_t sub_23659F098(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 216) = v4;
  *(_QWORD *)(a2 + 224) = v3;
  return result;
}

uint64_t sub_23659F0D8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 232);
  v3 = *(_QWORD *)(a1 + 240);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = &unk_2563ED8E0;
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_23659F12C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 248);
  v3 = *(_QWORD *)(a1 + 256);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = &unk_2563ED8D0;
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_23659F180@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 264);
  v3 = *(_QWORD *)(a1 + 272);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = &unk_2563ED8C0;
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_23659F1D4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 280);
  v3 = *(_QWORD *)(a1 + 288);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = &unk_2563ED8B0;
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_23659F228@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 296);
  v3 = *(_QWORD *)(a1 + 304);
  *a2 = v2;
  a2[1] = v3;
  return swift_retain();
}

uint64_t sub_23659F234(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 296) = v4;
  *(_QWORD *)(a2 + 304) = v3;
  return result;
}

uint64_t sub_23659F274@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 312);
  v3 = *(_QWORD *)(a1 + 320);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = &unk_2563ED890;
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_23659F2C8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 328);
  v3 = *(_QWORD *)(a1 + 336);
  *a2 = v2;
  a2[1] = v3;
  return swift_retain();
}

uint64_t sub_23659F2D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 328) = v4;
  *(_QWORD *)(a2 + 336) = v3;
  return result;
}

uint64_t sub_23659F314@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 344);
  v3 = *(_QWORD *)(a1 + 352);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = &unk_2563ED870;
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_23659F368@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 360);
  v3 = *(_QWORD *)(a1 + 368);
  *a2 = v2;
  a2[1] = v3;
  return swift_retain();
}

uint64_t sub_23659F374(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 360) = v4;
  *(_QWORD *)(a2 + 368) = v3;
  return result;
}

uint64_t sub_23659F3B4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 376);
  v3 = *(_QWORD *)(a1 + 384);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = &unk_2563ED850;
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_23659F408@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 392);
  v3 = *(_QWORD *)(a1 + 400);
  *a2 = v2;
  a2[1] = v3;
  return swift_retain();
}

uint64_t sub_23659F414(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 392) = v4;
  *(_QWORD *)(a2 + 400) = v3;
  return result;
}

uint64_t sub_23659F454@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 408);
  v3 = *(_QWORD *)(a1 + 416);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = &unk_2563ED830;
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_23659F4A8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 424);
  v3 = *(_QWORD *)(a1 + 432);
  *a2 = v2;
  a2[1] = v3;
  return swift_retain();
}

uint64_t sub_23659F4B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 424) = v4;
  *(_QWORD *)(a2 + 432) = v3;
  return result;
}

uint64_t sub_23659F4F4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 440);
  v3 = *(_QWORD *)(a1 + 448);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = &unk_2563ED810;
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_23659F548@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 456);
  v3 = *(_QWORD *)(a1 + 464);
  *a2 = v2;
  a2[1] = v3;
  return swift_retain();
}

uint64_t sub_23659F554(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 456) = v4;
  *(_QWORD *)(a2 + 464) = v3;
  return result;
}

uint64_t sub_23659F594@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 472);
  v3 = *(_QWORD *)(a1 + 480);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = &unk_2563ED7F0;
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_23659F5E8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 488);
  v3 = *(_QWORD *)(a1 + 496);
  *a2 = v2;
  a2[1] = v3;
  return swift_retain();
}

uint64_t sub_23659F5F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 488) = v4;
  *(_QWORD *)(a2 + 496) = v3;
  return result;
}

uint64_t sub_23659F634@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 504);
  v3 = *(_QWORD *)(a1 + 512);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = &unk_2563ED7D0;
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_23659F688@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 520);
  v3 = *(_QWORD *)(a1 + 528);
  *a2 = v2;
  a2[1] = v3;
  return swift_retain();
}

uint64_t sub_23659F698(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 520) = v4;
  *(_QWORD *)(a2 + 528) = v3;
  return result;
}

uint64_t sub_23659F6DC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 536);
  v4 = *(_QWORD *)(a1 + 544);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  *a2 = &unk_2563ED7B0;
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_23659F734@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 552);
  v4 = *(_QWORD *)(a1 + 560);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  *a2 = &unk_2563ED7A0;
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_23659F78C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 568);
  v4 = *(_QWORD *)(a1 + 576);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  *a2 = &unk_2563ED790;
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_23659F7E4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 584);
  v4 = *(_QWORD *)(a1 + 592);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  *a2 = &unk_2563ED770;
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_23659F83C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 600);
  v4 = *(_QWORD *)(a1 + 608);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  *a2 = &unk_2563ED750;
  a2[1] = v5;
  return swift_retain();
}

uint64_t destroy for AutomaticSetupModelExchange(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for AutomaticSetupModelExchange(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  id v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v3 = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = v3;
  v18 = *(_OWORD *)(a2 + 160);
  v4 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = v18;
  *(_OWORD *)(a1 + 176) = v4;
  v5 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v5;
  v6 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v6;
  v7 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v7;
  v8 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v8;
  v9 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v9;
  v10 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = v10;
  v19 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v19;
  v20 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 432) = v20;
  v11 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 464) = v11;
  v12 = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = v12;
  v21 = *(_OWORD *)(a2 + 528);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 528) = v21;
  v13 = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 560) = v13;
  v14 = *(_QWORD *)(a2 + 608);
  v15 = *(_OWORD *)(a2 + 592);
  *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 592) = v15;
  *(_QWORD *)(a1 + 608) = v14;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v16 = (id)v18;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for AutomaticSetupModelExchange(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_retain();
  swift_release();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_retain();
  swift_release();
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_retain();
  swift_release();
  v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  swift_retain();
  swift_release();
  v10 = a2[13];
  a1[12] = a2[12];
  a1[13] = v10;
  swift_retain();
  swift_release();
  v11 = a2[15];
  a1[14] = a2[14];
  a1[15] = v11;
  swift_retain();
  swift_release();
  v12 = a2[17];
  a1[16] = a2[16];
  a1[17] = v12;
  swift_retain();
  swift_release();
  v13 = a2[19];
  a1[18] = a2[18];
  a1[19] = v13;
  swift_retain();
  swift_release();
  v14 = (void *)a1[20];
  v15 = (void *)a2[20];
  a1[20] = v15;
  v16 = v15;

  v17 = a2[22];
  a1[21] = a2[21];
  a1[22] = v17;
  swift_retain();
  swift_release();
  v18 = a2[24];
  a1[23] = a2[23];
  a1[24] = v18;
  swift_retain();
  swift_release();
  v19 = a2[26];
  a1[25] = a2[25];
  a1[26] = v19;
  swift_retain();
  swift_release();
  v20 = a2[28];
  a1[27] = a2[27];
  a1[28] = v20;
  swift_retain();
  swift_release();
  v21 = a2[30];
  a1[29] = a2[29];
  a1[30] = v21;
  swift_retain();
  swift_release();
  v22 = a2[32];
  a1[31] = a2[31];
  a1[32] = v22;
  swift_retain();
  swift_release();
  v23 = a2[34];
  a1[33] = a2[33];
  a1[34] = v23;
  swift_retain();
  swift_release();
  v24 = a2[36];
  a1[35] = a2[35];
  a1[36] = v24;
  swift_retain();
  swift_release();
  v25 = a2[38];
  a1[37] = a2[37];
  a1[38] = v25;
  swift_retain();
  swift_release();
  v26 = a2[40];
  a1[39] = a2[39];
  a1[40] = v26;
  swift_retain();
  swift_release();
  v27 = a2[42];
  a1[41] = a2[41];
  a1[42] = v27;
  swift_retain();
  swift_release();
  v28 = a2[44];
  a1[43] = a2[43];
  a1[44] = v28;
  swift_retain();
  swift_release();
  v29 = a2[46];
  a1[45] = a2[45];
  a1[46] = v29;
  swift_retain();
  swift_release();
  v30 = a2[48];
  a1[47] = a2[47];
  a1[48] = v30;
  swift_retain();
  swift_release();
  v31 = a2[50];
  a1[49] = a2[49];
  a1[50] = v31;
  swift_retain();
  swift_release();
  v32 = a2[52];
  a1[51] = a2[51];
  a1[52] = v32;
  swift_retain();
  swift_release();
  v33 = a2[54];
  a1[53] = a2[53];
  a1[54] = v33;
  swift_retain();
  swift_release();
  v34 = a2[56];
  a1[55] = a2[55];
  a1[56] = v34;
  swift_retain();
  swift_release();
  v35 = a2[58];
  a1[57] = a2[57];
  a1[58] = v35;
  swift_retain();
  swift_release();
  v36 = a2[60];
  a1[59] = a2[59];
  a1[60] = v36;
  swift_retain();
  swift_release();
  v37 = a2[62];
  a1[61] = a2[61];
  a1[62] = v37;
  swift_retain();
  swift_release();
  v38 = a2[64];
  a1[63] = a2[63];
  a1[64] = v38;
  swift_retain();
  swift_release();
  v39 = a2[66];
  a1[65] = a2[65];
  a1[66] = v39;
  swift_retain();
  swift_release();
  v40 = a2[68];
  a1[67] = a2[67];
  a1[68] = v40;
  swift_retain();
  swift_release();
  v41 = a2[70];
  a1[69] = a2[69];
  a1[70] = v41;
  swift_retain();
  swift_release();
  v42 = a2[72];
  a1[71] = a2[71];
  a1[72] = v42;
  swift_retain();
  swift_release();
  v43 = a2[74];
  a1[73] = a2[73];
  a1[74] = v43;
  swift_retain();
  swift_release();
  v44 = a2[76];
  a1[75] = a2[75];
  a1[76] = v44;
  swift_retain();
  swift_release();
  return a1;
}

void *__swift_memcpy616_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x268uLL);
}

uint64_t assignWithTake for AutomaticSetupModelExchange(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  void *v6;

  v4 = (_OWORD *)(a1 + 264);
  v5 = (_OWORD *)(a2 + 264);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_release();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_release();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  swift_release();
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  swift_release();
  v6 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);

  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  swift_release();
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  swift_release();
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  swift_release();
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  swift_release();
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  swift_release();
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  swift_release();
  *v4 = *v5;
  swift_release();
  v4[1] = v5[1];
  swift_release();
  v4[2] = v5[2];
  swift_release();
  v4[3] = v5[3];
  swift_release();
  v4[4] = v5[4];
  swift_release();
  v4[5] = v5[5];
  swift_release();
  v4[6] = v5[6];
  swift_release();
  v4[7] = v5[7];
  swift_release();
  v4[8] = v5[8];
  swift_release();
  v4[9] = v5[9];
  swift_release();
  v4[10] = v5[10];
  swift_release();
  v4[11] = v5[11];
  swift_release();
  v4[12] = v5[12];
  swift_release();
  v4[13] = v5[13];
  swift_release();
  v4[14] = v5[14];
  swift_release();
  v4[15] = v5[15];
  swift_release();
  v4[16] = v5[16];
  swift_release();
  v4[17] = v5[17];
  swift_release();
  v4[18] = v5[18];
  swift_release();
  v4[19] = v5[19];
  swift_release();
  v4[20] = v5[20];
  swift_release();
  v4[21] = v5[21];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AutomaticSetupModelExchange(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 616))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomaticSetupModelExchange(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 616) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 616) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AutomaticSetupModelExchange()
{
  return &type metadata for AutomaticSetupModelExchange;
}

uint64_t sub_2365A0518()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_2365A0590(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = ~v5;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 1) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v5 + 16) & v6));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 1) & v6, ((unint64_t)a2 + v5 + 1) & v6);
  }
  return v3;
}

uint64_t sub_2365A062C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_BYTE *sub_2365A064C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_BYTE *sub_2365A069C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_BYTE *sub_2365A06EC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_BYTE *sub_2365A073C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t sub_2365A078C(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 1) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)&a1[v9];
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)&a1[v9];
      if (!*(_WORD *)&a1[v9])
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0xFE)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((unint64_t)&a1[v7 + 1] & ~v7);
      v15 = *a1;
      v16 = v15 >= 2;
      v17 = (v15 + 2147483646) & 0x7FFFFFFF;
      if (v16)
        return (v17 + 1);
      else
        return 0;
    }
  }
  v11 = a1[v9];
  if (!a1[v9])
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2365A0860 + 4 * byte_2365C991B[(v9 - 1)]))();
}

void sub_2365A08D8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for AutomaticSetupModelExchange.InternalUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AutomaticSetupModelExchange.InternalUpdate);
}

uint64_t sub_2365A0AD4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2365A0AF8()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;

  v2 = *(int **)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23647E274;
  return ((uint64_t (*)(int *))((char *)&dword_2563ED738 + dword_2563ED738))(v2);
}

uint64_t sub_2365A0B5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_2563ED748 + dword_2563ED748))(a1, v4);
}

uint64_t sub_2365A0BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  int *v12;
  _QWORD *v13;

  v12 = *(int **)(v5 + 16);
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = sub_23647E174;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char, int *))((char *)&dword_2563ED758
                                                                                  + dword_2563ED758))(a1, a2, a3, a4, a5, v12);
}

uint64_t sub_2365A0C68(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned __int8 *a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v10;
  _QWORD *v11;

  v10 = *(int **)(v4 + 16);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t *, uint64_t *, unsigned __int8 *, int *))((char *)&dword_2563ED768
                                                                                          + dword_2563ED768))(a1, a2, a3, a4, v10);
}

uint64_t sub_2365A0D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  int *v12;
  _QWORD *v13;

  v12 = *(int **)(v5 + 16);
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char, int *))((char *)&dword_2563ED778
                                                                                  + dword_2563ED778))(a1, a2, a3, a4, a5, v12);
}

uint64_t sub_2365A0D9C(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned __int8 *a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v10;
  _QWORD *v11;

  v10 = *(int **)(v4 + 16);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t *, uint64_t *, unsigned __int8 *, int *))((char *)&dword_2563ED788
                                                                                          + dword_2563ED788))(a1, a2, a3, a4, v10);
}

uint64_t sub_2365A0E34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_2563ED748 + dword_2563ED748))(a1, v4);
}

uint64_t sub_2365A0EA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_2563ED748 + dword_2563ED748))(a1, v4);
}

uint64_t sub_2365A0F14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_2563ED7B8 + dword_2563ED7B8))(a1, v4);
}

uint64_t sub_2365A0F80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_2563ED7C8 + dword_2563ED7C8))(a1, a2, v6);
}

uint64_t sub_2365A1000(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_2563ED7D8 + dword_2563ED7D8))(a1, a2, v6);
}

uint64_t sub_2365A107C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v8;
  _QWORD *v9;

  v8 = *(int **)(v3 + 16);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_2563ED7E8 + dword_2563ED7E8))(a1, a2, a3, v8);
}

uint64_t sub_2365A1104(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_2563ED7F8 + dword_2563ED7F8))(a1, v4);
}

uint64_t sub_2365A1170(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_2563ED808 + dword_2563ED808))(a1, a2, v6);
}

uint64_t sub_2365A11F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_2563ED818 + dword_2563ED818))(a1, v4);
}

uint64_t sub_2365A125C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_2563ED828 + dword_2563ED828))(a1, a2, v6);
}

uint64_t sub_2365A12DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_2563ED838 + dword_2563ED838))(a1, v4);
}

uint64_t sub_2365A1348(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_2563ED848 + dword_2563ED848))(a1, a2, v6);
}

uint64_t sub_2365A13C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_2563ED858 + dword_2563ED858))(a1, v4);
}

uint64_t sub_2365A1434(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_2563ED868 + dword_2563ED868))(a1, a2, v6);
}

uint64_t sub_2365A14B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_2563ED878 + dword_2563ED878))(a1, v4);
}

uint64_t sub_2365A1520(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_2563ED888 + dword_2563ED888))(a1, a2, v6);
}

uint64_t sub_2365A15A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_2563ED898 + dword_2563ED898))(a1, v4);
}

uint64_t sub_2365A160C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_2563ED8A8 + dword_2563ED8A8))(a1, a2, v6);
}

uint64_t sub_2365A168C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_2563ED748 + dword_2563ED748))(a1, v4);
}

uint64_t sub_2365A16FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_2563ED748 + dword_2563ED748))(a1, v4);
}

uint64_t sub_2365A176C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_2563ED748 + dword_2563ED748))(a1, v4);
}

uint64_t sub_2365A17DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_2563ED8E8 + dword_2563ED8E8))(a1, v4);
}

uint64_t sub_2365A1848(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_2563ED8F8 + dword_2563ED8F8))(a1, a2, v6);
}

uint64_t sub_2365A18C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_2563ED908 + dword_2563ED908))(a1, v4);
}

uint64_t sub_2365A1934(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_236477420;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_2563ED918 + dword_2563ED918))(a1, a2, v6);
}

uint64_t sub_2365A19B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_2563ED928 + dword_2563ED928))(a1, v4);
}

uint64_t sub_2365A1A20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_2563ED938 + dword_2563ED938))(a1, a2, v6);
}

uint64_t sub_2365A1AA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_2563ED948 + dword_2563ED948))(a1, a2, v6);
}

uint64_t sub_2365A1B1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v8;
  _QWORD *v9;

  v8 = *(int **)(v3 + 16);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_2563ED958 + dword_2563ED958))(a1, a2, a3, v8);
}

uint64_t sub_2365A1BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_2563ED988 + dword_2563ED988))(a1, a2, v6);
}

uint64_t sub_2365A1C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v8;
  _QWORD *v9;

  v8 = *(int **)(v3 + 16);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_2563ED998 + dword_2563ED998))(a1, a2, a3, v8);
}

uint64_t sub_2365A1CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_2563ED9A8 + dword_2563ED9A8))(a1, a2, v6);
}

uint64_t sub_2365A1D24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v8;
  _QWORD *v9;

  v8 = *(int **)(v3 + 16);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_2563ED9B8 + dword_2563ED9B8))(a1, a2, a3, v8);
}

uint64_t sub_2365A1DAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_2563ED9C8 + dword_2563ED9C8))(a1, a2, v6);
}

uint64_t sub_2365A1E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v8;
  _QWORD *v9;

  v8 = *(int **)(v3 + 16);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_23647E274;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_2563ED9D8 + dword_2563ED9D8))(a1, a2, a3, v8);
}

uint64_t objectdestroy_31Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2365A2050(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_2365A2060(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SignInModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2365A2178(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  os_unfair_lock_s *v26;
  uint64_t v27;
  uint64_t v28;
  os_unfair_lock_s *v29;
  _QWORD v31[3];
  uint64_t v32;

  v16 = type metadata accessor for SetupModel.ModelData(0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (unsigned __int8 *)v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (unsigned __int8 *)v31 - v20;
  v22 = 0;
  if (a1 == a5 && ((a2 ^ a6) & 1) == 0)
  {
    v31[0] = a4;
    v31[1] = a8;
    swift_getKeyPath();
    v32 = a3;
    sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
    sub_2365AFA44();
    swift_release();
    v23 = *(_QWORD *)(a3 + 16);
    v24 = (_QWORD *)MEMORY[0x24BEE27A8];
    v25 = v23 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v23 + 16);
    v26 = (os_unfair_lock_s *)(v23 + ((*(unsigned int *)(*(_QWORD *)v23 + 48) + 3) & 0x1FFFFFFFCLL));
    swift_retain();
    os_unfair_lock_lock(v26);
    sub_23657FBD0(v25, (uint64_t)v21);
    os_unfair_lock_unlock(v26);
    swift_release();
    swift_getKeyPath();
    v32 = a7;
    sub_2365AFA44();
    swift_release();
    v27 = *(_QWORD *)(a7 + 16);
    v28 = v27 + *(_QWORD *)(*v24 + *(_QWORD *)v27 + 16);
    v29 = (os_unfair_lock_s *)(v27 + ((*(unsigned int *)(*(_QWORD *)v27 + 48) + 3) & 0x1FFFFFFFCLL));
    swift_retain();
    os_unfair_lock_lock(v29);
    sub_236573588(v28, (uint64_t)v19);
    os_unfair_lock_unlock(v29);
    swift_release();
    LOBYTE(v27) = sub_2365792EC(v21, v19);
    sub_236465A18((uint64_t)v19, type metadata accessor for SetupModel.ModelData);
    sub_236465A18((uint64_t)v21, type metadata accessor for SetupModel.ModelData);
    if ((v27 & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5138);
      v22 = sub_2365AFAEC();
    }
    else
    {
      v22 = 0;
    }
  }
  return v22 & 1;
}

uint64_t sub_2365A23E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  uint64_t v27;
  uint64_t v28;

  v12 = type metadata accessor for SetupModel.ModelData(0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (unsigned __int8 *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (unsigned __int8 *)&v27 - v16;
  v18 = 0;
  if (a1 == a4 && a2 == a5)
  {
    swift_getKeyPath();
    v28 = a3;
    sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
    sub_2365AFA44();
    swift_release();
    v19 = *(_QWORD *)(a3 + 16);
    v20 = (_QWORD *)MEMORY[0x24BEE27A8];
    v21 = v19 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v19 + 16);
    v22 = (os_unfair_lock_s *)(v19 + ((*(unsigned int *)(*(_QWORD *)v19 + 48) + 3) & 0x1FFFFFFFCLL));
    swift_retain();
    os_unfair_lock_lock(v22);
    sub_23657FBD0(v21, (uint64_t)v17);
    os_unfair_lock_unlock(v22);
    swift_release();
    swift_getKeyPath();
    v28 = a6;
    sub_2365AFA44();
    swift_release();
    v23 = *(_QWORD *)(a6 + 16);
    v24 = v23 + *(_QWORD *)(*v20 + *(_QWORD *)v23 + 16);
    v25 = (os_unfair_lock_s *)(v23 + ((*(unsigned int *)(*(_QWORD *)v23 + 48) + 3) & 0x1FFFFFFFCLL));
    swift_retain();
    os_unfair_lock_lock(v25);
    sub_236573588(v24, (uint64_t)v15);
    os_unfair_lock_unlock(v25);
    swift_release();
    v18 = sub_2365792EC(v17, v15);
    sub_236465A18((uint64_t)v15, type metadata accessor for SetupModel.ModelData);
    sub_236465A18((uint64_t)v17, type metadata accessor for SetupModel.ModelData);
  }
  return v18 & 1;
}

uint64_t sub_2365A2624(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  int v13;
  __int16 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v6 = type metadata accessor for SetupModel.ModelData(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2365B0A28();
  sub_2365B0A28();
  swift_getKeyPath();
  *(_QWORD *)&v26 = a4;
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365AFA44();
  swift_release();
  v9 = *(_QWORD *)(a4 + 16);
  v10 = v9 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v9 + 16);
  v11 = (os_unfair_lock_s *)(v9 + ((*(unsigned int *)(*(_QWORD *)v9 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v11);
  sub_23657FBD0(v10, (uint64_t)v8);
  os_unfair_lock_unlock(v11);
  swift_release();
  sub_2365B09F8();
  v12 = *((_QWORD *)v8 + 3);
  v13 = *((_DWORD *)v8 + 8);
  v14 = *((_WORD *)v8 + 18);
  v26 = *(_OWORD *)(v8 + 8);
  *(_QWORD *)&v27 = v12;
  WORD6(v27) = v14;
  DWORD2(v27) = v13;
  SetupModel.RemoteRole.hash(into:)();
  v15 = v8[88];
  switch(v15)
  {
    case -6:
    case -5:
    case -4:
    case -3:
    case -2:
    case -1:
      sub_2365B09F8();
      break;
    default:
      v17 = *((_QWORD *)v8 + 9);
      v16 = *((_QWORD *)v8 + 10);
      v25 = *(_OWORD *)(v8 + 56);
      v24 = *(_OWORD *)(v8 + 40);
      sub_2365B09F8();
      v26 = v24;
      v27 = v25;
      *(_QWORD *)&v28 = v17;
      *((_QWORD *)&v28 + 1) = v16;
      LOBYTE(v29) = v15;
      SetupError.hash(into:)();
      break;
  }
  v18 = *((_OWORD *)v8 + 15);
  v34 = *((_OWORD *)v8 + 14);
  v35 = v18;
  v36 = *((_OWORD *)v8 + 16);
  v19 = *((_OWORD *)v8 + 11);
  v30 = *((_OWORD *)v8 + 10);
  v31 = v19;
  v20 = *((_OWORD *)v8 + 13);
  v32 = *((_OWORD *)v8 + 12);
  v33 = v20;
  v21 = *((_OWORD *)v8 + 7);
  v26 = *((_OWORD *)v8 + 6);
  v27 = v21;
  v22 = *((_OWORD *)v8 + 9);
  v28 = *((_OWORD *)v8 + 8);
  v29 = v22;
  DiscoveryModel.hash(into:)(a1);
  AuthenticationModel.hash(into:)();
  SignInModel.hash(into:)((uint64_t)a1);
  return sub_236465A18((uint64_t)v8, type metadata accessor for SetupModel.ModelData);
}

uint64_t sub_2365A28C4(uint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  uint64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t v35;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v32 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(result + 56);
  v33 = (unint64_t)(v4 + 63) >> 6;
  v35 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      v7 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v34 = v3;
      v8 = v7 | (v3 << 6);
      goto LABEL_25;
    }
    v9 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
    if (v9 >= v33)
      return 1;
    v10 = *(_QWORD *)(v32 + 8 * v9);
    v11 = v3 + 1;
    if (!v10)
    {
      v11 = v3 + 2;
      if (v3 + 2 >= v33)
        return 1;
      v10 = *(_QWORD *)(v32 + 8 * v11);
      if (!v10)
      {
        v11 = v3 + 3;
        if (v3 + 3 >= v33)
          return 1;
        v10 = *(_QWORD *)(v32 + 8 * v11);
        if (!v10)
          break;
      }
    }
LABEL_24:
    v6 = (v10 - 1) & v10;
    v34 = v11;
    v8 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_25:
    v13 = result;
    v14 = *(void **)(*(_QWORD *)(result + 48) + 8 * v8);
    sub_2365B005C();
    sub_2365B09E0();
    v15 = v14;
    sub_2365B008C();
    v16 = sub_2365B0A34();
    swift_bridgeObjectRelease();
    v17 = -1 << *(_BYTE *)(a2 + 32);
    v18 = v16 & ~v17;
    if (((*(_QWORD *)(v35 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      goto LABEL_40;
    v19 = sub_2365B005C();
    v21 = v20;
    if (v19 == sub_2365B005C() && v21 == v22)
    {
LABEL_7:
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v24 = sub_2365B08CC();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v24 & 1) == 0)
      {
        v25 = ~v17;
        while (1)
        {
          v18 = (v18 + 1) & v25;
          if (((*(_QWORD *)(v35 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
            break;
          v26 = sub_2365B005C();
          v28 = v27;
          if (v26 == sub_2365B005C() && v28 == v29)
            goto LABEL_7;
          v31 = sub_2365B08CC();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v31 & 1) != 0)
            goto LABEL_8;
        }
LABEL_40:

        return 0;
      }
    }
LABEL_8:

    result = v13;
    v3 = v34;
  }
  v12 = v3 + 4;
  if (v3 + 4 >= v33)
    return 1;
  v10 = *(_QWORD *)(v32 + 8 * v12);
  if (v10)
  {
    v11 = v3 + 4;
    goto LABEL_24;
  }
  while (1)
  {
    v11 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v11 >= v33)
      return 1;
    v10 = *(_QWORD *)(v32 + 8 * v11);
    ++v12;
    if (v10)
      goto LABEL_24;
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_2365A2BD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  char v25;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char v35[80];

  if (a1 == a2)
    return 1;
  v2 = a2;
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    v3 = 0;
    v4 = a1 + 56;
    v5 = 1 << *(_BYTE *)(a1 + 32);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(a1 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v34 = a2 + 56;
    v28 = a1 + 56;
    v29 = a1;
    v27 = v8;
    if (v7)
      goto LABEL_7;
LABEL_8:
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_53;
    }
    if (v11 < v8)
    {
      v12 = *(_QWORD *)(v4 + 8 * v11);
      ++v3;
      if (v12)
        goto LABEL_21;
      v3 = v11 + 1;
      if (v11 + 1 < v8)
      {
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (v12)
          goto LABEL_21;
        v3 = v11 + 2;
        if (v11 + 2 < v8)
        {
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (v12)
            goto LABEL_21;
          v13 = v11 + 3;
          if (v13 < v8)
          {
            v12 = *(_QWORD *)(v4 + 8 * v13);
            if (v12)
            {
              v3 = v13;
LABEL_21:
              v7 = (v12 - 1) & v12;
              v10 = __clz(__rbit64(v12)) + (v3 << 6);
              while (1)
              {
                v14 = *(_QWORD *)(a1 + 48) + 96 * v10;
                v15 = *(_QWORD *)v14;
                v16 = *(_QWORD *)(v14 + 8);
                v17 = *(_QWORD *)(v14 + 80);
                v32 = *(unsigned __int8 *)(v14 + 88);
                sub_2365B09E0();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                sub_236487E58(v17);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                sub_2365B008C();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v30 = v3;
                switch(v17)
                {
                  case 0uLL:
                  case 1uLL:
                  case 2uLL:
                  case 3uLL:
                    sub_2365B09F8();
                    break;
                  default:
                    sub_2365B09F8();
                    swift_bridgeObjectRetain();
                    sub_2364830F0((uint64_t)v35, v17);
                    sub_236487E68(v17);
                    break;
                }
                sub_2365B0A04();
                v18 = sub_2365B0A34();
                v19 = -1 << *(_BYTE *)(v2 + 32);
                v20 = v18 & ~v19;
                if (((*(_QWORD *)(v34 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
                  break;
                v33 = ~v19;
                while (2)
                {
                  v22 = *(_QWORD *)(v2 + 48) + 96 * v20;
                  v21 = *(_QWORD *)(v22 + 80);
                  v23 = *(unsigned __int8 *)(v22 + 88);
                  v24 = *(_QWORD *)v22 == v15 && *(_QWORD *)(v22 + 8) == v16;
                  if (!v24 && (sub_2365B08CC() & 1) == 0)
                    goto LABEL_30;
                  switch(v21)
                  {
                    case 0uLL:
                      if (v17)
                        goto LABEL_28;
                      goto LABEL_45;
                    case 1uLL:
                      if (v17 == 1)
                        goto LABEL_45;
                      goto LABEL_28;
                    case 2uLL:
                      if (v17 == 2)
                        goto LABEL_45;
                      goto LABEL_28;
                    case 3uLL:
                      if (v17 != 3)
                        goto LABEL_28;
LABEL_45:
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      sub_236487E58(v21);
                      sub_236487E68(v21);
                      sub_236487E68(v21);
                      goto LABEL_46;
                    default:
                      if (v17 < 4)
                      {
LABEL_28:
                        sub_236487E58(v17);
                        sub_236487E58(v21);
                        sub_236487E68(v21);
                        v21 = v17;
LABEL_29:
                        sub_236487E68(v21);
LABEL_30:
                        v20 = (v20 + 1) & v33;
                        if (((*(_QWORD *)(v34 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
                          goto LABEL_50;
                        continue;
                      }
                      sub_236487E58(v17);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      sub_236487E58(v21);
                      sub_236487E58(v21);
                      v25 = sub_2365A28C4(v21, v17);
                      sub_236487E68(v21);
                      sub_236487E68(v17);
                      if ((v25 & 1) == 0)
                      {
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        v2 = a2;
                        goto LABEL_29;
                      }
LABEL_46:
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      sub_236487E68(v21);
                      v2 = a2;
                      if (v23 != v32)
                        goto LABEL_30;
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      sub_236487E68(v17);
                      v4 = v28;
                      a1 = v29;
                      v8 = v27;
                      v3 = v30;
                      if (!v7)
                        goto LABEL_8;
LABEL_7:
                      v9 = __clz(__rbit64(v7));
                      v7 &= v7 - 1;
                      v10 = v9 | (v3 << 6);
                      break;
                  }
                  break;
                }
              }
LABEL_50:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_236487E68(v17);
              return 0;
            }
            while (1)
            {
              v3 = v13 + 1;
              if (__OFADD__(v13, 1))
                break;
              if (v3 >= v8)
                return 1;
              v12 = *(_QWORD *)(v4 + 8 * v3);
              ++v13;
              if (v12)
                goto LABEL_21;
            }
LABEL_53:
            __break(1u);
            JUMPOUT(0x2365A3144);
          }
        }
      }
    }
    return 1;
  }
  return 0;
}

uint64_t sub_2365A3164(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t (*v18)(uint64_t);
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD v26[7];
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;

  v4 = type metadata accessor for IdMSAccount();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)v26 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)v26 - v12;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    v14 = 1 << *(_BYTE *)(a1 + 32);
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v16 = v15 & *(_QWORD *)(a1 + 56);
    v17 = (unint64_t)(v14 + 63) >> 6;
    v18 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCCC10];
    v31 = a2 + 56;
    v34 = a2;
    v26[6] = a1;
    v33 = v4;
    v26[5] = v11;
    v32 = v10;
    v26[4] = v13;
    v26[3] = a1 + 56;
    v26[2] = v17;
    v30 = v7;
    if (v16)
    {
      v19 = __clz(__rbit64(v16));
      v27 = (v16 - 1) & v16;
      v28 = 0;
      goto LABEL_21;
    }
    if ((unint64_t)(v14 + 63) >> 6 > 1)
    {
      v20 = *(_QWORD *)(a1 + 64);
      v21 = 1;
      if (v20)
        goto LABEL_20;
      v21 = 2;
      if ((unint64_t)(v14 + 63) >> 6 > 2)
      {
        v20 = *(_QWORD *)(a1 + 72);
        if (v20)
          goto LABEL_20;
        v21 = 3;
        if ((unint64_t)(v14 + 63) >> 6 > 3)
        {
          v20 = *(_QWORD *)(a1 + 80);
          if (!v20)
          {
            v22 = 4;
            if (v17 > 4)
            {
              v20 = *(_QWORD *)(a1 + 88);
              if (v20)
              {
                v21 = 4;
                goto LABEL_20;
              }
              while (1)
              {
                v21 = v22 + 1;
                if (__OFADD__(v22, 1))
                {
                  __break(1u);
                  JUMPOUT(0x2365A4404);
                }
                if (v21 >= v17)
                  break;
                v20 = *(_QWORD *)(a1 + 56 + 8 * v21);
                ++v22;
                if (v20)
                  goto LABEL_20;
              }
            }
            return 1;
          }
LABEL_20:
          v27 = (v20 - 1) & v20;
          v28 = v21;
          v19 = __clz(__rbit64(v20)) + (v21 << 6);
LABEL_21:
          v23 = *(_QWORD *)(a1 + 48);
          v35 = *(_QWORD *)(v11 + 72);
          sub_236487DD0(v23 + v35 * v19, (uint64_t)v13);
          sub_236487E14((uint64_t)v13, (uint64_t)v10);
          sub_2365B09E0();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_2365B008C();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v24 = &v10[*(int *)(v4 + 20)];
          sub_2365AF8D0();
          sub_23644F0B8(&qword_2563E4D80, v18, MEMORY[0x24BDCCC28]);
          v36 = v24;
          sub_2365AFFD8();
          v29 = &v10[*(int *)(v4 + 24)];
          __asm { BR              X9 }
        }
      }
    }
    return 1;
  }
  return 0;
}

void static SetupError.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_2365A4484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  if (v7)
  {
    v38 = v11;
    *(_QWORD *)(v15 - 240) = v13;
    v39 = v13;
    v40 = v9;
    v42 = *(_QWORD *)(v15 - 216);
    v41 = *(_QWORD *)(v15 - 208);
    v43 = *(_QWORD *)(v15 - 224);
    v44 = a5;
    v56 = v11;
    *(_QWORD *)(v15 - 232) = v9;
    v45 = v5;
    v46 = v6;
    v47 = v7;
    sub_23645DC04(v38, v39, v40, v41, v5, v10, v7);
    sub_23645DC04(v14, v12, v8, v42, v44, v43, v46);
    sub_23645DCB0(v14, v12, v8, v42, v44, v43, v46);
    v31 = v56;
    v32 = *(_QWORD *)(v15 - 240);
    v33 = *(_QWORD *)(v15 - 232);
    v34 = *(_QWORD *)(v15 - 208);
    v35 = v45;
    v36 = v10;
    v37 = v47;
    goto LABEL_11;
  }
  if (v14 != v11 || v12 != v13)
  {
    v16 = v9;
    v17 = v5;
    v54 = v12;
    v18 = v14;
    v19 = a5;
    v20 = sub_2365B08CC();
    a5 = v19;
    v14 = v18;
    v12 = v54;
    v5 = v17;
    v9 = v16;
    if ((v20 & 1) == 0)
      goto LABEL_9;
  }
  if (v8 != v9)
  {
LABEL_9:
    v24 = v9;
    v25 = *(_QWORD *)(v15 - 208);
    v26 = v5;
    v27 = a5;
    *(_QWORD *)(v15 - 232) = v9;
    v28 = v10;
    sub_23645DC04(v11, v13, v24, v25, v5, v10, 0);
    v30 = *(_QWORD *)(v15 - 224);
    v29 = *(_QWORD *)(v15 - 216);
    sub_23645DC04(v14, v12, v8, v29, v27, v30, 0);
    sub_23645DCB0(v14, v12, v8, v29, v27, v30, 0);
    v31 = v11;
    v32 = v13;
    v33 = *(_QWORD *)(v15 - 232);
    v34 = *(_QWORD *)(v15 - 208);
    v35 = v26;
    v36 = v28;
    v37 = 0;
LABEL_11:
    sub_23645DCB0(v31, v32, v33, v34, v35, v36, v37);
    v23 = 0;
    return v23 & 1;
  }
  if (*(_QWORD *)(v15 - 216) == *(_QWORD *)(v15 - 208) && a5 == v5)
  {
    v21 = v14;
    v22 = a5;
    v23 = 1;
  }
  else
  {
    v21 = v14;
    v22 = a5;
    v49 = v5;
    v50 = sub_2365B08CC();
    v5 = v49;
    v23 = v50;
  }
  v51 = v5;
  v55 = v10;
  sub_23645DC04(v11, v13, v8, *(_QWORD *)(v15 - 208), v5, v10, 0);
  v53 = *(_QWORD *)(v15 - 224);
  v52 = *(_QWORD *)(v15 - 216);
  sub_23645DC04(v21, v12, v8, v52, v22, v53, 0);
  sub_23645DCB0(v21, v12, v8, v52, v22, v53, 0);
  sub_23645DCB0(v11, v13, v8, *(_QWORD *)(v15 - 208), v51, v55, 0);
  return v23 & 1;
}

void sub_2365A4DD8(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  char v19;
  os_log_type_t type;
  _QWORD *v21;
  uint64_t v22;

  v3 = *(_QWORD *)v1;
  v4 = *(unsigned __int8 *)(v1 + 48);
  if (v4 == 1)
  {
    *(_QWORD *)a1 = v3;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_BYTE *)(a1 + 40) = 2;
    swift_bridgeObjectRetain();
    return;
  }
  v6 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v8 = *(_QWORD *)(v1 + 24);
  v7 = *(_QWORD *)(v1 + 32);
  v9 = *(_QWORD *)(v1 + 40);
  if (v4 != 4)
    goto LABEL_14;
  v10 = v5 | v6 | v8 | v7 | v9;
  if (v3 == 1 && v10 == 0)
  {
    v13 = 1;
    goto LABEL_23;
  }
  if (v3 == 2 && v10 == 0)
  {
    v13 = 2;
    goto LABEL_23;
  }
  if (v3 != 4 || v10)
  {
LABEL_14:
    if (qword_2542A79D8 != -1)
      swift_once();
    v14 = sub_2365AFC00();
    __swift_project_value_buffer(v14, (uint64_t)qword_2542A79C0);
    sub_23645DC04(v3, v6, v5, v8, v7, v9, v4);
    sub_23645DC04(v3, v6, v5, v8, v7, v9, v4);
    v15 = sub_2365AFBE8();
    v16 = sub_2365B038C();
    if (os_log_type_enabled(v15, v16))
    {
      type = v16;
      v17 = (uint8_t *)swift_slowAlloc();
      v21 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v17 = 138412290;
      sub_2364858F4();
      swift_allocError();
      *(_QWORD *)v18 = v3;
      *(_QWORD *)(v18 + 8) = v6;
      *(_QWORD *)(v18 + 16) = v5;
      *(_QWORD *)(v18 + 24) = v8;
      *(_QWORD *)(v18 + 32) = v7;
      *(_QWORD *)(v18 + 40) = v9;
      *(_BYTE *)(v18 + 48) = v4;
      sub_23645DC04(v3, v6, v5, v8, v7, v9, v4);
      v22 = _swift_stdlib_bridgeErrorToNSError();
      sub_2365B04A0();
      *v21 = v22;
      sub_23645DCB0(v3, v6, v5, v8, v7, v9, v4);
      sub_23645DCB0(v3, v6, v5, v8, v7, v9, v4);
      _os_log_impl(&dword_23644B000, v15, type, "Could not convert SetupError: %@ into RepairError", v17, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9960);
      swift_arrayDestroy();
      MEMORY[0x23B7F5254](v21, -1, -1);
      MEMORY[0x23B7F5254](v17, -1, -1);
    }
    else
    {
      sub_23645DCB0(v3, v6, v5, v8, v7, v9, v4);
      sub_23645DCB0(v3, v6, v5, v8, v7, v9, v4);
    }

    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    v19 = -1;
    goto LABEL_24;
  }
  v13 = 3;
LABEL_23:
  *(_QWORD *)a1 = v13;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v19 = 4;
LABEL_24:
  *(_BYTE *)(a1 + 40) = v19;
}

void MachSetupMessage.hash(into:)()
{
  uint64_t v1;

  v1 = type metadata accessor for SetupModel.ModelData(0);
  MEMORY[0x24BDAC7A8](v1);
  __asm { BR              X10 }
}

uint64_t sub_2365A53B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  *(_QWORD *)(v12 - 320) = v3;
  *(_QWORD *)(v12 - 312) = v2;
  *(_QWORD *)(v12 - 304) = v1;
  *(_QWORD *)(v12 - 280) = v11;
  *(_QWORD *)(v12 - 296) = v0;
  *(_QWORD *)(v12 - 288) = v4;
  *(_QWORD *)(v12 - 336) = v8;
  *(_QWORD *)(v12 - 328) = v7;
  sub_2365B09F8();
  swift_getKeyPath();
  *(_QWORD *)(v12 - 272) = v10;
  sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  swift_retain();
  sub_2365AFA44();
  swift_release();
  v13 = *(_QWORD *)(v10 + 16);
  v14 = v13 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v13 + 16);
  v15 = (os_unfair_lock_s *)(v13 + ((*(unsigned int *)(*(_QWORD *)v13 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v15);
  sub_23657FBD0(v14, v5);
  os_unfair_lock_unlock(v15);
  swift_release();
  sub_2365B09F8();
  v16 = *(_QWORD *)(v5 + 24);
  v17 = *(_DWORD *)(v5 + 32);
  v18 = *(_WORD *)(v5 + 36);
  *(_OWORD *)(v12 - 272) = *(_OWORD *)(v5 + 8);
  *(_QWORD *)(v12 - 256) = v16;
  *(_WORD *)(v12 - 244) = v18;
  *(_DWORD *)(v12 - 248) = v17;
  SetupModel.RemoteRole.hash(into:)();
  v19 = *(_BYTE *)(v5 + 88);
  switch(v19)
  {
    case -6:
    case -5:
    case -4:
    case -3:
    case -2:
    case -1:
      sub_2365B09F8();
      break;
    default:
      v21 = *(_QWORD *)(v5 + 72);
      v20 = *(_QWORD *)(v5 + 80);
      *(_OWORD *)(v12 - 352) = *(_OWORD *)(v5 + 56);
      *(_OWORD *)(v12 - 368) = *(_OWORD *)(v5 + 40);
      sub_2365B09F8();
      *(_OWORD *)(v12 - 272) = *(_OWORD *)(v12 - 368);
      *(_OWORD *)(v12 - 256) = *(_OWORD *)(v12 - 352);
      *(_QWORD *)(v12 - 240) = v21;
      *(_QWORD *)(v12 - 232) = v20;
      *(_BYTE *)(v12 - 224) = v19;
      SetupError.hash(into:)();
      break;
  }
  v22 = *(_QWORD *)(v12 - 328);
  v23 = *(_QWORD *)(v12 - 336);
  v24 = *(_OWORD *)(v5 + 240);
  *(_OWORD *)(v12 - 144) = *(_OWORD *)(v5 + 224);
  *(_OWORD *)(v12 - 128) = v24;
  *(_OWORD *)(v12 - 112) = *(_OWORD *)(v5 + 256);
  v25 = *(_OWORD *)(v5 + 176);
  *(_OWORD *)(v12 - 208) = *(_OWORD *)(v5 + 160);
  *(_OWORD *)(v12 - 192) = v25;
  v26 = *(_OWORD *)(v5 + 208);
  *(_OWORD *)(v12 - 176) = *(_OWORD *)(v5 + 192);
  *(_OWORD *)(v12 - 160) = v26;
  v27 = *(_OWORD *)(v5 + 112);
  *(_OWORD *)(v12 - 272) = *(_OWORD *)(v5 + 96);
  v28 = *(_OWORD *)(v5 + 128);
  *(_OWORD *)(v12 - 224) = *(_OWORD *)(v5 + 144);
  *(_OWORD *)(v12 - 256) = v27;
  *(_OWORD *)(v12 - 240) = v28;
  DiscoveryModel.hash(into:)(v6);
  AuthenticationModel.hash(into:)();
  SignInModel.hash(into:)((uint64_t)v6);
  sub_236465A18(v5, type metadata accessor for SetupModel.ModelData);
  return sub_23650C2A8(v10, *(_QWORD *)(v12 - 304), v9, *(_QWORD *)(v12 - 296), *(_QWORD *)(v12 - 288), v23, v22, *(_QWORD *)(v12 - 280), *(_QWORD *)(v12 - 312), *(_QWORD *)(v12 - 320), 0);
}

uint64_t sub_2365A5870(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2365A58A0 + 4 * byte_2365C9AA4[a1]))(0x7075746573, 0xE500000000000000);
}

uint64_t sub_2365A58A0()
{
  return 0x74726F706572;
}

unint64_t sub_2365A58B4()
{
  return 0xD000000000000016;
}

unint64_t sub_2365A58D0()
{
  return 0xD000000000000018;
}

uint64_t sub_2365A58F0()
{
  return 0x74706965636572;
}

uint64_t sub_2365A5908()
{
  return 0x6572756C696166;
}

uint64_t sub_2365A5920()
{
  unsigned __int8 *v0;

  return sub_2365A5870(*v0);
}

uint64_t sub_2365A5928@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2365AC1B4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2365A594C()
{
  sub_2365AA248();
  return sub_2365B0AD0();
}

uint64_t sub_2365A5974()
{
  sub_2365AA248();
  return sub_2365B0ADC();
}

uint64_t sub_2365A599C()
{
  sub_2365AA314();
  return sub_2365B0AD0();
}

uint64_t sub_2365A59C4()
{
  sub_2365AA314();
  return sub_2365B0ADC();
}

uint64_t sub_2365A59EC()
{
  sub_2365AA3D4();
  return sub_2365B0AD0();
}

uint64_t sub_2365A5A14()
{
  sub_2365AA3D4();
  return sub_2365B0ADC();
}

uint64_t sub_2365A5A3C()
{
  sub_2365AA28C();
  return sub_2365B0AD0();
}

uint64_t sub_2365A5A64()
{
  sub_2365AA28C();
  return sub_2365B0ADC();
}

uint64_t sub_2365A5A8C()
{
  sub_2365AA2D0();
  return sub_2365B0AD0();
}

uint64_t sub_2365A5AB4()
{
  sub_2365AA2D0();
  return sub_2365B0ADC();
}

uint64_t sub_2365A5ADC()
{
  sub_2365AA494();
  return sub_2365B0AD0();
}

uint64_t sub_2365A5B04()
{
  sub_2365AA494();
  return sub_2365B0ADC();
}

uint64_t sub_2365A5B2C()
{
  sub_2365AA4D8();
  return sub_2365B0AD0();
}

uint64_t sub_2365A5B54()
{
  sub_2365AA4D8();
  return sub_2365B0ADC();
}

void MachSetupMessage.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;

  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDA08);
  v29 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v28 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDA10);
  v22 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v20 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDA18);
  v26 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v25 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDA20);
  v21 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v19 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDA28);
  v17 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDA30);
  MEMORY[0x24BDAC7A8](v7);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDA38);
  v34 = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = *v1;
  v10 = v1[2];
  v35 = v1[1];
  v36 = v10;
  v11 = v1[4];
  v37 = v1[3];
  v38 = v11;
  v12 = v1[6];
  v39 = v1[5];
  v40 = v12;
  v33 = v1[7];
  v32 = v1[8];
  v31 = v1[9];
  v13 = *((unsigned __int8 *)v1 + 80);
  v14 = a1[3];
  v15 = a1;
  v16 = v9;
  __swift_project_boxed_opaque_existential_1(v15, v14);
  sub_2365AA248();
  v43 = v16;
  sub_2365B0AAC();
  __asm { BR              X9 }
}

uint64_t sub_2365A5E50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v3 - 168) = 0;
  sub_2365AA4D8();
  v4 = *(_QWORD *)(v3 - 184);
  swift_retain();
  v5 = *(_QWORD *)(v3 - 176);
  v6 = *(_QWORD *)(v3 - 72);
  sub_2365B07B8();
  *(_QWORD *)(v3 - 168) = v4;
  type metadata accessor for SetupModel(0);
  sub_23644F0B8(&qword_2563EC418, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
  sub_2365B0824();
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 248) + 8))(v6, v5);
  return sub_23650C2A8(v4, *(_QWORD *)(v3 - 240), *(_QWORD *)(v3 - 232), *(_QWORD *)(v3 - 224), *(_QWORD *)(v3 - 216), *(_QWORD *)(v3 - 208), *(_QWORD *)(v3 - 200), *(_QWORD *)(v3 - 256), *(_QWORD *)(v3 - 264), *(_QWORD *)(v3 - 272), 0);
}

uint64_t MachSetupMessage.hashValue.getter()
{
  sub_2365B09E0();
  MachSetupMessage.hash(into:)();
  return sub_2365B0A34();
}

uint64_t MachSetupMessage.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD v26[5];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;

  v41 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDA88);
  v39 = *(_QWORD *)(v3 - 8);
  v40 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v38 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDA90);
  v29 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v36 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDA98);
  v7 = *(_QWORD *)(v6 - 8);
  v32 = v6;
  v33 = v7;
  MEMORY[0x24BDAC7A8](v6);
  v37 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDAA0);
  v28 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v35 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDAA8);
  v26[4] = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v34 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDAB0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDAB8);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a1[3];
  v42 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v19);
  sub_2365AA248();
  v20 = v43;
  sub_2365B0A7C();
  if (!v20)
  {
    v26[2] = v14;
    v26[0] = v12;
    v26[1] = v11;
    v26[3] = 0;
    v43 = v16;
    v21 = sub_2365B07A0();
    if (*(_QWORD *)(v21 + 16) == 1)
      __asm { BR              X10 }
    v22 = sub_2365B05B4();
    swift_allocError();
    v24 = v23;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E47A8);
    *v24 = &type metadata for MachSetupMessage;
    sub_2365B0704();
    sub_2365B059C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v24, *MEMORY[0x24BEE26D0], v22);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v18, v15);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
}

void sub_2365A6B38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = v4;
  *(_BYTE *)(v5 - 168) = 5;
  sub_2365AA28C();
  v7 = v0;
  v8 = *(_QWORD *)(v5 - 312);
  sub_2365B06F8();
  if (v8)
  {
    swift_bridgeObjectRelease();
    JUMPOUT(0x2365A6B08);
  }
  sub_23645EA10();
  sub_2365B0770();
  v9 = *(_QWORD *)(v5 - 72);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v1);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v3, v7);
  JUMPOUT(0x2365A6D60);
}

uint64_t sub_2365A6D78@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return MachSetupMessage.init(from:)(a1, a2);
}

void sub_2365A6D8C(_QWORD *a1)
{
  MachSetupMessage.encode(to:)(a1);
}

uint64_t sub_2365A6DA4()
{
  sub_2365B09E0();
  MachSetupMessage.hash(into:)();
  return sub_2365B0A34();
}

uint64_t sub_2365A6E08()
{
  sub_2365B09E0();
  MachSetupMessage.hash(into:)();
  return sub_2365B0A34();
}

void SetupError.hash(into:)()
{
  __asm { BR              X10 }
}

uint64_t sub_2365A6EB0()
{
  sub_2365B09F8();
  sub_2365B008C();
  sub_2365B09F8();
  return sub_2365B008C();
}

uint64_t sub_2365A6F00()
{
  uint64_t v0;
  uint64_t v1;

  sub_2365B09F8();
  return sub_2364830F0(v0, v1);
}

uint64_t sub_2365A6F34()
{
  uint64_t v0;
  uint64_t v1;

  sub_2365B09F8();
  swift_bridgeObjectRetain();
  sub_2365B008C();
  swift_bridgeObjectRelease();
  if (v1)
  {
    sub_2365B0A04();
    swift_bridgeObjectRetain();
    sub_2365B008C();
    swift_bridgeObjectRelease();
    if (v0)
    {
LABEL_3:
      sub_2365B0A04();
      swift_bridgeObjectRetain();
      sub_2365B008C();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_2365B0A04();
    if (v0)
      goto LABEL_3;
  }
  return sub_2365B0A04();
}

uint64_t sub_2365A71C4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2365A71F8 + 4 * byte_2365C9AC7[a1]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_2365A71F8()
{
  return 0x656C6C65636E6163;
}

uint64_t sub_2365A7214()
{
  return 0x636E614372657375;
}

uint64_t sub_2365A7238()
{
  return 0x70696B5372657375;
}

uint64_t sub_2365A7258()
{
  return 0x636972656E6567;
}

unint64_t sub_2365A726C()
{
  return 0xD000000000000017;
}

unint64_t sub_2365A72A4()
{
  return 0xD000000000000013;
}

uint64_t sub_2365A72C0()
{
  return 0x64657473656ELL;
}

uint64_t sub_2365A72D4()
{
  sub_2365AA6E0();
  return sub_2365B0AD0();
}

uint64_t sub_2365A72FC()
{
  sub_2365AA6E0();
  return sub_2365B0ADC();
}

uint64_t sub_2365A7324()
{
  sub_2365AA834();
  return sub_2365B0AD0();
}

uint64_t sub_2365A734C()
{
  sub_2365AA834();
  return sub_2365B0ADC();
}

uint64_t sub_2365A7374()
{
  unsigned __int8 *v0;

  return sub_2365A71C4(*v0);
}

uint64_t sub_2365A737C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2365AC418(a1, a2);
  *a3 = result;
  return result;
}

void sub_2365A73A0(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_2365A73AC()
{
  sub_2365AA614();
  return sub_2365B0AD0();
}

uint64_t sub_2365A73D4()
{
  sub_2365AA614();
  return sub_2365B0ADC();
}

uint64_t sub_2365A73FC()
{
  sub_2365AA69C();
  return sub_2365B0AD0();
}

uint64_t sub_2365A7424()
{
  sub_2365AA69C();
  return sub_2365B0ADC();
}

uint64_t sub_2365A744C()
{
  sub_2365AA768();
  return sub_2365B0AD0();
}

uint64_t sub_2365A7474()
{
  sub_2365AA768();
  return sub_2365B0ADC();
}

uint64_t sub_2365A749C()
{
  sub_2365AA724();
  return sub_2365B0AD0();
}

uint64_t sub_2365A74C4()
{
  sub_2365AA724();
  return sub_2365B0ADC();
}

uint64_t sub_2365A74EC()
{
  sub_2365AA658();
  return sub_2365B0AD0();
}

uint64_t sub_2365A7514()
{
  sub_2365AA658();
  return sub_2365B0ADC();
}

uint64_t sub_2365A753C()
{
  sub_2365AA878();
  return sub_2365B0AD0();
}

uint64_t sub_2365A7564()
{
  sub_2365AA878();
  return sub_2365B0ADC();
}

uint64_t sub_2365A758C()
{
  sub_2365AA7F0();
  return sub_2365B0AD0();
}

uint64_t sub_2365A75B4()
{
  sub_2365AA7F0();
  return sub_2365B0ADC();
}

uint64_t sub_2365A75DC()
{
  sub_2365AA7AC();
  return sub_2365B0AD0();
}

uint64_t sub_2365A7604()
{
  sub_2365AA7AC();
  return sub_2365B0ADC();
}

void SetupError.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;

  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDAD0);
  v29 = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v38 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDAD8);
  v31 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v36 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDAE0);
  v19 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v18 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDAE8);
  v30 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v32 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDAF0);
  v28 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v33 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDAF8);
  v16[1] = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v16[0] = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDB00);
  v22 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v21 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDB08);
  v25 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v24 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDB10);
  MEMORY[0x24BDAC7A8](v27);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDB18);
  v45 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v1 + 8);
  v43 = *(_QWORD *)(v1 + 16);
  v44 = v13;
  v14 = *(_QWORD *)(v1 + 24);
  v41 = *(_QWORD *)(v1 + 32);
  v42 = v14;
  v40 = *(_QWORD *)(v1 + 40);
  v15 = *(unsigned __int8 *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2365AA614();
  v46 = v12;
  sub_2365B0AAC();
  __asm { BR              X9 }
}

uint64_t sub_2365A79B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v0 - 144) = 4;
  sub_2365AA768();
  v1 = *(_QWORD *)(v0 - 272);
  v3 = *(_QWORD *)(v0 - 160);
  v2 = *(_QWORD *)(v0 - 152);
  sub_2365B07B8();
  *(_BYTE *)(v0 - 144) = 0;
  v4 = *(_QWORD *)(v0 - 256);
  v5 = *(_QWORD *)(v0 - 168);
  sub_2365B0800();
  if (!v5)
  {
    *(_BYTE *)(v0 - 144) = 1;
    sub_2365B0818();
    *(_BYTE *)(v0 - 144) = 2;
    sub_2365B0800();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 312) + 8))(v1, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 176) + 8))(v3, v2);
}

uint64_t SetupError.hashValue.getter()
{
  sub_2365B09E0();
  SetupError.hash(into:)();
  return sub_2365B0A34();
}

uint64_t SetupError.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD v25[12];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;

  v37 = a2;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDB70);
  v25[8] = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v42 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDB78);
  v25[7] = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v41 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDB80);
  v29 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v35 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDB88);
  v25[5] = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v36 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDB90);
  v25[6] = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v34 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDB98);
  v25[11] = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v40 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDBA0);
  v25[10] = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v39 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDBA8);
  v25[9] = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDBB0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563EDBB8);
  v14 = *(_QWORD *)(v43 - 8);
  MEMORY[0x24BDAC7A8](v43);
  v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[3];
  v44 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v17);
  sub_2365AA614();
  v18 = v45;
  sub_2365B0A7C();
  if (!v18)
  {
    v25[3] = v13;
    v25[1] = v11;
    v25[2] = v10;
    v25[4] = 0;
    v45 = v14;
    v19 = sub_2365B07A0();
    if (*(_QWORD *)(v19 + 16) == 1)
      __asm { BR              X10 }
    v20 = sub_2365B05B4();
    swift_allocError();
    v22 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2563E47A8);
    *v22 = &type metadata for SetupError;
    v23 = v43;
    sub_2365B0704();
    sub_2365B059C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, *MEMORY[0x24BEE26D0], v20);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v16, v23);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
}

void sub_2365A88F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v3 - 136) = 8;
  sub_2365AA658();
  v4 = *(_QWORD *)(v3 - 352);
  sub_2365B06F8();
  if (v4)
    JUMPOUT(0x2365A8944);
  swift_allocObject();
  *(_BYTE *)(v3 - 136) = 0;
  sub_23645EA10();
  v5 = *(_QWORD *)(v3 - 232);
  sub_2365B0770();
  v6 = *(_QWORD *)(v3 - 72);
  *(_BYTE *)(v3 - 136) = 1;
  sub_2365B0770();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 320) + 8))(v1, v5);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2, v0);
  JUMPOUT(0x2365A89B0);
}

uint64_t sub_2365A8DAC()
{
  sub_2365AC7E8();
  return sub_2365B0980();
}

uint64_t sub_2365A8DD4()
{
  sub_2365AC7E8();
  return sub_2365B0974();
}

uint64_t sub_2365A8DFC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SetupError.init(from:)(a1, a2);
}

void sub_2365A8E10(_QWORD *a1)
{
  SetupError.encode(to:)(a1);
}

uint64_t sub_2365A8E28()
{
  sub_2365B09E0();
  SetupError.hash(into:)();
  return sub_2365B0A34();
}

uint64_t sub_2365A8E84()
{
  sub_2365B09E0();
  SetupError.hash(into:)();
  return sub_2365B0A34();
}

uint64_t static SetupError.errorDomain.getter()
{
  uint64_t v0;

  swift_beginAccess();
  v0 = qword_2563ED9F8;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static SetupError.errorDomain.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  qword_2563ED9F8 = a1;
  qword_2563EDA00 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*static SetupError.errorDomain.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t SetupError.errorCode.getter()
{
  uint64_t v0;

  return ((uint64_t (*)(uint64_t))((char *)sub_2365A8FE4 + 4 * byte_2365C9AE8[*(unsigned __int8 *)(v0 + 48)]))(1004);
}

uint64_t sub_2365A8FE4()
{
  return 1005;
}

uint64_t sub_2365A8FEC()
{
  return 1007;
}

uint64_t sub_2365A8FF4()
{
  return 1008;
}

uint64_t sub_2365A8FFC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v7;

  v2 = v1[3];
  v3 = v1[4] | v1[5];
  v4 = v1[2] | v1[1];
  if (!(v3 | a1 | v2 | v4))
    return 1000;
  v5 = v3 | v2 | v4;
  if (a1 == 1 && !v5)
    return 1001;
  if (a1 == 2 && !v5)
    return 1002;
  if (v5)
    v7 = 0;
  else
    v7 = a1 == 3;
  if (v7)
    return 1003;
  else
    return 1006;
}

unint64_t SetupError.errorUserInfo.getter()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5ED8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2365B6A20;
  *(_QWORD *)(inited + 32) = sub_2365B005C();
  *(_QWORD *)(inited + 40) = v1;
  SetupError.description.getter();
  *(_QWORD *)(inited + 72) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 56) = v3;
  return sub_236466978(inited);
}

void SetupError.description.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_2365A917C()
{
  sub_2365B0578();
  sub_2365B00B0();
  sub_2365B00B0();
  sub_2365B00B0();
  sub_2365B0860();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  sub_2365B00B0();
  sub_2365B00B0();
  return 0;
}

uint64_t sub_2365A935C()
{
  uint64_t v0;

  swift_beginAccess();
  v0 = qword_2563ED9F8;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_2365A93AC()
{
  uint64_t v0;

  return ((uint64_t (*)(uint64_t))((char *)sub_2365A93D0 + 4 * byte_2365C9AF2[*(unsigned __int8 *)(v0 + 48)]))(1004);
}

uint64_t sub_2365A93D0()
{
  return 1005;
}

uint64_t sub_2365A93D8()
{
  return 1007;
}

uint64_t sub_2365A93E0()
{
  return 1008;
}

uint64_t sub_2365A93E8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v7;

  v2 = v1[3];
  v3 = v1[4] | v1[5];
  v4 = v1[2] | v1[1];
  if (!(v3 | a1 | v2 | v4))
    return 1000;
  v5 = v3 | v2 | v4;
  if (a1 == 1 && !v5)
    return 1001;
  if (a1 == 2 && !v5)
    return 1002;
  if (v5)
    v7 = 0;
  else
    v7 = a1 == 3;
  if (v7)
    return 1003;
  else
    return 1006;
}

unint64_t sub_2365A945C()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E5ED8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2365B6A20;
  *(_QWORD *)(inited + 32) = sub_2365B005C();
  *(_QWORD *)(inited + 40) = v1;
  SetupError.description.getter();
  *(_QWORD *)(inited + 72) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 56) = v3;
  return sub_236466978(inited);
}

void _s12AppleIDSetup16MachSetupMessageO2eeoiySbAC_ACtFZ_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for SetupModel.ModelData(0);
  v3 = MEMORY[0x24BDAC7A8](v2);
  MEMORY[0x24BDAC7A8](v3);
  __asm { BR              X10 }
}

uint64_t sub_2365A961C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_unfair_lock_s *v31;
  uint64_t v32;
  uint64_t v33;
  os_unfair_lock_s *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (v14)
  {
    v36 = v12;
    v37 = v19;
    v38 = v10;
    v39 = v11;
    sub_23650C190(a1, a2, a3, a4, a5, a6, a7, v37, v8, v9, a8);
    sub_23650C190(v15, v16, v21, v36, v39, v38, *(_QWORD *)(v13 + 176), *(_QWORD *)(v13 + 184), v20, v22, v14);
    sub_2365AC82C(v13 + 360);
    v35 = 0;
  }
  else
  {
    *(_QWORD *)(v13 + 160) = a3;
    *(_QWORD *)(v13 + 168) = a1;
    *(_QWORD *)(v13 + 64) = a7;
    *(_QWORD *)(v13 + 144) = v11;
    *(_QWORD *)(v13 + 152) = a6;
    *(_QWORD *)(v13 + 96) = a4;
    *(_QWORD *)(v13 + 104) = a5;
    *(_QWORD *)(v13 + 112) = a2;
    *(_QWORD *)(v13 + 120) = v12;
    *(_QWORD *)(v13 + 80) = v9;
    *(_QWORD *)(v13 + 88) = v8;
    *(_QWORD *)(v13 + 128) = v10;
    *(_QWORD *)(v13 + 136) = v22;
    v23 = v12;
    KeyPath = swift_getKeyPath();
    v25 = *(_QWORD *)(v13 + 168);
    v26 = v25 + OBJC_IVAR____TtC12AppleIDSetup10SetupModel___observationRegistrar;
    *(_QWORD *)(v13 + 16) = KeyPath;
    *(_QWORD *)(v13 + 24) = v26;
    *(_QWORD *)(v13 + 280) = v25;
    *(_QWORD *)(v13 + 40) = v20;
    *(_QWORD *)(v13 + 48) = v21;
    *(_QWORD *)(v13 + 56) = v15;
    *(_QWORD *)(v13 + 72) = v16;
    sub_23650C190(v15, v16, v21, v23, *(_QWORD *)(v13 + 144), *(_QWORD *)(v13 + 128), *(_QWORD *)(v13 + 176), *(_QWORD *)(v13 + 184), v20, v22, 0);
    v27 = *(_QWORD *)(v13 + 152);
    v28 = *(_QWORD *)(v13 + 64);
    sub_23650C190(*(_QWORD *)(v13 + 168), *(_QWORD *)(v13 + 112), *(_QWORD *)(v13 + 160), *(_QWORD *)(v13 + 96), *(_QWORD *)(v13 + 104), v27, v28, v19, *(_QWORD *)(v13 + 88), *(_QWORD *)(v13 + 80), 0);
    sub_23650C190(*(_QWORD *)(v13 + 168), *(_QWORD *)(v13 + 112), *(_QWORD *)(v13 + 160), *(_QWORD *)(v13 + 96), *(_QWORD *)(v13 + 104), v27, v28, v19, *(_QWORD *)(v13 + 88), *(_QWORD *)(v13 + 80), 0);
    sub_23650C190(*(_QWORD *)(v13 + 56), *(_QWORD *)(v13 + 72), *(_QWORD *)(v13 + 48), *(_QWORD *)(v13 + 120), *(_QWORD *)(v13 + 144), *(_QWORD *)(v13 + 128), *(_QWORD *)(v13 + 176), *(_QWORD *)(v13 + 184), *(_QWORD *)(v13 + 40), *(_QWORD *)(v13 + 136), 0);
    *(_QWORD *)(v13 + 8) = sub_23644F0B8((unint64_t *)&qword_2563E60B0, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
    sub_2365AFA44();
    swift_release();
    *(_QWORD *)(v13 + 32) = v19;
    v29 = *(_QWORD *)(*(_QWORD *)(v13 + 168) + 16);
    v30 = v29 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v29 + 16);
    v31 = (os_unfair_lock_s *)(v29 + ((*(unsigned int *)(*(_QWORD *)v29 + 48) + 3) & 0x1FFFFFFFCLL));
    swift_retain();
    *(_QWORD *)(v13 + 24) = v31;
    os_unfair_lock_lock(v31);
    sub_23657FBD0(v30, (uint64_t)v18);
    *(_QWORD *)(v13 + 16) = 0;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 24));
    swift_release();
    swift_getKeyPath();
    *(_QWORD *)(v13 + 280) = v15;
    sub_2365AFA44();
    swift_release();
    v32 = *(_QWORD *)(v15 + 16);
    v33 = v32 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v32 + 16);
    v34 = (os_unfair_lock_s *)(v32 + ((*(unsigned int *)(*(_QWORD *)v32 + 48) + 3) & 0x1FFFFFFFCLL));
    swift_retain();
    os_unfair_lock_lock(v34);
    sub_236573588(v33, (uint64_t)v17);
    os_unfair_lock_unlock(v34);
    swift_release();
    v35 = sub_2365792EC(v18, v17);
    sub_236465A18((uint64_t)v17, type metadata accessor for SetupModel.ModelData);
    sub_236465A18((uint64_t)v18, type metadata accessor for SetupModel.ModelData);
    sub_23650C2A8(*(_QWORD *)(v13 + 56), v16, v21, *(_QWORD *)(v13 + 120), *(_QWORD *)(v13 + 144), *(_QWORD *)(v13 + 128), *(_QWORD *)(v13 + 176), *(_QWORD *)(v13 + 184), v20, *(_QWORD *)(v13 + 136), 0);
    sub_23650C2A8(*(_QWORD *)(v13 + 168), *(_QWORD *)(v13 + 112), *(_QWORD *)(v13 + 160), *(_QWORD *)(v13 + 96), *(_QWORD *)(v13 + 104), *(_QWORD *)(v13 + 152), *(_QWORD *)(v13 + 64), *(_QWORD *)(v13 + 32), *(_QWORD *)(v13 + 88), *(_QWORD *)(v13 + 80), 0);
    sub_2365AC82C(v13 + 360);
  }
  return v35 & 1;
}

unint64_t sub_2365AA248()
{
  unint64_t result;

  result = qword_2563EDA40;
  if (!qword_2563EDA40)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CAEFC, &type metadata for MachSetupMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDA40);
  }
  return result;
}

unint64_t sub_2365AA28C()
{
  unint64_t result;

  result = qword_2563EDA48;
  if (!qword_2563EDA48)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CAEAC, &type metadata for MachSetupMessage.FailureCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDA48);
  }
  return result;
}

unint64_t sub_2365AA2D0()
{
  unint64_t result;

  result = qword_2563EDA50;
  if (!qword_2563EDA50)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CAE5C, &type metadata for MachSetupMessage.ReceiptCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDA50);
  }
  return result;
}

unint64_t sub_2365AA314()
{
  unint64_t result;

  result = qword_2563EDA58;
  if (!qword_2563EDA58)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CAE0C, &type metadata for MachSetupMessage.CoordinatedModelResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDA58);
  }
  return result;
}

unint64_t sub_2365AA358()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_2563EDA60;
  if (!qword_2563EDA60)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2563E9C00);
    v2 = sub_23644F0B8(&qword_2563EC418, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for <A> _Coordinated<A>.ValueUpdate.Response, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2563EDA60);
  }
  return result;
}

unint64_t sub_2365AA3D4()
{
  unint64_t result;

  result = qword_2563EDA68;
  if (!qword_2563EDA68)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CADBC, &type metadata for MachSetupMessage.CoordinatedModelUpdateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDA68);
  }
  return result;
}

unint64_t sub_2365AA418()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_2563EDA70;
  if (!qword_2563EDA70)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2563E9BF0);
    v2 = sub_23644F0B8(&qword_2563EC418, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for <A> _Coordinated<A>.ValueUpdate, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2563EDA70);
  }
  return result;
}

unint64_t sub_2365AA494()
{
  unint64_t result;

  result = qword_2563EDA78;
  if (!qword_2563EDA78)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CAD6C, &type metadata for MachSetupMessage.ReportCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDA78);
  }
  return result;
}

unint64_t sub_2365AA4D8()
{
  unint64_t result;

  result = qword_2563EDA80;
  if (!qword_2563EDA80)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CAD1C, &type metadata for MachSetupMessage.SetupCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDA80);
  }
  return result;
}

unint64_t sub_2365AA51C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_2563EDAC0;
  if (!qword_2563EDAC0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2563E9C00);
    v2 = sub_23644F0B8(&qword_2563EC430, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for <A> _Coordinated<A>.ValueUpdate.Response, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2563EDAC0);
  }
  return result;
}

unint64_t sub_2365AA598()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_2563EDAC8;
  if (!qword_2563EDAC8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2563E9BF0);
    v2 = sub_23644F0B8(&qword_2563EC430, type metadata accessor for SetupModel, (uint64_t)&protocol conformance descriptor for SetupModel);
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for <A> _Coordinated<A>.ValueUpdate, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2563EDAC8);
  }
  return result;
}

unint64_t sub_2365AA614()
{
  unint64_t result;

  result = qword_2563EDB20;
  if (!qword_2563EDB20)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CACCC, &type metadata for SetupError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDB20);
  }
  return result;
}

unint64_t sub_2365AA658()
{
  unint64_t result;

  result = qword_2563EDB28;
  if (!qword_2563EDB28)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CAC7C, &type metadata for SetupError.NestedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDB28);
  }
  return result;
}

unint64_t sub_2365AA69C()
{
  unint64_t result;

  result = qword_2563EDB30;
  if (!qword_2563EDB30)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CAC2C, &type metadata for SetupError.ExistingUserProfileCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDB30);
  }
  return result;
}

unint64_t sub_2365AA6E0()
{
  unint64_t result;

  result = qword_2563EDB38;
  if (!qword_2563EDB38)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CABDC, &type metadata for SetupError.BleClientInterceptedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDB38);
  }
  return result;
}

unint64_t sub_2365AA724()
{
  unint64_t result;

  result = qword_2563EDB40;
  if (!qword_2563EDB40)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CAB8C, &type metadata for SetupError.MissingRequiredAccountsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDB40);
  }
  return result;
}

unint64_t sub_2365AA768()
{
  unint64_t result;

  result = qword_2563EDB48;
  if (!qword_2563EDB48)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CAB3C, &type metadata for SetupError.GenericCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDB48);
  }
  return result;
}

unint64_t sub_2365AA7AC()
{
  unint64_t result;

  result = qword_2563EDB50;
  if (!qword_2563EDB50)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CAAEC, &type metadata for SetupError.UserSkippedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDB50);
  }
  return result;
}

unint64_t sub_2365AA7F0()
{
  unint64_t result;

  result = qword_2563EDB58;
  if (!qword_2563EDB58)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CAA9C, &type metadata for SetupError.UserCancelledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDB58);
  }
  return result;
}

unint64_t sub_2365AA834()
{
  unint64_t result;

  result = qword_2563EDB60;
  if (!qword_2563EDB60)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CAA4C, &type metadata for SetupError.CancelledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDB60);
  }
  return result;
}

unint64_t sub_2365AA878()
{
  unint64_t result;

  result = qword_2563EDB68;
  if (!qword_2563EDB68)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA9FC, &type metadata for SetupError.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDB68);
  }
  return result;
}

uint64_t sub_2365AA8BC()
{
  uint64_t v0;

  sub_23645DCB0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  sub_23645DCB0(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_BYTE *)(v0 + 120));
  return swift_deallocObject();
}

uint64_t sub_2365AA900(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_23645EB14(a1, a2, a3, (uint64_t (*)(void))sub_23650D0E0, (uint64_t (*)(void))sub_23650D124, (uint64_t (*)(void))sub_2365AA91C);
}

unint64_t sub_2365AA91C()
{
  unint64_t result;

  result = qword_2563EDBC0;
  if (!qword_2563EDBC0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for MachSetupMessage, &type metadata for MachSetupMessage);
    atomic_store(result, (unint64_t *)&qword_2563EDBC0);
  }
  return result;
}

unint64_t sub_2365AA964()
{
  unint64_t result;

  result = qword_2563EDBC8;
  if (!qword_2563EDBC8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for MachSetupMessage, &type metadata for MachSetupMessage);
    atomic_store(result, (unint64_t *)&qword_2563EDBC8);
  }
  return result;
}

uint64_t sub_2365AA9A8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_23645EB14(a1, a2, a3, (uint64_t (*)(void))sub_23645EA10, (uint64_t (*)(void))sub_23645E9CC, (uint64_t (*)(void))sub_2365AA9C4);
}

unint64_t sub_2365AA9C4()
{
  unint64_t result;

  result = qword_2563EDBD0;
  if (!qword_2563EDBD0)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for SetupError, &type metadata for SetupError);
    atomic_store(result, (unint64_t *)&qword_2563EDBD0);
  }
  return result;
}

unint64_t sub_2365AAA0C()
{
  unint64_t result;

  result = qword_2563EDBD8;
  if (!qword_2563EDBD8)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for SetupError, &type metadata for SetupError);
    atomic_store(result, (unint64_t *)&qword_2563EDBD8);
  }
  return result;
}

uint64_t destroy for MachSetupMessage(uint64_t a1)
{
  return sub_23650C2A8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
}

uint64_t initializeWithCopy for MachSetupMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_BYTE *)(a2 + 80);
  sub_23650C190(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v13;
  *(_BYTE *)(a1 + 80) = v14;
  return a1;
}

uint64_t assignWithCopy for MachSetupMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v24;
  char v25;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v24 = *(_QWORD *)(a2 + 72);
  v25 = *(_BYTE *)(a2 + 80);
  sub_23650C190(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v24, v25);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 72);
  v22 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v24;
  *(_BYTE *)(a1 + 80) = v25;
  sub_23650C2A8(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  return a1;
}

uint64_t assignWithTake for MachSetupMessage(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;

  v3 = *(_BYTE *)(a2 + 80);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_BYTE *)(a1 + 80);
  v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = v3;
  sub_23650C2A8(v4, v6, v5, v7, v8, v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for MachSetupMessage(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 81))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 80);
  if (v3 <= 5)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MachSetupMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 - 251;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 81) = 0;
    if (a2)
      *(_BYTE *)(result + 80) = -(char)a2;
  }
  return result;
}

uint64_t sub_2365AAD38(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 80) <= 4u)
    return *(unsigned __int8 *)(a1 + 80);
  else
    return (*(_DWORD *)a1 + 5);
}

uint64_t sub_2365AAD50(uint64_t result, unsigned int a2)
{
  if (a2 >= 5)
  {
    *(_QWORD *)result = a2 - 5;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)(result + 72) = 0;
    LOBYTE(a2) = 5;
  }
  *(_BYTE *)(result + 80) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MachSetupMessage()
{
  return &type metadata for MachSetupMessage;
}

uint64_t destroy for SetupError(uint64_t a1)
{
  return sub_23645DCB0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
}

uint64_t initializeWithCopy for SetupError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  sub_23645DC04(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for SetupError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  sub_23645DC04(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v16 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v9;
  sub_23645DCB0(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

uint64_t assignWithTake for SetupError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;

  v3 = *(_BYTE *)(a2 + 48);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v11 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v3;
  sub_23645DCB0(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for SetupError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SetupError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = -(char)a2;
  }
  return result;
}

uint64_t sub_2365AAF9C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 48) <= 3u)
    return *(unsigned __int8 *)(a1 + 48);
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t sub_2365AAFB4(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(_QWORD *)result = a2 - 4;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)(result + 40) = 0;
    LOBYTE(a2) = 4;
  }
  *(_BYTE *)(result + 48) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SetupError()
{
  return &type metadata for SetupError;
}

uint64_t getEnumTagSinglePayload for SetupError.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SetupError.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_2365AB0C8 + 4 * byte_2365C9B13[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_2365AB0FC + 4 * byte_2365C9B0E[v4]))();
}

uint64_t sub_2365AB0FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2365AB104(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2365AB10CLL);
  return result;
}

uint64_t sub_2365AB118(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2365AB120);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_2365AB124(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2365AB12C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SetupError.CodingKeys()
{
  return &type metadata for SetupError.CodingKeys;
}

ValueMetadata *type metadata accessor for SetupError.UnknownCodingKeys()
{
  return &type metadata for SetupError.UnknownCodingKeys;
}

ValueMetadata *type metadata accessor for SetupError.CancelledCodingKeys()
{
  return &type metadata for SetupError.CancelledCodingKeys;
}

ValueMetadata *type metadata accessor for SetupError.UserCancelledCodingKeys()
{
  return &type metadata for SetupError.UserCancelledCodingKeys;
}

ValueMetadata *type metadata accessor for SetupError.UserSkippedCodingKeys()
{
  return &type metadata for SetupError.UserSkippedCodingKeys;
}

uint64_t storeEnumTagSinglePayload for SetupError.GenericCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2365AB1D4 + 4 * byte_2365C9B1D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2365AB208 + 4 * byte_2365C9B18[v4]))();
}

uint64_t sub_2365AB208(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2365AB210(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2365AB218);
  return result;
}

uint64_t sub_2365AB224(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2365AB22CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2365AB230(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2365AB238(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SetupError.GenericCodingKeys()
{
  return &type metadata for SetupError.GenericCodingKeys;
}

ValueMetadata *type metadata accessor for SetupError.MissingRequiredAccountsCodingKeys()
{
  return &type metadata for SetupError.MissingRequiredAccountsCodingKeys;
}

ValueMetadata *type metadata accessor for SetupError.BleClientInterceptedCodingKeys()
{
  return &type metadata for SetupError.BleClientInterceptedCodingKeys;
}

ValueMetadata *type metadata accessor for SetupError.ExistingUserProfileCodingKeys()
{
  return &type metadata for SetupError.ExistingUserProfileCodingKeys;
}

uint64_t storeEnumTagSinglePayload for SetupError.NestedCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2365AB2D4 + 4 * byte_2365C9B27[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2365AB308 + 4 * byte_2365C9B22[v4]))();
}

uint64_t sub_2365AB308(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2365AB310(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2365AB318);
  return result;
}

uint64_t sub_2365AB324(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2365AB32CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2365AB330(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2365AB338(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SetupError.NestedCodingKeys()
{
  return &type metadata for SetupError.NestedCodingKeys;
}

uint64_t storeEnumTagSinglePayload for MachSetupMessage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_2365AB3A0 + 4 * byte_2365C9B31[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_2365AB3D4 + 4 * byte_2365C9B2C[v4]))();
}

uint64_t sub_2365AB3D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2365AB3DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2365AB3E4);
  return result;
}

uint64_t sub_2365AB3F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2365AB3F8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_2365AB3FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2365AB404(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MachSetupMessage.CodingKeys()
{
  return &type metadata for MachSetupMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for MachSetupMessage.SetupCodingKeys()
{
  return &type metadata for MachSetupMessage.SetupCodingKeys;
}

ValueMetadata *type metadata accessor for MachSetupMessage.ReportCodingKeys()
{
  return &type metadata for MachSetupMessage.ReportCodingKeys;
}

ValueMetadata *type metadata accessor for MachSetupMessage.CoordinatedModelUpdateCodingKeys()
{
  return &type metadata for MachSetupMessage.CoordinatedModelUpdateCodingKeys;
}

ValueMetadata *type metadata accessor for MachSetupMessage.CoordinatedModelResponseCodingKeys()
{
  return &type metadata for MachSetupMessage.CoordinatedModelResponseCodingKeys;
}

ValueMetadata *type metadata accessor for MachSetupMessage.ReceiptCodingKeys()
{
  return &type metadata for MachSetupMessage.ReceiptCodingKeys;
}

uint64_t _s12AppleIDSetup10SetupErrorO33MissingRequiredAccountsCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2365AB4B0 + 4 * byte_2365C9B36[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2365AB4D0 + 4 * byte_2365C9B3B[v4]))();
}

_BYTE *sub_2365AB4B0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2365AB4D0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2365AB4D8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2365AB4E0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2365AB4E8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2365AB4F0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MachSetupMessage.FailureCodingKeys()
{
  return &type metadata for MachSetupMessage.FailureCodingKeys;
}

unint64_t sub_2365AB510()
{
  unint64_t result;

  result = qword_2563EDBE0;
  if (!qword_2563EDBE0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA0C4, &type metadata for MachSetupMessage.FailureCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDBE0);
  }
  return result;
}

unint64_t sub_2365AB558()
{
  unint64_t result;

  result = qword_2563EDBE8;
  if (!qword_2563EDBE8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA1CC, &type metadata for MachSetupMessage.CoordinatedModelResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDBE8);
  }
  return result;
}

unint64_t sub_2365AB5A0()
{
  unint64_t result;

  result = qword_2563EDBF0;
  if (!qword_2563EDBF0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA284, &type metadata for MachSetupMessage.CoordinatedModelUpdateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDBF0);
  }
  return result;
}

unint64_t sub_2365AB5E8()
{
  unint64_t result;

  result = qword_2563EDBF8;
  if (!qword_2563EDBF8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA33C, &type metadata for MachSetupMessage.ReportCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDBF8);
  }
  return result;
}

unint64_t sub_2365AB630()
{
  unint64_t result;

  result = qword_2563EDC00;
  if (!qword_2563EDC00)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA3F4, &type metadata for MachSetupMessage.SetupCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDC00);
  }
  return result;
}

unint64_t sub_2365AB678()
{
  unint64_t result;

  result = qword_2563EDC08;
  if (!qword_2563EDC08)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA4AC, &type metadata for MachSetupMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDC08);
  }
  return result;
}

unint64_t sub_2365AB6C0()
{
  unint64_t result;

  result = qword_2563EDC10;
  if (!qword_2563EDC10)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA564, &type metadata for SetupError.NestedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDC10);
  }
  return result;
}

unint64_t sub_2365AB708()
{
  unint64_t result;

  result = qword_2563EDC18;
  if (!qword_2563EDC18)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA61C, &type metadata for SetupError.ExistingUserProfileCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDC18);
  }
  return result;
}

unint64_t sub_2365AB750()
{
  unint64_t result;

  result = qword_2563EDC20;
  if (!qword_2563EDC20)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA724, &type metadata for SetupError.MissingRequiredAccountsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDC20);
  }
  return result;
}

unint64_t sub_2365AB798()
{
  unint64_t result;

  result = qword_2563EDC28;
  if (!qword_2563EDC28)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA7DC, &type metadata for SetupError.GenericCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDC28);
  }
  return result;
}

unint64_t sub_2365AB7E0()
{
  unint64_t result;

  result = qword_2563EDC30;
  if (!qword_2563EDC30)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA9D4, &type metadata for SetupError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDC30);
  }
  return result;
}

unint64_t sub_2365AB828()
{
  unint64_t result;

  result = qword_2563EDC38;
  if (!qword_2563EDC38)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA8F4, &type metadata for SetupError.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDC38);
  }
  return result;
}

unint64_t sub_2365AB870()
{
  unint64_t result;

  result = qword_2563EDC40;
  if (!qword_2563EDC40)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA91C, &type metadata for SetupError.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDC40);
  }
  return result;
}

unint64_t sub_2365AB8B8()
{
  unint64_t result;

  result = qword_2563EDC48;
  if (!qword_2563EDC48)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA8A4, &type metadata for SetupError.CancelledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDC48);
  }
  return result;
}

unint64_t sub_2365AB900()
{
  unint64_t result;

  result = qword_2563EDC50;
  if (!qword_2563EDC50)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA8CC, &type metadata for SetupError.CancelledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDC50);
  }
  return result;
}

unint64_t sub_2365AB948()
{
  unint64_t result;

  result = qword_2563EDC58;
  if (!qword_2563EDC58)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA854, &type metadata for SetupError.UserCancelledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDC58);
  }
  return result;
}

unint64_t sub_2365AB990()
{
  unint64_t result;

  result = qword_2563EDC60;
  if (!qword_2563EDC60)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA87C, &type metadata for SetupError.UserCancelledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDC60);
  }
  return result;
}

unint64_t sub_2365AB9D8()
{
  unint64_t result;

  result = qword_2563EDC68;
  if (!qword_2563EDC68)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA804, &type metadata for SetupError.UserSkippedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDC68);
  }
  return result;
}

unint64_t sub_2365ABA20()
{
  unint64_t result;

  result = qword_2563EDC70;
  if (!qword_2563EDC70)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA82C, &type metadata for SetupError.UserSkippedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDC70);
  }
  return result;
}

unint64_t sub_2365ABA68()
{
  unint64_t result;

  result = qword_2563EDC78;
  if (!qword_2563EDC78)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA74C, &type metadata for SetupError.GenericCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDC78);
  }
  return result;
}

unint64_t sub_2365ABAB0()
{
  unint64_t result;

  result = qword_2563EDC80;
  if (!qword_2563EDC80)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA774, &type metadata for SetupError.GenericCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDC80);
  }
  return result;
}

unint64_t sub_2365ABAF8()
{
  unint64_t result;

  result = qword_2563EDC88;
  if (!qword_2563EDC88)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA694, &type metadata for SetupError.MissingRequiredAccountsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDC88);
  }
  return result;
}

unint64_t sub_2365ABB40()
{
  unint64_t result;

  result = qword_2563EDC90;
  if (!qword_2563EDC90)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA6BC, &type metadata for SetupError.MissingRequiredAccountsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDC90);
  }
  return result;
}

unint64_t sub_2365ABB88()
{
  unint64_t result;

  result = qword_2563EDC98;
  if (!qword_2563EDC98)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA644, &type metadata for SetupError.BleClientInterceptedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDC98);
  }
  return result;
}

unint64_t sub_2365ABBD0()
{
  unint64_t result;

  result = qword_2563EDCA0;
  if (!qword_2563EDCA0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA66C, &type metadata for SetupError.BleClientInterceptedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDCA0);
  }
  return result;
}

unint64_t sub_2365ABC18()
{
  unint64_t result;

  result = qword_2563EDCA8;
  if (!qword_2563EDCA8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA58C, &type metadata for SetupError.ExistingUserProfileCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDCA8);
  }
  return result;
}

unint64_t sub_2365ABC60()
{
  unint64_t result;

  result = qword_2563EDCB0;
  if (!qword_2563EDCB0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA5B4, &type metadata for SetupError.ExistingUserProfileCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDCB0);
  }
  return result;
}

unint64_t sub_2365ABCA8()
{
  unint64_t result;

  result = qword_2563EDCB8;
  if (!qword_2563EDCB8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA4D4, &type metadata for SetupError.NestedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDCB8);
  }
  return result;
}

unint64_t sub_2365ABCF0()
{
  unint64_t result;

  result = qword_2563EDCC0;
  if (!qword_2563EDCC0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA4FC, &type metadata for SetupError.NestedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDCC0);
  }
  return result;
}

unint64_t sub_2365ABD38()
{
  unint64_t result;

  result = qword_2563EDCC8;
  if (!qword_2563EDCC8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA944, &type metadata for SetupError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDCC8);
  }
  return result;
}

unint64_t sub_2365ABD80()
{
  unint64_t result;

  result = qword_2563EDCD0;
  if (!qword_2563EDCD0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA96C, &type metadata for SetupError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDCD0);
  }
  return result;
}

unint64_t sub_2365ABDC8()
{
  unint64_t result;

  result = qword_2563EDCD8;
  if (!qword_2563EDCD8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA364, &type metadata for MachSetupMessage.SetupCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDCD8);
  }
  return result;
}

unint64_t sub_2365ABE10()
{
  unint64_t result;

  result = qword_2563EDCE0;
  if (!qword_2563EDCE0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA38C, &type metadata for MachSetupMessage.SetupCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDCE0);
  }
  return result;
}

unint64_t sub_2365ABE58()
{
  unint64_t result;

  result = qword_2563EDCE8;
  if (!qword_2563EDCE8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA2AC, &type metadata for MachSetupMessage.ReportCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDCE8);
  }
  return result;
}

unint64_t sub_2365ABEA0()
{
  unint64_t result;

  result = qword_2563EDCF0;
  if (!qword_2563EDCF0)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA2D4, &type metadata for MachSetupMessage.ReportCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDCF0);
  }
  return result;
}

unint64_t sub_2365ABEE8()
{
  unint64_t result;

  result = qword_2563EDCF8;
  if (!qword_2563EDCF8)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA1F4, &type metadata for MachSetupMessage.CoordinatedModelUpdateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDCF8);
  }
  return result;
}

unint64_t sub_2365ABF30()
{
  unint64_t result;

  result = qword_2563EDD00;
  if (!qword_2563EDD00)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA21C, &type metadata for MachSetupMessage.CoordinatedModelUpdateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDD00);
  }
  return result;
}

unint64_t sub_2365ABF78()
{
  unint64_t result;

  result = qword_2563EDD08;
  if (!qword_2563EDD08)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA13C, &type metadata for MachSetupMessage.CoordinatedModelResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDD08);
  }
  return result;
}

unint64_t sub_2365ABFC0()
{
  unint64_t result;

  result = qword_2563EDD10;
  if (!qword_2563EDD10)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA164, &type metadata for MachSetupMessage.CoordinatedModelResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDD10);
  }
  return result;
}

unint64_t sub_2365AC008()
{
  unint64_t result;

  result = qword_2563EDD18;
  if (!qword_2563EDD18)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA0EC, &type metadata for MachSetupMessage.ReceiptCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDD18);
  }
  return result;
}

unint64_t sub_2365AC050()
{
  unint64_t result;

  result = qword_2563EDD20;
  if (!qword_2563EDD20)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA114, &type metadata for MachSetupMessage.ReceiptCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDD20);
  }
  return result;
}

unint64_t sub_2365AC098()
{
  unint64_t result;

  result = qword_2563EDD28;
  if (!qword_2563EDD28)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA034, &type metadata for MachSetupMessage.FailureCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDD28);
  }
  return result;
}

unint64_t sub_2365AC0E0()
{
  unint64_t result;

  result = qword_2563EDD30;
  if (!qword_2563EDD30)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA05C, &type metadata for MachSetupMessage.FailureCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDD30);
  }
  return result;
}

unint64_t sub_2365AC128()
{
  unint64_t result;

  result = qword_2563EDD38;
  if (!qword_2563EDD38)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA41C, &type metadata for MachSetupMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDD38);
  }
  return result;
}

unint64_t sub_2365AC170()
{
  unint64_t result;

  result = qword_2563EDD40;
  if (!qword_2563EDD40)
  {
    result = MEMORY[0x23B7F5164](&unk_2365CA444, &type metadata for MachSetupMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2563EDD40);
  }
  return result;
}

uint64_t sub_2365AC1B4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7075746573 && a2 == 0xE500000000000000;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74726F706572 && a2 == 0xE600000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000002365CBA90 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000002365CBAB0 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x74706965636572 && a2 == 0xE700000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6572756C696166 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_2365AC418(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E776F6E6B6E75 && a2 == 0xE700000000000000;
  if (v2 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C6C65636E6163 && a2 == 0xE900000000000064 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x636E614372657375 && a2 == 0xED000064656C6C65 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x70696B5372657375 && a2 == 0xEB00000000646570 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x636972656E6567 && a2 == 0xE700000000000000 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000002365CBAD0 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000002365CBAF0 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000002365CE5A0 || (sub_2365B08CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x64657473656ELL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    v6 = sub_2365B08CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

unint64_t sub_2365AC7E8()
{
  unint64_t result;

  result = qword_2563EDD48;
  if (!qword_2563EDD48)
  {
    result = MEMORY[0x23B7F5164](&protocol conformance descriptor for SetupError, &type metadata for SetupError);
    atomic_store(result, (unint64_t *)&qword_2563EDD48);
  }
  return result;
}

uint64_t sub_2365AC82C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;

  v13 = *(_QWORD *)(a1 + 88);
  v2 = *(_QWORD *)(a1 + 104);
  v12 = *(_QWORD *)(a1 + 96);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 152);
  v9 = *(_QWORD *)(a1 + 160);
  v10 = *(_BYTE *)(a1 + 168);
  sub_23650C2A8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
  sub_23650C2A8(v13, v12, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t AISSetupAnalyticsEvent.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  AISSetupAnalyticsEvent.init()();
  return v0;
}

uint64_t sub_2365AC91C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  int v34;
  id v35;
  char v36;
  uint64_t result;
  double v38;
  id v39;
  uint64_t v40;
  char isUniquelyReferenced_nonNull_native;
  void (*v42)(char *, uint64_t);
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;

  v1 = v0;
  v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6FA0);
  v2 = MEMORY[0x24BDAC7A8](v45);
  v44 = (uint64_t)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v43 - v5;
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v43 - v7;
  v9 = sub_2365AF9A8();
  v10 = *(_QWORD **)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v43 - v14;
  v16 = sub_236466BCC(MEMORY[0x24BEE4AF8]);
  v17 = v1 + OBJC_IVAR____TtC12AppleIDSetup22AISSetupAnalyticsEvent_startDate;
  swift_beginAccess();
  sub_2364AB468(v17, (uint64_t)v8);
  v18 = (unsigned int (*)(char *, uint64_t, uint64_t))v10[6];
  if (v18(v8, 1, v9) == 1)
  {
    v6 = v8;
    goto LABEL_5;
  }
  v43 = v16;
  v19 = (void (*)(char *, char *, uint64_t))v10[4];
  v19(v15, v8, v9);
  v20 = v1 + OBJC_IVAR____TtC12AppleIDSetup22AISSetupAnalyticsEvent_endDate;
  swift_beginAccess();
  sub_2364AB468(v20, (uint64_t)v6);
  if (v18(v6, 1, v9) != 1)
  {
    v19(v13, v6, v9);
    result = sub_2365AF96C();
    if ((~*(_QWORD *)&v38 & 0x7FF0000000000000) != 0)
    {
      if (v38 > -9.22337204e18)
      {
        if (v38 < 9.22337204e18)
        {
          v39 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, (uint64_t)v38);
          v40 = v43;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v47 = v40;
          sub_236469E90((uint64_t)v39, 0x6E6F697461727564, 0xE800000000000000, isUniquelyReferenced_nonNull_native);
          v16 = v47;
          swift_bridgeObjectRelease();
          v42 = (void (*)(char *, uint64_t))v10[1];
          v42(v13, v9);
          v42(v15, v9);
          if (!*(_QWORD *)(v1 + 24))
            goto LABEL_12;
          goto LABEL_11;
        }
LABEL_22:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_22;
  }
  ((void (*)(char *, uint64_t))v10[1])(v15, v9);
  v16 = v43;
LABEL_5:
  sub_23654AD6C((uint64_t)v6);
  if (qword_2542A79D8 != -1)
    swift_once();
  v21 = sub_2365AFC00();
  __swift_project_value_buffer(v21, (uint64_t)qword_2542A79C0);
  swift_retain_n();
  v22 = sub_2365AFBE8();
  v23 = sub_2365B03B0();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = swift_slowAlloc();
    v25 = swift_slowAlloc();
    v48 = v25;
    *(_DWORD *)v24 = 136315394;
    v26 = v44;
    sub_2364AB468(v17, v44);
    v27 = sub_2365B0080();
    v47 = sub_236468D88(v27, v28, (uint64_t *)&v48);
    sub_2365B04A0();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2080;
    v29 = v1 + OBJC_IVAR____TtC12AppleIDSetup22AISSetupAnalyticsEvent_endDate;
    swift_beginAccess();
    sub_2364AB468(v29, v26);
    v30 = sub_2365B0080();
    v46 = sub_236468D88(v30, v31, (uint64_t *)&v48);
    sub_2365B04A0();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23644B000, v22, v23, "Unable to calculate duration for AISSetupAnalyticsEvent \nstartDate: (%s) \nendDate: (%s)", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B7F5254](v25, -1, -1);
    MEMORY[0x23B7F5254](v24, -1, -1);

    if (!*(_QWORD *)(v1 + 24))
      goto LABEL_12;
    goto LABEL_11;
  }

  swift_release_n();
  if (*(_QWORD *)(v1 + 24))
  {
LABEL_11:
    swift_bridgeObjectRetain();
    v32 = sub_2365B0038();
    v33 = swift_isUniquelyReferenced_nonNull_native();
    v48 = v16;
    sub_236469E90(v32, 0x43746E756F636361, 0xEC0000007373616CLL, v33);
    v16 = v48;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_12:
  v34 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC12AppleIDSetup22AISSetupAnalyticsEvent_didSucceed);
  if (v34 != 2)
  {
    v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithBool_, v34 & 1);
    v36 = swift_isUniquelyReferenced_nonNull_native();
    v48 = v16;
    sub_236469E90((uint64_t)v35, 0x6563637553646964, 0xEA00000000006465, v36);
    v16 = v48;
    swift_bridgeObjectRelease();
  }
  return v16;
}

uint64_t _s12AppleIDSetup22AISSetupAnalyticsEventC4nameSSvg_0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12AppleIDSetup22AISSetupAnalyticsEvent_name);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AISSetupAnalyticsEvent.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  v1 = v0 + OBJC_IVAR____TtC12AppleIDSetup22AISSetupAnalyticsEvent_startDate;
  v2 = sub_2365AF9A8();
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtC12AppleIDSetup22AISSetupAnalyticsEvent_endDate, 1, 1, v2);
  *(_BYTE *)(v0 + OBJC_IVAR____TtC12AppleIDSetup22AISSetupAnalyticsEvent_didSucceed) = 0;
  v4 = OBJC_IVAR____TtC12AppleIDSetup22AISSetupAnalyticsEvent_analytics;
  type metadata accessor for AISAnalytics();
  *(_QWORD *)(v0 + v4) = swift_initStaticObject();
  v5 = (_QWORD *)(v0 + OBJC_IVAR____TtC12AppleIDSetup22AISSetupAnalyticsEvent_name);
  *v5 = 0xD00000000000001CLL;
  v5[1] = 0x80000002365CCF50;
  return v0;
}

uint64_t sub_2365ACFD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  void *v33;
  uint64_t v34;
  id v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  _QWORD *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v55[2];
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59[3];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2563E6FA0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_2365AF9A8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for IdMSAccount();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v2 + OBJC_IVAR____TtC12AppleIDSetup22AISSetupAnalyticsEvent_didSucceed) = 1;
  if (v15)
  {
    v56 = v10;
    v57 = v8;
    v58 = v7;
    v16 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    v17 = objc_msgSend(v16, sel_sharedInstance);
    v18 = (void *)sub_2365B0038();
    v19 = objc_msgSend(v17, sel_authKitAccountWithAltDSID_, v18);

    if (v19)
    {
      ACAccount.into(with:)(v17, v13);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();

      v28 = objc_msgSend(v16, sel_sharedInstance);
      v29 = *((_QWORD *)v13 + 1);
      v30 = *((_QWORD *)v13 + 2);
      v31 = *((_QWORD *)v13 + 9);
      v59[0] = *(_QWORD *)v13;
      v59[1] = v29;
      v59[2] = v30;
      v32 = *(_OWORD *)(v13 + 40);
      v60 = *(_OWORD *)(v13 + 24);
      v61 = v32;
      v62 = *(_OWORD *)(v13 + 56);
      v33 = (void *)v60;
      v63 = v31;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v55[1] = v33;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v55[0] = sub_2364A6998(v59, v28);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v48 = v55[0];
      sub_2365AD6D8(v55[0]);
      v49 = v56;
      sub_2365AF99C();
      v51 = v57;
      v50 = v58;
      (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v6, v49, v58);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v6, 0, 1, v50);
      v52 = v2 + OBJC_IVAR____TtC12AppleIDSetup22AISSetupAnalyticsEvent_endDate;
      swift_beginAccess();
      sub_23650BFFC((uint64_t)v6, v52);
      swift_endAccess();
      v53 = swift_retain();
      sub_23650C594(v53);

      swift_release();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v49, v50);
      return sub_2364A533C((uint64_t)v13);
    }
    else
    {
      sub_2364A6D58();
      v26 = (void *)swift_allocError();
      *(_QWORD *)v27 = v14;
      *(_QWORD *)(v27 + 8) = v15;
      *(_BYTE *)(v27 + 16) = 1;
      swift_bridgeObjectRetain();
      swift_willThrow();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();

      if (qword_2563E42D0 != -1)
        swift_once();
      v34 = sub_2365AFC00();
      __swift_project_value_buffer(v34, (uint64_t)qword_2563E60D8);
      v35 = v26;
      v36 = v26;
      v37 = sub_2365AFBE8();
      v38 = sub_2365B0398();
      if (os_log_type_enabled(v37, v38))
      {
        v39 = (uint8_t *)swift_slowAlloc();
        v40 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v39 = 138412290;
        v41 = v26;
        v42 = _swift_stdlib_bridgeErrorToNSError();
        v59[0] = v42;
        sub_2365B04A0();
        *v40 = v42;

        _os_log_impl(&dword_23644B000, v37, v38, "Missing account class found for the account: %@", v39, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9960);
        swift_arrayDestroy();
        MEMORY[0x23B7F5254](v40, -1, -1);
        MEMORY[0x23B7F5254](v39, -1, -1);
      }
      else
      {

      }
      v44 = v57;
      v43 = v58;
      v45 = v56;

      sub_2365AF99C();
      (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v6, v45, v43);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v6, 0, 1, v43);
      v46 = v2 + OBJC_IVAR____TtC12AppleIDSetup22AISSetupAnalyticsEvent_endDate;
      swift_beginAccess();
      sub_23650BFFC((uint64_t)v6, v46);
      swift_endAccess();
      v47 = swift_retain();
      sub_23650C594(v47);
      swift_release();

      return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v45, v43);
    }
  }
  else
  {
    if (qword_2563E42D0 != -1)
      swift_once();
    v20 = sub_2365AFC00();
    __swift_project_value_buffer(v20, (uint64_t)qword_2563E60D8);
    v21 = sub_2365AFBE8();
    v22 = sub_2365B0398();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v23 = 0;
      _os_log_impl(&dword_23644B000, v21, v22, "Setup report is missing altDSID. Ending analytics event with missing account class.", v23, 2u);
      MEMORY[0x23B7F5254](v23, -1, -1);
    }

    sub_2365AF99C();
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v6, v10, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    v24 = v2 + OBJC_IVAR____TtC12AppleIDSetup22AISSetupAnalyticsEvent_endDate;
    swift_beginAccess();
    sub_23650BFFC((uint64_t)v6, v24);
    swift_endAccess();
    v25 = swift_retain();
    sub_23650C594(v25);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

id sub_2365AD6D8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  id v9;
  id result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;

  v2 = v1;
  if (objc_msgSend(a1, sel_isNull))
  {
    if (qword_2563E42D0 != -1)
      swift_once();
    v4 = sub_2365AFC00();
    __swift_project_value_buffer(v4, (uint64_t)qword_2563E60D8);
    v5 = a1;
    v6 = sub_2365AFBE8();
    v7 = sub_2365B0398();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v15 = (_QWORD *)swift_slowAlloc();
      v16 = v5;
      *(_DWORD *)v8 = 138412290;
      v9 = v5;
      sub_2365B04A0();
      *v15 = v5;

      _os_log_impl(&dword_23644B000, v6, v7, "Missing account class found for the account %@", v8, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2563E9960);
      swift_arrayDestroy();
      MEMORY[0x23B7F5254](v15, -1, -1);
      MEMORY[0x23B7F5254](v8, -1, -1);

    }
    else
    {

    }
  }
  result = objc_msgSend(a1, sel_aa_accountClass, v15, v16);
  if (result)
  {
    v11 = result;
    v12 = sub_2365B005C();
    v14 = v13;

    *(_QWORD *)(v2 + 16) = v12;
    *(_QWORD *)(v2 + 24) = v14;
    return (id)swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AISSetupAnalyticsEvent.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_23654AD6C(v0 + OBJC_IVAR____TtC12AppleIDSetup22AISSetupAnalyticsEvent_startDate);
  sub_23654AD6C(v0 + OBJC_IVAR____TtC12AppleIDSetup22AISSetupAnalyticsEvent_endDate);
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AISSetupAnalyticsEvent.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_23654AD6C(v0 + OBJC_IVAR____TtC12AppleIDSetup22AISSetupAnalyticsEvent_startDate);
  sub_23654AD6C(v0 + OBJC_IVAR____TtC12AppleIDSetup22AISSetupAnalyticsEvent_endDate);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_2365AD990()
{
  return sub_2365AC91C();
}

uint64_t sub_2365AD9B0()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*v0 + OBJC_IVAR____TtC12AppleIDSetup22AISSetupAnalyticsEvent_name);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_2365AD9EC()
{
  return type metadata accessor for AISSetupAnalyticsEvent();
}

uint64_t type metadata accessor for AISSetupAnalyticsEvent()
{
  uint64_t result;

  result = qword_2563EDD90;
  if (!qword_2563EDD90)
    return swift_getSingletonMetadata();
  return result;
}

void sub_2365ADA30()
{
  unint64_t v0;

  sub_23654B4A8();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for AISSetupAnalyticsEvent()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AISSetupAnalyticsEvent.payload.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of AISSetupAnalyticsEvent.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of AISSetupAnalyticsEvent.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t sub_2365ADAFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2365B0674();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_2365ADB38(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2365B0674();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_2365ADB6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2365B0674();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_2365ADBB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2365B0674();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_2365ADBF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2365B0674();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_2365ADC38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2365B0674();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_2365ADC7C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2365ADC88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2365B0674();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_2365ADCC4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2365ADCD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2365B0674();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for CodingUserInfoKeyNotFound()
{
  uint64_t result;

  result = qword_2563EDF28;
  if (!qword_2563EDF28)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_2365ADD4C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2365B0674();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_2365ADDB4()
{
  uint64_t v0;

  v0 = sub_2365B0A4C();
  sub_2365B0A70();
  return v0;
}

uint64_t sub_2365ADDF8@<X0>(uint64_t a1@<X2>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2563E47A8);
  *a2 = a1;
  swift_bridgeObjectRetain();
  sub_2365B0578();
  swift_bridgeObjectRelease();
  sub_2365B0AE8();
  sub_2365B00B0();
  swift_bridgeObjectRelease();
  sub_2365B00B0();
  sub_2365B00B0();
  sub_2365B059C();
  v4 = *MEMORY[0x24BEE26D0];
  v5 = sub_2365B05B4();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
}

uint64_t sub_2365ADF28()
{
  sub_2365B0578();
  sub_2365B00B0();
  sub_2365B0674();
  sub_2365B065C();
  return 0;
}

uint64_t DefaultObjcArchiver.encoder.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23648D710(v1 + OBJC_IVAR____TtC12AppleIDSetup19DefaultObjcArchiver_encoder, a1);
}

id DefaultObjcArchiver.__allocating_init(requiringSecureCoding:backing:)(char a1, uint64_t a2)
{
  objc_class *v2;
  id v5;
  id v6;
  objc_super v8;

  v5 = objc_allocWithZone(v2);
  sub_23648D710(a2, (uint64_t)v5 + OBJC_IVAR____TtC12AppleIDSetup19DefaultObjcArchiver_encoder);
  v8.receiver = v5;
  v8.super_class = v2;
  v6 = objc_msgSendSuper2(&v8, sel_init);
  objc_msgSend(v6, sel_setRequiresSecureCoding_, a1 & 1);
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v6;
}

id DefaultObjcArchiver.init(requiringSecureCoding:backing:)(char a1, uint64_t a2)
{
  void *v2;
  id v5;
  objc_super v7;

  sub_23648D710(a2, (uint64_t)v2 + OBJC_IVAR____TtC12AppleIDSetup19DefaultObjcArchiver_encoder);
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for DefaultObjcArchiver();
  v5 = objc_msgSendSuper2(&v7, sel_init);
  objc_msgSend(v5, sel_setRequiresSecureCoding_, a1 & 1);
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v5;
}

uint64_t type metadata accessor for DefaultObjcArchiver()
{
  return objc_opt_self();
}

uint64_t static DefaultObjcArchiver.archivedData<A>(for:backing:)(uint64_t a1, uint64_t a2)
{
  objc_class *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  objc_super v9;
  _BYTE v10[40];

  sub_23648D710(a2, (uint64_t)v10);
  v3 = (objc_class *)type metadata accessor for DefaultObjcArchiver();
  v4 = objc_allocWithZone(v3);
  sub_23648D710((uint64_t)v10, (uint64_t)v4 + OBJC_IVAR____TtC12AppleIDSetup19DefaultObjcArchiver_encoder);
  v9.receiver = v4;
  v9.super_class = v3;
  v5 = objc_msgSendSuper2(&v9, sel_init);
  objc_msgSend(v5, sel_setRequiresSecureCoding_, 1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  objc_msgSend(v5, sel_setOutputFormat_, 200);
  objc_msgSend(v5, sel_encodeObject_forKey_, a1, *MEMORY[0x24BDD0E88]);
  objc_msgSend(v5, sel_finishEncoding);
  v6 = objc_msgSend(v5, sel_encodedData);
  v7 = sub_2365AF948();

  return v7;
}

uint64_t sub_2365AE214(uint64_t a1)
{
  void *v1;
  void *v3;
  objc_class *v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  char *v8;
  void *v9;
  id v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  objc_class *v20;
  uint64_t v22;
  objc_super v23;
  _QWORD v24[3];
  uint64_t v25;
  _QWORD v26[3];
  objc_class *v27;
  objc_super v28;

  sub_23646C4B0(a1, (uint64_t)v26, (uint64_t *)&unk_2542A8320);
  if (v27)
  {
    sub_2365AE4EC();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v3 = (void *)v24[0];
      sub_23648D710((uint64_t)v1 + OBJC_IVAR____TtC12AppleIDSetup19DefaultObjcArchiver_encoder, (uint64_t)v26);
      sub_23648D710((uint64_t)v26, (uint64_t)v24);
      v4 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(qword_2563E9498);
      v5 = objc_allocWithZone(v4);
      v6 = (_QWORD *)MEMORY[0x24BEE4EA0];
      v7 = (void **)((char *)v5 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v5) + 0x68));
      *v7 = 0;
      v8 = (char *)v5 + *(_QWORD *)((*v6 & *v5) + 0x70);
      *(_QWORD *)v8 = 0;
      v8[8] = 1;
      sub_23646C4B0((uint64_t)v24, (uint64_t)v5 + *(_QWORD *)((*v6 & *v5) + 0x60), &qword_2563E9488);
      swift_beginAccess();
      v9 = *v7;
      *v7 = v3;
      v10 = v3;
      v11 = v5;

      swift_beginAccess();
      *(_QWORD *)v8 = 0;
      v8[8] = 1;

      v23.receiver = v11;
      v23.super_class = v4;
      v12 = objc_msgSendSuper2(&v23, sel_init);

      sub_236465998((uint64_t)v24, &qword_2563E9488);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
      v27 = v4;

      v26[0] = v12;
      goto LABEL_6;
    }
  }
  else
  {
    sub_236465998((uint64_t)v26, (uint64_t *)&unk_2542A8320);
  }
  sub_23646C4B0(a1, (uint64_t)v26, (uint64_t *)&unk_2542A8320);
LABEL_6:
  sub_23646C4B0((uint64_t)v26, (uint64_t)v24, (uint64_t *)&unk_2542A8320);
  v13 = v25;
  if (v25)
  {
    v14 = __swift_project_boxed_opaque_existential_1(v24, v25);
    v15 = *(_QWORD *)(v13 - 8);
    MEMORY[0x24BDAC7A8](v14);
    v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v15 + 16))(v17);
    v18 = sub_2365B08C0();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    v18 = 0;
  }
  v19 = (void *)sub_2365B0038();
  v20 = (objc_class *)type metadata accessor for DefaultObjcArchiver();
  v28.receiver = v1;
  v28.super_class = v20;
  objc_msgSendSuper2(&v28, sel_encodeObject_forKey_, v18, v19);
  swift_unknownObjectRelease();

  return sub_236465998((uint64_t)v26, (uint64_t *)&unk_2542A8320);
}

unint64_t sub_2365AE4EC()
{
  unint64_t result;

  result = qword_2563EDF68;
  if (!qword_2563EDF68)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2563EDF68);
  }
  return result;
}

id DefaultObjcArchiver.__allocating_init(requiringSecureCoding:)(char a1)
{
  objc_class *v1;

  return objc_msgSend(objc_allocWithZone(v1), sel_initRequiringSecureCoding_, a1 & 1);
}

void DefaultObjcArchiver.init(requiringSecureCoding:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id DefaultObjcArchiver.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void DefaultObjcArchiver.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id DefaultObjcArchiver.__allocating_init(forWritingWith:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initForWritingWithMutableData_, a1);

  return v3;
}

void DefaultObjcArchiver.init(forWritingWith:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id DefaultObjcArchiver.__deallocating_deinit()
{
  return sub_236549160(type metadata accessor for DefaultObjcArchiver);
}

uint64_t sub_2365AE79C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_23648D710(*v1 + OBJC_IVAR____TtC12AppleIDSetup19DefaultObjcArchiver_encoder, a1);
}

uint64_t sub_2365AE7C4(uint64_t a1, uint64_t a2)
{
  return static DefaultObjcArchiver.archivedData<A>(for:backing:)(a1, a2);
}

uint64_t DefaultObjcUnarchiver.decoder.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23648D710(v1 + OBJC_IVAR____TtC12AppleIDSetup21DefaultObjcUnarchiver_decoder, a1);
}

id DefaultObjcUnarchiver.__allocating_init(forReadingFrom:backing:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  objc_class *v3;
  id v7;
  id v8;

  v7 = objc_allocWithZone(v3);
  v8 = sub_2365AEFF8(a1, a2, a3);
  sub_236468D44(a1, a2);
  return v8;
}

id DefaultObjcUnarchiver.init(forReadingFrom:backing:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  id v5;

  v5 = sub_2365AEFF8(a1, a2, a3);
  sub_236468D44(a1, a2);
  return v5;
}

uint64_t static DefaultObjcUnarchiver.unarchivedObject<A>(ofType:from:backing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  id v9;
  id v10;
  _BYTE v12[40];

  sub_23648D710(a4, (uint64_t)v12);
  v9 = objc_allocWithZone((Class)type metadata accessor for DefaultObjcUnarchiver());
  sub_236468CBC(a2, a3);
  v10 = sub_2365AEFF8(a2, a3, (uint64_t)v12);
  sub_236468D44(a2, a3);
  if (!v5)
  {
    objc_msgSend(v10, sel_setRequiresSecureCoding_, 1);
    objc_msgSend(v10, sel_setDecodingFailurePolicy_, 1);
    sub_2365B005C();
    a5 = sub_2365B0434();
    swift_bridgeObjectRelease();

  }
  return a5;
}

void sub_2365AE9D0(uint64_t a1@<X8>)
{
  char *v1;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  __int128 *v10;
  void **v11;
  void *v12;
  __int128 *v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  objc_super v18;
  _BYTE v19[32];

  v3 = (void *)sub_2365B0038();
  v18.receiver = v1;
  v18.super_class = (Class)type metadata accessor for DefaultObjcUnarchiver();
  v4 = objc_msgSendSuper2(&v18, sel_decodeObjectForKey_, v3);

  if (v4)
  {
    sub_2365B04C4();
    swift_unknownObjectRelease();
  }
  else
  {
    v16 = 0u;
    v17 = 0u;
  }
  sub_2365AF114((uint64_t)&v16, (uint64_t)v19);
  sub_23646C4B0((uint64_t)v19, (uint64_t)&v16, (uint64_t *)&unk_2542A8320);
  if (!*((_QWORD *)&v17 + 1))
  {
    sub_236465998((uint64_t)&v16, (uint64_t *)&unk_2542A8320);
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(qword_2563E9498);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    sub_2365AF114((uint64_t)v19, a1);
    return;
  }
  v5 = OBJC_IVAR____TtC12AppleIDSetup21DefaultObjcUnarchiver_decoder;
  v6 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v7 = (char *)v14 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v14) + 0x70);
  swift_beginAccess();
  if ((v7[8] & 1) != 0)
  {
    sub_236465998((uint64_t)v19, (uint64_t *)&unk_2542A8320);

    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else
  {
    v8 = &v1[v5];
    v15 = *(_QWORD *)v7;
    v9 = sub_2365AE4EC();
    v10 = static NSXPCListenerEndpoint.developedUnarchive(from:backing:)(&v15, v8);
    v11 = (void **)((char *)v14 + *(_QWORD *)((*v6 & *v14) + 0x68));
    swift_beginAccess();
    v12 = *v11;
    *v11 = v10;

    *(_QWORD *)v7 = 0;
    v7[8] = 1;
    *(_QWORD *)(a1 + 24) = v9;
    v13 = v10;

    *(_QWORD *)a1 = v13;
    sub_236465998((uint64_t)v19, (uint64_t *)&unk_2542A8320);
  }
}

id DefaultObjcUnarchiver.__allocating_init(forReadingFrom:)(uint64_t a1, unint64_t a2)
{
  objc_class *v2;
  objc_class *v3;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v12[2];

  v3 = v2;
  v12[1] = *(id *)MEMORY[0x24BDAC8D0];
  v6 = objc_allocWithZone(v3);
  v7 = (void *)sub_2365AF93C();
  v12[0] = 0;
  v8 = objc_msgSend(v6, sel_initForReadingFromData_error_, v7, v12);

  if (v8)
  {
    v9 = v12[0];
  }
  else
  {
    v10 = v12[0];
    sub_2365AF8F4();

    swift_willThrow();
  }
  sub_236468D44(a1, a2);
  return v8;
}

void DefaultObjcUnarchiver.init(forReadingFrom:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void DefaultObjcUnarchiver.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id DefaultObjcUnarchiver.__allocating_init(forReadingWith:)(uint64_t a1, unint64_t a2)
{
  objc_class *v2;
  id v5;
  void *v6;
  id v7;

  v5 = objc_allocWithZone(v2);
  v6 = (void *)sub_2365AF93C();
  v7 = objc_msgSend(v5, sel_initForReadingWithData_, v6);
  sub_236468D44(a1, a2);

  return v7;
}

void DefaultObjcUnarchiver.init(forReadingWith:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id DefaultObjcUnarchiver.__deallocating_deinit()
{
  return sub_236549160(type metadata accessor for DefaultObjcUnarchiver);
}

uint64_t sub_2365AEFBC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_23648D710(*v1 + OBJC_IVAR____TtC12AppleIDSetup21DefaultObjcUnarchiver_decoder, a1);
}

uint64_t sub_2365AEFE4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  return static DefaultObjcUnarchiver.unarchivedObject<A>(ofType:from:backing:)(a1, a2, a3, a4, a5);
}

id sub_2365AEFF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  objc_super v10;
  id v11[2];

  v11[1] = *(id *)MEMORY[0x24BDAC8D0];
  sub_23648D710(a3, (uint64_t)v3 + OBJC_IVAR____TtC12AppleIDSetup21DefaultObjcUnarchiver_decoder);
  v5 = (void *)sub_2365AF93C();
  v11[0] = 0;
  v10.receiver = v3;
  v10.super_class = (Class)type metadata accessor for DefaultObjcUnarchiver();
  v6 = objc_msgSendSuper2(&v10, sel_initForReadingFromData_error_, v5, v11);

  if (v6)
  {
    v7 = v11[0];
  }
  else
  {
    v8 = v11[0];
    sub_2365AF8F4();

    swift_willThrow();
  }
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v6;
}

uint64_t type metadata accessor for DefaultObjcUnarchiver()
{
  return objc_opt_self();
}

uint64_t sub_2365AF114(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542A8320);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t method lookup function for DefaultObjcArchiver()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DefaultObjcArchiver.__allocating_init(requiringSecureCoding:backing:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t method lookup function for DefaultObjcUnarchiver()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DefaultObjcUnarchiver.__allocating_init(forReadingFrom:backing:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

BOOL __isOSVersionAtLeast(int a1, int a2, int a3)
{
  BOOL v6;

  if (qword_25641F690 == -1)
  {
    v6 = _MergedGlobals < a1;
    if (_MergedGlobals > a1)
      return 1;
  }
  else
  {
    dispatch_once_f(&qword_25641F690, 0, (dispatch_function_t)compatibilityInitializeAvailabilityCheck);
    v6 = _MergedGlobals < a1;
    if (_MergedGlobals > a1)
      return 1;
  }
  if (v6)
    return 0;
  if (dword_25641F684 > a2)
    return 1;
  return dword_25641F684 >= a2 && dword_25641F688 >= a3;
}

uint64_t compatibilityInitializeAvailabilityCheck()
{
  return _initializeAvailabilityCheck(1);
}

uint64_t __isPlatformVersionAtLeast(uint64_t a1, int a2, int a3, int a4)
{
  BOOL v8;

  if (qword_25641F698 == -1)
  {
    if (qword_25641F6A0)
      return _availability_version_check();
  }
  else
  {
    dispatch_once_f(&qword_25641F698, 0, (dispatch_function_t)initializeAvailabilityCheck);
    if (qword_25641F6A0)
      return _availability_version_check();
  }
  if (qword_25641F690 == -1)
  {
    v8 = _MergedGlobals < a2;
    if (_MergedGlobals > a2)
      return 1;
  }
  else
  {
    dispatch_once_f(&qword_25641F690, 0, (dispatch_function_t)compatibilityInitializeAvailabilityCheck);
    v8 = _MergedGlobals < a2;
    if (_MergedGlobals > a2)
      return 1;
  }
  if (v8)
    return 0;
  if (dword_25641F684 > a3)
    return 1;
  return dword_25641F684 >= a3 && dword_25641F688 >= a4;
}

uint64_t initializeAvailabilityCheck()
{
  return _initializeAvailabilityCheck(0);
}

uint64_t _initializeAvailabilityCheck(uint64_t result)
{
  uint64_t (*v1)(void);
  BOOL v2;
  unsigned __int8 *v4;
  uint64_t (*v5)(_QWORD);
  unint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, _QWORD, _QWORD);
  uint64_t (*v8)(_QWORD, const char *, uint64_t, unsigned __int8 *);
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)(uint64_t);
  uint64_t (*v11)(void);
  FILE *v12;
  FILE *v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  FILE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  FILE *v27;
  unsigned int (*v28)(uint64_t, char *, uint64_t, uint64_t);
  char v29[32];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t (*)(void))qword_25641F6A0;
  if (qword_25641F6A0)
    v2 = (_DWORD)result == 0;
  else
    v2 = 0;
  if (!v2)
  {
    if (MEMORY[0x24BDAC970])
    {
      qword_25641F6A0 = (uint64_t)MEMORY[0x24BDAC970];
      v1 = MEMORY[0x24BDAC970];
    }
    if (!v1 || (_DWORD)result != 0)
    {
      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "kCFAllocatorNull");
      if (result)
      {
        v4 = *(unsigned __int8 **)result;
        result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDataCreateWithBytesNoCopy");
        if (result)
        {
          v5 = (uint64_t (*)(_QWORD))result;
          v6 = (unint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateWithData");
          result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateFromXMLData");
          if (v6 | result)
          {
            v7 = (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD))result;
            result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringCreateWithCStringNoCopy");
            if (result)
            {
              v8 = (uint64_t (*)(_QWORD, const char *, uint64_t, unsigned __int8 *))result;
              result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDictionaryGetValue");
              if (result)
              {
                v9 = (uint64_t (*)(uint64_t, uint64_t))result;
                result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFGetTypeID");
                if (result)
                {
                  v10 = (uint64_t (*)(uint64_t))result;
                  result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetTypeID");
                  if (result)
                  {
                    v11 = (uint64_t (*)(void))result;
                    result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetCString");
                    v28 = (unsigned int (*)(uint64_t, char *, uint64_t, uint64_t))result;
                    if (result)
                    {
                      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFRelease");
                      if (result)
                      {
                        v12 = (FILE *)result;
                        result = (uint64_t)fopen("/System/Library/CoreServices/SystemVersion.plist", "r");
                        if (result)
                        {
                          v13 = (FILE *)result;
                          v27 = v12;
                          fseek((FILE *)result, 0, 2);
                          v14 = MEMORY[0x23B7F4C48](v13);
                          if (v14 < 0)
                          {
                            v16 = 0;
                          }
                          else
                          {
                            v15 = v14;
                            rewind(v13);
                            v16 = malloc(v15);
                            if (v16)
                            {
                              v26 = v16;
                              if (fread(v16, 1uLL, v15, v13) == v15)
                              {
                                v17 = v5(0);
                                if (v17)
                                {
                                  v18 = v17;
                                  v19 = v13;
                                  if (v6)
                                    v20 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))v6)(0, v17, 0, 0, 0);
                                  else
                                    v20 = v7(0, v17, 0, 0);
                                  v21 = v20;
                                  if (v20)
                                  {
                                    v22 = v8(0, "ProductVersion", 1536, v4);
                                    if (v22)
                                    {
                                      v23 = v22;
                                      v24 = v9(v21, v22);
                                      ((void (*)(uint64_t))v27)(v23);
                                      if (v24)
                                      {
                                        v25 = v10(v24);
                                        if (v25 == v11())
                                        {
                                          if (v28(v24, v29, 32, 134217984))
                                            sscanf(v29, "%d.%d.%d", &_MergedGlobals, &dword_25641F684, &dword_25641F688);
                                        }
                                      }
                                    }
                                    ((void (*)(uint64_t))v27)(v21);
                                    v19 = v13;
                                  }
                                  ((void (*)(uint64_t))v27)(v18);
                                }
                                else
                                {
                                  v19 = v13;
                                }
                                v16 = v26;
                              }
                              else
                              {
                                v16 = v26;
                                v19 = v13;
                              }
                              goto LABEL_41;
                            }
                          }
                          v19 = v13;
LABEL_41:
                          free(v16);
                          return fclose(v19);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2365AF7B0()
{
  return MEMORY[0x24BDCADA0]();
}

uint64_t sub_2365AF7BC()
{
  return MEMORY[0x24BDCAE40]();
}

uint64_t sub_2365AF7C8()
{
  return MEMORY[0x24BDCAEB0]();
}

uint64_t sub_2365AF7D4()
{
  return MEMORY[0x24BDCAEE8]();
}

uint64_t sub_2365AF7E0()
{
  return MEMORY[0x24BDCB220]();
}

uint64_t sub_2365AF7EC()
{
  return MEMORY[0x24BDCB260]();
}

uint64_t sub_2365AF7F8()
{
  return MEMORY[0x24BDCB268]();
}

uint64_t sub_2365AF804()
{
  return MEMORY[0x24BDCB3B8]();
}

uint64_t sub_2365AF810()
{
  return MEMORY[0x24BDCB400]();
}

uint64_t sub_2365AF81C()
{
  return MEMORY[0x24BDCB410]();
}

uint64_t sub_2365AF828()
{
  return MEMORY[0x24BDCB9E0]();
}

uint64_t sub_2365AF834()
{
  return MEMORY[0x24BDCB9F0]();
}

uint64_t sub_2365AF840()
{
  return MEMORY[0x24BDCBBA0]();
}

uint64_t sub_2365AF84C()
{
  return MEMORY[0x24BDCBBB0]();
}

uint64_t sub_2365AF858()
{
  return MEMORY[0x24BDCBBC8]();
}

uint64_t sub_2365AF864()
{
  return MEMORY[0x24BDCBBD0]();
}

uint64_t sub_2365AF870()
{
  return MEMORY[0x24BDCBBD8]();
}

uint64_t sub_2365AF87C()
{
  return MEMORY[0x24BDCBBF0]();
}

uint64_t sub_2365AF888()
{
  return MEMORY[0x24BDCBC10]();
}

uint64_t sub_2365AF894()
{
  return MEMORY[0x24BDCC1E0]();
}

uint64_t sub_2365AF8A0()
{
  return MEMORY[0x24BDCCB50]();
}

uint64_t sub_2365AF8AC()
{
  return MEMORY[0x24BDCCBA8]();
}

uint64_t sub_2365AF8B8()
{
  return MEMORY[0x24BDCCBC8]();
}

uint64_t sub_2365AF8C4()
{
  return MEMORY[0x24BDCCC00]();
}

uint64_t sub_2365AF8D0()
{
  return MEMORY[0x24BDCCC10]();
}

uint64_t sub_2365AF8DC()
{
  return MEMORY[0x24BDCD2C0]();
}

uint64_t sub_2365AF8E8()
{
  return MEMORY[0x24BDCD2F0]();
}

uint64_t sub_2365AF8F4()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t sub_2365AF900()
{
  return MEMORY[0x24BDCDB60]();
}

uint64_t sub_2365AF90C()
{
  return MEMORY[0x24BDCDBE0]();
}

uint64_t sub_2365AF918()
{
  return MEMORY[0x24BDCDC10]();
}

uint64_t sub_2365AF924()
{
  return MEMORY[0x24BDCDC28]();
}

uint64_t sub_2365AF930()
{
  return MEMORY[0x24BDCDC40]();
}

uint64_t sub_2365AF93C()
{
  return MEMORY[0x24BDCDCA0]();
}

uint64_t sub_2365AF948()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t sub_2365AF954()
{
  return MEMORY[0x24BDCDCF8]();
}

uint64_t sub_2365AF960()
{
  return MEMORY[0x24BDCDE68]();
}

uint64_t sub_2365AF96C()
{
  return MEMORY[0x24BDCE330]();
}

uint64_t sub_2365AF978()
{
  return MEMORY[0x24BDCE5D8]();
}

uint64_t sub_2365AF984()
{
  return MEMORY[0x24BDCE780]();
}

uint64_t sub_2365AF990()
{
  return MEMORY[0x24BDCE880]();
}

uint64_t sub_2365AF99C()
{
  return MEMORY[0x24BDCE8F8]();
}

uint64_t sub_2365AF9A8()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t sub_2365AF9B4()
{
  return MEMORY[0x24BDCE998]();
}

uint64_t sub_2365AF9C0()
{
  return MEMORY[0x24BDCE9B0]();
}

uint64_t sub_2365AF9CC()
{
  return MEMORY[0x24BDCE9D0]();
}

uint64_t sub_2365AF9D8()
{
  return MEMORY[0x24BDCE9E0]();
}

uint64_t sub_2365AF9E4()
{
  return MEMORY[0x24BDCE9F8]();
}

uint64_t sub_2365AF9F0()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t sub_2365AF9FC()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t sub_2365AFA08()
{
  return MEMORY[0x24BDCEB20]();
}

uint64_t sub_2365AFA14()
{
  return MEMORY[0x24BDCEC88]();
}

uint64_t sub_2365AFA20()
{
  return MEMORY[0x24BDCED58]();
}

uint64_t sub_2365AFA2C()
{
  return MEMORY[0x24BDCEEA8]();
}

uint64_t sub_2365AFA38()
{
  return MEMORY[0x24BEE5C38]();
}

uint64_t sub_2365AFA44()
{
  return MEMORY[0x24BEE5C40]();
}

uint64_t sub_2365AFA50()
{
  return MEMORY[0x24BEE5C58]();
}

uint64_t sub_2365AFA5C()
{
  return MEMORY[0x24BEE5C60]();
}

uint64_t sub_2365AFA68()
{
  return MEMORY[0x24BE30730]();
}

uint64_t sub_2365AFA74()
{
  return MEMORY[0x24BE30740]();
}

uint64_t sub_2365AFA80()
{
  return MEMORY[0x24BE30748]();
}

uint64_t sub_2365AFA8C()
{
  return MEMORY[0x24BE30750]();
}

uint64_t sub_2365AFA98()
{
  return MEMORY[0x24BE30BE0]();
}

uint64_t sub_2365AFAA4()
{
  return MEMORY[0x24BDFC3C0]();
}

uint64_t sub_2365AFAB0()
{
  return MEMORY[0x24BDFC3D0]();
}

uint64_t sub_2365AFABC()
{
  return MEMORY[0x24BDFC3D8]();
}

uint64_t sub_2365AFAC8()
{
  return MEMORY[0x24BDFC3E0]();
}

uint64_t sub_2365AFAD4()
{
  return MEMORY[0x24BDFC3E8]();
}

uint64_t sub_2365AFAE0()
{
  return MEMORY[0x24BDFC3F0]();
}

uint64_t sub_2365AFAEC()
{
  return MEMORY[0x24BDFC3F8]();
}

uint64_t sub_2365AFAF8()
{
  return MEMORY[0x24BDFC420]();
}

uint64_t sub_2365AFB04()
{
  return MEMORY[0x24BDFC430]();
}

uint64_t sub_2365AFB10()
{
  return MEMORY[0x24BDFC440]();
}

uint64_t sub_2365AFB1C()
{
  return MEMORY[0x24BDFC448]();
}

uint64_t sub_2365AFB28()
{
  return MEMORY[0x24BE18B90]();
}

uint64_t sub_2365AFB34()
{
  return MEMORY[0x24BE18BB0]();
}

uint64_t sub_2365AFB40()
{
  return MEMORY[0x24BE18BB8]();
}

uint64_t sub_2365AFB4C()
{
  return MEMORY[0x24BE18BD8]();
}

uint64_t sub_2365AFB58()
{
  return MEMORY[0x24BE18BE0]();
}

uint64_t sub_2365AFB64()
{
  return MEMORY[0x24BEE7718]();
}

uint64_t sub_2365AFB70()
{
  return MEMORY[0x24BEE7738]();
}

uint64_t sub_2365AFB7C()
{
  return MEMORY[0x24BEE7758]();
}

uint64_t sub_2365AFB88()
{
  return MEMORY[0x24BEE77C0]();
}

uint64_t sub_2365AFB94()
{
  return MEMORY[0x24BEE77C8]();
}

uint64_t sub_2365AFBA0()
{
  return MEMORY[0x24BEE77F0]();
}

uint64_t sub_2365AFBAC()
{
  return MEMORY[0x24BEE7818]();
}

uint64_t sub_2365AFBB8()
{
  return MEMORY[0x24BEE7848]();
}

uint64_t sub_2365AFBC4()
{
  return MEMORY[0x24BEE7868]();
}

uint64_t sub_2365AFBD0()
{
  return MEMORY[0x24BEE7870]();
}

uint64_t sub_2365AFBDC()
{
  return MEMORY[0x24BEE78A0]();
}

uint64_t sub_2365AFBE8()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t sub_2365AFBF4()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t sub_2365AFC00()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t sub_2365AFC0C()
{
  return MEMORY[0x24BEE6498]();
}

uint64_t sub_2365AFC18()
{
  return MEMORY[0x24BEE64A0]();
}

uint64_t sub_2365AFC24()
{
  return MEMORY[0x24BEE64F0]();
}

uint64_t sub_2365AFC30()
{
  return MEMORY[0x24BEE6510]();
}

uint64_t sub_2365AFC3C()
{
  return MEMORY[0x24BEE6520]();
}

uint64_t sub_2365AFC48()
{
  return MEMORY[0x24BEE6530]();
}

uint64_t sub_2365AFC54()
{
  return MEMORY[0x24BEE6548]();
}

uint64_t sub_2365AFC60()
{
  return MEMORY[0x24BEE6550]();
}

uint64_t sub_2365AFC6C()
{
  return MEMORY[0x24BEE6558]();
}

uint64_t sub_2365AFC78()
{
  return MEMORY[0x24BEE6560]();
}

uint64_t sub_2365AFC84()
{
  return MEMORY[0x24BEE6568]();
}

uint64_t sub_2365AFC90()
{
  return MEMORY[0x24BEE6578]();
}

uint64_t sub_2365AFC9C()
{
  return MEMORY[0x24BEE6580]();
}

uint64_t sub_2365AFCA8()
{
  return MEMORY[0x24BEE6590]();
}

uint64_t sub_2365AFCB4()
{
  return MEMORY[0x24BEE65A8]();
}

uint64_t sub_2365AFCC0()
{
  return MEMORY[0x24BEE65B8]();
}

uint64_t sub_2365AFCCC()
{
  return MEMORY[0x24BEE6678]();
}

uint64_t sub_2365AFCD8()
{
  return MEMORY[0x24BEE66A8]();
}

uint64_t sub_2365AFCE4()
{
  return MEMORY[0x24BEE6748]();
}

uint64_t sub_2365AFCF0()
{
  return MEMORY[0x24BEE6750]();
}

uint64_t sub_2365AFCFC()
{
  return MEMORY[0x24BEE6760]();
}

uint64_t sub_2365AFD08()
{
  return MEMORY[0x24BEE6770]();
}

uint64_t sub_2365AFD14()
{
  return MEMORY[0x24BEE6780]();
}

uint64_t sub_2365AFD20()
{
  return MEMORY[0x24BEE67A0]();
}

uint64_t sub_2365AFD2C()
{
  return MEMORY[0x24BEE67A8]();
}

uint64_t sub_2365AFD38()
{
  return MEMORY[0x24BEE5458]();
}

uint64_t sub_2365AFD44()
{
  return MEMORY[0x24BEE54A0]();
}

uint64_t sub_2365AFD50()
{
  return MEMORY[0x24BEE54B0]();
}

uint64_t sub_2365AFD5C()
{
  return MEMORY[0x24BEE54C8]();
}

uint64_t sub_2365AFD68()
{
  return MEMORY[0x24BEE54F0]();
}

uint64_t sub_2365AFD74()
{
  return MEMORY[0x24BEE5500]();
}

uint64_t sub_2365AFD80()
{
  return MEMORY[0x24BDC6108]();
}

uint64_t sub_2365AFD8C()
{
  return MEMORY[0x24BDC6120]();
}

uint64_t sub_2365AFD98()
{
  return MEMORY[0x24BDC6138]();
}

uint64_t sub_2365AFDA4()
{
  return MEMORY[0x24BDC61A8]();
}

uint64_t sub_2365AFDB0()
{
  return MEMORY[0x24BDC61C8]();
}

uint64_t sub_2365AFDBC()
{
  return MEMORY[0x24BDC61D0]();
}

uint64_t sub_2365AFDC8()
{
  return MEMORY[0x24BDC61F8]();
}

uint64_t sub_2365AFDD4()
{
  return MEMORY[0x24BDC6200]();
}

uint64_t sub_2365AFDE0()
{
  return MEMORY[0x24BDC6218]();
}

uint64_t sub_2365AFDEC()
{
  return MEMORY[0x24BDC6238]();
}

uint64_t sub_2365AFDF8()
{
  return MEMORY[0x24BDC6240]();
}

uint64_t sub_2365AFE04()
{
  return MEMORY[0x24BDC6248]();
}

uint64_t sub_2365AFE10()
{
  return MEMORY[0x24BDC6250]();
}

uint64_t sub_2365AFE1C()
{
  return MEMORY[0x24BDC6258]();
}

uint64_t sub_2365AFE28()
{
  return MEMORY[0x24BDC6268]();
}

uint64_t sub_2365AFE34()
{
  return MEMORY[0x24BDC6270]();
}

uint64_t sub_2365AFE40()
{
  return MEMORY[0x24BDC6278]();
}

uint64_t sub_2365AFE4C()
{
  return MEMORY[0x24BDC6280]();
}

uint64_t sub_2365AFE58()
{
  return MEMORY[0x24BDC6370]();
}

uint64_t sub_2365AFE64()
{
  return MEMORY[0x24BDC6380]();
}

uint64_t sub_2365AFE70()
{
  return MEMORY[0x24BDC63A0]();
}

uint64_t sub_2365AFE7C()
{
  return MEMORY[0x24BDC63B0]();
}

uint64_t sub_2365AFE88()
{
  return MEMORY[0x24BDC63E0]();
}

uint64_t _s9CryptoKit13SecureEnclaveO4P256O7SigningO10PrivateKeyV12AppleIDSetupE17rawRepresentation10Foundation4DataVvg_0()
{
  return MEMORY[0x24BDC6458]();
}

uint64_t sub_2365AFEA0()
{
  return MEMORY[0x24BDC6460]();
}

uint64_t sub_2365AFEAC()
{
  return MEMORY[0x24BDC6498]();
}

uint64_t sub_2365AFEB8()
{
  return MEMORY[0x24BDC64A0]();
}

uint64_t sub_2365AFEC4()
{
  return MEMORY[0x24BDC64B0]();
}

uint64_t sub_2365AFED0()
{
  return MEMORY[0x24BDC6550]();
}

uint64_t sub_2365AFEDC()
{
  return MEMORY[0x24BDC6878]();
}

uint64_t sub_2365AFEE8()
{
  return MEMORY[0x24BDC6880]();
}

uint64_t sub_2365AFEF4()
{
  return MEMORY[0x24BDC69E0]();
}

uint64_t sub_2365AFF00()
{
  return MEMORY[0x24BDC69E8]();
}

uint64_t sub_2365AFF0C()
{
  return MEMORY[0x24BDC6A00]();
}

uint64_t sub_2365AFF18()
{
  return MEMORY[0x24BDC6A10]();
}

uint64_t sub_2365AFF24()
{
  return MEMORY[0x24BDC6A18]();
}

uint64_t sub_2365AFF30()
{
  return MEMORY[0x24BDC6A20]();
}

uint64_t sub_2365AFF3C()
{
  return MEMORY[0x24BDC6AF8]();
}

uint64_t sub_2365AFF48()
{
  return MEMORY[0x24BDCF808]();
}

uint64_t sub_2365AFF54()
{
  return MEMORY[0x24BDCF828]();
}

uint64_t sub_2365AFF60()
{
  return MEMORY[0x24BDCF830]();
}

uint64_t sub_2365AFF6C()
{
  return MEMORY[0x24BEE0270]();
}

uint64_t sub_2365AFF78()
{
  return MEMORY[0x24BEE02B0]();
}

uint64_t sub_2365AFF84()
{
  return MEMORY[0x24BEE0370]();
}

uint64_t sub_2365AFF90()
{
  return MEMORY[0x24BEE0460]();
}

uint64_t sub_2365AFF9C()
{
  return MEMORY[0x24BEE0480]();
}

uint64_t sub_2365AFFA8()
{
  return MEMORY[0x24BEE0490]();
}

uint64_t sub_2365AFFB4()
{
  return MEMORY[0x24BEE04A8]();
}

uint64_t sub_2365AFFC0()
{
  return MEMORY[0x24BEE04B0]();
}

uint64_t sub_2365AFFCC()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t sub_2365AFFD8()
{
  return MEMORY[0x24BEE0618]();
}

uint64_t sub_2365AFFE4()
{
  return MEMORY[0x24BEE07E0]();
}

uint64_t sub_2365AFFF0()
{
  return MEMORY[0x24BEE07F8]();
}

uint64_t sub_2365AFFFC()
{
  return MEMORY[0x24BEE0800]();
}

uint64_t sub_2365B0008()
{
  return MEMORY[0x24BEE0808]();
}

uint64_t sub_2365B0014()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t sub_2365B0020()
{
  return MEMORY[0x24BDCF978]();
}

uint64_t sub_2365B002C()
{
  return MEMORY[0x24BDCF990]();
}

uint64_t sub_2365B0038()
{
  return MEMORY[0x24BDCF9E0]();
}

uint64_t sub_2365B0044()
{
  return MEMORY[0x24BDCFA08]();
}

uint64_t sub_2365B0050()
{
  return MEMORY[0x24BDCFA18]();
}

uint64_t sub_2365B005C()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t sub_2365B0068()
{
  return MEMORY[0x24BDCFA78]();
}

uint64_t sub_2365B0074()
{
  return MEMORY[0x24BDCFB20]();
}

uint64_t sub_2365B0080()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t sub_2365B008C()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t sub_2365B0098()
{
  return MEMORY[0x24BEE0B68]();
}

uint64_t sub_2365B00A4()
{
  return MEMORY[0x24BEE0BB0]();
}

uint64_t sub_2365B00B0()
{
  return MEMORY[0x24BEE0BC0]();
}

uint64_t sub_2365B00BC()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t sub_2365B00C8()
{
  return MEMORY[0x24BEE0C18]();
}

uint64_t sub_2365B00D4()
{
  return MEMORY[0x24BEE0C30]();
}

uint64_t sub_2365B00E0()
{
  return MEMORY[0x24BEE0C40]();
}

uint64_t sub_2365B00EC()
{
  return MEMORY[0x24BEE0CA0]();
}

uint64_t sub_2365B00F8()
{
  return MEMORY[0x24BEE0DD0]();
}

uint64_t sub_2365B0104()
{
  return MEMORY[0x24BEE0DE8]();
}

uint64_t sub_2365B0110()
{
  return MEMORY[0x24BEE1000]();
}

uint64_t sub_2365B011C()
{
  return MEMORY[0x24BEE1048]();
}

uint64_t sub_2365B0128()
{
  return MEMORY[0x24BEE1068]();
}

uint64_t sub_2365B0134()
{
  return MEMORY[0x24BEE1070]();
}

uint64_t sub_2365B0140()
{
  return MEMORY[0x24BEE1078]();
}

uint64_t sub_2365B014C()
{
  return MEMORY[0x24BEE1080]();
}

uint64_t sub_2365B0158()
{
  return MEMORY[0x24BEE10C8]();
}

uint64_t sub_2365B0164()
{
  return MEMORY[0x24BDCFBA8]();
}

uint64_t sub_2365B0170()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t sub_2365B017C()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t sub_2365B0188()
{
  return MEMORY[0x24BEE1180]();
}

uint64_t sub_2365B0194()
{
  return MEMORY[0x24BEE11F8]();
}

uint64_t sub_2365B01A0()
{
  return MEMORY[0x24BEE1250]();
}

uint64_t sub_2365B01AC()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t sub_2365B01B8()
{
  return MEMORY[0x24BEE6820]();
}

uint64_t sub_2365B01C4()
{
  return MEMORY[0x24BEE6828]();
}

uint64_t sub_2365B01D0()
{
  return MEMORY[0x24BEE6830]();
}

uint64_t sub_2365B01DC()
{
  return MEMORY[0x24BEE6868]();
}

uint64_t sub_2365B01E8()
{
  return MEMORY[0x24BEE6920]();
}

uint64_t sub_2365B01F4()
{
  return MEMORY[0x24BEE6928]();
}

uint64_t sub_2365B0200()
{
  return MEMORY[0x24BEE6938]();
}

uint64_t sub_2365B020C()
{
  return MEMORY[0x24BEE6988]();
}

uint64_t sub_2365B0218()
{
  return MEMORY[0x24BEE6990]();
}

uint64_t sub_2365B0224()
{
  return MEMORY[0x24BEE69E8]();
}

uint64_t sub_2365B0230()
{
  return MEMORY[0x24BEE69F8]();
}

uint64_t sub_2365B023C()
{
  return MEMORY[0x24BEE6A18]();
}

uint64_t sub_2365B0248()
{
  return MEMORY[0x24BEE6A30]();
}

uint64_t sub_2365B0254()
{
  return MEMORY[0x24BEE6A38]();
}

uint64_t sub_2365B0260()
{
  return MEMORY[0x24BEE6A40]();
}

uint64_t sub_2365B026C()
{
  return MEMORY[0x24BEE6A50]();
}

uint64_t sub_2365B0278()
{
  return MEMORY[0x24BEE6A58]();
}

uint64_t sub_2365B0284()
{
  return MEMORY[0x24BEE6A78]();
}

uint64_t sub_2365B0290()
{
  return MEMORY[0x24BEE6A98]();
}

uint64_t sub_2365B029C()
{
  return MEMORY[0x24BEE6AA0]();
}

uint64_t sub_2365B02A8()
{
  return MEMORY[0x24BEE6AC0]();
}

uint64_t sub_2365B02B4()
{
  return MEMORY[0x24BEE6AD0]();
}

uint64_t sub_2365B02C0()
{
  return MEMORY[0x24BEE6B00]();
}

uint64_t sub_2365B02CC()
{
  return MEMORY[0x24BEE6B10]();
}

uint64_t sub_2365B02D8()
{
  return MEMORY[0x24BEE6B98]();
}

uint64_t sub_2365B02E4()
{
  return MEMORY[0x24BEE6BB8]();
}

uint64_t sub_2365B02F0()
{
  return MEMORY[0x24BEE6BC8]();
}

uint64_t sub_2365B02FC()
{
  return MEMORY[0x24BEE6BE8]();
}

uint64_t sub_2365B0308()
{
  return MEMORY[0x24BDCFCC0]();
}

uint64_t sub_2365B0314()
{
  return MEMORY[0x24BDCFCD0]();
}

uint64_t sub_2365B0320()
{
  return MEMORY[0x24BDCFCE8]();
}

uint64_t sub_2365B032C()
{
  return MEMORY[0x24BEE1598]();
}

uint64_t sub_2365B0338()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t sub_2365B0344()
{
  return MEMORY[0x24BEE1678]();
}

uint64_t sub_2365B0350()
{
  return MEMORY[0x24BDCFD28]();
}

uint64_t sub_2365B035C()
{
  return MEMORY[0x24BEE18D0]();
}

uint64_t sub_2365B0368()
{
  return MEMORY[0x24BEE1930]();
}

uint64_t sub_2365B0374()
{
  return MEMORY[0x24BEE19B8]();
}

uint64_t sub_2365B0380()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t sub_2365B038C()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t sub_2365B0398()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t sub_2365B03A4()
{
  return MEMORY[0x24BEE7920]();
}

uint64_t sub_2365B03B0()
{
  return MEMORY[0x24BEE7928]();
}

uint64_t sub_2365B03BC()
{
  return MEMORY[0x24BDCFFB8]();
}

uint64_t sub_2365B03C8()
{
  return MEMORY[0x24BEE5688]();
}

uint64_t sub_2365B03D4()
{
  return MEMORY[0x24BEE5760]();
}

uint64_t sub_2365B03E0()
{
  return MEMORY[0x24BEE5770]();
}

uint64_t sub_2365B03EC()
{
  return MEMORY[0x24BEE5790]();
}

uint64_t sub_2365B03F8()
{
  return MEMORY[0x24BEE57A0]();
}

uint64_t sub_2365B0404()
{
  return MEMORY[0x24BEE7940]();
}

uint64_t sub_2365B0410()
{
  return MEMORY[0x24BEE7948]();
}

uint64_t sub_2365B041C()
{
  return MEMORY[0x24BDD0170]();
}

uint64_t sub_2365B0428()
{
  return MEMORY[0x24BDD0188]();
}

uint64_t sub_2365B0434()
{
  return MEMORY[0x24BDD01A0]();
}

uint64_t sub_2365B0440()
{
  return MEMORY[0x24BDD01F8]();
}

uint64_t sub_2365B044C()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t sub_2365B0458()
{
  return MEMORY[0x24BEE5BC8]();
}

uint64_t sub_2365B0464()
{
  return MEMORY[0x24BEE7968]();
}

uint64_t sub_2365B0470()
{
  return MEMORY[0x24BEE1C58]();
}

uint64_t sub_2365B047C()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t sub_2365B0488()
{
  return MEMORY[0x24BEE1C80]();
}

uint64_t sub_2365B0494()
{
  return MEMORY[0x24BEE1E70]();
}

uint64_t sub_2365B04A0()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t sub_2365B04AC()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t sub_2365B04B8()
{
  return MEMORY[0x24BDD0638]();
}

uint64_t sub_2365B04C4()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t sub_2365B04D0()
{
  return MEMORY[0x24BEE2150]();
}

uint64_t sub_2365B04DC()
{
  return MEMORY[0x24BEE2168]();
}

uint64_t sub_2365B04E8()
{
  return MEMORY[0x24BEE22B0]();
}

uint64_t sub_2365B04F4()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t sub_2365B0500()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t sub_2365B050C()
{
  return MEMORY[0x24BEE22E0]();
}

uint64_t sub_2365B0518()
{
  return MEMORY[0x24BEE2300]();
}

uint64_t sub_2365B0524()
{
  return MEMORY[0x24BEE2358]();
}

uint64_t sub_2365B0530()
{
  return MEMORY[0x24BEE23A0]();
}

uint64_t sub_2365B053C()
{
  return MEMORY[0x24BEE23A8]();
}

uint64_t sub_2365B0548()
{
  return MEMORY[0x24BEE23E8]();
}

uint64_t sub_2365B0554()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t sub_2365B0560()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t sub_2365B056C()
{
  return MEMORY[0x24BEE24D0]();
}

uint64_t sub_2365B0578()
{
  return MEMORY[0x24BEE2510]();
}

uint64_t sub_2365B0584()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t sub_2365B0590()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t sub_2365B059C()
{
  return MEMORY[0x24BEE26E8]();
}

uint64_t sub_2365B05A8()
{
  return MEMORY[0x24BEE2700]();
}

uint64_t sub_2365B05B4()
{
  return MEMORY[0x24BEE2710]();
}

uint64_t sub_2365B05C0()
{
  return MEMORY[0x24BEE2788]();
}

uint64_t sub_2365B05CC()
{
  return MEMORY[0x24BEE2798]();
}

uint64_t sub_2365B05D8()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t sub_2365B05E4()
{
  return MEMORY[0x24BEE6D68]();
}

uint64_t sub_2365B05F0()
{
  return MEMORY[0x24BEE2908]();
}

uint64_t sub_2365B05FC()
{
  return MEMORY[0x24BEE2938]();
}

uint64_t sub_2365B0608()
{
  return MEMORY[0x24BEE2958]();
}

uint64_t sub_2365B0614()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t sub_2365B0620()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t sub_2365B062C()
{
  return MEMORY[0x24BEE6DC8]();
}

uint64_t sub_2365B0638()
{
  return MEMORY[0x24BEE6E08]();
}

uint64_t sub_2365B0644()
{
  return MEMORY[0x24BEE6E10]();
}

uint64_t sub_2365B0650()
{
  return MEMORY[0x24BEE2AE0]();
}

uint64_t sub_2365B065C()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t sub_2365B0668()
{
  return MEMORY[0x24BEE67B8]();
}

uint64_t sub_2365B0674()
{
  return MEMORY[0x24BEE2CC8]();
}

uint64_t sub_2365B0680()
{
  return MEMORY[0x24BEE2F40]();
}

uint64_t sub_2365B068C()
{
  return MEMORY[0x24BEE2F48]();
}

uint64_t sub_2365B0698()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t sub_2365B06A4()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t sub_2365B06B0()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t sub_2365B06BC()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t sub_2365B06C8()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t sub_2365B06D4()
{
  return MEMORY[0x24BEE31D0]();
}

uint64_t sub_2365B06E0()
{
  return MEMORY[0x24BEE3290]();
}

uint64_t sub_2365B06EC()
{
  return MEMORY[0x24BEE6FA8]();
}

uint64_t sub_2365B06F8()
{
  return MEMORY[0x24BEE32B8]();
}

uint64_t sub_2365B0704()
{
  return MEMORY[0x24BEE32C0]();
}

uint64_t sub_2365B0710()
{
  return MEMORY[0x24BEE32D8]();
}

uint64_t sub_2365B071C()
{
  return MEMORY[0x24BEE32E0]();
}

uint64_t sub_2365B0728()
{
  return MEMORY[0x24BEE32F8]();
}

uint64_t sub_2365B0734()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t sub_2365B0740()
{
  return MEMORY[0x24BEE3330]();
}

uint64_t sub_2365B074C()
{
  return MEMORY[0x24BEE3350]();
}

uint64_t sub_2365B0758()
{
  return MEMORY[0x24BEE3358]();
}

uint64_t sub_2365B0764()
{
  return MEMORY[0x24BEE3370]();
}

uint64_t sub_2365B0770()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t sub_2365B077C()
{
  return MEMORY[0x24BEE33A8]();
}

uint64_t sub_2365B0788()
{
  return MEMORY[0x24BEE33B0]();
}

uint64_t sub_2365B0794()
{
  return MEMORY[0x24BEE33C0]();
}

uint64_t sub_2365B07A0()
{
  return MEMORY[0x24BEE33C8]();
}

uint64_t sub_2365B07AC()
{
  return MEMORY[0x24BEE33E0]();
}

uint64_t sub_2365B07B8()
{
  return MEMORY[0x24BEE3408]();
}

uint64_t sub_2365B07C4()
{
  return MEMORY[0x24BEE3428]();
}

uint64_t sub_2365B07D0()
{
  return MEMORY[0x24BEE3430]();
}

uint64_t sub_2365B07DC()
{
  return MEMORY[0x24BEE3448]();
}

uint64_t sub_2365B07E8()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t sub_2365B07F4()
{
  return MEMORY[0x24BEE3478]();
}

uint64_t sub_2365B0800()
{
  return MEMORY[0x24BEE34A0]();
}

uint64_t sub_2365B080C()
{
  return MEMORY[0x24BEE34A8]();
}

uint64_t sub_2365B0818()
{
  return MEMORY[0x24BEE34C0]();
}

uint64_t sub_2365B0824()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t sub_2365B0830()
{
  return MEMORY[0x24BEE34F8]();
}

uint64_t sub_2365B083C()
{
  return MEMORY[0x24BEE3500]();
}

uint64_t sub_2365B0848()
{
  return MEMORY[0x24BEE3510]();
}

uint64_t sub_2365B0854()
{
  return MEMORY[0x24BEE3520]();
}

uint64_t sub_2365B0860()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t sub_2365B086C()
{
  return MEMORY[0x24BEE7040]();
}

uint64_t sub_2365B0878()
{
  return MEMORY[0x24BEE3648]();
}

uint64_t sub_2365B0884()
{
  return MEMORY[0x24BEE3658]();
}

uint64_t sub_2365B0890()
{
  return MEMORY[0x24BEE37B0]();
}

uint64_t sub_2365B089C()
{
  return MEMORY[0x24BEE37C0]();
}

uint64_t sub_2365B08A8()
{
  return MEMORY[0x24BEE3880]();
}

uint64_t sub_2365B08B4()
{
  return MEMORY[0x24BE29EA8]();
}

uint64_t sub_2365B08C0()
{
  return MEMORY[0x24BEE3A20]();
}

uint64_t sub_2365B08CC()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t sub_2365B08D8()
{
  return MEMORY[0x24BEE3A88]();
}

uint64_t sub_2365B08E4()
{
  return MEMORY[0x24BEE3AC8]();
}

uint64_t sub_2365B08F0()
{
  return MEMORY[0x24BEE3B20]();
}

uint64_t sub_2365B08FC()
{
  return MEMORY[0x24BEE3B68]();
}

uint64_t sub_2365B0908()
{
  return MEMORY[0x24BEE3BB8]();
}

uint64_t sub_2365B0914()
{
  return MEMORY[0x24BEE70E0]();
}

uint64_t sub_2365B0920()
{
  return MEMORY[0x24BEE3D98]();
}

uint64_t sub_2365B092C()
{
  return MEMORY[0x24BEE3DE0]();
}

uint64_t sub_2365B0938()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t sub_2365B0944()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t sub_2365B0950()
{
  return MEMORY[0x24BEE7110]();
}

uint64_t sub_2365B095C()
{
  return MEMORY[0x24BEE7118]();
}

uint64_t sub_2365B0968()
{
  return MEMORY[0x24BDD06D8]();
}

uint64_t sub_2365B0974()
{
  return MEMORY[0x24BDD06E0]();
}

uint64_t sub_2365B0980()
{
  return MEMORY[0x24BDD06F0]();
}

uint64_t sub_2365B098C()
{
  return MEMORY[0x24BDD0708]();
}

uint64_t sub_2365B0998()
{
  return MEMORY[0x24BE29EC8]();
}

uint64_t sub_2365B09A4()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t sub_2365B09B0()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t sub_2365B09BC()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t sub_2365B09C8()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t sub_2365B09D4()
{
  return MEMORY[0x24BEE42B8]();
}

uint64_t sub_2365B09E0()
{
  return MEMORY[0x24BEE42E0]();
}

uint64_t sub_2365B09EC()
{
  return MEMORY[0x24BEE42E8]();
}

uint64_t sub_2365B09F8()
{
  return MEMORY[0x24BEE42F8]();
}

uint64_t sub_2365B0A04()
{
  return MEMORY[0x24BEE4300]();
}

uint64_t sub_2365B0A10()
{
  return MEMORY[0x24BEE4308]();
}

uint64_t sub_2365B0A1C()
{
  return MEMORY[0x24BEE4310]();
}

uint64_t sub_2365B0A28()
{
  return MEMORY[0x24BEE4318]();
}

uint64_t sub_2365B0A34()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t sub_2365B0A40()
{
  return MEMORY[0x24BEE4408]();
}

uint64_t sub_2365B0A4C()
{
  return MEMORY[0x24BEE45E8]();
}

uint64_t sub_2365B0A58()
{
  return MEMORY[0x24BEE45F0]();
}

uint64_t sub_2365B0A64()
{
  return MEMORY[0x24BEE45F8]();
}

uint64_t sub_2365B0A70()
{
  return MEMORY[0x24BEE4600]();
}

uint64_t sub_2365B0A7C()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t sub_2365B0A88()
{
  return MEMORY[0x24BEE4620]();
}

uint64_t sub_2365B0A94()
{
  return MEMORY[0x24BEE4628]();
}

uint64_t sub_2365B0AA0()
{
  return MEMORY[0x24BEE4630]();
}

uint64_t sub_2365B0AAC()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t sub_2365B0AB8()
{
  return MEMORY[0x24BEE4830]();
}

uint64_t sub_2365B0AC4()
{
  return MEMORY[0x24BEE4870]();
}

uint64_t sub_2365B0AD0()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t sub_2365B0ADC()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t sub_2365B0AE8()
{
  return MEMORY[0x24BEE4A98]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x24BE1A1C8]();
}

uint64_t BiomeLibrary()
{
  return MEMORY[0x24BE0C258]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x24BDBB780]();
  return result;
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x24BDBC178](key, applicationID, userName, hostName);
}

uint64_t NSErrorToOSStatus()
{
  return MEMORY[0x24BE296A8]();
}

SecAccessControlRef SecAccessControlCreateWithFlags(CFAllocatorRef allocator, CFTypeRef protection, SecAccessControlCreateFlags flags, CFErrorRef *error)
{
  return (SecAccessControlRef)MEMORY[0x24BDE87A0](allocator, protection, flags, error);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

uint64_t _availability_version_check()
{
  return MEMORY[0x24BDAC970]();
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x24BDACB00](dso, description, activity, *(_QWORD *)&flags);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB68](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACC10](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x24BEE4B30]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x24BEE4B38]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADCC8](queue, block);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
  MEMORY[0x24BDADEA0](predicate, context, function);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADFE8](queue, block);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x24BDAE088](__handle, __symbol);
}

int fclose(FILE *a1)
{
  return MEMORY[0x24BDAE2E0](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x24BDAE410](__filename, __mode);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE448](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x24BDAE4D8](a1, a2, *(_QWORD *)&a3);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x24BDAE530](a1);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD408](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
  MEMORY[0x24BDAF2A0](activity, state);
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
  MEMORY[0x24BDAF2A8](state);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x24BDAFA10]();
}

void rewind(FILE *a1)
{
  MEMORY[0x24BDAFB98](a1);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAFEA0](a1, a2);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x24BEE4B78]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x24BEE71B8]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x24BEE71C0]();
}

uint64_t swift_continuation_resume()
{
  return MEMORY[0x24BEE71C8]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x24BEE71D0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x24BEE71D8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_deallocUninitializedObject()
{
  return MEMORY[0x24BEE4C20]();
}

uint64_t swift_defaultActor_deallocate()
{
  return MEMORY[0x24BEE71E0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x24BEE71E8]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x24BEE71F0]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x24BEE4C40]();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return MEMORY[0x24BEE4C70]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x24BEE4CD0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x24BEE4D18]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getFunctionTypeMetadata()
{
  return MEMORY[0x24BEE4D50]();
}

uint64_t swift_getFunctionTypeMetadata1()
{
  return MEMORY[0x24BEE4D60]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x24BEE4D88]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x24BEE4D98]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x24BEE4DF8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x24BEE4E28]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x24BEE4E40]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStaticObject()
{
  return MEMORY[0x24BEE4E50]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x24BEE4E60]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x24BEE4E68]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x24BEE4EB0]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x24BEE4ED0]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_taskGroup_wait_next_throwing()
{
  return MEMORY[0x24BEE7218]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x24BEE7230]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x24BEE4F68]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x24BEE4F88]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x24BEE4FC8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x24BEE4FD0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x24BEE4FD8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x24BEE5028]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x24BEE5030]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x24BEE5038]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x24BDB0A70](object);
}

